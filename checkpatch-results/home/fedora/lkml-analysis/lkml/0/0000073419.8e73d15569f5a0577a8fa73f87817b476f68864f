WARNING:TYPO_SPELLING: 'Shouldnt' may be misspelled - perhaps 'Shouldn't'?
#213: FILE: arch/i386/kernel/irq.c:196:
+		 * Shouldnt happen, we returned above if in_interrupt():
 		   ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:CODE_INDENT: code indent should use tabs where possible
#214: FILE: arch/i386/kernel/irq.c:197:
+^I ^I */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#214: FILE: arch/i386/kernel/irq.c:197:
+^I ^I */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#551: FILE: arch/x86_64/kernel/irq.c:148:
+ ^Iif (pending) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#551: FILE: arch/x86_64/kernel/irq.c:148:
+ ^Iif (pending) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#551: FILE: arch/x86_64/kernel/irq.c:148:
+ ^Iif (pending) {$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#563: FILE: include/asm-i386/irqflags.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#564: FILE: include/asm-i386/irqflags.h:2:
+ * include/asm-i386/irqflags.h

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:LONG_LINE: line length of 143 exceeds 100 columns
#575: FILE: include/asm-i386/irqflags.h:13:
+#define raw_local_save_flags(x)	do { typecheck(unsigned long,x); __asm__ __volatile__("pushfl ; popl %0":"=g" (x): /* no input */); } while (0)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:SPACING: space required after that ',' (ctx:VxV)
#575: FILE: include/asm-i386/irqflags.h:13:
+#define raw_local_save_flags(x)	do { typecheck(unsigned long,x); __asm__ __volatile__("pushfl ; popl %0":"=g" (x): /* no input */); } while (0)
                                	                            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#575: FILE: include/asm-i386/irqflags.h:13:
+#define raw_local_save_flags(x)	do { typecheck(unsigned long,x); __asm__ __volatile__("pushfl ; popl %0":"=g" (x): /* no input */); } while (0)
                                	                                                                        ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#575: FILE: include/asm-i386/irqflags.h:13:
+#define raw_local_save_flags(x)	do { typecheck(unsigned long,x); __asm__ __volatile__("pushfl ; popl %0":"=g" (x): /* no input */); } while (0)
                                	                                                                                 ^

WARNING:LONG_LINE: line length of 160 exceeds 100 columns
#576: FILE: include/asm-i386/irqflags.h:14:
+#define raw_local_irq_restore(x) do { typecheck(unsigned long,x); __asm__ __volatile__("pushl %0 ; popfl": /* no output */ :"g" (x):"memory", "cc"); } while (0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#576: FILE: include/asm-i386/irqflags.h:14:
+#define raw_local_irq_restore(x) do { typecheck(unsigned long,x); __asm__ __volatile__("pushl %0 ; popfl": /* no output */ :"g" (x):"memory", "cc"); } while (0)
                                                              ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#576: FILE: include/asm-i386/irqflags.h:14:
+#define raw_local_irq_restore(x) do { typecheck(unsigned long,x); __asm__ __volatile__("pushl %0 ; popfl": /* no output */ :"g" (x):"memory", "cc"); } while (0)
                                                                                                          ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#576: FILE: include/asm-i386/irqflags.h:14:
+#define raw_local_irq_restore(x) do { typecheck(unsigned long,x); __asm__ __volatile__("pushl %0 ; popfl": /* no output */ :"g" (x):"memory", "cc"); } while (0)
                                                                                                                            ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#576: FILE: include/asm-i386/irqflags.h:14:
+#define raw_local_irq_restore(x) do { typecheck(unsigned long,x); __asm__ __volatile__("pushl %0 ; popfl": /* no output */ :"g" (x):"memory", "cc"); } while (0)
                                                                                                                                    ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#577: FILE: include/asm-i386/irqflags.h:15:
+#define raw_local_irq_disable()	__asm__ __volatile__("cli": : :"memory")
                                	                          ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#577: FILE: include/asm-i386/irqflags.h:15:
+#define raw_local_irq_disable()	__asm__ __volatile__("cli": : :"memory")
                                	                              ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#577: FILE: include/asm-i386/irqflags.h:15:
+#define raw_local_irq_disable()	__asm__ __volatile__("cli": : :"memory")

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#578: FILE: include/asm-i386/irqflags.h:16:
+#define raw_local_irq_enable()	__asm__ __volatile__("sti": : :"memory")
                               	                          ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#578: FILE: include/asm-i386/irqflags.h:16:
+#define raw_local_irq_enable()	__asm__ __volatile__("sti": : :"memory")
                               	                              ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#578: FILE: include/asm-i386/irqflags.h:16:
+#define raw_local_irq_enable()	__asm__ __volatile__("sti": : :"memory")

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#580: FILE: include/asm-i386/irqflags.h:18:
+#define raw_safe_halt()		__asm__ __volatile__("sti; hlt": : :"memory")
                        		                               ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#580: FILE: include/asm-i386/irqflags.h:18:
+#define raw_safe_halt()		__asm__ __volatile__("sti; hlt": : :"memory")
                        		                                   ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#580: FILE: include/asm-i386/irqflags.h:18:
+#define raw_safe_halt()		__asm__ __volatile__("sti; hlt": : :"memory")

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#582: FILE: include/asm-i386/irqflags.h:20:
+#define halt()			__asm__ __volatile__("hlt": : :"memory")
               			                          ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#582: FILE: include/asm-i386/irqflags.h:20:
+#define halt()			__asm__ __volatile__("hlt": : :"memory")
               			                              ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#582: FILE: include/asm-i386/irqflags.h:20:
+#define halt()			__asm__ __volatile__("hlt": : :"memory")

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#584: FILE: include/asm-i386/irqflags.h:22:
+#define raw_irqs_disabled_flags(flags)	(!((flags) & (1<<9)))
                                       	               ^

WARNING:LONG_LINE: line length of 113 exceeds 100 columns
#587: FILE: include/asm-i386/irqflags.h:25:
+#define raw_local_irq_save(x)	__asm__ __volatile__("pushfl ; popl %0 ; cli":"=g" (x): /* no input */ :"memory")

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#587: FILE: include/asm-i386/irqflags.h:25:
+#define raw_local_irq_save(x)	__asm__ __volatile__("pushfl ; popl %0 ; cli":"=g" (x): /* no input */ :"memory")
                              	                                             ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#587: FILE: include/asm-i386/irqflags.h:25:
+#define raw_local_irq_save(x)	__asm__ __volatile__("pushfl ; popl %0 ; cli":"=g" (x): /* no input */ :"memory")
                              	                                                      ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#587: FILE: include/asm-i386/irqflags.h:25:
+#define raw_local_irq_save(x)	__asm__ __volatile__("pushfl ; popl %0 ; cli":"=g" (x): /* no input */ :"memory")
                              	                                                                       ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#587: FILE: include/asm-i386/irqflags.h:25:
+#define raw_local_irq_save(x)	__asm__ __volatile__("pushfl ; popl %0 ; cli":"=g" (x): /* no input */ :"memory")

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#595: FILE: include/asm-i386/irqflags.h:33:
+# define TRACE_IRQS_ON				\
+	pushl %eax;				\
+	pushl %ecx;				\
+	pushl %edx;				\
+	call trace_hardirqs_on;			\
+	popl %edx;				\
+	popl %ecx;				\
+	popl %eax;

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#595: FILE: include/asm-i386/irqflags.h:33:
+# define TRACE_IRQS_ON				\
+	pushl %eax;				\
+	pushl %ecx;				\
+	pushl %edx;				\
+	call trace_hardirqs_on;			\
+	popl %edx;				\
+	popl %ecx;				\
+	popl %eax;

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#596: FILE: include/asm-i386/irqflags.h:34:
+	pushl %eax;				\
 	      ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#597: FILE: include/asm-i386/irqflags.h:35:
+	pushl %ecx;				\
 	      ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#598: FILE: include/asm-i386/irqflags.h:36:
+	pushl %edx;				\
 	      ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#600: FILE: include/asm-i386/irqflags.h:38:
+	popl %edx;				\
 	     ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#601: FILE: include/asm-i386/irqflags.h:39:
+	popl %ecx;				\
 	     ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#602: FILE: include/asm-i386/irqflags.h:40:
+	popl %eax;
 	     ^

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#604: FILE: include/asm-i386/irqflags.h:42:
+# define TRACE_IRQS_OFF				\
+	pushl %eax;				\
+	pushl %ecx;				\
+	pushl %edx;				\
+	call trace_hardirqs_off;		\
+	popl %edx;				\
+	popl %ecx;				\
+	popl %eax;

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#605: FILE: include/asm-i386/irqflags.h:43:
+	pushl %eax;				\
 	      ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#606: FILE: include/asm-i386/irqflags.h:44:
+	pushl %ecx;				\
 	      ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#607: FILE: include/asm-i386/irqflags.h:45:
+	pushl %edx;				\
 	      ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#609: FILE: include/asm-i386/irqflags.h:47:
+	popl %edx;				\
 	     ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#610: FILE: include/asm-i386/irqflags.h:48:
+	popl %ecx;				\
 	     ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#611: FILE: include/asm-i386/irqflags.h:49:
+	popl %eax;
 	     ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#671: FILE: include/asm-powerpc/irqflags.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#672: FILE: include/asm-powerpc/irqflags.h:2:
+ * include/asm-powerpc/irqflags.h

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#707: FILE: include/asm-x86_64/irqflags.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#708: FILE: include/asm-x86_64/irqflags.h:2:
+ * include/asm-x86_64/irqflags.h

WARNING:LONG_LINE: line length of 166 exceeds 100 columns
#720: FILE: include/asm-x86_64/irqflags.h:14:
+#define raw_local_save_flags(x)	do { warn_if_not_ulong(x); __asm__ __volatile__("# save_flags \n\t pushfq ; popq %q0":"=g" (x): /* no input */ :"memory"); } while (0)

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#720: FILE: include/asm-x86_64/irqflags.h:14:
+#define raw_local_save_flags(x)	do { warn_if_not_ulong(x); __asm__ __volatile__("# save_flags \n\t pushfq ; popq %q0":"=g" (x): /* no input */ :"memory"); } while (0)
                                	                                                                                     ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#720: FILE: include/asm-x86_64/irqflags.h:14:
+#define raw_local_save_flags(x)	do { warn_if_not_ulong(x); __asm__ __volatile__("# save_flags \n\t pushfq ; popq %q0":"=g" (x): /* no input */ :"memory"); } while (0)
                                	                                                                                              ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#720: FILE: include/asm-x86_64/irqflags.h:14:
+#define raw_local_save_flags(x)	do { warn_if_not_ulong(x); __asm__ __volatile__("# save_flags \n\t pushfq ; popq %q0":"=g" (x): /* no input */ :"memory"); } while (0)
                                	                                                                                                               ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#720: FILE: include/asm-x86_64/irqflags.h:14:
+#define raw_local_save_flags(x)	do { warn_if_not_ulong(x); __asm__ __volatile__("# save_flags \n\t pushfq ; popq %q0":"=g" (x): /* no input */ :"memory"); } while (0)

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#720: FILE: include/asm-x86_64/irqflags.h:14:
+#define raw_local_save_flags(x)	do { warn_if_not_ulong(x); __asm__ __volatile__("# save_flags \n\t pushfq ; popq %q0":"=g" (x): /* no input */ :"memory"); } while (0)

WARNING:LONG_LINE: line length of 142 exceeds 100 columns
#721: FILE: include/asm-x86_64/irqflags.h:15:
+#define raw_local_irq_restore(x) 	__asm__ __volatile__("# restore_flags \n\t pushq %0 ; popfq": /* no output */ :"g" (x):"memory", "cc")

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#721: FILE: include/asm-x86_64/irqflags.h:15:
+#define raw_local_irq_restore(x) ^I__asm__ __volatile__("# restore_flags \n\t pushq %0 ; popfq": /* no output */ :"g" (x):"memory", "cc")$

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#721: FILE: include/asm-x86_64/irqflags.h:15:
+#define raw_local_irq_restore(x) 	__asm__ __volatile__("# restore_flags \n\t pushq %0 ; popfq": /* no output */ :"g" (x):"memory", "cc")
                                  	                                                            ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#721: FILE: include/asm-x86_64/irqflags.h:15:
+#define raw_local_irq_restore(x) 	__asm__ __volatile__("# restore_flags \n\t pushq %0 ; popfq": /* no output */ :"g" (x):"memory", "cc")
                                  	                                                                              ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#721: FILE: include/asm-x86_64/irqflags.h:15:
+#define raw_local_irq_restore(x) 	__asm__ __volatile__("# restore_flags \n\t pushq %0 ; popfq": /* no output */ :"g" (x):"memory", "cc")
                                  	                                                                                      ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#721: FILE: include/asm-x86_64/irqflags.h:15:
+#define raw_local_irq_restore(x) 	__asm__ __volatile__("# restore_flags \n\t pushq %0 ; popfq": /* no output */ :"g" (x):"memory", "cc")

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#721: FILE: include/asm-x86_64/irqflags.h:15:
+#define raw_local_irq_restore(x) 	__asm__ __volatile__("# restore_flags \n\t pushq %0 ; popfq": /* no output */ :"g" (x):"memory", "cc")

WARNING:LONG_LINE: line length of 154 exceeds 100 columns
#725: FILE: include/asm-x86_64/irqflags.h:19:
+#define raw_local_irq_disable()	do { unsigned long flags; raw_local_save_flags(flags); raw_local_irq_restore((flags & ~(1 << 9)) | (1 << 18)); } while (0)

WARNING:LONG_LINE: line length of 154 exceeds 100 columns
#726: FILE: include/asm-x86_64/irqflags.h:20:
+#define raw_local_irq_enable()	do { unsigned long flags; raw_local_save_flags(flags); raw_local_irq_restore((flags | (1 << 9)) & ~(1 << 18)); } while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'flags' - possible side-effects?
#728: FILE: include/asm-x86_64/irqflags.h:22:
+#define raw_irqs_disabled_flags(flags)	\
+({						\
+	(flags & (1<<18)) || !(flags & (1<<9));	\
+})

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'flags' may be better as '(flags)' to avoid precedence issues
#728: FILE: include/asm-x86_64/irqflags.h:22:
+#define raw_irqs_disabled_flags(flags)	\
+({						\
+	(flags & (1<<18)) || !(flags & (1<<9));	\
+})

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#730: FILE: include/asm-x86_64/irqflags.h:24:
+	(flags & (1<<18)) || !(flags & (1<<9));	\
 	           ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#730: FILE: include/asm-x86_64/irqflags.h:24:
+	(flags & (1<<18)) || !(flags & (1<<9));	\
 	                                 ^

WARNING:LONG_LINE: line length of 125 exceeds 100 columns
#734: FILE: include/asm-x86_64/irqflags.h:28:
+#define raw_local_irq_save(x)	do { raw_local_save_flags(x); raw_local_irq_restore((x & ~(1 << 9)) | (1 << 18)); } while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#734: FILE: include/asm-x86_64/irqflags.h:28:
+#define raw_local_irq_save(x)	do { raw_local_save_flags(x); raw_local_irq_restore((x & ~(1 << 9)) | (1 << 18)); } while (0)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#736: FILE: include/asm-x86_64/irqflags.h:30:
+#define raw_local_irq_disable() ^I__asm__ __volatile__("cli": : :"memory")$

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#736: FILE: include/asm-x86_64/irqflags.h:30:
+#define raw_local_irq_disable() 	__asm__ __volatile__("cli": : :"memory")
                                 	                          ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#736: FILE: include/asm-x86_64/irqflags.h:30:
+#define raw_local_irq_disable() 	__asm__ __volatile__("cli": : :"memory")
                                 	                              ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#736: FILE: include/asm-x86_64/irqflags.h:30:
+#define raw_local_irq_disable() 	__asm__ __volatile__("cli": : :"memory")

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#737: FILE: include/asm-x86_64/irqflags.h:31:
+#define raw_local_irq_enable()	__asm__ __volatile__("sti": : :"memory")
                               	                          ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#737: FILE: include/asm-x86_64/irqflags.h:31:
+#define raw_local_irq_enable()	__asm__ __volatile__("sti": : :"memory")
                               	                              ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#737: FILE: include/asm-x86_64/irqflags.h:31:
+#define raw_local_irq_enable()	__asm__ __volatile__("sti": : :"memory")

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'flags' may be better as '(flags)' to avoid precedence issues
#739: FILE: include/asm-x86_64/irqflags.h:33:
+#define raw_irqs_disabled_flags(flags)	\
+({						\
+	!(flags & (1<<9));			\
+})

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#741: FILE: include/asm-x86_64/irqflags.h:35:
+	!(flags & (1<<9));			\
 	            ^

WARNING:LONG_LINE: line length of 179 exceeds 100 columns
#745: FILE: include/asm-x86_64/irqflags.h:39:
+#define raw_local_irq_save(x) 	do { warn_if_not_ulong(x); __asm__ __volatile__("# raw_local_irq_save \n\t pushfq ; popq %0 ; cli":"=g" (x): /* no input */ :"memory"); } while (0)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#745: FILE: include/asm-x86_64/irqflags.h:39:
+#define raw_local_irq_save(x) ^Ido { warn_if_not_ulong(x); __asm__ __volatile__("# raw_local_irq_save \n\t pushfq ; popq %0 ; cli":"=g" (x): /* no input */ :"memory"); } while (0)$

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#745: FILE: include/asm-x86_64/irqflags.h:39:
+#define raw_local_irq_save(x) 	do { warn_if_not_ulong(x); __asm__ __volatile__("# raw_local_irq_save \n\t pushfq ; popq %0 ; cli":"=g" (x): /* no input */ :"memory"); } while (0)
                               	                                                                                                  ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#745: FILE: include/asm-x86_64/irqflags.h:39:
+#define raw_local_irq_save(x) 	do { warn_if_not_ulong(x); __asm__ __volatile__("# raw_local_irq_save \n\t pushfq ; popq %0 ; cli":"=g" (x): /* no input */ :"memory"); } while (0)
                               	                                                                                                           ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#745: FILE: include/asm-x86_64/irqflags.h:39:
+#define raw_local_irq_save(x) 	do { warn_if_not_ulong(x); __asm__ __volatile__("# raw_local_irq_save \n\t pushfq ; popq %0 ; cli":"=g" (x): /* no input */ :"memory"); } while (0)
                               	                                                                                                                            ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#745: FILE: include/asm-x86_64/irqflags.h:39:
+#define raw_local_irq_save(x) 	do { warn_if_not_ulong(x); __asm__ __volatile__("# raw_local_irq_save \n\t pushfq ; popq %0 ; cli":"=g" (x): /* no input */ :"memory"); } while (0)

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#745: FILE: include/asm-x86_64/irqflags.h:39:
+#define raw_local_irq_save(x) 	do { warn_if_not_ulong(x); __asm__ __volatile__("# raw_local_irq_save \n\t pushfq ; popq %0 ; cli":"=g" (x): /* no input */ :"memory"); } while (0)

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#756: FILE: include/asm-x86_64/irqflags.h:50:
+#define raw_safe_halt()	__asm__ __volatile__("sti; hlt": : :"memory")
                        	                               ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#756: FILE: include/asm-x86_64/irqflags.h:50:
+#define raw_safe_halt()	__asm__ __volatile__("sti; hlt": : :"memory")
                        	                                   ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#756: FILE: include/asm-x86_64/irqflags.h:50:
+#define raw_safe_halt()	__asm__ __volatile__("sti; hlt": : :"memory")

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#758: FILE: include/asm-x86_64/irqflags.h:52:
+#define halt()			__asm__ __volatile__("hlt": : :"memory")
               			                          ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#758: FILE: include/asm-x86_64/irqflags.h:52:
+#define halt()			__asm__ __volatile__("hlt": : :"memory")
               			                              ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#758: FILE: include/asm-x86_64/irqflags.h:52:
+#define halt()			__asm__ __volatile__("hlt": : :"memory")

ERROR:CODE_INDENT: code indent should use tabs where possible
#853: FILE: include/linux/init_task.h:136:
+ ^IINIT_TRACE_IRQFLAGS^I^I^I^I^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#853: FILE: include/linux/init_task.h:136:
+ ^IINIT_TRACE_IRQFLAGS^I^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#853: FILE: include/linux/init_task.h:136:
+ ^IINIT_TRACE_IRQFLAGS^I^I^I^I^I^I\$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#879: FILE: include/linux/interrupt.h:76:
+extern void local_bh_disable(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#880: FILE: include/linux/interrupt.h:77:
+extern void __local_bh_enable(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#881: FILE: include/linux/interrupt.h:78:
+extern void _local_bh_enable(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#883: FILE: include/linux/interrupt.h:80:
+extern void local_bh_enable_ip(unsigned long ip);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#918: FILE: include/linux/trace_irqflags.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#919: FILE: include/linux/trace_irqflags.h:2:
+ * include/linux/trace_irqflags.h

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#938: FILE: include/linux/trace_irqflags.h:21:
+  extern void trace_hardirqs_on(void);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#938: FILE: include/linux/trace_irqflags.h:21:
+  extern void trace_hardirqs_on(void);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#939: FILE: include/linux/trace_irqflags.h:22:
+  extern void trace_hardirqs_off(void);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#939: FILE: include/linux/trace_irqflags.h:22:
+  extern void trace_hardirqs_off(void);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#940: FILE: include/linux/trace_irqflags.h:23:
+  extern void trace_softirqs_on(unsigned long ip);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#940: FILE: include/linux/trace_irqflags.h:23:
+  extern void trace_softirqs_on(unsigned long ip);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#941: FILE: include/linux/trace_irqflags.h:24:
+  extern void trace_softirqs_off(unsigned long ip);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#941: FILE: include/linux/trace_irqflags.h:24:
+  extern void trace_softirqs_off(unsigned long ip);

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#946: FILE: include/linux/trace_irqflags.h:29:
+# define trace_hardirq_enter()	do { current->hardirq_context++; } while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#947: FILE: include/linux/trace_irqflags.h:30:
+# define trace_hardirq_exit()	do { current->hardirq_context--; } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#948: FILE: include/linux/trace_irqflags.h:31:
+# define trace_softirq_enter()	do { current->softirq_context++; } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#949: FILE: include/linux/trace_irqflags.h:32:
+# define trace_softirq_exit()	do { current->softirq_context--; } while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'flags' - possible side-effects?
#975: FILE: include/linux/trace_irqflags.h:58:
+#define local_irq_restore(flags)				\
+	do {							\
+		if (raw_irqs_disabled_flags(flags)) {		\
+			raw_local_irq_restore(flags);		\
+			trace_hardirqs_off();			\
+		} else {					\
+			trace_hardirqs_on();			\
+			raw_local_irq_restore(flags);		\
+		}						\
+	} while (0)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1091: FILE: kernel/softirq.c:90:
+EXPORT_SYMBOL(local_bh_disable);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1106: FILE: kernel/softirq.c:105:
+EXPORT_SYMBOL(__local_bh_enable);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1139: FILE: kernel/softirq.c:138:
+ ^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1139: FILE: kernel/softirq.c:138:
+ ^I */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1140: FILE: kernel/softirq.c:139:
+ ^Isub_preempt_count(SOFTIRQ_OFFSET - 1);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1140: FILE: kernel/softirq.c:139:
+ ^Isub_preempt_count(SOFTIRQ_OFFSET - 1);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1140: FILE: kernel/softirq.c:139:
+ ^Isub_preempt_count(SOFTIRQ_OFFSET - 1);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1166: FILE: kernel/softirq.c:165:
+ ^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1166: FILE: kernel/softirq.c:165:
+ ^I */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1167: FILE: kernel/softirq.c:166:
+ ^Isub_preempt_count(SOFTIRQ_OFFSET - 1);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1167: FILE: kernel/softirq.c:166:
+ ^Isub_preempt_count(SOFTIRQ_OFFSET - 1);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1167: FILE: kernel/softirq.c:166:
+ ^Isub_preempt_count(SOFTIRQ_OFFSET - 1);$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000073419.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 47 errors, 47 warnings, 37 checks, 1047 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000073419.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
