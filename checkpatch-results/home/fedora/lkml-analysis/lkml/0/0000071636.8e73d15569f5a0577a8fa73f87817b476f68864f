WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#94: FILE: arch/arm/mach-ixp23xx/core.c:181:
+	volatile unsigned long *intr_reg = IXP23XX_INTR_EN1 + (irq / 32);

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#108: FILE: arch/arm/mach-ixp23xx/core.c:202:
+	volatile unsigned long *intr_reg = IXP23XX_INTR_EN1 + (irq / 32);

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#125: FILE: arch/arm/mach-ixp23xx/core.c:211:
+	volatile unsigned long *intr_reg = IXP23XX_INTR_EN1 + (irq / 32);

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#248: FILE: arch/sparc64/kernel/smp.c:1346:
 void __devinit smp_prepare_boot_cpu(void)

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#252: FILE: arch/sparc64/kernel/smp.c:1350:
+	if (cpu >= NR_CPUS) {

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#264: FILE: arch/sparc64/kernel/smp.c:1362:
 int __devinit __cpu_up(unsigned int cpu)

CHECK:BRACES: braces {} should be used on all arms of this statement
#385: FILE: block/cfq-iosched.c:2168:
+	if (!time_after_eq(jiffies, end)) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#388: FILE: block/cfq-iosched.c:2171:
+	} else

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around MptResetHandlers[ii]
#423: FILE: drivers/message/fusion/mptbase.c:1888:
+				rc += (*(MptResetHandlers[ii]))(ioc, MPT_IOC_POST_RESET);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:CAMELCASE: Avoid CamelCase: <MptResetHandlers>
#423: FILE: drivers/message/fusion/mptbase.c:1888:
+				rc += (*(MptResetHandlers[ii]))(ioc, MPT_IOC_POST_RESET);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around MptResetHandlers[ii]
#431: FILE: drivers/message/fusion/mptbase.c:1895:
+				rc += (*(MptResetHandlers[ii]))(ioc->alt_ioc, MPT_IOC_POST_RESET);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around MptResetHandlers[ii]
#440: FILE: drivers/message/fusion/mptbase.c:3270:
+					r += (*(MptResetHandlers[ii]))(ioc, MPT_IOC_PRE_RESET);

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#445: FILE: drivers/message/fusion/mptbase.c:3274:
+						r += (*(MptResetHandlers[ii]))(ioc->alt_ioc, MPT_IOC_PRE_RESET);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around MptResetHandlers[ii]
#445: FILE: drivers/message/fusion/mptbase.c:3274:
+						r += (*(MptResetHandlers[ii]))(ioc->alt_ioc, MPT_IOC_PRE_RESET);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around MptResetHandlers[ii]
#454: FILE: drivers/message/fusion/mptbase.c:5709:
+				r += (*(MptResetHandlers[ii]))(ioc, MPT_IOC_SETUP_RESET);

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#459: FILE: drivers/message/fusion/mptbase.c:5713:
+					r += (*(MptResetHandlers[ii]))(ioc->alt_ioc, MPT_IOC_SETUP_RESET);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around MptResetHandlers[ii]
#459: FILE: drivers/message/fusion/mptbase.c:5713:
+					r += (*(MptResetHandlers[ii]))(ioc->alt_ioc, MPT_IOC_SETUP_RESET);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#560: FILE: include/asm-arm/cacheflush.h:338:
+}
+#define ARCH_HAS_FLUSH_KERNEL_DCACHE_PAGE

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:DEFINE_ARCH_HAS: #define of 'ARCH_HAS_FLUSH_KERNEL_DCACHE_PAGE' is wrong - use Kconfig variables or standard guards instead
#560: FILE: include/asm-arm/cacheflush.h:338:
+#define ARCH_HAS_FLUSH_KERNEL_DCACHE_PAGE

The ARCH_HAS_xyz and ARCH_HAVE_xyz patterns are wrong.

For big conceptual features use Kconfig symbols instead.  And for
smaller things where we have compatibility fallback functions but
want architectures able to override them with optimized ones, we
should either use weak functions (appropriate for some cases), or
the symbol that protects them should be the same symbol we use.

See: https://lore.kernel.org/lkml/CA+55aFycQ9XJvEOsiM3txHL5bjUc8CeKWJNR_H+MiicaddB42Q@mail.gmail.com/

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pte' - possible side-effects?
#577: FILE: include/asm-generic/pgtable.h:165:
+#define move_pte(pte, prot, old_addr, new_addr)				\
+({									\
+ 	pte_t newpte = (pte);						\
+	if (pte_present(pte) && pfn_valid(pte_pfn(pte)) &&		\
+			pte_page(pte) == ZERO_PAGE(old_addr))		\
+		newpte = mk_pte(ZERO_PAGE(new_addr), (prot));		\
+	newpte;								\
+})

ERROR:CODE_INDENT: code indent should use tabs where possible
#579: FILE: include/asm-generic/pgtable.h:167:
+ ^Ipte_t newpte = (pte);^I^I^I^I^I^I\$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#579: FILE: include/asm-generic/pgtable.h:167:
+ ^Ipte_t newpte = (pte);^I^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#579: FILE: include/asm-generic/pgtable.h:167:
+ ^Ipte_t newpte = (pte);^I^I^I^I^I^I\$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000071636.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 2 errors, 10 warnings, 11 checks, 535 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000071636.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
