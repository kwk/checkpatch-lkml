WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#75: 
#define __KERNEL__

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#76: 
#define __ASSEMBLY__

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#78: 
#include "asm-i386/bitops.h"

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#79: 
#include "asm-i386/page.h"

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#80: 
#include "asm-generic/page.h"

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#81: 
#include <stdio.h>

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#82: 
#include <getopt.h>

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#83: 
#include <stdlib.h>

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#122: 
           "verify     Verify that the old and new implementations behave the same\n"

WARNING:TYPO_SPELLING: 'get's' may be misspelled - perhaps 'gets'?
#142: 
  ** _every_ number get's the same order with the old and new
                    ^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#246: FILE: asm-alpha/page.h:72:
+/* Return 'n' in how many 2^n pages are needed to store s bytes.
+** (n == 0 for s == 0)

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:INLINE: plain inline is preferred over __inline__
#251: FILE: asm-alpha/page.h:77:
+static __inline__

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#252: FILE: asm-alpha/page.h:78:
+int get_order (unsigned long s)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#254: FILE: asm-alpha/page.h:80:
+        return generic_get_order (s);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#254: FILE: asm-alpha/page.h:80:
+        return generic_get_order (s);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#254: FILE: asm-alpha/page.h:80:
+        return generic_get_order (s);

WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#270: FILE: asm-arm/page.h:179:
+/* Return 'n' in how many 2^n pages are needed to store s bytes.
+** (n == 0 for s == 0)

WARNING:INLINE: plain inline is preferred over __inline__
#282: FILE: asm-arm/page.h:184:
+static __inline__

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#283: FILE: asm-arm/page.h:185:
+int get_order (unsigned long s)

ERROR:CODE_INDENT: code indent should use tabs where possible
#285: FILE: asm-arm/page.h:187:
+        return generic_get_order (s);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#285: FILE: asm-arm/page.h:187:
+        return generic_get_order (s);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#285: FILE: asm-arm/page.h:187:
+        return generic_get_order (s);

WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#293: FILE: asm-generic/page.h:1:
+#ifndef _GENERIC_PAGE_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:INCLUDE_LINUX: Use #include <linux/bitops.h> instead of <asm/bitops.h>
#296: FILE: asm-generic/page.h:4:
+#include <asm/bitops.h>

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#299: FILE: asm-generic/page.h:7:
+/* Return 'n' in how many 2^n pages are needed to store s bytes.
+** (n == 0 for s == 0)

WARNING:INLINE: plain inline is preferred over __inline__
#302: FILE: asm-generic/page.h:10:
+static __inline__

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#303: FILE: asm-generic/page.h:11:
+int generic_get_order (unsigned long s)

ERROR:CODE_INDENT: code indent should use tabs where possible
#305: FILE: asm-generic/page.h:13:
+        s = (s - 1) >> PAGE_SHIFT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#305: FILE: asm-generic/page.h:13:
+        s = (s - 1) >> PAGE_SHIFT;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#306: FILE: asm-generic/page.h:14:
+        if (s == 0)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#306: FILE: asm-generic/page.h:14:
+        if (s == 0)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#307: FILE: asm-generic/page.h:15:
+                return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#307: FILE: asm-generic/page.h:15:
+                return 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#308: FILE: asm-generic/page.h:16:
+        return fls (s);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#308: FILE: asm-generic/page.h:16:
+        return fls (s);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#308: FILE: asm-generic/page.h:16:
+        return fls (s);

WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

WARNING:INLINE: plain inline is preferred over __inline__
#330: FILE: asm-i386/bitops.h:425:
+static __inline__ unsigned long __fls(unsigned long word)

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#333: FILE: asm-i386/bitops.h:428:
+		:"=r" (word)
 		^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#334: FILE: asm-i386/bitops.h:429:
+		:"rm" (word));
 		^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#347: FILE: asm-i386/bitops.h:470:
+	return r+1;
 	        ^

WARNING:INLINE: plain inline is preferred over __inline__
#356: FILE: asm-i386/bitops.h:479:
+static __inline__ int fls(int x)

WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#384: FILE: asm-i386/page.h:125:
+/* Return 'n' in how many 2^n pages are needed to store s bytes.
+** (n == 0 for s == 0)

WARNING:INLINE: plain inline is preferred over __inline__
#389: FILE: asm-i386/page.h:130:
+static __inline__

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#390: FILE: asm-i386/page.h:131:
+int get_order (unsigned long s)

ERROR:CODE_INDENT: code indent should use tabs where possible
#392: FILE: asm-i386/page.h:133:
+        return generic_get_order (s);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#392: FILE: asm-i386/page.h:133:
+        return generic_get_order (s);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#392: FILE: asm-i386/page.h:133:
+        return generic_get_order (s);

WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#416: FILE: asm-m68k/page.h:105:
+/* Return 'n' in how many 2^n pages are needed to store s bytes.
+** (n == 0 for s == 0)

WARNING:INLINE: plain inline is preferred over __inline__
#421: FILE: asm-m68k/page.h:110:
+static __inline__

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#422: FILE: asm-m68k/page.h:111:
+int get_order (unsigned long s)

ERROR:CODE_INDENT: code indent should use tabs where possible
#424: FILE: asm-m68k/page.h:113:
+        return generic_get_order (s);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#424: FILE: asm-m68k/page.h:113:
+        return generic_get_order (s);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#424: FILE: asm-m68k/page.h:113:
+        return generic_get_order (s);

WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#440: FILE: asm-m68knommu/page.h:55:
+/* Return 'n' in how many 2^n pages are needed to store s bytes.
+** (n == 0 for s == 0)

WARNING:INLINE: plain inline is preferred over __inline__
#452: FILE: asm-m68knommu/page.h:60:
+static __inline__

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#453: FILE: asm-m68knommu/page.h:61:
+int get_order (unsigned long s)

ERROR:CODE_INDENT: code indent should use tabs where possible
#455: FILE: asm-m68knommu/page.h:63:
+        return generic_get_order (s);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#455: FILE: asm-m68knommu/page.h:63:
+        return generic_get_order (s);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#455: FILE: asm-m68knommu/page.h:63:
+        return generic_get_order (s);

WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#473: FILE: asm-mips/page.h:53:
+/* Return 'n' in how many 2^n pages are needed to store s bytes.
+** (n == 0 for s == 0)

WARNING:INLINE: plain inline is preferred over __inline__
#485: FILE: asm-mips/page.h:58:
+static __inline__

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#486: FILE: asm-mips/page.h:59:
+int get_order (unsigned long s)

ERROR:CODE_INDENT: code indent should use tabs where possible
#488: FILE: asm-mips/page.h:61:
+        return generic_get_order (s);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#488: FILE: asm-mips/page.h:61:
+        return generic_get_order (s);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#488: FILE: asm-mips/page.h:61:
+        return generic_get_order (s);

WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#504: FILE: asm-parisc/page.h:57:
+/* Return 'n' in how many 2^n pages are needed to store s bytes.
+** (n == 0 for s == 0)

WARNING:INLINE: plain inline is preferred over __inline__
#516: FILE: asm-parisc/page.h:62:
+static __inline__

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#517: FILE: asm-parisc/page.h:63:
+int get_order (unsigned long s)

ERROR:CODE_INDENT: code indent should use tabs where possible
#519: FILE: asm-parisc/page.h:65:
+        return generic_get_order (s);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#519: FILE: asm-parisc/page.h:65:
+        return generic_get_order (s);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#519: FILE: asm-parisc/page.h:65:
+        return generic_get_order (s);

WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#537: FILE: asm-ppc64/page.h:123:
+/* Return 'n' in how many 2^n pages are needed to store s bytes.
+** (n == 0 for s == 0)

WARNING:INLINE: plain inline is preferred over __inline__
#549: FILE: asm-ppc64/page.h:128:
+static __inline__

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#550: FILE: asm-ppc64/page.h:129:
+int get_order (unsigned long s)

ERROR:CODE_INDENT: code indent should use tabs where possible
#552: FILE: asm-ppc64/page.h:131:
+        return generic_get_order (s);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#552: FILE: asm-ppc64/page.h:131:
+        return generic_get_order (s);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#552: FILE: asm-ppc64/page.h:131:
+        return generic_get_order (s);

WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#570: FILE: asm-s390/page.h:75:
+/* Return 'n' in how many 2^n pages are needed to store s bytes.
+** (n == 0 for s == 0)

WARNING:INLINE: plain inline is preferred over __inline__
#582: FILE: asm-s390/page.h:80:
+static __inline__

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#583: FILE: asm-s390/page.h:81:
+int get_order (unsigned long s)

ERROR:CODE_INDENT: code indent should use tabs where possible
#585: FILE: asm-s390/page.h:83:
+        return generic_get_order (s);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#585: FILE: asm-s390/page.h:83:
+        return generic_get_order (s);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#585: FILE: asm-s390/page.h:83:
+        return generic_get_order (s);

WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#601: FILE: asm-s390x/page.h:73:
+/* Return 'n' in how many 2^n pages are needed to store s bytes.
+** (n == 0 for s == 0)

WARNING:INLINE: plain inline is preferred over __inline__
#613: FILE: asm-s390x/page.h:78:
+static __inline__

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#614: FILE: asm-s390x/page.h:79:
+int get_order (unsigned long s)

ERROR:CODE_INDENT: code indent should use tabs where possible
#616: FILE: asm-s390x/page.h:81:
+        return generic_get_order (s);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#616: FILE: asm-s390x/page.h:81:
+        return generic_get_order (s);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#616: FILE: asm-s390x/page.h:81:
+        return generic_get_order (s);

WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#632: FILE: asm-sh/page.h:106:
+/* Return 'n' in how many 2^n pages are needed to store s bytes.
+** (n == 0 for s == 0)

WARNING:INLINE: plain inline is preferred over __inline__
#644: FILE: asm-sh/page.h:111:
+static __inline__

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#645: FILE: asm-sh/page.h:112:
+int get_order (unsigned long s)

ERROR:CODE_INDENT: code indent should use tabs where possible
#647: FILE: asm-sh/page.h:114:
+        return generic_get_order (s);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#647: FILE: asm-sh/page.h:114:
+        return generic_get_order (s);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#647: FILE: asm-sh/page.h:114:
+        return generic_get_order (s);

WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#665: FILE: asm-sparc/page.h:151:
+/* Return 'n' in how many 2^n pages are needed to store s bytes.
+** (n == 0 for s == 0)

WARNING:INLINE: plain inline is preferred over __inline__
#677: FILE: asm-sparc/page.h:156:
+static __inline__

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#678: FILE: asm-sparc/page.h:157:
+int get_order (unsigned long s)

ERROR:CODE_INDENT: code indent should use tabs where possible
#680: FILE: asm-sparc/page.h:159:
+        return generic_get_order (s);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#680: FILE: asm-sparc/page.h:159:
+        return generic_get_order (s);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#680: FILE: asm-sparc/page.h:159:
+        return generic_get_order (s);

WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#698: FILE: asm-sparc64/page.h:165:
+/* Return 'n' in how many 2^n pages are needed to store s bytes.
+** (n == 0 for s == 0)

WARNING:INLINE: plain inline is preferred over __inline__
#710: FILE: asm-sparc64/page.h:170:
+static __inline__

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#711: FILE: asm-sparc64/page.h:171:
+int get_order (unsigned long s)

ERROR:CODE_INDENT: code indent should use tabs where possible
#713: FILE: asm-sparc64/page.h:173:
+        return generic_get_order (s);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#713: FILE: asm-sparc64/page.h:173:
+        return generic_get_order (s);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#713: FILE: asm-sparc64/page.h:173:
+        return generic_get_order (s);

WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#729: FILE: asm-v850/page.h:102:
+/* Return 'n' in how many 2^n pages are needed to store s bytes.
+** (n == 0 for s == 0)

WARNING:INLINE: plain inline is preferred over __inline__
#741: FILE: asm-v850/page.h:107:
+static __inline__

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#742: FILE: asm-v850/page.h:108:
+int get_order (unsigned long s)

ERROR:CODE_INDENT: code indent should use tabs where possible
#744: FILE: asm-v850/page.h:110:
+        return generic_get_order (s);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#744: FILE: asm-v850/page.h:110:
+        return generic_get_order (s);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#744: FILE: asm-v850/page.h:110:
+        return generic_get_order (s);

WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#762: FILE: asm-x86_64/page.h:84:
+/* Return 'n' in how many 2^n pages are needed to store s bytes.
+** (n == 0 for s == 0)

WARNING:INLINE: plain inline is preferred over __inline__
#774: FILE: asm-x86_64/page.h:89:
+static __inline__

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#775: FILE: asm-x86_64/page.h:90:
+int get_order (unsigned long s)

ERROR:CODE_INDENT: code indent should use tabs where possible
#777: FILE: asm-x86_64/page.h:92:
+        return generic_get_order (s);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#777: FILE: asm-x86_64/page.h:92:
+        return generic_get_order (s);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#777: FILE: asm-x86_64/page.h:92:
+        return generic_get_order (s);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000406296.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 21 errors, 114 warnings, 1 checks, 488 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000406296.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
