ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#26: 
--- a/arch/mips64/kernel/ioctl32.c	Tue Oct 15 18:24:39 2002

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#41: FILE: arch/mips64/kernel/ioctl32.c:795:
+#if defined(CONFIG_BLK_DEV_DM) || defined(CONFIG_BLK_DEV_DM_MODULE)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#178: FILE: drivers/md/dm-ioctl.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#196: FILE: drivers/md/dm-ioctl.c:19:
+ *---------------------------------------------------------------*/

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:SPACING: No space is necessary after a cast
#219: FILE: drivers/md/dm-ioctl.c:42:
+	while (((void *) str >= begin) && ((void *) str < end))

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#231: FILE: drivers/md/dm-ioctl.c:54:
+	    ((unsigned char *) last + next);

CHECK:SPACING: No space is necessary after a cast
#232: FILE: drivers/md/dm-ioctl.c:55:
+	*params = (char *) (*spec + 1);

CHECK:SPACING: No space is necessary after a cast
#234: FILE: drivers/md/dm-ioctl.c:57:
+	if (*spec < (last + 1) || ((void *) *spec > end))

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'populate_table', this function's name, in a string
#250: FILE: drivers/md/dm-ioctl.c:73:
+		DMWARN("populate_table: no targets specified");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:SPACING: No space is necessary after a cast
#254: FILE: drivers/md/dm-ioctl.c:77:
+	begin = (void *) args;

ERROR:SPACING: space required after that ';' (ctx:VxV)
#257: FILE: drivers/md/dm-ioctl.c:80:
+#define PARSE_ERROR(msg) {DMWARN(msg); return -EINVAL;}
                                                      ^

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#257: FILE: drivers/md/dm-ioctl.c:80:
+#define PARSE_ERROR(msg) {DMWARN(msg); return -EINVAL;}

CHECK:SPACING: No space is necessary after a cast
#265: FILE: drivers/md/dm-ioctl.c:88:
+			r = next_target((struct dm_target_spec *) args,

CHECK:SPACING: No space is necessary after a cast
#315: FILE: drivers/md/dm-ioctl.c:138:
+	return (void *) (((unsigned long) (ptr + align)) & ~align);

CHECK:SPACING: No space is necessary after a cast
#330: FILE: drivers/md/dm-ioctl.c:153:
+		param->data_start = ptr - (void *) user;

CHECK:SPACING: No space is necessary after a cast
#400: FILE: drivers/md/dm-ioctl.c:223:
+	return (void *) (((unsigned long) ptr + align) & ~align);

WARNING:INDENTED_LABEL: labels should not be indented
#423: FILE: drivers/md/dm-ioctl.c:246:
+      out:

CHECK:LINE_SPACING: Please don't use multiple blank lines
#468: FILE: drivers/md/dm-ioctl.c:291:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#478: FILE: drivers/md/dm-ioctl.c:301:
+	uint64_t sector = 0LL;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 28)
#494: FILE: drivers/md/dm-ioctl.c:317:
+		if (outptr - outbuf +
[...]
+			    return -ENOMEM;

WARNING:TABSTOP: Statements should start on a tabstop
#496: FILE: drivers/md/dm-ioctl.c:319:
+			    return -ENOMEM;

CHECK:SPACING: No space is necessary after a cast
#498: FILE: drivers/md/dm-ioctl.c:321:
+		spec = (struct dm_target_spec *) outptr;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#547: FILE: drivers/md/dm-ioctl.c:370:
+	/* We haven't a clue how long the resultant data will be so
+	   just allocate as much as userland has allowed us and make sure

WARNING:TYPO_SPELLING: 'overun' may be misspelled - perhaps 'overrun'?
#548: FILE: drivers/md/dm-ioctl.c:371:
+	   we don't overun it */
 	            ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#548: FILE: drivers/md/dm-ioctl.c:371:
+	   we don't overun it */

WARNING:INDENTED_LABEL: labels should not be indented
#562: FILE: drivers/md/dm-ioctl.c:385:
+      out:

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#569: FILE: drivers/md/dm-ioctl.c:392:
+	if (outbuf)
+		kfree(outbuf);

WARNING:YIELD: Using yield() is generally wrong. See yield() kernel-doc (sched/core.c)
#601: FILE: drivers/md/dm-ioctl.c:424:
+	yield();

WARNING:INDENTED_LABEL: labels should not be indented
#604: FILE: drivers/md/dm-ioctl.c:427:
+      out:

WARNING:LINE_SPACING: Missing a blank line after declarations
#658: FILE: drivers/md/dm-ioctl.c:481:
+		struct dm_dev *dd = list_entry(tmp, struct dm_dev, list);
+		deps->dev[count++] = kdev_t_to_nr(dd->dev);

WARNING:INDENTED_LABEL: labels should not be indented
#662: FILE: drivers/md/dm-ioctl.c:485:
+      out:

CHECK:SPACING: No space is necessary after a cast
#749: FILE: drivers/md/dm-ioctl.c:572:
+	char *newname = (char *) param + param->data_start;

CHECK:SPACING: No space is necessary after a cast
#756: FILE: drivers/md/dm-ioctl.c:579:
+	if (valid_str(newname, (void *) param,

CHECK:SPACING: No space is necessary after a cast
#757: FILE: drivers/md/dm-ioctl.c:580:
+		      (void *) param + param->data_size)) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#765: FILE: drivers/md/dm-ioctl.c:588:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#769: FILE: drivers/md/dm-ioctl.c:592:
+ *---------------------------------------------------------------*/

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#798: FILE: drivers/md/dm-ioctl.c:621:
+	uint32_t version[3];

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'DM_VERSION_MAJOR != version[0]'
#804: FILE: drivers/md/dm-ioctl.c:627:
+	if ((DM_VERSION_MAJOR != version[0]) ||
+	    (DM_VERSION_MINOR < version[1])) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'DM_VERSION_MINOR < version[1]'
#804: FILE: drivers/md/dm-ioctl.c:627:
+	if ((DM_VERSION_MAJOR != version[0]) ||
+	    (DM_VERSION_MINOR < version[1])) {

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#804: FILE: drivers/md/dm-ioctl.c:627:
+	if ((DM_VERSION_MAJOR != version[0]) ||

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#805: FILE: drivers/md/dm-ioctl.c:628:
+	    (DM_VERSION_MINOR < version[1])) {

WARNING:SPLIT_STRING: quoted string split across lines
#807: FILE: drivers/md/dm-ioctl.c:630:
+		DMWARN("ioctl interface mismatch: "
+		       "kernel(%u.%u.%u), user(%u.%u.%u), cmd(%d)",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:SPACING: No space is necessary after a cast
#841: FILE: drivers/md/dm-ioctl.c:664:
+	dmi = (struct dm_ioctl *) vmalloc(tmp.data_size);

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#841: FILE: drivers/md/dm-ioctl.c:664:
+	dmi = (struct dm_ioctl *) vmalloc(tmp.data_size);

CHECK:SPACING: No space is necessary after a cast
#877: FILE: drivers/md/dm-ioctl.c:700:
+	struct dm_ioctl *user = (struct dm_ioctl *) u;

WARNING:CONST_STRUCT: struct file_operations should normally be const
#927: FILE: drivers/md/dm-ioctl.c:750:
+static struct file_operations _ctl_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:SIZEOF_PARENTHESIS: sizeof rname should be sizeof(rname)
#955: FILE: drivers/md/dm-ioctl.c:778:
+				sizeof rname - 3);

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#956: FILE: drivers/md/dm-ioctl.c:779:
+	if (r == -ENOSYS)

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

WARNING:INDENTED_LABEL: labels should not be indented
#978: FILE: drivers/md/dm-ioctl.c:801:
+      failed:

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1001: FILE: include/linux/dm-ioctl.h:1:
+/*

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1038: FILE: include/linux/dm-ioctl.h:38:
+	uint32_t version[3];	/* in/out */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1039: FILE: include/linux/dm-ioctl.h:39:
+	uint32_t data_size;	/* total size of data passed in

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1040: FILE: include/linux/dm-ioctl.h:40:
+				 * including this struct */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1042: FILE: include/linux/dm-ioctl.h:42:
+	uint32_t data_start;	/* offset to start of data

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1043: FILE: include/linux/dm-ioctl.h:43:
+				 * relative to start of this struct */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1045: FILE: include/linux/dm-ioctl.h:45:
+	uint32_t target_count;	/* in/out */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1046: FILE: include/linux/dm-ioctl.h:46:
+	uint32_t open_count;	/* out */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1047: FILE: include/linux/dm-ioctl.h:47:
+	uint32_t flags;		/* in/out */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1053: FILE: include/linux/dm-ioctl.h:53:
+				 * the block device */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's32' over 'int32_t'
#1061: FILE: include/linux/dm-ioctl.h:61:
+	int32_t status;		/* used when reading from kernel only */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1062: FILE: include/linux/dm-ioctl.h:62:
+	uint64_t sector_start;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1063: FILE: include/linux/dm-ioctl.h:63:
+	uint32_t length;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1069: FILE: include/linux/dm-ioctl.h:69:
+	uint32_t next;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1084: FILE: include/linux/dm-ioctl.h:84:
+	uint32_t count;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000423230.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 2 errors, 30 warnings, 32 checks, 1091 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000423230.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
