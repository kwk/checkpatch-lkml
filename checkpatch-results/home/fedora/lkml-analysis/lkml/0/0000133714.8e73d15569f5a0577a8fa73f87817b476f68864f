WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#71: FILE: block/elevator.c:313:
+	unsigned ordseq;

WARNING:LINE_SPACING: Missing a blank line after declarations
#106: FILE: block/elevator.c:401:
+			struct request *pos_rq = list_entry_rq(pos);
+			if (ordseq <= blk_ordered_req_seq(pos_rq))

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#182: FILE: block/ll_rw_blk.c:295:
+			       unsigned gfp_mask, int locked)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!prepare_flush_fn"
#191: FILE: block/ll_rw_blk.c:304:
+	    prepare_flush_fn == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#192: FILE: block/ll_rw_blk.c:305:
+		printk(KERN_ERR "blk_queue_ordered: prepare_flush_fn required\n");

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#229: FILE: block/ll_rw_blk.c:342:
+		if (!(rq0 = kmem_cache_alloc(request_cachep, gfp_mask)) ||

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#232: FILE: block/ll_rw_blk.c:345:
+			printk(KERN_ERR "blk_queue_ordered: failed to "

WARNING:SPLIT_STRING: quoted string split across lines
#233: FILE: block/ll_rw_blk.c:346:
+			printk(KERN_ERR "blk_queue_ordered: failed to "
+			       "switch to 0x%x (out of memory)\n", ordered);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#251: FILE: block/ll_rw_blk.c:364:
+		printk(KERN_ERR "blk_queue_ordered: bad value %d\n", ordered);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#288: FILE: block/ll_rw_blk.c:399:
+extern int blk_queue_ordered(request_queue_t *q, unsigned ordered,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#290: FILE: block/ll_rw_blk.c:401:
+			     unsigned gfp_mask)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#317: FILE: block/ll_rw_blk.c:408:
+extern int blk_queue_ordered_locked(request_queue_t *q, unsigned ordered,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#319: FILE: block/ll_rw_blk.c:410:
+				    unsigned gfp_mask)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#324: FILE: block/ll_rw_blk.c:415:
+EXPORT_SYMBOL(blk_queue_ordered_locked);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#334: FILE: block/ll_rw_blk.c:437:
+inline unsigned blk_ordered_cur_seq(request_queue_t *q)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#344: FILE: block/ll_rw_blk.c:444:
+unsigned blk_ordered_req_seq(struct request *rq)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#349: FILE: block/ll_rw_blk.c:448:
+	BUG_ON(q->ordseq == 0);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#373: FILE: block/ll_rw_blk.c:464:
+void blk_ordered_complete_seq(request_queue_t *q, unsigned seq, int error)

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#378: FILE: block/ll_rw_blk.c:467:
+	int uptodate;
 	    ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#385: FILE: block/ll_rw_blk.c:472:
+	BUG_ON(q->ordseq & seq);

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#398: FILE: block/ll_rw_blk.c:482:
+	uptodate = q->orderr ? q->orderr : 1;
 	^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#402: FILE: block/ll_rw_blk.c:486:
+	end_that_request_first(rq, uptodate, rq->hard_nr_sectors);
 	                           ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#403: FILE: block/ll_rw_blk.c:487:
+	end_that_request_last(rq, uptodate);
 	                          ^^^^^^^^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#434: FILE: block/ll_rw_blk.c:508:
+static void queue_flush(request_queue_t *q, unsigned which)

WARNING:TYPO_SPELLING: 'inbetween' may be misspelled - perhaps 'between'?
#492: FILE: block/ll_rw_blk.c:557:
+	 * request gets inbetween ordered sequence.
 	                ^^^^^^^^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#505: FILE: block/ll_rw_blk.c:566:
+	if (q->ordered & QUEUE_ORDERED_PREFLUSH) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#508: FILE: block/ll_rw_blk.c:569:
+	} else

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#536: FILE: block/ll_rw_blk.c:592:
+			return 1;
+		} else {

CHECK:BIT_MACRO: Prefer using the BIT macro
#782: FILE: include/linux/blkdev.h:242:
+#define REQ_FUA		(1 << __REQ_FUA)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#793: FILE: include/linux/blkdev.h:262:
+#define REQ_ORDERED_COLOR	(1 << __REQ_ORDERED_COLOR)

CHECK:SPACING: No space is necessary after a cast
#803: FILE: include/linux/blkdev.h:292:
+typedef void (prepare_flush_fn) (request_queue_t *, struct request *);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#904: FILE: include/linux/blkdev.h:691:
+extern int blk_queue_ordered(request_queue_t *, unsigned, prepare_flush_fn *, unsigned);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#904: FILE: include/linux/blkdev.h:691:
+extern int blk_queue_ordered(request_queue_t *, unsigned, prepare_flush_fn *, unsigned);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#904: FILE: include/linux/blkdev.h:691:
+extern int blk_queue_ordered(request_queue_t *, unsigned, prepare_flush_fn *, unsigned);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'request_queue_t *' should also have an identifier name
#904: FILE: include/linux/blkdev.h:691:
+extern int blk_queue_ordered(request_queue_t *, unsigned, prepare_flush_fn *, unsigned);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned' should also have an identifier name
#904: FILE: include/linux/blkdev.h:691:
+extern int blk_queue_ordered(request_queue_t *, unsigned, prepare_flush_fn *, unsigned);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'prepare_flush_fn *' should also have an identifier name
#904: FILE: include/linux/blkdev.h:691:
+extern int blk_queue_ordered(request_queue_t *, unsigned, prepare_flush_fn *, unsigned);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned' should also have an identifier name
#904: FILE: include/linux/blkdev.h:691:
+extern int blk_queue_ordered(request_queue_t *, unsigned, prepare_flush_fn *, unsigned);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#905: FILE: include/linux/blkdev.h:692:
+extern int blk_queue_ordered_locked(request_queue_t *, unsigned, prepare_flush_fn *, unsigned);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#905: FILE: include/linux/blkdev.h:692:
+extern int blk_queue_ordered_locked(request_queue_t *, unsigned, prepare_flush_fn *, unsigned);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#905: FILE: include/linux/blkdev.h:692:
+extern int blk_queue_ordered_locked(request_queue_t *, unsigned, prepare_flush_fn *, unsigned);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'request_queue_t *' should also have an identifier name
#905: FILE: include/linux/blkdev.h:692:
+extern int blk_queue_ordered_locked(request_queue_t *, unsigned, prepare_flush_fn *, unsigned);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned' should also have an identifier name
#905: FILE: include/linux/blkdev.h:692:
+extern int blk_queue_ordered_locked(request_queue_t *, unsigned, prepare_flush_fn *, unsigned);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'prepare_flush_fn *' should also have an identifier name
#905: FILE: include/linux/blkdev.h:692:
+extern int blk_queue_ordered_locked(request_queue_t *, unsigned, prepare_flush_fn *, unsigned);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned' should also have an identifier name
#905: FILE: include/linux/blkdev.h:692:
+extern int blk_queue_ordered_locked(request_queue_t *, unsigned, prepare_flush_fn *, unsigned);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#910: FILE: include/linux/blkdev.h:694:
+extern int blk_do_ordered(request_queue_t *, struct request **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'request_queue_t *' should also have an identifier name
#910: FILE: include/linux/blkdev.h:694:
+extern int blk_do_ordered(request_queue_t *, struct request **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct request **' should also have an identifier name
#910: FILE: include/linux/blkdev.h:694:
+extern int blk_do_ordered(request_queue_t *, struct request **);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#911: FILE: include/linux/blkdev.h:695:
+extern unsigned blk_ordered_cur_seq(request_queue_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#911: FILE: include/linux/blkdev.h:695:
+extern unsigned blk_ordered_cur_seq(request_queue_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'request_queue_t *' should also have an identifier name
#911: FILE: include/linux/blkdev.h:695:
+extern unsigned blk_ordered_cur_seq(request_queue_t *);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#912: FILE: include/linux/blkdev.h:696:
+extern unsigned blk_ordered_req_seq(struct request *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#912: FILE: include/linux/blkdev.h:696:
+extern unsigned blk_ordered_req_seq(struct request *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct request *' should also have an identifier name
#912: FILE: include/linux/blkdev.h:696:
+extern unsigned blk_ordered_req_seq(struct request *);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#913: FILE: include/linux/blkdev.h:697:
+extern void blk_ordered_complete_seq(request_queue_t *, unsigned, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#913: FILE: include/linux/blkdev.h:697:
+extern void blk_ordered_complete_seq(request_queue_t *, unsigned, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'request_queue_t *' should also have an identifier name
#913: FILE: include/linux/blkdev.h:697:
+extern void blk_ordered_complete_seq(request_queue_t *, unsigned, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned' should also have an identifier name
#913: FILE: include/linux/blkdev.h:697:
+extern void blk_ordered_complete_seq(request_queue_t *, unsigned, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#913: FILE: include/linux/blkdev.h:697:
+extern void blk_ordered_complete_seq(request_queue_t *, unsigned, int);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000133714.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 46 warnings, 12 checks, 843 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000133714.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
