WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#66: 
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#76: FILE: cryptoloop.c:44:
are doing

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#89: FILE: cryptoloop.c:87:
+  if (info->lo_offset % LO_IV_SECTOR_SIZE)=20$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#89: FILE: cryptoloop.c:87:
+  if (info->lo_offset % LO_IV_SECTOR_SIZE)=20
                                           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#89: FILE: cryptoloop.c:87:
+  if (info->lo_offset % LO_IV_SECTOR_SIZE)=20

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#93: FILE: cryptoloop.c:89:
+  lx->blocksize =3D LO_IV_SECTOR_SIZE;$

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#93: FILE: cryptoloop.c:89:
+  lx->blocksize =3D LO_IV_SECTOR_SIZE;
                 ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#102: FILE: cryptoloop.c:165:
+  IV /=3D blocksize / LO_IV_SECTOR_SIZE;$

ERROR:SPACING: spaces required around that '/=' (ctx:WxV)
#102: FILE: cryptoloop.c:165:
+  IV /=3D blocksize / LO_IV_SECTOR_SIZE;
      ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#112: FILE: cryptoloop.c:206:
+    if (*arg_int >=3D 0 && (*arg_int % LO_IV_SECTOR_SIZE =3D=3D 0))$

ERROR:SPACING: spaces required around that '>=' (ctx:WxV)
#112: FILE: cryptoloop.c:206:
+    if (*arg_int >=3D 0 && (*arg_int % LO_IV_SECTOR_SIZE =3D=3D 0))
                  ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#112: FILE: cryptoloop.c:206:
+    if (*arg_int >=3D 0 && (*arg_int % LO_IV_SECTOR_SIZE =3D=3D 0))
                                                          ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#112: FILE: cryptoloop.c:206:
+    if (*arg_int >=3D 0 && (*arg_int % LO_IV_SECTOR_SIZE =3D=3D 0))
                                                             ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#112: FILE: cryptoloop.c:206:
+    if (*arg_int >=3D 0 && (*arg_int % LO_IV_SECTOR_SIZE =3D=3D 0))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:PATCH_PREFIX: patch prefix 'drivers' exists, appears to be a -p0 patch

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#139: FILE: block/loop.c:173:
 }
+static inline int loop_get_bs(struct loop_device *lo)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#141: FILE: block/loop.c:175:
+	int bs =3D 0;
 	       ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#144: FILE: block/loop.c:178:
+		bs =3D blksize_size[MAJOR(lo->lo_device)][MINOR(lo->lo_device)];
 		   ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#146: FILE: block/loop.c:180:
+		bs =3D BLOCK_SIZE;=09
 		   ^

ERROR:SPACING: space required after that ';' (ctx:VxO)
#146: FILE: block/loop.c:180:
+		bs =3D BLOCK_SIZE;=09
 		                 ^

ERROR:SPACING: spaces required around that '=' (ctx:OxV)
#146: FILE: block/loop.c:180:
+		bs =3D BLOCK_SIZE;=09
 		                  ^

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#157: FILE: block/loop.c:191:
+	switch (lo->lo_iv_mode) {
+		case LO_IV_MODE_SECTOR:
[...]
+		default:
[...]
+		case LO_IV_MODE_DEFAULT:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#159: FILE: block/loop.c:193:
+			IV =3D sector + (lo->lo_offset >> LO_IV_SECTOR_BITS);
 			   ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#163: FILE: block/loop.c:197:
+			printk (KERN_WARNING "loop: unexpected lo_iv_mode\n");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#163: FILE: block/loop.c:197:
+			printk (KERN_WARNING "loop: unexpected lo_iv_mode\n");

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#165: FILE: block/loop.c:199:
+			bs =3D loop_get_bs(lo);
 			   ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#166: FILE: block/loop.c:200:
+			IV =3D sector / (bs >> 9) + lo->lo_offset / bs;
 			   ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#167: FILE: block/loop.c:201:
+			offset =3D ((sector % (bs >> 9)) << 9) + lo->lo_offset % bs;

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#167: FILE: block/loop.c:201:
+			offset =3D ((sector % (bs >> 9)) << 9) + lo->lo_offset % bs;
 			       ^

ERROR:SPACING: spaces required around that '>=' (ctx:WxV)
#168: FILE: block/loop.c:202:
+			if (offset >=3D bs)
 			           ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#185: FILE: block/loop.c:229:
+                unsigned long IV =3D loop_get_iv(lo, (pos - lo->lo_offset)=$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#185: FILE: block/loop.c:229:
+                unsigned long IV =3D loop_get_iv(lo, (pos - lo->lo_offset)=$

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#185: FILE: block/loop.c:229:
+                unsigned long IV =3D loop_get_iv(lo, (pos - lo->lo_offset)=
                                  ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#185: FILE: block/loop.c:229:
+                unsigned long IV =3D loop_get_iv(lo, (pos - lo->lo_offset)=
                                                                           ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#195: FILE: block/loop.c:287:
+	unsigned long IV =3D loop_get_iv(lo,
 	                 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#240: FILE: block/loop.c:697:
+	lo->lo_iv_mode =3D LO_IV_MODE_SECTOR;
 	               ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000489859.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 25 errors, 10 warnings, 1 checks, 151 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000489859.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
