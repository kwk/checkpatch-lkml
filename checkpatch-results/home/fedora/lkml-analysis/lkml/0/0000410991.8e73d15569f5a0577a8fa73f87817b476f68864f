WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#31: 
Here's another v850 update for 2.5.49-uc0 (applies on top of the previous one).

WARNING:PATCH_PREFIX: patch prefix 'arch' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'arch' exists, appears to be a -p0 patch

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#65: FILE: v850/kernel/bug.c:64:
+
 ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#65: FILE: v850/kernel/bug.c:64:
+^L$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#65: FILE: v850/kernel/bug.c:64:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#81: FILE: v850/kernel/bug.c:80:
+void show_regs (struct pt_regs *regs)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#85: FILE: v850/kernel/bug.c:84:
+	printk ("     pc 0x%08lx    psw 0x%08lx                       kernel_mode %d\n",

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#85: FILE: v850/kernel/bug.c:84:
+	printk ("     pc 0x%08lx    psw 0x%08lx                       kernel_mode %d\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#87: FILE: v850/kernel/bug.c:86:
+	printk ("   ctpc 0x%08lx  ctpsw 0x%08lx   ctbp 0x%08lx\n",

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#87: FILE: v850/kernel/bug.c:86:
+	printk ("   ctpc 0x%08lx  ctpsw 0x%08lx   ctbp 0x%08lx\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#101: FILE: v850/kernel/bug.c:100:
+				printk ("%7s 0x%08lx", srn->name, val);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#101: FILE: v850/kernel/bug.c:100:
+				printk ("%7s 0x%08lx", srn->name, val);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#103: FILE: v850/kernel/bug.c:102:
+				printk ("    r%02d 0x%08lx", gpr, val);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#103: FILE: v850/kernel/bug.c:102:
+				printk ("    r%02d 0x%08lx", gpr, val);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#106: FILE: v850/kernel/bug.c:105:
+		printk ("\n");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#106: FILE: v850/kernel/bug.c:105:
+		printk ("\n");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#110: FILE: v850/kernel/bug.c:109:
+void show_stack (unsigned long *sp)

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#115: FILE: v850/kernel/bug.c:114:
+	if (! addr)
 	    ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#116: FILE: v850/kernel/bug.c:115:
+		addr = stack_addr ();

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#122: FILE: v850/kernel/bug.c:121:
+		printk ("%8lX: ", addr);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#122: FILE: v850/kernel/bug.c:121:
+		printk ("%8lX: ", addr);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#124: FILE: v850/kernel/bug.c:123:
+			printk (" %8lX", *(unsigned long *)addr);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#124: FILE: v850/kernel/bug.c:123:
+			printk (" %8lX", *(unsigned long *)addr);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#125: FILE: v850/kernel/bug.c:124:
+			addr += sizeof (unsigned long);

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#126: FILE: v850/kernel/bug.c:125:
+			if (! (addr & 0xF))
 			    ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#129: FILE: v850/kernel/bug.c:128:
+		printk ("\n");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#129: FILE: v850/kernel/bug.c:128:
+		printk ("\n");

ERROR:FUNCTION_WITHOUT_ARGS: Bad function definition - void dump_stack() should probably be void dump_stack(void)
#133: FILE: v850/kernel/bug.c:132:
+void dump_stack ()

Function declarations without arguments like::

  int foo()

should be::

  int foo(void)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#133: FILE: v850/kernel/bug.c:132:
+void dump_stack ()

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#135: FILE: v850/kernel/bug.c:134:
+	show_stack (0);

WARNING:PATCH_PREFIX: patch prefix 'arch' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'arch' exists, appears to be a -p0 patch

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#158: FILE: v850/kernel/module.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#159: FILE: v850/kernel/module.c:2:
+ * arch/v850/kernel/module.c -- Architecture-specific module functions

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#179: FILE: v850/kernel/module.c:22:
+#if 0

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#182: FILE: v850/kernel/module.c:25:
+#define DEBUGP(fmt , ...)
                    ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#185: FILE: v850/kernel/module.c:28:
+void *module_alloc (unsigned long size)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#187: FILE: v850/kernel/module.c:30:
+	return size == 0 ? 0 : vmalloc (size);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#190: FILE: v850/kernel/module.c:33:
+void module_free (struct module *mod, void *module_region)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#192: FILE: v850/kernel/module.c:35:
+	vfree (module_region);

ERROR:CODE_INDENT: code indent should use tabs where possible
#194: FILE: v850/kernel/module.c:37:
+           table entries. */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#194: FILE: v850/kernel/module.c:37:
+	/* FIXME: If module_region == mod->init_region, trim exception
+           table entries. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#194: FILE: v850/kernel/module.c:37:
+           table entries. */

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#197: FILE: v850/kernel/module.c:40:
+int module_finalize (const Elf_Ehdr *hdr, const Elf_Shdr *sechdrs,

CHECK:CAMELCASE: Avoid CamelCase: <Elf_Ehdr>
#197: FILE: v850/kernel/module.c:40:
+int module_finalize (const Elf_Ehdr *hdr, const Elf_Shdr *sechdrs,

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Elf_Shdr>
#197: FILE: v850/kernel/module.c:40:
+int module_finalize (const Elf_Ehdr *hdr, const Elf_Shdr *sechdrs,

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#204: FILE: v850/kernel/module.c:47:
+/* Count how many different relocations (different symbol, different
+   addend) */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#204: FILE: v850/kernel/module.c:47:
+   addend) */

CHECK:CAMELCASE: Avoid CamelCase: <Elf32_Rela>
#205: FILE: v850/kernel/module.c:48:
+static unsigned int count_relocs(const Elf32_Rela *rela, unsigned int num)

ERROR:CODE_INDENT: code indent should use tabs where possible
#210: FILE: v850/kernel/module.c:53:
+           time critical */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#210: FILE: v850/kernel/module.c:53:
+	/* Sure, this is order(n^2), but it's usually short, and not
+           time critical */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#210: FILE: v850/kernel/module.c:53:
+           time critical */

ERROR:CODE_INDENT: code indent should use tabs where possible
#214: FILE: v850/kernel/module.c:57:
+                           already been counted */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#214: FILE: v850/kernel/module.c:57:
+			/* If this addend appeared before, it's
+                           already been counted */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#214: FILE: v850/kernel/module.c:57:
+                           already been counted */

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#217: FILE: v850/kernel/module.c:60:
+			    == ELF32_R_SYM(rela[j].r_info)
+			    && rela[i].r_addend == rela[j].r_addend)

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#220: FILE: v850/kernel/module.c:63:
+		if (j == i) ret++;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#226: FILE: v850/kernel/module.c:69:
+/* Get the potential trampolines size required of the init and
+   non-init sections */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#226: FILE: v850/kernel/module.c:69:
+   non-init sections */

CHECK:CAMELCASE: Avoid CamelCase: <Elf32_Ehdr>
#227: FILE: v850/kernel/module.c:70:
+static unsigned long get_plt_size(const Elf32_Ehdr *hdr,

CHECK:CAMELCASE: Avoid CamelCase: <Elf32_Shdr>
#228: FILE: v850/kernel/module.c:71:
+				  const Elf32_Shdr *sechdrs,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#233: FILE: v850/kernel/module.c:76:
+	unsigned i;

ERROR:CODE_INDENT: code indent should use tabs where possible
#236: FILE: v850/kernel/module.c:79:
+           symbols) */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#236: FILE: v850/kernel/module.c:79:
+	/* Everything marked ALLOC (this includes the exported
+           symbols) */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#236: FILE: v850/kernel/module.c:79:
+           symbols) */

ERROR:CODE_INDENT: code indent should use tabs where possible
#239: FILE: v850/kernel/module.c:82:
+                   not interested */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#239: FILE: v850/kernel/module.c:82:
+		/* If it's called *.init*, and we're not init, we're
+                   not interested */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#239: FILE: v850/kernel/module.c:82:
+                   not interested */

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#260: FILE: v850/kernel/module.c:103:
+long module_core_size (const Elf32_Ehdr *hdr, const Elf32_Shdr *sechdrs,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#264: FILE: v850/kernel/module.c:107:
+	return mod->core_size + get_plt_size (hdr, sechdrs, secstrings, 1);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#267: FILE: v850/kernel/module.c:110:
+long module_init_size (const Elf32_Ehdr *hdr, const Elf32_Shdr *sechdrs,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#271: FILE: v850/kernel/module.c:114:
+	return mod->init_size + get_plt_size (hdr, sechdrs, secstrings, 1);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#274: FILE: v850/kernel/module.c:117:
+int apply_relocate (Elf32_Shdr *sechdrs, const char *strtab,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#278: FILE: v850/kernel/module.c:121:
+	printk ("Barf\n");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#278: FILE: v850/kernel/module.c:121:
+	printk ("Barf\n");

CHECK:CAMELCASE: Avoid CamelCase: <Elf32_Addr>
#283: FILE: v850/kernel/module.c:126:
+static uint32_t do_plt_call(void *location, Elf32_Addr val, struct module *mod)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#287: FILE: v850/kernel/module.c:130:
+	uint32_t tramp[2];

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#290: FILE: v850/kernel/module.c:133:
+	/* We have to trash a register, so we assume that any control
+	   transfer more than 21-bits away must be a function call

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#291: FILE: v850/kernel/module.c:134:
+	   (so we can use a call-clobbered register).  */

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#297: FILE: v850/kernel/module.c:140:
+	if (location >= mod->module_core
+	    && location < mod->module_core + mod->arch.core_plt_offset)

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#306: FILE: v850/kernel/module.c:149:
+			return (uint32_t)entry;
+		else

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#315: FILE: v850/kernel/module.c:158:
+int apply_relocate_add (Elf32_Shdr *sechdrs, const char *strtab,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#322: FILE: v850/kernel/module.c:165:
+	DEBUGP ("Applying relocate section %u to %u\n", relsec,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#325: FILE: v850/kernel/module.c:168:
+	for (i = 0; i < sechdrs[relsec].sh_size / sizeof (*rela); i++) {

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#328: FILE: v850/kernel/module.c:171:
+		uint32_t *loc
+			= ((void *)sechdrs[sechdrs[relsec].sh_info].sh_offset

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

CHECK:CAMELCASE: Avoid CamelCase: <Elf32_Sym>
#331: FILE: v850/kernel/module.c:174:
+		Elf32_Sym *sym

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#332: FILE: v850/kernel/module.c:175:
+		Elf32_Sym *sym
+			= ((Elf32_Sym *)sechdrs[symindex].sh_offset

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#333: FILE: v850/kernel/module.c:176:
+			   + ELF32_R_SYM (rela[i].r_info));

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#334: FILE: v850/kernel/module.c:177:
+		uint32_t val = sym->st_value;

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#336: FILE: v850/kernel/module.c:179:
+		if (! val) {
 		    ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#337: FILE: v850/kernel/module.c:180:
+			printk (KERN_WARNING "%s: Unknown symbol %s\n",

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#337: FILE: v850/kernel/module.c:180:
+			printk (KERN_WARNING "%s: Unknown symbol %s\n",

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#344: FILE: v850/kernel/module.c:187:
+		switch (ELF32_R_TYPE (rela[i].r_info)) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#347: FILE: v850/kernel/module.c:190:
+			/* We write two shorts instead of a long because even
+			   32-bit insns only need half-word alignment, but

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#348: FILE: v850/kernel/module.c:191:
+			   32-bit data writes need to be long-word aligned.  */

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#358: FILE: v850/kernel/module.c:201:
+			if ((int32_t)(val - (uint32_t)loc) > 0x1fffff
+			    || (int32_t)(val - (uint32_t)loc) < -0x200000)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#359: FILE: v850/kernel/module.c:202:
+				val = do_plt_call (loc, val, mod);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#364: FILE: v850/kernel/module.c:207:
+			/* We write two shorts instead of a long because
+			   even 32-bit insns only need half-word alignment,

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#366: FILE: v850/kernel/module.c:209:
+			   aligned.  */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#375: FILE: v850/kernel/module.c:218:
+			printk (KERN_ERR "module %s: Unknown reloc: %u\n",

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#375: FILE: v850/kernel/module.c:218:
+			printk (KERN_ERR "module %s: Unknown reloc: %u\n",

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#376: FILE: v850/kernel/module.c:219:
+				mod->name, ELF32_R_TYPE (rela[i].r_info));

WARNING:PATCH_PREFIX: patch prefix 'arch' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'arch' exists, appears to be a -p0 patch

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#443: FILE: v850/kernel/v850_ksyms.c:30:
+EXPORT_SYMBOL (enable_irq);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#444: FILE: v850/kernel/v850_ksyms.c:31:
+EXPORT_SYMBOL (disable_irq);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#444: FILE: v850/kernel/v850_ksyms.c:31:
+EXPORT_SYMBOL (disable_irq);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#445: FILE: v850/kernel/v850_ksyms.c:32:
+EXPORT_SYMBOL (disable_irq_nosync);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#445: FILE: v850/kernel/v850_ksyms.c:32:
+EXPORT_SYMBOL (disable_irq_nosync);

WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#457: FILE: asm-v850/elf.h:22:
+#define elf_check_arch(x)  \
+  ((x)->e_machine == EM_V850 || (x)->e_machine == EM_CYGNUS_V850)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#458: FILE: asm-v850/elf.h:23:
+  ((x)->e_machine == EM_V850 || (x)->e_machine == EM_CYGNUS_V850)$

WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

CHECK:LINE_SPACING: Please don't use multiple blank lines
#469: FILE: asm-v850/irq.h:55:
 
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#471: FILE: asm-v850/irq.h:57:
+extern void enable_irq(unsigned int irq);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#474: FILE: asm-v850/irq.h:60:
+extern void disable_irq (unsigned int irq);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#474: FILE: asm-v850/irq.h:60:
+extern void disable_irq (unsigned int irq);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#477: FILE: asm-v850/irq.h:63:
+extern void disable_irq_nosync (unsigned int irq);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#477: FILE: asm-v850/irq.h:63:
+extern void disable_irq_nosync (unsigned int irq);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#479: FILE: asm-v850/irq.h:65:
+
+

WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#511: FILE: asm-v850/module.h:23:
+struct v850_plt_entry
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#517: FILE: asm-v850/module.h:29:
+struct mod_arch_specific
+{

ERROR:CODE_INDENT: code indent should use tabs where possible
#519: FILE: asm-v850/module.h:31:
+           we know the rest is for the PLT).  */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#519: FILE: asm-v850/module.h:31:
+	/* How much of the core is actually taken up with core (then
+           we know the rest is for the PLT).  */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#519: FILE: asm-v850/module.h:31:
+           we know the rest is for the PLT).  */

CHECK:CAMELCASE: Avoid CamelCase: <Elf_Sym>
#527: FILE: asm-v850/module.h:39:
+#define Elf_Sym Elf32_Sym

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000410991.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 15 errors, 90 warnings, 23 checks, 450 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000410991.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
