CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#53: FILE: include/linux/cpuset.h:31:
+extern int subcpuset_register_controller(struct subcpuset_ctlr *ctlr);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#54: FILE: include/linux/cpuset.h:32:
+extern void *subcpuset_get_controller_data(struct cpuset *cs,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#56: FILE: include/linux/cpuset.h:34:
+extern void *subcpuset_get_toplevel_data(struct cpuset *cs,

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#88: FILE: init/Kconfig:241:
+config SUBCPUSETS
+	bool "Subcpuset support"
+	depends on CPUSETS
+	help
+	  This option enables the resource control of CPUs and memory
+	  via the CPUSETS interface.
+
+	  Say N if unsure.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:TYPO_SPELLING: 'ammount' may be misspelled - perhaps 'amount'?
#129: FILE: kernel/cpuset.c:96:
+		 *            to keep track of total ammount of resources.
 		                                     ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#130: FILE: kernel/cpuset.c:97:
+^I^I * resources: used for the subcpuset to keep track of $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#174: FILE: kernel/cpuset.c:156:
+static ssize_t subcpuset_file_read_common(struct file *file, char __user *buf, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#177: FILE: kernel/cpuset.c:159:
+static ssize_t subcpuset_guar_file_read(struct file *file, char __user *buf, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#179: FILE: kernel/cpuset.c:161:
+static ssize_t subcpuset_lim_file_read(struct file *file, char __user *buf, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#181: FILE: kernel/cpuset.c:163:
+static ssize_t subcpuset_cur_file_read(struct file *file, char __user *buf, $

WARNING:CONST_STRUCT: struct file_operations should normally be const
#194: FILE: kernel/cpuset.c:176:
+			      struct file_operations *fop);

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#250: FILE: kernel/cpuset.c:703:
+^I * Do not allow to set subcpuset_top to 1 if neither cpus nor $

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#352: FILE: kernel/cpuset.c:1204:
+			      struct inode_operations *iop,

WARNING:CONST_STRUCT: struct file_operations should normally be const
#353: FILE: kernel/cpuset.c:1205:
+			      struct file_operations *fop)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#403: FILE: kernel/cpuset.c:1478:
+	if ((err = cpuset_add_subcpuset_top(cs_dentry)) < 0)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:STATIC_CONST_CHAR_ARRAY: static char array declaration should probably be static const char
#460: FILE: kernel/cpuset.c:1870:
+static char subcpuset_guar_suffix[] = "_guar";

WARNING:STATIC_CONST_CHAR_ARRAY: static char array declaration should probably be static const char
#461: FILE: kernel/cpuset.c:1871:
+static char subcpuset_lim_suffix[] = "_lim";

WARNING:STATIC_CONST_CHAR_ARRAY: static char array declaration should probably be static const char
#462: FILE: kernel/cpuset.c:1872:
+static char subcpuset_cur_suffix[] = "_cur";

ERROR:TRAILING_WHITESPACE: trailing whitespace
#472: FILE: kernel/cpuset.c:1882:
+^I^I    $

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!subcpuset_ctlrs[idx]"
#474: FILE: kernel/cpuset.c:1884:
+		if (subcpuset_ctlrs[idx] == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#519: FILE: kernel/cpuset.c:1929:
+			if (! *p)
 			    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#533: FILE: kernel/cpuset.c:1943:
+^I}^I^I^I$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#589: FILE: kernel/cpuset.c:1999:
+		r->guar = r->lim = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#632: FILE: kernel/cpuset.c:2042:
+static ssize_t subcpuset_file_read_common(struct file *file, char __user *buf, $

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#640: FILE: kernel/cpuset.c:2050:
+	if (!(page = (char *)__get_free_page(GFP_KERNEL)))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#661: FILE: kernel/cpuset.c:2071:
+static ssize_t subcpuset_guar_file_read(struct file *file, char __user *buf, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#677: FILE: kernel/cpuset.c:2087:
+static ssize_t subcpuset_lim_file_read(struct file *file, char __user *buf, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#693: FILE: kernel/cpuset.c:2103:
+static ssize_t subcpuset_cur_file_read(struct file *file, char __user *buf, $

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#718: FILE: kernel/cpuset.c:2128:
+	if (nbytes > 100 + 6 * NR_CPUS)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#722: FILE: kernel/cpuset.c:2132:
+	if ((buffer = kmalloc(nbytes + 1, GFP_KERNEL)) == 0)

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#731: FILE: kernel/cpuset.c:2141:
+	*valp = simple_strtoul(buffer, NULL, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:CONST_STRUCT: struct file_operations should normally be const
#811: FILE: kernel/cpuset.c:2221:
+static struct file_operations subcpuset_guar_file_operations = {

WARNING:CONST_STRUCT: struct file_operations should normally be const
#818: FILE: kernel/cpuset.c:2228:
+static struct file_operations subcpuset_lim_file_operations = {

WARNING:CONST_STRUCT: struct file_operations should normally be const
#825: FILE: kernel/cpuset.c:2235:
+static struct file_operations subcpuset_cur_file_operations = {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#838: FILE: kernel/cpuset.c:2248:
+	if ((err = cpuset_add_file(cs_dentry, &cft_notify_on_release)) < 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#841: FILE: kernel/cpuset.c:2251:
+	if ((err = cpuset_add_file(cs_dentry, &cft_tasks)) < 0)

WARNING:CONST_STRUCT: struct file_operations should normally be const
#884: FILE: kernel/cpuset.c:2294:
+			      struct file_operations *fop)

CHECK:BRACES: braces {} should be used on all arms of this statement
#891: FILE: kernel/cpuset.c:2301:
+	if (!IS_ERR(dentry)) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#896: FILE: kernel/cpuset.c:2306:
+	} else

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000153544.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 18 errors, 14 warnings, 7 checks, 851 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000153544.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
