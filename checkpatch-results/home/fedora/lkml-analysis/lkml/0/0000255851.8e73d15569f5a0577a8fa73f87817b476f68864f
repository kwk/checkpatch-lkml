CHECK:SPACING: No space is necessary after a cast
#124: FILE: fs/proc/task_mmu.c:24:
+		(unsigned long) atomic_read(&mm->mm_rss) << (PAGE_SHIFT-10),

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#124: FILE: fs/proc/task_mmu.c:24:
+		(unsigned long) atomic_read(&mm->mm_rss) << (PAGE_SHIFT-10),
 		                                                       ^

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#325: FILE: mm/memory.c:1463:
+	if (!ptep_cmpxchg(page_table, orig_entry, entry))
+	{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#365: FILE: mm/memory.c:1507:
+        pmd_t *pmd, pte_t orig_entry)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#365: FILE: mm/memory.c:1507:
+        pmd_t *pmd, pte_t orig_entry)$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#566: FILE: include/asm-ia64/pgalloc.h:92:
+pgd_test_and_populate (struct mm_struct *mm, pgd_t *pgd_entry, pmd_t *pmd)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#568: FILE: include/asm-ia64/pgalloc.h:94:
+	return ia64_cmpxchg8_acq(pgd_entry,__pa(pmd), PMD_NONE) == PMD_NONE;
 	                                  ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#578: FILE: include/asm-ia64/pgalloc.h:145:
+pmd_test_and_populate (struct mm_struct *mm, pmd_t *pmd_entry, struct page *pte)

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#612: FILE: include/asm-i386/pgtable-3level.h:10:
+ * August 26, 2004 added ptep_cmpxchg and ptep_xchg <christoph@lameter.com>
+*/

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#626: FILE: include/asm-i386/pgtable-3level.h:98:
+	 * (But we also have a cmpxchg8b. Why not use that? (cl))
+	  */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#634: FILE: include/asm-i386/pgtable-3level.h:106:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#714: FILE: include/asm-generic/pgtable.h:90:
+static inline pte_t ptep_xchg(pte_t *ptep,pte_t pteval)
                                          ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#720: FILE: include/asm-generic/pgtable.h:96:
+	pte_t pte = *ptep;
+	set_pte(ptep, pteval);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#746: FILE: include/asm-generic/pgtable.h:124:
+	unsigned flags;

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#750: FILE: include/asm-generic/pgtable.h:128:
+	val= *ptep;
 	   ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#751: FILE: include/asm-generic/pgtable.h:129:
+	if (pte_same(val, oldval)) set_pte(ptep, newval);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#757: FILE: include/asm-generic/pgtable.h:135:
+
+

ERROR:SPACING: space required after that ',' (ctx:VxV)
#782: FILE: include/asm-i386/pgtable-2level.h:43:
+#define ptep_xchg(xp,a)       __pte(xchg(&(xp)->pte_low, (a).pte_low))
                     ^

WARNING:LONG_LINE: line length of 118 exceeds 100 columns
#783: FILE: include/asm-i386/pgtable-2level.h:44:
+#define ptep_cmpxchg(xp,oldpte,newpte) (cmpxchg(&(xp)->pte_low, (oldpte).pte_low, (newpte).pte_low)==(oldpte).pte_low)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:SPACING: space required after that ',' (ctx:VxV)
#783: FILE: include/asm-i386/pgtable-2level.h:44:
+#define ptep_cmpxchg(xp,oldpte,newpte) (cmpxchg(&(xp)->pte_low, (oldpte).pte_low, (newpte).pte_low)==(oldpte).pte_low)
                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#783: FILE: include/asm-i386/pgtable-2level.h:44:
+#define ptep_cmpxchg(xp,oldpte,newpte) (cmpxchg(&(xp)->pte_low, (oldpte).pte_low, (newpte).pte_low)==(oldpte).pte_low)
                               ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#783: FILE: include/asm-i386/pgtable-2level.h:44:
+#define ptep_cmpxchg(xp,oldpte,newpte) (cmpxchg(&(xp)->pte_low, (oldpte).pte_low, (newpte).pte_low)==(oldpte).pte_low)
                                                                                                    ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'oldpte' - possible side-effects?
#783: FILE: include/asm-i386/pgtable-2level.h:44:
+#define ptep_cmpxchg(xp,oldpte,newpte) (cmpxchg(&(xp)->pte_low, (oldpte).pte_low, (newpte).pte_low)==(oldpte).pte_low)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#827: FILE: include/asm-ia64/pgtable.h:391:
+ptep_xchg (pte_t *ptep,pte_t pteval)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#827: FILE: include/asm-ia64/pgtable.h:391:
+ptep_xchg (pte_t *ptep,pte_t pteval)
                       ^

CHECK:SPACING: No space is necessary after a cast
#830: FILE: include/asm-ia64/pgtable.h:394:
+	return __pte(xchg((long *) ptep, pteval.pte));

WARNING:LINE_SPACING: Missing a blank line after declarations
#833: FILE: include/asm-ia64/pgtable.h:397:
+	pte_t pte = *ptep;
+	set_pte(ptep,pteval);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#833: FILE: include/asm-ia64/pgtable.h:397:
+	set_pte(ptep,pteval);
 	            ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#840: FILE: include/asm-ia64/pgtable.h:404:
+ptep_cmpxchg (pte_t *ptep, pte_t oldval, pte_t newval)

WARNING:LONG_LINE_COMMENT: line length of 107 exceeds 100 columns
#873: FILE: fs/proc/array.c:390:
+		mm ? (unsigned long)atomic_read(&mm->mm_rss) : 0, /* you might want to shift this left 3 */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#898: FILE: include/asm-ia64/tlb.h:49:
+#include <asm/atomic.h>

ERROR:SPACING: space prohibited after that open parenthesis '('
#937: FILE: include/asm-i386/pgalloc.h:25:
+	return cmpxchg8b( ((unsigned long long *)pmd), PTE_NONE, _PAGE_TABLE +

CHECK:SPACING: No space is necessary after a cast
#939: FILE: include/asm-i386/pgalloc.h:27:
+			(unsigned long long) PAGE_SHIFT) ) == PTE_NONE;

ERROR:SPACING: space prohibited before that close parenthesis ')'
#939: FILE: include/asm-i386/pgalloc.h:27:
+			(unsigned long long) PAGE_SHIFT) ) == PTE_NONE;

WARNING:LONG_LINE: line length of 116 exceeds 100 columns
#941: FILE: include/asm-i386/pgalloc.h:29:
+	return cmpxchg( (unsigned long *)pmd, PTE_NONE, _PAGE_TABLE + (page_to_pfn(pte) << PAGE_SHIFT)) == PTE_NONE;

ERROR:SPACING: space prohibited after that open parenthesis '('
#941: FILE: include/asm-i386/pgalloc.h:29:
+	return cmpxchg( (unsigned long *)pmd, PTE_NONE, _PAGE_TABLE + (page_to_pfn(pte) << PAGE_SHIFT)) == PTE_NONE;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#952: FILE: include/asm-i386/pgalloc.h:66:
+#define pgd_test_and_populate(mm, pmd, pte)	({ BUG(); 1; })

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:CODE_INDENT: code indent should use tabs where possible
#1019: FILE: mm/rmap.c:581:
+ ^I} else$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1019: FILE: mm/rmap.c:581:
+ ^I} else$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1019: FILE: mm/rmap.c:581:
+ ^I} else$

CHECK:BRACES: Unbalanced braces around else statement
#1019: FILE: mm/rmap.c:581:
+ 	} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#1020: FILE: mm/rmap.c:582:
+ ^I^Ipteval = ptep_clear_flush(vma, address, pte);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1020: FILE: mm/rmap.c:582:
+ ^I^Ipteval = ptep_clear_flush(vma, address, pte);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1020: FILE: mm/rmap.c:582:
+ ^I^Ipteval = ptep_clear_flush(vma, address, pte);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1023: FILE: mm/rmap.c:584:
+ ^I/* Move the dirty bit to the physical page now the pte is gone. */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1023: FILE: mm/rmap.c:584:
+ ^I/* Move the dirty bit to the physical page now the pte is gone. */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1023: FILE: mm/rmap.c:584:
+ ^I/* Move the dirty bit to the physical page now the pte is gone. */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1024: FILE: mm/rmap.c:585:
+ ^Iif (pte_dirty(pteval))$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1024: FILE: mm/rmap.c:585:
+ ^Iif (pte_dirty(pteval))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1024: FILE: mm/rmap.c:585:
+ ^Iif (pte_dirty(pteval))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1025: FILE: mm/rmap.c:586:
+ ^I^Iset_page_dirty(page);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1025: FILE: mm/rmap.c:586:
+ ^I^Iset_page_dirty(page);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1025: FILE: mm/rmap.c:586:
+ ^I^Iset_page_dirty(page);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1027: FILE: mm/rmap.c:588:
+ ^Iatomic_dec(&mm->mm_rss);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1027: FILE: mm/rmap.c:588:
+ ^Iatomic_dec(&mm->mm_rss);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1027: FILE: mm/rmap.c:588:
+ ^Iatomic_dec(&mm->mm_rss);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1061: FILE: mm/rmap.c:789:
+			while (atomic_read(&vma->vm_mm->mm_rss) &&
 				cursor < max_nl_cursor &&

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1175: FILE: include/asm-i386/processor.h:659:
+static inline unsigned long __xchg(unsigned long x, volatile void * ptr, int size)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1175: FILE: include/asm-i386/processor.h:659:
+static inline unsigned long __xchg(unsigned long x, volatile void * ptr, int size)

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#1177: FILE: include/asm-i386/processor.h:661:
+	switch (size) {
+		case 1:
[...]
+		case 2:
[...]
+		case 4:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#1180: FILE: include/asm-i386/processor.h:664:
+				:"=q" (x)
 				^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#1181: FILE: include/asm-i386/processor.h:665:
+				:"m" (*__xg(ptr)), "0" (x)
 				^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#1182: FILE: include/asm-i386/processor.h:666:
+				:"memory");
 				^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#1186: FILE: include/asm-i386/processor.h:670:
+				:"=r" (x)
 				^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#1187: FILE: include/asm-i386/processor.h:671:
+				:"m" (*__xg(ptr)), "0" (x)
 				^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#1188: FILE: include/asm-i386/processor.h:672:
+				:"memory");
 				^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#1192: FILE: include/asm-i386/processor.h:676:
+				:"=r" (x)
 				^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#1193: FILE: include/asm-i386/processor.h:677:
+				:"m" (*__xg(ptr)), "0" (x)
 				^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#1194: FILE: include/asm-i386/processor.h:678:
+				:"memory");
 				^

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1211: FILE: include/asm-i386/processor.h:695:
+static inline unsigned long __cmpxchg(volatile void *ptr, unsigned long old,

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1223: FILE: include/asm-i386/processor.h:707:
+	if (cpu_data->x86 > 3) goto have_cmpxchg;

ERROR:SPACING: space prohibited after that '*' (ctx:WxW)
#1229: FILE: include/asm-i386/processor.h:713:
+		prev = * (u8 *)ptr;
 		       ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1230: FILE: include/asm-i386/processor.h:714:
+		if (prev == old) *(u8 *)ptr = new;

ERROR:SPACING: space prohibited after that '*' (ctx:WxW)
#1233: FILE: include/asm-i386/processor.h:717:
+		prev = * (u16 *)ptr;
 		       ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1234: FILE: include/asm-i386/processor.h:718:
+		if (prev == old) *(u16 *)ptr = new;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1237: FILE: include/asm-i386/processor.h:721:
+		if (prev == old) *(u32 *)ptr = new;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1267: FILE: include/asm-i386/processor.h:751:
+static inline unsigned long long cmpxchg8b(volatile unsigned long long *ptr,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1268: FILE: include/asm-i386/processor.h:752:
+static inline unsigned long long cmpxchg8b(volatile unsigned long long *ptr,
+	       unsigned long long old, unsigned long long newv)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1279: FILE: include/asm-i386/processor.h:763:
+	if (cpu_has(cpu_data,X86_FEATURE_CX8)) goto have_cmpxchg8b;
 	                    ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1279: FILE: include/asm-i386/processor.h:763:
+	if (cpu_has(cpu_data,X86_FEATURE_CX8)) goto have_cmpxchg8b;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1284: FILE: include/asm-i386/processor.h:768:
+	if (prev == old) *ptr = newv;

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1291: FILE: include/asm-i386/processor.h:775:
+	 __asm__ __volatile__(

ERROR:CODE_INDENT: code indent should use tabs where possible
#1295: FILE: include/asm-i386/processor.h:779:
+       ^I^I"b" ((unsigned long)(newv & 0xffffffffLL)), "m" (ptr)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1295: FILE: include/asm-i386/processor.h:779:
+       ^I^I"b" ((unsigned long)(newv & 0xffffffffLL)), "m" (ptr)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1295: FILE: include/asm-i386/processor.h:779:
+       ^I^I"b" ((unsigned long)(newv & 0xffffffffLL)), "m" (ptr)$

WARNING:SPACING: space prohibited before semicolon
#1297: FILE: include/asm-i386/processor.h:781:
+	return prev ;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1300: FILE: include/asm-i386/processor.h:784:
+#define cmpxchg(ptr,o,n)\
                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1300: FILE: include/asm-i386/processor.h:784:
+#define cmpxchg(ptr,o,n)\
                      ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#1300: FILE: include/asm-i386/processor.h:784:
+#define cmpxchg(ptr,o,n)\
+	((__typeof__(*(ptr)))__cmpxchg((ptr),(unsigned long)(o),\
+					(unsigned long)(n),sizeof(*(ptr))))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1301: FILE: include/asm-i386/processor.h:785:
+	((__typeof__(*(ptr)))__cmpxchg((ptr),(unsigned long)(o),\
 	                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1302: FILE: include/asm-i386/processor.h:786:
+					(unsigned long)(n),sizeof(*(ptr))))
 					                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1344: FILE: include/asm-x86_64/pgtable.h:105:
+#define ptep_xchg(xp,newval)	__pte(xchg(&(xp)->pte, pte_val(newval))
                     ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1344: FILE: include/asm-x86_64/pgtable.h:105:
+#define ptep_xchg(xp,newval)	__pte(xchg(&(xp)->pte, pte_val(newval))

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#1345: FILE: include/asm-x86_64/pgtable.h:106:
+#define ptep_cmpxchg(xp,newval,oldval) (cmpxchg(&(xp)->pte, pte_val(newval), pte_val(oldval) == pte_val(oldval))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1345: FILE: include/asm-x86_64/pgtable.h:106:
+#define ptep_cmpxchg(xp,newval,oldval) (cmpxchg(&(xp)->pte, pte_val(newval), pte_val(oldval) == pte_val(oldval))
                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1345: FILE: include/asm-x86_64/pgtable.h:106:
+#define ptep_cmpxchg(xp,newval,oldval) (cmpxchg(&(xp)->pte, pte_val(newval), pte_val(oldval) == pte_val(oldval))
                               ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1345: FILE: include/asm-x86_64/pgtable.h:106:
+#define ptep_cmpxchg(xp,newval,oldval) (cmpxchg(&(xp)->pte, pte_val(newval), pte_val(oldval) == pte_val(oldval))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'oldval' - possible side-effects?
#1345: FILE: include/asm-x86_64/pgtable.h:106:
+#define ptep_cmpxchg(xp,newval,oldval) (cmpxchg(&(xp)->pte, pte_val(newval), pte_val(oldval) == pte_val(oldval))

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000255851.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 51 errors, 34 warnings, 13 checks, 1107 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000255851.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
