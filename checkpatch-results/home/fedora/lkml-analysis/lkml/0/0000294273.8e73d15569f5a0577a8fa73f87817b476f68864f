WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#30: 
This patch is an attempt at fixing the much discussed search complexity issues

WARNING:TYPO_SPELLING: 'afer' may be misspelled - perhaps 'after'?
#68: 
	-I killed the process after 7 hours. System was responsive afer
	                                                           ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'afer' may be misspelled - perhaps 'after'?
#88: 
			 System was responsive afer killing the process.
			                       ^^^^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'vma' - possible side-effects?
#292: FILE: include/linux/mm.h:158:
+#define	VMA_SIZE(vma)	  (((vma)->vm_end - (vma)->vm_start) >> PAGE_SHIFT)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'vma' - possible side-effects?
#294: FILE: include/linux/mm.h:160:
+#define	HEAP_INDEX(vma)	  ((vma)->vm_pgoff + (VMA_SIZE(vma) - 1))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'vma' - possible side-effects?
#296: FILE: include/linux/mm.h:162:
+#define GET_INDEX_VMA(vma, radix, heap)		\
+do {						\
+	radix = RADIX_INDEX(vma);		\
+	heap = HEAP_INDEX(vma);			\
+} while (0)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#303: FILE: include/linux/mm.h:169:
+do { ^I^I^I^I^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#304: FILE: include/linux/mm.h:170:
+^Istruct vm_area_struct *__tmp = ^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#306: FILE: include/linux/mm.h:172:
+^IGET_INDEX_VMA(__tmp, radix, heap); ^I\$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'vma' - possible side-effects?
#309: FILE: include/linux/mm.h:175:
+#define	INIT_VMA_SHARED_LIST(vma)			\
+do {							\
+	INIT_LIST_HEAD(&(vma)->shared.vm_set.list);	\
+	(vma)->shared.vm_set.parent = NULL;		\
+	(vma)->vm_set_head = NULL;			\
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'vma' - possible side-effects?
#316: FILE: include/linux/mm.h:182:
+#define INIT_VMA_SHARED(vma)			\
+do {						\
+	(vma)->shared.both.first = NULL;	\
+	(vma)->shared.both.second = NULL;	\
+	(vma)->shared.both.parent = NULL;	\
+	(vma)->vm_set_head = NULL;		\
+} while (0)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#324: FILE: include/linux/mm.h:190:
+extern void __vma_prio_tree_insert(struct prio_tree_root *,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#325: FILE: include/linux/mm.h:191:
+extern void __vma_prio_tree_insert(struct prio_tree_root *,
+	struct vm_area_struct *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#327: FILE: include/linux/mm.h:193:
+extern void __vma_prio_tree_remove(struct prio_tree_root *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct prio_tree_root *' should also have an identifier name
#327: FILE: include/linux/mm.h:193:
+extern void __vma_prio_tree_remove(struct prio_tree_root *,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vm_area_struct *' should also have an identifier name
#327: FILE: include/linux/mm.h:193:
+extern void __vma_prio_tree_remove(struct prio_tree_root *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#328: FILE: include/linux/mm.h:194:
+extern void __vma_prio_tree_remove(struct prio_tree_root *,
+	struct vm_area_struct *);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!vma->shared.both.first"
#332: FILE: include/linux/mm.h:198:
+	return vma->shared.both.first == NULL;

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#340: FILE: include/linux/mm.h:206:
+static inline void __vma_prio_tree_add(struct vm_area_struct *vma,
+	struct vm_area_struct *old)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#345: FILE: include/linux/mm.h:211:
+	BUG_ON(RADIX_INDEX(vma) != RADIX_INDEX(old));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#346: FILE: include/linux/mm.h:212:
+	BUG_ON(HEAP_INDEX(vma) != HEAP_INDEX(old));

CHECK:BRACES: braces {} should be used on all arms of this statement
#348: FILE: include/linux/mm.h:214:
+	if (old->shared.both.parent) {
[...]
+	else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#351: FILE: include/linux/mm.h:217:
+			list_add_tail(&vma->shared.vm_set.list,
+					&old->vm_set_head->shared.vm_set.list);

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#354: FILE: include/linux/mm.h:220:
+		}
+		else {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#354: FILE: include/linux/mm.h:220:
+		else {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#359: FILE: include/linux/mm.h:225:
+	}
+	else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#372: FILE: include/linux/mm.h:238:
+static inline void __vma_modify(struct prio_tree_root *root,
+	struct vm_area_struct *vma, unsigned long start, unsigned long end,

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#389: FILE: include/linux/mm.h:255:
+static inline struct vm_area_struct *__vma_prio_tree_first(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#404: FILE: include/linux/mm.h:270:
+static inline struct vm_area_struct *__vma_prio_tree_next(

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#415: FILE: include/linux/mm.h:281:
+	}
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#415: FILE: include/linux/mm.h:281:
+	else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#417: FILE: include/linux/mm.h:283:
+		next = list_entry(vma->shared.vm_set.list.next,
+				struct vm_area_struct, shared.vm_set.list);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#439: FILE: include/linux/prio_tree.h:1:
+#ifndef _LINUX_PRIO_TREE_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#450: FILE: include/linux/prio_tree.h:12:
+^Iunsigned int ^I^Iindex_bits;$

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#460: FILE: include/linux/prio_tree.h:22:
+#define PRIO_TREE_ROOT	(struct prio_tree_root) {NULL, 1}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#464: FILE: include/linux/prio_tree.h:26:
+#define INIT_PRIO_TREE_ROOT(ptr)	\
+do {					\
+	(ptr)->prio_tree_node = NULL;	\
+	(ptr)->index_bits = 1;		\
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#470: FILE: include/linux/prio_tree.h:32:
+#define PRIO_TREE_NODE_INIT(name)	{&(name), &(name), &(name)}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#472: FILE: include/linux/prio_tree.h:34:
+#define PRIO_TREE_NODE(name) \
+	struct prio_tree_node name = PRIO_TREE_NODE_INIT(name)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#475: FILE: include/linux/prio_tree.h:37:
+#define INIT_PRIO_TREE_NODE(ptr)				\
+do {								\
+	(ptr)->left = (ptr)->right = (ptr)->parent = (ptr);	\
+} while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#475: FILE: include/linux/prio_tree.h:37:
+#define INIT_PRIO_TREE_NODE(ptr)				\
+do {								\
+	(ptr)->left = (ptr)->right = (ptr)->parent = (ptr);	\
+} while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'member' may be better as '(member)' to avoid precedence issues
#480: FILE: include/linux/prio_tree.h:42:
+#define	prio_tree_entry(ptr, type, member) \
+       ((type *)((char *)(ptr)-(unsigned long)(&((type *)0)->member)))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#481: FILE: include/linux/prio_tree.h:43:
+       ((type *)((char *)(ptr)-(unsigned long)(&((type *)0)->member)))$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#481: FILE: include/linux/prio_tree.h:43:
+       ((type *)((char *)(ptr)-(unsigned long)(&((type *)0)->member)))
                               ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#483: FILE: include/linux/prio_tree.h:45:
+#define	PRIO_TREE_ITER	(struct prio_tree_iter) {NULL, 0UL, 0UL, 0}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!root->prio_tree_node"
#487: FILE: include/linux/prio_tree.h:49:
+	return root->prio_tree_node == NULL;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#505: FILE: include/linux/prio_tree.h:67:
+extern struct prio_tree_node *prio_tree_insert(struct prio_tree_root *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#506: FILE: include/linux/prio_tree.h:68:
+extern struct prio_tree_node *prio_tree_insert(struct prio_tree_root *,
+	struct prio_tree_node *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#508: FILE: include/linux/prio_tree.h:70:
+extern void prio_tree_remove(struct prio_tree_root *, struct prio_tree_node *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct prio_tree_root *' should also have an identifier name
#508: FILE: include/linux/prio_tree.h:70:
+extern void prio_tree_remove(struct prio_tree_root *, struct prio_tree_node *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct prio_tree_node *' should also have an identifier name
#508: FILE: include/linux/prio_tree.h:70:
+extern void prio_tree_remove(struct prio_tree_root *, struct prio_tree_node *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#510: FILE: include/linux/prio_tree.h:72:
+extern struct prio_tree_node *prio_tree_first(struct prio_tree_root *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct prio_tree_root *' should also have an identifier name
#510: FILE: include/linux/prio_tree.h:72:
+extern struct prio_tree_node *prio_tree_first(struct prio_tree_root *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct prio_tree_iter *' should also have an identifier name
#510: FILE: include/linux/prio_tree.h:72:
+extern struct prio_tree_node *prio_tree_first(struct prio_tree_root *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#510: FILE: include/linux/prio_tree.h:72:
+extern struct prio_tree_node *prio_tree_first(struct prio_tree_root *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#510: FILE: include/linux/prio_tree.h:72:
+extern struct prio_tree_node *prio_tree_first(struct prio_tree_root *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#511: FILE: include/linux/prio_tree.h:73:
+extern struct prio_tree_node *prio_tree_first(struct prio_tree_root *,
+	struct prio_tree_iter *, unsigned long, unsigned long);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#513: FILE: include/linux/prio_tree.h:75:
+extern struct prio_tree_node *prio_tree_next(struct prio_tree_root *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct prio_tree_root *' should also have an identifier name
#513: FILE: include/linux/prio_tree.h:75:
+extern struct prio_tree_node *prio_tree_next(struct prio_tree_root *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct prio_tree_iter *' should also have an identifier name
#513: FILE: include/linux/prio_tree.h:75:
+extern struct prio_tree_node *prio_tree_next(struct prio_tree_root *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#513: FILE: include/linux/prio_tree.h:75:
+extern struct prio_tree_node *prio_tree_next(struct prio_tree_root *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#513: FILE: include/linux/prio_tree.h:75:
+extern struct prio_tree_node *prio_tree_next(struct prio_tree_root *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#514: FILE: include/linux/prio_tree.h:76:
+extern struct prio_tree_node *prio_tree_next(struct prio_tree_root *,
+	struct prio_tree_iter *, unsigned long, unsigned long);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#524: FILE: init/main.c:89:
+extern void prio_tree_init(void);

ERROR:SPACING: space required before the open parenthesis '('
#605: FILE: mm/memory.c:1116:
+	while(vp) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#640: FILE: mm/mmap.c:68:
+__remove_shared_vm_struct(struct vm_area_struct *vma, struct inode *inode,
+	struct address_space *mapping)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#659: FILE: mm/mmap.c:91:
+		__remove_shared_vm_struct(vma, file->f_dentry->d_inode,
+				mapping);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#714: FILE: mm/mmap.c:444:
+		if (next && end == next->vm_start &&
 				can_vma_merge_before(next, vm_flags, file,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#718: FILE: mm/mmap.c:447:
+			__vma_modify(root, prev, prev->vm_start,
+					next->vm_end, prev->vm_pgoff);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#740: FILE: mm/mmap.c:481:
+			__vma_modify(root, prev, addr, prev->vm_end,
+				prev->vm_pgoff - ((end - addr) >> PAGE_SHIFT));

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 17)
#775: FILE: mm/mmap.c:1241:
+	if (vma->vm_file) {
 		 mapping = vma->vm_file->f_mapping;

WARNING:TABSTOP: Statements should start on a tabstop
#778: FILE: mm/mmap.c:1244:
+		 if (vma->vm_flags & VM_SHARED)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (17, 25)
#778: FILE: mm/mmap.c:1244:
+		 if (vma->vm_flags & VM_SHARED)
+			 root = &mapping->i_mmap_shared;

WARNING:TABSTOP: Statements should start on a tabstop
#780: FILE: mm/mmap.c:1246:
+		 else

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (17, 25)
#780: FILE: mm/mmap.c:1246:
+		 else
+			 root = &mapping->i_mmap;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#795: FILE: mm/mmap.c:1256:
+		__vma_modify(root, vma, addr, vma->vm_end,
+			vma->vm_pgoff + ((addr - new->vm_start) >> PAGE_SHIFT));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#848: FILE: mm/mremap.c:433:
+			__vma_modify(root, vma, vma->vm_start,
+					addr + new_len, vma->vm_pgoff);

ERROR:SPACING: space required before the open parenthesis '('
#851: FILE: mm/mremap.c:436:
+			if(mapping)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#861: FILE: mm/prio_tree.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#862: FILE: mm/prio_tree.c:2:
+ * mm/prio_tree.c - priority search tree for mapping->i_mmap{,_shared}

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#917: FILE: mm/prio_tree.c:57:
+static struct prio_tree_node *prio_tree_expand(struct prio_tree_root *root,
+	struct prio_tree_node *node, unsigned long max_heap_index)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!first"
#930: FILE: mm/prio_tree.c:70:
+		if (first == NULL) {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#936: FILE: mm/prio_tree.c:76:
+		}
+		else {

CHECK:BRACES: Unbalanced braces around else statement
#936: FILE: mm/prio_tree.c:76:
+		else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#948: FILE: mm/prio_tree.c:88:
+	if (first) {
[...]
+	else
[...]

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#952: FILE: mm/prio_tree.c:92:
+	}
+	else

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#967: FILE: mm/prio_tree.c:107:
+static inline struct prio_tree_node *prio_tree_replace(

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#974: FILE: mm/prio_tree.c:114:
+		BUG_ON(root->prio_tree_node != old);

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#982: FILE: mm/prio_tree.c:122:
+	}
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#982: FILE: mm/prio_tree.c:122:
+	else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#984: FILE: mm/prio_tree.c:124:
+		if (old->parent->left == old)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#986: FILE: mm/prio_tree.c:126:
+		else {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#987: FILE: mm/prio_tree.c:127:
+			BUG_ON(old->parent->right != old);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1006: FILE: mm/prio_tree.c:146:
+#define	swap(x,y,z)	do {z = x; x = y; y = z; } while (0)
        	      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1006: FILE: mm/prio_tree.c:146:
+#define	swap(x,y,z)	do {z = x; x = y; y = z; } while (0)
        	        ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#1006: FILE: mm/prio_tree.c:146:
+#define	swap(x,y,z)	do {z = x; x = y; y = z; } while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'y' - possible side-effects?
#1006: FILE: mm/prio_tree.c:146:
+#define	swap(x,y,z)	do {z = x; x = y; y = z; } while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'z' - possible side-effects?
#1006: FILE: mm/prio_tree.c:146:
+#define	swap(x,y,z)	do {z = x; x = y; y = z; } while (0)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1020: FILE: mm/prio_tree.c:160:
+struct prio_tree_node *prio_tree_insert(struct prio_tree_root *root,
+			struct prio_tree_node *node)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1030: FILE: mm/prio_tree.c:170:
+	if (prio_tree_empty(root) ||
+			heap_index > prio_tree_maxindex(root->index_bits))

ERROR:CODE_INDENT: code indent should use tabs where possible
#1042: FILE: mm/prio_tree.c:182:
+                if (h_index < heap_index || (h_index == heap_index &&$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1042: FILE: mm/prio_tree.c:182:
+                if (h_index < heap_index || (h_index == heap_index &&$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1042: FILE: mm/prio_tree.c:182:
+                if (h_index < heap_index || (h_index == heap_index &&
+						r_index > radix_index))
+		{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1043: FILE: mm/prio_tree.c:183:
+                if (h_index < heap_index || (h_index == heap_index &&
+						r_index > radix_index))

WARNING:LINE_SPACING: Missing a blank line after declarations
#1046: FILE: mm/prio_tree.c:186:
+			struct prio_tree_node *tmp = node;
+			node = prio_tree_replace(root, cur, node);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#1058: FILE: mm/prio_tree.c:198:
+			if (prio_tree_right_empty(cur)) {
[...]
+			else
[...]

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1064: FILE: mm/prio_tree.c:204:
+			}
+			else

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1067: FILE: mm/prio_tree.c:207:
+		}
+		else {

CHECK:BRACES: Unbalanced braces around else statement
#1067: FILE: mm/prio_tree.c:207:
+		else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#1068: FILE: mm/prio_tree.c:208:
+			if (prio_tree_left_empty(cur)) {
[...]
+			else
[...]

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1074: FILE: mm/prio_tree.c:214:
+			}
+			else

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1086: FILE: mm/prio_tree.c:226:
+	BUG();

CHECK:BRACES: braces {} should be used on all arms of this statement
#1104: FILE: mm/prio_tree.c:244:
+		if (!prio_tree_left_empty(cur))
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1106: FILE: mm/prio_tree.c:246:
+		else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#1111: FILE: mm/prio_tree.c:251:
+		if (!prio_tree_right_empty(cur))
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1113: FILE: mm/prio_tree.c:253:
+		else {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1126: FILE: mm/prio_tree.c:266:
+		BUG_ON(root->prio_tree_node != cur);

CHECK:BRACES: braces {} should be used on all arms of this statement
#1131: FILE: mm/prio_tree.c:271:
+	if (cur->parent->right == cur)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1133: FILE: mm/prio_tree.c:273:
+	else {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1134: FILE: mm/prio_tree.c:274:
+		BUG_ON(cur->parent->left != cur);

WARNING:RETURN_VOID: void function return statements are not generally useful
#1142: FILE: mm/prio_tree.c:282:
+	return;
+}

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1152: FILE: mm/prio_tree.c:292:
+static inline struct prio_tree_node *__prio_tree_left(

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1169: FILE: mm/prio_tree.c:309:
+		}
+		else {

CHECK:BRACES: Unbalanced braces around else statement
#1169: FILE: mm/prio_tree.c:309:
+		else {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1179: FILE: mm/prio_tree.c:319:
+
+

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1180: FILE: mm/prio_tree.c:320:
+static inline struct prio_tree_node *__prio_tree_right(

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1208: FILE: mm/prio_tree.c:348:
+		}
+		else {

CHECK:BRACES: Unbalanced braces around else statement
#1208: FILE: mm/prio_tree.c:348:
+		else {

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1218: FILE: mm/prio_tree.c:358:
+static inline struct prio_tree_node *__prio_tree_parent(

CHECK:BRACES: braces {} should be used on all arms of this statement
#1223: FILE: mm/prio_tree.c:363:
+	if (iter->size_level) {
[...]
+	else if (iter->value & iter->mask)
[...]

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1228: FILE: mm/prio_tree.c:368:
+	}
+	else if (iter->value & iter->mask)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1234: FILE: mm/prio_tree.c:374:
+static inline int overlap(unsigned long radix_index, unsigned long heap_index,
+	unsigned long r_index, unsigned long h_index)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1250: FILE: mm/prio_tree.c:390:
+struct prio_tree_node *prio_tree_first(struct prio_tree_root *root,
+	struct prio_tree_iter *iter, unsigned long radix_index,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1273: FILE: mm/prio_tree.c:413:
+		if (__prio_tree_left(root, iter, radix_index, heap_index,
+					&r_index, &h_index))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1277: FILE: mm/prio_tree.c:417:
+		if (__prio_tree_right(root, iter, radix_index, heap_index,
+					&r_index, &h_index))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1287: FILE: mm/prio_tree.c:427:
+struct prio_tree_node *prio_tree_next(struct prio_tree_root *root,
+	struct prio_tree_iter *iter, unsigned long radix_index,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1299: FILE: mm/prio_tree.c:439:
+	while (!__prio_tree_right(root, iter, radix_index, heap_index,
+				&r_index, &h_index)) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#1300: FILE: mm/prio_tree.c:440:
+^I    ^Iwhile (!prio_tree_root(iter->cur) &&$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1300: FILE: mm/prio_tree.c:440:
+^I    ^Iwhile (!prio_tree_root(iter->cur) &&$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1301: FILE: mm/prio_tree.c:441:
+	    	while (!prio_tree_root(iter->cur) &&
+				iter->cur->parent->right == iter->cur)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#1310: FILE: mm/prio_tree.c:450:
+	if (overlap(radix_index, heap_index, r_index, h_index))
+			return iter->cur;

WARNING:TYPO_SPELLING: 'corresponing' may be misspelled - perhaps 'corresponding'?
#1320: FILE: mm/prio_tree.c:460:
+ * heap_index] value, we have a corresponing priority search tree node. If
                                 ^^^^^^^^^^^^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1349: FILE: mm/prio_tree.c:489:
+ * ^Ivma->vm_set_head != NULL  ==>  list head of vmas that map same pages$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1350: FILE: mm/prio_tree.c:490:
+ * ^Ivma->vm_set_head == NULL  ==>  a list node$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1354: FILE: mm/prio_tree.c:494:
+void __vma_prio_tree_insert(struct prio_tree_root *root,
+	struct vm_area_struct *vma)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1367: FILE: mm/prio_tree.c:507:
+	old = prio_tree_entry(ptr, struct vm_area_struct,
+			shared.prio_tree_node);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1373: FILE: mm/prio_tree.c:513:
+void __vma_prio_tree_remove(struct prio_tree_root *root,
+	struct vm_area_struct *vma)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!vma->shared.both.parent"
#1377: FILE: mm/prio_tree.c:517:
+	if (vma->shared.both.parent == NULL && vma->vm_set_head == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!vma->vm_set_head"
#1377: FILE: mm/prio_tree.c:517:
+	if (vma->shared.both.parent == NULL && vma->vm_set_head == NULL) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1385: FILE: mm/prio_tree.c:525:
+		BUG_ON(vma->vm_set_head->vm_set_head != vma);

CHECK:BRACES: braces {} should be used on all arms of this statement
#1388: FILE: mm/prio_tree.c:528:
+			if (!list_empty(&head->shared.vm_set.list)) {
[...]
+			else
[...]

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1389: FILE: mm/prio_tree.c:529:
+				new_head = list_entry(

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1395: FILE: mm/prio_tree.c:535:
+			}
+			else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1399: FILE: mm/prio_tree.c:539:
+			prio_tree_replace(root, &vma->shared.prio_tree_node,
+					&head->shared.prio_tree_node);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1404: FILE: mm/prio_tree.c:544:
+
+		}

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1405: FILE: mm/prio_tree.c:545:
+		}
+		else {

CHECK:BRACES: Unbalanced braces around else statement
#1405: FILE: mm/prio_tree.c:545:
+		else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#1407: FILE: mm/prio_tree.c:547:
+			if (!list_empty(&vma->shared.vm_set.list)) {
[...]
+			else
[...]

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1408: FILE: mm/prio_tree.c:548:
+				new_head = list_entry(

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1416: FILE: mm/prio_tree.c:556:
+			}
+			else

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000294273.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 24 errors, 46 warnings, 89 checks, 1223 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000294273.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
