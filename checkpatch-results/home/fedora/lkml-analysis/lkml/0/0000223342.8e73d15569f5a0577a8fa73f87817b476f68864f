WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#43: FILE: include/linux/posix-timers.h:130:
+void set_process_cpu_timer(struct task_struct *, unsigned int,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#43: FILE: include/linux/posix-timers.h:130:
+void set_process_cpu_timer(struct task_struct *, unsigned int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long *' should also have an identifier name
#43: FILE: include/linux/posix-timers.h:130:
+void set_process_cpu_timer(struct task_struct *, unsigned int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long *' should also have an identifier name
#43: FILE: include/linux/posix-timers.h:130:
+void set_process_cpu_timer(struct task_struct *, unsigned int,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#75: FILE: include/linux/signal.h:215:
+extern int __group_send_sig_info(int, struct siginfo *, struct task_struct *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#75: FILE: include/linux/signal.h:215:
+extern int __group_send_sig_info(int, struct siginfo *, struct task_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct siginfo *' should also have an identifier name
#75: FILE: include/linux/signal.h:215:
+extern int __group_send_sig_info(int, struct siginfo *, struct task_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#75: FILE: include/linux/signal.h:215:
+extern int __group_send_sig_info(int, struct siginfo *, struct task_struct *);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#96: FILE: kernel/fork.c:746:
+	sig->it_virt_expires = sig->it_prof_expires = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#97: FILE: kernel/fork.c:747:
+	sig->it_virt_incr = sig->it_prof_incr = 0;

WARNING:LINE_SPACING: Missing a blank line after declarations
#161: FILE: kernel/itimer.c:51:
+			unsigned long utime = tsk->signal->utime;
+			do {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#347: FILE: kernel/posix-cpu-timers.c:262:
+	unsigned long flags;
+	spin_lock_irqsave(&p->sighand->siglock, flags);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#421: FILE: kernel/posix-cpu-timers.c:611:
+				BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:INDENTED_LABEL: labels should not be indented
#435: FILE: kernel/posix-cpu-timers.c:625:
+			rebalance:

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#436: FILE: kernel/posix-cpu-timers.c:626:
+				process_timer_rebalance(

ERROR:SPACING: space required before the open parenthesis '('
#461: FILE: kernel/posix-cpu-timers.c:1026:
+	while(!list_empty(timers)) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#519: FILE: kernel/posix-cpu-timers.c:1399:
+	BUG_ON(clock_idx == CPUCLOCK_SCHED);

WARNING:LINE_SPACING: Missing a blank line after declarations
#548: FILE: kernel/posix-cpu-timers.c:1428:
+		union cpu_time_count expires = { .sched = 0 };
+		expires.cpu = *newval;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000223342.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 13 warnings, 4 checks, 579 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000223342.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
