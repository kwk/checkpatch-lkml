WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#38: 
diff -ruN 829-plugins-old/kernel/power/plugins.c 829-plugins-new/kernel/power/plugins.c

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#42: FILE: kernel/power/plugins.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:GLOBAL_INITIALISERS: do not initialise globals to NULL
#57: FILE: kernel/power/plugins.c:16:
+struct suspend_plugin_ops * active_writer = NULL;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#57: FILE: kernel/power/plugins.c:16:
+struct suspend_plugin_ops * active_writer = NULL;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:GLOBAL_INITIALISERS: do not initialise globals to NULL
#58: FILE: kernel/power/plugins.c:17:
+struct suspend_plugin_ops * checksum_plugin = NULL;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#58: FILE: kernel/power/plugins.c:17:
+struct suspend_plugin_ops * checksum_plugin = NULL;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#70: FILE: kernel/power/plugins.c:29:
+	struct suspend_plugin_ops * this_plugin;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#72: FILE: kernel/power/plugins.c:31:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#92: FILE: kernel/power/plugins.c:51:
+	struct suspend_plugin_ops * this_filter;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#94: FILE: kernel/power/plugins.c:53:
+^I$

CHECK:SPACING: No space is necessary after a cast
#102: FILE: kernel/power/plugins.c:61:
+	return (int) ratio;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#115: FILE: kernel/power/plugins.c:74:
+	struct suspend_plugin_ops * this_plugin;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#133: FILE: kernel/power/plugins.c:92:
+	struct suspend_plugin_ops * this_plugin;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#149: FILE: kernel/power/plugins.c:108:
+	struct suspend_plugin_ops * this_plugin;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#168: FILE: kernel/power/plugins.c:127:
+	struct suspend_plugin_ops * this_plugin;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#178: FILE: kernel/power/plugins.c:137:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#181: FILE: kernel/power/plugins.c:140:
+ * ^I^I^Ito its name$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#184: FILE: kernel/power/plugins.c:143:
+struct suspend_plugin_ops * find_plugin_given_name(char * name)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#184: FILE: kernel/power/plugins.c:143:
+struct suspend_plugin_ops * find_plugin_given_name(char * name)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#186: FILE: kernel/power/plugins.c:145:
+	struct suspend_plugin_ops * this_plugin, * found_plugin = NULL;

ERROR:SPACING: space prohibited after that '*' (ctx:WxW)
#186: FILE: kernel/power/plugins.c:145:
+	struct suspend_plugin_ops * this_plugin, * found_plugin = NULL;
 	                                         ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#187: FILE: kernel/power/plugins.c:146:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#192: FILE: kernel/power/plugins.c:151:
+^I^I}^I^I^I$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#202: FILE: kernel/power/plugins.c:161:
+int print_plugin_debug_info(char * buffer, int buffer_size)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#212: FILE: kernel/power/plugins.c:171:
+^I^I^Iresult = this_plugin->print_debug_info(buffer + len, $

WARNING:LINE_SPACING: Missing a blank line after declarations
#212: FILE: kernel/power/plugins.c:171:
+			int result;
+			result = this_plugin->print_debug_info(buffer + len, 

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#223: FILE: kernel/power/plugins.c:182:
+int suspend_initialise_plugin_lists(void) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#231: FILE: kernel/power/plugins.c:190:
+int suspend_register_plugin(struct suspend_plugin_ops * plugin)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#235: FILE: kernel/power/plugins.c:194:
+^I$

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#239: FILE: kernel/power/plugins.c:198:
+	switch (plugin->type) {
+		case FILTER_PLUGIN:
[...]
+		case WRITER_PLUGIN:
[...]
+		case UI_PLUGIN:
[...]
+		case MISC_PLUGIN:
[...]
+		case CHECKSUM_PLUGIN:
[...]
+		default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#242: FILE: kernel/power/plugins.c:201:
+			list_add_tail(&plugin->ops.filter.filter_list,
+					&suspend_filters);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#248: FILE: kernel/power/plugins.c:207:
+			list_add_tail(&plugin->ops.writer.writer_list,
+					&suspend_writers);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!active_writer'
#250: FILE: kernel/power/plugins.c:209:
+			if ((!active_writer) &&
+			    (!(test_suspend_state(SUSPEND_BOOT_TIME))))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#257: FILE: kernel/power/plugins.c:216:
+			list_add_tail(&plugin->ops.ui.ui_list,
+					&suspend_ui);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#268: FILE: kernel/power/plugins.c:227:
+				printk("Checksum plugin already registered!");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#270: FILE: kernel/power/plugins.c:229:
+^I^I^I^I$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#272: FILE: kernel/power/plugins.c:231:
+			printk("Hmmm. Plugin '%s' has an invalid type."

WARNING:SPLIT_STRING: quoted string split across lines
#273: FILE: kernel/power/plugins.c:232:
+			printk("Hmmm. Plugin '%s' has an invalid type."
+				" It has been ignored.\n", plugin->name);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#279: FILE: kernel/power/plugins.c:238:
+^Ireturn 0;^I$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#282: FILE: kernel/power/plugins.c:241:
+void suspend_unregister_plugin(struct suspend_plugin_ops * plugin)

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#284: FILE: kernel/power/plugins.c:243:
+	switch (plugin->type) {
+		case FILTER_PLUGIN:
[...]
+		case WRITER_PLUGIN:
[...]
+		case UI_PLUGIN:
[...]
+		case MISC_PLUGIN:
[...]
+		case CHECKSUM_PLUGIN:
[...]
+		default:

ERROR:TRAILING_WHITESPACE: trailing whitespace
#296: FILE: kernel/power/plugins.c:255:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#301: FILE: kernel/power/plugins.c:260:
+^I^I$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#310: FILE: kernel/power/plugins.c:269:
+			printk("Hmmm. Plugin '%s' has an invalid type."

WARNING:SPLIT_STRING: quoted string split across lines
#311: FILE: kernel/power/plugins.c:270:
+			printk("Hmmm. Plugin '%s' has an invalid type."
+				" It has been ignored.\n", plugin->name);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#318: FILE: kernel/power/plugins.c:277:
+void suspend_move_plugin_tail(struct suspend_plugin_ops * plugin)

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#320: FILE: kernel/power/plugins.c:279:
+	switch (plugin->type) {
+		case FILTER_PLUGIN:
[...]
+		case WRITER_PLUGIN:
[...]
+		case UI_PLUGIN:
[...]
+		case MISC_PLUGIN:
[...]
+		default:

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#324: FILE: kernel/power/plugins.c:283:
+				list_move_tail(&plugin->ops.filter.filter_list,
+						&suspend_filters);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#330: FILE: kernel/power/plugins.c:289:
+				list_move_tail(&plugin->ops.writer.writer_list,
+						&suspend_writers);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#332: FILE: kernel/power/plugins.c:291:
+^I^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#336: FILE: kernel/power/plugins.c:295:
+				list_move_tail(&plugin->ops.ui.ui_list,
+						&suspend_ui);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#338: FILE: kernel/power/plugins.c:297:
+^I^I$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#342: FILE: kernel/power/plugins.c:301:
+			printk("Hmmm. Plugin '%s' has an invalid type."

WARNING:SPLIT_STRING: quoted string split across lines
#343: FILE: kernel/power/plugins.c:302:
+			printk("Hmmm. Plugin '%s' has an invalid type."
+				" It has been ignored.\n", plugin->name);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#352: FILE: kernel/power/plugins.c:311:
+	struct suspend_plugin_ops * this_plugin;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#354: FILE: kernel/power/plugins.c:313:
+^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#360: FILE: kernel/power/plugins.c:319:
+			suspend_message(SUSPEND_MEMORY, SUSPEND_MEDIUM, 1,
+				"Initialising plugin %s.\n",

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#362: FILE: kernel/power/plugins.c:321:
+			if ((result = this_plugin->initialise()))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#373: FILE: kernel/power/plugins.c:332:
+	struct suspend_plugin_ops * this_plugin;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#374: FILE: kernel/power/plugins.c:333:
+^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#380: FILE: kernel/power/plugins.c:339:
+			suspend_message(SUSPEND_MEMORY, SUSPEND_MEDIUM, 1,
+				"Cleaning up plugin %s.\n",

ERROR:TRAILING_WHITESPACE: trailing whitespace
#388: FILE: kernel/power/plugins.c:347:
+struct suspend_plugin_ops * $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#389: FILE: kernel/power/plugins.c:348:
+get_next_filter(struct suspend_plugin_ops * filter_sought)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#391: FILE: kernel/power/plugins.c:350:
+	struct suspend_plugin_ops * last_filter = NULL, *this_filter = NULL;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'last_filter == filter_sought'
#396: FILE: kernel/power/plugins.c:355:
+		if ((last_filter == filter_sought) || (!filter_sought))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!filter_sought'
#396: FILE: kernel/power/plugins.c:355:
+		if ((last_filter == filter_sought) || (!filter_sought))

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#404: FILE: kernel/power/plugins.c:363:
+EXPORT_SYMBOL(get_next_filter);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#405: FILE: kernel/power/plugins.c:364:
+EXPORT_SYMBOL(suspend_register_plugin);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#406: FILE: kernel/power/plugins.c:365:
+EXPORT_SYMBOL(suspend_unregister_plugin);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#407: FILE: kernel/power/plugins.c:366:
+EXPORT_SYMBOL(max_async_ios);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#408: FILE: kernel/power/plugins.c:367:
+EXPORT_SYMBOL(active_writer);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#409: FILE: kernel/power/plugins.c:368:
+EXPORT_SYMBOL(suspend_filters);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000227875.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 42 errors, 17 warnings, 13 checks, 372 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000227875.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
