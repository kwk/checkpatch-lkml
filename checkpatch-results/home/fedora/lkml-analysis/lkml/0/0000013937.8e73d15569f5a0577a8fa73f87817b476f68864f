WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#56: FILE: fs/dlm/Kconfig:12:
+choice
+	prompt "Select DLM communications protocol"
+	depends on DLM
+	default DLM_TCP
+	help
+	The DLM Can use TCP or SCTP for it's network communications.
+	SCTP supports multi-homed operations whereas TCP doesn't.
+	However, SCTP seems to have stability problems at the moment.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#65: FILE: fs/dlm/Kconfig:21:
+config DLM_TCP
+	bool "TCP/IP"
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#68: FILE: fs/dlm/Kconfig:24:
+config DLM_SCTP
+	bool "SCTP"
+

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#97: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#102: FILE: fs/dlm/lowcomms-sctp.c:1:
+/******************************************************************************

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#103: FILE: fs/dlm/lowcomms-sctp.c:2:
+/******************************************************************************
+*******************************************************************************

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#169: FILE: fs/dlm/lowcomms-sctp.c:68:
+	spinlock_t		lock;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#183: FILE: fs/dlm/lowcomms-sctp.c:82:
+	unsigned		base;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#184: FILE: fs/dlm/lowcomms-sctp.c:83:
+	unsigned		len;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#185: FILE: fs/dlm/lowcomms-sctp.c:84:
+	unsigned		mask;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#189: FILE: fs/dlm/lowcomms-sctp.c:88:
+/* Just the one of these, now. But this struct keeps
+   the connection-specific variables together */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#189: FILE: fs/dlm/lowcomms-sctp.c:88:
+   the connection-specific variables together */

ERROR:SPACING: space required before the open parenthesis '('
#214: FILE: fs/dlm/lowcomms-sctp.c:113:
+#define CBUF_ADD(cb, n) do { (cb)->len += n; } while(0)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#214: FILE: fs/dlm/lowcomms-sctp.c:113:
+#define CBUF_ADD(cb, n) do { (cb)->len += n; } while(0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cb' - possible side-effects?
#216: FILE: fs/dlm/lowcomms-sctp.c:115:
+#define CBUF_MAY_ADD(cb, n) (((cb)->len + (n)) < ((cb)->mask + 1))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cb' - possible side-effects?
#217: FILE: fs/dlm/lowcomms-sctp.c:116:
+#define CBUF_DATA(cb) (((cb)->base + (cb)->len) & (cb)->mask)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cb' - possible side-effects?
#219: FILE: fs/dlm/lowcomms-sctp.c:118:
+#define CBUF_INIT(cb, size) \
+do { \
+	(cb)->base = (cb)->len = 0; \
+	(cb)->mask = ((size)-1); \
+} while(0)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#222: FILE: fs/dlm/lowcomms-sctp.c:121:
+	(cb)->mask = ((size)-1); \
 	                    ^

ERROR:SPACING: space required before the open parenthesis '('
#223: FILE: fs/dlm/lowcomms-sctp.c:122:
+} while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cb' - possible side-effects?
#225: FILE: fs/dlm/lowcomms-sctp.c:124:
+#define CBUF_EAT(cb, n) \
+do { \
+	(cb)->len  -= (n); \
+	(cb)->base += (n); \
+	(cb)->base &= (cb)->mask; \
+} while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#225: FILE: fs/dlm/lowcomms-sctp.c:124:
+#define CBUF_EAT(cb, n) \
+do { \
+	(cb)->len  -= (n); \
+	(cb)->base += (n); \
+	(cb)->base &= (cb)->mask; \
+} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#230: FILE: fs/dlm/lowcomms-sctp.c:129:
+} while(0)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#232: FILE: fs/dlm/lowcomms-sctp.c:131:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#251: FILE: fs/dlm/lowcomms-sctp.c:150:
+
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#265: FILE: fs/dlm/lowcomms-sctp.c:164:
+^I        struct sockaddr_in *in4  = (struct sockaddr_in *) &addr;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:SPACING: No space is necessary after a cast
#265: FILE: fs/dlm/lowcomms-sctp.c:164:
+	        struct sockaddr_in *in4  = (struct sockaddr_in *) &addr;

CHECK:SPACING: No space is necessary after a cast
#266: FILE: fs/dlm/lowcomms-sctp.c:165:
+		struct sockaddr_in *ret4 = (struct sockaddr_in *) retaddr;

WARNING:LINE_SPACING: Missing a blank line after declarations
#267: FILE: fs/dlm/lowcomms-sctp.c:166:
+		struct sockaddr_in *ret4 = (struct sockaddr_in *) retaddr;
+		ret4->sin_addr.s_addr = in4->sin_addr.s_addr;

ERROR:CODE_INDENT: code indent should use tabs where possible
#269: FILE: fs/dlm/lowcomms-sctp.c:168:
+^I        struct sockaddr_in6 *in6  = (struct sockaddr_in6 *) &addr;$

CHECK:SPACING: No space is necessary after a cast
#269: FILE: fs/dlm/lowcomms-sctp.c:168:
+	        struct sockaddr_in6 *in6  = (struct sockaddr_in6 *) &addr;

CHECK:SPACING: No space is necessary after a cast
#270: FILE: fs/dlm/lowcomms-sctp.c:169:
+		struct sockaddr_in6 *ret6 = (struct sockaddr_in6 *) retaddr;

WARNING:LINE_SPACING: Missing a blank line after declarations
#271: FILE: fs/dlm/lowcomms-sctp.c:170:
+		struct sockaddr_in6 *ret6 = (struct sockaddr_in6 *) retaddr;
+		memcpy(&ret6->sin6_addr, &in6->sin6_addr,

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*ni)...) over kmalloc(sizeof(struct nodeinfo)...)
#299: FILE: fs/dlm/lowcomms-sctp.c:198:
+		ni = kmalloc(sizeof(struct nodeinfo), alloc);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:INDENTED_LABEL: labels should not be indented
#323: FILE: fs/dlm/lowcomms-sctp.c:222:
+	out_up:

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#336: FILE: fs/dlm/lowcomms-sctp.c:235:
+	for (i=1; i<=max_nodeid; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<=' (ctx:VxV)
#336: FILE: fs/dlm/lowcomms-sctp.c:235:
+	for (i=1; i<=max_nodeid; i++) {
 	           ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#354: FILE: fs/dlm/lowcomms-sctp.c:253:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#356: FILE: fs/dlm/lowcomms-sctp.c:255:
+/* Add the port number to an IP6 or 4 sockaddr and return the address length.
+   Also padd out the struct with zeros to make comparisons meaningful */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#356: FILE: fs/dlm/lowcomms-sctp.c:255:
+   Also padd out the struct with zeros to make comparisons meaningful */

WARNING:LINE_SPACING: Missing a blank line after declarations
#380: FILE: fs/dlm/lowcomms-sctp.c:279:
+		struct sockaddr_in *in4_addr = (struct sockaddr_in *)saddr;
+		in4_addr->sin_port = cpu_to_be16(port);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#382: FILE: fs/dlm/lowcomms-sctp.c:281:
+		memset(in4_addr+1, 0, sizeof(struct sockaddr_storage) -
 		               ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#387: FILE: fs/dlm/lowcomms-sctp.c:286:
+		struct sockaddr_in6 *in6_addr = (struct sockaddr_in6 *)saddr;
+		in6_addr->sin6_port = cpu_to_be16(port);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#388: FILE: fs/dlm/lowcomms-sctp.c:287:
+		memset(in6_addr+1, 0, sizeof(struct sockaddr_storage) -
 		               ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#440: FILE: fs/dlm/lowcomms-sctp.c:339:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#442: FILE: fs/dlm/lowcomms-sctp.c:341:
+/* INIT failed but we don't know which node...
+   restart INIT on all pending nodes */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#442: FILE: fs/dlm/lowcomms-sctp.c:341:
+   restart INIT on all pending nodes */

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#448: FILE: fs/dlm/lowcomms-sctp.c:347:
+	for (i=1; i<=max_nodeid; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<=' (ctx:VxV)
#448: FILE: fs/dlm/lowcomms-sctp.c:347:
+	for (i=1; i<=max_nodeid; i++) {
 	           ^

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#472: FILE: fs/dlm/lowcomms-sctp.c:371:
+		switch (sn->sn_assoc_change.sac_state) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#487: FILE: fs/dlm/lowcomms-sctp.c:386:
+			 * receive_from_sock */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#491: FILE: fs/dlm/lowcomms-sctp.c:390:
+				log_print("COMM_UP for invalid assoc ID %d",
+					 (int)sn->sn_assoc_change.sac_assoc_id);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#503: FILE: fs/dlm/lowcomms-sctp.c:402:
+						(char*)&prim, &prim_len);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPLIT_STRING: quoted string split across lines
#509: FILE: fs/dlm/lowcomms-sctp.c:408:
+				log_print("getsockopt/sctp_primary_addr on "
+					  "new assoc %d failed : %d",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#535: FILE: fs/dlm/lowcomms-sctp.c:434:
+			log_print("got new/restarted association %d nodeid %d",
+			       (int)sn->sn_assoc_change.sac_assoc_id, nodeid);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#564: FILE: fs/dlm/lowcomms-sctp.c:463:
+		 * again */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#587: FILE: fs/dlm/lowcomms-sctp.c:486:
+	unsigned len;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sctp_con.sock"
#600: FILE: fs/dlm/lowcomms-sctp.c:499:
+	if (sctp_con.sock == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sctp_con.rx_page"
#603: FILE: fs/dlm/lowcomms-sctp.c:502:
+	if (sctp_con.rx_page == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sctp_con.rx_page"
#609: FILE: fs/dlm/lowcomms-sctp.c:508:
+		if (sctp_con.rx_page == NULL)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#653: FILE: fs/dlm/lowcomms-sctp.c:552:
+	r = ret = kernel_recvmsg(sctp_con.sock, &msg, iov, msg.msg_iovlen, len,

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#673: FILE: fs/dlm/lowcomms-sctp.c:572:
+		if (test_and_clear_bit(NI_INIT_PENDING, &ni->flags)) {
+

WARNING:INDENTED_LABEL: labels should not be indented
#696: FILE: fs/dlm/lowcomms-sctp.c:595:
+      out:

WARNING:INDENTED_LABEL: labels should not be indented
#700: FILE: fs/dlm/lowcomms-sctp.c:599:
+      out_resched:

WARNING:INDENTED_LABEL: labels should not be indented
#706: FILE: fs/dlm/lowcomms-sctp.c:605:
+      out_close:

WARNING:INDENTED_LABEL: labels should not be indented
#709: FILE: fs/dlm/lowcomms-sctp.c:608:
+      out_ret:

CHECK:SPACING: No space is necessary after a cast
#723: FILE: fs/dlm/lowcomms-sctp.c:622:
+					(struct sockaddr *) addr, addr_len);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#830: FILE: fs/dlm/lowcomms-sctp.c:729:
+
+

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*entry)...) over kmalloc(sizeof(struct writequeue_entry)...)
#835: FILE: fs/dlm/lowcomms-sctp.c:734:
+	entry = kmalloc(sizeof(struct writequeue_entry), allocation);

CHECK:SPACING: No space is necessary after a cast
#869: FILE: fs/dlm/lowcomms-sctp.c:768:
+	if (((struct list_head *) e == &ni->writequeue) ||

WARNING:INDENTED_LABEL: labels should not be indented
#880: FILE: fs/dlm/lowcomms-sctp.c:779:
+	      got_one:

CHECK:SPACING: No space is necessary after a cast
#903: FILE: fs/dlm/lowcomms-sctp.c:802:
+	struct writequeue_entry *e = (struct writequeue_entry *) arg;

WARNING:INDENTED_LABEL: labels should not be indented
#926: FILE: fs/dlm/lowcomms-sctp.c:825:
+      out:

WARNING:RETURN_VOID: void function return statements are not generally useful
#929: FILE: fs/dlm/lowcomms-sctp.c:828:
+	return;
+}

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#938: FILE: fs/dlm/lowcomms-sctp.c:837:
+/* Initiate an SCTP association. In theory we could just use sendmsg() on
+   the first IP address and it should work, but this allows us to set up the

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#940: FILE: fs/dlm/lowcomms-sctp.c:839:
+   It also keeps the send path clean as it can now always use the association ID */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#977: FILE: fs/dlm/lowcomms-sctp.c:876:
+	/* Real INIT messages seem to cause trouble. Just send a 1 byte message
+	   we can afford to lose */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#977: FILE: fs/dlm/lowcomms-sctp.c:876:
+	   we can afford to lose */

ERROR:CODE_INDENT: code indent should use tabs where possible
#1007: FILE: fs/dlm/lowcomms-sctp.c:906:
+        /* See if we need to init an association before we start$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1008: FILE: fs/dlm/lowcomms-sctp.c:907:
+        /* See if we need to init an association before we start
+	   sending precious messages */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1008: FILE: fs/dlm/lowcomms-sctp.c:907:
+	   sending precious messages */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1041: FILE: fs/dlm/lowcomms-sctp.c:940:
+		BUG_ON(len == 0 && e->users == 0);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1047: FILE: fs/dlm/lowcomms-sctp.c:946:
+			iov.iov_base = page_address(e->page)+offset;
 			                                    ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#1052: FILE: fs/dlm/lowcomms-sctp.c:951:
+			if (ret == -EAGAIN) {
[...]
+			} else if (ret < 0)
[...]

CHECK:BRACES: braces {} should be used on all arms of this statement
#1079: FILE: fs/dlm/lowcomms-sctp.c:978:
+	if (!test_and_set_bit(NI_INIT_PENDING, &ni->flags)) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1083: FILE: fs/dlm/lowcomms-sctp.c:982:
+	} else

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1115: FILE: fs/dlm/lowcomms-sctp.c:1014:
+	for (i=1; i<=max_nodeid; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<=' (ctx:VxV)
#1115: FILE: fs/dlm/lowcomms-sctp.c:1014:
+	for (i=1; i<=max_nodeid; i++) {
 	           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1147: FILE: fs/dlm/lowcomms-sctp.c:1046:
+	for (i=1; i<=max_nodeid; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<=' (ctx:VxV)
#1147: FILE: fs/dlm/lowcomms-sctp.c:1046:
+	for (i=1; i<=max_nodeid; i++) {
 	           ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1149: FILE: fs/dlm/lowcomms-sctp.c:1048:
+		struct nodeinfo *ni = nodeid2nodeinfo(i, 0);
+		if (ni)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1154: FILE: fs/dlm/lowcomms-sctp.c:1053:
+
+

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1159: FILE: fs/dlm/lowcomms-sctp.c:1058:
+	for (i=1; i<=max_nodeid; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<=' (ctx:VxV)
#1159: FILE: fs/dlm/lowcomms-sctp.c:1058:
+	for (i=1; i<=max_nodeid; i++) {
 	           ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1161: FILE: fs/dlm/lowcomms-sctp.c:1060:
+		struct nodeinfo *ni = nodeid2nodeinfo(i, 0);
+		if (ni) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1180: FILE: fs/dlm/lowcomms-sctp.c:1079:
+		/* Don't send shutdown here, sctp will just queue it
+		   till the node comes back up! */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1180: FILE: fs/dlm/lowcomms-sctp.c:1079:
+		   till the node comes back up! */

ERROR:SPACING: spaces required around that '>=' (ctx:WxV)
#1225: FILE: fs/dlm/lowcomms-sctp.c:1124:
+			} while (!kthread_should_stop() && ret >=0);
 			                                       ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1270: FILE: fs/dlm/lowcomms-sctp.c:1169:
+       ^Iif (error) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1270: FILE: fs/dlm/lowcomms-sctp.c:1169:
+       ^Iif (error) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1270: FILE: fs/dlm/lowcomms-sctp.c:1169:
+       ^Iif (error) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1278: FILE: fs/dlm/lowcomms-sctp.c:1177:
+       ^Iif (error) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1278: FILE: fs/dlm/lowcomms-sctp.c:1177:
+       ^Iif (error) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1278: FILE: fs/dlm/lowcomms-sctp.c:1177:
+       ^Iif (error) {$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1347: FILE: fs/dlm/lowcomms-tcp.c:1:
+/******************************************************************************

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1348: FILE: fs/dlm/lowcomms-tcp.c:2:
+/******************************************************************************
+*******************************************************************************

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1391: FILE: fs/dlm/lowcomms-tcp.c:45:
+
+

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1403: FILE: fs/dlm/lowcomms-tcp.c:57:
+	unsigned base;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1404: FILE: fs/dlm/lowcomms-tcp.c:58:
+	unsigned len;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1405: FILE: fs/dlm/lowcomms-tcp.c:59:
+	unsigned mask;

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1414: FILE: fs/dlm/lowcomms-tcp.c:68:
+#define CBUF_INIT(cb, size) do { (cb)->base = (cb)->len = 0; (cb)->mask = ((size)-1); } while(0)
                                                                                  ^

ERROR:SPACING: space required before the open parenthesis '('
#1414: FILE: fs/dlm/lowcomms-tcp.c:68:
+#define CBUF_INIT(cb, size) do { (cb)->base = (cb)->len = 0; (cb)->mask = ((size)-1); } while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cb' - possible side-effects?
#1414: FILE: fs/dlm/lowcomms-tcp.c:68:
+#define CBUF_INIT(cb, size) do { (cb)->base = (cb)->len = 0; (cb)->mask = ((size)-1); } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#1415: FILE: fs/dlm/lowcomms-tcp.c:69:
+#define CBUF_ADD(cb, n) do { (cb)->len += n; } while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#1415: FILE: fs/dlm/lowcomms-tcp.c:69:
+#define CBUF_ADD(cb, n) do { (cb)->len += n; } while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cb' - possible side-effects?
#1417: FILE: fs/dlm/lowcomms-tcp.c:71:
+#define CBUF_MAY_ADD(cb, n) (((cb)->len + (n)) < ((cb)->mask + 1))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cb' - possible side-effects?
#1418: FILE: fs/dlm/lowcomms-tcp.c:72:
+#define CBUF_EAT(cb, n) do { (cb)->len  -= (n); \
+                             (cb)->base += (n); (cb)->base &= (cb)->mask; } while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#1418: FILE: fs/dlm/lowcomms-tcp.c:72:
+#define CBUF_EAT(cb, n) do { (cb)->len  -= (n); \
+                             (cb)->base += (n); (cb)->base &= (cb)->mask; } while(0)

ERROR:CODE_INDENT: code indent should use tabs where possible
#1419: FILE: fs/dlm/lowcomms-tcp.c:73:
+                             (cb)->base += (n); (cb)->base &= (cb)->mask; } while(0)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1419: FILE: fs/dlm/lowcomms-tcp.c:73:
+                             (cb)->base += (n); (cb)->base &= (cb)->mask; } while(0)$

ERROR:SPACING: space required before the open parenthesis '('
#1419: FILE: fs/dlm/lowcomms-tcp.c:73:
+                             (cb)->base += (n); (cb)->base &= (cb)->mask; } while(0)

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1419: FILE: fs/dlm/lowcomms-tcp.c:73:
+                             (cb)->base += (n); (cb)->base &= (cb)->mask; } while(0)

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cb' - possible side-effects?
#1420: FILE: fs/dlm/lowcomms-tcp.c:74:
+#define CBUF_DATA(cb) (((cb)->base + (cb)->len) & (cb)->mask)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1423: FILE: fs/dlm/lowcomms-tcp.c:77:
+/* Maximum number of incoming messages to process before
+   doing a schedule()

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1429: FILE: fs/dlm/lowcomms-tcp.c:83:
+	uint32_t nodeid;	/* So we know who we are in the list */

WARNING:SPACING: Unnecessary space before function pointer arguments
#1442: FILE: fs/dlm/lowcomms-tcp.c:96:
+	int (*rx_action) (struct connection *);	/* What to do when active */

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct connection *' should also have an identifier name
#1442: FILE: fs/dlm/lowcomms-tcp.c:96:
+	int (*rx_action) (struct connection *);	/* What to do when active */

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1450: FILE: fs/dlm/lowcomms-tcp.c:104:
+};
+#define sock2con(x) ((struct connection *)(x)->sk_user_data)

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#1502: FILE: fs/dlm/lowcomms-tcp.c:156:
+		new_conns = kmalloc(sizeof(struct connection *) *
+				    new_size, allocation);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1513: FILE: fs/dlm/lowcomms-tcp.c:167:
+
+	}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!con"
#1516: FILE: fs/dlm/lowcomms-tcp.c:170:
+	if (con == NULL && allocation) {

WARNING:TYPO_SPELLING: 'wil' may be misspelled - perhaps 'will'?
#1596: FILE: fs/dlm/lowcomms-tcp.c:250:
+		   lowcomms wil reconnect anyway when there is something to
 		            ^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1596: FILE: fs/dlm/lowcomms-tcp.c:250:
+		/* FIXME: I think this causes more trouble than it solves.
+		   lowcomms wil reconnect anyway when there is something to

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1603: FILE: fs/dlm/lowcomms-tcp.c:257:
+		printk("dlm: lowcomms_state_change: state=%d\n", sk->sk_state);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'lowcomms_state_change', this function's name, in a string
#1603: FILE: fs/dlm/lowcomms-tcp.c:257:
+		printk("dlm: lowcomms_state_change: state=%d\n", sk->sk_state);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1622: FILE: fs/dlm/lowcomms-tcp.c:276:
+/* Add the port number to an IP6 or 4 sockaddr and return the address
+   length */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1622: FILE: fs/dlm/lowcomms-tcp.c:276:
+   length */

ERROR:CODE_INDENT: code indent should use tabs where possible
#1626: FILE: fs/dlm/lowcomms-tcp.c:280:
+        saddr->ss_family =  dlm_local_addr.ss_family;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1626: FILE: fs/dlm/lowcomms-tcp.c:280:
+        saddr->ss_family =  dlm_local_addr.ss_family;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1627: FILE: fs/dlm/lowcomms-tcp.c:281:
+        if (saddr->ss_family == AF_INET) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1627: FILE: fs/dlm/lowcomms-tcp.c:281:
+        if (saddr->ss_family == AF_INET) {$

WARNING:LINE_SPACING: Missing a blank line after declarations
#1629: FILE: fs/dlm/lowcomms-tcp.c:283:
+		struct sockaddr_in *in4_addr = (struct sockaddr_in *)saddr;
+		in4_addr->sin_port = cpu_to_be16(port);

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1632: FILE: fs/dlm/lowcomms-tcp.c:286:
+	}
+	else {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#1632: FILE: fs/dlm/lowcomms-tcp.c:286:
+	else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1634: FILE: fs/dlm/lowcomms-tcp.c:288:
+		struct sockaddr_in6 *in6_addr = (struct sockaddr_in6 *)saddr;
+		in6_addr->sin6_port = cpu_to_be16(port);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1650: FILE: fs/dlm/lowcomms-tcp.c:304:
+		/* Argh! recursion in kernel code!
+		   Actually, this isn't a list so it

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1670: FILE: fs/dlm/lowcomms-tcp.c:324:
+	unsigned len;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!con->sock"
#1676: FILE: fs/dlm/lowcomms-tcp.c:330:
+	if (con->sock == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!con->rx_page"
#1678: FILE: fs/dlm/lowcomms-tcp.c:332:
+	if (con->rx_page == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!con->rx_page"
#1684: FILE: fs/dlm/lowcomms-tcp.c:338:
+		if (con->rx_page == NULL)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1719: FILE: fs/dlm/lowcomms-tcp.c:373:
+	r = ret = sock_recvmsg(con->sock, &msg, len,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1733: FILE: fs/dlm/lowcomms-tcp.c:387:
+		printk(KERN_INFO "dlm: lowcomms: addr=%p, base=%u, len=%u, "

WARNING:SPLIT_STRING: quoted string split across lines
#1734: FILE: fs/dlm/lowcomms-tcp.c:388:
+		printk(KERN_INFO "dlm: lowcomms: addr=%p, base=%u, len=%u, "
+		       "iov_len=%u, iov_base[0]=%p, read=%d\n",

WARNING:INDENTED_LABEL: labels should not be indented
#1747: FILE: fs/dlm/lowcomms-tcp.c:401:
+      out:

WARNING:INDENTED_LABEL: labels should not be indented
#1754: FILE: fs/dlm/lowcomms-tcp.c:408:
+      out_resched:

WARNING:INDENTED_LABEL: labels should not be indented
#1761: FILE: fs/dlm/lowcomms-tcp.c:415:
+      out_close:

WARNING:INDENTED_LABEL: labels should not be indented
#1768: FILE: fs/dlm/lowcomms-tcp.c:422:
+      out_ret:

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!con->sock"
#1790: FILE: fs/dlm/lowcomms-tcp.c:444:
+	if (con->sock == NULL)

ERROR:CODE_INDENT: code indent should use tabs where possible
#1811: FILE: fs/dlm/lowcomms-tcp.c:465:
+^I    ^Iprintk("dlm: connect from non cluster node\n");$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1811: FILE: fs/dlm/lowcomms-tcp.c:465:
+^I    ^Iprintk("dlm: connect from non cluster node\n");$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1811: FILE: fs/dlm/lowcomms-tcp.c:465:
+	    	printk("dlm: connect from non cluster node\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#1832: FILE: fs/dlm/lowcomms-tcp.c:486:
+^I        struct connection *othercon = newcon->othercon;$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1837: FILE: fs/dlm/lowcomms-tcp.c:491:
+				printk("dlm: failed to allocate incoming socket\n");

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1853: FILE: fs/dlm/lowcomms-tcp.c:507:
+	}
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#1853: FILE: fs/dlm/lowcomms-tcp.c:507:
+	else {

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1858: FILE: fs/dlm/lowcomms-tcp.c:512:
+
+	}

WARNING:TYPO_SPELLING: 'beween' may be misspelled - perhaps 'between'?
#1864: FILE: fs/dlm/lowcomms-tcp.c:518:
+	 * beween processing the accept adding the socket
 	   ^^^^^^

WARNING:INDENTED_LABEL: labels should not be indented
#1872: FILE: fs/dlm/lowcomms-tcp.c:526:
+      accept_err:

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1877: FILE: fs/dlm/lowcomms-tcp.c:531:
+		printk("dlm: error accepting connection from node: %d\n", result);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1911: FILE: fs/dlm/lowcomms-tcp.c:565:
+^I        goto out_err;$

WARNING:INDENTED_LABEL: labels should not be indented
#1929: FILE: fs/dlm/lowcomms-tcp.c:583:
+      out:

WARNING:TYPO_SPELLING: 'connetion' may be misspelled - perhaps 'connection'?
#1933: FILE: fs/dlm/lowcomms-tcp.c:587:
+	 * a remote node, otherwise we return 0 and reschedule the connetion
 	                                                           ^^^^^^^^^

WARNING:INDENTED_LABEL: labels should not be indented
#1938: FILE: fs/dlm/lowcomms-tcp.c:592:
+      out_err:

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1949: FILE: fs/dlm/lowcomms-tcp.c:603:
+	    result != -ENETDOWN && result != EINVAL
+	    && result != -EPROTONOSUPPORT) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#1958: FILE: fs/dlm/lowcomms-tcp.c:612:
+        struct socket *sock = NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1958: FILE: fs/dlm/lowcomms-tcp.c:612:
+        struct socket *sock = NULL;$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1972: FILE: fs/dlm/lowcomms-tcp.c:626:
+		printk("dlm: Can't create listening comms socket\n");

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1980: FILE: fs/dlm/lowcomms-tcp.c:634:
+	if (result < 0) {
+		printk("dlm: Failed to set SO_REUSEADDR on socket: result=%d\n",result);
+	}

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1981: FILE: fs/dlm/lowcomms-tcp.c:635:
+		printk("dlm: Failed to set SO_REUSEADDR on socket: result=%d\n",result);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1981: FILE: fs/dlm/lowcomms-tcp.c:635:
+		printk("dlm: Failed to set SO_REUSEADDR on socket: result=%d\n",result);
 		                                                               ^

CHECK:SPACING: No space is necessary after a cast
#1989: FILE: fs/dlm/lowcomms-tcp.c:643:
+	result = sock->ops->bind(sock, (struct sockaddr *) saddr, addr_len);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1991: FILE: fs/dlm/lowcomms-tcp.c:645:
+		printk("dlm: Can't bind to port %d\n", dlm_config.tcp_port);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2003: FILE: fs/dlm/lowcomms-tcp.c:657:
+	if (result < 0) {
+		printk("dlm: Set keepalive failed: %d\n", result);
+	}

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2004: FILE: fs/dlm/lowcomms-tcp.c:658:
+		printk("dlm: Set keepalive failed: %d\n", result);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2009: FILE: fs/dlm/lowcomms-tcp.c:663:
+		printk("dlm: Can't listen on port %d\n", dlm_config.tcp_port);

WARNING:INDENTED_LABEL: labels should not be indented
#2015: FILE: fs/dlm/lowcomms-tcp.c:669:
+      create_out:

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2019: FILE: fs/dlm/lowcomms-tcp.c:673:
+
+

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#2039: FILE: fs/dlm/lowcomms-tcp.c:693:
+	}
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#2039: FILE: fs/dlm/lowcomms-tcp.c:693:
+	else {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2046: FILE: fs/dlm/lowcomms-tcp.c:700:
+
+

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*entry)...) over kmalloc(sizeof(struct writequeue_entry)...)
#2053: FILE: fs/dlm/lowcomms-tcp.c:707:
+	entry = kmalloc(sizeof(struct writequeue_entry), allocation);

CHECK:SPACING: No space is necessary after a cast
#2089: FILE: fs/dlm/lowcomms-tcp.c:743:
+	if (((struct list_head *) e == &con->writequeue) ||

WARNING:INDENTED_LABEL: labels should not be indented
#2100: FILE: fs/dlm/lowcomms-tcp.c:754:
+	      got_one:

WARNING:INDENTED_LABEL: labels should not be indented
#2146: FILE: fs/dlm/lowcomms-tcp.c:800:
+      out:

WARNING:RETURN_VOID: void function return statements are not generally useful
#2149: FILE: fs/dlm/lowcomms-tcp.c:803:
+	return;
+}

WARNING:SPACING: missing space after return type
#2161: FILE: fs/dlm/lowcomms-tcp.c:815:
+	ssize_t(*sendpage) (struct socket *, struct page *, int, size_t, int);

WARNING:SPACING: Unnecessary space before function pointer arguments
#2161: FILE: fs/dlm/lowcomms-tcp.c:815:
+	ssize_t(*sendpage) (struct socket *, struct page *, int, size_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct socket *' should also have an identifier name
#2161: FILE: fs/dlm/lowcomms-tcp.c:815:
+	ssize_t(*sendpage) (struct socket *, struct page *, int, size_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#2161: FILE: fs/dlm/lowcomms-tcp.c:815:
+	ssize_t(*sendpage) (struct socket *, struct page *, int, size_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#2161: FILE: fs/dlm/lowcomms-tcp.c:815:
+	ssize_t(*sendpage) (struct socket *, struct page *, int, size_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#2161: FILE: fs/dlm/lowcomms-tcp.c:815:
+	ssize_t(*sendpage) (struct socket *, struct page *, int, size_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#2161: FILE: fs/dlm/lowcomms-tcp.c:815:
+	ssize_t(*sendpage) (struct socket *, struct page *, int, size_t, int);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!con->sock"
#2167: FILE: fs/dlm/lowcomms-tcp.c:821:
+	if (con->sock == NULL)

CHECK:SPACING: No space is necessary after a cast
#2176: FILE: fs/dlm/lowcomms-tcp.c:830:
+		if ((struct list_head *) e == &con->writequeue)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2181: FILE: fs/dlm/lowcomms-tcp.c:835:
+		BUG_ON(len == 0 && e->users == 0);

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#2193: FILE: fs/dlm/lowcomms-tcp.c:847:
+		}
+		else {

CHECK:BRACES: Unbalanced braces around else statement
#2193: FILE: fs/dlm/lowcomms-tcp.c:847:
+		else {

WARNING:INDENTED_LABEL: labels should not be indented
#2209: FILE: fs/dlm/lowcomms-tcp.c:863:
+      out:

WARNING:INDENTED_LABEL: labels should not be indented
#2213: FILE: fs/dlm/lowcomms-tcp.c:867:
+      send_error:

WARNING:INDENTED_LABEL: labels should not be indented
#2219: FILE: fs/dlm/lowcomms-tcp.c:873:
+      out_connect:

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2241: FILE: fs/dlm/lowcomms-tcp.c:895:
+/* Called from recovery when it knows that a node has
+   left the cluster */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2241: FILE: fs/dlm/lowcomms-tcp.c:895:
+   left the cluster */

WARNING:INDENTED_LABEL: labels should not be indented
#2258: FILE: fs/dlm/lowcomms-tcp.c:912:
+      out:

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#2287: FILE: fs/dlm/lowcomms-tcp.c:941:
+	list_for_each_safe(list, temp, &read_sockets) {
+

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2338: FILE: fs/dlm/lowcomms-tcp.c:992:
+		if (ret < 0) {
+		}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2360: FILE: fs/dlm/lowcomms-tcp.c:1014:
+		if (ret < 0) {
+		}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2367: FILE: fs/dlm/lowcomms-tcp.c:1021:
+
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#2460: FILE: fs/dlm/lowcomms-tcp.c:1114:
+       ^Iif (error) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2460: FILE: fs/dlm/lowcomms-tcp.c:1114:
+       ^Iif (error) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2460: FILE: fs/dlm/lowcomms-tcp.c:1114:
+       ^Iif (error) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2468: FILE: fs/dlm/lowcomms-tcp.c:1122:
+       ^Iif (error) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2468: FILE: fs/dlm/lowcomms-tcp.c:1122:
+       ^Iif (error) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2468: FILE: fs/dlm/lowcomms-tcp.c:1122:
+       ^Iif (error) {$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2493: FILE: fs/dlm/lowcomms-tcp.c:1147:
+	/* Set all the activity flags to prevent any
+	   socket activity.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2556: FILE: fs/dlm/lowcomms-tcp.c:1210:
+
+

WARNING:INDENTED_LABEL: labels should not be indented
#2570: FILE: fs/dlm/lowcomms-tcp.c:1224:
+      fail_unlisten:

WARNING:INDENTED_LABEL: labels should not be indented
#2575: FILE: fs/dlm/lowcomms-tcp.c:1229:
+      fail_free_conn:

WARNING:INDENTED_LABEL: labels should not be indented
#2578: FILE: fs/dlm/lowcomms-tcp.c:1232:
+      out:

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000013937.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 38 errors, 121 warnings, 68 checks, 2538 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000013937.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
