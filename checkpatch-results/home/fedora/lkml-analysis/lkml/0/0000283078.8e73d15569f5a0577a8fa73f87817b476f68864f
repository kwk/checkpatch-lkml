ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#52: FILE: crypto/cipher.c:23:
+#define CRA_CIPHER(tfm)	(tfm)->__crt_alg->cra_cipher

ERROR:SPACING: space required after that ',' (ctx:VxV)
#54: FILE: crypto/cipher.c:25:
+#define DEF_TFM_FUNCTION(name,mode,encdec,iv)	\
                              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#54: FILE: crypto/cipher.c:25:
+#define DEF_TFM_FUNCTION(name,mode,encdec,iv)	\
                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#54: FILE: crypto/cipher.c:25:
+#define DEF_TFM_FUNCTION(name,mode,encdec,iv)	\
                                          ^

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#54: FILE: crypto/cipher.c:25:
+#define DEF_TFM_FUNCTION(name,mode,encdec,iv)	\
+static int name(struct crypto_tfm *tfm,		\
+                struct scatterlist *dst,	\
+                struct scatterlist *src,	\
+		unsigned int nbytes)		\
+{						\
+	return crypt(tfm, dst, src, nbytes,	\
+		     mode, encdec, iv);		\
+}

ERROR:CODE_INDENT: code indent should use tabs where possible
#56: FILE: crypto/cipher.c:27:
+                struct scatterlist *dst,^I\$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#56: FILE: crypto/cipher.c:27:
+                struct scatterlist *dst,^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#57: FILE: crypto/cipher.c:28:
+                struct scatterlist *src,^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#57: FILE: crypto/cipher.c:28:
+                struct scatterlist *src,^I\$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#64: FILE: crypto/cipher.c:35:
+#define DEF_TFM_FUNCTION_IV(name,mode,encdec,iv)	\
                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#64: FILE: crypto/cipher.c:35:
+#define DEF_TFM_FUNCTION_IV(name,mode,encdec,iv)	\
                                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#64: FILE: crypto/cipher.c:35:
+#define DEF_TFM_FUNCTION_IV(name,mode,encdec,iv)	\
                                             ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'iv' - possible side-effects?
#64: FILE: crypto/cipher.c:35:
+#define DEF_TFM_FUNCTION_IV(name,mode,encdec,iv)	\
+static int name(struct crypto_tfm *tfm,		\
+                struct scatterlist *dst,	\
+                struct scatterlist *src,	\
+		unsigned int nbytes, u8 *iv)	\
+{						\
+	return crypt(tfm, dst, src, nbytes,	\
+		     mode, encdec, iv);		\
+}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'iv' may be better as '(iv)' to avoid precedence issues
#64: FILE: crypto/cipher.c:35:
+#define DEF_TFM_FUNCTION_IV(name,mode,encdec,iv)	\
+static int name(struct crypto_tfm *tfm,		\
+                struct scatterlist *dst,	\
+                struct scatterlist *src,	\
+		unsigned int nbytes, u8 *iv)	\
+{						\
+	return crypt(tfm, dst, src, nbytes,	\
+		     mode, encdec, iv);		\
+}

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#64: FILE: crypto/cipher.c:35:
+#define DEF_TFM_FUNCTION_IV(name,mode,encdec,iv)	\
+static int name(struct crypto_tfm *tfm,		\
+                struct scatterlist *dst,	\
+                struct scatterlist *src,	\
+		unsigned int nbytes, u8 *iv)	\
+{						\
+	return crypt(tfm, dst, src, nbytes,	\
+		     mode, encdec, iv);		\
+}

ERROR:CODE_INDENT: code indent should use tabs where possible
#66: FILE: crypto/cipher.c:37:
+                struct scatterlist *dst,^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#66: FILE: crypto/cipher.c:37:
+                struct scatterlist *dst,^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#67: FILE: crypto/cipher.c:38:
+                struct scatterlist *src,^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#67: FILE: crypto/cipher.c:38:
+                struct scatterlist *src,^I\$

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#153: FILE: crypto/cipher.c:129:
+	switch (mode) {
+		case CRYPTO_TFM_MODE_ECB:
[...]
+		case CRYPTO_TFM_MODE_CBC:
[...]
+		case CRYPTO_TFM_MODE_OFB:
[...]
+		case CRYPTO_TFM_MODE_CFB:
[...]
+		case CRYPTO_TFM_MODE_CTR:
[...]
+		default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:BRACES: braces {} should be used on all arms of this statement
#155: FILE: crypto/cipher.c:131:
+			if (CRA_CIPHER(tfm).cia_ecb)
[...]
+			else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#157: FILE: crypto/cipher.c:133:
+			else {

WARNING:LONG_LINE: line length of 131 exceeds 100 columns
#158: FILE: crypto/cipher.c:134:
+				cryptofn = (enc == CRYPTO_DIR_ENCRYPT) ? CRA_CIPHER(tfm).cia_encrypt : CRA_CIPHER(tfm).cia_decrypt;

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:BRACES: braces {} should be used on all arms of this statement
#164: FILE: crypto/cipher.c:140:
+			if (CRA_CIPHER(tfm).cia_cbc)
[...]
+			else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#166: FILE: crypto/cipher.c:142:
+			else {

WARNING:LONG_LINE: line length of 131 exceeds 100 columns
#167: FILE: crypto/cipher.c:143:
+				cryptofn = (enc == CRYPTO_DIR_ENCRYPT) ? CRA_CIPHER(tfm).cia_encrypt : CRA_CIPHER(tfm).cia_decrypt;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#173: FILE: crypto/cipher.c:149:
+		/* Until we have the appropriate {ofb,cfb,ctr}_process() functions,
+		   the following cases will return -ENOSYS if there is no HW support

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#174: FILE: crypto/cipher.c:150:
+		   for the mode. */

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#179: FILE: crypto/cipher.c:155:
+				return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#186: FILE: crypto/cipher.c:162:
+				return -ENOSYS;

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#193: FILE: crypto/cipher.c:169:
+				return -ENOSYS;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#197: FILE: crypto/cipher.c:173:
+			BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#204: FILE: crypto/cipher.c:180:
+	/* Some hardware crypto engines may require a specific
+	   alignment of the buffers. We will align the buffers

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#205: FILE: crypto/cipher.c:181:
+	   already here to avoid their reallocating later. */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#236: FILE: crypto/cipher.c:210:
+			(*cryptomultiblockfn)(crypto_tfm_ctx(tfm),
+					   dst_p, src_p, iv, bsize, enc,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#241: FILE: crypto/cipher.c:215:
+			(*processfn)(tfm, dst_p, src_p, cryptofn, enc, info,
+				  scatterwalk_samebuf(&walk_in, &walk_out,

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#275: FILE: crypto/cipher.c:231:
+	if (index_src)
+		kfree(index_src);

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#277: FILE: crypto/cipher.c:233:
+	if (index_dst)
+		kfree(index_dst);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#443: FILE: crypto/api.c:216:
+void *crypto_aligned_kmalloc (size_t size, int mode, size_t alignment, void **index)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#449: FILE: crypto/api.c:222:
+	if (alignment > 1 && ((long)ptr & (alignment - 1))) {
+		ptr += alignment - ((long)ptr & (alignment - 1));
+	}

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#510: FILE: include/linux/crypto.h:142:
+void *crypto_aligned_kmalloc (size_t size, int mode, size_t alignment, void **index);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#522: FILE: include/linux/crypto.h:281:
+	BUG_ON(crypto_tfm_alg_type(tfm) != CRYPTO_ALG_TYPE_CIPHER);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#528: FILE: include/linux/crypto.h:287:
+	BUG_ON(crypto_tfm_alg_type(tfm) != CRYPTO_ALG_TYPE_CIPHER);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000283078.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 12 errors, 23 warnings, 8 checks, 467 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000283078.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
