WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#60: FILE: mm/bootmem.c:128:
+		BUG_ON(!test_and_clear_bit(i, bdata->node_bootmem_map));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#70: FILE: mm/bootmem.c:248:
+		BUG_ON(test_and_set_bit(i, bdata->node_bootmem_map));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#82: FILE: mm/filemap.c:443:
+	BUG_ON(!TestClearPageLocked(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#92: FILE: mm/filemap.c:457:
+		BUG_ON(!test_clear_page_writeback(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#104: FILE: mm/highmem.c:82:
+		BUG_ON(pte_none(pkmap_page_table[i]));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#114: FILE: mm/highmem.c:163:
+	BUG_ON(pkmap_count[PKMAP_NR(vaddr)] < 2);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#124: FILE: mm/highmem.c:178:
+	BUG_ON(!vaddr);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#134: FILE: mm/highmem.c:223:
+	BUG_ON(!page_pool);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#144: FILE: mm/highmem.c:265:
+	BUG_ON(!isa_page_pool);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#156: FILE: mm/memory.c:905:
+	BUG_ON(address >= end);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#166: FILE: mm/memory.c:988:
+	BUG_ON(from >= end);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#178: FILE: mm/memory.c:1767:
+	BUG_ON(addr >= end);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#179: FILE: mm/memory.c:1768:
+	BUG_ON(end > vma->vm_end);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#192: FILE: mm/mempool.c:174:
+	BUG_ON(pool->curr_nr != pool->min_nr);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#205: FILE: mm/mmap.c:200:
+	BUG_ON(bug);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#215: FILE: mm/mmap.c:335:
+	BUG_ON(__vma && __vma->vm_start < vma->vm_end);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#225: FILE: mm/mmap.c:705:
+	BUG_ON(find_vma_prev(vma->vm_mm, vma->vm_start, &near) != vma);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#235: FILE: mm/mmap.c:1886:
+	BUG_ON(__vma && __vma->vm_start < vma->vm_end);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#247: FILE: mm/mprotect.c:98:
+	BUG_ON(start >= end);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#259: FILE: mm/msync.c:116:
+	BUG_ON(address >= end);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#271: FILE: mm/page_alloc.c:191:
+	BUG_ON(page_idx & ~mask);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#283: FILE: mm/pdflush.c:194:
+	BUG_ON(fn == NULL);	/* Hard to diagnose if it's deferred */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!fn"
#283: FILE: mm/pdflush.c:194:
+	BUG_ON(fn == NULL);	/* Hard to diagnose if it's deferred */

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#295: FILE: mm/shmem.c:1699:
+		BUG_ON(!page);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#307: FILE: mm/slab.c:746:
+	BUG_ON(!cache_cache.num);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#317: FILE: mm/slab.c:889:
+		BUG_ON(!TestClearPageSlab(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#327: FILE: mm/slab.c:1200:
+	BUG_ON(flags & ~CREATE_MASK);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#337: FILE: mm/slab.c:1476:
+	BUG_ON(smp_call_function(func, arg, 1, 1));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#347: FILE: mm/slab.c:1528:
+		BUG_ON(slabp->inuse);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#357: FILE: mm/slab.c:1552:
+	BUG_ON(!cachep || in_interrupt());

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#367: FILE: mm/slab.c:1580:
+	BUG_ON(!cachep || in_interrupt());

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#377: FILE: mm/slab.c:1699:
+		BUG_ON(!(cachep->gfpflags & GFP_DMA));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#381: FILE: mm/slab.c:1701:
+		BUG_ON(cachep->gfpflags & GFP_DMA);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#391: FILE: mm/slab.c:1735:
+	BUG_ON(flags & ~(SLAB_DMA|SLAB_LEVEL_MASK|SLAB_NO_GROW));

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#391: FILE: mm/slab.c:1735:
+	BUG_ON(flags & ~(SLAB_DMA|SLAB_LEVEL_MASK|SLAB_NO_GROW));
 	                         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#391: FILE: mm/slab.c:1735:
+	BUG_ON(flags & ~(SLAB_DMA|SLAB_LEVEL_MASK|SLAB_NO_GROW));
 	                                         ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#403: FILE: mm/swap.c:93:
+	BUG_ON(!test_clear_page_writeback(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#413: FILE: mm/swap.c:304:
+		BUG_ON(TestSetPageLRU(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#425: FILE: mm/swap.c:330:
+		BUG_ON(TestSetPageLRU(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#426: FILE: mm/swap.c:331:
+		BUG_ON(TestSetPageActive(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#438: FILE: mm/swap_state.c:147:
+	BUG_ON(!PageLocked(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#448: FILE: mm/swap_state.c:231:
+		BUG_ON(!swap_duplicate(entry));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#460: FILE: mm/swapfile.c:315:
+	BUG_ON(!PageLocked(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#470: FILE: mm/swapfile.c:508:
+	BUG_ON(address >= end);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#482: FILE: mm/vmalloc.c:321:
+			BUG_ON(!area->pages[i]);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#494: FILE: mm/vmscan.c:567:
+			BUG_ON(!TestClearPageLRU(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#504: FILE: mm/vmscan.c:605:
+			BUG_ON(TestSetPageLRU(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#514: FILE: mm/vmscan.c:663:
+		BUG_ON(!TestClearPageLRU(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#526: FILE: mm/vmscan.c:735:
+		BUG_ON(TestSetPageLRU(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#527: FILE: mm/vmscan.c:736:
+		BUG_ON(!TestClearPageActive(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#537: FILE: mm/vmscan.c:762:
+		BUG_ON(TestSetPageLRU(page));

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000255723.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 0 errors, 48 warnings, 3 checks, 411 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000255723.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
