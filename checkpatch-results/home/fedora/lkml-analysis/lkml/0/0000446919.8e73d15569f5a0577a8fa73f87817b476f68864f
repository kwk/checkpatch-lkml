WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#30: 
> > > level, yes that is possible. You may just run out of loop minors before

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#174: FILE: drivers/block/loop.c:200:
+__setup("lo_prealloc=", lo_prealloc_setup);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#189: FILE: drivers/block/loop.c:209:
+};^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#274: FILE: drivers/block/loop.c:238:
+	if(!y) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'lo->lo_number == lo_prealloc[x]'
#277: FILE: drivers/block/loop.c:241:
+			if (lo_prealloc[x + 1] && (lo->lo_number == lo_prealloc[x])) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:INDENTED_LABEL: labels should not be indented
#299: FILE: drivers/block/loop.c:252:
+			fail1:

WARNING:INDENTED_LABEL: labels should not be indented
#305: FILE: drivers/block/loop.c:258:
+			fail2:

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*bio->bi_private)...) over kmalloc(sizeof(struct loop_bio_extension)...)
#311: FILE: drivers/block/loop.c:264:
+		bio->bi_private = kmalloc(sizeof(struct loop_bio_extension), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:WAITQUEUE_ACTIVE: waitqueue_active without comment
#359: FILE: drivers/block/loop.c:294:
+	if (waitqueue_active(&lo->lo_bio_wait))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#435: FILE: drivers/block/loop.c:316:
+	if ((last = lo->lo_bio_que0)) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#443: FILE: drivers/block/loop.c:324:
+	} else if ((last = lo->lo_bio_que1)) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#451: FILE: drivers/block/loop.c:332:
+	} else if ((last = lo->lo_bio_que2)) {

ERROR:SPACING: space required before the open parenthesis '('
#502: FILE: drivers/block/loop.c:351:
+	if(!flist) {

WARNING:WAITQUEUE_ACTIVE: waitqueue_active without comment
#514: FILE: drivers/block/loop.c:362:
+	if (wk && waitqueue_active(&lo->lo_bio_wait))

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#533: FILE: drivers/block/loop.c:372:
+	int uptodate = test_bit(BIO_UPTODATE, &bio->bi_flags);
 	    ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#536: FILE: drivers/block/loop.c:374:
+	if (!uptodate)
 	     ^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#557: FILE: drivers/block/loop.c:391:
+static struct bio *loop_get_buffer(struct loop_device *lo,
+		struct bio *orig_bio, int from_thread, struct bio **merge_ptr)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#638: FILE: drivers/block/loop.c:451:
+	bio->bi_size = len = orig_bio->bi_io_vec[merge->bi_idx].bv_len;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:SPACING: No space is necessary after a cast
#796: FILE: drivers/block/loop.c:552:
+	pos = ((loff_t) bio->bi_sector << 9) + lo->lo_offset;

WARNING:LONG_LINE: line length of 125 exceeds 100 columns
#808: FILE: drivers/block/loop.c:564:
+					printk(KERN_ERR "loop: write transfer error, sector %llu\n", (unsigned long long)IV);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#808: FILE: drivers/block/loop.c:564:
+					printk(KERN_ERR "loop: write transfer error, sector %llu\n", (unsigned long long)IV);

WARNING:LONG_LINE: line length of 120 exceeds 100 columns
#812: FILE: drivers/block/loop.c:568:
+					printk(KERN_ERR "loop: write i/o error, sector %llu\n", (unsigned long long)IV);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#812: FILE: drivers/block/loop.c:568:
+					printk(KERN_ERR "loop: write i/o error, sector %llu\n", (unsigned long long)IV);

WARNING:LONG_LINE: line length of 119 exceeds 100 columns
#817: FILE: drivers/block/loop.c:573:
+					printk(KERN_ERR "loop: read i/o error, sector %llu\n", (unsigned long long)IV);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#817: FILE: drivers/block/loop.c:573:
+					printk(KERN_ERR "loop: read i/o error, sector %llu\n", (unsigned long long)IV);

WARNING:LONG_LINE: line length of 124 exceeds 100 columns
#821: FILE: drivers/block/loop.c:577:
+					printk(KERN_ERR "loop: read transfer error, sector %llu\n", (unsigned long long)IV);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#821: FILE: drivers/block/loop.c:577:
+					printk(KERN_ERR "loop: read transfer error, sector %llu\n", (unsigned long long)IV);

WARNING:INDENTED_LABEL: labels should not be indented
#874: FILE: drivers/block/loop.c:643:
+	try_next_old_bio_vec:

WARNING:LONG_LINE: line length of 222 exceeds 100 columns
#889: FILE: drivers/block/loop.c:656:
+		if (lo_do_transfer(lo, WRITE, page_address(new_bio->bi_io_vec[0].bv_page), page_address(old_bio->bi_io_vec[y].bv_page) + old_bio->bi_io_vec[y].bv_offset, extension->bioext_size, extension->bioext_sector)) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#889: FILE: drivers/block/loop.c:656:
+		if (lo_do_transfer(lo, WRITE, page_address(new_bio->bi_io_vec[0].bv_page), page_address(old_bio->bi_io_vec[y].bv_page) + old_bio->bi_io_vec[y].bv_offset, extension->bioext_size, extension->bioext_sector)) {
+			clear_bit(BIO_UPTODATE, &merge->bi_flags);
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:INDENTED_LABEL: labels should not be indented
#1023: FILE: drivers/block/loop.c:780:
+			try_next_bio_vec:

WARNING:LONG_LINE: line length of 227 exceeds 100 columns
#1038: FILE: drivers/block/loop.c:795:
+				if (lo_do_transfer(lo, WRITE, page_address(xbio->bi_io_vec[0].bv_page), page_address(bio->bi_io_vec[y].bv_page) + bio->bi_io_vec[y].bv_offset, extension->bioext_size, extension->bioext_sector)) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1038: FILE: drivers/block/loop.c:795:
+				if (lo_do_transfer(lo, WRITE, page_address(xbio->bi_io_vec[0].bv_page), page_address(bio->bi_io_vec[y].bv_page) + bio->bi_io_vec[y].bv_offset, extension->bioext_size, extension->bioext_sector)) {
+					clear_bit(BIO_UPTODATE, &merge->bi_flags);
+				}

ERROR:CODE_INDENT: code indent should use tabs where possible
#1064: FILE: drivers/block/loop.c:821:
+ ^I^I^Icontinue;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1064: FILE: drivers/block/loop.c:821:
+ ^I^I^Icontinue;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1064: FILE: drivers/block/loop.c:821:
+ ^I^I^Icontinue;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1065: FILE: drivers/block/loop.c:822:
+ ^I^I}$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1065: FILE: drivers/block/loop.c:822:
+ ^I^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1065: FILE: drivers/block/loop.c:822:
+ ^I^I}$

WARNING:LONG_LINE: line length of 219 exceeds 100 columns
#1078: FILE: drivers/block/loop.c:835:
+			if (lo_do_transfer(lo, READ, page_address(bio->bi_io_vec[0].bv_page), page_address(xbio->bi_io_vec[y].bv_page) + xbio->bi_io_vec[y].bv_offset, extension->bioext_size, extension->bioext_sector)) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1078: FILE: drivers/block/loop.c:835:
+			if (lo_do_transfer(lo, READ, page_address(bio->bi_io_vec[0].bv_page), page_address(xbio->bi_io_vec[y].bv_page) + xbio->bi_io_vec[y].bv_offset, extension->bioext_size, extension->bioext_sector)) {
+				clear_bit(BIO_UPTODATE, &merge->bi_flags);
+			}

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#1108: FILE: drivers/block/loop.c:886:
+	lo->lo_bio_free1 = lo->lo_bio_free0 = lo->lo_bio_que2 = lo->lo_bio_que1 = lo->lo_bio_que0 = NULL;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1108: FILE: drivers/block/loop.c:886:
+	lo->lo_bio_free1 = lo->lo_bio_free0 = lo->lo_bio_que2 = lo->lo_bio_que1 = lo->lo_bio_que0 = NULL;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1109: FILE: drivers/block/loop.c:887:
+	lo->lo_bio_need = lo->lo_bio_flsh = 0;

CHECK:SPACING: No space is necessary after a cast
#1170: FILE: drivers/block/loop.c:944:
+		int x = (int) loop_sizes[lo->lo_number];

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bs == 8192'
#1172: FILE: drivers/block/loop.c:946:
+		if ((bs == 8192) && (x & 7))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bs == 4096'
#1174: FILE: drivers/block/loop.c:948:
+		if ((bs == 4096) && (x & 3))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bs == 2048'
#1176: FILE: drivers/block/loop.c:950:
+		if ((bs == 2048) && (x & 1))

ERROR:SPACING: space required before the open brace '{'
#1219: FILE: drivers/block/loop.c:1069:
+		if (figure_loop_size(lo)){

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#1287: FILE: drivers/block/loop.c:1297:
+	loop_sizes = kmalloc(max_loop * sizeof(loop_sizes[0]), GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

CHECK:BIT_MACRO: Prefer using the BIT macro
#1343: FILE: include/linux/loop.h:22:
+#define LOOP_IV_SECTOR_SIZE (1 << LOOP_IV_SECTOR_BITS)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1344: FILE: include/linux/loop.h:23:
+typedef /*FIXME sector_t*/int loop_iv_t;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000446919.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 9 errors, 30 warnings, 13 checks, 1304 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000446919.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
