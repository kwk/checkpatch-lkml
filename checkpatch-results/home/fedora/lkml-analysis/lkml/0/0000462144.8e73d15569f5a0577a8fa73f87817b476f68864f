WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#31: 
- Revoke the TCQ stuff. Well having it for some time showed just nicely what

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#234: FILE: drivers/ide/ide.c:1215:
+		if (!list_empty(&drive->queue.queue_head)
+		&& (!drive->PADAM_sleep	|| time_after_eq(drive->PADAM_sleep, jiffies))) {

WARNING:LONG_LINE: line length of 125 exceeds 100 columns
#236: FILE: drivers/ide/ide.c:1217:
+			 || (drive->PADAM_sleep && (!best->PADAM_sleep || time_after(best->PADAM_sleep, drive->PADAM_sleep)))

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#236: FILE: drivers/ide/ide.c:1217:
+			if (!best
+			 || (drive->PADAM_sleep && (!best->PADAM_sleep || time_after(best->PADAM_sleep, drive->PADAM_sleep)))

WARNING:LONG_LINE: line length of 181 exceeds 100 columns
#237: FILE: drivers/ide/ide.c:1218:
+			 || (!best->PADAM_sleep && time_after(best->PADAM_service_start + 2 * best->PADAM_service_time, drive->PADAM_service_start + 2 * drive->PADAM_service_time)))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#237: FILE: drivers/ide/ide.c:1218:
+			 || (drive->PADAM_sleep && (!best->PADAM_sleep || time_after(best->PADAM_sleep, drive->PADAM_sleep)))
+			 || (!best->PADAM_sleep && time_after(best->PADAM_service_start + 2 * best->PADAM_service_time, drive->PADAM_service_start + 2 * drive->PADAM_service_time)))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!drive"
#415: FILE: drivers/ide/ide.c:1271:
+		if (drive == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:LINE_SPACING: Missing a blank line after declarations
#417: FILE: drivers/ide/ide.c:1273:
+			unsigned long sleep = 0;
+			hwgroup->rq = NULL;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#420: FILE: drivers/ide/ide.c:1276:
+				if (drive->PADAM_sleep && (!sleep || time_after(sleep, drive->PADAM_sleep)))

WARNING:IF_1: Consider removing the #if 1 and its #endif
#432: FILE: drivers/ide/ide.c:1288:
+#if 1

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#434: FILE: drivers/ide/ide.c:1290:
+					printk("ide_set_handler: timer already active\n");

WARNING:LONG_LINE_COMMENT: line length of 110 exceeds 100 columns
#440: FILE: drivers/ide/ide.c:1296:
+				/* Ugly, but how can we sleep for the lock otherwise? perhaps from tq_disk? */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#448: FILE: drivers/ide/ide.c:1303:
+		if (hwgroup->hwif->sharing_irq && hwif != hwgroup->hwif && hwif->io_ports[IDE_CONTROL_OFFSET]) {

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#455: FILE: drivers/ide/ide.c:1309:
+				OUT_BYTE((drive)->ctl|2, hwif->io_ports[IDE_CONTROL_OFFSET]);
 				                     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#463: FILE: drivers/ide/ide.c:1317:
+			BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#468: FILE: drivers/ide/ide.c:1322:
+		rq = hwgroup->rq = elv_next_request(&drive->queue);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#532: FILE: drivers/ide/ide.c:1382:
+	printk("%s: timeout waiting for DMA\n", drive->name);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!hwgroup->handler"
#568: FILE: drivers/ide/ide.c:1642:
+		if (hwgroup->handler == NULL) {	/* paranoia */

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#714: FILE: drivers/ide/ide-cd.c:1216:
+static ide_startstop_t cdrom_start_read (ide_drive_t *drive, unsigned int block)

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#912: FILE: drivers/ide/ide-disk.c:158:
+	taskfile.high_cylinder	= (cyl>>8);
 	                      	      ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#921: FILE: drivers/ide/ide-disk.c:167:
+	if (lba)	printk("LBAsect=%lld, ", block);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#921: FILE: drivers/ide/ide-disk.c:167:
+	if (lba)	printk("LBAsect=%lld, ", block);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#922: FILE: drivers/ide/ide-disk.c:168:
+	else		printk("CHS=%d/%d/%d, ", cyl, head, sect);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#922: FILE: drivers/ide/ide-disk.c:168:
+	else		printk("CHS=%d/%d/%d, ", cyl, head, sect);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#994: FILE: drivers/ide/ide-disk.c:208:
+	if (lba)	printk("LBAsect=%lld, ", block);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#994: FILE: drivers/ide/ide-disk.c:208:
+	if (lba)	printk("LBAsect=%lld, ", block);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#995: FILE: drivers/ide/ide-disk.c:209:
+	else		printk("CHS=%d/%d/%d, ", cyl, head, sect);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#995: FILE: drivers/ide/ide-disk.c:209:
+	else		printk("CHS=%d/%d/%d, ", cyl, head, sect);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#996: FILE: drivers/ide/ide-disk.c:210:
+	printk("sectors=%ld, ", rq->nr_sectors);

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#1019: FILE: drivers/ide/ide-disk.c:228:
+static ide_startstop_t lba48_do_request(ide_drive_t *drive, struct request *rq, unsigned long long block)

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1082: FILE: drivers/ide/ide-disk.c:260:
+	hobfile.control		= (drive->ctl|0x80);
 	               		             ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1089: FILE: drivers/ide/ide-disk.c:266:
+	if (lba)	printk("LBAsect=%lld, ", block);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1089: FILE: drivers/ide/ide-disk.c:266:
+	if (lba)	printk("LBAsect=%lld, ", block);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1090: FILE: drivers/ide/ide-disk.c:267:
+	else		printk("CHS=%d/%d/%d, ", cyl, head, sect);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1090: FILE: drivers/ide/ide-disk.c:267:
+	else		printk("CHS=%d/%d/%d, ", cyl, head, sect);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1091: FILE: drivers/ide/ide-disk.c:268:
+	printk("sectors=%ld, ", rq->nr_sectors);

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#1113: FILE: drivers/ide/ide-disk.c:285:
+static ide_startstop_t idedisk_do_request(ide_drive_t *drive, struct request *rq, unsigned long block)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1289: FILE: drivers/ide/ide-dma.c:212:
+^I^Iprintk("%s: dma_intr: bad DMA status (dma_stat=%x)\n", $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1289: FILE: drivers/ide/ide-dma.c:212:
+		printk("%s: dma_intr: bad DMA status (dma_stat=%x)\n", 

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#1317: FILE: drivers/ide/ide-dma.c:227:
+		printk("ide-dma: received %d phys segments, build %d\n", rq->nr_phys_segments, nents);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1317: FILE: drivers/ide/ide-dma.c:227:
+		printk("ide-dma: received %d phys segments, build %d\n", rq->nr_phys_segments, nents);

WARNING:IF_1: Consider removing the #if 1 and its #endif
#1341: FILE: drivers/ide/ide-dma.c:246:
+#if 1

ERROR:CODE_INDENT: code indent should use tabs where possible
#1346: FILE: drivers/ide/ide-dma.c:250:
+        nents = blk_rq_map_sg(rq->q, rq, ch->sg_table);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1346: FILE: drivers/ide/ide-dma.c:250:
+        nents = blk_rq_map_sg(rq->q, rq, ch->sg_table);$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1349: FILE: drivers/ide/ide-dma.c:253:
+		printk("ide-dma: received %d segments, build %d\n", rq->nr_segments, nents);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1378: FILE: drivers/ide/ide-dma.c:285:
+int ide_build_dmatable (ide_drive_t *drive, ide_dma_action_t func)

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#1398: FILE: drivers/ide/ide-dma.c:298:
+	if (HWGROUP(drive)->rq->flags & REQ_DRIVE_TASKFILE) {
[...]
+	} else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1399: FILE: drivers/ide/ide-dma.c:299:
+		hwif->sg_nents = i = raw_build_sglist(hwif, HWGROUP(drive)->rq);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1401: FILE: drivers/ide/ide-dma.c:301:
+		hwif->sg_nents = i = ide_build_sglist(hwif, HWGROUP(drive)->rq);

WARNING:LONG_LINE: line length of 133 exceeds 100 columns
#1417: FILE: drivers/ide/ide-dma.c:325:
+				printk("count %d, sg_nents %d, cur_len %d, cur_addr %u\n", count, hwif->sg_nents, cur_len, cur_addr);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1417: FILE: drivers/ide/ide-dma.c:325:
+				printk("count %d, sg_nents %d, cur_len %d, cur_addr %u\n", count, hwif->sg_nents, cur_len, cur_addr);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1426: FILE: drivers/ide/ide-dma.c:336:
+^I^I        /* $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1426: FILE: drivers/ide/ide-dma.c:336:
+^I^I        /* $

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1446: FILE: drivers/ide/ide-dma.c:371:
+void ide_destroy_dmatable (ide_drive_t *drive)

ERROR:CODE_INDENT: code indent should use tabs where possible
#1464: FILE: drivers/ide/ide-dma.c:435:
+^I  ^I  (id->dma_ultra & (id->dma_ultra >> 11) & 7)) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1464: FILE: drivers/ide/ide-dma.c:435:
+^I  ^I  (id->dma_ultra & (id->dma_ultra >> 11) & 7)) {$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1575: FILE: drivers/ide/ide-dma.c:582:
+			if (!(count = ide_build_dmatable(drive, func)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:LONG_LINE_COMMENT: line length of 102 exceeds 100 columns
#1579: FILE: drivers/ide/ide-dma.c:586:
+			outb(inb(dma_base+2)|6, dma_base+2);		/* clear INTR & ERROR flags */

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1579: FILE: drivers/ide/ide-dma.c:586:
+			outb(inb(dma_base+2)|6, dma_base+2);		/* clear INTR & ERROR flags */
 			                 ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1579: FILE: drivers/ide/ide-dma.c:586:
+			outb(inb(dma_base+2)|6, dma_base+2);		/* clear INTR & ERROR flags */
 			                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1579: FILE: drivers/ide/ide-dma.c:586:
+			outb(inb(dma_base+2)|6, dma_base+2);		/* clear INTR & ERROR flags */
 			                                ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'drive->addressing == 1'
#1587: FILE: drivers/ide/ide-dma.c:593:
+			if ((HWGROUP(drive)->rq->flags & REQ_DRIVE_TASKFILE) &&
 			    (drive->addressing == 1)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1605: FILE: drivers/ide/ide-dma.c:609:
+			outb(inb(dma_base)|1, dma_base);		/* start DMA */
 			                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1613: FILE: drivers/ide/ide-dma.c:614:
+			dma_stat = inb(dma_base+2);		/* get DMA status */
 			                       ^

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#1622: FILE: drivers/ide/ide-dma.c:637:
+			printk(KERN_ERR "%s: chipset supported func only: %d\n", __FUNCTION__,  func);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1622: FILE: drivers/ide/ide-dma.c:637:
+			printk(KERN_ERR "%s: chipset supported func only: %d\n", __FUNCTION__,  func);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1622: FILE: drivers/ide/ide-dma.c:637:
+			printk(KERN_ERR "%s: chipset supported func only: %d\n", __FUNCTION__,  func);

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#1638: FILE: drivers/ide/ide-dma.c:661:
+	if (hwif->sg_table) {
+		kfree(hwif->sg_table);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!hwif->dmatable_cpu"
#1651: FILE: drivers/ide/ide-dma.c:685:
+	if (hwif->dmatable_cpu == NULL)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*hwif->sg_table)...) over kmalloc(sizeof(struct scatterlist)...)
#1654: FILE: drivers/ide/ide-dma.c:688:
+	hwif->sg_table = kmalloc(sizeof(struct scatterlist) * PRD_ENTRIES,

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!hwif->sg_table"
#1656: FILE: drivers/ide/ide-dma.c:690:
+	if (hwif->sg_table == NULL) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1671: FILE: drivers/ide/ide-dma.c:708:
+	printk(" -- ERROR, UNABLE TO ALLOCATE DMA TABLES\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'args->taskfile.command == WIN_WRITEDMA'
#1756: FILE: drivers/ide/ide-taskfile.c:467:
+		if (drive->using_dma &&
+		!(drive->channel->dmaproc(((args->taskfile.command == WIN_WRITEDMA)
+					|| (args->taskfile.command == WIN_WRITEDMA_EXT))
+					? ide_dma_write : ide_dma_read, drive)));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'args->taskfile.command == WIN_WRITEDMA_EXT'
#1756: FILE: drivers/ide/ide-taskfile.c:467:
+		if (drive->using_dma &&
+		!(drive->channel->dmaproc(((args->taskfile.command == WIN_WRITEDMA)
+					|| (args->taskfile.command == WIN_WRITEDMA_EXT))
+					? ide_dma_write : ide_dma_read, drive)));

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1756: FILE: drivers/ide/ide-taskfile.c:467:
+		if (drive->using_dma &&
[...]
+					? ide_dma_write : ide_dma_read, drive)));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1757: FILE: drivers/ide/ide-taskfile.c:468:
+		if (drive->using_dma &&
+		!(drive->channel->dmaproc(((args->taskfile.command == WIN_WRITEDMA)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1758: FILE: drivers/ide/ide-taskfile.c:469:
+		!(drive->channel->dmaproc(((args->taskfile.command == WIN_WRITEDMA)
+					|| (args->taskfile.command == WIN_WRITEDMA_EXT))

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2824: FILE: include/linux/ide.h:878:
+int ide_build_dmatable (ide_drive_t *drive, ide_dma_action_t func);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2825: FILE: include/linux/ide.h:879:
+void ide_destroy_dmatable (ide_drive_t *drive);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2826: FILE: include/linux/ide.h:880:
+ide_startstop_t ide_dma_intr (ide_drive_t *drive);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2827: FILE: include/linux/ide.h:881:
+int check_drive_lists (ide_drive_t *drive, int good_bad);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2828: FILE: include/linux/ide.h:882:
+int ide_dmaproc (ide_dma_action_t func, ide_drive_t *drive);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000462144.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 13 errors, 45 warnings, 24 checks, 2102 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000462144.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
