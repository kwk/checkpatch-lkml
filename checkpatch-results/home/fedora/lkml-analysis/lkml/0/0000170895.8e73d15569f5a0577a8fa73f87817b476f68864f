ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#95: FILE: security/security.c:19:
=20

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#101: FILE: security/security.c:22:
+extern void security_fixup_ops (struct security_operations *ops);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#101: FILE: security/security.c:22:
+extern void security_fixup_ops (struct security_operations *ops);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#103: FILE: security/security.c:24:
+extern struct security_operations capability_security_ops;

WARNING:SPLIT_STRING: quoted string split across lines
#117: FILE: security/security.c:60:
 		printk(KERN_ERR "%s could not verify "
+		       "capability_security_ops structure.\n", __FUNCTION__);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#117: FILE: security/security.c:60:
+		       "capability_security_ops structure.\n", __FUNCTION__);

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#122: FILE: security/security.c:63:
+	security_ops =3D &capability_security_ops;
 	             ^

CHECK:SPACING: spaces preferred around that '&' (ctx:WxV)
#122: FILE: security/security.c:63:
+	security_ops =3D &capability_security_ops;
 	                 ^

ERROR:SPACING: spaces required around that '!=' (ctx:WxV)
#135: FILE: security/security.c:92:
+	if (security_ops !=3D &capability_security_ops)
 	                 ^

CHECK:SPACING: spaces preferred around that '&' (ctx:WxV)
#135: FILE: security/security.c:92:
+	if (security_ops !=3D &capability_security_ops)
 	                      ^

WARNING:REPEATED_WORD: Possible repeated word: 'the'
#149: FILE: security/security.c:111:
 the
+ * the capability_security_ops structure, and 0 is returned.

WARNING:SPLIT_STRING: quoted string split across lines
#156: FILE: security/security.c:117:
 		printk(KERN_INFO "%s: trying to unregister "
+		       "a security_ops structure that is not "

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#162: FILE: security/security.c:121:
+	security_ops =3D &capability_security_ops;
 	             ^

CHECK:SPACING: spaces preferred around that '&' (ctx:WxV)
#162: FILE: security/security.c:121:
+	security_ops =3D &capability_security_ops;
 	                 ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#178: FILE: security/commoncap.c:327:
 }
+#ifdef CONFIG_SECURITY

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#179: FILE: security/commoncap.c:328:
+struct security_operations capability_security_ops =3D {
                                                    ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#180: FILE: security/commoncap.c:329:
+	.ptrace =3D			cap_ptrace,
 	        ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#181: FILE: security/commoncap.c:330:
+	.capget =3D			cap_capget,
 	        ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#182: FILE: security/commoncap.c:331:
+	.capset_check =3D			cap_capset_check,
 	              ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#183: FILE: security/commoncap.c:332:
+	.capset_set =3D			cap_capset_set,
 	            ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#184: FILE: security/commoncap.c:333:
+	.capable =3D			cap_capable,
 	         ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#185: FILE: security/commoncap.c:334:
+	.settime =3D			cap_settime,
 	         ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#186: FILE: security/commoncap.c:335:
+	.netlink_send =3D			cap_netlink_send,
 	              ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#187: FILE: security/commoncap.c:336:
+	.netlink_recv =3D			cap_netlink_recv,
 	              ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#189: FILE: security/commoncap.c:338:
+	.bprm_apply_creds =3D		cap_bprm_apply_creds,
 	                  ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#190: FILE: security/commoncap.c:339:
+	.bprm_set_security =3D		cap_bprm_set_security,
 	                   ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#191: FILE: security/commoncap.c:340:
+	.bprm_secureexec =3D		cap_bprm_secureexec,
 	                 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#193: FILE: security/commoncap.c:342:
+	.inode_setxattr =3D		cap_inode_setxattr,
 	                ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#194: FILE: security/commoncap.c:343:
+	.inode_removexattr =3D		cap_inode_removexattr,
 	                   ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#196: FILE: security/commoncap.c:345:
+	.task_post_setuid =3D		cap_task_post_setuid,
 	                  ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#197: FILE: security/commoncap.c:346:
+	.task_reparent_to_init =3D	cap_task_reparent_to_init,
 	                       ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#199: FILE: security/commoncap.c:348:
+	.syslog =3D                       cap_syslog,
 	        ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#201: FILE: security/commoncap.c:350:
+	.vm_enough_memory =3D             cap_vm_enough_memory,
 	                  ^

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#204: FILE: security/commoncap.c:353:
+EXPORT_SYMBOL(capability_security_ops);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000170895.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 22 errors, 8 warnings, 4 checks, 205 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000170895.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
