ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#134: FILE: lib/inflate.c:154:
+# define spin_lock(x)		(void)(x)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#135: FILE: lib/inflate.c:155:
+# define spin_unlock(x)		(void)(x)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#151: FILE: lib/inflate.c:326:
+  static unsigned v[N_MAX];     /* values in order of bit length */$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#151: FILE: lib/inflate.c:326:
+  static unsigned v[N_MAX];     /* values in order of bit length */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#160: FILE: lib/inflate.c:727:
+  static unsigned l[288];      /* length list for huft_build */$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#160: FILE: lib/inflate.c:727:
+  static unsigned l[288];      /* length list for huft_build */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#169: FILE: lib/inflate.c:789:
+  static unsigned ll[288+32];  /* literal/length and distance code lengths */$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#169: FILE: lib/inflate.c:789:
+  static unsigned ll[288+32];  /* literal/length and distance code lengths */

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#169: FILE: lib/inflate.c:789:
+  static unsigned ll[288+32];  /* literal/length and distance code lengths */
                         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#172: FILE: lib/inflate.c:791:
+  static unsigned ll[286+30];  /* literal/length and distance code lengths */$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#172: FILE: lib/inflate.c:791:
+  static unsigned ll[286+30];  /* literal/length and distance code lengths */

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#172: FILE: lib/inflate.c:791:
+  static unsigned ll[286+30];  /* literal/length and distance code lengths */
                         ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#180: FILE: lib/inflate.c:962:
+  unsigned ret;         /* return code */$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#180: FILE: lib/inflate.c:962:
+  unsigned ret;         /* return code */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#194: FILE: lib/inflate.c:988:
+  ret = 2;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#195: FILE: lib/inflate.c:989:
+  spin_lock(&inflate_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#196: FILE: lib/inflate.c:990:
+  switch (t) {$

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#196: FILE: lib/inflate.c:990:
+  switch (t) {
+	case 2: ret = inflate_dynamic(); break;
+	case 0: ret = inflate_stored();  break;
+	case 1: ret = inflate_fixed();   break;

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#197: FILE: lib/inflate.c:991:
+	case 2: ret = inflate_dynamic(); break;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#198: FILE: lib/inflate.c:992:
+	case 0: ret = inflate_stored();  break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#199: FILE: lib/inflate.c:993:
+	case 1: ret = inflate_fixed();   break;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#200: FILE: lib/inflate.c:994:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#201: FILE: lib/inflate.c:995:
+  spin_unlock(&inflate_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#207: FILE: lib/inflate.c:1000:
+  return ret;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#240: FILE: lib/zlib_inflate/inftrees.c:118:
+  static uInt c[BMAX+1];        /* bit length count table */$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#240: FILE: lib/zlib_inflate/inftrees.c:118:
+  static uInt c[BMAX+1];        /* bit length count table */
                     ^

CHECK:CAMELCASE: Avoid CamelCase: <uInt>
#240: FILE: lib/zlib_inflate/inftrees.c:118:
+  static uInt c[BMAX+1];        /* bit length count table */

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#250: FILE: lib/zlib_inflate/inftrees.c:129:
+  static struct inflate_huft_s r; /* table entry for structure assignment */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#251: FILE: lib/zlib_inflate/inftrees.c:130:
+  static inflate_huft *u[BMAX]; /* table stack */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#254: FILE: lib/zlib_inflate/inftrees.c:132:
+  static uInt x[BMAX+1];        /* bit offsets, then code stack */$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#254: FILE: lib/zlib_inflate/inftrees.c:132:
+  static uInt x[BMAX+1];        /* bit offsets, then code stack */
                     ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#266: FILE: lib/zlib_inflate/inftrees.c:314:
+  spin_lock(&inflate_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#268: FILE: lib/zlib_inflate/inftrees.c:316:
+  spin_unlock(&inflate_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#277: FILE: lib/zlib_inflate/inftrees.c:348:
+  spin_lock(&inflate_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#279: FILE: lib/zlib_inflate/inftrees.c:350:
+  spin_unlock(&inflate_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#288: FILE: lib/zlib_inflate/inftrees.c:365:
+  spin_lock(&inflate_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#290: FILE: lib/zlib_inflate/inftrees.c:367:
+  spin_unlock(&inflate_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#302: FILE: lib/zlib_inflate/inftrees.c:404:
+  int i;                       /* temporary variable */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#303: FILE: lib/zlib_inflate/inftrees.c:405:
+  static unsigned l[288];      /* length list for huft_build */$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#303: FILE: lib/zlib_inflate/inftrees.c:405:
+  static unsigned l[288];      /* length list for huft_build */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#304: FILE: lib/zlib_inflate/inftrees.c:406:
+  uInt *v;                     /* work area for huft_build */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#306: FILE: lib/zlib_inflate/inftrees.c:408:
+  spin_lock(&inflate_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#315: FILE: lib/zlib_inflate/inftrees.c:421:
+  if ((i = huft_build(l, 288, 257, cplens, cplext, tl, bl, hp,  &i, v)) != 0) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#315: FILE: lib/zlib_inflate/inftrees.c:421:
+  if ((i = huft_build(l, 288, 257, cplens, cplext, tl, bl, hp,  &i, v)) != 0) {
+    spin_unlock(&inflate_lock);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#315: FILE: lib/zlib_inflate/inftrees.c:421:
+  if ((i = huft_build(l, 288, 257, cplens, cplext, tl, bl, hp,  &i, v)) != 0) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#316: FILE: lib/zlib_inflate/inftrees.c:422:
+    spin_unlock(&inflate_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#318: FILE: lib/zlib_inflate/inftrees.c:424:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#325: FILE: lib/zlib_inflate/inftrees.c:430:
+  if ((i = huft_build(l, 30, 0, cpdist, cpdext, td, bd, hp, &i, v)) > 1) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#325: FILE: lib/zlib_inflate/inftrees.c:430:
+  if ((i = huft_build(l, 30, 0, cpdist, cpdext, td, bd, hp, &i, v)) > 1) {
+    spin_unlock(&inflate_lock);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#325: FILE: lib/zlib_inflate/inftrees.c:430:
+  if ((i = huft_build(l, 30, 0, cpdist, cpdext, td, bd, hp, &i, v)) > 1) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#326: FILE: lib/zlib_inflate/inftrees.c:431:
+    spin_unlock(&inflate_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#328: FILE: lib/zlib_inflate/inftrees.c:433:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#330: FILE: lib/zlib_inflate/inftrees.c:435:
+  spin_unlock(&inflate_lock);$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000144961.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 8 errors, 40 warnings, 5 checks, 223 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000144961.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
