WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#22: 
diff -Nru a/drivers/pci/hotplug/cpqphp_hpc.c b/drivers/pci/hotplug/cpqphp_hpc.c

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#23: 
--- a/drivers/pci/hotplug/cpqphp_hpc.c	1969-12-31 16:00:00.000000000 -0800

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#26: FILE: drivers/pci/hotplug/cpqphp_hpc.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#45: FILE: drivers/pci/hotplug/cpqphp_hpc.c:20:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#46: FILE: drivers/pci/hotplug/cpqphp_hpc.c:21:
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

WARNING:TYPECAST_INT_CONSTANT: Unnecessary typecast of c90 int constant - '(unsigned int)0x00000001' could be '0x00000001U'
#66: FILE: drivers/pci/hotplug/cpqphp_hpc.c:41:
+#define DBG_K_TRACE_ENTRY      ((unsigned int)0x00000001)	/* On function entry */

WARNING:TYPECAST_INT_CONSTANT: Unnecessary typecast of c90 int constant - '(unsigned int)0x00000002' could be '0x00000002U'
#67: FILE: drivers/pci/hotplug/cpqphp_hpc.c:42:
+#define DBG_K_TRACE_EXIT       ((unsigned int)0x00000002)	/* On function exit */

WARNING:TYPECAST_INT_CONSTANT: Unnecessary typecast of c90 int constant - '(unsigned int)0x00000004' could be '0x00000004U'
#68: FILE: drivers/pci/hotplug/cpqphp_hpc.c:43:
+#define DBG_K_INFO             ((unsigned int)0x00000004)	/* Info messages */

WARNING:TYPECAST_INT_CONSTANT: Unnecessary typecast of c90 int constant - '(unsigned int)0x00000008' could be '0x00000008U'
#69: FILE: drivers/pci/hotplug/cpqphp_hpc.c:44:
+#define DBG_K_ERROR            ((unsigned int)0x00000008)	/* Error messages */

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#70: FILE: drivers/pci/hotplug/cpqphp_hpc.c:45:
+#define DBG_K_TRACE            (DBG_K_TRACE_ENTRY|DBG_K_TRACE_EXIT)
                                                  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#71: FILE: drivers/pci/hotplug/cpqphp_hpc.c:46:
+#define DBG_K_STANDARD         (DBG_K_INFO|DBG_K_ERROR|DBG_K_TRACE)
                                           ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#71: FILE: drivers/pci/hotplug/cpqphp_hpc.c:46:
+#define DBG_K_STANDARD         (DBG_K_INFO|DBG_K_ERROR|DBG_K_TRACE)
                                                       ^

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#75: FILE: drivers/pci/hotplug/cpqphp_hpc.c:50:
+#define DEFINE_DBG_BUFFER     char __dbg_str_buf[256];

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:SPACING: space prohibited after that open parenthesis '('
#77: FILE: drivers/pci/hotplug/cpqphp_hpc.c:52:
+#define DBG_PRINT( dbg_flags, args... )                  \

ERROR:SPACING: space prohibited before that close parenthesis ')'
#77: FILE: drivers/pci/hotplug/cpqphp_hpc.c:52:
+#define DBG_PRINT( dbg_flags, args... )                  \

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#78: FILE: drivers/pci/hotplug/cpqphp_hpc.c:53:
+	do {                                             \
+	  if ( DEBUG_LEVEL & ( dbg_flags ) )             \

WARNING:TABSTOP: Statements should start on a tabstop
#79: FILE: drivers/pci/hotplug/cpqphp_hpc.c:54:
+	  if ( DEBUG_LEVEL & ( dbg_flags ) )             \

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#79: FILE: drivers/pci/hotplug/cpqphp_hpc.c:54:
+	  if ( DEBUG_LEVEL & ( dbg_flags ) )             \
+	  {                                              \

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 10)
#79: FILE: drivers/pci/hotplug/cpqphp_hpc.c:54:
+	  if ( DEBUG_LEVEL & ( dbg_flags ) )             \
+	  {                                              \

ERROR:SPACING: space prohibited after that open parenthesis '('
#79: FILE: drivers/pci/hotplug/cpqphp_hpc.c:54:
+	  if ( DEBUG_LEVEL & ( dbg_flags ) )             \

ERROR:SPACING: space prohibited before that close parenthesis ')'
#79: FILE: drivers/pci/hotplug/cpqphp_hpc.c:54:
+	  if ( DEBUG_LEVEL & ( dbg_flags ) )             \

WARNING:TABSTOP: Statements should start on a tabstop
#81: FILE: drivers/pci/hotplug/cpqphp_hpc.c:56:
+	    int len;                                     \

ERROR:SPACING: space prohibited after that open parenthesis '('
#82: FILE: drivers/pci/hotplug/cpqphp_hpc.c:57:
+	    len = sprintf( __dbg_str_buf, "%s:%d: %s: ", \

ERROR:SPACING: space prohibited before that close parenthesis ')'
#83: FILE: drivers/pci/hotplug/cpqphp_hpc.c:58:
+		  __FILE__, __LINE__, __FUNCTION__ );    \

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#83: FILE: drivers/pci/hotplug/cpqphp_hpc.c:58:
+		  __FILE__, __LINE__, __FUNCTION__ );    \

ERROR:SPACING: space prohibited after that open parenthesis '('
#84: FILE: drivers/pci/hotplug/cpqphp_hpc.c:59:
+	    sprintf( __dbg_str_buf + len, args );        \

ERROR:SPACING: space prohibited before that close parenthesis ')'
#84: FILE: drivers/pci/hotplug/cpqphp_hpc.c:59:
+	    sprintf( __dbg_str_buf + len, args );        \

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#85: FILE: drivers/pci/hotplug/cpqphp_hpc.c:60:
+	    printk( KERN_NOTICE "%s\n", __dbg_str_buf ); \

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#85: FILE: drivers/pci/hotplug/cpqphp_hpc.c:60:
+	    printk( KERN_NOTICE "%s\n", __dbg_str_buf ); \

ERROR:SPACING: space prohibited after that open parenthesis '('
#85: FILE: drivers/pci/hotplug/cpqphp_hpc.c:60:
+	    printk( KERN_NOTICE "%s\n", __dbg_str_buf ); \

ERROR:SPACING: space prohibited before that close parenthesis ')'
#85: FILE: drivers/pci/hotplug/cpqphp_hpc.c:60:
+	    printk( KERN_NOTICE "%s\n", __dbg_str_buf ); \

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#89: FILE: drivers/pci/hotplug/cpqphp_hpc.c:64:
+#define DBG_ENTER_ROUTINE	DBG_PRINT (DBG_K_TRACE_ENTRY, "%s", "[Entry]");

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#89: FILE: drivers/pci/hotplug/cpqphp_hpc.c:64:
+#define DBG_ENTER_ROUTINE	DBG_PRINT (DBG_K_TRACE_ENTRY, "%s", "[Entry]");

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#89: FILE: drivers/pci/hotplug/cpqphp_hpc.c:64:
+#define DBG_ENTER_ROUTINE	DBG_PRINT (DBG_K_TRACE_ENTRY, "%s", "[Entry]");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#90: FILE: drivers/pci/hotplug/cpqphp_hpc.c:65:
+#define DBG_LEAVE_ROUTINE	DBG_PRINT (DBG_K_TRACE_EXIT, "%s", "[Exit]");

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#90: FILE: drivers/pci/hotplug/cpqphp_hpc.c:65:
+#define DBG_LEAVE_ROUTINE	DBG_PRINT (DBG_K_TRACE_EXIT, "%s", "[Exit]");

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#90: FILE: drivers/pci/hotplug/cpqphp_hpc.c:65:
+#define DBG_LEAVE_ROUTINE	DBG_PRINT (DBG_K_TRACE_EXIT, "%s", "[Exit]");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#98: FILE: drivers/pci/hotplug/cpqphp_hpc.c:73:
+^Iu8 slot_RST;^I^I/* 0x00 */^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#126: FILE: drivers/pci/hotplug/cpqphp_hpc.c:101:
+} __attribute__ ((packed));

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#130: FILE: drivers/pci/hotplug/cpqphp_hpc.c:105:
+^ISLOT_RST = ^I^Ioffsetof(struct ctrl_reg, slot_RST),$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#135: FILE: drivers/pci/hotplug/cpqphp_hpc.c:110:
+^IINT_MASK = ^I^Ioffsetof(struct ctrl_reg, int_mask),$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#136: FILE: drivers/pci/hotplug/cpqphp_hpc.c:111:
+^ICTRL_RESERVED0 = ^Ioffsetof(struct ctrl_reg, reserved0),$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#139: FILE: drivers/pci/hotplug/cpqphp_hpc.c:114:
+^IGEN_OUTPUT_AB = ^Ioffsetof(struct ctrl_reg, gen_output_AB),$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#140: FILE: drivers/pci/hotplug/cpqphp_hpc.c:115:
+^INON_INT_INPUT = ^Ioffsetof(struct ctrl_reg, non_int_input),$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#147: FILE: drivers/pci/hotplug/cpqphp_hpc.c:122:
+^ISLOT_MASK = ^I^Ioffsetof(struct ctrl_reg, slot_mask),$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#148: FILE: drivers/pci/hotplug/cpqphp_hpc.c:123:
+^ICTRL_RESERVED9 = ^Ioffsetof(struct ctrl_reg, reserved9),$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#159: FILE: drivers/pci/hotplug/cpqphp_hpc.c:134:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#183: FILE: drivers/pci/hotplug/cpqphp_hpc.c:158:
+
+

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#184: FILE: drivers/pci/hotplug/cpqphp_hpc.c:159:
+spinlock_t hpc_event_lock;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#187: FILE: drivers/pci/hotplug/cpqphp_hpc.c:162:
+static struct php_ctlr_state_s *php_ctlr_list_head = 0;	/* HPC state linked list */

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#188: FILE: drivers/pci/hotplug/cpqphp_hpc.c:163:
+static int ctlr_seq_num = 0;	/* Controller sequenc # */

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#202: FILE: drivers/pci/hotplug/cpqphp_hpc.c:177:
+static void cpqhpc_set_SOGO (struct slot *slot)

CHECK:SPACING: No space is necessary after a cast
#204: FILE: drivers/pci/hotplug/cpqphp_hpc.c:179:
+	struct php_ctlr_state_s *php_ctlr = (struct php_ctlr_state_s *) slot->ctrl->hpc_ctlr_handle;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#212: FILE: drivers/pci/hotplug/cpqphp_hpc.c:187:
+static int cpqhpc_wait_for_SOBS (struct slot *slot)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#217: FILE: drivers/pci/hotplug/cpqphp_hpc.c:192:
+^IDBG_ENTER_ROUTINE $

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#217: FILE: drivers/pci/hotplug/cpqphp_hpc.c:192:
+	DBG_ENTER_ROUTINE 

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#221: FILE: drivers/pci/hotplug/cpqphp_hpc.c:196:
+	schedule_timeout(2*HZ);
 	                  ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#227: FILE: drivers/pci/hotplug/cpqphp_hpc.c:202:
+^IDBG_LEAVE_ROUTINE $

CHECK:SPACING: No space is necessary after a cast
#239: FILE: drivers/pci/hotplug/cpqphp_hpc.c:214:
+	struct php_ctlr_state_s *php_ctlr = (struct php_ctlr_state_s *) slot->ctrl->hpc_ctlr_handle;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#242: FILE: drivers/pci/hotplug/cpqphp_hpc.c:217:
+^IDBG_ENTER_ROUTINE $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#248: FILE: drivers/pci/hotplug/cpqphp_hpc.c:223:
+^IDBG_LEAVE_ROUTINE $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#252: FILE: drivers/pci/hotplug/cpqphp_hpc.c:227:
+static int hpc_get_power_status(struct slot * slot, u8 *status)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#254: FILE: drivers/pci/hotplug/cpqphp_hpc.c:229:
+	struct php_ctlr_state_s *php_ctlr = (struct php_ctlr_state_s *) slot->ctrl->hpc_ctlr_handle;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#257: FILE: drivers/pci/hotplug/cpqphp_hpc.c:232:
+^IDBG_ENTER_ROUTINE $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#263: FILE: drivers/pci/hotplug/cpqphp_hpc.c:238:
+^IDBG_LEAVE_ROUTINE $

CHECK:SPACING: No space is necessary after a cast
#269: FILE: drivers/pci/hotplug/cpqphp_hpc.c:244:
+	struct php_ctlr_state_s *php_ctlr = (struct php_ctlr_state_s *) slot->ctrl->hpc_ctlr_handle;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#272: FILE: drivers/pci/hotplug/cpqphp_hpc.c:247:
+^IDBG_ENTER_ROUTINE $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#277: FILE: drivers/pci/hotplug/cpqphp_hpc.c:252:
+^IDBG_LEAVE_ROUTINE $

CHECK:SPACING: No space is necessary after a cast
#285: FILE: drivers/pci/hotplug/cpqphp_hpc.c:260:
+	struct php_ctlr_state_s *php_ctlr = (struct php_ctlr_state_s *) slot->ctrl->hpc_ctlr_handle;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#287: FILE: drivers/pci/hotplug/cpqphp_hpc.c:262:
+^IDBG_ENTER_ROUTINE $

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#290: FILE: drivers/pci/hotplug/cpqphp_hpc.c:265:
+	presence_save = (u8) ((((~tempdword) >> 23) | ((~tempdword) >> 15)) >> slot->hp_slot) & 0x02;

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: No space is necessary after a cast
#290: FILE: drivers/pci/hotplug/cpqphp_hpc.c:265:
+	presence_save = (u8) ((((~tempdword) >> 23) | ((~tempdword) >> 15)) >> slot->hp_slot) & 0x02;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#294: FILE: drivers/pci/hotplug/cpqphp_hpc.c:269:
+^IDBG_LEAVE_ROUTINE $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#298: FILE: drivers/pci/hotplug/cpqphp_hpc.c:273:
+static int hpc_query_power_fault(struct slot * slot)

CHECK:SPACING: No space is necessary after a cast
#301: FILE: drivers/pci/hotplug/cpqphp_hpc.c:276:
+	struct php_ctlr_state_s *php_ctlr = (struct php_ctlr_state_s *) slot->ctrl->hpc_ctlr_handle;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#304: FILE: drivers/pci/hotplug/cpqphp_hpc.c:279:
+^IDBG_ENTER_ROUTINE $

CHECK:SPACING: No space is necessary after a cast
#320: FILE: drivers/pci/hotplug/cpqphp_hpc.c:295:
+	struct php_ctlr_state_s *php_ctlr =(struct php_ctlr_state_s *) slot->ctrl->hpc_ctlr_handle;

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#320: FILE: drivers/pci/hotplug/cpqphp_hpc.c:295:
+	struct php_ctlr_state_s *php_ctlr =(struct php_ctlr_state_s *) slot->ctrl->hpc_ctlr_handle;
 	                                  ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#322: FILE: drivers/pci/hotplug/cpqphp_hpc.c:297:
+^I$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#337: FILE: drivers/pci/hotplug/cpqphp_hpc.c:312:
+static void hpc_green_led_on(struct slot * slot)

CHECK:SPACING: No space is necessary after a cast
#339: FILE: drivers/pci/hotplug/cpqphp_hpc.c:314:
+	struct php_ctlr_state_s *php_ctlr = (struct php_ctlr_state_s *) slot->ctrl->hpc_ctlr_handle;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#341: FILE: drivers/pci/hotplug/cpqphp_hpc.c:316:
+^I$

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#346: FILE: drivers/pci/hotplug/cpqphp_hpc.c:321:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#348: FILE: drivers/pci/hotplug/cpqphp_hpc.c:323:
+static void hpc_green_led_off(struct slot * slot)

CHECK:SPACING: No space is necessary after a cast
#350: FILE: drivers/pci/hotplug/cpqphp_hpc.c:325:
+	struct php_ctlr_state_s *php_ctlr = (struct php_ctlr_state_s *) slot->ctrl->hpc_ctlr_handle;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#352: FILE: drivers/pci/hotplug/cpqphp_hpc.c:327:
+^I$

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#357: FILE: drivers/pci/hotplug/cpqphp_hpc.c:332:
+
+}

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#359: FILE: drivers/pci/hotplug/cpqphp_hpc.c:334:
+static void hpc_green_led_blink(struct slot * slot)

CHECK:SPACING: No space is necessary after a cast
#361: FILE: drivers/pci/hotplug/cpqphp_hpc.c:336:
+	struct php_ctlr_state_s *php_ctlr = (struct php_ctlr_state_s *) slot->ctrl->hpc_ctlr_handle;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#363: FILE: drivers/pci/hotplug/cpqphp_hpc.c:338:
+^I$

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#369: FILE: drivers/pci/hotplug/cpqphp_hpc.c:344:
+
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#376: FILE: drivers/pci/hotplug/cpqphp_hpc.c:351:
+int phphpc_get_ctlr_slot_config(struct controller *ctrl,
+	int *num_ctlr_slots,	/* number of slots in this HPC			*/

WARNING:TYPO_SPELLING: 'increament' may be misspelled - perhaps 'increment'?
#379: FILE: drivers/pci/hotplug/cpqphp_hpc.c:354:
+	int *updown,		/* physical_slot_num increament: 1 or -1	*/
 	            		                     ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:LINE_SPACING: Missing a blank line after declarations
#380: FILE: drivers/pci/hotplug/cpqphp_hpc.c:355:
+	int *updown,		/* physical_slot_num increament: 1 or -1	*/
+	int *flags)

CHECK:SPACING: No space is necessary after a cast
#382: FILE: drivers/pci/hotplug/cpqphp_hpc.c:357:
+	struct php_ctlr_state_s *php_ctlr = (struct php_ctlr_state_s *) ctrl->hpc_ctlr_handle;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#384: FILE: drivers/pci/hotplug/cpqphp_hpc.c:359:
+^IDBG_ENTER_ROUTINE $

ERROR:SPACING: space prohibited after that '*' (ctx:ExW)
#386: FILE: drivers/pci/hotplug/cpqphp_hpc.c:361:
+	* first_device_num = php_ctlr->first_device_num;
 	^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#394: FILE: drivers/pci/hotplug/cpqphp_hpc.c:369:
+^IDBG_LEAVE_ROUTINE $

CHECK:SPACING: No space is necessary after a cast
#400: FILE: drivers/pci/hotplug/cpqphp_hpc.c:375:
+	struct php_ctlr_state_s *php_ctlr = (struct php_ctlr_state_s *) ctrl->hpc_ctlr_handle;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#403: FILE: drivers/pci/hotplug/cpqphp_hpc.c:378:
+^IDBG_ENTER_ROUTINE $

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#403: FILE: drivers/pci/hotplug/cpqphp_hpc.c:378:
+	DBG_ENTER_ROUTINE 
+
+	if (php_ctlr->irq) {

CHECK:SPACING: No space is necessary after a cast
#411: FILE: drivers/pci/hotplug/cpqphp_hpc.c:386:
+		iounmap((void *) pci_resource_start(php_ctlr->pci_dev, 0));

WARNING:LONG_LINE: line length of 117 exceeds 100 columns
#412: FILE: drivers/pci/hotplug/cpqphp_hpc.c:387:
+		release_mem_region(pci_resource_start(php_ctlr->pci_dev, 0), pci_resource_len(php_ctlr->pci_dev, 0));

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#425: FILE: drivers/pci/hotplug/cpqphp_hpc.c:400:
+			break;
+		} else {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#436: FILE: drivers/pci/hotplug/cpqphp_hpc.c:411:
+static int hpc_power_on_slot(struct slot * slot)

CHECK:SPACING: No space is necessary after a cast
#438: FILE: drivers/pci/hotplug/cpqphp_hpc.c:413:
+	struct php_ctlr_state_s *php_ctlr = (struct php_ctlr_state_s *) slot->ctrl->hpc_ctlr_handle;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#441: FILE: drivers/pci/hotplug/cpqphp_hpc.c:416:
+^IDBG_ENTER_ROUTINE $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#451: FILE: drivers/pci/hotplug/cpqphp_hpc.c:426:
+static int hpc_power_off_slot(struct slot * slot)

CHECK:SPACING: No space is necessary after a cast
#453: FILE: drivers/pci/hotplug/cpqphp_hpc.c:428:
+	struct php_ctlr_state_s *php_ctlr = (struct php_ctlr_state_s *) slot->ctrl->hpc_ctlr_handle;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#456: FILE: drivers/pci/hotplug/cpqphp_hpc.c:431:
+^IDBG_ENTER_ROUTINE $

CHECK:SPACING: No space is necessary after a cast
#469: FILE: drivers/pci/hotplug/cpqphp_hpc.c:444:
+	struct php_ctlr_state_s *php_ctlr = (struct php_ctlr_state_s *) slot->ctrl->hpc_ctlr_handle;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#473: FILE: drivers/pci/hotplug/cpqphp_hpc.c:448:
+^IDBG_ENTER_ROUTINE $

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#473: FILE: drivers/pci/hotplug/cpqphp_hpc.c:448:
+	DBG_ENTER_ROUTINE 
+
+	if (php_ctlr->creg) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#477: FILE: drivers/pci/hotplug/cpqphp_hpc.c:452:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#480: FILE: drivers/pci/hotplug/cpqphp_hpc.c:455:
+^I^I^I$

CHECK:SPACING: No space is necessary after a cast
#491: FILE: drivers/pci/hotplug/cpqphp_hpc.c:466:
+	struct php_ctlr_state_s *php_ctlr = (struct php_ctlr_state_s *) slot->ctrl->hpc_ctlr_handle;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#495: FILE: drivers/pci/hotplug/cpqphp_hpc.c:470:
+^IDBG_ENTER_ROUTINE $

CHECK:CAMELCASE: Avoid CamelCase: <Diff>
#517: FILE: drivers/pci/hotplug/cpqphp_hpc.c:492:
+	u32 Diff;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#522: FILE: drivers/pci/hotplug/cpqphp_hpc.c:497:
+	if (!ctrl || !(php_ctlr = ctrl->hpc_ctlr_handle) || !php_ctlr->creg)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:LONG_LINE_COMMENT: line length of 106 exceeds 100 columns
#550: FILE: drivers/pci/hotplug/cpqphp_hpc.c:525:
+			writel(0xFFFFFFFF, php_ctlr->creg + INT_INPUT_CLEAR);	/* Clear all interrupts */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#553: FILE: drivers/pci/hotplug/cpqphp_hpc.c:528:
+			schedule_flag += php_ctlr->switch_change_callback(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#556: FILE: drivers/pci/hotplug/cpqphp_hpc.c:531:
+			schedule_flag += php_ctlr->presence_change_callback(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#559: FILE: drivers/pci/hotplug/cpqphp_hpc.c:534:
+			schedule_flag += php_ctlr->power_fault_callback(

ERROR:TRAILING_WHITESPACE: trailing whitespace
#563: FILE: drivers/pci/hotplug/cpqphp_hpc.c:538:
+^I/* Setting bus speed is applicable only to Compaq HPC with rev >= 0x13 $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#564: FILE: drivers/pci/hotplug/cpqphp_hpc.c:539:
+^I * or with subsystem_device == PCI_SUB_HPC_ID4 $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#566: FILE: drivers/pci/hotplug/cpqphp_hpc.c:541:
+^Iif ((ctrl->pci_dev->subsystem_vendor == PCI_VENDOR_ID_COMPAQ) && $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ctrl->pci_dev->subsystem_vendor == PCI_VENDOR_ID_COMPAQ'
#566: FILE: drivers/pci/hotplug/cpqphp_hpc.c:541:
+	if ((ctrl->pci_dev->subsystem_vendor == PCI_VENDOR_ID_COMPAQ) && 
+		((ctrl->rev >= 0x13) || (ctrl->pci_dev->subsystem_device == PCI_SUB_HPC_ID4))) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ctrl->rev >= 0x13'
#566: FILE: drivers/pci/hotplug/cpqphp_hpc.c:541:
+	if ((ctrl->pci_dev->subsystem_vendor == PCI_VENDOR_ID_COMPAQ) && 
+		((ctrl->rev >= 0x13) || (ctrl->pci_dev->subsystem_device == PCI_SUB_HPC_ID4))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ctrl->pci_dev->subsystem_device == PCI_SUB_HPC_ID4'
#566: FILE: drivers/pci/hotplug/cpqphp_hpc.c:541:
+	if ((ctrl->pci_dev->subsystem_vendor == PCI_VENDOR_ID_COMPAQ) && 
+		((ctrl->rev >= 0x13) || (ctrl->pci_dev->subsystem_device == PCI_SUB_HPC_ID4))) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#567: FILE: drivers/pci/hotplug/cpqphp_hpc.c:542:
+	if ((ctrl->pci_dev->subsystem_vendor == PCI_VENDOR_ID_COMPAQ) && 
+		((ctrl->rev >= 0x13) || (ctrl->pci_dev->subsystem_device == PCI_SUB_HPC_ID4))) {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#580: FILE: drivers/pci/hotplug/cpqphp_hpc.c:555:
+int phphpc_get_ctrl_cap(struct controller *ctrl, u16 * pctlrcap, u8 * prev)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#580: FILE: drivers/pci/hotplug/cpqphp_hpc.c:555:
+int phphpc_get_ctrl_cap(struct controller *ctrl, u16 * pctlrcap, u8 * prev)

CHECK:SPACING: No space is necessary after a cast
#588: FILE: drivers/pci/hotplug/cpqphp_hpc.c:563:
+	struct php_ctlr_state_s *php_ctlr = (struct php_ctlr_state_s *) ctrl->hpc_ctlr_handle;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#590: FILE: drivers/pci/hotplug/cpqphp_hpc.c:565:
+^IDBG_ENTER_ROUTINE $

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#590: FILE: drivers/pci/hotplug/cpqphp_hpc.c:565:
+	DBG_ENTER_ROUTINE 
+
+	if (!ctrl->hpc_ctlr_handle) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'vendor_id != PCI_VENDOR_ID_COMPAQ'
#618: FILE: drivers/pci/hotplug/cpqphp_hpc.c:593:
+	if ((vendor_id != PCI_VENDOR_ID_COMPAQ) && (vendor_id != PCI_VENDOR_ID_INTEL)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'vendor_id != PCI_VENDOR_ID_INTEL'
#618: FILE: drivers/pci/hotplug/cpqphp_hpc.c:593:
+	if ((vendor_id != PCI_VENDOR_ID_COMPAQ) && (vendor_id != PCI_VENDOR_ID_INTEL)) {

WARNING:LONG_LINE: line length of 111 exceeds 100 columns
#619: FILE: drivers/pci/hotplug/cpqphp_hpc.c:594:
+		err ("%s: HPC controller(vendor=%x) not supported by this driver!\n", __FUNCTION__, vendor_id);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#619: FILE: drivers/pci/hotplug/cpqphp_hpc.c:594:
+		err ("%s: HPC controller(vendor=%x) not supported by this driver!\n", __FUNCTION__, vendor_id);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#619: FILE: drivers/pci/hotplug/cpqphp_hpc.c:594:
+		err ("%s: HPC controller(vendor=%x) not supported by this driver!\n", __FUNCTION__, vendor_id);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'vendor_id == PCI_VENDOR_ID_COMPAQ'
#625: FILE: drivers/pci/hotplug/cpqphp_hpc.c:600:
+	if (rc || ((vendor_id == PCI_VENDOR_ID_COMPAQ) && (!(*prev)))) {

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#626: FILE: drivers/pci/hotplug/cpqphp_hpc.c:601:
+		err("%s: Unsupported revision of HPC controller found!\n", __FUNCTION__);

WARNING:TYPO_SPELLING: 'subsytem' may be misspelled - perhaps 'subsystem'?
#631: FILE: drivers/pci/hotplug/cpqphp_hpc.c:606:
+	 *  Check for the proper subsytem ID's
 	                         ^^^^^^^^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'vendor_id == PCI_VENDOR_ID_INTEL'
#636: FILE: drivers/pci/hotplug/cpqphp_hpc.c:611:
+	if ((*prev > 2) || (vendor_id == PCI_VENDOR_ID_INTEL)) {

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#640: FILE: drivers/pci/hotplug/cpqphp_hpc.c:615:
+		if ((subsystem_vid != PCI_VENDOR_ID_COMPAQ) && (subsystem_vid != PCI_VENDOR_ID_INTEL)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'subsystem_vid != PCI_VENDOR_ID_COMPAQ'
#640: FILE: drivers/pci/hotplug/cpqphp_hpc.c:615:
+		if ((subsystem_vid != PCI_VENDOR_ID_COMPAQ) && (subsystem_vid != PCI_VENDOR_ID_INTEL)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'subsystem_vid != PCI_VENDOR_ID_INTEL'
#640: FILE: drivers/pci/hotplug/cpqphp_hpc.c:615:
+		if ((subsystem_vid != PCI_VENDOR_ID_COMPAQ) && (subsystem_vid != PCI_VENDOR_ID_INTEL)) {

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#641: FILE: drivers/pci/hotplug/cpqphp_hpc.c:616:
+			err("%s: HPC controller not supported by this driver!\n", __FUNCTION__);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#647: FILE: drivers/pci/hotplug/cpqphp_hpc.c:622:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#648: FILE: drivers/pci/hotplug/cpqphp_hpc.c:623:
+^I^I/* $

CHECK:BRACES: braces {} should be used on all arms of this statement
#664: FILE: drivers/pci/hotplug/cpqphp_hpc.c:639:
+		if (subsystem_vid == PCI_VENDOR_ID_COMPAQ) {
[...]
+		} else if (subsystem_vid == PCI_VENDOR_ID_INTEL) {
[...]
+		} else
[...]

ERROR:TRAILING_WHITESPACE: trailing whitespace
#665: FILE: drivers/pci/hotplug/cpqphp_hpc.c:640:
+^I^I^Iswitch ( *prev >= 0x13) { $

ERROR:SPACING: space prohibited after that open parenthesis '('
#665: FILE: drivers/pci/hotplug/cpqphp_hpc.c:640:
+			switch ( *prev >= 0x13) { 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#666: FILE: drivers/pci/hotplug/cpqphp_hpc.c:641:
+^I^I^Icase 0: $

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#682: FILE: drivers/pci/hotplug/cpqphp_hpc.c:657:
+					break;
+				} else {

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#683: FILE: drivers/pci/hotplug/cpqphp_hpc.c:658:
+					err("%s: unsupported Sub-Device ID: %x\n", __FUNCTION__, subsystem_did);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#683: FILE: drivers/pci/hotplug/cpqphp_hpc.c:658:
+					err("%s: unsupported Sub-Device ID: %x\n", __FUNCTION__, subsystem_did);

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#701: FILE: drivers/pci/hotplug/cpqphp_hpc.c:676:
+					break;
+				} else {

CHECK:BRACES: Unbalanced braces around else statement
#708: FILE: drivers/pci/hotplug/cpqphp_hpc.c:683:
+		} else

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#709: FILE: drivers/pci/hotplug/cpqphp_hpc.c:684:
+			err("%s: unsupported Sub-Vendor ID: %x\n", __FUNCTION__, subsystem_vid);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#716: FILE: drivers/pci/hotplug/cpqphp_hpc.c:691:
+^IDBG_LEAVE_ROUTINE $

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#720: FILE: drivers/pci/hotplug/cpqphp_hpc.c:695:
+static int hpc_get_max_bus_speed (struct slot *slot, enum pci_bus_speed *value)

CHECK:SPACING: No space is necessary after a cast
#723: FILE: drivers/pci/hotplug/cpqphp_hpc.c:698:
+	struct php_ctlr_state_s *php_ctlr = (struct php_ctlr_state_s *) slot->ctrl->hpc_ctlr_handle;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#725: FILE: drivers/pci/hotplug/cpqphp_hpc.c:700:
+^IDBG_ENTER_ROUTINE $

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#725: FILE: drivers/pci/hotplug/cpqphp_hpc.c:700:
+	DBG_ENTER_ROUTINE 
+	if (!slot->ctrl->hpc_ctlr_handle) {

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#727: FILE: drivers/pci/hotplug/cpqphp_hpc.c:702:
+		err("%s: Invalid HPC controller handle!\n", __FUNCTION__);

CHECK:CAMELCASE: Avoid CamelCase: <PCI_SPEED_133MHz_PCIX>
#735: FILE: drivers/pci/hotplug/cpqphp_hpc.c:710:
+			bus_speed = PCI_SPEED_133MHz_PCIX;

CHECK:CAMELCASE: Avoid CamelCase: <PCI_SPEED_66MHz_PCIX>
#738: FILE: drivers/pci/hotplug/cpqphp_hpc.c:713:
+				bus_speed = PCI_SPEED_66MHz_PCIX;

CHECK:CAMELCASE: Avoid CamelCase: <PCI_SPEED_100MHz_PCIX>
#740: FILE: drivers/pci/hotplug/cpqphp_hpc.c:715:
+				bus_speed = PCI_SPEED_100MHz_PCIX;

CHECK:CAMELCASE: Avoid CamelCase: <PCI_SPEED_66MHz>
#744: FILE: drivers/pci/hotplug/cpqphp_hpc.c:719:
+			bus_speed = PCI_SPEED_66MHz;

CHECK:CAMELCASE: Avoid CamelCase: <PCI_SPEED_33MHz>
#746: FILE: drivers/pci/hotplug/cpqphp_hpc.c:721:
+			bus_speed = PCI_SPEED_33MHz;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#752: FILE: drivers/pci/hotplug/cpqphp_hpc.c:727:
+^IDBG_LEAVE_ROUTINE $

CHECK:SPACING: No space is necessary after a cast
#762: FILE: drivers/pci/hotplug/cpqphp_hpc.c:737:
+	struct php_ctlr_state_s *php_ctlr = (struct php_ctlr_state_s *) slot->ctrl->hpc_ctlr_handle;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#764: FILE: drivers/pci/hotplug/cpqphp_hpc.c:739:
+^IDBG_ENTER_ROUTINE $

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#764: FILE: drivers/pci/hotplug/cpqphp_hpc.c:739:
+	DBG_ENTER_ROUTINE 
+	if (!slot->ctrl->hpc_ctlr_handle) {

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#766: FILE: drivers/pci/hotplug/cpqphp_hpc.c:741:
+		err("%s: Invalid HPC controller handle!\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#771: FILE: drivers/pci/hotplug/cpqphp_hpc.c:746:
+		err("%s: Invalid HPC slot number!\n", __FUNCTION__);

CHECK:CAMELCASE: Avoid CamelCase: <PCIXSupport>
#799: FILE: drivers/pci/hotplug/cpqphp_hpc.c:774:
+	if (php_ctlr->ctlrcap & PCIXSupport) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#830: FILE: drivers/pci/hotplug/cpqphp_hpc.c:805:
+^IDBG_LEAVE_ROUTINE $

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#834: FILE: drivers/pci/hotplug/cpqphp_hpc.c:809:
+static int hpc_get_cur_bus_speed (struct slot *slot, enum pci_bus_speed *value)

CHECK:SPACING: No space is necessary after a cast
#836: FILE: drivers/pci/hotplug/cpqphp_hpc.c:811:
+	struct php_ctlr_state_s *php_ctlr = (struct php_ctlr_state_s *) slot->ctrl->hpc_ctlr_handle;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#845: FILE: drivers/pci/hotplug/cpqphp_hpc.c:820:
+^IDBG_ENTER_ROUTINE $

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#845: FILE: drivers/pci/hotplug/cpqphp_hpc.c:820:
+	DBG_ENTER_ROUTINE 
+	if (!slot->ctrl->hpc_ctlr_handle || !php_ctlr->pci_dev) {

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#847: FILE: drivers/pci/hotplug/cpqphp_hpc.c:822:
+		err("%s: Invalid HPC controller handle!\n", __FUNCTION__);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'php_ctlr->pci_dev->vendor == PCI_VENDOR_ID_INTEL'
#853: FILE: drivers/pci/hotplug/cpqphp_hpc.c:828:
+	if ((php_ctlr->pci_dev->vendor == PCI_VENDOR_ID_INTEL) &&
+		(php_ctlr->pci_dev->device == PCI_INTC_P64H2_DID)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'php_ctlr->pci_dev->device == PCI_INTC_P64H2_DID'
#853: FILE: drivers/pci/hotplug/cpqphp_hpc.c:828:
+	if ((php_ctlr->pci_dev->vendor == PCI_VENDOR_ID_INTEL) &&
+		(php_ctlr->pci_dev->device == PCI_INTC_P64H2_DID)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#854: FILE: drivers/pci/hotplug/cpqphp_hpc.c:829:
+	if ((php_ctlr->pci_dev->vendor == PCI_VENDOR_ID_INTEL) &&
+		(php_ctlr->pci_dev->device == PCI_INTC_P64H2_DID)) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#855: FILE: drivers/pci/hotplug/cpqphp_hpc.c:830:
+		(php_ctlr->pci_dev->device == PCI_INTC_P64H2_DID)) {
+

WARNING:LONG_LINE: line length of 113 exceeds 100 columns
#860: FILE: drivers/pci/hotplug/cpqphp_hpc.c:835:
+		dev = pci_find_subsys(PCI_VENDOR_ID_INTEL, PCI_INTC_P64H2_HUB_PCI, PCI_ANY_ID, PCI_ANY_ID, NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dev"
#861: FILE: drivers/pci/hotplug/cpqphp_hpc.c:836:
+		if (dev == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "dev"
#864: FILE: drivers/pci/hotplug/cpqphp_hpc.c:839:
+		while (dev != NULL) {

WARNING:LONG_LINE: line length of 145 exceeds 100 columns
#867: FILE: drivers/pci/hotplug/cpqphp_hpc.c:842:
+			dbg("%s: bus=%x dev=%x, CNF=%x, BNUM=%x\n", __FUNCTION__, dev->bus->number, PCI_SLOT(dev->devfn), temp_word, temp_dword);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#867: FILE: drivers/pci/hotplug/cpqphp_hpc.c:842:
+			dbg("%s: bus=%x dev=%x, CNF=%x, BNUM=%x\n", __FUNCTION__, dev->bus->number, PCI_SLOT(dev->devfn), temp_word, temp_dword);

WARNING:LONG_LINE: line length of 120 exceeds 100 columns
#884: FILE: drivers/pci/hotplug/cpqphp_hpc.c:859:
+			dev = pci_find_subsys(PCI_VENDOR_ID_INTEL, PCI_INTC_P64H2_HUB_PCI, PCI_ANY_ID, PCI_ANY_ID, dev);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#888: FILE: drivers/pci/hotplug/cpqphp_hpc.c:863:
+^I^I^Iif ((ctrl->pci_dev->subsystem_vendor == PCI_VENDOR_ID_COMPAQ) && $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ctrl->pci_dev->subsystem_vendor == PCI_VENDOR_ID_COMPAQ'
#888: FILE: drivers/pci/hotplug/cpqphp_hpc.c:863:
+			if ((ctrl->pci_dev->subsystem_vendor == PCI_VENDOR_ID_COMPAQ) && 
+				((ctrl->rev >= 0x13) || (ctrl->pci_dev->subsystem_device == PCI_SUB_HPC_ID4))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ctrl->rev >= 0x13'
#888: FILE: drivers/pci/hotplug/cpqphp_hpc.c:863:
+			if ((ctrl->pci_dev->subsystem_vendor == PCI_VENDOR_ID_COMPAQ) && 
+				((ctrl->rev >= 0x13) || (ctrl->pci_dev->subsystem_device == PCI_SUB_HPC_ID4))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ctrl->pci_dev->subsystem_device == PCI_SUB_HPC_ID4'
#888: FILE: drivers/pci/hotplug/cpqphp_hpc.c:863:
+			if ((ctrl->pci_dev->subsystem_vendor == PCI_VENDOR_ID_COMPAQ) && 
+				((ctrl->rev >= 0x13) || (ctrl->pci_dev->subsystem_device == PCI_SUB_HPC_ID4))) {

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#889: FILE: drivers/pci/hotplug/cpqphp_hpc.c:864:
+				((ctrl->rev >= 0x13) || (ctrl->pci_dev->subsystem_device == PCI_SUB_HPC_ID4))) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#889: FILE: drivers/pci/hotplug/cpqphp_hpc.c:864:
+			if ((ctrl->pci_dev->subsystem_vendor == PCI_VENDOR_ID_COMPAQ) && 
+				((ctrl->rev >= 0x13) || (ctrl->pci_dev->subsystem_device == PCI_SUB_HPC_ID4))) {

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#900: FILE: drivers/pci/hotplug/cpqphp_hpc.c:875:
+				else bus_speed = PCI_SPEED_33MHz;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:LONG_LINE_COMMENT: line length of 105 exceeds 100 columns
#908: FILE: drivers/pci/hotplug/cpqphp_hpc.c:883:
+				if (pci_misc_config & 0x00200000) {	/* Bit 21 of PCI Misc. Config. */

WARNING:LONG_LINE_COMMENT: line length of 129 exceeds 100 columns
#909: FILE: drivers/pci/hotplug/cpqphp_hpc.c:884:
+					if (readw(php_ctlr->creg + MISC) & 0x8000) {	/* Bit 31 - 133 MHZ Prescale indicator */

CHECK:BRACES: braces {} should be used on all arms of this statement
#909: FILE: drivers/pci/hotplug/cpqphp_hpc.c:884:
+					if (readw(php_ctlr->creg + MISC) & 0x8000) {	/* Bit 31 - 133 MHZ Prescale indicator */
[...]
+					} else
[...]

WARNING:LONG_LINE_COMMENT: line length of 130 exceeds 100 columns
#910: FILE: drivers/pci/hotplug/cpqphp_hpc.c:885:
+						if (readw(php_ctlr->creg + MISC) & 0x0040)	/* Bit 22 - frequency range bit */

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#910: FILE: drivers/pci/hotplug/cpqphp_hpc.c:885:
+						if (readw(php_ctlr->creg + MISC) & 0x0040)	/* Bit 22 - frequency range bit */

Indentation with 6 or more tabs usually indicate overly indented
code.

It is suggested to refactor excessive indentation of
if/else/for/do/while/switch statements.

See: https://lore.kernel.org/lkml/1328311239.21255.24.camel@joe2Laptop/

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#912: FILE: drivers/pci/hotplug/cpqphp_hpc.c:887:
+						else

CHECK:BRACES: Unbalanced braces around else statement
#914: FILE: drivers/pci/hotplug/cpqphp_hpc.c:889:
+					} else

WARNING:LONG_LINE_COMMENT: line length of 127 exceeds 100 columns
#917: FILE: drivers/pci/hotplug/cpqphp_hpc.c:892:
+					if (readw(php_ctlr->creg + MISC) & 0x0800)	/* Bit 27 - 66MHZ Prescale indicator */

WARNING:LONG_LINE_COMMENT: line length of 111 exceeds 100 columns
#924: FILE: drivers/pci/hotplug/cpqphp_hpc.c:899:
+			if (readw(php_ctlr->creg + MISC) & 0x0800)	/* Bit 27 - 66MHZ Prescale indicator */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#933: FILE: drivers/pci/hotplug/cpqphp_hpc.c:908:
+^IDBG_LEAVE_ROUTINE $

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#937: FILE: drivers/pci/hotplug/cpqphp_hpc.c:912:
+static int hpc_set_controller_speed (struct slot *slot, enum pci_bus_speed value)

CHECK:SPACING: No space is necessary after a cast
#946: FILE: drivers/pci/hotplug/cpqphp_hpc.c:921:
+	struct php_ctlr_state_s *php_ctlr = (struct php_ctlr_state_s *) slot->ctrl->hpc_ctlr_handle;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#948: FILE: drivers/pci/hotplug/cpqphp_hpc.c:923:
+^IDBG_ENTER_ROUTINE $

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#948: FILE: drivers/pci/hotplug/cpqphp_hpc.c:923:
+	DBG_ENTER_ROUTINE 
+	if (!slot->ctrl->hpc_ctlr_handle) {

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#950: FILE: drivers/pci/hotplug/cpqphp_hpc.c:925:
+		err("%s: Invalid HPC controller handle!\n", __FUNCTION__);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#953: FILE: drivers/pci/hotplug/cpqphp_hpc.c:928:
+^I$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#961: FILE: drivers/pci/hotplug/cpqphp_hpc.c:936:
+	 * in another slot on this controller */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:SPACING: space required before the open parenthesis '('
#962: FILE: drivers/pci/hotplug/cpqphp_hpc.c:937:
+	for(p_slot = ctrl->slot; p_slot; p_slot = p_slot->next) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#963: FILE: drivers/pci/hotplug/cpqphp_hpc.c:938:
+^I^Iif (p_slot->device == (hp_slot + ctrl->slot_device_offset)) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#965: FILE: drivers/pci/hotplug/cpqphp_hpc.c:940:
+^I^Iif (!p_slot->hotplug_slot && !p_slot->hotplug_slot->info) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#967: FILE: drivers/pci/hotplug/cpqphp_hpc.c:942:
+^I^Iif (p_slot->hotplug_slot->info->adapter_status == 0) $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#971: FILE: drivers/pci/hotplug/cpqphp_hpc.c:946:
+		 * this rate if supported */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#972: FILE: drivers/pci/hotplug/cpqphp_hpc.c:947:
+^I^Iif (ctrl->speed < adapter_speed) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#977: FILE: drivers/pci/hotplug/cpqphp_hpc.c:952:
+^I$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#979: FILE: drivers/pci/hotplug/cpqphp_hpc.c:954:
+	 * controller */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#988: FILE: drivers/pci/hotplug/cpqphp_hpc.c:963:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#990: FILE: drivers/pci/hotplug/cpqphp_hpc.c:965:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#994: FILE: drivers/pci/hotplug/cpqphp_hpc.c:969:
+^I^Ireg = 0xF4;^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#996: FILE: drivers/pci/hotplug/cpqphp_hpc.c:971:
+^I$

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#999: FILE: drivers/pci/hotplug/cpqphp_hpc.c:974:
+	switch(adapter_speed) {
[...]
+		default: /* 33MHz PCI 2.2 */

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:SPACING: space required before the open parenthesis '('
#999: FILE: drivers/pci/hotplug/cpqphp_hpc.c:974:
+	switch(adapter_speed) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1000: FILE: drivers/pci/hotplug/cpqphp_hpc.c:975:
+^I^Icase(PCI_SPEED_133MHz_PCIX): $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1002: FILE: drivers/pci/hotplug/cpqphp_hpc.c:977:
+^I^I^Ireg16 |= 0xB; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1019: FILE: drivers/pci/hotplug/cpqphp_hpc.c:994:
+^I^I^I$

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1020: FILE: drivers/pci/hotplug/cpqphp_hpc.c:995:
+			
+	}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1023: FILE: drivers/pci/hotplug/cpqphp_hpc.c:998:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1024: FILE: drivers/pci/hotplug/cpqphp_hpc.c:999:
+^Imdelay(5); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1025: FILE: drivers/pci/hotplug/cpqphp_hpc.c:1000:
+^I$

WARNING:TYPO_SPELLING: 'Reenable' may be misspelled - perhaps 'Re-enable'?
#1026: FILE: drivers/pci/hotplug/cpqphp_hpc.c:1001:
+	/* Reenable interrupts */
 	   ^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1029: FILE: drivers/pci/hotplug/cpqphp_hpc.c:1004:
+^Ipci_write_config_byte(ctrl->pci_dev, 0x41, reg); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1030: FILE: drivers/pci/hotplug/cpqphp_hpc.c:1005:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1035: FILE: drivers/pci/hotplug/cpqphp_hpc.c:1010:
+^I$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ctrl->speed == PCI_SPEED_66MHz'
#1037: FILE: drivers/pci/hotplug/cpqphp_hpc.c:1012:
+	if (((ctrl->speed == PCI_SPEED_66MHz) && (adapter_speed == PCI_SPEED_66MHz_PCIX)) ||
+		((ctrl->speed == PCI_SPEED_66MHz_PCIX) && (adapter_speed == PCI_SPEED_66MHz))) 

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'adapter_speed == PCI_SPEED_66MHz_PCIX'
#1037: FILE: drivers/pci/hotplug/cpqphp_hpc.c:1012:
+	if (((ctrl->speed == PCI_SPEED_66MHz) && (adapter_speed == PCI_SPEED_66MHz_PCIX)) ||
+		((ctrl->speed == PCI_SPEED_66MHz_PCIX) && (adapter_speed == PCI_SPEED_66MHz))) 

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ctrl->speed == PCI_SPEED_66MHz_PCIX'
#1037: FILE: drivers/pci/hotplug/cpqphp_hpc.c:1012:
+	if (((ctrl->speed == PCI_SPEED_66MHz) && (adapter_speed == PCI_SPEED_66MHz_PCIX)) ||
+		((ctrl->speed == PCI_SPEED_66MHz_PCIX) && (adapter_speed == PCI_SPEED_66MHz))) 

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'adapter_speed == PCI_SPEED_66MHz'
#1037: FILE: drivers/pci/hotplug/cpqphp_hpc.c:1012:
+	if (((ctrl->speed == PCI_SPEED_66MHz) && (adapter_speed == PCI_SPEED_66MHz_PCIX)) ||
+		((ctrl->speed == PCI_SPEED_66MHz_PCIX) && (adapter_speed == PCI_SPEED_66MHz))) 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1038: FILE: drivers/pci/hotplug/cpqphp_hpc.c:1013:
+^I^I((ctrl->speed == PCI_SPEED_66MHz_PCIX) && (adapter_speed == PCI_SPEED_66MHz))) $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1038: FILE: drivers/pci/hotplug/cpqphp_hpc.c:1013:
+	if (((ctrl->speed == PCI_SPEED_66MHz) && (adapter_speed == PCI_SPEED_66MHz_PCIX)) ||
+		((ctrl->speed == PCI_SPEED_66MHz_PCIX) && (adapter_speed == PCI_SPEED_66MHz))) 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1039: FILE: drivers/pci/hotplug/cpqphp_hpc.c:1014:
+^I^Ihpc_update_hpc(slot);^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1042: FILE: drivers/pci/hotplug/cpqphp_hpc.c:1017:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1046: FILE: drivers/pci/hotplug/cpqphp_hpc.c:1021:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1052: FILE: drivers/pci/hotplug/cpqphp_hpc.c:1027:
+^Iinfo("Successfully changed frequency/mode for adapter in slot %d\n", $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1053: FILE: drivers/pci/hotplug/cpqphp_hpc.c:1028:
+	info("Successfully changed frequency/mode for adapter in slot %d\n", 
+			slot->number);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1082: FILE: drivers/pci/hotplug/cpqphp_hpc.c:1057:
+int phphpc_init(struct controller * ctrl,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1083: FILE: drivers/pci/hotplug/cpqphp_hpc.c:1058:
+		struct pci_dev * pdev,

CHECK:SPACING: No space is necessary after a cast
#1096: FILE: drivers/pci/hotplug/cpqphp_hpc.c:1071:
+	php_ctlr = (struct php_ctlr_state_s *) kmalloc(sizeof(struct php_ctlr_state_s), GFP_KERNEL);

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#1096: FILE: drivers/pci/hotplug/cpqphp_hpc.c:1071:
+	php_ctlr = (struct php_ctlr_state_s *) kmalloc(sizeof(struct php_ctlr_state_s), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*php_ctlr)...) over kmalloc(sizeof(struct php_ctlr_state_s)...)
#1096: FILE: drivers/pci/hotplug/cpqphp_hpc.c:1071:
+	php_ctlr = (struct php_ctlr_state_s *) kmalloc(sizeof(struct php_ctlr_state_s), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1099: FILE: drivers/pci/hotplug/cpqphp_hpc.c:1074:
+		err("%s: HPC controller memory allocation error!\n", __FUNCTION__);

WARNING:LONG_LINE: line length of 134 exceeds 100 columns
#1112: FILE: drivers/pci/hotplug/cpqphp_hpc.c:1087:
+	dbg("pdev = %p: b:d:f:irq=0x%x:%x:%x:%x\n", pdev, pdev->bus->number, PCI_SLOT(pdev->devfn), PCI_FUNC(pdev->devfn), pdev->irq);

ERROR:SPACING: space prohibited after that open parenthesis '('
#1113: FILE: drivers/pci/hotplug/cpqphp_hpc.c:1088:
+	for ( rc = 0; rc < DEVICE_COUNT_RESOURCE; rc++)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1116: FILE: drivers/pci/hotplug/cpqphp_hpc.c:1091:
+			dbg("pci resource[%d] start=0x%lx(len=0x%lx)\n", rc,
+				pci_resource_start(pdev, rc), pci_resource_len(pdev, rc));

WARNING:LONG_LINE: line length of 144 exceeds 100 columns
#1117: FILE: drivers/pci/hotplug/cpqphp_hpc.c:1092:
+	info("HPC vendor_id %x device_id %x ss_vid %x ss_did %x\n", pdev->vendor, pdev->device, pdev->subsystem_vendor, pdev->subsystem_device);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1120: FILE: drivers/pci/hotplug/cpqphp_hpc.c:1095:
+		err("%s: cannot reserve MMIO region\n", __FUNCTION__);

WARNING:LONG_LINE: line length of 134 exceeds 100 columns
#1127: FILE: drivers/pci/hotplug/cpqphp_hpc.c:1102:
+		err("%s: cannot remap MMIO region %lx @ %lx\n", __FUNCTION__, pci_resource_len(pdev, 0), pci_resource_start(pdev, 0));

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1127: FILE: drivers/pci/hotplug/cpqphp_hpc.c:1102:
+		err("%s: cannot remap MMIO region %lx @ %lx\n", __FUNCTION__, pci_resource_len(pdev, 0), pci_resource_start(pdev, 0));

CHECK:SPACING: No space is necessary after a cast
#1157: FILE: drivers/pci/hotplug/cpqphp_hpc.c:1132:
+	rc = request_irq(php_ctlr->irq, hpc_isr, SA_SHIRQ, MY_NAME, (void *) ctrl);

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#1158: FILE: drivers/pci/hotplug/cpqphp_hpc.c:1133:
+	dbg("%s: request_irq %d for hpc%d (returns %d)\n", __FUNCTION__, php_ctlr->irq, ctlr_seq_num, rc);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1158: FILE: drivers/pci/hotplug/cpqphp_hpc.c:1133:
+	dbg("%s: request_irq %d for hpc%d (returns %d)\n", __FUNCTION__, php_ctlr->irq, ctlr_seq_num, rc);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'php_ctlr->pci_dev->vendor == PCI_VENDOR_ID_INTEL'
#1160: FILE: drivers/pci/hotplug/cpqphp_hpc.c:1135:
+	if ((php_ctlr->pci_dev->vendor == PCI_VENDOR_ID_INTEL) &&
+		(php_ctlr->pci_dev->device == PCI_INTC_P64H2_DID)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'php_ctlr->pci_dev->device == PCI_INTC_P64H2_DID'
#1160: FILE: drivers/pci/hotplug/cpqphp_hpc.c:1135:
+	if ((php_ctlr->pci_dev->vendor == PCI_VENDOR_ID_INTEL) &&
+		(php_ctlr->pci_dev->device == PCI_INTC_P64H2_DID)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1161: FILE: drivers/pci/hotplug/cpqphp_hpc.c:1136:
+	if ((php_ctlr->pci_dev->vendor == PCI_VENDOR_ID_INTEL) &&
+		(php_ctlr->pci_dev->device == PCI_INTC_P64H2_DID)) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1188: FILE: drivers/pci/hotplug/cpqphp_hpc.c:1163:
+^Iwritel(0xFFFFFFFF, php_ctlr->creg + INT_INPUT_CLEAR);^I$

WARNING:TYPO_SPELLING: 'dependant' may be misspelled - perhaps 'dependent'?
#1281: FILE: drivers/pci/hotplug/cpqphp_pci.c:40:
+#include "../arch/i386/pci/pci.h"    /* horrible hack showing how processor dependant we are... */
                                                                             ^^^^^^^^^

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1291: FILE: drivers/pci/hotplug/cpqphp_pci.c:55:
+		dbg("%s: pci_dev still null. do pci_scan_slot\n", __FUNCTION__);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1303: FILE: drivers/pci/hotplug/cpqphp_pci.c:83:
+
+

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1309: FILE: drivers/pci/hotplug/cpqphp_pci.c:88:
+		if (temp) {
 			pci_remove_bus_device(temp);
+		}

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1322: FILE: drivers/pci/hotplug/cpqphp_pci.c:100:
+	rc = pci_bus_read_config_dword (bus, devfn, PCI_VENDOR_ID, &vendID);

CHECK:CAMELCASE: Avoid CamelCase: <vendID>
#1322: FILE: drivers/pci/hotplug/cpqphp_pci.c:100:
+	rc = pci_bus_read_config_dword (bus, devfn, PCI_VENDOR_ID, &vendID);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1332: FILE: drivers/pci/hotplug/cpqphp_pci.c:107:
+	rc = pci_bus_read_config_dword (bus, devfn, offset, value);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1379: FILE: drivers/pci/hotplug/cpqphp_pci.c:152:
+static int PCI_ScanBusForNonBridge(struct controller *ctrl, u8 * bus_num, u8 * dev_num)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1379: FILE: drivers/pci/hotplug/cpqphp_pci.c:152:
+static int PCI_ScanBusForNonBridge(struct controller *ctrl, u8 * bus_num, u8 * dev_num)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1395: FILE: drivers/pci/hotplug/cpqphp_pci.c:164:
+		if (PCI_RefinedAccessConfig (pci_bus, tdevice, 0x08, &work) == -1)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1410: FILE: drivers/pci/hotplug/cpqphp_pci.c:174:
+		if (PCI_RefinedAccessConfig (pci_bus, tdevice, 0x08, &work) == -1)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1424: FILE: drivers/pci/hotplug/cpqphp_pci.c:183:
+^I^I^Iif (PCI_ScanBusForNonBridge(ctrl, bus_num, dev_num) == 0)  $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1434: FILE: drivers/pci/hotplug/cpqphp_pci.c:191:
+static int PCI_GetBusDevHelper(struct controller *ctrl, u8 * bus_num, u8 * dev_num,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1434: FILE: drivers/pci/hotplug/cpqphp_pci.c:191:
+static int PCI_GetBusDevHelper(struct controller *ctrl, u8 * bus_num, u8 * dev_num,

WARNING:LINE_SPACING: Missing a blank line after declarations
#1443: FILE: drivers/pci/hotplug/cpqphp_pci.c:198:
+	struct pci_bus lpci_bus, *pci_bus;
+	memcpy(&lpci_bus, ctrl->pci_bus, sizeof(lpci_bus));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'work == 0xffffffff'
#1461: FILE: drivers/pci/hotplug/cpqphp_pci.c:212:
+		if (!nobridge || (work == 0xffffffff)) {

WARNING:LONG_LINE: line length of 113 exceeds 100 columns
#1462: FILE: drivers/pci/hotplug/cpqphp_pci.c:213:
+			dbg("GetBusDev: nodev bus %d dev %d func %d\n", *bus_num, *dev_num >> 3, *dev_num & 0x7);

CHECK:BRACES: braces {} should be used on all arms of this statement
#1512: FILE: drivers/pci/hotplug/cpqphp_pci.c:223:
+		if ((work >> 8) == PCI_TO_PCI_BRIDGE_CLASS) {
[...]
+				dbg("no Non Bridge under bus %d\n", tbus);
[...]

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#1521: FILE: drivers/pci/hotplug/cpqphp_pci.c:231:
+				return 0;
+			else

CHECK:BRACES: Unbalanced braces around else statement
#1523: FILE: drivers/pci/hotplug/cpqphp_pci.c:233:
+		} else

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1535: FILE: drivers/pci/hotplug/cpqphp_pci.c:241:
+int cpqhp_get_bus_dev (struct controller *ctrl, u8 * bus_num, u8 * dev_num, struct slot *slot)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1535: FILE: drivers/pci/hotplug/cpqphp_pci.c:241:
+int cpqhp_get_bus_dev (struct controller *ctrl, u8 * bus_num, u8 * dev_num, struct slot *slot)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1535: FILE: drivers/pci/hotplug/cpqphp_pci.c:241:
+int cpqhp_get_bus_dev (struct controller *ctrl, u8 * bus_num, u8 * dev_num, struct slot *slot)

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#1547: FILE: drivers/pci/hotplug/cpqphp_pci.c:259:
+int cpqhp_save_config(struct controller *ctrl, int busnumber, int num_ctlr_slots, int first_device_num)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1560: FILE: drivers/pci/hotplug/cpqphp_pci.c:279:
+	struct pci_bus lpci_bus, *pci_bus;
+	memcpy(&lpci_bus, ctrl->pci_bus, sizeof(lpci_bus));

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#1564: FILE: drivers/pci/hotplug/cpqphp_pci.c:282:
+	dbg("%s: num_ctlr_slots = %d, first_device_num = %d\n", __FUNCTION__, num_ctlr_slots, first_device_num);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1564: FILE: drivers/pci/hotplug/cpqphp_pci.c:282:
+	dbg("%s: num_ctlr_slots = %d, first_device_num = %d\n", __FUNCTION__, num_ctlr_slots, first_device_num);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1574: FILE: drivers/pci/hotplug/cpqphp_pci.c:287:
+		/*********************************
+		 is_hot_plug is the slot mask

CHECK:CAMELCASE: Avoid CamelCase: <FirstSupported>
#1576: FILE: drivers/pci/hotplug/cpqphp_pci.c:289:
+		FirstSupported = first_device_num;

CHECK:CAMELCASE: Avoid CamelCase: <LastSupported>
#1577: FILE: drivers/pci/hotplug/cpqphp_pci.c:290:
+		LastSupported = FirstSupported + num_ctlr_slots - 1;

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#1597: FILE: drivers/pci/hotplug/cpqphp_pci.c:305:
+			rc = pci_bus_read_config_byte(pci_bus, PCI_DEVFN(device, 0), 0x0B, &class_code);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1598: FILE: drivers/pci/hotplug/cpqphp_pci.c:306:
+^I^I^I$

WARNING:LONG_LINE: line length of 116 exceeds 100 columns
#1603: FILE: drivers/pci/hotplug/cpqphp_pci.c:310:
+			rc = pci_bus_read_config_byte(pci_bus, PCI_DEVFN(device, 0), PCI_HEADER_TYPE, &header_type);

WARNING:LONG_LINE_COMMENT: line length of 104 exceeds 100 columns
#1622: FILE: drivers/pci/hotplug/cpqphp_pci.c:327:
+				if ((header_type & 0x7F) == PCI_HEADER_TYPE_BRIDGE) {   /* P-P Bridge */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1624: FILE: drivers/pci/hotplug/cpqphp_pci.c:329:
+					/*  Recurse the subordinate bus
+					    get the subordinate bus number */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1624: FILE: drivers/pci/hotplug/cpqphp_pci.c:329:
+					    get the subordinate bus number */

WARNING:LONG_LINE: line length of 143 exceeds 100 columns
#1625: FILE: drivers/pci/hotplug/cpqphp_pci.c:330:
+					rc = pci_bus_read_config_byte(pci_bus, PCI_DEVFN(device, function), PCI_SECONDARY_BUS, &secondary_bus);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1635: FILE: drivers/pci/hotplug/cpqphp_pci.c:337:
+						/* Save secondary bus cfg spc
+						   with this recursive call. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1635: FILE: drivers/pci/hotplug/cpqphp_pci.c:337:
+						   with this recursive call. */

CHECK:SPACING: No space is necessary after a cast
#1651: FILE: drivers/pci/hotplug/cpqphp_pci.c:349:
+				while (new_slot && (new_slot->function != (u8) function)) {

WARNING:LONG_LINE: line length of 165 exceeds 100 columns
#1675: FILE: drivers/pci/hotplug/cpqphp_pci.c:373:
+					rc = pci_bus_read_config_dword(pci_bus, PCI_DEVFN(device, function), cloop << 2, (u32 *) & (new_slot->config_space [cloop]));

CHECK:SPACING: No space is necessary after a cast
#1675: FILE: drivers/pci/hotplug/cpqphp_pci.c:373:
+					rc = pci_bus_read_config_dword(pci_bus, PCI_DEVFN(device, function), cloop << 2, (u32 *) & (new_slot->config_space [cloop]));

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#1675: FILE: drivers/pci/hotplug/cpqphp_pci.c:373:
+					rc = pci_bus_read_config_dword(pci_bus, PCI_DEVFN(device, function), cloop << 2, (u32 *) & (new_slot->config_space [cloop]));

Whitespace before opening bracket '[' is prohibited.
There are some exceptions:

1. With a type on the left::

    int [] a;

2. At the beginning of a line for slice initialisers::

    [0...10] = 5,

3. Inside a curly brace::

    = { [0...10] = 5 }

ERROR:SPACING: space prohibited after that '&' (ctx:WxW)
#1675: FILE: drivers/pci/hotplug/cpqphp_pci.c:373:
+					rc = pci_bus_read_config_dword(pci_bus, PCI_DEVFN(device, function), cloop << 2, (u32 *) & (new_slot->config_space [cloop]));
 					                                                                                         ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around new_slot->config_space [cloop]
#1675: FILE: drivers/pci/hotplug/cpqphp_pci.c:373:
+					rc = pci_bus_read_config_dword(pci_bus, PCI_DEVFN(device, function), cloop << 2, (u32 *) & (new_slot->config_space [cloop]));

WARNING:LONG_LINE_COMMENT: line length of 124 exceeds 100 columns
#1677: FILE: drivers/pci/hotplug/cpqphp_pci.c:375:
+					/*dbg("new_slot->config_space[%x] = %x\n", cloop, new_slot->config_space[cloop]); */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1688: FILE: drivers/pci/hotplug/cpqphp_pci.c:385:
+				/*  this loop skips to the next present function
+				    reading in Class Code and Header type. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1688: FILE: drivers/pci/hotplug/cpqphp_pci.c:385:
+				    reading in Class Code and Header type. */

WARNING:LONG_LINE: line length of 129 exceeds 100 columns
#1693: FILE: drivers/pci/hotplug/cpqphp_pci.c:388:
+					rc = pci_bus_read_config_dword(pci_bus, PCI_DEVFN(device, function), PCI_VENDOR_ID, &ID);

WARNING:LONG_LINE: line length of 135 exceeds 100 columns
#1702: FILE: drivers/pci/hotplug/cpqphp_pci.c:395:
+						rc = pci_bus_read_config_byte(pci_bus, PCI_DEVFN(device, function), 0x0B, &class_code);

WARNING:LONG_LINE: line length of 147 exceeds 100 columns
#1707: FILE: drivers/pci/hotplug/cpqphp_pci.c:399:
+						rc = pci_bus_read_config_byte(pci_bus, PCI_DEVFN(device, function), PCI_HEADER_TYPE, &header_type);

WARNING:LONG_LINE: line length of 116 exceeds 100 columns
#1711: FILE: drivers/pci/hotplug/cpqphp_pci.c:403:
+						dbg("class_code = %x, header_type = %x\n", class_code, header_type);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1754: FILE: drivers/pci/hotplug/cpqphp_pci.c:453:
+	struct pci_bus lpci_bus, *pci_bus;
+	memcpy(&lpci_bus, ctrl->pci_bus, sizeof(lpci_bus));

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#1765: FILE: drivers/pci/hotplug/cpqphp_pci.c:462:
+		pci_bus_read_config_byte(pci_bus, PCI_DEVFN(new_slot->device, 0), 0x0B, &class_code);

WARNING:LONG_LINE: line length of 113 exceeds 100 columns
#1770: FILE: drivers/pci/hotplug/cpqphp_pci.c:464:
+		pci_bus_read_config_byte(pci_bus, PCI_DEVFN(new_slot->device, 0), PCI_HEADER_TYPE, &header_type);

WARNING:LONG_LINE_COMMENT: line length of 101 exceeds 100 columns
#1784: FILE: drivers/pci/hotplug/cpqphp_pci.c:474:
+			if ((header_type & 0x7F) == PCI_HEADER_TYPE_BRIDGE) {	 /* PCI-PCI Bridge */

WARNING:LONG_LINE: line length of 140 exceeds 100 columns
#1786: FILE: drivers/pci/hotplug/cpqphp_pci.c:476:
+				pci_bus_read_config_byte(pci_bus, PCI_DEVFN(new_slot->device, function), PCI_SECONDARY_BUS, &secondary_bus);

WARNING:LONG_LINE: line length of 162 exceeds 100 columns
#1806: FILE: drivers/pci/hotplug/cpqphp_pci.c:491:
+				pci_bus_read_config_dword(pci_bus, PCI_DEVFN(new_slot->device, function), cloop << 2, (u32 *) & (new_slot->config_space [cloop]));

CHECK:SPACING: No space is necessary after a cast
#1806: FILE: drivers/pci/hotplug/cpqphp_pci.c:491:
+				pci_bus_read_config_dword(pci_bus, PCI_DEVFN(new_slot->device, function), cloop << 2, (u32 *) & (new_slot->config_space [cloop]));

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#1806: FILE: drivers/pci/hotplug/cpqphp_pci.c:491:
+				pci_bus_read_config_dword(pci_bus, PCI_DEVFN(new_slot->device, function), cloop << 2, (u32 *) & (new_slot->config_space [cloop]));

ERROR:SPACING: space prohibited after that '&' (ctx:WxW)
#1806: FILE: drivers/pci/hotplug/cpqphp_pci.c:491:
+				pci_bus_read_config_dword(pci_bus, PCI_DEVFN(new_slot->device, function), cloop << 2, (u32 *) & (new_slot->config_space [cloop]));
 				                                                                                              ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around new_slot->config_space [cloop]
#1806: FILE: drivers/pci/hotplug/cpqphp_pci.c:491:
+				pci_bus_read_config_dword(pci_bus, PCI_DEVFN(new_slot->device, function), cloop << 2, (u32 *) & (new_slot->config_space [cloop]));

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1816: FILE: drivers/pci/hotplug/cpqphp_pci.c:499:
+			/*  this loop skips to the next present function
+			    reading in the Class Code and the Header type. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1816: FILE: drivers/pci/hotplug/cpqphp_pci.c:499:
+			    reading in the Class Code and the Header type. */

WARNING:LONG_LINE: line length of 126 exceeds 100 columns
#1820: FILE: drivers/pci/hotplug/cpqphp_pci.c:502:
+				pci_bus_read_config_dword(pci_bus, PCI_DEVFN(new_slot->device, function), PCI_VENDOR_ID, &ID);

WARNING:LONG_LINE: line length of 132 exceeds 100 columns
#1831: FILE: drivers/pci/hotplug/cpqphp_pci.c:507:
+					pci_bus_read_config_byte(pci_bus, PCI_DEVFN(new_slot->device, function), 0x0B, &class_code);

WARNING:LONG_LINE: line length of 144 exceeds 100 columns
#1832: FILE: drivers/pci/hotplug/cpqphp_pci.c:508:
+					pci_bus_read_config_byte(pci_bus, PCI_DEVFN(new_slot->device, function), PCI_HEADER_TYPE, &header_type);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1989: FILE: drivers/pci/hotplug/cpqphp_pci.c:535:
+int cpqhp_save_used_resources (struct controller *ctrl, struct pci_func *func, int disable)

WARNING:LINE_SPACING: Missing a blank line after declarations
#2019: FILE: drivers/pci/hotplug/cpqphp_pci.c:556:
+	struct pci_bus lpci_bus, *pci_bus;
+	memcpy(&lpci_bus, ctrl->pci_bus, sizeof(lpci_bus));

WARNING:LONG_LINE: line length of 121 exceeds 100 columns
#2053: FILE: drivers/pci/hotplug/cpqphp_pci.c:580:
+			dbg("Save_used_res of PCI bridge b:d=0x%x:%x, sc=0x%x\n", func->bus, func->device, save_command);

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#2057: FILE: drivers/pci/hotplug/cpqphp_pci.c:584:
+				pci_bus_write_config_word(pci_bus, devfn, PCI_BRIDGE_CONTROL, command);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2079: FILE: drivers/pci/hotplug/cpqphp_pci.c:601:
+			pci_bus_read_config_byte (pci_bus, devfn, PCI_IO_BASE, &temp_byte);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2081: FILE: drivers/pci/hotplug/cpqphp_pci.c:603:
+			pci_bus_read_config_byte (pci_bus, devfn, PCI_IO_LIMIT, &temp_byte);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'base <= length'
#2085: FILE: drivers/pci/hotplug/cpqphp_pci.c:606:
+			if ((base <= length) && (!disable || (save_command & PCI_COMMAND_IO))) {

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#2105: FILE: drivers/pci/hotplug/cpqphp_pci.c:622:
+			if ((w_base <= w_length) && (!disable || (save_command & PCI_COMMAND_MEMORY))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'w_base <= w_length'
#2105: FILE: drivers/pci/hotplug/cpqphp_pci.c:622:
+			if ((w_base <= w_length) && (!disable || (save_command & PCI_COMMAND_MEMORY))) {

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#2125: FILE: drivers/pci/hotplug/cpqphp_pci.c:637:
+			if ((w_base <= w_length) && (!disable || (save_command & PCI_COMMAND_MEMORY))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'w_base <= w_length'
#2125: FILE: drivers/pci/hotplug/cpqphp_pci.c:637:
+			if ((w_base <= w_length) && (!disable || (save_command & PCI_COMMAND_MEMORY))) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2142: FILE: drivers/pci/hotplug/cpqphp_pci.c:650:
+			/* Figure out IO and memory base lengths
+			   P2P BAR is not for children though... */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2142: FILE: drivers/pci/hotplug/cpqphp_pci.c:650:
+			   P2P BAR is not for children though... */

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2149: FILE: drivers/pci/hotplug/cpqphp_pci.c:656:
+				pci_bus_read_config_dword (pci_bus, devfn, cloop, &temp_register);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2152: FILE: drivers/pci/hotplug/cpqphp_pci.c:658:
+				if (!disable) {
+					pci_bus_write_config_dword (pci_bus, devfn, cloop, save_base);
+				}

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#2153: FILE: drivers/pci/hotplug/cpqphp_pci.c:659:
+					pci_bus_write_config_dword (pci_bus, devfn, cloop, save_base);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2153: FILE: drivers/pci/hotplug/cpqphp_pci.c:659:
+					pci_bus_write_config_dword (pci_bus, devfn, cloop, save_base);

WARNING:LONG_LINE: line length of 122 exceeds 100 columns
#2178: FILE: drivers/pci/hotplug/cpqphp_pci.c:667:
+				if ((base & PCI_BASE_ADDRESS_SPACE_IO) && (!disable || (save_command & PCI_COMMAND_IO))) {

WARNING:LONG_LINE: line length of 124 exceeds 100 columns
#2184: FILE: drivers/pci/hotplug/cpqphp_pci.c:673:
+					io_node = (struct pci_resource *) kmalloc(sizeof (struct pci_resource), GFP_KERNEL);

CHECK:SPACING: No space is necessary after a cast
#2184: FILE: drivers/pci/hotplug/cpqphp_pci.c:673:
+					io_node = (struct pci_resource *) kmalloc(sizeof (struct pci_resource), GFP_KERNEL);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2184: FILE: drivers/pci/hotplug/cpqphp_pci.c:673:
+					io_node = (struct pci_resource *) kmalloc(sizeof (struct pci_resource), GFP_KERNEL);

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#2184: FILE: drivers/pci/hotplug/cpqphp_pci.c:673:
+					io_node = (struct pci_resource *) kmalloc(sizeof (struct pci_resource), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*io_node)...) over kmalloc(sizeof (struct pci_resource)...)
#2184: FILE: drivers/pci/hotplug/cpqphp_pci.c:673:
+					io_node = (struct pci_resource *) kmalloc(sizeof (struct pci_resource), GFP_KERNEL);

WARNING:LONG_LINE: line length of 111 exceeds 100 columns
#2190: FILE: drivers/pci/hotplug/cpqphp_pci.c:679:
+					dbg("sur: IO bar=0x%x(length=0x%x)\n", io_node->base, io_node->length);

WARNING:LONG_LINE: line length of 127 exceeds 100 columns
#2199: FILE: drivers/pci/hotplug/cpqphp_pci.c:688:
+					t_mem_node = (struct pci_resource *) kmalloc(sizeof (struct pci_resource), GFP_KERNEL);

CHECK:SPACING: No space is necessary after a cast
#2199: FILE: drivers/pci/hotplug/cpqphp_pci.c:688:
+					t_mem_node = (struct pci_resource *) kmalloc(sizeof (struct pci_resource), GFP_KERNEL);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2199: FILE: drivers/pci/hotplug/cpqphp_pci.c:688:
+					t_mem_node = (struct pci_resource *) kmalloc(sizeof (struct pci_resource), GFP_KERNEL);

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#2199: FILE: drivers/pci/hotplug/cpqphp_pci.c:688:
+					t_mem_node = (struct pci_resource *) kmalloc(sizeof (struct pci_resource), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*t_mem_node)...) over kmalloc(sizeof (struct pci_resource)...)
#2199: FILE: drivers/pci/hotplug/cpqphp_pci.c:688:
+					t_mem_node = (struct pci_resource *) kmalloc(sizeof (struct pci_resource), GFP_KERNEL);

WARNING:LONG_LINE: line length of 139 exceeds 100 columns
#2203: FILE: drivers/pci/hotplug/cpqphp_pci.c:692:
+					if (!(base & PCI_BASE_ADDRESS_MEM_PREFETCH) && (!disable || (save_command & PCI_COMMAND_MEMORY))) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#2203: FILE: drivers/pci/hotplug/cpqphp_pci.c:692:
+					if (!(base & PCI_BASE_ADDRESS_MEM_PREFETCH) && (!disable || (save_command & PCI_COMMAND_MEMORY))) {
[...]
 					} else
[...]

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#2238: FILE: drivers/pci/hotplug/cpqphp_pci.c:704:
+						if (prefetchable) {

WARNING:LONG_LINE: line length of 120 exceeds 100 columns
#2239: FILE: drivers/pci/hotplug/cpqphp_pci.c:705:
+							p_mem_node->base = (ulong)save_base & PCI_BASE_ADDRESS_MEM_MASK;

WARNING:LONG_LINE: line length of 150 exceeds 100 columns
#2241: FILE: drivers/pci/hotplug/cpqphp_pci.c:707:
+							dbg("sur: 32 %s bar=0x%x(length=0x%x)\n", res_type_str, p_mem_node->base, p_mem_node->length);

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#2245: FILE: drivers/pci/hotplug/cpqphp_pci.c:711:
+						} else {

WARNING:LONG_LINE: line length of 118 exceeds 100 columns
#2246: FILE: drivers/pci/hotplug/cpqphp_pci.c:712:
+							mem_node->base = (ulong)save_base & PCI_BASE_ADDRESS_MEM_MASK;

WARNING:LONG_LINE: line length of 146 exceeds 100 columns
#2248: FILE: drivers/pci/hotplug/cpqphp_pci.c:714:
+							dbg("sur: 32 %s bar=0x%x(length=0x%x)\n", res_type_str, mem_node->base, mem_node->length);

WARNING:LONG_LINE: line length of 116 exceeds 100 columns
#2255: FILE: drivers/pci/hotplug/cpqphp_pci.c:721:
+						pci_bus_read_config_dword(pci_bus, devfn, cloop+4, &temp_register2);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2255: FILE: drivers/pci/hotplug/cpqphp_pci.c:721:
+						pci_bus_read_config_dword(pci_bus, devfn, cloop+4, &temp_register2);
 						                                               ^

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#2260: FILE: drivers/pci/hotplug/cpqphp_pci.c:726:
+						if (temp_register2) {

WARNING:LONG_LINE: line length of 161 exceeds 100 columns
#2261: FILE: drivers/pci/hotplug/cpqphp_pci.c:727:
+							dbg("sur: 64 %s high dword of base64(0x%x:%x) masked to 0\n", res_type_str, temp_register2, (u32)base64);

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#2265: FILE: drivers/pci/hotplug/cpqphp_pci.c:731:
+						if (prefetchable) {

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#2266: FILE: drivers/pci/hotplug/cpqphp_pci.c:732:
+							p_mem_node->base = base64 & PCI_BASE_ADDRESS_MEM_MASK;

WARNING:LONG_LINE: line length of 148 exceeds 100 columns
#2268: FILE: drivers/pci/hotplug/cpqphp_pci.c:734:
+							dbg("sur: 64 %s base=0x%x(len=0x%x)\n", res_type_str, p_mem_node->base, p_mem_node->length);

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#2272: FILE: drivers/pci/hotplug/cpqphp_pci.c:738:
+						} else {

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#2273: FILE: drivers/pci/hotplug/cpqphp_pci.c:739:
+							mem_node->base = base64 & PCI_BASE_ADDRESS_MEM_MASK;

WARNING:LONG_LINE: line length of 144 exceeds 100 columns
#2275: FILE: drivers/pci/hotplug/cpqphp_pci.c:741:
+							dbg("sur: 64 %s base=0x%x(len=0x%x)\n", res_type_str, mem_node->base, mem_node->length);

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#2283: FILE: drivers/pci/hotplug/cpqphp_pci.c:749:
+						dbg("asur: reserved BAR type=0x%x\n", temp_register);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#2288: FILE: drivers/pci/hotplug/cpqphp_pci.c:752:
 
+					}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2289: FILE: drivers/pci/hotplug/cpqphp_pci.c:753:
+^I^I^I^I} $

WARNING:LONG_LINE: line length of 122 exceeds 100 columns
#2292: FILE: drivers/pci/hotplug/cpqphp_pci.c:756:
+			dbg("Save_used_res of PCI adapter b:d=0x%x:%x, sc=0x%x\n", func->bus, func->device, save_command);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2436: FILE: drivers/pci/hotplug/cpqphp_pci.c:764:
+				pci_bus_write_config_dword (pci_bus, devfn, cloop, temp_register);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2437: FILE: drivers/pci/hotplug/cpqphp_pci.c:765:
+				pci_bus_read_config_dword (pci_bus, devfn, cloop, &temp_register);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2444: FILE: drivers/pci/hotplug/cpqphp_pci.c:767:
+				if (!disable) {
+					pci_bus_write_config_dword (pci_bus, devfn, cloop, save_base);
 				}

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#2445: FILE: drivers/pci/hotplug/cpqphp_pci.c:768:
+					pci_bus_write_config_dword (pci_bus, devfn, cloop, save_base);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2445: FILE: drivers/pci/hotplug/cpqphp_pci.c:768:
+					pci_bus_write_config_dword (pci_bus, devfn, cloop, save_base);

WARNING:LONG_LINE: line length of 122 exceeds 100 columns
#2561: FILE: drivers/pci/hotplug/cpqphp_pci.c:776:
+				if ((base & PCI_BASE_ADDRESS_SPACE_IO) && (!disable || (save_command & PCI_COMMAND_IO))) {

WARNING:LONG_LINE: line length of 124 exceeds 100 columns
#2567: FILE: drivers/pci/hotplug/cpqphp_pci.c:782:
+					io_node = (struct pci_resource *) kmalloc(sizeof (struct pci_resource), GFP_KERNEL);

CHECK:SPACING: No space is necessary after a cast
#2567: FILE: drivers/pci/hotplug/cpqphp_pci.c:782:
+					io_node = (struct pci_resource *) kmalloc(sizeof (struct pci_resource), GFP_KERNEL);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2567: FILE: drivers/pci/hotplug/cpqphp_pci.c:782:
+					io_node = (struct pci_resource *) kmalloc(sizeof (struct pci_resource), GFP_KERNEL);

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#2567: FILE: drivers/pci/hotplug/cpqphp_pci.c:782:
+					io_node = (struct pci_resource *) kmalloc(sizeof (struct pci_resource), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*io_node)...) over kmalloc(sizeof (struct pci_resource)...)
#2567: FILE: drivers/pci/hotplug/cpqphp_pci.c:782:
+					io_node = (struct pci_resource *) kmalloc(sizeof (struct pci_resource), GFP_KERNEL);

WARNING:LONG_LINE: line length of 119 exceeds 100 columns
#2573: FILE: drivers/pci/hotplug/cpqphp_pci.c:788:
+					dbg("sur adapter: IO bar=0x%x(length=0x%x)\n", io_node->base, io_node->length);

WARNING:LONG_LINE: line length of 127 exceeds 100 columns
#2582: FILE: drivers/pci/hotplug/cpqphp_pci.c:797:
+					t_mem_node = (struct pci_resource *) kmalloc(sizeof (struct pci_resource), GFP_KERNEL);

CHECK:SPACING: No space is necessary after a cast
#2582: FILE: drivers/pci/hotplug/cpqphp_pci.c:797:
+					t_mem_node = (struct pci_resource *) kmalloc(sizeof (struct pci_resource), GFP_KERNEL);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2582: FILE: drivers/pci/hotplug/cpqphp_pci.c:797:
+					t_mem_node = (struct pci_resource *) kmalloc(sizeof (struct pci_resource), GFP_KERNEL);

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#2582: FILE: drivers/pci/hotplug/cpqphp_pci.c:797:
+					t_mem_node = (struct pci_resource *) kmalloc(sizeof (struct pci_resource), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*t_mem_node)...) over kmalloc(sizeof (struct pci_resource)...)
#2582: FILE: drivers/pci/hotplug/cpqphp_pci.c:797:
+					t_mem_node = (struct pci_resource *) kmalloc(sizeof (struct pci_resource), GFP_KERNEL);

WARNING:LONG_LINE: line length of 139 exceeds 100 columns
#2586: FILE: drivers/pci/hotplug/cpqphp_pci.c:801:
+					if (!(base & PCI_BASE_ADDRESS_MEM_PREFETCH) && (!disable || (save_command & PCI_COMMAND_MEMORY))) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#2586: FILE: drivers/pci/hotplug/cpqphp_pci.c:801:
+					if (!(base & PCI_BASE_ADDRESS_MEM_PREFETCH) && (!disable || (save_command & PCI_COMMAND_MEMORY))) {
[...]
+					} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2590: FILE: drivers/pci/hotplug/cpqphp_pci.c:805:
+					} else

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#2604: FILE: drivers/pci/hotplug/cpqphp_pci.c:813:
+						if (prefetchable) {

WARNING:LONG_LINE: line length of 120 exceeds 100 columns
#2605: FILE: drivers/pci/hotplug/cpqphp_pci.c:814:
+							p_mem_node->base = (ulong)save_base & PCI_BASE_ADDRESS_MEM_MASK;

WARNING:LONG_LINE: line length of 158 exceeds 100 columns
#2607: FILE: drivers/pci/hotplug/cpqphp_pci.c:816:
+							dbg("sur adapter: 32 %s bar=0x%x(length=0x%x)\n", res_type_str, p_mem_node->base, p_mem_node->length);

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#2611: FILE: drivers/pci/hotplug/cpqphp_pci.c:820:
+						} else {

WARNING:LONG_LINE: line length of 118 exceeds 100 columns
#2612: FILE: drivers/pci/hotplug/cpqphp_pci.c:821:
+							mem_node->base = (ulong)save_base & PCI_BASE_ADDRESS_MEM_MASK;

WARNING:LONG_LINE: line length of 154 exceeds 100 columns
#2614: FILE: drivers/pci/hotplug/cpqphp_pci.c:823:
+							dbg("sur adapter: 32 %s bar=0x%x(length=0x%x)\n", res_type_str, mem_node->base, mem_node->length);

WARNING:LONG_LINE: line length of 116 exceeds 100 columns
#2621: FILE: drivers/pci/hotplug/cpqphp_pci.c:830:
+						pci_bus_read_config_dword(pci_bus, devfn, cloop+4, &temp_register2);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2621: FILE: drivers/pci/hotplug/cpqphp_pci.c:830:
+						pci_bus_read_config_dword(pci_bus, devfn, cloop+4, &temp_register2);
 						                                               ^

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#2626: FILE: drivers/pci/hotplug/cpqphp_pci.c:835:
+						if (temp_register2) {

WARNING:LONG_LINE: line length of 169 exceeds 100 columns
#2627: FILE: drivers/pci/hotplug/cpqphp_pci.c:836:
+							dbg("sur adapter: 64 %s high dword of base64(0x%x:%x) masked to 0\n", res_type_str, temp_register2, (u32)base64);

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#2631: FILE: drivers/pci/hotplug/cpqphp_pci.c:840:
+						if (prefetchable) {

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#2632: FILE: drivers/pci/hotplug/cpqphp_pci.c:841:
+							p_mem_node->base = base64 & PCI_BASE_ADDRESS_MEM_MASK;

WARNING:LONG_LINE: line length of 156 exceeds 100 columns
#2634: FILE: drivers/pci/hotplug/cpqphp_pci.c:843:
+							dbg("sur adapter: 64 %s base=0x%x(len=0x%x)\n", res_type_str, p_mem_node->base, p_mem_node->length);

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#2638: FILE: drivers/pci/hotplug/cpqphp_pci.c:847:
+						} else {

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#2639: FILE: drivers/pci/hotplug/cpqphp_pci.c:848:
+							mem_node->base = base64 & PCI_BASE_ADDRESS_MEM_MASK;

WARNING:LONG_LINE: line length of 152 exceeds 100 columns
#2641: FILE: drivers/pci/hotplug/cpqphp_pci.c:850:
+							dbg("sur adapter: 64 %s base=0x%x(len=0x%x)\n", res_type_str, mem_node->base, mem_node->length);

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#2649: FILE: drivers/pci/hotplug/cpqphp_pci.c:858:
+						dbg("asur: reserved BAR type=0x%x\n", temp_register);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2671: FILE: drivers/pci/hotplug/cpqphp_pci.c:861:
+^I^I^I^I} $

WARNING:LONG_LINE: line length of 111 exceeds 100 columns
#2674: FILE: drivers/pci/hotplug/cpqphp_pci.c:864:
+			dbg("Save_used_res of PCI unknown type b:d=0x%x:%x. skip.\n", func->bus, func->device);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000355523.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 126 errors, 194 warnings, 111 checks, 2957 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000355523.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
