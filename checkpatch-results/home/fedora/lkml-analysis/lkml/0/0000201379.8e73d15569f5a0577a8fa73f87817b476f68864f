WARNING:TYPO_SPELLING: 'carbus' may be misspelled - perhaps 'cardbus'?
#60: 
        it is available. (i.e. pci bridge and carbus headers)  Other
                                              ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#86: 
 linux-pci/drivers/pci/probe.c         |  944 ----------------------------------

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#111: FILE: drivers/pci/bus/bus-class.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#124: FILE: drivers/pci/bus/bus-class.c:14:
+#define DBG(x...) printk(x)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#129: FILE: drivers/pci/bus/bus-class.c:19:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*b->legacy_io)...) over kmalloc(sizeof(struct bin_attribute)...)
#145: FILE: drivers/pci/bus/bus-class.c:35:
+	b->legacy_io = kmalloc(sizeof(struct bin_attribute) * 2,

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IWUSR' are not preferred. Consider using octal permissions '0600'.
#151: FILE: drivers/pci/bus/bus-class.c:41:
+		b->legacy_io->attr.mode = S_IRUSR | S_IWUSR;

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#160: FILE: drivers/pci/bus/bus-class.c:50:
+		b->legacy_mem->size = 1024*1024;
 		                          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IWUSR' are not preferred. Consider using octal permissions '0600'.
#161: FILE: drivers/pci/bus/bus-class.c:51:
+		b->legacy_mem->attr.mode = S_IRUSR | S_IWUSR;

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#189: FILE: drivers/pci/bus/bus-class.c:79:
+CLASS_DEVICE_ATTR(cpuaffinity, S_IRUGO, pci_bus_show_cpuaffinity, NULL);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#191: FILE: drivers/pci/bus/bus-class.c:81:
+ $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#191: FILE: drivers/pci/bus/bus-class.c:81:
+
+ 

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#191: FILE: drivers/pci/bus/bus-class.c:81:
+ $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#213: FILE: drivers/pci/bus/bus-class.c:103:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#221: FILE: drivers/pci/bus/bus-class.c:111:
+struct pci_bus * pci_alloc_bus(void)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#235: FILE: drivers/pci/bus/bus-class.c:125:
+EXPORT_SYMBOL(pci_alloc_bus);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#253: FILE: drivers/pci/bus/bus-class.c:143:
+ * ^Ipci_register_devices - registers normal pci devices$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#254: FILE: drivers/pci/bus/bus-class.c:144:
+ * ^I@bus:^Ithe bus$

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#293: FILE: drivers/pci/bus/bus-class.c:183:
+EXPORT_SYMBOL(pci_add_bus);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#312: FILE: drivers/pci/bus/bus-class.c:202:
+	class_device_remove_file(&bus->class_dev,
+		&class_device_attr_cpuaffinity);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#317: FILE: drivers/pci/bus/bus-class.c:207:
+EXPORT_SYMBOL(pci_remove_bus);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#323: FILE: drivers/pci/bus/bus-num.c:1:
+/*

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#339: FILE: drivers/pci/bus/bus-num.c:17:
+{
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#340: FILE: drivers/pci/bus/bus-num.c:18:
+
+}

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#348: FILE: drivers/pci/bus/bus-num.c:26:
+{
+

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#349: FILE: drivers/pci/bus/bus-num.c:27:
+
+}

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#366: FILE: drivers/pci/bus/bus-num.c:44:
+EXPORT_SYMBOL(pci_setup_bus_numbers);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#371: FILE: drivers/pci/bus/bus-probe.c:1:
+/*

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#385: FILE: drivers/pci/bus/bus-probe.c:15:
+#define DBG(x...) printk(x)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#401: FILE: drivers/pci/bus/bus-probe.c:31:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#427: FILE: drivers/pci/bus/bus-probe.c:57:
+	u32 size = mask & maxbase;	/* Find the significant bits */
+	if (!size)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#431: FILE: drivers/pci/bus/bus-probe.c:61:
+	/* Get the lowest of them to find the decode size, and
+	   from that the extent.  */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#431: FILE: drivers/pci/bus/bus-probe.c:61:
+	   from that the extent.  */

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#432: FILE: drivers/pci/bus/bus-probe.c:62:
+	size = (size & ~(size-1)) - 1;
 	                     ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#435: FILE: drivers/pci/bus/bus-probe.c:65:
+	/* base == maxbase can be valid only if the BAR has
+	   already been programmed with all 1s.  */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#435: FILE: drivers/pci/bus/bus-probe.c:65:
+	   already been programmed with all 1s.  */

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#454: FILE: drivers/pci/bus/bus-probe.c:84:
+	for(pos=0; pos<howmany; pos = next) {
 	       ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#454: FILE: drivers/pci/bus/bus-probe.c:84:
+	for(pos=0; pos<howmany; pos = next) {
 	              ^

ERROR:SPACING: space required before the open parenthesis '('
#454: FILE: drivers/pci/bus/bus-probe.c:84:
+	for(pos=0; pos<howmany; pos = next) {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#455: FILE: drivers/pci/bus/bus-probe.c:85:
+		next = pos+1;
 		          ^

CHECK:SPACING: No space is necessary after a cast
#480: FILE: drivers/pci/bus/bus-probe.c:110:
+		res->end = res->start + (unsigned long) sz;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#484: FILE: drivers/pci/bus/bus-probe.c:114:
+			pci_read_config_dword(dev, reg+4, &l);
 			                              ^

CHECK:SPACING: No space is necessary after a cast
#487: FILE: drivers/pci/bus/bus-probe.c:117:
+			res->start |= ((unsigned long) l) << 32;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#489: FILE: drivers/pci/bus/bus-probe.c:119:
+			pci_write_config_dword(dev, reg+4, ~0);
 			                               ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#490: FILE: drivers/pci/bus/bus-probe.c:120:
+			pci_read_config_dword(dev, reg+4, &sz);
 			                              ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#491: FILE: drivers/pci/bus/bus-probe.c:121:
+			pci_write_config_dword(dev, reg+4, l);
 			                               ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#495: FILE: drivers/pci/bus/bus-probe.c:125:
+				res->end |= (unsigned long)sz<<32;
 				                             ^

WARNING:LONG_LINE: line length of 119 exceeds 100 columns
#499: FILE: drivers/pci/bus/bus-probe.c:129:
+				printk(KERN_ERR "PCI: Unable to handle 64-bit address for device %s\n", pci_name(dev));

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#499: FILE: drivers/pci/bus/bus-probe.c:129:
+				printk(KERN_ERR "PCI: Unable to handle 64-bit address for device %s\n", pci_name(dev));

CHECK:SPACING: No space is necessary after a cast
#524: FILE: drivers/pci/bus/bus-probe.c:154:
+				res->end = res->start + (unsigned long) sz;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#547: FILE: drivers/pci/bus/bus-probe.c:177:
+		printk(KERN_INFO "PCI: Transparent bridge - %s\n", pci_name(dev));

ERROR:SPACING: space required before the open parenthesis '('
#548: FILE: drivers/pci/bus/bus-probe.c:178:
+		for(i = 0; i < PCI_BUS_NUM_RESOURCES; i++)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#553: FILE: drivers/pci/bus/bus-probe.c:183:
+	for(i=0; i<3; i++)
 	     ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#553: FILE: drivers/pci/bus/bus-probe.c:183:
+	for(i=0; i<3; i++)
 	          ^

ERROR:SPACING: space required before the open parenthesis '('
#553: FILE: drivers/pci/bus/bus-probe.c:183:
+	for(i=0; i<3; i++)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#554: FILE: drivers/pci/bus/bus-probe.c:184:
+		child->resource[i] = &dev->resource[PCI_BRIDGE_RESOURCES+i];
 		                                                        ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#564: FILE: drivers/pci/bus/bus-probe.c:194:
+		u16 io_base_hi, io_limit_hi;
+		pci_read_config_word(dev, PCI_IO_BASE_UPPER16, &io_base_hi);

WARNING:LINE_SPACING: Missing a blank line after declarations
#595: FILE: drivers/pci/bus/bus-probe.c:225:
+		u32 mem_base_hi, mem_limit_hi;
+		pci_read_config_dword(dev, PCI_PREF_BASE_UPPER32, &mem_base_hi);

CHECK:SPACING: No space is necessary after a cast
#605: FILE: drivers/pci/bus/bus-probe.c:235:
+			base |= ((long) mem_base_hi) << 32;

CHECK:SPACING: No space is necessary after a cast
#606: FILE: drivers/pci/bus/bus-probe.c:236:
+			limit |= ((long) mem_limit_hi) << 32;

WARNING:LONG_LINE: line length of 125 exceeds 100 columns
#609: FILE: drivers/pci/bus/bus-probe.c:239:
+				printk(KERN_ERR "PCI: Unable to handle 64-bit address space for bridge %s\n", pci_name(dev));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#609: FILE: drivers/pci/bus/bus-probe.c:239:
+				printk(KERN_ERR "PCI: Unable to handle 64-bit address space for bridge %s\n", pci_name(dev));

WARNING:LONG_LINE: line length of 111 exceeds 100 columns
#616: FILE: drivers/pci/bus/bus-probe.c:246:
+		res->flags = (mem_base_lo & PCI_MEMORY_RANGE_TYPE_MASK) | IORESOURCE_MEM | IORESOURCE_PREFETCH;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#622: FILE: drivers/pci/bus/bus-probe.c:252:
+
+

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#641: FILE: drivers/pci/bus/bus-probe.c:271:
+	if (pci_dev->bridge_data)
+		kfree(pci_dev->bridge_data);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*bridge)...) over kmalloc(sizeof(struct pci_dev_bridge)...)
#711: FILE: drivers/pci/bus/bus-probe.c:341:
+	bridge = kmalloc(sizeof(struct pci_dev_bridge), GFP_KERNEL);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#714: FILE: drivers/pci/bus/bus-probe.c:344:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#724: FILE: drivers/pci/bus/bus-probe.c:354:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#735: FILE: drivers/pci/bus/bus-probe.c:365:
+ * Initialize the device structure with information about the device's $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#741: FILE: drivers/pci/bus/bus-probe.c:371:
+static int pci_setup_device(struct pci_dev * dev)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#780: FILE: drivers/pci/bus/bus-probe.c:410:
+		/* The PCI-to-PCI bridge spec requires that subtractive
+		   decoding (i.e. transparent) bridge must have programming

ERROR:TRAILING_WHITESPACE: trailing whitespace
#781: FILE: drivers/pci/bus/bus-probe.c:411:
+^I^I   interface code of 0x01. */ $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#781: FILE: drivers/pci/bus/bus-probe.c:411:
+		   interface code of 0x01. */ 

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#798: FILE: drivers/pci/bus/bus-probe.c:428:
+		printk(KERN_ERR "PCI: device %s has unknown header type %02x, ignoring.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#799: FILE: drivers/pci/bus/bus-probe.c:429:
+		printk(KERN_ERR "PCI: device %s has unknown header type %02x, ignoring.\n",
+			pci_name(dev), dev->hdr_type);

WARNING:INDENTED_LABEL: labels should not be indented
#802: FILE: drivers/pci/bus/bus-probe.c:432:
+	bad:

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#803: FILE: drivers/pci/bus/bus-probe.c:433:
+		printk(KERN_ERR "PCI: %s: class %x doesn't match header type %02x. Ignoring class.\n",

WARNING:REPEATED_WORD: Possible repeated word: 'go'
#808: FILE: drivers/pci/bus/bus-probe.c:438:
+	/* We found a fine healthy device, go go go... */

WARNING:REPEATED_WORD: Possible repeated word: 'go'
#808: FILE: drivers/pci/bus/bus-probe.c:438:
+	/* We found a fine healthy device, go go go... */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#811: FILE: drivers/pci/bus/bus-probe.c:441:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#811: FILE: drivers/pci/bus/bus-probe.c:441:
+ $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#840: FILE: drivers/pci/bus/bus-probe.c:470:
+			printk(KERN_WARNING "Device %04x:%02x:%02x.%d not "

WARNING:SPLIT_STRING: quoted string split across lines
#841: FILE: drivers/pci/bus/bus-probe.c:471:
+			printk(KERN_WARNING "Device %04x:%02x:%02x.%d not "
+					"responding\n", pci_domain_nr(bus),

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*dev)...) over kmalloc(sizeof(struct pci_dev)...)
#851: FILE: drivers/pci/bus/bus-probe.c:481:
+	dev = kmalloc(sizeof(struct pci_dev), GFP_KERNEL);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#868: FILE: drivers/pci/bus/bus-probe.c:498:
+	/* Assume 32-bit PCI; let 64-bit PCI cards (which are far rarer)
+	   set this higher, assuming the system even supports it.  */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#868: FILE: drivers/pci/bus/bus-probe.c:498:
+	   set this higher, assuming the system even supports it.  */

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#886: FILE: drivers/pci/bus/bus-probe.c:516:
+struct pci_dev * __devinit

ERROR:TRAILING_WHITESPACE: trailing whitespace
#896: FILE: drivers/pci/bus/bus-probe.c:526:
+^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#934: FILE: drivers/pci/bus/bus-probe.c:564:
+^I^I ^I * If this is a single function device,$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#934: FILE: drivers/pci/bus/bus-probe.c:564:
+^I^I ^I * If this is a single function device,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#935: FILE: drivers/pci/bus/bus-probe.c:565:
+^I^I ^I * don't scan past the first function.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#935: FILE: drivers/pci/bus/bus-probe.c:565:
+^I^I ^I * don't scan past the first function.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#936: FILE: drivers/pci/bus/bus-probe.c:566:
+^I^I ^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#936: FILE: drivers/pci/bus/bus-probe.c:566:
+^I^I ^I */$

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#938: FILE: drivers/pci/bus/bus-probe.c:568:
+				if (func > 0) {
[...]
+				} else {
[...]

ERROR:CODE_INDENT: code indent should use tabs where possible
#941: FILE: drivers/pci/bus/bus-probe.c:571:
+ ^I^I^I^I^Ibreak;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#941: FILE: drivers/pci/bus/bus-probe.c:571:
+ ^I^I^I^I^Ibreak;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#941: FILE: drivers/pci/bus/bus-probe.c:571:
+ ^I^I^I^I^Ibreak;$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#952: FILE: drivers/pci/bus/bus-probe.c:582:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#976: FILE: drivers/pci/bus/bus-res.c:1:
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#990: FILE: drivers/pci/bus/p2p.c:1:
+/*

WARNING:LINE_SPACING: Missing a blank line after declarations
#1021: FILE: drivers/pci/bus/p2p.c:32:
+	int rpcap = pci_find_capability(dev, PCI_CAP_ID_EXP);
+	if (!rpcap)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1038: FILE: drivers/pci/bus/p2p.c:49:
+^I   of bus errors (in some architectures) */ $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1038: FILE: drivers/pci/bus/p2p.c:49:
+	/* Disable MasterAbortMode during probing to avoid reporting
+	   of bus errors (in some architectures) */ 

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1038: FILE: drivers/pci/bus/p2p.c:49:
+	   of bus errors (in some architectures) */ 

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1049: FILE: drivers/pci/bus/p2p.c:60:
+extern struct pci_bus * pci_alloc_bus(void);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1050: FILE: drivers/pci/bus/p2p.c:61:
+extern int pci_add_bus(struct pci_bus *bus);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1051: FILE: drivers/pci/bus/p2p.c:62:
+extern struct pci_bus * pci_derive_parent(struct device *);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1051: FILE: drivers/pci/bus/p2p.c:62:
+extern struct pci_bus * pci_derive_parent(struct device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct device *' should also have an identifier name
#1051: FILE: drivers/pci/bus/p2p.c:62:
+extern struct pci_bus * pci_derive_parent(struct device *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1081: FILE: drivers/pci/bus/p2p.c:92:
+		bus->resource[i] = &dev->resource[PCI_BRIDGE_RESOURCES+i];
 		                                                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1085: FILE: drivers/pci/bus/p2p.c:96:
+	p2p_setup_bus_numbers(dev,bus);
 	                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1086: FILE: drivers/pci/bus/p2p.c:97:
+	p2p_prepare_hardware(dev,bus);
 	                        ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1128: FILE: drivers/pci/bus/root.c:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1132: FILE: drivers/pci/bus/root.c:5:
+  $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1132: FILE: drivers/pci/bus/root.c:5:
+  $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1137: FILE: drivers/pci/device.c:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1141: FILE: drivers/pci/device.c:5:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1141: FILE: drivers/pci/device.c:5:
+ $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1149: FILE: drivers/pci/device.c:13:
+#define DBG(x...) printk(x)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1177: FILE: drivers/pci/device.c:41:
+EXPORT_SYMBOL(pci_add_device);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1183: FILE: drivers/pci/device.c:47:
+ ^Imsi_remove_pci_irq_vectors(dev);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1183: FILE: drivers/pci/device.c:47:
+ ^Imsi_remove_pci_irq_vectors(dev);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1183: FILE: drivers/pci/device.c:47:
+ ^Imsi_remove_pci_irq_vectors(dev);$

WARNING:LINE_SPACING: Missing a blank line after declarations
#1188: FILE: drivers/pci/device.c:52:
+		struct resource *res = dev->resource + i;
+		if (res->parent)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1200: FILE: drivers/pci/device.c:64:
+	 * list accesses from this device */

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1204: FILE: drivers/pci/device.c:68:
+	dev->bus_list.next = dev->bus_list.prev = NULL;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1205: FILE: drivers/pci/device.c:69:
+	dev->global_list.next = dev->global_list.prev = NULL;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1216: FILE: drivers/pci/device.c:80:
+ * Delete the device structure from the device lists and $

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1255: FILE: drivers/pci/device.c:119:
+EXPORT_SYMBOL(pci_remove_bus_device);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1278: FILE: drivers/pci/device.c:142:
+EXPORT_SYMBOL(pci_remove_behind_bridge);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1313: FILE: drivers/pci/pci.h:15:
+extern int pci_detect_children(struct pci_bus *bus);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1314: FILE: drivers/pci/pci.h:16:
+extern int pci_add_device(struct pci_dev *dev);

WARNING:SPACING: Unnecessary space before function pointer arguments
#2454: FILE: include/linux/pci.h:630:
+	int (*setup_windows) (struct pci_bus *bus);	/* allocates resources */

WARNING:SPACING: Unnecessary space before function pointer arguments
#2455: FILE: include/linux/pci.h:631:
+	int (*enable) (struct pci_bus *bus);		/* enables the bridge */

WARNING:SPACING: Unnecessary space before function pointer arguments
#2456: FILE: include/linux/pci.h:632:
+	int (*disable) (struct pci_bus *bus);		/* disables the bridge */

WARNING:SPACING: Unnecessary space before function pointer arguments
#2457: FILE: include/linux/pci.h:633:
+	int (*set_busnr) (struct pci_bus *bus);		/* records bus number config */

CHECK:SPACING: No space is necessary after a cast
#2465: FILE: include/linux/pci.h:641:
+	return (unsigned char) bus->number.start;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2468: FILE: include/linux/pci.h:644:
+
+

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000201379.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 29 errors, 74 warnings, 36 checks, 1248 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000201379.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
