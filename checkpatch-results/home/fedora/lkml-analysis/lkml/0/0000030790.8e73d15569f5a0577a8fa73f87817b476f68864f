WARNING:COMMIT_MESSAGE: Missing commit description - Add an appropriate one

The patch is missing a commit description.  A brief
description of the changes made by the patch should be added.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

WARNING:BRACES: braces {} are not necessary for single statement blocks
#75: FILE: drivers/scsi/qla2xxx/qla_dbg.h:41:
+#define DEBUG(x)	do { if (ql2xextended_error_logging) { x; } } while (0)

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BRACES: braces {} are not necessary for single statement blocks
#89: FILE: drivers/scsi/qla2xxx/qla_dbg.h:49:
+#define DEBUG2(x)	do { if (ql2xextended_error_logging) { x; } } while (0)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#90: FILE: drivers/scsi/qla2xxx/qla_dbg.h:50:
+#define DEBUG2_3(x)	do { if (ql2xextended_error_logging) { x; } } while (0)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#91: FILE: drivers/scsi/qla2xxx/qla_dbg.h:51:
+#define DEBUG2_3_11(x)	do { if (ql2xextended_error_logging) { x; } } while (0)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#92: FILE: drivers/scsi/qla2xxx/qla_dbg.h:52:
+#define DEBUG2_9_10(x)	do { if (ql2xextended_error_logging) { x; } } while (0)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#93: FILE: drivers/scsi/qla2xxx/qla_dbg.h:53:
+#define DEBUG2_11(x)	do { if (ql2xextended_error_logging) { x; } } while (0)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#94: FILE: drivers/scsi/qla2xxx/qla_dbg.h:54:
+#define DEBUG2_13(x)	do { if (ql2xextended_error_logging) { x; } } while (0)

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#136: FILE: drivers/scsi/qla2xxx/qla_os.c:65:
+module_param(ql2xextended_error_logging, int, S_IRUGO|S_IRUSR);
                                                      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO|S_IRUSR' are not preferred. Consider using octal permissions '0444'.
#136: FILE: drivers/scsi/qla2xxx/qla_os.c:65:
+module_param(ql2xextended_error_logging, int, S_IRUGO|S_IRUSR);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#138: FILE: drivers/scsi/qla2xxx/qla_os.c:67:
+MODULE_PARM_DESC(ql2xextended_error_logging,
 		"Option to enable extended error logging, "

ERROR:SPACING: space required after that ';' (ctx:VxV)
#159: FILE: drivers/scsi/qla4xxx/ql4_dbg.h:25:
+#define DEBUG2(x)      do {if(ql4xextended_error_logging == 2) x;} while (0);
                                                                 ^

ERROR:SPACING: space required before the open parenthesis '('
#159: FILE: drivers/scsi/qla4xxx/ql4_dbg.h:25:
+#define DEBUG2(x)      do {if(ql4xextended_error_logging == 2) x;} while (0);

WARNING:DO_WHILE_MACRO_WITH_TRAILING_SEMICOLON: do {} while (0) macros should not be semicolon terminated
#159: FILE: drivers/scsi/qla4xxx/ql4_dbg.h:25:
+#define DEBUG2(x)      do {if(ql4xextended_error_logging == 2) x;} while (0);

do {} while(0) macros should not have a trailing semicolon.

ERROR:SPACING: space required after that ';' (ctx:VxV)
#167: FILE: drivers/scsi/qla4xxx/ql4_dbg.h:32:
+#define DEBUG3(x)      do {if(ql4xextended_error_logging == 3) x;} while (0);
                                                                 ^

ERROR:SPACING: space required before the open parenthesis '('
#167: FILE: drivers/scsi/qla4xxx/ql4_dbg.h:32:
+#define DEBUG3(x)      do {if(ql4xextended_error_logging == 3) x;} while (0);

WARNING:DO_WHILE_MACRO_WITH_TRAILING_SEMICOLON: do {} while (0) macros should not be semicolon terminated
#167: FILE: drivers/scsi/qla4xxx/ql4_dbg.h:32:
+#define DEBUG3(x)      do {if(ql4xextended_error_logging == 3) x;} while (0);

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#208: FILE: drivers/scsi/qla4xxx/ql4_os.c:37:
+int ql4xextended_error_logging = 0; /* 0 = off, 1 = log errors */

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IRUSR' are not preferred. Consider using octal permissions '0444'.
#209: FILE: drivers/scsi/qla4xxx/ql4_os.c:38:
+module_param(ql4xextended_error_logging, int, S_IRUGO | S_IRUSR);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000030790.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 5 errors, 12 warnings, 2 checks, 114 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000030790.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
