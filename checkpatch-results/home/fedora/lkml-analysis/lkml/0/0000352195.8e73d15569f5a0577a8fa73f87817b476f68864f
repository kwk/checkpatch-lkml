WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#29: 
    Here's full shm to sysfs patch against 2.6test1.I've got one problem left : unregistering doesn't work.Do we have some kobject expert in there to help me finalizing this one ?

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#42: FILE: ipc/shm.c:16:
+ * sysfs support (c) 2003 Fabian Frédérick<ffrederick@users.sourceforge.net>
                                    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#66: FILE: ipc/shm.c:67:
+	unsigned int kobj_id=simple_strtoul(kobj->name,NULL,10);
 	                    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#66: FILE: ipc/shm.c:67:
+	unsigned int kobj_id=simple_strtoul(kobj->name,NULL,10);
 	                                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#66: FILE: ipc/shm.c:67:
+	unsigned int kobj_id=simple_strtoul(kobj->name,NULL,10);
 	                                                   ^

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#66: FILE: ipc/shm.c:67:
+	unsigned int kobj_id=simple_strtoul(kobj->name,NULL,10);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#67: FILE: ipc/shm.c:68:
+	int found=0;
 	         ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#70: FILE: ipc/shm.c:71:
+	for(id=0; id<=shm_ids.max_id&&!found; id++){
 	      ^

ERROR:SPACING: spaces required around that '<=' (ctx:VxV)
#70: FILE: ipc/shm.c:71:
+	for(id=0; id<=shm_ids.max_id&&!found; id++){
 	            ^

ERROR:SPACING: spaces required around that '&&' (ctx:VxO)
#70: FILE: ipc/shm.c:71:
+	for(id=0; id<=shm_ids.max_id&&!found; id++){
 	                            ^

ERROR:SPACING: space required before the open brace '{'
#70: FILE: ipc/shm.c:71:
+	for(id=0; id<=shm_ids.max_id&&!found; id++){

ERROR:SPACING: space required before the open parenthesis '('
#70: FILE: ipc/shm.c:71:
+	for(id=0; id<=shm_ids.max_id&&!found; id++){

ERROR:SPACING: space required after that ',' (ctx:VxV)
#72: FILE: ipc/shm.c:73:
+		if(shm_buildid(id,shp->shm_perm.seq)==kobj_id)
 		                 ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#72: FILE: ipc/shm.c:73:
+		if(shm_buildid(id,shp->shm_perm.seq)==kobj_id)
 		                                    ^

ERROR:SPACING: space required before the open parenthesis '('
#72: FILE: ipc/shm.c:73:
+		if(shm_buildid(id,shp->shm_perm.seq)==kobj_id)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#73: FILE: ipc/shm.c:74:
+			found=1;
 			     ^

ERROR:SPACING: space required before the open brace '{'
#76: FILE: ipc/shm.c:77:
+	if(found){

ERROR:SPACING: space required before the open parenthesis '('
#76: FILE: ipc/shm.c:77:
+	if(found){

CHECK:BRACES: braces {} should be used on all arms of this statement
#76: FILE: ipc/shm.c:77:
+	if(found){
[...]
+	}else snprintf(buf, PAGE_SIZE, "Not found");
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#79: FILE: ipc/shm.c:80:
+		if(!strcmp(attr->name,"Key"))
 		                     ^

ERROR:SPACING: space required before the open parenthesis '('
#79: FILE: ipc/shm.c:80:
+		if(!strcmp(attr->name,"Key"))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#80: FILE: ipc/shm.c:81:
+			snprintf(buf, PAGE_SIZE,"%ld", (long)shp->shm_perm.key);
 			                       ^

ERROR:SPACING: space required before the open parenthesis '('
#81: FILE: ipc/shm.c:82:
+		else if(!strcmp(attr->name, "Owner"))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#83: FILE: ipc/shm.c:84:
+		else if(!strcmp(attr->name,"Perms"))
 		                          ^

ERROR:SPACING: space required before the open parenthesis '('
#83: FILE: ipc/shm.c:84:
+		else if(!strcmp(attr->name,"Perms"))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#85: FILE: ipc/shm.c:86:
+^I^Ielse if(!strcmp(attr->name,"Bytes"))^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#85: FILE: ipc/shm.c:86:
+		else if(!strcmp(attr->name,"Bytes"))	
 		                          ^

ERROR:SPACING: space required before the open parenthesis '('
#85: FILE: ipc/shm.c:86:
+		else if(!strcmp(attr->name,"Bytes"))	

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#88: FILE: ipc/shm.c:89:
+			snprintf(buf, PAGE_SIZE, "%ld", \

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#90: FILE: ipc/shm.c:91:
+			(file_count(shp->shm_file)-1):shp->shm_nattch);
 			                          ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#90: FILE: ipc/shm.c:91:
+			(file_count(shp->shm_file)-1):shp->shm_nattch);
 			                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#91: FILE: ipc/shm.c:92:
+		else if (!strcmp(attr->name,"Cpid"))
 		                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#92: FILE: ipc/shm.c:93:
+			snprintf(buf,PAGE_SIZE, "%d", shp->shm_cprid);
 			            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#93: FILE: ipc/shm.c:94:
+		else if (!strcmp(attr->name,"Lpid"))
 		                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#94: FILE: ipc/shm.c:95:
+			snprintf(buf,PAGE_SIZE, "%d",shp->shm_lprid);
 			            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#94: FILE: ipc/shm.c:95:
+			snprintf(buf,PAGE_SIZE, "%d",shp->shm_lprid);
 			                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#95: FILE: ipc/shm.c:96:
+		else if (!strcmp(attr->name,"Gid"))
 		                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#96: FILE: ipc/shm.c:97:
+			snprintf(buf,PAGE_SIZE, "%d", shp->shm_perm.gid);
 			            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#97: FILE: ipc/shm.c:98:
+		else if (!strcmp(attr->name,"Cuid"))
 		                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#98: FILE: ipc/shm.c:99:
+			snprintf(buf,PAGE_SIZE, "%d", shp->shm_perm.cuid);
 			            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#99: FILE: ipc/shm.c:100:
+		else if (!strcmp(attr->name,"Cgid"))
 		                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#100: FILE: ipc/shm.c:101:
+			snprintf(buf,PAGE_SIZE, "%d", shp->shm_perm.cgid);
 			            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#101: FILE: ipc/shm.c:102:
+		else if (!strcmp(attr->name,"Atime"))
 		                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#102: FILE: ipc/shm.c:103:
+			snprintf(buf,PAGE_SIZE, "%ld", (long)shp->shm_atim);
 			            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#103: FILE: ipc/shm.c:104:
+		else if (!strcmp(attr->name,"Dtime"))
 		                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#104: FILE: ipc/shm.c:105:
+			snprintf(buf,PAGE_SIZE, "%ld", (long)shp->shm_dtim);
 			            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#105: FILE: ipc/shm.c:106:
+		else if (!strcmp(attr->name,"Ctime"))
 		                           ^

CHECK:SPACING: No space is necessary after a cast
#106: FILE: ipc/shm.c:107:
+			snprintf(buf,PAGE_SIZE, "%ld", (long) shp->shm_ctim);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#106: FILE: ipc/shm.c:107:
+			snprintf(buf,PAGE_SIZE, "%ld", (long) shp->shm_ctim);
 			            ^

ERROR:SPACING: space required after that close brace '}'
#108: FILE: ipc/shm.c:109:
+	}else snprintf(buf, PAGE_SIZE, "Not found");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#108: FILE: ipc/shm.c:109:
+	}else snprintf(buf, PAGE_SIZE, "Not found");

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#112: FILE: ipc/shm.c:113:
+#define SHM_ATTR(_name) \
+static struct attribute shm_attr_##_name={ \
+	.name=__stringify(_name), \
+	.mode=0444, \
+}; \
+sysfs_create_file(&shm_ids.entries[id].kobj, &shm_attr_##_name );

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#113: FILE: ipc/shm.c:114:
+static struct attribute shm_attr_##_name={ \
                                         ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#114: FILE: ipc/shm.c:115:
+	.name=__stringify(_name), \
 	     ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#115: FILE: ipc/shm.c:116:
+	.mode=0444, \
 	     ^

ERROR:SPACING: space prohibited before that close parenthesis ')'
#117: FILE: ipc/shm.c:118:
+sysfs_create_file(&shm_ids.entries[id].kobj, &shm_attr_##_name );

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#119: FILE: ipc/shm.c:120:
+static struct sysfs_ops shm_sysfs_ops ={
                                       ^

WARNING:CONST_STRUCT: struct sysfs_ops should normally be const
#119: FILE: ipc/shm.c:120:
+static struct sysfs_ops shm_sysfs_ops ={

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#123: FILE: ipc/shm.c:124:
+static struct kobj_type ktype_shm ={
                                   ^

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#154: FILE: ipc/shm.c:219:
+	kobject_unregister(&shm_ids.entries[id%SEQ_MULTIPLIER].kobj);
 	                                      ^

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#163: FILE: ipc/shm.c:300:
+	sprintf(shm_ids.entries[id].kobj.name, "%ld", \

ERROR:SPACING: space required after that ',' (ctx:VxV)
#164: FILE: ipc/shm.c:301:
+	       (long)shm_buildid(id,shp->shm_perm.seq));
 	                           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#165: FILE: ipc/shm.c:302:
+	shm_ids.entries[id].kobj.parent=kobject_get(&shm_ids.kobj);
 	                               ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#166: FILE: ipc/shm.c:303:
+	shm_ids.entries[id].kobj.kset=NULL;
 	                             ^

ERROR:SPACING: spaces required around that '=' (ctx:VxO)
#167: FILE: ipc/shm.c:304:
+	shm_ids.entries[id].kobj.ktype=&ktype_shm;
 	                              ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#167: FILE: ipc/shm.c:304:
+	shm_ids.entries[id].kobj.ktype=&ktype_shm;
 	                               ^

ERROR:SPACING: space required before the open brace '{'
#168: FILE: ipc/shm.c:305:
+	if(!kobject_register(&(shm_ids.entries[id].kobj))){

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around shm_ids.entries[id].kobj
#168: FILE: ipc/shm.c:305:
+	if(!kobject_register(&(shm_ids.entries[id].kobj))){

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:SPACING: space required before the open parenthesis '('
#168: FILE: ipc/shm.c:305:
+	if(!kobject_register(&(shm_ids.entries[id].kobj))){

CHECK:CAMELCASE: Avoid CamelCase: <Key>
#169: FILE: ipc/shm.c:306:
+		SHM_ATTR(Key);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Owner>
#170: FILE: ipc/shm.c:307:
+		SHM_ATTR(Owner);

CHECK:CAMELCASE: Avoid CamelCase: <Bytes>
#171: FILE: ipc/shm.c:308:
+		SHM_ATTR(Bytes);

CHECK:CAMELCASE: Avoid CamelCase: <Perms>
#172: FILE: ipc/shm.c:309:
+		SHM_ATTR(Perms);

CHECK:CAMELCASE: Avoid CamelCase: <NAttach>
#173: FILE: ipc/shm.c:310:
+		SHM_ATTR(NAttach);

CHECK:CAMELCASE: Avoid CamelCase: <Cpid>
#174: FILE: ipc/shm.c:311:
+		SHM_ATTR(Cpid);

CHECK:CAMELCASE: Avoid CamelCase: <Lpid>
#175: FILE: ipc/shm.c:312:
+		SHM_ATTR(Lpid);

CHECK:CAMELCASE: Avoid CamelCase: <Gid>
#176: FILE: ipc/shm.c:313:
+		SHM_ATTR(Gid);

CHECK:CAMELCASE: Avoid CamelCase: <Cuid>
#177: FILE: ipc/shm.c:314:
+		SHM_ATTR(Cuid);

CHECK:CAMELCASE: Avoid CamelCase: <Cgid>
#178: FILE: ipc/shm.c:315:
+		SHM_ATTR(Cgid);

CHECK:CAMELCASE: Avoid CamelCase: <Atime>
#179: FILE: ipc/shm.c:316:
+		SHM_ATTR(Atime);

CHECK:CAMELCASE: Avoid CamelCase: <Dtime>
#180: FILE: ipc/shm.c:317:
+		SHM_ATTR(Dtime);

CHECK:CAMELCASE: Avoid CamelCase: <Ctime>
#181: FILE: ipc/shm.c:318:
+		SHM_ATTR(Ctime);

ERROR:SPACING: space required before the open brace '{'
#182: FILE: ipc/shm.c:319:
+	}else{

ERROR:SPACING: space required after that close brace '}'
#182: FILE: ipc/shm.c:319:
+	}else{

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#216: FILE: ipc/util.c:14:
+ *            Fabian Frédérick <ffrederick@users.sourceforge.net>
                        ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#249: FILE: ipc/util.c:438:
+ * barriers here to guarantee the writes in grow_ary() are seen in order $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#267: FILE: ipc/util.h:6:
+ * $

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#268: FILE: ipc/util.h:7:
+ * 07/2003 sysfs report by Fabian Frédérick <ffrederick@users.sourceforge.net>
                                     ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000352195.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 60 errors, 6 warnings, 22 checks, 227 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000352195.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
