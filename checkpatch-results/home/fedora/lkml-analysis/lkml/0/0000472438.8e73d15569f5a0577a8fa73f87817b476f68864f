WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#33: 
Olien wrote permission_exec_lite. These ideas came from Al Viro to decrease 

ERROR:SPACING: space required after that ',' (ctx:VxV)
#68: FILE: fs/dcache.c:711:
+	dentry = __d_lookup(parent,name);
 	                          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#73: FILE: fs/dcache.c:716:
+struct dentry * __d_lookup(struct dentry * parent, struct qstr * name)  $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#73: FILE: fs/dcache.c:716:
+struct dentry * __d_lookup(struct dentry * parent, struct qstr * name)  

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#73: FILE: fs/dcache.c:716:
+struct dentry * __d_lookup(struct dentry * parent, struct qstr * name)  

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#73: FILE: fs/dcache.c:716:
+struct dentry * __d_lookup(struct dentry * parent, struct qstr * name)  

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#75: FILE: fs/dcache.c:718:
+{
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#106: FILE: fs/exec.c:350:
+	err = path_lookup(name, LOOKUP_FOLLOW|LOOKUP_POSITIVE, &nd);
 	                                                        ^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#106: FILE: fs/exec.c:350:
+	err = path_lookup(name, LOOKUP_FOLLOW|LOOKUP_POSITIVE, &nd);
 	                                     ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#117: FILE: fs/namei.c:271:
+^I$

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#128: FILE: fs/namei.c:282:
+static inline void undo_locked(struct nameidata *nd)
                                                  ^^

ERROR:SPACING: space required before the open brace '{'
#130: FILE: fs/namei.c:284:
+	if(nd->flags & LOOKUP_LOCKED){

ERROR:SPACING: space required before the open parenthesis '('
#130: FILE: fs/namei.c:284:
+	if(nd->flags & LOOKUP_LOCKED){

ERROR:TRAILING_WHITESPACE: trailing whitespace
#139: FILE: fs/namei.c:293:
+ * For fast path lookup while holding the dcache_lock. $

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#142: FILE: fs/namei.c:296:
+static struct dentry * cached_lookup_nd(struct nameidata * nd, struct qstr * name, int flags)
                                                            ^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#142: FILE: fs/namei.c:296:
+static struct dentry * cached_lookup_nd(struct nameidata * nd, struct qstr * name, int flags)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#142: FILE: fs/namei.c:296:
+static struct dentry * cached_lookup_nd(struct nameidata * nd, struct qstr * name, int flags)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#142: FILE: fs/namei.c:296:
+static struct dentry * cached_lookup_nd(struct nameidata * nd, struct qstr * name, int flags)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#144: FILE: fs/namei.c:298:
+	struct dentry * dentry = NULL;

WARNING:LINE_SPACING: Missing a blank line after declarations
#145: FILE: fs/namei.c:299:
+	struct dentry * dentry = NULL;
+	if(!nd->flags & LOOKUP_LOCKED)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#145: FILE: fs/namei.c:299:
+	if(!nd->flags & LOOKUP_LOCKED)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#147: FILE: fs/namei.c:301:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#149: FILE: fs/namei.c:303:
+^I$

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#151: FILE: fs/namei.c:305:
+		undo_locked(nd);
 		            ^^

ERROR:SPACING: space required before the open parenthesis '('
#196: FILE: fs/namei.c:537:
+		if(err)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#205: FILE: fs/namei.c:573:
+				undo_locked(nd);
 				            ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#214: FILE: fs/namei.c:590:
+		dentry = cached_lookup_nd(nd, &this, LOOKUP_CONTINUE);
 		                          ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#216: FILE: fs/namei.c:592:
+			undo_locked(nd);
 			            ^^

ERROR:SPACING: space required before the open brace '{'
#225: FILE: fs/namei.c:599:
+		if(d_mountpoint(dentry)){

ERROR:SPACING: space required before the open parenthesis '('
#225: FILE: fs/namei.c:599:
+		if(d_mountpoint(dentry)){

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#226: FILE: fs/namei.c:600:
+			undo_locked(nd);
 			            ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#237: FILE: fs/namei.c:614:
+			undo_locked(nd);
 			            ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#255: FILE: fs/namei.c:648:
+				undo_locked(nd);
 				            ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#264: FILE: fs/namei.c:660:
+		dentry = cached_lookup_nd(nd, &this, 0);
 		                          ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#265: FILE: fs/namei.c:661:
+		undo_locked(nd); 
 		            ^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#265: FILE: fs/namei.c:661:
+^I^Iundo_locked(nd); $

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#273: FILE: fs/namei.c:719:
+		undo_locked(nd);
 		            ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#276: FILE: fs/namei.c:722:
+		undo_locked(nd);
 		            ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#280: FILE: fs/namei.c:726:
+	undo_locked(nd);
 	            ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#288: FILE: fs/namei.c:833:
+int path_lookup(const char *name, unsigned int flags, struct nameidata *nd)
                                                                         ^^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#292: FILE: fs/namei.c:837:
+	if (*name=='/'){
 	         ^

ERROR:SPACING: space required before the open brace '{'
#292: FILE: fs/namei.c:837:
+	if (*name=='/'){

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#298: FILE: fs/namei.c:843:
+			if (__emul_lookup_dentry(name,nd))
 			                              ^^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#298: FILE: fs/namei.c:843:
+			if (__emul_lookup_dentry(name,nd))
 			                             ^

ERROR:SPACING: space required before the open brace '{'
#307: FILE: fs/namei.c:852:
+	else{

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#307: FILE: fs/namei.c:852:
+	}
+	else{

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#307: FILE: fs/namei.c:852:
+	else{

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#315: FILE: fs/namei.c:860:
+	return (path_walk(name, nd));
 	                        ^^

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#315: FILE: fs/namei.c:860:
+	return (path_walk(name, nd));

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#327: FILE: fs/namei.c:953:
+		err = path_lookup(tmp, flags, nd);
 		                              ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#337: FILE: fs/namei.c:1144:
+		error = path_lookup(pathname, lookup_flags(flag), nd);
 		                                                  ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#347: FILE: fs/namei.c:1154:
+	error = path_lookup(pathname, LOOKUP_PARENT, nd);
 	                                             ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#357: FILE: fs/namei.c:1404:
+	error = path_lookup(tmp, LOOKUP_PARENT, &nd);
 	                                         ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#367: FILE: fs/namei.c:1464:
+		error = path_lookup(tmp, LOOKUP_PARENT, &nd);
 		                                         ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#377: FILE: fs/namei.c:1555:
+	error = path_lookup(name, LOOKUP_PARENT, &nd);
 	                                          ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#387: FILE: fs/namei.c:1626:
+	error = path_lookup(name, LOOKUP_PARENT, &nd);
 	                                          ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#397: FILE: fs/namei.c:1689:
+		error = path_lookup(to, LOOKUP_PARENT, &nd);
 		                                        ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#412: FILE: fs/namei.c:1769:
+		error = path_lookup(to, LOOKUP_PARENT, &nd);
 		                                        ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#442: FILE: fs/namespace.c:371:
+	retval = path_lookup(kname, LOOKUP_POSITIVE|LOOKUP_FOLLOW, &nd); 
 	                                                            ^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#442: FILE: fs/namespace.c:371:
+^Iretval = path_lookup(kname, LOOKUP_POSITIVE|LOOKUP_FOLLOW, &nd); $

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#442: FILE: fs/namespace.c:371:
+	retval = path_lookup(kname, LOOKUP_POSITIVE|LOOKUP_FOLLOW, &nd); 
 	                                           ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#452: FILE: fs/namespace.c:499:
+	err = path_lookup(old_name, LOOKUP_POSITIVE|LOOKUP_FOLLOW, &old_nd);
 	                                           ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#462: FILE: fs/namespace.c:565:
+	err = path_lookup(old_name, LOOKUP_POSITIVE|LOOKUP_FOLLOW, &old_nd);
 	                                           ^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#472: FILE: fs/namespace.c:731:
+	retval = path_lookup(dir_name, LOOKUP_FOLLOW|LOOKUP_POSITIVE, &nd);
 	                                                               ^^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#472: FILE: fs/namespace.c:731:
+	retval = path_lookup(dir_name, LOOKUP_FOLLOW|LOOKUP_POSITIVE, &nd);
 	                                            ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#482: FILE: fs/namespace.c:923:
+	error = path_lookup(name, LOOKUP_POSITIVE|LOOKUP_FOLLOW|LOOKUP_DIRECTORY, &new_nd);
 	                                         ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#482: FILE: fs/namespace.c:923:
+	error = path_lookup(name, LOOKUP_POSITIVE|LOOKUP_FOLLOW|LOOKUP_DIRECTORY, &new_nd);
 	                                                       ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#492: FILE: fs/namespace.c:936:
+	error = path_lookup(name, LOOKUP_POSITIVE|LOOKUP_FOLLOW|LOOKUP_DIRECTORY, &old_nd);
 	                                         ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#492: FILE: fs/namespace.c:936:
+	error = path_lookup(name, LOOKUP_POSITIVE|LOOKUP_FOLLOW|LOOKUP_DIRECTORY, &old_nd);
 	                                                       ^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#505: FILE: fs/open.c:371:
+	error = path_lookup(name,LOOKUP_POSITIVE|LOOKUP_FOLLOW|LOOKUP_DIRECTORY,&nd);
 	                                                                         ^^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#505: FILE: fs/open.c:371:
+	error = path_lookup(name,LOOKUP_POSITIVE|LOOKUP_FOLLOW|LOOKUP_DIRECTORY,&nd);
 	                        ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#505: FILE: fs/open.c:371:
+	error = path_lookup(name,LOOKUP_POSITIVE|LOOKUP_FOLLOW|LOOKUP_DIRECTORY,&nd);
 	                                        ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#505: FILE: fs/open.c:371:
+	error = path_lookup(name,LOOKUP_POSITIVE|LOOKUP_FOLLOW|LOOKUP_DIRECTORY,&nd);
 	                                                      ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#505: FILE: fs/open.c:371:
+	error = path_lookup(name,LOOKUP_POSITIVE|LOOKUP_FOLLOW|LOOKUP_DIRECTORY,&nd);
 	                                                                       ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#505: FILE: fs/open.c:371:
+	error = path_lookup(name,LOOKUP_POSITIVE|LOOKUP_FOLLOW|LOOKUP_DIRECTORY,&nd);
 	                                                                        ^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#529: FILE: fs/super.c:713:
+	error = path_lookup(dev_name, LOOKUP_FOLLOW|LOOKUP_POSITIVE, &nd);
 	                                                              ^^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#529: FILE: fs/super.c:713:
+	error = path_lookup(dev_name, LOOKUP_FOLLOW|LOOKUP_POSITIVE, &nd);
 	                                           ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#540: FILE: include/linux/dcache.h:224:
+extern struct dentry * __d_lookup(struct dentry *, struct qstr *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#540: FILE: include/linux/dcache.h:224:
+extern struct dentry * __d_lookup(struct dentry *, struct qstr *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#540: FILE: include/linux/dcache.h:224:
+extern struct dentry * __d_lookup(struct dentry *, struct qstr *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct qstr *' should also have an identifier name
#540: FILE: include/linux/dcache.h:224:
+extern struct dentry * __d_lookup(struct dentry *, struct qstr *);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#568: FILE: include/linux/fs.h:1313:
+extern int FASTCALL(path_lookup(const char *, unsigned, struct nameidata *));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#568: FILE: include/linux/fs.h:1313:
+extern int FASTCALL(path_lookup(const char *, unsigned, struct nameidata *));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#568: FILE: include/linux/fs.h:1313:
+extern int FASTCALL(path_lookup(const char *, unsigned, struct nameidata *));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned' should also have an identifier name
#568: FILE: include/linux/fs.h:1313:
+extern int FASTCALL(path_lookup(const char *, unsigned, struct nameidata *));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nameidata *' should also have an identifier name
#568: FILE: include/linux/fs.h:1313:
+extern int FASTCALL(path_lookup(const char *, unsigned, struct nameidata *));

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000472438.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 31 errors, 39 warnings, 16 checks, 460 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000472438.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
