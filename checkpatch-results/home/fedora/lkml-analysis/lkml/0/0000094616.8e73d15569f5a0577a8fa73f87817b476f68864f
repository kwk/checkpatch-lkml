WARNING:TYPO_SPELLING: 'arbitary' may be misspelled - perhaps 'arbitrary'?
#25: 
is fairly arbitary and due to the message length limit on the list.
          ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:SPACING: No space is necessary after a cast
#85: FILE: drivers/char/rio/rioctrl.c:171:
+			host = ((unsigned long) arg >> 16) & 0x0000FFFF;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#86: FILE: drivers/char/rio/rioctrl.c:172:
+			value = (unsigned long) arg & 0x0000ffff;

CHECK:CAMELCASE: Avoid CamelCase: <RIOHosts>
#91: FILE: drivers/char/rio/rioctrl.c:176:
+						writew(value, &p->RIOHosts[host].ParmMapP->timer);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <ParmMapP>
#91: FILE: drivers/char/rio/rioctrl.c:176:
+						writew(value, &p->RIOHosts[host].ParmMapP->timer);

CHECK:CAMELCASE: Avoid CamelCase: <RIOCommandRta>
#164: FILE: drivers/char/rio/rioctrl.c:191:
+		return RIOCommandRta(p, (unsigned long)arg, RIOFoadRta);

CHECK:CAMELCASE: Avoid CamelCase: <RIOFoadRta>
#164: FILE: drivers/char/rio/rioctrl.c:191:
+		return RIOCommandRta(p, (unsigned long)arg, RIOFoadRta);

CHECK:CAMELCASE: Avoid CamelCase: <RIOZombieRta>
#169: FILE: drivers/char/rio/rioctrl.c:195:
+		return RIOCommandRta(p, (unsigned long)arg, RIOZombieRta);

CHECK:CAMELCASE: Avoid CamelCase: <SpecialRupCmd>
#178: FILE: drivers/char/rio/rioctrl.c:210:
+			if (copy_from_user(&SpecialRupCmd, arg, sizeof(SpecialRupCmd))) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#187: FILE: drivers/char/rio/rioctrl.c:225:
+				printk(KERN_WARNING "rio: FAILED TO QUEUE SPECIAL RUP COMMAND\n");

CHECK:CAMELCASE: Avoid CamelCase: <RIOConnectTable>
#196: FILE: drivers/char/rio/rioctrl.c:247:
+		if (copy_to_user(arg, p->RIOConnectTable, TOTAL_MAP_ENTRIES * sizeof(struct Map))) {

CHECK:CAMELCASE: Avoid CamelCase: <Map>
#196: FILE: drivers/char/rio/rioctrl.c:247:
+		if (copy_to_user(arg, p->RIOConnectTable, TOTAL_MAP_ENTRIES * sizeof(struct Map))) {

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#205: FILE: drivers/char/rio/rioctrl.c:292:
+		if (copy_from_user(&p->RIOConnectTable[0], arg, TOTAL_MAP_ENTRIES * sizeof(struct Map))) {

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:CAMELCASE: Avoid CamelCase: <RIOBindTab>
#214: FILE: drivers/char/rio/rioctrl.c:338:
+		if (copy_to_user(arg, p->RIOBindTab, (sizeof(ulong) * MAX_RTA_BINDINGS))) {

CHECK:CAMELCASE: Avoid CamelCase: <Entry>
#232: FILE: drivers/char/rio/rioctrl.c:381:
+				else if (p->RIOBindTab[Entry] == (long)arg) {

WARNING:LONG_LINE: line length of 129 exceeds 100 columns
#238: FILE: drivers/char/rio/rioctrl.c:386:
+					rio_dprintk(RIO_DEBUG_CTRL, "Removing Rta %ld from p->RIOBindTab\n", (unsigned long)arg);

CHECK:CAMELCASE: Avoid CamelCase: <EmptySlot>
#248: FILE: drivers/char/rio/rioctrl.c:394:
+				p->RIOBindTab[EmptySlot] = (unsigned long)arg;

WARNING:LONG_LINE: line length of 118 exceeds 100 columns
#249: FILE: drivers/char/rio/rioctrl.c:395:
+				rio_dprintk(RIO_DEBUG_CTRL, "Adding Rta %lx to p->RIOBindTab\n", (unsigned long) arg);

CHECK:SPACING: No space is necessary after a cast
#249: FILE: drivers/char/rio/rioctrl.c:395:
+				rio_dprintk(RIO_DEBUG_CTRL, "Adding Rta %lx to p->RIOBindTab\n", (unsigned long) arg);

WARNING:LONG_LINE: line length of 126 exceeds 100 columns
#252: FILE: drivers/char/rio/rioctrl.c:397:
+				rio_dprintk(RIO_DEBUG_CTRL, "p->RIOBindTab full! - Rta %lx not added\n", (unsigned long) arg);

CHECK:SPACING: No space is necessary after a cast
#252: FILE: drivers/char/rio/rioctrl.c:397:
+				rio_dprintk(RIO_DEBUG_CTRL, "p->RIOBindTab full! - Rta %lx not added\n", (unsigned long) arg);

CHECK:SPACING: No space is necessary after a cast
#261: FILE: drivers/char/rio/rioctrl.c:405:
+		port = (unsigned long) arg;

CHECK:CAMELCASE: Avoid CamelCase: <MapEnt>
#271: FILE: drivers/char/rio/rioctrl.c:441:
+		if (copy_from_user(&MapEnt, arg, sizeof(MapEnt))) {

CHECK:CAMELCASE: Avoid CamelCase: <RIORtaDisCons>
#316: FILE: drivers/char/rio/rioctrl.c:477:
+		if (copy_to_user(arg, &p->RIORtaDisCons, sizeof(unsigned int))) {

CHECK:CAMELCASE: Avoid CamelCase: <RIOError>
#324: FILE: drivers/char/rio/rioctrl.c:484:
+		if (copy_to_user(arg, &p->RIOError, sizeof(struct Error)))

CHECK:CAMELCASE: Avoid CamelCase: <Error>
#324: FILE: drivers/char/rio/rioctrl.c:484:
+		if (copy_to_user(arg, &p->RIOError, sizeof(struct Error)))

CHECK:CAMELCASE: Avoid CamelCase: <PortSetup>
#381: FILE: drivers/char/rio/rioctrl.c:529:
+		if (copy_from_user(&PortSetup, arg, sizeof(PortSetup))) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#390: FILE: drivers/char/rio/rioctrl.c:545:
+			printk(KERN_ERR "rio: No p->RIOPortp array!\n");

CHECK:CAMELCASE: Avoid CamelCase: <PortParams>
#419: FILE: drivers/char/rio/rioctrl.c:588:
+		if (copy_from_user(&PortParams, arg, sizeof(struct PortParams))) {

CHECK:CAMELCASE: Avoid CamelCase: <PortTty>
#438: FILE: drivers/char/rio/rioctrl.c:609:
+		if (copy_from_user(&PortTty, arg, sizeof(struct PortTty))) {

CHECK:CAMELCASE: Avoid CamelCase: <portStats>
#474: FILE: drivers/char/rio/rioctrl.c:658:
+		if (copy_from_user(&portStats, arg, sizeof(struct portStats))) {

CHECK:SPACING: No space is necessary after a cast
#491: FILE: drivers/char/rio/rioctrl.c:680:
+		port = (unsigned long) arg;

CHECK:CAMELCASE: Avoid CamelCase: <RIOConf>
#509: FILE: drivers/char/rio/rioctrl.c:714:
+		if (copy_to_user(arg, &p->RIOConf, sizeof(struct Conf))) {

CHECK:CAMELCASE: Avoid CamelCase: <Conf>
#509: FILE: drivers/char/rio/rioctrl.c:714:
+		if (copy_to_user(arg, &p->RIOConf, sizeof(struct Conf))) {

CHECK:CAMELCASE: Avoid CamelCase: <Timer>
#528: FILE: drivers/char/rio/rioctrl.c:735:
+				writew(p->RIOConf.Timer, &p->RIOHosts[Host].ParmMapP->timer);

CHECK:CAMELCASE: Avoid CamelCase: <Host>
#528: FILE: drivers/char/rio/rioctrl.c:735:
+				writew(p->RIOConf.Timer, &p->RIOHosts[Host].ParmMapP->timer);

CHECK:CAMELCASE: Avoid CamelCase: <DebugCtrl>
#538: FILE: drivers/char/rio/rioctrl.c:754:
+		if (copy_from_user(&DebugCtrl, arg, sizeof(DebugCtrl))) {

CHECK:CAMELCASE: Avoid CamelCase: <RIOVersid>
#565: FILE: drivers/char/rio/rioctrl.c:808:
+		if (copy_to_user(arg, RIOVersid(), sizeof(struct rioVersion))) {

CHECK:CAMELCASE: Avoid CamelCase: <rioVersion>
#565: FILE: drivers/char/rio/rioctrl.c:808:
+		if (copy_to_user(arg, RIOVersid(), sizeof(struct rioVersion))) {

CHECK:CAMELCASE: Avoid CamelCase: <RIONumHosts>
#602: FILE: drivers/char/rio/rioctrl.c:821:
+		if (copy_to_user(arg, &p->RIONumHosts, sizeof(p->RIONumHosts))) {

CHECK:SPACING: No space is necessary after a cast
#611: FILE: drivers/char/rio/rioctrl.c:832:
+		rio_dprintk(RIO_DEBUG_CTRL, "RIO_HOST_FOAD %ld\n", (unsigned long) arg);

WARNING:LONG_LINE: line length of 148 exceeds 100 columns
#620: FILE: drivers/char/rio/rioctrl.c:843:
+			memset(&p->RIOHosts[Host].Flags, 0, ((char *) &p->RIOHosts[Host].____end_marker____) - ((char *) &p->RIOHosts[Host].Flags));

CHECK:SPACING: No space is necessary after a cast
#620: FILE: drivers/char/rio/rioctrl.c:843:
+			memset(&p->RIOHosts[Host].Flags, 0, ((char *) &p->RIOHosts[Host].____end_marker____) - ((char *) &p->RIOHosts[Host].Flags));

CHECK:CAMELCASE: Avoid CamelCase: <Flags>
#620: FILE: drivers/char/rio/rioctrl.c:843:
+			memset(&p->RIOHosts[Host].Flags, 0, ((char *) &p->RIOHosts[Host].____end_marker____) - ((char *) &p->RIOHosts[Host].Flags));

CHECK:CAMELCASE: Avoid CamelCase: <DownLoad>
#629: FILE: drivers/char/rio/rioctrl.c:866:
+		if (copy_from_user(&DownLoad, arg, sizeof(DownLoad))) {

CHECK:CAMELCASE: Avoid CamelCase: <HostReq>
#659: FILE: drivers/char/rio/rioctrl.c:915:
+		if (copy_from_user(&HostReq, arg, sizeof(HostReq))) {

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#668: FILE: drivers/char/rio/rioctrl.c:927:
+		if (copy_to_user(HostReq.HostP, &p->RIOHosts[HostReq.HostNum], sizeof(struct Host))) {

CHECK:CAMELCASE: Avoid CamelCase: <HostP>
#668: FILE: drivers/char/rio/rioctrl.c:927:
+		if (copy_to_user(HostReq.HostP, &p->RIOHosts[HostReq.HostNum], sizeof(struct Host))) {

CHECK:CAMELCASE: Avoid CamelCase: <HostNum>
#668: FILE: drivers/char/rio/rioctrl.c:927:
+		if (copy_to_user(HostReq.HostP, &p->RIOHosts[HostReq.HostNum], sizeof(struct Host))) {

CHECK:CAMELCASE: Avoid CamelCase: <HostDpRam>
#677: FILE: drivers/char/rio/rioctrl.c:936:
+		if (copy_from_user(&HostDpRam, arg, sizeof(HostDpRam))) {

CHECK:CAMELCASE: Avoid CamelCase: <Caddr>
#687: FILE: drivers/char/rio/rioctrl.c:953:
+				copy[off] = readb(&p->RIOHosts[HostDpRam.HostNum].Caddr[off]);

CHECK:CAMELCASE: Avoid CamelCase: <DpRamP>
#688: FILE: drivers/char/rio/rioctrl.c:954:
+			if (copy_to_user(HostDpRam.DpRamP, copy, sizeof(struct DpRam))) {

CHECK:CAMELCASE: Avoid CamelCase: <DpRam>
#688: FILE: drivers/char/rio/rioctrl.c:954:
+			if (copy_to_user(HostDpRam.DpRamP, copy, sizeof(struct DpRam))) {

WARNING:LONG_LINE: line length of 120 exceeds 100 columns
#694: FILE: drivers/char/rio/rioctrl.c:959:
+		} else if (copy_to_user(HostDpRam.DpRamP, p->RIOHosts[HostDpRam.HostNum].Caddr, sizeof(struct DpRam))) {

CHECK:SPACING: No space is necessary after a cast
#704: FILE: drivers/char/rio/rioctrl.c:968:
+		if ((unsigned long) arg > 511) {

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#705: FILE: drivers/char/rio/rioctrl.c:969:
+			rio_dprintk(RIO_DEBUG_CTRL, "RIO_SET_BUSY: Bad port number %ld\n", (unsigned long) arg);

CHECK:SPACING: No space is necessary after a cast
#705: FILE: drivers/char/rio/rioctrl.c:969:
+			rio_dprintk(RIO_DEBUG_CTRL, "RIO_SET_BUSY: Bad port number %ld\n", (unsigned long) arg);

CHECK:SPACING: No space is necessary after a cast
#711: FILE: drivers/char/rio/rioctrl.c:974:
+		p->RIOPortp[(unsigned long) arg]->State |= RIO_BUSY;

CHECK:CAMELCASE: Avoid CamelCase: <RIOPortp>
#711: FILE: drivers/char/rio/rioctrl.c:974:
+		p->RIOPortp[(unsigned long) arg]->State |= RIO_BUSY;

CHECK:CAMELCASE: Avoid CamelCase: <State>
#711: FILE: drivers/char/rio/rioctrl.c:974:
+		p->RIOPortp[(unsigned long) arg]->State |= RIO_BUSY;

CHECK:CAMELCASE: Avoid CamelCase: <PortReq>
#720: FILE: drivers/char/rio/rioctrl.c:984:
+		if (copy_from_user(&PortReq, arg, sizeof(PortReq))) {

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#729: FILE: drivers/char/rio/rioctrl.c:996:
+		if (copy_to_user(PortReq.PortP, p->RIOPortp[PortReq.SysPort], sizeof(struct Port))) {

CHECK:CAMELCASE: Avoid CamelCase: <PortP>
#729: FILE: drivers/char/rio/rioctrl.c:996:
+		if (copy_to_user(PortReq.PortP, p->RIOPortp[PortReq.SysPort], sizeof(struct Port))) {

CHECK:CAMELCASE: Avoid CamelCase: <SysPort>
#729: FILE: drivers/char/rio/rioctrl.c:996:
+		if (copy_to_user(PortReq.PortP, p->RIOPortp[PortReq.SysPort], sizeof(struct Port))) {

CHECK:CAMELCASE: Avoid CamelCase: <Port>
#729: FILE: drivers/char/rio/rioctrl.c:996:
+		if (copy_to_user(PortReq.PortP, p->RIOPortp[PortReq.SysPort], sizeof(struct Port))) {

CHECK:CAMELCASE: Avoid CamelCase: <RupReq>
#738: FILE: drivers/char/rio/rioctrl.c:1009:
+		if (copy_from_user(&RupReq, arg, sizeof(RupReq))) {

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#747: FILE: drivers/char/rio/rioctrl.c:1033:
+		if (copy_to_user(HostP->UnixRups[RupReq.RupNum].RupP, RupReq.RupP, sizeof(struct RUP))) {

CHECK:CAMELCASE: Avoid CamelCase: <UnixRups>
#747: FILE: drivers/char/rio/rioctrl.c:1033:
+		if (copy_to_user(HostP->UnixRups[RupReq.RupNum].RupP, RupReq.RupP, sizeof(struct RUP))) {

CHECK:CAMELCASE: Avoid CamelCase: <RupNum>
#747: FILE: drivers/char/rio/rioctrl.c:1033:
+		if (copy_to_user(HostP->UnixRups[RupReq.RupNum].RupP, RupReq.RupP, sizeof(struct RUP))) {

CHECK:CAMELCASE: Avoid CamelCase: <RupP>
#747: FILE: drivers/char/rio/rioctrl.c:1033:
+		if (copy_to_user(HostP->UnixRups[RupReq.RupNum].RupP, RupReq.RupP, sizeof(struct RUP))) {

CHECK:CAMELCASE: Avoid CamelCase: <LpbReq>
#756: FILE: drivers/char/rio/rioctrl.c:1046:
+		if (copy_from_user(&LpbReq, arg, sizeof(LpbReq))) {

CHECK:CAMELCASE: Avoid CamelCase: <LpbP>
#765: FILE: drivers/char/rio/rioctrl.c:1070:
+		if (copy_to_user(LpbReq.LpbP, &HostP->LinkStrP[LpbReq.Link], sizeof(struct LPB))) {

CHECK:CAMELCASE: Avoid CamelCase: <LinkStrP>
#765: FILE: drivers/char/rio/rioctrl.c:1070:
+		if (copy_to_user(LpbReq.LpbP, &HostP->LinkStrP[LpbReq.Link], sizeof(struct LPB))) {

CHECK:CAMELCASE: Avoid CamelCase: <Link>
#765: FILE: drivers/char/rio/rioctrl.c:1070:
+		if (copy_to_user(LpbReq.LpbP, &HostP->LinkStrP[LpbReq.Link], sizeof(struct LPB))) {

CHECK:CAMELCASE: Avoid CamelCase: <RIOSignalProcess>
#775: FILE: drivers/char/rio/rioctrl.c:1102:
+		p->RIOSignalProcess = current->pid;

CHECK:SPACING: No space is necessary after a cast
#790: FILE: drivers/char/rio/rioctrl.c:1144:
+		port = (unsigned long) arg;

CHECK:CAMELCASE: Avoid CamelCase: <SendPack>
#799: FILE: drivers/char/rio/rioctrl.c:1174:
+		if (copy_from_user(&SendPack, arg, sizeof(SendPack))) {

CHECK:CAMELCASE: Avoid CamelCase: <Data>
#808: FILE: drivers/char/rio/rioctrl.c:1194:
+			writeb(SendPack.Data[loop], &PacketP->data[loop]);

CHECK:CAMELCASE: Avoid CamelCase: <PacketP>
#808: FILE: drivers/char/rio/rioctrl.c:1194:
+			writeb(SendPack.Data[loop], &PacketP->data[loop]);

CHECK:CAMELCASE: Avoid CamelCase: <Len>
#811: FILE: drivers/char/rio/rioctrl.c:1196:
+		writeb(SendPack.Len, &PacketP->len);

CHECK:CAMELCASE: Avoid CamelCase: <RIONoMessage>
#820: FILE: drivers/char/rio/rioctrl.c:1218:
+		if (copy_to_user(arg, &p->RIONoMessage, sizeof(p->RIONoMessage))) {

CHECK:CAMELCASE: Avoid CamelCase: <SubCmd>
#829: FILE: drivers/char/rio/rioctrl.c:1226:
+		if (copy_from_user(&SubCmd, arg, sizeof(struct SubCmdStruct))) {

CHECK:CAMELCASE: Avoid CamelCase: <SubCmdStruct>
#829: FILE: drivers/char/rio/rioctrl.c:1226:
+		if (copy_from_user(&SubCmd, arg, sizeof(struct SubCmdStruct))) {

CHECK:CAMELCASE: Avoid CamelCase: <RIOMemDump>
#838: FILE: drivers/char/rio/rioctrl.c:1256:
+		if (copy_to_user(arg, p->RIOMemDump, MEMDUMP_SIZE)) {

CHECK:SPACING: No space is necessary after a cast
#847: FILE: drivers/char/rio/rioctrl.c:1264:
+		if ((unsigned long) arg >= p->RIONumHosts)

CHECK:SPACING: No space is necessary after a cast
#851: FILE: drivers/char/rio/rioctrl.c:1266:
+		rio_dprintk(RIO_DEBUG_CTRL, "Set interrupt for host %ld\n", (unsigned long) arg);

CHECK:SPACING: No space is necessary after a cast
#852: FILE: drivers/char/rio/rioctrl.c:1267:
+		writeb(0xFF, &p->RIOHosts[(unsigned long) arg].SetInt);

CHECK:CAMELCASE: Avoid CamelCase: <SetInt>
#852: FILE: drivers/char/rio/rioctrl.c:1267:
+		writeb(0xFF, &p->RIOHosts[(unsigned long) arg].SetInt);

CHECK:SPACING: No space is necessary after a cast
#857: FILE: drivers/char/rio/rioctrl.c:1271:
+		if ((unsigned long) arg >= p->RIONumHosts)

CHECK:SPACING: No space is necessary after a cast
#861: FILE: drivers/char/rio/rioctrl.c:1273:
+		rio_dprintk(RIO_DEBUG_CTRL, "Clear interrupt for host %ld\n", (unsigned long) arg);

CHECK:SPACING: No space is necessary after a cast
#862: FILE: drivers/char/rio/rioctrl.c:1274:
+		writeb(0xFF, &p->RIOHosts[(unsigned long) arg].ResetInt);

CHECK:CAMELCASE: Avoid CamelCase: <ResetInt>
#862: FILE: drivers/char/rio/rioctrl.c:1274:
+		writeb(0xFF, &p->RIOHosts[(unsigned long) arg].ResetInt);

CHECK:CAMELCASE: Avoid CamelCase: <RIOReadCheck>
#869: FILE: drivers/char/rio/rioctrl.c:1280:
+		if (copy_to_user(arg, &p->RIOReadCheck, sizeof(unsigned int))) {

CHECK:CAMELCASE: Avoid CamelCase: <CdRegister>
#886: FILE: drivers/char/rio/rioctrl.c:1322:
+		if (copy_to_user(arg, &p->CdRegister, sizeof(unsigned int))) {

CHECK:SPACING: No space is necessary after a cast
#895: FILE: drivers/char/rio/rioctrl.c:1335:
+			unsigned int port = (unsigned long) arg & RIO_MODEM_MASK;

CHECK:SPACING: No space is necessary after a cast
#899: FILE: drivers/char/rio/rioctrl.c:1338:
+			switch ((unsigned long) arg & RIO_DEV_MASK) {

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#905: FILE: drivers/char/rio/rioctrl.c:1341:
+				rio_dprintk(RIO_DEBUG_CTRL, "Makedev direct 0x%x is 0x%x\n", port, ret);

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#912: FILE: drivers/char/rio/rioctrl.c:1345:
+				rio_dprintk(RIO_DEBUG_CTRL, "Makedev modem 0x%x is 0x%x\n", port, ret);

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#919: FILE: drivers/char/rio/rioctrl.c:1349:
+				rio_dprintk(RIO_DEBUG_CTRL, "Makedev printer 0x%x is 0x%x\n", port, ret);

CHECK:SPACING: No space is necessary after a cast
#931: FILE: drivers/char/rio/rioctrl.c:1366:
+			dv = (dev_t) ((unsigned long) arg);

CHECK:CAMELCASE: Avoid CamelCase: <RIOPreemptiveCmd>
#956: FILE: drivers/char/rio/rioctrl.c:1389:
+int RIOPreemptiveCmd(struct rio_info *p, struct Port *PortP, u8 Cmd)

CHECK:CAMELCASE: Avoid CamelCase: <Cmd>
#956: FILE: drivers/char/rio/rioctrl.c:1389:
+int RIOPreemptiveCmd(struct rio_info *p, struct Port *PortP, u8 Cmd)

CHECK:CAMELCASE: Avoid CamelCase: <CmdBlkP>
#965: FILE: drivers/char/rio/rioctrl.c:1407:
+	rio_dprintk(RIO_DEBUG_CTRL, "Command blk 0x%p - InUse now %d\n", CmdBlkP, PortP->InUse);

CHECK:CAMELCASE: Avoid CamelCase: <InUse>
#965: FILE: drivers/char/rio/rioctrl.c:1407:
+	rio_dprintk(RIO_DEBUG_CTRL, "Command blk 0x%p - InUse now %d\n", CmdBlkP, PortP->InUse);

CHECK:SPACING: No space is necessary after a cast
#974: FILE: drivers/char/rio/rioctrl.c:1421:
+	CmdBlkP->PostArg = (unsigned long) PortP;

CHECK:CAMELCASE: Avoid CamelCase: <PostArg>
#974: FILE: drivers/char/rio/rioctrl.c:1421:
+	CmdBlkP->PostArg = (unsigned long) PortP;

WARNING:LONG_LINE: line length of 120 exceeds 100 columns
#983: FILE: drivers/char/rio/rioctrl.c:1433:
+		rio_dprintk(RIO_DEBUG_CTRL, "Queue MEMDUMP command blk 0x%p (addr 0x%x)\n", CmdBlkP, (int) SubCmd.Addr);

CHECK:SPACING: No space is necessary after a cast
#983: FILE: drivers/char/rio/rioctrl.c:1433:
+		rio_dprintk(RIO_DEBUG_CTRL, "Queue MEMDUMP command blk 0x%p (addr 0x%x)\n", CmdBlkP, (int) SubCmd.Addr);

CHECK:CAMELCASE: Avoid CamelCase: <Addr>
#983: FILE: drivers/char/rio/rioctrl.c:1433:
+		rio_dprintk(RIO_DEBUG_CTRL, "Queue MEMDUMP command blk 0x%p (addr 0x%x)\n", CmdBlkP, (int) SubCmd.Addr);

WARNING:LONG_LINE: line length of 121 exceeds 100 columns
#993: FILE: drivers/char/rio/rioctrl.c:1441:
+		rio_dprintk(RIO_DEBUG_CTRL, "Queue READ_REGISTER (0x%x) command blk 0x%p\n", (int) SubCmd.Addr, CmdBlkP);

CHECK:SPACING: No space is necessary after a cast
#993: FILE: drivers/char/rio/rioctrl.c:1441:
+		rio_dprintk(RIO_DEBUG_CTRL, "Queue READ_REGISTER (0x%x) command blk 0x%p\n", (int) SubCmd.Addr, CmdBlkP);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000094616.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 0 errors, 18 warnings, 93 checks, 930 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000094616.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
