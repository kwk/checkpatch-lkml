WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#82: FILE: arch/x86_64/boot/compressed/misc.c:88:
+#define RM_NEW_CL_POINTER ((char *)(unsigned long)(*(unsigned *)(real_mode+0x228)))

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#82: FILE: arch/x86_64/boot/compressed/misc.c:88:
+#define RM_NEW_CL_POINTER ((char *)(unsigned long)(*(unsigned *)(real_mode+0x228)))
                                                                           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#93: FILE: arch/x86_64/boot/compressed/misc.c:105:
+static int memcmp(const void *s1, const void *s2, unsigned n);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#98: FILE: arch/x86_64/boot/compressed/misc.c:110:
+static unsigned simple_strtou(const char *cp, char **endp, unsigned base);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#98: FILE: arch/x86_64/boot/compressed/misc.c:110:
+static unsigned simple_strtou(const char *cp, char **endp, unsigned base);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#115: FILE: arch/x86_64/boot/compressed/misc.c:132:
+static unsigned serial_base = DEFAULT_BASE;

CHECK:SPACING: No space is necessary after a cast
#169: FILE: arch/x86_64/boot/compressed/misc.c:223:
+		vidmem = (char *) 0xb0000;

CHECK:SPACING: No space is necessary after a cast
#172: FILE: arch/x86_64/boot/compressed/misc.c:226:
+		vidmem = (char *) 0xb8000;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#183: FILE: arch/x86_64/boot/compressed/misc.c:237:
+	if (ch == '\n') {
+		serial_putc('\r');
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#201: FILE: arch/x86_64/boot/compressed/misc.c:255:
+	int ch;
+	while((ch = *str++) != '\0') {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#201: FILE: arch/x86_64/boot/compressed/misc.c:255:
+	while((ch = *str++) != '\0') {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#202: FILE: arch/x86_64/boot/compressed/misc.c:256:
+		if (ch == '\n') {
+			serial_putc('\r');
+		}

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#211: FILE: arch/x86_64/boot/compressed/misc.c:265:
+	unsigned base = DEFAULT_BASE;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#212: FILE: arch/x86_64/boot/compressed/misc.c:266:
+	unsigned baud = DEFAULT_BAUD;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#213: FILE: arch/x86_64/boot/compressed/misc.c:267:
+	unsigned divisor;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#222: FILE: arch/x86_64/boot/compressed/misc.c:276:
+			static const unsigned bases[] = { 0x3f8, 0x2f8 };

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#223: FILE: arch/x86_64/boot/compressed/misc.c:277:
+			unsigned port;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'port > 1'
#228: FILE: arch/x86_64/boot/compressed/misc.c:282:
+			if ((port > 1) || (s == e))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 's == e'
#228: FILE: arch/x86_64/boot/compressed/misc.c:282:
+			if ((port > 1) || (s == e))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'baud == 0'
#238: FILE: arch/x86_64/boot/compressed/misc.c:292:
+		if ((baud == 0) || (s == e))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 's == e'
#238: FILE: arch/x86_64/boot/compressed/misc.c:292:
+		if ((baud == 0) || (s == e))

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#254: FILE: arch/x86_64/boot/compressed/misc.c:308:
+
+}

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#258: FILE: arch/x86_64/boot/compressed/misc.c:312:
+	if (console == CONSOLE_VID) {
[...]
+	} else if (console == CONSOLE_SERIAL) {
[...]

CHECK:LINE_SPACING: Please don't use multiple blank lines
#299: FILE: arch/x86_64/boot/compressed/misc.c:353:
+
+

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#302: FILE: arch/x86_64/boot/compressed/misc.c:356:
+	return isdigit(ch)? (ch - '0') : tolower(ch) - 'a' + 10;
 	                  ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#311: FILE: arch/x86_64/boot/compressed/misc.c:365:
+static unsigned simple_strtou(const char *cp, char **endp, unsigned base)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#311: FILE: arch/x86_64/boot/compressed/misc.c:365:
+static unsigned simple_strtou(const char *cp, char **endp, unsigned base)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#313: FILE: arch/x86_64/boot/compressed/misc.c:367:
+	unsigned result = 0,value;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#313: FILE: arch/x86_64/boot/compressed/misc.c:367:
+	unsigned result = 0,value;
 	                   ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#330: FILE: arch/x86_64/boot/compressed/misc.c:384:
+		result = result*base + value;
 		               ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#345: FILE: arch/x86_64/boot/compressed/misc.c:410:
+static int memcmp(const void *s1, const void *s2, unsigned n)

WARNING:LINE_SPACING: Missing a blank line after declarations
#350: FILE: arch/x86_64/boot/compressed/misc.c:415:
+	int result = 0;
+	for(i = 0; (result == 0) && (i < n); i++) {

ERROR:SPACING: space required before the open parenthesis '('
#350: FILE: arch/x86_64/boot/compressed/misc.c:415:
+	for(i = 0; (result == 0) && (i < n); i++) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#350: FILE: arch/x86_64/boot/compressed/misc.c:415:
+	for(i = 0; (result == 0) && (i < n); i++) {
+		result = *str1++ - *str2++;
+		}

WARNING:LINE_SPACING: Missing a blank line after declarations
#359: FILE: arch/x86_64/boot/compressed/misc.c:424:
+	size_t len = 0;
+	while (*str++)

WARNING:LINE_SPACING: Missing a blank line after declarations
#367: FILE: arch/x86_64/boot/compressed/misc.c:432:
+	size_t len;
+	len = strlen(needle);

ERROR:SPACING: space required before the open parenthesis '('
#368: FILE: arch/x86_64/boot/compressed/misc.c:433:
+	while(*haystack) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#387: FILE: arch/x86_64/boot/compressed/misc.c:564:
+	char *cmdline;
+	cmdline = saved_command_line;

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#388: FILE: arch/x86_64/boot/compressed/misc.c:565:
+	if (RM_NEW_CL_POINTER) {
[...]
+	} else if (OLD_CL_MAGIC == RM_OLD_CL_MAGIC) {
[...]

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000052547.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 5 errors, 24 warnings, 10 checks, 353 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000052547.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
