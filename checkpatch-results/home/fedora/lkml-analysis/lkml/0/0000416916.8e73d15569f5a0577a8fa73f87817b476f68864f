ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#42: 
--- a/drivers/serial/8250.c	Sat Nov  2 21:02:11 2002

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#275: FILE: drivers/serial/8250.c:524:
+	DEBUG_AUTOCONF("ttyS%d: autoconf (0x%04x, 0x%08lx): ",
+			up->port.line, up->port.iobase, up->port.membase);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#488: FILE: drivers/serial/8250.c:1008:
+		BUG_ON(i->head != &up->list);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:CVS_KEYWORD: CVS style keyword markers, these will _not_ be updated
#689: FILE: drivers/serial/8250_pci.c:14:
+ *  $Id: 8250_pci.c,v 1.28 2002/11/02 11:14:18 rmk Exp $

Since linux moved to git, the CVS markers are no longer used.
So, CVS style keywords ($Id$, $Revision$, $Log$) should not be
added.

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#729: FILE: drivers/serial/8250_pci.c:208:
+static int __devinit pci_plx9050_fn(struct pci_dev *dev, int enable)

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#739: FILE: drivers/serial/8250_pci.c:270:
+static int __devinit pci_siig10x_fn(struct pci_dev *dev, int enable)

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#749: FILE: drivers/serial/8250_pci.c:301:
+static int __devinit pci_siig20x_fn(struct pci_dev *dev, int enable)

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#759: FILE: drivers/serial/8250_pci.c:322:
+static int __devinit pci_inteli960ni_fn(struct pci_dev *dev, int enable)

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#769: FILE: drivers/serial/8250_pci.c:381:
+static int __devinit pci_timedia_fn(struct pci_dev *dev, int enable)

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#795: FILE: drivers/serial/8250_pci.c:405:
+static int __devinit pci_hp_diva(struct pci_dev *dev, int enable)

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#830: FILE: drivers/serial/8250_pci.c:434:
+static int __devinit pci_xircom_fn(struct pci_dev *dev, int enable)

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#887: FILE: drivers/serial/8250_pci.c:687:
+static int __devinit

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#938: FILE: drivers/serial/8250_pci.c:730:
+			printk(KERN_INFO

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*priv)...) over kmalloc(sizeof(struct serial_private)...)
#980: FILE: drivers/serial/8250_pci.c:758:
+	priv = kmalloc(sizeof(struct serial_private) +

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1001: FILE: drivers/serial/8250_pci.c:775:
+		printk("Setup PCI port: port %x, irq %d, type %d\n",

WARNING:HOTPLUG_SECTION: Using __devexit is unnecessary
#1030: FILE: drivers/serial/8250_pci.c:801:
 static void __devexit pci_remove_one(struct pci_dev *dev)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1108: FILE: drivers/serial/core.c:1981:
+	printk(drv->dev_name, port->line);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1109: FILE: drivers/serial/core.c:1982:
+	printk(" at ");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1139: FILE: drivers/serial/core.c:2441:
+		printk(KERN_ERR "Attempt to unregister ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1140: FILE: drivers/serial/core.c:2442:
+		printk(drv->dev_name, line);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1141: FILE: drivers/serial/core.c:2443:
+		printk("\n");

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1150: FILE: drivers/serial/core.c:2456:
+EXPORT_SYMBOL(uart_write_wakeup);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

CHECK:BIT_MACRO: Prefer using the BIT macro
#1161: FILE: include/linux/serial_core.h:157:
+#define UPF_FOURPORT		(1 << 1)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#1169: FILE: include/linux/serial_core.h:171:
+#define UPF_BOOT_ONLYMCA	(1 << 22)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1170: FILE: include/linux/serial_core.h:172:
+#define UPF_CONS_FLOW		(1 << 23)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1171: FILE: include/linux/serial_core.h:173:
+#define UPF_SHARE_IRQ		(1 << 24)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000416916.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 19 warnings, 6 checks, 1084 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000416916.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
