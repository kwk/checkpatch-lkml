WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#42: 
version of kgdb available from kgdb.sourceforge.net. I believe that all of us 

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#82: FILE: include/linux/debugger.h:1:
+#ifndef _DEBUGGER_H_

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:CAMELCASE: Avoid CamelCase: <exVector>
#96: FILE: include/linux/debugger.h:15:
+typedef int gdb_debug_hook(int exVector, int signo, int err_code,

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

ERROR:SPACING: space required after that ',' (ctx:VxV)
#99: FILE: include/linux/debugger.h:18:
+#define CHK_DEBUGGER(trapnr,signr,error_code,regs,after)			\
                            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#99: FILE: include/linux/debugger.h:18:
+#define CHK_DEBUGGER(trapnr,signr,error_code,regs,after)			\
                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#99: FILE: include/linux/debugger.h:18:
+#define CHK_DEBUGGER(trapnr,signr,error_code,regs,after)			\
                                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#99: FILE: include/linux/debugger.h:18:
+#define CHK_DEBUGGER(trapnr,signr,error_code,regs,after)			\
                                                  ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'regs' - possible side-effects?
#99: FILE: include/linux/debugger.h:18:
+#define CHK_DEBUGGER(trapnr,signr,error_code,regs,after)			\
+    {									\
+	if (linux_debug_hook != (gdb_debug_hook *) NULL && !user_mode(regs)) \
+	{								\
+		(*linux_debug_hook)(trapnr, signr, error_code, regs) ;	\
+		after;							\
+	}								\
+    }

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#100: FILE: include/linux/debugger.h:19:
+    {^I^I^I^I^I^I^I^I^I\$

CHECK:SPACING: No space is necessary after a cast
#101: FILE: include/linux/debugger.h:20:
+	if (linux_debug_hook != (gdb_debug_hook *) NULL && !user_mode(regs)) \

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#101: FILE: include/linux/debugger.h:20:
+	if (linux_debug_hook != (gdb_debug_hook *) NULL && !user_mode(regs)) \
+	{								\

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#106: FILE: include/linux/debugger.h:25:
+    }$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#128: FILE: include/linux/debugger.h:47:
+#define CHK_DEBUGGER(trapnr,signr,error_code,regs,after)	\
                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#128: FILE: include/linux/debugger.h:47:
+#define CHK_DEBUGGER(trapnr,signr,error_code,regs,after)	\
                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#128: FILE: include/linux/debugger.h:47:
+#define CHK_DEBUGGER(trapnr,signr,error_code,regs,after)	\
                                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#128: FILE: include/linux/debugger.h:47:
+#define CHK_DEBUGGER(trapnr,signr,error_code,regs,after)	\
                                                  ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#157: FILE: include/linux/kgdb.h:1:
+#ifndef _KGDB_H_

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#167: FILE: include/linux/kgdb.h:11:
+#include <asm/atomic.h>

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#182: FILE: include/linux/kgdb.h:26:
+extern void breakpoint(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#183: FILE: include/linux/kgdb.h:27:
+extern void kgdb_schedule_breakpoint(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#184: FILE: include/linux/kgdb.h:28:
+extern void kgdb_process_breakpoint(void);

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#185: FILE: include/linux/kgdb.h:29:
+extern volatile int kgdb_connected;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#229: FILE: include/linux/kgdb.h:73:
+ * must, provide. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#230: FILE: include/linux/kgdb.h:74:
+extern int kgdb_arch_init(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#231: FILE: include/linux/kgdb.h:75:
+extern void regs_to_gdb_regs(unsigned long *gdb_regs, struct pt_regs *regs);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#232: FILE: include/linux/kgdb.h:76:
+extern void sleeping_thread_to_gdb_regs(unsigned long *gdb_regs,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#234: FILE: include/linux/kgdb.h:78:
+extern void gdb_regs_to_regs(unsigned long *gdb_regs, struct pt_regs *regs);

CHECK:CAMELCASE: Avoid CamelCase: <exceptionNo>
#235: FILE: include/linux/kgdb.h:79:
+extern void kgdb_printexceptioninfo(int exceptionNo, int errorcode,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#235: FILE: include/linux/kgdb.h:79:
+extern void kgdb_printexceptioninfo(int exceptionNo, int errorcode,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#237: FILE: include/linux/kgdb.h:81:
+extern void kgdb_disable_hw_debug(struct pt_regs *regs);

CHECK:CAMELCASE: Avoid CamelCase: <eVector>
#238: FILE: include/linux/kgdb.h:82:
+extern void kgdb_post_master_code(struct pt_regs *regs, int eVector,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#238: FILE: include/linux/kgdb.h:82:
+extern void kgdb_post_master_code(struct pt_regs *regs, int eVector,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#240: FILE: include/linux/kgdb.h:84:
+extern int kgdb_arch_handle_exception(int vector, int signo, int err_code,

CHECK:CAMELCASE: Avoid CamelCase: <InBuffer>
#241: FILE: include/linux/kgdb.h:85:
+				      char *InBuffer, char *outBuffer,

CHECK:CAMELCASE: Avoid CamelCase: <outBuffer>
#241: FILE: include/linux/kgdb.h:85:
+				      char *InBuffer, char *outBuffer,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#243: FILE: include/linux/kgdb.h:87:
+extern int kgdb_arch_set_break(unsigned long addr, int type);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#244: FILE: include/linux/kgdb.h:88:
+extern int kgdb_arch_remove_break(unsigned long addr, int type);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#245: FILE: include/linux/kgdb.h:89:
+extern void kgdb_correct_hw_break(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#246: FILE: include/linux/kgdb.h:90:
+extern void kgdb_shadowinfo(struct pt_regs *regs, char *buffer,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#247: FILE: include/linux/kgdb.h:91:
+			    unsigned threadid);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#248: FILE: include/linux/kgdb.h:92:
+extern struct task_struct *kgdb_get_shadow_thread(struct pt_regs *regs,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#250: FILE: include/linux/kgdb.h:94:
+extern struct pt_regs *kgdb_shadow_regs(struct pt_regs *regs, int threadid);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#255: FILE: include/linux/kgdb.h:99:
+	unsigned shadowth;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#259: FILE: include/linux/kgdb.h:103:
+typedef unsigned char threadref[8];

WARNING:SPACING: Unnecessary space before function pointer arguments
#262: FILE: include/linux/kgdb.h:106:
+	int (*read_char) (void);

WARNING:SPACING: Unnecessary space before function pointer arguments
#263: FILE: include/linux/kgdb.h:107:
+	void (*write_char) (int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#263: FILE: include/linux/kgdb.h:107:
+	void (*write_char) (int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:SPACING: Unnecessary space before function pointer arguments
#264: FILE: include/linux/kgdb.h:108:
+	void (*flush) (void);

WARNING:SPACING: Unnecessary space before function pointer arguments
#265: FILE: include/linux/kgdb.h:109:
+	int (*hook) (void);

WARNING:CONST_STRUCT: struct kgdb_arch should normally be const
#269: FILE: include/linux/kgdb.h:113:
+extern struct kgdb_arch arch_kgdb_ops;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#274: FILE: include/linux/kgdb.h:118:
+extern void kgdb8250_add_port(int i, struct uart_port *serial_req);

CHECK:CAMELCASE: Avoid CamelCase: <longValue>
#276: FILE: include/linux/kgdb.h:120:
+int kgdb_hex2long(char **ptr, long *longValue);

ERROR:SPACING: space required before the open parenthesis '('
#282: FILE: include/linux/kgdb.h:126:
+#define kgdb_process_breakpoint()      do {} while(0)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#322: FILE: kernel/kgdb.c:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#342: FILE: kernel/kgdb.c:21:
+ * thread support, support for multiple processors,support for ia-32(x86) $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#349: FILE: kernel/kgdb.c:28:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#352: FILE: kernel/kgdb.c:31:
+ *  $

WARNING:TYPO_SPELLING: 'Origianl' may be misspelled - perhaps 'Original'?
#354: FILE: kernel/kgdb.c:33:
+ * Origianl kgdb, compatibility with 2.1.xx kernel by David Grothe <dave@gcom.com>
    ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#367: FILE: kernel/kgdb.c:46:
+#include <asm/uaccess.h>

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#369: FILE: kernel/kgdb.c:48:
+#include <asm/atomic.h>

WARNING:INCLUDE_LINUX: Use #include <linux/cacheflush.h> instead of <asm/cacheflush.h>
#372: FILE: kernel/kgdb.c:51:
+#include <asm/cacheflush.h>

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#387: FILE: kernel/kgdb.c:66:
+int kgdb_initialized = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#388: FILE: kernel/kgdb.c:67:
+volatile int kgdb_connected;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#391: FILE: kernel/kgdb.c:70:
+int kgdb_enter = 0;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#394: FILE: kernel/kgdb.c:73:
+ * also at runtime. */

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#395: FILE: kernel/kgdb.c:74:
+int kgdb_useraccess = 0;

WARNING:CONST_STRUCT: struct kgdb_arch should normally be const
#405: FILE: kernel/kgdb.c:84:
+struct kgdb_arch *kgdb_ops = &arch_kgdb_ops;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#410: FILE: kernel/kgdb.c:89:
+static volatile int procindebug[KGDB_MAX_NO_CPUS];

WARNING:TYPO_SPELLING: 'initalization' may be misspelled - perhaps 'initialization'?
#428: FILE: kernel/kgdb.c:107:
+ * This function will handle the initalization of any architecture specific
                                  ^^^^^^^^^^^^^

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#432: FILE: kernel/kgdb.c:111:
+int __attribute__ ((weak))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#433: FILE: kernel/kgdb.c:112:
+    kgdb_arch_init(void)$

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#438: FILE: kernel/kgdb.c:117:
+void __attribute__ ((weak))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#439: FILE: kernel/kgdb.c:118:
+    regs_to_gdb_regs(unsigned long *gdb_regs, struct pt_regs *regs)$

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#443: FILE: kernel/kgdb.c:122:
+void __attribute__ ((weak))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#444: FILE: kernel/kgdb.c:123:
+    sleeping_thread_to_gdb_regs(unsigned long *gdb_regs, struct task_struct *p)$

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#448: FILE: kernel/kgdb.c:127:
+void __attribute__ ((weak))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#449: FILE: kernel/kgdb.c:128:
+    gdb_regs_to_regs(unsigned long *gdb_regs, struct pt_regs *regs)$

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#453: FILE: kernel/kgdb.c:132:
+void __attribute__ ((weak))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#454: FILE: kernel/kgdb.c:133:
+    kgdb_printexceptioninfo(int exceptionNo, int errorcode, char *buffer)$

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#458: FILE: kernel/kgdb.c:137:
+void __attribute__ ((weak))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#459: FILE: kernel/kgdb.c:138:
+    kgdb_disable_hw_debug(struct pt_regs *regs)$

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#463: FILE: kernel/kgdb.c:142:
+void __attribute__ ((weak))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#464: FILE: kernel/kgdb.c:143:
+    kgdb_post_master_code(struct pt_regs *regs, int eVector, int err_code)$

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#473: FILE: kernel/kgdb.c:152:
+int __attribute__ ((weak))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#474: FILE: kernel/kgdb.c:153:
+    kgdb_arch_handle_exception(int vector, int signo, int err_code, char *InBuffer,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#475: FILE: kernel/kgdb.c:154:
+    kgdb_arch_handle_exception(int vector, int signo, int err_code, char *InBuffer,
+			   char *outBuffer, struct pt_regs *regs)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#480: FILE: kernel/kgdb.c:159:
+int __attribute__ ((weak))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#481: FILE: kernel/kgdb.c:160:
+    kgdb_arch_set_break(unsigned long addr, int type)$

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#486: FILE: kernel/kgdb.c:165:
+int __attribute__ ((weak))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#487: FILE: kernel/kgdb.c:166:
+    kgdb_arch_remove_break(unsigned long addr, int type)$

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#492: FILE: kernel/kgdb.c:171:
+void __attribute__ ((weak))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#493: FILE: kernel/kgdb.c:172:
+    kgdb_correct_hw_break(void)$

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#497: FILE: kernel/kgdb.c:176:
+void __attribute__ ((weak))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#498: FILE: kernel/kgdb.c:177:
+    kgdb_shadowinfo(struct pt_regs *regs, char *buffer, unsigned threadid)$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#498: FILE: kernel/kgdb.c:177:
+    kgdb_shadowinfo(struct pt_regs *regs, char *buffer, unsigned threadid)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#502: FILE: kernel/kgdb.c:181:
+struct task_struct __attribute__ ((weak))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#503: FILE: kernel/kgdb.c:182:
+    * kgdb_get_shadow_thread(struct pt_regs *regs, int threadid)$

ERROR:SPACING: space prohibited after that '*' (ctx:ExW)
#503: FILE: kernel/kgdb.c:182:
+    * kgdb_get_shadow_thread(struct pt_regs *regs, int threadid)
     ^

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#508: FILE: kernel/kgdb.c:187:
+struct pt_regs __attribute__ ((weak))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#509: FILE: kernel/kgdb.c:188:
+    * kgdb_shadow_regs(struct pt_regs *regs, int threadid)$

ERROR:SPACING: space prohibited after that '*' (ctx:ExW)
#509: FILE: kernel/kgdb.c:188:
+    * kgdb_shadow_regs(struct pt_regs *regs, int threadid)
     ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#536: FILE: kernel/kgdb.c:215:
+		 * characters */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#611: FILE: kernel/kgdb.c:290:
+		 * packet. */

WARNING:BRACES: braces {} are not necessary for single statement blocks
#626: FILE: kernel/kgdb.c:305:
+	if (!kgdb_useraccess && (unsigned long)addr < TASK_SIZE) {
+		return -EINVAL;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:MEMORY_BARRIER: memory barrier without comment
#629: FILE: kernel/kgdb.c:308:
+	wmb();

WARNING:BRACES: braces {} are not necessary for single statement blocks
#633: FILE: kernel/kgdb.c:312:
+	if (get_user(*data, addr) != 0) {
+		ret = -EFAULT;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#646: FILE: kernel/kgdb.c:325:
+	if (!kgdb_useraccess && (unsigned long)addr < TASK_SIZE) {
+		return -EINVAL;
+	}

WARNING:MEMORY_BARRIER: memory barrier without comment
#649: FILE: kernel/kgdb.c:328:
+	wmb();

WARNING:BRACES: braces {} are not necessary for single statement blocks
#653: FILE: kernel/kgdb.c:332:
+	if (put_user(data, addr) != 0) {
+		ret = -EFAULT;
+	}

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#672: FILE: kernel/kgdb.c:351:
+	for (i = 0; i < count; i++) {
+

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#673: FILE: kernel/kgdb.c:352:
+		if ((error = get_char(mem++, &ch)) < 0)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#680: FILE: kernel/kgdb.c:359:
+	return (buf);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#697: FILE: kernel/kgdb.c:376:
+		if ((error = set_char(mem++, ch)) < 0)

CHECK:CAMELCASE: Avoid CamelCase: <numChars>
#709: FILE: kernel/kgdb.c:388:
+	int numChars = 0;

CHECK:CAMELCASE: Avoid CamelCase: <hexValue>
#710: FILE: kernel/kgdb.c:389:
+	int hexValue;

CHECK:BRACES: braces {} should be used on all arms of this statement
#716: FILE: kernel/kgdb.c:395:
+		if (hexValue >= 0) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#719: FILE: kernel/kgdb.c:398:
+		} else

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#744: FILE: kernel/kgdb.c:423:
+static char *pack_threadid(char *pkt, threadref * id)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#757: FILE: kernel/kgdb.c:436:
+void int_to_threadref(threadref * id, int value)

WARNING:LINE_SPACING: Missing a blank line after declarations
#764: FILE: kernel/kgdb.c:443:
+		int i = 4;
+		while (i--)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BRACES: braces {} are not necessary for single statement blocks
#780: FILE: kernel/kgdb.c:459:
+	if (tid >= pid_max + num_online_cpus() + kgdb_ops->shadowth) {
+		return NULL;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#790: FILE: kernel/kgdb.c:469:
+			if (tid == pid_max + i) {
+				return p;
+			}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#797: FILE: kernel/kgdb.c:476:
+	if (!tid) {
+		return NULL;
+	}

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#815: FILE: kernel/kgdb.c:494:
+	 * FIXME: this looks racy */

WARNING:LINE_SPACING: Missing a blank line after declarations
#842: FILE: kernel/kgdb.c:521:
+	int error;
+	while (count) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#843: FILE: kernel/kgdb.c:522:
+		if ((error = get_char(addr++, buf)) < 0)

WARNING:LINE_SPACING: Missing a blank line after declarations
#854: FILE: kernel/kgdb.c:533:
+	int error;
+	while (count) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#855: FILE: kernel/kgdb.c:534:
+		if ((error = set_char(addr++, *buf++)) < 0)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'kgdb_break[i].state == bp_enabled'
#868: FILE: kernel/kgdb.c:547:
+		if ((kgdb_break[i].state == bp_enabled) &&
+		    (kgdb_break[i].bpt_addr == addr)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'kgdb_break[i].bpt_addr == addr'
#868: FILE: kernel/kgdb.c:547:
+		if ((kgdb_break[i].state == bp_enabled) &&
+		    (kgdb_break[i].bpt_addr == addr)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'kgdb_break[i].bpt_addr == addr'
#874: FILE: kernel/kgdb.c:553:
+			if ((breakno == -1) || (kgdb_break[i].bpt_addr == addr))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#881: FILE: kernel/kgdb.c:560:
+	if ((error = kgdb_get_mem((char *)addr, kgdb_break[breakno].saved_instr,

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#885: FILE: kernel/kgdb.c:564:
+	if ((error = set_mem((char *)addr, kgdb_ops->gdb_bpt_instr,

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'kgdb_break[i].state == bp_enabled'
#904: FILE: kernel/kgdb.c:583:
+		if ((kgdb_break[i].state == bp_enabled) &&
+		    (kgdb_break[i].bpt_addr == addr)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'kgdb_break[i].bpt_addr == addr'
#904: FILE: kernel/kgdb.c:583:
+		if ((kgdb_break[i].state == bp_enabled) &&
+		    (kgdb_break[i].bpt_addr == addr)) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#906: FILE: kernel/kgdb.c:585:
+			if ((error =

WARNING:LINE_SPACING: Missing a blank line after declarations
#924: FILE: kernel/kgdb.c:603:
+	int error;
+	for (i = 0; i < MAX_BREAKPOINTS; i++) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#927: FILE: kernel/kgdb.c:606:
+			unsigned long addr = kgdb_break[i].bpt_addr;
+			if ((error =

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#927: FILE: kernel/kgdb.c:606:
+			if ((error =

WARNING:BRACES: braces {} are not necessary for single statement blocks
#942: FILE: kernel/kgdb.c:621:
+	if (realpid) {
+		return realpid;
+	}

WARNING:TYPO_SPELLING: 'procesing' may be misspelled - perhaps 'processing'?
#949: FILE: kernel/kgdb.c:628:
+ * This function does all command procesing for interfacing to gdb.
                                   ^^^^^^^^^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#967: FILE: kernel/kgdb.c:646:
+	unsigned procid;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#975: FILE: kernel/kgdb.c:654:
+	if (atomic_read(&debugger_active) == smp_processor_id() + 1) {
+		return 0;
+	}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#979: FILE: kernel/kgdb.c:658:
+^I/* $

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1000: FILE: kernel/kgdb.c:679:
+	for (i = 0; i < num_online_cpus(); i++) {
+		spin_lock(&slavecpulocks[i]);
+	}

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1005: FILE: kernel/kgdb.c:684:
+	 * need one here */

WARNING:LINE_SPACING: Missing a blank line after declarations
#1033: FILE: kernel/kgdb.c:712:
+		int bpt_type = 0;
+		error = 0;

WARNING:TYPO_SPELLING: 'incase' may be misspelled - perhaps 'in case'?
#1044: FILE: kernel/kgdb.c:723:
+			 * we clear out our breakpoints now incase
 			                                    ^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1045: FILE: kernel/kgdb.c:724:
+			 * GDB is reconnecting. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1059: FILE: kernel/kgdb.c:738:
+			/* All threads that don't have debuggerinfo should be
+			   in __schedule() sleeping, since all other CPUs

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1060: FILE: kernel/kgdb.c:739:
+			   are in kgdb_wait, and thus have debuggerinfo. */

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1075: FILE: kernel/kgdb.c:754:
+				if ((error =

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1084: FILE: kernel/kgdb.c:763:
+^I^I^I^I/* Pull stuff saved during $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1087: FILE: kernel/kgdb.c:766:
+				 * This should be enough for a stack trace. */

CHECK:BRACES: braces {} should be used on all arms of this statement
#1099: FILE: kernel/kgdb.c:778:
+			if (kgdb_usethread && kgdb_usethread != current)
[...]
+			else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1101: FILE: kernel/kgdb.c:780:
+			else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#1112: FILE: kernel/kgdb.c:791:
+			if (kgdb_hex2long(&ptr, &addr) > 0 && *ptr++ == ',' &&
[...]
+			} else
[...]

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1114: FILE: kernel/kgdb.c:793:
+				if (IS_ERR(ptr = kgdb_mem2hex((char *)addr,

CHECK:BRACES: Unbalanced braces around else statement
#1119: FILE: kernel/kgdb.c:798:
+			} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#1126: FILE: kernel/kgdb.c:805:
+			if (kgdb_hex2long(&ptr, &addr) > 0 && *(ptr++) == ','
[...]
+			} else
[...]

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1127: FILE: kernel/kgdb.c:806:
+			if (kgdb_hex2long(&ptr, &addr) > 0 && *(ptr++) == ','
+			    && kgdb_hex2long(&ptr, &length) > 0 &&

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1129: FILE: kernel/kgdb.c:808:
+				if (IS_ERR(ptr = kgdb_hex2mem(ptr, (char *)addr,

CHECK:BRACES: Unbalanced braces around else statement
#1133: FILE: kernel/kgdb.c:812:
+			} else

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1137: FILE: kernel/kgdb.c:816:
+^I^I^I/* kill or detach. KGDB should treat this like a $

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1141: FILE: kernel/kgdb.c:820:
+			if ((error = remove_all_break()) < 0) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1167: FILE: kernel/kgdb.c:846:
+				if (remcom_in_buffer[1] == 'f') {
+					threadid = 1;
+				}

WARNING:SPLIT_STRING: quoted string split across lines
#1230: FILE: kernel/kgdb.c:909:
+					sprintf(tmpstr, "Shadow task %d"
+						" for pid 0",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:INDENTED_LABEL: labels should not be indented
#1330: FILE: kernel/kgdb.c:1009:
+		      default_handle:

WARNING:INDENTED_LABEL: labels should not be indented
#1347: FILE: kernel/kgdb.c:1026:
+      kgdb_exit:

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1350: FILE: kernel/kgdb.c:1029:
+	for (i = 0; i < num_online_cpus(); i++) {
+		spin_unlock(&slavecpulocks[i]);
+	}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1354: FILE: kernel/kgdb.c:1033:
+^I * from the debugger $

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1360: FILE: kernel/kgdb.c:1039:
+			while (--j) {
+				asm volatile ("nop":::"memory");
+			}

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1390: FILE: kernel/kgdb.c:1069:
+/* This function will generate a breakpoint exception.  It is used at the
+   beginning of a program to sync up with a debugger and can be used

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1392: FILE: kernel/kgdb.c:1071:
+   the debugger. */

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1400: FILE: kernel/kgdb.c:1079:
+			printk("kgdb not enabled. Cannot do breakpoint\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'breakpoint', this function's name, in a string
#1400: FILE: kernel/kgdb.c:1079:
+			printk("kgdb not enabled. Cannot do breakpoint\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:MEMORY_BARRIER: memory barrier without comment
#1406: FILE: kernel/kgdb.c:1085:
+	wmb();

WARNING:MEMORY_BARRIER: memory barrier without comment
#1408: FILE: kernel/kgdb.c:1087:
+	wmb();

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1415: FILE: kernel/kgdb.c:1094:
+	if (!procindebug[cpu] && atomic_read(&debugger_active) != (cpu + 1)) {
+		kgdb_wait((struct pt_regs *)regs);
+	}

WARNING:TYPO_SPELLING: 'initalization' may be misspelled - perhaps 'initialization'?
#1441: FILE: kernel/kgdb.c:1120:
+	/* Let the arch do any initalization it needs to, including
 	                       ^^^^^^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1442: FILE: kernel/kgdb.c:1121:
+	 * pointing to a suitable early output device. */

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1455: FILE: kernel/kgdb.c:1134:
+	if (!kgdb_enter) {
+		return;
+	}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#1462: FILE: kernel/kgdb.c:1141:
+	printk(KERN_CRIT "Waiting for connection from remote gdb... ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1464: FILE: kernel/kgdb.c:1143:
+	printk("Connected.\n");

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1482: FILE: kernel/kgdb.c:1161:
+	 * Handle a breakpoint queued from inside network driver code
+	  * to avoid reentrancy issues

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1483: FILE: kernel/kgdb.c:1162:
+	  * to avoid reentrancy issues
+	 */

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 17)
#1484: FILE: kernel/kgdb.c:1163:
+	if (kgdb_need_breakpoint[smp_processor_id()]) {
+		 kgdb_need_breakpoint[smp_processor_id()] = 0;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1493: FILE: kernel/kgdb.c:1172:
+void kgdb_console_write(struct console *co, const char *s, unsigned count)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1500: FILE: kernel/kgdb.c:1179:
+	if (!kgdb_connected) {
+		return;
+	}

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#1508: FILE: kernel/kgdb.c:1187:
+		if ((count << 1) > (BUFMAX - 2)) {
[...]
+		} else {
[...]

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1514: FILE: kernel/kgdb.c:1193:
+		for (i = 0; i < wcount; i++) {
+			bufptr = pack_hex_byte(bufptr, s[i]);
+		}

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1522: FILE: kernel/kgdb.c:1201:
+
+	}

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1549: FILE: kernel/kgdb.c:1228:
+EXPORT_SYMBOL(breakpoint);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1572: FILE: kernel/kgdb.c:1251:
+extern int kgdb8250_ttyS;

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#1575: FILE: kernel/kgdb.c:1254:
+	kgdb8250_ttyS = simple_strtoul(str, NULL, 10);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1578: FILE: kernel/kgdb.c:1257:
+}
+static int __init opt_gdbbaud(char *str)

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#1580: FILE: kernel/kgdb.c:1259:
+	kgdb8250_baud = simple_strtoul(str, NULL, 10);

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#1592: FILE: kernel/kgdb.c:1271:
+__setup("gdbttyS=", opt_gdbttyS);

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#1593: FILE: kernel/kgdb.c:1272:
+__setup("gdbbaud=", opt_gdbbaud);

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#1595: FILE: kernel/kgdb.c:1274:
+__setup("gdb", opt_gdb);

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#1596: FILE: kernel/kgdb.c:1275:
+__setup("kgdbwait", opt_kgdb_enter);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1632: FILE: kernel/Kconfig.kgdb:10:
+^I  RAM to avoid excessive linking time. $

WARNING:TYPO_SPELLING: 'overriden' may be misspelled - perhaps 'overridden'?
#1674: FILE: Documentation/kgdb.txt:34:
+port number and speed can be overriden on command line by using option
                              ^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1683: FILE: Documentation/kgdb.txt:43:
+Example: $

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000297971.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 39 errors, 115 warnings, 50 checks, 1579 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000297971.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
