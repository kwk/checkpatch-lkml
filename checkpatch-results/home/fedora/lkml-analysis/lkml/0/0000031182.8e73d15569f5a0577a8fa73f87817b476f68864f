WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#42: FILE: drivers/net/vioc/vioc_irq.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#57: FILE: drivers/net/vioc/vioc_irq.c:16:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#58: FILE: drivers/net/vioc/vioc_irq.c:17:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307$

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#88: FILE: drivers/net/vioc/vioc_irq.c:47:
+#include <asm/io.h>

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#90: FILE: drivers/net/vioc/vioc_irq.c:49:
+#include <asm/uaccess.h>

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#103: FILE: drivers/net/vioc/vioc_irq.c:62:
+#define IRQRETURN return IRQ_HANDLED

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#103: FILE: drivers/net/vioc/vioc_irq.c:62:
+#define IRQRETURN return IRQ_HANDLED

CHECK:SPACING: No space is necessary after a cast
#114: FILE: drivers/net/vioc/vioc_irq.c:73:
+#define VIOC_IRQ_NONE       (u16) -1

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#114: FILE: drivers/net/vioc/vioc_irq.c:73:
+#define VIOC_IRQ_NONE       (u16) -1

CHECK:LINE_SPACING: Please don't use multiple blank lines
#119: FILE: drivers/net/vioc/vioc_irq.c:78:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: Unnecessary space before function pointer arguments
#127: FILE: drivers/net/vioc/vioc_irq.c:86:
+	void (*intrFuncp) (void *);

CHECK:CAMELCASE: Avoid CamelCase: <intrFuncp>
#127: FILE: drivers/net/vioc/vioc_irq.c:86:
+	void (*intrFuncp) (void *);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#127: FILE: drivers/net/vioc/vioc_irq.c:86:
+	void (*intrFuncp) (void *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:CAMELCASE: Avoid CamelCase: <intrFuncparm>
#128: FILE: drivers/net/vioc/vioc_irq.c:87:
+	void *intrFuncparm;

WARNING:SPACING: missing space after return type
#129: FILE: drivers/net/vioc/vioc_irq.c:88:
+	 irqreturn_t(*hthandler) (int, void *, struct pt_regs *);

WARNING:SPACING: Unnecessary space before function pointer arguments
#129: FILE: drivers/net/vioc/vioc_irq.c:88:
+	 irqreturn_t(*hthandler) (int, void *, struct pt_regs *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#129: FILE: drivers/net/vioc/vioc_irq.c:88:
+	 irqreturn_t(*hthandler) (int, void *, struct pt_regs *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#129: FILE: drivers/net/vioc/vioc_irq.c:88:
+	 irqreturn_t(*hthandler) (int, void *, struct pt_regs *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#129: FILE: drivers/net/vioc/vioc_irq.c:88:
+	 irqreturn_t(*hthandler) (int, void *, struct pt_regs *);

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'vioc_interrupts[vioc_id].intreq[intr_id].intrFuncp'
#181: FILE: drivers/net/vioc/vioc_irq.c:140:
+	vioc_interrupts[vioc_id].intreq[intr_id].
+	    intrFuncp(vioc_interrupts[vioc_id].intreq[intr_id].intrFuncparm);

A single dereferencing identifier spanned on multiple lines like::

  struct_identifier->member[index].
  member = <foo>;

is generally hard to follow. It can easily lead to typos and so makes
the code vulnerable to bugs.

If fixing the multiple line dereferencing leads to an 80 column
violation, then either rewrite the code in a more simple way or if the
starting part of the dereferencing identifier is the same and used at
multiple places then store it in a temporary variable, and use that
temporary variable only at all the places. For example, if there are
two dereferencing identifiers::

  member1->member2->member3.foo1;
  member1->member2->member3.foo2;

then store the member1->member2->member3 part in a temporary variable.
It not only helps to avoid the 80 column violation but also reduces
the program size by removing the unnecessary dereferences.

But if none of the above methods work then ignore the 80 column
violation because it is much easier to read a dereferencing identifier
on a single line.

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#198: FILE: drivers/net/vioc/vioc_irq.c:157:
+		return VIOC_INTERRUPTS_CNT;
+	} else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#200: FILE: drivers/net/vioc/vioc_irq.c:159:
+		dev_err(&viocdev->pdev->dev,
+		       "Enabling MSIX failed (%d) VIOC %d, use PIN-IRQ\n", ret,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#206: FILE: drivers/net/vioc/vioc_irq.c:165:
+			dev_err(&viocdev->pdev->dev, "vioc%d: Cannot obtain PCI resources\n",
+			       viocdev_idx);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#215: FILE: drivers/net/vioc/vioc_irq.c:174:
+		dev_err(&viocdev->pdev->dev, "vioc%d: Cannot obtain PCI resources\n",
+		       viocdev_idx);

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'vioc_interrupts[viocdev_idx].intreq[intr_id].irq'
#234: FILE: drivers/net/vioc/vioc_irq.c:193:
+				free_irq(vioc_interrupts[viocdev_idx].
+					 intreq[intr_id].irq,

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'vioc_interrupts[viocdev_idx].intreq[intr_id].intrFuncparm'
#236: FILE: drivers/net/vioc/vioc_irq.c:195:
+					 vioc_interrupts[viocdev_idx].
+					 intreq[intr_id].intrFuncparm);

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'vioc_interrupts[viocdev_idx].irqs[i].vector'
#255: FILE: drivers/net/vioc/vioc_irq.c:214:
+					vioc_interrupts[viocdev_idx].irqs[i].
+					vector);

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#300: FILE: drivers/net/vioc/vioc_irq.c:259:
+	if (dev) {
[...]
+	} else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPACING: Unnecessary space before function pointer arguments
#308: FILE: drivers/net/vioc/vioc_irq.c:267:
+			    void (*routine) (void *),

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#320: FILE: drivers/net/vioc/vioc_irq.c:279:
+	/*
+	 * Find IRQ of requested interrupt: For now, search the

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#332: FILE: drivers/net/vioc/vioc_irq.c:291:
+		dev_err(&vioc_pci_dev->dev,
+		       "%s: INTR ID (%d) out of range for Interrupt IRQ %d, name %s\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#333: FILE: drivers/net/vioc/vioc_irq.c:292:
+		       __FUNCTION__, intr_id, irq, intr_name);

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'vioc_interrupts[vioc_id].intreq[intr_id].irq'
#340: FILE: drivers/net/vioc/vioc_irq.c:299:
+		free_irq(vioc_interrupts[vioc_id].
+			 intreq[intr_id].irq,

CHECK:BRACES: Unbalanced braces around else statement
#379: FILE: drivers/net/vioc/vioc_irq.c:338:
+	else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#381: FILE: drivers/net/vioc/vioc_irq.c:340:
+		dev_err(&vioc_pci_dev->dev,
+		       "%s: Interrupt handler type for name %s unknown\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#382: FILE: drivers/net/vioc/vioc_irq.c:341:
+		       __FUNCTION__, intr_name);

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'vioc_interrupts[vioc_id].intreq[intr_id].intrFuncparm'
#391: FILE: drivers/net/vioc/vioc_irq.c:350:
+			  vioc_interrupts[vioc_id].intreq[intr_id].
+			  intrFuncparm);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#393: FILE: drivers/net/vioc/vioc_irq.c:352:
+^I^Idev_err(&vioc_pci_dev->dev, "%s: request_irq() -> %d\n", __FUNCTION__, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#393: FILE: drivers/net/vioc/vioc_irq.c:352:
+		dev_err(&vioc_pci_dev->dev, "%s: request_irq() -> %d\n", __FUNCTION__, 

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#394: FILE: drivers/net/vioc/vioc_irq.c:352:
ret);

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#395: FILE: drivers/net/vioc/vioc_irq.c:353:
+		dev_err(&vioc_pci_dev->dev, "%s: request_irq() -> %d\n", __FUNCTION__, 
+		return ret;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#410: FILE: drivers/net/vioc/vioc_irq.c:368:
+		dev_err(&viocdev->pdev->dev, "%s: VIOC ID (%d) is out of range\n",
+		       __FUNCTION__, viocdev_idx);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#410: FILE: drivers/net/vioc/vioc_irq.c:368:
+		       __FUNCTION__, viocdev_idx);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#416: FILE: drivers/net/vioc/vioc_irq.c:374:
+		dev_err(&viocdev->pdev->dev, "%s: INTR ID (%d) is out of range\n",
+		       __FUNCTION__, intr_idx);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#416: FILE: drivers/net/vioc/vioc_irq.c:374:
+		       __FUNCTION__, intr_idx);

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#430: FILE: drivers/net/vioc/vioc_irq.c:388:
+/*
+ * Function returns number of Rx IRQs.

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#448: FILE: drivers/net/vioc/vioc_irq.c:406:
+	switch (total_num_irqs) {
+

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'vioc_interrupts[viocdev_idx].irqs[intr_idx].vector'
#464: FILE: drivers/net/vioc/vioc_irq.c:422:
+				       vioc_interrupts[viocdev_idx].
+				       irqs[intr_idx].vector, HANDLER_DIRECT,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#468: FILE: drivers/net/vioc/vioc_irq.c:426:
+			dev_err(&viocdev->pdev->dev, "vioc%d: RX IRQ %02d not installed\n",
+			       viocdev_idx, intr_idx);

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'vioc_interrupts[viocdev_idx].irqs[intr_idx].vector'
#481: FILE: drivers/net/vioc/vioc_irq.c:439:
+				       vioc_interrupts[viocdev_idx].
+				       irqs[intr_idx].vector, HANDLER_DIRECT,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#485: FILE: drivers/net/vioc/vioc_irq.c:443:
+			dev_err(&viocdev->pdev->dev, "vioc%d: RX IRQ %02d not installed\n",
+			       viocdev_idx, intr_idx);

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'vioc_interrupts[viocdev_idx].irqs[intr_idx].vector'
#497: FILE: drivers/net/vioc/vioc_irq.c:455:
+				       vioc_interrupts[viocdev_idx].
+				       irqs[intr_idx].vector, HANDLER_TASKLET,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#501: FILE: drivers/net/vioc/vioc_irq.c:459:
+			dev_err(&viocdev->pdev->dev, "vioc%d: TX IRQ not installed\n",
+			       viocdev_idx);

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'vioc_interrupts[viocdev_idx].irqs[intr_idx].vector'
#513: FILE: drivers/net/vioc/vioc_irq.c:471:
+				       vioc_interrupts[viocdev_idx].
+				       irqs[intr_idx].vector, HANDLER_TASKQ,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#517: FILE: drivers/net/vioc/vioc_irq.c:475:
+			dev_err(&viocdev->pdev->dev, "vioc%d: BMC IRQ not installed\n",
+			       viocdev_idx);

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'vioc_interrupts[viocdev_idx].irqs[intr_idx].vector'
#532: FILE: drivers/net/vioc/vioc_irq.c:490:
+					       vioc_interrupts[viocdev_idx].
+					       irqs[intr_idx].vector,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#537: FILE: drivers/net/vioc/vioc_irq.c:495:
+				dev_err(&viocdev->pdev->dev,
+				       "vioc%d: RX IRQ %02d not installed\n",

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'vioc_interrupts[viocdev_idx].irqs[intr_idx].vector'
#549: FILE: drivers/net/vioc/vioc_irq.c:507:
+				       vioc_interrupts[viocdev_idx].
+				       irqs[intr_idx].vector, HANDLER_TASKLET,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#553: FILE: drivers/net/vioc/vioc_irq.c:511:
+			dev_err(&viocdev->pdev->dev, "vioc%d: TX IRQ not installed\n",
+			       viocdev_idx);

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'vioc_interrupts[viocdev_idx].irqs[intr_idx].vector'
#563: FILE: drivers/net/vioc/vioc_irq.c:521:
+				       vioc_interrupts[viocdev_idx].
+				       irqs[intr_idx].vector, HANDLER_TASKQ,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#567: FILE: drivers/net/vioc/vioc_irq.c:525:
+			dev_err(&viocdev->pdev->dev, "vioc%d: BMC IRQ not installed\n",
+			       viocdev_idx);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000031182.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 6 errors, 34 warnings, 21 checks, 539 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000031182.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
