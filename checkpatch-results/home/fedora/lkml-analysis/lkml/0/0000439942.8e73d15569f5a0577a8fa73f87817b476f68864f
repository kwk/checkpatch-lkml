WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#27: 
=============================Patch Starts Here================================

ERROR:TRAILING_WHITESPACE: trailing whitespace
#42: FILE: Documentation/preempt-locking.txt:11:
+those under SMP: concurrency and reentrancy.  Thankfully, the Linux $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#43: FILE: Documentation/preempt-locking.txt:11:
preemptible

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#49: FILE: Documentation/preempt-locking.txt:17:
+ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#73: FILE: Documentation/preempt-locking.txt:41:
+section that must occur while preemption is disabled.  Think what would $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#75: FILE: Documentation/preempt-locking.txt:42:
+if the kernel is executing a floating-point instruction and is then $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#77: FILE: Documentation/preempt-locking.txt:43:
+Remember, the kernel does not save FPU state except for user tasks.  $

WARNING:TYPO_SPELLING: 'reenabled' may be misspelled - perhaps 're-enabled'?
#109: FILE: Documentation/preempt-locking.txt:74:
+n-times in a code path, and preemption will not be reenabled until the n-th
                                                    ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:MAINTAINERS_STYLE: Misordered MAINTAINERS entry - list 'M:' before 'P:'
#184: FILE: MAINTAINERS:1290:
+P:	Robert M. Love
+M:	rml@tech9.net

WARNING:MAINTAINERS_STYLE: Misordered MAINTAINERS entry - list 'S:' before 'W:'
#188: FILE: MAINTAINERS:1294:
+W:	http://tech9.net/rml/linux
+S:	Supported

ERROR:TRAILING_WHITESPACE: trailing whitespace
#302: FILE: arch/arm/tools/getconstants.c:45:
+DEFN("IRQSTAT_BH_COUNT",^I(unsigned long)&(((irq_cpustat_t $

WARNING:TYPO_SPELLING: 'execption' may be misspelled - perhaps 'exception'?
#377: FILE: arch/i386/kernel/entry.S:268:
+	testl $IF_MASK,EFLAGS(%esp)     # Ints off (execption path) ?
 	                                            ^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#434: FILE: arch/i386/kernel/i387.c:70:
+^I$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#613: FILE: arch/mips/kernel/irq.c:503:
+		if (current->need_resched == 0) {
+			break;
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space prohibited before that '++' (ctx:WxO)
#617: FILE: arch/mips/kernel/irq.c:507:
+		current->preempt_count ++;
 		                       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#619: FILE: arch/mips/kernel/irq.c:509:
+		if (user_mode(regs)) {
[...]
+		} else {
[...]

ERROR:SPACING: space required before the open parenthesis '('
#714: FILE: arch/ppc/kernel/irq.c:579:
+	switch(regs->trap) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#726: FILE: arch/ppc/kernel/irq.c:591:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#763: FILE: arch/ppc/kernel/setup.c:513:
+		extern int preempt_intercept(struct pt_regs *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#763: FILE: arch/ppc/kernel/setup.c:513:
+		extern int preempt_intercept(struct pt_regs *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#764: FILE: arch/ppc/kernel/setup.c:514:
+^I$

CHECK:SPACING: No space is necessary after a cast
#765: FILE: arch/ppc/kernel/setup.c:515:
+		do_IRQ_intercept = (unsigned long) &preempt_intercept;

CHECK:SPACING: No space is necessary after a cast
#766: FILE: arch/ppc/kernel/setup.c:516:
+		timer_interrupt_intercept = (unsigned long) &preempt_intercept;

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#768: FILE: arch/ppc/kernel/setup.c:518:
+
+	}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#851: FILE: arch/sh/kernel/entry.S:527:
+#ifdef CONFIG_PREEMPT^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#857: FILE: arch/sh/kernel/entry.S:533:
+^I! call preempt_schedule. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#901: FILE: arch/sh/kernel/entry.S:577:
+^I nop^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#914: FILE: arch/sh/kernel/entry.S:590:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#939: FILE: arch/sh/kernel/entry.S:653:
+#endif /* CONFIG_PREEMPT */^I$

WARNING:TYPO_SPELLING: 'reenabled' may be misspelled - perhaps 're-enabled'?
#964: FILE: arch/sh/kernel/irq.c:234:
+	 * and interrupts might get reenabled during them... bump
 	                            ^^^^^^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#966: FILE: arch/sh/kernel/irq.c:236:
+ ^I * called here is pending...$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#966: FILE: arch/sh/kernel/irq.c:236:
+ ^I * called here is pending...$

ERROR:CODE_INDENT: code indent should use tabs where possible
#967: FILE: arch/sh/kernel/irq.c:237:
+ ^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#967: FILE: arch/sh/kernel/irq.c:237:
+ ^I */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#968: FILE: arch/sh/kernel/irq.c:238:
+ ^Ipreempt_disable();$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#968: FILE: arch/sh/kernel/irq.c:238:
+ ^Ipreempt_disable();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#968: FILE: arch/sh/kernel/irq.c:238:
+ ^Ipreempt_disable();$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#977: FILE: arch/sh/kernel/irq.c:309:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1197: FILE: include/asm-arm/softirq.h:24:
+#define local_bh_enable() do { _local_bh_enable(); preempt_enable(); } while $

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1197: FILE: include/asm-arm/softirq.h:24:
+#define local_bh_enable() do { _local_bh_enable(); preempt_enable(); } while 

ERROR:SPACING: space required before the open parenthesis '('
#1324: FILE: include/asm-i386/i387.h:28:
+#define kernel_fpu_end() do { stts(); preempt_enable(); } while(0)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1453: FILE: include/asm-i386/softirq.h:48:
+#define local_bh_enable() do { _local_bh_enable(); preempt_enable(); } while $

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1453: FILE: include/asm-i386/softirq.h:48:
+#define local_bh_enable() do { _local_bh_enable(); preempt_enable(); } while 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1523: FILE: include/asm-i386/spinlock.h:200:
+#define _raw_read_unlock(rw)^I^Iasm volatile("lock ; incl %0" :"=m" $

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#1523: FILE: include/asm-i386/spinlock.h:200:
+#define _raw_read_unlock(rw)		asm volatile("lock ; incl %0" :"=m" 
                             		                              ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1525: FILE: include/asm-i386/spinlock.h:201:
+#define _raw_write_unlock(rw)^Iasm volatile("lock ; addl $" RW_LOCK_BIAS_STR $

WARNING:INLINE: plain inline is preferred over __inline__
#1609: FILE: include/asm-mips/system.h:288:
+extern __inline__ int intr_on(void)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1612: FILE: include/asm-mips/system.h:291:
+	unsigned long flags;
+	save_flags(flags);

WARNING:INLINE: plain inline is preferred over __inline__
#1616: FILE: include/asm-mips/system.h:295:
+extern __inline__ int intr_off(void)

ERROR:SPACING: space prohibited after that '!' (ctx:WxW)
#1618: FILE: include/asm-mips/system.h:297:
+	return ! intr_on();
 	       ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1685: FILE: include/asm-ppc/mmu_context.h:163:
+		BUG();

ERROR:SPACING: space required before the open parenthesis '('
#1844: FILE: include/asm-sh/smplock.h:20:
+#define release_kernel_lock(task, cpu)		do { } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#1845: FILE: include/asm-sh/smplock.h:21:
+#define reacquire_kernel_lock(task)		do { } while(0)

WARNING:USE_LOCKDEP: Where possible, use lockdep_assert_held instead of assertions based on spin_is_locked
#1865: FILE: include/asm-sh/smplock.h:41:
+#define kernel_locked()		spin_is_locked(&kernel_flag)

lockdep_assert_held() annotations should be preferred over
assertions based on spin_is_locked()

See: https://www.kernel.org/doc/html/latest/locking/lockdep-design.html#annotations

ERROR:SPACING: exactly one space required after that #elif
#1866: FILE: include/asm-sh/smplock.h:42:
+#elif  CONFIG_PREEMPT

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'task' may be better as '(task)' to avoid precedence issues
#1875: FILE: include/asm-sh/smplock.h:51:
+#define release_kernel_lock(task, cpu) \
+do { \
+	if (task->lock_depth >= 0) \
+		spin_unlock(&kernel_flag); \
+	release_irqlock(cpu); \
+	__sti(); \
+} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'task' may be better as '(task)' to avoid precedence issues
#1886: FILE: include/asm-sh/smplock.h:62:
+#define reacquire_kernel_lock(task) \
+do { \
+	if (task->lock_depth >= 0) \
+		spin_lock(&kernel_flag); \
+} while (0)

WARNING:INLINE: plain inline is preferred over __inline__
#1899: FILE: include/asm-sh/smplock.h:75:
+static __inline__ void lock_kernel(void)

WARNING:INLINE: plain inline is preferred over __inline__
#1913: FILE: include/asm-sh/smplock.h:87:
+static __inline__ void unlock_kernel(void)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1916: FILE: include/asm-sh/smplock.h:90:
+		BUG();

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2031: FILE: include/linux/dcache.h:275:
+static __inline__ void d_drop(struct dentry * dentry)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:INLINE: plain inline is preferred over __inline__
#2031: FILE: include/linux/dcache.h:275:
+static __inline__ void d_drop(struct dentry * dentry)

WARNING:TYPO_SPELLING: 'preemptable' may be misspelled - perhaps 'preemptible'?
#2096: FILE: include/linux/sched.h:337:
+	int preempt_count;	/* 0 => preemptable, <0 => BUG */
 	                  	        ^^^^^^^^^^^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2172: FILE: include/linux/spinlock.h:85:
+#define _raw_spin_lock(lock)	(void)(lock) /* Not "unused variable". */

ERROR:SPACING: space required before the open parenthesis '('
#2178: FILE: include/linux/spinlock.h:89:
+#define _raw_spin_unlock(lock)	do { } while(0)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2190: FILE: include/linux/spinlock.h:148:
+#define _raw_read_lock(lock)	(void)(lock) /* Not "unused variable". */

ERROR:SPACING: space required before the open parenthesis '('
#2191: FILE: include/linux/spinlock.h:149:
+#define _raw_read_unlock(lock)	do { } while(0)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2192: FILE: include/linux/spinlock.h:150:
+#define _raw_write_lock(lock)	(void)(lock) /* Not "unused variable". */

ERROR:SPACING: space required before the open parenthesis '('
#2193: FILE: include/linux/spinlock.h:151:
+#define _raw_write_unlock(lock)	do { } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#2226: FILE: include/linux/spinlock.h:184:
+} while(0)

ERROR:SPACING: space required after that ';' (ctx:VxV)
#2229: FILE: include/linux/spinlock.h:187:
+				1 : ({preempt_enable(); 0;});})
 				                         ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#2229: FILE: include/linux/spinlock.h:187:
+				1 : ({preempt_enable(); 0;});})
 				                            ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#2242: FILE: include/linux/spinlock.h:200:
+#define read_lock(lock)		({preempt_disable(); _raw_read_lock(lock);})
                        		                                         ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#2243: FILE: include/linux/spinlock.h:201:
+#define read_unlock(lock)	({_raw_read_unlock(lock); preempt_enable();})
                          	                                          ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#2244: FILE: include/linux/spinlock.h:202:
+#define write_lock(lock)	({preempt_disable(); _raw_write_lock(lock);})
                         	                                          ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#2245: FILE: include/linux/spinlock.h:203:
+#define write_unlock(lock)	({_raw_write_unlock(lock); preempt_enable();})
                           	                                           ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#2246: FILE: include/linux/spinlock.h:204:
+#define write_trylock(lock)	({preempt_disable();_raw_write_trylock(lock) ? \
                            	                   ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#2247: FILE: include/linux/spinlock.h:205:
+				1 : ({preempt_enable(); 0;});})
 				                         ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#2247: FILE: include/linux/spinlock.h:205:
+				1 : ({preempt_enable(); 0;});})
 				                            ^

ERROR:SPACING: space required before the open parenthesis '('
#2254: FILE: include/linux/spinlock.h:212:
+#define preempt_enable_no_resched()	do {} while(0)

WARNING:TYPO_SPELLING: 'halfs' may be misspelled - perhaps 'halves'?
#2279: FILE: include/linux/tqueue.h:97:
+ * Call all "bottom halfs" on a given list.
                     ^^^^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2282: FILE: include/linux/tqueue.h:100:
+extern void __run_task_queue(task_queue *list);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2335: FILE: kernel/exit.c:499:
+		printk(KERN_ERR "%s[%d] exited with preempt_count %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2336: FILE: kernel/exit.c:500:
+		printk(KERN_ERR "%s[%d] exited with preempt_count %d\n",
+				current->comm, current->pid,

WARNING:REPEATED_WORD: Possible repeated word: 'is'
#2467: FILE: kernel/sched.c:1173:
+ * this is is the entry point to schedule() from in-kernel preemption.

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'current->need_resched'
#2478: FILE: kernel/sched.c:1184:
+	if (unlikely((current->need_resched)))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2541: FILE: mm/slab.c:53:
+ *  ^Iand local interrupts are disabled so slab code is preempt-safe.$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000439942.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 49 errors, 29 warnings, 9 checks, 2212 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000439942.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
