WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#65: FILE: fs/Kconfig:1256:
+source "fs/accessfs/Kconfig"

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#182: FILE: fs/accessfs/capabilities.c:1:
+/* Copyright (c) 2002 Olaf Dietsche

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:STATIC_CONST_CHAR_ARRAY: static const char * array should probably be static const char * const
#193: FILE: fs/accessfs/capabilities.c:12:
+static const char *names[] = {

WARNING:LINE_SPACING: Missing a blank line after declarations
#244: FILE: fs/accessfs/capabilities.c:63:
+	int	i;
+	for (i = 0; i < n; ++i) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BRACES: braces {} are not necessary for single statement blocks
#244: FILE: fs/accessfs/capabilities.c:63:
+	for (i = 0; i < n; ++i) {
+		accessfs_unregister(dir, names[i]);
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#253: FILE: fs/accessfs/capabilities.c:72:
+	int i, err;
+	dir = accessfs_make_dirpath("capabilities");

WARNING:ARRAY_SIZE: Prefer ARRAY_SIZE(caps)
#257: FILE: fs/accessfs/capabilities.c:76:
+	for (i = 0; i < sizeof(caps) / sizeof(caps[0]); ++i) {

The ARRAY_SIZE(foo) macro should be preferred over
sizeof(foo)/sizeof(foo[0]) for finding number of elements in an
array.

The macro is defined in include/linux/kernel.h::

  #define ARRAY_SIZE(x) (sizeof(x) / sizeof((x)[0]))

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IXUSR' are not preferred. Consider using octal permissions '0100'.
#260: FILE: fs/accessfs/capabilities.c:79:
+		caps[i].mode = S_IXUSR;

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:ARRAY_SIZE: Prefer ARRAY_SIZE(names)
#270: FILE: fs/accessfs/capabilities.c:89:
+		unregister_capabilities(dir, sizeof(names) / sizeof(names[0]));

WARNING:LINE_SPACING: Missing a blank line after declarations
#278: FILE: fs/accessfs/capabilities.c:97:
+	struct accessfs_direntry *dir;
+	dir = accessfs_make_dirpath("capabilities");

WARNING:ARRAY_SIZE: Prefer ARRAY_SIZE(names)
#280: FILE: fs/accessfs/capabilities.c:99:
+	unregister_capabilities(dir, sizeof(names) / sizeof(names[0]));

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#293: FILE: fs/accessfs/inode.c:1:
+/* Copyright (c) 2001 Olaf Dietsche

ERROR:TRAILING_WHITESPACE: trailing whitespace
#302: FILE: fs/accessfs/inode.c:10:
+ * BENC255: the kernel doesn't lock BKL for us when entering methods $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:INCLUDE_LINUX: Use #include <linux/statfs.h> instead of <asm/statfs.h>
#317: FILE: fs/accessfs/inode.c:25:
+#include <asm/statfs.h>

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#319: FILE: fs/accessfs/inode.c:27:
+#include <asm/uaccess.h>

ERROR:TRAILING_WHITESPACE: trailing whitespace
#323: FILE: fs/accessfs/inode.c:31:
+#ifdef CONFIG_PROC_FS           $

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#324: FILE: fs/accessfs/inode.c:32:
+static struct proc_dir_entry *mountdir = NULL;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#329: FILE: fs/accessfs/inode.c:37:
+static struct inode_operations accessfs_inode_operations;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct file_operations should normally be const
#330: FILE: fs/accessfs/inode.c:38:
+static struct file_operations accessfs_dir_file_operations;

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#331: FILE: fs/accessfs/inode.c:39:
+static struct inode_operations accessfs_dir_inode_operations;

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#333: FILE: fs/accessfs/inode.c:41:
+static inline void accessfs_readdir_aux(struct file *filp, struct accessfs_direntry *dir, int start, void *dirent, filldir_t filldir)
                                                      ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:LONG_LINE: line length of 133 exceeds 100 columns
#333: FILE: fs/accessfs/inode.c:41:
+static inline void accessfs_readdir_aux(struct file *filp, struct accessfs_direntry *dir, int start, void *dirent, filldir_t filldir)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LINE_SPACING: Missing a blank line after declarations
#344: FILE: fs/accessfs/inode.c:52:
+		struct accessfs_entry *de;
+		de = list_entry(list, struct accessfs_entry, siblings);

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#345: FILE: fs/accessfs/inode.c:53:
+		if (filldir(dirent, de->name, strlen(de->name), filp->f_pos, de->ino, DT_UNKNOWN) < 0)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#353: FILE: fs/accessfs/inode.c:61:
+static int accessfs_readdir(struct file *filp, void *dirent, filldir_t filldir)
                                          ^^^^

CHECK:SPACING: No space is necessary after a cast
#377: FILE: fs/accessfs/inode.c:85:
+		dir = (struct accessfs_direntry *) dentry->d_inode->u.generic_ip;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#378: FILE: fs/accessfs/inode.c:86:
+		accessfs_readdir_aux(filp, dir, i, dirent, filldir);
 		                     ^^^^

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#386: FILE: fs/accessfs/inode.c:94:
+static struct accessfs_entry *accessfs_lookup_entry(struct accessfs_entry *pe, const char *name, int len)

WARNING:LINE_SPACING: Missing a blank line after declarations
#391: FILE: fs/accessfs/inode.c:99:
+	struct accessfs_entry *de;
+	if (!S_ISDIR(pe->attr->mode))

CHECK:SPACING: No space is necessary after a cast
#394: FILE: fs/accessfs/inode.c:102:
+	dir = (struct accessfs_direntry *) pe;

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#405: FILE: fs/accessfs/inode.c:113:
+static struct dentry *accessfs_lookup(struct inode *dir, struct dentry *dentry, struct nameidata *nd)
                                                                                                   ^^

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#405: FILE: fs/accessfs/inode.c:113:
+static struct dentry *accessfs_lookup(struct inode *dir, struct dentry *dentry, struct nameidata *nd)

WARNING:LINE_SPACING: Missing a blank line after declarations
#409: FILE: fs/accessfs/inode.c:117:
+	struct accessfs_entry *pe;
+	down(&accessfs_sem);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#420: FILE: fs/accessfs/inode.c:128:
+^I{ "/", $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#421: FILE: fs/accessfs/inode.c:129:
+^I  LIST_HEAD_INIT(accessfs_rootdir.node.hash), $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#422: FILE: fs/accessfs/inode.c:130:
+^I  LIST_HEAD_INIT(accessfs_rootdir.node.siblings), $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#424: FILE: fs/accessfs/inode.c:132:
+^INULL, LIST_HEAD_INIT(accessfs_rootdir.children), $

WARNING:LINE_SPACING: Missing a blank line after declarations
#431: FILE: fs/accessfs/inode.c:139:
+	static const struct timespec epoch = {0, 0};
+	inode->u.generic_ip = pe;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#436: FILE: fs/accessfs/inode.c:144:
+/*
+	inode->i_blksize = PAGE_CACHE_SIZE;

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#440: FILE: fs/accessfs/inode.c:148:
+	inode->i_atime = inode->i_mtime = inode->i_ctime = epoch;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#450: FILE: fs/accessfs/inode.c:158:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:LINE_SPACING: Missing a blank line after declarations
#458: FILE: fs/accessfs/inode.c:166:
+	struct inode *inode = new_inode(sb);
+	if (inode) {

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#460: FILE: fs/accessfs/inode.c:168:
+/* ^I^Iinode->i_ino = accessfs_rootdir.node.ino; */$

WARNING:LONG_LINE: line length of 159 exceeds 100 columns
#471: FILE: fs/accessfs/inode.c:179:
+static int accessfs_node_init(struct accessfs_direntry *parent, struct accessfs_entry *de, const char *name, size_t len, struct access_attr *attr, mode_t mode)

WARNING:LINE_SPACING: Missing a blank line after declarations
#474: FILE: fs/accessfs/inode.c:182:
+	static unsigned long ino = 1;
+	de->name = kmalloc(len + 1, GFP_KERNEL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!de->name"
#475: FILE: fs/accessfs/inode.c:183:
+	if (de->name == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:LINE_SPACING: Missing a blank line after declarations
#494: FILE: fs/accessfs/inode.c:202:
+	struct accessfs_entry *pe;
+	pe = kmalloc(sizeof(struct accessfs_entry), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*pe)...) over kmalloc(sizeof(struct accessfs_entry)...)
#494: FILE: fs/accessfs/inode.c:202:
+	pe = kmalloc(sizeof(struct accessfs_entry), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pe"
#495: FILE: fs/accessfs/inode.c:203:
+	if (pe == NULL)

WARNING:LONG_LINE: line length of 111 exceeds 100 columns
#502: FILE: fs/accessfs/inode.c:210:
+static struct accessfs_direntry	*accessfs_mkdir(struct accessfs_direntry *parent, const char *name, size_t len)

WARNING:LINE_SPACING: Missing a blank line after declarations
#506: FILE: fs/accessfs/inode.c:214:
+	struct accessfs_direntry *dir;
+	dir = kmalloc(sizeof(struct accessfs_direntry), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*dir)...) over kmalloc(sizeof(struct accessfs_direntry)...)
#506: FILE: fs/accessfs/inode.c:214:
+	dir = kmalloc(sizeof(struct accessfs_direntry), GFP_KERNEL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dir"
#507: FILE: fs/accessfs/inode.c:215:
+	if (dir == NULL)

WARNING:LINE_SPACING: Missing a blank line after declarations
#525: FILE: fs/accessfs/inode.c:233:
+	const char *slash;
+	down(&accessfs_sem);

WARNING:LINE_SPACING: Missing a blank line after declarations
#529: FILE: fs/accessfs/inode.c:237:
+		size_t len;
+		while (*name == '/')

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#535: FILE: fs/accessfs/inode.c:243:
+		if (de == NULL) {
[...]
+		} else if (S_ISDIR(de->attr->mode)) {
[...]
+		} else {
[...]

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!de"
#535: FILE: fs/accessfs/inode.c:243:
+		if (de == NULL) {

CHECK:SPACING: No space is necessary after a cast
#538: FILE: fs/accessfs/inode.c:246:
+			dir = (struct accessfs_direntry *) de;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dir"
#543: FILE: fs/accessfs/inode.c:251:
+		if (dir == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "slash"
#547: FILE: fs/accessfs/inode.c:255:
+	} while (slash != NULL);

WARNING:LINE_SPACING: Missing a blank line after declarations
#565: FILE: fs/accessfs/inode.c:273:
+	int err = inode_setattr(i, iattr);
+	if (!err) {

CHECK:SPACING: No space is necessary after a cast
#567: FILE: fs/accessfs/inode.c:275:
+		pe = (struct accessfs_entry *) i->u.generic_ip;

WARNING:LINE_SPACING: Missing a blank line after declarations
#567: FILE: fs/accessfs/inode.c:275:
+		struct accessfs_entry *pe;
+		pe = (struct accessfs_entry *) i->u.generic_ip;

WARNING:LINE_SPACING: Missing a blank line after declarations
#580: FILE: fs/accessfs/inode.c:288:
+	struct list_head	*list;
+	down(&accessfs_sem);

WARNING:LINE_SPACING: Missing a blank line after declarations
#583: FILE: fs/accessfs/inode.c:291:
+		struct accessfs_entry *pe;
+		pe = list_entry(list, struct accessfs_entry, hash);

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#593: FILE: fs/accessfs/inode.c:301:
+static struct inode_operations accessfs_inode_operations = {

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#597: FILE: fs/accessfs/inode.c:305:
+static struct inode_operations accessfs_dir_inode_operations = {

WARNING:CONST_STRUCT: struct file_operations should normally be const
#602: FILE: fs/accessfs/inode.c:310:
+static struct file_operations accessfs_dir_file_operations = {

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#626: FILE: fs/accessfs/inode.c:334:
+		iput(inode);
 		^^^^

WARNING:LONG_LINE: line length of 121 exceeds 100 columns
#634: FILE: fs/accessfs/inode.c:342:
+static struct super_block *accessfs_get_sb(struct file_system_type *fs_type, int flags, const char *dev_name, void *data)

WARNING:LINE_SPACING: Missing a blank line after declarations
#642: FILE: fs/accessfs/inode.c:350:
+	mode_t mode = p->mode;
+	if (current->fsuid == p->uid)

WARNING:LINE_SPACING: Missing a blank line after declarations
#653: FILE: fs/accessfs/inode.c:361:
+	int err;
+	if (dir == 0)

WARNING:LINE_SPACING: Missing a blank line after declarations
#665: FILE: fs/accessfs/inode.c:373:
+	struct accessfs_entry *pe;
+	down(&accessfs_sem);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#667: FILE: fs/accessfs/inode.c:375:
+	if (pe) {
+		accessfs_unlink(pe);
+	}

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#683: FILE: fs/accessfs/inode.c:391:
+{
+

ERROR:SPACING: space required after that ',' (ctx:VxO)
#686: FILE: fs/accessfs/inode.c:394:
+	mountdir = proc_mkdir("access",&proc_root);
 	                              ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#686: FILE: fs/accessfs/inode.c:394:
+	mountdir = proc_mkdir("access",&proc_root);
 	                               ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#696: FILE: fs/accessfs/inode.c:404:
+	remove_proc_entry("access",&proc_root);
 	                          ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#696: FILE: fs/accessfs/inode.c:404:
+	remove_proc_entry("access",&proc_root);
 	                           ^

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#707: FILE: fs/accessfs/inode.c:415:
+EXPORT_SYMBOL(accessfs_permitted);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#708: FILE: fs/accessfs/inode.c:416:
+EXPORT_SYMBOL(accessfs_make_dirpath);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#709: FILE: fs/accessfs/inode.c:417:
+EXPORT_SYMBOL(accessfs_register);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#710: FILE: fs/accessfs/inode.c:418:
+EXPORT_SYMBOL(accessfs_unregister);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#715: FILE: fs/accessfs/ip.c:1:
+/* Copyright (c) 2002 Olaf Dietsche

CHECK:SPACING: No space is necessary after a cast
#731: FILE: fs/accessfs/ip.c:17:
+	struct sockaddr_in *addr = (struct sockaddr_in *) uaddr;

WARNING:LINE_SPACING: Missing a blank line after declarations
#733: FILE: fs/accessfs/ip.c:19:
+	unsigned short snum = ntohs(addr->sin_port);
+	if (snum && snum < max_prot_sock

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#734: FILE: fs/accessfs/ip.c:20:
+	if (snum && snum < max_prot_sock
+	    && !accessfs_permitted(&bind_to_port[snum], MAY_EXEC)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#735: FILE: fs/accessfs/ip.c:21:
+	    && !accessfs_permitted(&bind_to_port[snum], MAY_EXEC)
+	    && !capable(CAP_NET_BIND_SERVICE))

CHECK:SPACING: No space is necessary after a cast
#745: FILE: fs/accessfs/ip.c:31:
+	struct sockaddr_in6 *addr = (struct sockaddr_in6 *) uaddr;

WARNING:LINE_SPACING: Missing a blank line after declarations
#747: FILE: fs/accessfs/ip.c:33:
+	unsigned short snum = ntohs(addr->sin6_port);
+	if (snum && snum < max_prot_sock

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#748: FILE: fs/accessfs/ip.c:34:
+	if (snum && snum < max_prot_sock
+	    && !accessfs_permitted(&bind_to_port[snum], MAY_EXEC)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#749: FILE: fs/accessfs/ip.c:35:
+	    && !accessfs_permitted(&bind_to_port[snum], MAY_EXEC)
+	    && !capable(CAP_NET_BIND_SERVICE))

WARNING:LINE_SPACING: Missing a blank line after declarations
#767: FILE: fs/accessfs/ip.c:53:
+	int i;
+	bind_to_port = kmalloc(max_prot_sock * sizeof(*bind_to_port), GFP_KERNEL);

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#767: FILE: fs/accessfs/ip.c:53:
+	bind_to_port = kmalloc(max_prot_sock * sizeof(*bind_to_port), GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

WARNING:LINE_SPACING: Missing a blank line after declarations
#773: FILE: fs/accessfs/ip.c:59:
+		char	buf[sizeof("65536")];
+		bind_to_port[i].uid = 0;

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IXUSR' are not preferred. Consider using octal permissions '0100'.
#775: FILE: fs/accessfs/ip.c:61:
+		bind_to_port[i].mode = i < PROT_SOCK ? S_IXUSR : S_IXUGO;

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IXUGO' are not preferred. Consider using octal permissions '0111'.
#775: FILE: fs/accessfs/ip.c:61:
+		bind_to_port[i].mode = i < PROT_SOCK ? S_IXUSR : S_IXUGO;

WARNING:LINE_SPACING: Missing a blank line after declarations
#788: FILE: fs/accessfs/ip.c:74:
+	int i;
+	net_hooks_unregister(&ip_net_ops);

WARNING:LINE_SPACING: Missing a blank line after declarations
#791: FILE: fs/accessfs/ip.c:77:
+		char	buf[sizeof("65536")];
+		sprintf(buf, "%d", i);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#811: FILE: include/linux/accessfs_fs.h:1:
+/* -*- mode: c -*- */

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#848: FILE: include/linux/accessfs_fs.h:38:
+extern int accessfs_permitted(struct access_attr *p, int mask);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#849: FILE: include/linux/accessfs_fs.h:39:
+extern struct accessfs_direntry *accessfs_make_dirpath(const char *name);

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#850: FILE: include/linux/accessfs_fs.h:40:
+extern int accessfs_register(struct accessfs_direntry *dir, const char *name, struct access_attr *attr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#850: FILE: include/linux/accessfs_fs.h:40:
+extern int accessfs_register(struct accessfs_direntry *dir, const char *name, struct access_attr *attr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#851: FILE: include/linux/accessfs_fs.h:41:
+extern void accessfs_unregister(struct accessfs_direntry *dir, const char *name);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#878: FILE: include/net/sock.h:1431:
+extern int default_ip_prot_sock(struct socket *sock, struct sockaddr *uaddr, int addr_len);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#879: FILE: include/net/sock.h:1432:
+extern int default_ip6_prot_sock(struct socket *sock, struct sockaddr *uaddr, int addr_len);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#880: FILE: include/net/sock.h:1433:
+extern void net_hooks_register(struct net_hook_operations *ops);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#881: FILE: include/net/sock.h:1434:
+extern void net_hooks_unregister(struct net_hook_operations *ops);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#921: FILE: net/hooks.c:1:
+/* Copyright (c) 2002 Olaf Dietsche

CHECK:SPACING: No space is necessary after a cast
#933: FILE: net/hooks.c:13:
+	struct sockaddr_in *addr = (struct sockaddr_in *) uaddr;

WARNING:LINE_SPACING: Missing a blank line after declarations
#935: FILE: net/hooks.c:15:
+	unsigned short snum = ntohs(addr->sin_port);
+	if (snum && snum < PROT_SOCK && !capable(CAP_NET_BIND_SERVICE))

CHECK:SPACING: No space is necessary after a cast
#944: FILE: net/hooks.c:24:
+	struct sockaddr_in6 *addr = (struct sockaddr_in6 *) uaddr;

WARNING:LINE_SPACING: Missing a blank line after declarations
#946: FILE: net/hooks.c:26:
+	unsigned short snum = ntohs(addr->sin6_port);
+	if (snum && snum < PROT_SOCK && !capable(CAP_NET_BIND_SERVICE))

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#972: FILE: net/hooks.c:52:
+EXPORT_SYMBOL(net_ops);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#973: FILE: net/hooks.c:53:
+EXPORT_SYMBOL(default_ip_prot_sock);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#974: FILE: net/hooks.c:54:
+EXPORT_SYMBOL(default_ip6_prot_sock);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#975: FILE: net/hooks.c:55:
+EXPORT_SYMBOL(net_hooks_register);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#976: FILE: net/hooks.c:56:
+EXPORT_SYMBOL(net_hooks_unregister);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000110512.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 11 errors, 78 warnings, 30 checks, 893 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000110512.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
