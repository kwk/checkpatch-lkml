WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#56: 
diff -X dontdiff -Nur vanilla-2.6.0-test6/ipc/msg.c linux-2.6.0-test6/ipc/msg.c

ERROR:TRAILING_WHITESPACE: trailing whitespace
#224: FILE: ipc/util.c:92:
+ *^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#227: FILE: ipc/util.c:95:
+struct msg_msg* get_msg(void* src, int len)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#227: FILE: ipc/util.c:95:
+struct msg_msg* get_msg(void* src, int len)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#229: FILE: ipc/util.c:97:
+	struct msg_msg* msg;

ERROR:POINTER_LOCATION: "foo** bar" should be "foo **bar"
#230: FILE: ipc/util.c:98:
+	struct msg_msgseg** pseg;

ERROR:SPACING: space required before the open parenthesis '('
#235: FILE: ipc/util.c:103:
+	if(alen > (int)DATALEN_MSG)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#238: FILE: ipc/util.c:106:
+	msg = (struct msg_msg *) kmalloc (sizeof(*msg) + alen, GFP_KERNEL);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#238: FILE: ipc/util.c:106:
+	msg = (struct msg_msg *) kmalloc (sizeof(*msg) + alen, GFP_KERNEL);

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#238: FILE: ipc/util.c:106:
+	msg = (struct msg_msg *) kmalloc (sizeof(*msg) + alen, GFP_KERNEL);

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#239: FILE: ipc/util.c:107:
+	if(msg==NULL)
 	      ^

ERROR:SPACING: space required before the open parenthesis '('
#239: FILE: ipc/util.c:107:
+	if(msg==NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!msg"
#239: FILE: ipc/util.c:107:
+	if(msg==NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#245: FILE: ipc/util.c:113:
+	if (copy_from_user(msg+1, src, alen)) {
 	                      ^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#251: FILE: ipc/util.c:119:
+	src = ((char*)src)+alen;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#251: FILE: ipc/util.c:119:
+	src = ((char*)src)+alen;
 	                  ^

ERROR:SPACING: space required before the open parenthesis '('
#253: FILE: ipc/util.c:121:
+	while(len > 0) {

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#254: FILE: ipc/util.c:122:
+		struct msg_msgseg* seg;

WARNING:LINE_SPACING: Missing a blank line after declarations
#255: FILE: ipc/util.c:123:
+		struct msg_msgseg* seg;
+		alen = len;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#256: FILE: ipc/util.c:124:
+		if(alen > (int)DATALEN_SEG)

CHECK:SPACING: No space is necessary after a cast
#258: FILE: ipc/util.c:126:
+		seg = (struct msg_msgseg *) kmalloc (sizeof(*seg) + alen, GFP_KERNEL);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#258: FILE: ipc/util.c:126:
+		seg = (struct msg_msgseg *) kmalloc (sizeof(*seg) + alen, GFP_KERNEL);

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#258: FILE: ipc/util.c:126:
+		seg = (struct msg_msgseg *) kmalloc (sizeof(*seg) + alen, GFP_KERNEL);

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#259: FILE: ipc/util.c:127:
+		if(seg==NULL) {
 		      ^

ERROR:SPACING: space required before the open parenthesis '('
#259: FILE: ipc/util.c:127:
+		if(seg==NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!seg"
#259: FILE: ipc/util.c:127:
+		if(seg==NULL) {

ERROR:SPACING: spaces required around that '=' (ctx:VxO)
#260: FILE: ipc/util.c:128:
+			err=-ENOMEM;
 			   ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#260: FILE: ipc/util.c:128:
+			err=-ENOMEM;
 			    ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#265: FILE: ipc/util.c:133:
+		if(copy_from_user (seg+1, src, alen)) {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#265: FILE: ipc/util.c:133:
+		if(copy_from_user (seg+1, src, alen)) {
 		                      ^

ERROR:SPACING: space required before the open parenthesis '('
#265: FILE: ipc/util.c:133:
+		if(copy_from_user (seg+1, src, alen)) {

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#271: FILE: ipc/util.c:139:
+		src = ((char*)src)+alen;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#271: FILE: ipc/util.c:139:
+		src = ((char*)src)+alen;
 		                  ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#273: FILE: ipc/util.c:141:
+^I$

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#293: FILE: ipc/util.c:161:
+int put_msg(void* dest, struct msg_msg* msg, int len)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#293: FILE: ipc/util.c:161:
+int put_msg(void* dest, struct msg_msg* msg, int len)

ERROR:SPACING: space required before the open parenthesis '('
#299: FILE: ipc/util.c:167:
+	if(alen > (int)DATALEN_MSG)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#301: FILE: ipc/util.c:169:
+	if(copy_to_user (dest, msg+1, alen))

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#301: FILE: ipc/util.c:169:
+	if(copy_to_user (dest, msg+1, alen))
 	                          ^

ERROR:SPACING: space required before the open parenthesis '('
#301: FILE: ipc/util.c:169:
+	if(copy_to_user (dest, msg+1, alen))

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#305: FILE: ipc/util.c:173:
+	dest = ((char*)dest)+alen;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#305: FILE: ipc/util.c:173:
+	dest = ((char*)dest)+alen;
 	                    ^

ERROR:SPACING: space required before the open parenthesis '('
#307: FILE: ipc/util.c:175:
+	while(len > 0) {

ERROR:SPACING: space required before the open parenthesis '('
#309: FILE: ipc/util.c:177:
+		if(alen > (int)DATALEN_SEG)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#311: FILE: ipc/util.c:179:
+		if(copy_to_user (dest, seg+1, alen))

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#311: FILE: ipc/util.c:179:
+		if(copy_to_user (dest, seg+1, alen))
 		                          ^

ERROR:SPACING: space required before the open parenthesis '('
#311: FILE: ipc/util.c:179:
+		if(copy_to_user (dest, seg+1, alen))

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#314: FILE: ipc/util.c:182:
+		dest = ((char*)dest)+alen;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#314: FILE: ipc/util.c:182:
+		dest = ((char*)dest)+alen;
 		                    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#315: FILE: ipc/util.c:183:
+		seg=seg->next;
 		   ^

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#325: FILE: ipc/util.c:193:
+void free_msg(struct msg_msg* msg)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#327: FILE: ipc/util.c:195:
+	struct msg_msgseg* seg;

ERROR:SPACING: space required before the open parenthesis '('
#333: FILE: ipc/util.c:201:
+	while(seg != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "seg"
#333: FILE: ipc/util.c:201:
+	while(seg != NULL) {

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#334: FILE: ipc/util.c:202:
+		struct msg_msgseg* tmp = seg->next;

WARNING:LINE_SPACING: Missing a blank line after declarations
#335: FILE: ipc/util.c:203:
+		struct msg_msgseg* tmp = seg->next;
+		kfree(seg);

ERROR:SPACING: space required before the open parenthesis '('
#349: FILE: ipc/util.c:377:
+	if(size > (int)PAGE_SIZE)

ERROR:SPACING: space required before the open parenthesis '('
#358: FILE: ipc/util.c:395:
+	if(size > (int)PAGE_SIZE)

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#367: FILE: ipc/util.c:628:
+	if((unsigned long)uid/SEQ_MULTIPLIER != ipcp->seq)
 	                     ^

ERROR:SPACING: space required before the open parenthesis '('
#367: FILE: ipc/util.c:628:
+	if((unsigned long)uid/SEQ_MULTIPLIER != ipcp->seq)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#381: FILE: ipc/util.h:31:
+	struct task_struct* r_tsk;

ERROR:POINTER_LOCATION: "foo* volatile bar" should be "foo * volatile bar"
#387: FILE: ipc/util.h:37:
+	struct msg_msg* volatile r_msg;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#387: FILE: ipc/util.h:37:
+	struct msg_msg* volatile r_msg;

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#393: FILE: ipc/util.h:43:
+	struct task_struct* tsk;

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#397: FILE: ipc/util.h:47:
+	struct msg_msgseg* next;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#400: FILE: ipc/util.h:50:
+};
+struct msg_msg* get_msg(void* src, int len);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#400: FILE: ipc/util.h:50:
+struct msg_msg* get_msg(void* src, int len);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#400: FILE: ipc/util.h:50:
+struct msg_msg* get_msg(void* src, int len);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#401: FILE: ipc/util.h:51:
+int put_msg(void* dest, struct msg_msg* msg, int len);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#401: FILE: ipc/util.h:51:
+int put_msg(void* dest, struct msg_msg* msg, int len);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#402: FILE: ipc/util.h:52:
+void free_msg(struct msg_msg* msg);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000332581.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 45 errors, 11 warnings, 15 checks, 333 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000332581.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
