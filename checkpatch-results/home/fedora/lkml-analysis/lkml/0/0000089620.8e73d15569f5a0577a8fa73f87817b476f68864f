WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#28: 
which change the state of an LED.  Two kinds of trigger are available, simple

WARNING:TYPO_SPELLING: 'exising' may be misspelled - perhaps 'existing'?
#29: 
ones which can be added to exising code with minimum disruption and complex
                           ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#76: FILE: drivers/leds/led-class.c:112:
+	class_device_create_file(led_cdev->class_dev,
+				&class_device_attr_trigger);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#88: FILE: drivers/leds/led-class.c:134:
+	class_device_remove_file(led_cdev->class_dev,
+				&class_device_attr_trigger);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#108: FILE: drivers/leds/leds.h:34:
+void led_trigger_set(struct led_classdev *led_cdev,
+			struct led_trigger *trigger);

ERROR:SPACING: space required before the open parenthesis '('
#110: FILE: drivers/leds/leds.h:36:
+#define led_trigger_set_default(x) do {} while(0)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#111: FILE: drivers/leds/leds.h:37:
+#define led_trigger_set(x, y) do {} while(0)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#115: FILE: drivers/leds/leds.h:41:
+ssize_t led_trigger_store(struct class_device *dev, const char *buf,
+			size_t count);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#124: FILE: drivers/leds/led-triggers.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#156: FILE: drivers/leds/led-triggers.c:33:
+ssize_t led_trigger_store(struct class_device *dev, const char *buf,
+			size_t count)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#193: FILE: drivers/leds/led-triggers.c:70:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#204: FILE: drivers/leds/led-triggers.c:81:
+		len += sprintf(buf+len, "[none] ");
 		                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#206: FILE: drivers/leds/led-triggers.c:83:
+		len += sprintf(buf+len, "none ");
 		                  ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#210: FILE: drivers/leds/led-triggers.c:87:
+		if (led_cdev->trigger && !strcmp(led_cdev->trigger->name,
+							trig->name))

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#211: FILE: drivers/leds/led-triggers.c:88:
+			len += sprintf(buf+len, "[%s] ", trig->name);
 			                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#213: FILE: drivers/leds/led-triggers.c:90:
+			len += sprintf(buf+len, "%s ", trig->name);
 			                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#218: FILE: drivers/leds/led-triggers.c:95:
+	len += sprintf(len+buf, "\n");
 	                  ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#223: FILE: drivers/leds/led-triggers.c:100:
+void led_trigger_event(struct led_trigger *trigger,
+			enum led_brightness brightness)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#297: FILE: drivers/leds/led-triggers.c:174:
+		if (!led_cdev->trigger && led_cdev->default_trigger &&
+			    !strcmp(led_cdev->default_trigger, trigger->name))

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*trigger)...) over kzalloc(sizeof(struct led_trigger)...)
#310: FILE: drivers/leds/led-triggers.c:187:
+	trigger = kzalloc(sizeof(struct led_trigger), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#347: FILE: drivers/leds/led-triggers.c:224:
+EXPORT_SYMBOL_GPL(led_trigger_set_default);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#348: FILE: drivers/leds/led-triggers.c:225:
+EXPORT_SYMBOL_GPL(led_trigger_show);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#349: FILE: drivers/leds/led-triggers.c:226:
+EXPORT_SYMBOL_GPL(led_trigger_store);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#353: FILE: drivers/leds/led-triggers.c:230:
+EXPORT_SYMBOL_GPL(led_trigger_unregister);

WARNING:TYPO_SPELLING: 'Tigger' may be misspelled - perhaps 'Trigger'?
#355: FILE: drivers/leds/led-triggers.c:232:
+/* Simple LED Tigger Interface */
               ^^^^^^

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#357: FILE: drivers/leds/led-triggers.c:234:
+EXPORT_SYMBOL_GPL(led_trigger_unregister_simple);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#358: FILE: drivers/leds/led-triggers.c:235:
+EXPORT_SYMBOL_GPL(led_trigger_event);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#417: FILE: include/linux/leds.h:81:
+extern int led_trigger_register(struct led_trigger *trigger);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#418: FILE: include/linux/leds.h:82:
+extern void led_trigger_unregister(struct led_trigger *trigger);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#421: FILE: include/linux/leds.h:85:
+#define DEFINE_LED_TRIGGER(x)		static struct led_trigger *x;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#421: FILE: include/linux/leds.h:85:
+#define DEFINE_LED_TRIGGER(x)		static struct led_trigger *x;

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#422: FILE: include/linux/leds.h:86:
+#define DEFINE_LED_TRIGGER_GLOBAL(x)	struct led_trigger *x;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#422: FILE: include/linux/leds.h:86:
+#define DEFINE_LED_TRIGGER_GLOBAL(x)	struct led_trigger *x;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#423: FILE: include/linux/leds.h:87:
+extern void led_trigger_register_simple(const char *name,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#424: FILE: include/linux/leds.h:88:
+extern void led_trigger_register_simple(const char *name,
+				struct led_trigger **trigger);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#425: FILE: include/linux/leds.h:89:
+extern void led_trigger_unregister_simple(struct led_trigger *trigger);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#426: FILE: include/linux/leds.h:90:
+extern void led_trigger_event(struct led_trigger *trigger,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#427: FILE: include/linux/leds.h:91:
+extern void led_trigger_event(struct led_trigger *trigger,
+				enum led_brightness event);

ERROR:SPACING: space required before the open parenthesis '('
#434: FILE: include/linux/leds.h:98:
+#define led_trigger_register_simple(x, y) do {} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#435: FILE: include/linux/leds.h:99:
+#define led_trigger_unregister_simple(x) do {} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#436: FILE: include/linux/leds.h:100:
+#define led_trigger_event(x, y) do {} while(0)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000089620.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 5 errors, 12 warnings, 24 checks, 373 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000089620.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
