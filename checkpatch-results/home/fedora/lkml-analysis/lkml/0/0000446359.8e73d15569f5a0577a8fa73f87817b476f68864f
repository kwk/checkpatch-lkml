WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#89: 
diff -urN linux-2.5.26-base/Documentation/DocBook/kernel-api.tmpl linux-2.5.26-read_barrier_depends/Documentation/DocBook/kernel-api.tmpl

WARNING:TYPO_SPELLING: 'Iinclude' may be misspelled - perhaps 'Include'?
#100: FILE: Documentation/DocBook/kernel-api.tmpl:47:
+!Iinclude/asm-i386/system.h
  ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#112: FILE: include/asm-alpha/system.h:143:
+#define memory_barrier() \
 __asm__ __volatile__("mb": : :"memory")

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#116: FILE: include/asm-alpha/system.h:146:
+#define read_barrier() \
 __asm__ __volatile__("mb": : :"memory")

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#120: FILE: include/asm-alpha/system.h:149:
+#define read_barrier_depends() \
+__asm__ __volatile__("mb": : :"memory")

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#121: FILE: include/asm-alpha/system.h:150:
+__asm__ __volatile__("mb": : :"memory")
                          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#121: FILE: include/asm-alpha/system.h:150:
+__asm__ __volatile__("mb": : :"memory")
                              ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#123: FILE: include/asm-alpha/system.h:152:
+#define write_barrier() \
 __asm__ __volatile__("wmb": : :"memory")

WARNING:MEMORY_BARRIER: memory barrier without comment
#126: FILE: include/asm-alpha/system.h:155:
+#define mb()	memory_barrier()

WARNING:MEMORY_BARRIER: memory barrier without comment
#127: FILE: include/asm-alpha/system.h:156:
+#define rmb()	read_barrier()

WARNING:MEMORY_BARRIER: memory barrier without comment
#128: FILE: include/asm-alpha/system.h:157:
+#define wmb()	write_barrier()

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#152: FILE: include/asm-arm/system.h:52:
+#define memory_barrier() __asm__ __volatile__ ("" : : : "memory")

ERROR:SPACING: space required before the open parenthesis '('
#154: FILE: include/asm-arm/system.h:54:
+#define read_barrier_depends() do { } while(0)

WARNING:MEMORY_BARRIER: memory barrier without comment
#158: FILE: include/asm-arm/system.h:58:
+#define mb()	memory_barrier()

WARNING:MEMORY_BARRIER: memory barrier without comment
#159: FILE: include/asm-arm/system.h:59:
+#define rmb()	read_barrier()

WARNING:MEMORY_BARRIER: memory barrier without comment
#160: FILE: include/asm-arm/system.h:60:
+#define wmb()	write_barrier()

ERROR:SPACING: space required before the open parenthesis '('
#176: FILE: include/asm-arm/system.h:101:
+#define smp_read_barrier_depends()		do { } while(0)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#190: FILE: include/asm-cris/system.h:150:
+#define memory_barrier() __asm__ __volatile__ ("" : : : "memory")

ERROR:SPACING: space required before the open parenthesis '('
#192: FILE: include/asm-cris/system.h:152:
+#define read_barrier_depends() do { } while(0)

WARNING:MEMORY_BARRIER: memory barrier without comment
#195: FILE: include/asm-cris/system.h:155:
+#define mb()	memory_barrier()

WARNING:MEMORY_BARRIER: memory barrier without comment
#196: FILE: include/asm-cris/system.h:156:
+#define rmb()	read_barrier()

WARNING:MEMORY_BARRIER: memory barrier without comment
#197: FILE: include/asm-cris/system.h:157:
+#define wmb()	write_barrier()

ERROR:SPACING: space required before the open parenthesis '('
#207: FILE: include/asm-cris/system.h:167:
+#define smp_read_barrier_depends()     do { } while(0)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#275: FILE: include/asm-i386/system.h:344:
+#define memory_barrier() \
+		__asm__ __volatile__ ("lock; addl $0,0(%%esp)": : :"memory")

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#276: FILE: include/asm-i386/system.h:345:
+		__asm__ __volatile__ ("lock; addl $0,0(%%esp)": : :"memory")
 		                                              ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#276: FILE: include/asm-i386/system.h:345:
+		__asm__ __volatile__ ("lock; addl $0,0(%%esp)": : :"memory")
 		                                                  ^

ERROR:SPACING: space required before the open parenthesis '('
#355: FILE: include/asm-i386/system.h:424:
+#define read_barrier_depends()	do { } while(0)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#378: FILE: include/asm-i386/system.h:446:
+#define write_barrier() \
+		__asm__ __volatile__ ("lock; addl $0,0(%%esp)": : :"memory")

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#379: FILE: include/asm-i386/system.h:447:
+		__asm__ __volatile__ ("lock; addl $0,0(%%esp)": : :"memory")
 		                                              ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#379: FILE: include/asm-i386/system.h:447:
+		__asm__ __volatile__ ("lock; addl $0,0(%%esp)": : :"memory")
 		                                                  ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#382: FILE: include/asm-i386/system.h:449:
+#define write_barrier() \
+		__asm__ __volatile__ ("": : :"memory")

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#383: FILE: include/asm-i386/system.h:450:
+		__asm__ __volatile__ ("": : :"memory")
 		                        ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#383: FILE: include/asm-i386/system.h:450:
+		__asm__ __volatile__ ("": : :"memory")
 		                            ^

WARNING:MEMORY_BARRIER: memory barrier without comment
#386: FILE: include/asm-i386/system.h:453:
+#define mb()	memory_barrier()

WARNING:MEMORY_BARRIER: memory barrier without comment
#387: FILE: include/asm-i386/system.h:454:
+#define rmb()	read_barrier()

WARNING:MEMORY_BARRIER: memory barrier without comment
#388: FILE: include/asm-i386/system.h:455:
+#define wmb()	write_barrier()

ERROR:SPACING: space required before the open parenthesis '('
#398: FILE: include/asm-i386/system.h:465:
+#define smp_read_barrier_depends()	do { } while(0)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#436: FILE: include/asm-ia64/system.h:86:
+#define memory_barrier()	__asm__ __volatile__ ("mf" ::: "memory")

ERROR:SPACING: space required before the open parenthesis '('
#438: FILE: include/asm-ia64/system.h:88:
+#define read_barrier_depends()	do { } while(0)

WARNING:MEMORY_BARRIER: memory barrier without comment
#441: FILE: include/asm-ia64/system.h:91:
+#define mb()	memory_barrier()

WARNING:MEMORY_BARRIER: memory barrier without comment
#442: FILE: include/asm-ia64/system.h:92:
+#define rmb()	read_barrier()

WARNING:MEMORY_BARRIER: memory barrier without comment
#443: FILE: include/asm-ia64/system.h:93:
+#define wmb()	write_barrier()

ERROR:SPACING: space required before the open parenthesis '('
#453: FILE: include/asm-ia64/system.h:103:
+# define smp_read_barrier_depends()	do { } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#469: FILE: include/asm-m68k/system.h:83:
+#define read_barrier_depends()	do { } while(0)

WARNING:MEMORY_BARRIER: memory barrier without comment
#474: FILE: include/asm-m68k/system.h:88:
+#define mb()	memory_barrier()

WARNING:MEMORY_BARRIER: memory barrier without comment
#475: FILE: include/asm-m68k/system.h:89:
+#define rmb()	read_barrier()

WARNING:MEMORY_BARRIER: memory barrier without comment
#476: FILE: include/asm-m68k/system.h:90:
+#define wmb()	write_barrier()

ERROR:SPACING: space required before the open parenthesis '('
#480: FILE: include/asm-m68k/system.h:94:
+#define smp_read_barrier_depends()	do { } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#494: FILE: include/asm-mips/system.h:152:
+#define read_barrier()		do { } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#495: FILE: include/asm-mips/system.h:153:
+#define read_barrier_depends()	do { } while(0)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#502: FILE: include/asm-mips/system.h:159:
+#define memory_barrier()				\
 __asm__ __volatile__(					\
 	"# prevent instructions being moved around\n\t"	\
 	".set\tnoreorder\n\t"				\

ERROR:SPACING: space required before the open parenthesis '('
#513: FILE: include/asm-mips/system.h:170:
+#define read_barrier_depends()	do { } while(0)

WARNING:MEMORY_BARRIER: memory barrier without comment
#518: FILE: include/asm-mips/system.h:175:
+#define mb()	memory_barrier()

WARNING:MEMORY_BARRIER: memory barrier without comment
#519: FILE: include/asm-mips/system.h:176:
+#define rmb()	read_barrier()

WARNING:MEMORY_BARRIER: memory barrier without comment
#520: FILE: include/asm-mips/system.h:177:
+#define wmb()	write_barrier()

ERROR:SPACING: space required before the open parenthesis '('
#530: FILE: include/asm-mips/system.h:187:
+#define smp_read_barrier_depends()	do { } while(0)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#542: FILE: include/asm-mips64/system.h:140:
+#define memory_barrier()				\
 __asm__ __volatile__(					\
 	"# prevent instructions being moved around\n\t"	\
 	".set\tnoreorder\n\t"				\

ERROR:SPACING: space required before the open parenthesis '('
#553: FILE: include/asm-mips64/system.h:150:
+#define read_barrier_depends()	do { } while(0)

WARNING:MEMORY_BARRIER: memory barrier without comment
#556: FILE: include/asm-mips64/system.h:153:
+#define mb()	memory_barrier()

WARNING:MEMORY_BARRIER: memory barrier without comment
#557: FILE: include/asm-mips64/system.h:154:
+#define rmb()	read_barrier()

WARNING:MEMORY_BARRIER: memory barrier without comment
#558: FILE: include/asm-mips64/system.h:155:
+#define wmb()	write_barrier()

ERROR:SPACING: space required before the open parenthesis '('
#568: FILE: include/asm-mips64/system.h:165:
+#define smp_read_barrier_depends()	do { } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#579: FILE: include/asm-parisc/system.h:53:
+#define smp_read_barrier_depends()	do { } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#587: FILE: include/asm-parisc/system.h:62:
+#define smp_read_barrier_depends()	do { } while(0)

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#597: FILE: include/asm-parisc/system.h:125:
+#define memory_barrier()  __asm__ __volatile__ ("sync" : : :"memory")
                                                            ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#597: FILE: include/asm-parisc/system.h:125:
+#define memory_barrier()  __asm__ __volatile__ ("sync" : : :"memory")

ERROR:SPACING: space required before the open parenthesis '('
#600: FILE: include/asm-parisc/system.h:128:
+#define read_barrier_depends()	do { } while(0)

WARNING:MEMORY_BARRIER: memory barrier without comment
#602: FILE: include/asm-parisc/system.h:130:
+#define mb()	memory_barrier()

WARNING:MEMORY_BARRIER: memory barrier without comment
#603: FILE: include/asm-parisc/system.h:131:
+#define rmb()	read_barrier()

WARNING:MEMORY_BARRIER: memory barrier without comment
#604: FILE: include/asm-parisc/system.h:132:
+#define wmb()	write_barrier()

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#631: FILE: include/asm-ppc/system.h:35:
+#define memory_barrier()  __asm__ __volatile__ ("sync" : : : "memory")

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#632: FILE: include/asm-ppc/system.h:36:
+#define read_barrier()  __asm__ __volatile__ ("sync" : : : "memory")

ERROR:SPACING: space required before the open parenthesis '('
#633: FILE: include/asm-ppc/system.h:37:
+#define read_barrier_depends()  do { } while(0)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#634: FILE: include/asm-ppc/system.h:38:
+#define write_barrier()  __asm__ __volatile__ ("eieio" : : : "memory")

WARNING:MEMORY_BARRIER: memory barrier without comment
#636: FILE: include/asm-ppc/system.h:40:
+#define mb()	memory_barrier()

WARNING:MEMORY_BARRIER: memory barrier without comment
#637: FILE: include/asm-ppc/system.h:41:
+#define rmb()	read_barrier()

WARNING:MEMORY_BARRIER: memory barrier without comment
#638: FILE: include/asm-ppc/system.h:42:
+#define wmb()	write_barrier()

ERROR:SPACING: space required before the open parenthesis '('
#651: FILE: include/asm-ppc/system.h:55:
+#define smp_read_barrier_depends()	do { } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#667: FILE: include/asm-s390/system.h:123:
+#define read_barrier_depends() do { } while(0)

WARNING:MEMORY_BARRIER: memory barrier without comment
#676: FILE: include/asm-s390/system.h:132:
+#define mb()	memory_barrier()

WARNING:MEMORY_BARRIER: memory barrier without comment
#677: FILE: include/asm-s390/system.h:133:
+#define rmb()	read_barrier()

WARNING:MEMORY_BARRIER: memory barrier without comment
#678: FILE: include/asm-s390/system.h:134:
+#define wmb()	write_barrier()

ERROR:SPACING: space required before the open parenthesis '('
#695: FILE: include/asm-s390x/system.h:136:
+#define read_barrier_depends()	do { } while(0)

WARNING:MEMORY_BARRIER: memory barrier without comment
#707: FILE: include/asm-s390x/system.h:148:
+#define mb()	memory_barrier()

WARNING:MEMORY_BARRIER: memory barrier without comment
#708: FILE: include/asm-s390x/system.h:149:
+#define rmb()	read_barrier()

WARNING:MEMORY_BARRIER: memory barrier without comment
#709: FILE: include/asm-s390x/system.h:150:
+#define wmb()	write_barrier()

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#724: FILE: include/asm-sh/system.h:89:
+#define memory_barrier()	__asm__ __volatile__ ("": : :"memory")
                         	                        ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#724: FILE: include/asm-sh/system.h:89:
+#define memory_barrier()	__asm__ __volatile__ ("": : :"memory")
                         	                            ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#724: FILE: include/asm-sh/system.h:89:
+#define memory_barrier()	__asm__ __volatile__ ("": : :"memory")

ERROR:SPACING: space required before the open parenthesis '('
#726: FILE: include/asm-sh/system.h:91:
+#define read_barrier_depends()	do { } while(0)

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#727: FILE: include/asm-sh/system.h:92:
+#define write_barrier()		__asm__ __volatile__ ("": : :"memory")
                        		                        ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#727: FILE: include/asm-sh/system.h:92:
+#define write_barrier()		__asm__ __volatile__ ("": : :"memory")
                        		                            ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#727: FILE: include/asm-sh/system.h:92:
+#define write_barrier()		__asm__ __volatile__ ("": : :"memory")

WARNING:MEMORY_BARRIER: memory barrier without comment
#729: FILE: include/asm-sh/system.h:94:
+#define mb()	memory_barrier()

WARNING:MEMORY_BARRIER: memory barrier without comment
#730: FILE: include/asm-sh/system.h:95:
+#define rmb()	read_barrier()

WARNING:MEMORY_BARRIER: memory barrier without comment
#731: FILE: include/asm-sh/system.h:96:
+#define wmb()	write_barrier()

ERROR:SPACING: space required before the open parenthesis '('
#741: FILE: include/asm-sh/system.h:106:
+#define smp_read_barrier_depends()	do { } while(0)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#755: FILE: include/asm-sparc/system.h:278:
+#define memory_barrier()	__asm__ __volatile__ ("" : : : "memory")

ERROR:SPACING: space required before the open parenthesis '('
#757: FILE: include/asm-sparc/system.h:280:
+#define read_barrier_depends()	do { } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#763: FILE: include/asm-sparc/system.h:286:
+#define smp_read_barrier_depends()	do { } while(0)

WARNING:MEMORY_BARRIER: memory barrier without comment
#766: FILE: include/asm-sparc/system.h:289:
+#define mb()	memory_barrier()

WARNING:MEMORY_BARRIER: memory barrier without comment
#767: FILE: include/asm-sparc/system.h:290:
+#define rmb()	read_barrier()

WARNING:MEMORY_BARRIER: memory barrier without comment
#768: FILE: include/asm-sparc/system.h:291:
+#define wmb()	write_barrier()

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#781: FILE: include/asm-sparc64/system.h:99:
+#define memory_barrier()		\
 	membar("#LoadLoad | #LoadStore | #StoreStore | #StoreLoad");

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:SPACING: space required before the open parenthesis '('
#786: FILE: include/asm-sparc64/system.h:102:
+#define read_barrier_depends()		do { } while(0)

WARNING:MEMORY_BARRIER: memory barrier without comment
#793: FILE: include/asm-sparc64/system.h:109:
+#define mb()	memory_barrier()

WARNING:MEMORY_BARRIER: memory barrier without comment
#794: FILE: include/asm-sparc64/system.h:110:
+#define rmb()	read_barrier()

WARNING:MEMORY_BARRIER: memory barrier without comment
#795: FILE: include/asm-sparc64/system.h:111:
+#define wmb()	write_barrier()

ERROR:SPACING: space required before the open parenthesis '('
#805: FILE: include/asm-sparc64/system.h:121:
+#define smp_read_barrier_depends()	do { } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#816: FILE: include/asm-x86_64/system.h:221:
+#define smp_read_barrier_depends()	do {} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#821: FILE: include/asm-x86_64/system.h:226:
+#define smp_read_barrier_depends()	do {} while(0)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#832: FILE: include/asm-x86_64/system.h:236:
+#define memory_barrier()	asm volatile("mfence":::"memory")

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#833: FILE: include/asm-x86_64/system.h:237:
+#define read_barrier()		asm volatile("lfence":::"memory")

ERROR:SPACING: space required before the open parenthesis '('
#834: FILE: include/asm-x86_64/system.h:238:
+#define read_barrier_depends()	do {} while(0)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#835: FILE: include/asm-x86_64/system.h:239:
+#define write_barrier()		asm volatile("sfence":::"memory")

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#837: FILE: include/asm-x86_64/system.h:241:
+#define mb() ^Imemory_barrier()$

WARNING:MEMORY_BARRIER: memory barrier without comment
#837: FILE: include/asm-x86_64/system.h:241:
+#define mb() 	memory_barrier()

WARNING:MEMORY_BARRIER: memory barrier without comment
#838: FILE: include/asm-x86_64/system.h:242:
+#define rmb()	read_barrier()

WARNING:MEMORY_BARRIER: memory barrier without comment
#839: FILE: include/asm-x86_64/system.h:243:
+#define wmb()	write_barrier()

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#859: FILE: include/linux/list.h:34:
+#define INIT_LIST_HEAD_RCU(ptr) do { \
+	(ptr)->next = (ptr); (ptr)->prev = (ptr); read_barrier_depends(); \
+} while (0)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#870: FILE: include/linux/list.h:79:
+ * Insert a new entry between two known consecutive entries. $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#875: FILE: include/linux/list.h:84:
+static __inline__ void __list_add_rcu(struct list_head * new,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:INLINE: plain inline is preferred over __inline__
#875: FILE: include/linux/list.h:84:
+static __inline__ void __list_add_rcu(struct list_head * new,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#876: FILE: include/linux/list.h:85:
+static __inline__ void __list_add_rcu(struct list_head * new,
+	struct list_head * prev,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#876: FILE: include/linux/list.h:85:
+	struct list_head * prev,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#877: FILE: include/linux/list.h:86:
+	struct list_head * next)

WARNING:MEMORY_BARRIER: memory barrier without comment
#881: FILE: include/linux/list.h:90:
+	wmb();

WARNING:INLINE: plain inline is preferred over __inline__
#894: FILE: include/linux/list.h:103:
+static __inline__ void list_add_rcu(struct list_head *new, struct list_head *head)

WARNING:INLINE: plain inline is preferred over __inline__
#907: FILE: include/linux/list.h:116:
+static __inline__ void list_add_tail_rcu(struct list_head *new, struct list_head *head)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#922: FILE: include/linux/list.h:149:
+ * Note: list_empty on entry does not return true after this, $

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pos' - possible side-effects?
#952: FILE: include/linux/list.h:281:
+#define list_for_each_rcu(pos, head) \
+	for (pos = (head)->next, prefetch(pos->next); pos != (head); \
+        	pos = pos->next, ({ read_barrier_depends(); 0}), prefetch(pos->next))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'head' - possible side-effects?
#952: FILE: include/linux/list.h:281:
+#define list_for_each_rcu(pos, head) \
+	for (pos = (head)->next, prefetch(pos->next); pos != (head); \
+        	pos = pos->next, ({ read_barrier_depends(); 0}), prefetch(pos->next))

ERROR:CODE_INDENT: code indent should use tabs where possible
#954: FILE: include/linux/list.h:283:
+        ^Ipos = pos->next, ({ read_barrier_depends(); 0}), prefetch(pos->next))$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#954: FILE: include/linux/list.h:283:
+        ^Ipos = pos->next, ({ read_barrier_depends(); 0}), prefetch(pos->next))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#954: FILE: include/linux/list.h:283:
+        ^Ipos = pos->next, ({ read_barrier_depends(); 0}), prefetch(pos->next))$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#955: FILE: include/linux/list.h:284:
+        ^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#955: FILE: include/linux/list.h:284:
+        ^I$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#955: FILE: include/linux/list.h:284:
+        ^I$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#955: FILE: include/linux/list.h:284:
+        ^I$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pos' - possible side-effects?
#963: FILE: include/linux/list.h:292:
+#define list_for_each_safe_rcu(pos, n, head) \
+	for (pos = (head)->next, n = pos->next; pos != (head); \
+		pos = n, ({ read_barrier_depends(); 0}), n = pos->next)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#963: FILE: include/linux/list.h:292:
+#define list_for_each_safe_rcu(pos, n, head) \
+	for (pos = (head)->next, n = pos->next; pos != (head); \
+		pos = n, ({ read_barrier_depends(); 0}), n = pos->next)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'head' - possible side-effects?
#963: FILE: include/linux/list.h:292:
+#define list_for_each_safe_rcu(pos, n, head) \
+	for (pos = (head)->next, n = pos->next; pos != (head); \
+		pos = n, ({ read_barrier_depends(); 0}), n = pos->next)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000446359.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 75 errors, 60 warnings, 7 checks, 797 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000446359.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
