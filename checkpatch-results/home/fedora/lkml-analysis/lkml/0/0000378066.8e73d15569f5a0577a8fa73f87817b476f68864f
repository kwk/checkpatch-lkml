WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#28: 
 include/asm-s390/unistd.h |  252 ++++++++++++++++++++++++++--------------------

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#182: FILE: include/asm-s390/unistd.h:253:
+#define __NR_timer_settime	(__NR_timer_create+1)
                           	                  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#183: FILE: include/asm-s390/unistd.h:254:
+#define __NR_timer_gettime	(__NR_timer_create+2)
                           	                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#184: FILE: include/asm-s390/unistd.h:255:
+#define __NR_timer_getoverrun	(__NR_timer_create+3)
                              	                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#185: FILE: include/asm-s390/unistd.h:256:
+#define __NR_timer_delete	(__NR_timer_create+4)
                          	                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#186: FILE: include/asm-s390/unistd.h:257:
+#define __NR_clock_settime	(__NR_timer_create+5)
                           	                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#187: FILE: include/asm-s390/unistd.h:258:
+#define __NR_clock_gettime	(__NR_timer_create+6)
                           	                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#188: FILE: include/asm-s390/unistd.h:259:
+#define __NR_clock_getres	(__NR_timer_create+7)
                          	                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#189: FILE: include/asm-s390/unistd.h:260:
+#define __NR_clock_nanosleep	(__NR_timer_create+8)
                             	                  ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'res' - possible side-effects?
#202: FILE: include/asm-s390/unistd.h:266:
+#define __syscall_return(type, res)			     \
+do {							     \
+	if ((unsigned long)(res) >= (unsigned long)(-125)) { \
+		errno = -(res);				     \
+		res = -1;				     \
+	}						     \
+	return (type) (res);				     \
 } while (0)

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#202: FILE: include/asm-s390/unistd.h:266:
+#define __syscall_return(type, res)			     \
+do {							     \
+	if ((unsigned long)(res) >= (unsigned long)(-125)) { \
+		errno = -(res);				     \
+		res = -1;				     \
+	}						     \
+	return (type) (res);				     \
 } while (0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#257: FILE: include/asm-s390/unistd.h:277:
+#define _syscall0(type,name)				     \
                       ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#257: FILE: include/asm-s390/unistd.h:277:
+#define _syscall0(type,name)				     \
+type name(void) {					     \
+	register long __svcres asm("2");		     \
+	long __res;					     \
+	__asm__ __volatile__ (				     \
+		"    .if %b1 < 256\n"			     \
+		"    svc %b1\n"				     \
+		"    .else\n"				     \
+		"    lhi %%r1,%b1\n"			     \
+		"    svc 0\n"				     \
+		"    .endif"				     \
+		: "=d" (__svcres)			     \
+		: "i" (__NR_##name)			     \
+		: _svc_clobber );			     \
+	__res = __svcres;				     \
+	__syscall_return(type,__res);			     \
+}

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#258: FILE: include/asm-s390/unistd.h:278:
+type name(void) {					     \

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space prohibited before that close parenthesis ')'
#270: FILE: include/asm-s390/unistd.h:290:
+		: _svc_clobber );			     \

ERROR:SPACING: space required after that ',' (ctx:VxV)
#272: FILE: include/asm-s390/unistd.h:292:
+	__syscall_return(type,__res);			     \
 	                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#275: FILE: include/asm-s390/unistd.h:295:
+#define _syscall1(type,name,type1,arg1)			     \
                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#275: FILE: include/asm-s390/unistd.h:295:
+#define _syscall1(type,name,type1,arg1)			     \
                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#275: FILE: include/asm-s390/unistd.h:295:
+#define _syscall1(type,name,type1,arg1)			     \
                                  ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'type1' - possible side-effects?
#275: FILE: include/asm-s390/unistd.h:295:
+#define _syscall1(type,name,type1,arg1)			     \
+type name(type1 arg1) {					     \
+	register type1 __arg1 asm("2") = arg1;		     \
+	register long __svcres asm("2");		     \
+	long __res;					     \
+	__asm__ __volatile__ (				     \
+		"    .if %b1 < 256\n"			     \
+		"    svc %b1\n"				     \
+		"    .else\n"				     \
+		"    lhi %%r1,%b1\n"			     \
+		"    svc 0\n"				     \
+		"    .endif"				     \
+		: "=d" (__svcres)			     \
+		: "i" (__NR_##name),			     \
+		  "0" (__arg1)				     \
+		: _svc_clobber );			     \
+	__res = __svcres;				     \
+	__syscall_return(type,__res);			     \
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg1' - possible side-effects?
#275: FILE: include/asm-s390/unistd.h:295:
+#define _syscall1(type,name,type1,arg1)			     \
+type name(type1 arg1) {					     \
+	register type1 __arg1 asm("2") = arg1;		     \
+	register long __svcres asm("2");		     \
+	long __res;					     \
+	__asm__ __volatile__ (				     \
+		"    .if %b1 < 256\n"			     \
+		"    svc %b1\n"				     \
+		"    .else\n"				     \
+		"    lhi %%r1,%b1\n"			     \
+		"    svc 0\n"				     \
+		"    .endif"				     \
+		: "=d" (__svcres)			     \
+		: "i" (__NR_##name),			     \
+		  "0" (__arg1)				     \
+		: _svc_clobber );			     \
+	__res = __svcres;				     \
+	__syscall_return(type,__res);			     \
+}

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#276: FILE: include/asm-s390/unistd.h:296:
+type name(type1 arg1) {					     \

ERROR:SPACING: space prohibited before that close parenthesis ')'
#290: FILE: include/asm-s390/unistd.h:310:
+		: _svc_clobber );			     \

ERROR:SPACING: space required after that ',' (ctx:VxV)
#292: FILE: include/asm-s390/unistd.h:312:
+	__syscall_return(type,__res);			     \
 	                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#295: FILE: include/asm-s390/unistd.h:315:
+#define _syscall2(type,name,type1,arg1,type2,arg2)	     \
                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#295: FILE: include/asm-s390/unistd.h:315:
+#define _syscall2(type,name,type1,arg1,type2,arg2)	     \
                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#295: FILE: include/asm-s390/unistd.h:315:
+#define _syscall2(type,name,type1,arg1,type2,arg2)	     \
                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#295: FILE: include/asm-s390/unistd.h:315:
+#define _syscall2(type,name,type1,arg1,type2,arg2)	     \
                                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#295: FILE: include/asm-s390/unistd.h:315:
+#define _syscall2(type,name,type1,arg1,type2,arg2)	     \
                                             ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'type1' - possible side-effects?
#295: FILE: include/asm-s390/unistd.h:315:
+#define _syscall2(type,name,type1,arg1,type2,arg2)	     \
+type name(type1 arg1, type2 arg2) {			     \
+	register type1 __arg1 asm("2") = arg1;		     \
+	register type2 __arg2 asm("3") = arg2;		     \
+	register long __svcres asm("2");		     \
+	long __res;					     \
+	__asm__ __volatile__ (				     \
+		"    .if %b1 < 256\n"			     \
+		"    svc %b1\n"				     \
+		"    .else\n"				     \
+		"    lhi %%r1,%b1\n"			     \
+		"    svc 0\n"				     \
+		"    .endif"				     \
+		: "=d" (__svcres)			     \
+		: "i" (__NR_##name),			     \
+		  "0" (__arg1),				     \
+		  "d" (__arg2)				     \
+		: _svc_clobber );			     \
+	__res = __svcres;				     \
+	__syscall_return(type,__res);			     \
 }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg1' - possible side-effects?
#295: FILE: include/asm-s390/unistd.h:315:
+#define _syscall2(type,name,type1,arg1,type2,arg2)	     \
+type name(type1 arg1, type2 arg2) {			     \
+	register type1 __arg1 asm("2") = arg1;		     \
+	register type2 __arg2 asm("3") = arg2;		     \
+	register long __svcres asm("2");		     \
+	long __res;					     \
+	__asm__ __volatile__ (				     \
+		"    .if %b1 < 256\n"			     \
+		"    svc %b1\n"				     \
+		"    .else\n"				     \
+		"    lhi %%r1,%b1\n"			     \
+		"    svc 0\n"				     \
+		"    .endif"				     \
+		: "=d" (__svcres)			     \
+		: "i" (__NR_##name),			     \
+		  "0" (__arg1),				     \
+		  "d" (__arg2)				     \
+		: _svc_clobber );			     \
+	__res = __svcres;				     \
+	__syscall_return(type,__res);			     \
 }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'type2' - possible side-effects?
#295: FILE: include/asm-s390/unistd.h:315:
+#define _syscall2(type,name,type1,arg1,type2,arg2)	     \
+type name(type1 arg1, type2 arg2) {			     \
+	register type1 __arg1 asm("2") = arg1;		     \
+	register type2 __arg2 asm("3") = arg2;		     \
+	register long __svcres asm("2");		     \
+	long __res;					     \
+	__asm__ __volatile__ (				     \
+		"    .if %b1 < 256\n"			     \
+		"    svc %b1\n"				     \
+		"    .else\n"				     \
+		"    lhi %%r1,%b1\n"			     \
+		"    svc 0\n"				     \
+		"    .endif"				     \
+		: "=d" (__svcres)			     \
+		: "i" (__NR_##name),			     \
+		  "0" (__arg1),				     \
+		  "d" (__arg2)				     \
+		: _svc_clobber );			     \
+	__res = __svcres;				     \
+	__syscall_return(type,__res);			     \
 }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg2' - possible side-effects?
#295: FILE: include/asm-s390/unistd.h:315:
+#define _syscall2(type,name,type1,arg1,type2,arg2)	     \
+type name(type1 arg1, type2 arg2) {			     \
+	register type1 __arg1 asm("2") = arg1;		     \
+	register type2 __arg2 asm("3") = arg2;		     \
+	register long __svcres asm("2");		     \
+	long __res;					     \
+	__asm__ __volatile__ (				     \
+		"    .if %b1 < 256\n"			     \
+		"    svc %b1\n"				     \
+		"    .else\n"				     \
+		"    lhi %%r1,%b1\n"			     \
+		"    svc 0\n"				     \
+		"    .endif"				     \
+		: "=d" (__svcres)			     \
+		: "i" (__NR_##name),			     \
+		  "0" (__arg1),				     \
+		  "d" (__arg2)				     \
+		: _svc_clobber );			     \
+	__res = __svcres;				     \
+	__syscall_return(type,__res);			     \
 }

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#296: FILE: include/asm-s390/unistd.h:316:
+type name(type1 arg1, type2 arg2) {			     \

ERROR:SPACING: space prohibited before that close parenthesis ')'
#312: FILE: include/asm-s390/unistd.h:332:
+		: _svc_clobber );			     \

ERROR:SPACING: space required after that ',' (ctx:VxV)
#314: FILE: include/asm-s390/unistd.h:334:
+	__syscall_return(type,__res);			     \
 	                     ^

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#334: FILE: include/asm-s390/unistd.h:338:
+type name(type1 arg1, type2 arg2, type3 arg3) {		     \

ERROR:SPACING: space prohibited before that close parenthesis ')'
#352: FILE: include/asm-s390/unistd.h:356:
+		: _svc_clobber );			     \

ERROR:SPACING: space required after that ',' (ctx:VxV)
#354: FILE: include/asm-s390/unistd.h:358:
+	__syscall_return(type,__res);			     \
 	                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#359: FILE: include/asm-s390/unistd.h:362:
+		  type4,name4)				     \
 		       ^

ERROR:SPACING: space prohibited before that close parenthesis ')'
#397: FILE: include/asm-s390/unistd.h:383:
+		: _svc_clobber );			     \

ERROR:SPACING: space required after that ',' (ctx:VxV)
#399: FILE: include/asm-s390/unistd.h:385:
+	__syscall_return(type,__res);			     \
 	                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#404: FILE: include/asm-s390/unistd.h:389:
+		  type4,name4,type5,name5)		     \
 		       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#404: FILE: include/asm-s390/unistd.h:389:
+		  type4,name4,type5,name5)		     \
 		             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#404: FILE: include/asm-s390/unistd.h:389:
+		  type4,name4,type5,name5)		     \
 		                   ^

ERROR:SPACING: space prohibited before that close parenthesis ')'
#448: FILE: include/asm-s390/unistd.h:413:
+		: _svc_clobber );			     \

ERROR:SPACING: space required after that ',' (ctx:VxV)
#450: FILE: include/asm-s390/unistd.h:415:
+	__syscall_return(type,__res);			     \
 	                     ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000378066.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 30 errors, 2 warnings, 15 checks, 407 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000378066.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
