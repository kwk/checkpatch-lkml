WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#123: FILE: fs/buffer.c:2724:
+	BUG_ON(!mapping);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#157: FILE: fs/proc/proc_misc.c:185:
+		K(ps.nr_pagecache-i.bufferram),
 		                 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#175: FILE: include/linux/mm.h:373:
+#define page_mapping(page) (PageAnon(page)? NULL: (page)->mapping)
                                           ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#175: FILE: include/linux/mm.h:373:
+#define page_mapping(page) (PageAnon(page)? NULL: (page)->mapping)
                                                 ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'page' - possible side-effects?
#175: FILE: include/linux/mm.h:373:
+#define page_mapping(page) (PageAnon(page)? NULL: (page)->mapping)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#338: FILE: mm/filemap.c:84:
+	BUG_ON(PageDirty(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#348: FILE: mm/filemap.c:98:
+	BUG_ON(!PageLocked(page));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#434: FILE: mm/memory.c:423:
+					if (pte_young(pte) &&
+							page_mapping(page))

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#532: FILE: mm/page-writeback.c:560:
+ * just fall through and assume that it wants buffer_heads.

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#537: FILE: mm/page-writeback.c:565:
+	int (*spd)(struct page *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#544: FILE: mm/page-writeback.c:572:
+	return spd? (*spd)(page): __set_page_dirty_buffers(page);
 	          ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#544: FILE: mm/page-writeback.c:572:
+	return spd? (*spd)(page): __set_page_dirty_buffers(page);
 	                        ^

CHECK:SPACING: No space is necessary after a cast
#684: FILE: mm/rmap.c:43:
+#define ANON_MAPPING_DEBUG	((struct address_space *) 1)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#689: FILE: mm/rmap.c:48:
+	BUG_ON(page->mapping != ANON_MAPPING_DEBUG);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#781: FILE: mm/rmap.c:649:
+		BUG_ON(!PageSwapCache(page));

WARNING:CONST_STRUCT: struct address_space_operations should normally be const
#943: FILE: mm/swap_state.c:28:
+static struct address_space_operations swap_aops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#982: FILE: mm/swap_state.c:70:
+	BUG_ON(PageSwapCache(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#983: FILE: mm/swap_state.c:71:
+	BUG_ON(PagePrivate(page));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#989: FILE: mm/swap_state.c:77:
+		error = radix_tree_insert(&swapper_space.page_tree,
+						entry.val, page);

CHECK:BRACES: braces {} should be used on all arms of this statement
#990: FILE: mm/swap_state.c:78:
+		if (!error) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#995: FILE: mm/swap_state.c:83:
+		} else

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1070: FILE: mm/swap_state.c:204:
+	BUG_ON(!PageSwapCache(page));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1187: FILE: mm/swap_state.c:342:
+		found_page = radix_tree_lookup(&swapper_space.page_tree,
+						entry.val);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1223: FILE: mm/swapfile.c:354:
+			page = radix_tree_lookup(&swapper_space.page_tree,
+				entry.val);

CHECK:BRACES: Unbalanced braces around else statement
#1245: FILE: mm/swapfile.c:974:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#1305: FILE: mm/vmscan.c:273:
+		if (PageSwapCache(page))
[...]
+		else if (PageAnon(page)) {
[...]

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1334: FILE: mm/vmscan.c:342:
+					list_move(&page->list,
+						&mapping->locked_pages);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1353: FILE: mm/vmscan.c:649:
+		if (total_swap_pages == 0 && !page_mapping(page) &&
 						!PagePrivate(page)) {

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000384168.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 4 errors, 11 warnings, 13 checks, 1140 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000384168.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
