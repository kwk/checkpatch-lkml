WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#51: FILE: drivers/dlm/rcom.c:1:
+/******************************************************************************

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#52: FILE: drivers/dlm/rcom.c:2:
+/******************************************************************************
+*******************************************************************************

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:LINE_SPACING: Please don't use multiple blank lines
#77: FILE: drivers/dlm/rcom.c:27:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'create_rcom', this function's name, in a string
#93: FILE: drivers/dlm/rcom.c:43:
+		log_print("create_rcom to %d type %d len %d ENOBUFS",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:SPACING: No space is necessary after a cast
#99: FILE: drivers/dlm/rcom.c:49:
+	rc = (struct dlm_rcom *) mb;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#122: FILE: drivers/dlm/rcom.c:72:
+/* When replying to a status request, a node also sends back its
+   configuration values.  The requesting node then checks that the remote

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#123: FILE: drivers/dlm/rcom.c:73:
+   node is configured the same way as itself. */

CHECK:SPACING: No space is necessary after a cast
#171: FILE: drivers/dlm/rcom.c:121:
+		rc = (struct dlm_rcom *) ls->ls_recover_buf;

CHECK:SPACING: No space is necessary after a cast
#187: FILE: drivers/dlm/rcom.c:137:
+	rc = (struct dlm_rcom *) ls->ls_recover_buf;

CHECK:SPACING: No space is necessary after a cast
#188: FILE: drivers/dlm/rcom.c:138:
+	error = check_config(ls, (struct rcom_config *) rc->rc_buf);

CHECK:SPACING: No space is necessary after a cast
#204: FILE: drivers/dlm/rcom.c:154:
+	make_config(ls, (struct rcom_config *) rc->rc_buf);

ERROR:CODE_INDENT: code indent should use tabs where possible
#226: FILE: drivers/dlm/rcom.c:176:
+^I^I                      ls->ls_recover_buf + len,$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:CODE_INDENT: code indent should use tabs where possible
#227: FILE: drivers/dlm/rcom.c:177:
+^I^I                      dlm_config.buffer_size - len, nodeid);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#262: FILE: drivers/dlm/rcom.c:212:
+^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#295: FILE: drivers/dlm/rcom.c:245:
+	rc->rc_id = (unsigned long) r;

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#348: FILE: drivers/dlm/rcom.c:298:
+		memcpy(rl->rl_range, lkb->lkb_range, 4*sizeof(uint64_t));
 		                                      ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#354: FILE: drivers/dlm/rcom.c:304:
+	/* FIXME: might we have an lvb without DLM_LKF_VALBLK set ?
+	   If so, receive_rcom_lock_args() won't take this copy. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#354: FILE: drivers/dlm/rcom.c:304:
+	   If so, receive_rcom_lock_args() won't take this copy. */

CHECK:SPACING: No space is necessary after a cast
#375: FILE: drivers/dlm/rcom.c:325:
+	rl = (struct rcom_lock *) rc->rc_buf;

CHECK:SPACING: No space is necessary after a cast
#377: FILE: drivers/dlm/rcom.c:327:
+	rc->rc_id = (unsigned long) r;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#398: FILE: drivers/dlm/rcom.c:348:
+	/* We send back the same rcom_lock struct we received, but
+	   dlm_recover_master_copy() has filled in rl_remid and rl_result */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#398: FILE: drivers/dlm/rcom.c:348:
+	   dlm_recover_master_copy() has filled in rl_remid and rl_result */

CHECK:SPACING: No space is necessary after a cast
#429: FILE: drivers/dlm/rcom.c:379:
+	rc = (struct dlm_rcom *) mb;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#447: FILE: drivers/dlm/rcom.c:397:
+/* Called by dlm_recvd; corresponds to dlm_receive_message() but special
+   recovery-only comms are sent through here. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#447: FILE: drivers/dlm/rcom.c:397:
+   recovery-only comms are sent through here. */

CHECK:SPACING: No space is necessary after a cast
#451: FILE: drivers/dlm/rcom.c:401:
+	struct dlm_rcom *rc = (struct dlm_rcom *) hd;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#457: FILE: drivers/dlm/rcom.c:407:
+	/* If the lockspace doesn't exist then still send a status message
+	   back; it's possible that it just doesn't have its global_id yet. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#457: FILE: drivers/dlm/rcom.c:407:
+	   back; it's possible that it just doesn't have its global_id yet. */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rc->rc_type != DLM_RCOM_STATUS'
#465: FILE: drivers/dlm/rcom.c:415:
+	if (dlm_recovery_stopped(ls) && (rc->rc_type != DLM_RCOM_STATUS)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#511: FILE: drivers/dlm/rcom.c:461:
+		DLM_ASSERT(0, printk("rc_type=%x\n", rc->rc_type););

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#520: FILE: drivers/dlm/rcom.h:1:
+/******************************************************************************

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#521: FILE: drivers/dlm/rcom.h:2:
+/******************************************************************************
+*******************************************************************************

ERROR:SPACING: space required after that ',' (ctx:VxV)
#537: FILE: drivers/dlm/rcom.h:18:
+int dlm_rcom_names(struct dlm_ls *ls, int nodeid, char *last_name,int last_len);
                                                                  ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#547: FILE: drivers/dlm/recover.c:1:
+/******************************************************************************

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#548: FILE: drivers/dlm/recover.c:2:
+/******************************************************************************
+*******************************************************************************

CHECK:LINE_SPACING: Please don't use multiple blank lines
#573: FILE: drivers/dlm/recover.c:27:
+
+

CHECK:SPACING: No space is necessary after a cast
#598: FILE: drivers/dlm/recover.c:52:
+	struct dlm_ls *ls = (struct dlm_ls *) data;

WARNING:LINE_SPACING: Missing a blank line after declarations
#599: FILE: drivers/dlm/recover.c:53:
+	struct dlm_ls *ls = (struct dlm_ls *) data;
+	mod_timer(&dlm_timer, jiffies + (dlm_config.recover_timer * HZ));

CHECK:SPACING: No space is necessary after a cast
#609: FILE: drivers/dlm/recover.c:63:
+	dlm_timer.data = (long) ls;

CHECK:SPACING: No space is necessary after a cast
#630: FILE: drivers/dlm/recover.c:84:
+	struct dlm_rcom *rc = (struct dlm_rcom *) ls->ls_recover_buf;

CHECK:SPACING: No space is necessary after a cast
#658: FILE: drivers/dlm/recover.c:112:
+	struct dlm_rcom *rc = (struct dlm_rcom *) ls->ls_recover_buf;

CHECK:BRACES: braces {} should be used on all arms of this statement
#684: FILE: drivers/dlm/recover.c:138:
+	if (ls->ls_low_nodeid == dlm_our_nodeid()) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#688: FILE: drivers/dlm/recover.c:142:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#698: FILE: drivers/dlm/recover.c:152:
+	if (ls->ls_low_nodeid == dlm_our_nodeid()) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#702: FILE: drivers/dlm/recover.c:156:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#712: FILE: drivers/dlm/recover.c:166:
+	if (ls->ls_low_nodeid == dlm_our_nodeid()) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#716: FILE: drivers/dlm/recover.c:170:
+	} else

CHECK:SPACING: No space is necessary after a cast
#777: FILE: drivers/dlm/recover.c:231:
+		if (id == (unsigned long) r)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#805: FILE: drivers/dlm/recover.c:259:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#807: FILE: drivers/dlm/recover.c:261:
+/* Master recovery: find new master node for rsb's that were
+   mastered on nodes that have been removed.

ERROR:CODE_INDENT: code indent should use tabs where possible
#812: FILE: drivers/dlm/recover.c:266:
+                                       dlm_dir_lookup$

WARNING:TYPO_SPELLING: 'Propogate' may be misspelled - perhaps 'Propagate'?
#844: FILE: drivers/dlm/recover.c:298:
+ * Propogate the new master nodeid to locks
    ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'dlm_recover_masters', this function's name, in a string
#929: FILE: drivers/dlm/recover.c:383:
+	log_debug(ls, "dlm_recover_masters %d resources", count);

CHECK:CAMELCASE: Avoid CamelCase: <PRIx64>
#944: FILE: drivers/dlm/recover.c:398:
+		log_error(ls, "dlm_recover_master_reply no id %"PRIx64"",

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'dlm_recover_master_reply', this function's name, in a string
#944: FILE: drivers/dlm/recover.c:398:
+		log_error(ls, "dlm_recover_master_reply no id %"PRIx64"",

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#944: FILE: drivers/dlm/recover.c:398:
+		log_error(ls, "dlm_recover_master_reply no id %"PRIx64"",

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#958: FILE: drivers/dlm/recover.c:412:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#960: FILE: drivers/dlm/recover.c:414:
+/* Lock recovery: rebuild the process-copy locks we hold on a
+   remastered rsb on the new rsb master.

ERROR:CODE_INDENT: code indent should use tabs where possible
#966: FILE: drivers/dlm/recover.c:420:
+                                       dlm_recover_master_copy$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#971: FILE: drivers/dlm/recover.c:425:
+
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#983: FILE: drivers/dlm/recover.c:437:
+^I   ^Ierror = dlm_send_rcom_lock(r, lkb);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#983: FILE: drivers/dlm/recover.c:437:
+^I   ^Ierror = dlm_send_rcom_lock(r, lkb);$

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'dlm_recover_locks', this function's name, in a string
#1061: FILE: drivers/dlm/recover.c:515:
+	log_debug(ls, "dlm_recover_locks %d locks", count);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1101: FILE: drivers/dlm/recover.c:555:
+	uint32_t high_seq = 0;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1172: FILE: drivers/dlm/recover.c:626:
+/* All master rsb's flagged RECOVER_CONVERT need to be looked at.  The locks
+   converting PR->CW or CW->PR need to have their lkb_grmode set. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1172: FILE: drivers/dlm/recover.c:626:
+   converting PR->CW or CW->PR need to have their lkb_grmode set. */

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'dlm_recover_rsbs', this function's name, in a string
#1218: FILE: drivers/dlm/recover.c:672:
+	log_debug(ls, "dlm_recover_rsbs %d rsbs", count);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1279: FILE: drivers/dlm/recover.h:1:
+/******************************************************************************

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1280: FILE: drivers/dlm/recover.h:2:
+/******************************************************************************
+*******************************************************************************

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1314: FILE: drivers/dlm/recoverd.c:1:
+/******************************************************************************

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1315: FILE: drivers/dlm/recoverd.c:2:
+/******************************************************************************
+*******************************************************************************

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'enable_locking', this function's name, in a string
#1366: FILE: drivers/dlm/recoverd.c:53:
+		log_debug(ls, "enable_locking: abort %d", event_id);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'last_start == last_stop'
#1630: FILE: drivers/dlm/recoverd.c:317:
+	if (!last_finish && (last_start == last_stop)) {

ERROR:SPACING: space required after that ',' (ctx:VxB)
#1658: FILE: drivers/dlm/recoverd.c:345:
+		DLM_ASSERT(start,);
 		                ^

ERROR:SPACING: space required after that ',' (ctx:VxB)
#1669: FILE: drivers/dlm/recoverd.c:356:
+			DLM_ASSERT(!start_rv,);
 			                    ^

ERROR:SPACING: space required after that ',' (ctx:VxB)
#1680: FILE: drivers/dlm/recoverd.c:367:
+		DLM_ASSERT(!start_rv,);
 		                    ^

ERROR:SPACING: space required after that ',' (ctx:VxB)
#1687: FILE: drivers/dlm/recoverd.c:374:
+		DLM_ASSERT(!start_rv,);
 		                    ^

ERROR:SPACING: space required after that ',' (ctx:VxB)
#1688: FILE: drivers/dlm/recoverd.c:375:
+		DLM_ASSERT(last_start > last_stop,);
 		                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxB)
#1689: FILE: drivers/dlm/recoverd.c:376:
+		DLM_ASSERT(last_finish == last_start,);
 		                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxB)
#1697: FILE: drivers/dlm/recoverd.c:384:
+		DLM_ASSERT(start_rv,);
 		                   ^

ERROR:SPACING: space required after that ',' (ctx:VxB)
#1698: FILE: drivers/dlm/recoverd.c:385:
+		DLM_ASSERT(last_start > last_stop,);
 		                                 ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1706: FILE: drivers/dlm/recoverd.c:393:
+		DLM_ASSERT(0, printk("finish and start with no stop\n"););

ERROR:SPACING: space required after that ',' (ctx:VxB)
#1711: FILE: drivers/dlm/recoverd.c:398:
+		DLM_ASSERT(!start_rv,);
 		                    ^

ERROR:SPACING: space required after that ',' (ctx:VxB)
#1712: FILE: drivers/dlm/recoverd.c:399:
+		DLM_ASSERT(last_start == last_stop,);
 		                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxB)
#1719: FILE: drivers/dlm/recoverd.c:406:
+		DLM_ASSERT(!start_rv,);
 		                    ^

ERROR:SPACING: space required after that ',' (ctx:VxB)
#1720: FILE: drivers/dlm/recoverd.c:407:
+		DLM_ASSERT(last_finish == last_start,);
 		                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxB)
#1721: FILE: drivers/dlm/recoverd.c:408:
+		DLM_ASSERT(last_stop == last_start,);
 		                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxB)
#1730: FILE: drivers/dlm/recoverd.c:417:
+			DLM_ASSERT(last_start > last_stop,);
 			                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxB)
#1734: FILE: drivers/dlm/recoverd.c:421:
+			DLM_ASSERT(last_stop == last_start,);
 			                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxB)
#1743: FILE: drivers/dlm/recoverd.c:430:
+			DLM_ASSERT(last_start > last_stop,);
 			                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxB)
#1744: FILE: drivers/dlm/recoverd.c:431:
+			DLM_ASSERT(last_start > last_finish,);
 			                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxB)
#1749: FILE: drivers/dlm/recoverd.c:436:
+			DLM_ASSERT(last_start == last_stop,);
 			                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxB)
#1750: FILE: drivers/dlm/recoverd.c:437:
+			DLM_ASSERT(last_start > last_finish,);
 			                                   ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1779: FILE: drivers/dlm/recoverd.c:466:
+	DLM_ASSERT(!test_bit(LSFL_LS_RUN, &ls->ls_flags),
+		    log_error(ls, "curstate=%d donow=%d", cur_state, do_now););

ERROR:SPACING: space required after that ',' (ctx:VxB)
#1804: FILE: drivers/dlm/recoverd.c:491:
+			DLM_ASSERT(0,);
 			            ^

ERROR:SPACING: space required after that ',' (ctx:VxB)
#1832: FILE: drivers/dlm/recoverd.c:519:
+			DLM_ASSERT(0,);
 			            ^

ERROR:SPACING: space required after that ',' (ctx:VxB)
#1892: FILE: drivers/dlm/recoverd.c:579:
+			DLM_ASSERT(0,);
 			            ^

ERROR:SPACING: space required after that ',' (ctx:VxB)
#1919: FILE: drivers/dlm/recoverd.c:606:
+			DLM_ASSERT(0,);
 			            ^

ERROR:SPACING: space required after that ',' (ctx:VxB)
#1959: FILE: drivers/dlm/recoverd.c:646:
+			DLM_ASSERT(0,);
 			            ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#2009: FILE: drivers/dlm/recoverd.c:696:
+                ls->ls_recoverd_task = p;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2009: FILE: drivers/dlm/recoverd.c:696:
+                ls->ls_recoverd_task = p;$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2031: FILE: drivers/dlm/recoverd.h:1:
+/******************************************************************************

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#2032: FILE: drivers/dlm/recoverd.h:2:
+/******************************************************************************
+*******************************************************************************

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2058: FILE: drivers/dlm/requestqueue.c:1:
+/******************************************************************************

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#2059: FILE: drivers/dlm/requestqueue.c:2:
+/******************************************************************************
+*******************************************************************************

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*e)...) over kmalloc(sizeof(struct rq_entry)...)
#2095: FILE: drivers/dlm/requestqueue.c:38:
+	e = kmalloc(sizeof(struct rq_entry) + length, GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'dlm_add_requestqueue', this function's name, in a string
#2097: FILE: drivers/dlm/requestqueue.c:40:
+		log_print("dlm_add_requestqueue: out of memory\n");

CHECK:SPACING: No space is necessary after a cast
#2126: FILE: drivers/dlm/requestqueue.c:69:
+		hd = (struct dlm_header *) e->request;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2183: FILE: drivers/dlm/requestqueue.c:126:
+	uint32_t mstype;

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#2187: FILE: drivers/dlm/requestqueue.c:130:
+	list_for_each_entry_safe(e, safe, &ls->ls_requestqueue, list) {
+

CHECK:SPACING: No space is necessary after a cast
#2188: FILE: drivers/dlm/requestqueue.c:131:
+		ms = (struct dlm_message *) e->request;

ERROR:CODE_INDENT: code indent should use tabs where possible
#2193: FILE: drivers/dlm/requestqueue.c:136:
+^I            mstype == DLM_MSG_LOOKUP ||$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2194: FILE: drivers/dlm/requestqueue.c:137:
+^I            mstype == DLM_MSG_LOOKUP_REPLY) {$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2205: FILE: drivers/dlm/requestqueue.h:1:
+/******************************************************************************

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#2206: FILE: drivers/dlm/requestqueue.h:2:
+/******************************************************************************
+*******************************************************************************

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2230: FILE: drivers/dlm/member.c:1:
+/******************************************************************************

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#2231: FILE: drivers/dlm/member.c:2:
+/******************************************************************************
+*******************************************************************************

CHECK:BRACES: braces {} should be used on all arms of this statement
#2268: FILE: drivers/dlm/member.c:39:
+	if (!memb)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2270: FILE: drivers/dlm/member.c:41:
+	else {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*memb)...) over kmalloc(sizeof(struct dlm_member)...)
#2283: FILE: drivers/dlm/member.c:54:
+	memb = kmalloc(sizeof(struct dlm_member), GFP_KERNEL);

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#2361: FILE: drivers/dlm/member.c:132:
+	if (ls->ls_node_array) {
+		kfree(ls->ls_node_array);

WARNING:LINE_SPACING: Missing a blank line after declarations
#2380: FILE: drivers/dlm/member.c:151:
+	struct dlm_member *memb;
+	list_for_each_entry(memb, &ls->ls_nodes, list)

WARNING:TYPO_SPELLING: 'truely' may be misspelled - perhaps 'truly'?
#2492: FILE: drivers/dlm/member.c:263:
+	 *    of locking routines and locking is truely stopped.
 	                                         ^^^^^^

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*rv)...) over kmalloc(sizeof(struct dlm_recover)...)
#2522: FILE: drivers/dlm/member.c:293:
+	rv = kmalloc(sizeof(struct dlm_recover), GFP_KERNEL);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2589: FILE: drivers/dlm/member.h:1:
+/******************************************************************************

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#2590: FILE: drivers/dlm/member.h:2:
+/******************************************************************************
+*******************************************************************************

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2613: FILE: drivers/dlm/member.h:25:
+int dlm_recover_members(struct dlm_ls *ls, struct dlm_recover *rv,int *neg_out);
                                                                  ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000183366.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 35 errors, 50 warnings, 42 checks, 2540 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000183366.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
