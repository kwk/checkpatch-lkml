WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#78: 
Signed-Off-By: David Howells <dhowells@redhat.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#113: FILE: tests/synchro-test.c:1:
+/* synchro-test.c: run some threads to test the synchronisation primitives

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#137: FILE: tests/synchro-test.c:25:
+#include <asm/atomic.h>

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#147: FILE: tests/synchro-test.c:35:
+static int nummx = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#149: FILE: tests/synchro-test.c:37:
+static int numrd = 0, numwr = 0, numdg = 0;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#150: FILE: tests/synchro-test.c:38:
+static int elapse = 5, load = 0, do_sched = 0;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#151: FILE: tests/synchro-test.c:39:
+static int verbose = 0;

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#215: FILE: tests/synchro-test.c:103:
+#define ACCOUNT(var, N) var##_taken[N]++;

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#215: FILE: tests/synchro-test.c:103:
+#define ACCOUNT(var, N) var##_taken[N]++;

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'val' - possible side-effects?
#220: FILE: tests/synchro-test.c:108:
+#define CHECK(var, cond, val)						\
+do {									\
+	int x = atomic_read(&(var));					\
+	if (unlikely(!(x cond (val))))					\
+		printk("check [%s %s %d, == %d] failed in %s\n",	\
+		       #var, #cond, (val), x, __func__);		\
+} while (0)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#223: FILE: tests/synchro-test.c:111:
+	if (unlikely(!(x cond (val))))					\

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#224: FILE: tests/synchro-test.c:112:
+		printk("check [%s %s %d, == %d] failed in %s\n",	\

ERROR:SPACING: space required before the open parenthesis '('
#229: FILE: tests/synchro-test.c:117:
+#define TRACK(var, dir)		do {} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#230: FILE: tests/synchro-test.c:118:
+#define CHECK(var, cond, val)	do {} while(0)

CHECK:SPACING: No space is necessary after a cast
#326: FILE: tests/synchro-test.c:214:
+	unsigned int N = (unsigned long) arg;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#339: FILE: tests/synchro-test.c:227:
+		printk("%s: done\n", current->comm);

CHECK:SPACING: No space is necessary after a cast
#345: FILE: tests/synchro-test.c:233:
+	unsigned int N = (unsigned long) arg;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#358: FILE: tests/synchro-test.c:246:
+		printk("%s: done\n", current->comm);

CHECK:SPACING: No space is necessary after a cast
#364: FILE: tests/synchro-test.c:252:
+	unsigned int N = (unsigned long) arg;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#379: FILE: tests/synchro-test.c:267:
+		printk("%s: done\n", current->comm);

CHECK:SPACING: No space is necessary after a cast
#385: FILE: tests/synchro-test.c:273:
+	unsigned int N = (unsigned long) arg;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#400: FILE: tests/synchro-test.c:288:
+		printk("%s: done\n", current->comm);

CHECK:SPACING: No space is necessary after a cast
#406: FILE: tests/synchro-test.c:294:
+	unsigned int N = (unsigned long) arg;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#426: FILE: tests/synchro-test.c:314:
+		printk("%s: done\n", current->comm);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#457: FILE: tests/synchro-test.c:345:
+		printk("%s:", what);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#463: FILE: tests/synchro-test.c:351:
+				printk(" zzz");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#465: FILE: tests/synchro-test.c:353:
+				printk(" %d%%", cnt * 100 / tot);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#468: FILE: tests/synchro-test.c:356:
+		printk("\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#491: FILE: tests/synchro-test.c:379:
+		printk("Parameter out of range\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#496: FILE: tests/synchro-test.c:384:
+		printk("Nothing to do\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#501: FILE: tests/synchro-test.c:389:
+		printk("\nStarting synchronisation primitive tests...\n");

CHECK:SPACING: No space is necessary after a cast
#512: FILE: tests/synchro-test.c:400:
+			kernel_thread(mutexer, (void *) loop, 0);

CHECK:SPACING: No space is necessary after a cast
#517: FILE: tests/synchro-test.c:405:
+			kernel_thread(semaphorer, (void *) loop, 0);

CHECK:SPACING: No space is necessary after a cast
#522: FILE: tests/synchro-test.c:410:
+			kernel_thread(reader, (void *) loop, 0);

CHECK:SPACING: No space is necessary after a cast
#527: FILE: tests/synchro-test.c:415:
+			kernel_thread(writer, (void *) loop, 0);

CHECK:SPACING: No space is necessary after a cast
#532: FILE: tests/synchro-test.c:420:
+			kernel_thread(downgrader, (void *) loop, 0);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#562: FILE: tests/synchro-test.c:450:
+		printk(KERN_ERR "Mutex is still locked!\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#573: FILE: tests/synchro-test.c:461:
+		printk("mutexes taken: %u\n", mutex_total);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#574: FILE: tests/synchro-test.c:462:
+		printk("semaphores taken: %u\n", sem_total);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#575: FILE: tests/synchro-test.c:463:
+		printk("reads taken: %u\n", rd_total);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#576: FILE: tests/synchro-test.c:464:
+		printk("writes taken: %u\n", wr_total);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#577: FILE: tests/synchro-test.c:465:
+		printk("downgrades taken: %u\n", dg_total);

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#579: FILE: tests/synchro-test.c:467:
+	}
+	else {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#579: FILE: tests/synchro-test.c:467:
+	else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#580: FILE: tests/synchro-test.c:468:
+		printk("%3d %3d %3d %3d %3d %c %3d %9u %9u %9u %9u %9u\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#593: FILE: tests/synchro-test.c:481:
+		printk("Tests complete\n");

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000124531.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 8 errors, 26 warnings, 12 checks, 501 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000124531.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
