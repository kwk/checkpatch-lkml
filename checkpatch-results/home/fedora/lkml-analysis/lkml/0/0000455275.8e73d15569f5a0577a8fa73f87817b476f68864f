WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#47: 
diff --exclude-from=/home/ldb/src/linux-exclude -u -r -N linux-base/Documentation/Configure.help linux/Documentation/Configure.help

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#124: FILE: drivers/usb/speedtouch.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#133: FILE: drivers/usb/speedtouch.c:10:
+ *  $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#138: FILE: drivers/usb/speedtouch.c:15:
+ *  $

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#140: FILE: drivers/usb/speedtouch.c:17:
+ *  along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#141: FILE: drivers/usb/speedtouch.c:18:
+ *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#142: FILE: drivers/usb/speedtouch.c:19:
+ *  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#143: FILE: drivers/usb/speedtouch.c:20:
+ *  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#147: FILE: drivers/usb/speedtouch.c:24:
+ *  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#179: FILE: drivers/usb/speedtouch.c:56:
+ $

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#190: FILE: drivers/usb/speedtouch.c:67:
+#include <asm/uaccess.h>

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#202: FILE: drivers/usb/speedtouch.c:79:
+    ("Luca Barbieri <ldb@ldb.ods.org> (2.x), Johan Verrept <Johan.Verrept@advalvas.be> (1.x)");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#204: FILE: drivers/usb/speedtouch.c:81:
+    ("ATM driver for the Alcatel SpeedTouch USB DSL modem, version 2.x");$

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#216: FILE: drivers/usb/speedtouch.c:93:
+#define STU_RECEIVE_BUFFER_SIZE 64*53
                                   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#216: FILE: drivers/usb/speedtouch.c:93:
+#define STU_RECEIVE_BUFFER_SIZE 64*53

WARNING:LONG_LINE_COMMENT: line length of 177 exceeds 100 columns
#217: FILE: drivers/usb/speedtouch.c:94:
+#define STU_MAX_AAL5_MRU        2048  /* max should be (1500 IP mtu + 2 ppp bytes + 32 * 5 cellheader overhead) for PPPoA and (1500 + 14 + 32*5 cellheader overhead) for PPPoE */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:LINE_SPACING: Please don't use multiple blank lines
#227: FILE: drivers/usb/speedtouch.c:104:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LONG_LINE_COMMENT: line length of 115 exceeds 100 columns
#233: FILE: drivers/usb/speedtouch.c:110:
+/* not exporting this prevents the depmod from generating the map that causes the modules to be inserted as driver.

WARNING:LONG_LINE_COMMENT: line length of 111 exceeds 100 columns
#234: FILE: drivers/usb/speedtouch.c:111:
+ * we do not want this, we want the script run, because we need a user-mode management daemon to sync the modem

CHECK:LINE_SPACING: Please don't use multiple blank lines
#238: FILE: drivers/usb/speedtouch.c:115:
+
+

WARNING:NEW_TYPEDEFS: do not add new typedefs
#239: FILE: drivers/usb/speedtouch.c:116:
+typedef struct stu_data_ctx {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#245: FILE: drivers/usb/speedtouch.c:122:
+typedef struct stu_usb_send_data_context {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#260: FILE: drivers/usb/speedtouch.c:137:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#262: FILE: drivers/usb/speedtouch.c:139:
+
+

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#289: FILE: drivers/usb/speedtouch.c:166:
+static int sar_pid = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#293: FILE: drivers/usb/speedtouch.c:170:
+DECLARE_WAITABLE_COUNT (sar_nzcount);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#299: FILE: drivers/usb/speedtouch.c:176:
+ * Debug $

WARNING:BRACES: braces {} are not necessary for single statement blocks
#312: FILE: drivers/usb/speedtouch.c:189:
+		for (j = 0; (j < 16) && (i < len); j++, i++) {
+			sprintf(buffer, "%s %2.2x", buffer, data[i]);
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:NEW_TYPEDEFS: do not add new typedefs
#325: FILE: drivers/usb/speedtouch.c:202:
+typedef struct stu_atm_vcc_data {

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'c' - possible side-effects?
#330: FILE: drivers/usb/speedtouch.c:207:
+#define hex2int(c) ((c >= '0') && (c <= '9') ?  (c - '0') : ((c & 0xf) + 9))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'c' may be better as '(c)' to avoid precedence issues
#330: FILE: drivers/usb/speedtouch.c:207:
+#define hex2int(c) ((c >= '0') && (c <= '9') ?  (c - '0') : ((c & 0xf) + 9))

CHECK:SPACING: No space is necessary after a cast
#385: FILE: drivers/usb/speedtouch.c:262:
+	    ((struct stu_atm_vcc_data *) vcc->dev_data)->atmsar_vcc;

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'stu_atm_alloc_tx', this function's name, in a string
#390: FILE: drivers/usb/speedtouch.c:267:
+	printk_err("stu_atm_alloc_tx could not find correct alloc_tx function!\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#395: FILE: drivers/usb/speedtouch.c:272:
+stu_atm_proc_read(struct atm_dev *atm_dev, loff_t * pos, char *page)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:NEW_TYPEDEFS: do not add new typedefs
#427: FILE: drivers/usb/speedtouch.c:304:
+typedef struct stu_cb {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#433: FILE: drivers/usb/speedtouch.c:310:
+stu_usb_send_next(urb_t * urb)

CHECK:SPACING: No space is necessary after a cast
#436: FILE: drivers/usb/speedtouch.c:313:
+	    (stu_usb_send_data_context_t *) urb->context;

CHECK:SPACING: No space is necessary after a cast
#438: FILE: drivers/usb/speedtouch.c:315:
+	    (struct stu_atm_vcc_data *) ctx->vcc->dev_data;

WARNING:INDENTED_LABEL: labels should not be indented
#450: FILE: drivers/usb/speedtouch.c:327:
+      errloop:

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#456: FILE: drivers/usb/speedtouch.c:333:
+	dec_zero (&dev_data->skb_zcount);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#459: FILE: drivers/usb/speedtouch.c:336:
+	ctx->skb = skb = __skb_dequeue(&(instance->sndqueue));

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around instance->sndqueue
#459: FILE: drivers/usb/speedtouch.c:336:
+	ctx->skb = skb = __skb_dequeue(&(instance->sndqueue));

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:SPACING: No space is necessary after a cast
#466: FILE: drivers/usb/speedtouch.c:343:
+	ctx->vcc = ((stu_cb_t *) (skb->cb))->vcc;

CHECK:SPACING: No space is necessary after a cast
#471: FILE: drivers/usb/speedtouch.c:348:
+		      (unsigned char *) skb->data,

CHECK:SPACING: No space is necessary after a cast
#472: FILE: drivers/usb/speedtouch.c:349:
+		      skb->len, (usb_complete_t) stu_usb_send_next, ctx);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#478: FILE: drivers/usb/speedtouch.c:355:
+		printk_err ("usb_submit_urb for ATM data failed (result = %d)\n", err);

WARNING:INDENTED_LABEL: labels should not be indented
#484: FILE: drivers/usb/speedtouch.c:361:
+      out:

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#491: FILE: drivers/usb/speedtouch.c:368:
+stu_send_encoded(struct stu_instance_data *instance, struct atm_vcc *vcc,
+		     struct sk_buff *skb)

CHECK:SPACING: No space is necessary after a cast
#499: FILE: drivers/usb/speedtouch.c:376:
+	    (struct stu_atm_vcc_data *) vcc->dev_data;

CHECK:SPACING: No space is necessary after a cast
#505: FILE: drivers/usb/speedtouch.c:382:
+	((stu_cb_t *) skb->cb)->vcc = vcc;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#507: FILE: drivers/usb/speedtouch.c:384:
+	inc_zero (&dev_data->skb_zcount);

WARNING:TYPO_SPELLING: 'queing' may be misspelled - perhaps 'queueing'?
#515: FILE: drivers/usb/speedtouch.c:392:
+		printk_dbg("already queing, skb (0x%p) queued", skb);
 		                    ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!instance->send_ctx[i].skb"
#520: FILE: drivers/usb/speedtouch.c:397:
+		if (instance->send_ctx[i].skb == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around ctx->urb
#533: FILE: drivers/usb/speedtouch.c:410:
+	urb = &(ctx->urb);

CHECK:SPACING: No space is necessary after a cast
#544: FILE: drivers/usb/speedtouch.c:421:
+		      (unsigned char *) skb->data,

CHECK:SPACING: No space is necessary after a cast
#546: FILE: drivers/usb/speedtouch.c:423:
+		      (usb_complete_t) stu_usb_send_next,

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around instance->send_ctx[i]
#547: FILE: drivers/usb/speedtouch.c:424:
+		      &(instance->send_ctx[i])

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#554: FILE: drivers/usb/speedtouch.c:431:
+		printk_err ("usb_submit_urb for ATM data failed (result = %d) in stu_usb_send_data", res);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#554: FILE: drivers/usb/speedtouch.c:431:
+		printk_err ("usb_submit_urb for ATM data failed (result = %d) in stu_usb_send_data", res);

WARNING:INDENTED_LABEL: labels should not be indented
#561: FILE: drivers/usb/speedtouch.c:438:
+      ok:

CHECK:SPACING: No space is necessary after a cast
#571: FILE: drivers/usb/speedtouch.c:448:
+	    (struct stu_atm_vcc_data *) vcc->dev_data;

CHECK:SPACING: No space is necessary after a cast
#573: FILE: drivers/usb/speedtouch.c:450:
+	    (struct stu_instance_data *) vcc->dev->dev_data;

WARNING:INDENTED_LABEL: labels should not be indented
#620: FILE: drivers/usb/speedtouch.c:497:
+      out:

WARNING:LONG_LINE_COMMENT: line length of 144 exceeds 100 columns
#632: FILE: drivers/usb/speedtouch.c:509:
+	/* NOTE: multiple concurrent decode calls on the same device must be locked (currently we call it only here so we don't need to lock) */

WARNING:LONG_LINE_COMMENT: line length of 107 exceeds 100 columns
#642: FILE: drivers/usb/speedtouch.c:519:
+			/* we can't send NULL skbs upstream, the ATM layer would try to close the vcc... */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#645: FILE: drivers/usb/speedtouch.c:522:
+				printk_dbg("after aal5 decap: skb->len = %d",
+				       new->len);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#647: FILE: drivers/usb/speedtouch.c:524:
+				if (new->len
+				    && atm_charge(atmsar_vcc->vcc,

WARNING:LONG_LINE_STRING: line length of 130 exceeds 100 columns
#654: FILE: drivers/usb/speedtouch.c:531:
+					    ("dropping incoming packet: rx_inuse = %d, vcc->sk->rcvbuf = %d, skb->true_size = %d",

A string starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'atmsar_vcc->vcc->rx_inuse'
#656: FILE: drivers/usb/speedtouch.c:533:
+					     atomic_read(&atmsar_vcc->vcc->
+							 rx_inuse),

A single dereferencing identifier spanned on multiple lines like::

  struct_identifier->member[index].
  member = <foo>;

is generally hard to follow. It can easily lead to typos and so makes
the code vulnerable to bugs.

If fixing the multiple line dereferencing leads to an 80 column
violation, then either rewrite the code in a more simple way or if the
starting part of the dereferencing identifier is the same and used at
multiple places then store it in a temporary variable, and use that
temporary variable only at all the places. For example, if there are
two dereferencing identifiers::

  member1->member2->member3.foo1;
  member1->member2->member3.foo2;

then store the member1->member2->member3 part in a temporary variable.
It not only helps to avoid the 80 column violation but also reduces
the program size by removing the unnecessary dereferences.

But if none of the above methods work then ignore the 80 column
violation because it is much easier to read a dereferencing identifier
on a single line.

WARNING:INDENTED_LABEL: labels should not be indented
#696: FILE: drivers/usb/speedtouch.c:573:
+      out:

WARNING:INDENTED_LABEL: labels should not be indented
#718: FILE: drivers/usb/speedtouch.c:595:
+	      repeat:

CHECK:SPACING: No space is necessary after a cast
#722: FILE: drivers/usb/speedtouch.c:599:
+			    (struct stu_instance_data *) i;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#723: FILE: drivers/usb/speedtouch.c:600:
+^I^I^I$

WARNING:LONG_LINE_COMMENT: line length of 102 exceeds 100 columns
#724: FILE: drivers/usb/speedtouch.c:601:
+			/* avoid reprocessing a device if we processed it before having to schedule */

CHECK:SPACING: No space is necessary after a cast
#748: FILE: drivers/usb/speedtouch.c:625:
+	sar_pid = kernel_thread(stu_sar_threadproc, (void *) NULL,

WARNING:LINE_SPACING: Missing a blank line after declarations
#756: FILE: drivers/usb/speedtouch.c:633:
+	int pid = sar_pid;
+	if (pid) {

CHECK:SPACING: No space is necessary after a cast
#769: FILE: drivers/usb/speedtouch.c:646:
+	    (struct stu_instance_data *) vcc->dev->dev_data;

WARNING:LONG_LINE_COMMENT: line length of 147 exceeds 100 columns
#784: FILE: drivers/usb/speedtouch.c:661:
+	   When data gets disabled (as result of loss of sync -> ioctl or device disconnection), vccs are closed and return -ENETDOWN on send/recv.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#784: FILE: drivers/usb/speedtouch.c:661:
+	/* NOTE
+	   When data gets disabled (as result of loss of sync -> ioctl or device disconnection), vccs are closed and return -ENETDOWN on send/recv.

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:LONG_LINE_COMMENT: line length of 109 exceeds 100 columns
#785: FILE: drivers/usb/speedtouch.c:662:
+	   However, if the cause was an ioctl, it's still possible to open vccs and get -EAGAIN on send/recv.

WARNING:LONG_LINE_COMMENT: line length of 139 exceeds 100 columns
#787: FILE: drivers/usb/speedtouch.c:664:
+	   The reason is that right now there is no easy way of restarting pppd when the modem gets sync and pppd terminates if open fails.

WARNING:LONG_LINE_COMMENT: line length of 159 exceeds 100 columns
#788: FILE: drivers/usb/speedtouch.c:665:
+	   Thus, open must not fail, but we obviously can't keep the old vccs because if we are using PPPoATM the ISP has probably already closed the PPP link.

WARNING:LONG_LINE_COMMENT: line length of 170 exceeds 100 columns
#790: FILE: drivers/usb/speedtouch.c:667:
+	   As a result we get this strange situation, which isn't so strange if you consider that the only difference from the "normal" one is that open succeeds earlier.

CHECK:SPACING: No space is necessary after a cast
#793: FILE: drivers/usb/speedtouch.c:670:
+	instance = (struct stu_instance_data *) vcc->dev->dev_data;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#801: FILE: drivers/usb/speedtouch.c:678:
+	    kmalloc(sizeof (struct stu_atm_vcc_data), GFP_KERNEL);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#841: FILE: drivers/usb/speedtouch.c:718:
+^I$

CHECK:SPACING: No space is necessary after a cast
#844: FILE: drivers/usb/speedtouch.c:721:
+	     (skb != (struct sk_buff *) (&instance->sndqueue));) {

CHECK:SPACING: No space is necessary after a cast
#846: FILE: drivers/usb/speedtouch.c:723:
+		struct atm_vcc *vcc = ((stu_cb_t *) (skb->cb))->vcc;

CHECK:SPACING: No space is necessary after a cast
#848: FILE: drivers/usb/speedtouch.c:725:
+		    (struct stu_atm_vcc_data *) vcc->dev_data;

WARNING:LINE_SPACING: Missing a blank line after declarations
#860: FILE: drivers/usb/speedtouch.c:737:
+		stu_usb_send_data_context_t *ctx = &instance->send_ctx[i];
+		if (!ctx->skb)

WARNING:RETURN_VOID: void function return statements are not generally useful
#866: FILE: drivers/usb/speedtouch.c:743:
+	return;
+}

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#879: FILE: drivers/usb/speedtouch.c:756:
+{
+

CHECK:SPACING: No space is necessary after a cast
#881: FILE: drivers/usb/speedtouch.c:758:
+	    (struct stu_instance_data *) vcc->dev->dev_data;

CHECK:SPACING: No space is necessary after a cast
#883: FILE: drivers/usb/speedtouch.c:760:
+	    (struct stu_atm_vcc_data *) vcc->dev_data;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around instance->atmsar_vcc_list
#888: FILE: drivers/usb/speedtouch.c:765:
+	atmsar_close(&(instance->atmsar_vcc_list), dev_data->atmsar_vcc);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'instance->status == STU_STATUS_DISCONNECTED'
#900: FILE: drivers/usb/speedtouch.c:777:
+	if (atomic_dec_and_test(&instance->vcc_count)
+	    && (instance->status == STU_STATUS_DISCONNECTED)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#901: FILE: drivers/usb/speedtouch.c:778:
+	if (atomic_dec_and_test(&instance->vcc_count)
+	    && (instance->status == STU_STATUS_DISCONNECTED)) {

CHECK:SPACING: No space is necessary after a cast
#916: FILE: drivers/usb/speedtouch.c:793:
+		return put_user(ATM_LM_NONE, (int *) arg) ? -EFAULT : 0;

WARNING:INDENTED_LABEL: labels should not be indented
#923: FILE: drivers/usb/speedtouch.c:800:
+	open:stu_atm_open,

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#924: FILE: drivers/usb/speedtouch.c:801:
+	close:stu_atm_close,
 	     ^

WARNING:INDENTED_LABEL: labels should not be indented
#924: FILE: drivers/usb/speedtouch.c:801:
+	close:stu_atm_close,

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#925: FILE: drivers/usb/speedtouch.c:802:
+	ioctl:stu_atm_ioctl,
 	     ^

WARNING:INDENTED_LABEL: labels should not be indented
#925: FILE: drivers/usb/speedtouch.c:802:
+	ioctl:stu_atm_ioctl,

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#926: FILE: drivers/usb/speedtouch.c:803:
+	send:stu_atm_send,
 	    ^

WARNING:INDENTED_LABEL: labels should not be indented
#926: FILE: drivers/usb/speedtouch.c:803:
+	send:stu_atm_send,

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#927: FILE: drivers/usb/speedtouch.c:804:
+	proc_read:stu_atm_proc_read,
 	         ^

WARNING:INDENTED_LABEL: labels should not be indented
#927: FILE: drivers/usb/speedtouch.c:804:
+	proc_read:stu_atm_proc_read,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#932: FILE: drivers/usb/speedtouch.c:809:
+stu_usb_receive(urb_t * urb)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#942: FILE: drivers/usb/speedtouch.c:819:
+	printk_dbg("got packet %p with length %d an status %d", urb,
+	       urb->actual_length, urb->status);

CHECK:SPACING: No space is necessary after a cast
#944: FILE: drivers/usb/speedtouch.c:821:
+	ctx = (stu_data_ctx_t *) urb->context;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#958: FILE: drivers/usb/speedtouch.c:835:
+		printk_dbg("processing urb with ctx %p, urb %p, skb %p", ctx, urb,
+		       ctx ? ctx->skb : NULL);

WARNING:LONG_LINE: line length of 144 exceeds 100 columns
#975: FILE: drivers/usb/speedtouch.c:852:
+				printk_err ("dev_alloc_skb for receive buffer (%d bytes) failed: losing receive urb!", STU_RECEIVE_BUFFER_SIZE);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#975: FILE: drivers/usb/speedtouch.c:852:
+				printk_err ("dev_alloc_skb for receive buffer (%d bytes) failed: losing receive urb!", STU_RECEIVE_BUFFER_SIZE);

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#975: FILE: drivers/usb/speedtouch.c:852:
+			if (!ctx->skb) {
+				printk_err ("dev_alloc_skb for receive buffer (%d bytes) failed: losing receive urb!", STU_RECEIVE_BUFFER_SIZE);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#989: FILE: drivers/usb/speedtouch.c:866:
+		printk_err ("urb->status is an error: %d\n", urb->status);

CHECK:SPACING: No space is necessary after a cast
#996: FILE: drivers/usb/speedtouch.c:873:
+		      (unsigned char *) ctx->skb->data,

CHECK:SPACING: No space is necessary after a cast
#998: FILE: drivers/usb/speedtouch.c:875:
+		      (usb_complete_t) stu_usb_receive, ctx);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1001: FILE: drivers/usb/speedtouch.c:878:
+	if ((err = usb_submit_urb(urb)) < 0)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1002: FILE: drivers/usb/speedtouch.c:879:
+		printk_err ("usb_submit_urb failed: %d\n", err);

WARNING:INDENTED_LABEL: labels should not be indented
#1004: FILE: drivers/usb/speedtouch.c:881:
+      out:

WARNING:TYPO_SPELLING: 'succes' may be misspelled - perhaps 'success'?
#1012: FILE: drivers/usb/speedtouch.c:889:
+	int i, succes, res;
 	       ^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1018: FILE: drivers/usb/speedtouch.c:895:
+	printk_dbg("max packet size on endpoint %d is %d", STU_ENDPOINT_DATA_OUT,
+	       usb_maxpacket(instance->usb_dev,

WARNING:TYPO_SPELLING: 'succes' may be misspelled - perhaps 'success'?
#1022: FILE: drivers/usb/speedtouch.c:899:
+	for (i = 0, succes = 0; i < STU_NUMBER_RCV_URBS; i++) {
 	            ^^^^^^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around instance->rcvbufs[i]
#1023: FILE: drivers/usb/speedtouch.c:900:
+		stu_data_ctx_t *ctx = &(instance->rcvbufs[i]);

WARNING:LONG_LINE: line length of 136 exceeds 100 columns
#1027: FILE: drivers/usb/speedtouch.c:904:
+			printk_err ("dev_alloc_skb for receive buffer (%d bytes) failed: losing receive urb!", STU_RECEIVE_BUFFER_SIZE);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1027: FILE: drivers/usb/speedtouch.c:904:
+			printk_err ("dev_alloc_skb for receive buffer (%d bytes) failed: losing receive urb!", STU_RECEIVE_BUFFER_SIZE);

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#1027: FILE: drivers/usb/speedtouch.c:904:
+		if (!ctx->skb) {
+			printk_err ("dev_alloc_skb for receive buffer (%d bytes) failed: losing receive urb!", STU_RECEIVE_BUFFER_SIZE);

CHECK:SPACING: No space is necessary after a cast
#1037: FILE: drivers/usb/speedtouch.c:914:
+			      (unsigned char *) ctx->skb->data,

CHECK:SPACING: No space is necessary after a cast
#1039: FILE: drivers/usb/speedtouch.c:916:
+			      (usb_complete_t) stu_usb_receive, ctx);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1043: FILE: drivers/usb/speedtouch.c:920:
+		printk_dbg("submitting receive urb with skb->truesize = %d (asked for %d)",
+		       ctx->skb->truesize, STU_RECEIVE_BUFFER_SIZE);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1045: FILE: drivers/usb/speedtouch.c:922:
+		if ((res = usb_submit_urb(&ctx->urb)) < 0)

WARNING:TYPO_SPELLING: 'succes' may be misspelled - perhaps 'success'?
#1048: FILE: drivers/usb/speedtouch.c:925:
+			succes++;
 			^^^^^^

WARNING:TYPO_SPELLING: 'succes' may be misspelled - perhaps 'success'?
#1059: FILE: drivers/usb/speedtouch.c:936:
+	printk_dbg("%d urb%s queued for receive", succes,
 	                                          ^^^^^^

WARNING:TYPO_SPELLING: 'succes' may be misspelled - perhaps 'success'?
#1060: FILE: drivers/usb/speedtouch.c:937:
+	       (succes != 1) ? "s" : "");
 	        ^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1060: FILE: drivers/usb/speedtouch.c:937:
+	printk_dbg("%d urb%s queued for receive", succes,
+	       (succes != 1) ? "s" : "");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around instance->rcvbufs[i]
#1078: FILE: drivers/usb/speedtouch.c:955:
+		stu_data_ctx_t *ctx = &(instance->rcvbufs[i]);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1091: FILE: drivers/usb/speedtouch.c:968:
+	if (atomic_dec_and_test(&sar_refcnt)) {
+		stu_sar_stop();
+	}

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1119: FILE: drivers/usb/speedtouch.c:996:
+	printk_info ("disabling data transmission");

WARNING:INDENTED_LABEL: labels should not be indented
#1124: FILE: drivers/usb/speedtouch.c:1001:
+      out:

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1140: FILE: drivers/usb/speedtouch.c:1017:
+	printk_info ("enabling data transmission");

WARNING:INDENTED_LABEL: labels should not be indented
#1145: FILE: drivers/usb/speedtouch.c:1022:
+      out:

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1158: FILE: drivers/usb/speedtouch.c:1035:
+^Iprintk_info ("restarting data transmission");^I$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1158: FILE: drivers/usb/speedtouch.c:1035:
+	printk_info ("restarting data transmission");	

CHECK:SPACING: No space is necessary after a cast
#1182: FILE: drivers/usb/speedtouch.c:1059:
+		if (((struct stu_instance_data *) i)->usb_dev == dev) {

CHECK:SPACING: No space is necessary after a cast
#1183: FILE: drivers/usb/speedtouch.c:1060:
+			instance = (struct stu_instance_data *) i;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1215: FILE: drivers/usb/speedtouch.c:1092:
+	printk_dbg("trying device with vendor=0x%x, product=0x%x, ifnum %d",
+	       dev->descriptor.idVendor, dev->descriptor.idProduct, ifnum);

CHECK:CAMELCASE: Avoid CamelCase: <idVendor>
#1215: FILE: drivers/usb/speedtouch.c:1092:
+	       dev->descriptor.idVendor, dev->descriptor.idProduct, ifnum);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <idProduct>
#1215: FILE: drivers/usb/speedtouch.c:1092:
+	       dev->descriptor.idVendor, dev->descriptor.idProduct, ifnum);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dev->descriptor.bDeviceClass != USB_CLASS_VENDOR_SPEC'
#1217: FILE: drivers/usb/speedtouch.c:1094:
+	if ((dev->descriptor.bDeviceClass != USB_CLASS_VENDOR_SPEC) ||
+	    (dev->descriptor.idVendor != STU_VENDORID) ||
+	    (dev->descriptor.idProduct != STU_PRODUCTID) || (ifnum != 1))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dev->descriptor.idVendor != STU_VENDORID'
#1217: FILE: drivers/usb/speedtouch.c:1094:
+	if ((dev->descriptor.bDeviceClass != USB_CLASS_VENDOR_SPEC) ||
+	    (dev->descriptor.idVendor != STU_VENDORID) ||
+	    (dev->descriptor.idProduct != STU_PRODUCTID) || (ifnum != 1))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dev->descriptor.idProduct != STU_PRODUCTID'
#1217: FILE: drivers/usb/speedtouch.c:1094:
+	if ((dev->descriptor.bDeviceClass != USB_CLASS_VENDOR_SPEC) ||
+	    (dev->descriptor.idVendor != STU_VENDORID) ||
+	    (dev->descriptor.idProduct != STU_PRODUCTID) || (ifnum != 1))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ifnum != 1'
#1217: FILE: drivers/usb/speedtouch.c:1094:
+	if ((dev->descriptor.bDeviceClass != USB_CLASS_VENDOR_SPEC) ||
+	    (dev->descriptor.idVendor != STU_VENDORID) ||
+	    (dev->descriptor.idProduct != STU_PRODUCTID) || (ifnum != 1))

CHECK:CAMELCASE: Avoid CamelCase: <bDeviceClass>
#1217: FILE: drivers/usb/speedtouch.c:1094:
+	if ((dev->descriptor.bDeviceClass != USB_CLASS_VENDOR_SPEC) ||

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1224: FILE: drivers/usb/speedtouch.c:1101:
+	instance = kmalloc(sizeof (struct stu_instance_data), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*instance)...) over kmalloc(sizeof (struct stu_instance_data)...)
#1224: FILE: drivers/usb/speedtouch.c:1101:
+	instance = kmalloc(sizeof (struct stu_instance_data), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1226: FILE: drivers/usb/speedtouch.c:1103:
+		printk_err ("kmalloc for instance data (size %u) failed!",

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#1226: FILE: drivers/usb/speedtouch.c:1103:
+	if (!instance) {
+		printk_err ("kmalloc for instance data (size %u) failed!",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1227: FILE: drivers/usb/speedtouch.c:1104:
+		printk_err ("kmalloc for instance data (size %u) failed!",
+		     sizeof (struct stu_instance_data));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1227: FILE: drivers/usb/speedtouch.c:1104:
+		     sizeof (struct stu_instance_data));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1231: FILE: drivers/usb/speedtouch.c:1108:
+	memset(instance, 0, sizeof (struct stu_instance_data));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1240: FILE: drivers/usb/speedtouch.c:1117:
+		printk_err ("couldn't start ATM device");

CHECK:CAMELCASE: Avoid CamelCase: <iSerialNumber>
#1246: FILE: drivers/usb/speedtouch.c:1123:
+		   instance->usb_dev->descriptor.iSerialNumber, mac_str, 13);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1253: FILE: drivers/usb/speedtouch.c:1130:
+^I^Idev->descriptor.idVendor, dev->descriptor.idProduct, ifnum, mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]);^I$

WARNING:LONG_LINE: line length of 128 exceeds 100 columns
#1253: FILE: drivers/usb/speedtouch.c:1130:
+		dev->descriptor.idVendor, dev->descriptor.idProduct, ifnum, mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]);	

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1253: FILE: drivers/usb/speedtouch.c:1130:
+	printk_info("handling device with vendor=0x%x, product=0x%x, ifnum=%d, mac=%02x:%02x:%02x:%02x:%02x:%02x",
+		dev->descriptor.idVendor, dev->descriptor.idProduct, ifnum, mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]);	

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1254: FILE: drivers/usb/speedtouch.c:1131:
+^I$

CHECK:SPACING: No space is necessary after a cast
#1267: FILE: drivers/usb/speedtouch.c:1144:
+	struct stu_instance_data *instance = (struct stu_instance_data *) ptr;

WARNING:INDENTED_LABEL: labels should not be indented
#1293: FILE: drivers/usb/speedtouch.c:1170:
+	name: stu_device_name,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1294: FILE: drivers/usb/speedtouch.c:1171:
+	probe: stu_usb_probe,
 	     ^

WARNING:INDENTED_LABEL: labels should not be indented
#1294: FILE: drivers/usb/speedtouch.c:1171:
+	probe: stu_usb_probe,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1295: FILE: drivers/usb/speedtouch.c:1172:
+	disconnect: stu_usb_disconnect,
 	          ^

WARNING:INDENTED_LABEL: labels should not be indented
#1295: FILE: drivers/usb/speedtouch.c:1172:
+	disconnect: stu_usb_disconnect,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1296: FILE: drivers/usb/speedtouch.c:1173:
+	ioctl: stu_usb_ioctl,
 	     ^

WARNING:INDENTED_LABEL: labels should not be indented
#1296: FILE: drivers/usb/speedtouch.c:1173:
+	ioctl: stu_usb_ioctl,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1297: FILE: drivers/usb/speedtouch.c:1174:
+	id_table: stu_usb_ids,
 	        ^

WARNING:INDENTED_LABEL: labels should not be indented
#1297: FILE: drivers/usb/speedtouch.c:1174:
+	id_table: stu_usb_ids,

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000455275.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 25 errors, 79 warnings, 72 checks, 1269 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000455275.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
