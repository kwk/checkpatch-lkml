WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#87: 
diff -rupP --exclude-from=ignore linux-2.6.4-pristine/arch/i386/kernel/entry.S linux-2.6.4/arch/i386/kernel/entry.S

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#239: FILE: arch/ppc64/kernel/ptrace.c:314:
+	if (test_thread_flag(TIF_SYSCALL_TRACE)
+	    && (current->ptrace & PT_PTRACED))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#249: FILE: arch/ppc64/kernel/ptrace.c:324:
+	if (test_thread_flag(TIF_SYSCALL_TRACE)
+	    && (current->ptrace & PT_PTRACED))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#324: FILE: arch/x86_64/kernel/entry.S:188:
+^Itestl $_TIF_SYSCALL_T_OR_A,threadinfo_flags(%rcx) $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#396: FILE: arch/x86_64/kernel/ptrace.c:524:
+	if (test_thread_flag(TIF_SYSCALL_TRACE)
+	    && (current->ptrace & PT_PTRACED))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#404: FILE: arch/x86_64/kernel/ptrace.c:532:
+^I$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#406: FILE: arch/x86_64/kernel/ptrace.c:534:
+	if (test_thread_flag(TIF_SYSCALL_TRACE)
+	    && (current->ptrace & PT_PTRACED))

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#448: FILE: fs/namei.c:890:
+	retval = link_path_walk(name, nd);
 	                              ^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#450: FILE: fs/namei.c:892:
+		     && nd && nd->dentry && nd->dentry->d_inode))
 		        ^^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#450: FILE: fs/namei.c:892:
+	if (unlikely(current->audit_context
+		     && nd && nd->dentry && nd->dentry->d_inode))

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#473: FILE: include/asm-i386/thread_info.h:145:
+#define _TIF_SYSCALL_AUDIT	(1<<TIF_SYSCALL_AUDIT)
                           	  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BIT_MACRO: Prefer using the BIT macro
#473: FILE: include/asm-i386/thread_info.h:145:
+#define _TIF_SYSCALL_AUDIT	(1<<TIF_SYSCALL_AUDIT)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#474: FILE: include/asm-i386/thread_info.h:146:
+#define _TIF_SYSCALL_T_OR_A	(_TIF_SYSCALL_TRACE|_TIF_SYSCALL_AUDIT)
                            	                   ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#497: FILE: include/asm-ppc64/thread_info.h:111:
+#define _TIF_SYSCALL_AUDIT	(1<<TIF_SYSCALL_AUDIT)
                           	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#497: FILE: include/asm-ppc64/thread_info.h:111:
+#define _TIF_SYSCALL_AUDIT	(1<<TIF_SYSCALL_AUDIT)

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#498: FILE: include/asm-ppc64/thread_info.h:112:
+#define _TIF_SYSCALL_T_OR_A	(_TIF_SYSCALL_TRACE|_TIF_SYSCALL_AUDIT)
                            	                   ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#517: FILE: include/asm-x86_64/thread_info.h:117:
+#define _TIF_SYSCALL_AUDIT	(1<<TIF_SYSCALL_AUDIT)
                           	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#517: FILE: include/asm-x86_64/thread_info.h:117:
+#define _TIF_SYSCALL_AUDIT	(1<<TIF_SYSCALL_AUDIT)

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#518: FILE: include/asm-x86_64/thread_info.h:118:
+#define _TIF_SYSCALL_T_OR_A	(_TIF_SYSCALL_TRACE|_TIF_SYSCALL_AUDIT)
                            	                   ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#533: FILE: include/linux/audit.h:1:
+/* audit.h -- Auditing support -*- linux-c -*-

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#534: FILE: include/linux/audit.h:2:
+ * $

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#549: FILE: include/linux/audit.h:17:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#550: FILE: include/linux/audit.h:18:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#553: FILE: include/linux/audit.h:21:
+ * $

WARNING:TYPO_SPELLING: 'informaiton' may be misspelled - perhaps 'information'?
#566: FILE: include/linux/audit.h:34:
+#define AUDIT_LOGIN    1006     /* Define the login id and informaiton */
                                                            ^^^^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#581: FILE: include/linux/audit.h:49:
+ * AUDIT_LIST commands must be implemented. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#584: FILE: include/linux/audit.h:52:
+#define AUDIT_WORD(nr) ((__u32)((nr)/32))
                                     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#585: FILE: include/linux/audit.h:53:
+#define AUDIT_BIT(nr)  (1 << ((nr) - AUDIT_WORD(nr)*32))
                                                    ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'nr' - possible side-effects?
#585: FILE: include/linux/audit.h:53:
+#define AUDIT_BIT(nr)  (1 << ((nr) - AUDIT_WORD(nr)*32))

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#590: FILE: include/linux/audit.h:58:
+				 * (AUDIT_PER_TASK).  */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#603: FILE: include/linux/audit.h:71:
+				 * at syscall exit time (AUDIT_AT_EXIT). */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#610: FILE: include/linux/audit.h:78:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'disbaled' may be misspelled - perhaps 'disabled'?
#632: FILE: include/linux/audit.h:100:
+	__u32		enabled;	/* 1 = enabled, 0 = disbaled */
 	     		        	                    ^^^^^^^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#666: FILE: include/linux/audit.h:134:
+extern int  audit_alloc(struct task_struct *task);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#667: FILE: include/linux/audit.h:135:
+extern void audit_free(struct task_struct *task);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#668: FILE: include/linux/audit.h:136:
+extern void audit_syscall_entry(struct task_struct *task,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#670: FILE: include/linux/audit.h:138:
+extern void audit_syscall_exit(struct task_struct *task);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#671: FILE: include/linux/audit.h:139:
+extern void audit_getname(const char *name);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#672: FILE: include/linux/audit.h:140:
+extern void audit_putname(const char *name);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#673: FILE: include/linux/audit.h:141:
+extern void audit_inode(const char *name, unsigned long ino, dev_t rdev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#676: FILE: include/linux/audit.h:144:
+extern int  audit_receive_filter(int type, int pid, int uid, int seq,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#678: FILE: include/linux/audit.h:146:
+extern void audit_get_stamp(struct audit_context *ctx,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#680: FILE: include/linux/audit.h:148:
+extern int  audit_set_loginuid(struct audit_context *ctx, uid_t loginuid);

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#683: FILE: include/linux/audit.h:151:
+#define audit_free(t) do { ; } while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

ERROR:SPACING: space required after that ',' (ctx:VxV)
#684: FILE: include/linux/audit.h:152:
+#define audit_syscall_entry(t,a,b) do { ; } while (0)
                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#684: FILE: include/linux/audit.h:152:
+#define audit_syscall_entry(t,a,b) do { ; } while (0)
                                ^

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#684: FILE: include/linux/audit.h:152:
+#define audit_syscall_entry(t,a,b) do { ; } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#685: FILE: include/linux/audit.h:153:
+#define audit_syscall_exit(t) do { ; } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#686: FILE: include/linux/audit.h:154:
+#define audit_getname(n) do { ; } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#687: FILE: include/linux/audit.h:155:
+#define audit_putname(n) do { ; } while (0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#688: FILE: include/linux/audit.h:156:
+#define audit_inode(n,i,d) do { ; } while (0)
                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#688: FILE: include/linux/audit.h:156:
+#define audit_inode(n,i,d) do { ; } while (0)
                        ^

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#688: FILE: include/linux/audit.h:156:
+#define audit_inode(n,i,d) do { ; } while (0)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#694: FILE: include/linux/audit.h:162:
+extern void		    audit_log(struct audit_context *ctx,

ERROR:SPACING: space required after that ',' (ctx:VxV)
#696: FILE: include/linux/audit.h:164:
+			    __attribute__((format(printf,2,3)));
 			                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#696: FILE: include/linux/audit.h:164:
+			    __attribute__((format(printf,2,3)));
 			                                  ^

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(2,3) over __attribute__((format(printf,2,3)))
#696: FILE: include/linux/audit.h:164:
+			    __attribute__((format(printf,2,3)));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#698: FILE: include/linux/audit.h:166:
+extern struct audit_buffer *audit_log_start(struct audit_context *ctx);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#699: FILE: include/linux/audit.h:167:
+extern void		    audit_log_format(struct audit_buffer *ab,

ERROR:SPACING: space required after that ',' (ctx:VxV)
#701: FILE: include/linux/audit.h:169:
+			    __attribute__((format(printf,2,3)));
 			                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#701: FILE: include/linux/audit.h:169:
+			    __attribute__((format(printf,2,3)));
 			                                  ^

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(2,3) over __attribute__((format(printf,2,3)))
#701: FILE: include/linux/audit.h:169:
+			    __attribute__((format(printf,2,3)));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#702: FILE: include/linux/audit.h:170:
+extern void		    audit_log_end(struct audit_buffer *ab);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#703: FILE: include/linux/audit.h:171:
+extern void		    audit_log_end_fast(struct audit_buffer *ab);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#704: FILE: include/linux/audit.h:172:
+extern void		    audit_log_end_irq(struct audit_buffer *ab);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#705: FILE: include/linux/audit.h:173:
+extern void		    audit_log_d_path(struct audit_buffer *ab,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#709: FILE: include/linux/audit.h:177:
+extern int		    audit_set_rate_limit(int limit);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#710: FILE: include/linux/audit.h:178:
+extern int		    audit_set_backlog_limit(int limit);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#711: FILE: include/linux/audit.h:179:
+extern int		    audit_set_enabled(int state);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#712: FILE: include/linux/audit.h:180:
+extern int		    audit_set_failure(int state);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#715: FILE: include/linux/audit.h:183:
+extern void		    audit_send_reply(int pid, int seq, int type,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#718: FILE: include/linux/audit.h:186:
+extern void		    audit_log_lost(const char *message);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#720: FILE: include/linux/audit.h:188:
+#define audit_log(t,f,...) do { ; } while (0)
                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#720: FILE: include/linux/audit.h:188:
+#define audit_log(t,f,...) do { ; } while (0)
                      ^

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#720: FILE: include/linux/audit.h:188:
+#define audit_log(t,f,...) do { ; } while (0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#722: FILE: include/linux/audit.h:190:
+#define audit_log_vformat(b,f,a) do { ; } while (0)
                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#722: FILE: include/linux/audit.h:190:
+#define audit_log_vformat(b,f,a) do { ; } while (0)
                              ^

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#722: FILE: include/linux/audit.h:190:
+#define audit_log_vformat(b,f,a) do { ; } while (0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#723: FILE: include/linux/audit.h:191:
+#define audit_log_format(b,f,...) do { ; } while (0)
                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#723: FILE: include/linux/audit.h:191:
+#define audit_log_format(b,f,...) do { ; } while (0)
                             ^

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#723: FILE: include/linux/audit.h:191:
+#define audit_log_format(b,f,...) do { ; } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#724: FILE: include/linux/audit.h:192:
+#define audit_log_end(b) do { ; } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#725: FILE: include/linux/audit.h:193:
+#define audit_log_end_fast(b) do { ; } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#726: FILE: include/linux/audit.h:194:
+#define audit_log_end_irq(b) do { ; } while (0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#727: FILE: include/linux/audit.h:195:
+#define audit_log_d_path(b,p,d,v) do { ; } while (0)
                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#727: FILE: include/linux/audit.h:195:
+#define audit_log_d_path(b,p,d,v) do { ; } while (0)
                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#727: FILE: include/linux/audit.h:195:
+#define audit_log_d_path(b,p,d,v) do { ; } while (0)
                               ^

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#727: FILE: include/linux/audit.h:195:
+#define audit_log_d_path(b,p,d,v) do { ; } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#728: FILE: include/linux/audit.h:196:
+#define audit_set_rate_limit(l) do { ; } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#729: FILE: include/linux/audit.h:197:
+#define audit_set_backlog_limit(l) do { ; } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#730: FILE: include/linux/audit.h:198:
+#define audit_set_enabled(s) do { ; } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#731: FILE: include/linux/audit.h:199:
+#define audit_set_failure(s) do { ; } while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#755: FILE: include/linux/fs.h:1136:
+#define putname(name)							\
+	do {								\
+		if (unlikely(current->audit_context))			\
+			audit_putname(name);				\
+		else							\
+			__putname(name);				\
+	} while (0)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#795: FILE: include/linux/sched.h:473:
+^I$

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#816: FILE: init/Kconfig:133:
+config AUDITSYSCALL
+	bool "Enable system-call auditing support"
+	depends on AUDIT && (X86 || PPC64)
+	default y if SECURITY_SELINUX
+	default n
+	help
+	  Enable low-overhead system-call auditing infrastructure that
+	  can be used independently or with another kernel subsystem,
+	  such as SELinux.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#833: FILE: kernel/audit.c:1:
+/* audit.c -- Auditing support -*- linux-c -*-

ERROR:TRAILING_WHITESPACE: trailing whitespace
#836: FILE: kernel/audit.c:4:
+ * $

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#851: FILE: kernel/audit.c:19:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#852: FILE: kernel/audit.c:20:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#877: FILE: kernel/audit.c:45:
+#include <asm/atomic.h>

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#889: FILE: kernel/audit.c:57:
+ * (Initialization happens after skb_init is called.) */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#902: FILE: kernel/audit.c:70:
+ * contains the (non-zero) pid. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#907: FILE: kernel/audit.c:75:
+ * audit records being dropped. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#915: FILE: kernel/audit.c:83:
+/* Records can be lost in several ways:
+   0) [suppressed in audit_alloc]

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#932: FILE: kernel/audit.c:100:
+ * being placed on the freelist). */

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#935: FILE: kernel/audit.c:103:
+static int	   audit_freelist_count = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#941: FILE: kernel/audit.c:109:
+ * syscall exit time. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#948: FILE: kernel/audit.c:116:
+ * should be at least that large. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#952: FILE: kernel/audit.c:120:
+ * audit_freelist.  Doing so eliminates many kmalloc/kfree calls. */

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#953: FILE: kernel/audit.c:121:
+#define AUDIT_MAXFREE  (2*NR_CPUS)
                          ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#959: FILE: kernel/audit.c:127:
+ * use simultaneously. */

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#982: FILE: kernel/audit.c:150:
+	switch (audit_failure)
+	{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#987: FILE: kernel/audit.c:155:
+		printk(KERN_ERR "audit: %s\n", message);

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#997: FILE: kernel/audit.c:165:
+	static unsigned long	last_check = 0;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#998: FILE: kernel/audit.c:166:
+	static int		messages   = 0;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1004: FILE: kernel/audit.c:172:
+^I$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1005: FILE: kernel/audit.c:173:
+	if (!audit_rate_limit) return 1;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1025: FILE: kernel/audit.c:193:
+ * throttling. */

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#1028: FILE: kernel/audit.c:196:
+	static unsigned long	last_msg = 0;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1049: FILE: kernel/audit.c:217:
+		printk(KERN_WARNING

WARNING:SPLIT_STRING: quoted string split across lines
#1051: FILE: kernel/audit.c:219:
+		       "audit: audit_lost=%d audit_backlog=%d"
+		       " audit_rate_limit=%d audit_backlog_limit=%d\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1058: FILE: kernel/audit.c:226:
+^I$

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1059: FILE: kernel/audit.c:227:
+	
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#1064: FILE: kernel/audit.c:232:
+	int old		 = audit_rate_limit;
+	audit_rate_limit = limit;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1073: FILE: kernel/audit.c:241:
+	int old		 = audit_backlog_limit;
+	audit_backlog_limit = limit;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1082: FILE: kernel/audit.c:250:
+	int old		 = audit_enabled;
+	if (state != 0 && state != 1)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1093: FILE: kernel/audit.c:261:
+	int old		 = audit_failure;
+	if (state != AUDIT_FAIL_SILENT

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1094: FILE: kernel/audit.c:262:
+	if (state != AUDIT_FAIL_SILENT
+	    && state != AUDIT_FAIL_PRINTK

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1095: FILE: kernel/audit.c:263:
+	    && state != AUDIT_FAIL_PRINTK
+	    && state != AUDIT_FAIL_PANIC)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1138: FILE: kernel/audit.c:306:
+^I$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1162: FILE: kernel/audit.c:330:
+			if (err < 0) return err;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1166: FILE: kernel/audit.c:334:
+			if (err < 0) return err;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1170: FILE: kernel/audit.c:338:
+			int old   = audit_pid;
+			audit_pid = status_get->pid;

WARNING:SPLIT_STRING: quoted string split across lines
#1200: FILE: kernel/audit.c:368:
+			audit_log_format(ab, "login pid=%d uid=%d loginuid=%d"
+					 " length=%d msg='%.1024s'",

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1234: FILE: kernel/audit.c:402:
+ * discarded silently.  */

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1248: FILE: kernel/audit.c:416:
+		if ((err = audit_receive_msg(skb, nlh))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#1248: FILE: kernel/audit.c:416:
+		if ((err = audit_receive_msg(skb, nlh))) {
[...]
+		} else if (nlh->nlmsg_flags & NLM_F_ACK)
[...]

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1276: FILE: kernel/audit.c:444:
+ * memory. */ $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1276: FILE: kernel/audit.c:444:
+ * memory. */ 

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'audit_log_move', this function's name, in a string
#1288: FILE: kernel/audit.c:456:
+			audit_log_lost("out of memory in audit_log_move");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1302: FILE: kernel/audit.c:470:
+ * to user space. */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1306: FILE: kernel/audit.c:474:
+^I$

CHECK:BRACES: braces {} should be used on all arms of this statement
#1328: FILE: kernel/audit.c:496:
+			if (retval == -ECONNREFUSED) {
[...]
+			} else
[...]

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1329: FILE: kernel/audit.c:497:
+				printk(KERN_ERR

CHECK:BRACES: Unbalanced braces around else statement
#1333: FILE: kernel/audit.c:501:
+			} else

WARNING:LINE_SPACING: Missing a blank line after declarations
#1339: FILE: kernel/audit.c:507:
+			int len    = skb->len - offset;
+			printk(KERN_ERR "%*.*s\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1339: FILE: kernel/audit.c:507:
+			printk(KERN_ERR "%*.*s\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1350: FILE: kernel/audit.c:518:
+	printk(KERN_INFO "audit: initializing netlink socket (%s)\n",

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1364: FILE: kernel/audit.c:532:
+ * in the buffer. */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1367: FILE: kernel/audit.c:535:
+	printk(KERN_ERR "%*.*s\n", ab->len, ab->len, ab->tmp);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1378: FILE: kernel/audit.c:546:
+	printk(KERN_INFO "audit: initializing WITHOUT netlink support\n");

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#1389: FILE: kernel/audit.c:557:
+__initcall(audit_init);

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#1394: FILE: kernel/audit.c:562:
+	audit_default = !!simple_strtol(str, NULL, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1395: FILE: kernel/audit.c:563:
+	printk(KERN_INFO "audit: %s%s\n",

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#1403: FILE: kernel/audit.c:571:
+__setup("audit=", audit_enable);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1405: FILE: kernel/audit.c:573:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1411: FILE: kernel/audit.c:579:
+ * should be NULL. */

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1423: FILE: kernel/audit.c:591:
+	if (audit_backlog_limit
+	    && atomic_read(&audit_backlog) > audit_backlog_limit) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1425: FILE: kernel/audit.c:593:
+			printk(KERN_WARNING

WARNING:SPLIT_STRING: quoted string split across lines
#1427: FILE: kernel/audit.c:595:
+			       "audit: audit_backlog=%d > "
+			       "audit_backlog_limit=%d\n",

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1442: FILE: kernel/audit.c:610:
+^I$

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'audit_log_start', this function's name, in a string
#1446: FILE: kernel/audit.c:614:
+		audit_log_lost("audit: out of memory in audit_log_start");

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1469: FILE: kernel/audit.c:637:
+			 t.tv_sec, t.tv_nsec/1000000, serial);
 			                    ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1473: FILE: kernel/audit.c:641:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1477: FILE: kernel/audit.c:645:
+ * can't format message larger than 1024 bytes, so we don't either. */ $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1477: FILE: kernel/audit.c:645:
+ * can't format message larger than 1024 bytes, so we don't either. */ 

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1495: FILE: kernel/audit.c:663:
+		 * log everything that printk could have logged. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1505: FILE: kernel/audit.c:673:
+ * audit_log_vformat. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1519: FILE: kernel/audit.c:687:
+ * audit_buffer. */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1525: FILE: kernel/audit.c:693:
+^I$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1526: FILE: kernel/audit.c:694:
+	if (prefix) audit_log_format(ab, " %s", prefix);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1554: FILE: kernel/audit.c:722:
+^I$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1567: FILE: kernel/audit.c:735:
+ * any context. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1582: FILE: kernel/audit.c:750:
+ * be called in an irq context. */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1587: FILE: kernel/audit.c:755:
+	BUG_ON(in_irq());

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1608: FILE: kernel/audit.c:776:
+ * context.) */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1619: FILE: kernel/audit.c:787:
+ * called in any context. */

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1634: FILE: kernel/audit.c:802:
+EXPORT_SYMBOL_GPL(audit_set_rate_limit);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1635: FILE: kernel/audit.c:803:
+EXPORT_SYMBOL_GPL(audit_set_backlog_limit);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1636: FILE: kernel/audit.c:804:
+EXPORT_SYMBOL_GPL(audit_set_enabled);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1637: FILE: kernel/audit.c:805:
+EXPORT_SYMBOL_GPL(audit_set_failure);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1639: FILE: kernel/audit.c:807:
+EXPORT_SYMBOL_GPL(audit_log_start);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1640: FILE: kernel/audit.c:808:
+EXPORT_SYMBOL_GPL(audit_log_format);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1641: FILE: kernel/audit.c:809:
+EXPORT_SYMBOL_GPL(audit_log_end_irq);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1642: FILE: kernel/audit.c:810:
+EXPORT_SYMBOL_GPL(audit_log_end_fast);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1643: FILE: kernel/audit.c:811:
+EXPORT_SYMBOL_GPL(audit_log_end);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1644: FILE: kernel/audit.c:812:
+EXPORT_SYMBOL_GPL(audit_log);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1645: FILE: kernel/audit.c:813:
+EXPORT_SYMBOL_GPL(audit_log_d_path);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1650: FILE: kernel/auditsc.c:1:
+/* auditsc.c -- System-call auditing support -*- linux-c -*-

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1652: FILE: kernel/auditsc.c:3:
+ * $

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1667: FILE: kernel/auditsc.c:18:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1668: FILE: kernel/auditsc.c:19:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1671: FILE: kernel/auditsc.c:22:
+ * $

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#1682: FILE: kernel/auditsc.c:33:
+#include <asm/atomic.h>

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1692: FILE: kernel/auditsc.c:43:
+/* 0 = no checking
+   1 = put_count checking

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1698: FILE: kernel/auditsc.c:49:
+extern int audit_enabled;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1701: FILE: kernel/auditsc.c:52:
+ * for saving names from getname(). */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1706: FILE: kernel/auditsc.c:57:
+ * path_lookup. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1710: FILE: kernel/auditsc.c:61:
+/* At task start time, the audit_state is set in the audit_context using
+   a per-task filter.  At syscall entry, the audit_state is augmented by

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1711: FILE: kernel/auditsc.c:62:
+   the syscall filter. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1715: FILE: kernel/auditsc.c:66:
+				 * be generated. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1719: FILE: kernel/auditsc.c:70:
+				 * instead). */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1725: FILE: kernel/auditsc.c:76:
+				 * should be recorded. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1729: FILE: kernel/auditsc.c:80:
+				 * record at syscall exit time.  */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1736: FILE: kernel/auditsc.c:87:
+ * Further, in fs/namei.c:path_lookup() we store the inode and device. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1771: FILE: kernel/auditsc.c:122:
+ * syscall exit time. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1783: FILE: kernel/auditsc.c:134:
+ * audit_del_rule during AUDIT_DEL. */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1790: FILE: kernel/auditsc.c:141:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1793: FILE: kernel/auditsc.c:144:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1796: FILE: kernel/auditsc.c:147:
+^I$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1799: FILE: kernel/auditsc.c:150:
+		if (a->fields[i] != b->fields[i]
+		    || a->values[i] != b->values[i])

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1844: FILE: kernel/auditsc.c:195:
+ * AUDIT_ADD. */

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1850: FILE: kernel/auditsc.c:201:
+	if (s->action != AUDIT_NEVER
+	    && s->action != AUDIT_POSSIBLE

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1851: FILE: kernel/auditsc.c:202:
+	    && s->action != AUDIT_POSSIBLE
+	    && s->action != AUDIT_ALWAYS)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1855: FILE: kernel/auditsc.c:206:
+^I$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1863: FILE: kernel/auditsc.c:214:
+	for (i = 0; i < AUDIT_BITMASK_SIZE; i++) d->mask[i] = s->mask[i];

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1872: FILE: kernel/auditsc.c:223:
+^I$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1889: FILE: kernel/auditsc.c:240:
+		if (!(entry = kmalloc(sizeof(*entry), GFP_KERNEL)))

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1904: FILE: kernel/auditsc.c:255:
+		flags =((struct audit_rule *)data)->flags;
 		      ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1921: FILE: kernel/auditsc.c:272:
+ * otherwise. */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1932: FILE: kernel/auditsc.c:283:
+^I^I$

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#1971: FILE: kernel/auditsc.c:322:
+			if (tsk->exit_code!=value)
 			                  ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#1975: FILE: kernel/auditsc.c:326:
+			if (tsk->exit_code==value)
 			                  ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#2018: FILE: kernel/auditsc.c:369:
+	case AUDIT_NEVER:    *state = AUDIT_DISABLED;	    break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#2019: FILE: kernel/auditsc.c:370:
+	case AUDIT_POSSIBLE: *state = AUDIT_BUILD_CONTEXT;  break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#2020: FILE: kernel/auditsc.c:371:
+	case AUDIT_ALWAYS:   *state = AUDIT_RECORD_CONTEXT; break;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2033: FILE: kernel/auditsc.c:384:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2054: FILE: kernel/auditsc.c:405:
+^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2057: FILE: kernel/auditsc.c:408:
+ ^I^I    && audit_filter_rules(tsk, &e->rule, ctx, &state))$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2057: FILE: kernel/auditsc.c:408:
+ ^I^I    && audit_filter_rules(tsk, &e->rule, ctx, &state))$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2057: FILE: kernel/auditsc.c:408:
+		if ((e->rule.mask[word] & bit) == bit
+ 		    && audit_filter_rules(tsk, &e->rule, ctx, &state))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2057: FILE: kernel/auditsc.c:408:
+ ^I^I    && audit_filter_rules(tsk, &e->rule, ctx, &state))$

WARNING:LINE_SPACING: Missing a blank line after declarations
#2072: FILE: kernel/auditsc.c:423:
+		enum audit_state state;
+		state = audit_filter_syscall(tsk, context, &audit_extlist);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2096: FILE: kernel/auditsc.c:447:
+	if (context->auditable
+	    ||context->put_count + context->ino_count != context->name_count) {

ERROR:SPACING: spaces required around that '||' (ctx:ExV)
#2096: FILE: kernel/auditsc.c:447:
+	    ||context->put_count + context->ino_count != context->name_count) {
 	    ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2097: FILE: kernel/auditsc.c:448:
+		printk(KERN_ERR "audit.c:%d(:%d): major=%d in_syscall=%d"

WARNING:SPLIT_STRING: quoted string split across lines
#2098: FILE: kernel/auditsc.c:449:
+		printk(KERN_ERR "audit.c:%d(:%d): major=%d in_syscall=%d"
+		       " name_count=%d put_count=%d"

WARNING:SPLIT_STRING: quoted string split across lines
#2099: FILE: kernel/auditsc.c:450:
+		       " name_count=%d put_count=%d"
+		       " ino_count=%d [NOT freeing]\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2105: FILE: kernel/auditsc.c:456:
+			printk(KERN_ERR "names[%d] = %p = %s\n", i,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2127: FILE: kernel/auditsc.c:478:
+^I$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2137: FILE: kernel/auditsc.c:488:
+	if (!(context = kmalloc(sizeof(*context), GFP_KERNEL)))

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2146: FILE: kernel/auditsc.c:497:
+ * needed. */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2158: FILE: kernel/auditsc.c:509:
+^I$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2159: FILE: kernel/auditsc.c:510:
+	if (!(context = audit_alloc_context(state))) {

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'audit_alloc', this function's name, in a string
#2160: FILE: kernel/auditsc.c:511:
+		audit_log_lost("out of memory in audit_alloc");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2183: FILE: kernel/auditsc.c:534:
+			printk(KERN_ERR "audit(:%d): major=%d name_count=%d:"

WARNING:SPLIT_STRING: quoted string split across lines
#2184: FILE: kernel/auditsc.c:535:
+			printk(KERN_ERR "audit(:%d): major=%d name_count=%d:"
+			       " freeing multiple contexts (%d)\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2193: FILE: kernel/auditsc.c:544:
+		printk(KERN_ERR "audit: freed %d contexts\n", count);

WARNING:SPLIT_STRING: quoted string split across lines
#2202: FILE: kernel/auditsc.c:553:
+		  "syscall=%d,0x%x items=%d"
+		  " pid=%d loginuid=%d uid=%d gid=%d"

WARNING:SPLIT_STRING: quoted string split across lines
#2203: FILE: kernel/auditsc.c:554:
+		  " pid=%d loginuid=%d uid=%d gid=%d"
+		  " euid=%d suid=%d fsuid=%d"

WARNING:SPLIT_STRING: quoted string split across lines
#2204: FILE: kernel/auditsc.c:555:
+		  " euid=%d suid=%d fsuid=%d"
+		  " egid=%d sgid=%d fsgid=%d",

WARNING:LINE_SPACING: Missing a blank line after declarations
#2216: FILE: kernel/auditsc.c:567:
+		struct audit_buffer  *ab = audit_log_start(context);
+		if (!ab)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2226: FILE: kernel/auditsc.c:577:
+		 * opaque. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2236: FILE: kernel/auditsc.c:587:
+ * __put_task_struct. */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2244: FILE: kernel/auditsc.c:595:
+^I^I$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2249: FILE: kernel/auditsc.c:600:
+	 * function (e.g., exit_group), then free context block. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2270: FILE: kernel/auditsc.c:621:
+ * halts). */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2292: FILE: kernel/auditsc.c:643:
+ * be written). */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2298: FILE: kernel/auditsc.c:649:
+	BUG_ON(!context);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2322: FILE: kernel/auditsc.c:673:
+		printk(KERN_ERR

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2336: FILE: kernel/auditsc.c:687:
+			 * to abandon auditing. */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2340: FILE: kernel/auditsc.c:691:
+	BUG_ON(context->in_syscall || context->name_count);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2364: FILE: kernel/auditsc.c:715:
+ * free the names stored from getname(). */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2375: FILE: kernel/auditsc.c:726:
+	 * called __put_task_struct. */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2381: FILE: kernel/auditsc.c:732:
+^I$

WARNING:LINE_SPACING: Missing a blank line after declarations
#2386: FILE: kernel/auditsc.c:737:
+		struct audit_context *new_context = context->previous;
+		context->previous  = NULL;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2402: FILE: kernel/auditsc.c:753:
+	BUG_ON(!context);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2405: FILE: kernel/auditsc.c:756:
+		printk(KERN_ERR "audit.c:%d(:%d): ignoring getname(%p)\n",

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2411: FILE: kernel/auditsc.c:762:
+	BUG_ON(context->name_count >= AUDIT_NAMES);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2421: FILE: kernel/auditsc.c:772:
+ * exit. */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2426: FILE: kernel/auditsc.c:777:
+	BUG_ON(!context);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2429: FILE: kernel/auditsc.c:780:
+		printk(KERN_ERR "audit.c:%d(:%d): __putname(%p)\n",

WARNING:LINE_SPACING: Missing a blank line after declarations
#2433: FILE: kernel/auditsc.c:784:
+			int i;
+			for (i = 0; i < context->name_count; i++)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2434: FILE: kernel/auditsc.c:785:
+				printk(KERN_ERR "name[%d] = %p = %s\n", i,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2438: FILE: kernel/auditsc.c:789:
+#endif^I^I$

CHECK:BRACES: Unbalanced braces around else statement
#2442: FILE: kernel/auditsc.c:793:
+	else {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2445: FILE: kernel/auditsc.c:796:
+			printk(KERN_ERR "audit.c:%d(:%d): major=%d"

WARNING:SPLIT_STRING: quoted string split across lines
#2446: FILE: kernel/auditsc.c:797:
+			printk(KERN_ERR "audit.c:%d(:%d): major=%d"
+			       " in_syscall=%d putname(%p) name_count=%d"

WARNING:SPLIT_STRING: quoted string split across lines
#2447: FILE: kernel/auditsc.c:798:
+			       " in_syscall=%d putname(%p) name_count=%d"
+			       " put_count=%d\n",

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2459: FILE: kernel/auditsc.c:810:
+ * fs/namei.c:path_lookup(). */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2464: FILE: kernel/auditsc.c:815:
+^I$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2466: FILE: kernel/auditsc.c:817:
+	if (context->name_count
+	    && context->names[context->name_count-1].name

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2466: FILE: kernel/auditsc.c:817:
+	    && context->names[context->name_count-1].name
 	                                         ^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2467: FILE: kernel/auditsc.c:818:
+	    && context->names[context->name_count-1].name
+	    && context->names[context->name_count-1].name == name)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2467: FILE: kernel/auditsc.c:818:
+	    && context->names[context->name_count-1].name == name)
 	                                         ^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2470: FILE: kernel/auditsc.c:821:
+	else if (context->name_count > 1
+		 && context->names[context->name_count-2].name

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2470: FILE: kernel/auditsc.c:821:
+		 && context->names[context->name_count-2].name
 		                                      ^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2471: FILE: kernel/auditsc.c:822:
+		 && context->names[context->name_count-2].name
+		 && context->names[context->name_count-2].name == name)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2471: FILE: kernel/auditsc.c:822:
+		 && context->names[context->name_count-2].name == name)
 		                                      ^

CHECK:BRACES: Unbalanced braces around else statement
#2473: FILE: kernel/auditsc.c:824:
+	else {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2475: FILE: kernel/auditsc.c:826:
+		 * associated name? */

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2512: FILE: kernel/auditsc.c:863:
+EXPORT_SYMBOL_GPL(audit_alloc);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2513: FILE: kernel/auditsc.c:864:
+EXPORT_SYMBOL_GPL(audit_free);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2514: FILE: kernel/auditsc.c:865:
+EXPORT_SYMBOL_GPL(audit_syscall_entry);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2515: FILE: kernel/auditsc.c:866:
+EXPORT_SYMBOL_GPL(audit_syscall_exit);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2516: FILE: kernel/auditsc.c:867:
+EXPORT_SYMBOL_GPL(audit_getname);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2517: FILE: kernel/auditsc.c:868:
+EXPORT_SYMBOL_GPL(audit_putname);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2518: FILE: kernel/auditsc.c:869:
+EXPORT_SYMBOL_GPL(audit_inode);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2548: FILE: kernel/fork.c:956:
+	if ((retval = audit_alloc(p)))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2744: FILE: security/selinux/avc.c:524:
+	avc_dump_av(ab, tclass,audited);
 	                      ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2865: FILE: security/selinux/avc.c:612:
+						int len = u->addr->len-sizeof(short);
 						                      ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#2867: FILE: security/selinux/avc.c:614:
+						char *p = &u->addr->name->sun_path[0];
+						if (*p)

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#2867: FILE: security/selinux/avc.c:614:
+						if (*p)

Indentation with 6 or more tabs usually indicate overly indented
code.

It is suggested to refactor excessive indentation of
if/else/for/do/while/switch statements.

See: https://lore.kernel.org/lkml/1328311239.21255.24.camel@joe2Laptop/

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#2870: FILE: security/selinux/avc.c:617:
+						else

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2872: FILE: security/selinux/avc.c:619:
+									 len-1, len-1, p+1);
 									    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2872: FILE: security/selinux/avc.c:619:
+									 len-1, len-1, p+1);
 									           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2872: FILE: security/selinux/avc.c:619:
+									 len-1, len-1, p+1);
 									                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2943: FILE: security/selinux/ss/services.c:389:
+			scontextp = kmalloc(*scontext_len,GFP_ATOMIC);
 			                                 ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000297032.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 79 errors, 157 warnings, 72 checks, 2723 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000297032.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
