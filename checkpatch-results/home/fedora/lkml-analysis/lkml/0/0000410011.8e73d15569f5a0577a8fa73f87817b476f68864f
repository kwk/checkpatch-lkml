Use of uninitialized value $typo_fix in ucfirst at /home/fedora/lkml-analysis/linux/scripts/checkpatch.pl line 3363.
Use of uninitialized value $typo_fix in ucfirst at /home/fedora/lkml-analysis/linux/scripts/checkpatch.pl line 3363.
Use of uninitialized value $typo_fix in ucfirst at /home/fedora/lkml-analysis/linux/scripts/checkpatch.pl line 3363.
Use of uninitialized value $typo_fix in ucfirst at /home/fedora/lkml-analysis/linux/scripts/checkpatch.pl line 3363.
Use of uninitialized value $typo_fix in ucfirst at /home/fedora/lkml-analysis/linux/scripts/checkpatch.pl line 3363.
Use of uninitialized value $typo_fix in ucfirst at /home/fedora/lkml-analysis/linux/scripts/checkpatch.pl line 3363.
Use of uninitialized value $typo_fix in ucfirst at /home/fedora/lkml-analysis/linux/scripts/checkpatch.pl line 3363.
Use of uninitialized value $typo_fix in ucfirst at /home/fedora/lkml-analysis/linux/scripts/checkpatch.pl line 3363.
Use of uninitialized value $typo_fix in ucfirst at /home/fedora/lkml-analysis/linux/scripts/checkpatch.pl line 3363.
Use of uninitialized value $typo_fix in ucfirst at /home/fedora/lkml-analysis/linux/scripts/checkpatch.pl line 3363.
Use of uninitialized value $typo_fix in ucfirst at /home/fedora/lkml-analysis/linux/scripts/checkpatch.pl line 3363.
Use of uninitialized value $typo_fix in ucfirst at /home/fedora/lkml-analysis/linux/scripts/checkpatch.pl line 3363.
Use of uninitialized value $typo_fix in ucfirst at /home/fedora/lkml-analysis/linux/scripts/checkpatch.pl line 3363.
Use of uninitialized value $typo_fix in ucfirst at /home/fedora/lkml-analysis/linux/scripts/checkpatch.pl line 3363.
Use of uninitialized value $typo_fix in ucfirst at /home/fedora/lkml-analysis/linux/scripts/checkpatch.pl line 3363.
Use of uninitialized value $typo_fix in ucfirst at /home/fedora/lkml-analysis/linux/scripts/checkpatch.pl line 3363.
Use of uninitialized value $typo_fix in ucfirst at /home/fedora/lkml-analysis/linux/scripts/checkpatch.pl line 3363.
Use of uninitialized value $typo_fix in ucfirst at /home/fedora/lkml-analysis/linux/scripts/checkpatch.pl line 3363.
Use of uninitialized value $typo_fix in ucfirst at /home/fedora/lkml-analysis/linux/scripts/checkpatch.pl line 3363.
Use of uninitialized value $typo_fix in ucfirst at /home/fedora/lkml-analysis/linux/scripts/checkpatch.pl line 3363.
Use of uninitialized value $typo_fix in ucfirst at /home/fedora/lkml-analysis/linux/scripts/checkpatch.pl line 3363.
Use of uninitialized value $typo_fix in ucfirst at /home/fedora/lkml-analysis/linux/scripts/checkpatch.pl line 3363.
Use of uninitialized value $typo_fix in ucfirst at /home/fedora/lkml-analysis/linux/scripts/checkpatch.pl line 3363.
Use of uninitialized value $typo_fix in ucfirst at /home/fedora/lkml-analysis/linux/scripts/checkpatch.pl line 3363.
Use of uninitialized value $typo_fix in ucfirst at /home/fedora/lkml-analysis/linux/scripts/checkpatch.pl line 3363.
Use of uninitialized value $typo_fix in ucfirst at /home/fedora/lkml-analysis/linux/scripts/checkpatch.pl line 3363.
Use of uninitialized value $typo_fix in ucfirst at /home/fedora/lkml-analysis/linux/scripts/checkpatch.pl line 3363.
Use of uninitialized value $typo_fix in ucfirst at /home/fedora/lkml-analysis/linux/scripts/checkpatch.pl line 3363.
Use of uninitialized value $typo_fix in ucfirst at /home/fedora/lkml-analysis/linux/scripts/checkpatch.pl line 3363.
Use of uninitialized value $typo_fix in ucfirst at /home/fedora/lkml-analysis/linux/scripts/checkpatch.pl line 3363.
Use of uninitialized value $typo_fix in ucfirst at /home/fedora/lkml-analysis/linux/scripts/checkpatch.pl line 3363.
Use of uninitialized value $typo_fix in ucfirst at /home/fedora/lkml-analysis/linux/scripts/checkpatch.pl line 3363.
Use of uninitialized value $typo_fix in ucfirst at /home/fedora/lkml-analysis/linux/scripts/checkpatch.pl line 3363.
WARNING:MAINTAINERS_STYLE: MAINTAINERS entries use one tab after TYPE:
#37: FILE: MAINTAINERS:754:
+P:      Frodo Looijaard

WARNING:MAINTAINERS_STYLE: MAINTAINERS entries use one tab after TYPE:
#38: FILE: MAINTAINERS:755:
+M:      frodol@dds.nl

WARNING:MAINTAINERS_STYLE: Misordered MAINTAINERS entry - list 'M:' before 'P:'
#38: FILE: MAINTAINERS:755:
+P:      Frodo Looijaard
+M:      frodol@dds.nl

WARNING:MAINTAINERS_STYLE: MAINTAINERS entries use one tab after TYPE:
#39: FILE: MAINTAINERS:756:
+P:      Philip Edelbrock

WARNING:MAINTAINERS_STYLE: MAINTAINERS entries use one tab after TYPE:
#40: FILE: MAINTAINERS:757:
+M:      phil@netroedge.com

WARNING:MAINTAINERS_STYLE: Misordered MAINTAINERS entry - list 'M:' before 'P:'
#40: FILE: MAINTAINERS:757:
+P:      Philip Edelbrock
+M:      phil@netroedge.com

WARNING:MAINTAINERS_STYLE: MAINTAINERS entries use one tab after TYPE:
#41: FILE: MAINTAINERS:758:
+L:      sensors@stimpy.netroedge.com

WARNING:MAINTAINERS_STYLE: MAINTAINERS entries use one tab after TYPE:
#42: FILE: MAINTAINERS:759:
+W:      http://www.lm-sensors.nu/

WARNING:MAINTAINERS_STYLE: MAINTAINERS entries use one tab after TYPE:
#43: FILE: MAINTAINERS:760:
+S:      Maintained

WARNING:MAINTAINERS_STYLE: Misordered MAINTAINERS entry - list 'S:' before 'W:'
#43: FILE: MAINTAINERS:760:
+W:      http://www.lm-sensors.nu/
+S:      Maintained

WARNING:TYPO_SPELLING: 'utilties' may be misspelled - perhaps 'utilities'?
#125: FILE: drivers/i2c/busses/Kconfig:17:
+	  You will also want the latest user-space utilties: you can find them
 	                                           ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#126: FILE: drivers/i2c/busses/Kconfig:18:
+^I  in the lm_sensors package, which you can download at $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#136: FILE: drivers/i2c/busses/Kconfig:28:
+^I  This can also be built as a module which can be inserted and removed $

WARNING:TYPO_SPELLING: 'utilties' may be misspelled - perhaps 'utilities'?
#142: FILE: drivers/i2c/busses/Kconfig:34:
+	  You will also need the latest user-space utilties: you can find them
 	                                           ^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#143: FILE: drivers/i2c/busses/Kconfig:35:
+^I  in the lm_sensors package, which you can download at $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#164: FILE: drivers/i2c/busses/i2c-amd756.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#165: FILE: drivers/i2c/busses/i2c-amd756.c:2:
+/*
+    amd756.c - Part of lm_sensors, Linux kernel modules for hardware

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:CODE_INDENT: code indent should use tabs where possible
#166: FILE: drivers/i2c/busses/i2c-amd756.c:3:
+              monitoring$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#186: FILE: drivers/i2c/busses/i2c-amd756.c:23:
+    along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#187: FILE: drivers/i2c/busses/i2c-amd756.c:24:
+    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#191: FILE: drivers/i2c/busses/i2c-amd756.c:28:
+/*
+    2002-04-08: Added nForce support. (Csaba Halasz)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#196: FILE: drivers/i2c/busses/i2c-amd756.c:33:
+/*
+   Supports AMD756, AMD766, AMD768 and nVidia nForce

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#203: FILE: drivers/i2c/busses/i2c-amd756.c:40:
+#include <asm/io.h>

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#222: FILE: drivers/i2c/busses/i2c-amd756.c:59:
+    const unsigned short vendor;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#223: FILE: drivers/i2c/busses/i2c-amd756.c:60:
+    const unsigned short device;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#224: FILE: drivers/i2c/busses/i2c-amd756.c:61:
+    const unsigned short function;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#225: FILE: drivers/i2c/busses/i2c-amd756.c:62:
+    const char* name;$

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#225: FILE: drivers/i2c/busses/i2c-amd756.c:62:
+    const char* name;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#226: FILE: drivers/i2c/busses/i2c-amd756.c:63:
+    int amdsetup:1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#230: FILE: drivers/i2c/busses/i2c-amd756.c:67:
+    {PCI_VENDOR_ID_AMD, PCI_DEVICE_ID_AMD_756, 3, "AMD756", 1},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#231: FILE: drivers/i2c/busses/i2c-amd756.c:68:
+    {PCI_VENDOR_ID_AMD, PCI_DEVICE_ID_AMD_766, 3, "AMD766", 1},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#232: FILE: drivers/i2c/busses/i2c-amd756.c:69:
+    {PCI_VENDOR_ID_AMD, 0x7443, 3, "AMD768", 1},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#233: FILE: drivers/i2c/busses/i2c-amd756.c:70:
+    {PCI_VENDOR_ID_NVIDIA, 0x01B4, 1, "nVidia nForce", 0},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#234: FILE: drivers/i2c/busses/i2c-amd756.c:71:
+    {0, 0, 0}$

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#276: FILE: drivers/i2c/busses/i2c-amd756.c:113:
+int __init i2c_amd756_init(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#277: FILE: drivers/i2c/busses/i2c-amd756.c:114:
+void __exit i2c_amd756_exit(void);

WARNING:MISPLACED_INIT: __initdata should be placed after amd756_initialized
#313: FILE: drivers/i2c/busses/i2c-amd756.c:150:
+static int __initdata amd756_initialized;

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#314: FILE: drivers/i2c/busses/i2c-amd756.c:151:
+static struct sd *amd756_sd = NULL;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#315: FILE: drivers/i2c/busses/i2c-amd756.c:152:
+static unsigned short amd756_smba = 0;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#323: FILE: drivers/i2c/busses/i2c-amd756.c:160:
+	if (pci_present() == 0) {
+		return -ENODEV;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required before the open parenthesis '('
#328: FILE: drivers/i2c/busses/i2c-amd756.c:165:
+	for(currdev = supported; currdev->vendor; ) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#330: FILE: drivers/i2c/busses/i2c-amd756.c:167:
+		AMD756_dev = pci_find_device(currdev->vendor,
+						currdev->device, AMD756_dev);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "AMD756_dev"
#331: FILE: drivers/i2c/busses/i2c-amd756.c:168:
+		if (AMD756_dev != NULL)	{

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 20)
#334: FILE: drivers/i2c/busses/i2c-amd756.c:171:
+		} else {
+		    currdev++;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!AMD756_dev"
#339: FILE: drivers/i2c/busses/i2c-amd756.c:176:
+	if (AMD756_dev == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#344: FILE: drivers/i2c/busses/i2c-amd756.c:181:
+	printk(KERN_INFO "i2c-amd756.o: Found %s SMBus controller.\n", currdev->name);

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#346: FILE: drivers/i2c/busses/i2c-amd756.c:183:
+	if (currdev->amdsetup)
+	{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#350: FILE: drivers/i2c/busses/i2c-amd756.c:187:
+			printk("i2c-amd756.o: Error: SMBus controller I/O not enabled!\n");

ERROR:SPACING: space required before the open parenthesis '('
#363: FILE: drivers/i2c/busses/i2c-amd756.c:200:
+	if(amd756_smba == 0) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#364: FILE: drivers/i2c/busses/i2c-amd756.c:201:
+		printk(KERN_ERR "i2c-amd756.o: Error: SMB base address uninitialized\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#379: FILE: drivers/i2c/busses/i2c-amd756.c:216:
+	printk("i2c-amd756.o: SMBREV = 0x%X\n", temp);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#380: FILE: drivers/i2c/busses/i2c-amd756.c:217:
+	printk("i2c-amd756.o: AMD756_smba = 0x%X\n", amd756_smba);

ERROR:CODE_INDENT: code indent should use tabs where possible
#384: FILE: drivers/i2c/busses/i2c-amd756.c:221:
+        amd756_sd = currdev;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#384: FILE: drivers/i2c/busses/i2c-amd756.c:221:
+        amd756_sd = currdev;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#389: FILE: drivers/i2c/busses/i2c-amd756.c:226:
+/* $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#390: FILE: drivers/i2c/busses/i2c-amd756.c:227:
+/* 
+  SMBUS event = I/O 28-29 bit 11

ERROR:TRAILING_WHITESPACE: trailing whitespace
#392: FILE: drivers/i2c/busses/i2c-amd756.c:229:
+     $

CHECK:BIT_MACRO: Prefer using the BIT macro
#402: FILE: drivers/i2c/busses/i2c-amd756.c:239:
+#define GS_ABRT_STS (1 << 0)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#403: FILE: drivers/i2c/busses/i2c-amd756.c:240:
+#define GS_COL_STS (1 << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#404: FILE: drivers/i2c/busses/i2c-amd756.c:241:
+#define GS_PRERR_STS (1 << 2)

CHECK:BIT_MACRO: Prefer using the BIT macro
#405: FILE: drivers/i2c/busses/i2c-amd756.c:242:
+#define GS_HST_STS (1 << 3)

CHECK:BIT_MACRO: Prefer using the BIT macro
#406: FILE: drivers/i2c/busses/i2c-amd756.c:243:
+#define GS_HCYC_STS (1 << 4)

CHECK:BIT_MACRO: Prefer using the BIT macro
#407: FILE: drivers/i2c/busses/i2c-amd756.c:244:
+#define GS_TO_STS (1 << 5)

CHECK:BIT_MACRO: Prefer using the BIT macro
#408: FILE: drivers/i2c/busses/i2c-amd756.c:245:
+#define GS_SMB_STS (1 << 11)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#411: FILE: drivers/i2c/busses/i2c-amd756.c:248:
+  GS_HCYC_STS | GS_TO_STS )$

ERROR:SPACING: space prohibited before that close parenthesis ')'
#411: FILE: drivers/i2c/busses/i2c-amd756.c:248:
+  GS_HCYC_STS | GS_TO_STS )

CHECK:BIT_MACRO: Prefer using the BIT macro
#414: FILE: drivers/i2c/busses/i2c-amd756.c:251:
+#define GE_HOST_STC (1 << 3)

CHECK:BIT_MACRO: Prefer using the BIT macro
#415: FILE: drivers/i2c/busses/i2c-amd756.c:252:
+#define GE_ABORT (1 << 5)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#419: FILE: drivers/i2c/busses/i2c-amd756.c:256:
+	printk("i2c-amd756.o: Sending abort.\n");

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#439: FILE: drivers/i2c/busses/i2c-amd756.c:276:
+	if ((temp = inw_p(SMB_GLOBAL_STATUS)) & (GS_HST_STS | GS_SMB_STS)) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#442: FILE: drivers/i2c/busses/i2c-amd756.c:279:
+		    ("i2c-amd756.o: SMBus busy (%04x). Waiting... \n", temp);

ERROR:CODE_INDENT: code indent should use tabs where possible
#448: FILE: drivers/i2c/busses/i2c-amd756.c:285:
+^I^I         (timeout++ < MAX_TIMEOUT));$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#451: FILE: drivers/i2c/busses/i2c-amd756.c:288:
+			printk("i2c-amd756.o: Busy wait timeout! (%04x)\n", temp);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#469: FILE: drivers/i2c/busses/i2c-amd756.c:306:
+		printk("i2c-amd756.o: Completion timeout!\n");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#470: FILE: drivers/i2c/busses/i2c-amd756.c:307:
+		amd756_abort ();

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#477: FILE: drivers/i2c/busses/i2c-amd756.c:314:
+		printk("i2c-amd756.o: SMBus Protocol error (no response)!\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#483: FILE: drivers/i2c/busses/i2c-amd756.c:320:
+		printk("i2c-amd756.o: SMBus collision!\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#489: FILE: drivers/i2c/busses/i2c-amd756.c:326:
+		printk("i2c-amd756.o: SMBus protocol timeout!\n");

WARNING:BRACES: braces {} are not necessary for single statement blocks
#493: FILE: drivers/i2c/busses/i2c-amd756.c:330:
+	if (temp & GS_HCYC_STS) {
+		printk("i2c-amd756.o: SMBus protocol success!\n");
+	}

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#494: FILE: drivers/i2c/busses/i2c-amd756.c:331:
+		printk("i2c-amd756.o: SMBus protocol success!\n");

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#501: FILE: drivers/i2c/busses/i2c-amd756.c:338:
+	if (((temp = inw_p(SMB_GLOBAL_STATUS)) & GS_CLEAR_STS) != 0x00) {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#516: FILE: drivers/i2c/busses/i2c-amd756.c:353:
+s32 amd756_access(struct i2c_adapter * adap, u16 addr,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#518: FILE: drivers/i2c/busses/i2c-amd756.c:355:
+		  u8 command, int size, union i2c_smbus_data * data)

WARNING:TYPO_SPELLING: 'supporte' may be misspelled - perhaps 'supported'?
#522: FILE: drivers/i2c/busses/i2c-amd756.c:359:
+  /** TODO: Should I supporte the 10-bit transfers? */
                      ^^^^^^^^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'read_write == I2C_SMBUS_WRITE'
#584: FILE: drivers/i2c/busses/i2c-amd756.c:421:
+	if ((read_write == I2C_SMBUS_WRITE) || (size == AMD756_QUICK))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'size == AMD756_QUICK'
#584: FILE: drivers/i2c/busses/i2c-amd756.c:421:
+	if ((read_write == I2C_SMBUS_WRITE) || (size == AMD756_QUICK))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#587: FILE: drivers/i2c/busses/i2c-amd756.c:424:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#600: FILE: drivers/i2c/busses/i2c-amd756.c:437:
+		if(data->block[0] > 32)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#618: FILE: drivers/i2c/busses/i2c-amd756.c:455:
+{
+

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#641: FILE: drivers/i2c/busses/i2c-amd756.c:478:
+	if ((res = amd756_setup())) {

WARNING:LONG_LINE_STRING: line length of 103 exceeds 100 columns
#643: FILE: drivers/i2c/busses/i2c-amd756.c:480:
+		    ("i2c-amd756.o: AMD756 or compatible device not detected, module not inserted.\n");

A string starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#650: FILE: drivers/i2c/busses/i2c-amd756.c:487:
+	if ((res = i2c_add_adapter(&amd756_adapter))) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#657: FILE: drivers/i2c/busses/i2c-amd756.c:494:
+	printk("i2c-amd756.o: %s bus detected and initialized\n",

ERROR:CODE_INDENT: code indent should use tabs where possible
#658: FILE: drivers/i2c/busses/i2c-amd756.c:495:
+               amd756_sd->name);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#658: FILE: drivers/i2c/busses/i2c-amd756.c:495:
+	printk("i2c-amd756.o: %s bus detected and initialized\n",
+               amd756_sd->name);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#658: FILE: drivers/i2c/busses/i2c-amd756.c:495:
+               amd756_sd->name);$

WARNING:LINE_SPACING: Missing a blank line after declarations
#670: FILE: drivers/i2c/busses/i2c-amd756.c:507:
+	int res;
+	if (amd756_initialized >= 2) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#671: FILE: drivers/i2c/busses/i2c-amd756.c:508:
+		if ((res = i2c_del_adapter(&amd756_adapter))) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#671: FILE: drivers/i2c/busses/i2c-amd756.c:508:
+		if ((res = i2c_del_adapter(&amd756_adapter))) {
[...]
+		} else
[...]

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#675: FILE: drivers/i2c/busses/i2c-amd756.c:512:
+			return res;
+		} else

CHECK:BRACES: Unbalanced braces around else statement
#675: FILE: drivers/i2c/busses/i2c-amd756.c:512:
+		} else

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#703: FILE: drivers/i2c/busses/i2c-mainboard.c:1:
+/*

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#704: FILE: drivers/i2c/busses/i2c-mainboard.c:2:
+/*
+    i2c-mainboard.c - Part of lm_sensors, Linux kernel modules for hardware

ERROR:CODE_INDENT: code indent should use tabs where possible
#705: FILE: drivers/i2c/busses/i2c-mainboard.c:3:
+                monitoring$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#706: FILE: drivers/i2c/busses/i2c-mainboard.c:4:
+    Copyright (c) 1998, 1999  Frodo Looijaard <frodol@dds.nl> $

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#719: FILE: drivers/i2c/busses/i2c-mainboard.c:17:
+    along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#720: FILE: drivers/i2c/busses/i2c-mainboard.c:18:
+    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

WARNING:TYPO_SPELLING: 'utilties' may be misspelled - perhaps 'utilities'?
#756: FILE: drivers/i2c/chips/Kconfig:17:
+	  You will also want the latest user-space utilties: you can find them
 	                                           ^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#757: FILE: drivers/i2c/chips/Kconfig:18:
+^I  in the lm_sensors package, which you can download at $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#764: FILE: drivers/i2c/chips/Kconfig:25:
+^I  If you say yes here you get support for Analog Devices ADM1021 $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#767: FILE: drivers/i2c/chips/Kconfig:28:
+^I  and the XEON processor built-in sensor. This can also $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#768: FILE: drivers/i2c/chips/Kconfig:29:
+^I  be built as a module which can be inserted and removed while the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#772: FILE: drivers/i2c/chips/Kconfig:33:
+^I  $

WARNING:TYPO_SPELLING: 'utilties' may be misspelled - perhaps 'utilities'?
#773: FILE: drivers/i2c/chips/Kconfig:34:
+	  You will also need the latest user-space utilties: you can find them
 	                                           ^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#774: FILE: drivers/i2c/chips/Kconfig:35:
+^I  in the lm_sensors package, which you can download at $

WARNING:TYPO_SPELLING: 'utilties' may be misspelled - perhaps 'utilities'?
#788: FILE: drivers/i2c/chips/Kconfig:49:
+	  You will also need the latest user-space utilties: you can find them
 	                                           ^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#789: FILE: drivers/i2c/chips/Kconfig:50:
+^I  in the lm_sensors package, which you can download at $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#811: FILE: drivers/i2c/chips/adm1021.c:1:
+/*

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#812: FILE: drivers/i2c/chips/adm1021.c:2:
+/*
+    adm1021.c - Part of lm_sensors, Linux kernel modules for hardware

ERROR:CODE_INDENT: code indent should use tabs where possible
#813: FILE: drivers/i2c/chips/adm1021.c:3:
+             monitoring$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#828: FILE: drivers/i2c/chips/adm1021.c:18:
+    along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#829: FILE: drivers/i2c/chips/adm1021.c:19:
+    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#846: FILE: drivers/i2c/chips/adm1021.c:36:
+};
+static unsigned int normal_isa[] = { SENSORS_ISA_END };

WARNING:LONG_LINE_COMMENT: line length of 112 exceeds 100 columns
#859: FILE: drivers/i2c/chips/adm1021.c:49:
+#define ADM1021_REG_MAN_ID 0x0FE	/* 0x41 = AMD, 0x49 = TI, 0x4D = Maxim, 0x23 = Genesys , 0x54 = Onsemi*/

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:LINE_SPACING: Please don't use multiple blank lines
#885: FILE: drivers/i2c/chips/adm1021.c:75:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#887: FILE: drivers/i2c/chips/adm1021.c:77:
+/* Conversions. Rounding and limit checking is only done on the TO_REG
+   variants. Note that you should be a bit careful with which arguments

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#889: FILE: drivers/i2c/chips/adm1021.c:79:
+   Fixing this is just not worth it. */

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#891: FILE: drivers/i2c/chips/adm1021.c:81:
+#define TEMP_FROM_REG(val) (val > 127 ? val-256 : val)
                                            ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'val' - possible side-effects?
#891: FILE: drivers/i2c/chips/adm1021.c:81:
+#define TEMP_FROM_REG(val) (val > 127 ? val-256 : val)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'val' may be better as '(val)' to avoid precedence issues
#891: FILE: drivers/i2c/chips/adm1021.c:81:
+#define TEMP_FROM_REG(val) (val > 127 ? val-256 : val)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#892: FILE: drivers/i2c/chips/adm1021.c:82:
+#define TEMP_TO_REG(val)   (SENSORS_LIMIT((val < 0 ? val+256 : val),0,255))
                                                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#892: FILE: drivers/i2c/chips/adm1021.c:82:
+#define TEMP_TO_REG(val)   (SENSORS_LIMIT((val < 0 ? val+256 : val),0,255))
                                                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#892: FILE: drivers/i2c/chips/adm1021.c:82:
+#define TEMP_TO_REG(val)   (SENSORS_LIMIT((val < 0 ? val+256 : val),0,255))
                                                                      ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'val' - possible side-effects?
#892: FILE: drivers/i2c/chips/adm1021.c:82:
+#define TEMP_TO_REG(val)   (SENSORS_LIMIT((val < 0 ? val+256 : val),0,255))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'val' may be better as '(val)' to avoid precedence issues
#892: FILE: drivers/i2c/chips/adm1021.c:82:
+#define TEMP_TO_REG(val)   (SENSORS_LIMIT((val < 0 ? val+256 : val),0,255))

WARNING:TYPO_SPELLING: 'Eventhough' may be misspelled - perhaps 'Even though'?
#896: FILE: drivers/i2c/chips/adm1021.c:86:
+/* Note: Eventhough I left the low and high limits named os and hyst, 
          ^^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#896: FILE: drivers/i2c/chips/adm1021.c:86:
+/* Note: Eventhough I left the low and high limits named os and hyst, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#897: FILE: drivers/i2c/chips/adm1021.c:87:
+they don't quite work like a thermostat the way the LM75 does.  I.e., $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#897: FILE: drivers/i2c/chips/adm1021.c:87:
+/* Note: Eventhough I left the low and high limits named os and hyst, 
+they don't quite work like a thermostat the way the LM75 does.  I.e., 

WARNING:TYPO_SPELLING: 'actuall' may be misspelled - perhaps 'actually'?
#898: FILE: drivers/i2c/chips/adm1021.c:88:
+a lower temp than THYST actuall triggers an alarm instead of 
                         ^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#898: FILE: drivers/i2c/chips/adm1021.c:88:
+a lower temp than THYST actuall triggers an alarm instead of $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#899: FILE: drivers/i2c/chips/adm1021.c:89:
+clearing it.  Weird, ey?   --Phil  */

ERROR:CODE_INDENT: code indent should use tabs where possible
#916: FILE: drivers/i2c/chips/adm1021.c:106:
+        /* Special values for ADM1023 only */$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#917: FILE: drivers/i2c/chips/adm1021.c:107:
+^Iu8 remote_temp_prec, remote_temp_os_prec, remote_temp_hyst_prec, $

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#921: FILE: drivers/i2c/chips/adm1021.c:111:
+int __init sensors_adm1021_init(void);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#922: FILE: drivers/i2c/chips/adm1021.c:112:
+void __exit sensors_adm1021_exit(void);

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#949: FILE: drivers/i2c/chips/adm1021.c:139:
+static int read_only = 0;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#951: FILE: drivers/i2c/chips/adm1021.c:141:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#965: FILE: drivers/i2c/chips/adm1021.c:155:
+/* These files are created for each detected adm1021. This is just a template;
+   though at first sight, you might think we could use a statically

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#968: FILE: drivers/i2c/chips/adm1021.c:158:
+   when a new copy is allocated. */

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#992: FILE: drivers/i2c/chips/adm1021.c:182:
+static int __initdata adm1021_initialized = 0;

WARNING:MISPLACED_INIT: __initdata should be placed after adm1021_initialized
#992: FILE: drivers/i2c/chips/adm1021.c:182:
+static int __initdata adm1021_initialized = 0;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#995: FILE: drivers/i2c/chips/adm1021.c:185:
+/* I choose here for semi-static allocation. Complete dynamic
+   allocation could also be used; the code needed for this would probably

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#996: FILE: drivers/i2c/chips/adm1021.c:186:
+   take more memory than the datastructure takes now. */

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#997: FILE: drivers/i2c/chips/adm1021.c:187:
+static int adm1021_id = 0;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1015: FILE: drivers/i2c/chips/adm1021.c:205:
+	/* Make sure we aren't probing the ISA bus!! This is just a safety check
+	   at this moment; i2c_detect really won't call us. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1015: FILE: drivers/i2c/chips/adm1021.c:205:
+	   at this moment; i2c_detect really won't call us. */

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'adm1021_detect', this function's name, in a string
#1019: FILE: drivers/i2c/chips/adm1021.c:209:
+		    ("adm1021.o: adm1021_detect called for an ISA bus adapter?!?\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1028: FILE: drivers/i2c/chips/adm1021.c:218:
+	/* OK. For now, we presume we have a valid client. We now create the
+	   client structure, even though we cannot fill it completely yet.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1029: FILE: drivers/i2c/chips/adm1021.c:219:
+	   But it allows us to access adm1021_{read,write}_value. */

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1031: FILE: drivers/i2c/chips/adm1021.c:221:
+	if (!(new_client = kmalloc(sizeof(struct i2c_client) +

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*new_client)...) over kmalloc(sizeof(struct i2c_client)...)
#1031: FILE: drivers/i2c/chips/adm1021.c:221:
+	if (!(new_client = kmalloc(sizeof(struct i2c_client) +

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:SPACING: No space is necessary after a cast
#1038: FILE: drivers/i2c/chips/adm1021.c:228:
+	data = (struct adm1021_data *) (new_client + 1);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1048: FILE: drivers/i2c/chips/adm1021.c:238:
+		if (

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 18)
#1058: FILE: drivers/i2c/chips/adm1021.c:248:
+		if (i == 0x41)
+		  if ((adm1021_read_value (new_client, ADM1021_REG_DEV_ID) & 0x0F0) == 0x030)

WARNING:TABSTOP: Statements should start on a tabstop
#1059: FILE: drivers/i2c/chips/adm1021.c:249:
+		  if ((adm1021_read_value (new_client, ADM1021_REG_DEV_ID) & 0x0F0) == 0x030)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1059: FILE: drivers/i2c/chips/adm1021.c:249:
+		  if ((adm1021_read_value (new_client, ADM1021_REG_DEV_ID) & 0x0F0) == 0x030)

WARNING:TABSTOP: Statements should start on a tabstop
#1061: FILE: drivers/i2c/chips/adm1021.c:251:
+		  else

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 20)
#1072: FILE: drivers/i2c/chips/adm1021.c:262:
+		else
+		    if (adm1021_read_value

WARNING:TABSTOP: Statements should start on a tabstop
#1073: FILE: drivers/i2c/chips/adm1021.c:263:
+		    if (adm1021_read_value

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1108: FILE: drivers/i2c/chips/adm1021.c:298:
+		printk("adm1021.o: Internal error: unknown kind (%d)?!?",

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1123: FILE: drivers/i2c/chips/adm1021.c:313:
+	if ((err = i2c_attach_client(new_client)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1127: FILE: drivers/i2c/chips/adm1021.c:317:
+	if ((i = i2c_register_entry(new_client,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1128: FILE: drivers/i2c/chips/adm1021.c:318:
+	if ((i = i2c_register_entry(new_client,
+					type_name,

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1144: FILE: drivers/i2c/chips/adm1021.c:334:
+/* OK, this is not exactly good programming practice, usually. But it is
+   very code-efficient in this case. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1144: FILE: drivers/i2c/chips/adm1021.c:334:
+   very code-efficient in this case. */

WARNING:INDENTED_LABEL: labels should not be indented
#1146: FILE: drivers/i2c/chips/adm1021.c:336:
+      ERROR4:

WARNING:INDENTED_LABEL: labels should not be indented
#1148: FILE: drivers/i2c/chips/adm1021.c:338:
+      ERROR3:

WARNING:INDENTED_LABEL: labels should not be indented
#1149: FILE: drivers/i2c/chips/adm1021.c:339:
+      ERROR1:

WARNING:INDENTED_LABEL: labels should not be indented
#1151: FILE: drivers/i2c/chips/adm1021.c:341:
+      ERROR0:

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1174: FILE: drivers/i2c/chips/adm1021.c:364:
+{
+

CHECK:SPACING: No space is necessary after a cast
#1177: FILE: drivers/i2c/chips/adm1021.c:367:
+	i2c_deregister_entry(((struct adm1021_data *) (client->data))->

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1180: FILE: drivers/i2c/chips/adm1021.c:370:
+	if ((err = i2c_detach_client(client))) {

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1190: FILE: drivers/i2c/chips/adm1021.c:380:
+
+}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1192: FILE: drivers/i2c/chips/adm1021.c:382:
+
+

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'jiffies < data->last_updated'
#1233: FILE: drivers/i2c/chips/adm1021.c:423:
+	if ((jiffies - data->last_updated > HZ + HZ / 2) ||
+	    (jiffies < data->last_updated) || !data->valid) {

WARNING:JIFFIES_COMPARISON: Comparing jiffies is almost always wrong; prefer time_after, time_before and friends
#1234: FILE: drivers/i2c/chips/adm1021.c:424:
+	    (jiffies < data->last_updated) || !data->valid) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1235: FILE: drivers/i2c/chips/adm1021.c:425:
+	    (jiffies < data->last_updated) || !data->valid) {
+

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1237: FILE: drivers/i2c/chips/adm1021.c:427:
+		printk("Starting adm1021 update\n");

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 18)
#1257: FILE: drivers/i2c/chips/adm1021.c:447:
+		if (data->type == adm1023) {
+		  data->remote_temp_prec =

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1276: FILE: drivers/i2c/chips/adm1021.c:466:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#1281: FILE: drivers/i2c/chips/adm1021.c:471:
+	struct adm1021_data *data = client->data;
+	if (operation == SENSORS_PROC_REAL_INFO)

CHECK:BRACES: braces {} should be used on all arms of this statement
#1281: FILE: drivers/i2c/chips/adm1021.c:471:
+	if (operation == SENSORS_PROC_REAL_INFO)
[...]
+	else if (operation == SENSORS_PROC_REAL_READ) {
[...]
+	} else if (operation == SENSORS_PROC_REAL_WRITE) {
[...]

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#1306: FILE: drivers/i2c/chips/adm1021.c:496:
+int prec=0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1306: FILE: drivers/i2c/chips/adm1021.c:496:
+int prec=0;
         ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1308: FILE: drivers/i2c/chips/adm1021.c:498:
+	struct adm1021_data *data = client->data;
+	if (operation == SENSORS_PROC_REAL_INFO)

CHECK:BRACES: braces {} should be used on all arms of this statement
#1308: FILE: drivers/i2c/chips/adm1021.c:498:
+	if (operation == SENSORS_PROC_REAL_INFO)
[...]
+                 else { *nrels_mag = 0; }
[...]
+	else if (operation == SENSORS_PROC_REAL_READ) {
[...]
+	} else if (operation == SENSORS_PROC_REAL_WRITE) {
[...]

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1309: FILE: drivers/i2c/chips/adm1021.c:499:
+		if (data->type == adm1023) { *nrels_mag = 3; }

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:CODE_INDENT: code indent should use tabs where possible
#1310: FILE: drivers/i2c/chips/adm1021.c:500:
+                 else { *nrels_mag = 0; }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1310: FILE: drivers/i2c/chips/adm1021.c:500:
+                 else { *nrels_mag = 0; }$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1310: FILE: drivers/i2c/chips/adm1021.c:500:
+                 else { *nrels_mag = 0; }

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 18)
#1316: FILE: drivers/i2c/chips/adm1021.c:506:
+		if (data->type == adm1023) {
+		  results[0]=results[0]*1000 + 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1317: FILE: drivers/i2c/chips/adm1021.c:507:
+^I^I  results[0]=results[0]*1000 + $

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1317: FILE: drivers/i2c/chips/adm1021.c:507:
+		  results[0]=results[0]*1000 + 
 		            ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1317: FILE: drivers/i2c/chips/adm1021.c:507:
+		  results[0]=results[0]*1000 + 
 		                       ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1319: FILE: drivers/i2c/chips/adm1021.c:509:
+^I^I  results[1]=results[1]*1000 + $

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1319: FILE: drivers/i2c/chips/adm1021.c:509:
+		  results[1]=results[1]*1000 + 
 		            ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1319: FILE: drivers/i2c/chips/adm1021.c:509:
+		  results[1]=results[1]*1000 + 
 		                       ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1321: FILE: drivers/i2c/chips/adm1021.c:511:
+^I^I  results[2]=(TEMP_FROM_REG(data->remote_temp_offset)*1000) + $

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1321: FILE: drivers/i2c/chips/adm1021.c:511:
+		  results[2]=(TEMP_FROM_REG(data->remote_temp_offset)*1000) + 
 		            ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1321: FILE: drivers/i2c/chips/adm1021.c:511:
+		  results[2]=(TEMP_FROM_REG(data->remote_temp_offset)*1000) + 
 		                                                     ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1322: FILE: drivers/i2c/chips/adm1021.c:512:
+                   ((data->remote_temp_offset_prec >> 5) * 125);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1322: FILE: drivers/i2c/chips/adm1021.c:512:
+                   ((data->remote_temp_offset_prec >> 5) * 125);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1323: FILE: drivers/i2c/chips/adm1021.c:513:
+^I^I  results[3]=TEMP_FROM_REG(data->remote_temp)*1000 + $

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1323: FILE: drivers/i2c/chips/adm1021.c:513:
+		  results[3]=TEMP_FROM_REG(data->remote_temp)*1000 + 
 		            ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1323: FILE: drivers/i2c/chips/adm1021.c:513:
+		  results[3]=TEMP_FROM_REG(data->remote_temp)*1000 + 
 		                                             ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1325: FILE: drivers/i2c/chips/adm1021.c:515:
+ ^I^I  *nrels_mag = 4;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1325: FILE: drivers/i2c/chips/adm1021.c:515:
+ ^I^I  *nrels_mag = 4;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1325: FILE: drivers/i2c/chips/adm1021.c:515:
+ ^I^I  *nrels_mag = 4;$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 18)
#1326: FILE: drivers/i2c/chips/adm1021.c:516:
+		} else {
+ 		  *nrels_mag = 3;

ERROR:CODE_INDENT: code indent should use tabs where possible
#1327: FILE: drivers/i2c/chips/adm1021.c:517:
+ ^I^I  *nrels_mag = 3;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1327: FILE: drivers/i2c/chips/adm1021.c:517:
+ ^I^I  *nrels_mag = 3;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1327: FILE: drivers/i2c/chips/adm1021.c:517:
+ ^I^I  *nrels_mag = 3;$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 26)
#1331: FILE: drivers/i2c/chips/adm1021.c:521:
+			if (data->type == adm1023) {
+			  prec=((results[0]-((results[0]/1000)*1000))/125)<<5;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1332: FILE: drivers/i2c/chips/adm1021.c:522:
+			  prec=((results[0]-((results[0]/1000)*1000))/125)<<5;
 			      ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1332: FILE: drivers/i2c/chips/adm1021.c:522:
+			  prec=((results[0]-((results[0]/1000)*1000))/125)<<5;
 			                   ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1332: FILE: drivers/i2c/chips/adm1021.c:522:
+			  prec=((results[0]-((results[0]/1000)*1000))/125)<<5;
 			                                ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1332: FILE: drivers/i2c/chips/adm1021.c:522:
+			  prec=((results[0]-((results[0]/1000)*1000))/125)<<5;
 			                                      ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1332: FILE: drivers/i2c/chips/adm1021.c:522:
+			  prec=((results[0]-((results[0]/1000)*1000))/125)<<5;
 			                                             ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1332: FILE: drivers/i2c/chips/adm1021.c:522:
+			  prec=((results[0]-((results[0]/1000)*1000))/125)<<5;
 			                                                  ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1334: FILE: drivers/i2c/chips/adm1021.c:524:
+                                            ADM1021_REG_REM_TOS_PREC,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1334: FILE: drivers/i2c/chips/adm1021.c:524:
+			  adm1021_write_value(client,
+                                            ADM1021_REG_REM_TOS_PREC,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1334: FILE: drivers/i2c/chips/adm1021.c:524:
+                                            ADM1021_REG_REM_TOS_PREC,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1335: FILE: drivers/i2c/chips/adm1021.c:525:
+                                            prec);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1335: FILE: drivers/i2c/chips/adm1021.c:525:
+                                            prec);$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1336: FILE: drivers/i2c/chips/adm1021.c:526:
+			  results[0]=results[0]/1000;
 			            ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1336: FILE: drivers/i2c/chips/adm1021.c:526:
+			  results[0]=results[0]/1000;
 			                       ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1337: FILE: drivers/i2c/chips/adm1021.c:527:
+			  data->remote_temp_os_prec=prec;
 			                           ^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 26)
#1345: FILE: drivers/i2c/chips/adm1021.c:535:
+			if (data->type == adm1023) {
+			  prec=((results[1]-((results[1]/1000)*1000))/125)<<5;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1346: FILE: drivers/i2c/chips/adm1021.c:536:
+			  prec=((results[1]-((results[1]/1000)*1000))/125)<<5;
 			      ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1346: FILE: drivers/i2c/chips/adm1021.c:536:
+			  prec=((results[1]-((results[1]/1000)*1000))/125)<<5;
 			                   ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1346: FILE: drivers/i2c/chips/adm1021.c:536:
+			  prec=((results[1]-((results[1]/1000)*1000))/125)<<5;
 			                                ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1346: FILE: drivers/i2c/chips/adm1021.c:536:
+			  prec=((results[1]-((results[1]/1000)*1000))/125)<<5;
 			                                      ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1346: FILE: drivers/i2c/chips/adm1021.c:536:
+			  prec=((results[1]-((results[1]/1000)*1000))/125)<<5;
 			                                             ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1346: FILE: drivers/i2c/chips/adm1021.c:536:
+			  prec=((results[1]-((results[1]/1000)*1000))/125)<<5;
 			                                                  ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1348: FILE: drivers/i2c/chips/adm1021.c:538:
+                                            ADM1021_REG_REM_THYST_PREC,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1348: FILE: drivers/i2c/chips/adm1021.c:538:
+			  adm1021_write_value(client,
+                                            ADM1021_REG_REM_THYST_PREC,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1348: FILE: drivers/i2c/chips/adm1021.c:538:
+                                            ADM1021_REG_REM_THYST_PREC,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1349: FILE: drivers/i2c/chips/adm1021.c:539:
+                                            prec);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1349: FILE: drivers/i2c/chips/adm1021.c:539:
+                                            prec);$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1350: FILE: drivers/i2c/chips/adm1021.c:540:
+			  results[1]=results[1]/1000;
 			            ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1350: FILE: drivers/i2c/chips/adm1021.c:540:
+			  results[1]=results[1]/1000;
 			                       ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1351: FILE: drivers/i2c/chips/adm1021.c:541:
+			  data->remote_temp_hyst_prec=prec;
 			                             ^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 26)
#1359: FILE: drivers/i2c/chips/adm1021.c:549:
+			if (data->type == adm1023) {
+			  prec=((results[2]-((results[2]/1000)*1000))/125)<<5;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1360: FILE: drivers/i2c/chips/adm1021.c:550:
+			  prec=((results[2]-((results[2]/1000)*1000))/125)<<5;
 			      ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1360: FILE: drivers/i2c/chips/adm1021.c:550:
+			  prec=((results[2]-((results[2]/1000)*1000))/125)<<5;
 			                   ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1360: FILE: drivers/i2c/chips/adm1021.c:550:
+			  prec=((results[2]-((results[2]/1000)*1000))/125)<<5;
 			                                ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1360: FILE: drivers/i2c/chips/adm1021.c:550:
+			  prec=((results[2]-((results[2]/1000)*1000))/125)<<5;
 			                                      ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1360: FILE: drivers/i2c/chips/adm1021.c:550:
+			  prec=((results[2]-((results[2]/1000)*1000))/125)<<5;
 			                                             ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1360: FILE: drivers/i2c/chips/adm1021.c:550:
+			  prec=((results[2]-((results[2]/1000)*1000))/125)<<5;
 			                                                  ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1362: FILE: drivers/i2c/chips/adm1021.c:552:
+                                            ADM1021_REG_REM_OFFSET_PREC,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1362: FILE: drivers/i2c/chips/adm1021.c:552:
+			  adm1021_write_value(client,
+                                            ADM1021_REG_REM_OFFSET_PREC,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1362: FILE: drivers/i2c/chips/adm1021.c:552:
+                                            ADM1021_REG_REM_OFFSET_PREC,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1363: FILE: drivers/i2c/chips/adm1021.c:553:
+                                            prec);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1363: FILE: drivers/i2c/chips/adm1021.c:553:
+                                            prec);$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1364: FILE: drivers/i2c/chips/adm1021.c:554:
+			  results[2]=results[2]/1000;
 			            ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1364: FILE: drivers/i2c/chips/adm1021.c:554:
+			  results[2]=results[2]/1000;
 			                       ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1365: FILE: drivers/i2c/chips/adm1021.c:555:
+			  data->remote_temp_offset_prec=prec;
 			                               ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1366: FILE: drivers/i2c/chips/adm1021.c:556:
+			  data->remote_temp_offset=results[2];
 			                          ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1368: FILE: drivers/i2c/chips/adm1021.c:558:
+                                            ADM1021_REG_REM_OFFSET,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1368: FILE: drivers/i2c/chips/adm1021.c:558:
+			  adm1021_write_value(client,
+                                            ADM1021_REG_REM_OFFSET,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1368: FILE: drivers/i2c/chips/adm1021.c:558:
+                                            ADM1021_REG_REM_OFFSET,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1369: FILE: drivers/i2c/chips/adm1021.c:559:
+                                            data->remote_temp_offset);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1369: FILE: drivers/i2c/chips/adm1021.c:559:
+                                            data->remote_temp_offset);$

WARNING:LINE_SPACING: Missing a blank line after declarations
#1379: FILE: drivers/i2c/chips/adm1021.c:569:
+	struct adm1021_data *data = client->data;
+	if (operation == SENSORS_PROC_REAL_INFO)

CHECK:BRACES: braces {} should be used on all arms of this statement
#1379: FILE: drivers/i2c/chips/adm1021.c:569:
+	if (operation == SENSORS_PROC_REAL_INFO)
[...]
+	else if (operation == SENSORS_PROC_REAL_READ) {
[...]
+	} else if (operation == SENSORS_PROC_REAL_WRITE) {
[...]

WARNING:LINE_SPACING: Missing a blank line after declarations
#1394: FILE: drivers/i2c/chips/adm1021.c:584:
+	struct adm1021_data *data = client->data;
+	if (operation == SENSORS_PROC_REAL_INFO)

CHECK:BRACES: braces {} should be used on all arms of this statement
#1394: FILE: drivers/i2c/chips/adm1021.c:584:
+	if (operation == SENSORS_PROC_REAL_INFO)
[...]
+	else if (operation == SENSORS_PROC_REAL_READ) {
[...]
+	} else if (operation == SENSORS_PROC_REAL_WRITE) {
[...]

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1409: FILE: drivers/i2c/chips/adm1021.c:599:
+	printk("adm1021.o version %s (%s)\n", LM_VERSION, LM_DATE);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1411: FILE: drivers/i2c/chips/adm1021.c:601:
+	if ((res = i2c_add_driver(&adm1021_driver))) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1431: FILE: drivers/i2c/chips/adm1021.c:621:
+		if ((res = i2c_del_driver(&adm1021_driver))) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1447: FILE: drivers/i2c/chips/adm1021.c:637:
+    ("Frodo Looijaard <frodol@dds.nl> and Philip Edelbrock <phil@netroedge.com>");$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1460: FILE: drivers/i2c/chips/lm75.c:1:
+/*

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1461: FILE: drivers/i2c/chips/lm75.c:2:
+/*
+    lm75.c - Part of lm_sensors, Linux kernel modules for hardware

ERROR:CODE_INDENT: code indent should use tabs where possible
#1462: FILE: drivers/i2c/chips/lm75.c:3:
+             monitoring$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1476: FILE: drivers/i2c/chips/lm75.c:17:
+    along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1477: FILE: drivers/i2c/chips/lm75.c:18:
+    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1507: FILE: drivers/i2c/chips/lm75.c:48:
+/* Conversions. Rounding and limit checking is only done on the TO_REG
+   variants. Note that you should be a bit careful with which arguments

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1509: FILE: drivers/i2c/chips/lm75.c:50:
+   Fixing this is just not worth it. */

ERROR:SPACING: spaces required around that '?' (ctx:VxO)
#1510: FILE: drivers/i2c/chips/lm75.c:51:
+#define TEMP_FROM_REG(val) ((((val & 0x7fff) >> 7) * 5) | ((val & 0x8000)?-256:0))
                                                                          ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#1510: FILE: drivers/i2c/chips/lm75.c:51:
+#define TEMP_FROM_REG(val) ((((val & 0x7fff) >> 7) * 5) | ((val & 0x8000)?-256:0))
                                                                           ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#1510: FILE: drivers/i2c/chips/lm75.c:51:
+#define TEMP_FROM_REG(val) ((((val & 0x7fff) >> 7) * 5) | ((val & 0x8000)?-256:0))
                                                                               ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'val' - possible side-effects?
#1510: FILE: drivers/i2c/chips/lm75.c:51:
+#define TEMP_FROM_REG(val) ((((val & 0x7fff) >> 7) * 5) | ((val & 0x8000)?-256:0))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'val' may be better as '(val)' to avoid precedence issues
#1510: FILE: drivers/i2c/chips/lm75.c:51:
+#define TEMP_FROM_REG(val) ((((val & 0x7fff) >> 7) * 5) | ((val & 0x8000)?-256:0))

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#1511: FILE: drivers/i2c/chips/lm75.c:52:
+#define TEMP_TO_REG(val)   (SENSORS_LIMIT((val<0?(0x200+((val)/5))<<7:(((val) + 2) / 5) << 7),0,0xffff))

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1511: FILE: drivers/i2c/chips/lm75.c:52:
+#define TEMP_TO_REG(val)   (SENSORS_LIMIT((val<0?(0x200+((val)/5))<<7:(((val) + 2) / 5) << 7),0,0xffff))
                                               ^

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#1511: FILE: drivers/i2c/chips/lm75.c:52:
+#define TEMP_TO_REG(val)   (SENSORS_LIMIT((val<0?(0x200+((val)/5))<<7:(((val) + 2) / 5) << 7),0,0xffff))
                                                 ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1511: FILE: drivers/i2c/chips/lm75.c:52:
+#define TEMP_TO_REG(val)   (SENSORS_LIMIT((val<0?(0x200+((val)/5))<<7:(((val) + 2) / 5) << 7),0,0xffff))
                                                        ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1511: FILE: drivers/i2c/chips/lm75.c:52:
+#define TEMP_TO_REG(val)   (SENSORS_LIMIT((val<0?(0x200+((val)/5))<<7:(((val) + 2) / 5) << 7),0,0xffff))
                                                               ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1511: FILE: drivers/i2c/chips/lm75.c:52:
+#define TEMP_TO_REG(val)   (SENSORS_LIMIT((val<0?(0x200+((val)/5))<<7:(((val) + 2) / 5) << 7),0,0xffff))
                                                                   ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#1511: FILE: drivers/i2c/chips/lm75.c:52:
+#define TEMP_TO_REG(val)   (SENSORS_LIMIT((val<0?(0x200+((val)/5))<<7:(((val) + 2) / 5) << 7),0,0xffff))
                                                                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1511: FILE: drivers/i2c/chips/lm75.c:52:
+#define TEMP_TO_REG(val)   (SENSORS_LIMIT((val<0?(0x200+((val)/5))<<7:(((val) + 2) / 5) << 7),0,0xffff))
                                                                                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1511: FILE: drivers/i2c/chips/lm75.c:52:
+#define TEMP_TO_REG(val)   (SENSORS_LIMIT((val<0?(0x200+((val)/5))<<7:(((val) + 2) / 5) << 7),0,0xffff))
                                                                                                ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'val' - possible side-effects?
#1511: FILE: drivers/i2c/chips/lm75.c:52:
+#define TEMP_TO_REG(val)   (SENSORS_LIMIT((val<0?(0x200+((val)/5))<<7:(((val) + 2) / 5) << 7),0,0xffff))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'val' may be better as '(val)' to avoid precedence issues
#1511: FILE: drivers/i2c/chips/lm75.c:52:
+#define TEMP_TO_REG(val)   (SENSORS_LIMIT((val<0?(0x200+((val)/5))<<7:(((val) + 2) / 5) << 7),0,0xffff))

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1528: FILE: drivers/i2c/chips/lm75.c:69:
+int __init sensors_lm75_init(void);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1529: FILE: drivers/i2c/chips/lm75.c:70:
+void __exit sensors_lm75_exit(void);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1548: FILE: drivers/i2c/chips/lm75.c:89:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1562: FILE: drivers/i2c/chips/lm75.c:103:
+/* These files are created for each detected LM75. This is just a template;
+   though at first sight, you might think we could use a statically

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1565: FILE: drivers/i2c/chips/lm75.c:106:
+   when a new copy is allocated. */

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#1573: FILE: drivers/i2c/chips/lm75.c:114:
+static int __initdata lm75_initialized = 0;

WARNING:MISPLACED_INIT: __initdata should be placed after lm75_initialized
#1573: FILE: drivers/i2c/chips/lm75.c:114:
+static int __initdata lm75_initialized = 0;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#1575: FILE: drivers/i2c/chips/lm75.c:116:
+static int lm75_id = 0;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1593: FILE: drivers/i2c/chips/lm75.c:134:
+	/* Make sure we aren't probing the ISA bus!! This is just a safety check
+	   at this moment; i2c_detect really won't call us. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1593: FILE: drivers/i2c/chips/lm75.c:134:
+	   at this moment; i2c_detect really won't call us. */

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'lm75_detect', this function's name, in a string
#1597: FILE: drivers/i2c/chips/lm75.c:138:
+		    ("lm75.o: lm75_detect called for an ISA bus adapter?!?\n");

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 20)
#1602: FILE: drivers/i2c/chips/lm75.c:143:
+	if (!i2c_check_functionality(adapter, I2C_FUNC_SMBUS_BYTE_DATA |
[...]
+		    goto ERROR0;

WARNING:TABSTOP: Statements should start on a tabstop
#1604: FILE: drivers/i2c/chips/lm75.c:145:
+		    goto ERROR0;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1607: FILE: drivers/i2c/chips/lm75.c:148:
+	/* OK. For now, we presume we have a valid client. We now create the
+	   client structure, even though we cannot fill it completely yet.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1608: FILE: drivers/i2c/chips/lm75.c:149:
+	   But it allows us to access lm75_{read,write}_value. */

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1609: FILE: drivers/i2c/chips/lm75.c:150:
+	if (!(new_client = kmalloc(sizeof(struct i2c_client) +

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*new_client)...) over kmalloc(sizeof(struct i2c_client)...)
#1609: FILE: drivers/i2c/chips/lm75.c:150:
+	if (!(new_client = kmalloc(sizeof(struct i2c_client) +

CHECK:SPACING: No space is necessary after a cast
#1616: FILE: drivers/i2c/chips/lm75.c:157:
+	data = (struct lm75_data *) (new_client + 1);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1630: FILE: drivers/i2c/chips/lm75.c:171:
+			if (

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1633: FILE: drivers/i2c/chips/lm75.c:174:
+			     (new_client, i * 8 + 1) != conf)
+			    ||

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1636: FILE: drivers/i2c/chips/lm75.c:177:
+			     (new_client, i * 8 + 2) != hyst)
+			    ||

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1651: FILE: drivers/i2c/chips/lm75.c:192:
+		printk("lm75.o: Internal error: unknown kind (%d)?!?",

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1665: FILE: drivers/i2c/chips/lm75.c:206:
+	if ((err = i2c_attach_client(new_client)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1669: FILE: drivers/i2c/chips/lm75.c:210:
+	if ((i = i2c_register_entry(new_client, type_name,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1670: FILE: drivers/i2c/chips/lm75.c:211:
+	if ((i = i2c_register_entry(new_client, type_name,
+					lm75_dir_table_template,

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1681: FILE: drivers/i2c/chips/lm75.c:222:
+/* OK, this is not exactly good programming practice, usually. But it is
+   very code-efficient in this case. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1681: FILE: drivers/i2c/chips/lm75.c:222:
+   very code-efficient in this case. */

WARNING:INDENTED_LABEL: labels should not be indented
#1683: FILE: drivers/i2c/chips/lm75.c:224:
+      ERROR4:

WARNING:INDENTED_LABEL: labels should not be indented
#1685: FILE: drivers/i2c/chips/lm75.c:226:
+      ERROR3:

WARNING:INDENTED_LABEL: labels should not be indented
#1686: FILE: drivers/i2c/chips/lm75.c:227:
+      ERROR1:

WARNING:INDENTED_LABEL: labels should not be indented
#1688: FILE: drivers/i2c/chips/lm75.c:229:
+      ERROR0:

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1701: FILE: drivers/i2c/chips/lm75.c:242:
+
+

CHECK:SPACING: No space is necessary after a cast
#1702: FILE: drivers/i2c/chips/lm75.c:243:
+	i2c_deregister_entry(((struct lm75_data *) (client->data))->

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1705: FILE: drivers/i2c/chips/lm75.c:246:
+	if ((err = i2c_detach_client(client))) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1716: FILE: drivers/i2c/chips/lm75.c:257:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1745: FILE: drivers/i2c/chips/lm75.c:286:
+/* All registers are word-sized, except for the configuration register.
+   LM75 uses a high-byte first convention, which is exactly opposite to

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1746: FILE: drivers/i2c/chips/lm75.c:287:
+   the usual practice. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1756: FILE: drivers/i2c/chips/lm75.c:297:
+/* All registers are word-sized, except for the configuration register.
+   LM75 uses a high-byte first convention, which is exactly opposite to

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1757: FILE: drivers/i2c/chips/lm75.c:298:
+   the usual practice. */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'jiffies < data->last_updated'
#1783: FILE: drivers/i2c/chips/lm75.c:324:
+	if ((jiffies - data->last_updated > HZ + HZ / 2) ||
+	    (jiffies < data->last_updated) || !data->valid) {

WARNING:JIFFIES_COMPARISON: Comparing jiffies is almost always wrong; prefer time_after, time_before and friends
#1784: FILE: drivers/i2c/chips/lm75.c:325:
+	    (jiffies < data->last_updated) || !data->valid) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1785: FILE: drivers/i2c/chips/lm75.c:326:
+	    (jiffies < data->last_updated) || !data->valid) {
+

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1787: FILE: drivers/i2c/chips/lm75.c:328:
+		printk("Starting lm75 update\n");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1801: FILE: drivers/i2c/chips/lm75.c:342:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#1806: FILE: drivers/i2c/chips/lm75.c:347:
+	struct lm75_data *data = client->data;
+	if (operation == SENSORS_PROC_REAL_INFO)

CHECK:BRACES: braces {} should be used on all arms of this statement
#1806: FILE: drivers/i2c/chips/lm75.c:347:
+	if (operation == SENSORS_PROC_REAL_INFO)
[...]
+	else if (operation == SENSORS_PROC_REAL_READ) {
[...]
+	} else if (operation == SENSORS_PROC_REAL_WRITE) {
[...]

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1832: FILE: drivers/i2c/chips/lm75.c:373:
+	printk("lm75.o version %s (%s)\n", LM_VERSION, LM_DATE);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1834: FILE: drivers/i2c/chips/lm75.c:375:
+	if ((res = i2c_add_driver(&lm75_driver))) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1854: FILE: drivers/i2c/chips/lm75.c:395:
+		if ((res = i2c_del_driver(&lm75_driver))) {

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1879: FILE: drivers/i2c/chips/sensors.c:1:
+/*

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1880: FILE: drivers/i2c/chips/sensors.c:2:
+/*
+    sensors.c - Part of lm_sensors, Linux kernel modules for hardware

ERROR:CODE_INDENT: code indent should use tabs where possible
#1881: FILE: drivers/i2c/chips/sensors.c:3:
+                monitoring$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1882: FILE: drivers/i2c/chips/sensors.c:4:
+    Copyright (c) 1998, 1999  Frodo Looijaard <frodol@dds.nl> $

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1895: FILE: drivers/i2c/chips/sensors.c:17:
+    along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1896: FILE: drivers/i2c/chips/sensors.c:18:
+    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1904: FILE: drivers/i2c/chips/sensors.c:26:
+extern int sensors_lm75_init(void);

WARNING:CVS_KEYWORD: CVS style keyword markers, these will _not_ be updated
#1923: FILE: drivers/i2c/i2c-core.c:24:
+/* $Id: i2c-core.c,v 1.89 2002/11/03 16:47:16 mds Exp $ */

Since linux moved to git, the CVS markers are no longer used.
So, CVS style keywords ($Id$, $Revision$, $Log$) should not be
added.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1933: FILE: drivers/i2c/i2c-core.c:81:
+void __exit i2cproc_exit(void);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1942: FILE: drivers/i2c/i2c-core.c:626:
+	int i,j,k,order_nr,len=0;
 	     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1942: FILE: drivers/i2c/i2c-core.c:626:
+	int i,j,k,order_nr,len=0;
 	       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1942: FILE: drivers/i2c/i2c-core.c:626:
+	int i,j,k,order_nr,len=0;
 	         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1942: FILE: drivers/i2c/i2c-core.c:626:
+	int i,j,k,order_nr,len=0;
 	                  ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1942: FILE: drivers/i2c/i2c-core.c:626:
+	int i,j,k,order_nr,len=0;
 	                      ^

WARNING:CVS_KEYWORD: CVS style keyword markers, these will _not_ be updated
#1983: FILE: drivers/i2c/i2c-dev.c:31:
+/* $Id: i2c-dev.c,v 1.48 2002/10/01 14:10:04 ac9410 Exp $ */

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1992: FILE: drivers/i2c/i2c-dev.c:54:
+void __exit i2c_dev_exit(void);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#2047: FILE: drivers/i2c/i2c-proc.c:43:
+int __init sensors_init(void);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#2048: FILE: drivers/i2c/i2c-proc.c:44:
+void __exit i2c_proc_exit(void);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2075: FILE: drivers/i2c/i2c-proc.c:218:
+/* Monitor access for /proc/sys/dev/sensors; make unloading i2c-proc.o $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2076: FILE: drivers/i2c/i2c-proc.c:219:
+/* Monitor access for /proc/sys/dev/sensors; make unloading i2c-proc.o 
+   impossible if some process still uses it or some file in it */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2076: FILE: drivers/i2c/i2c-proc.c:219:
+   impossible if some process still uses it or some file in it */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2086: FILE: drivers/i2c/i2c-proc.c:229:
+/* Monitor access for /proc/sys/dev/sensors/ directories; make unloading
+   the corresponding module impossible if some process still uses it or

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2087: FILE: drivers/i2c/i2c-proc.c:230:
+   some file in it */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2095: FILE: drivers/i2c/i2c-proc.c:238:
+		printk(KERN_ERR "i2c-proc.o: Warning: inode NULL in fill_inode()\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'i2c_inodes[i] == inode->i_ino'
#2101: FILE: drivers/i2c/i2c-proc.c:244:
+		if (i2c_clients[i]
+		    && (i2c_inodes[i] == inode->i_ino)) break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#2101: FILE: drivers/i2c/i2c-proc.c:244:
+		if (i2c_clients[i]
+		    && (i2c_inodes[i] == inode->i_ino)) break;

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2102: FILE: drivers/i2c/i2c-proc.c:245:
+		if (i2c_clients[i]
+		    && (i2c_inodes[i] == inode->i_ino)) break;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2153: FILE: include/linux/i2c-proc.h:351:
+#define SENSORS_INSMOD_8(chip1,chip2,chip3,chip4,chip5,chip6,chip7,chip8) \
                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2153: FILE: include/linux/i2c-proc.h:351:
+#define SENSORS_INSMOD_8(chip1,chip2,chip3,chip4,chip5,chip6,chip7,chip8) \
                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2153: FILE: include/linux/i2c-proc.h:351:
+#define SENSORS_INSMOD_8(chip1,chip2,chip3,chip4,chip5,chip6,chip7,chip8) \
                                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2153: FILE: include/linux/i2c-proc.h:351:
+#define SENSORS_INSMOD_8(chip1,chip2,chip3,chip4,chip5,chip6,chip7,chip8) \
                                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2153: FILE: include/linux/i2c-proc.h:351:
+#define SENSORS_INSMOD_8(chip1,chip2,chip3,chip4,chip5,chip6,chip7,chip8) \
                                                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2153: FILE: include/linux/i2c-proc.h:351:
+#define SENSORS_INSMOD_8(chip1,chip2,chip3,chip4,chip5,chip6,chip7,chip8) \
                                                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2153: FILE: include/linux/i2c-proc.h:351:
+#define SENSORS_INSMOD_8(chip1,chip2,chip3,chip4,chip5,chip6,chip7,chip8) \
                                                                   ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'chip1' - possible side-effects?
#2153: FILE: include/linux/i2c-proc.h:351:
+#define SENSORS_INSMOD_8(chip1,chip2,chip3,chip4,chip5,chip6,chip7,chip8) \
+  enum chips { any_chip, chip1, chip2, chip3, chip4, chip5, chip6, chip7, chip8 }; \
+  SENSORS_MODULE_PARM(force, \
+                      "List of adapter,address pairs to boldly assume " \
+                      "to be present"); \
+  SENSORS_MODULE_PARM_FORCE(chip1); \
+  SENSORS_MODULE_PARM_FORCE(chip2); \
+  SENSORS_MODULE_PARM_FORCE(chip3); \
+  SENSORS_MODULE_PARM_FORCE(chip4); \
+  SENSORS_MODULE_PARM_FORCE(chip5); \
+  SENSORS_MODULE_PARM_FORCE(chip6); \
+  SENSORS_MODULE_PARM_FORCE(chip7); \
+  SENSORS_MODULE_PARM_FORCE(chip8); \
+  static struct i2c_force_data forces[] = {{force,any_chip}, \
+                                                 {force_ ## chip1,chip1}, \
+                                                 {force_ ## chip2,chip2}, \
+                                                 {force_ ## chip3,chip3}, \
+                                                 {force_ ## chip4,chip4}, \
+                                                 {force_ ## chip5,chip5}, \
+                                                 {force_ ## chip6,chip6}, \
+                                                 {force_ ## chip7,chip7}, \
+                                                 {force_ ## chip8,chip8}, \
+                                                 {NULL}}; \
+  SENSORS_INSMOD

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'chip2' - possible side-effects?
#2153: FILE: include/linux/i2c-proc.h:351:
+#define SENSORS_INSMOD_8(chip1,chip2,chip3,chip4,chip5,chip6,chip7,chip8) \
+  enum chips { any_chip, chip1, chip2, chip3, chip4, chip5, chip6, chip7, chip8 }; \
+  SENSORS_MODULE_PARM(force, \
+                      "List of adapter,address pairs to boldly assume " \
+                      "to be present"); \
+  SENSORS_MODULE_PARM_FORCE(chip1); \
+  SENSORS_MODULE_PARM_FORCE(chip2); \
+  SENSORS_MODULE_PARM_FORCE(chip3); \
+  SENSORS_MODULE_PARM_FORCE(chip4); \
+  SENSORS_MODULE_PARM_FORCE(chip5); \
+  SENSORS_MODULE_PARM_FORCE(chip6); \
+  SENSORS_MODULE_PARM_FORCE(chip7); \
+  SENSORS_MODULE_PARM_FORCE(chip8); \
+  static struct i2c_force_data forces[] = {{force,any_chip}, \
+                                                 {force_ ## chip1,chip1}, \
+                                                 {force_ ## chip2,chip2}, \
+                                                 {force_ ## chip3,chip3}, \
+                                                 {force_ ## chip4,chip4}, \
+                                                 {force_ ## chip5,chip5}, \
+                                                 {force_ ## chip6,chip6}, \
+                                                 {force_ ## chip7,chip7}, \
+                                                 {force_ ## chip8,chip8}, \
+                                                 {NULL}}; \
+  SENSORS_INSMOD

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'chip3' - possible side-effects?
#2153: FILE: include/linux/i2c-proc.h:351:
+#define SENSORS_INSMOD_8(chip1,chip2,chip3,chip4,chip5,chip6,chip7,chip8) \
+  enum chips { any_chip, chip1, chip2, chip3, chip4, chip5, chip6, chip7, chip8 }; \
+  SENSORS_MODULE_PARM(force, \
+                      "List of adapter,address pairs to boldly assume " \
+                      "to be present"); \
+  SENSORS_MODULE_PARM_FORCE(chip1); \
+  SENSORS_MODULE_PARM_FORCE(chip2); \
+  SENSORS_MODULE_PARM_FORCE(chip3); \
+  SENSORS_MODULE_PARM_FORCE(chip4); \
+  SENSORS_MODULE_PARM_FORCE(chip5); \
+  SENSORS_MODULE_PARM_FORCE(chip6); \
+  SENSORS_MODULE_PARM_FORCE(chip7); \
+  SENSORS_MODULE_PARM_FORCE(chip8); \
+  static struct i2c_force_data forces[] = {{force,any_chip}, \
+                                                 {force_ ## chip1,chip1}, \
+                                                 {force_ ## chip2,chip2}, \
+                                                 {force_ ## chip3,chip3}, \
+                                                 {force_ ## chip4,chip4}, \
+                                                 {force_ ## chip5,chip5}, \
+                                                 {force_ ## chip6,chip6}, \
+                                                 {force_ ## chip7,chip7}, \
+                                                 {force_ ## chip8,chip8}, \
+                                                 {NULL}}; \
+  SENSORS_INSMOD

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'chip4' - possible side-effects?
#2153: FILE: include/linux/i2c-proc.h:351:
+#define SENSORS_INSMOD_8(chip1,chip2,chip3,chip4,chip5,chip6,chip7,chip8) \
+  enum chips { any_chip, chip1, chip2, chip3, chip4, chip5, chip6, chip7, chip8 }; \
+  SENSORS_MODULE_PARM(force, \
+                      "List of adapter,address pairs to boldly assume " \
+                      "to be present"); \
+  SENSORS_MODULE_PARM_FORCE(chip1); \
+  SENSORS_MODULE_PARM_FORCE(chip2); \
+  SENSORS_MODULE_PARM_FORCE(chip3); \
+  SENSORS_MODULE_PARM_FORCE(chip4); \
+  SENSORS_MODULE_PARM_FORCE(chip5); \
+  SENSORS_MODULE_PARM_FORCE(chip6); \
+  SENSORS_MODULE_PARM_FORCE(chip7); \
+  SENSORS_MODULE_PARM_FORCE(chip8); \
+  static struct i2c_force_data forces[] = {{force,any_chip}, \
+                                                 {force_ ## chip1,chip1}, \
+                                                 {force_ ## chip2,chip2}, \
+                                                 {force_ ## chip3,chip3}, \
+                                                 {force_ ## chip4,chip4}, \
+                                                 {force_ ## chip5,chip5}, \
+                                                 {force_ ## chip6,chip6}, \
+                                                 {force_ ## chip7,chip7}, \
+                                                 {force_ ## chip8,chip8}, \
+                                                 {NULL}}; \
+  SENSORS_INSMOD

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'chip5' - possible side-effects?
#2153: FILE: include/linux/i2c-proc.h:351:
+#define SENSORS_INSMOD_8(chip1,chip2,chip3,chip4,chip5,chip6,chip7,chip8) \
+  enum chips { any_chip, chip1, chip2, chip3, chip4, chip5, chip6, chip7, chip8 }; \
+  SENSORS_MODULE_PARM(force, \
+                      "List of adapter,address pairs to boldly assume " \
+                      "to be present"); \
+  SENSORS_MODULE_PARM_FORCE(chip1); \
+  SENSORS_MODULE_PARM_FORCE(chip2); \
+  SENSORS_MODULE_PARM_FORCE(chip3); \
+  SENSORS_MODULE_PARM_FORCE(chip4); \
+  SENSORS_MODULE_PARM_FORCE(chip5); \
+  SENSORS_MODULE_PARM_FORCE(chip6); \
+  SENSORS_MODULE_PARM_FORCE(chip7); \
+  SENSORS_MODULE_PARM_FORCE(chip8); \
+  static struct i2c_force_data forces[] = {{force,any_chip}, \
+                                                 {force_ ## chip1,chip1}, \
+                                                 {force_ ## chip2,chip2}, \
+                                                 {force_ ## chip3,chip3}, \
+                                                 {force_ ## chip4,chip4}, \
+                                                 {force_ ## chip5,chip5}, \
+                                                 {force_ ## chip6,chip6}, \
+                                                 {force_ ## chip7,chip7}, \
+                                                 {force_ ## chip8,chip8}, \
+                                                 {NULL}}; \
+  SENSORS_INSMOD

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'chip6' - possible side-effects?
#2153: FILE: include/linux/i2c-proc.h:351:
+#define SENSORS_INSMOD_8(chip1,chip2,chip3,chip4,chip5,chip6,chip7,chip8) \
+  enum chips { any_chip, chip1, chip2, chip3, chip4, chip5, chip6, chip7, chip8 }; \
+  SENSORS_MODULE_PARM(force, \
+                      "List of adapter,address pairs to boldly assume " \
+                      "to be present"); \
+  SENSORS_MODULE_PARM_FORCE(chip1); \
+  SENSORS_MODULE_PARM_FORCE(chip2); \
+  SENSORS_MODULE_PARM_FORCE(chip3); \
+  SENSORS_MODULE_PARM_FORCE(chip4); \
+  SENSORS_MODULE_PARM_FORCE(chip5); \
+  SENSORS_MODULE_PARM_FORCE(chip6); \
+  SENSORS_MODULE_PARM_FORCE(chip7); \
+  SENSORS_MODULE_PARM_FORCE(chip8); \
+  static struct i2c_force_data forces[] = {{force,any_chip}, \
+                                                 {force_ ## chip1,chip1}, \
+                                                 {force_ ## chip2,chip2}, \
+                                                 {force_ ## chip3,chip3}, \
+                                                 {force_ ## chip4,chip4}, \
+                                                 {force_ ## chip5,chip5}, \
+                                                 {force_ ## chip6,chip6}, \
+                                                 {force_ ## chip7,chip7}, \
+                                                 {force_ ## chip8,chip8}, \
+                                                 {NULL}}; \
+  SENSORS_INSMOD

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'chip7' - possible side-effects?
#2153: FILE: include/linux/i2c-proc.h:351:
+#define SENSORS_INSMOD_8(chip1,chip2,chip3,chip4,chip5,chip6,chip7,chip8) \
+  enum chips { any_chip, chip1, chip2, chip3, chip4, chip5, chip6, chip7, chip8 }; \
+  SENSORS_MODULE_PARM(force, \
+                      "List of adapter,address pairs to boldly assume " \
+                      "to be present"); \
+  SENSORS_MODULE_PARM_FORCE(chip1); \
+  SENSORS_MODULE_PARM_FORCE(chip2); \
+  SENSORS_MODULE_PARM_FORCE(chip3); \
+  SENSORS_MODULE_PARM_FORCE(chip4); \
+  SENSORS_MODULE_PARM_FORCE(chip5); \
+  SENSORS_MODULE_PARM_FORCE(chip6); \
+  SENSORS_MODULE_PARM_FORCE(chip7); \
+  SENSORS_MODULE_PARM_FORCE(chip8); \
+  static struct i2c_force_data forces[] = {{force,any_chip}, \
+                                                 {force_ ## chip1,chip1}, \
+                                                 {force_ ## chip2,chip2}, \
+                                                 {force_ ## chip3,chip3}, \
+                                                 {force_ ## chip4,chip4}, \
+                                                 {force_ ## chip5,chip5}, \
+                                                 {force_ ## chip6,chip6}, \
+                                                 {force_ ## chip7,chip7}, \
+                                                 {force_ ## chip8,chip8}, \
+                                                 {NULL}}; \
+  SENSORS_INSMOD

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'chip8' - possible side-effects?
#2153: FILE: include/linux/i2c-proc.h:351:
+#define SENSORS_INSMOD_8(chip1,chip2,chip3,chip4,chip5,chip6,chip7,chip8) \
+  enum chips { any_chip, chip1, chip2, chip3, chip4, chip5, chip6, chip7, chip8 }; \
+  SENSORS_MODULE_PARM(force, \
+                      "List of adapter,address pairs to boldly assume " \
+                      "to be present"); \
+  SENSORS_MODULE_PARM_FORCE(chip1); \
+  SENSORS_MODULE_PARM_FORCE(chip2); \
+  SENSORS_MODULE_PARM_FORCE(chip3); \
+  SENSORS_MODULE_PARM_FORCE(chip4); \
+  SENSORS_MODULE_PARM_FORCE(chip5); \
+  SENSORS_MODULE_PARM_FORCE(chip6); \
+  SENSORS_MODULE_PARM_FORCE(chip7); \
+  SENSORS_MODULE_PARM_FORCE(chip8); \
+  static struct i2c_force_data forces[] = {{force,any_chip}, \
+                                                 {force_ ## chip1,chip1}, \
+                                                 {force_ ## chip2,chip2}, \
+                                                 {force_ ## chip3,chip3}, \
+                                                 {force_ ## chip4,chip4}, \
+                                                 {force_ ## chip5,chip5}, \
+                                                 {force_ ## chip6,chip6}, \
+                                                 {force_ ## chip7,chip7}, \
+                                                 {force_ ## chip8,chip8}, \
+                                                 {NULL}}; \
+  SENSORS_INSMOD

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2154: FILE: include/linux/i2c-proc.h:352:
+  enum chips { any_chip, chip1, chip2, chip3, chip4, chip5, chip6, chip7, chip8 }; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2155: FILE: include/linux/i2c-proc.h:353:
+  SENSORS_MODULE_PARM(force, \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2156: FILE: include/linux/i2c-proc.h:354:
+                      "List of adapter,address pairs to boldly assume " \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2156: FILE: include/linux/i2c-proc.h:354:
+                      "List of adapter,address pairs to boldly assume " \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2157: FILE: include/linux/i2c-proc.h:355:
+                      "to be present"); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2157: FILE: include/linux/i2c-proc.h:355:
+                      "to be present"); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2158: FILE: include/linux/i2c-proc.h:356:
+  SENSORS_MODULE_PARM_FORCE(chip1); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2159: FILE: include/linux/i2c-proc.h:357:
+  SENSORS_MODULE_PARM_FORCE(chip2); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2160: FILE: include/linux/i2c-proc.h:358:
+  SENSORS_MODULE_PARM_FORCE(chip3); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2161: FILE: include/linux/i2c-proc.h:359:
+  SENSORS_MODULE_PARM_FORCE(chip4); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2162: FILE: include/linux/i2c-proc.h:360:
+  SENSORS_MODULE_PARM_FORCE(chip5); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2163: FILE: include/linux/i2c-proc.h:361:
+  SENSORS_MODULE_PARM_FORCE(chip6); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2164: FILE: include/linux/i2c-proc.h:362:
+  SENSORS_MODULE_PARM_FORCE(chip7); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2165: FILE: include/linux/i2c-proc.h:363:
+  SENSORS_MODULE_PARM_FORCE(chip8); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2166: FILE: include/linux/i2c-proc.h:364:
+  static struct i2c_force_data forces[] = {{force,any_chip}, \$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2166: FILE: include/linux/i2c-proc.h:364:
+  static struct i2c_force_data forces[] = {{force,any_chip}, \
                                                  ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#2167: FILE: include/linux/i2c-proc.h:365:
+                                                 {force_ ## chip1,chip1}, \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2167: FILE: include/linux/i2c-proc.h:365:
+                                                 {force_ ## chip1,chip1}, \$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2167: FILE: include/linux/i2c-proc.h:365:
+                                                 {force_ ## chip1,chip1}, \
                                                                  ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#2168: FILE: include/linux/i2c-proc.h:366:
+                                                 {force_ ## chip2,chip2}, \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2168: FILE: include/linux/i2c-proc.h:366:
+                                                 {force_ ## chip2,chip2}, \$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2168: FILE: include/linux/i2c-proc.h:366:
+                                                 {force_ ## chip2,chip2}, \
                                                                  ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#2169: FILE: include/linux/i2c-proc.h:367:
+                                                 {force_ ## chip3,chip3}, \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2169: FILE: include/linux/i2c-proc.h:367:
+                                                 {force_ ## chip3,chip3}, \$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2169: FILE: include/linux/i2c-proc.h:367:
+                                                 {force_ ## chip3,chip3}, \
                                                                  ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#2170: FILE: include/linux/i2c-proc.h:368:
+                                                 {force_ ## chip4,chip4}, \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2170: FILE: include/linux/i2c-proc.h:368:
+                                                 {force_ ## chip4,chip4}, \$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2170: FILE: include/linux/i2c-proc.h:368:
+                                                 {force_ ## chip4,chip4}, \
                                                                  ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#2171: FILE: include/linux/i2c-proc.h:369:
+                                                 {force_ ## chip5,chip5}, \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2171: FILE: include/linux/i2c-proc.h:369:
+                                                 {force_ ## chip5,chip5}, \$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2171: FILE: include/linux/i2c-proc.h:369:
+                                                 {force_ ## chip5,chip5}, \
                                                                  ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#2172: FILE: include/linux/i2c-proc.h:370:
+                                                 {force_ ## chip6,chip6}, \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2172: FILE: include/linux/i2c-proc.h:370:
+                                                 {force_ ## chip6,chip6}, \$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2172: FILE: include/linux/i2c-proc.h:370:
+                                                 {force_ ## chip6,chip6}, \
                                                                  ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#2173: FILE: include/linux/i2c-proc.h:371:
+                                                 {force_ ## chip7,chip7}, \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2173: FILE: include/linux/i2c-proc.h:371:
+                                                 {force_ ## chip7,chip7}, \$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2173: FILE: include/linux/i2c-proc.h:371:
+                                                 {force_ ## chip7,chip7}, \
                                                                  ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#2174: FILE: include/linux/i2c-proc.h:372:
+                                                 {force_ ## chip8,chip8}, \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2174: FILE: include/linux/i2c-proc.h:372:
+                                                 {force_ ## chip8,chip8}, \$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2174: FILE: include/linux/i2c-proc.h:372:
+                                                 {force_ ## chip8,chip8}, \
                                                                  ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#2175: FILE: include/linux/i2c-proc.h:373:
+                                                 {NULL}}; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2175: FILE: include/linux/i2c-proc.h:373:
+                                                 {NULL}}; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2176: FILE: include/linux/i2c-proc.h:374:
+  SENSORS_INSMOD$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2184: FILE: include/linux/sensors.h:1:
+/*

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2185: FILE: include/linux/sensors.h:2:
+/*
+    sensors.h - Part of lm_sensors, Linux kernel modules for hardware

ERROR:CODE_INDENT: code indent should use tabs where possible
#2186: FILE: include/linux/sensors.h:3:
+                monitoring$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#2200: FILE: include/linux/sensors.h:17:
+    along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#2201: FILE: include/linux/sensors.h:18:
+    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

WARNING:TYPO_SPELLING: 'Celcius' may be misspelled - perhaps ''?
#2222: FILE: include/linux/sensors.h:39:
+#define LM78_SYSCTL_TEMP 1200	/* Degrees Celcius * 10 */
                              	           ^^^^^^^

WARNING:TYPO_SPELLING: 'Celcius' may be misspelled - perhaps ''?
#2255: FILE: include/linux/sensors.h:72:
+#define W83781D_SYSCTL_TEMP1 1200	/* Degrees Celcius * 10 */
                                  	           ^^^^^^^

WARNING:TYPO_SPELLING: 'Celcius' may be misspelled - perhaps ''?
#2256: FILE: include/linux/sensors.h:73:
+#define W83781D_SYSCTL_TEMP2 1201	/* Degrees Celcius * 10 */
                                  	           ^^^^^^^

WARNING:TYPO_SPELLING: 'Celcius' may be misspelled - perhaps ''?
#2257: FILE: include/linux/sensors.h:74:
+#define W83781D_SYSCTL_TEMP3 1202	/* Degrees Celcius * 10 */
                                  	           ^^^^^^^

WARNING:TYPO_SPELLING: 'Celcius' may be misspelled - perhaps ''?
#2292: FILE: include/linux/sensors.h:109:
+#define LM75_SYSCTL_TEMP 1200	/* Degrees Celcius * 10 */
                              	           ^^^^^^^

WARNING:TYPO_SPELLING: 'Celcius' may be misspelled - perhaps ''?
#2311: FILE: include/linux/sensors.h:128:
+#define GL518_SYSCTL_TEMP 1200	/* Degrees Celcius * 10 */
                               	           ^^^^^^^

WARNING:TYPO_SPELLING: 'Celcius' may be misspelled - perhaps ''?
#2333: FILE: include/linux/sensors.h:150:
+#define GL520_SYSCTL_TEMP1 1200	/* Degrees Celcius * 10 */
                                	           ^^^^^^^

WARNING:TYPO_SPELLING: 'Celcius' may be misspelled - perhaps ''?
#2334: FILE: include/linux/sensors.h:151:
+#define GL520_SYSCTL_TEMP2 1201	/* Degrees Celcius * 10 */
                                	           ^^^^^^^

WARNING:TYPO_SPELLING: 'Celcius' may be misspelled - perhaps ''?
#2378: FILE: include/linux/sensors.h:195:
+#define LM80_SYSCTL_TEMP 1250	/* Degrees Celcius * 100 */
                              	           ^^^^^^^

WARNING:TYPO_SPELLING: 'Celcius' may be misspelled - perhaps ''?
#2390: FILE: include/linux/sensors.h:207:
+#define ADM9240_SYSCTL_TEMP 1250	/* Degrees Celcius * 100 */
                                 	           ^^^^^^^

WARNING:TYPO_SPELLING: 'Celcius' may be misspelled - perhaps ''?
#2415: FILE: include/linux/sensors.h:232:
+#define ADM1024_SYSCTL_TEMP 1250	/* Degrees Celcius * 100 */
                                 	           ^^^^^^^

WARNING:TYPO_SPELLING: 'Celcius' may be misspelled - perhaps ''?
#2416: FILE: include/linux/sensors.h:233:
+#define ADM1024_SYSCTL_TEMP1 1290	/* Degrees Celcius */
                                  	           ^^^^^^^

WARNING:TYPO_SPELLING: 'Celcius' may be misspelled - perhaps ''?
#2417: FILE: include/linux/sensors.h:234:
+#define ADM1024_SYSCTL_TEMP2 1295	/* Degrees Celcius */
                                  	           ^^^^^^^

WARNING:TYPO_SPELLING: 'Celcius' may be misspelled - perhaps ''?
#2443: FILE: include/linux/sensors.h:260:
+#define ADM1025_SYSCTL_TEMP 1250        /* Degrees Celcius * 100 */
                                                    ^^^^^^^

WARNING:TYPO_SPELLING: 'Celcius' may be misspelled - perhaps ''?
#2480: FILE: include/linux/sensors.h:297:
+#define MAXI_SYSCTL_TEMP1  1201	/* Degrees Celcius */
                                	           ^^^^^^^

WARNING:TYPO_SPELLING: 'Celcius' may be misspelled - perhaps ''?
#2481: FILE: include/linux/sensors.h:298:
+#define MAXI_SYSCTL_TEMP2  1202	/* Degrees Celcius */
                                	           ^^^^^^^

WARNING:TYPO_SPELLING: 'Celcius' may be misspelled - perhaps ''?
#2482: FILE: include/linux/sensors.h:299:
+#define MAXI_SYSCTL_TEMP3  1203	/* Degrees Celcius */
                                	           ^^^^^^^

WARNING:TYPO_SPELLING: 'Celcius' may be misspelled - perhaps ''?
#2483: FILE: include/linux/sensors.h:300:
+#define MAXI_SYSCTL_TEMP4  1204	/* Degrees Celcius */
                                	           ^^^^^^^

WARNING:TYPO_SPELLING: 'Celcius' may be misspelled - perhaps ''?
#2484: FILE: include/linux/sensors.h:301:
+#define MAXI_SYSCTL_TEMP5  1205	/* Degrees Celcius */
                                	           ^^^^^^^

WARNING:TYPO_SPELLING: 'Celcius' may be misspelled - perhaps ''?
#2485: FILE: include/linux/sensors.h:302:
+#define MAXI_SYSCTL_TEMP6  1206	/* Degrees Celcius */
                                	           ^^^^^^^

WARNING:TYPO_SPELLING: 'Celcius' may be misspelled - perhaps ''?
#2522: FILE: include/linux/sensors.h:339:
+#define SIS5595_SYSCTL_TEMP 1200	/* Degrees Celcius * 10 */
                                 	           ^^^^^^^

WARNING:TYPO_SPELLING: 'Celcius' may be misspelled - perhaps ''?
#2573: FILE: include/linux/sensors.h:390:
+#define THMC50_SYSCTL_TEMP 1200	/* Degrees Celcius */
                                	           ^^^^^^^

WARNING:TYPO_SPELLING: 'Celcius' may be misspelled - perhaps ''?
#2574: FILE: include/linux/sensors.h:391:
+#define THMC50_SYSCTL_REMOTE_TEMP 1201	/* Degrees Celcius */
                                       	           ^^^^^^^

WARNING:TYPO_SPELLING: 'Celcius' may be misspelled - perhaps ''?
#2596: FILE: include/linux/sensors.h:413:
+#define LM87_SYSCTL_TEMP1  1250 /* Degrees Celcius * 100 */
                                            ^^^^^^^

WARNING:TYPO_SPELLING: 'Celcius' may be misspelled - perhaps ''?
#2597: FILE: include/linux/sensors.h:414:
+#define LM87_SYSCTL_TEMP2   1251 /* Degrees Celcius * 100 */
                                             ^^^^^^^

WARNING:TYPO_SPELLING: 'Celcius' may be misspelled - perhaps ''?
#2598: FILE: include/linux/sensors.h:415:
+#define LM87_SYSCTL_TEMP3   1252 /* Degrees Celcius * 100 */
                                             ^^^^^^^

WARNING:TYPO_SPELLING: 'Celcius' may be misspelled - perhaps ''?
#2636: FILE: include/linux/sensors.h:453:
+#define MTP008_SYSCTL_TEMP1	1200	/* Degrees Celcius * 10 */
                            	    	           ^^^^^^^

WARNING:TYPO_SPELLING: 'Celcius' may be misspelled - perhaps ''?
#2637: FILE: include/linux/sensors.h:454:
+#define MTP008_SYSCTL_TEMP2	1201	/* Degrees Celcius * 10 */
                            	    	           ^^^^^^^

WARNING:TYPO_SPELLING: 'Celcius' may be misspelled - perhaps ''?
#2638: FILE: include/linux/sensors.h:455:
+#define MTP008_SYSCTL_TEMP3	1202	/* Degrees Celcius * 10 */
                            	    	           ^^^^^^^

WARNING:TYPO_SPELLING: 'Celcius' may be misspelled - perhaps ''?
#2664: FILE: include/linux/sensors.h:481:
+#define DS1621_SYSCTL_TEMP 1200	/* Degrees Celcius * 10 */
                                	           ^^^^^^^

WARNING:TYPO_SPELLING: 'Celcius' may be misspelled - perhaps ''?
#2684: FILE: include/linux/sensors.h:501:
+#define IT87_SYSCTL_TEMP1 1200  /* Degrees Celcius * 10 */
                                            ^^^^^^^

WARNING:TYPO_SPELLING: 'Celcius' may be misspelled - perhaps ''?
#2685: FILE: include/linux/sensors.h:502:
+#define IT87_SYSCTL_TEMP2 1201  /* Degrees Celcius * 10 */
                                            ^^^^^^^

WARNING:TYPO_SPELLING: 'Celcius' may be misspelled - perhaps ''?
#2686: FILE: include/linux/sensors.h:503:
+#define IT87_SYSCTL_TEMP3 1202  /* Degrees Celcius * 10 */
                                            ^^^^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2872: FILE: include/linux/sensors.h:689:
+
+

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000410011.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 147 errors, 227 warnings, 104 checks, 2774 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000410011.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
