WARNING:TYPO_SPELLING: 'arbirary' may be misspelled - perhaps 'arbitrary'?
#35: 
driver can allocate arbirary size of devres data which is associated
                    ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#89: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#405: FILE: drivers/base/base.h:47:
+extern void devres_release_all(struct device *dev);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#453: FILE: drivers/base/devres.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#454: FILE: drivers/base/devres.c:2:
+ * drivers/base/devres.c - device resource management

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#488: FILE: drivers/base/devres.c:36:
+static int log_devres = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#489: FILE: drivers/base/devres.c:37:
+module_param_named(log, log_devres, int, S_IRUGO | S_IWUSR);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:PREFER_DEV_LEVEL: Prefer dev_err(... to dev_printk(KERN_ERR, ...
#502: FILE: drivers/base/devres.c:50:
+		dev_printk(KERN_ERR, dev, "DEVRES %3s %p %s (%lu bytes)\n",

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#524: FILE: drivers/base/devres.c:72:
+static struct devres_group * node_to_group(struct devres_node *node)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#533: FILE: drivers/base/devres.c:81:
+static __always_inline struct devres * alloc_dr(dr_release_t release,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#552: FILE: drivers/base/devres.c:100:
+	BUG_ON(!list_empty(&node->entry));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#570: FILE: drivers/base/devres.c:118:
+void * __devres_alloc(dr_release_t release, size_t size, gfp_t gfp,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#583: FILE: drivers/base/devres.c:131:
+void * devres_alloc(dr_release_t release, size_t size, gfp_t gfp)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#606: FILE: drivers/base/devres.c:154:
+		BUG_ON(!list_empty(&dr->node.entry));

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#664: FILE: drivers/base/devres.c:212:
+void * devres_find(struct device *dev, dr_release_t release,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#694: FILE: drivers/base/devres.c:242:
+void * devres_get(struct device *dev, void *new_res,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#730: FILE: drivers/base/devres.c:278:
+void * devres_remove(struct device *dev, dr_release_t release,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#828: FILE: drivers/base/devres.c:376:
+		BUG_ON(!grp || list_empty(&grp->node[0].entry));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#834: FILE: drivers/base/devres.c:382:
+		BUG_ON(grp->color <= 0 || grp->color > 2);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#899: FILE: drivers/base/devres.c:447:
+void * devres_open_group(struct device *dev, void *id, gfp_t gfp)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#926: FILE: drivers/base/devres.c:474:
+static struct devres_group * find_group(struct device *dev, void *id)

CHECK:BRACES: braces {} should be used on all arms of this statement
#938: FILE: drivers/base/devres.c:486:
+		if (id) {
[...]
+		} else if (list_empty(&grp->node[1].entry))
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#990: FILE: drivers/base/devres.c:538:
+	if (grp) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#994: FILE: drivers/base/devres.c:542:
+	} else

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1067: FILE: drivers/base/devres.c:615:
+void * devm_kzalloc(struct device *dev, size_t size, gfp_t gfp)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1103: FILE: drivers/base/dma-mapping.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#1104: FILE: drivers/base/dma-mapping.c:2:
+ * drivers/base/dma-mapping.c - arch-independent dma-mapping routines

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1162: FILE: drivers/base/dma-mapping.c:60:
+void * dmam_alloc_coherent(struct device *dev, size_t size,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1391: FILE: drivers/base/dmapool.c:480:
+EXPORT_SYMBOL (dmam_pool_create);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1392: FILE: drivers/base/dmapool.c:481:
+EXPORT_SYMBOL (dmam_pool_destroy);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1392: FILE: drivers/base/dmapool.c:481:
+EXPORT_SYMBOL (dmam_pool_destroy);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1436: FILE: drivers/pci/pci.c:783:
+static struct pci_devres * get_pci_dr(struct pci_dev *pdev)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1450: FILE: drivers/pci/pci.c:797:
+static struct pci_devres * find_pci_dr(struct pci_dev *pdev)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1579: FILE: drivers/pci/pci.c:1317:
+EXPORT_SYMBOL(pcim_pin_device);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1597: FILE: include/linux/device.h:355:
+extern void * __devres_alloc(dr_release_t release, size_t size, gfp_t gfp,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1597: FILE: include/linux/device.h:355:
+extern void * __devres_alloc(dr_release_t release, size_t size, gfp_t gfp,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1602: FILE: include/linux/device.h:360:
+extern void * devres_alloc(dr_release_t release, size_t size, gfp_t gfp);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1602: FILE: include/linux/device.h:360:
+extern void * devres_alloc(dr_release_t release, size_t size, gfp_t gfp);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1604: FILE: include/linux/device.h:362:
+extern void devres_free(void *res);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1605: FILE: include/linux/device.h:363:
+extern void devres_add(struct device *dev, void *res);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1606: FILE: include/linux/device.h:364:
+extern void * devres_find(struct device *dev, dr_release_t release,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1606: FILE: include/linux/device.h:364:
+extern void * devres_find(struct device *dev, dr_release_t release,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1608: FILE: include/linux/device.h:366:
+extern void * devres_get(struct device *dev, void *new_res,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1608: FILE: include/linux/device.h:366:
+extern void * devres_get(struct device *dev, void *new_res,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1610: FILE: include/linux/device.h:368:
+extern void * devres_remove(struct device *dev, dr_release_t release,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1610: FILE: include/linux/device.h:368:
+extern void * devres_remove(struct device *dev, dr_release_t release,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1612: FILE: include/linux/device.h:370:
+extern int devres_destroy(struct device *dev, dr_release_t release,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1616: FILE: include/linux/device.h:374:
+extern void * __must_check devres_open_group(struct device *dev, void *id,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1618: FILE: include/linux/device.h:376:
+extern void devres_close_group(struct device *dev, void *id);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1619: FILE: include/linux/device.h:377:
+extern void devres_remove_group(struct device *dev, void *id);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1620: FILE: include/linux/device.h:378:
+extern int devres_release_group(struct device *dev, void *id);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1623: FILE: include/linux/device.h:381:
+extern void *devm_kzalloc(struct device *dev, size_t size, gfp_t gfp);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1624: FILE: include/linux/device.h:382:
+extern void devm_kfree(struct device *dev, void *p);

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#1633: FILE: include/linux/device.h:426:
+	spinlock_t		devres_lock;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1651: FILE: include/linux/dma-mapping.h:72:
+extern void *dmam_alloc_coherent(struct device *dev, size_t size,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1653: FILE: include/linux/dma-mapping.h:74:
+extern void dmam_free_coherent(struct device *dev, size_t size, void *vaddr,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1655: FILE: include/linux/dma-mapping.h:76:
+extern void *dmam_alloc_noncoherent(struct device *dev, size_t size,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1657: FILE: include/linux/dma-mapping.h:78:
+extern void dmam_free_noncoherent(struct device *dev, size_t size, void *vaddr,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1660: FILE: include/linux/dma-mapping.h:81:
+extern int dmam_declare_coherent_memory(struct device *dev, dma_addr_t bus_addr,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1663: FILE: include/linux/dma-mapping.h:84:
+extern void dmam_release_declared_memory(struct device *dev);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1666: FILE: include/linux/dma-mapping.h:87:
+static inline int dmam_declare_coherent_memory(struct device *dev,
+				dma_addr_t bus_addr, dma_addr_t device_addr,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1711: FILE: include/linux/interrupt.h:87:
+extern int devm_request_irq(struct device *dev, unsigned int irq,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1714: FILE: include/linux/interrupt.h:90:
+extern void devm_free_irq(struct device *dev, unsigned int irq, void *dev_id);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1730: FILE: include/linux/io.h:34:
+void __iomem * devm_ioport_map(struct device *dev, unsigned long port,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1734: FILE: include/linux/io.h:38:
+void __iomem * devm_ioremap(struct device *dev, unsigned long offset,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1736: FILE: include/linux/io.h:40:
+void __iomem * devm_ioremap_nocache(struct device *dev, unsigned long offset,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1740: FILE: include/linux/io.h:44:
+void __iomem * pcim_iomap(struct pci_dev *pdev, int bar, unsigned long maxlen);

ERROR:POINTER_LOCATION: "foo * const * bar" should be "foo * const *bar"
#1742: FILE: include/linux/io.h:46:
+void __iomem * const * pcim_iomap_table(struct pci_dev *pdev);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1758: FILE: include/linux/ioport.h:143:
+#define devm_request_region(dev,start,n,name) \
                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1758: FILE: include/linux/ioport.h:143:
+#define devm_request_region(dev,start,n,name) \
                                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1758: FILE: include/linux/ioport.h:143:
+#define devm_request_region(dev,start,n,name) \
                                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1760: FILE: include/linux/ioport.h:145:
+#define devm_request_mem_region(dev,start,n,name) \
                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1760: FILE: include/linux/ioport.h:145:
+#define devm_request_mem_region(dev,start,n,name) \
                                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1760: FILE: include/linux/ioport.h:145:
+#define devm_request_mem_region(dev,start,n,name) \
                                            ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1763: FILE: include/linux/ioport.h:148:
+extern struct resource * __devm_request_region(struct device *dev,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1763: FILE: include/linux/ioport.h:148:
+extern struct resource * __devm_request_region(struct device *dev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1764: FILE: include/linux/ioport.h:149:
+extern struct resource * __devm_request_region(struct device *dev,
+				struct resource *parent, resource_size_t start,

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1767: FILE: include/linux/ioport.h:152:
+#define devm_release_region(start,n) \
                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1769: FILE: include/linux/ioport.h:154:
+#define devm_release_mem_region(start,n) \
                                      ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1772: FILE: include/linux/ioport.h:157:
+extern void __devm_release_region(struct device *dev, struct resource *parent,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1936: FILE: kernel/resource.c:645:
+struct resource * __devm_request_region(struct device *dev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1937: FILE: kernel/resource.c:646:
+struct resource * __devm_request_region(struct device *dev,
+				struct resource *parent, resource_size_t start,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2044: FILE: lib/iomap.c:285:
+void __iomem * devm_ioport_map(struct device *dev, unsigned long port,

CHECK:BRACES: braces {} should be used on all arms of this statement
#2054: FILE: lib/iomap.c:295:
+	if (addr) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2057: FILE: lib/iomap.c:298:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#2108: FILE: lib/iomap.c:349:
+	if (addr) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2111: FILE: lib/iomap.c:352:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#2137: FILE: lib/iomap.c:378:
+	if (addr) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2140: FILE: lib/iomap.c:381:
+	} else

WARNING:TYPO_SPELLING: 'succed' may be misspelled - perhaps 'succeed'?
#2192: FILE: lib/iomap.c:433:
+ * be safely called without context and guaranteed to succed once
                                                       ^^^^^^

ERROR:POINTER_LOCATION: "foo * const * bar" should be "foo * const *bar"
#2195: FILE: lib/iomap.c:436:
+void __iomem * const * pcim_iomap_table(struct pci_dev *pdev)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2220: FILE: lib/iomap.c:461:
+void __iomem * pcim_iomap(struct pci_dev *pdev, int bar, unsigned long maxlen)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2224: FILE: lib/iomap.c:465:
+	BUG_ON(bar >= PCIM_IOMAP_MAX);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2250: FILE: lib/iomap.c:491:
+	BUG_ON(!tbl);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000000415.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 37 errors, 19 warnings, 38 checks, 2049 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000000415.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
