WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#44: 
and we'll be able to kill the old ioctl with the BKL completely at some point.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#132: FILE: include/linux/fs.h:885:
+	 * Unlike ioctl, BKL is not taken: drivers manage their own locking. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:TRAILING_WHITESPACE: trailing whitespace
#134: FILE: include/linux/fs.h:887:
+^I/* If ioctl_native is set, it is used instead $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: Unnecessary space before function pointer arguments
#139: FILE: include/linux/fs.h:892:
+	long (*ioctl_native) (struct inode *, struct file *, unsigned int, unsigned long);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#139: FILE: include/linux/fs.h:892:
+	long (*ioctl_native) (struct inode *, struct file *, unsigned int, unsigned long);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#139: FILE: include/linux/fs.h:892:
+	long (*ioctl_native) (struct inode *, struct file *, unsigned int, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#139: FILE: include/linux/fs.h:892:
+	long (*ioctl_native) (struct inode *, struct file *, unsigned int, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#139: FILE: include/linux/fs.h:892:
+	long (*ioctl_native) (struct inode *, struct file *, unsigned int, unsigned long);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#143: FILE: include/linux/fs.h:896:
+	 * user-space application. */

WARNING:SPACING: Unnecessary space before function pointer arguments
#144: FILE: include/linux/fs.h:897:
+	long (*ioctl_compat) (struct inode *, struct file *, unsigned int, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#144: FILE: include/linux/fs.h:897:
+	long (*ioctl_compat) (struct inode *, struct file *, unsigned int, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#144: FILE: include/linux/fs.h:897:
+	long (*ioctl_compat) (struct inode *, struct file *, unsigned int, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#144: FILE: include/linux/fs.h:897:
+	long (*ioctl_compat) (struct inode *, struct file *, unsigned int, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#144: FILE: include/linux/fs.h:897:
+	long (*ioctl_compat) (struct inode *, struct file *, unsigned int, unsigned long);

WARNING:TYPO_SPELLING: 'superceded' may be misspelled - perhaps 'superseded'?
#175: FILE: Documentation/filesystems/Locking:418:
+->ioctl() on regular files is superceded by the ->ioctl_native() and
                               ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#194: FILE: fs/compat.c:392:
+	filp = fget_light(fd, &fput_needed);
 	^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#200: FILE: fs/compat.c:396:
+	if (!std_sys_ioctl(fd,cmd,arg,filp,&error))
 	                              ^^^^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#200: FILE: fs/compat.c:396:
+	if (!std_sys_ioctl(fd,cmd,arg,filp,&error))
 	                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#200: FILE: fs/compat.c:396:
+	if (!std_sys_ioctl(fd,cmd,arg,filp,&error))
 	                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#200: FILE: fs/compat.c:396:
+	if (!std_sys_ioctl(fd,cmd,arg,filp,&error))
 	                             ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#200: FILE: fs/compat.c:396:
+	if (!std_sys_ioctl(fd,cmd,arg,filp,&error))
 	                                  ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#200: FILE: fs/compat.c:396:
+	if (!std_sys_ioctl(fd,cmd,arg,filp,&error))
 	                                   ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#200: FILE: fs/compat.c:396:
+	if (!std_sys_ioctl(fd,cmd,arg,filp,&error))
[...]
+	else if (filp->f_op && filp->f_op->ioctl_compat) {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space prohibited after that open parenthesis '('
#203: FILE: fs/compat.c:399:
+		error = filp->f_op->ioctl_compat( filp->f_dentry->d_inode,

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#204: FILE: fs/compat.c:400:
+				filp, cmd, arg);
 				^^^^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#217: FILE: fs/compat.c:414:
+			error = filp->f_op->ioctl(

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#219: FILE: fs/compat.c:416:
+					filp, cmd, arg);
 					^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#230: FILE: fs/compat.c:454:
+	fput_light(filp, fput_needed);
 	           ^^^^

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#260: FILE: fs/ioctl.c:54:
+EXPORT_SYMBOL(std_sys_ioctl);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#262: FILE: fs/ioctl.c:56:
+	struct file * filp, int* error)
 	              ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#262: FILE: fs/ioctl.c:56:
+int std_sys_ioctl(unsigned int fd, unsigned int cmd, unsigned long arg,
+	struct file * filp, int* error)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#262: FILE: fs/ioctl.c:56:
+	struct file * filp, int* error)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#262: FILE: fs/ioctl.c:56:
+	struct file * filp, int* error)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#279: FILE: fs/ioctl.c:60:
+	*error = security_file_ioctl(filp, cmd, arg);
 	                             ^^^^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#288: FILE: fs/ioctl.c:71:
+			if ((*error = get_user(on, (int __user *)arg)) != 0)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#297: FILE: fs/ioctl.c:86:
+			if ((*error = get_user(on, (int __user *)arg)) != 0)

CHECK:BRACES: braces {} should be used on all arms of this statement
#306: FILE: fs/ioctl.c:92:
+				if (filp->f_op && filp->f_op->fasync) {
[...]
+				else *error = -ENOTTY;
[...]

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#308: FILE: fs/ioctl.c:94:
+					*error = filp->f_op->fasync(fd, filp, on);
 					                                ^^^^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#311: FILE: fs/ioctl.c:97:
+				else *error = -ENOTTY;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#311: FILE: fs/ioctl.c:97:
+				}
+				else *error = -ENOTTY;

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#323: FILE: fs/ioctl.c:113:
+				*error = copy_to_user((loff_t __user *)arg, &res, sizeof(res)) ? -EFAULT : 0;

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:BRACES: braces {} are not necessary for single statement blocks
#336: FILE: fs/ioctl.c:120:
+			if (S_ISREG(filp->f_dentry->d_inode->i_mode)) {
+				*error = file_ioctl(filp, cmd, arg);
+			}

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#337: FILE: fs/ioctl.c:121:
+				*error = file_ioctl(filp, cmd, arg);
 				                    ^^^^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#339: FILE: fs/ioctl.c:123:
+			if (*error == -ENOTTY) return 1;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#346: FILE: fs/ioctl.c:128:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#349: FILE: fs/ioctl.c:131:
+{^I$

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#350: FILE: fs/ioctl.c:132:
+	struct file * filp;
 	              ^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#350: FILE: fs/ioctl.c:132:
+	struct file * filp;

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#354: FILE: fs/ioctl.c:136:
+	filp = fget_light(fd,&fput_needed);
 	^^^^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#354: FILE: fs/ioctl.c:136:
+	filp = fget_light(fd,&fput_needed);
 	                    ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#354: FILE: fs/ioctl.c:136:
+	filp = fget_light(fd,&fput_needed);
 	                     ^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#355: FILE: fs/ioctl.c:137:
+	if (!filp)
 	     ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#358: FILE: fs/ioctl.c:140:
+	if (!std_sys_ioctl(fd,cmd,arg,filp,&error)) {
 	                              ^^^^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#358: FILE: fs/ioctl.c:140:
+	if (!std_sys_ioctl(fd,cmd,arg,filp,&error)) {
 	                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#358: FILE: fs/ioctl.c:140:
+	if (!std_sys_ioctl(fd,cmd,arg,filp,&error)) {
 	                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#358: FILE: fs/ioctl.c:140:
+	if (!std_sys_ioctl(fd,cmd,arg,filp,&error)) {
 	                             ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#358: FILE: fs/ioctl.c:140:
+	if (!std_sys_ioctl(fd,cmd,arg,filp,&error)) {
 	                                  ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#358: FILE: fs/ioctl.c:140:
+	if (!std_sys_ioctl(fd,cmd,arg,filp,&error)) {
 	                                   ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#358: FILE: fs/ioctl.c:140:
+	if (!std_sys_ioctl(fd,cmd,arg,filp,&error)) {
+		goto out;
+	}

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#363: FILE: fs/ioctl.c:145:
+		error = filp->f_op->ioctl_native(

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#365: FILE: fs/ioctl.c:147:
+				filp, cmd, arg);
 				^^^^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#368: FILE: fs/ioctl.c:150:
+		error = filp->f_op->ioctl(

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#370: FILE: fs/ioctl.c:152:
+				filp, cmd, arg);
 				^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#374: FILE: fs/ioctl.c:156:
+	fput_light(filp,fput_needed);
 	           ^^^^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#374: FILE: fs/ioctl.c:156:
+	fput_light(filp,fput_needed);
 	               ^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#388: FILE: include/linux/ioctl.h:9:
+	struct file * filp, int* error);
 	              ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#388: FILE: include/linux/ioctl.h:9:
+int std_sys_ioctl(unsigned int fd, unsigned int cmd, unsigned long arg,
+	struct file * filp, int* error);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#388: FILE: include/linux/ioctl.h:9:
+	struct file * filp, int* error);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#388: FILE: include/linux/ioctl.h:9:
+	struct file * filp, int* error);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000248269.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 26 errors, 35 warnings, 8 checks, 264 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000248269.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
