WARNING:REPEATED_WORD: Possible repeated word: 'for'
#53: 
I didn't aim for for optimal behaviour before sending this patch out.

WARNING:CONST_STRUCT: struct pipe_buf_operations should normally be const
#94: FILE: fs/pipe.c:110:
+struct pipe_buf_operations anon_pipe_buf_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#121: FILE: fs/tracepipe.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#129: FILE: fs/tracepipe.c:9:
+ * ^I- func in PIPE_WAIT to kick work queue on POLL_OUT after read$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#130: FILE: fs/tracepipe.c:10:
+ * ^I- actually communicate missed to userspace$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#131: FILE: fs/tracepipe.c:11:
+ * ^I- how to specify wrapping or dropping$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#132: FILE: fs/tracepipe.c:12:
+ * ^I- non-temporal stores into bufs$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#133: FILE: fs/tracepipe.c:13:
+ * ^I- let caller reserve space and get a pointer into buf$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#134: FILE: fs/tracepipe.c:14:
+ * ^I- could more aggressively use free space in bufs, but not cheaply$

WARNING:TYPO_SPELLING: 'instaed' may be misspelled - perhaps 'instead'?
#135: FILE: fs/tracepipe.c:15:
+ * 	- per-interrupting state instaed of per cpu
    	                         ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#135: FILE: fs/tracepipe.c:15:
+ * ^I- per-interrupting state instaed of per cpu$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#136: FILE: fs/tracepipe.c:16:
+ * ^I- make sure pages are allocated near cpus$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#137: FILE: fs/tracepipe.c:17:
+ * ^I- if we keep tiny pipe_buffer allocations, use slab$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#138: FILE: fs/tracepipe.c:18:
+ * ^I- {un,}likely() annotation $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#138: FILE: fs/tracepipe.c:18:
+ * ^I- {un,}likely() annotation $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#139: FILE: fs/tracepipe.c:19:
+ * ^I- get some .owner story$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#151: FILE: fs/tracepipe.c:31:
+/* this serializes create, remove, open, and release.. I wonder how $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#152: FILE: fs/tracepipe.c:32:
+ * much is really needed */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#158: FILE: fs/tracepipe.c:38:
+	uint64_t		missed;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#159: FILE: fs/tracepipe.c:39:
+^I/* these are cached to avoid page_address() and some math in the $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#160: FILE: fs/tracepipe.c:40:
+	 * _event() path.. dunno if that's really worth it */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#167: FILE: fs/tracepipe.c:47:
+#define TRACEPIPE_PAGES_PER_CHANNEL ((64 * 1024) / PAGE_SIZE) $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#175: FILE: fs/tracepipe.c:55:
+	 * waiting and full tracking with more forgiving synchronization. */

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#187: FILE: fs/tracepipe.c:67:
+} __attribute__((packed));

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!page"
#215: FILE: fs/tracepipe.c:95:
+		if (page == NULL || buf == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!buf"
#215: FILE: fs/tracepipe.c:95:
+		if (page == NULL || buf == NULL) {

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#234: FILE: fs/tracepipe.c:114:
+	if (buf)
+		kfree(buf);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#243: FILE: fs/tracepipe.c:123:
+ * pipe_inode_info from a work queue.  This should be changed, of course */ $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#243: FILE: fs/tracepipe.c:123:
+ * pipe_inode_info from a work queue.  This should be changed, of course */ 

WARNING:TYPO_SPELLING: 'alloced' may be misspelled - perhaps 'allocated'?
#251: FILE: fs/tracepipe.c:131:
+	int do_wakeup = 0, alloced;
 	                   ^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#255: FILE: fs/tracepipe.c:135:
+^I/* $

WARNING:TYPO_SPELLING: 'defecit' may be misspelled - perhaps 'deficit'?
#261: FILE: fs/tracepipe.c:141:
+	 * to top off the waiting list to fill any existing defecit so it
 	                                                    ^^^^^^^

WARNING:TYPO_SPELLING: 'alloced' may be misspelled - perhaps 'allocated'?
#272: FILE: fs/tracepipe.c:152:
+	alloced = alloc_chan_pages(&pages, TRACEPIPE_PAGES_PER_CHANNEL);
 	^^^^^^^

WARNING:TYPO_SPELLING: 'alloced' may be misspelled - perhaps 'allocated'?
#273: FILE: fs/tracepipe.c:153:
+	if (alloced < 0)
 	    ^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#277: FILE: fs/tracepipe.c:157:
+	 * and teardown the buffers */

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#295: FILE: fs/tracepipe.c:175:
+		       (PIPE_BUFFERS-1));
 		                    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'alloced' may be misspelled - perhaps 'allocated'?
#317: FILE: fs/tracepipe.c:197:
+	if (chan->needed_bufs && alloced) {
 	                         ^^^^^^^

WARNING:TYPO_SPELLING: 'alloced' may be misspelled - perhaps 'allocated'?
#318: FILE: fs/tracepipe.c:198:
+		if (alloced > chan->needed_bufs)
 		    ^^^^^^^

WARNING:TYPO_SPELLING: 'alloced' may be misspelled - perhaps 'allocated'?
#319: FILE: fs/tracepipe.c:199:
+			free_chan_pages(&pages, alloced - chan->needed_bufs);
 			                        ^^^^^^^

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#351: FILE: fs/tracepipe.c:231:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#370: FILE: fs/tracepipe.c:250:
+static int tracepipe_open(struct inode *inode, struct file *filp)
                                                             ^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!chan"
#379: FILE: fs/tracepipe.c:259:
+	if (chan == NULL) {

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#384: FILE: fs/tracepipe.c:264:
+	ret = pipe_read_open(inode, filp);
 	                            ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#399: FILE: fs/tracepipe.c:279:
+		pipe_read_release(inode, filp);
 		                         ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#406: FILE: fs/tracepipe.c:286:
+static int tracepipe_release(struct inode *inode, struct file *filp)
                                                                ^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!chan"
#415: FILE: fs/tracepipe.c:295:
+	if (chan == NULL) {

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#420: FILE: fs/tracepipe.c:300:
+	ret = pipe_read_release(inode, filp);
 	                               ^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#441: FILE: fs/tracepipe.c:321:
+ * be prepended to the bytes as they are copied into the stream.  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#491: FILE: fs/tracepipe.c:371:
+^I^I$

WARNING:CONST_STRUCT: struct file_operations should normally be const
#510: FILE: fs/tracepipe.c:390:
+static struct file_operations tracepipe_fops;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#518: FILE: fs/tracepipe.c:398:
+ * debugfs mount.  $

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!chan"
#537: FILE: fs/tracepipe.c:417:
+	if (chan == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tracepipe_dentry"
#549: FILE: fs/tracepipe.c:429:
+	if (tracepipe_dentry == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tracepipe_dentry"
#551: FILE: fs/tracepipe.c:431:
+		if (tracepipe_dentry == NULL) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#556: FILE: fs/tracepipe.c:436:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#557: FILE: fs/tracepipe.c:437:
+^Ichan->dentry = debugfs_create_file(name, S_IRUSR|S_IFIFO, $

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#557: FILE: fs/tracepipe.c:437:
+	chan->dentry = debugfs_create_file(name, S_IRUSR|S_IFIFO, 
 	                                                ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR' are not preferred. Consider using octal permissions '0400'.
#557: FILE: fs/tracepipe.c:437:
+	chan->dentry = debugfs_create_file(name, S_IRUSR|S_IFIFO, 

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!chan->dentry"
#560: FILE: fs/tracepipe.c:440:
+	if (chan->dentry == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pipe_new"
#566: FILE: fs/tracepipe.c:446:
+	if (pipe_new(inode) == NULL) {

WARNING:NEEDLESS_IF: debugfs_remove(NULL) is safe and this check is probably not required
#583: FILE: fs/tracepipe.c:463:
+			if (chan->dentry)
+				debugfs_remove(chan->dentry);

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#611: FILE: fs/tracepipe.c:491:
+	 * harvest the buffers off the inode and their iput would tear it down.
 	                                               ^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#612: FILE: fs/tracepipe.c:492:
+	 * as one would expect. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#624: FILE: fs/tracepipe.c:504:
+	 * we've torn down things under them */

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#626: FILE: fs/tracepipe.c:506:
+	iput(inode);
 	^^^^

WARNING:NEEDLESS_IF: debugfs_remove(NULL) is safe and this check is probably not required
#652: FILE: fs/tracepipe.c:532:
+	if (tracepipe_dentry)
+		debugfs_remove(tracepipe_dentry);

WARNING:CONST_STRUCT: struct pipe_buf_operations should normally be const
#665: FILE: include/linux/pipe_fs_i.h:59:
+extern struct pipe_buf_operations anon_pipe_buf_ops;

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#666: FILE: include/linux/pipe_fs_i.h:60:
+int pipe_read_open(struct inode *inode, struct file *filp);
                                                      ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#667: FILE: include/linux/pipe_fs_i.h:61:
+int pipe_read_release(struct inode *inode, struct file *filp);
                                                         ^^^^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#675: FILE: include/linux/tracepipe.h:1:
+/*

WARNING:TYPO_SPELLING: 'subsytems' may be misspelled - perhaps 'subsystems'?
#728: FILE: lib/Kconfig.debug:149:
+	  Enable this option to give kernel subsytems the ability to register
 	                                    ^^^^^^^^^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000213574.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 11 errors, 47 warnings, 13 checks, 632 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000213574.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
