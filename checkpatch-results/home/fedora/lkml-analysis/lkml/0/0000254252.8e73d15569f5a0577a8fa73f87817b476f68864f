WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#32: 
> P.S. You should send patches against the memory management to the linux-mm

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#142: FILE: fs/proc/task_mmu.c:40:
+		atomic_read(&mm->mm_rss) << (PAGE_SHIFT-10),
 		                                       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#343: FILE: mm/memory.c:1442:
+	if (!ptep_cmpxchg(mm, page_table, orig_entry, entry))
+	{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#383: FILE: mm/memory.c:1486:
+        pmd_t *pmd, pte_t orig_entry)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#383: FILE: mm/memory.c:1486:
+        pmd_t *pmd, pte_t orig_entry)$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#585: FILE: include/asm-ia64/pgalloc.h:93:
+pgd_test_and_populate (struct mm_struct *mm, pgd_t *pgd_entry, pmd_t *pmd)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#587: FILE: include/asm-ia64/pgalloc.h:95:
+	return ia64_cmpxchg8_acq(pgd_entry,__pa(pmd), PMD_NONE) == PMD_NONE;
 	                                  ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#598: FILE: include/asm-ia64/pgalloc.h:147:
+pmd_test_and_populate (struct mm_struct *mm, pmd_t *pmd_entry, struct page *pte)

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#628: FILE: include/asm-i386/pgtable-3level.h:10:
+ * August 26, 2004 added ptep_cmpxchg and ptep_xchg <christoph@lameter.com>
+*/

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#643: FILE: include/asm-i386/pgtable-3level.h:145:
+	 * (But we also have a cmpxchg8b. Why not use that? (cl))
+	  */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#651: FILE: include/asm-i386/pgtable-3level.h:153:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#657: FILE: include/asm-i386/pgtable-3level.h:159:
+
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse '__vma' - possible side-effects?
#736: FILE: include/asm-generic/pgtable.h:137:
+#define ptep_xchg_flush(__vma, __address, __ptep, __pteval)		\
+({									\
+	pte_t __pte;							\
+	spin_lock(&mm->page_table_lock);				\
+	__pte = ptep_xchg((__vma)->vm_mm, __ptep, __pteval);				\
+	flush_tlb_page(__vma, __address);				\
+	spin_unlock(mm->page_table_lock);				\
+	__pte;								\
+})

CHECK:LINE_SPACING: Please don't use multiple blank lines
#746: FILE: include/asm-generic/pgtable.h:147:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#757: FILE: include/asm-generic/pgtable.h:158:
+
+

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#765: FILE: include/asm-generic/pgtable.h:166:
+	if (rc) set_pte(ptep, newval);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#770: FILE: include/asm-generic/pgtable.h:171:
+static inline int pgd_test_and_populate(struct mm_struct *mm, pgd_t *pgd, pmd_t pmd) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#771: FILE: include/asm-generic/pgtable.h:172:
+static inline int pgd_test_and_populate(struct mm_struct *mm, pgd_t *pgd, pmd_t pmd) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#774: FILE: include/asm-generic/pgtable.h:175:
+	if (rc) pgd_populate(mm, pgd, pmd);

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#778: FILE: include/asm-generic/pgtable.h:179:
+static inline int pgd_test_and_populate(struct mm_struct *mm, pmd_t *pmd, struct page *pte) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#779: FILE: include/asm-generic/pgtable.h:180:
+static inline int pgd_test_and_populate(struct mm_struct *mm, pmd_t *pmd, struct page *pte) {
+

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#782: FILE: include/asm-generic/pgtable.h:183:
+	if (rc) pgd_populate(mm, pmd, pte);

CHECK:MACRO_ARG_REUSE: Macro argument reuse '__vma' - possible side-effects?
#790: FILE: include/asm-generic/pgtable.h:191:
+#define ptep_xchg_flush(__vma, __address, __ptep, __pteval)		\
+({									\
+	pte_t __pte = ptep_xchg((__vma)->vm_mm, __ptep, __pteval);		\
+	flush_tlb_page(__vma, __address);				\
+	__pte;								\
+})

ERROR:SPACING: space required after that ',' (ctx:VxV)
#824: FILE: include/asm-i386/pgtable-2level.h:79:
+#define ptep_xchg(mm,xp,a)       __pte(xchg(&(xp)->pte_low, (a).pte_low))
                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#824: FILE: include/asm-i386/pgtable-2level.h:79:
+#define ptep_xchg(mm,xp,a)       __pte(xchg(&(xp)->pte_low, (a).pte_low))
                        ^

WARNING:LONG_LINE: line length of 121 exceeds 100 columns
#825: FILE: include/asm-i386/pgtable-2level.h:80:
+#define ptep_cmpxchg(mm,xp,oldpte,newpte) (cmpxchg(&(xp)->pte_low, (oldpte).pte_low, (newpte).pte_low)==(oldpte).pte_low)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:SPACING: space required after that ',' (ctx:VxV)
#825: FILE: include/asm-i386/pgtable-2level.h:80:
+#define ptep_cmpxchg(mm,xp,oldpte,newpte) (cmpxchg(&(xp)->pte_low, (oldpte).pte_low, (newpte).pte_low)==(oldpte).pte_low)
                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#825: FILE: include/asm-i386/pgtable-2level.h:80:
+#define ptep_cmpxchg(mm,xp,oldpte,newpte) (cmpxchg(&(xp)->pte_low, (oldpte).pte_low, (newpte).pte_low)==(oldpte).pte_low)
                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#825: FILE: include/asm-i386/pgtable-2level.h:80:
+#define ptep_cmpxchg(mm,xp,oldpte,newpte) (cmpxchg(&(xp)->pte_low, (oldpte).pte_low, (newpte).pte_low)==(oldpte).pte_low)
                                  ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#825: FILE: include/asm-i386/pgtable-2level.h:80:
+#define ptep_cmpxchg(mm,xp,oldpte,newpte) (cmpxchg(&(xp)->pte_low, (oldpte).pte_low, (newpte).pte_low)==(oldpte).pte_low)
                                                                                                       ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'oldpte' - possible side-effects?
#825: FILE: include/asm-i386/pgtable-2level.h:80:
+#define ptep_cmpxchg(mm,xp,oldpte,newpte) (cmpxchg(&(xp)->pte_low, (oldpte).pte_low, (newpte).pte_low)==(oldpte).pte_low)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#869: FILE: include/asm-ia64/pgtable.h:428:
+ptep_xchg (struct mm_struct *mm, pte_t *ptep, pte_t pteval)

CHECK:SPACING: No space is necessary after a cast
#871: FILE: include/asm-ia64/pgtable.h:430:
+	return __pte(xchg((long *) ptep, pteval.pte));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#875: FILE: include/asm-ia64/pgtable.h:434:
+ptep_cmpxchg (struct mm_struct *mm, pte_t *ptep, pte_t oldval, pte_t newval)

WARNING:LONG_LINE_COMMENT: line length of 107 exceeds 100 columns
#900: FILE: fs/proc/array.c:392:
+		mm ? (unsigned long)atomic_read(&mm->mm_rss) : 0, /* you might want to shift this left 3 */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#925: FILE: include/asm-ia64/tlb.h:48:
+#include <asm/atomic.h>

ERROR:SPACING: space prohibited after that open parenthesis '('
#965: FILE: include/asm-i386/pgalloc.h:26:
+	return cmpxchg8b( ((unsigned long long *)pmd), PTE_NONE, _PAGE_TABLE +

CHECK:SPACING: No space is necessary after a cast
#967: FILE: include/asm-i386/pgalloc.h:28:
+			(unsigned long long) PAGE_SHIFT) ) == PTE_NONE;

ERROR:SPACING: space prohibited before that close parenthesis ')'
#967: FILE: include/asm-i386/pgalloc.h:28:
+			(unsigned long long) PAGE_SHIFT) ) == PTE_NONE;

WARNING:LONG_LINE: line length of 116 exceeds 100 columns
#969: FILE: include/asm-i386/pgalloc.h:30:
+	return cmpxchg( (unsigned long *)pmd, PTE_NONE, _PAGE_TABLE + (page_to_pfn(pte) << PAGE_SHIFT)) == PTE_NONE;

ERROR:SPACING: space prohibited after that open parenthesis '('
#969: FILE: include/asm-i386/pgalloc.h:30:
+	return cmpxchg( (unsigned long *)pmd, PTE_NONE, _PAGE_TABLE + (page_to_pfn(pte) << PAGE_SHIFT)) == PTE_NONE;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#980: FILE: include/asm-i386/pgalloc.h:67:
+#define pgd_test_and_populate(mm, pmd, pte)	({ BUG(); 1; })

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:CODE_INDENT: code indent should use tabs where possible
#1038: FILE: mm/rmap.c:512:
+                BUG_ON(pte_file(*pte));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1038: FILE: mm/rmap.c:512:
+                BUG_ON(pte_file(*pte));$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1038: FILE: mm/rmap.c:512:
+                BUG_ON(pte_file(*pte));

CHECK:BRACES: Unbalanced braces around else statement
#1039: FILE: mm/rmap.c:513:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1093: FILE: mm/rmap.c:732:
+			while (atomic_read(&vma->vm_mm->mm_rss) &&
 				cursor < max_nl_cursor &&

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1207: FILE: include/asm-i386/processor.h:660:
+static inline unsigned long __xchg(unsigned long x, volatile void * ptr, int size)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1207: FILE: include/asm-i386/processor.h:660:
+static inline unsigned long __xchg(unsigned long x, volatile void * ptr, int size)

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#1209: FILE: include/asm-i386/processor.h:662:
+	switch (size) {
+		case 1:
[...]
+		case 2:
[...]
+		case 4:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#1212: FILE: include/asm-i386/processor.h:665:
+				:"=q" (x)
 				^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#1213: FILE: include/asm-i386/processor.h:666:
+				:"m" (*__xg(ptr)), "0" (x)
 				^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#1214: FILE: include/asm-i386/processor.h:667:
+				:"memory");
 				^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#1218: FILE: include/asm-i386/processor.h:671:
+				:"=r" (x)
 				^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#1219: FILE: include/asm-i386/processor.h:672:
+				:"m" (*__xg(ptr)), "0" (x)
 				^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#1220: FILE: include/asm-i386/processor.h:673:
+				:"memory");
 				^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#1224: FILE: include/asm-i386/processor.h:677:
+				:"=r" (x)
 				^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#1225: FILE: include/asm-i386/processor.h:678:
+				:"m" (*__xg(ptr)), "0" (x)
 				^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#1226: FILE: include/asm-i386/processor.h:679:
+				:"memory");
 				^

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1242: FILE: include/asm-i386/processor.h:695:
+static inline unsigned long __cmpxchg(volatile void *ptr, unsigned long old,

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1254: FILE: include/asm-i386/processor.h:707:
+	if (cpu_data->x86 > 3) goto have_cmpxchg;

ERROR:SPACING: space prohibited after that '*' (ctx:WxW)
#1260: FILE: include/asm-i386/processor.h:713:
+		prev = * (u8 *)ptr;
 		       ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1261: FILE: include/asm-i386/processor.h:714:
+		if (prev == old) *(u8 *)ptr = new;

ERROR:SPACING: space prohibited after that '*' (ctx:WxW)
#1264: FILE: include/asm-i386/processor.h:717:
+		prev = * (u16 *)ptr;
 		       ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1265: FILE: include/asm-i386/processor.h:718:
+		if (prev == old) *(u16 *)ptr = new;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1268: FILE: include/asm-i386/processor.h:721:
+		if (prev == old) *(u32 *)ptr = new;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1298: FILE: include/asm-i386/processor.h:751:
+static inline unsigned long long cmpxchg8b(volatile unsigned long long *ptr,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1299: FILE: include/asm-i386/processor.h:752:
+static inline unsigned long long cmpxchg8b(volatile unsigned long long *ptr,
+	       unsigned long long old, unsigned long long newv)

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1310: FILE: include/asm-i386/processor.h:763:
+	if (cpu_has(cpu_data, X86_FEATURE_CX8)) goto have_cmpxchg8b;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1315: FILE: include/asm-i386/processor.h:768:
+	if (prev == old) *ptr = newv;

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1322: FILE: include/asm-i386/processor.h:775:
+	 __asm__ __volatile__(

ERROR:CODE_INDENT: code indent should use tabs where possible
#1326: FILE: include/asm-i386/processor.h:779:
+       ^I^I"b" ((unsigned long)(newv & 0xffffffffLL)), "m" (ptr)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1326: FILE: include/asm-i386/processor.h:779:
+       ^I^I"b" ((unsigned long)(newv & 0xffffffffLL)), "m" (ptr)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1326: FILE: include/asm-i386/processor.h:779:
+       ^I^I"b" ((unsigned long)(newv & 0xffffffffLL)), "m" (ptr)$

WARNING:SPACING: space prohibited before semicolon
#1328: FILE: include/asm-i386/processor.h:781:
+	return prev ;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1331: FILE: include/asm-i386/processor.h:784:
+#define cmpxchg(ptr,o,n)\
                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1331: FILE: include/asm-i386/processor.h:784:
+#define cmpxchg(ptr,o,n)\
                      ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#1331: FILE: include/asm-i386/processor.h:784:
+#define cmpxchg(ptr,o,n)\
+	((__typeof__(*(ptr)))__cmpxchg((ptr),(unsigned long)(o),\
+					(unsigned long)(n),sizeof(*(ptr))))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1332: FILE: include/asm-i386/processor.h:785:
+	((__typeof__(*(ptr)))__cmpxchg((ptr),(unsigned long)(o),\
 	                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1333: FILE: include/asm-i386/processor.h:786:
+					(unsigned long)(n),sizeof(*(ptr))))
 					                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1376: FILE: include/asm-x86_64/pgtable.h:440:
+#define ptep_xchg(mm,xp,newval)	__pte(xchg(&(xp)->pte, pte_val(newval))
                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1376: FILE: include/asm-x86_64/pgtable.h:440:
+#define ptep_xchg(mm,xp,newval)	__pte(xchg(&(xp)->pte, pte_val(newval))
                        ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1376: FILE: include/asm-x86_64/pgtable.h:440:
+#define ptep_xchg(mm,xp,newval)	__pte(xchg(&(xp)->pte, pte_val(newval))

WARNING:LONG_LINE: line length of 115 exceeds 100 columns
#1377: FILE: include/asm-x86_64/pgtable.h:441:
+#define ptep_cmpxchg(mm,xp,newval,oldval) (cmpxchg(&(xp)->pte, pte_val(newval), pte_val(oldval) == pte_val(oldval))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1377: FILE: include/asm-x86_64/pgtable.h:441:
+#define ptep_cmpxchg(mm,xp,newval,oldval) (cmpxchg(&(xp)->pte, pte_val(newval), pte_val(oldval) == pte_val(oldval))
                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1377: FILE: include/asm-x86_64/pgtable.h:441:
+#define ptep_cmpxchg(mm,xp,newval,oldval) (cmpxchg(&(xp)->pte, pte_val(newval), pte_val(oldval) == pte_val(oldval))
                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1377: FILE: include/asm-x86_64/pgtable.h:441:
+#define ptep_cmpxchg(mm,xp,newval,oldval) (cmpxchg(&(xp)->pte, pte_val(newval), pte_val(oldval) == pte_val(oldval))
                                  ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1377: FILE: include/asm-x86_64/pgtable.h:441:
+#define ptep_cmpxchg(mm,xp,newval,oldval) (cmpxchg(&(xp)->pte, pte_val(newval), pte_val(oldval) == pte_val(oldval))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'oldval' - possible side-effects?
#1377: FILE: include/asm-x86_64/pgtable.h:441:
+#define ptep_cmpxchg(mm,xp,newval,oldval) (cmpxchg(&(xp)->pte, pte_val(newval), pte_val(oldval) == pte_val(oldval))

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1399: FILE: include/asm-s390/pgtable.h:794:
+static inline int ptep_cmpxchg (struct mm_struct *mm, pte_t *ptep, pte_t oldval, pte_t newval)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1430: FILE: include/asm-s390/pgalloc.h:130:
+	int rc;
+	spin_lock(&mm->page_table_lock);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1432: FILE: include/asm-s390/pgalloc.h:132:
+	rc=pte_same(*pmd, _PAGE_INVALID_EMPTY);
 	  ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1433: FILE: include/asm-s390/pgalloc.h:133:
+	if (rc) pmd_populate(mm, pmd, page);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000254252.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 51 errors, 24 warnings, 18 checks, 1157 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000254252.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
