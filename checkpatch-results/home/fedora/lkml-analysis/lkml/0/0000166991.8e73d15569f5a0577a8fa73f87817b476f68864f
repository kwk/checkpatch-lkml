WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#94: FILE: fs/ext3/balloc.c:721:
+		printk("ext3_new_block: first block allocated:block %d,num %d\n", goal, num);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#96: FILE: fs/ext3/balloc.c:723:
+	while (num < *count && goal < end
+		&& ext3_test_allocatable(goal, bitmap_bh)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#97: FILE: fs/ext3/balloc.c:724:
+		&& ext3_test_allocatable(goal, bitmap_bh)
+		&& claim_block(sb_bgl_lock(EXT3_SB(sb), group), goal, bitmap_bh)) {

WARNING:LONG_LINE: line length of 120 exceeds 100 columns
#103: FILE: fs/ext3/balloc.c:730:
+		printk("ext3_new_block: additional block allocated:block %d,num %d,goal-num %d\n", goal, num, goal-num);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#103: FILE: fs/ext3/balloc.c:730:
+		printk("ext3_new_block: additional block allocated:block %d,num %d,goal-num %d\n", goal, num, goal-num);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#103: FILE: fs/ext3/balloc.c:730:
+		printk("ext3_new_block: additional block allocated:block %d,num %d,goal-num %d\n", goal, num, goal-num);
 		                                                                                                  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#115: FILE: fs/ext3/balloc.c:1019:
+static void try_to_extend_reservation(struct ext3_reserve_window_node *my_rsv,
+			struct super_block *sb, int size)

CHECK:BRACES: braces {} should be used on all arms of this statement
#124: FILE: fs/ext3/balloc.c:1028:
+	if (!next)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#126: FILE: fs/ext3/balloc.c:1030:
+	else {

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#132: FILE: fs/ext3/balloc.c:1036:
+			my_rsv->rsv_end = next_rsv->rsv_start -1 ;
 			                                      ^

WARNING:SPACING: space prohibited before semicolon
#132: FILE: fs/ext3/balloc.c:1036:
+			my_rsv->rsv_end = next_rsv->rsv_start -1 ;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#159: FILE: fs/ext3/balloc.c:1094:
+		ret = ext3_try_to_allocate(sb, handle, group, bitmap_bh, goal,
+					count, NULL);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 31)
#167: FILE: fs/ext3/balloc.c:1124:
+			if (my_rsv->rsv_goal_size < *count)
+                               my_rsv->rsv_goal_size = *count;

ERROR:CODE_INDENT: code indent should use tabs where possible
#168: FILE: fs/ext3/balloc.c:1125:
+                               my_rsv->rsv_goal_size = *count;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#168: FILE: fs/ext3/balloc.c:1125:
+                               my_rsv->rsv_goal_size = *count;$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#170: FILE: fs/ext3/balloc.c:1127:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#178: FILE: fs/ext3/balloc.c:1136:
 		}
+		else {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#178: FILE: fs/ext3/balloc.c:1136:
+		else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#181: FILE: fs/ext3/balloc.c:1139:
+				try_to_extend_reservation(my_rsv, sb,
+					*count-my_rsv->rsv_end+goal-1);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#181: FILE: fs/ext3/balloc.c:1139:
+					*count-my_rsv->rsv_end+goal-1);
 					      ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#181: FILE: fs/ext3/balloc.c:1139:
+					*count-my_rsv->rsv_end+goal-1);
 					                      ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#181: FILE: fs/ext3/balloc.c:1139:
+					*count-my_rsv->rsv_end+goal-1);
 					                           ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#205: FILE: fs/ext3/balloc.c:1208:
+int ext3_new_blocks(handle_t *handle, struct inode *inode,
+			unsigned long goal, unsigned long* count, int *errp)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#205: FILE: fs/ext3/balloc.c:1208:
+			unsigned long goal, unsigned long* count, int *errp)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#262: FILE: fs/ext3/balloc.c:1374:
+		    in_range(target_block, le32_to_cpu(gdp->bg_inode_table),
+			      EXT3_SB(sb)->s_itb_per_group)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#264: FILE: fs/ext3/balloc.c:1376:
+			ext3_error(sb, "ext3_new_block",
+				    "Allocating block in system zone - "

WARNING:SPLIT_STRING: quoted string split across lines
#265: FILE: fs/ext3/balloc.c:1377:
+				    "Allocating block in system zone - "
+				    "block = %u", target_block);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#282: FILE: fs/ext3/balloc.c:1400:
+			if (ext3_test_bit(ret_block++,
+					bh2jh(bitmap_bh)->b_committed_data)) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#283: FILE: fs/ext3/balloc.c:1401:
+				printk("%s: block was unexpectedly set in "

WARNING:SPLIT_STRING: quoted string split across lines
#284: FILE: fs/ext3/balloc.c:1402:
+				printk("%s: block was unexpectedly set in "
+					"b_committed_data\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#284: FILE: fs/ext3/balloc.c:1402:
+					"b_committed_data\n", __FUNCTION__);

ERROR:SPACING: spaces required around that '>=' (ctx:VxW)
#297: FILE: fs/ext3/balloc.c:1414:
+	if (target_block - 1>= le32_to_cpu(es->s_blocks_count)) {
 	                    ^

WARNING:SPLIT_STRING: quoted string split across lines
#302: FILE: fs/ext3/balloc.c:1417:
+			    "block(%d) >= fs blocks count(%d) - "
+			    "block_group = %d, es == %p ", target_block - 1,

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#311: FILE: fs/ext3/balloc.c:1432:
+			cpu_to_le16(le16_to_cpu(gdp->bg_free_blocks_count)-num);
 			                                                  ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#322: FILE: fs/ext3/balloc.c:1446:
+	DQUOT_FREE_BLOCK(inode, *count-num);
 	                              ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#369: FILE: fs/ext3/inode.c:379:
+			printk("ext3_get-Branch failure: key is %d, depth is %d\n",p->key, depth);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#369: FILE: fs/ext3/inode.c:379:
+			printk("ext3_get-Branch failure: key is %d, depth is %d\n",p->key, depth);
 			                                                          ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#402: FILE: fs/ext3/inode.c:571:
 }
+#define GBS_DEBUG	0

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#406: FILE: fs/ext3/inode.c:575:
+static int ext3_alloc_splice_branch(handle_t *handle, struct inode *inode,
+		     unsigned long goal, unsigned long* maxblocks,

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#406: FILE: fs/ext3/inode.c:575:
+		     unsigned long goal, unsigned long* maxblocks,

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#407: FILE: fs/ext3/inode.c:576:
+		     int *offsets, Indirect *branch, unsigned int minblocks)
 		                            ^

CHECK:CAMELCASE: Avoid CamelCase: <Indirect>
#407: FILE: fs/ext3/inode.c:576:
+		     int *offsets, Indirect *branch, unsigned int minblocks)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#435: FILE: fs/ext3/inode.c:604:
+		printk("Come to mballoc: minblocks %d, maxblocks %d \n", minblocks, *maxblocks);

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#435: FILE: fs/ext3/inode.c:604:
+		printk("Come to mballoc: minblocks %d, maxblocks %d \n", minblocks, *maxblocks);

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#455: FILE: fs/ext3/inode.c:624:
+					printk(" meta_num = %d, minblocks :%d\n", meta_num, minblocks);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#455: FILE: fs/ext3/inode.c:624:
+					printk(" meta_num = %d, minblocks :%d\n", meta_num, minblocks);

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#462: FILE: fs/ext3/inode.c:631:
+		}
+		else {

CHECK:BRACES: Unbalanced braces around else statement
#462: FILE: fs/ext3/inode.c:631:
+		else {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#464: FILE: fs/ext3/inode.c:633:
+				printk("count: %d, i:%d, required:%d\n", count, i, required);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#469: FILE: fs/ext3/inode.c:638:
+				printk("ext3 mballoc allocation done. metablocks:%d,"

WARNING:SPLIT_STRING: quoted string split across lines
#470: FILE: fs/ext3/inode.c:639:
+				printk("ext3 mballoc allocation done. metablocks:%d,"
+				"datablocks %d, goal metablocks:%d, goal"

WARNING:SPLIT_STRING: quoted string split across lines
#471: FILE: fs/ext3/inode.c:640:
+				"datablocks %d, goal metablocks:%d, goal"
+				"datablocks:%d\n", meta_num, data_num, minblocks,

WARNING:MISSING_SPACE: break quoted strings at a space character
#471: FILE: fs/ext3/inode.c:640:
+				"datablocks %d, goal metablocks:%d, goal"
+				"datablocks:%d\n", meta_num, data_num, minblocks,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#474: FILE: fs/ext3/inode.c:643:
+				printk("new metablocks are:");

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#475: FILE: fs/ext3/inode.c:644:
+				for (i = 0; i<meta_num; i++)
 				             ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#476: FILE: fs/ext3/inode.c:645:
+					printk("meta[%d]:%d",i, new_meta_blocks[i]);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#476: FILE: fs/ext3/inode.c:645:
+					printk("meta[%d]:%d",i, new_meta_blocks[i]);
 					                    ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#478: FILE: fs/ext3/inode.c:647:
+				printk(" over\n");

ERROR:SPACING: spaces required around that '!=' (ctx:WxV)
#480: FILE: fs/ext3/inode.c:649:
+			if (meta_num !=minblocks) {
 			             ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#481: FILE: fs/ext3/inode.c:650:
+				BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#482: FILE: fs/ext3/inode.c:651:
+				printk("ext3 mballoc error: allocate %d"

WARNING:SPLIT_STRING: quoted string split across lines
#483: FILE: fs/ext3/inode.c:652:
+				printk("ext3 mballoc error: allocate %d"
+					"number of metablocks, different than"

WARNING:MISSING_SPACE: break quoted strings at a space character
#483: FILE: fs/ext3/inode.c:652:
+				printk("ext3 mballoc error: allocate %d"
+					"number of metablocks, different than"

WARNING:SPLIT_STRING: quoted string split across lines
#484: FILE: fs/ext3/inode.c:653:
+					"number of metablocks, different than"
+					"required: %d", meta_num, minblocks);

WARNING:MISSING_SPACE: break quoted strings at a space character
#484: FILE: fs/ext3/inode.c:653:
+					"number of metablocks, different than"
+					"required: %d", meta_num, minblocks);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#498: FILE: fs/ext3/inode.c:667:
+	for (n = 1; n <= meta_num;  n++) {
+

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#504: FILE: fs/ext3/inode.c:673:
+		bh = sb_getblk(inode->i_sb, new_meta_blocks[n-1]);
 		                                             ^

CHECK:SPACING: No space is necessary after a cast
#516: FILE: fs/ext3/inode.c:685:
+		branch[n].p = (__le32*) bh->b_data + offsets[n];

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#516: FILE: fs/ext3/inode.c:685:
+		branch[n].p = (__le32*) bh->b_data + offsets[n];

ERROR:SPACING: space prohibited after that open parenthesis '('
#517: FILE: fs/ext3/inode.c:686:
+		if ( n != meta_num) {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#521: FILE: fs/ext3/inode.c:690:
+		}
+		else {

CHECK:BRACES: Unbalanced braces around else statement
#521: FILE: fs/ext3/inode.c:690:
+		else {

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#527: FILE: fs/ext3/inode.c:696:
+			for (i=0; i < data_num ; i++)
 			      ^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#530: FILE: fs/ext3/inode.c:699:
+		BUFFER_TRACE(bh, "marking uptodate");
 		                          ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:SPACING: space required before the open brace '{'
#543: FILE: fs/ext3/inode.c:712:
+	if (bh){

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around branch[0].p
#550: FILE: fs/ext3/inode.c:719:
+	*(branch[0].p) = branch[0].key;

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#553: FILE: fs/ext3/inode.c:722:
+	 * new data blocks */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:SPACING: space prohibited after that open parenthesis '('
#554: FILE: fs/ext3/inode.c:723:
+	if ( meta_num == 0 )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#554: FILE: fs/ext3/inode.c:723:
+	if ( meta_num == 0 )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#556: FILE: fs/ext3/inode.c:725:
+			*(branch[0].p + i ) = cpu_to_le32(current_block++);

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#559: FILE: fs/ext3/inode.c:728:
+		BUFFER_TRACE(bh, "marking uptodate");
 		                          ^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#561: FILE: fs/ext3/inode.c:730:
+		/*set_buffer_uptodate(bh);
+		unlock_buffer(bh);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#572: FILE: fs/ext3/inode.c:741:
+		for (i=0; i<=meta_num; i++)
 		      ^

ERROR:SPACING: spaces required around that '<=' (ctx:VxV)
#572: FILE: fs/ext3/inode.c:741:
+		for (i=0; i<=meta_num; i++)
 		           ^

WARNING:LONG_LINE: line length of 123 exceeds 100 columns
#573: FILE: fs/ext3/inode.c:742:
+			printk("inode %x, branch[%d].p:%x, branch[%d].key:%d,\n", inode, i, branch[i].p, i, branch[i].key);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#573: FILE: fs/ext3/inode.c:742:
+			printk("inode %x, branch[%d].p:%x, branch[%d].key:%d,\n", inode, i, branch[i].p, i, branch[i].key);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#574: FILE: fs/ext3/inode.c:743:
+		for (i=0; i< data_num - 1; i++)
 		      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxW)
#574: FILE: fs/ext3/inode.c:743:
+		for (i=0; i< data_num - 1; i++)
 		           ^

WARNING:LONG_LINE: line length of 204 exceeds 100 columns
#575: FILE: fs/ext3/inode.c:744:
+			printk("inode %x, branch[%d].p + %d + 1:%x, *(branch[%d].p+%d+1):%d,\n, branch[%d].bh:%x\n", inode, n-1, i, branch[n-1].p + i +1, n-1, i, *(branch[n-1].p+i+1),n-1, branch[n-1].bh);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#575: FILE: fs/ext3/inode.c:744:
+			printk("inode %x, branch[%d].p + %d + 1:%x, *(branch[%d].p+%d+1):%d,\n, branch[%d].bh:%x\n", inode, n-1, i, branch[n-1].p + i +1, n-1, i, *(branch[n-1].p+i+1),n-1, branch[n-1].bh);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#575: FILE: fs/ext3/inode.c:744:
+			printk("inode %x, branch[%d].p + %d + 1:%x, *(branch[%d].p+%d+1):%d,\n, branch[%d].bh:%x\n", inode, n-1, i, branch[n-1].p + i +1, n-1, i, *(branch[n-1].p+i+1),n-1, branch[n-1].bh);
 			                                                                                                     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#575: FILE: fs/ext3/inode.c:744:
+			printk("inode %x, branch[%d].p + %d + 1:%x, *(branch[%d].p+%d+1):%d,\n, branch[%d].bh:%x\n", inode, n-1, i, branch[n-1].p + i +1, n-1, i, *(branch[n-1].p+i+1),n-1, branch[n-1].bh);
 			                                                                                                                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:WxV)
#575: FILE: fs/ext3/inode.c:744:
+			printk("inode %x, branch[%d].p + %d + 1:%x, *(branch[%d].p+%d+1):%d,\n, branch[%d].bh:%x\n", inode, n-1, i, branch[n-1].p + i +1, n-1, i, *(branch[n-1].p+i+1),n-1, branch[n-1].bh);
 			                                                                                                                              ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#575: FILE: fs/ext3/inode.c:744:
+			printk("inode %x, branch[%d].p + %d + 1:%x, *(branch[%d].p+%d+1):%d,\n, branch[%d].bh:%x\n", inode, n-1, i, branch[n-1].p + i +1, n-1, i, *(branch[n-1].p+i+1),n-1, branch[n-1].bh);
 			                                                                                                                                   ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#575: FILE: fs/ext3/inode.c:744:
+			printk("inode %x, branch[%d].p + %d + 1:%x, *(branch[%d].p+%d+1):%d,\n, branch[%d].bh:%x\n", inode, n-1, i, branch[n-1].p + i +1, n-1, i, *(branch[n-1].p+i+1),n-1, branch[n-1].bh);
 			                                                                                                                                                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#575: FILE: fs/ext3/inode.c:744:
+			printk("inode %x, branch[%d].p + %d + 1:%x, *(branch[%d].p+%d+1):%d,\n, branch[%d].bh:%x\n", inode, n-1, i, branch[n-1].p + i +1, n-1, i, *(branch[n-1].p+i+1),n-1, branch[n-1].bh);
 			                                                                                                                                                         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#575: FILE: fs/ext3/inode.c:744:
+			printk("inode %x, branch[%d].p + %d + 1:%x, *(branch[%d].p+%d+1):%d,\n, branch[%d].bh:%x\n", inode, n-1, i, branch[n-1].p + i +1, n-1, i, *(branch[n-1].p+i+1),n-1, branch[n-1].bh);
 			                                                                                                                                                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#575: FILE: fs/ext3/inode.c:744:
+			printk("inode %x, branch[%d].p + %d + 1:%x, *(branch[%d].p+%d+1):%d,\n, branch[%d].bh:%x\n", inode, n-1, i, branch[n-1].p + i +1, n-1, i, *(branch[n-1].p+i+1),n-1, branch[n-1].bh);
 			                                                                                                                                                              ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#575: FILE: fs/ext3/inode.c:744:
+			printk("inode %x, branch[%d].p + %d + 1:%x, *(branch[%d].p+%d+1):%d,\n, branch[%d].bh:%x\n", inode, n-1, i, branch[n-1].p + i +1, n-1, i, *(branch[n-1].p+i+1),n-1, branch[n-1].bh);
 			                                                                                                                                                                ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#575: FILE: fs/ext3/inode.c:744:
+			printk("inode %x, branch[%d].p + %d + 1:%x, *(branch[%d].p+%d+1):%d,\n, branch[%d].bh:%x\n", inode, n-1, i, branch[n-1].p + i +1, n-1, i, *(branch[n-1].p+i+1),n-1, branch[n-1].bh);
 			                                                                                                                                                                            ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#602: FILE: fs/ext3/inode.c:979:
+ext3_count_blocks_to_allocate(Indirect * branch, int k,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#603: FILE: fs/ext3/inode.c:980:
+ext3_count_blocks_to_allocate(Indirect * branch, int k,
+				unsigned long maxblocks, int blocks_to_boundary)

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#607: FILE: fs/ext3/inode.c:984:
+	if (k == 0) return 0;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#613: FILE: fs/ext3/inode.c:990:
+		printk("maxblocks: %d, k: %d, boundary : %d \n",maxblocks, k,

ERROR:SPACING: space required after that ',' (ctx:VxV)
#613: FILE: fs/ext3/inode.c:990:
+		printk("maxblocks: %d, k: %d, boundary : %d \n",maxblocks, k,
 		                                               ^

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#613: FILE: fs/ext3/inode.c:990:
+		printk("maxblocks: %d, k: %d, boundary : %d \n",maxblocks, k,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#614: FILE: fs/ext3/inode.c:991:
+		printk("maxblocks: %d, k: %d, boundary : %d \n",maxblocks, k,
+			blocks_to_boundary);

WARNING:TYPO_SPELLING: 'hanel' may be misspelled - perhaps 'handle'?
#616: FILE: fs/ext3/inode.c:993:
+		/* right now don't hanel cross boundary allocation */
 		                   ^^^^^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#627: FILE: fs/ext3/inode.c:1004:
+	while (count < maxblocks && count <= blocks_to_boundary
+		&& *(branch[0].p + count) == 0) {

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#632: FILE: fs/ext3/inode.c:1009:
+}
+static int

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#634: FILE: fs/ext3/inode.c:1011:
+ext3_get_blocks_handle(handle_t *handle, struct inode *inode, sector_t iblock,
+			unsigned long *maxblocks, struct buffer_head *bh_result,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#650: FILE: fs/ext3/inode.c:1027:
+
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "handle"
#651: FILE: fs/ext3/inode.c:1028:
+	J_ASSERT(handle != NULL || create == 0);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:LONG_LINE: line length of 147 exceeds 100 columns
#654: FILE: fs/ext3/inode.c:1031:
+		printk("ext3_get_blocks_handle: inode %x, maxblocks= %d, iblock = %d, create = %d\n", inode, (int)*maxblocks, (int)iblock, create);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#654: FILE: fs/ext3/inode.c:1031:
+		printk("ext3_get_blocks_handle: inode %x, maxblocks= %d, iblock = %d, create = %d\n", inode, (int)*maxblocks, (int)iblock, create);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ext3_get_blocks_handle', this function's name, in a string
#654: FILE: fs/ext3/inode.c:1031:
+		printk("ext3_get_blocks_handle: inode %x, maxblocks= %d, iblock = %d, create = %d\n", inode, (int)*maxblocks, (int)iblock, create);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#658: FILE: fs/ext3/inode.c:1035:
+		printk ("depth == 0\n");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#658: FILE: fs/ext3/inode.c:1035:
+		printk ("depth == 0\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#662: FILE: fs/ext3/inode.c:1039:
+	partial = ext3_get_branch(inode, depth,
+				offsets, chain, &err);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#665: FILE: fs/ext3/inode.c:1042:
+		first_block = chain[depth-1].key;
 		                         ^

ERROR:SPACING: space prohibited before that '++' (ctx:WxO)
#667: FILE: fs/ext3/inode.c:1044:
+		count ++;
 		      ^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#670: FILE: fs/ext3/inode.c:1047:
+		while (count < *maxblocks && count <= blocks_to_boundary
+			&& (*(chain[depth-1].p+count) == first_block + count)) {

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#670: FILE: fs/ext3/inode.c:1047:
+			&& (*(chain[depth-1].p+count) == first_block + count)) {
 			                 ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#670: FILE: fs/ext3/inode.c:1047:
+			&& (*(chain[depth-1].p+count) == first_block + count)) {
 			                      ^

ERROR:SPACING: space prohibited before that '++' (ctx:WxO)
#671: FILE: fs/ext3/inode.c:1048:
+			count ++;
 			      ^

ERROR:SPACING: space required before the open brace '{'
#677: FILE: fs/ext3/inode.c:1054:
+	if (!create || err == -EIO){

ERROR:CODE_INDENT: code indent should use tabs where possible
#682: FILE: fs/ext3/inode.c:1059:
+  ^I * Okay, we need to do block allocation.  Lazily initialize the block$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#682: FILE: fs/ext3/inode.c:1059:
+  ^I * Okay, we need to do block allocation.  Lazily initialize the block$

ERROR:CODE_INDENT: code indent should use tabs where possible
#685: FILE: fs/ext3/inode.c:1062:
+        if (S_ISREG(inode->i_mode) && (!ei->i_block_alloc_info))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#685: FILE: fs/ext3/inode.c:1062:
+        if (S_ISREG(inode->i_mode) && (!ei->i_block_alloc_info))$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!ei->i_block_alloc_info'
#685: FILE: fs/ext3/inode.c:1062:
+        if (S_ISREG(inode->i_mode) && (!ei->i_block_alloc_info))

ERROR:CODE_INDENT: code indent should use tabs where possible
#686: FILE: fs/ext3/inode.c:1063:
+                ext3_init_block_alloc_info(inode);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#686: FILE: fs/ext3/inode.c:1063:
+                ext3_init_block_alloc_info(inode);$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#694: FILE: fs/ext3/inode.c:1071:
+		printk("blocks to allocate: %d\n", count);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#697: FILE: fs/ext3/inode.c:1074:
+		err = ext3_alloc_splice_branch(handle, inode, goal, &count,
+			offsets+(partial-chain), partial, left-1);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#697: FILE: fs/ext3/inode.c:1074:
+			offsets+(partial-chain), partial, left-1);
 			       ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#697: FILE: fs/ext3/inode.c:1074:
+			offsets+(partial-chain), partial, left-1);
 			                ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#697: FILE: fs/ext3/inode.c:1074:
+			offsets+(partial-chain), partial, left-1);
 			                                      ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#704: FILE: fs/ext3/inode.c:1081:
+	 * concurrent ext3_get_block() -bzzz */

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#727: FILE: fs/ext3/inode.c:1104:
+	map_bh(bh_result, inode->i_sb, le32_to_cpu(chain[depth-1].key));
 	                                                      ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#731: FILE: fs/ext3/inode.c:1108:
+	partial = chain+depth-1; /* the whole chain */
 	               ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#731: FILE: fs/ext3/inode.c:1108:
+	partial = chain+depth-1; /* the whole chain */
 	                     ^

ERROR:SPACING: spaces required around that '||' (ctx:WxV)
#740: FILE: fs/ext3/inode.c:1117:
+	if (GBS_DEBUG1 ||GBS_DEBUG)
 	               ^

WARNING:LONG_LINE: line length of 151 exceeds 100 columns
#741: FILE: fs/ext3/inode.c:1118:
+		printk("ext3_get_blocks_handle returned, logical:%d, physical:%d, count: %d, err is %d\n", (int)iblock, (int) first_block, count, err);

CHECK:SPACING: No space is necessary after a cast
#741: FILE: fs/ext3/inode.c:1118:
+		printk("ext3_get_blocks_handle returned, logical:%d, physical:%d, count: %d, err is %d\n", (int)iblock, (int) first_block, count, err);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#741: FILE: fs/ext3/inode.c:1118:
+		printk("ext3_get_blocks_handle returned, logical:%d, physical:%d, count: %d, err is %d\n", (int)iblock, (int) first_block, count, err);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ext3_get_blocks_handle', this function's name, in a string
#741: FILE: fs/ext3/inode.c:1118:
+		printk("ext3_get_blocks_handle returned, logical:%d, physical:%d, count: %d, err is %d\n", (int)iblock, (int) first_block, count, err);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#747: FILE: fs/ext3/inode.c:1124:
+static int ext3_get_blocks(struct inode *inode, sector_t iblock,
+		unsigned long maxblocks, struct buffer_head *bh_result,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#758: FILE: fs/ext3/inode.c:1135:
+	ret = ext3_get_blocks_handle(handle, inode, iblock, &maxblocks,
 				bh_result, create, 1);

ERROR:CODE_INDENT: code indent should use tabs where possible
#761: FILE: fs/ext3/inode.c:1137:
+        return ret;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#761: FILE: fs/ext3/inode.c:1137:
+        return ret;$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#765: FILE: fs/ext3/inode.c:1141:
+static int ext3_get_block(struct inode *inode, sector_t iblock,
+			struct buffer_head *bh_result, int create)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#768: FILE: fs/ext3/inode.c:1144:
+		printk("ext3_get_block is called\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ext3_get_block', this function's name, in a string
#768: FILE: fs/ext3/inode.c:1144:
+		printk("ext3_get_block is called\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#777: FILE: fs/ext3/inode.c:1151:
+static int ext3_direct_io_get_blocks(struct inode *inode, sector_t iblock,
 		unsigned long max_blocks, struct buffer_head *bh_result,

WARNING:TYPO_SPELLING: 'creat' may be misspelled - perhaps 'create'?
#785: FILE: fs/ext3/inode.c:1187:
+		printk("Calling ext3_get_blocks_handle from dio: maxblocks= %d, iblock = %d, creat = %d\n", (int)max_blocks, (int)iblock, create);
 		                                                                             ^^^^^

WARNING:LONG_LINE: line length of 146 exceeds 100 columns
#785: FILE: fs/ext3/inode.c:1187:
+		printk("Calling ext3_get_blocks_handle from dio: maxblocks= %d, iblock = %d, creat = %d\n", (int)max_blocks, (int)iblock, create);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#785: FILE: fs/ext3/inode.c:1187:
+		printk("Calling ext3_get_blocks_handle from dio: maxblocks= %d, iblock = %d, creat = %d\n", (int)max_blocks, (int)iblock, create);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#789: FILE: fs/ext3/inode.c:1190:
+		ret = ext3_get_blocks_handle(handle, inode, iblock, &max_blocks,
 					bh_result, create, 0);

WARNING:LONG_LINE: line length of 124 exceeds 100 columns
#793: FILE: fs/ext3/inode.c:1193:
+		printk("ext3_get_blocks_handle returns to dio: maxblocks= %d, iblock = %d\n", (int)max_blocks, (int)iblock);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#793: FILE: fs/ext3/inode.c:1193:
+		printk("ext3_get_blocks_handle returns to dio: maxblocks= %d, iblock = %d\n", (int)max_blocks, (int)iblock);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#818: FILE: include/linux/ext3_fs.h:732:
+extern int ext3_new_blocks (handle_t *, struct inode *, unsigned long, unsigned long*, int *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#818: FILE: include/linux/ext3_fs.h:732:
+extern int ext3_new_blocks (handle_t *, struct inode *, unsigned long, unsigned long*, int *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'handle_t *' should also have an identifier name
#818: FILE: include/linux/ext3_fs.h:732:
+extern int ext3_new_blocks (handle_t *, struct inode *, unsigned long, unsigned long*, int *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#818: FILE: include/linux/ext3_fs.h:732:
+extern int ext3_new_blocks (handle_t *, struct inode *, unsigned long, unsigned long*, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#818: FILE: include/linux/ext3_fs.h:732:
+extern int ext3_new_blocks (handle_t *, struct inode *, unsigned long, unsigned long*, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long*' should also have an identifier name
#818: FILE: include/linux/ext3_fs.h:732:
+extern int ext3_new_blocks (handle_t *, struct inode *, unsigned long, unsigned long*, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int *' should also have an identifier name
#818: FILE: include/linux/ext3_fs.h:732:
+extern int ext3_new_blocks (handle_t *, struct inode *, unsigned long, unsigned long*, int *);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000166991.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 34 errors, 68 warnings, 66 checks, 718 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000166991.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
