WARNING:TYPO_SPELLING: 'withotu' may be misspelled - perhaps 'without'?
#40: 
a problem anymore. In practice it wasn't a big problem even withotu
                                                            ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#61: 
--- linux-2.5.43-work/include/linux/gfp.h-MODMAP	2002-10-12 14:46:18.000000000 +0200

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#67: FILE: include/linux/gfp.h:89:
+extern void *alloc_exact(unsigned int size, int gfp);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#68: FILE: include/linux/gfp.h:90:
+extern void free_exact(void * addr, unsigned int size);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#68: FILE: include/linux/gfp.h:90:
+extern void free_exact(void * addr, unsigned int size);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#82: FILE: include/asm-i386/module.h:11:
+/* $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#84: FILE: include/asm-i386/module.h:13:
+ * TLB entries. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#86: FILE: include/asm-i386/module.h:15:
+static inline void *module_map(unsigned long size) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#87: FILE: include/asm-i386/module.h:16:
+{ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#88: FILE: include/asm-i386/module.h:17:
+^Ivoid *p = alloc_exact(size, GFP_KERNEL); $

WARNING:LINE_SPACING: Missing a blank line after declarations
#89: FILE: include/asm-i386/module.h:18:
+	void *p = alloc_exact(size, GFP_KERNEL); 
+	if (!p)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#90: FILE: include/asm-i386/module.h:19:
+^I^Ip = vmalloc(size); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#92: FILE: include/asm-i386/module.h:21:
+} $

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#94: FILE: include/asm-i386/module.h:23:
+static inline void module_unmap (struct module *mod)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#97: FILE: include/asm-i386/module.h:26:
+	unsigned long mptr = (unsigned long)mod;
+	if (mptr >= VMALLOC_START && mptr+mod->size <= VMALLOC_END)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#97: FILE: include/asm-i386/module.h:26:
+	if (mptr >= VMALLOC_START && mptr+mod->size <= VMALLOC_END)
 	                                 ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#98: FILE: include/asm-i386/module.h:27:
+^I^Ivfree(mod); $

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#115: FILE: kernel/ksyms.c:97:
+EXPORT_SYMBOL(free_exact);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#125: FILE: mm/page_alloc.c:481:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#125: FILE: mm/page_alloc.c:481:
+ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#127: FILE: mm/page_alloc.c:483:
+{ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#128: FILE: mm/page_alloc.c:484:
+^Istruct page *p, *w; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#129: FILE: mm/page_alloc.c:485:
+^Iint order = get_order(size); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#133: FILE: mm/page_alloc.c:489:
+^I^Istruct page *end = p + (1UL << order); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#134: FILE: mm/page_alloc.c:490:
+^I^Ifor (w = p+1; w < end; ++w) $

WARNING:LINE_SPACING: Missing a blank line after declarations
#134: FILE: mm/page_alloc.c:490:
+		struct page *end = p + (1UL << order); 
+		for (w = p+1; w < end; ++w) 

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#134: FILE: mm/page_alloc.c:490:
+		for (w = p+1; w < end; ++w) 
 		          ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#135: FILE: mm/page_alloc.c:491:
+^I^I^Iset_page_count(w, 1); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#136: FILE: mm/page_alloc.c:492:
+^I^Ifor (w = p + (size>>PAGE_SHIFT)+1; w < end; ++w) ^I      $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#136: FILE: mm/page_alloc.c:492:
+^I^Ifor (w = p + (size>>PAGE_SHIFT)+1; w < end; ++w) ^I      $

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#136: FILE: mm/page_alloc.c:492:
+		for (w = p + (size>>PAGE_SHIFT)+1; w < end; ++w) 	      
 		                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#136: FILE: mm/page_alloc.c:492:
+		for (w = p + (size>>PAGE_SHIFT)+1; w < end; ++w) 	      
 		                               ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#137: FILE: mm/page_alloc.c:493:
+^I^I^I__free_pages(w, 0); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#138: FILE: mm/page_alloc.c:494:
+^I^Ireturn (void *) page_address(p); $

CHECK:SPACING: No space is necessary after a cast
#138: FILE: mm/page_alloc.c:494:
+		return (void *) page_address(p); 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#139: FILE: mm/page_alloc.c:495:
+^I} $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#142: FILE: mm/page_alloc.c:498:
+} $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#144: FILE: mm/page_alloc.c:500:
+void free_exact(void * addr, unsigned int size)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#145: FILE: mm/page_alloc.c:501:
+{ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#146: FILE: mm/page_alloc.c:502:
+^Istruct page * w; $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#146: FILE: mm/page_alloc.c:502:
+	struct page * w; 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#147: FILE: mm/page_alloc.c:503:
+^Iunsigned long mptr = (unsigned long) addr; $

CHECK:SPACING: No space is necessary after a cast
#147: FILE: mm/page_alloc.c:503:
+	unsigned long mptr = (unsigned long) addr; 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#150: FILE: mm/page_alloc.c:506:
+^Iw = virt_to_page(addr); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#151: FILE: mm/page_alloc.c:507:
+^Ifor (sz = size; sz > 0; sz -= PAGE_SIZE, ++w) { $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#152: FILE: mm/page_alloc.c:508:
+^I^Iif (atomic_read(&w->count) != 1) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#153: FILE: mm/page_alloc.c:509:
+^I^I^IBUG(); $

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#153: FILE: mm/page_alloc.c:509:
+			BUG(); 

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:TRAILING_WHITESPACE: trailing whitespace
#154: FILE: mm/page_alloc.c:510:
+^I^I__free_pages(w, 0); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#155: FILE: mm/page_alloc.c:511:
+^I} ^I$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#155: FILE: mm/page_alloc.c:511:
+^I} ^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#156: FILE: mm/page_alloc.c:512:
+} $

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000421781.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 33 errors, 11 warnings, 8 checks, 87 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000421781.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
