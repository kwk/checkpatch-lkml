WARNING:TYPO_SPELLING: 'seperator' may be misspelled - perhaps 'separator'?
#16: 
Subject: Re: seperator error in __mask_snprintf_len
             ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#87: FILE: lib/bitmap.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#100: FILE: lib/bitmap.c:14:
+#include <asm/uaccess.h>

ERROR:SPACING: space required after that ',' (ctx:VxV)
#104: FILE: lib/bitmap.c:18:
+#define ROUNDUP_POWER2(val,modulus) (((val) + (modulus) - 1) & ~((modulus) - 1))
                           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'modulus' - possible side-effects?
#104: FILE: lib/bitmap.c:18:
+#define ROUNDUP_POWER2(val,modulus) (((val) + (modulus) - 1) & ~((modulus) - 1))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#106: FILE: lib/bitmap.c:20:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'seperated' may be misspelled - perhaps 'separated'?
#115: FILE: lib/bitmap.c:29:
+ * fours seperated by commas.
          ^^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#119: FILE: lib/bitmap.c:33:
+int bitmap_snprintf(char *buf, unsigned int buflen,
+	const unsigned long *maskp, unsigned int nmaskbits)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#121: FILE: lib/bitmap.c:35:
+^Iint i, word, bit, len = 0; $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#137: FILE: lib/bitmap.c:51:
+		len += snprintf(buf+len, buflen-len, "%s%0*lx", sep,
 		                   ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#137: FILE: lib/bitmap.c:51:
+		len += snprintf(buf+len, buflen-len, "%s%0*lx", sep,
 		                               ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#138: FILE: lib/bitmap.c:52:
+			(chunksz+3)/4, val);
 			        ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#138: FILE: lib/bitmap.c:52:
+			(chunksz+3)/4, val);
 			           ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#144: FILE: lib/bitmap.c:58:
+}
+/**

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#145: FILE: lib/bitmap.c:59:
+/**
+* bitmap_parse - convert an ASCII hex string into a bitmap.

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:CODE_INDENT: code indent should use tabs where possible
#158: FILE: lib/bitmap.c:72:
+        unsigned long *maskp, unsigned int nmaskbits)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#158: FILE: lib/bitmap.c:72:
+int bitmap_parse(const char __user *ubuf, unsigned int ubuflen,
+        unsigned long *maskp, unsigned int nmaskbits)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#158: FILE: lib/bitmap.c:72:
+        unsigned long *maskp, unsigned int nmaskbits)$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#168: FILE: lib/bitmap.c:82:
+	i = nt = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#170: FILE: lib/bitmap.c:84:
+		chunk = c = n = 0;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#172: FILE: lib/bitmap.c:86:
+^I^I^Iif (get_user(c, ubuf++)) $

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#187: FILE: lib/bitmap.c:101:
+		if (n==0) {
 		     ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#198: FILE: lib/bitmap.c:112:
+				if (chunk & (1 << j)) {
+					set_bit(j, maskp);
+				}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space prohibited after that open parenthesis '('
#205: FILE: lib/bitmap.c:119:
+			if ( i == nchunks) {

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#224: FILE: include/linux/bitmap.h:157:
+extern int bitmap_snprintf(char *buf, unsigned int buflen,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#225: FILE: include/linux/bitmap.h:158:
+extern int bitmap_snprintf(char *buf, unsigned int buflen,
+	const unsigned long *maskp, unsigned int nmaskbits);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#227: FILE: include/linux/bitmap.h:160:
+extern int bitmap_parse(const char __user *ubuf, unsigned int ubuflen,

ERROR:CODE_INDENT: code indent should use tabs where possible
#228: FILE: include/linux/bitmap.h:161:
+        unsigned long *maskp, unsigned int nmaskbits);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#228: FILE: include/linux/bitmap.h:161:
+extern int bitmap_parse(const char __user *ubuf, unsigned int ubuflen,
+        unsigned long *maskp, unsigned int nmaskbits);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#228: FILE: include/linux/bitmap.h:161:
+        unsigned long *maskp, unsigned int nmaskbits);$

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#256: FILE: include/linux/cpumask.h:40:
+	bitmap_snprintf(buf, buflen, cpus_addr(map), NR_CPUS)

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#260: FILE: include/linux/cpumask.h:43:
+	bitmap_parse(buf, buflen, cpus_addr(map), NR_CPUS)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000311356.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 7 errors, 10 warnings, 15 checks, 175 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000311356.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
