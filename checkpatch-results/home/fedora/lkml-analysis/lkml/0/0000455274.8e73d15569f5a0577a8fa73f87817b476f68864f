WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#30: 
diff --exclude-from=/home/ldb/src/linux-exclude -u -r -N linux-base/Documentation/networking/atmsar.txt linux/Documentation/networking/atmsar.txt

WARNING:TYPO_SPELLING: 'althought' may be misspelled - perhaps 'although'?
#80: FILE: Documentation/networking/atmsar.txt:47:
+althought there are a few assumptions.
 ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#88: FILE: Documentation/networking/atmsar.txt:55:
+The decode functions have no assumptions. Both decode functions need to be $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#89: FILE: Documentation/networking/atmsar.txt:56:
+repeated until they return NULL.  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#91: FILE: Documentation/networking/atmsar.txt:58:
+atmsar_decode_rawcell() requires a LIST of atmsar_vcc's. This allows the user $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#92: FILE: Documentation/networking/atmsar.txt:59:
+to pass in any cells they received, atmsar_decode_rawcell() will drop the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#93: FILE: Documentation/networking/atmsar.txt:60:
+ones it doesn't know, the others are copied into the relevant atmsar_vcc $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#95: FILE: Documentation/networking/atmsar.txt:62:
+moment) it will return a pointer to that buffer when a complete AAL5 pdu $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#96: FILE: Documentation/networking/atmsar.txt:63:
+has been received. The third argument will contains a pointer the relevant $

WARNING:TYPO_SPELLING: 'CAREFULL' may be misspelled - perhaps 'CAREFUL'?
#112: FILE: Documentation/networking/atmsar.txt:79:
+BE CAREFULL!!  the atmsar_open function will copy the alloc_tx pointer from
    ^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#113: FILE: Documentation/networking/atmsar.txt:80:
+the atm_vcc and call it!  You cannot set the alloc_tx function in the vcc $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#142: FILE: include/linux/atmsar.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#152: FILE: include/linux/atmsar.h:11:
+ *  $

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#154: FILE: include/linux/atmsar.h:13:
+ *  along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#155: FILE: include/linux/atmsar.h:14:
+ *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#173: FILE: include/linux/atmsar.h:32:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#181: FILE: include/linux/atmsar.h:40:
+
+

WARNING:NEW_TYPEDEFS: do not add new typedefs
#189: FILE: include/linux/atmsar.h:48:
+typedef struct atmsar_vcc_data {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#190: FILE: include/linux/atmsar.h:49:
+  struct atmsar_vcc_data   *next;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#193: FILE: include/linux/atmsar.h:52:
+  int                flags;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#194: FILE: include/linux/atmsar.h:53:
+  int                type;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#197: FILE: include/linux/atmsar.h:56:
+  struct sk_buff    *(*alloc_tx)(struct atm_vcc *vcc, unsigned int size);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#198: FILE: include/linux/atmsar.h:57:
+  struct atm_vcc    *vcc;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#199: FILE: include/linux/atmsar.h:58:
+  struct k_atm_aal_stats *stats;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#200: FILE: include/linux/atmsar.h:59:
+  unsigned short     mtu; /* max is actually  65k for AAL5... */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#203: FILE: include/linux/atmsar.h:62:
+  unsigned int       vp;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#204: FILE: include/linux/atmsar.h:63:
+  unsigned int       vc;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#205: FILE: include/linux/atmsar.h:64:
+  unsigned char      gfc;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#206: FILE: include/linux/atmsar.h:65:
+  unsigned char      pti;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#207: FILE: include/linux/atmsar.h:66:
+  unsigned int       headerFlags;$

CHECK:CAMELCASE: Avoid CamelCase: <headerFlags>
#207: FILE: include/linux/atmsar.h:66:
+  unsigned int       headerFlags;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#208: FILE: include/linux/atmsar.h:67:
+  unsigned long      atmHeader;$

CHECK:CAMELCASE: Avoid CamelCase: <atmHeader>
#208: FILE: include/linux/atmsar.h:67:
+  unsigned long      atmHeader;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#209: FILE: include/linux/atmsar.h:68:
+   $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#209: FILE: include/linux/atmsar.h:68:
+   $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#211: FILE: include/linux/atmsar.h:70:
+  struct sk_buff    *reasBuffer;$

CHECK:CAMELCASE: Avoid CamelCase: <reasBuffer>
#211: FILE: include/linux/atmsar.h:70:
+  struct sk_buff    *reasBuffer;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#212: FILE: include/linux/atmsar.h:71:
+  } atmsar_vcc_data_t;$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#214: FILE: include/linux/atmsar.h:73:
+
+

WARNING:LONG_LINE: line length of 167 exceeds 100 columns
#215: FILE: include/linux/atmsar.h:74:
+extern struct atmsar_vcc_data *atmsar_open (struct atmsar_vcc_data **list, struct atm_vcc *vcc, uint type, ushort vpi, ushort vci, unchar pti, unchar gfc, uint flags);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#215: FILE: include/linux/atmsar.h:74:
+extern struct atmsar_vcc_data *atmsar_open (struct atmsar_vcc_data **list, struct atm_vcc *vcc, uint type, ushort vpi, ushort vci, unchar pti, unchar gfc, uint flags);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#215: FILE: include/linux/atmsar.h:74:
+extern struct atmsar_vcc_data *atmsar_open (struct atmsar_vcc_data **list, struct atm_vcc *vcc, uint type, ushort vpi, ushort vci, unchar pti, unchar gfc, uint flags);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#216: FILE: include/linux/atmsar.h:75:
+extern void                    atmsar_close(struct atmsar_vcc_data **list, struct atmsar_vcc_data *vcc);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#216: FILE: include/linux/atmsar.h:75:
+extern void                    atmsar_close(struct atmsar_vcc_data **list, struct atmsar_vcc_data *vcc);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#218: FILE: include/linux/atmsar.h:77:
+extern struct sk_buff *atmsar_encode_rawcell (struct atmsar_vcc_data *ctx, struct sk_buff *skb);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#218: FILE: include/linux/atmsar.h:77:
+extern struct sk_buff *atmsar_encode_rawcell (struct atmsar_vcc_data *ctx, struct sk_buff *skb);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#219: FILE: include/linux/atmsar.h:78:
+extern struct sk_buff *atmsar_encode_aal5    (struct atmsar_vcc_data *ctx, struct sk_buff *skb);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#219: FILE: include/linux/atmsar.h:78:
+extern struct sk_buff *atmsar_encode_aal5    (struct atmsar_vcc_data *ctx, struct sk_buff *skb);

WARNING:LONG_LINE: line length of 120 exceeds 100 columns
#221: FILE: include/linux/atmsar.h:80:
+struct sk_buff *atmsar_decode_rawcell (struct atmsar_vcc_data *list, struct sk_buff *skb, struct atmsar_vcc_data **ctx);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#221: FILE: include/linux/atmsar.h:80:
+struct sk_buff *atmsar_decode_rawcell (struct atmsar_vcc_data *list, struct sk_buff *skb, struct atmsar_vcc_data **ctx);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#222: FILE: include/linux/atmsar.h:81:
+struct sk_buff *atmsar_decode_aal5    (struct atmsar_vcc_data *ctx,  struct sk_buff *skb);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#249: FILE: net/atm/atmsar.c:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#250: FILE: net/atm/atmsar.c:2:
+ *  General SAR library for ATM devices. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#251: FILE: net/atm/atmsar.c:3:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#260: FILE: net/atm/atmsar.c:12:
+ *  $

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#262: FILE: net/atm/atmsar.c:14:
+ *  along with this program; if not, write to the Free Software$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#263: FILE: net/atm/atmsar.c:15:
+ *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA. $

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#263: FILE: net/atm/atmsar.c:15:
+ *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA. $

ERROR:CODE_INDENT: code indent should use tabs where possible
#266: FILE: net/atm/atmsar.c:18:
+        - shift expressions relaced with byteswap functions$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:CODE_INDENT: code indent should use tabs where possible
#268: FILE: net/atm/atmsar.c:20:
+        - adaptations for inclusion in kernel tree$

WARNING:TYPO_SPELLING: 'multple' may be misspelled - perhaps 'multiple'?
#273: FILE: net/atm/atmsar.c:25:
+	- Fixed bug when input skb did not contain a multple of 52/53 bytes.
 	                                             ^^^^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#285: FILE: net/atm/atmsar.c:37:
+          (reported by  Piers Scannell <email@lot105.com> )$

WARNING:TYPO_SPELLING: 'dependancy' may be misspelled - perhaps 'dependency'?
#290: FILE: net/atm/atmsar.c:42:
+	- removed dependancy on alloc_tx. tis presented problems when using
 	          ^^^^^^^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#294: FILE: net/atm/atmsar.c:46:
+        - added AAL0 reassembly$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#295: FILE: net/atm/atmsar.c:47:
+        - added alloc_tx support                  $

ERROR:CODE_INDENT: code indent should use tabs where possible
#295: FILE: net/atm/atmsar.c:47:
+        - added alloc_tx support                  $

ERROR:CODE_INDENT: code indent should use tabs where possible
#296: FILE: net/atm/atmsar.c:48:
+        - replaced alloc_skb in decode functions to dev_alloc_skb to allow$

ERROR:CODE_INDENT: code indent should use tabs where possible
#297: FILE: net/atm/atmsar.c:49:
+                 calling from interrupt$

WARNING:TYPO_SPELLING: 'embarassing' may be misspelled - perhaps 'embarrassing'?
#298: FILE: net/atm/atmsar.c:50:
+        - fixed embarassing AAL5 bug. I was setting the pti bit in the wrong
                 ^^^^^^^^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#298: FILE: net/atm/atmsar.c:50:
+        - fixed embarassing AAL5 bug. I was setting the pti bit in the wrong$

ERROR:CODE_INDENT: code indent should use tabs where possible
#299: FILE: net/atm/atmsar.c:51:
+                byte...$

ERROR:CODE_INDENT: code indent should use tabs where possible
#300: FILE: net/atm/atmsar.c:52:
+        - fixed another emabrassing bug.. picked up the wrong crc type and$

ERROR:CODE_INDENT: code indent should use tabs where possible
#301: FILE: net/atm/atmsar.c:53:
+                forgot to invert the crc result...$

ERROR:CODE_INDENT: code indent should use tabs where possible
#302: FILE: net/atm/atmsar.c:54:
+        - fixed AAL5 length calculations.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#303: FILE: net/atm/atmsar.c:55:
+        - removed automatic skb freeing from encode functions.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#304: FILE: net/atm/atmsar.c:56:
+                This caused problems because i did kfree_skb it, while it$

ERROR:CODE_INDENT: code indent should use tabs where possible
#305: FILE: net/atm/atmsar.c:57:
+                needed to be popped. I cannot determine though whether it$

ERROR:CODE_INDENT: code indent should use tabs where possible
#306: FILE: net/atm/atmsar.c:58:
+                needs to be popped or not. Figu'e it out ye'self ;-)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#307: FILE: net/atm/atmsar.c:59:
+        - added mru field. This is the buffersize. sarlib_decode_aal0 will$

ERROR:CODE_INDENT: code indent should use tabs where possible
#308: FILE: net/atm/atmsar.c:60:
+                use when it allocates a receive buffer. A stop gap for real$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#325: FILE: net/atm/atmsar.c:77:
+#define atomic_add(i,v)  *(v) += i
                     ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#325: FILE: net/atm/atmsar.c:77:
+#define atomic_add(i,v)  *(v) += i

ERROR:SPACING: space prohibited before that '++' (ctx:WxE)
#326: FILE: net/atm/atmsar.c:78:
+#define atomic_inc(v)    *(v) ++
                               ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#326: FILE: net/atm/atmsar.c:78:
+#define atomic_inc(v)    *(v) ++

CHECK:CAMELCASE: Avoid CamelCase: <Malloc>
#328: FILE: net/atm/atmsar.c:80:
+#define Malloc(size)  malloc(size)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#345: FILE: net/atm/atmsar.c:97:
+/*
+  1. the atmsar_vcc_data list pointer MUST be initialized to NULL

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:POINTER_LOCATION: "(foo**)" should be "(foo **)"
#364: FILE: net/atm/atmsar.c:116:
+#define ADD_HEADER(dest, header) *(*(u32**)&dest)++ = cpu_to_be32(header)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#364: FILE: net/atm/atmsar.c:116:
+#define ADD_HEADER(dest, header) *(*(u32**)&dest)++ = cpu_to_be32(header)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'dest' may be better as '(dest)' to avoid precedence issues
#364: FILE: net/atm/atmsar.c:116:
+#define ADD_HEADER(dest, header) *(*(u32**)&dest)++ = cpu_to_be32(header)

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#367: FILE: net/atm/atmsar.c:119:
+/*
+ * CRC Routines from  net/wan/sbni.c)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#372: FILE: net/atm/atmsar.c:124:
+#define CRC32(c,crc) (crc32tab[((size_t)(crc>>24) ^ (c)) & 0xff] ^ (((crc) << 8)))
                ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#372: FILE: net/atm/atmsar.c:124:
+#define CRC32(c,crc) (crc32tab[((size_t)(crc>>24) ^ (c)) & 0xff] ^ (((crc) << 8)))
                                             ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'crc' - possible side-effects?
#372: FILE: net/atm/atmsar.c:124:
+#define CRC32(c,crc) (crc32tab[((size_t)(crc>>24) ^ (c)) & 0xff] ^ (((crc) << 8)))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'crc' may be better as '(crc)' to avoid precedence issues
#372: FILE: net/atm/atmsar.c:124:
+#define CRC32(c,crc) (crc32tab[((size_t)(crc>>24) ^ (c)) & 0xff] ^ (((crc) << 8)))

CHECK:ARCH_DEFINES: architecture specific defines should be avoided
#442: FILE: net/atm/atmsar.c:194:
+#if defined(__i386__)

Architecture specific defines should be avoided wherever
possible.

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#444: FILE: net/atm/atmsar.c:196:
+calc_crc(char *mem, int len, unsigned initial)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#446: FILE: net/atm/atmsar.c:198:
+	unsigned crc, dummy_len;

WARNING:LONG_LINE: line length of 218 exceeds 100 columns
#447: FILE: net/atm/atmsar.c:199:
+      __asm__("xorl %%eax,%%eax\n\t" "1:\n\t" "movl %%edx,%%eax\n\t" "shrl $16,%%eax\n\t" "lodsb\n\t" "xorb %%ah,%%al\n\t" "andl $255,%%eax\n\t" "shll $8,%%edx\n\t" "xorl (%%edi,%%eax,4),%%edx\n\t" "loop 1b":"=d"(crc),

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#447: FILE: net/atm/atmsar.c:199:
+      __asm__("xorl %%eax,%%eax\n\t" "1:\n\t" "movl %%edx,%%eax\n\t" "shrl $16,%%eax\n\t" "lodsb\n\t" "xorb %%ah,%%al\n\t" "andl $255,%%eax\n\t" "shll $8,%%edx\n\t" "xorl (%%edi,%%eax,4),%%edx\n\t" "loop 1b":"=d"(crc),$

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#447: FILE: net/atm/atmsar.c:199:
+      __asm__("xorl %%eax,%%eax\n\t" "1:\n\t" "movl %%edx,%%eax\n\t" "shrl $16,%%eax\n\t" "lodsb\n\t" "xorb %%ah,%%al\n\t" "andl $255,%%eax\n\t" "shll $8,%%edx\n\t" "xorl (%%edi,%%eax,4),%%edx\n\t" "loop 1b":"=d"(crc),
                                                                                                                                                                                                                ^

WARNING:STRING_FRAGMENTS: Consecutive strings are generally better as a single string
#447: FILE: net/atm/atmsar.c:199:
+      __asm__("xorl %%eax,%%eax\n\t" "1:\n\t" "movl %%edx,%%eax\n\t" "shrl $16,%%eax\n\t" "lodsb\n\t" "xorb %%ah,%%al\n\t" "andl $255,%%eax\n\t" "shll $8,%%edx\n\t" "xorl (%%edi,%%eax,4),%%edx\n\t" "loop 1b":"=d"(crc),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#448: FILE: net/atm/atmsar.c:200:
+      __asm__("xorl %%eax,%%eax\n\t" "1:\n\t" "movl %%edx,%%eax\n\t" "shrl $16,%%eax\n\t" "lodsb\n\t" "xorb %%ah,%%al\n\t" "andl $255,%%eax\n\t" "shll $8,%%edx\n\t" "xorl (%%edi,%%eax,4),%%edx\n\t" "loop 1b":"=d"(crc),
+		"=c"

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#450: FILE: net/atm/atmsar.c:202:
+      :^I"S"(mem), "D"(&crc32tab[0]), "1"(len), "0"(initial)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#451: FILE: net/atm/atmsar.c:203:
+      :^I"eax");$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#462: FILE: net/atm/atmsar.c:214:
+calc_crc(char *mem, int len, unsigned initial)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#464: FILE: net/atm/atmsar.c:216:
+	unsigned crc;

WARNING:LINE_SPACING: Missing a blank line after declarations
#465: FILE: net/atm/atmsar.c:217:
+	unsigned crc;
+	crc = initial;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#467: FILE: net/atm/atmsar.c:219:
+	for (; len; mem++, len--) {
+		crc = CRC32(*mem, crc);
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space prohibited after that open parenthesis '('
#474: FILE: net/atm/atmsar.c:226:
+#define crc32( crc, mem, len) calc_crc(mem, len, crc);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#474: FILE: net/atm/atmsar.c:226:
+#define crc32( crc, mem, len) calc_crc(mem, len, crc);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#484: FILE: net/atm/atmsar.c:236:
+		printk_dbg("sorry: tx_inuse = %d, size = %d, sndbuf = %d",
+			    atomic_read(&vcc->tx_inuse), size, vcc->sk->sndbuf);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#538: FILE: net/atm/atmsar.c:290:
+	new = kmalloc(sizeof (struct atmsar_vcc_data), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*new)...) over kmalloc(sizeof (struct atmsar_vcc_data)...)
#538: FILE: net/atm/atmsar.c:290:
+	new = kmalloc(sizeof (struct atmsar_vcc_data), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#546: FILE: net/atm/atmsar.c:298:
+	memset(new, 0, sizeof (struct atmsar_vcc_data));

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#549: FILE: net/atm/atmsar.c:301:
+/*
+ * This gives problems with the ATM layer alloc_tx().

ERROR:TRAILING_WHITESPACE: trailing whitespace
#551: FILE: net/atm/atmsar.c:303:
+ * some reason this is used in interurpt context $

CHECK:SPACING: No space is necessary after a cast
#587: FILE: net/atm/atmsar.c:339:
+	new->atmHeader = ((unsigned long) gfc << ATM_HDR_GFC_SHIFT)

CHECK:SPACING: No space is necessary after a cast
#588: FILE: net/atm/atmsar.c:340:
+	    | ((unsigned long) vpi << ATM_HDR_VPI_SHIFT)

CHECK:SPACING: No space is necessary after a cast
#589: FILE: net/atm/atmsar.c:341:
+	    | ((unsigned long) vci << ATM_HDR_VCI_SHIFT)

CHECK:SPACING: No space is necessary after a cast
#590: FILE: net/atm/atmsar.c:342:
+	    | ((unsigned long) pti << ATM_HDR_PTI_SHIFT);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#599: FILE: net/atm/atmsar.c:351:
+	printk_dbg("allocated new atmsar vcc 0x%p with vp %d vc %d", new, vpi,
+		    vci);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#612: FILE: net/atm/atmsar.c:364:
+		for (work = *list; work && work->next && (work->next != vcc);
+		     work = work->next) ;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:SPACING: space prohibited before semicolon
#613: FILE: net/atm/atmsar.c:365:
+		     work = work->next) ;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#622: FILE: net/atm/atmsar.c:374:
+	if (vcc->reasBuffer) {
+		dev_kfree_skb(vcc->reasBuffer);
+	}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#627: FILE: net/atm/atmsar.c:379:
+	printk_dbg("allocated atmsar vcc 0x%p with vp %d vc %d", vcc, vcc->vp,
+		    vcc->vc);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#652: FILE: net/atm/atmsar.c:404:
+	if (skb_cloned(skb)
+	    || (skb_headroom(skb) <

CHECK:SPACING: No space is necessary after a cast
#681: FILE: net/atm/atmsar.c:433:
+			*target++ = (char) 0xEC;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#686: FILE: net/atm/atmsar.c:438:
+			printk_dbg("source 0x=%p, target 0x%p", source,
+				    target);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#695: FILE: net/atm/atmsar.c:447:
+			printk_dbg("source 0x=%p, target 0x%p", source,
+				    target);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ctx->type <= ATMSAR_TYPE_AAL1'
#706: FILE: net/atm/atmsar.c:458:
+	if (ctx->stats && (ctx->type <= ATMSAR_TYPE_AAL1))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around ctx->stats->tx
#707: FILE: net/atm/atmsar.c:459:
+		atomic_add(number_of_cells, &(ctx->stats->tx));

WARNING:LINE_SPACING: Missing a blank line after declarations
#729: FILE: net/atm/atmsar.c:481:
+		struct sk_buff *out;
+		printk_dbg

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#739: FILE: net/atm/atmsar.c:491:
+		printk_dbg("pdu length %d, allocated length %d", skb->len,
+			    length);

CHECK:SPACING: No space is necessary after a cast
#757: FILE: net/atm/atmsar.c:509:
+	*trailer++ = (unsigned char) 0;	/* UU  = 0 */

CHECK:SPACING: No space is necessary after a cast
#758: FILE: net/atm/atmsar.c:510:
+	*trailer++ = (unsigned char) 0;	/* CPI = 0 */

CHECK:SPACING: No space is necessary after a cast
#759: FILE: net/atm/atmsar.c:511:
+	*(*(u16 **) & trailer)++ = cpu_to_be16(pdu_length);

ERROR:SPACING: space prohibited after that '&' (ctx:WxW)
#759: FILE: net/atm/atmsar.c:511:
+	*(*(u16 **) & trailer)++ = cpu_to_be16(pdu_length);
 	            ^

CHECK:SPACING: No space is necessary after a cast
#761: FILE: net/atm/atmsar.c:513:
+	*(*(u32 **) & trailer)++ = cpu_to_be32(crc);

ERROR:SPACING: space prohibited after that '&' (ctx:WxW)
#761: FILE: net/atm/atmsar.c:513:
+	*(*(u32 **) & trailer)++ = cpu_to_be32(crc);
 	            ^

CHECK:SPACING: No space is necessary after a cast
#785: FILE: net/atm/atmsar.c:537:
+		unsigned long atmHeader = be32_to_cpu(*(u32 *) cell);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#798: FILE: net/atm/atmsar.c:550:
+		for (;
[...]
+			 (atmHeader & ATM_HDR_VPVC_MASK)); vcc = vcc->next) ;

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#800: FILE: net/atm/atmsar.c:552:
+		     vcc
+		     && ((vcc->atmHeader & ATM_HDR_VPVC_MASK) !=

WARNING:SPACING: space prohibited before semicolon
#801: FILE: net/atm/atmsar.c:553:
+			 (atmHeader & ATM_HDR_VPVC_MASK)); vcc = vcc->next) ;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#804: FILE: net/atm/atmsar.c:556:
+		printk_dbg("found vcc %p for packet on vp %d, vc %d", vcc,
+			    (int) ((atmHeader & ATM_HDR_VPI_MASK) >>

CHECK:SPACING: No space is necessary after a cast
#804: FILE: net/atm/atmsar.c:556:
+			    (int) ((atmHeader & ATM_HDR_VPI_MASK) >>

CHECK:SPACING: No space is necessary after a cast
#806: FILE: net/atm/atmsar.c:558:
+			    (int) ((atmHeader & ATM_HDR_VCI_MASK) >>

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#810: FILE: net/atm/atmsar.c:562:
+		if (vcc
+		    && (skb->len >=

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#827: FILE: net/atm/atmsar.c:579:
+						if (vcc->stats)

Indentation with 6 or more tabs usually indicate overly indented
code.

It is suggested to refactor excessive indentation of
if/else/for/do/while/switch statements.

See: https://lore.kernel.org/lkml/1328311239.21255.24.camel@joe2Laptop/

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'vcc->stats->rx'
#829: FILE: net/atm/atmsar.c:581:
+							atomic_inc(&vcc->stats->
+								   rx);

A single dereferencing identifier spanned on multiple lines like::

  struct_identifier->member[index].
  member = <foo>;

is generally hard to follow. It can easily lead to typos and so makes
the code vulnerable to bugs.

If fixing the multiple line dereferencing leads to an 80 column
violation, then either rewrite the code in a more simple way or if the
starting part of the dereferencing identifier is the same and used at
multiple places then store it in a temporary variable, and use that
temporary variable only at all the places. For example, if there are
two dereferencing identifiers::

  member1->member2->member3.foo1;
  member1->member2->member3.foo2;

then store the member1->member2->member3 part in a temporary variable.
It not only helps to avoid the 80 column violation but also reduces
the program size by removing the unnecessary dereferences.

But if none of the above methods work then ignore the 80 column
violation because it is much easier to read a dereferencing identifier
on a single line.

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'vcc->flags'
#833: FILE: net/atm/atmsar.c:585:
+							 (vcc->
+							  flags &

WARNING:LONG_LINE_STRING: line length of 104 exceeds 100 columns
#837: FILE: net/atm/atmsar.c:589:
+						    ("returns ATMSAR_TYPE_AAL0 pdu 0x%p with length %d",

A string starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE_COMMENT: line length of 106 exceeds 100 columns
#852: FILE: net/atm/atmsar.c:604:
+				/* if alloc fails, we just drop the cell. it is possible that we can still

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:TRAILING_WHITESPACE: trailing whitespace
#853: FILE: net/atm/atmsar.c:605:
+^I^I^I^I * receive cells on other vcc's $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'vcc->reasBuffer->len'
#857: FILE: net/atm/atmsar.c:609:
+					if ((vcc->reasBuffer->len) >
+					    (vcc->mtu - 48))

WARNING:LONG_LINE_COMMENT: line length of 105 exceeds 100 columns
#871: FILE: net/atm/atmsar.c:623:
+						/* buffer will always have at least one whole cell, so */

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'vcc->flags'
#875: FILE: net/atm/atmsar.c:627:
+							 (vcc->
+							  flags &

WARNING:LONG_LINE_STRING: line length of 104 exceeds 100 columns
#883: FILE: net/atm/atmsar.c:635:
+						    ("returns ATMSAR_TYPE_AAL5 pdu 0x%p with length %d",

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'vcc->flags'
#895: FILE: net/atm/atmsar.c:647:
+				 (vcc->
+				  flags & ATMSAR_USE_53BYTE_CELL ? 53 : 52));

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'list->flags'
#901: FILE: net/atm/atmsar.c:653:
+			     (list->
+			      flags & ATMSAR_USE_53BYTE_CELL ? 53 : 52)) ==

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'atmsar_decode_aal5', this function's name, in a string
#917: FILE: net/atm/atmsar.c:669:
+	printk_dbg("atmsar_decode_aal5 (0x%p, 0x%p) called", ctx, skb);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:SPACING: No space is necessary after a cast
#922: FILE: net/atm/atmsar.c:674:
+	length = be16_to_cpu(*(u16 *) (skb->tail - 6));

CHECK:SPACING: No space is necessary after a cast
#923: FILE: net/atm/atmsar.c:675:
+	pdu_crc = be32_to_cpu(*(u32 *) (skb->tail - 4));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#940: FILE: net/atm/atmsar.c:692:
+		printk_dbg("warning: readjusting illegal size %d -> %d",
+			    skb->len, pdu_length);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'atmsar_decode_aal5', this function's name, in a string
#966: FILE: net/atm/atmsar.c:718:
+	printk_dbg("atmsar_decode_aal5 returns pdu 0x%p with length %d", skb,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#967: FILE: net/atm/atmsar.c:719:
+	printk_dbg("atmsar_decode_aal5 returns pdu 0x%p with length %d", skb,
+		    skb->len);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#971: FILE: net/atm/atmsar.c:723:
+EXPORT_SYMBOL(atmsar_open);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#972: FILE: net/atm/atmsar.c:724:
+EXPORT_SYMBOL(atmsar_close);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#973: FILE: net/atm/atmsar.c:725:
+EXPORT_SYMBOL(atmsar_encode_rawcell);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#974: FILE: net/atm/atmsar.c:726:
+EXPORT_SYMBOL(atmsar_encode_aal5);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#975: FILE: net/atm/atmsar.c:727:
+EXPORT_SYMBOL(atmsar_decode_rawcell);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#976: FILE: net/atm/atmsar.c:728:
+EXPORT_SYMBOL(atmsar_decode_aal5);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#977: FILE: net/atm/atmsar.c:729:
+EXPORT_SYMBOL(atmsar_alloc_tx);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000455274.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 51 errors, 73 warnings, 48 checks, 932 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000455274.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
