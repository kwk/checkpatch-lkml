WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#55: 
In addition, the patch adds a new flag to the mbind() syscall, MPOL_MF_MOVE.

ERROR:CODE_INDENT: code indent should use tabs where possible
#106: FILE: fs/inode.c:153:
+ ^I^Impol_shared_policy_init(&mapping->policy);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#106: FILE: fs/inode.c:153:
+ ^I^Impol_shared_policy_init(&mapping->policy);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#106: FILE: fs/inode.c:153:
+ ^I^Impol_shared_policy_init(&mapping->policy);$

CHECK:BRACES: Unbalanced braces around else statement
#115: FILE: fs/inode.c:181:
+	else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#150: FILE: include/linux/mempolicy.h:25:
+#define MPOL_MF_MOVE	(1<<1)	/* Attempt to move pages in mapping that do
                     	  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BIT_MACRO: Prefer using the BIT macro
#150: FILE: include/linux/mempolicy.h:25:
+#define MPOL_MF_MOVE	(1<<1)	/* Attempt to move pages in mapping that do

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#151: FILE: include/linux/mempolicy.h:26:
+#define MPOL_MF_MOVE	(1<<1)	/* Attempt to move pages in mapping that do
+				   not satisfy policy */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#151: FILE: include/linux/mempolicy.h:26:
+				   not satisfy policy */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#160: FILE: include/linux/mempolicy.h:154:
+struct page *alloc_page_shared_policy(unsigned gfp, struct shared_policy *sp,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#170: FILE: include/linux/mempolicy.h:222:
+alloc_page_shared_policy(unsigned gfp, struct shared_policy *sp,

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#188: FILE: include/linux/page-flags.h:78:
+#define PG_sharedpolicy         19      /* Page was allocated for a file
+					   mapping using a shared_policy */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#188: FILE: include/linux/page-flags.h:78:
+					   mapping using a shared_policy */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#212: FILE: include/linux/pagemap.h:53:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#232: FILE: include/linux/pagemap.h:70:
+	return __page_cache_alloc(x, idx, mapping_gfp_mask(x)|__GFP_COLD);
 	                                                     ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#281: FILE: mm/filemap.c:1514:
 
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#287: FILE: mm/filemap.c:1520:
+	struct address_space *mapping = vma->vm_file->f_mapping;
+	return mpol_set_shared_policy(&mapping->policy, vma, new);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#302: FILE: mm/filemap.c:1535:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#358: FILE: mm/mempolicy.c:237:
 
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#367: FILE: mm/mempolicy.c:246:
+^I^I        pol = vma->vm_ops->get_policy(vma, addr);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#369: FILE: mm/mempolicy.c:248:
+		else if (vma->vm_policy &&
+				vma->vm_policy->policy != MPOL_DEFAULT)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#377: FILE: mm/mempolicy.c:256:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#388: FILE: mm/mempolicy.c:267:
+		struct zone **z;
+		for (z = pol->v.zonelist->zones; *z; z++)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#394: FILE: mm/mempolicy.c:273:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#418: FILE: mm/mempolicy.c:296:
+remove_invalid_filemap_page(struct page * page,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <PDprintk>
#429: FILE: mm/mempolicy.c:307:
+		PDprintk("removed cache page in node %ld, "

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:SPLIT_STRING: quoted string split across lines
#430: FILE: mm/mempolicy.c:308:
+		PDprintk("removed cache page in node %ld, "
+			 "pgoff=%lu, for %s\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#441: FILE: mm/mempolicy.c:319:
+	PDprintk("could not remove cache page in node %ld, "
+		 "pgoff=%lu, for %s\n",

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#453: FILE: mm/mempolicy.c:331:
+move_invalid_page(struct page * page, struct mempolicy *pol,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#458: FILE: mm/mempolicy.c:336:
+	struct page * new_page;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#462: FILE: mm/mempolicy.c:340:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#465: FILE: mm/mempolicy.c:343:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#519: FILE: mm/mempolicy.c:396:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#530: FILE: mm/mempolicy.c:406:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#542: FILE: mm/mempolicy.c:418:
+^I^I^I$

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#550: FILE: mm/mempolicy.c:426:
+						err = remove_invalid_filemap_page(

ERROR:SPACING: space required after that ',' (ctx:VxV)
#551: FILE: mm/mempolicy.c:427:
+							p,vma,pgoff);
 							 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#551: FILE: mm/mempolicy.c:427:
+							p,vma,pgoff);
 							     ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#558: FILE: mm/mempolicy.c:434:
+^I^I$

CHECK:BRACES: Unbalanced braces around else statement
#719: FILE: mm/mempolicy.c:1179:
+			} else

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#736: FILE: mm/mempolicy.c:1249:
+alloc_page_shared_policy(unsigned gfp, struct shared_policy *sp,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#740: FILE: mm/mempolicy.c:1253:
+	struct mempolicy * shared_pol = NULL;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#762: FILE: mm/mempolicy.c:1275:
+^I$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000234540.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 15 errors, 15 warnings, 13 checks, 639 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000234540.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
