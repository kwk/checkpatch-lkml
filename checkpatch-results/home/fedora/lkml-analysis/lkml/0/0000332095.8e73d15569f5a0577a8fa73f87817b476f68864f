WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#31: 
o This is the main part of the sysfs backing store patch set. It provides the

WARNING:TYPO_SPELLING: 'entires' may be misspelled - perhaps 'entries'?
#33: 
  create sysfs entires in sysfs_create_xxxx() calls, we create the dentries 
               ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'hierachy' may be misspelled - perhaps 'hierarchy'?
#35: 
  the kobject hierachy for the required object and if found we go ahead and 
              ^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#65: FILE: fs/sysfs/inode.c:64:
+^Iif (!error) $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#75: FILE: fs/sysfs/inode.c:77:
+struct dentry * sysfs_get_new_dentry(struct dentry * parent, const char * name)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#75: FILE: fs/sysfs/inode.c:77:
+struct dentry * sysfs_get_new_dentry(struct dentry * parent, const char * name)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#75: FILE: fs/sysfs/inode.c:77:
+struct dentry * sysfs_get_new_dentry(struct dentry * parent, const char * name)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#78: FILE: fs/sysfs/inode.c:80:
+	struct dentry * dentry;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#79: FILE: fs/sysfs/inode.c:81:
+^I$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#82: FILE: fs/sysfs/inode.c:84:
+	qstr.hash = full_name_hash(name,qstr.len);
 	                               ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#83: FILE: fs/sysfs/inode.c:85:
+^I$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#110: FILE: fs/sysfs/inode.c:132:
+int sysfs_get_link_count(struct dentry * dentry)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#113: FILE: fs/sysfs/inode.c:135:
+	struct kobject * k, * kobj;

ERROR:SPACING: space prohibited after that '*' (ctx:WxW)
#113: FILE: fs/sysfs/inode.c:135:
+	struct kobject * k, * kobj;
 	                    ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#114: FILE: fs/sysfs/inode.c:136:
+	struct kobject_attr * k_attr;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#118: FILE: fs/sysfs/inode.c:140:
+		struct subsystem * s;

WARNING:LINE_SPACING: Missing a blank line after declarations
#119: FILE: fs/sysfs/inode.c:141:
+		struct subsystem * s;
+		list_for_each_entry(s, &kobj_subsystem_list, next)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#125: FILE: fs/sysfs/inode.c:147:
+		struct attribute_group * grp;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#129: FILE: fs/sysfs/inode.c:151:
+^I^I^Iif (!strcmp(k_attr_grp->attr_group->name, dentry->d_name.name)) $

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 24)
#129: FILE: fs/sysfs/inode.c:151:
+			if (!strcmp(k_attr_grp->attr_group->name, dentry->d_name.name)) 
+			break;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#133: FILE: fs/sysfs/inode.c:155:
+^I^Ifor (attr = grp->attrs; *attr ; attr++) $

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#156: FILE: fs/sysfs/dir.c:14:
+struct inode_operations sysfs_dir_inode_operations = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct file_operations should normally be const
#160: FILE: fs/sysfs/dir.c:18:
+struct file_operations sysfs_dir_operations = {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#183: FILE: fs/sysfs/dir.c:35:
+static struct dentry * __create_dir(struct kobject * k, struct dentry * dentry)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#183: FILE: fs/sysfs/dir.c:35:
+static struct dentry * __create_dir(struct kobject * k, struct dentry * dentry)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#183: FILE: fs/sysfs/dir.c:35:
+static struct dentry * __create_dir(struct kobject * k, struct dentry * dentry)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#186: FILE: fs/sysfs/dir.c:38:
+       $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#186: FILE: fs/sysfs/dir.c:38:
+       $

CHECK:SPACING: spaces preferred around that '|' (ctx:VxW)
#187: FILE: fs/sysfs/dir.c:39:
+	error = sysfs_create(dentry, S_IFDIR| S_IRWXU | S_IRUGO | S_IXUGO,
 	                                    ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXU | S_IRUGO | S_IXUGO' are not preferred. Consider using octal permissions '0755'.
#187: FILE: fs/sysfs/dir.c:39:
+	error = sysfs_create(dentry, S_IFDIR| S_IRWXU | S_IRUGO | S_IXUGO,

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#188: FILE: fs/sysfs/dir.c:40:
+	error = sysfs_create(dentry, S_IFDIR| S_IRWXU | S_IRUGO | S_IXUGO,
+				 init_dir);

WARNING:ONE_SEMICOLON: Statements terminations use 1 semicolon
#196: FILE: fs/sysfs/dir.c:48:
+	return ERR_PTR(error);;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#199: FILE: fs/sysfs/dir.c:51:
+int kobject_dentry_exist(struct dentry * parent, const char * name)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#199: FILE: fs/sysfs/dir.c:51:
+int kobject_dentry_exist(struct dentry * parent, const char * name)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#201: FILE: fs/sysfs/dir.c:53:
+	struct list_head * next;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#209: FILE: fs/sysfs/dir.c:61:
+		struct dentry * d = list_entry(next, struct dentry, d_child);

WARNING:LINE_SPACING: Missing a blank line after declarations
#210: FILE: fs/sysfs/dir.c:62:
+		struct dentry * d = list_entry(next, struct dentry, d_child);
+		if (!strcmp(d->d_name.name, name)) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#235: FILE: fs/sysfs/dir.c:72:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#238: FILE: fs/sysfs/dir.c:75:
+static inline struct dentry * $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#239: FILE: fs/sysfs/dir.c:76:
+create_one_kobject_dir(struct kobject *k, struct dentry * dentry)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#241: FILE: fs/sysfs/dir.c:78:
+	struct dentry * new = NULL;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#245: FILE: fs/sysfs/dir.c:82:
+^I^Ierr = sysfs_symlink(dentry->d_parent->d_inode, dentry, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#246: FILE: fs/sysfs/dir.c:83:
+		err = sysfs_symlink(dentry->d_parent->d_inode, dentry, 
+					k->k_symlink);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#259: FILE: fs/sysfs/dir.c:96:
+static int create_kobject_dir(struct kobject * kobj, struct dentry * dentry)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#259: FILE: fs/sysfs/dir.c:96:
+static int create_kobject_dir(struct kobject * kobj, struct dentry * dentry)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#261: FILE: fs/sysfs/dir.c:98:
+	struct kobject * k;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#262: FILE: fs/sysfs/dir.c:99:
+	const char * name;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#263: FILE: fs/sysfs/dir.c:100:
+	struct dentry * p = kobj->dentry;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#264: FILE: fs/sysfs/dir.c:101:
+	struct dentry * new = NULL;

ERROR:CODE_INDENT: code indent should use tabs where possible
#270: FILE: fs/sysfs/dir.c:107:
+                ^Iif (!strcmp(name, dentry->d_name.name)) {$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#270: FILE: fs/sysfs/dir.c:107:
+                ^Iif (!strcmp(name, dentry->d_name.name)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#270: FILE: fs/sysfs/dir.c:107:
+                ^Iif (!strcmp(name, dentry->d_name.name)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 32)
#274: FILE: fs/sysfs/dir.c:111:
+		} else if (!(kobject_dentry_exist(p, name))) {
+				new = sysfs_get_new_dentry(p, name);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#291: FILE: fs/sysfs/dir.c:128:
+static int create_attr_group(struct kobject *kobj, struct dentry * dentry)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#293: FILE: fs/sysfs/dir.c:130:
+	struct kobject_attr_group * grp;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#294: FILE: fs/sysfs/dir.c:131:
+	struct dentry * p = kobj->dentry;

ERROR:CODE_INDENT: code indent should use tabs where possible
#295: FILE: fs/sysfs/dir.c:132:
+        struct dentry * new = NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#295: FILE: fs/sysfs/dir.c:132:
+        struct dentry * new = NULL;$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#295: FILE: fs/sysfs/dir.c:132:
+        struct dentry * new = NULL;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#300: FILE: fs/sysfs/dir.c:137:
+			const char * name = dentry->d_name.name;

WARNING:LINE_SPACING: Missing a blank line after declarations
#301: FILE: fs/sysfs/dir.c:138:
+			const char * name = dentry->d_name.name;
+			if (!strcmp(grp->attr_group->name, name)) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#307: FILE: fs/sysfs/dir.c:144:
+^I^I^Iif (!IS_ERR(new)) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#312: FILE: fs/sysfs/dir.c:149:
+^I}^I$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#322: FILE: fs/sysfs/dir.c:159:
+create_one_attr_file(struct kobject_attr * k_attr, struct dentry * dentry)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#322: FILE: fs/sysfs/dir.c:159:
+create_one_attr_file(struct kobject_attr * k_attr, struct dentry * dentry)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#324: FILE: fs/sysfs/dir.c:161:
+	const struct attribute * attr = NULL;

WARNING:SPACING: Unnecessary space before function pointer name
#325: FILE: fs/sysfs/dir.c:162:
+	int (* init) (struct inode *) = NULL;

WARNING:SPACING: Unnecessary space before function pointer arguments
#325: FILE: fs/sysfs/dir.c:162:
+	int (* init) (struct inode *) = NULL;

ERROR:SPACING: space prohibited after that '*' (ctx:BxW)
#325: FILE: fs/sysfs/dir.c:162:
+	int (* init) (struct inode *) = NULL;
 	     ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#330: FILE: fs/sysfs/dir.c:167:
+^Iif (k_attr->flags & KOBJ_TEXT_ATTR) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#332: FILE: fs/sysfs/dir.c:169:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#337: FILE: fs/sysfs/dir.c:174:
+^Iif (k_attr->flags & KOBJ_TEXT_ATTR) $

CHECK:BRACES: braces {} should be used on all arms of this statement
#337: FILE: fs/sysfs/dir.c:174:
+	if (k_attr->flags & KOBJ_TEXT_ATTR) 
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: No space is necessary after a cast
#338: FILE: fs/sysfs/dir.c:175:
+		dentry->d_fsdata = (void *) attr;

CHECK:BRACES: Unbalanced braces around else statement
#339: FILE: fs/sysfs/dir.c:176:
+	else {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#347: FILE: fs/sysfs/dir.c:184:
+static int create_attr_file(struct kobject * kobj, struct dentry * dentry)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#347: FILE: fs/sysfs/dir.c:184:
+static int create_attr_file(struct kobject * kobj, struct dentry * dentry)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#349: FILE: fs/sysfs/dir.c:186:
+	struct kobject_attr * k_attr;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#350: FILE: fs/sysfs/dir.c:187:
+	struct dentry * p = kobj->dentry;

ERROR:CODE_INDENT: code indent should use tabs where possible
#351: FILE: fs/sysfs/dir.c:188:
+        struct dentry *new = NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#351: FILE: fs/sysfs/dir.c:188:
+        struct dentry *new = NULL;$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#355: FILE: fs/sysfs/dir.c:192:
+		char * name = kobject_attr(k_attr)->name;

WARNING:LINE_SPACING: Missing a blank line after declarations
#356: FILE: fs/sysfs/dir.c:193:
+		char * name = kobject_attr(k_attr)->name;
+		if (dentry) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#360: FILE: fs/sysfs/dir.c:197:
+^I^I^I}^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#377: FILE: fs/sysfs/dir.c:214:
+static int create_attr_group_files(struct kobject * kobj, $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#377: FILE: fs/sysfs/dir.c:214:
+static int create_attr_group_files(struct kobject * kobj, 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#378: FILE: fs/sysfs/dir.c:215:
+static int create_attr_group_files(struct kobject * kobj, 
+					struct dentry * dentry, int all)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#378: FILE: fs/sysfs/dir.c:215:
+					struct dentry * dentry, int all)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#380: FILE: fs/sysfs/dir.c:217:
+	struct dentry * new = NULL;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#381: FILE: fs/sysfs/dir.c:218:
+	struct dentry * parent = (all) ? dentry : dentry->d_parent;

ERROR:POINTER_LOCATION: "foo *const* bar" should be "foo *const*bar"
#382: FILE: fs/sysfs/dir.c:219:
+	struct attribute *const* attr;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#383: FILE: fs/sysfs/dir.c:220:
+	const struct attribute_group * grp = NULL;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#384: FILE: fs/sysfs/dir.c:221:
+	struct kobject_attr_group * k_attr_grp;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#389: FILE: fs/sysfs/dir.c:226:
+^I^Iif (!strcmp(k_attr_grp->attr_group->name, parent->d_name.name)) $

WARNING:SUSPECT_COMMA_SEMICOLON: Possible comma where semicolon could be used
#398: FILE: fs/sysfs/dir.c:235:
+		k_attr.attr_u.attr = *attr,
+		k_attr.flags = KOBJ_TEXT_ATTR;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#407: FILE: fs/sysfs/dir.c:244:
+^I^I^Iif (!IS_ERR(new)) $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#422: FILE: fs/sysfs/dir.c:258:
+static int create_subsystem_dir(struct dentry * dentry)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#425: FILE: fs/sysfs/dir.c:260:
+	struct subsystem * s;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#426: FILE: fs/sysfs/dir.c:261:
+	struct kobject * k;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#427: FILE: fs/sysfs/dir.c:262:
+	struct dentry * p = sysfs_mount->mnt_root;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#428: FILE: fs/sysfs/dir.c:263:
+	struct dentry * new = NULL;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#429: FILE: fs/sysfs/dir.c:264:
+	const char * name = NULL;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#431: FILE: fs/sysfs/dir.c:266:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#437: FILE: fs/sysfs/dir.c:272:
+^I^I^Iif (!strcmp(kobject_name(k), name)) { $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#441: FILE: fs/sysfs/dir.c:276:
+^I^I^I^Iif (!IS_ERR(new)) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#470: FILE: fs/sysfs/dir.c:305:
+struct dentry *sysfs_lookup(struct inode *dir, struct dentry *dentry, $

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#471: FILE: fs/sysfs/dir.c:306:
+				struct nameidata *nd)
 				                  ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#471: FILE: fs/sysfs/dir.c:306:
+struct dentry *sysfs_lookup(struct inode *dir, struct dentry *dentry, 
+				struct nameidata *nd)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#473: FILE: fs/sysfs/dir.c:308:
+	struct dentry * parent = dentry->d_parent;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#476: FILE: fs/sysfs/dir.c:311:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#497: FILE: fs/sysfs/dir.c:332:
+^Iif (parent->d_fsdata == parent->d_parent->d_fsdata) $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#510: FILE: fs/sysfs/dir.c:345:
+  }$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#554: FILE: fs/sysfs/dir.c:445:
+	kobject_set_name(kobj,new_name);
 	                     ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#560: FILE: fs/sysfs/dir.c:451:
+^I^Iup(&parent->d_inode->i_sem);^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#570: FILE: fs/sysfs/dir.c:456:
 
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#571: FILE: fs/sysfs/dir.c:457:
+int sysfs_open_dir_entries(struct dentry * parent)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#573: FILE: fs/sysfs/dir.c:459:
+	struct kobject * kobj;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#575: FILE: fs/sysfs/dir.c:461:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#576: FILE: fs/sysfs/dir.c:462:
+^Iif (parent == sysfs_mount->mnt_root) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#600: FILE: fs/sysfs/dir.c:486:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#604: FILE: fs/sysfs/dir.c:490:
+
+

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#612: FILE: fs/sysfs/dir.c:498:
+		printk("err opening dir %s %d\n", file->f_dentry->d_name.name, err);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#623: FILE: fs/sysfs/dir.c:509:
+	struct list_head * tmp;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#624: FILE: fs/sysfs/dir.c:510:
+	struct dentry * parent = file->f_dentry;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#629: FILE: fs/sysfs/dir.c:515:
+		struct dentry * d = list_entry(tmp, struct dentry, d_child);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#646: FILE: fs/sysfs/sysfs.h:1:
+#include <linux/fs.h>

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#654: FILE: fs/sysfs/sysfs.h:9:
+extern struct dentry * sysfs_get_new_dentry(struct dentry *, const char *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#654: FILE: fs/sysfs/sysfs.h:9:
+extern struct dentry * sysfs_get_new_dentry(struct dentry *, const char *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#654: FILE: fs/sysfs/sysfs.h:9:
+extern struct dentry * sysfs_get_new_dentry(struct dentry *, const char *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#654: FILE: fs/sysfs/sysfs.h:9:
+extern struct dentry * sysfs_get_new_dentry(struct dentry *, const char *);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#661: FILE: fs/sysfs/sysfs.h:15:
+extern int sysfs_get_link_count(struct dentry * dentry);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#661: FILE: fs/sysfs/sysfs.h:15:
+extern int sysfs_get_link_count(struct dentry * dentry);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#663: FILE: fs/sysfs/sysfs.h:17:
+extern int sysfs_init_file(struct inode * inode);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#663: FILE: fs/sysfs/sysfs.h:17:
+extern int sysfs_init_file(struct inode * inode);

ERROR:SPACING: space prohibited before that close parenthesis ')'
#664: FILE: fs/sysfs/sysfs.h:18:
+extern int sysfs_symlink(struct inode *, struct dentry *, const char * );

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#664: FILE: fs/sysfs/sysfs.h:18:
+extern int sysfs_symlink(struct inode *, struct dentry *, const char * );

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#664: FILE: fs/sysfs/sysfs.h:18:
+extern int sysfs_symlink(struct inode *, struct dentry *, const char * );

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#664: FILE: fs/sysfs/sysfs.h:18:
+extern int sysfs_symlink(struct inode *, struct dentry *, const char * );

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#664: FILE: fs/sysfs/sysfs.h:18:
+extern int sysfs_symlink(struct inode *, struct dentry *, const char * );

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#666: FILE: fs/sysfs/sysfs.h:20:
+extern struct inode_operations sysfs_dir_inode_operations;

WARNING:CONST_STRUCT: struct file_operations should normally be const
#667: FILE: fs/sysfs/sysfs.h:21:
+extern struct file_operations sysfs_dir_operations;

WARNING:CONST_STRUCT: struct dentry_operations should normally be const
#668: FILE: fs/sysfs/sysfs.h:22:
+extern struct dentry_operations sysfs_dentry_operations;

WARNING:CONST_STRUCT: struct file_operations should normally be const
#669: FILE: fs/sysfs/sysfs.h:23:
+extern struct file_operations bin_fops;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#671: FILE: fs/sysfs/sysfs.h:25:
+struct dentry * sysfs_lookup(struct inode *, struct dentry *, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#671: FILE: fs/sysfs/sysfs.h:25:
+struct dentry * sysfs_lookup(struct inode *, struct dentry *, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#671: FILE: fs/sysfs/sysfs.h:25:
+struct dentry * sysfs_lookup(struct inode *, struct dentry *, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nameidata *' should also have an identifier name
#671: FILE: fs/sysfs/sysfs.h:25:
+struct dentry * sysfs_lookup(struct inode *, struct dentry *, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#674: FILE: fs/sysfs/sysfs.h:28:
+void sysfs_d_iput(struct dentry *, struct inode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#674: FILE: fs/sysfs/sysfs.h:28:
+void sysfs_d_iput(struct dentry *, struct inode *);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#682: FILE: include/linux/sysfs.h:60:
+extern struct vfsmount * sysfs_mount;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000332095.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 97 errors, 39 warnings, 14 checks, 617 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000332095.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
