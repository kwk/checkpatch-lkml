WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#65: FILE: drivers/i2c/chips/gl520sm.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#66: FILE: drivers/i2c/chips/gl520sm.c:2:
+/*
+    gl520sm.c - Part of lm_sensors, Linux kernel modules for hardware

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:CODE_INDENT: code indent should use tabs where possible
#67: FILE: drivers/i2c/chips/gl520sm.c:3:
+                monitoring$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#69: FILE: drivers/i2c/chips/gl520sm.c:5:
+                              Kyösti Mälkki <kmalkki@cc.hut.fi>
                                 ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#69: FILE: drivers/i2c/chips/gl520sm.c:5:
+                              Kyösti Mälkki <kmalkki@cc.hut.fi>$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#83: FILE: drivers/i2c/chips/gl520sm.c:19:
+    along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#84: FILE: drivers/i2c/chips/gl520sm.c:20:
+    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#107: FILE: drivers/i2c/chips/gl520sm.c:43:
+/* Many GL520 constants specified below $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#108: FILE: drivers/i2c/chips/gl520sm.c:44:
+/* Many GL520 constants specified below 
+One of the inputs can be configured as either temp or voltage.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#109: FILE: drivers/i2c/chips/gl520sm.c:45:
+That's why _TEMP2 and _IN4 access the same register $

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#214: FILE: drivers/i2c/chips/gl520sm.c:150:
+static ssize_t get_##type##item (struct gl520_data *, char *, int); \

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#215: FILE: drivers/i2c/chips/gl520sm.c:151:
+static ssize_t get_##type##n##item (struct device *, char *); \

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#216: FILE: drivers/i2c/chips/gl520sm.c:152:
+static ssize_t get_##type##n##item (struct device *dev, char *buf) \

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#223: FILE: drivers/i2c/chips/gl520sm.c:159:
+static ssize_t set_##type##item (struct i2c_client *, struct gl520_data *, const char *, size_t, int, int); \

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#223: FILE: drivers/i2c/chips/gl520sm.c:159:
+static ssize_t set_##type##item (struct i2c_client *, struct gl520_data *, const char *, size_t, int, int); \

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#224: FILE: drivers/i2c/chips/gl520sm.c:160:
+static ssize_t set_##type##n##item (struct device *, const char *, size_t); \

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#225: FILE: drivers/i2c/chips/gl520sm.c:161:
+static ssize_t set_##type##n##item (struct device *dev, const char *buf, size_t count) \

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#232: FILE: drivers/i2c/chips/gl520sm.c:168:
+#define sysfs_rw_n(type, n, item, reg) \
+sysfs_r(type, n, item, reg) \
+sysfs_w(type, n, item, reg) \
+static DEVICE_ATTR(type##n##item, S_IRUGO | S_IWUSR, get_##type##n##item, set_##type##n##item);

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#232: FILE: drivers/i2c/chips/gl520sm.c:168:
+#define sysfs_rw_n(type, n, item, reg) \
+sysfs_r(type, n, item, reg) \
+sysfs_w(type, n, item, reg) \
+static DEVICE_ATTR(type##n##item, S_IRUGO | S_IWUSR, get_##type##n##item, set_##type##n##item);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'item' - possible side-effects?
#232: FILE: drivers/i2c/chips/gl520sm.c:168:
+#define sysfs_rw_n(type, n, item, reg) \
+sysfs_r(type, n, item, reg) \
+sysfs_w(type, n, item, reg) \
+static DEVICE_ATTR(type##n##item, S_IRUGO | S_IWUSR, get_##type##n##item, set_##type##n##item);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'reg' - possible side-effects?
#232: FILE: drivers/i2c/chips/gl520sm.c:168:
+#define sysfs_rw_n(type, n, item, reg) \
+sysfs_r(type, n, item, reg) \
+sysfs_w(type, n, item, reg) \
+static DEVICE_ATTR(type##n##item, S_IRUGO | S_IWUSR, get_##type##n##item, set_##type##n##item);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#232: FILE: drivers/i2c/chips/gl520sm.c:168:
+#define sysfs_rw_n(type, n, item, reg) \
+sysfs_r(type, n, item, reg) \
+sysfs_w(type, n, item, reg) \
+static DEVICE_ATTR(type##n##item, S_IRUGO | S_IWUSR, get_##type##n##item, set_##type##n##item);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#235: FILE: drivers/i2c/chips/gl520sm.c:171:
+static DEVICE_ATTR(type##n##item, S_IRUGO | S_IWUSR, get_##type##n##item, set_##type##n##item);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#237: FILE: drivers/i2c/chips/gl520sm.c:173:
+#define sysfs_ro_n(type, n, item, reg) \
+sysfs_r(type, n, item, reg) \
+static DEVICE_ATTR(type##n##item, S_IRUGO, get_##type##n##item, NULL);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#237: FILE: drivers/i2c/chips/gl520sm.c:173:
+#define sysfs_ro_n(type, n, item, reg) \
+sysfs_r(type, n, item, reg) \
+static DEVICE_ATTR(type##n##item, S_IRUGO, get_##type##n##item, NULL);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#239: FILE: drivers/i2c/chips/gl520sm.c:175:
+static DEVICE_ATTR(type##n##item, S_IRUGO, get_##type##n##item, NULL);

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#241: FILE: drivers/i2c/chips/gl520sm.c:177:
+#define sysfs_rw(type, item, reg) \
+sysfs_r(type, 0, item, reg) \
+sysfs_w(type, 0, item, reg) \
+static DEVICE_ATTR(type##item, S_IRUGO | S_IWUSR, get_##type##0##item, set_##type##0##item);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'item' - possible side-effects?
#241: FILE: drivers/i2c/chips/gl520sm.c:177:
+#define sysfs_rw(type, item, reg) \
+sysfs_r(type, 0, item, reg) \
+sysfs_w(type, 0, item, reg) \
+static DEVICE_ATTR(type##item, S_IRUGO | S_IWUSR, get_##type##0##item, set_##type##0##item);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'reg' - possible side-effects?
#241: FILE: drivers/i2c/chips/gl520sm.c:177:
+#define sysfs_rw(type, item, reg) \
+sysfs_r(type, 0, item, reg) \
+sysfs_w(type, 0, item, reg) \
+static DEVICE_ATTR(type##item, S_IRUGO | S_IWUSR, get_##type##0##item, set_##type##0##item);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#241: FILE: drivers/i2c/chips/gl520sm.c:177:
+#define sysfs_rw(type, item, reg) \
+sysfs_r(type, 0, item, reg) \
+sysfs_w(type, 0, item, reg) \
+static DEVICE_ATTR(type##item, S_IRUGO | S_IWUSR, get_##type##0##item, set_##type##0##item);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#244: FILE: drivers/i2c/chips/gl520sm.c:180:
+static DEVICE_ATTR(type##item, S_IRUGO | S_IWUSR, get_##type##0##item, set_##type##0##item);

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#246: FILE: drivers/i2c/chips/gl520sm.c:182:
+#define sysfs_ro(type, item, reg) \
+sysfs_r(type, 0, item, reg) \
+static DEVICE_ATTR(type##item, S_IRUGO, get_##type##0##item, NULL);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#246: FILE: drivers/i2c/chips/gl520sm.c:182:
+#define sysfs_ro(type, item, reg) \
+sysfs_r(type, 0, item, reg) \
+static DEVICE_ATTR(type##item, S_IRUGO, get_##type##0##item, NULL);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#248: FILE: drivers/i2c/chips/gl520sm.c:184:
+static DEVICE_ATTR(type##item, S_IRUGO, get_##type##0##item, NULL);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#250: FILE: drivers/i2c/chips/gl520sm.c:186:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'client' may be better as '(client)' to avoid precedence issues
#254: FILE: drivers/i2c/chips/gl520sm.c:190:
+#define device_create_file_vid(client, n) \
+device_create_file(&client->dev, &dev_attr_cpu##n##_vid)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#257: FILE: drivers/i2c/chips/gl520sm.c:193:
+#define sysfs_in(n) \
+sysfs_ro_n(in, n, _input, GL520_REG_IN##n##INPUT) \
+sysfs_rw_n(in, n, _min, GL520_REG_IN##n##_MIN) \
+sysfs_rw_n(in, n, _max, GL520_REG_IN##n##_MAX) \
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#257: FILE: drivers/i2c/chips/gl520sm.c:193:
+#define sysfs_in(n) \
+sysfs_ro_n(in, n, _input, GL520_REG_IN##n##INPUT) \
+sysfs_rw_n(in, n, _min, GL520_REG_IN##n##_MIN) \
+sysfs_rw_n(in, n, _max, GL520_REG_IN##n##_MAX) \
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'client' - possible side-effects?
#262: FILE: drivers/i2c/chips/gl520sm.c:198:
+#define device_create_file_in(client, n) \
+({device_create_file(&client->dev, &dev_attr_in##n##_input); \
+device_create_file(&client->dev, &dev_attr_in##n##_min); \
+device_create_file(&client->dev, &dev_attr_in##n##_max);})

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'client' may be better as '(client)' to avoid precedence issues
#262: FILE: drivers/i2c/chips/gl520sm.c:198:
+#define device_create_file_in(client, n) \
+({device_create_file(&client->dev, &dev_attr_in##n##_input); \
+device_create_file(&client->dev, &dev_attr_in##n##_min); \
+device_create_file(&client->dev, &dev_attr_in##n##_max);})

ERROR:SPACING: space required after that ';' (ctx:VxV)
#265: FILE: drivers/i2c/chips/gl520sm.c:201:
+device_create_file(&client->dev, &dev_attr_in##n##_max);})
                                                        ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#267: FILE: drivers/i2c/chips/gl520sm.c:203:
+#define sysfs_fan(n) \
+sysfs_ro_n(fan, n, _input, GL520_REG_FAN_INPUT) \
+sysfs_rw_n(fan, n, _min, GL520_REG_FAN_MIN) \
+sysfs_rw_n(fan, n, _div, GL520_REG_FAN_DIV)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#267: FILE: drivers/i2c/chips/gl520sm.c:203:
+#define sysfs_fan(n) \
+sysfs_ro_n(fan, n, _input, GL520_REG_FAN_INPUT) \
+sysfs_rw_n(fan, n, _min, GL520_REG_FAN_MIN) \
+sysfs_rw_n(fan, n, _div, GL520_REG_FAN_DIV)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'client' - possible side-effects?
#272: FILE: drivers/i2c/chips/gl520sm.c:208:
+#define device_create_file_fan(client, n) \
+({device_create_file(&client->dev, &dev_attr_fan##n##_input); \
+device_create_file(&client->dev, &dev_attr_fan##n##_min); \
+device_create_file(&client->dev, &dev_attr_fan##n##_div);})

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'client' may be better as '(client)' to avoid precedence issues
#272: FILE: drivers/i2c/chips/gl520sm.c:208:
+#define device_create_file_fan(client, n) \
+({device_create_file(&client->dev, &dev_attr_fan##n##_input); \
+device_create_file(&client->dev, &dev_attr_fan##n##_min); \
+device_create_file(&client->dev, &dev_attr_fan##n##_div);})

ERROR:SPACING: space required after that ';' (ctx:VxV)
#275: FILE: drivers/i2c/chips/gl520sm.c:211:
+device_create_file(&client->dev, &dev_attr_fan##n##_div);})
                                                         ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'client' may be better as '(client)' to avoid precedence issues
#280: FILE: drivers/i2c/chips/gl520sm.c:216:
+#define device_create_file_fan_off(client, n) \
+device_create_file(&client->dev, &dev_attr_fan##n##_off)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#283: FILE: drivers/i2c/chips/gl520sm.c:219:
+#define sysfs_temp(n) \
+sysfs_ro_n(temp, n, _input, GL520_REG_TEMP##n##_INPUT) \
+sysfs_rw_n(temp, n, _max, GL520_REG_TEMP##n##_MAX) \
+sysfs_rw_n(temp, n, _max_hyst, GL520_REG_TEMP##n##_MAX_HYST)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#283: FILE: drivers/i2c/chips/gl520sm.c:219:
+#define sysfs_temp(n) \
+sysfs_ro_n(temp, n, _input, GL520_REG_TEMP##n##_INPUT) \
+sysfs_rw_n(temp, n, _max, GL520_REG_TEMP##n##_MAX) \
+sysfs_rw_n(temp, n, _max_hyst, GL520_REG_TEMP##n##_MAX_HYST)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'client' - possible side-effects?
#288: FILE: drivers/i2c/chips/gl520sm.c:224:
+#define device_create_file_temp(client, n) \
+({device_create_file(&client->dev, &dev_attr_temp##n##_input); \
+device_create_file(&client->dev, &dev_attr_temp##n##_max); \
+device_create_file(&client->dev, &dev_attr_temp##n##_max_hyst);})

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'client' may be better as '(client)' to avoid precedence issues
#288: FILE: drivers/i2c/chips/gl520sm.c:224:
+#define device_create_file_temp(client, n) \
+({device_create_file(&client->dev, &dev_attr_temp##n##_input); \
+device_create_file(&client->dev, &dev_attr_temp##n##_max); \
+device_create_file(&client->dev, &dev_attr_temp##n##_max_hyst);})

ERROR:SPACING: space required after that ';' (ctx:VxV)
#291: FILE: drivers/i2c/chips/gl520sm.c:227:
+device_create_file(&client->dev, &dev_attr_temp##n##_max_hyst);})
                                                               ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#293: FILE: drivers/i2c/chips/gl520sm.c:229:
+#define sysfs_alarms() \
+sysfs_ro(alarms, , GL520_REG_ALARMS) \
+sysfs_rw(beep_enable, , GL520_REG_BEEP_ENABLE) \
+sysfs_rw(beep_mask, , GL520_REG_BEEP_MASK)

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#294: FILE: drivers/i2c/chips/gl520sm.c:230:
+sysfs_ro(alarms, , GL520_REG_ALARMS) \
                  ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#295: FILE: drivers/i2c/chips/gl520sm.c:231:
+sysfs_rw(beep_enable, , GL520_REG_BEEP_ENABLE) \
                       ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#296: FILE: drivers/i2c/chips/gl520sm.c:232:
+sysfs_rw(beep_mask, , GL520_REG_BEEP_MASK)
                     ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'client' - possible side-effects?
#298: FILE: drivers/i2c/chips/gl520sm.c:234:
+#define device_create_file_alarms(client) \
+({device_create_file(&client->dev, &dev_attr_alarms); \
+device_create_file(&client->dev, &dev_attr_beep_enable); \
+device_create_file(&client->dev, &dev_attr_beep_mask);})

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'client' may be better as '(client)' to avoid precedence issues
#298: FILE: drivers/i2c/chips/gl520sm.c:234:
+#define device_create_file_alarms(client) \
+({device_create_file(&client->dev, &dev_attr_alarms); \
+device_create_file(&client->dev, &dev_attr_beep_enable); \
+device_create_file(&client->dev, &dev_attr_beep_mask);})

ERROR:SPACING: space required after that ';' (ctx:VxV)
#301: FILE: drivers/i2c/chips/gl520sm.c:237:
+device_create_file(&client->dev, &dev_attr_beep_mask);})
                                                      ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#303: FILE: drivers/i2c/chips/gl520sm.c:239:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#321: FILE: drivers/i2c/chips/gl520sm.c:257:
+
+

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#327: FILE: drivers/i2c/chips/gl520sm.c:263:
+#define VDD_FROM_REG(val) (((val)*95+2)/4)
                                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#327: FILE: drivers/i2c/chips/gl520sm.c:263:
+#define VDD_FROM_REG(val) (((val)*95+2)/4)
                                     ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#327: FILE: drivers/i2c/chips/gl520sm.c:263:
+#define VDD_FROM_REG(val) (((val)*95+2)/4)
                                        ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#328: FILE: drivers/i2c/chips/gl520sm.c:264:
+#define VDD_TO_REG(val) (SENSORS_LIMIT((((val)*4+47)/95),0,255))
                                               ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#328: FILE: drivers/i2c/chips/gl520sm.c:264:
+#define VDD_TO_REG(val) (SENSORS_LIMIT((((val)*4+47)/95),0,255))
                                                 ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#328: FILE: drivers/i2c/chips/gl520sm.c:264:
+#define VDD_TO_REG(val) (SENSORS_LIMIT((((val)*4+47)/95),0,255))
                                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#328: FILE: drivers/i2c/chips/gl520sm.c:264:
+#define VDD_TO_REG(val) (SENSORS_LIMIT((((val)*4+47)/95),0,255))
                                                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#328: FILE: drivers/i2c/chips/gl520sm.c:264:
+#define VDD_TO_REG(val) (SENSORS_LIMIT((((val)*4+47)/95),0,255))
                                                           ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#330: FILE: drivers/i2c/chips/gl520sm.c:266:
+#define IN_FROM_REG(val) ((val)*19)
                                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#331: FILE: drivers/i2c/chips/gl520sm.c:267:
+#define IN_TO_REG(val) (SENSORS_LIMIT((((val)+9)/19),0,255))
                                              ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#331: FILE: drivers/i2c/chips/gl520sm.c:267:
+#define IN_TO_REG(val) (SENSORS_LIMIT((((val)+9)/19),0,255))
                                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#331: FILE: drivers/i2c/chips/gl520sm.c:267:
+#define IN_TO_REG(val) (SENSORS_LIMIT((((val)+9)/19),0,255))
                                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#331: FILE: drivers/i2c/chips/gl520sm.c:267:
+#define IN_TO_REG(val) (SENSORS_LIMIT((((val)+9)/19),0,255))
                                                       ^

WARNING:LONG_LINE: line length of 124 exceeds 100 columns
#363: FILE: drivers/i2c/chips/gl520sm.c:299:
+static ssize_t set_in_min(struct i2c_client *client, struct gl520_data *data, const char *buf, size_t count, int n, int reg)

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#365: FILE: drivers/i2c/chips/gl520sm.c:301:
+	long v = simple_strtol(buf, NULL, 10);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:LONG_LINE: line length of 124 exceeds 100 columns
#383: FILE: drivers/i2c/chips/gl520sm.c:319:
+static ssize_t set_in_max(struct i2c_client *client, struct gl520_data *data, const char *buf, size_t count, int n, int reg)

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#385: FILE: drivers/i2c/chips/gl520sm.c:321:
+	long v = simple_strtol(buf, NULL, 10);

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#396: FILE: drivers/i2c/chips/gl520sm.c:332:
+		gl520_write_value(client, reg, (gl520_read_value(client, reg) & ~0xff00) | (r << 8));

ERROR:SPACING: space required after that ',' (ctx:VxV)
#404: FILE: drivers/i2c/chips/gl520sm.c:340:
+#define FAN_FROM_REG(val,div) ((val)==0 ? 0 : (480000/((val) << (div))))
                         ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#404: FILE: drivers/i2c/chips/gl520sm.c:340:
+#define FAN_FROM_REG(val,div) ((val)==0 ? 0 : (480000/((val) << (div))))
                                     ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#404: FILE: drivers/i2c/chips/gl520sm.c:340:
+#define FAN_FROM_REG(val,div) ((val)==0 ? 0 : (480000/((val) << (div))))
                                                      ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'val' - possible side-effects?
#404: FILE: drivers/i2c/chips/gl520sm.c:340:
+#define FAN_FROM_REG(val,div) ((val)==0 ? 0 : (480000/((val) << (div))))

WARNING:LONG_LINE: line length of 115 exceeds 100 columns
#405: FILE: drivers/i2c/chips/gl520sm.c:341:
+#define FAN_TO_REG(val,div) ((val)<=0?0:SENSORS_LIMIT((480000 + ((val) << ((div)-1))) / ((val) << (div)), 1, 255));

ERROR:SPACING: space required after that ',' (ctx:VxV)
#405: FILE: drivers/i2c/chips/gl520sm.c:341:
+#define FAN_TO_REG(val,div) ((val)<=0?0:SENSORS_LIMIT((480000 + ((val) << ((div)-1))) / ((val) << (div)), 1, 255));
                       ^

ERROR:SPACING: spaces required around that '<=' (ctx:VxV)
#405: FILE: drivers/i2c/chips/gl520sm.c:341:
+#define FAN_TO_REG(val,div) ((val)<=0?0:SENSORS_LIMIT((480000 + ((val) << ((div)-1))) / ((val) << (div)), 1, 255));
                                   ^

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#405: FILE: drivers/i2c/chips/gl520sm.c:341:
+#define FAN_TO_REG(val,div) ((val)<=0?0:SENSORS_LIMIT((480000 + ((val) << ((div)-1))) / ((val) << (div)), 1, 255));
                                      ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#405: FILE: drivers/i2c/chips/gl520sm.c:341:
+#define FAN_TO_REG(val,div) ((val)<=0?0:SENSORS_LIMIT((480000 + ((val) << ((div)-1))) / ((val) << (div)), 1, 255));
                                        ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#405: FILE: drivers/i2c/chips/gl520sm.c:341:
+#define FAN_TO_REG(val,div) ((val)<=0?0:SENSORS_LIMIT((480000 + ((val) << ((div)-1))) / ((val) << (div)), 1, 255));
                                                                                 ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'val' - possible side-effects?
#405: FILE: drivers/i2c/chips/gl520sm.c:341:
+#define FAN_TO_REG(val,div) ((val)<=0?0:SENSORS_LIMIT((480000 + ((val) << ((div)-1))) / ((val) << (div)), 1, 255));

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'div' - possible side-effects?
#405: FILE: drivers/i2c/chips/gl520sm.c:341:
+#define FAN_TO_REG(val,div) ((val)<=0?0:SENSORS_LIMIT((480000 + ((val) << ((div)-1))) / ((val) << (div)), 1, 255));

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#405: FILE: drivers/i2c/chips/gl520sm.c:341:
+#define FAN_TO_REG(val,div) ((val)<=0?0:SENSORS_LIMIT((480000 + ((val) << ((div)-1))) / ((val) << (div)), 1, 255));

WARNING:LONG_LINE: line length of 125 exceeds 100 columns
#427: FILE: drivers/i2c/chips/gl520sm.c:363:
+static ssize_t set_fan_min(struct i2c_client *client, struct gl520_data *data, const char *buf, size_t count, int n, int reg)

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#429: FILE: drivers/i2c/chips/gl520sm.c:365:
+	unsigned long v = simple_strtoul(buf, NULL, 10);

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#435: FILE: drivers/i2c/chips/gl520sm.c:371:
+		gl520_write_value(client, reg, (gl520_read_value(client, reg) & ~0xff00) | (r << 8));

WARNING:LONG_LINE: line length of 125 exceeds 100 columns
#450: FILE: drivers/i2c/chips/gl520sm.c:386:
+static ssize_t set_fan_div(struct i2c_client *client, struct gl520_data *data, const char *buf, size_t count, int n, int reg)

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#452: FILE: drivers/i2c/chips/gl520sm.c:388:
+	unsigned long v = simple_strtoul(buf, NULL, 10);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#456: FILE: drivers/i2c/chips/gl520sm.c:392:
+	case 1: r = 0; break;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#457: FILE: drivers/i2c/chips/gl520sm.c:393:
+	case 2: r = 1; break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#458: FILE: drivers/i2c/chips/gl520sm.c:394:
+	case 4: r = 2; break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#459: FILE: drivers/i2c/chips/gl520sm.c:395:
+	case 8: r = 3; break;

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#461: FILE: drivers/i2c/chips/gl520sm.c:397:
+		dev_err(&client->dev, "fan_div value %ld not supported. Choose one of 1, 2, 4 or 8!\n", v);

WARNING:LONG_LINE: line length of 125 exceeds 100 columns
#475: FILE: drivers/i2c/chips/gl520sm.c:411:
+static ssize_t set_fan_off(struct i2c_client *client, struct gl520_data *data, const char *buf, size_t count, int n, int reg)

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#477: FILE: drivers/i2c/chips/gl520sm.c:413:
+	u8 r = simple_strtoul(buf, NULL, 10)?1:0;
 	                                    ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#477: FILE: drivers/i2c/chips/gl520sm.c:413:
+	u8 r = simple_strtoul(buf, NULL, 10)?1:0;
 	                                      ^

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#477: FILE: drivers/i2c/chips/gl520sm.c:413:
+	u8 r = simple_strtoul(buf, NULL, 10)?1:0;

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#486: FILE: drivers/i2c/chips/gl520sm.c:422:
+#define TEMP_TO_REG(val) (SENSORS_LIMIT(((((val)<0?(val)-500:(val)+500) / 1000)+130),0,255))
                                                 ^

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#486: FILE: drivers/i2c/chips/gl520sm.c:422:
+#define TEMP_TO_REG(val) (SENSORS_LIMIT(((((val)<0?(val)-500:(val)+500) / 1000)+130),0,255))
                                                   ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#486: FILE: drivers/i2c/chips/gl520sm.c:422:
+#define TEMP_TO_REG(val) (SENSORS_LIMIT(((((val)<0?(val)-500:(val)+500) / 1000)+130),0,255))
                                                         ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#486: FILE: drivers/i2c/chips/gl520sm.c:422:
+#define TEMP_TO_REG(val) (SENSORS_LIMIT(((((val)<0?(val)-500:(val)+500) / 1000)+130),0,255))
                                                             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#486: FILE: drivers/i2c/chips/gl520sm.c:422:
+#define TEMP_TO_REG(val) (SENSORS_LIMIT(((((val)<0?(val)-500:(val)+500) / 1000)+130),0,255))
                                                                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#486: FILE: drivers/i2c/chips/gl520sm.c:422:
+#define TEMP_TO_REG(val) (SENSORS_LIMIT(((((val)<0?(val)-500:(val)+500) / 1000)+130),0,255))
                                                                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#486: FILE: drivers/i2c/chips/gl520sm.c:422:
+#define TEMP_TO_REG(val) (SENSORS_LIMIT(((((val)<0?(val)-500:(val)+500) / 1000)+130),0,255))
                                                                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#486: FILE: drivers/i2c/chips/gl520sm.c:422:
+#define TEMP_TO_REG(val) (SENSORS_LIMIT(((((val)<0?(val)-500:(val)+500) / 1000)+130),0,255))
                                                                                       ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'val' - possible side-effects?
#486: FILE: drivers/i2c/chips/gl520sm.c:422:
+#define TEMP_TO_REG(val) (SENSORS_LIMIT(((((val)<0?(val)-500:(val)+500) / 1000)+130),0,255))

WARNING:LONG_LINE: line length of 126 exceeds 100 columns
#503: FILE: drivers/i2c/chips/gl520sm.c:439:
+static ssize_t set_temp_max(struct i2c_client *client, struct gl520_data *data, const char *buf, size_t count, int n, int reg)

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#505: FILE: drivers/i2c/chips/gl520sm.c:441:
+	long v = simple_strtol(buf, NULL, 10);

WARNING:LONG_LINE: line length of 131 exceeds 100 columns
#514: FILE: drivers/i2c/chips/gl520sm.c:450:
+static ssize_t set_temp_max_hyst(struct i2c_client *client, struct gl520_data *data, const char *buf, size_t count, int n, int reg)

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#516: FILE: drivers/i2c/chips/gl520sm.c:452:
+	long v = simple_strtol(buf, NULL, 10);

WARNING:LONG_LINE: line length of 129 exceeds 100 columns
#540: FILE: drivers/i2c/chips/gl520sm.c:476:
+static ssize_t set_beep_enable(struct i2c_client *client, struct gl520_data *data, const char *buf, size_t count, int n, int reg)

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#542: FILE: drivers/i2c/chips/gl520sm.c:478:
+	u8 r = simple_strtoul(buf, NULL, 10)?0:1;
 	                                    ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#542: FILE: drivers/i2c/chips/gl520sm.c:478:
+	u8 r = simple_strtoul(buf, NULL, 10)?0:1;
 	                                      ^

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#542: FILE: drivers/i2c/chips/gl520sm.c:478:
+	u8 r = simple_strtoul(buf, NULL, 10)?0:1;

WARNING:LONG_LINE: line length of 127 exceeds 100 columns
#550: FILE: drivers/i2c/chips/gl520sm.c:486:
+static ssize_t set_beep_mask(struct i2c_client *client, struct gl520_data *data, const char *buf, size_t count, int n, int reg)

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#552: FILE: drivers/i2c/chips/gl520sm.c:488:
+	u8 r = simple_strtoul(buf, NULL, 10) & data->alarm_mask;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#560: FILE: drivers/i2c/chips/gl520sm.c:496:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#583: FILE: drivers/i2c/chips/gl520sm.c:519:
+	/* OK. For now, we presume we have a valid client. We now create the
+	   client structure, even though we cannot fill it completely yet.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#584: FILE: drivers/i2c/chips/gl520sm.c:520:
+	   But it allows us to access gl520_{read,write}_value. */

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#586: FILE: drivers/i2c/chips/gl520sm.c:522:
+	if (!(data = kmalloc(sizeof(struct gl520_data), GFP_KERNEL))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*data)...) over kmalloc(sizeof(struct gl520_data)...)
#586: FILE: drivers/i2c/chips/gl520sm.c:522:
+	if (!(data = kmalloc(sizeof(struct gl520_data), GFP_KERNEL))) {

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:STRLCPY: Prefer strscpy over strlcpy - see: https://lore.kernel.org/r/CAHk-=wgfRnXz0W3D37d01q3JFkr_i_uTL=V6A6G1oUZcprmknw@mail.gmail.com/
#610: FILE: drivers/i2c/chips/gl520sm.c:546:
+	strlcpy(new_client->name, "gl520sm", I2C_NAME_SIZE);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#615: FILE: drivers/i2c/chips/gl520sm.c:551:
+	if ((err = i2c_attach_client(new_client)))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#649: FILE: drivers/i2c/chips/gl520sm.c:585:
+
+

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#656: FILE: drivers/i2c/chips/gl520sm.c:592:
+	conf = oldconf = gl520_read_value(client, GL520_REG_CONF);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around client->dev
#677: FILE: drivers/i2c/chips/gl520sm.c:613:
+	gl520_update_device(&(client->dev));

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#692: FILE: drivers/i2c/chips/gl520sm.c:628:
+	if ((err = i2c_detach_client(client))) {

WARNING:SPLIT_STRING: quoted string split across lines
#694: FILE: drivers/i2c/chips/gl520sm.c:630:
+		dev_err(&client->dev, "Client deregistration failed, "
+			"client not detached.\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#702: FILE: drivers/i2c/chips/gl520sm.c:638:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#703: FILE: drivers/i2c/chips/gl520sm.c:639:
+/* Registers 0x07 to 0x0c are word-sized, others are byte-sized $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#704: FILE: drivers/i2c/chips/gl520sm.c:640:
+/* Registers 0x07 to 0x0c are word-sized, others are byte-sized 
+   GL520 uses a high-byte first convention */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#704: FILE: drivers/i2c/chips/gl520sm.c:640:
+   GL520 uses a high-byte first convention */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'reg >= 0x07'
#707: FILE: drivers/i2c/chips/gl520sm.c:643:
+	if ((reg >= 0x07) && (reg <= 0x0c))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'reg <= 0x0c'
#707: FILE: drivers/i2c/chips/gl520sm.c:643:
+	if ((reg >= 0x07) && (reg <= 0x0c))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'reg >= 0x07'
#715: FILE: drivers/i2c/chips/gl520sm.c:651:
+	if ((reg >= 0x07) && (reg <= 0x0c))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'reg <= 0x0c'
#715: FILE: drivers/i2c/chips/gl520sm.c:651:
+	if ((reg >= 0x07) && (reg <= 0x0c))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#721: FILE: drivers/i2c/chips/gl520sm.c:657:
+
+

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'jiffies < data->last_updated'
#730: FILE: drivers/i2c/chips/gl520sm.c:666:
+	if ((jiffies - data->last_updated > 2 * HZ) ||
+	    (jiffies < data->last_updated) || !data->valid) {

WARNING:JIFFIES_COMPARISON: Comparing jiffies is almost always wrong; prefer time_after, time_before and friends
#731: FILE: drivers/i2c/chips/gl520sm.c:667:
+	    (jiffies < data->last_updated) || !data->valid) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#732: FILE: drivers/i2c/chips/gl520sm.c:668:
+	    (jiffies < data->last_updated) || !data->valid) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#799: FILE: drivers/i2c/chips/gl520sm.c:735:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#810: FILE: drivers/i2c/chips/gl520sm.c:746:
+
+

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#812: FILE: drivers/i2c/chips/gl520sm.c:748:
+	"Kyösti Mälkki <kmalkki@cc.hut.fi>, "
 	   ^

WARNING:SPLIT_STRING: quoted string split across lines
#812: FILE: drivers/i2c/chips/gl520sm.c:748:
+MODULE_AUTHOR("Frodo Looijaard <frodol@dds.nl>, "
+	"Kyösti Mälkki <kmalkki@cc.hut.fi>, "

WARNING:SPLIT_STRING: quoted string split across lines
#813: FILE: drivers/i2c/chips/gl520sm.c:749:
+	"Kyösti Mälkki <kmalkki@cc.hut.fi>, "
+	"Maarten Deprez <maartendeprez@users.sourceforge.net>");

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000207573.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 40 errors, 50 warnings, 64 checks, 778 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000207573.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
