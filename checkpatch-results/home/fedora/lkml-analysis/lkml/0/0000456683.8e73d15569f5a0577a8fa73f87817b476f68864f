WARNING:TYPO_SPELLING: 'occurrances' may be misspelled - perhaps 'occurrences'?
#28: 
the BUG occurrances in headers.
        ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#43: 
diff -urN -I \$.*\$ --exclude TAGS -X /home/rusty/current-dontdiff --minimal linux-2.5.17/include/asm-i386/page.h working-2.5.17-bug/include/asm-i386/page.h

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#63: FILE: include/asm-i386/page.h:105:
+#define XBUG(comment)			\
+ __asm__ __volatile__(	"ud2\n"		\
+			"\t.long %c0\n"	\
+			"\t.long %c1\n"	\
+			: : "i" (comment), "i" (__stringify(KBUILD_BASENAME)))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#64: FILE: include/asm-i386/page.h:106:
+ __asm__ __volatile__(^I"ud2\n"^I^I\$

ERROR:SPACING: space prohibited after that open parenthesis '('
#64: FILE: include/asm-i386/page.h:106:
+ __asm__ __volatile__(	"ud2\n"		\

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#71: FILE: include/asm-i386/page.h:113:
+#define XBUG(comment) __asm__ __volatile__("ud2\n")

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#91: FILE: include/asm-ppc/page.h:33:
+	printk("kernel BUG %s in %s!\n", str, __stringify(KBUILD_BASENAME)); \

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#100: FILE: include/asm-ppc/page.h:42:
+	printk("kernel BUG %s in %s!\n", str, __stringify(KBUILD_BASENAME)); \

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#129: FILE: arch/i386/kernel/traps.c:264:
+	if (__get_user(comment, (char **)(eip + 2)) ||
+		(unsigned long)comment < PAGE_OFFSET || __get_user(c, comment))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#132: FILE: arch/i386/kernel/traps.c:267:
+	if (__get_user(file, (char **)(eip + 6)) ||
 		(unsigned long)file < PAGE_OFFSET || __get_user(c, file))

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#136: FILE: arch/i386/kernel/traps.c:270:
+	printk("kernel BUG in %s:%s!\n", file, comment);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#215: FILE: include/linux/jbd.h:202:
+		XBUG("Assertion failure in " __FUNCTION__		\

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#228: FILE: include/linux/kernel.h:174:
+#define XBUG_ON(condition, comment) do { if (unlikely((condition)!=0)) XBUG(comment); } while(0)
                                                                  ^

ERROR:SPACING: space required before the open parenthesis '('
#228: FILE: include/linux/kernel.h:174:
+#define XBUG_ON(condition, comment) do { if (unlikely((condition)!=0)) XBUG(comment); } while(0)

WARNING:LONG_LINE: line length of 117 exceeds 100 columns
#325: FILE: include/linux/skbuff.h:761:
+#define SKB_PAGE_ASSERT(skb) do { if (skb_shinfo(skb)->nr_frags) XBUG("SKB_PAGE:" __stringify(__LINE__)); } while (0)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE: line length of 118 exceeds 100 columns
#326: FILE: include/linux/skbuff.h:762:
+#define SKB_FRAG_ASSERT(skb) do { if (skb_shinfo(skb)->frag_list) XBUG("SKB_FRAG:" __stringify(__LINE__)); } while (0)

WARNING:LONG_LINE: line length of 117 exceeds 100 columns
#327: FILE: include/linux/skbuff.h:763:
+#define SKB_LINEAR_ASSERT(skb) do { if (skb_is_nonlinear(skb)) XBUG("SKB_LINEAR:" __stringify(__LINE__)); } while (0)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000456683.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 5 errors, 10 warnings, 2 checks, 251 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000456683.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
