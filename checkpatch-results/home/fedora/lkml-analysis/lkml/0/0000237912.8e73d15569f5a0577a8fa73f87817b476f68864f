WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#29: 
This patch depends at least on two previously posted ones (and not yet merged).

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#45: FILE: arch/ppc64/kernel/pSeries_smp.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/atomic.h> instead of <asm/atomic.h>
#78: FILE: arch/ppc64/kernel/pSeries_smp.c:34:
+#include <asm/atomic.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/pgtable.h> instead of <asm/pgtable.h>
#81: FILE: arch/ppc64/kernel/pSeries_smp.c:37:
+#include <asm/pgtable.h>

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/io.h> instead of <asm/io.h>
#82: FILE: arch/ppc64/kernel/pSeries_smp.c:38:
+#include <asm/io.h>

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/smp.h> instead of <asm/smp.h>
#84: FILE: arch/ppc64/kernel/pSeries_smp.c:40:
+#include <asm/smp.h>

ERROR:TRAILING_WHITESPACE: trailing whitespace
#104: FILE: arch/ppc64/kernel/pSeries_smp.c:60:
+extern void pseries_secondary_smp_init(unsigned long); $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#104: FILE: arch/ppc64/kernel/pSeries_smp.c:60:
+extern void pseries_secondary_smp_init(unsigned long); 

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#104: FILE: arch/ppc64/kernel/pSeries_smp.c:60:
+extern void pseries_secondary_smp_init(unsigned long); 

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around paca[cpu].lppaca
#112: FILE: arch/ppc64/kernel/pSeries_smp.c:68:
+	register_vpa(flags, pcpu, __pa((unsigned long)&(paca[cpu].lppaca)));

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:LINE_SPACING: Please don't use multiple blank lines
#115: FILE: arch/ppc64/kernel/pSeries_smp.c:71:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#134: FILE: arch/ppc64/kernel/pSeries_smp.c:90:
+		printk(KERN_ERR

CHECK:LINE_SPACING: Please don't use multiple blank lines
#142: FILE: arch/ppc64/kernel/pSeries_smp.c:98:
+
+

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#148: FILE: arch/ppc64/kernel/pSeries_smp.c:104:
+	extern void xics_migrate_irqs_away(void);

CHECK:CAMELCASE: Avoid CamelCase: <processorCount>
#150: FILE: arch/ppc64/kernel/pSeries_smp.c:106:
+	systemcfg->processorCount--;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#172: FILE: arch/ppc64/kernel/pSeries_smp.c:128:
+		schedule_timeout(HZ/5);
 		                   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#175: FILE: arch/ppc64/kernel/pSeries_smp.c:131:
+		printk("Querying DEAD? cpu %i (%i) shows %i\n",

WARNING:TYPO_SPELLING: 'definatly' may be misspelled - perhaps 'definitely'?
#179: FILE: arch/ppc64/kernel/pSeries_smp.c:135:
+	/* Isolation and deallocation are definatly done by
 	                                  ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:LINE_SPACING: Missing a blank line after declarations
#216: FILE: arch/ppc64/kernel/pSeries_smp.c:172:
+			int rc = rtas_get_sensor(9003, *index, &state);
+			if (rc != 0 || state != 1)

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#223: FILE: arch/ppc64/kernel/pSeries_smp.c:179:
+			if (0 == query_cpu_stopped(tid[nr_threads])) {

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#246: FILE: arch/ppc64/kernel/pSeries_smp.c:202:
+static inline int __devinit smp_startup_cpu(unsigned int lcpu)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#254: FILE: arch/ppc64/kernel/pSeries_smp.c:210:
+	 * loops, so nothing to do. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:CODE_INDENT: code indent should use tabs where possible
#255: FILE: arch/ppc64/kernel/pSeries_smp.c:211:
+ ^Iif (system_state < SYSTEM_RUNNING)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#255: FILE: arch/ppc64/kernel/pSeries_smp.c:211:
+ ^Iif (system_state < SYSTEM_RUNNING)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#255: FILE: arch/ppc64/kernel/pSeries_smp.c:211:
+ ^Iif (system_state < SYSTEM_RUNNING)$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#260: FILE: arch/ppc64/kernel/pSeries_smp.c:216:
+		printk(KERN_INFO "No more cpus available, failing\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#273: FILE: arch/ppc64/kernel/pSeries_smp.c:229:
+		printk(KERN_ERR "start-cpu failed: %i\n", status);

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#279: FILE: arch/ppc64/kernel/pSeries_smp.c:235:
+static inline int __devinit smp_startup_cpu(unsigned int lcpu)

WARNING:MEMORY_BARRIER: memory barrier without comment
#288: FILE: arch/ppc64/kernel/pSeries_smp.c:244:
+	mb();

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#296: FILE: arch/ppc64/kernel/pSeries_smp.c:252:
+	if (target < NR_CPUS) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#301: FILE: arch/ppc64/kernel/pSeries_smp.c:257:
+			if (target == MSG_ALL_BUT_SELF
+			    && i == smp_processor_id())

CHECK:CAMELCASE: Avoid CamelCase: <xics_request_IPIs>
#308: FILE: arch/ppc64/kernel/pSeries_smp.c:264:
+extern void xics_request_IPIs(void);

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#317: FILE: arch/ppc64/kernel/pSeries_smp.c:273:
+static void __devinit smp_xics_setup_cpu(int cpu)

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#324: FILE: arch/ppc64/kernel/pSeries_smp.c:280:
+static unsigned long timebase = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#326: FILE: arch/ppc64/kernel/pSeries_smp.c:282:
+static void __devinit pSeries_give_timebase(void)

CHECK:CAMELCASE: Avoid CamelCase: <pSeries_give_timebase>
#326: FILE: arch/ppc64/kernel/pSeries_smp.c:282:
+static void __devinit pSeries_give_timebase(void)

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#338: FILE: arch/ppc64/kernel/pSeries_smp.c:294:
+static void __devinit pSeries_take_timebase(void)

CHECK:CAMELCASE: Avoid CamelCase: <pSeries_take_timebase>
#338: FILE: arch/ppc64/kernel/pSeries_smp.c:294:
+static void __devinit pSeries_take_timebase(void)

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#348: FILE: arch/ppc64/kernel/pSeries_smp.c:304:
+static void __devinit pSeries_late_setup_cpu(int cpu)

CHECK:CAMELCASE: Avoid CamelCase: <pSeries_late_setup_cpu>
#348: FILE: arch/ppc64/kernel/pSeries_smp.c:304:
+static void __devinit pSeries_late_setup_cpu(int cpu)

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#350: FILE: arch/ppc64/kernel/pSeries_smp.c:306:
+	extern unsigned int default_distrib_server;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#352: FILE: arch/ppc64/kernel/pSeries_smp.c:308:
+	if (cur_cpu_spec->firmware_features & FW_FEATURE_SPLPAR) {
+		vpa_init(cpu); 
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#353: FILE: arch/ppc64/kernel/pSeries_smp.c:309:
+^I^Ivpa_init(cpu); $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#366: FILE: arch/ppc64/kernel/pSeries_smp.c:322:
+
+

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#367: FILE: arch/ppc64/kernel/pSeries_smp.c:323:
+void __devinit smp_pSeries_kick_cpu(int nr)

CHECK:CAMELCASE: Avoid CamelCase: <smp_pSeries_kick_cpu>
#367: FILE: arch/ppc64/kernel/pSeries_smp.c:323:
+void __devinit smp_pSeries_kick_cpu(int nr)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#369: FILE: arch/ppc64/kernel/pSeries_smp.c:325:
+	BUG_ON(nr < 0 || nr >= NR_CPUS);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#369: FILE: arch/ppc64/kernel/pSeries_smp.c:325:
+	BUG_ON(nr < 0 || nr >= NR_CPUS);

CHECK:CAMELCASE: Avoid CamelCase: <pSeries_mpic_smp_ops>
#382: FILE: arch/ppc64/kernel/pSeries_smp.c:338:
+static struct smp_ops_t pSeries_mpic_smp_ops = {

CHECK:CAMELCASE: Avoid CamelCase: <pSeries_xics_smp_ops>
#390: FILE: arch/ppc64/kernel/pSeries_smp.c:346:
+static struct smp_ops_t pSeries_xics_smp_ops = {

CHECK:CAMELCASE: Avoid CamelCase: <smp_init_pSeries>
#399: FILE: arch/ppc64/kernel/pSeries_smp.c:355:
+void __init smp_init_pSeries(void)

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'smp_init_pSeries', this function's name, in a string
#403: FILE: arch/ppc64/kernel/pSeries_smp.c:359:
+	DBG(" -> smp_init_pSeries()\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#415: FILE: arch/ppc64/kernel/pSeries_smp.c:371:
+			printk("%16.16x : starting thread\n", i);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#434: FILE: arch/ppc64/kernel/pSeries_smp.c:390:
+
+

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'smp_init_pSeries', this function's name, in a string
#435: FILE: arch/ppc64/kernel/pSeries_smp.c:391:
+	DBG(" <- smp_init_pSeries()\n");

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#771: FILE: arch/ppc64/kernel/smp.c:132:
+void __devinit smp_generic_kick_cpu(int nr)

WARNING:MEMORY_BARRIER: memory barrier without comment
#784: FILE: arch/ppc64/kernel/smp.c:142:
+	mb();

CHECK:LINE_SPACING: Please don't use multiple blank lines
#963: FILE: arch/ppc64/kernel/smp.c:502:
 
+

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#965: FILE: arch/ppc64/kernel/smp.c:504:
 int __devinit start_secondary(void *unused)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __noreturn over __attribute__((noreturn))
#1018: FILE: include/asm-ppc64/smp.h:31:
+extern void cpu_die(void) __attribute__((noreturn));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1018: FILE: include/asm-ppc64/smp.h:31:
+extern void cpu_die(void) __attribute__((noreturn));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void' should also have an identifier name
#1018: FILE: include/asm-ppc64/smp.h:31:
+extern void cpu_die(void) __attribute__((noreturn));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1038: FILE: include/asm-ppc64/smp.h:73:
+extern void smp_generic_kick_cpu(int nr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1040: FILE: include/asm-ppc64/smp.h:75:
+extern void smp_generic_give_timebase(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1041: FILE: include/asm-ppc64/smp.h:76:
+extern void smp_generic_take_timebase(void);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1052: FILE: arch/ppc64/kernel/iSeries_smp.c:1:
+/*

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/atomic.h> instead of <asm/atomic.h>
#1085: FILE: arch/ppc64/kernel/iSeries_smp.c:34:
+#include <asm/atomic.h>

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/pgtable.h> instead of <asm/pgtable.h>
#1088: FILE: arch/ppc64/kernel/iSeries_smp.c:37:
+#include <asm/pgtable.h>

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/io.h> instead of <asm/io.h>
#1089: FILE: arch/ppc64/kernel/iSeries_smp.c:38:
+#include <asm/io.h>

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/smp.h> instead of <asm/smp.h>
#1090: FILE: arch/ppc64/kernel/iSeries_smp.c:39:
+#include <asm/smp.h>

CHECK:CAMELCASE: Avoid CamelCase: <iSeries_smp_message>
#1102: FILE: arch/ppc64/kernel/iSeries_smp.c:51:
+static unsigned long iSeries_smp_message[NR_CPUS];

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1104: FILE: arch/ppc64/kernel/iSeries_smp.c:53:
+void iSeries_smp_message_recv( struct pt_regs * regs )

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited after that open parenthesis '('
#1104: FILE: arch/ppc64/kernel/iSeries_smp.c:53:
+void iSeries_smp_message_recv( struct pt_regs * regs )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1104: FILE: arch/ppc64/kernel/iSeries_smp.c:53:
+void iSeries_smp_message_recv( struct pt_regs * regs )

CHECK:CAMELCASE: Avoid CamelCase: <iSeries_smp_message_recv>
#1104: FILE: arch/ppc64/kernel/iSeries_smp.c:53:
+void iSeries_smp_message_recv( struct pt_regs * regs )

ERROR:SPACING: space prohibited after that open parenthesis '('
#1109: FILE: arch/ppc64/kernel/iSeries_smp.c:58:
+	if ( num_online_cpus() < 2 )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1109: FILE: arch/ppc64/kernel/iSeries_smp.c:58:
+	if ( num_online_cpus() < 2 )

ERROR:SPACING: space prohibited after that open parenthesis '('
#1112: FILE: arch/ppc64/kernel/iSeries_smp.c:61:
+	for ( msg = 0; msg < 4; ++msg )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1112: FILE: arch/ppc64/kernel/iSeries_smp.c:61:
+	for ( msg = 0; msg < 4; ++msg )

ERROR:SPACING: space prohibited after that open parenthesis '('
#1113: FILE: arch/ppc64/kernel/iSeries_smp.c:62:
+		if ( test_and_clear_bit( msg, &iSeries_smp_message[cpu] ) )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1113: FILE: arch/ppc64/kernel/iSeries_smp.c:62:
+		if ( test_and_clear_bit( msg, &iSeries_smp_message[cpu] ) )

ERROR:SPACING: space prohibited after that open parenthesis '('
#1114: FILE: arch/ppc64/kernel/iSeries_smp.c:63:
+			smp_message_recv( msg, regs );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1114: FILE: arch/ppc64/kernel/iSeries_smp.c:63:
+			smp_message_recv( msg, regs );

CHECK:CAMELCASE: Avoid CamelCase: <smp_iSeries_do_message>
#1117: FILE: arch/ppc64/kernel/iSeries_smp.c:66:
+static inline void smp_iSeries_do_message(int cpu, int msg)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around paca[cpu]
#1120: FILE: arch/ppc64/kernel/iSeries_smp.c:69:
+	HvCall_sendIPI(&(paca[cpu]));

CHECK:CAMELCASE: Avoid CamelCase: <HvCall_sendIPI>
#1120: FILE: arch/ppc64/kernel/iSeries_smp.c:69:
+	HvCall_sendIPI(&(paca[cpu]));

CHECK:CAMELCASE: Avoid CamelCase: <smp_iSeries_message_pass>
#1123: FILE: arch/ppc64/kernel/iSeries_smp.c:72:
+static void smp_iSeries_message_pass(int target, int msg)

CHECK:BRACES: braces {} should be used on all arms of this statement
#1127: FILE: arch/ppc64/kernel/iSeries_smp.c:76:
+	if (target < NR_CPUS)
[...]
+	else {
[...]

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1127: FILE: arch/ppc64/kernel/iSeries_smp.c:76:
+	if (target < NR_CPUS)

CHECK:BRACES: Unbalanced braces around else statement
#1129: FILE: arch/ppc64/kernel/iSeries_smp.c:78:
+	else {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1132: FILE: arch/ppc64/kernel/iSeries_smp.c:81:
+			if (target == MSG_ALL_BUT_SELF
+			    && i == smp_processor_id())

CHECK:CAMELCASE: Avoid CamelCase: <smp_iSeries_numProcs>
#1139: FILE: arch/ppc64/kernel/iSeries_smp.c:88:
+static int smp_iSeries_numProcs(void)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1141: FILE: arch/ppc64/kernel/iSeries_smp.c:90:
+	unsigned np, i;

ERROR:CODE_INDENT: code indent should use tabs where possible
#1144: FILE: arch/ppc64/kernel/iSeries_smp.c:93:
+        for (i=0; i < NR_CPUS; ++i) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1144: FILE: arch/ppc64/kernel/iSeries_smp.c:93:
+        for (i=0; i < NR_CPUS; ++i) {$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1144: FILE: arch/ppc64/kernel/iSeries_smp.c:93:
+        for (i=0; i < NR_CPUS; ++i) {
               ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1144: FILE: arch/ppc64/kernel/iSeries_smp.c:93:
+        for (i=0; i < NR_CPUS; ++i) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#1145: FILE: arch/ppc64/kernel/iSeries_smp.c:94:
+                if (paca[i].lppaca.xDynProcStatus < 2) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1145: FILE: arch/ppc64/kernel/iSeries_smp.c:94:
+                if (paca[i].lppaca.xDynProcStatus < 2) {$

CHECK:CAMELCASE: Avoid CamelCase: <xDynProcStatus>
#1145: FILE: arch/ppc64/kernel/iSeries_smp.c:94:
+                if (paca[i].lppaca.xDynProcStatus < 2) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#1148: FILE: arch/ppc64/kernel/iSeries_smp.c:97:
+                        ++np;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1148: FILE: arch/ppc64/kernel/iSeries_smp.c:97:
+                        ++np;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1149: FILE: arch/ppc64/kernel/iSeries_smp.c:98:
+                }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1149: FILE: arch/ppc64/kernel/iSeries_smp.c:98:
+                }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1150: FILE: arch/ppc64/kernel/iSeries_smp.c:99:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1150: FILE: arch/ppc64/kernel/iSeries_smp.c:99:
+        }$

CHECK:CAMELCASE: Avoid CamelCase: <smp_iSeries_probe>
#1154: FILE: arch/ppc64/kernel/iSeries_smp.c:103:
+static int smp_iSeries_probe(void)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1156: FILE: arch/ppc64/kernel/iSeries_smp.c:105:
+	unsigned i;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1157: FILE: arch/ppc64/kernel/iSeries_smp.c:106:
+	unsigned np = 0;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1159: FILE: arch/ppc64/kernel/iSeries_smp.c:108:
+	for (i=0; i < NR_CPUS; ++i) {
 	      ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1159: FILE: arch/ppc64/kernel/iSeries_smp.c:108:
+	for (i=0; i < NR_CPUS; ++i) {

CHECK:CAMELCASE: Avoid CamelCase: <smp_iSeries_kick_cpu>
#1169: FILE: arch/ppc64/kernel/iSeries_smp.c:118:
+static void smp_iSeries_kick_cpu(int nr)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1171: FILE: arch/ppc64/kernel/iSeries_smp.c:120:
+	BUG_ON(nr < 0 || nr >= NR_CPUS);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1171: FILE: arch/ppc64/kernel/iSeries_smp.c:120:
+	BUG_ON(nr < 0 || nr >= NR_CPUS);

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1185: FILE: arch/ppc64/kernel/iSeries_smp.c:134:
+static void __devinit smp_iSeries_setup_cpu(int nr)

CHECK:CAMELCASE: Avoid CamelCase: <smp_iSeries_setup_cpu>
#1185: FILE: arch/ppc64/kernel/iSeries_smp.c:134:
+static void __devinit smp_iSeries_setup_cpu(int nr)

CHECK:CAMELCASE: Avoid CamelCase: <iSeries_smp_ops>
#1189: FILE: arch/ppc64/kernel/iSeries_smp.c:138:
+static struct smp_ops_t iSeries_smp_ops = {

CHECK:CAMELCASE: Avoid CamelCase: <smp_init_iSeries>
#1197: FILE: arch/ppc64/kernel/iSeries_smp.c:146:
+void __init smp_init_iSeries(void)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1247: FILE: arch/ppc64/kernel/pmac_smp.c:118:
+^I^Ibreak;^I^I^I$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1260: FILE: arch/ppc64/kernel/pmac_smp.c:161:
+		if (ppc_md.progress) ppc_md.progress("smp_core99_setup_cpu 0 done", 0x349);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:CAMELCASE: Avoid CamelCase: <pSeries_cpu_die>
#1278: FILE: arch/ppc64/kernel/pSeries_setup.c:324:
+static void pSeries_cpu_die(void)

CHECK:CAMELCASE: Avoid CamelCase: <pSeriesLP_cppr_info>
#1284: FILE: arch/ppc64/kernel/pSeries_setup.c:330:
+	pSeriesLP_cppr_info(0, 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1287: FILE: arch/ppc64/kernel/pSeries_setup.c:333:
+	BUG();

ERROR:SPACING: space required before the open parenthesis '('
#1288: FILE: arch/ppc64/kernel/pSeries_setup.c:334:
+	for(;;);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1288: FILE: arch/ppc64/kernel/pSeries_setup.c:334:
+	for(;;);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1291: FILE: arch/ppc64/kernel/pSeries_setup.c:337:
+
+

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1316: FILE: arch/ppc64/kernel/setup.c:1316:
+	for (;;);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000237912.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 27 errors, 52 warnings, 48 checks, 1231 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000237912.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
