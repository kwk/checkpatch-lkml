WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#40: 
connector patches previously in -mm by Guillaume and Badari along with two new

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#98: FILE: include/linux/cn_proc.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#118: FILE: include/linux/cn_proc.h:21:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#119: FILE: include/linux/cn_proc.h:22:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA$

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#202: FILE: include/linux/cn_proc.h:105:
+#if defined(CONFIG_PROC_EVENTS) || defined(CONFIG_PROC_EVENTS_MODULE)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#205: FILE: include/linux/cn_proc.h:108:
+void proc_id_connector (struct task_struct *task, int which_id);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#214: FILE: include/linux/cn_proc.h:117:
+static inline void proc_id_connector  (struct task_struct *task,

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#228: FILE: drivers/connector/cn_proc.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#248: FILE: drivers/connector/cn_proc.c:21:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#249: FILE: drivers/connector/cn_proc.c:22:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA$

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#255: FILE: drivers/connector/cn_proc.c:28:
+#include <asm/atomic.h>

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#261: FILE: drivers/connector/cn_proc.c:34:
+extern int cn_already_initialized;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#262: FILE: drivers/connector/cn_proc.c:35:
+static atomic_t proc_event_num_listeners = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#268: FILE: drivers/connector/cn_proc.c:41:
+static inline void get_seq (__u32 *ts, int *cpu)

WARNING:TYPO_SPELLING: 'acknowledgement' may be misspelled - perhaps 'acknowledgment'?
#276: FILE: drivers/connector/cn_proc.c:49:
+ * Send an acknowledgement message to userspace
            ^^^^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#283: FILE: drivers/connector/cn_proc.c:56:
+static void cn_proc_ack (int err, int rcvd_seq, int rcvd_ack)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#292: FILE: drivers/connector/cn_proc.c:65:
+	msg = (struct cn_msg*)buffer;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#293: FILE: drivers/connector/cn_proc.c:66:
+	ev = (struct proc_event*)msg->data;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#314: FILE: drivers/connector/cn_proc.c:87:
+	msg = (struct cn_msg*)buffer;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#315: FILE: drivers/connector/cn_proc.c:88:
+	ev = (struct proc_event*)msg->data;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#341: FILE: drivers/connector/cn_proc.c:114:
+	msg = (struct cn_msg*)buffer;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#342: FILE: drivers/connector/cn_proc.c:115:
+	ev = (struct proc_event*)msg->data;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#356: FILE: drivers/connector/cn_proc.c:129:
+void proc_id_connector (struct task_struct *task, int which_id)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#365: FILE: drivers/connector/cn_proc.c:138:
+	msg = (struct cn_msg*)buffer;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#366: FILE: drivers/connector/cn_proc.c:139:
+	ev = (struct proc_event*)msg->data;

CHECK:BRACES: braces {} should be used on all arms of this statement
#373: FILE: drivers/connector/cn_proc.c:146:
+	if (which_id == PROC_EVENT_UID) {
[...]
+	} else if (which_id == PROC_EVENT_GID) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#374: FILE: drivers/connector/cn_proc.c:147:
+^I ^Iev->id.ruid = task->uid;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#374: FILE: drivers/connector/cn_proc.c:147:
+^I ^Iev->id.ruid = task->uid;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#375: FILE: drivers/connector/cn_proc.c:148:
+^I ^Iev->id.euid = task->euid;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#375: FILE: drivers/connector/cn_proc.c:148:
+^I ^Iev->id.euid = task->euid;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#377: FILE: drivers/connector/cn_proc.c:150:
+^I   ^Iev->id.rgid = task->gid;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#377: FILE: drivers/connector/cn_proc.c:150:
+^I   ^Iev->id.rgid = task->gid;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#378: FILE: drivers/connector/cn_proc.c:151:
+^I   ^Iev->id.egid = task->egid;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#378: FILE: drivers/connector/cn_proc.c:151:
+^I   ^Iev->id.egid = task->egid;$

CHECK:BRACES: Unbalanced braces around else statement
#379: FILE: drivers/connector/cn_proc.c:152:
+	} else

ERROR:CODE_INDENT: code indent should use tabs where possible
#380: FILE: drivers/connector/cn_proc.c:153:
+^I     ^Ireturn;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#380: FILE: drivers/connector/cn_proc.c:153:
+^I     ^Ireturn;$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#397: FILE: drivers/connector/cn_proc.c:170:
+	msg = (struct cn_msg*)buffer;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#398: FILE: drivers/connector/cn_proc.c:171:
+	ev = (struct proc_event*)msg->data;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'msg->len == sizeof(*mc_op)'
#424: FILE: drivers/connector/cn_proc.c:197:
+	if (!(cn_already_initialized &&
+	    (msg->len == sizeof(*mc_op))))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#425: FILE: drivers/connector/cn_proc.c:198:
+	if (!(cn_already_initialized &&
+	    (msg->len == sizeof(*mc_op))))

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#428: FILE: drivers/connector/cn_proc.c:201:
+	mc_op = (enum proc_cn_mcast_op*)msg->data;

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#429: FILE: drivers/connector/cn_proc.c:202:
+	switch (*mc_op) {
+		case PROC_CN_MCAST_LISTEN:
[...]
+		case PROC_CN_MCAST_IGNORE:
[...]
+		default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#452: FILE: drivers/connector/cn_proc.c:225:
+	if ((err = cn_add_callback(&cn_proc_event_id, "cn_proc",

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#453: FILE: drivers/connector/cn_proc.c:226:
+^I ^I^I^I   &cn_proc_mcast_ctl))) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#453: FILE: drivers/connector/cn_proc.c:226:
+^I ^I^I^I   &cn_proc_mcast_ctl))) {$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#453: FILE: drivers/connector/cn_proc.c:226:
+	if ((err = cn_add_callback(&cn_proc_event_id, "cn_proc",
+	 			   &cn_proc_mcast_ctl))) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#454: FILE: drivers/connector/cn_proc.c:227:
+		printk(KERN_WARNING "cn_proc failed to register\n");

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#465: FILE: drivers/connector/cn_proc.c:238:
+__initcall(cn_proc_init);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000141316.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 24 errors, 20 warnings, 5 checks, 562 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000141316.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
