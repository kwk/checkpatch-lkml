WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#46: 
> > > for architectures that have different aligments, it should not need be

WARNING:TYPO_SPELLING: 'aligments' may be misspelled - perhaps 'alignments'?
#46: 
> > > for architectures that have different aligments, it should not need be
                                            ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:REPEATED_WORD: Possible repeated word: 'to'
#91: 
> > > I would much rather have either an extra 'compat' argument to to

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#226: FILE: include/linux/net.h:154:
+	int		(*compat_setsockopt)(struct socket *sock, int level,
+				      int optname, char __user *optval, int optlen);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#228: FILE: include/linux/net.h:156:
+	int		(*compat_getsockopt)(struct socket *sock, int level,
+				      int optname, char __user *optval, int __user *optlen);

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#249: FILE: include/linux/netfilter.h:86:
+	int (*compat_set)(struct sock *sk, int optval,
+			void __user *user, unsigned int len);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#257: FILE: include/linux/netfilter.h:94:
+	int (*compat_get)(struct sock *sk, int optval,
+			void __user *user, int *len);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#268: FILE: include/linux/netfilter.h:260:
+int compat_nf_setsockopt(struct sock *sk, int pf, int optval,
+		char __user *opt, int len);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#270: FILE: include/linux/netfilter.h:262:
+int compat_nf_getsockopt(struct sock *sk, int pf, int optval,
+		char __user *opt, int *len);

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#292: FILE: include/net/inet_connection_sock.h:56:
+	int	    (*compat_setsockopt)(struct sock *sk,
+				int level, int optname,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#295: FILE: include/net/inet_connection_sock.h:59:
+	int	    (*compat_getsockopt)(struct sock *sk,
+				int level, int optname,

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#308: FILE: include/net/ip.h:360:
+extern int	compat_ip_setsockopt(struct sock *sk, int level,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#309: FILE: include/net/ip.h:361:
+extern int	compat_ip_setsockopt(struct sock *sk, int level,
+			int optname, char __user *optval, int optlen);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#310: FILE: include/net/ip.h:362:
+extern int	compat_ip_getsockopt(struct sock *sk, int level,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#311: FILE: include/net/ip.h:363:
+extern int	compat_ip_getsockopt(struct sock *sk, int level,
+			int optname, char __user *optval, int __user *optlen);

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:SPACING: Unnecessary space before function pointer arguments
#331: FILE: include/net/sctp/structs.h:519:
+	int		(*compat_setsockopt)	(struct sock *sk,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#332: FILE: include/net/sctp/structs.h:520:
+	int		(*compat_setsockopt)	(struct sock *sk,
+					 int level,

WARNING:SPACING: Unnecessary space before function pointer arguments
#336: FILE: include/net/sctp/structs.h:524:
+	int		(*compat_getsockopt)	(struct sock *sk,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#337: FILE: include/net/sctp/structs.h:525:
+	int		(*compat_getsockopt)	(struct sock *sk,
+					 int level,

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#353: FILE: include/net/sock.h:525:
+	int			(*compat_setsockopt)(struct sock *sk,
+					int level,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#357: FILE: include/net/sock.h:529:
+	int			(*compat_getsockopt)(struct sock *sk,
+					int level,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#369: FILE: include/net/sock.h:830:
+extern int compat_sock_common_getsockopt(struct socket *sock, int level,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#370: FILE: include/net/sock.h:831:
+extern int compat_sock_common_getsockopt(struct socket *sock, int level,
+		int optname, char __user *optval, int __user *optlen);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#371: FILE: include/net/sock.h:832:
+extern int compat_sock_common_setsockopt(struct socket *sock, int level,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#372: FILE: include/net/sock.h:833:
+extern int compat_sock_common_setsockopt(struct socket *sock, int level,
+		int optname, char __user *optval, int optlen);

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#384: FILE: include/net/tcp.h:351:
+extern int			compat_tcp_getsockopt(struct sock *sk,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#385: FILE: include/net/tcp.h:352:
+extern int			compat_tcp_getsockopt(struct sock *sk,
+					int level, int optname,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#387: FILE: include/net/tcp.h:354:
+extern int			compat_tcp_setsockopt(struct sock *sk,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#388: FILE: include/net/tcp.h:355:
+extern int			compat_tcp_setsockopt(struct sock *sk,
+					int level, int optname,

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#416: FILE: net/compat.c:440:
+static int do_set_sock_timeout(struct socket *sock, int level,
+		int optname, char __user *optval, int optlen)

CHECK:SPACING: No space is necessary after a cast
#425: FILE: net/compat.c:455:
+	err = sock_setsockopt(sock, level, optname, (char *) &ktime, sizeof(ktime));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#432: FILE: net/compat.c:462:
+static int compat_sock_setsockopt(struct socket *sock, int level, int optname,
+				char __user *optval, int optlen)

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#464: FILE: net/compat.c:487:
+	if ((sock = sockfd_lookup(fd, &err))!=NULL)
+	{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#464: FILE: net/compat.c:487:
+	if ((sock = sockfd_lookup(fd, &err))!=NULL)
 	                                    ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#464: FILE: net/compat.c:487:
+	if ((sock = sockfd_lookup(fd, &err))!=NULL)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#466: FILE: net/compat.c:489:
+		err = security_socket_setsockopt(sock,level,optname);
 		                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#466: FILE: net/compat.c:489:
+		err = security_socket_setsockopt(sock,level,optname);
 		                                           ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#474: FILE: net/compat.c:497:
+			err = compat_sock_setsockopt(sock, level,
+					optname, optval, optlen);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#488: FILE: net/compat.c:510:
+static int do_get_sock_timeout(struct socket *sock, int level, int optname,
 		char __user *optval, int __user *optlen)

CHECK:SPACING: No space is necessary after a cast
#496: FILE: net/compat.c:525:
+	err = sock_getsockopt(sock, level, optname, (char *) &ktime, &len);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#506: FILE: net/compat.c:539:
+static int compat_sock_getsockopt(struct socket *sock, int level, int optname,
 				char __user *optval, int __user *optlen)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#518: FILE: net/compat.c:547:
+asmlinkage long compat_sys_getsockopt(int fd, int level, int optname,
+				char __user *optval, int __user *optlen)

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#523: FILE: net/compat.c:552:
+	if ((sock = sockfd_lookup(fd, &err))!=NULL)
+	{

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#523: FILE: net/compat.c:552:
+	if ((sock = sockfd_lookup(fd, &err))!=NULL)
 	                                    ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#523: FILE: net/compat.c:552:
+	if ((sock = sockfd_lookup(fd, &err))!=NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#526: FILE: net/compat.c:555:
+		err = security_socket_getsockopt(sock, level,
+							   optname);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#534: FILE: net/compat.c:563:
+			err = compat_sock_getsockopt(sock, level,
+					optname, optval, optlen);

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#556: FILE: net/core/sock.c:1390:
+int compat_sock_common_getsockopt(struct socket *sock, int level,
+		int optname, char __user *optval, int __user *optlen)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#577: FILE: net/core/sock.c:1433:
+int compat_sock_common_setsockopt(struct socket *sock,
+		int level, int optname, char __user *optval, int optlen)

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#599: FILE: net/dccp/dccp.h:250:
+extern int	   compat_dccp_getsockopt(struct sock *sk,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#600: FILE: net/dccp/dccp.h:251:
+extern int	   compat_dccp_getsockopt(struct sock *sk,
+				int level, int optname,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#602: FILE: net/dccp/dccp.h:253:
+extern int	   compat_dccp_setsockopt(struct sock *sk,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#603: FILE: net/dccp/dccp.h:254:
+extern int	   compat_dccp_setsockopt(struct sock *sk,
+				int level, int optname,

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#666: FILE: net/dccp/proto.c:259:
+static int do_dccp_setsockopt(struct sock *sk, int level, int optname,
+		char __user *optval, int optlen)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#697: FILE: net/dccp/proto.c:304:
+int compat_dccp_setsockopt(struct sock *sk, int level, int optname,
+		    char __user *optval, int optlen)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#721: FILE: net/dccp/proto.c:351:
+static int do_dccp_getsockopt(struct sock *sk, int level, int optname,
 		    char __user *optval, int __user *optlen)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#750: FILE: net/dccp/proto.c:401:
+int compat_dccp_getsockopt(struct sock *sk, int level, int optname,
+		    char __user *optval, int __user *optlen)

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#822: FILE: net/ipv4/ip_sockglue.c:384:
+static int do_ip_setsockopt(struct sock *sk, int level,
+		int optname, char __user *optval, int optlen)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#851: FILE: net/ipv4/ip_sockglue.c:862:
+int ip_setsockopt(struct sock *sk, int level,
+		int optname, char __user *optval, int optlen)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#862: FILE: net/ipv4/ip_sockglue.c:873:
+	if (err == -ENOPROTOOPT && optname != IP_HDRINCL &&
+		optname != IP_IPSEC_POLICY && optname != IP_XFRM_POLICY

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#864: FILE: net/ipv4/ip_sockglue.c:875:
+#ifdef CONFIG_IP_MROUTE
+		&& (optname < MRT_BASE || optname > (MRT_BASE + 10))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#877: FILE: net/ipv4/ip_sockglue.c:888:
+int compat_ip_setsockopt(struct sock *sk, int level,
+		int optname, char __user *optval, int optlen)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#888: FILE: net/ipv4/ip_sockglue.c:899:
+	if (err == -ENOPROTOOPT && optname != IP_HDRINCL &&
+		optname != IP_IPSEC_POLICY && optname != IP_XFRM_POLICY

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#890: FILE: net/ipv4/ip_sockglue.c:901:
+#ifdef CONFIG_IP_MROUTE
+		&& (optname < MRT_BASE || optname > (MRT_BASE + 10))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#895: FILE: net/ipv4/ip_sockglue.c:906:
+		err = compat_nf_setsockopt(sk, PF_INET,
+				optname, optval, optlen);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#910: FILE: net/ipv4/ip_sockglue.c:920:
+static int do_ip_getsockopt(struct sock *sk, int level, int optname,
+		char __user *optval, int __user *optlen)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#937: FILE: net/ipv4/ip_sockglue.c:1124:
+int ip_getsockopt(struct sock *sk, int level,
+		int optname, char __user *optval, int __user *optlen)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#946: FILE: net/ipv4/ip_sockglue.c:1133:
+#ifdef CONFIG_IP_MROUTE
+		&& (optname < MRT_BASE || optname > MRT_BASE+10)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#946: FILE: net/ipv4/ip_sockglue.c:1133:
+		&& (optname < MRT_BASE || optname > MRT_BASE+10)
 		                                            ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#949: FILE: net/ipv4/ip_sockglue.c:1136:
+^I   ^Iint len;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#949: FILE: net/ipv4/ip_sockglue.c:1136:
+^I   ^Iint len;$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#951: FILE: net/ipv4/ip_sockglue.c:1138:
+		if(get_user(len,optlen))
 		               ^

ERROR:SPACING: space required before the open parenthesis '('
#951: FILE: net/ipv4/ip_sockglue.c:1138:
+		if(get_user(len,optlen))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#956: FILE: net/ipv4/ip_sockglue.c:1143:
+		err = nf_getsockopt(sk, PF_INET, optname, optval,
+				&len);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#968: FILE: net/ipv4/ip_sockglue.c:1155:
+int compat_ip_getsockopt(struct sock *sk, int level,
+		int optname, char __user *optval, int __user *optlen)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#977: FILE: net/ipv4/ip_sockglue.c:1164:
+#ifdef CONFIG_IP_MROUTE
+		&& (optname < MRT_BASE || optname > MRT_BASE+10)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#977: FILE: net/ipv4/ip_sockglue.c:1164:
+		&& (optname < MRT_BASE || optname > MRT_BASE+10)
 		                                            ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#980: FILE: net/ipv4/ip_sockglue.c:1167:
+^I   ^Iint len;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#980: FILE: net/ipv4/ip_sockglue.c:1167:
+^I   ^Iint len;$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#982: FILE: net/ipv4/ip_sockglue.c:1169:
+		if(get_user(len,optlen))
 		               ^

ERROR:SPACING: space required before the open parenthesis '('
#982: FILE: net/ipv4/ip_sockglue.c:1169:
+		if(get_user(len,optlen))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#987: FILE: net/ipv4/ip_sockglue.c:1174:
+		err = compat_nf_getsockopt(sk, PF_INET,
+				optname, optval, &len);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1004: FILE: net/ipv4/ip_sockglue.c:1191:
+EXPORT_SYMBOL(compat_ip_setsockopt);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1014: FILE: net/ipv4/raw.c:664:
+static int do_raw_setsockopt(struct sock *sk, int level, int optname,
 			  char __user *optval, int optlen)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1039: FILE: net/ipv4/raw.c:685:
+static int compat_raw_setsockopt(struct sock *sk, int level, int optname,
+			  char __user *optval, int optlen)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1049: FILE: net/ipv4/raw.c:695:
+static int do_raw_getsockopt(struct sock *sk, int level, int optname,
+			  char __user *optval, int __user *optlen)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1068: FILE: net/ipv4/raw.c:716:
+static int compat_raw_getsockopt(struct sock *sk, int level, int optname,
+			  char __user *optval, int __user *optlen)

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1100: FILE: net/ipv4/tcp.c:1691:
+static int do_tcp_setsockopt(struct sock *sk, int level,
+		int optname, char __user *optval, int optlen)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1131: FILE: net/ipv4/tcp.c:1883:
+int compat_tcp_setsockopt(struct sock *sk, int level,
+		int optname, char __user *optval, int optlen)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1157: FILE: net/ipv4/tcp.c:1960:
+static int do_tcp_getsockopt(struct sock *sk, int level,
+		int optname, char __user *optval, int __user *optlen)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1187: FILE: net/ipv4/tcp.c:2062:
+int compat_tcp_getsockopt(struct sock *sk, int level,
+		int optname, char __user *optval, int __user *optlen)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1211: FILE: net/ipv4/tcp.c:2196:
+EXPORT_SYMBOL(compat_tcp_getsockopt);

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1245: FILE: net/ipv4/udp.c:1211:
+static int do_udp_setsockopt(struct sock *sk, int level, int optname,
 			  char __user *optval, int optlen)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1272: FILE: net/ipv4/udp.c:1266:
+static int compat_udp_setsockopt(struct sock *sk, int level, int optname,
+		char __user *optval, int optlen)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1282: FILE: net/ipv4/udp.c:1276:
+static int do_udp_getsockopt(struct sock *sk, int level, int optname,
 			  char __user *optval, int __user *optlen)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1307: FILE: net/ipv4/udp.c:1319:
+static int compat_udp_getsockopt(struct sock *sk, int level, int optname,
+			  char __user *optval, int __user *optlen)

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1385: FILE: net/netfilter/nf_sockopt.c:135:
+static int compat_nf_sockopt(struct sock *sk, int pf, int val,
+		      char __user *opt, int *len, int get)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1399: FILE: net/netfilter/nf_sockopt.c:149:
+				if (val >= ops->get_optmin
+				    && val < ops->get_optmax) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1412: FILE: net/netfilter/nf_sockopt.c:162:
+				if (val >= ops->set_optmin
+				    && val < ops->set_optmax) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1439: FILE: net/netfilter/nf_sockopt.c:189:
+int compat_nf_setsockopt(struct sock *sk, int pf,
+		int val, char __user *opt, int len)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1446: FILE: net/netfilter/nf_sockopt.c:196:
+int compat_nf_getsockopt(struct sock *sk, int pf,
+		int val, char __user *opt, int *len)

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000097322.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 14 errors, 33 warnings, 78 checks, 1163 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000097322.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
