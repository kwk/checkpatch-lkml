WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#36: 
Here is the next attempt.  I think I have addressed all suggestions (again).

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#73: FILE: arch/ppc64/kernel/pci_dma.c:70:
+struct pci_dev    iSeries_vio_dev_st  = { .sysdata = &iSeries_vio_dev_node, .dev.bus = &pci_bus_type };

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:CAMELCASE: Avoid CamelCase: <iSeries_vio_dev_st>
#73: FILE: arch/ppc64/kernel/pci_dma.c:70:
+struct pci_dev    iSeries_vio_dev_st  = { .sysdata = &iSeries_vio_dev_node, .dev.bus = &pci_bus_type };

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <iSeries_vio_dev_node>
#73: FILE: arch/ppc64/kernel/pci_dma.c:70:
+struct pci_dev    iSeries_vio_dev_st  = { .sysdata = &iSeries_vio_dev_node, .dev.bus = &pci_bus_type };

ERROR:POINTER_LOCATION: "foo  * bar" should be "foo  *bar"
#77: FILE: arch/ppc64/kernel/pci_dma.c:73:
+struct device  * iSeries_vio_dev  = &iSeries_vio_dev_st.dev;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <iSeries_vio_dev>
#77: FILE: arch/ppc64/kernel/pci_dma.c:73:
+struct device  * iSeries_vio_dev  = &iSeries_vio_dev_st.dev;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#136: FILE: drivers/block/viodasd.c:1:
+/* -*- linux-c -*-

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#156: FILE: drivers/block/viodasd.c:21:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#157: FILE: drivers/block/viodasd.c:22:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA$

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#180: FILE: drivers/block/viodasd.c:45:
+#include <asm/uaccess.h>

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#216: FILE: drivers/block/viodasd.c:81:
+extern struct device *iSeries_vio_dev;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:CAMELCASE: Avoid CamelCase: <HvLpEvent>
#237: FILE: drivers/block/viodasd.c:102:
+	struct HvLpEvent	event;

WARNING:TYPO_SPELLING: 'Cant' may be misspelled - perhaps 'Can't'?
#275: FILE: drivers/block/viodasd.c:140:
+	{ 0x0207, EBUSY, "Cant Lock" },
 	                  ^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#305: FILE: drivers/block/viodasd.c:170:
+	spinlock_t	q_lock;

CHECK:CAMELCASE: Avoid CamelCase: <HvLpEvent_Rc>
#315: FILE: drivers/block/viodasd.c:180:
+	HvLpEvent_Rc hvrc;

CHECK:CAMELCASE: Avoid CamelCase: <HvCallEvent_signalLpEventFast>
#321: FILE: drivers/block/viodasd.c:186:
+	hvrc = HvCallEvent_signalLpEventFast(viopath_hostLp,

CHECK:CAMELCASE: Avoid CamelCase: <viopath_hostLp>
#321: FILE: drivers/block/viodasd.c:186:
+	hvrc = HvCallEvent_signalLpEventFast(viopath_hostLp,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#322: FILE: drivers/block/viodasd.c:187:
+	hvrc = HvCallEvent_signalLpEventFast(viopath_hostLp,
+			HvLpEvent_Type_VirtualIo,

CHECK:CAMELCASE: Avoid CamelCase: <HvLpEvent_Type_VirtualIo>
#322: FILE: drivers/block/viodasd.c:187:
+			HvLpEvent_Type_VirtualIo,

CHECK:CAMELCASE: Avoid CamelCase: <HvLpEvent_AckInd_DoAck>
#324: FILE: drivers/block/viodasd.c:189:
+			HvLpEvent_AckInd_DoAck, HvLpEvent_AckType_ImmediateAck,

CHECK:CAMELCASE: Avoid CamelCase: <HvLpEvent_AckType_ImmediateAck>
#324: FILE: drivers/block/viodasd.c:189:
+			HvLpEvent_AckInd_DoAck, HvLpEvent_AckType_ImmediateAck,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#331: FILE: drivers/block/viodasd.c:196:
+		printk(VIOD_KERN_WARNING "HV open failed %d\n", (int)hvrc);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#342: FILE: drivers/block/viodasd.c:207:
+		printk(VIOD_KERN_WARNING

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#362: FILE: drivers/block/viodasd.c:227:
+	hvrc = HvCallEvent_signalLpEventFast(viopath_hostLp,
+			HvLpEvent_Type_VirtualIo,

CHECK:CAMELCASE: Avoid CamelCase: <HvLpEvent_AckInd_NoAck>
#364: FILE: drivers/block/viodasd.c:229:
+			HvLpEvent_AckInd_NoAck, HvLpEvent_AckType_ImmediateAck,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#371: FILE: drivers/block/viodasd.c:236:
+		printk(VIOD_KERN_WARNING "HV close call failed %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#372: FILE: drivers/block/viodasd.c:237:
+		printk(VIOD_KERN_WARNING "HV close call failed %d\n",
+				(int)hvrc);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#376: FILE: drivers/block/viodasd.c:241:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!geo"
#393: FILE: drivers/block/viodasd.c:258:
+		if (geo == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:CONST_STRUCT: struct block_device_operations should normally be const
#423: FILE: drivers/block/viodasd.c:288:
+static struct block_device_operations viodasd_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#433: FILE: drivers/block/viodasd.c:298:
+static void viodasd_end_request(struct request *req, int uptodate,
                                                          ^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#434: FILE: drivers/block/viodasd.c:299:
+static void viodasd_end_request(struct request *req, int uptodate,
+		int num_sectors)

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#436: FILE: drivers/block/viodasd.c:301:
+	if (end_that_request_first(req, uptodate, num_sectors))
 	                                ^^^^^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#471: FILE: drivers/block/viodasd.c:336:
+        d = req->rq_disk->private_data;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#471: FILE: drivers/block/viodasd.c:336:
+        d = req->rq_disk->private_data;$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#483: FILE: drivers/block/viodasd.c:348:
+		hvrc = HvCallEvent_signalLpEventFast(viopath_hostLp,
+				HvLpEvent_Type_VirtualIo, viocmd,

CHECK:BRACES: Unbalanced braces around else statement
#492: FILE: drivers/block/viodasd.c:357:
+	else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bevent"
#495: FILE: drivers/block/viodasd.c:360:
+		if (bevent == NULL) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#496: FILE: drivers/block/viodasd.c:361:
+			printk(VIOD_KERN_WARNING

CHECK:CAMELCASE: Avoid CamelCase: <xFlags>
#507: FILE: drivers/block/viodasd.c:372:
+		bevent->event.xFlags.xValid = 1;

CHECK:CAMELCASE: Avoid CamelCase: <xValid>
#507: FILE: drivers/block/viodasd.c:372:
+		bevent->event.xFlags.xValid = 1;

CHECK:CAMELCASE: Avoid CamelCase: <xFunction>
#508: FILE: drivers/block/viodasd.c:373:
+		bevent->event.xFlags.xFunction = HvLpEvent_Function_Int;

CHECK:CAMELCASE: Avoid CamelCase: <HvLpEvent_Function_Int>
#508: FILE: drivers/block/viodasd.c:373:
+		bevent->event.xFlags.xFunction = HvLpEvent_Function_Int;

CHECK:CAMELCASE: Avoid CamelCase: <xAckInd>
#509: FILE: drivers/block/viodasd.c:374:
+		bevent->event.xFlags.xAckInd = HvLpEvent_AckInd_DoAck;

CHECK:CAMELCASE: Avoid CamelCase: <xAckType>
#510: FILE: drivers/block/viodasd.c:375:
+		bevent->event.xFlags.xAckType = HvLpEvent_AckType_ImmediateAck;

CHECK:CAMELCASE: Avoid CamelCase: <xType>
#511: FILE: drivers/block/viodasd.c:376:
+		bevent->event.xType = HvLpEvent_Type_VirtualIo;

CHECK:CAMELCASE: Avoid CamelCase: <xSubtype>
#512: FILE: drivers/block/viodasd.c:377:
+		bevent->event.xSubtype = viocmd;

CHECK:CAMELCASE: Avoid CamelCase: <xSourceLp>
#513: FILE: drivers/block/viodasd.c:378:
+		bevent->event.xSourceLp = HvLpConfig_getLpIndex();

CHECK:CAMELCASE: Avoid CamelCase: <HvLpConfig_getLpIndex>
#513: FILE: drivers/block/viodasd.c:378:
+		bevent->event.xSourceLp = HvLpConfig_getLpIndex();

CHECK:CAMELCASE: Avoid CamelCase: <xTargetLp>
#514: FILE: drivers/block/viodasd.c:379:
+		bevent->event.xTargetLp = viopath_hostLp;

CHECK:CAMELCASE: Avoid CamelCase: <xSizeMinus1>
#515: FILE: drivers/block/viodasd.c:380:
+		bevent->event.xSizeMinus1 =

CHECK:CAMELCASE: Avoid CamelCase: <xSourceInstanceId>
#518: FILE: drivers/block/viodasd.c:383:
+		bevent->event.xSourceInstanceId =

CHECK:CAMELCASE: Avoid CamelCase: <xTargetInstanceId>
#520: FILE: drivers/block/viodasd.c:385:
+		bevent->event.xTargetInstanceId =

CHECK:CAMELCASE: Avoid CamelCase: <xCorrelationToken>
#522: FILE: drivers/block/viodasd.c:387:
+		bevent->event.xCorrelationToken = (u64)req;

CHECK:CAMELCASE: Avoid CamelCase: <HvCallEvent_signalLpEvent>
#539: FILE: drivers/block/viodasd.c:404:
+		hvrc = HvCallEvent_signalLpEvent(&bevent->event);

CHECK:CAMELCASE: Avoid CamelCase: <HvLpEvent_Rc_Good>
#543: FILE: drivers/block/viodasd.c:408:
+	if (hvrc != HvLpEvent_Rc_Good) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#544: FILE: drivers/block/viodasd.c:409:
+		printk(VIOD_KERN_WARNING

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!req"
#573: FILE: drivers/block/viodasd.c:438:
+		if (req == NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#604: FILE: drivers/block/viodasd.c:469:
+	hvrc = HvCallEvent_signalLpEventFast(viopath_hostLp,
+			HvLpEvent_Type_VirtualIo,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#613: FILE: drivers/block/viodasd.c:478:
+		printk(VIOD_KERN_WARNING "bad rc on HV open %d\n", (int)hvrc);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#625: FILE: drivers/block/viodasd.c:490:
+	hvrc = HvCallEvent_signalLpEventFast(viopath_hostLp,
+			HvLpEvent_Type_VirtualIo,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#634: FILE: drivers/block/viodasd.c:499:
+		printk(VIOD_KERN_WARNING

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#638: FILE: drivers/block/viodasd.c:503:
+	printk(VIOD_KERN_INFO "disk %d: %lu sectors (%lu MB) "

WARNING:SPLIT_STRING: quoted string split across lines
#639: FILE: drivers/block/viodasd.c:504:
+	printk(VIOD_KERN_INFO "disk %d: %lu sectors (%lu MB) "
+			"CHS=%d/%d/%d sector size %d\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!q"
#647: FILE: drivers/block/viodasd.c:512:
+	if (q == NULL) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#648: FILE: drivers/block/viodasd.c:513:
+		printk(VIOD_KERN_WARNING "cannot allocate queue for disk %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#649: FILE: drivers/block/viodasd.c:514:
+		printk(VIOD_KERN_WARNING "cannot allocate queue for disk %d\n",
+				dev_no);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!g"
#653: FILE: drivers/block/viodasd.c:518:
+	if (g == NULL) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#654: FILE: drivers/block/viodasd.c:519:
+		printk(VIOD_KERN_WARNING

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#669: FILE: drivers/block/viodasd.c:534:
+		snprintf(g->disk_name, sizeof(g->disk_name),
+				VIOD_GENHD_NAME "%c%c",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#673: FILE: drivers/block/viodasd.c:538:
+		snprintf(g->disk_name, sizeof(g->disk_name),
+				VIOD_GENHD_NAME "%c", 'a' + (dev_no % 26));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#675: FILE: drivers/block/viodasd.c:540:
+	snprintf(g->devfs_name, sizeof(g->devfs_name),
+			"%s%d", VIOD_GENHD_DEVFS_NAME, dev_no);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#687: FILE: drivers/block/viodasd.c:552:
+static int block_event_to_scatterlist(const struct vioblocklpevent *bevent,
+		struct scatterlist *sg, int *total_len)

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#739: FILE: drivers/block/viodasd.c:604:
+	spinlock_t *qlock;

CHECK:CAMELCASE: Avoid CamelCase: <xRc>
#760: FILE: drivers/block/viodasd.c:625:
+	error = event->xRc != HvLpEvent_Rc_Good;

WARNING:LINE_SPACING: Missing a blank line after declarations
#763: FILE: drivers/block/viodasd.c:628:
+		const struct vio_error_entry *err;
+		err = vio_lookup_rc(viodasd_err_table, bevent->sub_result);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#764: FILE: drivers/block/viodasd.c:629:
+		printk(VIOD_KERN_WARNING "read/write error %d:0x%04x (%s)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#765: FILE: drivers/block/viodasd.c:630:
+		printk(VIOD_KERN_WARNING "read/write error %d:0x%04x (%s)\n",
+				event->xRc, bevent->sub_result, err->msg);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!event"
#785: FILE: drivers/block/viodasd.c:650:
+	if (event == NULL)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#790: FILE: drivers/block/viodasd.c:655:
+		printk(VIOD_KERN_WARNING

CHECK:CAMELCASE: Avoid CamelCase: <HvLpEvent_Rc_InvalidSubtype>
#793: FILE: drivers/block/viodasd.c:658:
+			event->xRc = HvLpEvent_Rc_InvalidSubtype;

CHECK:CAMELCASE: Avoid CamelCase: <HvCallEvent_ackLpEvent>
#794: FILE: drivers/block/viodasd.c:659:
+			HvCallEvent_ackLpEvent(event);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#834: FILE: drivers/block/viodasd.c:699:
+		printk(VIOD_KERN_WARNING "invalid subtype!");

CHECK:CAMELCASE: Avoid CamelCase: <HvLpIndexInvalid>
#851: FILE: drivers/block/viodasd.c:716:
+	if (viopath_hostLp == HvLpIndexInvalid)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#855: FILE: drivers/block/viodasd.c:720:
+		printk(VIOD_KERN_WARNING "invalid hosting partition\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#859: FILE: drivers/block/viodasd.c:724:
+	printk(VIOD_KERN_INFO "vers " VIOD_VERS ", hosting partition %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#860: FILE: drivers/block/viodasd.c:725:
+	printk(VIOD_KERN_INFO "vers " VIOD_VERS ", hosting partition %d\n",
+			viopath_hostLp);

ERROR:CODE_INDENT: code indent should use tabs where possible
#862: FILE: drivers/block/viodasd.c:727:
+        /* register the block device */$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#864: FILE: drivers/block/viodasd.c:729:
+		printk(VIOD_KERN_WARNING

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#871: FILE: drivers/block/viodasd.c:736:
+	if (viopath_open(viopath_hostLp, viomajorsubtype_blockio,
+				VIOMAXREQ + 2)) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#872: FILE: drivers/block/viodasd.c:737:
+		printk(VIOD_KERN_WARNING

CHECK:CAMELCASE: Avoid CamelCase: <vio_setHandler>
#880: FILE: drivers/block/viodasd.c:745:
+	vio_setHandler(viomajorsubtype_blockio, handle_block_event);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#894: FILE: drivers/block/viodasd.c:759:
+		printk(VIOD_KERN_INFO

ERROR:CODE_INDENT: code indent should use tabs where possible
#907: FILE: drivers/block/viodasd.c:772:
+        for (i = 0; i < MAX_DISKNO; i++) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#907: FILE: drivers/block/viodasd.c:772:
+        for (i = 0; i < MAX_DISKNO; i++) {$

CHECK:CAMELCASE: Avoid CamelCase: <vio_clearHandler>
#916: FILE: drivers/block/viodasd.c:781:
+	vio_clearHandler(viomajorsubtype_blockio);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000300231.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 6 errors, 31 warnings, 59 checks, 862 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000300231.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
