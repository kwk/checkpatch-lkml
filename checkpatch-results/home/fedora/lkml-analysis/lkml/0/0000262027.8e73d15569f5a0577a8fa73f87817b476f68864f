ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#62: FILE: drivers/pci/pci.c:388:
+	if ((err = pci_enable_device_bars(dev, (1 << PCI_NUM_RESOURCES) - 1)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#79: FILE: drivers/pci/quirks.c:494:
+DECLARE_PCI_FIXUP_ENABLE(PCI_VENDOR_ID_VIA,	PCI_DEVICE_ID_VIA_82C586_2,	quirk_via_irqpic );

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited before that close parenthesis ')'
#80: FILE: drivers/pci/quirks.c:495:
+DECLARE_PCI_FIXUP_ENABLE(PCI_VENDOR_ID_VIA,	PCI_DEVICE_ID_VIA_82C686_5,	quirk_via_irqpic );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#81: FILE: drivers/pci/quirks.c:496:
+DECLARE_PCI_FIXUP_ENABLE(PCI_VENDOR_ID_VIA,	PCI_DEVICE_ID_VIA_82C686_6,	quirk_via_irqpic );

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#89: FILE: drivers/pci/quirks.c:1004:
+extern struct pci_fixup __start_pci_fixups_enable[];

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#90: FILE: drivers/pci/quirks.c:1005:
+extern struct pci_fixup __end_pci_fixups_enable[];

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#123: FILE: include/linux/pci.h:1025:
+#define DECLARE_PCI_FIXUP_ENABLE(vendor, device, hook)				\
+	static struct pci_fixup __pci_fixup_##vendor##device##hook __attribute_used__	\
+	__attribute__((__section__(".pci_fixup_enable"))) = {				\
+		vendor, device, hook };

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".pci_fixup_enable") over __attribute__((__section__(".pci_fixup_enable")))
#125: FILE: include/linux/pci.h:1027:
+	__attribute__((__section__(".pci_fixup_enable"))) = {				\

CHECK:LINE_SPACING: Please don't use multiple blank lines
#128: FILE: include/linux/pci.h:1030:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000262027.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 4 errors, 4 warnings, 1 checks, 75 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000262027.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
