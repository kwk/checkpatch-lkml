WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#24: 
This patch will fold the macros inside their uses (there is just one defined

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#74: FILE: arch/um/kernel/physmem.c:49:
+	struct phys_desc * hashtable[PHYS_HASHSIZE];

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#79: FILE: arch/um/kernel/physmem.c:54:
+	struct phys_desc * next_hash;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#80: FILE: arch/um/kernel/physmem.c:55:
+	struct phys_desc * prev_hash;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#157: FILE: arch/um/kernel/physmem.c:78:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#158: FILE: arch/um/kernel/physmem.c:79:
+static void insert_virtmem_hash(struct virtmem_table * tbl, struct phys_desc * elem)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#158: FILE: arch/um/kernel/physmem.c:79:
+static void insert_virtmem_hash(struct virtmem_table * tbl, struct phys_desc * elem)

ERROR:POINTER_LOCATION: "foo ** bar" should be "foo **bar"
#161: FILE: arch/um/kernel/physmem.c:82:
+	struct phys_desc ** base = &tbl->hashtable[ix];

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#162: FILE: arch/um/kernel/physmem.c:83:
+	struct phys_desc * ptr = *base;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#163: FILE: arch/um/kernel/physmem.c:84:
+	struct phys_desc * prev = NULL;

ERROR:SPACING: space required before the open parenthesis '('
#166: FILE: arch/um/kernel/physmem.c:87:
+	while(ptr && virt_cmp(ptr->virt, elem->virt)) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#173: FILE: arch/um/kernel/physmem.c:94:
+	if(ptr) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#173: FILE: arch/um/kernel/physmem.c:94:
+	if(ptr) {
+		ptr->virt_ptrs.prev_hash = elem;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#179: FILE: arch/um/kernel/physmem.c:100:
+static void remove_virtmem_hash(struct virtmem_table * tbl, struct phys_desc * elem)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#179: FILE: arch/um/kernel/physmem.c:100:
+static void remove_virtmem_hash(struct virtmem_table * tbl, struct phys_desc * elem)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#181: FILE: arch/um/kernel/physmem.c:102:
+	struct phys_desc * next = elem->virt_ptrs.next_hash;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#182: FILE: arch/um/kernel/physmem.c:103:
+	struct phys_desc * prev = elem->virt_ptrs.prev_hash;

ERROR:SPACING: space required before the open parenthesis '('
#185: FILE: arch/um/kernel/physmem.c:106:
+	if(next)

ERROR:SPACING: space required before the open parenthesis '('
#187: FILE: arch/um/kernel/physmem.c:108:
+	if(prev)

CHECK:BRACES: braces {} should be used on all arms of this statement
#187: FILE: arch/um/kernel/physmem.c:108:
+	if(prev)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#189: FILE: arch/um/kernel/physmem.c:110:
+	else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#191: FILE: arch/um/kernel/physmem.c:112:
+		int ix = virt_hash(elem->virt);
+		tbl->hashtable[ix] = next;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#195: FILE: arch/um/kernel/physmem.c:116:
+static struct phys_desc * find_virtmem_hash(struct virtmem_table * tbl, void* pos)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#195: FILE: arch/um/kernel/physmem.c:116:
+static struct phys_desc * find_virtmem_hash(struct virtmem_table * tbl, void* pos)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#195: FILE: arch/um/kernel/physmem.c:116:
+static struct phys_desc * find_virtmem_hash(struct virtmem_table * tbl, void* pos)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#198: FILE: arch/um/kernel/physmem.c:119:
+	struct phys_desc * ptr = tbl->hashtable[ix];

WARNING:LINE_SPACING: Missing a blank line after declarations
#199: FILE: arch/um/kernel/physmem.c:120:
+	struct phys_desc * ptr = tbl->hashtable[ix];
+	while(ptr && virt_cmp(ptr->virt, pos))

ERROR:SPACING: space required before the open parenthesis '('
#199: FILE: arch/um/kernel/physmem.c:120:
+	while(ptr && virt_cmp(ptr->virt, pos))

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000251564.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 21 errors, 4 warnings, 3 checks, 165 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000251564.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
