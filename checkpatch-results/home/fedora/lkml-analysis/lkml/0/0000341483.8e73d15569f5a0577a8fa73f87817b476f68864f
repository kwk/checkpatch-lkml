WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#38: 
-----------------------------------------------------------------------------------

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#41: 
--- a/arch/i386/Kconfig	Fri Aug 29 14:47:50 2003

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#46: FILE: arch/i386/Kconfig:468:
unsure.

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#48: FILE: arch/i386/Kconfig:470:
+config CKRM_MEM
+	bool "Class based physical memory accounting"
+	default y
+	depends on CKRM
+	help
+	  Provide the basic support for collecting physical memory usage

Kconfig symbols should have a help text which fully describes
it.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#58: FILE: arch/i386/Kconfig:478:
+config CKRM_MEM_DEBUG_BEANCOUNTING
+	bool "Debug bean counting of page usage"
+	default n
+	depends on CKRM_MEM
+	help
+	  We hope that all pages have already been assigned to a class before
+	  they are added to the active / inactive lists. by enabling this, you

ERROR:TRAILING_WHITESPACE: trailing whitespace
#69: FILE: arch/i386/Kconfig:488:
+choice $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#69: FILE: arch/i386/Kconfig:488:
+choice 
+	prompt "Page reclaim algorithm"
+	default CKRM_MEM_GLOBAL_LIST
+	depends on CKRM_MEM
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#74: FILE: arch/i386/Kconfig:493:
+config CKRM_MEM_DEFAULT_RECLAIM
+	bool "System default reclaim way"
+	help
+	   Use this if you want the feature of counting page usage of each

ERROR:TRAILING_WHITESPACE: trailing whitespace
#79: FILE: arch/i386/Kconfig:497:
+^I   without any change to the system page reclamation behavior. $

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#81: FILE: arch/i386/Kconfig:499:
+config CKRM_MEM_GLOBAL_LIST
+	bool "Using global page list"
+	help
+	   Use the global page active list and inactive list per zone with

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#90: FILE: arch/i386/Kconfig:506:
+config CKRM_MEM_PERCLASS_LIST
+	bool "Using per class page list"
+	help
+	   Maintain the page active and inactive lists per class in each zone.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#94: FILE: arch/i386/Kconfig:510:
+endchoice^I   ^I   $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#97: FILE: arch/i386/Kconfig:513:
+^Ibool "Leave unscaned page unmoved"^I   $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#102: FILE: arch/i386/Kconfig:518:
+^I  are skipped. Pages belonging to those classes are checked but not $

WARNING:TYPO_SPELLING: 'appoximate' may be misspelled - perhaps 'approximate'?
#109: FILE: arch/i386/Kconfig:523:
+	  violates the appoximate LRU order.
 	               ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#110: FILE: arch/i386/Kconfig:524:
+^I  $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#146: FILE: include/linux/ckrm_mem.h:1:
+/* include/linux/ckrm_mem.h : memory control for CKRM

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#146: FILE: include/linux/ckrm_mem.h:1:
+/* include/linux/ckrm_mem.h : memory control for CKRM

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#150: FILE: include/linux/ckrm_mem.h:5:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#151: FILE: include/linux/ckrm_mem.h:6:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#152: FILE: include/linux/ckrm_mem.h:7:
+ * Memory control functions of the CKRM kernel API $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#155: FILE: include/linux/ckrm_mem.h:10:
+ * $

WARNING:TYPO_SPELLING: 'inforamtion' may be misspelled - perhaps 'information'?
#178: FILE: include/linux/ckrm_mem.h:32:
+ * MAX_NR_ZONES of page usage statistic inforamtion
                                         ^^^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#180: FILE: include/linux/ckrm_mem.h:34:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#180: FILE: include/linux/ckrm_mem.h:34:
+ $

WARNING:NEW_TYPEDEFS: do not add new typedefs
#183: FILE: include/linux/ckrm_mem.h:37:
+typedef struct ckrm_page_accounting {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#186: FILE: include/linux/ckrm_mem.h:39:
+^I$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#186: FILE: include/linux/ckrm_mem.h:39:
+	unsigned long  flags; /* per zone per class flags, used for mark the
+	

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#189: FILE: include/linux/ckrm_mem.h:41:
+	unsigned long nr_active;   /* # of pages in active list, protected by
+	unsigned long nr_inactive; /* # of pages in active list */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#190: FILE: include/linux/ckrm_mem.h:42:
+^I$

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#191: FILE: include/linux/ckrm_mem.h:43:
+	struct ckrm_mem_class* class; /* pointer to the memory share class

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#193: FILE: include/linux/ckrm_mem.h:44:
+	struct ckrm_mem_class* class; /* pointer to the memory share class
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#199: FILE: include/linux/ckrm_mem.h:49:
+	int shrink_weight;		  /* calculated based on usage and share to choose
+	struct list_head victim_list;     /* used to chain victims together to

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#201: FILE: include/linux/ckrm_mem.h:50:
+	struct list_head victim_list;     /* used to chain victims together to
+						 protected by ACCT_VICTIM_BIT*/

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#201: FILE: include/linux/ckrm_mem.h:50:
+						 protected by ACCT_VICTIM_BIT*/

ERROR:SPACING: space required after that close brace '}'
#206: FILE: include/linux/ckrm_mem.h:55:
+}ckrm_pageusage_t;          /* per zone per class page usage statistics

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#208: FILE: include/linux/ckrm_mem.h:56:
+}ckrm_pageusage_t;          /* per zone per class page usage statistics
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#212: FILE: include/linux/ckrm_mem.h:59:
+	struct list_head mcls_list;	/* list of all 1-level classes controlled
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#215: FILE: include/linux/ckrm_mem.h:61:
+	unsigned long        mcls_share;/* percentage of memory usage allowed
+	unsigned long        nr_share;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#218: FILE: include/linux/ckrm_mem.h:64:
+^I$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#221: FILE: include/linux/ckrm_mem.h:66:
+	atomic_t             nr_total;  /* # of pages per class, including
+	ckrm_pageusage_t     mcls_usage[MAX_NR_ZONES];

ERROR:TRAILING_WHITESPACE: trailing whitespace
#222: FILE: include/linux/ckrm_mem.h:67:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#233: FILE: include/linux/ckrm_mem.h:78:
+extern ckrm_mem_t  pagecache_mem_class; $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#244: FILE: include/linux/ckrm_mem.h:88:
+/* used for shrink_zones when fail to reclaim pages from over-share
+extern int ckrm_memshare_disabled;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#264: FILE: include/linux/ckrm_mem.h:106:
+#define page_class(page)	((ckrm_mem_t*)((page)->sharelink))

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#267: FILE: include/linux/ckrm_mem.h:108:
+#define page_lrucharge(page)	((ckrm_pageusage_t*)((page)->chargelink))

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#275: FILE: include/linux/ckrm_mem.h:115:
+#define ACCT_READYSHRINK	0x00000001 /* shrink_list will try to reclaim
+#define ACCT_READYSCAN_NOSHRINK 0x00000002 /* shrink_cache will scan

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#277: FILE: include/linux/ckrm_mem.h:116:
+#define ACCT_READYSCAN_NOSHRINK 0x00000002 /* shrink_cache will scan
+#define ACCT_READYSCAN		(ACCT_READYSHRINK|ACCT_READYSCAN_NOSHRINK)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#280: FILE: include/linux/ckrm_mem.h:118:
+#define ACCT_READYREFILL	0x00000004 /* refill_inactive will move page
+#define

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#304: FILE: include/linux/ckrm_mem_inline.h:1:
+/* include/linux/ckrm_mem_inline.h : memory control for CKRM

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#304: FILE: include/linux/ckrm_mem_inline.h:1:
+/* include/linux/ckrm_mem_inline.h : memory control for CKRM

ERROR:TRAILING_WHITESPACE: trailing whitespace
#308: FILE: include/linux/ckrm_mem_inline.h:5:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#309: FILE: include/linux/ckrm_mem_inline.h:6:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#310: FILE: include/linux/ckrm_mem_inline.h:7:
+ * Memory control functions of the CKRM kernel API $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#313: FILE: include/linux/ckrm_mem_inline.h:10:
+ * $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#327: FILE: include/linux/ckrm_mem_inline.h:24:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#337: FILE: include/linux/ckrm_mem_inline.h:32:
+static inline int ckrm_mem_share_compare(ckrm_mem_t* a, ckrm_mem_t* b)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#337: FILE: include/linux/ckrm_mem_inline.h:32:
+static inline int ckrm_mem_share_compare(ckrm_mem_t* a, ckrm_mem_t* b)

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#339: FILE: include/linux/ckrm_mem_inline.h:34:
+	if (a->nr_share<b->nr_share)
 	               ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#339: FILE: include/linux/ckrm_mem_inline.h:34:
+	if (a->nr_share<b->nr_share)
[...]
+	else if (a->nr_share>b->nr_share)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#341: FILE: include/linux/ckrm_mem_inline.h:36:
+	else if (a->nr_share>b->nr_share)
 	                    ^

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#343: FILE: include/linux/ckrm_mem_inline.h:38:
+		return 1;
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#343: FILE: include/linux/ckrm_mem_inline.h:38:
+	else {

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#344: FILE: include/linux/ckrm_mem_inline.h:39:
+		if (a->mcls_id>b->mcls_id)
 		              ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#346: FILE: include/linux/ckrm_mem_inline.h:41:
+		else if (a->mcls_id<b->mcls_id)
 		                   ^

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#353: FILE: include/linux/ckrm_mem_inline.h:48:
+static inline void mem_class_get(ckrm_mem_t* cls)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#359: FILE: include/linux/ckrm_mem_inline.h:54:
+static inline void mem_class_put(ckrm_mem_t* cls)

ERROR:SPACING: space prohibited after that open parenthesis '('
#361: FILE: include/linux/ckrm_mem_inline.h:56:
+	if ( (cls) && atomic_dec_and_test(&((cls)->mcls_count)) ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#361: FILE: include/linux/ckrm_mem_inline.h:56:
+	if ( (cls) && atomic_dec_and_test(&((cls)->mcls_count)) ) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#362: FILE: include/linux/ckrm_mem_inline.h:57:
+		printk("try to free cls %p:%d\n", cls, cls->mcls_id);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#364: FILE: include/linux/ckrm_mem_inline.h:59:
+^I}^I$

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#367: FILE: include/linux/ckrm_mem_inline.h:62:
+static inline void set_page_lrucharge(struct page* page,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#369: FILE: include/linux/ckrm_mem_inline.h:63:
+static inline void set_page_lrucharge(struct page* page,
+{

ERROR:CODE_INDENT: code indent should use tabs where possible
#370: FILE: include/linux/ckrm_mem_inline.h:64:
+        (ckrm_pageusage_t*)((page)->chargelink)=acct;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#370: FILE: include/linux/ckrm_mem_inline.h:64:
+        (ckrm_pageusage_t*)((page)->chargelink)=acct;$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#370: FILE: include/linux/ckrm_mem_inline.h:64:
+        (ckrm_pageusage_t*)((page)->chargelink)=acct;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#370: FILE: include/linux/ckrm_mem_inline.h:64:
+        (ckrm_pageusage_t*)((page)->chargelink)=acct;
                                                ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#371: FILE: include/linux/ckrm_mem_inline.h:65:
+        mem_class_get(acct->class);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#371: FILE: include/linux/ckrm_mem_inline.h:65:
+        mem_class_get(acct->class);$

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#374: FILE: include/linux/ckrm_mem_inline.h:68:
+static inline void set_page_lrucharge_byclass(struct page* page)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#376: FILE: include/linux/ckrm_mem_inline.h:70:
+	ckrm_mem_t* cls = page_class(page);

WARNING:LINE_SPACING: Missing a blank line after declarations
#377: FILE: include/linux/ckrm_mem_inline.h:71:
+	ckrm_mem_t* cls = page_class(page);
+	if (cls) {

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#378: FILE: include/linux/ckrm_mem_inline.h:72:
+		(page)->chargelink = &((cls)->mcls_usage[page->flags>>ZONE_SHIFT]);
 		                                                    ^

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#383: FILE: include/linux/ckrm_mem_inline.h:77:
+static inline void clear_page_lrucharge(struct page* page)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#385: FILE: include/linux/ckrm_mem_inline.h:79:
+	ckrm_pageusage_t* charge = page_lrucharge(page);

WARNING:LINE_SPACING: Missing a blank line after declarations
#386: FILE: include/linux/ckrm_mem_inline.h:80:
+	ckrm_pageusage_t* charge = page_lrucharge(page);
+	if (charge) {

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#392: FILE: include/linux/ckrm_mem_inline.h:86:
+static inline void set_page_account_nolock(struct page* page,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#394: FILE: include/linux/ckrm_mem_inline.h:87:
+static inline void set_page_account_nolock(struct page* page,
+{

ERROR:SPACING: space prohibited after that open parenthesis '('
#398: FILE: include/linux/ckrm_mem_inline.h:91:
+		atomic_inc( &(page_class(page)->nr_total) );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#398: FILE: include/linux/ckrm_mem_inline.h:91:
+		atomic_inc( &(page_class(page)->nr_total) );

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#402: FILE: include/linux/ckrm_mem_inline.h:95:
+static inline void ckrm_set_page_account(struct page* page, ckrm_mem_t*

ERROR:SPACING: space required after that ',' (ctx:VxV)
#406: FILE: include/linux/ckrm_mem_inline.h:98:
+	set_page_account_nolock(page,cls);
 	                            ^

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#410: FILE: include/linux/ckrm_mem_inline.h:102:
+static inline void clear_page_account_nolock(struct page* page)

ERROR:SPACING: space prohibited after that open parenthesis '('
#414: FILE: include/linux/ckrm_mem_inline.h:106:
+		mem_class_put( page_class(page) );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#414: FILE: include/linux/ckrm_mem_inline.h:106:
+		mem_class_put( page_class(page) );

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#415: FILE: include/linux/ckrm_mem_inline.h:107:
+		page->sharelink=NULL;
 		               ^

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#419: FILE: include/linux/ckrm_mem_inline.h:111:
+static inline void clear_page_account(struct page* page)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#426: FILE: include/linux/ckrm_mem_inline.h:118:
+static inline void reset_page_account(struct page* page, ckrm_mem_t*

ERROR:SPACING: space required after that ',' (ctx:VxV)
#431: FILE: include/linux/ckrm_mem_inline.h:122:
+	ckrm_set_page_account(page,newcls);
 	                          ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#435: FILE: include/linux/ckrm_mem_inline.h:126:
+
+

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#436: FILE: include/linux/ckrm_mem_inline.h:127:
+static inline void mem_class_inc_active(struct page* page)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#442: FILE: include/linux/ckrm_mem_inline.h:133:
+		atomic_inc(nr_debug_active_inc+(page->flags>>ZONE_SHIFT));
 		                              ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#442: FILE: include/linux/ckrm_mem_inline.h:133:
+		atomic_inc(nr_debug_active_inc+(page->flags>>ZONE_SHIFT));
 		                                           ^

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#446: FILE: include/linux/ckrm_mem_inline.h:137:
+static inline void mem_class_dec_active(struct page* page)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#452: FILE: include/linux/ckrm_mem_inline.h:143:
+		atomic_inc(nr_debug_active_dec+(page->flags>>ZONE_SHIFT));
 		                              ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#452: FILE: include/linux/ckrm_mem_inline.h:143:
+		atomic_inc(nr_debug_active_dec+(page->flags>>ZONE_SHIFT));
 		                                           ^

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#456: FILE: include/linux/ckrm_mem_inline.h:147:
+static inline void mem_class_inc_inactive(struct page* page)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#462: FILE: include/linux/ckrm_mem_inline.h:153:
+		atomic_inc(nr_debug_inactive_inc+(page->flags>>ZONE_SHIFT));
 		                                ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#462: FILE: include/linux/ckrm_mem_inline.h:153:
+		atomic_inc(nr_debug_inactive_inc+(page->flags>>ZONE_SHIFT));
 		                                             ^

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#466: FILE: include/linux/ckrm_mem_inline.h:157:
+static inline void mem_class_dec_inactive(struct page* page)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#472: FILE: include/linux/ckrm_mem_inline.h:163:
+		atomic_inc(nr_debug_inactive_dec+(page->flags>>ZONE_SHIFT));
 		                                ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#472: FILE: include/linux/ckrm_mem_inline.h:163:
+		atomic_inc(nr_debug_inactive_dec+(page->flags>>ZONE_SHIFT));
 		                                             ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#480: FILE: include/linux/ckrm_mem_inline.h:171:
+^I$

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#481: FILE: include/linux/ckrm_mem_inline.h:172:
+	struct zone* zones = contig_page_data.node_zones;

WARNING:LINE_SPACING: Missing a blank line after declarations
#482: FILE: include/linux/ckrm_mem_inline.h:173:
+	struct zone* zones = contig_page_data.node_zones;
+	for (i=0; i<MAX_NR_ZONES; i++) {

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#482: FILE: include/linux/ckrm_mem_inline.h:173:
+	for (i=0; i<MAX_NR_ZONES; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#482: FILE: include/linux/ckrm_mem_inline.h:173:
+	for (i=0; i<MAX_NR_ZONES; i++) {
 	           ^

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#495: FILE: include/linux/ckrm_mem_inline.h:186:
+	struct zone* zones = contig_page_data.node_zones;

WARNING:LINE_SPACING: Missing a blank line after declarations
#496: FILE: include/linux/ckrm_mem_inline.h:187:
+	struct zone* zones = contig_page_data.node_zones;
+	for (i=0; i<MAX_NR_ZONES; i++) {

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#496: FILE: include/linux/ckrm_mem_inline.h:187:
+	for (i=0; i<MAX_NR_ZONES; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#496: FILE: include/linux/ckrm_mem_inline.h:187:
+	for (i=0; i<MAX_NR_ZONES; i++) {
 	           ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#496: FILE: include/linux/ckrm_mem_inline.h:187:
+	for (i=0; i<MAX_NR_ZONES; i++) {
+		total += zones[i].present_pages;
+	}

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#507: FILE: include/linux/ckrm_mem_inline.h:198:
+static inline int zone_index(struct zone* zone)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#509: FILE: include/linux/ckrm_mem_inline.h:200:
+	struct zone* zones = contig_page_data.node_zones;

WARNING:LINE_SPACING: Missing a blank line after declarations
#510: FILE: include/linux/ckrm_mem_inline.h:201:
+	struct zone* zones = contig_page_data.node_zones;
+	if (zone-zones<0 || zone-zones>=MAX_NR_ZONES)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#510: FILE: include/linux/ckrm_mem_inline.h:201:
+	if (zone-zones<0 || zone-zones>=MAX_NR_ZONES)
 	        ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#510: FILE: include/linux/ckrm_mem_inline.h:201:
+	if (zone-zones<0 || zone-zones>=MAX_NR_ZONES)
 	              ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#510: FILE: include/linux/ckrm_mem_inline.h:201:
+	if (zone-zones<0 || zone-zones>=MAX_NR_ZONES)
 	                        ^

ERROR:SPACING: spaces required around that '>=' (ctx:VxV)
#510: FILE: include/linux/ckrm_mem_inline.h:201:
+	if (zone-zones<0 || zone-zones>=MAX_NR_ZONES)
 	                              ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#511: FILE: include/linux/ckrm_mem_inline.h:202:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#512: FILE: include/linux/ckrm_mem_inline.h:203:
+	return (zone-zones);
 	            ^

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#516: FILE: include/linux/ckrm_mem_inline.h:207:
+void set_class_readyflag(ckrm_pageusage_t* acct, int flag)

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#519: FILE: include/linux/ckrm_mem_inline.h:210:
+	(acct)->flags |= flag&ACCT_READYALL;
 	                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#524: FILE: include/linux/ckrm_mem_inline.h:215:
+#define ckrm_set_page_account(a,b) do{}while(0)
                                ^

ERROR:SPACING: space required before the open brace '{'
#524: FILE: include/linux/ckrm_mem_inline.h:215:
+#define ckrm_set_page_account(a,b) do{}while(0)

ERROR:SPACING: space required after that close brace '}'
#524: FILE: include/linux/ckrm_mem_inline.h:215:
+#define ckrm_set_page_account(a,b) do{}while(0)

ERROR:SPACING: space required before the open parenthesis '('
#524: FILE: include/linux/ckrm_mem_inline.h:215:
+#define ckrm_set_page_account(a,b) do{}while(0)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#531: FILE: include/linux/ckrm_mem_inline.h:221:
+static inline void ckrm_mem_add_page_active(struct page* page)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#536: FILE: include/linux/ckrm_mem_inline.h:226:
+}
+static inline void ckrm_mem_add_page_inactive(struct page* page)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#536: FILE: include/linux/ckrm_mem_inline.h:226:
+static inline void ckrm_mem_add_page_inactive(struct page* page)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#542: FILE: include/linux/ckrm_mem_inline.h:232:
+static inline void ckrm_mem_del_page_active(struct page* page)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#546: FILE: include/linux/ckrm_mem_inline.h:236:
+}^I$

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#548: FILE: include/linux/ckrm_mem_inline.h:238:
+static inline void ckrm_mem_del_page_inactive(struct page* page)

ERROR:SPACING: space required before the open brace '{'
#556: FILE: include/linux/ckrm_mem_inline.h:246:
+#define  ckrm_mem_add_page_active(a) do{}while(0)

ERROR:SPACING: space required after that close brace '}'
#556: FILE: include/linux/ckrm_mem_inline.h:246:
+#define  ckrm_mem_add_page_active(a) do{}while(0)

ERROR:SPACING: space required before the open parenthesis '('
#556: FILE: include/linux/ckrm_mem_inline.h:246:
+#define  ckrm_mem_add_page_active(a) do{}while(0)

ERROR:SPACING: space required before the open brace '{'
#557: FILE: include/linux/ckrm_mem_inline.h:247:
+#define  ckrm_mem_add_page_inactive(a) do{}while(0)

ERROR:SPACING: space required after that close brace '}'
#557: FILE: include/linux/ckrm_mem_inline.h:247:
+#define  ckrm_mem_add_page_inactive(a) do{}while(0)

ERROR:SPACING: space required before the open parenthesis '('
#557: FILE: include/linux/ckrm_mem_inline.h:247:
+#define  ckrm_mem_add_page_inactive(a) do{}while(0)

ERROR:SPACING: space required before the open brace '{'
#558: FILE: include/linux/ckrm_mem_inline.h:248:
+#define  ckrm_mem_del_page_active(a) do{}while(0)

ERROR:SPACING: space required after that close brace '}'
#558: FILE: include/linux/ckrm_mem_inline.h:248:
+#define  ckrm_mem_del_page_active(a) do{}while(0)

ERROR:SPACING: space required before the open parenthesis '('
#558: FILE: include/linux/ckrm_mem_inline.h:248:
+#define  ckrm_mem_del_page_active(a) do{}while(0)

ERROR:SPACING: space required before the open brace '{'
#559: FILE: include/linux/ckrm_mem_inline.h:249:
+#define  ckrm_mem_del_page_inactive(a) do{}while(0)

ERROR:SPACING: space required after that close brace '}'
#559: FILE: include/linux/ckrm_mem_inline.h:249:
+#define  ckrm_mem_del_page_inactive(a) do{}while(0)

ERROR:SPACING: space required before the open parenthesis '('
#559: FILE: include/linux/ckrm_mem_inline.h:249:
+#define  ckrm_mem_del_page_inactive(a) do{}while(0)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#573: FILE: include/linux/mm.h:202:
+	void *chargelink;	/* which class's LRU list is this page charged for
+#endif

ERROR:TRAILING_WHITESPACE: trailing whitespace
#587: FILE: include/linux/mm_inline.h:8:
+#else^I$

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#639: FILE: include/linux/mmzone.h:81:
+	spinlock_t		lru_lock;

ERROR:POINTER_LOCATION: "foo*	bar" should be "foo *bar"
#656: FILE: include/linux/sched.h:226:
+	struct ckrm_mem_class*	memclass;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#659: FILE: include/linux/sched.h:228:
+	struct list_head	tasklist; /* list of all tasks sharing this address
+	spinlock_t		peertask_lock; /* protect above tasklist */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#779: FILE: kernel/fork.c:222:
+#ifdef CONFIG_CKRM_MEM^I$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#820: FILE: kernel/fork.c:516:
+		printk("Should not happen here, check it\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#824: FILE: kernel/fork.c:520:
+^Iif (tsk->mem_class && mm->memclass != tsk->mem_class) $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#844: FILE: mm/ckrm_mem.c:1:
+/* linux/mm/ckrm_mem.c : memory control for CKRM

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#844: FILE: mm/ckrm_mem.c:1:
+/* linux/mm/ckrm_mem.c : memory control for CKRM

ERROR:TRAILING_WHITESPACE: trailing whitespace
#848: FILE: mm/ckrm_mem.c:5:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#849: FILE: mm/ckrm_mem.c:6:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#850: FILE: mm/ckrm_mem.c:7:
+ * Memory control functions of the CKRM kernel API $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#853: FILE: mm/ckrm_mem.c:10:
+ * $

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#885: FILE: mm/ckrm_mem.c:42:
+#include <asm/uaccess.h>

WARNING:INCLUDE_LINUX: Use #include <linux/pgtable.h> instead of <asm/pgtable.h>
#886: FILE: mm/ckrm_mem.c:43:
+#include <asm/pgtable.h>

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#888: FILE: mm/ckrm_mem.c:45:
+int next_memclass_index = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#892: FILE: mm/ckrm_mem.c:48:
+/* all 1-level memory_share_class are chained together for reclaim
+struct list_head  ckrm_memclass_list =

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#916: FILE: mm/ckrm_mem.c:69:
+EXPORT_SYMBOL(nr_debug_active_inc);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#917: FILE: mm/ckrm_mem.c:70:
+EXPORT_SYMBOL(nr_debug_active_dec);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#918: FILE: mm/ckrm_mem.c:71:
+EXPORT_SYMBOL(nr_debug_inactive_inc);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#919: FILE: mm/ckrm_mem.c:72:
+EXPORT_SYMBOL(nr_debug_inactive_dec);

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#923: FILE: mm/ckrm_mem.c:76:
+int ckrm_memshare_disabled = 0;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#927: FILE: mm/ckrm_mem.c:79:
+static inline $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#927: FILE: mm/ckrm_mem.c:79:
+/* default init give each class 10% of zone memory, 0 for min, and
+static inline 

ERROR:CODE_INDENT: code indent should use tabs where possible
#939: FILE: mm/ckrm_mem.c:91:
+        cls->super = super;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#944: FILE: mm/ckrm_mem.c:96:
+^I^IINIT_LIST_HEAD(&cls->mcls_usage[i].active_list); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#946: FILE: mm/ckrm_mem.c:98:
+^I^Iatomic_set(&cls->mcls_usage[i].refill_counter,0); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#952: FILE: mm/ckrm_mem.c:104:
+ * Calling from the init process. $

WARNING:LINE_SPACING: Missing a blank line after declarations
#957: FILE: mm/ckrm_mem.c:109:
+	int i;
+	spin_lock(&ckrm_memclass_lock);

ERROR:SPACING: space prohibited after that open parenthesis '('
#959: FILE: mm/ckrm_mem.c:111:
+	mem_class_notfreeable( &ckrm_memclass_default );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#959: FILE: mm/ckrm_mem.c:111:
+	mem_class_notfreeable( &ckrm_memclass_default );

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#964: FILE: mm/ckrm_mem.c:116:
+	for (i=0; i<MAX_NR_ZONES; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#964: FILE: mm/ckrm_mem.c:116:
+	for (i=0; i<MAX_NR_ZONES; i++) {
 	           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#965: FILE: mm/ckrm_mem.c:117:
+		atomic_set(nr_debug_active_inc+i,0);
 		                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#965: FILE: mm/ckrm_mem.c:117:
+		atomic_set(nr_debug_active_inc+i,0);
 		                                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#966: FILE: mm/ckrm_mem.c:118:
+		atomic_set(nr_debug_active_dec+i,0);
 		                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#966: FILE: mm/ckrm_mem.c:118:
+		atomic_set(nr_debug_active_dec+i,0);
 		                                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#967: FILE: mm/ckrm_mem.c:119:
+		atomic_set(nr_debug_inactive_inc+i,0);
 		                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#967: FILE: mm/ckrm_mem.c:119:
+		atomic_set(nr_debug_inactive_inc+i,0);
 		                                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#968: FILE: mm/ckrm_mem.c:120:
+		atomic_set(nr_debug_inactive_dec+i,0);
 		                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#968: FILE: mm/ckrm_mem.c:120:
+		atomic_set(nr_debug_inactive_dec+i,0);
 		                                  ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#973: FILE: mm/ckrm_mem.c:125:
+/* $

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#978: FILE: mm/ckrm_mem.c:129:
+struct ckrm_mem_class* ckrm_alloc_mem_class(void* obj)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#978: FILE: mm/ckrm_mem.c:129:
+struct ckrm_mem_class* ckrm_alloc_mem_class(void* obj)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#980: FILE: mm/ckrm_mem.c:131:
+	ckrm_mem_t* cls = kmalloc(sizeof(ckrm_mem_t), GFP_KERNEL);

WARNING:LINE_SPACING: Missing a blank line after declarations
#981: FILE: mm/ckrm_mem.c:132:
+	ckrm_mem_t* cls = kmalloc(sizeof(ckrm_mem_t), GFP_KERNEL);
+	if (!cls)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#983: FILE: mm/ckrm_mem.c:134:
+^I^I$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around cls->mcls_list
#986: FILE: mm/ckrm_mem.c:137:
+	list_add(&(cls->mcls_list), &ckrm_memclass_list);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#993: FILE: mm/ckrm_mem.c:144:
+int ckrm_free_mem_class(struct ckrm_mem_class* cls)

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#995: FILE: mm/ckrm_mem.c:146:
+	if (cls->mcls_id==ckrm_memclass_default.mcls_id) {
 	                ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#996: FILE: mm/ckrm_mem.c:147:
+		printk("Try to free the default class\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#998: FILE: mm/ckrm_mem.c:149:
+^I}    $

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1006: FILE: mm/ckrm_mem.c:157:
+	cls->nr_share = ckrm_mem_available()*cls->mcls_share/100;
 	                                    ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1006: FILE: mm/ckrm_mem.c:157:
+	cls->nr_share = ckrm_mem_available()*cls->mcls_share/100;
 	                                                    ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1007: FILE: mm/ckrm_mem.c:158:
+	if (cls->nr_share<cls->nr_sharemin)
 	                 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1008: FILE: mm/ckrm_mem.c:159:
+		cls->nr_share=cls->nr_sharemin+SWAP_CLUSTER_MAX;
 		             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1008: FILE: mm/ckrm_mem.c:159:
+		cls->nr_share=cls->nr_sharemin+SWAP_CLUSTER_MAX;
 		                              ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1017: FILE: mm/ckrm_mem.c:168:
+struct ckrm_mem_class *ckrm_dflt_mem_class(void *obj) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1023: FILE: mm/ckrm_mem.c:174:
+static inline $

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1024: FILE: mm/ckrm_mem.c:175:
+int class_migrate_pmd(struct mm_struct* mm, struct vm_area_struct* vma,

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1024: FILE: mm/ckrm_mem.c:175:
+int class_migrate_pmd(struct mm_struct* mm, struct vm_area_struct* vma,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1026: FILE: mm/ckrm_mem.c:176:
+int class_migrate_pmd(struct mm_struct* mm, struct vm_area_struct* vma,
+		unsigned long address, unsigned long end)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1028: FILE: mm/ckrm_mem.c:178:
+	pte_t* pte;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1030: FILE: mm/ckrm_mem.c:180:
+^I$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1033: FILE: mm/ckrm_mem.c:183:
+	BUG_ON(pmd_bad(*pmdir));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1034: FILE: mm/ckrm_mem.c:184:
+^I$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1035: FILE: mm/ckrm_mem.c:185:
+	pte = pte_offset_map(pmdir,address);
 	                          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1036: FILE: mm/ckrm_mem.c:186:
+	pmd_end = (address+PMD_SIZE)&PMD_MASK;
 	                  ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#1036: FILE: mm/ckrm_mem.c:186:
+	pmd_end = (address+PMD_SIZE)&PMD_MASK;
 	                            ^

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#1037: FILE: mm/ckrm_mem.c:187:
+	if (end>pmd_end)
 	       ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1039: FILE: mm/ckrm_mem.c:189:
+^I$

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1042: FILE: mm/ckrm_mem.c:192:
+			ckrm_mem_t* orgcls;

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1043: FILE: mm/ckrm_mem.c:193:
+			struct page* page = pte_page(*pte);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1044: FILE: mm/ckrm_mem.c:194:
+^I^I^I$

ERROR:SPACING: space required before the open parenthesis '('
#1047: FILE: mm/ckrm_mem.c:197:
+			if(orgcls != page_class(page))

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1052: FILE: mm/ckrm_mem.c:202:
+	} while(address && (address<end));
 	                           ^

ERROR:SPACING: space required before the open parenthesis '('
#1052: FILE: mm/ckrm_mem.c:202:
+	} while(address && (address<end));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1056: FILE: mm/ckrm_mem.c:206:
+static inline $

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1057: FILE: mm/ckrm_mem.c:207:
+int class_migrate_pgd(struct mm_struct* mm, struct vm_area_struct* vma,

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1057: FILE: mm/ckrm_mem.c:207:
+int class_migrate_pgd(struct mm_struct* mm, struct vm_area_struct* vma,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1059: FILE: mm/ckrm_mem.c:208:
+int class_migrate_pgd(struct mm_struct* mm, struct vm_area_struct* vma,
+		unsigned long address, unsigned long end)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1061: FILE: mm/ckrm_mem.c:210:
+	pmd_t* pmd;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1063: FILE: mm/ckrm_mem.c:212:
+^I$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1066: FILE: mm/ckrm_mem.c:215:
+	BUG_ON(pgd_bad(*pgdir));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1067: FILE: mm/ckrm_mem.c:216:
+^I$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1068: FILE: mm/ckrm_mem.c:217:
+	pmd = pmd_offset(pgdir,address);
 	                      ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1069: FILE: mm/ckrm_mem.c:218:
+	pgd_end = (address+PGDIR_SIZE)&PGDIR_MASK;
 	                  ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#1069: FILE: mm/ckrm_mem.c:218:
+	pgd_end = (address+PGDIR_SIZE)&PGDIR_MASK;
 	                              ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1070: FILE: mm/ckrm_mem.c:219:
+^I$

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#1071: FILE: mm/ckrm_mem.c:220:
+	if (pgd_end && (end>pgd_end))
 	                   ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'end>pgd_end'
#1071: FILE: mm/ckrm_mem.c:220:
+	if (pgd_end && (end>pgd_end))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1073: FILE: mm/ckrm_mem.c:222:
+^I$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1075: FILE: mm/ckrm_mem.c:224:
+		class_migrate_pmd(mm,vma,pmd,address,end);
 		                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1075: FILE: mm/ckrm_mem.c:224:
+		class_migrate_pmd(mm,vma,pmd,address,end);
 		                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1075: FILE: mm/ckrm_mem.c:224:
+		class_migrate_pmd(mm,vma,pmd,address,end);
 		                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1075: FILE: mm/ckrm_mem.c:224:
+		class_migrate_pmd(mm,vma,pmd,address,end);
 		                                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1076: FILE: mm/ckrm_mem.c:225:
+		address =  (address+PMD_SIZE)&PMD_MASK;
 		                   ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#1076: FILE: mm/ckrm_mem.c:225:
+		address =  (address+PMD_SIZE)&PMD_MASK;
 		                             ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1078: FILE: mm/ckrm_mem.c:227:
+	} while (address && (address<end));
 	                            ^

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1083: FILE: mm/ckrm_mem.c:232:
+int class_migrate_vma(struct mm_struct* mm, struct vm_area_struct* vma)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1083: FILE: mm/ckrm_mem.c:232:
+int class_migrate_vma(struct mm_struct* mm, struct vm_area_struct* vma)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1085: FILE: mm/ckrm_mem.c:234:
+	pgd_t* pgdir;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1087: FILE: mm/ckrm_mem.c:236:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1090: FILE: mm/ckrm_mem.c:239:
+^I$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1093: FILE: mm/ckrm_mem.c:242:
+		class_migrate_pgd(mm,vma,pgdir,address,end);
 		                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1093: FILE: mm/ckrm_mem.c:242:
+		class_migrate_pgd(mm,vma,pgdir,address,end);
 		                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1093: FILE: mm/ckrm_mem.c:242:
+		class_migrate_pgd(mm,vma,pgdir,address,end);
 		                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1093: FILE: mm/ckrm_mem.c:242:
+		class_migrate_pgd(mm,vma,pgdir,address,end);
 		                                      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1096: FILE: mm/ckrm_mem.c:245:
+	}while( address && (address<end) );
 	                           ^

ERROR:SPACING: space required after that close brace '}'
#1096: FILE: mm/ckrm_mem.c:245:
+	}while( address && (address<end) );

ERROR:SPACING: space prohibited after that open parenthesis '('
#1096: FILE: mm/ckrm_mem.c:245:
+	}while( address && (address<end) );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1096: FILE: mm/ckrm_mem.c:245:
+	}while( address && (address<end) );

ERROR:SPACING: space required before the open parenthesis '('
#1096: FILE: mm/ckrm_mem.c:245:
+	}while( address && (address<end) );

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1103: FILE: mm/ckrm_mem.c:251:
+	struct mm_struct* mm;

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1104: FILE: mm/ckrm_mem.c:252:
+	struct vm_area_struct* vma;

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1105: FILE: mm/ckrm_mem.c:253:
+	ckrm_mem_t* prev_mmcls;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1106: FILE: mm/ckrm_mem.c:254:
+^I$

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#1107: FILE: mm/ckrm_mem.c:255:
+	if ( !tsk->mm || newclass==tsk->mem_class )
 	                         ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#1107: FILE: mm/ckrm_mem.c:255:
+	if ( !tsk->mm || newclass==tsk->mem_class )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1107: FILE: mm/ckrm_mem.c:255:
+	if ( !tsk->mm || newclass==tsk->mem_class )

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1119: FILE: mm/ckrm_mem.c:267:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1122: FILE: mm/ckrm_mem.c:270:
+^Ispin_unlock(&mm->peertask_lock);^I$

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#1124: FILE: mm/ckrm_mem.c:272:
+	if (mm->memclass!=prev_mmcls) {
 	                ^

ERROR:SPACING: space required before the open parenthesis '('
#1128: FILE: mm/ckrm_mem.c:276:
+		while(vma) {

WARNING:RETURN_VOID: void function return statements are not generally useful
#1135: FILE: mm/ckrm_mem.c:283:
+	return;
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1139: FILE: mm/ckrm_mem.c:286:
+void ckrm_mem_set_class_share(int mcls_id, int percent, int sharemax,
+{

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1140: FILE: mm/ckrm_mem.c:287:
+	ckrm_mem_t* cls;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1141: FILE: mm/ckrm_mem.c:288:
+	ckrm_mem_t* cls;
+	if (sharemax-sharemin<2*SWAP_CLUSTER_MAX)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1141: FILE: mm/ckrm_mem.c:288:
+	if (sharemax-sharemin<2*SWAP_CLUSTER_MAX)
 	            ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1141: FILE: mm/ckrm_mem.c:288:
+	if (sharemax-sharemin<2*SWAP_CLUSTER_MAX)
 	                     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1141: FILE: mm/ckrm_mem.c:288:
+	if (sharemax-sharemin<2*SWAP_CLUSTER_MAX)
 	                       ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#1146: FILE: mm/ckrm_mem.c:293:
+		if (cls->mcls_id==mcls_id) {
 		                ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1149: FILE: mm/ckrm_mem.c:296:
+			cls->nr_share = ckrm_mem_available()*cls->mcls_share/100;
 			                                    ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1149: FILE: mm/ckrm_mem.c:296:
+			cls->nr_share = ckrm_mem_available()*cls->mcls_share/100;
 			                                                    ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1152: FILE: mm/ckrm_mem.c:299:
+			if (cls->nr_share<cls->nr_sharemin)
 			                 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1153: FILE: mm/ckrm_mem.c:300:
+				cls->nr_share=cls->nr_sharemin+SWAP_CLUSTER_MAX;
 				             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1153: FILE: mm/ckrm_mem.c:300:
+				cls->nr_share=cls->nr_sharemin+SWAP_CLUSTER_MAX;
 				                              ^

WARNING:RETURN_VOID: void function return statements are not generally useful
#1159: FILE: mm/ckrm_mem.c:306:
+	return;
+}

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1162: FILE: mm/ckrm_mem.c:309:
+void ckrm_mem_evaluate_mm(struct mm_struct* mm)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1164: FILE: mm/ckrm_mem.c:311:
+	struct task_struct* task;

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1165: FILE: mm/ckrm_mem.c:312:
+	ckrm_mem_t* maxshareclass = NULL;

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1166: FILE: mm/ckrm_mem.c:313:
+	struct vm_area_struct* vma;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1167: FILE: mm/ckrm_mem.c:314:
+^I$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 0)
#1168: FILE: mm/ckrm_mem.c:315:
+	if (list_empty(&mm->tasklist)) {
[...]
with 

WARNING:TYPO_SPELLING: 'anothe' may be misspelled - perhaps 'another'?
#1171: FILE: mm/ckrm_mem.c:317:
+		 * no task associated will be deleted soon or attach with anothe task
 		                                                          ^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1174: FILE: mm/ckrm_mem.c:319:
+^I^Ireturn; $

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1178: FILE: mm/ckrm_mem.c:323:
+		ckrm_mem_t* cls = task->mem_class;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1179: FILE: mm/ckrm_mem.c:324:
+		ckrm_mem_t* cls = task->mem_class;
+		if (!cls)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1181: FILE: mm/ckrm_mem.c:326:
+^I^Iif (!maxshareclass || ckrm_mem_share_compare(maxshareclass,cls)<0 ) $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1181: FILE: mm/ckrm_mem.c:326:
+		if (!maxshareclass || ckrm_mem_share_compare(maxshareclass,cls)<0 ) 
 		                                                          ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1181: FILE: mm/ckrm_mem.c:326:
+		if (!maxshareclass || ckrm_mem_share_compare(maxshareclass,cls)<0 ) 
 		                                                               ^

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1181: FILE: mm/ckrm_mem.c:326:
+		if (!maxshareclass || ckrm_mem_share_compare(maxshareclass,cls)<0 ) 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1184: FILE: mm/ckrm_mem.c:329:
+^I$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1185: FILE: mm/ckrm_mem.c:330:
+	if (!maxshareclass) {
+		maxshareclass = &ckrm_memclass_default;
+	}	

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1187: FILE: mm/ckrm_mem.c:332:
+^I}^I$

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1188: FILE: mm/ckrm_mem.c:333:
+	if (mm->memclass != maxshareclass ) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1193: FILE: mm/ckrm_mem.c:338:
+^I^I$

ERROR:SPACING: space required before the open parenthesis '('
#1197: FILE: mm/ckrm_mem.c:342:
+		while(vma) {

WARNING:RETURN_VOID: void function return statements are not generally useful
#1204: FILE: mm/ckrm_mem.c:349:
+	return;
+}

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1206: FILE: mm/ckrm_mem.c:351:
+EXPORT_SYMBOL(ckrm_alloc_mem_class);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1207: FILE: mm/ckrm_mem.c:352:
+EXPORT_SYMBOL(ckrm_free_mem_class);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1208: FILE: mm/ckrm_mem.c:353:
+EXPORT_SYMBOL(ckrm_mem_set_share);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1209: FILE: mm/ckrm_mem.c:354:
+EXPORT_SYMBOL(ckrm_mem_get_usage);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1210: FILE: mm/ckrm_mem.c:355:
+EXPORT_SYMBOL(ckrm_dflt_mem_class);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1211: FILE: mm/ckrm_mem.c:356:
+EXPORT_SYMBOL(ckrm_mem_change_class);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1213: FILE: mm/ckrm_mem.c:358:
+EXPORT_SYMBOL(ckrm_mem_set_class_share);

ERROR:SPACING: space prohibited after that open parenthesis '('
#1234: FILE: mm/filemap.c:237:
+			if ( !page_mapped(page) && !page_class(page) ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1234: FILE: mm/filemap.c:237:
+			if ( !page_mapped(page) && !page_class(page) ) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1239: FILE: mm/filemap.c:242:
+^I^I^I}^I^I$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1262: FILE: mm/memory.c:1312:
+	printk("Aa In Do no page, mm->memclass=NULL\n");

ERROR:SPACING: space prohibited after that open parenthesis '('
#1264: FILE: mm/memory.c:1314:
+	mem_class_get( &ckrm_memclass_default);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1265: FILE: mm/memory.c:1315:
+}^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1266: FILE: mm/memory.c:1316:
+                ckrm_set_page_account(page, mm->memclass);$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1266: FILE: mm/memory.c:1316:
+}	
+                ckrm_set_page_account(page, mm->memclass);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1266: FILE: mm/memory.c:1316:
+                ckrm_set_page_account(page, mm->memclass);$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1275: FILE: mm/memory.c:1390:
+	printk("In Do no page, mm->memclass=NULL\n");

ERROR:SPACING: space prohibited after that open parenthesis '('
#1277: FILE: mm/memory.c:1392:
+	mem_class_get( &ckrm_memclass_default);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1278: FILE: mm/memory.c:1393:
+}^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1279: FILE: mm/memory.c:1394:
+                ckrm_set_page_account(page, mm->memclass);$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1279: FILE: mm/memory.c:1394:
+}	
+                ckrm_set_page_account(page, mm->memclass);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1279: FILE: mm/memory.c:1394:
+                ckrm_set_page_account(page, mm->memclass);$

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1337: FILE: mm/rmap.c:88:
+static int ckrm_mem_evaluate_page_byadd(struct page* page, pte_t *ptep)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1339: FILE: mm/rmap.c:90:
+	ckrm_mem_t* pgcls = page_class(page);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1340: FILE: mm/rmap.c:91:
+	struct mm_struct* mm =ptep_to_mm(ptep);

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1340: FILE: mm/rmap.c:91:
+	struct mm_struct* mm =ptep_to_mm(ptep);
 	                     ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1341: FILE: mm/rmap.c:92:
+	struct mm_struct* mm =ptep_to_mm(ptep);
+	BUG_ON(!mm->memclass);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1341: FILE: mm/rmap.c:92:
+	BUG_ON(!mm->memclass);

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#1343: FILE: mm/rmap.c:94:
+	if (pgcls==mm->memclass)
 	         ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#1345: FILE: mm/rmap.c:96:
+	if (!pgcls || page->pte.direct==0) {
 	                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1350: FILE: mm/rmap.c:101:
+	if (ckrm_mem_share_compare(pgcls,mm->memclass)<0) {
 	                                ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1350: FILE: mm/rmap.c:101:
+	if (ckrm_mem_share_compare(pgcls,mm->memclass)<0) {
 	                                              ^

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1358: FILE: mm/rmap.c:109:
+int ckrm_mem_evaluate_page(struct page* page)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1363: FILE: mm/rmap.c:114:
+	ckrm_mem_t* pgcls = page_class(page);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1364: FILE: mm/rmap.c:115:
+	ckrm_mem_t* maxshareclass = NULL;

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1372: FILE: mm/rmap.c:123:
+		struct mm_struct* mm =ptep_to_mm(page->pte.direct);

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1372: FILE: mm/rmap.c:123:
+		struct mm_struct* mm =ptep_to_mm(page->pte.direct);
 		                     ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1373: FILE: mm/rmap.c:124:
+		struct mm_struct* mm =ptep_to_mm(page->pte.direct);
+		if (pgcls==mm->memclass)

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#1373: FILE: mm/rmap.c:124:
+		if (pgcls==mm->memclass)
 		         ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1384: FILE: mm/rmap.c:135:
+		int i;
+		next = pte_chain_next(pc);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1388: FILE: mm/rmap.c:139:
+			pte_t* ptep = rmap_ptep_map(pc->ptes[i]);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1389: FILE: mm/rmap.c:140:
+			struct mm_struct* mm =ptep_to_mm(ptep);

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1389: FILE: mm/rmap.c:140:
+			struct mm_struct* mm =ptep_to_mm(ptep);
 			                     ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1390: FILE: mm/rmap.c:141:
+			struct mm_struct* mm =ptep_to_mm(ptep);
+			if (!maxshareclass ||

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1392: FILE: mm/rmap.c:142:
+			if (!maxshareclass ||
+				maxshareclass = mm->memclass;

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1398: FILE: mm/rmap.c:148:
+	if (pgcls != maxshareclass ) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1423: FILE: mm/rmap.c:255:
+	needadjust = ckrm_mem_evaluate_page_byadd(page,ptep);
 	                                              ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1424: FILE: mm/rmap.c:256:
+#endif^I$

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#1454: FILE: mm/rmap.c:364:
+	needadjust = (page_class(page)==ptep_to_mm(ptep)->memclass) ?
 	                              ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1459: FILE: mm/rmap.c:368:
+#else^I$

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1498: FILE: mm/swap.c:145:
+void __pagevec_lru_adjust(struct pagevec* pvec)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1501: FILE: mm/swap.c:148:
+	struct zone* zone = NULL;

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1502: FILE: mm/swap.c:149:
+	ckrm_pageusage_t* acct;

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1503: FILE: mm/swap.c:150:
+	ckrm_pageusage_t* lrucharge;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1505: FILE: mm/swap.c:152:
+	for (i=0; i<pagevec_count(pvec); i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1505: FILE: mm/swap.c:152:
+	for (i=0; i<pagevec_count(pvec); i++) {
 	           ^

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#1518: FILE: mm/swap.c:165:
+		if ( lrucharge && acct && lrucharge!=acct ) {
 		                                   ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#1518: FILE: mm/swap.c:165:
+		if ( lrucharge && acct && lrucharge!=acct ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1518: FILE: mm/swap.c:165:
+		if ( lrucharge && acct && lrucharge!=acct ) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1519: FILE: mm/swap.c:166:
+		if ( lrucharge && acct && lrucharge!=acct ) {
+

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1525: FILE: mm/swap.c:172:
+				}
+				else {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#1525: FILE: mm/swap.c:172:
+				else {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1529: FILE: mm/swap.c:176:
+				set_page_lrucharge(page,acct);
 				                       ^

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1541: FILE: mm/swap.c:188:
+	struct pagevec* pvec = &per_cpu(lru_adjust_pvecs, get_cpu());

WARNING:LINE_SPACING: Missing a blank line after declarations
#1542: FILE: mm/swap.c:189:
+	struct pagevec* pvec = &per_cpu(lru_adjust_pvecs, get_cpu());
+	page_cache_get(page);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1543: FILE: mm/swap.c:190:
+	if (!pagevec_add(pvec,page))
 	                     ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#1584: FILE: mm/swap_state.c:209:
+		if ( !page_mapped(page) && !page_class(page) ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1584: FILE: mm/swap_state.c:209:
+		if ( !page_mapped(page) && !page_class(page) ) {

ERROR:SPACING: space required before the open parenthesis '('
#1585: FILE: mm/swap_state.c:210:
+			if(current->mem_class)

ERROR:SPACING: space prohibited after that open parenthesis '('
#1601: FILE: mm/swap_state.c:255:
+		if ( !page_mapped(page) && !page_class(page) ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1601: FILE: mm/swap_state.c:255:
+		if ( !page_mapped(page) && !page_class(page) ) {

ERROR:SPACING: space required before the open parenthesis '('
#1602: FILE: mm/swap_state.c:256:
+			if(current->mem_class)

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#1684: FILE: mm/vmscan.c:496:
+		while ( nr_pass>0 && nr_scan<nr_to_process &&
 		               ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1684: FILE: mm/vmscan.c:496:
+		while ( nr_pass>0 && nr_scan<nr_to_process &&
 		                            ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#1684: FILE: mm/vmscan.c:496:
+		while ( nr_pass>0 && nr_scan<nr_to_process &&

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1685: FILE: mm/vmscan.c:497:
+		while ( nr_pass>0 && nr_scan<nr_to_process &&
+				!list_empty(&zone->inactive_list)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1687: FILE: mm/vmscan.c:499:
+			page = list_entry(zone->inactive_list.prev,
+						struct page, lru);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1692: FILE: mm/vmscan.c:504:
+		while (nr_scan++ < nr_to_process &&
+				!list_empty(&mem_acct->inactive_list)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1694: FILE: mm/vmscan.c:506:
+			page = list_entry(mem_acct->inactive_list.prev,
+						struct page, lru);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1707: FILE: mm/vmscan.c:519:
+			BUG_ON(!page_class(page));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1751: FILE: mm/vmscan.c:563:
+#endif^I^I$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1756: FILE: mm/vmscan.c:568:
+				BUG();

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1770: FILE: mm/vmscan.c:631:
+refill_inactive_zone(struct zone *zone, ckrm_pageusage_t* mem_acct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1772: FILE: mm/vmscan.c:632:
+refill_inactive_zone(struct zone *zone, ckrm_pageusage_t* mem_acct,
+			struct page_state *ps, int priority)

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#1794: FILE: mm/vmscan.c:660:
+	while (nr_pages && nr_pass>0 && !list_empty(&zone->active_list)) {
 	                          ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1808: FILE: mm/vmscan.c:674:
+		BUG_ON(!page_class(page));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1820: FILE: mm/vmscan.c:686:
+#endif^I^I^I$

ERROR:SPACING: space prohibited after that open parenthesis '('
#1831: FILE: mm/vmscan.c:697:
+		if ( page_readyrefill(page) )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1831: FILE: mm/vmscan.c:697:
+		if ( page_readyrefill(page) )

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1847: FILE: mm/vmscan.c:779:
+#endif^I^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1892: FILE: mm/vmscan.c:886:
+shrink_zone(struct zone *zone, int max_scan, unsigned int gfp_mask,
+	const int nr_pages, int *nr_mapped, struct page_state *ps, int

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1893: FILE: mm/vmscan.c:886:
+shrink_zone(struct zone *zone, int max_scan, unsigned int gfp_mask,
priority)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1897: FILE: mm/vmscan.c:890:
+	ckrm_mem_t* cls;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1900: FILE: mm/vmscan.c:893:
+	int  nr_inactive=0;
 	                ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1903: FILE: mm/vmscan.c:896:
+		int  nr_victims =0;
 		                ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1908: FILE: mm/vmscan.c:901:
+			cls->nr_share = mem_available * cls->mcls_share/100;
 			                                               ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#1909: FILE: mm/vmscan.c:902:
+			if ( cls->nr_share < atomic_read(&cls->nr_total) &&

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#1911: FILE: mm/vmscan.c:903:
+				cls->mcls_usage[zoneindex].nr_active+cls->mcls_usage[zoneindex].nr_active) {

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1911: FILE: mm/vmscan.c:903:
+			if ( cls->nr_share < atomic_read(&cls->nr_total) &&
+				cls->mcls_usage[zoneindex].nr_active+cls->mcls_usage[zoneindex].nr_active) {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1911: FILE: mm/vmscan.c:903:
+				cls->mcls_usage[zoneindex].nr_active+cls->mcls_usage[zoneindex].nr_active) {
 				                                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1915: FILE: mm/vmscan.c:907:
+				set_class_readyflag(cls->mcls_usage+zoneindex,ACCT_READYALL);
 				                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1915: FILE: mm/vmscan.c:907:
+				set_class_readyflag(cls->mcls_usage+zoneindex,ACCT_READYALL);
 				                                             ^

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1917: FILE: mm/vmscan.c:909:
+			}
+			else {

CHECK:BRACES: Unbalanced braces around else statement
#1917: FILE: mm/vmscan.c:909:
+			else {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1918: FILE: mm/vmscan.c:910:
+				set_class_readyflag(cls->mcls_usage+zoneindex,ACCT_READYNONE);
 				                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1918: FILE: mm/vmscan.c:910:
+				set_class_readyflag(cls->mcls_usage+zoneindex,ACCT_READYNONE);
 				                                             ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1922: FILE: mm/vmscan.c:914:
+^I^I^Ilist_for_each_entry(cls, &ckrm_memclass_list, mcls_list) $

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1923: FILE: mm/vmscan.c:915:
+				set_class_readyflag(cls->mcls_usage+zoneindex,ACCT_READYALL);
 				                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1923: FILE: mm/vmscan.c:915:
+				set_class_readyflag(cls->mcls_usage+zoneindex,ACCT_READYALL);
 				                                             ^

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1929: FILE: mm/vmscan.c:921:
+	}
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#1929: FILE: mm/vmscan.c:921:
+	else {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1932: FILE: mm/vmscan.c:924:
+			set_class_readyflag(cls->mcls_usage+zoneindex,ACCT_READYALL);
 			                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1932: FILE: mm/vmscan.c:924:
+			set_class_readyflag(cls->mcls_usage+zoneindex,ACCT_READYALL);
 			                                             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1939: FILE: mm/vmscan.c:931:
+	atomic_add(ratio+1, &zone->refill_counter);
 	                ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1950: FILE: mm/vmscan.c:942:
+		if (count > (SWAP_CLUSTER_MAX*4)<<(DEF_PRIORITY-priority))
 		                             ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1950: FILE: mm/vmscan.c:942:
+		if (count > (SWAP_CLUSTER_MAX*4)<<(DEF_PRIORITY-priority))
 		                                ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1950: FILE: mm/vmscan.c:942:
+		if (count > (SWAP_CLUSTER_MAX*4)<<(DEF_PRIORITY-priority))
 		                                               ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1951: FILE: mm/vmscan.c:943:
+			count = (SWAP_CLUSTER_MAX*4)<<(DEF_PRIORITY-priority);
 			                         ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1951: FILE: mm/vmscan.c:943:
+			count = (SWAP_CLUSTER_MAX*4)<<(DEF_PRIORITY-priority);
 			                            ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1951: FILE: mm/vmscan.c:943:
+			count = (SWAP_CLUSTER_MAX*4)<<(DEF_PRIORITY-priority);
 			                                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1952: FILE: mm/vmscan.c:944:
+		atomic_set(&zone->refill_counter,0);
 		                                ^

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1966: FILE: mm/vmscan.c:957:
+shrink_class(struct zone *zone, ckrm_pageusage_t* acct, unsigned int

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1976: FILE: mm/vmscan.c:966:
+	atomic_add(ratio+1, &acct->refill_counter);
 	                ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1986: FILE: mm/vmscan.c:976:
+		if (count > (SWAP_CLUSTER_MAX*4)<<(DEF_PRIORITY-priority))
 		                             ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1986: FILE: mm/vmscan.c:976:
+		if (count > (SWAP_CLUSTER_MAX*4)<<(DEF_PRIORITY-priority))
 		                                ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1986: FILE: mm/vmscan.c:976:
+		if (count > (SWAP_CLUSTER_MAX*4)<<(DEF_PRIORITY-priority))
 		                                               ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1987: FILE: mm/vmscan.c:977:
+			count = (SWAP_CLUSTER_MAX*4)<<(DEF_PRIORITY-priority);
 			                         ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1987: FILE: mm/vmscan.c:977:
+			count = (SWAP_CLUSTER_MAX*4)<<(DEF_PRIORITY-priority);
 			                            ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1987: FILE: mm/vmscan.c:977:
+			count = (SWAP_CLUSTER_MAX*4)<<(DEF_PRIORITY-priority);
 			                                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1988: FILE: mm/vmscan.c:978:
+		atomic_set(&acct->refill_counter,0);
 		                                ^

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#2003: FILE: mm/vmscan.c:993:
+int shrink_weight(ckrm_pageusage_t* acct)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#2006: FILE: mm/vmscan.c:996:
+	ckrm_mem_t* cls = acct->class;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2017: FILE: mm/vmscan.c:1006:
+	if ( acct->nr_active+acct->nr_inactive<SWAP_CLUSTER_MAX*4 )
 	                    ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#2017: FILE: mm/vmscan.c:1006:
+	if ( acct->nr_active+acct->nr_inactive<SWAP_CLUSTER_MAX*4 )
 	                                      ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2017: FILE: mm/vmscan.c:1006:
+	if ( acct->nr_active+acct->nr_inactive<SWAP_CLUSTER_MAX*4 )
 	                                                       ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#2017: FILE: mm/vmscan.c:1006:
+	if ( acct->nr_active+acct->nr_inactive<SWAP_CLUSTER_MAX*4 )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2017: FILE: mm/vmscan.c:1006:
+	if ( acct->nr_active+acct->nr_inactive<SWAP_CLUSTER_MAX*4 )

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2019: FILE: mm/vmscan.c:1008:
+^I$

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#2020: FILE: mm/vmscan.c:1009:
+	if (nr_total>nr_share) {
 	            ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#2021: FILE: mm/vmscan.c:1010:
+		if (cls->nr_sharemax<(cls->nr_share+SWAP_CLUSTER_MAX))
 		                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2021: FILE: mm/vmscan.c:1010:
+		if (cls->nr_sharemax<(cls->nr_share+SWAP_CLUSTER_MAX))
 		                                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2022: FILE: mm/vmscan.c:1011:
+			nr_sharemax = cls->nr_share+SWAP_CLUSTER_MAX;
 			                           ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2025: FILE: mm/vmscan.c:1014:
+		return (nr_total - nr_share)*__LAMDA_/(nr_sharemax - nr_share);
 		                            ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#2025: FILE: mm/vmscan.c:1014:
+		return (nr_total - nr_share)*__LAMDA_/(nr_sharemax - nr_share);
 		                                     ^

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#2027: FILE: mm/vmscan.c:1016:
+	}
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#2027: FILE: mm/vmscan.c:1016:
+	else {

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#2028: FILE: mm/vmscan.c:1017:
+		if (cls->nr_sharemin>(cls->nr_share-SWAP_CLUSTER_MAX))
 		                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2028: FILE: mm/vmscan.c:1017:
+		if (cls->nr_sharemin>(cls->nr_share-SWAP_CLUSTER_MAX))
 		                                   ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2029: FILE: mm/vmscan.c:1018:
+			nr_sharemin = cls->nr_share-SWAP_CLUSTER_MAX;
 			                           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2032: FILE: mm/vmscan.c:1021:
+		return -(int)((nr_share-nr_total)*__LAMDA_/(nr_share-nr_sharemin));
 		                       ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2032: FILE: mm/vmscan.c:1021:
+		return -(int)((nr_share-nr_total)*__LAMDA_/(nr_share-nr_sharemin));
 		                                 ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#2032: FILE: mm/vmscan.c:1021:
+		return -(int)((nr_share-nr_total)*__LAMDA_/(nr_share-nr_sharemin));
 		                                          ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2032: FILE: mm/vmscan.c:1021:
+		return -(int)((nr_share-nr_total)*__LAMDA_/(nr_share-nr_sharemin));
 		                                                    ^

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#2037: FILE: mm/vmscan.c:1026:
+static void list_add_sort(struct list_head* entry, struct list_head*

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#2040: FILE: mm/vmscan.c:1028:
+	ckrm_pageusage_t* acct;

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#2041: FILE: mm/vmscan.c:1029:
+	ckrm_pageusage_t* new = list_entry(entry, ckrm_pageusage_t,

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#2043: FILE: mm/vmscan.c:1030:
+	struct list_head* pos = head->next;

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#2045: FILE: mm/vmscan.c:1032:
+	while (pos!=head) {
 	          ^

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#2047: FILE: mm/vmscan.c:1034:
+		if (new->shrink_weight>acct->shrink_weight) {
 		                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2053: FILE: mm/vmscan.c:1040:
+	list_add_tail(entry,head);
 	                   ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2054: FILE: mm/vmscan.c:1041:
+^Ireturn;^I$

WARNING:RETURN_VOID: void function return statements are not generally useful
#2055: FILE: mm/vmscan.c:1042:
+	return;	
+}

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#2057: FILE: mm/vmscan.c:1044:
+static void shrink_set_victim(struct list_head* head, int nr_cluster,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2059: FILE: mm/vmscan.c:1045:
+static void shrink_set_victim(struct list_head* head, int nr_cluster,
+{

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#2060: FILE: mm/vmscan.c:1046:
+	ckrm_pageusage_t* acct;

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#2064: FILE: mm/vmscan.c:1050:
+	while (pos!=head) {
 	          ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2067: FILE: mm/vmscan.c:1053:
+^I^I$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2073: FILE: mm/vmscan.c:1059:
+		list_add_sort(pos,head);
 		                 ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2074: FILE: mm/vmscan.c:1060:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2075: FILE: mm/vmscan.c:1061:
+^I^Iif (nr_cluster<=0) $

ERROR:SPACING: spaces required around that '<=' (ctx:VxV)
#2075: FILE: mm/vmscan.c:1061:
+		if (nr_cluster<=0) 
 		              ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2077: FILE: mm/vmscan.c:1063:
+^I^Ipos = prev->next;^I$

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#2081: FILE: mm/vmscan.c:1067:
+	while (pos!=head) {
 	          ^

ERROR:SPACING: spaces required around that '<=' (ctx:VxV)
#2084: FILE: mm/vmscan.c:1070:
+		if ( acct->shrink_nr_pages<=0 ) {
 		                          ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#2084: FILE: mm/vmscan.c:1070:
+		if ( acct->shrink_nr_pages<=0 ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2084: FILE: mm/vmscan.c:1070:
+		if ( acct->shrink_nr_pages<=0 ) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2089: FILE: mm/vmscan.c:1075:
+^I}^I$

WARNING:RETURN_VOID: void function return statements are not generally useful
#2091: FILE: mm/vmscan.c:1077:
+	return;
+}

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#2093: FILE: mm/vmscan.c:1079:
+static int shrink_choose_victim(struct zone* zone, int max_scan, int

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#2095: FILE: mm/vmscan.c:1080:
+	struct list_head* list)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#2097: FILE: mm/vmscan.c:1082:
+	ckrm_mem_t* cls;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2099: FILE: mm/vmscan.c:1084:
+	int nr_cluster = (nr_pages+SWAP_CLUSTER_MAX-1)/SWAP_CLUSTER_MAX;
 	                          ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2099: FILE: mm/vmscan.c:1084:
+	int nr_cluster = (nr_pages+SWAP_CLUSTER_MAX-1)/SWAP_CLUSTER_MAX;
 	                                           ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#2099: FILE: mm/vmscan.c:1084:
+	int nr_cluster = (nr_pages+SWAP_CLUSTER_MAX-1)/SWAP_CLUSTER_MAX;
 	                                              ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2100: FILE: mm/vmscan.c:1085:
+^I$

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#2103: FILE: mm/vmscan.c:1088:
+		ckrm_pageusage_t* acct = cls->mcls_usage + zoneindex;

WARNING:LINE_SPACING: Missing a blank line after declarations
#2104: FILE: mm/vmscan.c:1089:
+		ckrm_pageusage_t* acct = cls->mcls_usage + zoneindex;
+		if (test_and_set_bit(ACCT_VICTIM_BIT, &acct->flags))

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#2111: FILE: mm/vmscan.c:1096:
+	shrink_set_victim(list, nr_cluster, max_scan/nr_cluster);
 	                                            ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2118: FILE: mm/vmscan.c:1103:
+shrink_zone(struct zone *zone, int max_scan, unsigned int gfp_mask,
+	const int nr_pages, int *nr_mapped, struct page_state *ps, int

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2119: FILE: mm/vmscan.c:1103:
+shrink_zone(struct zone *zone, int max_scan, unsigned int gfp_mask,
priority)

WARNING:LINE_SPACING: Missing a blank line after declarations
#2125: FILE: mm/vmscan.c:1109:
+	struct list_head victims = LIST_HEAD_INIT(victims);
+	if (!ckrm_memshare_disabled) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#2126: FILE: mm/vmscan.c:1110:
+	if (!ckrm_memshare_disabled) {
+

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2134: FILE: mm/vmscan.c:1118:
+			ret += shrink_class(zone,acct,gfp_mask,nr_mapped,ps,priority);
 			                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2134: FILE: mm/vmscan.c:1118:
+			ret += shrink_class(zone,acct,gfp_mask,nr_mapped,ps,priority);
 			                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2134: FILE: mm/vmscan.c:1118:
+			ret += shrink_class(zone,acct,gfp_mask,nr_mapped,ps,priority);
 			                                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2134: FILE: mm/vmscan.c:1118:
+			ret += shrink_class(zone,acct,gfp_mask,nr_mapped,ps,priority);
 			                                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2134: FILE: mm/vmscan.c:1118:
+			ret += shrink_class(zone,acct,gfp_mask,nr_mapped,ps,priority);
 			                                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#2135: FILE: mm/vmscan.c:1119:
+			clear_bit(ACCT_VICTIM_BIT,&acct->flags);
 			                         ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#2135: FILE: mm/vmscan.c:1119:
+			clear_bit(ACCT_VICTIM_BIT,&acct->flags);
 			                          ^

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#2140: FILE: mm/vmscan.c:1124:
+	}
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#2140: FILE: mm/vmscan.c:1124:
+	else {

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#2145: FILE: mm/vmscan.c:1129:
+		ckrm_mem_t* cls;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2147: FILE: mm/vmscan.c:1131:
+		int nr_cluster = (nr_pages+SWAP_CLUSTER_MAX-1)/SWAP_CLUSTER_MAX;
 		                          ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2147: FILE: mm/vmscan.c:1131:
+		int nr_cluster = (nr_pages+SWAP_CLUSTER_MAX-1)/SWAP_CLUSTER_MAX;
 		                                           ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#2147: FILE: mm/vmscan.c:1131:
+		int nr_cluster = (nr_pages+SWAP_CLUSTER_MAX-1)/SWAP_CLUSTER_MAX;
 		                                              ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#2148: FILE: mm/vmscan.c:1132:
+		int scan_unit = max_scan/nr_cluster;
 		                        ^

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#2152: FILE: mm/vmscan.c:1136:
+			ckrm_pageusage_t* acct = cls->mcls_usage + zoneindex;

WARNING:LINE_SPACING: Missing a blank line after declarations
#2153: FILE: mm/vmscan.c:1137:
+			ckrm_pageusage_t* acct = cls->mcls_usage + zoneindex;
+			if (test_and_set_bit(ACCT_VICTIM_BIT, &acct->flags))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2167: FILE: mm/vmscan.c:1151:
+			ret += shrink_class(zone,acct,gfp_mask,nr_mapped,ps,priority);
 			                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2167: FILE: mm/vmscan.c:1151:
+			ret += shrink_class(zone,acct,gfp_mask,nr_mapped,ps,priority);
 			                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2167: FILE: mm/vmscan.c:1151:
+			ret += shrink_class(zone,acct,gfp_mask,nr_mapped,ps,priority);
 			                                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2167: FILE: mm/vmscan.c:1151:
+			ret += shrink_class(zone,acct,gfp_mask,nr_mapped,ps,priority);
 			                                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2167: FILE: mm/vmscan.c:1151:
+			ret += shrink_class(zone,acct,gfp_mask,nr_mapped,ps,priority);
 			                                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#2168: FILE: mm/vmscan.c:1152:
+			clear_bit(ACCT_VICTIM_BIT,&acct->flags);
 			                         ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#2168: FILE: mm/vmscan.c:1152:
+			clear_bit(ACCT_VICTIM_BIT,&acct->flags);
 			                          ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2172: FILE: mm/vmscan.c:1156:
+^I}^I$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2187: FILE: mm/vmscan.c:1246:
+#if defined (CONFIG_CKRM_MEM_GLOBAL_LIST) || defined

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2193: FILE: mm/vmscan.c:1251:
+^I^I}^I$

ERROR:SPACING: space prohibited after that open parenthesis '('
#2194: FILE: mm/vmscan.c:1252:
+		if ( !priority && !ckrm_memshare_disabled) {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2196: FILE: mm/vmscan.c:1254:
+			priority = DEF_PRIORITY+1;
 			                       ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2211: FILE: mm/vmscan.c:1354:
+#if defined (CONFIG_CKRM_MEM_GLOBAL_LIST) ||

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#2217: FILE: mm/vmscan.c:1359:
+		if (priority==1 && !ckrm_memshare_disabled) {
 		            ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2219: FILE: mm/vmscan.c:1361:
+			priority = DEF_PRIORITY+1;
 			                       ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000341483.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 337 errors, 94 warnings, 107 checks, 2061 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000341483.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
