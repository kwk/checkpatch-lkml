WARNING:LONG_LINE: line length of 118 exceeds 100 columns
#40: FILE: fs/block_dev.c:116:
+static int blkdev_direct_IO(int rw, struct inode * inode, struct kiobuf * iobuf, unsigned long blocknr, int blocksize)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#40: FILE: fs/block_dev.c:116:
+static int blkdev_direct_IO(int rw, struct inode * inode, struct kiobuf * iobuf, unsigned long blocknr, int blocksize)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#40: FILE: fs/block_dev.c:116:
+static int blkdev_direct_IO(int rw, struct inode * inode, struct kiobuf * iobuf, unsigned long blocknr, int blocksize)

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#52: FILE: fs/block_dev.c:640:
+	direct_IO: blkdev_direct_IO,
 	         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:INDENTED_LABEL: labels should not be indented
#52: FILE: fs/block_dev.c:640:
+	direct_IO: blkdev_direct_IO,

WARNING:LONG_LINE: line length of 137 exceeds 100 columns
#63: FILE: fs/buffer.c:1945:
+int generic_direct_IO(int rw, struct inode * inode, struct kiobuf * iobuf, unsigned long blocknr, int blocksize, get_block_t * get_block)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#63: FILE: fs/buffer.c:1945:
+int generic_direct_IO(int rw, struct inode * inode, struct kiobuf * iobuf, unsigned long blocknr, int blocksize, get_block_t * get_block)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#63: FILE: fs/buffer.c:1945:
+int generic_direct_IO(int rw, struct inode * inode, struct kiobuf * iobuf, unsigned long blocknr, int blocksize, get_block_t * get_block)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#63: FILE: fs/buffer.c:1945:
+int generic_direct_IO(int rw, struct inode * inode, struct kiobuf * iobuf, unsigned long blocknr, int blocksize, get_block_t * get_block)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#66: FILE: fs/buffer.c:1948:
+	unsigned long * blocks = iobuf->blocks;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#83: FILE: fs/buffer.c:1965:
+				BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#93: FILE: fs/buffer.c:1975:
+				BUG();

WARNING:LONG_LINE: line length of 116 exceeds 100 columns
#114: FILE: fs/ext2/inode.c:595:
+static int ext2_direct_IO(int rw, struct inode * inode, struct kiobuf * iobuf, unsigned long blocknr, int blocksize)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#114: FILE: fs/ext2/inode.c:595:
 }
+static int ext2_direct_IO(int rw, struct inode * inode, struct kiobuf * iobuf, unsigned long blocknr, int blocksize)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#114: FILE: fs/ext2/inode.c:595:
+static int ext2_direct_IO(int rw, struct inode * inode, struct kiobuf * iobuf, unsigned long blocknr, int blocksize)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#114: FILE: fs/ext2/inode.c:595:
+static int ext2_direct_IO(int rw, struct inode * inode, struct kiobuf * iobuf, unsigned long blocknr, int blocksize)

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#125: FILE: fs/ext2/inode.c:605:
+	bmap: ext2_bmap,
 	    ^

WARNING:INDENTED_LABEL: labels should not be indented
#125: FILE: fs/ext2/inode.c:605:
+	bmap: ext2_bmap,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#126: FILE: fs/ext2/inode.c:606:
+	direct_IO: ext2_direct_IO,
 	         ^

WARNING:INDENTED_LABEL: labels should not be indented
#126: FILE: fs/ext2/inode.c:606:
+	direct_IO: ext2_direct_IO,

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#137: FILE: include/linux/fs.h:1371:
+extern int generic_direct_IO(int, struct inode *, struct kiobuf *, unsigned long, int, get_block_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#137: FILE: include/linux/fs.h:1371:
+extern int generic_direct_IO(int, struct inode *, struct kiobuf *, unsigned long, int, get_block_t *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#137: FILE: include/linux/fs.h:1371:
+extern int generic_direct_IO(int, struct inode *, struct kiobuf *, unsigned long, int, get_block_t *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#137: FILE: include/linux/fs.h:1371:
+extern int generic_direct_IO(int, struct inode *, struct kiobuf *, unsigned long, int, get_block_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kiobuf *' should also have an identifier name
#137: FILE: include/linux/fs.h:1371:
+extern int generic_direct_IO(int, struct inode *, struct kiobuf *, unsigned long, int, get_block_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#137: FILE: include/linux/fs.h:1371:
+extern int generic_direct_IO(int, struct inode *, struct kiobuf *, unsigned long, int, get_block_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#137: FILE: include/linux/fs.h:1371:
+extern int generic_direct_IO(int, struct inode *, struct kiobuf *, unsigned long, int, get_block_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'get_block_t *' should also have an identifier name
#137: FILE: include/linux/fs.h:1371:
+extern int generic_direct_IO(int, struct inode *, struct kiobuf *, unsigned long, int, get_block_t *);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#159: FILE: mm/filemap.c:1359:
+static ssize_t generic_file_direct_IO(int rw, struct file * filp, char * buf, size_t count, loff_t offset)
                                                             ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#159: FILE: mm/filemap.c:1359:
+static ssize_t generic_file_direct_IO(int rw, struct file * filp, char * buf, size_t count, loff_t offset)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#159: FILE: mm/filemap.c:1359:
+static ssize_t generic_file_direct_IO(int rw, struct file * filp, char * buf, size_t count, loff_t offset)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#159: FILE: mm/filemap.c:1359:
+static ssize_t generic_file_direct_IO(int rw, struct file * filp, char * buf, size_t count, loff_t offset)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#163: FILE: mm/filemap.c:1363:
+	struct kiobuf * iobuf;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#164: FILE: mm/filemap.c:1364:
+	struct inode * inode = filp->f_dentry->d_inode;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#165: FILE: mm/filemap.c:1365:
+	struct address_space * mapping = inode->i_mapping;

WARNING:TYPO_SPELLING: 'exlusively' may be misspelled - perhaps 'exclusively'?
#192: FILE: mm/filemap.c:1392:
+	 * Flush to disk exlusively the _data_, metadata must remains
 	                 ^^^^^^^^^^

WARNING:TYPO_SPELLING: 'completly' may be misspelled - perhaps 'completely'?
#193: FILE: mm/filemap.c:1393:
+	 * completly asynchronous or performance will go to /dev/null.
 	   ^^^^^^^^^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#201: FILE: mm/filemap.c:1401:
+	progress = retval = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:SPACING: No space is necessary after a cast
#207: FILE: mm/filemap.c:1407:
+		retval = map_user_kiobuf(rw, iobuf, (unsigned long) buf, iosize);

WARNING:LONG_LINE: line length of 117 exceeds 100 columns
#211: FILE: mm/filemap.c:1411:
+		retval = mapping->a_ops->direct_IO(rw, inode, iobuf, (offset+progress) >> blocksize_bits, blocksize);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#211: FILE: mm/filemap.c:1411:
+		retval = mapping->a_ops->direct_IO(rw, inode, iobuf, (offset+progress) >> blocksize_bits, blocksize);
 		                                                            ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#215: FILE: mm/filemap.c:1415:
+^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#236: FILE: mm/filemap.c:1436:
+ out:^I$

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#273: FILE: mm/filemap.c:1510:
+			retval = generic_file_direct_IO(READ, filp, buf, count, pos);
 			                                      ^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#307: FILE: mm/filemap.c:2927:
+out_status:^I$

CHECK:SPACING: No space is necessary after a cast
#317: FILE: mm/filemap.c:2938:
+	written = generic_file_direct_IO(WRITE, file, (char *) buf, count, pos);

WARNING:LINE_SPACING: Missing a blank line after declarations
#320: FILE: mm/filemap.c:2941:
+		loff_t end = pos + written;
+		if (end > inode->i_size && !S_ISBLK(inode->i_mode)) {

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000505044.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 19 errors, 22 warnings, 6 checks, 273 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000505044.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
