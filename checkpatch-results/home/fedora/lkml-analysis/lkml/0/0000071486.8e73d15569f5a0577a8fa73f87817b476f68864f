WARNING:TYPO_SPELLING: 'alot' may be misspelled - perhaps 'a lot'?
#66: 
All in one, the structure of the lock debugging code is alot more 
                                                        ^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#152: FILE: include/linux/debug_locks.h:45:
+extern void debug_show_all_locks(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#153: FILE: include/linux/debug_locks.h:46:
+extern void debug_show_held_locks(struct task_struct *task);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#154: FILE: include/linux/debug_locks.h:47:
+extern void debug_check_no_locks_freed(const void *from, unsigned long len);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#155: FILE: include/linux/debug_locks.h:48:
+extern void debug_check_no_locks_held(struct task_struct *task);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#214: FILE: include/linux/lockdep.h:221:
+extern void lock_acquire(struct lockdep_map *lock, unsigned int subtype,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#219: FILE: include/linux/lockdep.h:224:
+extern void lock_release(struct lockdep_map *lock, int nested,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#561: FILE: kernel/lockdep.c:403:
+	printk("%d lock%s held by %s/%d:\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#562: FILE: kernel/lockdep.c:404:
+	printk("%d lock%s held by %s/%d:\n",
+		depth, depth > 1 ? "s" : "", curr->comm, curr->pid);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'read == 2'
#574: FILE: kernel/lockdep.c:896:
+		if ((read == 2) && prev->read &&
 				(prev->instance == next_instance))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'prev->instance == next_instance'
#574: FILE: kernel/lockdep.c:896:
+		if ((read == 2) && prev->read &&
 				(prev->instance == next_instance))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#575: FILE: kernel/lockdep.c:897:
+		if ((read == 2) && prev->read &&
 				(prev->instance == next_instance))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'check == 2'
#625: FILE: kernel/lockdep.c:2163:
+	if (!trylock && (check == 2) && lookup_chain_cache(chain_key)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#670: FILE: kernel/lockdep.c:2335:
+		if (!__lock_acquire(hlock->instance,
 			hlock->type->subtype, hlock->trylock,

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#744: FILE: kernel/lockdep.c:2471:
+EXPORT_SYMBOL_GPL(lock_acquire);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#763: FILE: kernel/lockdep.c:2491:
+EXPORT_SYMBOL_GPL(lock_release);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#785: FILE: kernel/lockdep.c:2676:
+	printk("\n=========================\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#786: FILE: kernel/lockdep.c:2677:
+	printk(  "[ BUG: held lock freed! ]\n");

ERROR:SPACING: space prohibited after that open parenthesis '('
#786: FILE: kernel/lockdep.c:2677:
+	printk(  "[ BUG: held lock freed! ]\n");

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#787: FILE: kernel/lockdep.c:2678:
+	printk(  "-------------------------\n");

ERROR:SPACING: space prohibited after that open parenthesis '('
#787: FILE: kernel/lockdep.c:2678:
+	printk(  "-------------------------\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#788: FILE: kernel/lockdep.c:2679:
+	printk("%s/%d is freeing memory %p-%p, with a lock still held there!\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#789: FILE: kernel/lockdep.c:2680:
+	printk("%s/%d is freeing memory %p-%p, with a lock still held there!\n",
+		curr->comm, curr->pid, mem_from, mem_to-1);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#789: FILE: kernel/lockdep.c:2680:
+		curr->comm, curr->pid, mem_from, mem_to-1);
 		                                       ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#792: FILE: kernel/lockdep.c:2683:
+	printk("\nstack backtrace:\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#820: FILE: kernel/lockdep.c:2711:
+		if (!in_range(mem_from, lock_from, mem_to) &&
+					!in_range(mem_from, lock_to, mem_to))

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#836: FILE: kernel/lockdep.c:2727:
+	printk("\n=====================================\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#837: FILE: kernel/lockdep.c:2728:
+	printk(  "[ BUG: lock held at task exit time! ]\n");

ERROR:SPACING: space prohibited after that open parenthesis '('
#837: FILE: kernel/lockdep.c:2728:
+	printk(  "[ BUG: lock held at task exit time! ]\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#838: FILE: kernel/lockdep.c:2729:
+	printk(  "-------------------------------------\n");

ERROR:SPACING: space prohibited after that open parenthesis '('
#838: FILE: kernel/lockdep.c:2729:
+	printk(  "-------------------------------------\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#839: FILE: kernel/lockdep.c:2730:
+	printk("%s/%d is exiting with locks still held!\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#840: FILE: kernel/lockdep.c:2731:
+	printk("%s/%d is exiting with locks still held!\n",
+		curr->comm, curr->pid);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#843: FILE: kernel/lockdep.c:2734:
+	printk("\nstack backtrace:\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#859: FILE: kernel/lockdep.c:2750:
+	printk("\nShowing all locks held in the system:\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#870: FILE: kernel/lockdep.c:2761:
+			printk("hm, tasklist_lock locked, retrying... ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#873: FILE: kernel/lockdep.c:2764:
+			printk(" #%d", 10-count);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#873: FILE: kernel/lockdep.c:2764:
+			printk(" #%d", 10-count);
 			                 ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#877: FILE: kernel/lockdep.c:2768:
+		printk(" ignoring it.\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#881: FILE: kernel/lockdep.c:2772:
+		printk(" locked it.\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#891: FILE: kernel/lockdep.c:2782:
+	printk("\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#892: FILE: kernel/lockdep.c:2783:
+	printk("=============================================\n\n");

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#898: FILE: kernel/lockdep.c:2789:
+EXPORT_SYMBOL_GPL(debug_show_all_locks);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#905: FILE: kernel/lockdep.c:2796:
+EXPORT_SYMBOL_GPL(debug_show_held_locks);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#938: FILE: kernel/mutex-debug.h:35:
+extern void debug_mutex_init(struct mutex *lock, const char *name,

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#1180: FILE: lib/Kconfig.debug:276:
+config DEBUG_MUTEXES
+	bool "Mutex debugging: basic checks"
+	default y
+	depends on DEBUG_KERNEL
+	help
+	 This feature allows mutex semantics violations to be detected and
+	 reported.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#1211: FILE: lib/Kconfig.debug:333:
+config DEBUG_RWSEMS
+	bool "rwsem debugging: basic checks"
+	depends on DEBUG_KERNEL
+	help
+	 This feature allows read-write semaphore semantics violations to
+	 be detected and reported.
+

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1432: FILE: lib/locking-selftest.c:280:
+}
+/*

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#1467: FILE: lib/locking-selftest.c:533:
+#define E()					\
+						\
+	LOCK(A);				\
+	INIT(A); /* fail */

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#1467: FILE: lib/locking-selftest.c:533:
+#define E()					\
+						\
+	LOCK(A);				\
+	INIT(A); /* fail */

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1536: FILE: lib/locking-selftest.c:1220:
+	printk("             |");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1538: FILE: lib/locking-selftest.c:1222:
+	printk("             |");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1540: FILE: lib/locking-selftest.c:1224:
+	printk("\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1543: FILE: lib/locking-selftest.c:1227:
+	printk("             |");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1545: FILE: lib/locking-selftest.c:1229:
+	printk("             |");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1547: FILE: lib/locking-selftest.c:1231:
+	printk("\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1550: FILE: lib/locking-selftest.c:1234:
+	printk("             |");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1552: FILE: lib/locking-selftest.c:1236:
+	printk("             |");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1554: FILE: lib/locking-selftest.c:1238:
+	printk("\n");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1558: FILE: lib/locking-selftest.c:1242:
 
+

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1640: FILE: lib/spinlock_debug.c:32:
+EXPORT_SYMBOL(__spin_lock_init);

CHECK:SPACING: No space is necessary after a cast
#1652: FILE: lib/spinlock_debug.c:44:
+	lock->raw_lock = (raw_rwlock_t) __RAW_RW_LOCK_UNLOCKED;

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1658: FILE: lib/spinlock_debug.c:50:
+EXPORT_SYMBOL(__rwlock_init);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000071486.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 5 errors, 37 warnings, 21 checks, 1314 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000071486.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
