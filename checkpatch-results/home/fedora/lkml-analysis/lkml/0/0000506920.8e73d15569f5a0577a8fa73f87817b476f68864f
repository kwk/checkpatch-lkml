WARNING:LEADING_SPACE: please, no spaces at the start of a line
#52: FILE: diff.c:209:
+  {"zoom", 0, 0, 'z'},$

WARNING:TABSTOP: Statements should start on a tabstop
#72: FILE: diff.c:500:
+	  break;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (6, 10)
#87: FILE: diff.c:998:
       else
[...]
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#89: FILE: diff.c:1000:
 	{
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#90: FILE: diff.c:1001:
+          /* Sometimes faster to load each tree into OS's cache 1st */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:CODE_INDENT: code indent should use tabs where possible
#92: FILE: diff.c:1003:
+          if (depth == 0 && recursive && preread_tree)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#92: FILE: diff.c:1003:
+          if (depth == 0 && recursive && preread_tree)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#92: FILE: diff.c:1003:
+          if (depth == 0 && recursive && preread_tree)
+	    {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 14)
#92: FILE: diff.c:1003:
+          if (depth == 0 && recursive && preread_tree)
+	    {

WARNING:TABSTOP: Statements should start on a tabstop
#93: FILE: diff.c:1004:
+	    {

ERROR:CODE_INDENT: code indent should use tabs where possible
#94: FILE: diff.c:1005:
+              preread(inf[0].name);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#94: FILE: diff.c:1005:
+              preread(inf[0].name);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#95: FILE: diff.c:1006:
+              preread(inf[1].name);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#95: FILE: diff.c:1006:
+              preread(inf[1].name);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#96: FILE: diff.c:1007:
+            }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#96: FILE: diff.c:1007:
+            }$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#97: FILE: diff.c:1008:
+^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#125: FILE: io.c:189:
+preread (dir)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#128: FILE: io.c:192:
+{
+

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#129: FILE: io.c:193:
+  DIR *d;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#130: FILE: io.c:194:
+  struct dirent *dent;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#132: FILE: io.c:196:
+  d = opendir(dir);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#133: FILE: io.c:197:
+  if (d == NULL) return;$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#133: FILE: io.c:197:
+  if (d == NULL) return;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!d"
#133: FILE: io.c:197:
+  if (d == NULL) return;

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#135: FILE: io.c:199:
+  while ((dent = readdir(d)) != NULL)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#135: FILE: io.c:199:
+  while ((dent = readdir(d)) != NULL)
+    {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#135: FILE: io.c:199:
+  while ((dent = readdir(d)) != NULL)
[...]
+

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#136: FILE: io.c:200:
+    {$

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#137: FILE: io.c:201:
+    {
+

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#138: FILE: io.c:202:
+      char *name, *path;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#139: FILE: io.c:203:
+      struct file_data *f;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#141: FILE: io.c:205:
+      name = dent->d_name;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#142: FILE: io.c:206:
+      if (name[0] == '.' && (name[1] == 0 || (name[1] == '.' && name[2] == 0)))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (6, 12)
#142: FILE: io.c:206:
+      if (name[0] == '.' && (name[1] == 0 || (name[1] == '.' && name[2] == 0)))
+            continue;

ERROR:CODE_INDENT: code indent should use tabs where possible
#143: FILE: io.c:207:
+            continue;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#143: FILE: io.c:207:
+            continue;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#145: FILE: io.c:209:
+      f = xmalloc(sizeof(struct file_data));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#146: FILE: io.c:210:
+      memset(f, 0, sizeof(struct file_data));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#148: FILE: io.c:212:
+      path = xmalloc(strlen(dir)+strlen(name)+2);$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#148: FILE: io.c:212:
+      path = xmalloc(strlen(dir)+strlen(name)+2);
                                 ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#148: FILE: io.c:212:
+      path = xmalloc(strlen(dir)+strlen(name)+2);
                                              ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#149: FILE: io.c:213:
+      strcpy(path, dir);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#150: FILE: io.c:214:
+      strcat(path, "/");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#151: FILE: io.c:215:
+      strcat(path, name);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#153: FILE: io.c:217:
+      if (stat(path, &f->stat) != 0)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#153: FILE: io.c:217:
+      if (stat(path, &f->stat) != 0)
+        {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (6, 11)
#153: FILE: io.c:217:
+      if (stat(path, &f->stat) != 0)
+        {

ERROR:CODE_INDENT: code indent should use tabs where possible
#154: FILE: io.c:218:
+        {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#154: FILE: io.c:218:
+        {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#155: FILE: io.c:219:
+           free(f);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#155: FILE: io.c:219:
+           free(f);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#156: FILE: io.c:220:
+           free(path);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#156: FILE: io.c:220:
+           free(path);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#157: FILE: io.c:221:
+           continue;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#157: FILE: io.c:221:
+           continue;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#158: FILE: io.c:222:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#158: FILE: io.c:222:
+        }$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#159: FILE: io.c:223:
+^I$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#160: FILE: io.c:224:
+      if (S_ISDIR(f->stat.st_mode))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (6, 11)
#160: FILE: io.c:224:
+      if (S_ISDIR(f->stat.st_mode))
+           preread(path);

ERROR:CODE_INDENT: code indent should use tabs where possible
#161: FILE: io.c:225:
+           preread(path);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#161: FILE: io.c:225:
+           preread(path);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#162: FILE: io.c:226:
+      else if (S_ISREG(f->stat.st_mode))$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#162: FILE: io.c:226:
+      else if (S_ISREG(f->stat.st_mode))
+        {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (6, 10)
#162: FILE: io.c:226:
+      else if (S_ISREG(f->stat.st_mode))
+        {

ERROR:CODE_INDENT: code indent should use tabs where possible
#163: FILE: io.c:227:
+        {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#163: FILE: io.c:227:
+        {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#164: FILE: io.c:228:
+          f->desc = open(path, O_RDONLY);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#164: FILE: io.c:228:
+          f->desc = open(path, O_RDONLY);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#165: FILE: io.c:229:
+          if (f->desc != -1)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#165: FILE: io.c:229:
+          if (f->desc != -1)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#165: FILE: io.c:229:
+          if (f->desc != -1)
+            {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 14)
#165: FILE: io.c:229:
+          if (f->desc != -1)
+            {

ERROR:CODE_INDENT: code indent should use tabs where possible
#166: FILE: io.c:230:
+            {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#166: FILE: io.c:230:
+            {$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#167: FILE: io.c:231:
+              slurp(f); $

ERROR:CODE_INDENT: code indent should use tabs where possible
#167: FILE: io.c:231:
+              slurp(f); $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#167: FILE: io.c:231:
+              slurp(f); $

ERROR:CODE_INDENT: code indent should use tabs where possible
#168: FILE: io.c:232:
+              if (f->bufsize != 0)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#168: FILE: io.c:232:
+              if (f->bufsize != 0)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#169: FILE: io.c:233:
+                free(f->buffer);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#169: FILE: io.c:233:
+                free(f->buffer);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#170: FILE: io.c:234:
+              close(f->desc);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#170: FILE: io.c:234:
+              close(f->desc);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#171: FILE: io.c:235:
+            }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#171: FILE: io.c:235:
+            }$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#172: FILE: io.c:236:
+        } $

ERROR:CODE_INDENT: code indent should use tabs where possible
#172: FILE: io.c:236:
+        } $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#172: FILE: io.c:236:
+        } $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#173: FILE: io.c:237:
+      free(path);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#174: FILE: io.c:238:
+      free(f); $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#174: FILE: io.c:238:
+      free(f); $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#175: FILE: io.c:239:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#176: FILE: io.c:240:
+  closedir(d);$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000506920.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 33 errors, 56 warnings, 6 checks, 121 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000506920.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
