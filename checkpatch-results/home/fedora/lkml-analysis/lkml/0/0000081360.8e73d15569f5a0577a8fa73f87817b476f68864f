WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#29: 
> I'm seeing bouts of log flooding caused by something presumably not releasing

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#276: FILE: arch/x86_64/kernel/traps.c:266:
+void show_stack(struct task_struct *task, unsigned long * rsp)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#317: FILE: include/asm-x86_64/proto.h:78:
+extern void show_trace(struct task_struct *task, unsigned long * rsp);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#317: FILE: include/asm-x86_64/proto.h:78:
+extern void show_trace(struct task_struct *task, unsigned long * rsp);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#330: FILE: include/linux/sched.h:643:
+extern void print_preempt_trace(struct task_struct *task, u32 count);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#362: FILE: kernel/exit.c:892:
+		printk(KERN_ERR "BUG: %s[%d] exited with nonzero preempt_count %d!\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#363: FILE: kernel/exit.c:893:
+		printk(KERN_ERR "BUG: %s[%d] exited with nonzero preempt_count %d!\n",
+				tsk->comm, tsk->pid, preempt_count());

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#383: FILE: kernel/irq/handle.c:95:
+			printk(KERN_ERR "BUG: irq %d [%s] preempt-count "

WARNING:SPLIT_STRING: quoted string split across lines
#384: FILE: kernel/irq/handle.c:96:
+			printk(KERN_ERR "BUG: irq %d [%s] preempt-count "
+				"imbalance: in=%08x, out=%08x!\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#464: FILE: kernel/softirq.c:103:
+				printk(KERN_ERR "BUG: softirq %ld preempt-count"

WARNING:SPLIT_STRING: quoted string split across lines
#465: FILE: kernel/softirq.c:104:
+				printk(KERN_ERR "BUG: softirq %ld preempt-count"
+					" imbalance: in=%08x, out=%08x!\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#517: FILE: kernel/timer.c:454:
+				printk(KERN_ERR "(%p) preempt-count imbalance: "

WARNING:SPLIT_STRING: quoted string split across lines
#518: FILE: kernel/timer.c:455:
+				printk(KERN_ERR "(%p) preempt-count imbalance: "
+					"in=%08x, out=%08x!",

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#556: FILE: lib/preempt.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#557: FILE: lib/preempt.c:2:
+ * lib/preempt.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#580: FILE: lib/preempt.c:25:
+	BUG_ON(count < 0);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#587: FILE: lib/preempt.c:32:
+	BUG_ON(idx >= PREEMPT_MASK-10);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#587: FILE: lib/preempt.c:32:
+	BUG_ON(idx >= PREEMPT_MASK-10);
 	                          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#618: FILE: lib/preempt.c:63:
+	BUG_ON(val > count);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#622: FILE: lib/preempt.c:67:
+	BUG_ON((val < PREEMPT_MASK) && !(count & PREEMPT_MASK));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#634: FILE: lib/preempt.c:79:
+	printk("---------------------------\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#635: FILE: lib/preempt.c:80:
+	printk("| preempt count: %08x ]\n", count);

CHECK:BRACES: braces {} should be used on all arms of this statement
#636: FILE: lib/preempt.c:81:
+	if (count) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#637: FILE: lib/preempt.c:82:
+		printk("| %d level deep critical section nesting:\n", idx);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#638: FILE: lib/preempt.c:83:
+		printk("----------------------------------------\n");

CHECK:BRACES: Unbalanced braces around else statement
#639: FILE: lib/preempt.c:84:
+	} else

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#640: FILE: lib/preempt.c:85:
+		printk("---------------------------\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#642: FILE: lib/preempt.c:87:
+		printk(".. [<%p>] .... ", task->preempt_off_caller[i]);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#644: FILE: lib/preempt.c:89:
+		printk(".....[<%p>] ..   ( <= ",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#645: FILE: lib/preempt.c:90:
+		printk(".....[<%p>] ..   ( <= ",
+				task->preempt_off_parent[i]);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#647: FILE: lib/preempt.c:92:
+		if (i == MAX_PREEMPT_TRACE-1) {
 		                          ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#648: FILE: lib/preempt.c:93:
+			printk("[rest truncated, reached MAX_PREEMPT_TRACE]\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#652: FILE: lib/preempt.c:97:
+	printk("\n");

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000081360.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 2 errors, 23 warnings, 8 checks, 428 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000081360.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
