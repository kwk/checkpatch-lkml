WARNING:TYPO_SPELLING: 'usefull' may be misspelled - perhaps 'useful'?
#12: 
Subject: Re: [POLL] SLAB : Are the 32 and 192 bytes caches really usefull
                                                                  ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#60: 
Content-Disposition: attachment; filename=linux-2.6-debug-account-kmalloc.patch

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#84: FILE: init/Kconfig:331:
+config KMALLOC_ACCOUNTING
+	default n
+	bool "Enabled accounting of kmalloc/kfree allocations"
+	help
+	  This option records kmalloc and kfree activity and reports it via
+	  /proc/kmalloc.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#178: FILE: mm/kmallocacct.c:1:
+#include	<linux/config.h>

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'address' may be better as '(address)' to avoid precedence issues
#195: FILE: mm/kmallocacct.c:18:
+#define kma_hash(address, size) (((u32)address / (u32)size) % size)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'size' - possible side-effects?
#195: FILE: mm/kmallocacct.c:18:
+#define kma_hash(address, size) (((u32)address / (u32)size) % size)

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#211: FILE: mm/kmallocacct.c:34:
+	if(req >= 0) /* kmalloc */
+	{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required before the open parenthesis '('
#211: FILE: mm/kmallocacct.c:34:
+	if(req >= 0) /* kmalloc */

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#241: FILE: mm/kmallocacct.c:64:
+			if(i < MAX_ALLOC_TRACK) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#241: FILE: mm/kmallocacct.c:64:
+			if(i < MAX_ALLOC_TRACK) {
[...]
+			else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#245: FILE: mm/kmallocacct.c:68:
+			}
+			else

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#248: FILE: mm/kmallocacct.c:71:
+		}
+		else {

CHECK:BRACES: Unbalanced braces around else statement
#248: FILE: mm/kmallocacct.c:71:
+		else {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#258: FILE: mm/kmallocacct.c:81:
+	}
+	else { /* kfree */

CHECK:BRACES: Unbalanced braces around else statement
#258: FILE: mm/kmallocacct.c:81:
+	else { /* kfree */

CHECK:BRACES: braces {} should be used on all arms of this statement
#266: FILE: mm/kmallocacct.c:89:
+		if (i < MAX_ALLOC_TRACK) {
[...]
+		else
[...]

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#272: FILE: mm/kmallocacct.c:95:
+		}
+		else

ERROR:SPACING: space required before the open parenthesis '('
#303: FILE: mm/kmallocacct.c:126:
+		if(kma_caller[i].caller)

ERROR:SPACING: space required before the open parenthesis '('
#305: FILE: mm/kmallocacct.c:128:
+		if(n < 0)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#306: FILE: mm/kmallocacct.c:129:
+			return (void *)(i+1);
 			                 ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#314: FILE: mm/kmallocacct.c:137:
+	int n = (int)p-1, i;
 	              ^

ERROR:SPACING: space required before the open parenthesis '('
#318: FILE: mm/kmallocacct.c:141:
+		if(kma_caller[i].caller)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#319: FILE: mm/kmallocacct.c:142:
+			return (void *)(i+1);
 			                 ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#330: FILE: mm/kmallocacct.c:153:
+	int n = (int)p-1;
 	              ^

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#353: FILE: mm/kmallocacct.c:176:
+struct seq_operations kmalloc_account_op = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#383: FILE: include/linux/slab.h:59:
+static void inline kmalloc_account(const void *addr, int size, int req)

The inline keyword should sit between storage class and type.

For example, the following segment::

  inline static int example_function(void)
  {
          ...
  }

should be::

  static inline int example_function(void)
  {
          ...
  }

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#388: FILE: include/linux/slab.h:64:
+static void inline kfree_account(const void *addr, int size)

WARNING:LINE_SPACING: Missing a blank line after declarations
#420: FILE: include/linux/slab.h:124:
+	void *ret = kmalloc(size, flags);
+	if (ret)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#458: FILE: fs/proc/proc_misc.c:342:
+extern struct seq_operations kmalloc_account_op;

WARNING:CONST_STRUCT: struct file_operations should normally be const
#465: FILE: fs/proc/proc_misc.c:349:
+static struct file_operations proc_kmalloc_account_operations = {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#482: FILE: fs/proc/proc_misc.c:623:
+	create_seq_entry("kmalloc",S_IRUGO,&proc_kmalloc_account_operations);
 	                          ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#482: FILE: fs/proc/proc_misc.c:623:
+	create_seq_entry("kmalloc",S_IRUGO,&proc_kmalloc_account_operations);
 	                                  ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#482: FILE: fs/proc/proc_misc.c:623:
+	create_seq_entry("kmalloc",S_IRUGO,&proc_kmalloc_account_operations);
 	                                   ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#482: FILE: fs/proc/proc_misc.c:623:
+	create_seq_entry("kmalloc",S_IRUGO,&proc_kmalloc_account_operations);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000121636.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 15 errors, 9 warnings, 10 checks, 360 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000121636.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
