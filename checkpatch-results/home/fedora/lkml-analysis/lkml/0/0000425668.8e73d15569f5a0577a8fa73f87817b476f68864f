WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#26: 
  This doesn't change the API at all; it only moves fs/driverfs to fs/kfs and 

WARNING:TYPO_SPELLING: 'hte' may be misspelled - perhaps 'the'?
#27: 
  changes the name of hte header file. 
                      ^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#35: 
--- a/drivers/acpi/acpi_bus.h	Mon Oct  7 15:40:26 2002

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#810: FILE: fs/kfs/inode.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#826: FILE: fs/kfs/inode.c:17:
+ *  along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#827: FILE: fs/kfs/inode.c:18:
+ *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#847: FILE: fs/kfs/inode.c:38:
+#include <asm/uaccess.h>

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#852: FILE: fs/kfs/inode.c:43:
+# define DBG(x...) printk(x)

WARNING:CONST_STRUCT: struct file_operations should normally be const
#861: FILE: fs/kfs/inode.c:52:
+static struct file_operations driverfs_file_operations;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#862: FILE: fs/kfs/inode.c:53:
+static struct inode_operations driverfs_dir_inode_operations;

WARNING:CONST_STRUCT: struct address_space_operations should normally be const
#863: FILE: fs/kfs/inode.c:54:
+static struct address_space_operations driverfs_aops;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#867: FILE: fs/kfs/inode.c:58:
+static int mount_count = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#874: FILE: fs/kfs/inode.c:65:
+static int driverfs_readpage(struct file *file, struct page * page)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#888: FILE: fs/kfs/inode.c:79:
+static int driverfs_prepare_write(struct file *file, struct page *page, unsigned offset, unsigned to)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#888: FILE: fs/kfs/inode.c:79:
+static int driverfs_prepare_write(struct file *file, struct page *page, unsigned offset, unsigned to)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#888: FILE: fs/kfs/inode.c:79:
+static int driverfs_prepare_write(struct file *file, struct page *page, unsigned offset, unsigned to)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#901: FILE: fs/kfs/inode.c:92:
+static int driverfs_commit_write(struct file *file, struct page *page, unsigned offset, unsigned to)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#901: FILE: fs/kfs/inode.c:92:
+static int driverfs_commit_write(struct file *file, struct page *page, unsigned offset, unsigned to)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#912: FILE: fs/kfs/inode.c:103:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#924: FILE: fs/kfs/inode.c:115:
+		inode->i_atime = inode->i_mtime = inode->i_ctime = CURRENT_TIME;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#957: FILE: fs/kfs/inode.c:148:
+^I/* only allow create if ->d_fsdata is not NULL (so we can assume it $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#958: FILE: fs/kfs/inode.c:149:
+	 * comes from the driverfs API below. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:LINE_SPACING: Missing a blank line after declarations
#970: FILE: fs/kfs/inode.c:161:
+	int res;
+	mode = (mode & (S_IRWXUGO|S_ISVTX)) | S_IFDIR;

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#970: FILE: fs/kfs/inode.c:161:
+	mode = (mode & (S_IRWXUGO|S_ISVTX)) | S_IFDIR;
 	                         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXUGO' are not preferred. Consider using octal permissions '0777'.
#970: FILE: fs/kfs/inode.c:161:
+	mode = (mode & (S_IRWXUGO|S_ISVTX)) | S_IFDIR;

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

ERROR:CODE_INDENT: code indent should use tabs where possible
#971: FILE: fs/kfs/inode.c:162:
+ ^Ires = driverfs_mknod(dir, dentry, mode, 0);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#971: FILE: fs/kfs/inode.c:162:
+ ^Ires = driverfs_mknod(dir, dentry, mode, 0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#971: FILE: fs/kfs/inode.c:162:
+ ^Ires = driverfs_mknod(dir, dentry, mode, 0);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#972: FILE: fs/kfs/inode.c:163:
+ ^Iif (!res)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#972: FILE: fs/kfs/inode.c:163:
+ ^Iif (!res)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#972: FILE: fs/kfs/inode.c:163:
+ ^Iif (!res)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#973: FILE: fs/kfs/inode.c:164:
+ ^I^Idir->i_nlink++;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#973: FILE: fs/kfs/inode.c:164:
+ ^I^Idir->i_nlink++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#973: FILE: fs/kfs/inode.c:164:
+ ^I^Idir->i_nlink++;$

WARNING:LINE_SPACING: Missing a blank line after declarations
#980: FILE: fs/kfs/inode.c:171:
+	int res;
+	mode = (mode & S_IALLUGO) | S_IFREG;

ERROR:CODE_INDENT: code indent should use tabs where possible
#981: FILE: fs/kfs/inode.c:172:
+ ^Ires = driverfs_mknod(dir, dentry, mode, 0);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#981: FILE: fs/kfs/inode.c:172:
+ ^Ires = driverfs_mknod(dir, dentry, mode, 0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#981: FILE: fs/kfs/inode.c:172:
+ ^Ires = driverfs_mknod(dir, dentry, mode, 0);$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#985: FILE: fs/kfs/inode.c:176:
+static int driverfs_symlink(struct inode * dir, struct dentry *dentry, const char * symname)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#985: FILE: fs/kfs/inode.c:176:
+static int driverfs_symlink(struct inode * dir, struct dentry *dentry, const char * symname)

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#993: FILE: fs/kfs/inode.c:184:
+	inode = driverfs_get_inode(dir->i_sb, S_IFLNK|S_IRWXUGO, 0);
 	                                             ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXUGO' are not preferred. Consider using octal permissions '0777'.
#993: FILE: fs/kfs/inode.c:184:
+	inode = driverfs_get_inode(dir->i_sb, S_IFLNK|S_IRWXUGO, 0);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#995: FILE: fs/kfs/inode.c:186:
+		int l = strlen(symname)+1;
 		                       ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#996: FILE: fs/kfs/inode.c:187:
+		int l = strlen(symname)+1;
+		error = page_symlink(inode, symname, l);

CHECK:BRACES: braces {} should be used on all arms of this statement
#997: FILE: fs/kfs/inode.c:188:
+		if (!error) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#1000: FILE: fs/kfs/inode.c:191:
+		} else

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1001: FILE: fs/kfs/inode.c:192:
+			iput(inode);
 			^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1019: FILE: fs/kfs/inode.c:210:
+		struct dentry *de = list_entry(list, struct dentry, d_child);
+		if (driverfs_positive(de)) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1032: FILE: fs/kfs/inode.c:223:
+	struct inode *inode = dentry->d_inode;
+	down(&inode->i_sem);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1058: FILE: fs/kfs/inode.c:249:
+	struct attribute * attr = file->f_dentry->d_fsdata;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1059: FILE: fs/kfs/inode.c:250:
+	struct driver_dir_entry * dir;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1070: FILE: fs/kfs/inode.c:261:
+	page = (unsigned char*)__get_free_page(GFP_KERNEL);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1077: FILE: fs/kfs/inode.c:268:
+		len = dir->ops->show(dir,attr,page,count,*ppos);
 		                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1077: FILE: fs/kfs/inode.c:268:
+		len = dir->ops->show(dir,attr,page,count,*ppos);
 		                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1077: FILE: fs/kfs/inode.c:268:
+		len = dir->ops->show(dir,attr,page,count,*ppos);
 		                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#1077: FILE: fs/kfs/inode.c:268:
+		len = dir->ops->show(dir,attr,page,count,*ppos);
 		                                        ^

ERROR:SPACING: space required before that '*' (ctx:OxV)
#1077: FILE: fs/kfs/inode.c:268:
+		len = dir->ops->show(dir,attr,page,count,*ppos);
 		                                         ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#1079: FILE: fs/kfs/inode.c:270:
+		if (len <= 0) {
[...]
+		} else if (len > count)
[...]

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1086: FILE: fs/kfs/inode.c:277:
+		if (copy_to_user(buf,page,len)) {
 		                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1086: FILE: fs/kfs/inode.c:277:
+		if (copy_to_user(buf,page,len)) {
 		                         ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1116: FILE: fs/kfs/inode.c:307:
+	struct attribute * attr = file->f_dentry->d_fsdata;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1117: FILE: fs/kfs/inode.c:308:
+	struct driver_dir_entry * dir;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1119: FILE: fs/kfs/inode.c:310:
+	char * page;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1129: FILE: fs/kfs/inode.c:320:
+	if (copy_from_user(page,buf,count))
 	                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1129: FILE: fs/kfs/inode.c:320:
+	if (copy_from_user(page,buf,count))
 	                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1136: FILE: fs/kfs/inode.c:327:
+		len = dir->ops->store(dir,attr,page + retval,count,*ppos);
 		                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1136: FILE: fs/kfs/inode.c:327:
+		len = dir->ops->store(dir,attr,page + retval,count,*ppos);
 		                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1136: FILE: fs/kfs/inode.c:327:
+		len = dir->ops->store(dir,attr,page + retval,count,*ppos);
 		                                            ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#1136: FILE: fs/kfs/inode.c:327:
+		len = dir->ops->store(dir,attr,page + retval,count,*ppos);
 		                                                  ^

ERROR:SPACING: space required before that '*' (ctx:OxV)
#1136: FILE: fs/kfs/inode.c:327:
+		len = dir->ops->store(dir,attr,page + retval,count,*ppos);
 		                                                   ^

ERROR:SPACING: space required before the open parenthesis '('
#1159: FILE: fs/kfs/inode.c:350:
+	switch(orig) {

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1179: FILE: fs/kfs/inode.c:370:
+static int driverfs_open_file(struct inode * inode, struct file * filp)
                                                                   ^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1179: FILE: fs/kfs/inode.c:370:
+static int driverfs_open_file(struct inode * inode, struct file * filp)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1179: FILE: fs/kfs/inode.c:370:
+static int driverfs_open_file(struct inode * inode, struct file * filp)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1181: FILE: fs/kfs/inode.c:372:
+	struct driver_dir_entry * dir;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1186: FILE: fs/kfs/inode.c:377:
+		struct attribute * attr = filp->f_dentry->d_fsdata;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1187: FILE: fs/kfs/inode.c:378:
+		struct attribute * attr = filp->f_dentry->d_fsdata;
+		if (attr && dir->ops) {

CHECK:CAMELCASE: Avoid CamelCase: <Done>
#1190: FILE: fs/kfs/inode.c:381:
+			goto Done;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1198: FILE: fs/kfs/inode.c:389:
+static int driverfs_release(struct inode * inode, struct file * filp)
                                                                 ^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1198: FILE: fs/kfs/inode.c:389:
+static int driverfs_release(struct inode * inode, struct file * filp)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1198: FILE: fs/kfs/inode.c:389:
+static int driverfs_release(struct inode * inode, struct file * filp)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1200: FILE: fs/kfs/inode.c:391:
+	struct driver_dir_entry * dir;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1201: FILE: fs/kfs/inode.c:392:
+	struct driver_dir_entry * dir;
+	dir = (struct driver_dir_entry *)filp->f_dentry->d_parent->d_fsdata;

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1207: FILE: fs/kfs/inode.c:398:
+static struct file_operations driverfs_file_operations = {

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#1215: FILE: fs/kfs/inode.c:406:
+static struct inode_operations driverfs_dir_inode_operations = {

WARNING:CONST_STRUCT: struct address_space_operations should normally be const
#1219: FILE: fs/kfs/inode.c:410:
+static struct address_space_operations driverfs_aops = {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1243: FILE: fs/kfs/inode.c:434:
+		DBG("%s: could not get inode!\n",__FUNCTION__);
 		                                ^

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1243: FILE: fs/kfs/inode.c:434:
+		DBG("%s: could not get inode!\n",__FUNCTION__);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1249: FILE: fs/kfs/inode.c:440:
+		DBG("%s: could not get root dentry!\n",__FUNCTION__);
 		                                      ^

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1249: FILE: fs/kfs/inode.c:440:
+		DBG("%s: could not get root dentry!\n",__FUNCTION__);

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1250: FILE: fs/kfs/inode.c:441:
+		iput(inode);
 		^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1258: FILE: fs/kfs/inode.c:449:
+static struct super_block *driverfs_get_sb(struct file_system_type *fs_type,
+	int flags, char *dev_name, void *data)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1272: FILE: fs/kfs/inode.c:463:
+	struct vfsmount * mnt;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1286: FILE: fs/kfs/inode.c:477:
+		printk(KERN_ERR "driverfs: could not mount!\n");

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1303: FILE: fs/kfs/inode.c:494:
+	DBG("driverfs: mount_count = %d\n",mount_count);
 	                                  ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1309: FILE: fs/kfs/inode.c:500:
+	struct vfsmount * mnt;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1318: FILE: fs/kfs/inode.c:509:
+	DBG("driverfs: mount_count = %d\n",mount_count);
 	                                  ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1326: FILE: fs/kfs/inode.c:517:
+static struct dentry * get_dentry(struct dentry * parent, const char * name)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1326: FILE: fs/kfs/inode.c:517:
+static struct dentry * get_dentry(struct dentry * parent, const char * name)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1326: FILE: fs/kfs/inode.c:517:
+static struct dentry * get_dentry(struct dentry * parent, const char * name)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1332: FILE: fs/kfs/inode.c:523:
+	qstr.hash = full_name_hash(name,qstr.len);
 	                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1333: FILE: fs/kfs/inode.c:524:
+	return lookup_hash(&qstr,parent);
 	                        ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1342: FILE: fs/kfs/inode.c:533:
+driverfs_create_dir(struct driver_dir_entry * entry,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1343: FILE: fs/kfs/inode.c:534:
+		    struct driver_dir_entry * parent)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1345: FILE: fs/kfs/inode.c:536:
+	struct dentry * dentry = NULL;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1346: FILE: fs/kfs/inode.c:537:
+	struct dentry * parent_dentry;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1366: FILE: fs/kfs/inode.c:557:
+	dentry = get_dentry(parent_dentry,entry->name);
 	                                 ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#1367: FILE: fs/kfs/inode.c:558:
+	if (!IS_ERR(dentry)) {
[...]
+	} else
[...]

CHECK:SPACING: No space is necessary after a cast
#1368: FILE: fs/kfs/inode.c:559:
+		dentry->d_fsdata = (void *) entry;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1370: FILE: fs/kfs/inode.c:561:
+		error = driverfs_mkdir(parent_dentry->d_inode,dentry,entry->mode);
 		                                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1370: FILE: fs/kfs/inode.c:561:
+		error = driverfs_mkdir(parent_dentry->d_inode,dentry,entry->mode);
 		                                                    ^

CHECK:BRACES: Unbalanced braces around else statement
#1371: FILE: fs/kfs/inode.c:562:
+	} else

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1386: FILE: fs/kfs/inode.c:577:
+driverfs_create_file(struct attribute * entry,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1387: FILE: fs/kfs/inode.c:578:
+		     struct driver_dir_entry * parent)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1389: FILE: fs/kfs/inode.c:580:
+	struct dentry * dentry;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1401: FILE: fs/kfs/inode.c:592:
+	dentry = get_dentry(parent->dentry,entry->name);
 	                                  ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#1402: FILE: fs/kfs/inode.c:593:
+	if (!IS_ERR(dentry)) {
[...]
+	} else
[...]

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1404: FILE: fs/kfs/inode.c:595:
+		error = driverfs_create(parent->dentry->d_inode,dentry,entry->mode);
 		                                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1404: FILE: fs/kfs/inode.c:595:
+		error = driverfs_create(parent->dentry->d_inode,dentry,entry->mode);
 		                                                      ^

CHECK:BRACES: Unbalanced braces around else statement
#1405: FILE: fs/kfs/inode.c:596:
+	} else

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1413: FILE: fs/kfs/inode.c:604:
+ * @parent:^Idirectory we're creating in $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1416: FILE: fs/kfs/inode.c:607:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1418: FILE: fs/kfs/inode.c:609:
+int driverfs_create_symlink(struct driver_dir_entry * parent, $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1418: FILE: fs/kfs/inode.c:609:
+int driverfs_create_symlink(struct driver_dir_entry * parent, 

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1419: FILE: fs/kfs/inode.c:610:
+			    char * name, char * target)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1419: FILE: fs/kfs/inode.c:610:
+			    char * name, char * target)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1421: FILE: fs/kfs/inode.c:612:
+	struct dentry * dentry;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1432: FILE: fs/kfs/inode.c:623:
+	dentry = get_dentry(parent->dentry,name);
 	                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1434: FILE: fs/kfs/inode.c:625:
+		error = driverfs_symlink(parent->dentry->d_inode,dentry,target);
 		                                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1434: FILE: fs/kfs/inode.c:625:
+		error = driverfs_symlink(parent->dentry->d_inode,dentry,target);
 		                                                       ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1449: FILE: fs/kfs/inode.c:640:
+void driverfs_remove_file(struct driver_dir_entry * dir, const char * name)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1449: FILE: fs/kfs/inode.c:640:
+void driverfs_remove_file(struct driver_dir_entry * dir, const char * name)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1451: FILE: fs/kfs/inode.c:642:
+	struct dentry * dentry;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1457: FILE: fs/kfs/inode.c:648:
+	dentry = get_dentry(dir->dentry,name);
 	                               ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1460: FILE: fs/kfs/inode.c:651:
+^I^Iif (dentry->d_inode && $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dentry->d_parent->d_inode == dir->dentry->d_inode'
#1460: FILE: fs/kfs/inode.c:651:
+		if (dentry->d_inode && 
+		    (dentry->d_parent->d_inode == dir->dentry->d_inode)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1462: FILE: fs/kfs/inode.c:653:
+			driverfs_unlink(dir->dentry->d_inode,dentry);
 			                                    ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1475: FILE: fs/kfs/inode.c:666:
+void driverfs_remove_dir(struct driver_dir_entry * dir)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1477: FILE: fs/kfs/inode.c:668:
+	struct list_head * node, * next;

ERROR:SPACING: space prohibited after that '*' (ctx:WxW)
#1477: FILE: fs/kfs/inode.c:668:
+	struct list_head * node, * next;
 	                         ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1478: FILE: fs/kfs/inode.c:669:
+	struct dentry * dentry = dir->dentry;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1479: FILE: fs/kfs/inode.c:670:
+	struct dentry * parent;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1488: FILE: fs/kfs/inode.c:679:
+	list_for_each_safe(node,next,&dentry->d_subdirs) {
 	                       ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#1488: FILE: fs/kfs/inode.c:679:
+	list_for_each_safe(node,next,&dentry->d_subdirs) {
 	                            ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#1488: FILE: fs/kfs/inode.c:679:
+	list_for_each_safe(node,next,&dentry->d_subdirs) {
 	                             ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1489: FILE: fs/kfs/inode.c:680:
+		struct dentry * d = list_entry(node,struct dentry,d_child);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1489: FILE: fs/kfs/inode.c:680:
+		struct dentry * d = list_entry(node,struct dentry,d_child);
 		                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1489: FILE: fs/kfs/inode.c:680:
+		struct dentry * d = list_entry(node,struct dentry,d_child);
 		                                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1492: FILE: fs/kfs/inode.c:683:
+			driverfs_unlink(dentry->d_inode,d);
 			                               ^

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1510: FILE: fs/kfs/inode.c:701:
+EXPORT_SYMBOL(driverfs_create_file);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1511: FILE: fs/kfs/inode.c:702:
+EXPORT_SYMBOL(driverfs_create_symlink);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1512: FILE: fs/kfs/inode.c:703:
+EXPORT_SYMBOL(driverfs_create_dir);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1513: FILE: fs/kfs/inode.c:704:
+EXPORT_SYMBOL(driverfs_remove_file);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1514: FILE: fs/kfs/inode.c:705:
+EXPORT_SYMBOL(driverfs_remove_dir);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1606: FILE: include/linux/kfs.h:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1622: FILE: include/linux/kfs.h:17:
+ *  along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1623: FILE: include/linux/kfs.h:18:
+ *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct driver_dir_entry *' should also have an identifier name
#1638: FILE: include/linux/kfs.h:33:
+	int	(*open)(struct driver_dir_entry *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct driver_dir_entry *' should also have an identifier name
#1639: FILE: include/linux/kfs.h:34:
+	int	(*close)(struct driver_dir_entry *);

ERROR:SPACING: space required after that ',' (ctx:OxV)
#1640: FILE: include/linux/kfs.h:35:
+	ssize_t	(*show)(struct driver_dir_entry *, struct attribute *,char *, size_t, loff_t);
 	       	                                                     ^

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct driver_dir_entry *' should also have an identifier name
#1640: FILE: include/linux/kfs.h:35:
+	ssize_t	(*show)(struct driver_dir_entry *, struct attribute *,char *, size_t, loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct attribute *' should also have an identifier name
#1640: FILE: include/linux/kfs.h:35:
+	ssize_t	(*show)(struct driver_dir_entry *, struct attribute *,char *, size_t, loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#1640: FILE: include/linux/kfs.h:35:
+	ssize_t	(*show)(struct driver_dir_entry *, struct attribute *,char *, size_t, loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#1640: FILE: include/linux/kfs.h:35:
+	ssize_t	(*show)(struct driver_dir_entry *, struct attribute *,char *, size_t, loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t' should also have an identifier name
#1640: FILE: include/linux/kfs.h:35:
+	ssize_t	(*show)(struct driver_dir_entry *, struct attribute *,char *, size_t, loff_t);

ERROR:SPACING: space required after that ',' (ctx:OxV)
#1641: FILE: include/linux/kfs.h:36:
+	ssize_t	(*store)(struct driver_dir_entry *,struct attribute *,const char *, size_t, loff_t);
 	       	                                  ^

ERROR:SPACING: space required after that ',' (ctx:OxV)
#1641: FILE: include/linux/kfs.h:36:
+	ssize_t	(*store)(struct driver_dir_entry *,struct attribute *,const char *, size_t, loff_t);
 	       	                                                     ^

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct driver_dir_entry *' should also have an identifier name
#1641: FILE: include/linux/kfs.h:36:
+	ssize_t	(*store)(struct driver_dir_entry *,struct attribute *,const char *, size_t, loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct attribute *' should also have an identifier name
#1641: FILE: include/linux/kfs.h:36:
+	ssize_t	(*store)(struct driver_dir_entry *,struct attribute *,const char *, size_t, loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#1641: FILE: include/linux/kfs.h:36:
+	ssize_t	(*store)(struct driver_dir_entry *,struct attribute *,const char *, size_t, loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#1641: FILE: include/linux/kfs.h:36:
+	ssize_t	(*store)(struct driver_dir_entry *,struct attribute *,const char *, size_t, loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t' should also have an identifier name
#1641: FILE: include/linux/kfs.h:36:
+	ssize_t	(*store)(struct driver_dir_entry *,struct attribute *,const char *, size_t, loff_t);

ERROR:POINTER_LOCATION: "foo			* bar" should be "foo			*bar"
#1645: FILE: include/linux/kfs.h:40:
+	char			* name;

ERROR:POINTER_LOCATION: "foo		* bar" should be "foo		*bar"
#1646: FILE: include/linux/kfs.h:41:
+	struct dentry		* dentry;

ERROR:POINTER_LOCATION: "foo	* bar" should be "foo	*bar"
#1648: FILE: include/linux/kfs.h:43:
+	struct driverfs_ops	* ops;

ERROR:POINTER_LOCATION: "foo			* bar" should be "foo			*bar"
#1652: FILE: include/linux/kfs.h:47:
+	char			* name;

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct driver_dir_entry *' should also have an identifier name
#1656: FILE: include/linux/kfs.h:51:
+extern int

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct driver_dir_entry *' should also have an identifier name
#1656: FILE: include/linux/kfs.h:51:
+extern int

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1660: FILE: include/linux/kfs.h:55:
+driverfs_remove_dir(struct driver_dir_entry * entry);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1663: FILE: include/linux/kfs.h:58:
+driverfs_create_file(struct attribute * attr,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1664: FILE: include/linux/kfs.h:59:
+		     struct driver_dir_entry * parent);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1666: FILE: include/linux/kfs.h:61:
+extern int $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1667: FILE: include/linux/kfs.h:62:
+driverfs_create_symlink(struct driver_dir_entry * parent, $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1667: FILE: include/linux/kfs.h:62:
+driverfs_create_symlink(struct driver_dir_entry * parent, 

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1668: FILE: include/linux/kfs.h:63:
+			char * name, char * target);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1668: FILE: include/linux/kfs.h:63:
+			char * name, char * target);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct driver_dir_entry *' should also have an identifier name
#1670: FILE: include/linux/kfs.h:65:
+extern void

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1671: FILE: include/linux/kfs.h:66:
+driverfs_remove_file(struct driver_dir_entry *, const char * name);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1673: FILE: include/linux/kfs.h:68:
+extern int init_driverfs_fs(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000425668.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 110 errors, 62 warnings, 17 checks, 817 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000425668.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
