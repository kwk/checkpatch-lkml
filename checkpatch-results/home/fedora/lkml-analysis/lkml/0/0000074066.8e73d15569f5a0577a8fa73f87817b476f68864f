WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#24: 
Move the input.c to input-core.c and modify Makefile so that the input module

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1144: FILE: drivers/input/input-core.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1174: FILE: drivers/input/input-core.c:31:
+EXPORT_SYMBOL(input_allocate_device);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1175: FILE: drivers/input/input-core.c:32:
+EXPORT_SYMBOL(input_register_device);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1176: FILE: drivers/input/input-core.c:33:
+EXPORT_SYMBOL(input_unregister_device);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1177: FILE: drivers/input/input-core.c:34:
+EXPORT_SYMBOL(input_register_handler);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1178: FILE: drivers/input/input-core.c:35:
+EXPORT_SYMBOL(input_unregister_handler);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1179: FILE: drivers/input/input-core.c:36:
+EXPORT_SYMBOL(input_grab_device);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1180: FILE: drivers/input/input-core.c:37:
+EXPORT_SYMBOL(input_release_device);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1181: FILE: drivers/input/input-core.c:38:
+EXPORT_SYMBOL(input_open_device);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1182: FILE: drivers/input/input-core.c:39:
+EXPORT_SYMBOL(input_close_device);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1183: FILE: drivers/input/input-core.c:40:
+EXPORT_SYMBOL(input_accept_process);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1184: FILE: drivers/input/input-core.c:41:
+EXPORT_SYMBOL(input_flush_device);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1185: FILE: drivers/input/input-core.c:42:
+EXPORT_SYMBOL(input_event);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1186: FILE: drivers/input/input-core.c:43:
+EXPORT_SYMBOL_GPL(input_class);

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#1204: FILE: drivers/input/input-core.c:61:
+	switch (type) {
[...]
+		case EV_SYN:
[...]
+		case EV_KEY:
[...]
+		case EV_SW:
[...]
+		case EV_ABS:
[...]
+		case EV_REL:
[...]
+		case EV_MSC:
[...]
+		case EV_LED:
[...]
+		case EV_SND:
[...]
+		case EV_REP:
[...]
+		case EV_FF:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1205: FILE: drivers/input/input-core.c:62:
+	switch (type) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#1207: FILE: drivers/input/input-core.c:64:
+			switch (code) {
+				case SYN_CONFIG:
[...]
+				case SYN_REPORT:

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1209: FILE: drivers/input/input-core.c:66:
+					if (dev->event) dev->event(dev, type, code, value);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1213: FILE: drivers/input/input-core.c:70:
+					if (dev->sync) return;

WARNING:LONG_LINE: line length of 114 exceeds 100 columns
#1221: FILE: drivers/input/input-core.c:78:
+			if (code > KEY_MAX || !test_bit(code, dev->keybit) || !!test_bit(code, dev->key) == value)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE: line length of 134 exceeds 100 columns
#1229: FILE: drivers/input/input-core.c:86:
+			if (test_bit(EV_REP, dev->evbit) && dev->rep[REP_PERIOD] && dev->rep[REP_DELAY] && dev->timer.data && value) {

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#1231: FILE: drivers/input/input-core.c:88:
+				mod_timer(&dev->timer, jiffies + msecs_to_jiffies(dev->rep[REP_DELAY]));

WARNING:LONG_LINE: line length of 111 exceeds 100 columns
#1238: FILE: drivers/input/input-core.c:95:
+			if (code > SW_MAX || !test_bit(code, dev->swbit) || !!test_bit(code, dev->sw) == value)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'value == 0'
#1272: FILE: drivers/input/input-core.c:129:
+			if (code > REL_MAX || !test_bit(code, dev->relbit) || (value == 0))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1282: FILE: drivers/input/input-core.c:139:
+			if (dev->event) dev->event(dev, type, code, value);

WARNING:LONG_LINE: line length of 114 exceeds 100 columns
#1288: FILE: drivers/input/input-core.c:145:
+			if (code > LED_MAX || !test_bit(code, dev->ledbit) || !!test_bit(code, dev->led) == value)

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1292: FILE: drivers/input/input-core.c:149:
+			if (dev->event) dev->event(dev, type, code, value);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1304: FILE: drivers/input/input-core.c:161:
+			if (dev->event) dev->event(dev, type, code, value);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1310: FILE: drivers/input/input-core.c:167:
+			if (code > REP_MAX || value < 0 || dev->rep[code] == value) return;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1313: FILE: drivers/input/input-core.c:170:
+			if (dev->event) dev->event(dev, type, code, value);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1318: FILE: drivers/input/input-core.c:175:
+			if (dev->event) dev->event(dev, type, code, value);

CHECK:SPACING: No space is necessary after a cast
#1335: FILE: drivers/input/input-core.c:192:
+	struct input_dev *dev = (void *) data;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1392: FILE: drivers/input/input-core.c:249:
+int input_flush_device(struct input_handle* handle, struct file* file)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1392: FILE: drivers/input/input-core.c:249:
+int input_flush_device(struct input_handle* handle, struct file* file)

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#1421: FILE: drivers/input/input-core.c:278:
+#define MATCH_BIT(bit, max) \
+		for (i = 0; i < NBITS(max); i++) \
+			if ((id->bit[i] & dev->bit[i]) != id->bit[i]) \
+				break; \
+		if (i != NBITS(max)) \
+			continue;

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'bit' - possible side-effects?
#1421: FILE: drivers/input/input-core.c:278:
+#define MATCH_BIT(bit, max) \
+		for (i = 0; i < NBITS(max); i++) \
+			if ((id->bit[i] & dev->bit[i]) != id->bit[i]) \
+				break; \
+		if (i != NBITS(max)) \
+			continue;

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'bit' may be better as '(bit)' to avoid precedence issues
#1421: FILE: drivers/input/input-core.c:278:
+#define MATCH_BIT(bit, max) \
+		for (i = 0; i < NBITS(max); i++) \
+			if ((id->bit[i] & dev->bit[i]) != id->bit[i]) \
+				break; \
+		if (i != NBITS(max)) \
+			continue;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'max' - possible side-effects?
#1421: FILE: drivers/input/input-core.c:278:
+#define MATCH_BIT(bit, max) \
+		for (i = 0; i < NBITS(max); i++) \
+			if ((id->bit[i] & dev->bit[i]) != id->bit[i]) \
+				break; \
+		if (i != NBITS(max)) \
+			continue;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#1421: FILE: drivers/input/input-core.c:278:
+#define MATCH_BIT(bit, max) \
+		for (i = 0; i < NBITS(max); i++) \
+			if ((id->bit[i] & dev->bit[i]) != id->bit[i]) \
+				break; \
+		if (i != NBITS(max)) \
+			continue;

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1433: FILE: drivers/input/input-core.c:290:
+	for (; id->flags || id->driver_info; id++) {
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#1481: FILE: drivers/input/input-core.c:338:
+	int state = input_devices_state;
+	poll_wait(file, &input_devices_poll_wait, wait);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#1499: FILE: drivers/input/input-core.c:356:
+static struct list_head *list_get_next_element(struct list_head *list, struct list_head *element, loff_t *pos)

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#1552: FILE: drivers/input/input-core.c:409:
+	seq_printf(seq, "H: Handlers=");

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#1582: FILE: drivers/input/input-core.c:439:
+static struct seq_operations input_devices_seq_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1594: FILE: drivers/input/input-core.c:451:
+static struct file_operations input_devices_fileops = {

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1633: FILE: drivers/input/input-core.c:490:
+}
+static struct seq_operations input_handlers_seq_ops = {

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#1633: FILE: drivers/input/input-core.c:490:
+static struct seq_operations input_handlers_seq_ops = {

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1645: FILE: drivers/input/input-core.c:502:
+static struct file_operations input_handlers_fileops = {

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#1697: FILE: drivers/input/input-core.c:554:
+#define INPUT_DEV_STRING_ATTR_SHOW(name)					\
+static ssize_t input_dev_show_##name(struct class_device *dev, char *buf)	\
+{										\
+	struct input_dev *input_dev = to_input_dev(dev);			\
+	int retval;								\
+										\
+	retval = mutex_lock_interruptible(&input_dev->mutex);			\
+	if (retval)								\
+		return retval;							\
+										\
+	retval = scnprintf(buf, PAGE_SIZE,					\
+			   "%s\n", input_dev->name ? input_dev->name : "");	\
+										\
+	mutex_unlock(&input_dev->mutex);					\
+										\
+	return retval;								\
+}										\
+static CLASS_DEVICE_ATTR(name, S_IRUGO, input_dev_show_##name, NULL);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'name' may be better as '(name)' to avoid precedence issues
#1697: FILE: drivers/input/input-core.c:554:
+#define INPUT_DEV_STRING_ATTR_SHOW(name)					\
+static ssize_t input_dev_show_##name(struct class_device *dev, char *buf)	\
+{										\
+	struct input_dev *input_dev = to_input_dev(dev);			\
+	int retval;								\
+										\
+	retval = mutex_lock_interruptible(&input_dev->mutex);			\
+	if (retval)								\
+		return retval;							\
+										\
+	retval = scnprintf(buf, PAGE_SIZE,					\
+			   "%s\n", input_dev->name ? input_dev->name : "");	\
+										\
+	mutex_unlock(&input_dev->mutex);					\
+										\
+	return retval;								\
+}										\
+static CLASS_DEVICE_ATTR(name, S_IRUGO, input_dev_show_##name, NULL);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#1697: FILE: drivers/input/input-core.c:554:
+#define INPUT_DEV_STRING_ATTR_SHOW(name)					\
+static ssize_t input_dev_show_##name(struct class_device *dev, char *buf)	\
+{										\
+	struct input_dev *input_dev = to_input_dev(dev);			\
+	int retval;								\
+										\
+	retval = mutex_lock_interruptible(&input_dev->mutex);			\
+	if (retval)								\
+		return retval;							\
+										\
+	retval = scnprintf(buf, PAGE_SIZE,					\
+			   "%s\n", input_dev->name ? input_dev->name : "");	\
+										\
+	mutex_unlock(&input_dev->mutex);					\
+										\
+	return retval;								\
+}										\
+static CLASS_DEVICE_ATTR(name, S_IRUGO, input_dev_show_##name, NULL);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#1714: FILE: drivers/input/input-core.c:571:
+static CLASS_DEVICE_ATTR(name, S_IRUGO, input_dev_show_##name, NULL);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#1777: FILE: drivers/input/input-core.c:634:
+static CLASS_DEVICE_ATTR(modalias, S_IRUGO, input_dev_show_modalias, NULL);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#1791: FILE: drivers/input/input-core.c:648:
+#define INPUT_DEV_ID_ATTR(name)							\
+static ssize_t input_dev_show_id_##name(struct class_device *dev, char *buf)	\
+{										\
+	struct input_dev *input_dev = to_input_dev(dev);			\
+	return scnprintf(buf, PAGE_SIZE, "%04x\n", input_dev->id.name);		\
+}										\
+static CLASS_DEVICE_ATTR(name, S_IRUGO, input_dev_show_id_##name, NULL);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#1791: FILE: drivers/input/input-core.c:648:
+#define INPUT_DEV_ID_ATTR(name)							\
+static ssize_t input_dev_show_id_##name(struct class_device *dev, char *buf)	\
+{										\
+	struct input_dev *input_dev = to_input_dev(dev);			\
+	return scnprintf(buf, PAGE_SIZE, "%04x\n", input_dev->id.name);		\
+}										\
+static CLASS_DEVICE_ATTR(name, S_IRUGO, input_dev_show_id_##name, NULL);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#1797: FILE: drivers/input/input-core.c:654:
+static CLASS_DEVICE_ATTR(name, S_IRUGO, input_dev_show_id_##name, NULL);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#1837: FILE: drivers/input/input-core.c:694:
+#define INPUT_DEV_CAP_ATTR(ev, bm)						\
+static ssize_t input_dev_show_cap_##bm(struct class_device *dev, char *buf)	\
+{										\
+	struct input_dev *input_dev = to_input_dev(dev);			\
+	int len = input_print_bitmap(buf, PAGE_SIZE,				\
+				     input_dev->bm##bit, ev##_MAX, 1);		\
+	return min_t(int, len, PAGE_SIZE);					\
+}										\
+static CLASS_DEVICE_ATTR(bm, S_IRUGO, input_dev_show_cap_##bm, NULL);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#1845: FILE: drivers/input/input-core.c:702:
+static CLASS_DEVICE_ATTR(bm, S_IRUGO, input_dev_show_cap_##bm, NULL);

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#1934: FILE: drivers/input/input-core.c:791:
+#define INPUT_ADD_HOTPLUG_VAR(fmt, val...)				\
+	do {								\
+		int err = add_uevent_var(envp, num_envp, &i,		\
+					buffer, buffer_size, &len,	\
+					fmt, val);			\
+		if (err)						\
+			return err;					\
+	} while (0)

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#1943: FILE: drivers/input/input-core.c:800:
+#define INPUT_ADD_HOTPLUG_BM_VAR(name, bm, max)				\
+	do {								\
+		int err = input_add_uevent_bm_var(envp, num_envp, &i,	\
+					buffer, buffer_size, &len,	\
+					name, bm, max);			\
+		if (err)						\
+			return err;					\
+	} while (0)

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#1952: FILE: drivers/input/input-core.c:809:
+#define INPUT_ADD_HOTPLUG_MODALIAS_VAR(dev)				\
+	do {								\
+		int err = input_add_uevent_modalias_var(envp,		\
+					num_envp, &i,			\
+					buffer, buffer_size, &len,	\
+					dev);				\
+		if (err)						\
+			return err;					\
+	} while (0)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1970: FILE: drivers/input/input-core.c:827:
+	INPUT_ADD_HOTPLUG_VAR("PRODUCT=%x/%x/%x/%x",
+				dev->id.bustype, dev->id.vendor,

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*dev)...) over kzalloc(sizeof(struct input_dev)...)
#2013: FILE: drivers/input/input-core.c:870:
+	dev = kzalloc(sizeof(struct input_dev), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#2035: FILE: drivers/input/input-core.c:892:
+		printk(KERN_WARNING "input: device %s is statically allocated, will not register\n"

CHECK:SPACING: No space is necessary after a cast
#2051: FILE: drivers/input/input-core.c:908:
+		dev->timer.data = (long) dev;

CHECK:SPACING: No space is necessary after a cast
#2062: FILE: drivers/input/input-core.c:919:
+		 "input%ld", (unsigned long) atomic_inc_return(&input_no) - 1);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2083: FILE: drivers/input/input-core.c:940:
+	printk(KERN_INFO "input: %s as %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2084: FILE: drivers/input/input-core.c:941:
+	printk(KERN_INFO "input: %s as %s\n",
+		dev->name ? dev->name : "Unspecified device", path ? path : "N/A");

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2089: FILE: drivers/input/input-core.c:946:
+			if ((id = input_match_device(handler->id_table, dev)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2090: FILE: drivers/input/input-core.c:947:
+				if ((handle = handler->connect(handler, dev, id)))

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2105: FILE: drivers/input/input-core.c:962:
+	struct list_head * node, * next;

ERROR:SPACING: space prohibited after that '*' (ctx:WxW)
#2105: FILE: drivers/input/input-core.c:962:
+	struct list_head * node, * next;
 	                         ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#2107: FILE: drivers/input/input-core.c:964:
+	if (!dev) return;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2112: FILE: drivers/input/input-core.c:969:
+		struct input_handle * handle = to_handle(node);

WARNING:LINE_SPACING: Missing a blank line after declarations
#2113: FILE: drivers/input/input-core.c:970:
+		struct input_handle * handle = to_handle(node);
+		list_del_init(&handle->d_node);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#2134: FILE: drivers/input/input-core.c:991:
+	if (!handler) return;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "handler->fops"
#2138: FILE: drivers/input/input-core.c:995:
+	if (handler->fops != NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2145: FILE: drivers/input/input-core.c:1002:
+			if ((id = input_match_device(handler->id_table, dev)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2146: FILE: drivers/input/input-core.c:1003:
+				if ((handle = handler->connect(handler, dev, id)))

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2154: FILE: drivers/input/input-core.c:1011:
+	struct list_head * node, * next;

ERROR:SPACING: space prohibited after that '*' (ctx:WxW)
#2154: FILE: drivers/input/input-core.c:1011:
+	struct list_head * node, * next;
 	                         ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2157: FILE: drivers/input/input-core.c:1014:
+		struct input_handle * handle = to_handle_h(node);

WARNING:LINE_SPACING: Missing a blank line after declarations
#2158: FILE: drivers/input/input-core.c:1015:
+		struct input_handle * handle = to_handle_h(node);
+		list_del_init(&handle->h_node);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "handler->fops"
#2165: FILE: drivers/input/input-core.c:1022:
+	if (handler->fops != NULL)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2178: FILE: drivers/input/input-core.c:1035:
+	if (!handler || !(new_fops = fops_get(handler->fops)))

WARNING:CONST_STRUCT: struct file_operations should normally be const
#2202: FILE: drivers/input/input-core.c:1059:
+static struct file_operations input_fops = {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2213: FILE: drivers/input/input-core.c:1070:
+		printk(KERN_ERR "input: unable to register input_dev class\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2223: FILE: drivers/input/input-core.c:1080:
+		printk(KERN_ERR "input: unable to register char major %d", INPUT_MAJOR);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000074066.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 26 errors, 45 warnings, 18 checks, 1107 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000074066.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
