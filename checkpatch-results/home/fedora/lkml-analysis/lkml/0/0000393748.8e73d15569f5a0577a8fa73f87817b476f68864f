WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#171: FILE: fs/sigfd.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#172: FILE: fs/sigfd.c:2:
+ *  linux/fs/sigfd.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#187: FILE: fs/sigfd.c:17:
+#include <asm/uaccess.h>

CHECK:LINE_SPACING: Please don't use multiple blank lines
#203: FILE: fs/sigfd.c:33:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#204: FILE: fs/sigfd.c:34:
+static kmem_cache_t * sigfd_inode_cachep;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#209: FILE: fs/sigfd.c:39:
+	struct sigfd_inode *ei;
+	ei = (struct sigfd_inode *)kmem_cache_alloc(sigfd_inode_cachep, SLAB_KERNEL);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#220: FILE: fs/sigfd.c:50:
+static void init_once(void * foo, kmem_cache_t * cachep, unsigned long flags)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#220: FILE: fs/sigfd.c:50:
+static void init_once(void * foo, kmem_cache_t * cachep, unsigned long flags)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#222: FILE: fs/sigfd.c:52:
+^Istruct sigfd_inode *ei = (struct sigfd_inode *) foo; $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#222: FILE: fs/sigfd.c:52:
+	struct sigfd_inode *ei = (struct sigfd_inode *) foo; 

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#224: FILE: fs/sigfd.c:54:
+	if ((flags & (SLAB_CTOR_VERIFY|SLAB_CTOR_CONSTRUCTOR)) == SLAB_CTOR_CONSTRUCTOR)
 	                              ^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#231: FILE: fs/sigfd.c:61:
+static ssize_t sigfd_read(struct file *filp, char *buf, size_t count, loff_t *ppos)
                                        ^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#250: FILE: fs/sigfd.c:80:
+^I^Iset_task_state(tsk, TASK_INTERRUPTIBLE);  $

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#266: FILE: fs/sigfd.c:96:
+static unsigned int sigfd_poll(struct file *filp, poll_table *wait)
                                             ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#274: FILE: fs/sigfd.c:104:
+	poll_wait(filp, &sighand->waiting, wait);
 	          ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#290: FILE: fs/sigfd.c:120:
+static int sigfd_release(struct inode *inode, struct file *filp)
                                                            ^^^^

WARNING:CONST_STRUCT: struct file_operations should normally be const
#301: FILE: fs/sigfd.c:131:
+static struct file_operations sigfd_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct dentry_operations should normally be const
#312: FILE: fs/sigfd.c:142:
+static struct dentry_operations sigfd_dentry_operations = {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#318: FILE: fs/sigfd.c:148:
+static struct inode * get_sigfd_inode(void)

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IWUSR' are not preferred. Consider using octal permissions '0600'.
#333: FILE: fs/sigfd.c:163:
+		inode->i_mode = S_IFIFO | S_IRUSR | S_IWUSR;

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#336: FILE: fs/sigfd.c:166:
+		inode->i_atime = inode->i_mtime = inode->i_ctime = CURRENT_TIME;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#382: FILE: fs/sigfd.c:212:
+^I$

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#430: FILE: fs/sigfd.c:260:
+	iput(inode);
 	^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#435: FILE: fs/sigfd.c:265:
+^Ireturn error;^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#445: FILE: fs/sigfd.c:275:
+static struct super_block *sigfd_get_sb(struct file_system_type *fs_type,
+	int flags, char *dev_name, void *data)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#461: FILE: fs/sigfd.c:291:
+	sigfd_inode_cachep = kmem_cache_create("sigfd_inode_cache",
+		sizeof(struct sigfd_inode),

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000393748.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 8 errors, 12 warnings, 6 checks, 392 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000393748.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
