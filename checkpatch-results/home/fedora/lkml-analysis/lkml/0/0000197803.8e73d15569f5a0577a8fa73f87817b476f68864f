ERROR:CODE_INDENT: code indent should use tabs where possible
#67: FILE: fs/proc/base.c:1424:
+                                                 struct qstr *name)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#67: FILE: fs/proc/base.c:1424:
+                                                 struct qstr *name)$

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#88: FILE: fs/proc/base.c:1445:
+	{PROC_TGID_CMDLINE,	S_IRUGO},

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#89: FILE: fs/proc/base.c:1446:
+	{PROC_TGID_MAPS,	S_IRUGO},

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#90: FILE: fs/proc/base.c:1447:
+	{PROC_TGID_STAT,	S_IRUGO},

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#91: FILE: fs/proc/base.c:1448:
+	{PROC_TGID_STATM,	S_IRUGO},

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#92: FILE: fs/proc/base.c:1449:
+	{PROC_TGID_STATUS,	S_IRUGO},

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#121: FILE: fs/proc/base.c:1478:
+                                struct nameidata *nd)
                                                   ^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:CODE_INDENT: code indent should use tabs where possible
#121: FILE: fs/proc/base.c:1478:
+                                struct nameidata *nd)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#121: FILE: fs/proc/base.c:1478:
+                                struct nameidata *nd)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#133: FILE: fs/proc/base.c:1490:
+                             struct kstat *stat)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#133: FILE: fs/proc/base.c:1490:
+                             struct kstat *stat)$

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#146: FILE: fs/proc/base.c:1503:
+static struct inode_operations proc_base_inode_operations = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!p"
#168: FILE: fs/proc/base.c:1528:
+	if (p == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:CODE_INDENT: code indent should use tabs where possible
#209: FILE: kernel/sysctl.c:173:
+        int type;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#209: FILE: kernel/sysctl.c:173:
+        int type;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#210: FILE: kernel/sysctl.c:174:
+        mode_t mode;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#210: FILE: kernel/sysctl.c:174:
+        mode_t mode;$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#212: FILE: kernel/sysctl.c:176:
+};
+extern struct proc_sysctl_info proc_base_permissions[];

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#212: FILE: kernel/sysctl.c:176:
+extern struct proc_sysctl_info proc_base_permissions[];

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#214: FILE: kernel/sysctl.c:178:
+int proc_domode(ctl_table *, int, struct file *, void __user *, size_t *, loff_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ctl_table *' should also have an identifier name
#214: FILE: kernel/sysctl.c:178:
+int proc_domode(ctl_table *, int, struct file *, void __user *, size_t *, loff_t *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#214: FILE: kernel/sysctl.c:178:
+int proc_domode(ctl_table *, int, struct file *, void __user *, size_t *, loff_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#214: FILE: kernel/sysctl.c:178:
+int proc_domode(ctl_table *, int, struct file *, void __user *, size_t *, loff_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void __user *' should also have an identifier name
#214: FILE: kernel/sysctl.c:178:
+int proc_domode(ctl_table *, int, struct file *, void __user *, size_t *, loff_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t *' should also have an identifier name
#214: FILE: kernel/sysctl.c:178:
+int proc_domode(ctl_table *, int, struct file *, void __user *, size_t *, loff_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t *' should also have an identifier name
#214: FILE: kernel/sysctl.c:178:
+int proc_domode(ctl_table *, int, struct file *, void __user *, size_t *, loff_t *);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#224: FILE: kernel/sysctl.c:852:
+static int mode_r_ugo = S_IRUGO;

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#232: FILE: kernel/sysctl.c:860:
+		.data		= &proc_base_permissions[PROC_CMDLINE-1].mode,
 		     		                                     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#240: FILE: kernel/sysctl.c:868:
+		.data		= &proc_base_permissions[PROC_MAPS-1].mode,
 		     		                                  ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#248: FILE: kernel/sysctl.c:876:
+		.data		= &proc_base_permissions[PROC_STAT-1].mode,
 		     		                                  ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#256: FILE: kernel/sysctl.c:884:
+		.data		= &proc_base_permissions[PROC_STATM-1].mode,
 		     		                                   ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#264: FILE: kernel/sysctl.c:892:
+		.data		= &proc_base_permissions[PROC_STATUS-1].mode,
 		     		                                    ^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#281: FILE: kernel/sysctl.c:1521:
+ * @filp: the file structure
     ^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#286: FILE: kernel/sysctl.c:1526:
+ * Reads/writes one file mode value (data type mode_t) $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#287: FILE: kernel/sysctl.c:1527:
+ * from/to the user buffer, treated as an ASCII string. $

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#293: FILE: kernel/sysctl.c:1533:
+int proc_domode(ctl_table *table, int write, struct file *filp,
                                                           ^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#303: FILE: kernel/sysctl.c:1543:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#308: FILE: kernel/sysctl.c:1548:
+^I$

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#326: FILE: kernel/sysctl.c:1566:
+		mode = simple_strtoul(buf, &endp, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000197803.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 9 errors, 24 warnings, 7 checks, 285 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000197803.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
