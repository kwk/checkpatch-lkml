WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#42: FILE: arch/ppc64/Kconfig.debug:22:
+config LOCKMETER
+ bool "Kernel lock metering"
+ depends on SMP && !PREEMPT
+ help
+   Say Y to enable kernel lock metering, which adds overhead to SMP locks,
+   but allows you to see various statistics using the lockstat command.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#90: FILE: include/asm-ppc64/lockmeter.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:LINE_SPACING: Please don't use multiple blank lines
#111: FILE: include/asm-ppc64/lockmeter.h:22:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:INCLUDE_LINUX: Use #include <linux/processor.h> instead of <asm/processor.h>
#116: FILE: include/asm-ppc64/lockmeter.h:27:
+#include <asm/processor.h>   /* definitions for SPRN_TBRL

ERROR:CODE_INDENT: code indent should use tabs where possible
#117: FILE: include/asm-ppc64/lockmeter.h:28:
+                                SPRN_TBRU, mftb()  */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#117: FILE: include/asm-ppc64/lockmeter.h:28:
+#include <asm/processor.h>   /* definitions for SPRN_TBRL
+                                SPRN_TBRU, mftb()  */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#117: FILE: include/asm-ppc64/lockmeter.h:28:
+                                SPRN_TBRU, mftb()  */

WARNING:NEW_TYPEDEFS: do not add new typedefs
#134: FILE: include/asm-ppc64/lockmeter.h:45:
+typedef struct inst_spinlock_s {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#135: FILE: include/asm-ppc64/lockmeter.h:46:
+        volatile unsigned int lock; $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#135: FILE: include/asm-ppc64/lockmeter.h:46:
+        volatile unsigned int lock; $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#135: FILE: include/asm-ppc64/lockmeter.h:46:
+        volatile unsigned int lock; $

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#135: FILE: include/asm-ppc64/lockmeter.h:46:
+        volatile unsigned int lock; 

ERROR:CODE_INDENT: code indent should use tabs where possible
#136: FILE: include/asm-ppc64/lockmeter.h:47:
+        unsigned int index;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#136: FILE: include/asm-ppc64/lockmeter.h:47:
+        unsigned int index;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#139: FILE: include/asm-ppc64/lockmeter.h:50:
+#define PUT_INDEX(lock_ptr,indexv) ((inst_spinlock_t $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#139: FILE: include/asm-ppc64/lockmeter.h:50:
+#define PUT_INDEX(lock_ptr,indexv) ((inst_spinlock_t 
                           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#140: FILE: include/asm-ppc64/lockmeter.h:50:
*)(lock_ptr))->index = indexv

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#141: FILE: include/asm-ppc64/lockmeter.h:51:
+#define GET_INDEX(lock_ptr)        ((inst_spinlock_t *)(lock_ptr))->index

WARNING:NEW_TYPEDEFS: do not add new typedefs
#153: FILE: include/asm-ppc64/lockmeter.h:63:
+typedef struct inst_rwlock_s {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#154: FILE: include/asm-ppc64/lockmeter.h:64:
+        volatile signed int lock;  $

ERROR:CODE_INDENT: code indent should use tabs where possible
#154: FILE: include/asm-ppc64/lockmeter.h:64:
+        volatile signed int lock;  $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#154: FILE: include/asm-ppc64/lockmeter.h:64:
+        volatile signed int lock;  $

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#154: FILE: include/asm-ppc64/lockmeter.h:64:
+        volatile signed int lock;  

ERROR:CODE_INDENT: code indent should use tabs where possible
#155: FILE: include/asm-ppc64/lockmeter.h:65:
+        unsigned int index;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#155: FILE: include/asm-ppc64/lockmeter.h:65:
+        unsigned int index;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#156: FILE: include/asm-ppc64/lockmeter.h:66:
+        unsigned int cpu;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#156: FILE: include/asm-ppc64/lockmeter.h:66:
+        unsigned int cpu;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#159: FILE: include/asm-ppc64/lockmeter.h:69:
+#define PUT_RWINDEX(rwlock_ptr,indexv) ((inst_rwlock_t $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#159: FILE: include/asm-ppc64/lockmeter.h:69:
+#define PUT_RWINDEX(rwlock_ptr,indexv) ((inst_rwlock_t 
                               ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#161: FILE: include/asm-ppc64/lockmeter.h:70:
+#define GET_RWINDEX(rwlock_ptr)        ((inst_rwlock_t $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#163: FILE: include/asm-ppc64/lockmeter.h:71:
+#define PUT_RW_CPU(rwlock_ptr,cpuv)    ((inst_rwlock_t $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#163: FILE: include/asm-ppc64/lockmeter.h:71:
+#define PUT_RW_CPU(rwlock_ptr,cpuv)    ((inst_rwlock_t 
                              ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#165: FILE: include/asm-ppc64/lockmeter.h:72:
+#define GET_RW_CPU(rwlock_ptr)         ((inst_rwlock_t *)(rwlock_ptr))->cpu

ERROR:CODE_INDENT: code indent should use tabs where possible
#175: FILE: include/asm-ppc64/lockmeter.h:82:
+        signed int tmp = rwlock_ptr->lock;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#175: FILE: include/asm-ppc64/lockmeter.h:82:
+        signed int tmp = rwlock_ptr->lock;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#177: FILE: include/asm-ppc64/lockmeter.h:84:
+        if ( tmp > 0 )$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#177: FILE: include/asm-ppc64/lockmeter.h:84:
+        if ( tmp > 0 )$

ERROR:SPACING: space prohibited after that open parenthesis '('
#177: FILE: include/asm-ppc64/lockmeter.h:84:
+        if ( tmp > 0 )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#177: FILE: include/asm-ppc64/lockmeter.h:84:
+        if ( tmp > 0 )

ERROR:CODE_INDENT: code indent should use tabs where possible
#178: FILE: include/asm-ppc64/lockmeter.h:85:
+                return tmp;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#178: FILE: include/asm-ppc64/lockmeter.h:85:
+                return tmp;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#179: FILE: include/asm-ppc64/lockmeter.h:86:
+        else$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#179: FILE: include/asm-ppc64/lockmeter.h:86:
+        else$

ERROR:CODE_INDENT: code indent should use tabs where possible
#180: FILE: include/asm-ppc64/lockmeter.h:87:
+                return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#180: FILE: include/asm-ppc64/lockmeter.h:87:
+                return 0;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#187: FILE: include/asm-ppc64/lockmeter.h:94:
+#define RWLOCK_IS_WRITE_LOCKED(rwlock_ptr) ((signed $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#189: FILE: include/asm-ppc64/lockmeter.h:95:
+#define RWLOCK_IS_READ_LOCKED(rwlock_ptr)  ((signed $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#193: FILE: include/asm-ppc64/lockmeter.h:98:
+/*Written by Carl L. to get the time base counters on ppc,
+  rplaces the Intel only call rtds*/

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#193: FILE: include/asm-ppc64/lockmeter.h:98:
+  rplaces the Intel only call rtds*/

ERROR:CODE_INDENT: code indent should use tabs where possible
#196: FILE: include/asm-ppc64/lockmeter.h:101:
+        unsigned long tb;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#196: FILE: include/asm-ppc64/lockmeter.h:101:
+        unsigned long tb;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#198: FILE: include/asm-ppc64/lockmeter.h:103:
+        /* read the upper and lower 32 bit Time base counter */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#199: FILE: include/asm-ppc64/lockmeter.h:104:
+        tb = mfspr(SPRN_TBRU);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#199: FILE: include/asm-ppc64/lockmeter.h:104:
+        tb = mfspr(SPRN_TBRU);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#200: FILE: include/asm-ppc64/lockmeter.h:105:
+        tb = (tb << 32)  | mfspr(SPRN_TBRL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#200: FILE: include/asm-ppc64/lockmeter.h:105:
+        tb = (tb << 32)  | mfspr(SPRN_TBRL);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#202: FILE: include/asm-ppc64/lockmeter.h:107:
+        return(tb);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#202: FILE: include/asm-ppc64/lockmeter.h:107:
+        return(tb);$

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#202: FILE: include/asm-ppc64/lockmeter.h:107:
+        return(tb);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#217: FILE: include/asm-ppc64/spinlock.h:27:
+  unsigned int lockmeter_magic;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#227: FILE: include/asm-ppc64/spinlock.h:37:
+ unsigned int index;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#228: FILE: include/asm-ppc64/spinlock.h:38:
+ unsigned int cpu;$

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#238: FILE: include/asm-ppc64/spinlock.h:46:
+  #define SPIN_LOCK_UNLOCKED (spinlock_t) { 0 }

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#240: FILE: include/asm-ppc64/spinlock.h:48:
+  #define SPIN_LOCK_UNLOCKED (spinlock_t) { 0 , 0}
                                               ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#240: FILE: include/asm-ppc64/spinlock.h:48:
+  #define SPIN_LOCK_UNLOCKED (spinlock_t) { 0 , 0}

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#250: FILE: include/asm-ppc64/spinlock.h:157:
+#define RW_LOCK_UNLOCKED (rwlock_t) { 0 , 0 , 0 }
                                         ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#250: FILE: include/asm-ppc64/spinlock.h:157:
+#define RW_LOCK_UNLOCKED (rwlock_t) { 0 , 0 , 0 }
                                             ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#250: FILE: include/asm-ppc64/spinlock.h:157:
+#define RW_LOCK_UNLOCKED (rwlock_t) { 0 , 0 , 0 }

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#259: FILE: include/asm-ppc64/spinlock.h:171:
+extern void _metered_spin_lock  (spinlock_t *lock, void *caller_pc);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#259: FILE: include/asm-ppc64/spinlock.h:171:
+extern void _metered_spin_lock  (spinlock_t *lock, void *caller_pc);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#260: FILE: include/asm-ppc64/spinlock.h:172:
+extern void _metered_spin_unlock(spinlock_t *lock);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#264: FILE: include/asm-ppc64/spinlock.h:176:
+ *  "static inline" so that the spin_lock(), if actually invoked, is $

ERROR:CODE_INDENT: code indent should use tabs where possible
#270: FILE: include/asm-ppc64/spinlock.h:181:
+        int counter;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#270: FILE: include/asm-ppc64/spinlock.h:181:
+        int counter;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#271: FILE: include/asm-ppc64/spinlock.h:182:
+        int newcount;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#271: FILE: include/asm-ppc64/spinlock.h:182:
+        int newcount;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#273: FILE: include/asm-ppc64/spinlock.h:184:
+        for (;;) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#273: FILE: include/asm-ppc64/spinlock.h:184:
+        for (;;) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#274: FILE: include/asm-ppc64/spinlock.h:185:
+                counter = atomic_read(atomic);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#274: FILE: include/asm-ppc64/spinlock.h:185:
+                counter = atomic_read(atomic);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#275: FILE: include/asm-ppc64/spinlock.h:186:
+                newcount = counter - 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#275: FILE: include/asm-ppc64/spinlock.h:186:
+                newcount = counter - 1;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#276: FILE: include/asm-ppc64/spinlock.h:187:
+                if (!newcount)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#276: FILE: include/asm-ppc64/spinlock.h:187:
+                if (!newcount)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#277: FILE: include/asm-ppc64/spinlock.h:188:
+                        break;    /* do it the slow way */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#277: FILE: include/asm-ppc64/spinlock.h:188:
+                        break;    /* do it the slow way */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#279: FILE: include/asm-ppc64/spinlock.h:190:
+                newcount = cmpxchg(&atomic->counter, counter, newcount);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#279: FILE: include/asm-ppc64/spinlock.h:190:
+                newcount = cmpxchg(&atomic->counter, counter, newcount);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#280: FILE: include/asm-ppc64/spinlock.h:191:
+                if (newcount == counter)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#280: FILE: include/asm-ppc64/spinlock.h:191:
+                if (newcount == counter)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#281: FILE: include/asm-ppc64/spinlock.h:192:
+                        return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#281: FILE: include/asm-ppc64/spinlock.h:192:
+                        return 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#282: FILE: include/asm-ppc64/spinlock.h:193:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#282: FILE: include/asm-ppc64/spinlock.h:193:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#284: FILE: include/asm-ppc64/spinlock.h:195:
+        preempt_disable();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#284: FILE: include/asm-ppc64/spinlock.h:195:
+        preempt_disable();$

ERROR:CODE_INDENT: code indent should use tabs where possible
#285: FILE: include/asm-ppc64/spinlock.h:196:
+        _metered_spin_lock(lock, __builtin_return_address(0));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#285: FILE: include/asm-ppc64/spinlock.h:196:
+        _metered_spin_lock(lock, __builtin_return_address(0));$

ERROR:CODE_INDENT: code indent should use tabs where possible
#286: FILE: include/asm-ppc64/spinlock.h:197:
+        if (atomic_dec_and_test(atomic))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#286: FILE: include/asm-ppc64/spinlock.h:197:
+        if (atomic_dec_and_test(atomic))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#287: FILE: include/asm-ppc64/spinlock.h:198:
+                return 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#287: FILE: include/asm-ppc64/spinlock.h:198:
+                return 1;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#288: FILE: include/asm-ppc64/spinlock.h:199:
+        _metered_spin_unlock(lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#288: FILE: include/asm-ppc64/spinlock.h:199:
+        _metered_spin_unlock(lock);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#289: FILE: include/asm-ppc64/spinlock.h:200:
+        preempt_enable();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#289: FILE: include/asm-ppc64/spinlock.h:200:
+        preempt_enable();$

ERROR:CODE_INDENT: code indent should use tabs where possible
#291: FILE: include/asm-ppc64/spinlock.h:202:
+        return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#291: FILE: include/asm-ppc64/spinlock.h:202:
+        return 0;$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000139206.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 58 errors, 47 warnings, 3 checks, 241 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000139206.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
