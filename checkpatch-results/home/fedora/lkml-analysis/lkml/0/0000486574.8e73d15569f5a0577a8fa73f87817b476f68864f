WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#39: 
struct filp, partially struct buffer_head).
       ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'EXTRAVERSION' may be misspelled - perhaps 'EXTROVERSION'?
#59: 
//  EXTRAVERSION = pre2
    ^^^^^^^^^^^^

CHECK:SPACING: spaces preferred around that '-' (ctx:ExV)
#67: FILE: drivers/block/ll_rw_blk.c:352:
+				-offsetof(struct request,elevator_sequence));
 				^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#67: FILE: drivers/block/ll_rw_blk.c:352:
+				-offsetof(struct request,elevator_sequence));
 				                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#77: FILE: drivers/block/ll_rw_blk.c:435:
+				- offsetof(struct request,elevator_sequence));
 				                         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:ExV)
#89: FILE: drivers/block/ll_rw_blk.c:570:
+				-offsetof(struct request,elevator_sequence));
 				^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#89: FILE: drivers/block/ll_rw_blk.c:570:
+				-offsetof(struct request,elevator_sequence));
 				                        ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#99: FILE: fs/file_table.c:42:
+		check_poison (&f->f_dentry, sizeof(struct file) -

CHECK:LINE_SPACING: Please don't use multiple blank lines
#128: FILE: include/linux/slab.h:81:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#130: FILE: include/linux/slab.h:83:
+extern void __check_poison(void *obj, int size, char *file, int line);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'obj' - possible side-effects?
#132: FILE: include/linux/slab.h:85:
+#define check_and_clear_poison(obj, size) \
+		do { \
+			__check_poison(obj, size, __FILE__, __LINE__); \
+			memset(obj, 0, size); \
+		} while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'size' - possible side-effects?
#132: FILE: include/linux/slab.h:85:
+#define check_and_clear_poison(obj, size) \
+		do { \
+			__check_poison(obj, size, __FILE__, __LINE__); \
+			memset(obj, 0, size); \
+		} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#136: FILE: include/linux/slab.h:89:
+		} while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'obj' - possible side-effects?
#138: FILE: include/linux/slab.h:91:
+#define check_poison(obj, size) \
+		do { \
+			__check_poison(obj, size, __FILE__, __LINE__); \
+			memset(obj, 0x2C, size); \
+		} while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'size' - possible side-effects?
#138: FILE: include/linux/slab.h:91:
+#define check_poison(obj, size) \
+		do { \
+			__check_poison(obj, size, __FILE__, __LINE__); \
+			memset(obj, 0x2C, size); \
+		} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#142: FILE: include/linux/slab.h:95:
+		} while(0)

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#144: FILE: include/linux/slab.h:97:
+#define poison_obj(obj, size) \
+			memset(obj, 0xe3, size); \
+

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#152: FILE: include/linux/slab.h:105:
+}
+static inline void check_poison(void *obj, int size)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#156: FILE: include/linux/slab.h:109:
+}
+static inline void poison_obj(void *obj, int size)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#160: FILE: include/linux/slab.h:113:
+#define $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#160: FILE: include/linux/slab.h:113:
+}
+#define 

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#172: FILE: mm/slab.c:1199:
+	if (objp != slabp->s_mem + objnr*cachep->objsize) {
 	                                ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#173: FILE: mm/slab.c:1200:
+		printk("cache %s: got objp %p, objnr %d, s_mem %ph.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#174: FILE: mm/slab.c:1201:
+		printk("cache %s: got objp %p, objnr %d, s_mem %ph.\n",
+				cachep->name, objp, objnr, slabp->s_mem);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#186: FILE: mm/slab.c:1218:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#205: FILE: mm/slab.c:1360:
+		kmem_extra_free_checks(cachep, GET_PAGE_SLAB(virt_to_page(objp)),
+				objp-BYTES_PER_WORD);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#205: FILE: mm/slab.c:1360:
+				objp-BYTES_PER_WORD);
 				    ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#208: FILE: mm/slab.c:1363:
+		kmem_extra_free_checks(cachep, GET_PAGE_SLAB(virt_to_page(objp)),
+				objp);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#221: FILE: mm/slab.c:1497:
+		kmem_extra_free_checks(cachep, GET_PAGE_SLAB(virt_to_page(objp)),
+				objp-BYTES_PER_WORD);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#221: FILE: mm/slab.c:1497:
+				objp-BYTES_PER_WORD);
 				    ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#224: FILE: mm/slab.c:1500:
+		kmem_extra_free_checks(cachep, GET_PAGE_SLAB(virt_to_page(objp)),
+				objp);

WARNING:LINE_SPACING: Missing a blank line after declarations
#239: FILE: mm/slab.c:2072:
+	int i;
+	for (i=0;i<size;i++) {

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#239: FILE: mm/slab.c:2072:
+	for (i=0;i<size;i++) {
 	      ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#239: FILE: mm/slab.c:2072:
+	for (i=0;i<size;i++) {
 	        ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#239: FILE: mm/slab.c:2072:
+	for (i=0;i<size;i++) {
 	          ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#239: FILE: mm/slab.c:2072:
+	for (i=0;i<size;i++) {
 	               ^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#240: FILE: mm/slab.c:2073:
+		if (((unsigned char*)obj)[i] != 0xe3) {

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#241: FILE: mm/slab.c:2074:
+			printk(KERN_INFO "poison error in obj %p, len %d, file %s, line %d, offset %d is: 0x%x\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#242: FILE: mm/slab.c:2075:
+			printk(KERN_INFO "poison error in obj %p, len %d, file %s, line %d, offset %d is: 0x%x\n",
+					obj, size, file, line, i, ((unsigned char*)obj)[i]);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#242: FILE: mm/slab.c:2075:
+					obj, size, file, line, i, ((unsigned char*)obj)[i]);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#256: FILE: mm/page_alloc.c:93:
+	page->mapping = (void*)0xdeadbeef;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#258: FILE: mm/page_alloc.c:95:
+	page->next_hash = (void*)0xbeefdead;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#259: FILE: mm/page_alloc.c:96:
+	atomic_set(&page->count,1);
 	                       ^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#260: FILE: mm/page_alloc.c:97:
+	page->lru.next = (void*)0xbaadf00d;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#261: FILE: mm/page_alloc.c:98:
+	page->lru.prev = (void*)0xf00dbaad;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#262: FILE: mm/page_alloc.c:99:
+	page->pprev_hash = (void*)0xdeadbeef;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#263: FILE: mm/page_alloc.c:100:
+	page->buffers = (void*)0xdeadbeef;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#273: FILE: mm/page_alloc.c:213:
+			if (page->mapping != (void*)0xdeadbeef)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#274: FILE: mm/page_alloc.c:214:
+				printk(KERN_ERR"got mapping %p.\n", page->mapping);

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#274: FILE: mm/page_alloc.c:214:
+				printk(KERN_ERR"got mapping %p.\n", page->mapping);

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#276: FILE: mm/page_alloc.c:216:
+				printk(KERN_ERR "got index %lxh.\n", page->index);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#277: FILE: mm/page_alloc.c:217:
+			if (page->next_hash != (void*)0xbeefdead)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#278: FILE: mm/page_alloc.c:218:
+				printk(KERN_ERR "got next_hash %p.\n", page->next_hash);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#280: FILE: mm/page_alloc.c:220:
+				printk(KERN_ERR "bad page count %d.\n", atomic_read(&page->count));

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#281: FILE: mm/page_alloc.c:221:
+			if (page->lru.next != (void*)0xbaadf00d)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#282: FILE: mm/page_alloc.c:222:
+				printk(KERN_ERR" bad lru_next %p.\n", page->lru.next);

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#282: FILE: mm/page_alloc.c:222:
+				printk(KERN_ERR" bad lru_next %p.\n", page->lru.next);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#283: FILE: mm/page_alloc.c:223:
+			if (page->lru.prev != (void*)0xf00dbaad)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#284: FILE: mm/page_alloc.c:224:
+				printk(KERN_ERR" bad lru_prev %p.\n", page->lru.prev);

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#284: FILE: mm/page_alloc.c:224:
+				printk(KERN_ERR" bad lru_prev %p.\n", page->lru.prev);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#285: FILE: mm/page_alloc.c:225:
+			if (page->pprev_hash != (void*)0xdeadbeef)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#286: FILE: mm/page_alloc.c:226:
+				printk(KERN_ERR" bad pprev_hash %p.\n", page->pprev_hash);

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#286: FILE: mm/page_alloc.c:226:
+				printk(KERN_ERR" bad pprev_hash %p.\n", page->pprev_hash);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#287: FILE: mm/page_alloc.c:227:
+			if (page->buffers != (void*)0xdeadbeef)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#288: FILE: mm/page_alloc.c:228:
+^I^I^I^Iprintk(KERN_ERR" bad page->buffers %p.\n", page->buffers); $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#288: FILE: mm/page_alloc.c:228:
+				printk(KERN_ERR" bad page->buffers %p.\n", page->buffers); 

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#288: FILE: mm/page_alloc.c:228:
+				printk(KERN_ERR" bad page->buffers %p.\n", page->buffers); 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#290: FILE: mm/page_alloc.c:230:
+^I^I^Ipage->buffers = NULL; $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#310: FILE: fs/buffer.c:1232:
+			printk(KERN_ERR "wrong size %lxh.\n", bh->b_size);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#319: FILE: fs/buffer.c:1258:
+				printk(KERN_ERR "wrong size %lxh.\n", bh->b_size);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000486574.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 27 errors, 18 warnings, 25 checks, 233 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000486574.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
