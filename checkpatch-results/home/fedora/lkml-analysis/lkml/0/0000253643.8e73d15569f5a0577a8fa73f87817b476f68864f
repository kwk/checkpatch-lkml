CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#47: 
     Hornemannstraße 12,  31137 Hildesheim, Germany
                  ^

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#56: 
--- a/kernel/gpio.c	(revision 0)

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#59: FILE: kernel/gpio.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#60: FILE: kernel/gpio.c:2:
+ * linux/kernel/gpio.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#63: FILE: kernel/gpio.c:5:
+ * $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#91: FILE: kernel/gpio.c:33:
+MODULE_PARM_DESC(mapping,
+"period delimited options string to map GPIO pins to userland:\n"

ERROR:TRAILING_WHITESPACE: trailing whitespace
#95: FILE: kernel/gpio.c:37:
+"^Iexample: mapping=5:out:hi.8:in\n"^I$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#111: FILE: kernel/gpio.c:53:
+^Ispinlock_t lock; ^I^I/* protects the props field */$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#116: FILE: kernel/gpio.c:58:
+};
+#define to_gpio_device(d) container_of(d, struct gpio_device, class_dev)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:RETURN_VOID: void function return statements are not generally useful
#125: FILE: kernel/gpio.c:67:
+	return;
+}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#132: FILE: kernel/gpio.c:74:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#133: FILE: kernel/gpio.c:75:
+/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#134: FILE: kernel/gpio.c:76:
+ * Attribute: /sys/class/gpio/gpioX/level $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#149: FILE: kernel/gpio.c:91:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#162: FILE: kernel/gpio.c:104:
+^Iif (gpio_dev->props.policy & GPIO_INPUT) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#164: FILE: kernel/gpio.c:106:
+^I$

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#165: FILE: kernel/gpio.c:107:
+	value = simple_strtol(buf, NULL, 10);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

ERROR:TRAILING_WHITESPACE: trailing whitespace
#166: FILE: kernel/gpio.c:108:
+^Iif ((value != 0) && (value != 1)) $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'value != 0'
#166: FILE: kernel/gpio.c:108:
+	if ((value != 0) && (value != 1)) 

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'value != 1'
#166: FILE: kernel/gpio.c:108:
+	if ((value != 0) && (value != 1)) 

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#171: FILE: kernel/gpio.c:113:
+	switch (value) {
+		case 0:  gpio_clear_pin(gpio_dev->props.pin_nr); 
[...]
+		case 1:  gpio_set_pin(gpio_dev->props.pin_nr); 
[...]
+		default: break;

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:TRAILING_WHITESPACE: trailing whitespace
#172: FILE: kernel/gpio.c:114:
+^I^Icase 0:  gpio_clear_pin(gpio_dev->props.pin_nr); $

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#172: FILE: kernel/gpio.c:114:
+		case 0:  gpio_clear_pin(gpio_dev->props.pin_nr); 

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#173: FILE: kernel/gpio.c:115:
+^I^I^I gpio_dir_output(gpio_dev->props.pin_nr); $

WARNING:TABSTOP: Statements should start on a tabstop
#174: FILE: kernel/gpio.c:116:
+			 break;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#175: FILE: kernel/gpio.c:117:
+^I^Icase 1:  gpio_set_pin(gpio_dev->props.pin_nr); $

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#175: FILE: kernel/gpio.c:117:
+		case 1:  gpio_set_pin(gpio_dev->props.pin_nr); 

WARNING:TABSTOP: Statements should start on a tabstop
#177: FILE: kernel/gpio.c:119:
+			 break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#178: FILE: kernel/gpio.c:120:
+		default: break;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#183: FILE: kernel/gpio.c:125:
+/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#184: FILE: kernel/gpio.c:126:
+ * Attribute: /sys/class/gpio/gpioX/policy $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#189: FILE: kernel/gpio.c:131:
+^I.store = NULL, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#196: FILE: kernel/gpio.c:138:
+^I$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#199: FILE: kernel/gpio.c:141:
+		ret_size += sprintf(buf,"userspace\n");
 		                       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#201: FILE: kernel/gpio.c:143:
+		ret_size += sprintf(buf,"kernel\n");
 		                       ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#246: FILE: kernel/gpio.c:188:
+/** $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#247: FILE: kernel/gpio.c:189:
+ * request_gpio - register a new object of gpio_device class.  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#251: FILE: kernel/gpio.c:193:
+ * @policy:     set policy for this pin, which is one of these: $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#252: FILE: kernel/gpio.c:194:
+ * ^I^I- GPIO_USER or GPIO_KERNEL$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#253: FILE: kernel/gpio.c:195:
+ * ^I^I- GPIO_INPUT or GPIO_OUTPUT$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#254: FILE: kernel/gpio.c:196:
+ * ^I^IFor user space registered pins a sysfs entry is added. $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#254: FILE: kernel/gpio.c:196:
+ * ^I^IFor user space registered pins a sysfs entry is added. $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#267: FILE: kernel/gpio.c:209:
+			printk(KERN_ERR "gpio pin %i is already used by %s\n",

ERROR:SPACING: space prohibited after that open parenthesis '('
#274: FILE: kernel/gpio.c:216:
+	if ( ( (policy & GPIO_USER) &&  (policy & GPIO_KERNEL)) ||

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#275: FILE: kernel/gpio.c:217:
+	if ( ( (policy & GPIO_USER) &&  (policy & GPIO_KERNEL)) ||
+	     (!(policy & GPIO_USER) && !(policy & GPIO_KERNEL))) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#276: FILE: kernel/gpio.c:218:
+^I^Iprintk(KERN_ERR "%s: policy has to be one of GPIO_KERNEL, GPIO_USER\n", DRIVER_NAME); $

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#276: FILE: kernel/gpio.c:218:
+		printk(KERN_ERR "%s: policy has to be one of GPIO_KERNEL, GPIO_USER\n", DRIVER_NAME); 

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#276: FILE: kernel/gpio.c:218:
+		printk(KERN_ERR "%s: policy has to be one of GPIO_KERNEL, GPIO_USER\n", DRIVER_NAME); 

ERROR:SPACING: space prohibited after that open parenthesis '('
#279: FILE: kernel/gpio.c:221:
+	if ( ( (policy & GPIO_INPUT) &&  (policy & GPIO_OUTPUT)) ||

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#280: FILE: kernel/gpio.c:222:
+	if ( ( (policy & GPIO_INPUT) &&  (policy & GPIO_OUTPUT)) ||
+	     (!(policy & GPIO_INPUT) && !(policy & GPIO_OUTPUT))) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#281: FILE: kernel/gpio.c:223:
+^I^Iprintk(KERN_ERR "%s: policy has to be one of GPIO_INPUT, GPIO_OUTPUT\n", DRIVER_NAME); $

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#281: FILE: kernel/gpio.c:223:
+		printk(KERN_ERR "%s: policy has to be one of GPIO_INPUT, GPIO_OUTPUT\n", DRIVER_NAME); 

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#281: FILE: kernel/gpio.c:223:
+		printk(KERN_ERR "%s: policy has to be one of GPIO_INPUT, GPIO_OUTPUT\n", DRIVER_NAME); 

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*gpio_dev)...) over kmalloc(sizeof(struct gpio_device)...)
#285: FILE: kernel/gpio.c:227:
+	gpio_dev = kmalloc(sizeof(struct gpio_device), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

ERROR:TRAILING_WHITESPACE: trailing whitespace
#286: FILE: kernel/gpio.c:228:
+^I$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#288: FILE: kernel/gpio.c:230:
+		printk(KERN_ERR "%s: couldn't allocate memory\n", DRIVER_NAME);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#305: FILE: kernel/gpio.c:247:
+		printk(KERN_ERR "%s: class registering failed\n", DRIVER_NAME);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#315: FILE: kernel/gpio.c:257:
+^I$

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#320: FILE: kernel/gpio.c:262:
+		switch (init_level) {
+			case 0: gpio_clear_pin(pin_nr); break;
+			case 1: gpio_set_pin(pin_nr); break;
+			default: break; 

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#321: FILE: kernel/gpio.c:263:
+			case 0: gpio_clear_pin(pin_nr); break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#322: FILE: kernel/gpio.c:264:
+			case 1: gpio_set_pin(pin_nr); break;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#323: FILE: kernel/gpio.c:265:
+^I^I^Idefault: break; $

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#323: FILE: kernel/gpio.c:265:
+			default: break; 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#325: FILE: kernel/gpio.c:267:
+^I^Igpio_dir_output(pin_nr); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#331: FILE: kernel/gpio.c:273:
+^I$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#332: FILE: kernel/gpio.c:274:
+	printk(KERN_INFO "registered gpio%i\n", pin_nr);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#341: FILE: kernel/gpio.c:283:
+ * @pin_nr: pin number to free. $

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#353: FILE: kernel/gpio.c:295:
+		if (pin_nr == gpio_dev->props.pin_nr) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#354: FILE: kernel/gpio.c:296:
+			printk(KERN_INFO "unregistering gpio pin %i\n", pin_nr);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#382: FILE: kernel/gpio.c:324:
+		printk(KERN_INFO "unregistering gpio pin %i\n", gpio_dev->props.pin_nr);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#418: FILE: kernel/gpio.c:360:
+	while ((p = strsep(&s, ".,")) != NULL) {
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#428: FILE: kernel/gpio.c:370:
+^I^I^Iprintk("%s: invalid token (scanning pin_nr): %s\n", DRIVER_NAME, p); $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#428: FILE: kernel/gpio.c:370:
+			printk("%s: invalid token (scanning pin_nr): %s\n", DRIVER_NAME, p); 

WARNING:LONG_LINE_COMMENT: line length of 111 exceeds 100 columns
#431: FILE: kernel/gpio.c:373:
+		pin_nr = simple_strtoul(q, NULL, 0);	/* FIXME: this doesn't detect if no number is given! */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#431: FILE: kernel/gpio.c:373:
+		pin_nr = simple_strtoul(q, NULL, 0);	/* FIXME: this doesn't detect if no number is given! */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#434: FILE: kernel/gpio.c:376:
+^I^I^Iprintk("%s: invalid token (scanning direction): %s\n", DRIVER_NAME, p); $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#434: FILE: kernel/gpio.c:376:
+			printk("%s: invalid token (scanning direction): %s\n", DRIVER_NAME, p); 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#440: FILE: kernel/gpio.c:382:
+^I^I^Iprintk("%s: invalid token (scanning policy): %s\n", DRIVER_NAME, p); $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#440: FILE: kernel/gpio.c:382:
+			printk("%s: invalid token (scanning policy): %s\n", DRIVER_NAME, p); 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#446: FILE: kernel/gpio.c:388:
+^I^I^I^Iprintk("%s: invalid token (scanning init_level): %s\n", DRIVER_NAME, p); $

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#446: FILE: kernel/gpio.c:388:
+				printk("%s: invalid token (scanning init_level): %s\n", DRIVER_NAME, p); 

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#446: FILE: kernel/gpio.c:388:
+				printk("%s: invalid token (scanning init_level): %s\n", DRIVER_NAME, p); 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#455: FILE: kernel/gpio.c:397:
+^I^I^I^Iprintk("%s: invalid token (scanning level_value): %s\n", DRIVER_NAME, p); $

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#455: FILE: kernel/gpio.c:397:
+				printk("%s: invalid token (scanning level_value): %s\n", DRIVER_NAME, p); 

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#455: FILE: kernel/gpio.c:397:
+				printk("%s: invalid token (scanning level_value): %s\n", DRIVER_NAME, p); 

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#461: FILE: kernel/gpio.c:403:
+			printk(KERN_ERR

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#474: FILE: kernel/gpio.c:416:
+	printk(KERN_INFO "Initialising gpio device class.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#480: FILE: kernel/gpio.c:422:
+		printk(KERN_ERR "%s: couldn't register sysdev class, exiting\n", DRIVER_NAME);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#486: FILE: kernel/gpio.c:428:
+		printk(KERN_ERR "%s: couldn't register sysdev, exiting\n", DRIVER_NAME);

ERROR:CODE_INDENT: code indent should use tabs where possible
#490: FILE: kernel/gpio.c:432:
+        if (!create_proc_read_entry ("gpio", 0, 0, gpio_read_proc, NULL)) {$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#490: FILE: kernel/gpio.c:432:
+        if (!create_proc_read_entry ("gpio", 0, 0, gpio_read_proc, NULL)) {$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#490: FILE: kernel/gpio.c:432:
+        if (!create_proc_read_entry ("gpio", 0, 0, gpio_read_proc, NULL)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#491: FILE: kernel/gpio.c:433:
+		printk(KERN_ERR "%s: couldn't register proc entry, exiting\n", DRIVER_NAME);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#496: FILE: kernel/gpio.c:438:
+	printk(KERN_INFO "%s: mapping=", DRIVER_NAME);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#497: FILE: kernel/gpio.c:439:
+	if (strcmp(mapping,"")) {
 	                  ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#498: FILE: kernel/gpio.c:440:
+		printk("%s\n", mapping);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#499: FILE: kernel/gpio.c:441:
+		if (gpio_setup(mapping) != 0) {
+			printk(KERN_ERR "%s: could not register ('mapping=...'), exiting\n", DRIVER_NAME);
+		}

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#500: FILE: kernel/gpio.c:442:
+			printk(KERN_ERR "%s: could not register ('mapping=...'), exiting\n", DRIVER_NAME);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#500: FILE: kernel/gpio.c:442:
+			printk(KERN_ERR "%s: could not register ('mapping=...'), exiting\n", DRIVER_NAME);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#503: FILE: kernel/gpio.c:445:
+^I^Iprintk("EMPTY\n"); $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#503: FILE: kernel/gpio.c:445:
+		printk("EMPTY\n"); 

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#535: FILE: include/asm-arm/arch-pxa/gpio.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#536: FILE: include/asm-arm/arch-pxa/gpio.h:2:
+ * linux/include/asm-arm/arch-pxa/gpio.h

WARNING:RETURN_VOID: void function return statements are not generally useful
#557: FILE: include/asm-arm/arch-pxa/gpio.h:23:
+	return;
+}

WARNING:RETURN_VOID: void function return statements are not generally useful
#563: FILE: include/asm-arm/arch-pxa/gpio.h:29:
+	return;
+}

WARNING:RETURN_VOID: void function return statements are not generally useful
#569: FILE: include/asm-arm/arch-pxa/gpio.h:35:
+	return;
+}

WARNING:RETURN_VOID: void function return statements are not generally useful
#575: FILE: include/asm-arm/arch-pxa/gpio.h:41:
+	return;
+}

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#579: FILE: include/asm-arm/arch-pxa/gpio.h:45:
+	return GPLR(gpio_nr) & GPIO_bit(gpio_nr) ? 1:0;
 	                                            ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#582: FILE: include/asm-arm/arch-pxa/gpio.h:48:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#589: FILE: include/linux/gpio.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#590: FILE: include/linux/gpio.h:2:
+ * include/linux/gpio.h

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#605: FILE: include/linux/gpio.h:17:
+#define GPIO_KERNEL     (1<<0)
                           ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#605: FILE: include/linux/gpio.h:17:
+#define GPIO_KERNEL     (1<<0)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#606: FILE: include/linux/gpio.h:18:
+#define GPIO_USER       (1<<1)
                           ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#606: FILE: include/linux/gpio.h:18:
+#define GPIO_USER       (1<<1)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#607: FILE: include/linux/gpio.h:19:
+#define GPIO_INPUT      (1<<2)
                           ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#607: FILE: include/linux/gpio.h:19:
+#define GPIO_INPUT      (1<<2)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#608: FILE: include/linux/gpio.h:20:
+#define GPIO_OUTPUT     (1<<3)
                           ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#608: FILE: include/linux/gpio.h:20:
+#define GPIO_OUTPUT     (1<<3)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#632: FILE: init/Kconfig:305:
+^I  FIXME: write more documentation. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#634: FILE: init/Kconfig:307:
+^I  If unsure, say N. $

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000253643.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 50 errors, 50 warnings, 21 checks, 560 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000253643.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
