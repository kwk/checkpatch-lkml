WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#34: 
  include/asm-i386/bugs.h         |    2  include/asm-i386/dma.h          |    7 +

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#59: FILE: include/asm-i386/bugs.h:46:
diff -urN linux/include/asm-i386/dma.h linux98/include/asm-i386/dma.h

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#123: FILE: include/asm-i386/pc9800.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:SPACING: No space is necessary after a cast
#136: FILE: include/asm-i386/pc9800.h:14:
+#define __PC9800SCA(type, pa)	(*(type *) phys_to_virt(pa))

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <PC9800_8MHz_P>
#141: FILE: include/asm-i386/pc9800.h:19:
+#define PC9800_8MHz_P()		__PC9800SCA_TEST_BIT(PC9800SCA_BIOS_FLAG, 7)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#154: FILE: include/asm-i386/pc9800_debug.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#155: FILE: include/asm-i386/pc9800_debug.h:2:
+ * linux/include/asm-i386/pc9800_debug.h: Defines for debug routines

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:INLINE: plain inline is preferred over __inline__
#168: FILE: include/asm-i386/pc9800_debug.h:15:
+static __inline__ void pc9800_beep_on(void)

CHECK:SPACING: No space is necessary after a cast
#170: FILE: include/asm-i386/pc9800_debug.h:17:
+	__asm__ ("out%B0 %0,%1" : : "a"((char) 0x6), "N"(0x37));

WARNING:INLINE: plain inline is preferred over __inline__
#174: FILE: include/asm-i386/pc9800_debug.h:21:
+static __inline__ void pc9800_beep_off(void)

CHECK:SPACING: No space is necessary after a cast
#176: FILE: include/asm-i386/pc9800_debug.h:23:
+	__asm__ ("out%B0 %0,%1" : : "a"((char) 0x7), "N"(0x37));

WARNING:INLINE: plain inline is preferred over __inline__
#180: FILE: include/asm-i386/pc9800_debug.h:27:
+static __inline__ void pc9800_beep_toggle(void)

WARNING:INLINE: plain inline is preferred over __inline__
#186: FILE: include/asm-i386/pc9800_debug.h:33:
+static __inline__ void pc9800_udelay(unsigned int __usec)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#188: FILE: include/asm-i386/pc9800_debug.h:35:
+	if ((__usec = __usec * 10 / 6) > 0)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#199: FILE: include/asm-i386/pc9800_debug.h:46:
+			       __builtin_return_address (0), #expr);	\

CHECK:SPACING: No space is necessary after a cast
#204: FILE: include/asm-i386/pc9800_debug.h:51:
+	if ((unsigned long) __p < PAGE_OFFSET) {			\

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#213: FILE: include/asm-i386/pc9800_debug.h:60:
+extern void __assert_fail(const char *, const char *, unsigned int,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#214: FILE: include/asm-i386/pc9800_debug.h:61:
+extern void __assert_fail(const char *, const char *, unsigned int,
+			   const char *, void *, const char *)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#215: FILE: include/asm-i386/pc9800_debug.h:62:
+     __attribute__ ((__noreturn__));$

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __noreturn over __attribute__((__noreturn__))
#215: FILE: include/asm-i386/pc9800_debug.h:62:
+     __attribute__ ((__noreturn__));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#216: FILE: include/asm-i386/pc9800_debug.h:63:
+extern void __invalid_kernel_pointer(const char *, const char *, unsigned int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#216: FILE: include/asm-i386/pc9800_debug.h:63:
+extern void __invalid_kernel_pointer(const char *, const char *, unsigned int,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#216: FILE: include/asm-i386/pc9800_debug.h:63:
+extern void __invalid_kernel_pointer(const char *, const char *, unsigned int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#216: FILE: include/asm-i386/pc9800_debug.h:63:
+extern void __invalid_kernel_pointer(const char *, const char *, unsigned int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#216: FILE: include/asm-i386/pc9800_debug.h:63:
+extern void __invalid_kernel_pointer(const char *, const char *, unsigned int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#216: FILE: include/asm-i386/pc9800_debug.h:63:
+extern void __invalid_kernel_pointer(const char *, const char *, unsigned int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#216: FILE: include/asm-i386/pc9800_debug.h:63:
+extern void __invalid_kernel_pointer(const char *, const char *, unsigned int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#216: FILE: include/asm-i386/pc9800_debug.h:63:
+extern void __invalid_kernel_pointer(const char *, const char *, unsigned int,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#217: FILE: include/asm-i386/pc9800_debug.h:64:
+extern void __invalid_kernel_pointer(const char *, const char *, unsigned int,
+				      const char *, void *,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#219: FILE: include/asm-i386/pc9800_debug.h:66:
+     __attribute__ ((__noreturn__));$

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __noreturn over __attribute__((__noreturn__))
#219: FILE: include/asm-i386/pc9800_debug.h:66:
+     __attribute__ ((__noreturn__));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#220: FILE: include/asm-i386/pc9800_debug.h:67:
+extern void __pc9800_saveregs(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#222: FILE: include/asm-i386/pc9800_debug.h:69:
+extern void ucg_saveargs(unsigned int, ...);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#222: FILE: include/asm-i386/pc9800_debug.h:69:
+extern void ucg_saveargs(unsigned int, ...);

WARNING:INCLUDE_LINUX: Use #include <linux/pgtable.h> instead of <asm/pgtable.h>
#227: FILE: include/asm-i386/pc9800_debug.h:74:
+#include <asm/pgtable.h>

WARNING:INLINE: plain inline is preferred over __inline__
#233: FILE: include/asm-i386/pc9800_debug.h:80:
+static __inline__ void

CHECK:SPACING: No space is necessary after a cast
#249: FILE: include/asm-i386/pc9800_debug.h:96:
+		pte = (pte_t *) __get_free_page(GFP_KERNEL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#253: FILE: include/asm-i386/pc9800_debug.h:100:
+			*pte = mk_pte_phys(paddr + i * PAGE_SIZE,
+					    PAGE_KERNEL);

ERROR:SPACING: spaces required around that '<' (ctx:WxV)
#263: FILE: include/asm-i386/pc9800_debug.h:110:
+# /* no dep */ include <asm/uaccess.h>
                        ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#263: FILE: include/asm-i386/pc9800_debug.h:110:
+# /* no dep */ include <asm/uaccess.h>
                            ^

ERROR:SPACING: spaces required around that '>' (ctx:VxE)
#263: FILE: include/asm-i386/pc9800_debug.h:110:
+# /* no dep */ include <asm/uaccess.h>
                                      ^

WARNING:TYPO_SPELLING: 'vaild' may be misspelled - perhaps 'valid'?
#267: FILE: include/asm-i386/pc9800_debug.h:114:
+ *  If PTR points vaild memory address for kernel internal use,
                   ^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:SPACING: No space is necessary after a cast
#273: FILE: include/asm-i386/pc9800_debug.h:120:
+	const int *_ptr = (const int *) (PTR);	\

CHECK:SPACING: No space is necessary after a cast
#275: FILE: include/asm-i386/pc9800_debug.h:122:
+	(unsigned long) _ptr >= PAGE_OFFSET	\

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#276: FILE: include/asm-i386/pc9800_debug.h:123:
+	(unsigned long) _ptr >= PAGE_OFFSET	\
+		&& !__get_user(_dummy, _ptr);	\

CHECK:SPACING: No space is necessary after a cast
#288: FILE: include/asm-i386/pc9800_debug.h:135:
+	const char *_ptr = (const char *) (PTR);			\

CHECK:SPACING: No space is necessary after a cast
#290: FILE: include/asm-i386/pc9800_debug.h:137:
+	(unsigned long) _ptr >= PAGE_OFFSET				\

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#291: FILE: include/asm-i386/pc9800_debug.h:138:
+	(unsigned long) _ptr >= PAGE_OFFSET				\
+		&& ({ int _result;					\

WARNING:TABSTOP: Statements should start on a tabstop
#292: FILE: include/asm-i386/pc9800_debug.h:139:
+		      while (!(_result = __get_user(_dummy, _ptr))	\

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (22, 30)
#292: FILE: include/asm-i386/pc9800_debug.h:139:
+		      while (!(_result = __get_user(_dummy, _ptr))	\
[...]
+			      _ptr++;					\

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#293: FILE: include/asm-i386/pc9800_debug.h:140:
+		      while (!(_result = __get_user(_dummy, _ptr))	\
+			     && _dummy)					\

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#300: FILE: include/asm-i386/pc9800_debug.h:147:
+ 
 ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#300: FILE: include/asm-i386/pc9800_debug.h:147:
+^L $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#310: FILE: include/asm-i386/pc9800_dma.h:1:
+/* $Id: dma.h,v 1.7 1992/12/14 00:29:34 root Exp root $

WARNING:CVS_KEYWORD: CVS style keyword markers, these will _not_ be updated
#310: FILE: include/asm-i386/pc9800_dma.h:1:
+/* $Id: dma.h,v 1.7 1992/12/14 00:29:34 root Exp root $

Since linux moved to git, the CVS markers are no longer used.
So, CVS style keywords ($Id$, $Revision$, $Log$) should not be
added.

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#321: FILE: include/asm-i386/pc9800_dma.h:12:
+#include <asm/io.h>		/* need byte IO */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#324: FILE: include/asm-i386/pc9800_dma.h:15:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LONG_LINE_COMMENT: line length of 145 exceeds 100 columns
#349: FILE: include/asm-i386/pc9800_dma.h:40:
+ * DMA transfers are limited to the lower 16MB of _physical_ memory.  + * Note that addresses loaded into registers must be _physical_ addresses,

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE_COMMENT: line length of 117 exceeds 100 columns
#366: FILE: include/asm-i386/pc9800_dma.h:57:
+ *   P7  ...  P1 (0) A7 A6  ... A0 A7 A6 ... A0   + * |      Page      |  Addr MSB   |  Addr LSB  |   (DMA registers)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#386: FILE: include/asm-i386/pc9800_dma.h:77:
+#define DMA_CMD_REG			((IO_DMA_BASE)+0x10) /* command register (w) */
                    			              ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#387: FILE: include/asm-i386/pc9800_dma.h:78:
+#define DMA_STAT_REG		((IO_DMA_BASE)+0x10) /* status register (r) */
                     		              ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#388: FILE: include/asm-i386/pc9800_dma.h:79:
+#define DMA_REQ_REG			((IO_DMA_BASE)+0x12) /* request register (w) */
                    			              ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#389: FILE: include/asm-i386/pc9800_dma.h:80:
+#define DMA_MASK_REG		((IO_DMA_BASE)+0x14) /* single-channel mask (w) */
                     		              ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#390: FILE: include/asm-i386/pc9800_dma.h:81:
+#define DMA_MODE_REG		((IO_DMA_BASE)+0x16) /* mode register (w) */
                     		              ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#391: FILE: include/asm-i386/pc9800_dma.h:82:
+#define DMA_CLEAR_FF_REG	((IO_DMA_BASE)+0x18) /* clear pointer flip-flop (w) */
                         	              ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#392: FILE: include/asm-i386/pc9800_dma.h:83:
+#define DMA_TEMP_REG		((IO_DMA_BASE)+0x1A) /* Temporary Register (r) */
                     		              ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#393: FILE: include/asm-i386/pc9800_dma.h:84:
+#define DMA_RESET_REG		((IO_DMA_BASE)+0x1A) /* Master Clear (w) */
                      		              ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#394: FILE: include/asm-i386/pc9800_dma.h:85:
+#define DMA_CLR_MASK_REG	((IO_DMA_BASE)+0x1C) /* Clear Mask */
                         	              ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#395: FILE: include/asm-i386/pc9800_dma.h:86:
+#define DMA_MASK_ALL_REG	((IO_DMA_BASE)+0x1E) /* all-channels mask (w) */
                         	              ^

WARNING:INLINE: plain inline is preferred over __inline__
#413: FILE: include/asm-i386/pc9800_dma.h:104:
+static __inline__ unsigned long claim_dma_lock(void)

WARNING:LINE_SPACING: Missing a blank line after declarations
#416: FILE: include/asm-i386/pc9800_dma.h:107:
+	unsigned long flags;
+	spin_lock_irqsave(&dma_spin_lock, flags);

WARNING:INLINE: plain inline is preferred over __inline__
#420: FILE: include/asm-i386/pc9800_dma.h:111:
+static __inline__ void release_dma_lock(unsigned long flags)

WARNING:INLINE: plain inline is preferred over __inline__
#426: FILE: include/asm-i386/pc9800_dma.h:117:
+static __inline__ void enable_dma(unsigned int dmanr)

WARNING:INLINE: plain inline is preferred over __inline__
#431: FILE: include/asm-i386/pc9800_dma.h:122:
+static __inline__ void disable_dma(unsigned int dmanr)

WARNING:INLINE: plain inline is preferred over __inline__
#443: FILE: include/asm-i386/pc9800_dma.h:134:
+static __inline__ void clear_dma_ff(unsigned int dmanr)

WARNING:INLINE: plain inline is preferred over __inline__
#449: FILE: include/asm-i386/pc9800_dma.h:140:
+static __inline__ void set_dma_mode(unsigned int dmanr, char mode)

WARNING:INLINE: plain inline is preferred over __inline__
#459: FILE: include/asm-i386/pc9800_dma.h:150:
+static __inline__ void set_dma_page(unsigned int dmanr, unsigned int pagenr)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#461: FILE: include/asm-i386/pc9800_dma.h:152:
+	unsigned char low=pagenr&0xff;
 	                 ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#461: FILE: include/asm-i386/pc9800_dma.h:152:
+	unsigned char low=pagenr&0xff;
 	                        ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#462: FILE: include/asm-i386/pc9800_dma.h:153:
+	unsigned char hi=pagenr>>8;
 	                ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#462: FILE: include/asm-i386/pc9800_dma.h:153:
+	unsigned char hi=pagenr>>8;
 	                       ^

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#464: FILE: include/asm-i386/pc9800_dma.h:155:
+	switch(dmanr) {
+		case 0:
[...]
+		case 1:
[...]
+		case 2:
[...]
+		case 3:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:SPACING: space required before the open parenthesis '('
#464: FILE: include/asm-i386/pc9800_dma.h:155:
+	switch(dmanr) {

WARNING:INLINE: plain inline is preferred over __inline__
#487: FILE: include/asm-i386/pc9800_dma.h:178:
+static __inline__ void set_dma_addr(unsigned int dmanr, unsigned int a)

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#489: FILE: include/asm-i386/pc9800_dma.h:180:
+	set_dma_page(dmanr, a>>16);
 	                     ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#490: FILE: include/asm-i386/pc9800_dma.h:181:
+	dma_outb( a & 0xff, ((dmanr&3)<<2) + IO_DMA_BASE );
 	                           ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#490: FILE: include/asm-i386/pc9800_dma.h:181:
+	dma_outb( a & 0xff, ((dmanr&3)<<2) + IO_DMA_BASE );
 	                              ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#490: FILE: include/asm-i386/pc9800_dma.h:181:
+	dma_outb( a & 0xff, ((dmanr&3)<<2) + IO_DMA_BASE );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#490: FILE: include/asm-i386/pc9800_dma.h:181:
+	dma_outb( a & 0xff, ((dmanr&3)<<2) + IO_DMA_BASE );

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#491: FILE: include/asm-i386/pc9800_dma.h:182:
+	dma_outb( (a>>8) & 0xff, ((dmanr&3)<<2) + IO_DMA_BASE );
 	            ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#491: FILE: include/asm-i386/pc9800_dma.h:182:
+	dma_outb( (a>>8) & 0xff, ((dmanr&3)<<2) + IO_DMA_BASE );
 	                                ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#491: FILE: include/asm-i386/pc9800_dma.h:182:
+	dma_outb( (a>>8) & 0xff, ((dmanr&3)<<2) + IO_DMA_BASE );
 	                                   ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#491: FILE: include/asm-i386/pc9800_dma.h:182:
+	dma_outb( (a>>8) & 0xff, ((dmanr&3)<<2) + IO_DMA_BASE );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#491: FILE: include/asm-i386/pc9800_dma.h:182:
+	dma_outb( (a>>8) & 0xff, ((dmanr&3)<<2) + IO_DMA_BASE );

CHECK:LINE_SPACING: Please don't use multiple blank lines
#494: FILE: include/asm-i386/pc9800_dma.h:185:
+
+

WARNING:INLINE: plain inline is preferred over __inline__
#503: FILE: include/asm-i386/pc9800_dma.h:194:
+static __inline__ void set_dma_count(unsigned int dmanr, unsigned int count)

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#506: FILE: include/asm-i386/pc9800_dma.h:197:
+	dma_outb( count & 0xff, ((dmanr&3)<<2) + 2 + IO_DMA_BASE );
 	                               ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#506: FILE: include/asm-i386/pc9800_dma.h:197:
+	dma_outb( count & 0xff, ((dmanr&3)<<2) + 2 + IO_DMA_BASE );
 	                                  ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#506: FILE: include/asm-i386/pc9800_dma.h:197:
+	dma_outb( count & 0xff, ((dmanr&3)<<2) + 2 + IO_DMA_BASE );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#506: FILE: include/asm-i386/pc9800_dma.h:197:
+	dma_outb( count & 0xff, ((dmanr&3)<<2) + 2 + IO_DMA_BASE );

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#507: FILE: include/asm-i386/pc9800_dma.h:198:
+	dma_outb( (count>>8) & 0xff, ((dmanr&3)<<2) + 2 + IO_DMA_BASE );
 	                ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#507: FILE: include/asm-i386/pc9800_dma.h:198:
+	dma_outb( (count>>8) & 0xff, ((dmanr&3)<<2) + 2 + IO_DMA_BASE );
 	                                    ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#507: FILE: include/asm-i386/pc9800_dma.h:198:
+	dma_outb( (count>>8) & 0xff, ((dmanr&3)<<2) + 2 + IO_DMA_BASE );
 	                                       ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#507: FILE: include/asm-i386/pc9800_dma.h:198:
+	dma_outb( (count>>8) & 0xff, ((dmanr&3)<<2) + 2 + IO_DMA_BASE );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#507: FILE: include/asm-i386/pc9800_dma.h:198:
+	dma_outb( (count>>8) & 0xff, ((dmanr&3)<<2) + 2 + IO_DMA_BASE );

CHECK:LINE_SPACING: Please don't use multiple blank lines
#510: FILE: include/asm-i386/pc9800_dma.h:201:
+
+

WARNING:INLINE: plain inline is preferred over __inline__
#519: FILE: include/asm-i386/pc9800_dma.h:210:
+static __inline__ int get_dma_residue(unsigned int dmanr)

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#524: FILE: include/asm-i386/pc9800_dma.h:215:
+	count = 1 + dma_inb(((dmanr&3)<<2) + 2 + IO_DMA_BASE);
 	                           ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#524: FILE: include/asm-i386/pc9800_dma.h:215:
+	count = 1 + dma_inb(((dmanr&3)<<2) + 2 + IO_DMA_BASE);
 	                              ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#525: FILE: include/asm-i386/pc9800_dma.h:216:
+	count += dma_inb(((dmanr&3)<<2) + 2 + IO_DMA_BASE) << 8;
 	                        ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#525: FILE: include/asm-i386/pc9800_dma.h:216:
+	count += dma_inb(((dmanr&3)<<2) + 2 + IO_DMA_BASE) << 8;
 	                           ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#526: FILE: include/asm-i386/pc9800_dma.h:217:
+^I $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#530: FILE: include/asm-i386/pc9800_dma.h:221:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#532: FILE: include/asm-i386/pc9800_dma.h:223:
+extern int request_dma(unsigned int dmanr, const char * device_id);	/* reserve a DMA channel */

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#532: FILE: include/asm-i386/pc9800_dma.h:223:
+extern int request_dma(unsigned int dmanr, const char * device_id);	/* reserve a DMA channel */

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#533: FILE: include/asm-i386/pc9800_dma.h:224:
+extern void free_dma(unsigned int dmanr);	/* release it again */

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#540: FILE: include/asm-i386/pc9800_dma.h:231:
+#define isa_dma_bridge_buggy ^I(0)$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#548: FILE: include/asm-i386/pc9800_sca.h:1:
+/*

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#623: FILE: include/asm-i386/setup.h:31:
+#define PC9800_MISC_FLAGS (*(unsigned char *)(PARAM+0x1AF))
                                                    ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#634: FILE: include/asm-i386/timex.h:12:
+   extern int CLOCK_TICK_RATE;$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000417214.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 19 errors, 45 warnings, 56 checks, 554 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000417214.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
