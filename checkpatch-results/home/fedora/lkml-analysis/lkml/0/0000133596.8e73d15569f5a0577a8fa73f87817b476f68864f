ERROR:SPACING: space required before the open parenthesis '('
#54: FILE: arch/um/sys-i386/ldt.c:231:
+		if(copy_to_user(ptr, ldt->u.entries, size))

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open brace '{'
#63: FILE: arch/um/sys-i386/ldt.c:242:
+			if(copy_to_user(ptr, ldt->u.pages[i], size)){

ERROR:SPACING: space required before the open parenthesis '('
#63: FILE: arch/um/sys-i386/ldt.c:242:
+			if(copy_to_user(ptr, ldt->u.pages[i], size)){

ERROR:TRAILING_WHITESPACE: trailing whitespace
#75: FILE: arch/um/sys-i386/ldt.c:324:
+^I^I^I^Imemcpy(&entry0, ldt->u.entries, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#78: FILE: arch/um/sys-i386/ldt.c:327:
+				__get_free_page(GFP_KERNEL|__GFP_ZERO);
 				                          ^

ERROR:SPACING: space required before the open brace '{'
#79: FILE: arch/um/sys-i386/ldt.c:328:
+			if(!ldt->u.pages[i]){

ERROR:SPACING: space required before the open parenthesis '('
#79: FILE: arch/um/sys-i386/ldt.c:328:
+			if(!ldt->u.pages[i]){

ERROR:TRAILING_WHITESPACE: trailing whitespace
#89: FILE: arch/um/sys-i386/ldt.c:336:
+^I^I^I^Imemcpy(ldt->u.pages[0], &entry0, $

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#91: FILE: arch/um/sys-i386/ldt.c:338:
+				memcpy(ldt->u.pages[0]+1, ldt->u.entries+1,
 				                      ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#91: FILE: arch/um/sys-i386/ldt.c:338:
+				memcpy(ldt->u.pages[0]+1, ldt->u.entries+1,
 				                                        ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#103: FILE: arch/um/sys-i386/ldt.c:350:
+		ldt_p = ldt->u.pages[ldt_info.entry_number/LDT_ENTRIES_PER_PAGE] +
 		                                          ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#125: FILE: arch/um/sys-i386/ldt.c:517:
+^I^I^I^Inew_mm->ldt.u.pages[i] = $

CHECK:SPACING: No space is necessary after a cast
#126: FILE: arch/um/sys-i386/ldt.c:518:
+					(struct ldt_entry *) page;

ERROR:SPACING: space prohibited before that close parenthesis ')'
#137: FILE: arch/um/sys-i386/ldt.c:538:
+			free_page((long )mm->ldt.u.pages[i]);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#159: FILE: include/asm-um/ldt-x86_64.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#173: FILE: include/asm-um/ldt-x86_64.h:15:
+extern void ldt_host_info(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#174: FILE: include/asm-um/ldt-x86_64.h:16:
+extern long init_new_ldt(struct mmu_context_skas * to_mm,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#174: FILE: include/asm-um/ldt-x86_64.h:16:
+extern long init_new_ldt(struct mmu_context_skas * to_mm,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#175: FILE: include/asm-um/ldt-x86_64.h:17:
+			 struct mmu_context_skas * from_mm);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#176: FILE: include/asm-um/ldt-x86_64.h:18:
+extern void free_ldt(struct mmu_context_skas * mm);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#176: FILE: include/asm-um/ldt-x86_64.h:18:
+extern void free_ldt(struct mmu_context_skas * mm);

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#179: FILE: include/asm-um/ldt-x86_64.h:21:
+	((LDT_ENTRIES * LDT_ENTRY_SIZE)/PAGE_SIZE)
 	                               ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#181: FILE: include/asm-um/ldt-x86_64.h:23:
+	(PAGE_SIZE/LDT_ENTRY_SIZE)
 	          ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#183: FILE: include/asm-um/ldt-x86_64.h:25:
+	((LDT_PAGES_MAX*sizeof(void *))/LDT_ENTRY_SIZE)
 	               ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#183: FILE: include/asm-um/ldt-x86_64.h:25:
+	((LDT_PAGES_MAX*sizeof(void *))/LDT_ENTRY_SIZE)
 	                               ^

WARNING:NEW_TYPEDEFS: do not add new typedefs
#190: FILE: include/asm-um/ldt-x86_64.h:32:
+typedef struct uml_ldt {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#194: FILE: include/asm-um/ldt-x86_64.h:36:
+		struct ldt_entry * pages[LDT_PAGES_MAX];

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'info' - possible side-effects?
#202: FILE: include/asm-um/ldt-x86_64.h:44:
+#define LDT_entry_a(info) \
+	((((info)->base_addr & 0x0000ffff) << 16) | ((info)->limit & 0x0ffff))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'info' - possible side-effects?
#205: FILE: include/asm-um/ldt-x86_64.h:47:
+#define LDT_entry_b(info) \
+	(((info)->base_addr & 0xff000000) | \
+	(((info)->base_addr & 0x00ff0000) >> 16) | \
+	((info)->limit & 0xf0000) | \
+	(((info)->read_exec_only ^ 1) << 9) | \
+	((info)->contents << 10) | \
+	(((info)->seg_not_present ^ 1) << 15) | \
+	((info)->seg_32bit << 22) | \
+	((info)->limit_in_pages << 23) | \
+	((info)->useable << 20) | \
+	0x7000)

WARNING:TYPO_SPELLING: 'useable' may be misspelled - perhaps 'usable'?
#214: FILE: include/asm-um/ldt-x86_64.h:56:
+	((info)->useable << 20) | \
 	         ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'info' - possible side-effects?
#217: FILE: include/asm-um/ldt-x86_64.h:59:
+#define LDT_empty(info) (\
+	(info)->base_addr	== 0	&& \
+	(info)->limit		== 0	&& \
+	(info)->contents	== 0	&& \
+	(info)->read_exec_only	== 1	&& \
+	(info)->seg_32bit	== 0	&& \
+	(info)->limit_in_pages	== 0	&& \
+	(info)->seg_not_present	== 1	&& \
+	(info)->useable		== 0	)

WARNING:TYPO_SPELLING: 'useable' may be misspelled - perhaps 'usable'?
#225: FILE: include/asm-um/ldt-x86_64.h:67:
+	(info)->useable		== 0	)
 	        ^^^^^^^

ERROR:SPACING: space prohibited before that close parenthesis ')'
#225: FILE: include/asm-um/ldt-x86_64.h:67:
+	(info)->useable		== 0	)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000133596.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 14 errors, 4 warnings, 15 checks, 169 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000133596.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
