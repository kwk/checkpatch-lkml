WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#33: 
> > but that's the breaks.  It does solve the "grab the file and then try to

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#66: 
# Add modules to sysfs

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#67: 
#

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#68: 
# This patch adds basic kobject support to struct module, and it creates a 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#69: 
# /sys/module directory which contains all of the individual modules.  Each

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#70: 
# module currently exports the refcount (if they are unloadable) and any

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#71: 
# module paramaters that are marked exportable in sysfs.

WARNING:TYPO_SPELLING: 'paramaters' may be misspelled - perhaps 'parameters'?
#71: 
# module paramaters that are marked exportable in sysfs.
         ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#72: 
# 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#73: 
# Was written by me and Rusty over and over many times during the past 6 months.

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#76: 
--- a/include/linux/module.h	Fri May  7 14:24:10 2004

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#93: FILE: include/linux/module.h:214:
+struct module_attribute
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#99: FILE: include/linux/module.h:220:
+struct module_kobject
+{

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#187: FILE: kernel/module.c:687:
+	return sprintf(buffer, "%u", module_refcount(mod)-1);
 	                                                 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#217: FILE: kernel/module.c:984:
+#define to_module_attr(n) container_of(n, struct module_attribute, attr);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:CONST_STRUCT: struct sysfs_ops should normally be const
#254: FILE: kernel/module.c:1021:
+static struct sysfs_ops module_sysfs_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#268: FILE: kernel/module.c:1035:
+};
+static decl_subsys(module, &module_ktype, NULL);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#279: FILE: kernel/module.c:1046:
+			     + sizeof(mod->mkobj->attr[0]) * (num_params+1),
 			                                                ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#309: FILE: kernel/module.c:1076:
+		sysfs_remove_file(&mod->mkobj->kobj,&mod->mkobj->attr[i].attr);
 		                                   ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#309: FILE: kernel/module.c:1076:
+		sysfs_remove_file(&mod->mkobj->kobj,&mod->mkobj->attr[i].attr);
 		                                    ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#321: FILE: kernel/module.c:1088:
+	unsigned int i;
+	for (i = 0; i < mod->mkobj->num_attributes; i++)

ERROR:SPACING: space required after that ',' (ctx:VxO)
#322: FILE: kernel/module.c:1089:
+		sysfs_remove_file(&mod->mkobj->kobj,&mod->mkobj->attr[i].attr);
 		                                   ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#322: FILE: kernel/module.c:1089:
+		sysfs_remove_file(&mod->mkobj->kobj,&mod->mkobj->attr[i].attr);
 		                                    ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#343: FILE: kernel/module.c:1708:
+^Ierr = mod_sysfs_setup(mod, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#360: FILE: kernel/module.c:2053:
+__initcall(modules_init);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000283430.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 8 errors, 14 warnings, 3 checks, 272 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000283430.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
