WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#44: 
--- 3ac9a34948049bff79a2b2ce49c0a3c84e35a748/drivers/scsi/ahci.c  (mode:100644)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#238: FILE: drivers/scsi/ahci.c:613:
+	printk("LOG 0x10: nq=%d, tag=%d\n", p[0] >> 7, p[0] & 0x1f);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#241: FILE: drivers/scsi/ahci.c:616:
+		printk("%d:%d ", i, p[i]);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#243: FILE: drivers/scsi/ahci.c:618:
+	printk("\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#252: FILE: drivers/scsi/ahci.c:627:
+	printk(KERN_ERR "ata%u: ncq interrupt error\n", ap->id);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#258: FILE: drivers/scsi/ahci.c:633:
+		printk(KERN_ERR "ata%u: unable to allocate memory for error\n", ap->id);

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#258: FILE: drivers/scsi/ahci.c:633:
+	if (!buffer) {
+		printk(KERN_ERR "ata%u: unable to allocate memory for error\n", ap->id);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#263: FILE: drivers/scsi/ahci.c:638:
+		printk(KERN_ERR "ata%u: unable to read log page\n", ap->id);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#337: FILE: drivers/scsi/ahci.c:728:
+			printk(KERN_ERR "ahci: missing tag %d\n", tag);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#490: FILE: drivers/scsi/libata-core.c:1160:
+		printk(KERN_INFO "ata%u: dev %u ATA, max %s, %Lu sectors:%s%s\n",

WARNING:PRINTF_L: %Lu is non-standard C, use %llu
#490: FILE: drivers/scsi/libata-core.c:1160:
+		printk(KERN_INFO "ata%u: dev %u ATA, max %s, %Lu sectors:%s%s\n",

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#533: FILE: drivers/scsi/libata-core.c:1228:
+	BUG_ON(qc == NULL);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!qc"
#533: FILE: drivers/scsi/libata-core.c:1228:
+	BUG_ON(qc == NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#548: FILE: drivers/scsi/libata-core.c:1243:
+	printk("RLP issue\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#552: FILE: drivers/scsi/libata-core.c:1247:
+	printk("RLP issue done\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#559: FILE: drivers/scsi/libata-core.c:1254:
+	printk("RLP wait done\n");

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#729: FILE: drivers/scsi/libata-core.c:4179:
+EXPORT_SYMBOL_GPL(ata_read_log_page);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

CHECK:BRACES: braces {} should be used on all arms of this statement
#804: FILE: drivers/scsi/libata-scsi.c:604:
+		if (ncq) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#807: FILE: drivers/scsi/libata-scsi.c:607:
+		} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#858: FILE: drivers/scsi/libata-scsi.c:741:
+	if (ret == ATA_QC_ISSUE_FATAL)
[...]
+	else if (ret == ATA_QC_ISSUE_DEFER) {
[...]

CHECK:SPACING: No space is necessary after a cast
#882: FILE: drivers/scsi/libata-scsi.c:1653:
+	ap = (struct ata_port *) &sdev->host->hostdata[0];

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#924: FILE: include/linux/ata.h:82:
+^IATA_DEVICE_OBS^I^I= (1 << 5), ^I/* obs bits in dev reg */$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1014: FILE: include/linux/libata.h:451:
+extern int ata_scsi_change_queue_depth(struct scsi_device *, int);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct scsi_device *' should also have an identifier name
#1014: FILE: include/linux/libata.h:451:
+extern int ata_scsi_change_queue_depth(struct scsi_device *, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1014: FILE: include/linux/libata.h:451:
+extern int ata_scsi_change_queue_depth(struct scsi_device *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1015: FILE: include/linux/libata.h:452:
+extern int ata_read_log_page(struct ata_port *, unsigned int, char, char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_port *' should also have an identifier name
#1015: FILE: include/linux/libata.h:452:
+extern int ata_read_log_page(struct ata_port *, unsigned int, char, char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#1015: FILE: include/linux/libata.h:452:
+extern int ata_read_log_page(struct ata_port *, unsigned int, char, char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char' should also have an identifier name
#1015: FILE: include/linux/libata.h:452:
+extern int ata_read_log_page(struct ata_port *, unsigned int, char, char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#1015: FILE: include/linux/libata.h:452:
+extern int ata_read_log_page(struct ata_port *, unsigned int, char, char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#1015: FILE: include/linux/libata.h:452:
+extern int ata_read_log_page(struct ata_port *, unsigned int, char, char *,

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000180712.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 0 errors, 24 warnings, 7 checks, 907 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000180712.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
