WARNING:TYPO_SPELLING: 'unregiter' may be misspelled - perhaps 'unregister'?
#79: 
To unregiter a function-return probe, the user calls
   ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:SPACING: No space is necessary after a cast
#138: FILE: arch/i386/kernel/kprobes.c:99:
+	return ((struct thread_info *) (((unsigned long) ptr) &

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#139: FILE: arch/i386/kernel/kprobes.c:100:
+					(~(THREAD_SIZE -1))))->task;
 					               ^

WARNING:TYPO_SPELLING: 'addrress' may be misspelled - perhaps 'address'?
#152: FILE: arch/i386/kernel/kprobes.c:113:
+	 * the same addrress since stack address would have
 	            ^^^^^^^^

CHECK:SPACING: No space is necessary after a cast
#155: FILE: arch/i386/kernel/kprobes.c:116:
+	if (((void*) *sara) != kretprobe_trampoline)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#155: FILE: arch/i386/kernel/kprobes.c:116:
+	if (((void*) *sara) != kretprobe_trampoline)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#156: FILE: arch/i386/kernel/kprobes.c:117:
+		orig_ret_addr = (void*) *sara;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#156: FILE: arch/i386/kernel/kprobes.c:117:
+		orig_ret_addr = (void*) *sara;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#158: FILE: arch/i386/kernel/kprobes.c:119:
+	if ((ri = get_free_rp_inst(rp)) != NULL) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:SPACING: No space is necessary after a cast
#164: FILE: arch/i386/kernel/kprobes.c:125:
+		*sara = (unsigned long) &kretprobe_trampoline;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#181: FILE: arch/i386/kernel/kprobes.c:228:
+ void kretprobe_trampoline_holder(void)$

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#181: FILE: arch/i386/kernel/kprobes.c:228:
+ void kretprobe_trampoline_holder(void)
+ {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#182: FILE: arch/i386/kernel/kprobes.c:229:
+ {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#183: FILE: arch/i386/kernel/kprobes.c:230:
+ ^Iasm volatile (  ".global kretprobe_trampoline\n"$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#183: FILE: arch/i386/kernel/kprobes.c:230:
+ ^Iasm volatile (  ".global kretprobe_trampoline\n"$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#183: FILE: arch/i386/kernel/kprobes.c:230:
+ ^Iasm volatile (  ".global kretprobe_trampoline\n"$

ERROR:SPACING: space prohibited after that open parenthesis '('
#183: FILE: arch/i386/kernel/kprobes.c:230:
+ 	asm volatile (  ".global kretprobe_trampoline\n"

ERROR:CODE_INDENT: code indent should use tabs where possible
#184: FILE: arch/i386/kernel/kprobes.c:231:
+ ^I^I^I"kretprobe_trampoline: \n"$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#184: FILE: arch/i386/kernel/kprobes.c:231:
+ ^I^I^I"kretprobe_trampoline: \n"$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#184: FILE: arch/i386/kernel/kprobes.c:231:
+ ^I^I^I"kretprobe_trampoline: \n"$

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#184: FILE: arch/i386/kernel/kprobes.c:231:
+ 			"kretprobe_trampoline: \n"

ERROR:CODE_INDENT: code indent should use tabs where possible
#185: FILE: arch/i386/kernel/kprobes.c:232:
+ ^I^I^I"nop\n");$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#185: FILE: arch/i386/kernel/kprobes.c:232:
+ ^I^I^I"nop\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#185: FILE: arch/i386/kernel/kprobes.c:232:
+ ^I^I^I"nop\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#186: FILE: arch/i386/kernel/kprobes.c:233:
+ }$

CHECK:SPACING: No space is necessary after a cast
#197: FILE: arch/i386/kernel/kprobes.c:244:
+	unsigned long *sara = ((unsigned long *) &regs->esp) - 1;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#212: FILE: arch/i386/kernel/kprobes.c:259:
+void trampoline_post_handler(struct kprobe *p, struct pt_regs *regs,
+						unsigned long flags)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#329: FILE: include/linux/kprobes.h:96:
+extern int trampoline_probe_handler(struct kprobe *p, struct pt_regs *regs);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#330: FILE: include/linux/kprobes.h:97:
+extern void trampoline_post_handler(struct kprobe *p, struct pt_regs *regs,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#331: FILE: include/linux/kprobes.h:98:
+extern void trampoline_post_handler(struct kprobe *p, struct pt_regs *regs,
+							unsigned long flags);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#332: FILE: include/linux/kprobes.h:99:
+extern struct task_struct *arch_get_kprobe_task(void *ptr);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#338: FILE: include/linux/kprobes.h:105:
+}
+static int trampoline_probe_handler(struct kprobe *p, struct pt_regs *regs)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#342: FILE: include/linux/kprobes.h:109:
+}
+static void trampoline_post_handler(struct kprobe *p, struct pt_regs *regs,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#343: FILE: include/linux/kprobes.h:110:
+static void trampoline_post_handler(struct kprobe *p, struct pt_regs *regs,
+							unsigned long flags)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#346: FILE: include/linux/kprobes.h:113:
+}
+#define arch_get_kprobe_task(ptr) ((struct task_struct *)NULL)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#382: FILE: include/linux/kprobes.h:157:
+extern void arch_prepare_kretprobe(struct kretprobe *rp, struct pt_regs *regs);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#387: FILE: include/linux/kprobes.h:162:
+struct hlist_head * kretprobe_inst_table_head(struct task_struct *tsk);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#410: FILE: include/linux/kprobes.h:202:
 }
+static inline int register_kretprobe(struct kretprobe *rp)

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#412: FILE: include/linux/kprobes.h:204:
+	return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#414: FILE: include/linux/kprobes.h:206:
+}
+static inline void unregister_kretprobe(struct kretprobe *rp)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#417: FILE: include/linux/kprobes.h:209:
+}
+static inline void kprobe_flush_task(struct task_struct *tk)

CHECK:SPACING: No space is necessary after a cast
#449: FILE: kernel/kprobes.c:128:
+		.addr = (kprobe_opcode_t *) &kretprobe_trampoline,

WARNING:LINE_SPACING: Missing a blank line after declarations
#458: FILE: kernel/kprobes.c:137:
+	struct kretprobe_instance *ri;
+	hlist_for_each_entry(ri, node, &rp->free_instances, uflist)

WARNING:LINE_SPACING: Missing a blank line after declarations
#467: FILE: kernel/kprobes.c:146:
+	struct kretprobe_instance *ri;
+	hlist_for_each_entry(ri, node, &rp->used_instances, uflist)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#500: FILE: kernel/kprobes.c:179:
+	hlist_add_head(&ri->hlist,
+			&kretprobe_inst_table[hash_ptr(tsk, KPROBE_HASH_BITS)]);

CHECK:BRACES: Unbalanced braces around else statement
#517: FILE: kernel/kprobes.c:196:
+	} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#522: FILE: kernel/kprobes.c:201:
+struct hlist_head * kretprobe_inst_table_head(struct task_struct *tsk)

CHECK:SPACING: No space is necessary after a cast
#562: FILE: kernel/kprobes.c:241:
+					(unsigned long) ri->ret_addr;

WARNING:LINE_SPACING: Missing a blank line after declarations
#584: FILE: kernel/kprobes.c:263:
+	struct kretprobe_instance *ri;
+	while ((ri = get_free_rp_inst(rp)) != NULL) {

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#604: FILE: kernel/kprobes.c:413:
+		return -ENOSYS;

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#611: FILE: kernel/kprobes.c:420:
+		rp->maxactive = max(10, 2 * NR_CPUS);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#613: FILE: kernel/kprobes.c:422:
+		rp->maxactive = NR_CPUS;

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*inst)...) over kmalloc(sizeof(struct kretprobe_instance)...)
#619: FILE: kernel/kprobes.c:428:
+		inst = kmalloc(sizeof(struct kretprobe_instance), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!inst"
#620: FILE: kernel/kprobes.c:429:
+		if (inst == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#630: FILE: kernel/kprobes.c:439:
+	if ((ret = register_kprobe(&rp->kp)) != 0)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#675: FILE: kernel/kprobes.c:485:
+EXPORT_SYMBOL_GPL(unregister_kretprobe);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000185324.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 11 errors, 20 warnings, 25 checks, 520 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000185324.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
