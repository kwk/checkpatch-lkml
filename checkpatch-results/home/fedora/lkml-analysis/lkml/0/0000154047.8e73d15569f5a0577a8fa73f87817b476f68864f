WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#34: 
Signed-Off-by: Richard Purdie <rpurdie@rpsys.net>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

ERROR:TRAILING_WHITESPACE: trailing whitespace
#46: FILE: include/asm-arm/arch-pxa/sharpsl.h:15:
+ * SharpSL LCD Driver $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#61: FILE: arch/arm/mach-pxa/corgi_lcd.c:4:
+ * Corgi/Spitz LCD Specific Code $

ERROR:SPACING: space required before the open parenthesis '('
#99: FILE: arch/arm/mach-pxa/corgi_lcd.c:149:
+	switch(mode) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#130: FILE: arch/arm/mach-pxa/corgi_lcd.c:239:
+	switch(mode) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#170: FILE: arch/arm/mach-pxa/corgi_lcd.c:306:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#172: FILE: arch/arm/mach-pxa/corgi_lcd.c:308:
+	.change=w100_lcdtg_init,
 	       ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#173: FILE: arch/arm/mach-pxa/corgi_lcd.c:309:
+	.suspend=w100_lcdtg_suspend,
 	        ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#174: FILE: arch/arm/mach-pxa/corgi_lcd.c:310:
+	.resume=w100_lcdtg_init,
 	       ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#185: FILE: arch/arm/mach-pxa/corgi_lcd.c:423:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#193: FILE: arch/arm/mach-pxa/corgi_lcd.c:431:
+void spitz_lcd_power(int on) $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#203: FILE: arch/arm/mach-pxa/corgi_lcd.c:441:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#207: FILE: arch/arm/mach-pxa/corgi_lcd.c:445:
+unsigned long inline corgi_get_hsync_len(void) $

CHECK:SPACING: No space is necessary after a cast
#207: FILE: arch/arm/mach-pxa/corgi_lcd.c:445:
+unsigned long inline corgi_get_hsync_len(void) 

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#207: FILE: arch/arm/mach-pxa/corgi_lcd.c:445:
+unsigned long inline corgi_get_hsync_len(void) 

The inline keyword should sit between storage class and type.

For example, the following segment::

  inline static int example_function(void)
  {
          ...
  }

should be::

  static inline int example_function(void)
  {
          ...
  }

ERROR:SPACING: space required before the open parenthesis '('
#221: FILE: arch/arm/mach-pxa/corgi_lcd.c:459:
+#define SyncHS(x)   while((GPLR(x) & GPIO_bit(x)) == 0); while((GPLR(x) & GPIO_bit(x)) != 0);

CHECK:CAMELCASE: Avoid CamelCase: <SyncHS>
#221: FILE: arch/arm/mach-pxa/corgi_lcd.c:459:
+#define SyncHS(x)   while((GPLR(x) & GPIO_bit(x)) == 0); while((GPLR(x) & GPIO_bit(x)) != 0);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#221: FILE: arch/arm/mach-pxa/corgi_lcd.c:459:
+#define SyncHS(x)   while((GPLR(x) & GPIO_bit(x)) == 0); while((GPLR(x) & GPIO_bit(x)) != 0);

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#221: FILE: arch/arm/mach-pxa/corgi_lcd.c:459:
+#define SyncHS(x)   while((GPLR(x) & GPIO_bit(x)) == 0); while((GPLR(x) & GPIO_bit(x)) != 0);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#221: FILE: arch/arm/mach-pxa/corgi_lcd.c:459:
+#define SyncHS(x)   while((GPLR(x) & GPIO_bit(x)) == 0); while((GPLR(x) & GPIO_bit(x)) != 0);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#223: FILE: arch/arm/mach-pxa/corgi_lcd.c:461:
+void inline corgi_wait_hsync(void) $

CHECK:SPACING: No space is necessary after a cast
#223: FILE: arch/arm/mach-pxa/corgi_lcd.c:461:
+void inline corgi_wait_hsync(void) 

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#223: FILE: arch/arm/mach-pxa/corgi_lcd.c:461:
+void inline corgi_wait_hsync(void) 

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#225: FILE: arch/arm/mach-pxa/corgi_lcd.c:463:
+	if (machine_is_corgi() || machine_is_shepherd() || machine_is_husky()) {
[...]
+	} else if (machine_is_spitz() || machine_is_akita() || machine_is_borzoi()) {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000154047.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 14 errors, 3 warnings, 7 checks, 178 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000154047.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
