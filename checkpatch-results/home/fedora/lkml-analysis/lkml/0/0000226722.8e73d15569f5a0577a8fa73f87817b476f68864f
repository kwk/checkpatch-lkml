WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#59: FILE: fs/affs/affs.h:1:
+#include <linux/types.h>

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#68: FILE: fs/affs/affs.h:10:
+#define AFFS_LC_SIZE		(AFFS_CACHE_SIZE/sizeof(u32)/2)
                     		                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#68: FILE: fs/affs/affs.h:10:
+#define AFFS_LC_SIZE		(AFFS_CACHE_SIZE/sizeof(u32)/2)
                     		                            ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#69: FILE: fs/affs/affs.h:11:
+#define AFFS_AC_SIZE		(AFFS_CACHE_SIZE/sizeof(struct affs_ext_key)/2)
                     		                ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#69: FILE: fs/affs/affs.h:11:
+#define AFFS_AC_SIZE		(AFFS_CACHE_SIZE/sizeof(struct affs_ext_key)/2)
                     		                                            ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#70: FILE: fs/affs/affs.h:12:
+#define AFFS_AC_MASK		(AFFS_AC_SIZE-1)
                     		             ^

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#98: FILE: fs/affs/affs.h:40:
+#if 0

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#170: FILE: fs/affs/affs.h:112:
+extern int	affs_insert_hash(struct inode *inode, struct buffer_head *bh);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#171: FILE: fs/affs/affs.h:113:
+extern int	affs_remove_hash(struct inode *dir, struct buffer_head *rem_bh);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#172: FILE: fs/affs/affs.h:114:
+extern int	affs_remove_header(struct dentry *dentry);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#173: FILE: fs/affs/affs.h:115:
+extern u32	affs_checksum_block(struct super_block *sb, struct buffer_head *bh);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#174: FILE: fs/affs/affs.h:116:
+extern void	affs_fix_checksum(struct super_block *sb, struct buffer_head *bh);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#175: FILE: fs/affs/affs.h:117:
+extern void	secs_to_datestamp(time_t secs, struct affs_date *ds);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#176: FILE: fs/affs/affs.h:118:
+extern mode_t	prot_to_mode(u32 prot);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#177: FILE: fs/affs/affs.h:119:
+extern void	mode_to_prot(struct inode *inode);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#178: FILE: fs/affs/affs.h:120:
+extern void	affs_error(struct super_block *sb, const char *function, const char *fmt, ...);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#179: FILE: fs/affs/affs.h:121:
+extern void	affs_warning(struct super_block *sb, const char *function, const char *fmt, ...);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#180: FILE: fs/affs/affs.h:122:
+extern int	affs_check_name(const unsigned char *name, int len);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#181: FILE: fs/affs/affs.h:123:
+extern int	affs_copy_name(unsigned char *bstr, struct dentry *dentry);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#185: FILE: fs/affs/affs.h:127:
+extern u32	affs_count_free_blocks(struct super_block *s);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#186: FILE: fs/affs/affs.h:128:
+extern void	affs_free_block(struct super_block *sb, u32 block);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#187: FILE: fs/affs/affs.h:129:
+extern u32	affs_alloc_block(struct inode *inode, u32 goal);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#188: FILE: fs/affs/affs.h:130:
+extern int	affs_init_bitmap(struct super_block *sb, int *flags);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#189: FILE: fs/affs/affs.h:131:
+extern void	affs_free_bitmap(struct super_block *sb);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#193: FILE: fs/affs/affs.h:135:
+extern int	affs_hash_name(struct super_block *sb, const u8 *name, unsigned int len);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#194: FILE: fs/affs/affs.h:136:
+extern struct dentry *affs_lookup(struct inode *dir, struct dentry *dentry, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nameidata *' should also have an identifier name
#194: FILE: fs/affs/affs.h:136:
+extern struct dentry *affs_lookup(struct inode *dir, struct dentry *dentry, struct nameidata *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#195: FILE: fs/affs/affs.h:137:
+extern int	affs_unlink(struct inode *dir, struct dentry *dentry);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#196: FILE: fs/affs/affs.h:138:
+extern int	affs_create(struct inode *dir, struct dentry *dentry, int mode, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nameidata *' should also have an identifier name
#196: FILE: fs/affs/affs.h:138:
+extern int	affs_create(struct inode *dir, struct dentry *dentry, int mode, struct nameidata *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#197: FILE: fs/affs/affs.h:139:
+extern int	affs_mkdir(struct inode *dir, struct dentry *dentry, int mode);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#198: FILE: fs/affs/affs.h:140:
+extern int	affs_rmdir(struct inode *dir, struct dentry *dentry);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#199: FILE: fs/affs/affs.h:141:
+extern int	affs_link(struct dentry *olddentry, struct inode *dir,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#201: FILE: fs/affs/affs.h:143:
+extern int	affs_symlink(struct inode *dir, struct dentry *dentry,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#203: FILE: fs/affs/affs.h:145:
+extern int	affs_rename(struct inode *old_dir, struct dentry *old_dentry,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#208: FILE: fs/affs/affs.h:150:
+extern unsigned long		 affs_parent_ino(struct inode *dir);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#209: FILE: fs/affs/affs.h:151:
+extern struct inode		*affs_new_inode(struct inode *dir);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#210: FILE: fs/affs/affs.h:152:
+extern int			 affs_notify_change(struct dentry *dentry, struct iattr *attr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#211: FILE: fs/affs/affs.h:153:
+extern void			 affs_put_inode(struct inode *inode);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#212: FILE: fs/affs/affs.h:154:
+extern void			 affs_delete_inode(struct inode *inode);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#213: FILE: fs/affs/affs.h:155:
+extern void			 affs_clear_inode(struct inode *inode);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#214: FILE: fs/affs/affs.h:156:
+extern void			 affs_read_inode(struct inode *inode);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#215: FILE: fs/affs/affs.h:157:
+extern int			 affs_write_inode(struct inode *inode, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#215: FILE: fs/affs/affs.h:157:
+extern int			 affs_write_inode(struct inode *inode, int);

WARNING:LONG_LINE: line length of 121 exceeds 100 columns
#216: FILE: fs/affs/affs.h:158:
+extern int			 affs_add_entry(struct inode *dir, struct inode *inode, struct dentry *dentry, s32 type);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#216: FILE: fs/affs/affs.h:158:
+extern int			 affs_add_entry(struct inode *dir, struct inode *inode, struct dentry *dentry, s32 type);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#221: FILE: fs/affs/affs.h:163:
+extern void	affs_truncate(struct inode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#221: FILE: fs/affs/affs.h:163:
+extern void	affs_truncate(struct inode *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#225: FILE: fs/affs/affs.h:167:
+extern void   affs_dir_truncate(struct inode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#225: FILE: fs/affs/affs.h:167:
+extern void   affs_dir_truncate(struct inode *);

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#229: FILE: fs/affs/affs.h:171:
+extern struct inode_operations	 affs_file_inode_operations;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#230: FILE: fs/affs/affs.h:172:
+extern struct inode_operations	 affs_dir_inode_operations;

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#231: FILE: fs/affs/affs.h:173:
+extern struct inode_operations   affs_symlink_inode_operations;

WARNING:CONST_STRUCT: struct file_operations should normally be const
#232: FILE: fs/affs/affs.h:174:
+extern struct file_operations	 affs_file_operations;

WARNING:CONST_STRUCT: struct file_operations should normally be const
#233: FILE: fs/affs/affs.h:175:
+extern struct file_operations	 affs_file_operations_ofs;

WARNING:CONST_STRUCT: struct file_operations should normally be const
#234: FILE: fs/affs/affs.h:176:
+extern struct file_operations	 affs_dir_operations;

WARNING:CONST_STRUCT: struct address_space_operations should normally be const
#235: FILE: fs/affs/affs.h:177:
+extern struct address_space_operations	 affs_symlink_aops;

WARNING:CONST_STRUCT: struct address_space_operations should normally be const
#236: FILE: fs/affs/affs.h:178:
+extern struct address_space_operations	 affs_aops;

WARNING:CONST_STRUCT: struct address_space_operations should normally be const
#237: FILE: fs/affs/affs.h:179:
+extern struct address_space_operations	 affs_aops_ofs;

WARNING:CONST_STRUCT: struct dentry_operations should normally be const
#239: FILE: fs/affs/affs.h:181:
+extern struct dentry_operations	 affs_dentry_operations;

WARNING:CONST_STRUCT: struct dentry_operations should normally be const
#240: FILE: fs/affs/affs.h:182:
+extern struct dentry_operations	 affs_dentry_operations_intl;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#247: FILE: fs/affs/affs.h:189:
+}
+static inline struct buffer_head *

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'affs_bread', this function's name, in a string
#250: FILE: fs/affs/affs.h:192:
+	pr_debug("affs_bread: %d\n", block);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#255: FILE: fs/affs/affs.h:197:
+}
+static inline struct buffer_head *

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'affs_getblk', this function's name, in a string
#258: FILE: fs/affs/affs.h:200:
+	pr_debug("affs_getblk: %d\n", block);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#263: FILE: fs/affs/affs.h:205:
+}
+static inline struct buffer_head *

WARNING:LINE_SPACING: Missing a blank line after declarations
#267: FILE: fs/affs/affs.h:209:
+	struct buffer_head *bh;
+	pr_debug("affs_getzeroblk: %d\n", block);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'affs_getzeroblk', this function's name, in a string
#267: FILE: fs/affs/affs.h:209:
+	pr_debug("affs_getzeroblk: %d\n", block);

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#271: FILE: fs/affs/affs.h:213:
+		memset(bh->b_data, 0 , sb->s_blocksize);
 		                     ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#278: FILE: fs/affs/affs.h:220:
+}
+static inline struct buffer_head *

WARNING:LINE_SPACING: Missing a blank line after declarations
#282: FILE: fs/affs/affs.h:224:
+	struct buffer_head *bh;
+	pr_debug("affs_getemptyblk: %d\n", block);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'affs_getemptyblk', this function's name, in a string
#282: FILE: fs/affs/affs.h:224:
+	pr_debug("affs_getemptyblk: %d\n", block);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#291: FILE: fs/affs/affs.h:233:
+}
+static inline void

CHECK:SPACING: No space is necessary after a cast
#295: FILE: fs/affs/affs.h:237:
+		pr_debug("affs_brelse: %lld\n", (long long) bh->b_blocknr);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'affs_brelse', this function's name, in a string
#295: FILE: fs/affs/affs.h:237:
+		pr_debug("affs_brelse: %lld\n", (long long) bh->b_blocknr);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#305: FILE: fs/affs/affs.h:247:
+}
+static inline void

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#317: FILE: fs/affs/affs.h:259:
+}
+static inline void

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#322: FILE: fs/affs/affs.h:264:
+}
+static inline void

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#327: FILE: fs/affs/affs.h:269:
+}
+static inline void

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#332: FILE: fs/affs/affs.h:274:
+}
+static inline void

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#337: FILE: fs/affs/affs.h:279:
+}
+static inline void

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000226722.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 26 warnings, 54 checks, 663 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000226722.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
