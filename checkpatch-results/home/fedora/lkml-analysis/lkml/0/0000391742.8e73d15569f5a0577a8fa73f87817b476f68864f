ERROR:TRAILING_WHITESPACE: trailing whitespace
#58: FILE: include/linux/csem.h:1:
+/* $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#58: FILE: include/linux/csem.h:1:
+/* 

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#72: FILE: include/linux/csem.h:15:
+#include <asm/atomic.h>

CHECK:LINE_SPACING: Please don't use multiple blank lines
#74: FILE: include/linux/csem.h:17:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#76: FILE: include/linux/csem.h:19:
+	spinlock_t	lock;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#85: FILE: include/linux/csem.h:28:
+#define __DECLARE_CSEMAPHORE_GENERIC(name,count) \
                                          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#85: FILE: include/linux/csem.h:28:
+#define __DECLARE_CSEMAPHORE_GENERIC(name,count) \
+	struct csemaphore name = __CSEMAPHORE_INITIALIZER(name,count)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#86: FILE: include/linux/csem.h:29:
+	struct csemaphore name = __CSEMAPHORE_INITIALIZER(name,count)
 	                                                      ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#88: FILE: include/linux/csem.h:31:
+extern void _down_count(struct csemaphore * , int);
                                             ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#88: FILE: include/linux/csem.h:31:
+extern void _down_count(struct csemaphore * , int);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct csemaphore *' should also have an identifier name
#88: FILE: include/linux/csem.h:31:
+extern void _down_count(struct csemaphore * , int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#88: FILE: include/linux/csem.h:31:
+extern void _down_count(struct csemaphore * , int);

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#89: FILE: include/linux/csem.h:32:
+extern void _up_count(struct csemaphore * , int);
                                           ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#89: FILE: include/linux/csem.h:32:
+extern void _up_count(struct csemaphore * , int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct csemaphore *' should also have an identifier name
#89: FILE: include/linux/csem.h:32:
+extern void _up_count(struct csemaphore * , int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#89: FILE: include/linux/csem.h:32:
+extern void _up_count(struct csemaphore * , int);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#93: FILE: include/linux/csem.h:36:
+	if (cnt) _down_count(sem, cnt);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#98: FILE: include/linux/csem.h:41:
+	if (cnt) _up_count(sem, cnt);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#106: FILE: lib/csem.c:1:
+/*

CHECK:LINE_SPACING: Please don't use multiple blank lines
#116: FILE: lib/csem.c:11:
+
+

WARNING:WAITQUEUE_ACTIVE: waitqueue_active without comment
#123: FILE: lib/csem.c:18:
+	if (!waitqueue_active(&sem->wait) && atomic_read(&sem->count) >= n) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#141: FILE: lib/csem.c:36:
+	if (waitqueue_active(&sem->wait) && atomic_read(&sem->count)) {
+		wake_up(&sem->wait);
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:WAITQUEUE_ACTIVE: waitqueue_active without comment
#141: FILE: lib/csem.c:36:
+	if (waitqueue_active(&sem->wait) && atomic_read(&sem->count)) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#147: FILE: lib/csem.c:42:
+
+

WARNING:BRACES: braces {} are not necessary for single statement blocks
#152: FILE: lib/csem.c:47:
+	if (waitqueue_active(&sem->wait)) {
+		wake_up(&sem->wait);
+	}

WARNING:WAITQUEUE_ACTIVE: waitqueue_active without comment
#152: FILE: lib/csem.c:47:
+	if (waitqueue_active(&sem->wait)) {

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#158: FILE: lib/csem.c:53:
+EXPORT_SYMBOL(_down_count);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#159: FILE: lib/csem.c:54:
+EXPORT_SYMBOL(_up_count);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#183: FILE: include/asm-i386/highmem.h:53:
+extern void * FASTCALL(kmap_highpages(struct page **page, int cnt));

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#183: FILE: include/asm-i386/highmem.h:53:
+extern void * FASTCALL(kmap_highpages(struct page **page, int cnt));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#184: FILE: include/asm-i386/highmem.h:54:
+extern void FASTCALL(kunmap_highpages(struct page **page, int cnt));

ERROR:SPACING: space required after that ',' (ctx:VxV)
#213: FILE: include/linux/highmem.h:74:
+#define kmap_highpages(pagep,cnt)	do { } while (0)
                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#214: FILE: include/linux/highmem.h:75:
+#define kunmap_highpages(pagep,cnt)	do { } while (0)
                               ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#301: FILE: mm/highmem.c:132:
+		if (page[i] >= highmem_start_page) hcnt++;

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#302: FILE: mm/highmem.c:133:
+	down_count(&pkmap_sem , hcnt);
 	                      ^

CHECK:SPACING: No space is necessary after a cast
#319: FILE: mm/highmem.c:144:
+		vaddr = (unsigned long) page[i]->virtual;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#326: FILE: mm/highmem.c:151:
+			BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:SPACING: No space is necessary after a cast
#351: FILE: mm/highmem.c:170:
+		vaddr = (unsigned long) page[i]->virtual;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#353: FILE: mm/highmem.c:172:
+			BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#380: FILE: mm/highmem.c:181:
+			BUG();

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#400: FILE: mm/highmem.c:199:
+	up_count(&pkmap_sem , release_cnt);
 	                    ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000391742.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 13 errors, 17 warnings, 11 checks, 356 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000391742.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
