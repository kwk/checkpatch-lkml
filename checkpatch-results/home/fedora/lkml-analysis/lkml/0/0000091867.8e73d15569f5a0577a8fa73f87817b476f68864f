WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#82: FILE: drivers/s390/char/tape_3590.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#83: FILE: drivers/s390/char/tape_3590.c:2:
+ *  drivers/s390/char/tape_3590.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:GLOBAL_INITIALISERS: do not initialise globals to NULL
#106: FILE: drivers/s390/char/tape_3590.c:25:
+debug_info_t *TAPE_DBF_AREA = NULL;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

WARNING:TYPO_SPELLING: 'fuctions' may be misspelled - perhaps 'functions'?
#110: FILE: drivers/s390/char/tape_3590.c:29:
+ * Error Recovery fuctions:
                   ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:SPACING: No space is necessary after a cast
#189: FILE: drivers/s390/char/tape_3590.c:108:
+		if (copy_from_user(&disp, (char __user *) arg, sizeof(disp)))

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#244: FILE: drivers/s390/char/tape_3590.c:163:
+	*(__u32 *) request->cpdata = count;

WARNING:SPLIT_STRING: quoted string split across lines
#332: FILE: drivers/s390/char/tape_3590.c:251:
+		DBF_EVENT(3, "T3590: work handler undefined for "
+			  "operation 0x%02x\n", p->op);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#347: FILE: drivers/s390/char/tape_3590.c:266:
+	if ((p = kzalloc(sizeof(*p), GFP_ATOMIC)) == NULL)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#369: FILE: drivers/s390/char/tape_3590.c:288:
+	unsigned off;

CHECK:SPACING: No space is necessary after a cast
#387: FILE: drivers/s390/char/tape_3590.c:306:
+	*(__u32 *) request->cpdata = start_block;

CHECK:SPACING: No space is necessary after a cast
#406: FILE: drivers/s390/char/tape_3590.c:325:
+				set_normalized_cda(ccw, (void *) __pa(dst));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#411: FILE: drivers/s390/char/tape_3590.c:330:
+				BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:SPACING: No space is necessary after a cast
#442: FILE: drivers/s390/char/tape_3590.c:361:
+	start_block = (__u32 *) request->cpdata;

CHECK:SPACING: No space is necessary after a cast
#482: FILE: drivers/s390/char/tape_3590.c:401:
+		sense = (struct tape_3590_med_sense *) request->cpdata;

WARNING:TYPO_SPELLING: 'fuction' may be misspelled - perhaps 'function'?
#503: FILE: drivers/s390/char/tape_3590.c:422:
+ * This fuction is called, when error recovery was successfull
         ^^^^^^^

WARNING:TYPO_SPELLING: 'successfull' may be misspelled - perhaps 'successful'?
#503: FILE: drivers/s390/char/tape_3590.c:422:
+ * This fuction is called, when error recovery was successfull
                                                    ^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'successfull' may be misspelled - perhaps 'successful'?
#508: FILE: drivers/s390/char/tape_3590.c:427:
+	DBF_EVENT(3, "Error Recovery successfull for %s\n",
 	                             ^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'fuction' may be misspelled - perhaps 'function'?
#514: FILE: drivers/s390/char/tape_3590.c:433:
+ * This fuction is called, when error recovery was not successfull
         ^^^^^^^

WARNING:TYPO_SPELLING: 'successfull' may be misspelled - perhaps 'successful'?
#514: FILE: drivers/s390/char/tape_3590.c:433:
+ * This fuction is called, when error recovery was not successfull
                                                        ^^^^^^^^^^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#544: FILE: drivers/s390/char/tape_3590.c:463:
+	if (irb->scsw.dstat == DEV_STAT_CHN_END)
[...]
+	else if (irb->scsw.dstat == 0x85)
[...]
+	else if (irb->scsw.dstat & DEV_STAT_ATTENTION)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#552: FILE: drivers/s390/char/tape_3590.c:471:
+	else {

CHECK:SPACING: No space is necessary after a cast
#569: FILE: drivers/s390/char/tape_3590.c:488:
+	sense = (struct tape_3590_sense *) irb->ecw;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#583: FILE: drivers/s390/char/tape_3590.c:502:
+		BUG();

WARNING:UNNECESSARY_BREAK: break is not useful after a return
#690: FILE: drivers/s390/char/tape_3590.c:609:
+		return tape_3590_erp_failed(device, request, irb, -EIO);
+		break;

CHECK:SPACING: No space is necessary after a cast
#706: FILE: drivers/s390/char/tape_3590.c:625:
+	sense = (struct tape_3590_sense *) irb->ecw;

WARNING:TYPO_SPELLING: 'partion' may be misspelled - perhaps 'partition'?
#713: FILE: drivers/s390/char/tape_3590.c:632:
+		PRINT_WARN("(%s): Data degraded in partion %i\n",
 		                                   ^^^^^^^

CHECK:SPACING: No space is necessary after a cast
#756: FILE: drivers/s390/char/tape_3590.c:675:
+	sense = (struct tape_3590_sense *) irb->ecw;

WARNING:SPLIT_STRING: quoted string split across lines
#804: FILE: drivers/s390/char/tape_3590.c:723:
+			PRINT_WARN("(%s): Repair will disable node "
+				   "0x%x on CU\n",

WARNING:SPLIT_STRING: quoted string split across lines
#809: FILE: drivers/s390/char/tape_3590.c:728:
+			PRINT_WARN("(%s): Repair will disable nodes "
+				   "(0x%x-0x%x) on CU\n",

WARNING:SPLIT_STRING: quoted string split across lines
#816: FILE: drivers/s390/char/tape_3590.c:735:
+			PRINT_WARN("(%s): Repair will disable cannel path "
+				   "0x%x on CU\n",

WARNING:SPLIT_STRING: quoted string split across lines
#821: FILE: drivers/s390/char/tape_3590.c:740:
+			PRINT_WARN("(%s): Repair will disable cannel paths "
+				   "(0x%x-0x%x) on CU\n",

WARNING:SPLIT_STRING: quoted string split across lines
#828: FILE: drivers/s390/char/tape_3590.c:747:
+			PRINT_WARN("(%s): Repair will disable device path "
+				   "0x%x on CU\n",

WARNING:SPLIT_STRING: quoted string split across lines
#833: FILE: drivers/s390/char/tape_3590.c:752:
+			PRINT_WARN("(%s): Repair will disable device paths "
+				   "(0x%x-0x%x) on CU\n",

WARNING:SPLIT_STRING: quoted string split across lines
#840: FILE: drivers/s390/char/tape_3590.c:759:
+			PRINT_WARN("(%s): Repair will disable library path "
+				   "0x%x on CU\n",

WARNING:SPLIT_STRING: quoted string split across lines
#845: FILE: drivers/s390/char/tape_3590.c:764:
+			PRINT_WARN("(%s): Repair will disable library paths "
+				   "(0x%x-0x%x) on CU\n",

CHECK:SPACING: No space is necessary after a cast
#867: FILE: drivers/s390/char/tape_3590.c:786:
+	sense = (struct tape_3590_sense *) irb->ecw;

WARNING:SPLIT_STRING: quoted string split across lines
#915: FILE: drivers/s390/char/tape_3590.c:834:
+			PRINT_WARN("(%s): Repair will disable channel path "
+				   "0x%x on DV\n",

WARNING:SPLIT_STRING: quoted string split across lines
#920: FILE: drivers/s390/char/tape_3590.c:839:
+			PRINT_WARN("(%s): Repair will disable channel path "
+				   "(0x%x-0x%x) on DV\n",

WARNING:SPLIT_STRING: quoted string split across lines
#927: FILE: drivers/s390/char/tape_3590.c:846:
+			PRINT_WARN("(%s): Repair will disable interface 0x%x "
+				   "on DV\n",

WARNING:SPLIT_STRING: quoted string split across lines
#932: FILE: drivers/s390/char/tape_3590.c:851:
+			PRINT_WARN("(%s): Repair will disable interfaces "
+				   "(0x%x-0x%x) on DV\n",

WARNING:SPLIT_STRING: quoted string split across lines
#939: FILE: drivers/s390/char/tape_3590.c:858:
+			PRINT_WARN("(%s): Repair will disable loader 0x%x "
+				   "on DV\n",

WARNING:SPLIT_STRING: quoted string split across lines
#944: FILE: drivers/s390/char/tape_3590.c:863:
+			PRINT_WARN("(%s): Repair will disable loader "
+				   "(0x%x-0x%x) on DV\n",

WARNING:SPLIT_STRING: quoted string split across lines
#955: FILE: drivers/s390/char/tape_3590.c:874:
+			PRINT_WARN("(%s): Repair will disable message "
+				   "display 0x%x on DV\n",

WARNING:SPLIT_STRING: quoted string split across lines
#960: FILE: drivers/s390/char/tape_3590.c:879:
+			PRINT_WARN("(%s): Repair will disable message "
+				   "displays (0x%x-0x%x) on DV\n",

CHECK:SPACING: No space is necessary after a cast
#981: FILE: drivers/s390/char/tape_3590.c:900:
+	sense = (struct tape_3590_sense *) irb->ecw;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sense->mc > 0'
#984: FILE: drivers/s390/char/tape_3590.c:903:
+	if ((sense->mc > 0) && (sense->mc < TAPE_3590_MAX_MSG)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sense->mc < TAPE_3590_MAX_MSG'
#984: FILE: drivers/s390/char/tape_3590.c:903:
+	if ((sense->mc > 0) && (sense->mc < TAPE_3590_MAX_MSG)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "tape_3590_msg[sense->mc]"
#985: FILE: drivers/s390/char/tape_3590.c:904:
+		if (tape_3590_msg[sense->mc] != NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:BRACES: Unbalanced braces around else statement
#988: FILE: drivers/s390/char/tape_3590.c:907:
+		else {

WARNING:SPLIT_STRING: quoted string split across lines
#997: FILE: drivers/s390/char/tape_3590.c:916:
+		PRINT_WARN("(%s): MIM SEV=%i, MC=%02x, ES=%x/%x, "
+			   "RC=%02x-%04x-%02x\n", device->cdev->dev.bus_id,

WARNING:SPLIT_STRING: quoted string split across lines
#1008: FILE: drivers/s390/char/tape_3590.c:927:
+		PRINT_WARN("(%s): IOSIM SEV=%i, DEVTYPE=3590/%02x, "
+			   "MC=%02x, ES=%x/%x, REF=0x%04x-0x%04x-0x%04x\n",

WARNING:SPLIT_STRING: quoted string split across lines
#1020: FILE: drivers/s390/char/tape_3590.c:939:
+		PRINT_WARN("(%s): DEVSIM SEV=%i, DEVTYPE=3590/%02x, "
+			   "MC=%02x, ES=%x/%x, REF=0x%04x-0x%04x-0x%04x\n",

CHECK:SPACING: No space is necessary after a cast
#1063: FILE: drivers/s390/char/tape_3590.c:982:
+	sense = (struct tape_3590_sense *) irb->ecw;

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1072: FILE: drivers/s390/char/tape_3590.c:991:
+	switch (sense->rc_rqc) {
+

WARNING:TYPO_SPELLING: 'meaningfull' may be misspelled - perhaps 'meaningful'?
#1111: FILE: drivers/s390/char/tape_3590.c:1030:
+		 * "device intervention" is not very meaningfull
 		                                     ^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'priviliged' may be misspelled - perhaps 'privileged'?
#1162: FILE: drivers/s390/char/tape_3590.c:1081:
+		PRINT_WARN("(%s): Another host has priviliged access to the "
 		                                   ^^^^^^^^^^

WARNING:SPLIT_STRING: quoted string split across lines
#1163: FILE: drivers/s390/char/tape_3590.c:1082:
+		PRINT_WARN("(%s): Another host has priviliged access to the "
+			   "tape device\n", device->cdev->dev.bus_id);

WARNING:SPLIT_STRING: quoted string split across lines
#1165: FILE: drivers/s390/char/tape_3590.c:1084:
+		PRINT_WARN("(%s): To solve the problem unload the current "
+			   "cartridge!\n", device->cdev->dev.bus_id);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!request"
#1179: FILE: drivers/s390/char/tape_3590.c:1098:
+	if (request == NULL)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'request->op == TO_WRI'
#1182: FILE: drivers/s390/char/tape_3590.c:1101:
+	if ((irb->scsw.dstat & DEV_STAT_UNIT_EXCEP) &&
+	    (irb->scsw.dstat & DEV_STAT_DEV_END) && (request->op == TO_WRI)) {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*data)...) over kmalloc(sizeof(struct tape_3590_disc_data)...)
#1230: FILE: drivers/s390/char/tape_3590.c:1149:
+	data = kmalloc(sizeof(struct tape_3590_disc_data),

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!data"
#1232: FILE: drivers/s390/char/tape_3590.c:1151:
+	if (data == NULL)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1237: FILE: drivers/s390/char/tape_3590.c:1156:
+	if ((rc = tape_std_assign(device)) == 0) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1239: FILE: drivers/s390/char/tape_3590.c:1158:
+		if ((rc = tape_3590_sense_medium(device)) != 0)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1387: FILE: drivers/s390/char/tape_3590.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#1388: FILE: drivers/s390/char/tape_3590.h:2:
+ *  drivers/s390/char/tape_3590.h

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1438: FILE: drivers/s390/char/tape_3590.h:52:
+struct tape_3590_sense {
+

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1502: FILE: drivers/s390/char/tape_3590.h:116:
+} __attribute__ ((packed));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1508: FILE: drivers/s390/char/tape_3590.h:122:
+} __attribute__ ((packed));

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#1517: FILE: drivers/s390/char/tape_std.h:2:
+ *  drivers/s390/char/tape_std.h

ERROR:CODE_INDENT: code indent should use tabs where possible
#1532: FILE: drivers/s390/char/tape_std.h:153:
+        tape_3480,$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1532: FILE: drivers/s390/char/tape_std.h:153:
+        tape_3480,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1533: FILE: drivers/s390/char/tape_std.h:154:
+        tape_3490,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1533: FILE: drivers/s390/char/tape_std.h:154:
+        tape_3490,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1534: FILE: drivers/s390/char/tape_std.h:155:
+        tape_3590,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1534: FILE: drivers/s390/char/tape_std.h:155:
+        tape_3590,$

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#1546: FILE: drivers/s390/Kconfig:186:
+config S390_TAPE_3590
+	tristate "Support for 3590 tape hardware"
+	depends on S390_TAPE
+	help
+	  Select this option if you want to access IBM 3590 magnetic
+	  tape subsystems and 100% compatibles.
+	  It is safe to say "Y" here.
 

Kconfig symbols should have a help text which fully describes
it.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000091867.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 7 errors, 46 warnings, 24 checks, 1486 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000091867.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
