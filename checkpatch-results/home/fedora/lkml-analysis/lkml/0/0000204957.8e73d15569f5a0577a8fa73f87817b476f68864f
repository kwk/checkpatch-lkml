WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#29: 
Signed-Off-By: Vivek Kashyap <vivk@us.ibm.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#30: 
Signed-Off-By: Gerrit Huizenga <gh@us.ibm.com>

ERROR:TRAILING_WHITESPACE: trailing whitespace
#73: FILE: fs/rcfs/socket_fs.c:1:
+/* ckrm_socketaq.c $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#73: FILE: fs/rcfs/socket_fs.c:1:
+/* ckrm_socketaq.c 

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#76: FILE: fs/rcfs/socket_fs.c:4:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#78: FILE: fs/rcfs/socket_fs.c:6:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#88: FILE: fs/rcfs/socket_fs.c:16:
+ *   $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#90: FILE: fs/rcfs/socket_fs.c:18:
+ * connection control is supported based on prioritized accept queues. $

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#98: FILE: fs/rcfs/socket_fs.c:26:
+extern int rcfs_unlink(struct inode *, struct dentry *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#98: FILE: fs/rcfs/socket_fs.c:26:
+extern int rcfs_unlink(struct inode *, struct dentry *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#98: FILE: fs/rcfs/socket_fs.c:26:
+extern int rcfs_unlink(struct inode *, struct dentry *);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#99: FILE: fs/rcfs/socket_fs.c:27:
+extern int rcfs_symlink(struct inode *, struct dentry *, const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#99: FILE: fs/rcfs/socket_fs.c:27:
+extern int rcfs_symlink(struct inode *, struct dentry *, const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#99: FILE: fs/rcfs/socket_fs.c:27:
+extern int rcfs_symlink(struct inode *, struct dentry *, const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#99: FILE: fs/rcfs/socket_fs.c:27:
+extern int rcfs_symlink(struct inode *, struct dentry *, const char *);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#100: FILE: fs/rcfs/socket_fs.c:28:
+extern int rcfs_mknod(struct inode *, struct dentry *, int mode, dev_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#100: FILE: fs/rcfs/socket_fs.c:28:
+extern int rcfs_mknod(struct inode *, struct dentry *, int mode, dev_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#100: FILE: fs/rcfs/socket_fs.c:28:
+extern int rcfs_mknod(struct inode *, struct dentry *, int mode, dev_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'dev_t' should also have an identifier name
#100: FILE: fs/rcfs/socket_fs.c:28:
+extern int rcfs_mknod(struct inode *, struct dentry *, int mode, dev_t);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#101: FILE: fs/rcfs/socket_fs.c:29:
+extern int rcfs_mkdir(struct inode *, struct dentry *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#101: FILE: fs/rcfs/socket_fs.c:29:
+extern int rcfs_mkdir(struct inode *, struct dentry *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#101: FILE: fs/rcfs/socket_fs.c:29:
+extern int rcfs_mkdir(struct inode *, struct dentry *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#101: FILE: fs/rcfs/socket_fs.c:29:
+extern int rcfs_mkdir(struct inode *, struct dentry *, int);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#102: FILE: fs/rcfs/socket_fs.c:30:
+extern int rcfs_rmdir(struct inode *, struct dentry *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#102: FILE: fs/rcfs/socket_fs.c:30:
+extern int rcfs_rmdir(struct inode *, struct dentry *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#102: FILE: fs/rcfs/socket_fs.c:30:
+extern int rcfs_rmdir(struct inode *, struct dentry *);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#103: FILE: fs/rcfs/socket_fs.c:31:
+extern int rcfs_rename(struct inode *, struct dentry *, struct inode *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#103: FILE: fs/rcfs/socket_fs.c:31:
+extern int rcfs_rename(struct inode *, struct dentry *, struct inode *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#103: FILE: fs/rcfs/socket_fs.c:31:
+extern int rcfs_rename(struct inode *, struct dentry *, struct inode *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#103: FILE: fs/rcfs/socket_fs.c:31:
+extern int rcfs_rename(struct inode *, struct dentry *, struct inode *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#103: FILE: fs/rcfs/socket_fs.c:31:
+extern int rcfs_rename(struct inode *, struct dentry *, struct inode *,

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#106: FILE: fs/rcfs/socket_fs.c:34:
+extern int rcfs_create_coredir(struct inode *, struct dentry *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#106: FILE: fs/rcfs/socket_fs.c:34:
+extern int rcfs_create_coredir(struct inode *, struct dentry *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#106: FILE: fs/rcfs/socket_fs.c:34:
+extern int rcfs_create_coredir(struct inode *, struct dentry *);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#107: FILE: fs/rcfs/socket_fs.c:35:
+int rcfs_sock_mkdir(struct inode *, struct dentry *, int mode);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#107: FILE: fs/rcfs/socket_fs.c:35:
+int rcfs_sock_mkdir(struct inode *, struct dentry *, int mode);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#107: FILE: fs/rcfs/socket_fs.c:35:
+int rcfs_sock_mkdir(struct inode *, struct dentry *, int mode);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#108: FILE: fs/rcfs/socket_fs.c:36:
+int rcfs_sock_rmdir(struct inode *, struct dentry *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#108: FILE: fs/rcfs/socket_fs.c:36:
+int rcfs_sock_rmdir(struct inode *, struct dentry *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#108: FILE: fs/rcfs/socket_fs.c:36:
+int rcfs_sock_rmdir(struct inode *, struct dentry *);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#110: FILE: fs/rcfs/socket_fs.c:38:
+int rcfs_sock_create_noperm(struct inode *, struct dentry *, int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#110: FILE: fs/rcfs/socket_fs.c:38:
+int rcfs_sock_create_noperm(struct inode *, struct dentry *, int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#110: FILE: fs/rcfs/socket_fs.c:38:
+int rcfs_sock_create_noperm(struct inode *, struct dentry *, int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#110: FILE: fs/rcfs/socket_fs.c:38:
+int rcfs_sock_create_noperm(struct inode *, struct dentry *, int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nameidata *' should also have an identifier name
#110: FILE: fs/rcfs/socket_fs.c:38:
+int rcfs_sock_create_noperm(struct inode *, struct dentry *, int,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#111: FILE: fs/rcfs/socket_fs.c:39:
+int rcfs_sock_create_noperm(struct inode *, struct dentry *, int,
+		       struct nameidata *);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#112: FILE: fs/rcfs/socket_fs.c:40:
+int rcfs_sock_unlink_noperm(struct inode *, struct dentry *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#112: FILE: fs/rcfs/socket_fs.c:40:
+int rcfs_sock_unlink_noperm(struct inode *, struct dentry *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#112: FILE: fs/rcfs/socket_fs.c:40:
+int rcfs_sock_unlink_noperm(struct inode *, struct dentry *);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#113: FILE: fs/rcfs/socket_fs.c:41:
+int rcfs_sock_mkdir_noperm(struct inode *, struct dentry *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#113: FILE: fs/rcfs/socket_fs.c:41:
+int rcfs_sock_mkdir_noperm(struct inode *, struct dentry *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#113: FILE: fs/rcfs/socket_fs.c:41:
+int rcfs_sock_mkdir_noperm(struct inode *, struct dentry *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#113: FILE: fs/rcfs/socket_fs.c:41:
+int rcfs_sock_mkdir_noperm(struct inode *, struct dentry *, int);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#114: FILE: fs/rcfs/socket_fs.c:42:
+int rcfs_sock_rmdir_noperm(struct inode *, struct dentry *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#114: FILE: fs/rcfs/socket_fs.c:42:
+int rcfs_sock_rmdir_noperm(struct inode *, struct dentry *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#114: FILE: fs/rcfs/socket_fs.c:42:
+int rcfs_sock_rmdir_noperm(struct inode *, struct dentry *);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#115: FILE: fs/rcfs/socket_fs.c:43:
+int rcfs_sock_mknod_noperm(struct inode *, struct dentry *, int, dev_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#115: FILE: fs/rcfs/socket_fs.c:43:
+int rcfs_sock_mknod_noperm(struct inode *, struct dentry *, int, dev_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#115: FILE: fs/rcfs/socket_fs.c:43:
+int rcfs_sock_mknod_noperm(struct inode *, struct dentry *, int, dev_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#115: FILE: fs/rcfs/socket_fs.c:43:
+int rcfs_sock_mknod_noperm(struct inode *, struct dentry *, int, dev_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'dev_t' should also have an identifier name
#115: FILE: fs/rcfs/socket_fs.c:43:
+int rcfs_sock_mknod_noperm(struct inode *, struct dentry *, int, dev_t);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#117: FILE: fs/rcfs/socket_fs.c:45:
+void rcfs_sock_set_directory(void);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#119: FILE: fs/rcfs/socket_fs.c:47:
+extern struct file_operations config_fileops,

WARNING:CONST_STRUCT: struct file_operations should normally be const
#119: FILE: fs/rcfs/socket_fs.c:47:
+extern struct file_operations config_fileops,

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#120: FILE: fs/rcfs/socket_fs.c:48:
+    members_fileops, shares_fileops, stats_fileops, target_fileops;$

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#122: FILE: fs/rcfs/socket_fs.c:50:
+struct inode_operations my_iops = {

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#134: FILE: fs/rcfs/socket_fs.c:62:
+struct inode_operations class_iops = {

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#146: FILE: fs/rcfs/socket_fs.c:74:
+struct inode_operations sub_iops = {

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#251: FILE: fs/rcfs/socket_fs.c:179:
+#define SOCK_MAX_MAGF (sizeof(rcfs_sock_magf)/sizeof(struct rcfs_magf))
                                              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#252: FILE: fs/rcfs/socket_fs.c:180:
+#define LAQ_MAX_SUBMAGF (sizeof(sub_magf)/sizeof(struct rcfs_magf))
                                          ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#286: FILE: fs/rcfs/socket_fs.c:214:
+		printk(KERN_ERR "rcfs_mkdir: error reaching parent\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#300: FILE: fs/rcfs/socket_fs.c:228:
+^I^Ircfs_get_inode_info(mfdentry->d_inode)->core = $

WARNING:INDENTED_LABEL: labels should not be indented
#336: FILE: fs/rcfs/socket_fs.c:264:
+      mkdir_err:

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#356: FILE: fs/rcfs/socket_fs.c:284:
+		   struct nameidata *nd)
 		                     ^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#356: FILE: fs/rcfs/socket_fs.c:284:
+rcfs_sock_create_noperm(struct inode *dir, struct dentry *dentry, int mode,
+		   struct nameidata *nd)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#386: FILE: include/linux/ckrm_net.h:1:
+/* ckrm_rc.h - Header file to be used by Resource controllers of CKRM

ERROR:TRAILING_WHITESPACE: trailing whitespace
#389: FILE: include/linux/ckrm_net.h:4:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#390: FILE: include/linux/ckrm_net.h:5:
+ * Provides data structures, macros and kernel API of CKRM for $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#394: FILE: include/linux/ckrm_net.h:9:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#462: FILE: init/Kconfig:181:
+^I  classes.  This is the base to enable socket based resource $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#464: FILE: init/Kconfig:183:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#465: FILE: init/Kconfig:184:
+^I  Say N if unsure.  $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#475: FILE: kernel/ckrm/ckrm_sockc.c:1:
+/* ckrm_sock.c - Class-based Kernel Resource Management (CKRM)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#481: FILE: kernel/ckrm/ckrm_sockc.c:7:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#482: FILE: kernel/ckrm/ckrm_sockc.c:8:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#483: FILE: kernel/ckrm/ckrm_sockc.c:9:
+ * Provides kernel API of CKRM for in-kernel,per-resource controllers $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#484: FILE: kernel/ckrm/ckrm_sockc.c:10:
+ * (one each for cpu, memory, io, network) and callbacks for $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#488: FILE: kernel/ckrm/ckrm_sockc.c:14:
+ * $

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#501: FILE: kernel/ckrm/ckrm_sockc.c:27:
+#include <asm/uaccess.h>

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#526: FILE: kernel/ckrm/ckrm_sockc.c:52:
+static struct ckrm_core_class *ckrm_sock_alloc_class(struct ckrm_core_class *parent,
+						const char *name);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#529: FILE: kernel/ckrm/ckrm_sockc.c:55:
+static int ckrm_sock_forced_reclassify(struct ckrm_core_class * target,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#530: FILE: kernel/ckrm/ckrm_sockc.c:56:
+static int ckrm_sock_forced_reclassify(struct ckrm_core_class * target,
+				  const char *resname);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#532: FILE: kernel/ckrm/ckrm_sockc.c:58:
+static int ckrm_sock_show_members(struct ckrm_core_class *core,
+			     struct seq_file *seq);

WARNING:RETURN_VOID: void function return statements are not generally useful
#574: FILE: kernel/ckrm/ckrm_sockc.c:100:
+	return;
+}

WARNING:RETURN_VOID: void function return statements are not generally useful
#581: FILE: kernel/ckrm/ckrm_sockc.c:107:
+	return;
+}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#584: FILE: kernel/ckrm/ckrm_sockc.c:110:
+ * Change the class of a netstruct $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#586: FILE: kernel/ckrm/ckrm_sockc.c:112:
+ * Change the task's task class  to "newcls" if the task's current $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#593: FILE: kernel/ckrm/ckrm_sockc.c:119:
+ckrm_sock_set_class(struct ckrm_net_struct *ns, struct ckrm_sock_class *newcls,
+	       struct ckrm_sock_class *oldcls, enum ckrm_event event)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'newcls == oldcls'
#600: FILE: kernel/ckrm/ckrm_sockc.c:126:
+	if ((newcls == oldcls) || (newcls == NULL)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'newcls == NULL'
#600: FILE: kernel/ckrm/ckrm_sockc.c:126:
+	if ((newcls == oldcls) || (newcls == NULL)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!newcls"
#600: FILE: kernel/ckrm/ckrm_sockc.c:126:
+	if ((newcls == oldcls) || (newcls == NULL)) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'old_res_class != new_res_class'
#618: FILE: kernel/ckrm/ckrm_sockc.c:144:
+		if (rcbs && rcbs->change_resclass
+		    && (old_res_class != new_res_class))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#619: FILE: kernel/ckrm/ckrm_sockc.c:145:
+		if (rcbs && rcbs->change_resclass
+		    && (old_res_class != new_res_class))

WARNING:RETURN_VOID: void function return statements are not generally useful
#625: FILE: kernel/ckrm/ckrm_sockc.c:151:
+	return;
+}

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'resid < 0'
#632: FILE: kernel/ckrm/ckrm_sockc.c:158:
+	if ((resid < 0) || (resid >= CKRM_MAX_RES_CTLRS)
+	    || ((rcbs = core->classtype->res_ctlrs[resid]) == NULL))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'resid >= CKRM_MAX_RES_CTLRS'
#632: FILE: kernel/ckrm/ckrm_sockc.c:158:
+	if ((resid < 0) || (resid >= CKRM_MAX_RES_CTLRS)
+	    || ((rcbs = core->classtype->res_ctlrs[resid]) == NULL))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#632: FILE: kernel/ckrm/ckrm_sockc.c:158:
+	if ((resid < 0) || (resid >= CKRM_MAX_RES_CTLRS)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#633: FILE: kernel/ckrm/ckrm_sockc.c:159:
+	if ((resid < 0) || (resid >= CKRM_MAX_RES_CTLRS)
+	    || ((rcbs = core->classtype->res_ctlrs[resid]) == NULL))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!newcls"
#686: FILE: kernel/ckrm/ckrm_sockc.c:212:
+	if (newcls == NULL) {

WARNING:RETURN_VOID: void function return statements are not generally useful
#718: FILE: kernel/ckrm/ckrm_sockc.c:244:
+	return;
+}

WARNING:RETURN_VOID: void function return statements are not generally useful
#748: FILE: kernel/ckrm/ckrm_sockc.c:274:
+	return;
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#761: FILE: kernel/ckrm/ckrm_sockc.c:287:
+static struct ckrm_core_class *ckrm_sock_alloc_class(struct ckrm_core_class *parent,
+						const char *name)

WARNING:LINE_SPACING: Missing a blank line after declarations
#764: FILE: kernel/ckrm/ckrm_sockc.c:290:
+	struct ckrm_sock_class *sockcls;
+	sockcls = kmalloc(sizeof(struct ckrm_sock_class), GFP_KERNEL);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*sockcls)...) over kmalloc(sizeof(struct ckrm_sock_class)...)
#764: FILE: kernel/ckrm/ckrm_sockc.c:290:
+	sockcls = kmalloc(sizeof(struct ckrm_sock_class), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sockcls"
#765: FILE: kernel/ckrm/ckrm_sockc.c:291:
+	if (sockcls == NULL)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#806: FILE: kernel/ckrm/ckrm_sockc.c:332:
+^Ickrm_release_core_class(core);^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#830: FILE: kernel/ckrm/ckrm_sockc.c:356:
+ckrm_sock_forced_reclassify_ns(struct ckrm_net_struct *tns,
+			  struct ckrm_core_class *core)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#837: FILE: kernel/ckrm/ckrm_sockc.c:363:
+	if (!ckrm_is_core_valid(core)) {
+		return rc;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#851: FILE: kernel/ckrm/ckrm_sockc.c:377:
+		printk(KERN_INFO "No such listener 0x%x:%d\n",

WARNING:BRACES: braces {} are not necessary for single statement blocks
#856: FILE: kernel/ckrm/ckrm_sockc.c:382:
+	if (!sk->sk_ckrm_ns) {
+		goto out;
+	}

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ns->ns_tsk->user != current->user'
#861: FILE: kernel/ckrm/ckrm_sockc.c:387:
+	if (!capable(CAP_NET_ADMIN) && (ns->ns_tsk->user != current->user)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'oldcls == NULL'
#868: FILE: kernel/ckrm/ckrm_sockc.c:394:
+	if ((oldcls == NULL) || (oldcls == newcls)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'oldcls == newcls'
#868: FILE: kernel/ckrm/ckrm_sockc.c:394:
+	if ((oldcls == NULL) || (oldcls == newcls)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!oldcls"
#868: FILE: kernel/ckrm/ckrm_sockc.c:394:
+	if ((oldcls == NULL) || (oldcls == newcls)) {

WARNING:INDENTED_LABEL: labels should not be indented
#882: FILE: kernel/ckrm/ckrm_sockc.c:408:
+      out:

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#888: FILE: kernel/ckrm/ckrm_sockc.c:414:
+
+}

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#900: FILE: kernel/ckrm/ckrm_sockc.c:426:
+char *v4toi(char *s, char c, __u32 * v)

CHECK:BRACES: braces {} should be used on all arms of this statement
#905: FILE: kernel/ckrm/ckrm_sockc.c:431:
+		if (*s == '.') {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#909: FILE: kernel/ckrm/ckrm_sockc.c:435:
+		} else

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!target"
#930: FILE: kernel/ckrm/ckrm_sockc.c:456:
+	if (target == NULL) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#931: FILE: kernel/ckrm/ckrm_sockc.c:457:
+		unsigned long id = simple_strtol(options,NULL,0);
 		                                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#931: FILE: kernel/ckrm/ckrm_sockc.c:457:
+		unsigned long id = simple_strtol(options,NULL,0);
 		                                             ^

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#931: FILE: kernel/ckrm/ckrm_sockc.c:457:
+		unsigned long id = simple_strtol(options,NULL,0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:LINE_SPACING: Missing a blank line after declarations
#932: FILE: kernel/ckrm/ckrm_sockc.c:458:
+		unsigned long id = simple_strtol(options,NULL,0);
+		if (!capable(CAP_NET_ADMIN))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#934: FILE: kernel/ckrm/ckrm_sockc.c:460:
+^I^Iif (id != 0) $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#936: FILE: kernel/ckrm/ckrm_sockc.c:462:
+		printk("ckrm_sock_class: reclassify all not net implemented\n");

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#948: FILE: kernel/ckrm/ckrm_sockc.c:474:
+		switch (token) {
+

CHECK:SPACING: No space is necessary after a cast
#959: FILE: kernel/ckrm/ckrm_sockc.c:485:
+			ns.ns_dport = (__u16) tmp;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#966: FILE: kernel/ckrm/ckrm_sockc.c:492:
+			printk(KERN_INFO "rcfs: IPV6 not supported yet\n");

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#967: FILE: kernel/ckrm/ckrm_sockc.c:493:
+			return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1009: FILE: kernel/ckrm/ckrm_sockc.c:535:
+			ckrm_sock_set_class(ns, &ckrm_sockclass_dflt_class, NULL,
+				       CKRM_EVENT_MANUAL);

WARNING:RETURN_VOID: void function return statements are not generally useful
#1015: FILE: kernel/ckrm/ckrm_sockc.c:541:
+	return;
+}

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1019: FILE: kernel/ckrm/ckrm_sockc.c:545:
+	printk("...... Initializing ClassType<%s> ........\n",

WARNING:TYPO_SPELLING: 'intialize' may be misspelled - perhaps 'initialize'?
#1021: FILE: kernel/ckrm/ckrm_sockc.c:547:
+	/* intialize the default class */
 	   ^^^^^^^^^

WARNING:TYPO_SPELLING: 'registeration' may be misspelled - perhaps 'registration'?
#1030: FILE: kernel/ckrm/ckrm_sockc.c:556:
+	 * note registeration of all resource controllers will be done
 	        ^^^^^^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1054: FILE: net/ipv4/tcp_ipv4.c:453:
+struct sock *tcp_v4_lookup_listener(u32 daddr,
 		unsigned short hnum, int dif)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1065: FILE: include/net/tcp.h:803:
 
+

ERROR:POINTER_LOCATION: "foo *		bar" should be "foo *bar"
#1073: FILE: include/net/tcp.h:934:
+extern struct sock *		tcp_v4_lookup_listener(u32 daddr,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1073: FILE: include/net/tcp.h:934:
+extern struct sock *		tcp_v4_lookup_listener(u32 daddr,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1074: FILE: include/net/tcp.h:935:
+extern struct sock *		tcp_v4_lookup_listener(u32 daddr,
+						    unsigned short hnum,

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000204957.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 27 errors, 87 warnings, 36 checks, 993 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000204957.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
