WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#34: 
based on top of the Simple Topology API I posted a few moments ago.  The calls 

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#96: FILE: include/linux/init_task.h:62:
+    memblk_binding:	{ MEMBLK_NO_BINDING, MPOL_STRICT },		\
                   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:INDENTED_LABEL: labels should not be indented
#96: FILE: include/linux/init_task.h:62:
+    memblk_binding:	{ MEMBLK_NO_BINDING, MPOL_STRICT },		\

WARNING:NEW_TYPEDEFS: do not add new typedefs
#115: FILE: include/linux/membind.h:38:
+typedef unsigned long		memblk_bitmask_t;

CHECK:SPACING: No space is necessary after a cast
#116: FILE: include/linux/membind.h:39:
+#define MEMBLK_NO_BINDING	((memblk_bitmask_t) 0) /* A '0' means use the memblk

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#117: FILE: include/linux/membind.h:40:
+#define MEMBLK_NO_BINDING	((memblk_bitmask_t) 0) /* A '0' means use the memblk
+							  and a '1' means *don't* */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#117: FILE: include/linux/membind.h:40:
+							  and a '1' means *don't* */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#120: FILE: include/linux/membind.h:43:
+#define MPOL_LOOSE^I1   /* Memory will be allocated according to binding, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#121: FILE: include/linux/membind.h:44:
+#define MPOL_LOOSE	1   /* Memory will be allocated according to binding, 
+				but can fall back to other memory blocks if necessary. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#121: FILE: include/linux/membind.h:44:
+				but can fall back to other memory blocks if necessary. */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#126: FILE: include/linux/membind.h:49:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:NEW_TYPEDEFS: do not add new typedefs
#127: FILE: include/linux/membind.h:50:
+typedef struct memblk_list {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#133: FILE: include/linux/membind.h:56:
+
+

WARNING:FUNCTION_ARGUMENTS: function definition argument 'memblk_bitmask_t' should also have an identifier name
#134: FILE: include/linux/membind.h:57:
+int set_memblk_binding(memblk_bitmask_t, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#134: FILE: include/linux/membind.h:57:
+int set_memblk_binding(memblk_bitmask_t, int);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#158: FILE: include/linux/mmzone.h:175:
+#if defined (CONFIG_DISCONTIGMEM) || defined (CONFIG_MEMBIND)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#158: FILE: include/linux/mmzone.h:175:
+#if defined (CONFIG_DISCONTIGMEM) || defined (CONFIG_MEMBIND)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#200: FILE: include/linux/sched.h:308:
+^I$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#257: FILE: kernel/membind.c:59:
+	/* If the new binding expands upon the old binding, the caller
+	   must have CAP_SYS_NICE. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#257: FILE: kernel/membind.c:59:
+	   must have CAP_SYS_NICE. */

CHECK:SPACING: No space is necessary after a cast
#309: FILE: kernel/sys.c:1296:
+			error = (long) set_memblk_binding((memblk_bitmask_t)arg2, (int)arg3);

CHECK:SPACING: No space is necessary after a cast
#312: FILE: kernel/sys.c:1299:
+			error = (long) get_memblk_binding();

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0UL
#327: FILE: mm/numa.c:14:
+unsigned long memblk_online_map = 0UL;  /* Similar to cpu_online_map, but for memory blocks */

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

ERROR:SPACING: space required before the open brace '{'
#346: FILE: mm/numa.c:80:
+	if (test_and_set_bit(num_online_memblks() + 1, &memblk_online_map)){

WARNING:TYPO_SPELLING: 'alread' may be misspelled - perhaps 'already'?
#347: FILE: mm/numa.c:81:
+		printk("memblk alread counted?!?!\n");
 		               ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#347: FILE: mm/numa.c:81:
+		printk("memblk alread counted?!?!\n");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#348: FILE: mm/numa.c:82:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 17)
#380: FILE: mm/numa.c:123:
+	if ((current->memblk_binding.behavior == MPOL_LOOSE) &&
[...]
+		 search_twice = 1;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'current->memblk_binding.behavior == MPOL_LOOSE'
#380: FILE: mm/numa.c:123:
+	if ((current->memblk_binding.behavior == MPOL_LOOSE) &&
+	    (current->memblk_binding.bitmask != MEMBLK_NO_BINDING))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'current->memblk_binding.bitmask != MEMBLK_NO_BINDING'
#380: FILE: mm/numa.c:123:
+	if ((current->memblk_binding.behavior == MPOL_LOOSE) &&
+	    (current->memblk_binding.bitmask != MEMBLK_NO_BINDING))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#385: FILE: mm/numa.c:128:
+search_through_memblks: $

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#399: FILE: mm/numa.c:133:
+			if ((ret = alloc_pages_pgdat(temp, gfp_mask, order)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#406: FILE: mm/numa.c:140:
+			if ((ret = alloc_pages_pgdat(temp, gfp_mask, order)))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#412: FILE: mm/numa.c:146:
+^I^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#413: FILE: mm/numa.c:147:
+^I^I * If we failed to find a "preferred" memblk, try again $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#425: FILE: mm/numa.c:159:
+struct page * _alloc_pages(unsigned int gfp_mask, unsigned int order)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#456: FILE: mm/page_alloc.c:44:
+extern unsigned long memblk_online_map;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000447716.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 11 errors, 19 warnings, 7 checks, 358 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000447716.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
