ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#40: 
--- a/include/linux/tcp.h	Wed Apr 28 22:41:05 2004

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#59: FILE: include/linux/tcp.h:194:
+#define NUM_ACCEPT_QUEUES^I8 ^I/* Must be power of 2 */$

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#184: FILE: include/net/tcp.h:1746:
+		}
+		else {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#184: FILE: include/net/tcp.h:1746:
+		else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#190: FILE: include/net/tcp.h:1752:
+}
+static inline void tcp_acceptq_queue(struct sock *sk, struct open_request *req,

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#191: FILE: include/net/tcp.h:1753:
+static inline void tcp_acceptq_queue(struct sock *sk, struct open_request *req,
+					 struct sock *child)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#193: FILE: include/net/tcp.h:1755:
+	tcp_set_acceptq(tcp_sk(sk),req);
 	                          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#195: FILE: include/net/tcp.h:1757:
+	tcp_acceptq_added(sk,req->acceptq_class);
 	                    ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#270: FILE: kernel/ckrm/ckrm_listenaq.c:1:
+/* ckrm_socketaq.c - accept queue resource controller

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#273: FILE: kernel/ckrm/ckrm_listenaq.c:4:
+ * $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#275: FILE: kernel/ckrm/ckrm_listenaq.c:6:
+ * $

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#303: FILE: kernel/ckrm/ckrm_listenaq.c:34:
+#define hnode_2_core(ptr) \
+                ((ptr) ? container_of(ptr, struct ckrm_core_class, hnode) : NULL)

ERROR:CODE_INDENT: code indent should use tabs where possible
#304: FILE: kernel/ckrm/ckrm_listenaq.c:35:
+                ((ptr) ? container_of(ptr, struct ckrm_core_class, hnode) : NULL)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#304: FILE: kernel/ckrm/ckrm_listenaq.c:35:
+                ((ptr) ? container_of(ptr, struct ckrm_core_class, hnode) : NULL)$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#306: FILE: kernel/ckrm/ckrm_listenaq.c:37:
+
+

WARNING:NEW_TYPEDEFS: do not add new typedefs
#313: FILE: kernel/ckrm/ckrm_listenaq.c:44:
+typedef struct ckrm_laq_res {

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#314: FILE: kernel/ckrm/ckrm_listenaq.c:45:
+	spinlock_t		reslock;

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#316: FILE: kernel/ckrm/ckrm_listenaq.c:47:
+^Istruct ckrm_shares ^Ishares;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#319: FILE: kernel/ckrm/ckrm_listenaq.c:50:
+^Iint ^I^I^Imy_depth;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#320: FILE: kernel/ckrm/ckrm_listenaq.c:51:
+^Iint ^I^I^Imy_id;$

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#325: FILE: kernel/ckrm/ckrm_listenaq.c:56:
+extern	struct ckrm_core_class *rcfs_create_under_netroot(char *, int, int);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#325: FILE: kernel/ckrm/ckrm_listenaq.c:56:
+extern	struct ckrm_core_class *rcfs_create_under_netroot(char *, int, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#325: FILE: kernel/ckrm/ckrm_listenaq.c:56:
+extern	struct ckrm_core_class *rcfs_create_under_netroot(char *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#325: FILE: kernel/ckrm/ckrm_listenaq.c:56:
+extern	struct ckrm_core_class *rcfs_create_under_netroot(char *, int, int);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#326: FILE: kernel/ckrm/ckrm_listenaq.c:57:
+extern struct ckrm_core_class *rcfs_make_core(struct dentry *, $

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#326: FILE: kernel/ckrm/ckrm_listenaq.c:57:
+extern struct ckrm_core_class *rcfs_make_core(struct dentry *, 

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#326: FILE: kernel/ckrm/ckrm_listenaq.c:57:
+extern struct ckrm_core_class *rcfs_make_core(struct dentry *, 

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ckrm_core_class *' should also have an identifier name
#326: FILE: kernel/ckrm/ckrm_listenaq.c:57:
+extern struct ckrm_core_class *rcfs_make_core(struct dentry *, 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#327: FILE: kernel/ckrm/ckrm_listenaq.c:58:
+extern struct ckrm_core_class *rcfs_make_core(struct dentry *, 
+						struct ckrm_core_class * ) ;

WARNING:SPACING: space prohibited before semicolon
#327: FILE: kernel/ckrm/ckrm_listenaq.c:58:
+						struct ckrm_core_class * ) ;

ERROR:SPACING: space prohibited before that close parenthesis ')'
#327: FILE: kernel/ckrm/ckrm_listenaq.c:58:
+						struct ckrm_core_class * ) ;

ERROR:CODE_INDENT: code indent should use tabs where possible
#332: FILE: kernel/ckrm/ckrm_listenaq.c:63:
+        atomic_inc(&res->refcnt);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#332: FILE: kernel/ckrm/ckrm_listenaq.c:63:
+        atomic_inc(&res->refcnt);$

WARNING:RETURN_VOID: void function return statements are not generally useful
#334: FILE: kernel/ckrm/ckrm_listenaq.c:65:
+	return;
+}

WARNING:RETURN_VOID: void function return statements are not generally useful
#342: FILE: kernel/ckrm/ckrm_listenaq.c:73:
+	return;
+}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#359: FILE: kernel/ckrm/ckrm_listenaq.c:90:
+static int $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#363: FILE: kernel/ckrm/ckrm_listenaq.c:94:
+^Iwhile(*s) $

WARNING:LINE_SPACING: Missing a blank line after declarations
#363: FILE: kernel/ckrm/ckrm_listenaq.c:94:
+	int k = 0;
+	while(*s) 

ERROR:SPACING: space required before the open parenthesis '('
#363: FILE: kernel/ckrm/ckrm_listenaq.c:94:
+	while(*s) 

ERROR:CODE_INDENT: code indent should use tabs where possible
#371: FILE: kernel/ckrm/ckrm_listenaq.c:102:
+        char *p = (char *)c->name;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#371: FILE: kernel/ckrm/ckrm_listenaq.c:102:
+        char *p = (char *)c->name;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#373: FILE: kernel/ckrm/ckrm_listenaq.c:104:
+        while(*p)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#373: FILE: kernel/ckrm/ckrm_listenaq.c:104:
+        while(*p)$

ERROR:SPACING: space required before the open parenthesis '('
#373: FILE: kernel/ckrm/ckrm_listenaq.c:104:
+        while(*p)

ERROR:CODE_INDENT: code indent should use tabs where possible
#374: FILE: kernel/ckrm/ckrm_listenaq.c:105:
+                p++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#374: FILE: kernel/ckrm/ckrm_listenaq.c:105:
+                p++;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#375: FILE: kernel/ckrm/ckrm_listenaq.c:106:
+        while( *p != '/' && p != c->name)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#375: FILE: kernel/ckrm/ckrm_listenaq.c:106:
+        while( *p != '/' && p != c->name)$

ERROR:SPACING: space prohibited after that open parenthesis '('
#375: FILE: kernel/ckrm/ckrm_listenaq.c:106:
+        while( *p != '/' && p != c->name)

ERROR:SPACING: space required before the open parenthesis '('
#375: FILE: kernel/ckrm/ckrm_listenaq.c:106:
+        while( *p != '/' && p != c->name)

ERROR:CODE_INDENT: code indent should use tabs where possible
#376: FILE: kernel/ckrm/ckrm_listenaq.c:107:
+                p--;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#376: FILE: kernel/ckrm/ckrm_listenaq.c:107:
+                p--;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#378: FILE: kernel/ckrm/ckrm_listenaq.c:109:
+        return ++p;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#378: FILE: kernel/ckrm/ckrm_listenaq.c:109:
+        return ++p;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#392: FILE: kernel/ckrm/ckrm_listenaq.c:123:
+^Iif (core == core->classtype->default_class)    $

CHECK:BRACES: braces {} should be used on all arms of this statement
#392: FILE: kernel/ckrm/ckrm_listenaq.c:123:
+	if (core == core->classtype->default_class)    
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#394: FILE: kernel/ckrm/ckrm_listenaq.c:125:
+	else {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#413: FILE: kernel/ckrm/ckrm_listenaq.c:144:
+^I^I// rescls in place, now initialize contents other than $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#427: FILE: kernel/ckrm/ckrm_listenaq.c:158:
+^Iif (!res) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#447: FILE: kernel/ckrm/ckrm_listenaq.c:178:
+^Ilaq_res_put(res);^I$

WARNING:RETURN_VOID: void function return statements are not generally useful
#450: FILE: kernel/ckrm/ckrm_listenaq.c:181:
+	return;
+}

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#453: FILE: kernel/ckrm/ckrm_listenaq.c:184:
+ * ^I^I^ISHARES^I^I^I^I^I        ***$

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#459: FILE: kernel/ckrm/ckrm_listenaq.c:190:
+{
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#463: FILE: kernel/ckrm/ckrm_listenaq.c:194:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#464: FILE: kernel/ckrm/ckrm_listenaq.c:195:
+^Iif (my_res->my_depth < 2) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#466: FILE: kernel/ckrm/ckrm_listenaq.c:197:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#471: FILE: kernel/ckrm/ckrm_listenaq.c:202:
+^Ilist_for_each_entry(ns, &core->objlist,ckrm_link) { $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#471: FILE: kernel/ckrm/ckrm_listenaq.c:202:
+	list_for_each_entry(ns, &core->objlist,ckrm_link) { 
 	                                      ^

CHECK:SPACING: space preferred before that '/' (ctx:VxE)
#475: FILE: kernel/ckrm/ckrm_listenaq.c:206:
+			       parent->shares.total_guarantee/
 			                                     ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#476: FILE: kernel/ckrm/ckrm_listenaq.c:207:
+^I^I^I^Iparent->shares.unused_guarantee;^I       $

CHECK:SPACING: space preferred before that '/' (ctx:VxE)
#479: FILE: kernel/ckrm/ckrm_listenaq.c:210:
+		       my_res->shares.total_guarantee/
 		                                     ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#480: FILE: kernel/ckrm/ckrm_listenaq.c:211:
+^I^I^Iparent->shares.my_guarantee;^I       $

WARNING:RETURN_VOID: void function return statements are not generally useful
#484: FILE: kernel/ckrm/ckrm_listenaq.c:215:
+	return;
+}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#491: FILE: kernel/ckrm/ckrm_listenaq.c:222:
+^Istruct ckrm_hnode *chnode; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#494: FILE: kernel/ckrm/ckrm_listenaq.c:225:
+^Iif (!res) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#497: FILE: kernel/ckrm/ckrm_listenaq.c:228:
+^Iif (!res->pcore) { $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#499: FILE: kernel/ckrm/ckrm_listenaq.c:230:
+		printk(KERN_ERR "socketaq internal inconsistency\n");

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#508: FILE: kernel/ckrm/ckrm_listenaq.c:239:
+	shares->my_limit = shares->max_limit = CKRM_SHARE_UNCHANGED;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#511: FILE: kernel/ckrm/ckrm_listenaq.c:242:
+	switch (res->my_depth) {
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#512: FILE: kernel/ckrm/ckrm_listenaq.c:243:
+	case 0: printk(KERN_ERR "socketaq bad entry\n");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#512: FILE: kernel/ckrm/ckrm_listenaq.c:243:
+	case 0: printk(KERN_ERR "socketaq bad entry\n");

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#532: FILE: kernel/ckrm/ckrm_listenaq.c:263:
+			list_for_each_entry(chnode,
+					&res->core->hnode.children,siblings){

ERROR:SPACING: space required after that ',' (ctx:VxV)
#532: FILE: kernel/ckrm/ckrm_listenaq.c:263:
+					&res->core->hnode.children,siblings){
 					                          ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#533: FILE: kernel/ckrm/ckrm_listenaq.c:264:
+				child=hnode_2_core(chnode)->res_class[my_resid];
 				     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#534: FILE: kernel/ckrm/ckrm_listenaq.c:265:
+				laq_set_aq_values(child,res,(child->my_id==1));
 				                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#534: FILE: kernel/ckrm/ckrm_listenaq.c:265:
+				laq_set_aq_values(child,res,(child->my_id==1));
 				                           ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#534: FILE: kernel/ckrm/ckrm_listenaq.c:265:
+				laq_set_aq_values(child,res,(child->my_id==1));
 				                                         ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#545: FILE: kernel/ckrm/ckrm_listenaq.c:276:
+		if (!rc) {
+			laq_set_aq_values(res,parent,1);
+		}

ERROR:SPACING: space required after that ',' (ctx:VxV)
#546: FILE: kernel/ckrm/ckrm_listenaq.c:277:
+			laq_set_aq_values(res,parent,1);
 			                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#546: FILE: kernel/ckrm/ckrm_listenaq.c:277:
+			laq_set_aq_values(res,parent,1);
 			                            ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#561: FILE: kernel/ckrm/ckrm_listenaq.c:292:
+^Iif (!res) $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#568: FILE: kernel/ckrm/ckrm_listenaq.c:299:
+ * ^I^I^ISTATS^I^I^I^I^I^I***$

WARNING:RETURN_VOID: void function return statements are not generally useful
#594: FILE: kernel/ckrm/ckrm_listenaq.c:325:
+	return;
+}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#597: FILE: kernel/ckrm/ckrm_listenaq.c:328:
+laq_get_aq_stats(ckrm_laq_res_t *pres, ckrm_laq_res_t *mres, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#598: FILE: kernel/ckrm/ckrm_listenaq.c:329:
+laq_get_aq_stats(ckrm_laq_res_t *pres, ckrm_laq_res_t *mres, 
+					struct tcp_acceptq_info *taq)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#609: FILE: kernel/ckrm/ckrm_listenaq.c:340:
+		z = a+1;
 		     ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#615: FILE: kernel/ckrm/ckrm_listenaq.c:346:
+^Ilist_for_each_entry(ns, &core->objlist,ckrm_link) { $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#615: FILE: kernel/ckrm/ckrm_listenaq.c:346:
+	list_for_each_entry(ns, &core->objlist,ckrm_link) { 
 	                                      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxW)
#617: FILE: kernel/ckrm/ckrm_listenaq.c:348:
+		for (; a< z; a++) {
 		        ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#627: FILE: kernel/ckrm/ckrm_listenaq.c:358:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#628: FILE: kernel/ckrm/ckrm_listenaq.c:359:
+static int  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#636: FILE: kernel/ckrm/ckrm_listenaq.c:367:
+^Iif (!res) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#638: FILE: kernel/ckrm/ckrm_listenaq.c:369:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#639: FILE: kernel/ckrm/ckrm_listenaq.c:370:
+^Iif (!res->pcore) { $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#641: FILE: kernel/ckrm/ckrm_listenaq.c:372:
+		printk(KERN_ERR "socketaq internal inconsistency\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#647: FILE: kernel/ckrm/ckrm_listenaq.c:378:
+		printk(KERN_ERR "socketaq internal fs inconsistency\n");

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#654: FILE: kernel/ckrm/ckrm_listenaq.c:385:
+	switch (res->my_depth) {
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#656: FILE: kernel/ckrm/ckrm_listenaq.c:387:
+	case 0: printk(KERN_ERR "socket class bad entry\n");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#656: FILE: kernel/ckrm/ckrm_listenaq.c:387:
+	case 0: printk(KERN_ERR "socket class bad entry\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#672: FILE: kernel/ckrm/ckrm_listenaq.c:403:
+^Icase 3: $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#685: FILE: kernel/ckrm/ckrm_listenaq.c:416:
+ * The socket lock is held. $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#694: FILE: kernel/ckrm/ckrm_listenaq.c:425:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#695: FILE: kernel/ckrm/ckrm_listenaq.c:426:
+^Iif (res->my_depth != 2) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#696: FILE: kernel/ckrm/ckrm_listenaq.c:427:
+^I^Ireturn;^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#702: FILE: kernel/ckrm/ckrm_listenaq.c:433:
+^I^Istruct sock *sk = ns->ns_sk; $

CHECK:SPACING: space preferred before that '/' (ctx:VxE)
#709: FILE: kernel/ckrm/ckrm_listenaq.c:440:
+		tp->acceptq[0].aq_ratio = res->shares.total_guarantee/
 		                                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#711: FILE: kernel/ckrm/ckrm_listenaq.c:442:
+		list_for_each_entry(chnode,&res->core->hnode.children,siblings){
 		                          ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#711: FILE: kernel/ckrm/ckrm_listenaq.c:442:
+		list_for_each_entry(chnode,&res->core->hnode.children,siblings){
 		                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#711: FILE: kernel/ckrm/ckrm_listenaq.c:442:
+		list_for_each_entry(chnode,&res->core->hnode.children,siblings){
 		                                                     ^

ERROR:SPACING: space required before the open brace '{'
#711: FILE: kernel/ckrm/ckrm_listenaq.c:442:
+		list_for_each_entry(chnode,&res->core->hnode.children,siblings){

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#715: FILE: kernel/ckrm/ckrm_listenaq.c:446:
+			tp->acceptq[reschild->my_id].aq_ratio=
 			                                     ^

CHECK:SPACING: space preferred before that '/' (ctx:VxE)
#716: FILE: kernel/ckrm/ckrm_listenaq.c:447:
+				reschild->shares.total_guarantee/
 				                                ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#722: FILE: kernel/ckrm/ckrm_listenaq.c:453:
+^I$

WARNING:RETURN_VOID: void function return statements are not generally useful
#724: FILE: kernel/ckrm/ckrm_listenaq.c:455:
+	return;
+}

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#728: FILE: kernel/ckrm/ckrm_listenaq.c:459:
+	.resid		   = -1 , // dynamically assigned
 	      		        ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!clstype"
#745: FILE: kernel/ckrm/ckrm_listenaq.c:476:
+	if (clstype == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#746: FILE: kernel/ckrm/ckrm_listenaq.c:477:
+		printk(KERN_INFO " Unknown ckrm classtype<socket_class>");

ERROR:SPACING: space required after that ',' (ctx:VxO)
#751: FILE: kernel/ckrm/ckrm_listenaq.c:482:
+		resid = ckrm_register_res_ctlr(clstype,&laq_rcbs);
 		                                      ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#751: FILE: kernel/ckrm/ckrm_listenaq.c:482:
+		resid = ckrm_register_res_ctlr(clstype,&laq_rcbs);
 		                                       ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#754: FILE: kernel/ckrm/ckrm_listenaq.c:485:
+		printk("........init_ckrm_listen_aq_res -> %d\n",my_resid);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#754: FILE: kernel/ckrm/ckrm_listenaq.c:485:
+		printk("........init_ckrm_listen_aq_res -> %d\n",my_resid);
 		                                                ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#758: FILE: kernel/ckrm/ckrm_listenaq.c:489:
+}^I$

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#758: FILE: kernel/ckrm/ckrm_listenaq.c:489:
+
+}	

CHECK:LINE_SPACING: Please don't use multiple blank lines
#767: FILE: kernel/ckrm/ckrm_listenaq.c:498:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#780: FILE: net/ipv4/Kconfig:363:
+config ACCEPT_QUEUES $

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#780: FILE: net/ipv4/Kconfig:363:
+config ACCEPT_QUEUES 
+	bool "IP: TCP Multiple accept queues support"
+	depends on INET && NETFILTER
+	---help---
+	  Support multiple accept queues per listening socket. If you say Y
+	  here, multiple accept queues will be configured per listening
+	  socket.
+	  
+	  Each queue is mapped to a priority class. Incoming connection 
+	  requests can be classified (see iptables(8), MARK target), depending
+	  on the packet's src/dest address or other parameters, into one of 
+	  the priority classes. The requests are then queued to the relevant
+	  accept queue. 
+
+	  Each of the queues can be assigned a weight. The accept()ance 
+	  of packets is then scheduled in accordance with the weight 
+	  assigned to the priority class. 
+	  
+	  Be sure to enable "Network packet filtering" if you wish
+	  to use this feature.
+
+	  If unsure, say N.
+
 source "net/ipv4/ipvs/Kconfig"
 

Kconfig symbols should have a help text which fully describes
it.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#787: FILE: net/ipv4/Kconfig:370:
+^I  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#788: FILE: net/ipv4/Kconfig:371:
+^I  Each queue is mapped to a priority class. Incoming connection $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#790: FILE: net/ipv4/Kconfig:373:
+^I  on the packet's src/dest address or other parameters, into one of $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#792: FILE: net/ipv4/Kconfig:375:
+^I  accept queue. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#794: FILE: net/ipv4/Kconfig:377:
+^I  Each of the queues can be assigned a weight. The accept()ance $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#795: FILE: net/ipv4/Kconfig:378:
+^I  of packets is then scheduled in accordance with the weight $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#796: FILE: net/ipv4/Kconfig:379:
+^I  assigned to the priority class. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#797: FILE: net/ipv4/Kconfig:380:
+^I  $

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#833: FILE: net/ipv4/tcp.c:550:
+	for (i=0; i < NUM_ACCEPT_QUEUES; i++) {
 	      ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#836: FILE: net/ipv4/tcp.c:553:
+^I^Itp->acceptq[i].aq_wait_time = 0; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#837: FILE: net/ipv4/tcp.c:554:
+^I^Itp->acceptq[i].aq_qcount = 0; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#838: FILE: net/ipv4/tcp.c:555:
+^I^Itp->acceptq[i].aq_count = 0; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#840: FILE: net/ipv4/tcp.c:557:
+^I^I^Itp->acceptq[i].aq_valid = 1; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#841: FILE: net/ipv4/tcp.c:558:
+^I^I^Itp->acceptq[i].aq_ratio = 1; $

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#843: FILE: net/ipv4/tcp.c:560:
+		}
+		else {

CHECK:BRACES: Unbalanced braces around else statement
#843: FILE: net/ipv4/tcp.c:560:
+		else {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#844: FILE: net/ipv4/tcp.c:561:
+^I^I^Itp->acceptq[i].aq_valid = 0; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#845: FILE: net/ipv4/tcp.c:562:
+^I^I^Itp->acceptq[i].aq_ratio = 0; $

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#875: FILE: net/ipv4/tcp.c:636:
+		tp->acceptq[i].aq_head = tp->acceptq[i].aq_tail = NULL;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#899: FILE: net/ipv4/tcp.c:2274:
+#ifdef CONFIG_ACCEPT_QUEUES^I$

ERROR:SPACING: space required before the open parenthesis '('
#930: FILE: net/ipv4/tcp.c:2312:
+	while(!tp->acceptq[first].aq_head) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#932: FILE: net/ipv4/tcp.c:2314:
+^I^Ifirst = (first+1) & ~NUM_ACCEPT_QUEUES; $

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#932: FILE: net/ipv4/tcp.c:2314:
+		first = (first+1) & ~NUM_ACCEPT_QUEUES; 
 		              ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#934: FILE: net/ipv4/tcp.c:2316:
+        req = tp->acceptq[first].aq_head;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#934: FILE: net/ipv4/tcp.c:2316:
+        req = tp->acceptq[first].aq_head;$

ERROR:SPACING: spaces required around that '+=' (ctx:VxV)
#937: FILE: net/ipv4/tcp.c:2319:
+	tp->acceptq[first].aq_wait_time+=(jiffies - req->acceptq_time_stamp);
 	                               ^

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#939: FILE: net/ipv4/tcp.c:2321:
+	for (prev_class= first-1 ; prev_class >=0; prev_class--)
 	               ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#939: FILE: net/ipv4/tcp.c:2321:
+	for (prev_class= first-1 ; prev_class >=0; prev_class--)
 	                      ^

ERROR:SPACING: spaces required around that '>=' (ctx:WxV)
#939: FILE: net/ipv4/tcp.c:2321:
+	for (prev_class= first-1 ; prev_class >=0; prev_class--)
 	                                      ^

ERROR:SPACING: spaces required around that '>=' (ctx:VxV)
#942: FILE: net/ipv4/tcp.c:2324:
+	if (prev_class>=0)
 	              ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#943: FILE: net/ipv4/tcp.c:2325:
+^I^Itp->acceptq[prev_class].aq_tail->dl_next = req->dl_next; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#944: FILE: net/ipv4/tcp.c:2326:
+^Ielse $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#947: FILE: net/ipv4/tcp.c:2329:
+^Iif (req == tp->acceptq[first].aq_tail) $

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#948: FILE: net/ipv4/tcp.c:2330:
+		tp->acceptq[first].aq_head = tp->acceptq[first].aq_tail = NULL;

ERROR:SPACING: space required before the open brace '{'
#952: FILE: net/ipv4/tcp.c:2334:
+	if((++(tp->acceptq[first].aq_cnt)) >= tp->acceptq[first].aq_ratio){

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tp->acceptq[first].aq_cnt'
#952: FILE: net/ipv4/tcp.c:2334:
+	if((++(tp->acceptq[first].aq_cnt)) >= tp->acceptq[first].aq_ratio){

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:SPACING: space required before the open parenthesis '('
#952: FILE: net/ipv4/tcp.c:2334:
+	if((++(tp->acceptq[first].aq_cnt)) >= tp->acceptq[first].aq_ratio){

ERROR:TRAILING_WHITESPACE: trailing whitespace
#955: FILE: net/ipv4/tcp.c:2337:
+^I}^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#958: FILE: net/ipv4/tcp.c:2340:
+ ^Inewsk = req->sk;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#958: FILE: net/ipv4/tcp.c:2340:
+ ^Inewsk = req->sk;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#958: FILE: net/ipv4/tcp.c:2340:
+ ^Inewsk = req->sk;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#966: FILE: net/ipv4/tcp.c:2510:
+^I^I$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#971: FILE: net/ipv4/tcp.c:2515:
+			int i,j;
 			     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#976: FILE: net/ipv4/tcp.c:2520:
+			if (copy_from_user(share_wt,optval, optlen)) {
 			                           ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#982: FILE: net/ipv4/tcp.c:2526:
+				if (share_wt[i]) {
[...]
+				else
[...]

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#983: FILE: net/ipv4/tcp.c:2527:
+					if (!j)
[...]
+					else if (share_wt[i] < j) {
[...]

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#990: FILE: net/ipv4/tcp.c:2534:
+				}
+				else

ERROR:TRAILING_WHITESPACE: trailing whitespace
#992: FILE: net/ipv4/tcp.c:2536:
+^I^I^I^I^I$

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#993: FILE: net/ipv4/tcp.c:2537:
+					
+			}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#995: FILE: net/ipv4/tcp.c:2539:
+^I^I^I^I/* Class 0 is always valid. If nothing is $

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1002: FILE: net/ipv4/tcp.c:2546:
+			for (i=0; i < NUM_ACCEPT_QUEUES; i++)  {
 			      ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1003: FILE: net/ipv4/tcp.c:2547:
+				tp->acceptq[i].aq_ratio = share_wt[i]/j;
 				                                     ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1030: FILE: net/ipv4/tcp.c:2693:
+		for(i=0; i < NUM_ACCEPT_QUEUES; i++) {
 		     ^

ERROR:SPACING: space required before the open parenthesis '('
#1030: FILE: net/ipv4/tcp.c:2693:
+		for(i=0; i < NUM_ACCEPT_QUEUES; i++) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1031: FILE: net/ipv4/tcp.c:2694:
+^I^I^Itinfo[i].acceptq_wait_time = $

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1032: FILE: net/ipv4/tcp.c:2695:
+				tp->acceptq[i].aq_wait_time/(HZ/USER_HZ);
 				                           ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1032: FILE: net/ipv4/tcp.c:2695:
+				tp->acceptq[i].aq_wait_time/(HZ/USER_HZ);
 				                               ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1035: FILE: net/ipv4/tcp.c:2698:
+^I^I^Iif (tp->acceptq[i].aq_valid) $

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1036: FILE: net/ipv4/tcp.c:2699:
+				tinfo[i].acceptq_shares=tp->acceptq[i].aq_ratio;
 				                       ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1042: FILE: net/ipv4/tcp.c:2705:
+^I^Iif (put_user(len, optlen)) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1044: FILE: net/ipv4/tcp.c:2707:
+^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1047: FILE: net/ipv4/tcp.c:2710:
+^I^I$

ERROR:SPACING: spaces required around that ':' (ctx:VxE)
#1093: FILE: net/ipv4/tcp_ipv4.c:1448:
+		((skb->nfmark > NUM_ACCEPT_QUEUES) ? NUM_ACCEPT_QUEUES:
 		                                                      ^

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#1096: FILE: net/ipv4/tcp_ipv4.c:1451:
+	/*
+	 * Accept only if the class has shares set or if the default class

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1100: FILE: net/ipv4/tcp_ipv4.c:1455:
+^I^Iif (tcp_sk(sk)->acceptq[0].aq_valid) $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1153: FILE: net/ipv4/tcp_minisocks.c:792:
+		memset(newtp->acceptq, 0,sizeof(newtp->acceptq));
 		                        ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1171: FILE: net/ipv4/tcp_timer.c:503:
+^I       $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1172: FILE: net/ipv4/tcp_timer.c:504:
+^I^Ifor(i=0; i < NUM_ACCEPT_QUEUES; i++) $

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1172: FILE: net/ipv4/tcp_timer.c:504:
+		for(i=0; i < NUM_ACCEPT_QUEUES; i++) 
 		     ^

ERROR:SPACING: space required before the open parenthesis '('
#1172: FILE: net/ipv4/tcp_timer.c:504:
+		for(i=0; i < NUM_ACCEPT_QUEUES; i++) 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1174: FILE: net/ipv4/tcp_timer.c:506:
+^I^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1190: FILE: net/ipv4/tcp_timer.c:537:
+^I^I^I         ^I^Ilopt->qlen_young[req->acceptq_class]--;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1190: FILE: net/ipv4/tcp_timer.c:537:
+^I^I^I         ^I^Ilopt->qlen_young[req->acceptq_class]--;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1192: FILE: net/ipv4/tcp_timer.c:539:
+^I^I^I         ^I^Ilopt->qlen_young--;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1192: FILE: net/ipv4/tcp_timer.c:539:
+^I^I^I         ^I^Ilopt->qlen_young--;$

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#1194: FILE: net/ipv4/tcp_timer.c:541:
+					timeo = min((TCP_TIMEOUT_INIT << req->retrans), TCP_RTO_MAX);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (32, 48)
#1201: FILE: net/ipv4/tcp_timer.c:552:
 				if (req->retrans == 0)
[...]
+			         		lopt->qlen_young[req->acceptq_class]--;

ERROR:CODE_INDENT: code indent should use tabs where possible
#1204: FILE: net/ipv4/tcp_timer.c:554:
+^I^I^I         ^I^Ilopt->qlen_young[req->acceptq_class]--;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1204: FILE: net/ipv4/tcp_timer.c:554:
+^I^I^I         ^I^Ilopt->qlen_young[req->acceptq_class]--;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1206: FILE: net/ipv4/tcp_timer.c:556:
+^I^I^I         ^I^Ilopt->qlen_young--;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1206: FILE: net/ipv4/tcp_timer.c:556:
+^I^I^I         ^I^Ilopt->qlen_young--;$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000285280.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 130 errors, 51 warnings, 36 checks, 1114 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000285280.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
