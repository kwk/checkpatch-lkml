CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#60: FILE: include/linux/sched.h:448:
+extern void sched_balance_exec(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#61: FILE: include/linux/sched.h:449:
+extern void node_nr_running_init(void);

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#112: FILE: kernel/sched.c:193:
+static atomic_t node_nr_running[MAX_NUMNODES] ____cacheline_maxaligned_in_smp =
+	{[0 ...MAX_NUMNODES-1] = ATOMIC_INIT(0)};

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#112: FILE: kernel/sched.c:193:
+	{[0 ...MAX_NUMNODES-1] = ATOMIC_INIT(0)};
 	                   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#133: FILE: kernel/sched.c:214:
+# define nr_running_inc(rq)	do { (rq)->nr_running++; } while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#134: FILE: kernel/sched.c:215:
+# define nr_running_dec(rq)	do { (rq)->nr_running--; } while (0)

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#215: FILE: kernel/sched.c:716:
+	for (i = 0; i < NR_CPUS; ++i) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#239: FILE: kernel/sched.c:740:
+^Iint i, node = this_node, load, this_load, maxload;       $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#241: FILE: kernel/sched.c:742:
+	this_load = maxload = atomic_read(&node_nr_running[this_node]);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#246: FILE: kernel/sched.c:747:
+		if (load > maxload && (4*load > ((5*4*this_load)/4))) {
 		                        ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#246: FILE: kernel/sched.c:747:
+		if (load > maxload && (4*load > ((5*4*this_load)/4))) {
 		                                   ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#246: FILE: kernel/sched.c:747:
+		if (load > maxload && (4*load > ((5*4*this_load)/4))) {
 		                                     ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#246: FILE: kernel/sched.c:747:
+		if (load > maxload && (4*load > ((5*4*this_load)/4))) {
 		                                                ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#259: FILE: kernel/sched.c:760:
+	for (i = 0; i < NR_CPUS; i++)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#278: FILE: kernel/sched.c:795:
+static inline runqueue_t *find_busiest_queue(runqueue_t *this_rq, int this_cpu,
+		int idle, int *imbalance, unsigned long cpumask)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#329: FILE: kernel/sched.c:919:
+	busiest = find_busiest_queue(this_rq, this_cpu, idle,
+			&imbalance, cpumask);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000400228.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 2 errors, 4 warnings, 10 checks, 277 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000400228.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
