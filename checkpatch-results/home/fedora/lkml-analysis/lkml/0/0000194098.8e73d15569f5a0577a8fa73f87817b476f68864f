WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#87: FILE: drivers/i2c/chips/lm92.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#125: FILE: drivers/i2c/chips/lm92.c:39:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#126: FILE: drivers/i2c/chips/lm92.c:40:
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#135: FILE: drivers/i2c/chips/lm92.c:49:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#137: FILE: drivers/i2c/chips/lm92.c:51:
+/* The LM92 and MAX6635 have 2 two-state pins for address selection,
+   resulting in 4 possible addresses. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#137: FILE: drivers/i2c/chips/lm92.c:51:
+   resulting in 4 possible addresses. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#155: FILE: drivers/i2c/chips/lm92.c:69:
+/* The LM92 uses signed 13-bit values with LSB = 0.0625 degree Celsius,
+   left-justified in 16-bit registers. No rounding is done, with such

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#158: FILE: drivers/i2c/chips/lm92.c:72:
+   for limits is 1 degree Celsius). */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#193: FILE: drivers/i2c/chips/lm92.c:107:
+
+

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#206: FILE: drivers/i2c/chips/lm92.c:120:
+	if (time_after(jiffies, data->last_updated + HZ)
+	 || !data->valid) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#209: FILE: drivers/i2c/chips/lm92.c:123:
+		data->temp1_input = swab16(i2c_smbus_read_word_data(client,
+				    LM92_REG_TEMP));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#211: FILE: drivers/i2c/chips/lm92.c:125:
+		data->temp1_hyst = swab16(i2c_smbus_read_word_data(client,
+				    LM92_REG_TEMP_HYST));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#213: FILE: drivers/i2c/chips/lm92.c:127:
+		data->temp1_crit = swab16(i2c_smbus_read_word_data(client,
+				    LM92_REG_TEMP_CRIT));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#215: FILE: drivers/i2c/chips/lm92.c:129:
+		data->temp1_min = swab16(i2c_smbus_read_word_data(client,
+				    LM92_REG_TEMP_LOW));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#217: FILE: drivers/i2c/chips/lm92.c:131:
+		data->temp1_max = swab16(i2c_smbus_read_word_data(client,
+				    LM92_REG_TEMP_HIGH));

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'value' may be better as '(value)' to avoid precedence issues
#228: FILE: drivers/i2c/chips/lm92.c:142:
+#define show_temp(value) \
+static ssize_t show_##value(struct device *dev, char *buf) \
+{ \
+	struct lm92_data *data = lm92_update_device(dev); \
+	return sprintf(buf, "%d\n", TEMP_FROM_REG(data->value)); \
+}

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#234: FILE: drivers/i2c/chips/lm92.c:148:
+}
+show_temp(temp1_input);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'value' - possible side-effects?
#239: FILE: drivers/i2c/chips/lm92.c:153:
+#define set_temp(value, reg) \
+static ssize_t set_##value(struct device *dev, const char *buf, \
+	size_t count) \
+{ \
+	struct i2c_client *client = to_i2c_client(dev); \
+	struct lm92_data *data = i2c_get_clientdata(client); \
+	long val = simple_strtol(buf, NULL, 10); \
+	data->value = TEMP_TO_REG(val); \
+	i2c_smbus_write_word_data(client, reg, swab16(data->value)); \
+	return count; \
+}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'value' may be better as '(value)' to avoid precedence issues
#239: FILE: drivers/i2c/chips/lm92.c:153:
+#define set_temp(value, reg) \
+static ssize_t set_##value(struct device *dev, const char *buf, \
+	size_t count) \
+{ \
+	struct i2c_client *client = to_i2c_client(dev); \
+	struct lm92_data *data = i2c_get_clientdata(client); \
+	long val = simple_strtol(buf, NULL, 10); \
+	data->value = TEMP_TO_REG(val); \
+	i2c_smbus_write_word_data(client, reg, swab16(data->value)); \
+	return count; \
+}

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#245: FILE: drivers/i2c/chips/lm92.c:159:
+	long val = simple_strtol(buf, NULL, 10); \

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#250: FILE: drivers/i2c/chips/lm92.c:164:
+}
+set_temp(temp1_crit, LM92_REG_TEMP_CRIT);

WARNING:LINE_SPACING: Missing a blank line after declarations
#257: FILE: drivers/i2c/chips/lm92.c:171:
+	struct lm92_data *data = lm92_update_device(dev);
+	return sprintf(buf, "%d\n", TEMP_FROM_REG(data->temp1_crit)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#260: FILE: drivers/i2c/chips/lm92.c:174:
+}
+static ssize_t show_temp1_max_hyst(struct device *dev, char *buf)

WARNING:LINE_SPACING: Missing a blank line after declarations
#263: FILE: drivers/i2c/chips/lm92.c:177:
+	struct lm92_data *data = lm92_update_device(dev);
+	return sprintf(buf, "%d\n", TEMP_FROM_REG(data->temp1_max)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#266: FILE: drivers/i2c/chips/lm92.c:180:
+}
+static ssize_t show_temp1_min_hyst(struct device *dev, char *buf)

WARNING:LINE_SPACING: Missing a blank line after declarations
#269: FILE: drivers/i2c/chips/lm92.c:183:
+	struct lm92_data *data = lm92_update_device(dev);
+	return sprintf(buf, "%d\n", TEMP_FROM_REG(data->temp1_min)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#274: FILE: drivers/i2c/chips/lm92.c:188:
+static ssize_t set_temp1_crit_hyst(struct device *dev, const char *buf,
+	size_t count)

WARNING:LINE_SPACING: Missing a blank line after declarations
#278: FILE: drivers/i2c/chips/lm92.c:192:
+	struct lm92_data *data = i2c_get_clientdata(client);
+	data->temp1_hyst = TEMP_FROM_REG(data->temp1_crit) -

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#279: FILE: drivers/i2c/chips/lm92.c:193:
+			   simple_strtol(buf, NULL, 10);

WARNING:LINE_SPACING: Missing a blank line after declarations
#288: FILE: drivers/i2c/chips/lm92.c:202:
+	struct lm92_data *data = lm92_update_device(dev);
+	return sprintf(buf, "%d\n", ALARMS_FROM_REG(data->temp1_input));

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'show_temp1_input' to 'temp1_input_show'
#289: FILE: drivers/i2c/chips/lm92.c:203:
+}

The function names used in DEVICE_ATTR is unusual.
Typically, the store and show functions are used with <attr>_store and
<attr>_show, where <attr> is a named attribute variable of the device.

Consider the following examples::

  static DEVICE_ATTR(type, 0444, type_show, NULL);
  static DEVICE_ATTR(power, 0644, power_show, power_store);

The function names should preferably follow the above pattern.

See: https://www.kernel.org/doc/html/latest/driver-api/driver-model/device.html#attributes

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#291: FILE: drivers/i2c/chips/lm92.c:205:
+static DEVICE_ATTR(temp1_input, S_IRUGO, show_temp1_input, NULL);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'show_temp1_crit' to 'temp1_crit_show' 'set_temp1_crit' to 'temp1_crit_store'
#292: FILE: drivers/i2c/chips/lm92.c:206:
+static DEVICE_ATTR(temp1_crit, S_IWUSR | S_IRUGO, show_temp1_crit,

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR | S_IRUGO' are not preferred. Consider using octal permissions '0644'.
#292: FILE: drivers/i2c/chips/lm92.c:206:
+static DEVICE_ATTR(temp1_crit, S_IWUSR | S_IRUGO, show_temp1_crit,

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'show_temp1_crit_hyst' to 'temp1_crit_hyst_show' 'set_temp1_crit_hyst' to 'temp1_crit_hyst_store'
#294: FILE: drivers/i2c/chips/lm92.c:208:
+static DEVICE_ATTR(temp1_crit_hyst, S_IWUSR | S_IRUGO, show_temp1_crit_hyst,

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR | S_IRUGO' are not preferred. Consider using octal permissions '0644'.
#294: FILE: drivers/i2c/chips/lm92.c:208:
+static DEVICE_ATTR(temp1_crit_hyst, S_IWUSR | S_IRUGO, show_temp1_crit_hyst,

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'show_temp1_min' to 'temp1_min_show' 'set_temp1_min' to 'temp1_min_store'
#296: FILE: drivers/i2c/chips/lm92.c:210:
+static DEVICE_ATTR(temp1_min, S_IWUSR | S_IRUGO, show_temp1_min,

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR | S_IRUGO' are not preferred. Consider using octal permissions '0644'.
#296: FILE: drivers/i2c/chips/lm92.c:210:
+static DEVICE_ATTR(temp1_min, S_IWUSR | S_IRUGO, show_temp1_min,

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'show_temp1_min_hyst' to 'temp1_min_hyst_show'
#298: FILE: drivers/i2c/chips/lm92.c:212:
+static DEVICE_ATTR(temp1_min_hyst, S_IRUGO, show_temp1_min_hyst, NULL);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#298: FILE: drivers/i2c/chips/lm92.c:212:
+static DEVICE_ATTR(temp1_min_hyst, S_IRUGO, show_temp1_min_hyst, NULL);

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'show_temp1_max' to 'temp1_max_show' 'set_temp1_max' to 'temp1_max_store'
#299: FILE: drivers/i2c/chips/lm92.c:213:
+static DEVICE_ATTR(temp1_max, S_IWUSR | S_IRUGO, show_temp1_max,

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR | S_IRUGO' are not preferred. Consider using octal permissions '0644'.
#299: FILE: drivers/i2c/chips/lm92.c:213:
+static DEVICE_ATTR(temp1_max, S_IWUSR | S_IRUGO, show_temp1_max,

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'show_temp1_max_hyst' to 'temp1_max_hyst_show'
#301: FILE: drivers/i2c/chips/lm92.c:215:
+static DEVICE_ATTR(temp1_max_hyst, S_IRUGO, show_temp1_max_hyst, NULL);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#301: FILE: drivers/i2c/chips/lm92.c:215:
+static DEVICE_ATTR(temp1_max_hyst, S_IRUGO, show_temp1_max_hyst, NULL);

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'show_alarms' to 'alarms_show'
#302: FILE: drivers/i2c/chips/lm92.c:216:
+static DEVICE_ATTR(alarms, S_IRUGO, show_alarms, NULL);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#302: FILE: drivers/i2c/chips/lm92.c:216:
+static DEVICE_ATTR(alarms, S_IRUGO, show_alarms, NULL);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#304: FILE: drivers/i2c/chips/lm92.c:218:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#321: FILE: drivers/i2c/chips/lm92.c:235:
+/* The MAX6635 has no identification register, so we have to use tricks
+   to identify it reliably. This is somewhat slow.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#324: FILE: drivers/i2c/chips/lm92.c:238:
+   reported not to be true. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#332: FILE: drivers/i2c/chips/lm92.c:246:
+	/* No manufacturer ID register, so a read from this address will
+	   always return the last read value. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#332: FILE: drivers/i2c/chips/lm92.c:246:
+	   always return the last read value. */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#339: FILE: drivers/i2c/chips/lm92.c:253:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#349: FILE: drivers/i2c/chips/lm92.c:263:
+	/* Registers addresses were found to cycle over 16-byte boundaries.
+	   We don't test all registers with all offsets so as to save some

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#351: FILE: drivers/i2c/chips/lm92.c:265:
+	   non-MAX6635 chips. */

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#353: FILE: drivers/i2c/chips/lm92.c:267:
+	for (i=16; i<96; i*=2) {
 	      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#353: FILE: drivers/i2c/chips/lm92.c:267:
+	for (i=16; i<96; i*=2) {
 	            ^

ERROR:SPACING: spaces required around that '*=' (ctx:VxV)
#353: FILE: drivers/i2c/chips/lm92.c:267:
+	for (i=16; i<96; i*=2) {
 	                  ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#355: FILE: drivers/i2c/chips/lm92.c:269:
+^I^I ^I^I LM92_REG_TEMP_HYST + i - 16)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#355: FILE: drivers/i2c/chips/lm92.c:269:
+^I^I ^I^I LM92_REG_TEMP_HYST + i - 16)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#355: FILE: drivers/i2c/chips/lm92.c:269:
+		if (temp_hyst != i2c_smbus_read_word_data(client,
+		 		 LM92_REG_TEMP_HYST + i - 16)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#356: FILE: drivers/i2c/chips/lm92.c:270:
+		 		 LM92_REG_TEMP_HYST + i - 16)
+		 || temp_crit != i2c_smbus_read_word_data(client,

ERROR:CODE_INDENT: code indent should use tabs where possible
#357: FILE: drivers/i2c/chips/lm92.c:271:
+^I^I ^I^I LM92_REG_TEMP_CRIT + i)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#357: FILE: drivers/i2c/chips/lm92.c:271:
+^I^I ^I^I LM92_REG_TEMP_CRIT + i)$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#358: FILE: drivers/i2c/chips/lm92.c:272:
+		 		 LM92_REG_TEMP_CRIT + i)
+		 || temp_low != i2c_smbus_read_word_data(client,

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#360: FILE: drivers/i2c/chips/lm92.c:274:
+				LM92_REG_TEMP_LOW + i + 16)
+		 || temp_high != i2c_smbus_read_word_data(client,

ERROR:CODE_INDENT: code indent should use tabs where possible
#361: FILE: drivers/i2c/chips/lm92.c:275:
+^I^I ^I^I LM92_REG_TEMP_HIGH + i + 32)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#361: FILE: drivers/i2c/chips/lm92.c:275:
+^I^I ^I^I LM92_REG_TEMP_HIGH + i + 32)$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#362: FILE: drivers/i2c/chips/lm92.c:276:
+		 		 LM92_REG_TEMP_HIGH + i + 32)
+		 || conf != i2c_smbus_read_byte_data(client,

ERROR:CODE_INDENT: code indent should use tabs where possible
#363: FILE: drivers/i2c/chips/lm92.c:277:
+^I^I ^I    LM92_REG_CONFIG + i))$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#363: FILE: drivers/i2c/chips/lm92.c:277:
+^I^I ^I    LM92_REG_CONFIG + i))$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#371: FILE: drivers/i2c/chips/lm92.c:285:
+/* The following function does more than just detection. If detection
+   succeeds, it also registers the new chip. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#371: FILE: drivers/i2c/chips/lm92.c:285:
+   succeeds, it also registers the new chip. */

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#383: FILE: drivers/i2c/chips/lm92.c:297:
+	if (!(data = kmalloc(sizeof(struct lm92_data), GFP_KERNEL))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*data)...) over kmalloc(sizeof(struct lm92_data)...)
#383: FILE: drivers/i2c/chips/lm92.c:297:
+	if (!(data = kmalloc(sizeof(struct lm92_data), GFP_KERNEL))) {

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#390: FILE: drivers/i2c/chips/lm92.c:304:
+	/* Fill in enough client fields so that we can read from the chip,
+	   which is required for identication */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#390: FILE: drivers/i2c/chips/lm92.c:304:
+	   which is required for identication */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#399: FILE: drivers/i2c/chips/lm92.c:313:
+	/* A negative kind means that the driver was loaded with no force
+	   parameter (default), so we must identify the chip. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#399: FILE: drivers/i2c/chips/lm92.c:313:
+	   parameter (default), so we must identify the chip. */

CHECK:BRACES: braces {} should be used on all arms of this statement
#406: FILE: drivers/i2c/chips/lm92.c:320:
+		if ((config & 0xe0) == 0x00
[...]
+		} else
[...]
+		else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#407: FILE: drivers/i2c/chips/lm92.c:321:
+		if ((config & 0xe0) == 0x00
+		 && man_id == 0x0180) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#409: FILE: drivers/i2c/chips/lm92.c:323:
+^I ^I^Ikind = lm92;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#409: FILE: drivers/i2c/chips/lm92.c:323:
+^I ^I^Ikind = lm92;$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 16)
#410: FILE: drivers/i2c/chips/lm92.c:324:
+		} else
+		if (max6635_check(new_client)) {

CHECK:BRACES: Unbalanced braces around else statement
#410: FILE: drivers/i2c/chips/lm92.c:324:
+		} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#411: FILE: drivers/i2c/chips/lm92.c:325:
+		if (max6635_check(new_client)) {
[...]
+		else
[...]

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#415: FILE: drivers/i2c/chips/lm92.c:329:
+		}
+		else

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#417: FILE: drivers/i2c/chips/lm92.c:331:
+	} else
+	if (kind == 0) /* Default to an LM92 if forced */

CHECK:BRACES: Unbalanced braces around else statement
#417: FILE: drivers/i2c/chips/lm92.c:331:
+	} else

WARNING:STRLCPY: Prefer strscpy over strlcpy - see: https://lore.kernel.org/r/CAHk-=wgfRnXz0W3D37d01q3JFkr_i_uTL=V6A6G1oUZcprmknw@mail.gmail.com/
#430: FILE: drivers/i2c/chips/lm92.c:344:
+	strlcpy(new_client->name, name, I2C_NAME_SIZE);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#435: FILE: drivers/i2c/chips/lm92.c:349:
+	if ((err = i2c_attach_client(new_client)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#470: FILE: drivers/i2c/chips/lm92.c:384:
+	if ((err = i2c_detach_client(client))) {

WARNING:SPLIT_STRING: quoted string split across lines
#472: FILE: drivers/i2c/chips/lm92.c:386:
+		dev_err(&client->dev, "Client deregistration failed, "
+			"client not detached.\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#480: FILE: drivers/i2c/chips/lm92.c:394:
+
+

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000194098.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 15 errors, 49 warnings, 29 checks, 447 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000194098.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
