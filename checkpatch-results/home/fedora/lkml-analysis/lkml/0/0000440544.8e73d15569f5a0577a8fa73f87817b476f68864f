WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#76: 
--- 2.5.30/arch/i386/kernel/i386_ksyms.c~kmap_atomic_reads	Fri Aug  9 17:36:42 2002

WARNING:REPEATED_WORD: Possible repeated word: 'the'
#156: FILE: arch/i386/mm/fault.c:159:
+ * that it gets the correct address relative to the the new kmap.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#164: FILE: arch/i386/mm/fault.c:167:
+	if (cus->seq != per_cpu(kmap_atomic_seq[cus->type], cpu) ||
+				cus->cpu != cpu) {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#166: FILE: arch/i386/mm/fault.c:169:
+		unsigned offset;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#186: FILE: arch/i386/mm/fault.c:189:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:DEFINE_ARCH_HAS: #define of 'ARCH_HAS_KMAP_FIXUP' is wrong - use Kconfig variables or standard guards instead
#279: FILE: include/asm-i386/processor.h:491:
+#define ARCH_HAS_KMAP_FIXUP

The ARCH_HAS_xyz and ARCH_HAVE_xyz patterns are wrong.

For big conceptual features use Kconfig symbols instead.  And for
smaller things where we have compatibility fallback functions but
want architectures able to override them with optimized ones, we
should either use weak functions (appropriate for some cases), or
the symbol that protects them should be the same symbol we use.

See: https://lore.kernel.org/lkml/CA+55aFycQ9XJvEOsiM3txHL5bjUc8CeKWJNR_H+MiicaddB42Q@mail.gmail.com/

WARNING:INCLUDE_LINUX: Use #include <linux/processor.h> instead of <asm/processor.h>
#318: FILE: include/linux/highmem.h:6:
+#include <asm/processor.h>

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#353: FILE: include/linux/highmem.h:95:
+kmap_copy_user(struct copy_user_state *cus, struct page *page,
+			enum km_type type, int src)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#360: FILE: include/linux/highmem.h:102:
+		BUG_ON(current->copy_user_state != NULL);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "current->copy_user_state"
#360: FILE: include/linux/highmem.h:102:
+		BUG_ON(current->copy_user_state != NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#369: FILE: include/linux/highmem.h:111:
+		BUG_ON(current->copy_user_state != cus);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'page' - possible side-effects?
#395: FILE: include/linux/highmem.h:137:
+#define kmap_copy_user(cus, page, type, src)	\
+	({					\
+		(cus)->page = (page);		\
+		kmap(page);			\
+	})

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'page' may be better as '(page)' to avoid precedence issues
#395: FILE: include/linux/highmem.h:137:
+#define kmap_copy_user(cus, page, type, src)	\
+	({					\
+		(cus)->page = (page);		\
+		kmap(page);			\
+	})

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#451: FILE: mm/filemap.c:1025:
+int file_read_actor(read_descriptor_t *desc, struct page *page,
+			unsigned long offset, unsigned long size)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000440544.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 2 errors, 6 warnings, 6 checks, 346 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000440544.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
