WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#145: FILE: arch/i386/mach-vmi/setup.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#164: FILE: arch/i386/mach-vmi/setup.c:20:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#165: FILE: arch/i386/mach-vmi/setup.c:21:
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/acpi.h> instead of <asm/acpi.h>
#178: FILE: arch/i386/mach-vmi/setup.c:34:
+#include <asm/acpi.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/processor.h> instead of <asm/processor.h>
#180: FILE: arch/i386/mach-vmi/setup.c:36:
+#include <asm/processor.h>

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/io.h> instead of <asm/io.h>
#182: FILE: arch/i386/mach-vmi/setup.c:38:
+#include <asm/io.h>

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/pgtable.h> instead of <asm/pgtable.h>
#184: FILE: arch/i386/mach-vmi/setup.c:40:
+#include <asm/pgtable.h>

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#188: FILE: arch/i386/mach-vmi/setup.c:44:
+extern char __VMI_START;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#189: FILE: arch/i386/mach-vmi/setup.c:45:
+extern char __VMI_SHARED;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to NULL
#190: FILE: arch/i386/mach-vmi/setup.c:46:
+VROMHeader *vmi_rom = NULL;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

CHECK:CAMELCASE: Avoid CamelCase: <VROMHeader>
#190: FILE: arch/i386/mach-vmi/setup.c:46:
+VROMHeader *vmi_rom = NULL;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:NEW_TYPEDEFS: do not add new typedefs
#195: FILE: arch/i386/mach-vmi/setup.c:51:
+typedef VMI_UINT32 __attribute__((regparm(1))) (VROMFUNC)(void);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#197: FILE: arch/i386/mach-vmi/setup.c:53:
+#define VROMFunc(table,func) \
                       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <VROMFunc>
#197: FILE: arch/i386/mach-vmi/setup.c:53:
+#define VROMFunc(table,func) \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#198: FILE: arch/i386/mach-vmi/setup.c:54:
+   (((VROMFUNC *)&(((VROMCallTable *)(table))->vromCall[(func)].f)) \$

CHECK:CAMELCASE: Avoid CamelCase: <VROMCallTable>
#198: FILE: arch/i386/mach-vmi/setup.c:54:
+   (((VROMFUNC *)&(((VROMCallTable *)(table))->vromCall[(func)].f)) \

CHECK:CAMELCASE: Avoid CamelCase: <vromCall>
#198: FILE: arch/i386/mach-vmi/setup.c:54:
+   (((VROMFUNC *)&(((VROMCallTable *)(table))->vromCall[(func)].f)) \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#199: FILE: arch/i386/mach-vmi/setup.c:55:
+       ())$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#220: FILE: arch/i386/mach-vmi/setup.c:76:
+	*(unsigned long *)(eip+1) = dest-eip-5;
 	                      ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#220: FILE: arch/i386/mach-vmi/setup.c:76:
+	*(unsigned long *)(eip+1) = dest-eip-5;
 	                                ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#220: FILE: arch/i386/mach-vmi/setup.c:76:
+	*(unsigned long *)(eip+1) = dest-eip-5;
 	                                    ^

CHECK:CAMELCASE: Avoid CamelCase: <nativeEIP>
#228: FILE: arch/i386/mach-vmi/setup.c:84:
+	memcpy(a->nativeEIP, a->translationEIP, a->translation_size);

CHECK:CAMELCASE: Avoid CamelCase: <translationEIP>
#228: FILE: arch/i386/mach-vmi/setup.c:84:
+	memcpy(a->nativeEIP, a->translationEIP, a->translation_size);

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#233: FILE: arch/i386/mach-vmi/setup.c:89:
+		switch(*c) {
+			case MNEM_CALL_NEAR:
[...]
+			case MNEM_PUSH_I:
[...]
+			case MNEM_PUSH_IB:
[...]
+			case MNEM_PUSH_EAX:
+			case MNEM_PUSH_ECX:
+			case MNEM_PUSH_EDX:
+			case MNEM_PUSH_EBX:
+			case MNEM_PUSH_EBP:
+			case MNEM_PUSH_ESI:
+			case MNEM_PUSH_EDI: 
[...]
+			case MNEM_LEA:
[...]
+			default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:SPACING: space required before the open parenthesis '('
#233: FILE: arch/i386/mach-vmi/setup.c:89:
+		switch(*c) {

ERROR:SPACING: spaces required around that '+=' (ctx:VxV)
#236: FILE: arch/i386/mach-vmi/setup.c:92:
+				c+=5;
 				 ^

ERROR:SPACING: spaces required around that '+=' (ctx:VxV)
#240: FILE: arch/i386/mach-vmi/setup.c:96:
+				c+=5;
 				 ^

ERROR:SPACING: spaces required around that '+=' (ctx:VxV)
#244: FILE: arch/i386/mach-vmi/setup.c:100:
+				c+=2;
 				 ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#253: FILE: arch/i386/mach-vmi/setup.c:109:
+^I^I^Icase MNEM_PUSH_EDI: $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '+=' (ctx:VxV)
#254: FILE: arch/i386/mach-vmi/setup.c:110:
+				c+=1;
 				 ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#258: FILE: arch/i386/mach-vmi/setup.c:114:
+				BUG_ON(*(c+1) != 0x64);  /* [--][--]+disp8, %esp */

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#258: FILE: arch/i386/mach-vmi/setup.c:114:
+				BUG_ON(*(c+1) != 0x64);  /* [--][--]+disp8, %esp */
 				          ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#259: FILE: arch/i386/mach-vmi/setup.c:115:
+				BUG_ON(*(c+2) != 0x24);  /* none + %esp */

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#259: FILE: arch/i386/mach-vmi/setup.c:115:
+				BUG_ON(*(c+2) != 0x24);  /* none + %esp */
 				          ^

ERROR:SPACING: spaces required around that '+=' (ctx:VxV)
#260: FILE: arch/i386/mach-vmi/setup.c:116:
+				c+=4;
 				 ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#268: FILE: arch/i386/mach-vmi/setup.c:124:
+ ^I^I^I^I */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#268: FILE: arch/i386/mach-vmi/setup.c:124:
+ ^I^I^I^I */$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#269: FILE: arch/i386/mach-vmi/setup.c:125:
+				BUG();

WARNING:LINE_SPACING: Missing a blank line after declarations
#278: FILE: arch/i386/mach-vmi/setup.c:134:
+		int i;
+		cur = cur > 11 ? 11 : cur;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '+=' (ctx:VxW)
#284: FILE: arch/i386/mach-vmi/setup.c:140:
+	for (c = start; c < end; c+= 8)
 	                          ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#288: FILE: arch/i386/mach-vmi/setup.c:144:
+static void scan_annotations(void *start, void *end) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#289: FILE: arch/i386/mach-vmi/setup.c:145:
+{ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#290: FILE: arch/i386/mach-vmi/setup.c:146:
+^Istruct vmi_annotation *a; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#295: FILE: arch/i386/mach-vmi/setup.c:151:
+^Ifor (a = start; (void *)a < end; a++) { $

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#296: FILE: arch/i386/mach-vmi/setup.c:152:
+		BUG_ON(a->vmi_call >= NUM_VMI_CALLS);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#305: FILE: arch/i386/mach-vmi/setup.c:161:
+	printk(KERN_WARNING "VMI %d annotations=%ld, translations=%ld, nops=%ld, extra native = %ld bytes\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#306: FILE: arch/i386/mach-vmi/setup.c:162:
+	printk(KERN_WARNING "VMI %d annotations=%ld, translations=%ld, nops=%ld, extra native = %ld bytes\n",
+		a - (struct vmi_annotation *)start + 1, (unsigned long)(end-start),

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#306: FILE: arch/i386/mach-vmi/setup.c:162:
+		a - (struct vmi_annotation *)start + 1, (unsigned long)(end-start),
 		                                                           ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#308: FILE: arch/i386/mach-vmi/setup.c:164:
+} $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#352: FILE: arch/i386/mach-vmi/setup.c:208:
+
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#360: FILE: arch/i386/mach-vmi/setup.c:216:
+        hypervisor_found = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#360: FILE: arch/i386/mach-vmi/setup.c:216:
+        hypervisor_found = 0;$

WARNING:LINE_SPACING: Missing a blank line after declarations
#365: FILE: arch/i386/mach-vmi/setup.c:221:
+		VROMHeader *romstart;
+		romstart = (VROMHeader *)isa_bus_to_virt(base);

CHECK:CAMELCASE: Avoid CamelCase: <romSignature>
#366: FILE: arch/i386/mach-vmi/setup.c:222:
+		if (romstart->romSignature != 0xaa55)

CHECK:CAMELCASE: Avoid CamelCase: <vRomSignature>
#368: FILE: arch/i386/mach-vmi/setup.c:224:
+		if (romstart->vRomSignature == VMI_SIGNATURE && !vmi_rom) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#369: FILE: arch/i386/mach-vmi/setup.c:225:
+			printk(KERN_WARNING "Detected VMI ROM version %d.%d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#370: FILE: arch/i386/mach-vmi/setup.c:226:
+			printk(KERN_WARNING "Detected VMI ROM version %d.%d\n",
+				romstart->APIVersionMajor,

CHECK:CAMELCASE: Avoid CamelCase: <APIVersionMajor>
#370: FILE: arch/i386/mach-vmi/setup.c:226:
+				romstart->APIVersionMajor,

CHECK:CAMELCASE: Avoid CamelCase: <APIVersionMinor>
#371: FILE: arch/i386/mach-vmi/setup.c:227:
+				romstart->APIVersionMinor);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#374: FILE: arch/i386/mach-vmi/setup.c:230:
+			    romstart->APIVersionMinor+1 < MIN_VMI_API_REV_MINOR+1)
 			                             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#374: FILE: arch/i386/mach-vmi/setup.c:230:
+			    romstart->APIVersionMinor+1 < MIN_VMI_API_REV_MINOR+1)
 			                                                       ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#376: FILE: arch/i386/mach-vmi/setup.c:232:
+^I^I^Iif (romstart->romLength * 512 > $

CHECK:CAMELCASE: Avoid CamelCase: <romLength>
#376: FILE: arch/i386/mach-vmi/setup.c:232:
+			if (romstart->romLength * 512 > 

CHECK:LINE_SPACING: Please don't use multiple blank lines
#385: FILE: arch/i386/mach-vmi/setup.c:241:
+
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#399: FILE: arch/i386/mach-vmi/setup.c:255:
+			printk(KERN_WARNING "VMI ROM failed to initialize\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#406: FILE: arch/i386/mach-vmi/setup.c:262:
+^Iif (!vmi_rom) $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#407: FILE: arch/i386/mach-vmi/setup.c:263:
+		printk(KERN_WARNING "VMI ROM not found"

WARNING:SPLIT_STRING: quoted string split across lines
#408: FILE: arch/i386/mach-vmi/setup.c:264:
+		printk(KERN_WARNING "VMI ROM not found"
+		       " - falling back to native mode\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#410: FILE: arch/i386/mach-vmi/setup.c:266:
+		printk(KERN_WARNING "VMI ROM version mismatch "

WARNING:SPLIT_STRING: quoted string split across lines
#411: FILE: arch/i386/mach-vmi/setup.c:267:
+		printk(KERN_WARNING "VMI ROM version mismatch "
+		       "(kernel requires version >= %d.%d) "

WARNING:SPLIT_STRING: quoted string split across lines
#412: FILE: arch/i386/mach-vmi/setup.c:268:
+		       "(kernel requires version >= %d.%d) "
+		       " - falling back to native mode\n",

CHECK:LINE_SPACING: Please don't use multiple blank lines
#416: FILE: arch/i386/mach-vmi/setup.c:272:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#422: FILE: arch/i386/mach-vmi/setup.c:278:
+ *^Iroutines that may be needed before setup_arch() runs. $

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#441: FILE: arch/i386/mach-vmi/setup.c:297:
+static struct irqaction irq0  = { timer_interrupt, SA_INTERRUPT, CPU_MASK_NONE, "timer", NULL, NULL};

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#459: FILE: arch/i386/mach-vmi/stubs.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#479: FILE: arch/i386/mach-vmi/stubs.c:21:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#480: FILE: arch/i386/mach-vmi/stubs.c:22:
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/processor.h> instead of <asm/processor.h>
#487: FILE: arch/i386/mach-vmi/stubs.c:29:
+#include <asm/processor.h>

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/bitops.h> instead of <asm/bitops.h>
#489: FILE: arch/i386/mach-vmi/stubs.c:31:
+#include <asm/bitops.h>

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#497: FILE: arch/i386/mach-vmi/stubs.c:39:
+{
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#498: FILE: arch/i386/mach-vmi/stubs.c:40:
+
+}

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#502: FILE: arch/i386/mach-vmi/stubs.c:44:
+	return (*pte);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#522: FILE: arch/i386/mach-vmi/stubs.c:64:
+	val = test_and_clear_bit(bit, (volatile unsigned long *)pte);

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#530: FILE: arch/i386/mach-vmi/stubs.c:72:
+	val = test_and_set_bit(bit, (volatile unsigned long *)pte);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#536: FILE: arch/i386/mach-vmi/stubs.c:78:
+   return VMI_TestAndClearPxEBit((VMI_UINT32 *)pte, bit);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#541: FILE: arch/i386/mach-vmi/stubs.c:83:
+   return VMI_TestAndSetPxEBit((VMI_UINT32 *)pte, bit);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#545: FILE: arch/i386/mach-vmi/stubs.c:87:
+                              int count)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#545: FILE: arch/i386/mach-vmi/stubs.c:87:
+                              int count)$

CHECK:CAMELCASE: Avoid CamelCase: <apState>
#558: FILE: arch/i386/mach-vmi/stubs.c:100:
+VMICALL void VMI_SetInitialAPState(VMI_UINT32 apState, VMI_UINT32 apicId)

CHECK:CAMELCASE: Avoid CamelCase: <apicId>
#558: FILE: arch/i386/mach-vmi/stubs.c:100:
+VMICALL void VMI_SetInitialAPState(VMI_UINT32 apState, VMI_UINT32 apicId)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#566: FILE: arch/i386/mach-vmi/stubs-asm.S:1:
+#include <linux/linkage.h>

WARNING:DEPRECATED_VARIABLE: Use of EXTRA_CFLAGS is deprecated, please use `ccflags-y instead.
#609: FILE: arch/i386/mach-vmi/Makefile:5:
+EXTRA_CFLAGS	+= -I../kernel

EXTRA_{A,C,CPP,LD}FLAGS are deprecated and should be replaced by the new
flags added via commit f77bf01425b1 ("kbuild: introduce ccflags-y,
asflags-y and ldflags-y").

The following conversion scheme maybe used::

  EXTRA_AFLAGS    ->  asflags-y
  EXTRA_CFLAGS    ->  ccflags-y
  EXTRA_CPPFLAGS  ->  cppflags-y
  EXTRA_LDFLAGS   ->  ldflags-y

See:

  1. https://lore.kernel.org/lkml/20070930191054.GA15876@uranus.ravnborg.org/
  2. https://lore.kernel.org/lkml/1313384834-24433-12-git-send-email-lacombar@gmail.com/
  3. https://www.kernel.org/doc/html/latest/kbuild/makefiles.html#compilation-flags

ERROR:TRAILING_WHITESPACE: trailing whitespace
#624: FILE: include/asm-i386/bugs.h:180:
+        if (!vmi_hypervisor_found()) $

ERROR:CODE_INDENT: code indent should use tabs where possible
#624: FILE: include/asm-i386/bugs.h:180:
+        if (!vmi_hypervisor_found()) $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#624: FILE: include/asm-i386/bugs.h:180:
+        if (!vmi_hypervisor_found()) $

ERROR:CODE_INDENT: code indent should use tabs where possible
#625: FILE: include/asm-i386/bugs.h:181:
+                panic("No hypervisor found, aborting!\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#625: FILE: include/asm-i386/bugs.h:181:
+                panic("No hypervisor found, aborting!\n");$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#635: FILE: include/asm-i386/mach-vmi/setup_arch_pre.h:1:
+/* Hook to call BIOS initialisation function */

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#640: FILE: include/asm-i386/mach-vmi/setup_arch_pre.h:6:
+extern void vmi_init(void);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000095359.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 30 errors, 34 warnings, 35 checks, 488 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000095359.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
