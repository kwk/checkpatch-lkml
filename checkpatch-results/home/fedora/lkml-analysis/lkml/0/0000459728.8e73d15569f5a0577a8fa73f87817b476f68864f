WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#42: FILE: fs/dnotify.c:41:
+void dnotify_flush(struct file *filp, fl_owner_t id)
                                 ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#54: FILE: fs/dnotify.c:53:
+		if ((dn->dn_owner == id) && (dn->dn_filp == filp)) {
 		                                            ^^^^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dn->dn_owner == id'
#54: FILE: fs/dnotify.c:53:
+		if ((dn->dn_owner == id) && (dn->dn_filp == filp)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dn->dn_filp == filp'
#54: FILE: fs/dnotify.c:53:
+		if ((dn->dn_owner == id) && (dn->dn_filp == filp)) {

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#77: FILE: fs/dnotify.c:73:
+		dnotify_flush(filp, id);
 		              ^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dn"
#91: FILE: fs/dnotify.c:82:
+	if (dn == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#105: FILE: fs/dnotify.c:87:
+		if ((odn->dn_owner == id) && (odn->dn_filp == filp)) {
 		                                              ^^^^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'odn->dn_owner == id'
#105: FILE: fs/dnotify.c:87:
+		if ((odn->dn_owner == id) && (odn->dn_filp == filp)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'odn->dn_filp == filp'
#105: FILE: fs/dnotify.c:87:
+		if ((odn->dn_owner == id) && (odn->dn_filp == filp)) {

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#161: FILE: fs/open.c:860:
+	dnotify_flush(filp, id);
 	              ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#189: FILE: include/linux/dnotify.h:17:
+extern void dnotify_flush(struct file *filp, fl_owner_t id);
                                        ^^^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#189: FILE: include/linux/dnotify.h:17:
+extern void dnotify_flush(struct file *filp, fl_owner_t id);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000459728.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 0 errors, 6 warnings, 6 checks, 144 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000459728.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
