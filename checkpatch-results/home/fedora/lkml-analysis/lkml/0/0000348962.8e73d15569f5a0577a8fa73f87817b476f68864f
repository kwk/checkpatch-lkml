WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#82: 
diff -prauN mm3-2.6.0-test2-1/arch/i386/mm/init.c mm3-2.6.0-test2-2/arch/i386/mm/init.c

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#95: FILE: arch/i386/mm/init.c:522:
+	void (*ctor)(void *, kmem_cache_t *, unsigned long);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kmem_cache_t *' should also have an identifier name
#95: FILE: arch/i386/mm/init.c:522:
+	void (*ctor)(void *, kmem_cache_t *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#95: FILE: arch/i386/mm/init.c:522:
+	void (*ctor)(void *, kmem_cache_t *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#96: FILE: arch/i386/mm/init.c:523:
+	void (*dtor)(void *, kmem_cache_t *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kmem_cache_t *' should also have an identifier name
#96: FILE: arch/i386/mm/init.c:523:
+	void (*dtor)(void *, kmem_cache_t *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#96: FILE: arch/i386/mm/init.c:523:
+	void (*dtor)(void *, kmem_cache_t *, unsigned long);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#108: FILE: arch/i386/mm/init.c:537:
+			kpmd_cache = kmem_cache_create("kpmd",
+					PTRS_PER_PMD*sizeof(pmd_t),

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#108: FILE: arch/i386/mm/init.c:537:
+					PTRS_PER_PMD*sizeof(pmd_t),
 					            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'pgtable_cache_init', this function's name, in a string
#114: FILE: arch/i386/mm/init.c:543:
+				panic("pgtable_cache_init(): "

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:SPLIT_STRING: quoted string split across lines
#115: FILE: arch/i386/mm/init.c:544:
+				panic("pgtable_cache_init(): "
+						"cannot create kpmd cache");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:LINE_SPACING: Missing a blank line after declarations
#150: FILE: arch/i386/mm/pgtable.c:164:
+	pmd_t *kpmd, *pmd;
+	kpmd = pmd_offset(&swapper_pg_dir[PTRS_PER_PGD-1],

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#150: FILE: arch/i386/mm/pgtable.c:164:
+	kpmd = pmd_offset(&swapper_pg_dir[PTRS_PER_PGD-1],
 	                                              ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#151: FILE: arch/i386/mm/pgtable.c:165:
+	kpmd = pmd_offset(&swapper_pg_dir[PTRS_PER_PGD-1],
+				(PTRS_PER_PMD - NR_SHARED_PMDS)*PMD_SIZE);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#151: FILE: arch/i386/mm/pgtable.c:165:
+				(PTRS_PER_PMD - NR_SHARED_PMDS)*PMD_SIZE);
 				                               ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#153: FILE: arch/i386/mm/pgtable.c:167:
+^I^I^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#154: FILE: arch/i386/mm/pgtable.c:168:
+	memset(__pmd, 0, (PTRS_PER_PMD - NR_SHARED_PMDS)*sizeof(pmd_t));
 	                                                ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#155: FILE: arch/i386/mm/pgtable.c:169:
+	memcpy(pmd, kpmd, NR_SHARED_PMDS*sizeof(pmd_t));
 	                                ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#196: FILE: arch/i386/mm/pgtable.c:210:
+ ^I^I^Imemcpy(&pgd[PTRS_PER_PGD - NR_SHARED_PMDS],$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#196: FILE: arch/i386/mm/pgtable.c:210:
+ ^I^I^Imemcpy(&pgd[PTRS_PER_PGD - NR_SHARED_PMDS],$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#196: FILE: arch/i386/mm/pgtable.c:210:
+ ^I^I^Imemcpy(&pgd[PTRS_PER_PGD - NR_SHARED_PMDS],$

ERROR:CODE_INDENT: code indent should use tabs where possible
#197: FILE: arch/i386/mm/pgtable.c:211:
+ ^I^I^I^I&swapper_pg_dir[PTRS_PER_PGD - NR_SHARED_PMDS],$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#197: FILE: arch/i386/mm/pgtable.c:211:
+ ^I^I^I^I&swapper_pg_dir[PTRS_PER_PGD - NR_SHARED_PMDS],$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#197: FILE: arch/i386/mm/pgtable.c:211:
+ 			memcpy(&pgd[PTRS_PER_PGD - NR_SHARED_PMDS],
+ 				&swapper_pg_dir[PTRS_PER_PGD - NR_SHARED_PMDS],

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#197: FILE: arch/i386/mm/pgtable.c:211:
+ ^I^I^I^I&swapper_pg_dir[PTRS_PER_PGD - NR_SHARED_PMDS],$

ERROR:CODE_INDENT: code indent should use tabs where possible
#198: FILE: arch/i386/mm/pgtable.c:212:
+ ^I^I^I^INR_SHARED_PMDS * sizeof(pgd_t));$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#198: FILE: arch/i386/mm/pgtable.c:212:
+ ^I^I^I^INR_SHARED_PMDS * sizeof(pgd_t));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#198: FILE: arch/i386/mm/pgtable.c:212:
+ ^I^I^I^INR_SHARED_PMDS * sizeof(pgd_t));$

ERROR:CODE_INDENT: code indent should use tabs where possible
#202: FILE: arch/i386/mm/pgtable.c:216:
+ ^I^Imemcpy(pgd + USER_PTRS_PER_PGD,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#202: FILE: arch/i386/mm/pgtable.c:216:
+ ^I^Imemcpy(pgd + USER_PTRS_PER_PGD,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#202: FILE: arch/i386/mm/pgtable.c:216:
+ ^I^Imemcpy(pgd + USER_PTRS_PER_PGD,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#203: FILE: arch/i386/mm/pgtable.c:217:
+ ^I^I^Iswapper_pg_dir + USER_PTRS_PER_PGD,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#203: FILE: arch/i386/mm/pgtable.c:217:
+ ^I^I^Iswapper_pg_dir + USER_PTRS_PER_PGD,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#203: FILE: arch/i386/mm/pgtable.c:217:
+ 		memcpy(pgd + USER_PTRS_PER_PGD,
+ 			swapper_pg_dir + USER_PTRS_PER_PGD,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#203: FILE: arch/i386/mm/pgtable.c:217:
+ ^I^I^Iswapper_pg_dir + USER_PTRS_PER_PGD,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#204: FILE: arch/i386/mm/pgtable.c:218:
+ ^I^I^I(PTRS_PER_PGD - USER_PTRS_PER_PGD) * sizeof(pgd_t));$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#204: FILE: arch/i386/mm/pgtable.c:218:
+ ^I^I^I(PTRS_PER_PGD - USER_PTRS_PER_PGD) * sizeof(pgd_t));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#204: FILE: arch/i386/mm/pgtable.c:218:
+ ^I^I^I(PTRS_PER_PGD - USER_PTRS_PER_PGD) * sizeof(pgd_t));$

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#210: FILE: arch/i386/mm/pgtable.c:224:
+		memset(pgd, 0, (PTRS_PER_PGD - NR_SHARED_PMDS)*sizeof(pgd_t));
 		                                              ^

CHECK:BRACES: Unbalanced braces around else statement
#211: FILE: arch/i386/mm/pgtable.c:225:
+	else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#214: FILE: arch/i386/mm/pgtable.c:228:
+		memset(pgd, 0, USER_PTRS_PER_PGD*sizeof(pgd_t));
 		                                ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#237: FILE: arch/i386/mm/pgtable.c:250:
+ * $

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#281: FILE: arch/i386/mm/pgtable.c:269:
+		if (TASK_SIZE > PAGE_OFFSET && i == USER_PTRS_PER_PGD - 1)

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#357: FILE: arch/i386/mm/pgtable.c:312:
+		if (TASK_SIZE > PAGE_OFFSET && i == USER_PTRS_PER_PGD - 1)

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#382: FILE: include/asm-i386/pgtable.h:40:
+void kpmd_ctor(void *, kmem_cache_t *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kmem_cache_t *' should also have an identifier name
#382: FILE: include/asm-i386/pgtable.h:40:
+void kpmd_ctor(void *, kmem_cache_t *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#382: FILE: include/asm-i386/pgtable.h:40:
+void kpmd_ctor(void *, kmem_cache_t *, unsigned long);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000348962.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 8 errors, 27 warnings, 12 checks, 289 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000348962.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
