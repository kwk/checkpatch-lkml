CHECK:MACRO_ARG_REUSE: Macro argument reuse 'v' - possible side-effects?
#75: FILE: include/asm-ppc64/atomic.h:176:
+#define atomic_add_unless(v, a, u)				\
+({								\
+	int c, old;						\
+	c = atomic_read(v);					\
+	for (;;) {						\
+		if (unlikely(c == (u)))				\
+			break;					\
+		old = atomic_cmpxchg((v), c, c + (a));		\
+		if (likely(old == c))				\
+			break;					\
+		c = old;					\
+	}							\
+	c != (u);						\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'u' - possible side-effects?
#75: FILE: include/asm-ppc64/atomic.h:176:
+#define atomic_add_unless(v, a, u)				\
+({								\
+	int c, old;						\
+	c = atomic_read(v);					\
+	for (;;) {						\
+		if (unlikely(c == (u)))				\
+			break;					\
+		old = atomic_cmpxchg((v), c, c + (a));		\
+		if (likely(old == c))				\
+			break;					\
+		c = old;					\
+	}							\
+	c != (u);						\
+})

CHECK:LINE_SPACING: Please don't use multiple blank lines
#91: FILE: include/asm-ppc64/atomic.h:192:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'v' - possible side-effects?
#103: FILE: include/asm-alpha/atomic.h:176:
+#define atomic_add_unless(v, a, u)				\
+({								\
+	int c, old;						\
+	c = atomic_read(v);					\
+	while (c != (u) && (old = atomic_cmpxchg((v), c, c + (a))) != c) \
+		c = old;					\
+	c != (u);						\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'u' - possible side-effects?
#103: FILE: include/asm-alpha/atomic.h:176:
+#define atomic_add_unless(v, a, u)				\
+({								\
+	int c, old;						\
+	c = atomic_read(v);					\
+	while (c != (u) && (old = atomic_cmpxchg((v), c, c + (a))) != c) \
+		c = old;					\
+	c != (u);						\
+})

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#137: FILE: include/asm-arm26/atomic.h:92:
+}
+#define atomic_inc_not_zero(v) atomic_add_unless((v), 1, 0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'v' - possible side-effects?
#150: FILE: include/asm-frv/atomic.h:419:
+#define atomic_add_unless(v, a, u)				\
+({								\
+	int c, old;						\
+	c = atomic_read(v);					\
+	while (c != (u) && (old = atomic_cmpxchg((v), c, c + (a))) != c) \
+		c = old;					\
+	c != (u);						\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'u' - possible side-effects?
#150: FILE: include/asm-frv/atomic.h:419:
+#define atomic_add_unless(v, a, u)				\
+({								\
+	int c, old;						\
+	c = atomic_read(v);					\
+	while (c != (u) && (old = atomic_cmpxchg((v), c, c + (a))) != c) \
+		c = old;					\
+	c != (u);						\
+})

WARNING:INLINE: plain inline is preferred over __inline__
#169: FILE: include/asm-h8300/atomic.h:97:
+static __inline__ int atomic_add_unless(atomic_t *v, int a, int u)

WARNING:LINE_SPACING: Missing a blank line after declarations
#173: FILE: include/asm-h8300/atomic.h:101:
+	unsigned long flags;
+	local_irq_save(flags);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#180: FILE: include/asm-h8300/atomic.h:108:
+}
+#define atomic_inc_not_zero(v) atomic_add_unless((v), 1, 0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'v' - possible side-effects?
#202: FILE: include/asm-i386/atomic.h:229:
+#define atomic_add_unless(v, a, u)				\
+({								\
+	int c, old;						\
+	c = atomic_read(v);					\
+	while (c != (u) && (old = atomic_cmpxchg((v), c, c + (a))) != c) \
+		c = old;					\
+	c != (u);						\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'u' - possible side-effects?
#202: FILE: include/asm-i386/atomic.h:229:
+#define atomic_add_unless(v, a, u)				\
+({								\
+	int c, old;						\
+	c = atomic_read(v);					\
+	while (c != (u) && (old = atomic_cmpxchg((v), c, c + (a))) != c) \
+		c = old;					\
+	c != (u);						\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'v' - possible side-effects?
#223: FILE: include/asm-ia64/atomic.h:93:
+#define atomic_add_unless(v, a, u)				\
+({								\
+	int c, old;						\
+	c = atomic_read(v);					\
+	while (c != (u) && (old = atomic_cmpxchg((v), c, c + (a))) != c) \
+		c = old;					\
+	c != (u);						\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'u' - possible side-effects?
#223: FILE: include/asm-ia64/atomic.h:93:
+#define atomic_add_unless(v, a, u)				\
+({								\
+	int c, old;						\
+	c = atomic_read(v);					\
+	while (c != (u) && (old = atomic_cmpxchg((v), c, c + (a))) != c) \
+		c = old;					\
+	c != (u);						\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'v' - possible side-effects?
#244: FILE: include/asm-m68k/atomic.h:144:
+#define atomic_add_unless(v, a, u)				\
+({								\
+	int c, old;						\
+	c = atomic_read(v);					\
+	while (c != (u) && (old = atomic_cmpxchg((v), c, c + (a))) != c) \
+		c = old;					\
+	c != (u);						\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'u' - possible side-effects?
#244: FILE: include/asm-m68k/atomic.h:144:
+#define atomic_add_unless(v, a, u)				\
+({								\
+	int c, old;						\
+	c = atomic_read(v);					\
+	while (c != (u) && (old = atomic_cmpxchg((v), c, c + (a))) != c) \
+		c = old;					\
+	c != (u);						\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'v' - possible side-effects?
#265: FILE: include/asm-m68knommu/atomic.h:133:
+#define atomic_add_unless(v, a, u)				\
+({								\
+	int c, old;						\
+	c = atomic_read(v);					\
+	while (c != (u) && (old = atomic_cmpxchg((v), c, c + (a))) != c) \
+		c = old;					\
+	c != (u);						\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'u' - possible side-effects?
#265: FILE: include/asm-m68knommu/atomic.h:133:
+#define atomic_add_unless(v, a, u)				\
+({								\
+	int c, old;						\
+	c = atomic_read(v);					\
+	while (c != (u) && (old = atomic_cmpxchg((v), c, c + (a))) != c) \
+		c = old;					\
+	c != (u);						\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'v' - possible side-effects?
#295: FILE: include/asm-mips/atomic.h:281:
+#define atomic_add_unless(v, a, u)				\
+({								\
+	int c, old;						\
+	c = atomic_read(v);					\
+	while (c != (u) && (old = atomic_cmpxchg((v), c, c + (a))) != c) \
+		c = old;					\
+	c != (u);						\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'u' - possible side-effects?
#295: FILE: include/asm-mips/atomic.h:281:
+#define atomic_add_unless(v, a, u)				\
+({								\
+	int c, old;						\
+	c = atomic_read(v);					\
+	while (c != (u) && (old = atomic_cmpxchg((v), c, c + (a))) != c) \
+		c = old;					\
+	c != (u);						\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'v' - possible side-effects?
#325: FILE: include/asm-parisc/atomic.h:178:
+#define atomic_add_unless(v, a, u)				\
+({								\
+	int c, old;						\
+	c = atomic_read(v);					\
+	while (c != (u) && (old = atomic_cmpxchg((v), c, c + (a))) != c) \
+		c = old;					\
+	c != (u);						\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'u' - possible side-effects?
#325: FILE: include/asm-parisc/atomic.h:178:
+#define atomic_add_unless(v, a, u)				\
+({								\
+	int c, old;						\
+	c = atomic_read(v);					\
+	while (c != (u) && (old = atomic_cmpxchg((v), c, c + (a))) != c) \
+		c = old;					\
+	c != (u);						\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'v' - possible side-effects?
#355: FILE: include/asm-ppc/atomic.h:191:
+#define atomic_add_unless(v, a, u)				\
+({								\
+	int c, old;						\
+	c = atomic_read(v);					\
+	while (c != (u) && (old = atomic_cmpxchg((v), c, c + (a))) != c) \
+		c = old;					\
+	c != (u);						\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'u' - possible side-effects?
#355: FILE: include/asm-ppc/atomic.h:191:
+#define atomic_add_unless(v, a, u)				\
+({								\
+	int c, old;						\
+	c = atomic_read(v);					\
+	while (c != (u) && (old = atomic_cmpxchg((v), c, c + (a))) != c) \
+		c = old;					\
+	c != (u);						\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'v' - possible side-effects?
#376: FILE: include/asm-s390/atomic.h:203:
+#define atomic_add_unless(v, a, u)				\
+({								\
+	int c, old;						\
+	c = atomic_read(v);					\
+	while (c != (u) && (old = atomic_cmpxchg((v), c, c + (a))) != c) \
+		c = old;					\
+	c != (u);						\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'u' - possible side-effects?
#376: FILE: include/asm-s390/atomic.h:203:
+#define atomic_add_unless(v, a, u)				\
+({								\
+	int c, old;						\
+	c = atomic_read(v);					\
+	while (c != (u) && (old = atomic_cmpxchg((v), c, c + (a))) != c) \
+		c = old;					\
+	c != (u);						\
+})

WARNING:INLINE: plain inline is preferred over __inline__
#397: FILE: include/asm-sh/atomic.h:104:
+static __inline__ int atomic_add_unless(atomic_t *v, int a, int u)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#410: FILE: include/asm-sh/atomic.h:117:
+}
+#define atomic_inc_not_zero(v) atomic_add_unless((v), 1, 0)

WARNING:INLINE: plain inline is preferred over __inline__
#423: FILE: include/asm-sh64/atomic.h:116:
+static __inline__ int atomic_add_unless(atomic_t *v, int a, int u)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#436: FILE: include/asm-sh64/atomic.h:129:
+}
+#define atomic_inc_not_zero(v) atomic_add_unless((v), 1, 0)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#449: FILE: include/asm-sparc/atomic.h:23:
+extern int atomic_add_unless(atomic_t *, int, int);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'atomic_t *' should also have an identifier name
#449: FILE: include/asm-sparc/atomic.h:23:
+extern int atomic_add_unless(atomic_t *, int, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#449: FILE: include/asm-sparc/atomic.h:23:
+extern int atomic_add_unless(atomic_t *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#449: FILE: include/asm-sparc/atomic.h:23:
+extern int atomic_add_unless(atomic_t *, int, int);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'v' - possible side-effects?
#470: FILE: include/asm-sparc64/atomic.h:75:
+#define atomic_add_unless(v, a, u)				\
+({								\
+	int c, old;						\
+	c = atomic_read(v);					\
+	while (c != (u) && (old = atomic_cmpxchg((v), c, c + (a))) != c) \
+		c = old;					\
+	c != (u);						\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'u' - possible side-effects?
#470: FILE: include/asm-sparc64/atomic.h:75:
+#define atomic_add_unless(v, a, u)				\
+({								\
+	int c, old;						\
+	c = atomic_read(v);					\
+	while (c != (u) && (old = atomic_cmpxchg((v), c, c + (a))) != c) \
+		c = old;					\
+	c != (u);						\
+})

WARNING:INLINE: plain inline is preferred over __inline__
#491: FILE: include/asm-v850/atomic.h:107:
+static __inline__ int atomic_add_unless(atomic_t *v, int a, int u)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'v' - possible side-effects?
#527: FILE: include/asm-x86_64/atomic.h:374:
+#define atomic_add_unless(v, a, u)				\
+({								\
+	int c, old;						\
+	c = atomic_read(v);					\
+	while (c != (u) && (old = atomic_cmpxchg((v), c, c + (a))) != c) \
+		c = old;					\
+	c != (u);						\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'u' - possible side-effects?
#527: FILE: include/asm-x86_64/atomic.h:374:
+#define atomic_add_unless(v, a, u)				\
+({								\
+	int c, old;						\
+	c = atomic_read(v);					\
+	while (c != (u) && (old = atomic_cmpxchg((v), c, c + (a))) != c) \
+		c = old;					\
+	c != (u);						\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'v' - possible side-effects?
#557: FILE: include/asm-xtensa/atomic.h:237:
+#define atomic_add_unless(v, a, u)				\
+({								\
+	int c, old;						\
+	c = atomic_read(v);					\
+	while (c != (u) && (old = atomic_cmpxchg((v), c, c + (a))) != c) \
+		c = old;					\
+	c != (u);						\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'u' - possible side-effects?
#557: FILE: include/asm-xtensa/atomic.h:237:
+#define atomic_add_unless(v, a, u)				\
+({								\
+	int c, old;						\
+	c = atomic_read(v);					\
+	while (c != (u) && (old = atomic_cmpxchg((v), c, c + (a))) != c) \
+		c = old;					\
+	c != (u);						\
+})

WARNING:INLINE: plain inline is preferred over __inline__
#578: FILE: include/asm-cris/atomic.h:138:
+static __inline__ int atomic_add_unless(atomic_t *v, int a, int u)

WARNING:LINE_SPACING: Missing a blank line after declarations
#582: FILE: include/asm-cris/atomic.h:142:
+	unsigned long flags;
+	cris_atomic_save(v, flags);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#589: FILE: include/asm-cris/atomic.h:149:
+}
+#define atomic_inc_not_zero(v) atomic_add_unless((v), 1, 0)

WARNING:LINE_SPACING: Missing a blank line after declarations
#606: FILE: arch/sparc/lib/atomic32.c:59:
+	unsigned long flags;
+	spin_lock_irqsave(ATOMIC_HASH(v), flags);

WARNING:LINE_SPACING: Missing a blank line after declarations
#662: FILE: include/asm-arm/atomic.h:180:
+	int c, old;
+	c = atomic_read(v);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#667: FILE: include/asm-arm/atomic.h:185:
+}
+#define atomic_inc_not_zero(v) atomic_add_unless((v), 1, 0)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000148570.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 0 errors, 12 warnings, 36 checks, 492 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000148570.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
