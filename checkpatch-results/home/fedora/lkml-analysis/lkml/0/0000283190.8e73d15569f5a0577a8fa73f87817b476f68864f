WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#64: 
diff -urN 2.6.6-rc3-mm2-g5-orig/arch/ppc64/kernel/pacaData.c 2.6.6-rc3-mm2-g5/arch/ppc64/kernel/pacaData.c

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#88: FILE: arch/ppc64/lib/locks.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#136: FILE: arch/ppc64/lib/locks.c:49:
+	BUG_ON(holder_cpu >= NR_CPUS);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#136: FILE: arch/ppc64/lib/locks.c:49:
+	BUG_ON(holder_cpu >= NR_CPUS);

CHECK:CAMELCASE: Avoid CamelCase: <xLpPaca>
#138: FILE: arch/ppc64/lib/locks.c:51:
+	yield_count = holder_paca->xLpPaca.xYieldCount;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <xYieldCount>
#138: FILE: arch/ppc64/lib/locks.c:51:
+	yield_count = holder_paca->xLpPaca.xYieldCount;

CHECK:CAMELCASE: Avoid CamelCase: <HvCall2>
#145: FILE: arch/ppc64/lib/locks.c:58:
+	HvCall2(HvCallBaseYieldProcessor, HvCall_YieldToProc,

CHECK:CAMELCASE: Avoid CamelCase: <HvCallBaseYieldProcessor>
#145: FILE: arch/ppc64/lib/locks.c:58:
+	HvCall2(HvCallBaseYieldProcessor, HvCall_YieldToProc,

CHECK:CAMELCASE: Avoid CamelCase: <HvCall_YieldToProc>
#145: FILE: arch/ppc64/lib/locks.c:58:
+	HvCall2(HvCallBaseYieldProcessor, HvCall_YieldToProc,

WARNING:INLINE: plain inline is preferred over __inline__
#160: FILE: arch/ppc64/lib/locks.c:73:
+static __inline__ unsigned long __spin_trylock(spinlock_t *lock)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#164: FILE: arch/ppc64/lib/locks.c:77:
+	__asm__ __volatile__(

WARNING:LINE_CONTINUATIONS: Avoid line continuations in quoted strings
#165: FILE: arch/ppc64/lib/locks.c:78:
+"	lwz		%1,24(13)		# __spin_trylock\n\

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#184: FILE: arch/ppc64/lib/locks.c:97:
+EXPORT_SYMBOL(_raw_spin_trylock);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#199: FILE: arch/ppc64/lib/locks.c:112:
+EXPORT_SYMBOL(_raw_spin_lock);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#219: FILE: arch/ppc64/lib/locks.c:132:
+EXPORT_SYMBOL(_raw_spin_lock_flags);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#227: FILE: arch/ppc64/lib/locks.c:140:
+EXPORT_SYMBOL(spin_unlock_wait);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#245: FILE: arch/ppc64/lib/locks.c:158:
+	BUG_ON(holder_cpu >= NR_CPUS);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#245: FILE: arch/ppc64/lib/locks.c:158:
+	BUG_ON(holder_cpu >= NR_CPUS);

WARNING:INLINE: plain inline is preferred over __inline__
#269: FILE: arch/ppc64/lib/locks.c:182:
+static __inline__ long __read_trylock(rwlock_t *rw)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#273: FILE: arch/ppc64/lib/locks.c:186:
+	__asm__ __volatile__(

WARNING:LINE_CONTINUATIONS: Avoid line continuations in quoted strings
#274: FILE: arch/ppc64/lib/locks.c:187:
+"1:	lwarx		%0,0,%1		# read_trylock\n\

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#293: FILE: arch/ppc64/lib/locks.c:206:
+EXPORT_SYMBOL(_raw_read_trylock);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#308: FILE: arch/ppc64/lib/locks.c:221:
+EXPORT_SYMBOL(_raw_read_lock);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#314: FILE: arch/ppc64/lib/locks.c:227:
+	__asm__ __volatile__(

WARNING:LINE_CONTINUATIONS: Avoid line continuations in quoted strings
#315: FILE: arch/ppc64/lib/locks.c:228:
+	"eieio				# read_unlock\n\

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#325: FILE: arch/ppc64/lib/locks.c:238:
+EXPORT_SYMBOL(_raw_read_unlock);

WARNING:INLINE: plain inline is preferred over __inline__
#331: FILE: arch/ppc64/lib/locks.c:244:
+static __inline__ long __write_trylock(rwlock_t *rw)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#335: FILE: arch/ppc64/lib/locks.c:248:
+	__asm__ __volatile__(

WARNING:LINE_CONTINUATIONS: Avoid line continuations in quoted strings
#336: FILE: arch/ppc64/lib/locks.c:249:
+"	lwz		%1,24(13)		# write_trylock\n\

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#355: FILE: arch/ppc64/lib/locks.c:268:
+EXPORT_SYMBOL(_raw_write_trylock);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#370: FILE: arch/ppc64/lib/locks.c:283:
+EXPORT_SYMBOL(_raw_write_lock);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#395: FILE: include/asm-ppc64/paca.h:64:
+	/* Note: the spinlock functions in arch/ppc64/lib/locks.c load lock_token and
+	   xPacaIndex with a single lwz instruction, using the constant offset 24.

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#396: FILE: include/asm-ppc64/paca.h:65:
+	   If you move either field, fix the spinlocks and rwlocks. */

CHECK:CAMELCASE: Avoid CamelCase: <xPacaIndex>
#398: FILE: include/asm-ppc64/paca.h:67:
+	u16 xPacaIndex;			/* Logical processor number		0x1A */

CHECK:CAMELCASE: Avoid CamelCase: <xHwProcNum>
#407: FILE: include/asm-ppc64/paca.h:76:
+	u16 xHwProcNum;			/* Physical processor number		0x5a */

ERROR:SPACING: space required before the open parenthesis '('
#438: FILE: include/asm-ppc64/spinlock.h:27:
+#define spin_lock_init(x)	do { *(x) = SPIN_LOCK_UNLOCKED; } while(0)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#438: FILE: include/asm-ppc64/spinlock.h:27:
+#define spin_lock_init(x)	do { *(x) = SPIN_LOCK_UNLOCKED; } while(0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:INLINE: plain inline is preferred over __inline__
#440: FILE: include/asm-ppc64/spinlock.h:29:
+static __inline__ void _raw_spin_unlock(spinlock_t *lock)

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#442: FILE: include/asm-ppc64/spinlock.h:31:
+	__asm__ __volatile__("eieio	# spin_unlock": : :"memory");
 	                           	              ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#442: FILE: include/asm-ppc64/spinlock.h:31:
+	__asm__ __volatile__("eieio	# spin_unlock": : :"memory");
 	                           	                  ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#456: FILE: include/asm-ppc64/spinlock.h:45:
+extern int _raw_spin_trylock(spinlock_t *lock);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#457: FILE: include/asm-ppc64/spinlock.h:46:
+extern void _raw_spin_lock(spinlock_t *lock);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#458: FILE: include/asm-ppc64/spinlock.h:47:
+extern void _raw_spin_lock_flags(spinlock_t *lock, unsigned long flags);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#459: FILE: include/asm-ppc64/spinlock.h:48:
+extern void spin_unlock_wait(spinlock_t *lock);

WARNING:LINE_CONTINUATIONS: Avoid line continuations in quoted strings
#470: FILE: include/asm-ppc64/spinlock.h:57:
+"1:	lwarx		%0,0,%2		# spin_trylock\n\

WARNING:INLINE: plain inline is preferred over __inline__
#510: FILE: include/asm-ppc64/spinlock.h:99:
+static __inline__ void _raw_spin_lock_flags(spinlock_t *lock,

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#518: FILE: include/asm-ppc64/spinlock.h:105:
+	__asm__ __volatile__(

WARNING:LINE_CONTINUATIONS: Avoid line continuations in quoted strings
#519: FILE: include/asm-ppc64/spinlock.h:106:
+	"b		2f		# spin_lock\n\

WARNING:LINE_CONTINUATIONS: Avoid line continuations in quoted strings
#523: FILE: include/asm-ppc64/spinlock.h:110:
+"	lwzx		%0,0,%2\n\

WARNING:LINE_CONTINUATIONS: Avoid line continuations in quoted strings
#527: FILE: include/asm-ppc64/spinlock.h:114:
+"	mtmsrd		%1,1\n\

WARNING:USE_LOCKDEP: Where possible, use lockdep_assert_held instead of assertions based on spin_is_locked
#540: FILE: include/asm-ppc64/spinlock.h:127:
+#define spin_unlock_wait(x)	do { cpu_relax(); } while (spin_is_locked(x))

lockdep_assert_held() annotations should be preferred over
assertions based on spin_is_locked()

See: https://www.kernel.org/doc/html/latest/locking/lockdep-design.html#annotations

ERROR:SPACING: space required before the open parenthesis '('
#551: FILE: include/asm-ppc64/spinlock.h:147:
+#define rwlock_init(x)		do { *(x) = RW_LOCK_UNLOCKED; } while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#551: FILE: include/asm-ppc64/spinlock.h:147:
+#define rwlock_init(x)		do { *(x) = RW_LOCK_UNLOCKED; } while(0)

WARNING:INLINE: plain inline is preferred over __inline__
#554: FILE: include/asm-ppc64/spinlock.h:150:
+static __inline__ int is_read_locked(rwlock_t *rw)

WARNING:INLINE: plain inline is preferred over __inline__
#559: FILE: include/asm-ppc64/spinlock.h:155:
+static __inline__ int is_write_locked(rwlock_t *rw)

WARNING:INLINE: plain inline is preferred over __inline__
#564: FILE: include/asm-ppc64/spinlock.h:160:
+static __inline__ void _raw_write_unlock(rwlock_t *rw)

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#566: FILE: include/asm-ppc64/spinlock.h:162:
+	__asm__ __volatile__("eieio		# write_unlock": : :"memory");
 	                           		               ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#566: FILE: include/asm-ppc64/spinlock.h:162:
+	__asm__ __volatile__("eieio		# write_unlock": : :"memory");
 	                           		                   ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#571: FILE: include/asm-ppc64/spinlock.h:167:
+extern int _raw_read_trylock(rwlock_t *rw);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#572: FILE: include/asm-ppc64/spinlock.h:168:
+extern void _raw_read_lock(rwlock_t *rw);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#573: FILE: include/asm-ppc64/spinlock.h:169:
+extern void _raw_read_unlock(rwlock_t *rw);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#574: FILE: include/asm-ppc64/spinlock.h:170:
+extern int _raw_write_trylock(rwlock_t *rw);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#575: FILE: include/asm-ppc64/spinlock.h:171:
+extern void _raw_write_lock(rwlock_t *rw);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#576: FILE: include/asm-ppc64/spinlock.h:172:
+extern void _raw_write_unlock(rwlock_t *rw);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000283190.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 6 errors, 36 warnings, 22 checks, 519 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000283190.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
