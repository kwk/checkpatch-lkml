ERROR:CODE_INDENT: code indent should use tabs where possible
#63: FILE: arch/ppc64/kernel/asm-offsets.c:104:
+        DEFINE(PACA_EXGEN, offsetof(struct paca_struct, exgen));$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#63: FILE: arch/ppc64/kernel/asm-offsets.c:104:
+        DEFINE(PACA_EXGEN, offsetof(struct paca_struct, exgen));$

ERROR:CODE_INDENT: code indent should use tabs where possible
#64: FILE: arch/ppc64/kernel/asm-offsets.c:105:
+        DEFINE(PACA_EXMC, offsetof(struct paca_struct, exmc));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#64: FILE: arch/ppc64/kernel/asm-offsets.c:105:
+        DEFINE(PACA_EXMC, offsetof(struct paca_struct, exmc));$

ERROR:CODE_INDENT: code indent should use tabs where possible
#65: FILE: arch/ppc64/kernel/asm-offsets.c:106:
+        DEFINE(PACA_EXSLB, offsetof(struct paca_struct, exslb));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#65: FILE: arch/ppc64/kernel/asm-offsets.c:106:
+        DEFINE(PACA_EXSLB, offsetof(struct paca_struct, exslb));$

ERROR:CODE_INDENT: code indent should use tabs where possible
#66: FILE: arch/ppc64/kernel/asm-offsets.c:107:
+        DEFINE(PACA_EXDSI, offsetof(struct paca_struct, exdsi));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#66: FILE: arch/ppc64/kernel/asm-offsets.c:107:
+        DEFINE(PACA_EXDSI, offsetof(struct paca_struct, exdsi));$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#74: FILE: arch/ppc64/kernel/asm-offsets.c:144:
+	DEFINE(GPR10, STACK_FRAME_OVERHEAD+offsetof(struct pt_regs, gpr[10]));
 	                                  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#75: FILE: arch/ppc64/kernel/asm-offsets.c:145:
+	DEFINE(GPR11, STACK_FRAME_OVERHEAD+offsetof(struct pt_regs, gpr[11]));
 	                                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#76: FILE: arch/ppc64/kernel/asm-offsets.c:146:
+	DEFINE(GPR12, STACK_FRAME_OVERHEAD+offsetof(struct pt_regs, gpr[12]));
 	                                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#77: FILE: arch/ppc64/kernel/asm-offsets.c:147:
+	DEFINE(GPR13, STACK_FRAME_OVERHEAD+offsetof(struct pt_regs, gpr[13]));
 	                                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#86: FILE: arch/ppc64/kernel/asm-offsets.c:166:
+	DEFINE(_TRAP, STACK_FRAME_OVERHEAD+offsetof(struct pt_regs, trap));
 	                                  ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2860: FILE: arch/ppc64/kernel/syscalls.c:244:
+	printk("syscall %ld(%lx, %lx, %lx, %lx, %lx, %lx) regs=%p current=%p"

WARNING:SPLIT_STRING: quoted string split across lines
#2861: FILE: arch/ppc64/kernel/syscalls.c:245:
+	printk("syscall %ld(%lx, %lx, %lx, %lx, %lx, %lx) regs=%p current=%p"
+	       " cpu=%d\n", regs->gpr[0], r3, r4, r5, r6, r7, r8, regs,

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2867: FILE: arch/ppc64/kernel/syscalls.c:251:
+	printk(" -> %lx, current=%p cpu=%d\n", r3, current, smp_processor_id());

CHECK:CAMELCASE: Avoid CamelCase: <AltivecUnavailableException>
#2880: FILE: arch/ppc64/kernel/traps.c:444:
+void AltivecUnavailableException(struct pt_regs *regs)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2885: FILE: arch/ppc64/kernel/traps.c:449:
+		/* A user program has executed an altivec instruction,
+		   but this kernel doesn't support altivec. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2885: FILE: arch/ppc64/kernel/traps.c:449:
+		   but this kernel doesn't support altivec. */

CHECK:SPACING: No space is necessary after a cast
#2891: FILE: arch/ppc64/kernel/traps.c:455:
+		info.si_addr = (void *) regs->nip;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2948: FILE: arch/ppc64/mm/fault.c:114:
+		/* in_atomic() in user mode is really bad,
+		   as is current->mm == NULL. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2948: FILE: arch/ppc64/mm/fault.c:114:
+		   as is current->mm == NULL. */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#2949: FILE: arch/ppc64/mm/fault.c:115:
+		printk(KERN_EMERG "Page fault in user mode with"

WARNING:SPLIT_STRING: quoted string split across lines
#2950: FILE: arch/ppc64/mm/fault.c:116:
+		printk(KERN_EMERG "Page fault in user mode with"
+		       "in_atomic() = %d mm = %p\n", in_atomic(), mm);

WARNING:MISSING_SPACE: break quoted strings at a space character
#2950: FILE: arch/ppc64/mm/fault.c:116:
+		printk(KERN_EMERG "Page fault in user mode with"
+		       "in_atomic() = %d mm = %p\n", in_atomic(), mm);

WARNING:IN_ATOMIC: use of in_atomic() is incorrect outside core kernel code
#2950: FILE: arch/ppc64/mm/fault.c:116:
+		       "in_atomic() = %d mm = %p\n", in_atomic(), mm);

in_atomic() is not for driver use so any such use is reported as an ERROR.
Also in_atomic() is often used to determine if sleeping is permitted,
but it is not reliable in this use model.  Therefore its use is
strongly discouraged.

However, in_atomic() is ok for core kernel use.

See: https://lore.kernel.org/lkml/20080320201723.b87b3732.akpm@linux-foundation.org/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#2951: FILE: arch/ppc64/mm/fault.c:117:
+		printk(KERN_EMERG "NIP = %lx  MSR = %lx\n",

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3039: FILE: include/asm-ppc64/paca.h:145:
+				 * on the linear mapping */

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#3067: FILE: include/asm-ppc64/ppc_asm.h:31:
+#define SAVE_NVGPRS(base)	SAVE_8GPRS(14, base); SAVE_10GPRS(22, base)

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'base' - possible side-effects?
#3067: FILE: include/asm-ppc64/ppc_asm.h:31:
+#define SAVE_NVGPRS(base)	SAVE_8GPRS(14, base); SAVE_10GPRS(22, base)

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#3068: FILE: include/asm-ppc64/ppc_asm.h:32:
+#define REST_NVGPRS(base)	REST_8GPRS(14, base); REST_10GPRS(22, base)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'base' - possible side-effects?
#3068: FILE: include/asm-ppc64/ppc_asm.h:32:
+#define REST_NVGPRS(base)	REST_8GPRS(14, base); REST_10GPRS(22, base)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3115: FILE: include/asm-ppc64/ptrace.h:84:
+#define CHECK_FULL_REGS(regs)	BUG_ON(regs->trap & 1)

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'regs' may be better as '(regs)' to avoid precedence issues
#3115: FILE: include/asm-ppc64/ptrace.h:84:
+#define CHECK_FULL_REGS(regs)	BUG_ON(regs->trap & 1)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000274189.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 6 errors, 18 warnings, 10 checks, 2961 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000274189.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
