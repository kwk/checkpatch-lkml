WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#32: 
Making functions static where appropriate and so on... Marking the config entry

WARNING:TYPO_SPELLING: 'maxium' may be misspelled - perhaps 'maximum'?
#74: FILE: drivers/ide/Config.help:767:
+  and 32 is valid, with 32 being the maxium that the hardware supports.
                                      ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#154: FILE: drivers/ide/ide.c:1264:
+			BUG_ON(!drive->using_tcq);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:BRACES: braces {} should be used on all arms of this statement
#222: FILE: drivers/ide/ide-disk.c:160:
+	if (blk_rq_tagged(rq)) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#225: FILE: drivers/ide/ide-disk.c:163:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#235: FILE: drivers/ide/ide-disk.c:200:
+	if (blk_rq_tagged(rq)) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#238: FILE: drivers/ide/ide-disk.c:203:
+	} else

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#284: FILE: drivers/ide/ide-disk.c:331:
+			BUG_ON(!ata_pending_commands(drive));

CHECK:SPACING: No space is necessary after a cast
#300: FILE: drivers/ide/ide-disk.c:597:
+	ide_drive_t	*drive = (ide_drive_t *) data;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#313: FILE: drivers/ide/ide-disk.c:610:
+	len += sprintf(out+len, "Max queue depth:\t%d\n",drive->queue_depth);
 	                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#313: FILE: drivers/ide/ide-disk.c:610:
+	len += sprintf(out+len, "Max queue depth:\t%d\n",drive->queue_depth);
 	                                                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#314: FILE: drivers/ide/ide-disk.c:611:
+	len += sprintf(out+len, "Max achieved depth:\t%d\n",drive->max_depth);
 	                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#314: FILE: drivers/ide/ide-disk.c:611:
+	len += sprintf(out+len, "Max achieved depth:\t%d\n",drive->max_depth);
 	                                                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#315: FILE: drivers/ide/ide-disk.c:612:
+	len += sprintf(out+len, "Max depth since last:\t%d\n",drive->max_last_depth);
 	                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#315: FILE: drivers/ide/ide-disk.c:612:
+	len += sprintf(out+len, "Max depth since last:\t%d\n",drive->max_last_depth);
 	                                                     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#316: FILE: drivers/ide/ide-disk.c:613:
+	len += sprintf(out+len, "Current depth:\t\t%d\n", ata_pending_commands(drive));
 	                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#317: FILE: drivers/ide/ide-disk.c:614:
+	len += sprintf(out+len, "Active tags:\t\t[ ");
 	                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#324: FILE: drivers/ide/ide-disk.c:621:
+		len += sprintf(out+len, "%d, ", i);
 		                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#327: FILE: drivers/ide/ide-disk.c:624:
+	len += sprintf(out+len, "]\n");
 	                  ^

WARNING:LONG_LINE: line length of 121 exceeds 100 columns
#329: FILE: drivers/ide/ide-disk.c:626:
+	len += sprintf(out+len, "Queue:\t\t\treleased [ %lu ] - started [ %lu ]\n", drive->immed_rel, drive->immed_comp);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#329: FILE: drivers/ide/ide-disk.c:626:
+	len += sprintf(out+len, "Queue:\t\t\treleased [ %lu ] - started [ %lu ]\n", drive->immed_rel, drive->immed_comp);
 	                  ^

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#332: FILE: drivers/ide/ide-disk.c:629:
+		len += sprintf(out+len, "pending request and queue count mismatch (counted: %d)\n", cmds);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#332: FILE: drivers/ide/ide-disk.c:629:
+		len += sprintf(out+len, "pending request and queue count mismatch (counted: %d)\n", cmds);
 		                  ^

WARNING:LONG_LINE: line length of 119 exceeds 100 columns
#334: FILE: drivers/ide/ide-disk.c:631:
+	len += sprintf(out+len, "DMA status:\t\t%srunning\n", test_bit(IDE_DMA, &HWGROUP(drive)->flags) ? "" : "not ");

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#334: FILE: drivers/ide/ide-disk.c:631:
+	len += sprintf(out+len, "DMA status:\t\t%srunning\n", test_bit(IDE_DMA, &HWGROUP(drive)->flags) ? "" : "not ");
 	                  ^

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#349: FILE: drivers/ide/ide-disk.c:646:
+	{ "tcq",		S_IFREG|S_IRUSR,	proc_idedisk_read_tcq,			NULL },

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#349: FILE: drivers/ide/ide-disk.c:646:
+	{ "tcq",		S_IFREG|S_IRUSR,	proc_idedisk_read_tcq,			NULL },
 	        		       ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR' are not preferred. Consider using octal permissions '0400'.
#349: FILE: drivers/ide/ide-disk.c:646:
+	{ "tcq",		S_IFREG|S_IRUSR,	proc_idedisk_read_tcq,			NULL },

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:LONG_LINE: line length of 287 exceeds 100 columns
#392: FILE: drivers/ide/ide-disk.c:792:
+	ide_add_setting(drive,	"using_tcq",		SETTING_RW,					HDIO_GET_QDMA,		HDIO_SET_QDMA,		TYPE_BYTE,	0,	IDE_MAX_TAG,			1,		1,		&drive->using_tcq,		set_using_tcq);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#425: FILE: drivers/ide/ide-dma.c:546:
+	outb(inb(dma_base+2)|6, dma_base+2);	/* clear INTR & ERROR flags */
 	                 ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#425: FILE: drivers/ide/ide-dma.c:546:
+	outb(inb(dma_base+2)|6, dma_base+2);	/* clear INTR & ERROR flags */
 	                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#425: FILE: drivers/ide/ide-dma.c:546:
+	outb(inb(dma_base+2)|6, dma_base+2);	/* clear INTR & ERROR flags */
 	                                ^

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#570: FILE: drivers/ide/ide-taskfile.c:466:
+		if (args->taskfile.command == WIN_WRITEDMA || args->taskfile.command == WIN_WRITEDMA_EXT)

CHECK:BRACES: braces {} should be used on all arms of this statement
#570: FILE: drivers/ide/ide-taskfile.c:466:
+		if (args->taskfile.command == WIN_WRITEDMA || args->taskfile.command == WIN_WRITEDMA_EXT)
[...]
+		else if (args->taskfile.command == WIN_READDMA || args->taskfile.command == WIN_READDMA_EXT)
[...]
+		else if (args->taskfile.command == WIN_WRITEDMA_QUEUED || args->taskfile.command == WIN_WRITEDMA_QUEUED_EXT) {
[...]
+		} else if (args->taskfile.command == WIN_READDMA_QUEUED || args->taskfile.command == WIN_READDMA_QUEUED_EXT) {
[...]
+		} else {
[...]

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#572: FILE: drivers/ide/ide-taskfile.c:468:
+		else if (args->taskfile.command == WIN_READDMA || args->taskfile.command == WIN_READDMA_EXT)

WARNING:LONG_LINE: line length of 126 exceeds 100 columns
#574: FILE: drivers/ide/ide-taskfile.c:470:
+		else if (args->taskfile.command == WIN_WRITEDMA_QUEUED || args->taskfile.command == WIN_WRITEDMA_QUEUED_EXT) {

WARNING:LONG_LINE: line length of 126 exceeds 100 columns
#577: FILE: drivers/ide/ide-taskfile.c:473:
+		} else if (args->taskfile.command == WIN_READDMA_QUEUED || args->taskfile.command == WIN_READDMA_QUEUED_EXT) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#581: FILE: drivers/ide/ide-taskfile.c:477:
+			printk("ata_taskfile: unknown command %x\n", args->taskfile.command);

CHECK:BRACES: braces {} should be used on all arms of this statement
#590: FILE: drivers/ide/ide-taskfile.c:486:
+		if (tcq)
[...]
+		else {
[...]

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#592: FILE: drivers/ide/ide-taskfile.c:488:
+			return drive->channel->udma(dma_act, drive, rq);
+		else {

CHECK:BRACES: Unbalanced braces around else statement
#592: FILE: drivers/ide/ide-taskfile.c:488:
+		else {

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#623: FILE: drivers/ide/tcq.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#636: FILE: drivers/ide/tcq.c:14:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#637: FILE: drivers/ide/tcq.c:15:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

WARNING:INCLUDE_LINUX: Use #include <linux/delay.h> instead of <asm/delay.h>
#651: FILE: drivers/ide/tcq.c:29:
+#include <asm/delay.h>

WARNING:LONG_LINE: line length of 113 exceeds 100 columns
#713: FILE: drivers/ide/tcq.c:91:
+	printk(KERN_INFO "ATA: %s: invalidating pending queue (%d)\n", drive->name, ata_pending_commands(drive));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#713: FILE: drivers/ide/tcq.c:91:
+	printk(KERN_INFO "ATA: %s: invalidating pending queue (%d)\n", drive->name, ata_pending_commands(drive));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#737: FILE: drivers/ide/tcq.c:115:
+		printk(KERN_ERR "ATA: %s: failed to issue NOP\n", drive->name);

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#737: FILE: drivers/ide/tcq.c:115:
+	if (!args) {
+		printk(KERN_ERR "ATA: %s: failed to issue NOP\n", drive->name);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#749: FILE: drivers/ide/tcq.c:127:
+	BUG_ON(!rq);

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#756: FILE: drivers/ide/tcq.c:134:
+	rq->rq_dev = mk_kdev(drive->channel->major, (drive->select.b.unit)<<PARTN_BITS);
 	                                                                  ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#770: FILE: drivers/ide/tcq.c:148:
+	printk(KERN_DEBUG "ATA: tcq_invalidate_queue: done\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'tcq_invalidate_queue', this function's name, in a string
#770: FILE: drivers/ide/tcq.c:148:
+	printk(KERN_DEBUG "ATA: tcq_invalidate_queue: done\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:SPACING: No space is necessary after a cast
#775: FILE: drivers/ide/tcq.c:153:
+	struct ata_device *drive = (struct ata_device *) data;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#779: FILE: drivers/ide/tcq.c:157:
+	printk(KERN_ERR "ATA: %s: timeout waiting for interrupt...\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#779: FILE: drivers/ide/tcq.c:157:
+	printk(KERN_ERR "ATA: %s: timeout waiting for interrupt...\n", __FUNCTION__);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#784: FILE: drivers/ide/tcq.c:162:
+		printk(KERN_ERR "ATA: %s: hwgroup not busy\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#784: FILE: drivers/ide/tcq.c:162:
+		printk(KERN_ERR "ATA: %s: hwgroup not busy\n", __FUNCTION__);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!hwgroup->handler"
#785: FILE: drivers/ide/tcq.c:163:
+	if (hwgroup->handler == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#786: FILE: drivers/ide/tcq.c:164:
+		printk(KERN_ERR "ATA: %s: missing isr!\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#786: FILE: drivers/ide/tcq.c:164:
+		printk(KERN_ERR "ATA: %s: missing isr!\n", __FUNCTION__);

CHECK:SPACING: No space is necessary after a cast
#813: FILE: drivers/ide/tcq.c:191:
+	hwgroup->timer.data = (unsigned long) hwgroup->XXX_drive;

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#834: FILE: drivers/ide/tcq.c:212:
+		udelay(10);

usleep_range() should be preferred over udelay(). The proper way of
using usleep_range() is mentioned in the kernel docs.

See: https://www.kernel.org/doc/html/latest/timers/timers-howto.html#delays-information-on-the-various-kernel-delay-sleep-mechanisms

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'service', this function's name, in a string
#853: FILE: drivers/ide/tcq.c:231:
+	TCQ_PRINTK("%s: started service\n", drive->name);

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#867: FILE: drivers/ide/tcq.c:245:
+		udelay(10);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#878: FILE: drivers/ide/tcq.c:256:
+		printk(KERN_ERR"%s: BUSY clear took too long\n", __FUNCTION__);

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#878: FILE: drivers/ide/tcq.c:256:
+		printk(KERN_ERR"%s: BUSY clear took too long\n", __FUNCTION__);

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#878: FILE: drivers/ide/tcq.c:256:
+		printk(KERN_ERR"%s: BUSY clear took too long\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#879: FILE: drivers/ide/tcq.c:257:
+		ide_dump_status(drive, __FUNCTION__, stat);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#890: FILE: drivers/ide/tcq.c:268:
+		ide_dump_status(drive, __FUNCTION__, stat);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#898: FILE: drivers/ide/tcq.c:276:
+	if ((feat = GET_FEAT()) & NSEC_REL) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#900: FILE: drivers/ide/tcq.c:278:
+		printk("%s: release in service\n", drive->name);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'service', this function's name, in a string
#900: FILE: drivers/ide/tcq.c:278:
+		printk("%s: release in service\n", drive->name);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#906: FILE: drivers/ide/tcq.c:284:
+	TCQ_PRINTK("%s: stat %x, feat %x\n", __FUNCTION__, stat, feat);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#910: FILE: drivers/ide/tcq.c:288:
+		printk(KERN_ERR"%s: missing request for tag %d\n", __FUNCTION__, tag);

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#910: FILE: drivers/ide/tcq.c:288:
+		printk(KERN_ERR"%s: missing request for tag %d\n", __FUNCTION__, tag);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#910: FILE: drivers/ide/tcq.c:288:
+		printk(KERN_ERR"%s: missing request for tag %d\n", __FUNCTION__, tag);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#920: FILE: drivers/ide/tcq.c:298:
+	TCQ_PRINTK("%s: starting command %x\n", __FUNCTION__, stat);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#928: FILE: drivers/ide/tcq.c:306:
+	TCQ_PRINTK("%s: %s\n", drive->name, __FUNCTION__);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#933: FILE: drivers/ide/tcq.c:311:
+	if ((stat = GET_STAT()) & SERVICE_STAT)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#957: FILE: drivers/ide/tcq.c:335:
+		printk(KERN_ERR "%s: %s: error status %x\n", __FUNCTION__, drive->name,stat);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#957: FILE: drivers/ide/tcq.c:335:
+		printk(KERN_ERR "%s: %s: error status %x\n", __FUNCTION__, drive->name,stat);
 		                                                                      ^

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#957: FILE: drivers/ide/tcq.c:335:
+		printk(KERN_ERR "%s: %s: error status %x\n", __FUNCTION__, drive->name,stat);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#958: FILE: drivers/ide/tcq.c:336:
+		ide_dump_status(drive, __FUNCTION__, stat);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#964: FILE: drivers/ide/tcq.c:342:
+		printk("%s: bad DMA status (dma_stat=%x)\n", drive->name, dma_stat);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#966: FILE: drivers/ide/tcq.c:344:
+	TCQ_PRINTK("%s: ending %p, tag %d\n", __FUNCTION__, rq, rq->tag);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#989: FILE: drivers/ide/tcq.c:367:
+	TCQ_PRINTK("%s: stat=%x\n", __FUNCTION__, stat);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1002: FILE: drivers/ide/tcq.c:380:
+		TCQ_PRINTK("%s: SERV (stat=%x)\n", __FUNCTION__, stat);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1006: FILE: drivers/ide/tcq.c:384:
+	printk("%s: stat=%x, not expected\n", __FUNCTION__, stat);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1006: FILE: drivers/ide/tcq.c:384:
+	printk("%s: stat=%x, not expected\n", __FUNCTION__, stat);

ERROR:SPACING: spaces required around that '&&' (ctx:WxV)
#1024: FILE: drivers/ide/tcq.c:402:
+		if (drive->channel->drives[i].present &&drive->type == ATA_DISK)
 		                                      ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1046: FILE: drivers/ide/tcq.c:424:
+	printk("%s: NOP Auto-poll enabled\n", ch->name);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1072: FILE: drivers/ide/tcq.c:450:
+		printk("%s: failed to enable write cache\n", drive->name);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1086: FILE: drivers/ide/tcq.c:464:
+		printk("%s: disabling release interrupt fail\n", drive->name);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1100: FILE: drivers/ide/tcq.c:478:
+		printk("%s: enabling service interrupt fail\n", drive->name);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1121: FILE: drivers/ide/tcq.c:499:
+			printk("%s: TCQ disabled\n", drive->name);

WARNING:LONG_LINE: line length of 121 exceeds 100 columns
#1143: FILE: drivers/ide/tcq.c:521:
+		printk("%s: tagged command queueing enabled, command queue depth %d\n", drive->name, drive->queue_depth);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1143: FILE: drivers/ide/tcq.c:521:
+		printk("%s: tagged command queueing enabled, command queue depth %d\n", drive->name, drive->queue_depth);

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#1155: FILE: drivers/ide/tcq.c:533:
+		udelay(10);

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#1166: FILE: drivers/ide/tcq.c:544:
+		udelay(10);

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#1179: FILE: drivers/ide/tcq.c:557:
+	switch (func) {
[...]
+		case ide_dma_queued_start:
[...]
+		case ide_dma_read_queued:
[...]
+		case ide_dma_queued_off:
[...]
+		case ide_dma_queued_on:
[...]
+		default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1187: FILE: drivers/ide/tcq.c:565:
+				printk("queued_rw: IDE_BUSY not set\n");

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1235: FILE: drivers/ide/tcq.c:613:
+			if ((feat = GET_FEAT()) & NSEC_REL) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1242: FILE: drivers/ide/tcq.c:620:
+				if ((stat = GET_STAT()) & SERVICE_STAT)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1287: FILE: include/linux/ide.h:371:
+^Iunsigned long^Iimmed_rel;^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: Unnecessary space before function pointer arguments
#1321: FILE: include/linux/ide.h:424:
+	void (*tuneproc) (struct ata_device *, byte pio);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_device *' should also have an identifier name
#1321: FILE: include/linux/ide.h:424:
+	void (*tuneproc) (struct ata_device *, byte pio);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:SPACING: Unnecessary space before function pointer arguments
#1322: FILE: include/linux/ide.h:425:
+	int (*speedproc) (struct ata_device *, byte pio);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_device *' should also have an identifier name
#1322: FILE: include/linux/ide.h:425:
+	int (*speedproc) (struct ata_device *, byte pio);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1326: FILE: include/linux/ide.h:428:
+	void (*selectproc) (struct ata_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_device *' should also have an identifier name
#1326: FILE: include/linux/ide.h:428:
+	void (*selectproc) (struct ata_device *);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1330: FILE: include/linux/ide.h:431:
+	void (*resetproc) (struct ata_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_device *' should also have an identifier name
#1330: FILE: include/linux/ide.h:431:
+	void (*resetproc) (struct ata_device *);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1334: FILE: include/linux/ide.h:434:
+	void (*intrproc) (struct ata_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_device *' should also have an identifier name
#1334: FILE: include/linux/ide.h:434:
+	void (*intrproc) (struct ata_device *);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1338: FILE: include/linux/ide.h:437:
+	void (*maskproc) (struct ata_device *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_device *' should also have an identifier name
#1338: FILE: include/linux/ide.h:437:
+	void (*maskproc) (struct ata_device *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1338: FILE: include/linux/ide.h:437:
+	void (*maskproc) (struct ata_device *, int);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1342: FILE: include/linux/ide.h:440:
+	void (*rwproc) (struct ata_device *, ide_dma_action_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_device *' should also have an identifier name
#1342: FILE: include/linux/ide.h:440:
+	void (*rwproc) (struct ata_device *, ide_dma_action_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ide_dma_action_t' should also have an identifier name
#1342: FILE: include/linux/ide.h:440:
+	void (*rwproc) (struct ata_device *, ide_dma_action_t);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1346: FILE: include/linux/ide.h:443:
+	int (*quirkproc) (struct ata_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_device *' should also have an identifier name
#1346: FILE: include/linux/ide.h:443:
+	int (*quirkproc) (struct ata_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_device *' should also have an identifier name
#1353: FILE: include/linux/ide.h:446:
+	void (*ata_read)(struct ata_device *, void *, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#1353: FILE: include/linux/ide.h:446:
+	void (*ata_read)(struct ata_device *, void *, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#1353: FILE: include/linux/ide.h:446:
+	void (*ata_read)(struct ata_device *, void *, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_device *' should also have an identifier name
#1354: FILE: include/linux/ide.h:447:
+	void (*ata_write)(struct ata_device *, void *, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#1354: FILE: include/linux/ide.h:447:
+	void (*ata_write)(struct ata_device *, void *, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#1354: FILE: include/linux/ide.h:447:
+	void (*ata_write)(struct ata_device *, void *, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_device *' should also have an identifier name
#1355: FILE: include/linux/ide.h:448:
+	void (*atapi_read)(struct ata_device *, void *, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#1355: FILE: include/linux/ide.h:448:
+	void (*atapi_read)(struct ata_device *, void *, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#1355: FILE: include/linux/ide.h:448:
+	void (*atapi_read)(struct ata_device *, void *, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_device *' should also have an identifier name
#1356: FILE: include/linux/ide.h:449:
+	void (*atapi_write)(struct ata_device *, void *, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#1356: FILE: include/linux/ide.h:449:
+	void (*atapi_write)(struct ata_device *, void *, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#1356: FILE: include/linux/ide.h:449:
+	void (*atapi_write)(struct ata_device *, void *, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_device *' should also have an identifier name
#1373: FILE: include/linux/ide.h:486:
+	int (*busproc)(struct ata_device *, int);	/* driver soft-power interface */

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1373: FILE: include/linux/ide.h:486:
+	int (*busproc)(struct ata_device *, int);	/* driver soft-power interface */

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1413: FILE: include/linux/ide.h:785:
+extern void ata_read(struct ata_device *, void *, unsigned int);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_device *' should also have an identifier name
#1413: FILE: include/linux/ide.h:785:
+extern void ata_read(struct ata_device *, void *, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#1413: FILE: include/linux/ide.h:785:
+extern void ata_read(struct ata_device *, void *, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#1413: FILE: include/linux/ide.h:785:
+extern void ata_read(struct ata_device *, void *, unsigned int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1414: FILE: include/linux/ide.h:786:
+extern void ata_write(struct ata_device *, void *, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_device *' should also have an identifier name
#1414: FILE: include/linux/ide.h:786:
+extern void ata_write(struct ata_device *, void *, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#1414: FILE: include/linux/ide.h:786:
+extern void ata_write(struct ata_device *, void *, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#1414: FILE: include/linux/ide.h:786:
+extern void ata_write(struct ata_device *, void *, unsigned int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1418: FILE: include/linux/ide.h:788:
+extern void atapi_read(struct ata_device *, void *, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_device *' should also have an identifier name
#1418: FILE: include/linux/ide.h:788:
+extern void atapi_read(struct ata_device *, void *, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#1418: FILE: include/linux/ide.h:788:
+extern void atapi_read(struct ata_device *, void *, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#1418: FILE: include/linux/ide.h:788:
+extern void atapi_read(struct ata_device *, void *, unsigned int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1419: FILE: include/linux/ide.h:789:
+extern void atapi_write(struct ata_device *, void *, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_device *' should also have an identifier name
#1419: FILE: include/linux/ide.h:789:
+extern void atapi_write(struct ata_device *, void *, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#1419: FILE: include/linux/ide.h:789:
+extern void atapi_write(struct ata_device *, void *, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#1419: FILE: include/linux/ide.h:789:
+extern void atapi_write(struct ata_device *, void *, unsigned int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1423: FILE: include/linux/ide.h:791:
+extern ide_startstop_t ata_taskfile(struct ata_device *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_device *' should also have an identifier name
#1423: FILE: include/linux/ide.h:791:
+extern ide_startstop_t ata_taskfile(struct ata_device *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_taskfile *' should also have an identifier name
#1423: FILE: include/linux/ide.h:791:
+extern ide_startstop_t ata_taskfile(struct ata_device *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct request *' should also have an identifier name
#1423: FILE: include/linux/ide.h:791:
+extern ide_startstop_t ata_taskfile(struct ata_device *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1424: FILE: include/linux/ide.h:792:
+extern ide_startstop_t ata_taskfile(struct ata_device *,
+	struct ata_taskfile *, struct request *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1435: FILE: include/linux/ide.h:877:
+extern struct ata_device *ide_scan_devices(byte, const char *, struct ata_operations *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1436: FILE: include/linux/ide.h:878:
+extern int ide_register_subdriver(struct ata_device *, struct ata_operations *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_device *' should also have an identifier name
#1436: FILE: include/linux/ide.h:878:
+extern int ide_register_subdriver(struct ata_device *, struct ata_operations *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_operations *' should also have an identifier name
#1436: FILE: include/linux/ide.h:878:
+extern int ide_register_subdriver(struct ata_device *, struct ata_operations *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1437: FILE: include/linux/ide.h:879:
+extern int ide_unregister_subdriver(struct ata_device *drive);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1447: FILE: include/linux/ide.h:893:
+extern int ide_build_dmatable(struct ata_device *, ide_dma_action_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1448: FILE: include/linux/ide.h:894:
+extern void ide_destroy_dmatable(struct ata_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_device *' should also have an identifier name
#1448: FILE: include/linux/ide.h:894:
+extern void ide_destroy_dmatable(struct ata_device *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1455: FILE: include/linux/ide.h:896:
+extern int check_drive_lists(struct ata_device *, int good_bad);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_device *' should also have an identifier name
#1455: FILE: include/linux/ide.h:896:
+extern int check_drive_lists(struct ata_device *, int good_bad);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1456: FILE: include/linux/ide.h:897:
+extern int ide_dmaproc(ide_dma_action_t func, struct ata_device *, struct request *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_device *' should also have an identifier name
#1456: FILE: include/linux/ide.h:897:
+extern int ide_dmaproc(ide_dma_action_t func, struct ata_device *, struct request *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct request *' should also have an identifier name
#1456: FILE: include/linux/ide.h:897:
+extern int ide_dmaproc(ide_dma_action_t func, struct ata_device *, struct request *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1457: FILE: include/linux/ide.h:898:
+extern ide_startstop_t ide_tcq_dmaproc(ide_dma_action_t, struct ata_device *, struct request *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ide_dma_action_t' should also have an identifier name
#1457: FILE: include/linux/ide.h:898:
+extern ide_startstop_t ide_tcq_dmaproc(ide_dma_action_t, struct ata_device *, struct request *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_device *' should also have an identifier name
#1457: FILE: include/linux/ide.h:898:
+extern ide_startstop_t ide_tcq_dmaproc(ide_dma_action_t, struct ata_device *, struct request *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct request *' should also have an identifier name
#1457: FILE: include/linux/ide.h:898:
+extern ide_startstop_t ide_tcq_dmaproc(ide_dma_action_t, struct ata_device *, struct request *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1458: FILE: include/linux/ide.h:899:
+extern void ide_release_dma(struct ata_channel *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_channel *' should also have an identifier name
#1458: FILE: include/linux/ide.h:899:
+extern void ide_release_dma(struct ata_channel *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1459: FILE: include/linux/ide.h:900:
+extern void ide_setup_dma(struct ata_channel *,	unsigned long, unsigned int) __init;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1460: FILE: include/linux/ide.h:901:
+extern int ide_start_dma(ide_dma_action_t, struct ata_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ide_dma_action_t' should also have an identifier name
#1460: FILE: include/linux/ide.h:901:
+extern int ide_start_dma(ide_dma_action_t, struct ata_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_device *' should also have an identifier name
#1460: FILE: include/linux/ide.h:901:
+extern int ide_start_dma(ide_dma_action_t, struct ata_device *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1468: FILE: include/linux/ide.h:908:
+extern int drive_is_ready(struct ata_device *drive);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000460798.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 13 errors, 119 warnings, 50 checks, 1345 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000460798.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
