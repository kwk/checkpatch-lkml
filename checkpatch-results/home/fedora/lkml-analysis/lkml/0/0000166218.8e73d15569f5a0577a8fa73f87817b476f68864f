WARNING:TYPO_SPELLING: 'neccessary' may be misspelled - perhaps 'necessary'?
#27: 
This adds support for reading ADCs (etc), neccessary to operate touch
                                          ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#49: FILE: drivers/misc/Kconfig:39:
+config MCP_SA1100
+	tristate "Support SA1100 MCP interface"
+	depends on ARCH_SA1100
+	select MCP
+
+# Chip drivers

Kconfig symbols should have a help text which fully describes
it.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#55: FILE: drivers/misc/Kconfig:45:
+config MCP_UCB1200
+	tristate "Support for UCB1200 / UCB1300"
+	depends on MCP
+

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#76: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#80: FILE: drivers/misc/mcp-core.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#81: FILE: drivers/misc/mcp-core.c:2:
+ *  linux/drivers/misc/mcp-core.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#261: FILE: drivers/misc/mcp-core.c:182:
+static void mcp_host_release(struct device *dev) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#263: FILE: drivers/misc/mcp-core.c:184:
+	struct mcp *mcp = dev->platform_data;
+	complete(&mcp->attached_device_released);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#270: FILE: drivers/misc/mcp-core.c:191:
+	struct device *dev = kmalloc(sizeof(*dev), GFP_KERNEL);
+	if (!dev)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#323: FILE: drivers/misc/mcp-core.c:244:
+EXPORT_SYMBOL(mcp_set_telecom_divisor);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#324: FILE: drivers/misc/mcp-core.c:245:
+EXPORT_SYMBOL(mcp_set_audio_divisor);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#325: FILE: drivers/misc/mcp-core.c:246:
+EXPORT_SYMBOL(mcp_reg_write);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#326: FILE: drivers/misc/mcp-core.c:247:
+EXPORT_SYMBOL(mcp_reg_read);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#327: FILE: drivers/misc/mcp-core.c:248:
+EXPORT_SYMBOL(mcp_enable);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#328: FILE: drivers/misc/mcp-core.c:249:
+EXPORT_SYMBOL(mcp_disable);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#329: FILE: drivers/misc/mcp-core.c:250:
+EXPORT_SYMBOL(mcp_host_register);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#330: FILE: drivers/misc/mcp-core.c:251:
+EXPORT_SYMBOL(mcp_host_unregister);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#331: FILE: drivers/misc/mcp-core.c:252:
+EXPORT_SYMBOL(mcp_driver_register);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#332: FILE: drivers/misc/mcp-core.c:253:
+EXPORT_SYMBOL(mcp_driver_unregister);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#342: FILE: drivers/misc/mcp-sa1100.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#343: FILE: drivers/misc/mcp-sa1100.c:2:
+ *  linux/drivers/misc/mcp-sa1100.c

CHECK:LINE_SPACING: Please don't use multiple blank lines
#373: FILE: drivers/misc/mcp-sa1100.c:32:
+
+

CHECK:CAMELCASE: Avoid CamelCase: <Ser4MCCR0>
#381: FILE: drivers/misc/mcp-sa1100.c:40:
+	mccr0 = Ser4MCCR0 & ~0x00007f00;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Ser4MCDR2>
#410: FILE: drivers/misc/mcp-sa1100.c:69:
+	Ser4MCDR2 = reg << 17 | MCDR2_Wr | (val & 0xffff);

CHECK:CAMELCASE: Avoid CamelCase: <MCDR2_Wr>
#410: FILE: drivers/misc/mcp-sa1100.c:69:
+	Ser4MCDR2 = reg << 17 | MCDR2_Wr | (val & 0xffff);

CHECK:CAMELCASE: Avoid CamelCase: <Ser4MCSR>
#414: FILE: drivers/misc/mcp-sa1100.c:73:
+		if (Ser4MCSR & MCSR_CWC) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#421: FILE: drivers/misc/mcp-sa1100.c:80:
+		printk(KERN_WARNING "mcp: write timed out\n");

CHECK:CAMELCASE: Avoid CamelCase: <MCDR2_Rd>
#436: FILE: drivers/misc/mcp-sa1100.c:95:
+	Ser4MCDR2 = reg << 17 | MCDR2_Rd;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#447: FILE: drivers/misc/mcp-sa1100.c:106:
+		printk(KERN_WARNING "mcp: read timed out\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#495: FILE: drivers/misc/mcp-sa1100.c:154:
+		printk(KERN_WARNING "MCP-sa1100: machine is not supported\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#500: FILE: drivers/misc/mcp-sa1100.c:159:
+		printk(KERN_ERR "MCP-sa1100: Unable to request memory region\n");

WARNING:BRACES: braces {} are not necessary for single statement blocks
#507: FILE: drivers/misc/mcp-sa1100.c:166:
+	if (machine_is_assabet()) {
+		ASSABET_BCR_set(ASSABET_BCR_CODEC_RST);
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:CAMELCASE: Avoid CamelCase: <Ser4MCCR1>
#527: FILE: drivers/misc/mcp-sa1100.c:186:
+	Ser4MCCR1 = 0;

CHECK:CAMELCASE: Avoid CamelCase: <MCCR0_ExtClk>
#529: FILE: drivers/misc/mcp-sa1100.c:188:
+	Ser4MCCR0 = MCCR0_ADM | MCCR0_ExtClk;

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*s)...) over kmalloc(sizeof(struct mcp_sa1100_state)...)
#570: FILE: drivers/misc/mcp-sa1100.c:229:
+		s = kmalloc(sizeof(struct mcp_sa1100_state), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#634: FILE: drivers/misc/ucb1x00-core.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#635: FILE: drivers/misc/ucb1x00-core.c:2:
+ *  linux/drivers/misc/ucb1x00-core.c

WARNING:LINE_SPACING: Missing a blank line after declarations
#898: FILE: drivers/misc/ucb1x00-core.c:265:
+	struct ucb1x00 *ucb = devid;
+	if (irqnr == ucb->irq) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!irq->fn"
#933: FILE: drivers/misc/ucb1x00-core.c:300:
+		if (irq->fn == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1048: FILE: drivers/misc/ucb1x00-core.c:415:
+	printk(KERN_ERR "Freeing bad UCB1x00 irq %d\n", idx);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1057: FILE: drivers/misc/ucb1x00-core.c:424:
+ *  ^IMachine^I^IDefault IRQ$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1096: FILE: drivers/misc/ucb1x00-core.c:463:
+	while ((ucb1x00_reg_read(ucb, UCB_ADC_DATA) & UCB_ADC_DAT_VAL) == 0);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1123: FILE: drivers/misc/ucb1x00-core.c:490:
+	/*if (id != UCB_ID_1200 && id != UCB_ID_1300 && id != UCB_ID_1400) {
+		printk(KERN_WARNING "UCB1x00 ID not found: %04x\n", id);

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1125: FILE: drivers/misc/ucb1x00-core.c:492:
+	}*/

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*ucb)...) over kmalloc(sizeof(struct ucb1x00)...)
#1127: FILE: drivers/misc/ucb1x00-core.c:494:
+	ucb = kmalloc(sizeof(struct ucb1x00), GFP_KERNEL);

WARNING:STRLCPY: Prefer strscpy over strlcpy - see: https://lore.kernel.org/r/CAHk-=wgfRnXz0W3D37d01q3JFkr_i_uTL=V6A6G1oUZcprmknw@mail.gmail.com/
#1136: FILE: drivers/misc/ucb1x00-core.c:503:
+	strlcpy(ucb->cdev.class_id, "ucb1x00", sizeof(ucb->cdev.class_id));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1151: FILE: drivers/misc/ucb1x00-core.c:518:
+		printk(KERN_ERR "UCB1x00: IRQ probe failed\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1160: FILE: drivers/misc/ucb1x00-core.c:527:
+		printk(KERN_ERR "ucb1x00: unable to grab irq%d: %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1161: FILE: drivers/misc/ucb1x00-core.c:528:
+		printk(KERN_ERR "ucb1x00: unable to grab irq%d: %d\n",
+			ucb->irq, ret);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1204: FILE: drivers/misc/ucb1x00-core.c:571:
+	struct ucb1x00 *ucb = classdev_to_ucb1x00(dev);
+	kfree(ucb);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1234: FILE: drivers/misc/ucb1x00-core.c:601:
+	int ret = class_register(&ucb1x00_class);
+	if (ret == 0) {

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1251: FILE: drivers/misc/ucb1x00-core.c:618:
+EXPORT_SYMBOL(ucb1x00_class);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1253: FILE: drivers/misc/ucb1x00-core.c:620:
+EXPORT_SYMBOL(ucb1x00_io_set_dir);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1254: FILE: drivers/misc/ucb1x00-core.c:621:
+EXPORT_SYMBOL(ucb1x00_io_write);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1255: FILE: drivers/misc/ucb1x00-core.c:622:
+EXPORT_SYMBOL(ucb1x00_io_read);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1257: FILE: drivers/misc/ucb1x00-core.c:624:
+EXPORT_SYMBOL(ucb1x00_adc_enable);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1258: FILE: drivers/misc/ucb1x00-core.c:625:
+EXPORT_SYMBOL(ucb1x00_adc_read);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1259: FILE: drivers/misc/ucb1x00-core.c:626:
+EXPORT_SYMBOL(ucb1x00_adc_disable);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1261: FILE: drivers/misc/ucb1x00-core.c:628:
+EXPORT_SYMBOL(ucb1x00_hook_irq);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1262: FILE: drivers/misc/ucb1x00-core.c:629:
+EXPORT_SYMBOL(ucb1x00_free_irq);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1263: FILE: drivers/misc/ucb1x00-core.c:630:
+EXPORT_SYMBOL(ucb1x00_enable_irq);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1264: FILE: drivers/misc/ucb1x00-core.c:631:
+EXPORT_SYMBOL(ucb1x00_disable_irq);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1266: FILE: drivers/misc/ucb1x00-core.c:633:
+EXPORT_SYMBOL(ucb1x00_register_interface);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1267: FILE: drivers/misc/ucb1x00-core.c:634:
+EXPORT_SYMBOL(ucb1x00_unregister_interface);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1279: FILE: drivers/pcmcia/sa1100_generic.h:11:
+extern int pcmcia_collie_init(struct device *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct device *' should also have an identifier name
#1279: FILE: drivers/pcmcia/sa1100_generic.h:11:
+extern int pcmcia_collie_init(struct device *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1288: FILE: include/asm-arm/arch-sa1100/mcp.h:1:
+/*

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#1307: FILE: include/asm-arm/arch-sa1100/mcp.h:20:
+	spinlock_t	lock;

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mcp *' should also have an identifier name
#1316: FILE: include/asm-arm/arch-sa1100/mcp.h:29:
+	void		(*set_telecom_divisor)(struct mcp *, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#1316: FILE: include/asm-arm/arch-sa1100/mcp.h:29:
+	void		(*set_telecom_divisor)(struct mcp *, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mcp *' should also have an identifier name
#1317: FILE: include/asm-arm/arch-sa1100/mcp.h:30:
+	void		(*set_audio_divisor)(struct mcp *, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#1317: FILE: include/asm-arm/arch-sa1100/mcp.h:30:
+	void		(*set_audio_divisor)(struct mcp *, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mcp *' should also have an identifier name
#1320: FILE: include/asm-arm/arch-sa1100/mcp.h:33:
+	unsigned int	(*reg_read)(struct mcp *, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#1320: FILE: include/asm-arm/arch-sa1100/mcp.h:33:
+	unsigned int	(*reg_read)(struct mcp *, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mcp *' should also have an identifier name
#1321: FILE: include/asm-arm/arch-sa1100/mcp.h:34:
+	void		(*enable)(struct mcp *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mcp *' should also have an identifier name
#1322: FILE: include/asm-arm/arch-sa1100/mcp.h:35:
+	void		(*disable)(struct mcp *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mcp *' should also have an identifier name
#1327: FILE: include/asm-arm/arch-sa1100/mcp.h:40:
+void mcp_set_telecom_divisor(struct mcp *, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#1327: FILE: include/asm-arm/arch-sa1100/mcp.h:40:
+void mcp_set_telecom_divisor(struct mcp *, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mcp *' should also have an identifier name
#1328: FILE: include/asm-arm/arch-sa1100/mcp.h:41:
+void mcp_set_audio_divisor(struct mcp *, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#1328: FILE: include/asm-arm/arch-sa1100/mcp.h:41:
+void mcp_set_audio_divisor(struct mcp *, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mcp *' should also have an identifier name
#1329: FILE: include/asm-arm/arch-sa1100/mcp.h:42:
+void mcp_reg_write(struct mcp *, unsigned int, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#1329: FILE: include/asm-arm/arch-sa1100/mcp.h:42:
+void mcp_reg_write(struct mcp *, unsigned int, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#1329: FILE: include/asm-arm/arch-sa1100/mcp.h:42:
+void mcp_reg_write(struct mcp *, unsigned int, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mcp *' should also have an identifier name
#1330: FILE: include/asm-arm/arch-sa1100/mcp.h:43:
+unsigned int mcp_reg_read(struct mcp *, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#1330: FILE: include/asm-arm/arch-sa1100/mcp.h:43:
+unsigned int mcp_reg_read(struct mcp *, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mcp *' should also have an identifier name
#1331: FILE: include/asm-arm/arch-sa1100/mcp.h:44:
+void mcp_enable(struct mcp *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mcp *' should also have an identifier name
#1332: FILE: include/asm-arm/arch-sa1100/mcp.h:45:
+void mcp_disable(struct mcp *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mcp *' should also have an identifier name
#1335: FILE: include/asm-arm/arch-sa1100/mcp.h:48:
+int mcp_host_register(struct mcp *, struct device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct device *' should also have an identifier name
#1335: FILE: include/asm-arm/arch-sa1100/mcp.h:48:
+int mcp_host_register(struct mcp *, struct device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mcp *' should also have an identifier name
#1336: FILE: include/asm-arm/arch-sa1100/mcp.h:49:
+void mcp_host_unregister(struct mcp *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mcp *' should also have an identifier name
#1340: FILE: include/asm-arm/arch-sa1100/mcp.h:53:
+	int (*probe)(struct mcp *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mcp *' should also have an identifier name
#1341: FILE: include/asm-arm/arch-sa1100/mcp.h:54:
+	void (*remove)(struct mcp *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mcp *' should also have an identifier name
#1342: FILE: include/asm-arm/arch-sa1100/mcp.h:55:
+	int (*suspend)(struct mcp *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#1342: FILE: include/asm-arm/arch-sa1100/mcp.h:55:
+	int (*suspend)(struct mcp *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mcp *' should also have an identifier name
#1343: FILE: include/asm-arm/arch-sa1100/mcp.h:56:
+	int (*resume)(struct mcp *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mcp_driver *' should also have an identifier name
#1346: FILE: include/asm-arm/arch-sa1100/mcp.h:59:
+int mcp_driver_register(struct mcp_driver *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mcp_driver *' should also have an identifier name
#1347: FILE: include/asm-arm/arch-sa1100/mcp.h:60:
+void mcp_driver_unregister(struct mcp_driver *);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1350: FILE: include/asm-arm/arch-sa1100/mcp.h:63:
+#define mcp_set_drvdata(mcp,d)	dev_set_drvdata((mcp)->attached_device, d)
                            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1358: FILE: include/asm-arm/arch-sa1100/ucb1x00.h:1:
+/*

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1411: FILE: include/asm-arm/arch-sa1100/ucb1x00.h:54:
+
+

CHECK:BIT_MACRO: Prefer using the BIT macro
#1412: FILE: include/asm-arm/arch-sa1100/ucb1x00.h:55:
+#define UCB_IO_0		(1 << 0)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#1413: FILE: include/asm-arm/arch-sa1100/ucb1x00.h:56:
+#define UCB_IO_1		(1 << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1414: FILE: include/asm-arm/arch-sa1100/ucb1x00.h:57:
+#define UCB_IO_2		(1 << 2)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1415: FILE: include/asm-arm/arch-sa1100/ucb1x00.h:58:
+#define UCB_IO_3		(1 << 3)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1416: FILE: include/asm-arm/arch-sa1100/ucb1x00.h:59:
+#define UCB_IO_4		(1 << 4)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1417: FILE: include/asm-arm/arch-sa1100/ucb1x00.h:60:
+#define UCB_IO_5		(1 << 5)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1418: FILE: include/asm-arm/arch-sa1100/ucb1x00.h:61:
+#define UCB_IO_6		(1 << 6)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1419: FILE: include/asm-arm/arch-sa1100/ucb1x00.h:62:
+#define UCB_IO_7		(1 << 7)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1420: FILE: include/asm-arm/arch-sa1100/ucb1x00.h:63:
+#define UCB_IO_8		(1 << 8)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1421: FILE: include/asm-arm/arch-sa1100/ucb1x00.h:64:
+#define UCB_IO_9		(1 << 9)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1423: FILE: include/asm-arm/arch-sa1100/ucb1x00.h:66:
+#define UCB_IE_ADC		(1 << 11)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1424: FILE: include/asm-arm/arch-sa1100/ucb1x00.h:67:
+#define UCB_IE_TSPX		(1 << 12)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1425: FILE: include/asm-arm/arch-sa1100/ucb1x00.h:68:
+#define UCB_IE_TSMX		(1 << 13)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1426: FILE: include/asm-arm/arch-sa1100/ucb1x00.h:69:
+#define UCB_IE_TCLIP		(1 << 14)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1427: FILE: include/asm-arm/arch-sa1100/ucb1x00.h:70:
+#define UCB_IE_ACLIP		(1 << 15)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1431: FILE: include/asm-arm/arch-sa1100/ucb1x00.h:74:
+#define UCB_TC_A_LOOP		(1 << 7)	/* UCB1200 */

CHECK:BIT_MACRO: Prefer using the BIT macro
#1432: FILE: include/asm-arm/arch-sa1100/ucb1x00.h:75:
+#define UCB_TC_A_AMPL		(1 << 7)	/* UCB1300 */

CHECK:BIT_MACRO: Prefer using the BIT macro
#1434: FILE: include/asm-arm/arch-sa1100/ucb1x00.h:77:
+#define UCB_TC_B_VOICE_ENA	(1 << 3)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1435: FILE: include/asm-arm/arch-sa1100/ucb1x00.h:78:
+#define UCB_TC_B_CLIP		(1 << 4)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1436: FILE: include/asm-arm/arch-sa1100/ucb1x00.h:79:
+#define UCB_TC_B_ATT		(1 << 6)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1437: FILE: include/asm-arm/arch-sa1100/ucb1x00.h:80:
+#define UCB_TC_B_SIDE_ENA	(1 << 11)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1438: FILE: include/asm-arm/arch-sa1100/ucb1x00.h:81:
+#define UCB_TC_B_MUTE		(1 << 13)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1439: FILE: include/asm-arm/arch-sa1100/ucb1x00.h:82:
+#define UCB_TC_B_IN_ENA		(1 << 14)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1440: FILE: include/asm-arm/arch-sa1100/ucb1x00.h:83:
+#define UCB_TC_B_OUT_ENA	(1 << 15)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1442: FILE: include/asm-arm/arch-sa1100/ucb1x00.h:85:
+#define UCB_AC_B_LOOP		(1 << 8)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1443: FILE: include/asm-arm/arch-sa1100/ucb1x00.h:86:
+#define UCB_AC_B_MUTE		(1 << 13)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1444: FILE: include/asm-arm/arch-sa1100/ucb1x00.h:87:
+#define UCB_AC_B_IN_ENA		(1 << 14)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1445: FILE: include/asm-arm/arch-sa1100/ucb1x00.h:88:
+#define UCB_AC_B_OUT_ENA	(1 << 15)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1447: FILE: include/asm-arm/arch-sa1100/ucb1x00.h:90:
+#define UCB_TS_CR_TSMX_POW	(1 << 0)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1448: FILE: include/asm-arm/arch-sa1100/ucb1x00.h:91:
+#define UCB_TS_CR_TSPX_POW	(1 << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1449: FILE: include/asm-arm/arch-sa1100/ucb1x00.h:92:
+#define UCB_TS_CR_TSMY_POW	(1 << 2)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1450: FILE: include/asm-arm/arch-sa1100/ucb1x00.h:93:
+#define UCB_TS_CR_TSPY_POW	(1 << 3)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1451: FILE: include/asm-arm/arch-sa1100/ucb1x00.h:94:
+#define UCB_TS_CR_TSMX_GND	(1 << 4)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1452: FILE: include/asm-arm/arch-sa1100/ucb1x00.h:95:
+#define UCB_TS_CR_TSPX_GND	(1 << 5)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1453: FILE: include/asm-arm/arch-sa1100/ucb1x00.h:96:
+#define UCB_TS_CR_TSMY_GND	(1 << 6)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1454: FILE: include/asm-arm/arch-sa1100/ucb1x00.h:97:
+#define UCB_TS_CR_TSPY_GND	(1 << 7)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1456: FILE: include/asm-arm/arch-sa1100/ucb1x00.h:99:
+#define UCB_TS_CR_MODE_PRES	(1 << 8)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1458: FILE: include/asm-arm/arch-sa1100/ucb1x00.h:101:
+#define UCB_TS_CR_BIAS_ENA	(1 << 11)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1459: FILE: include/asm-arm/arch-sa1100/ucb1x00.h:102:
+#define UCB_TS_CR_TSPX_LOW	(1 << 12)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1460: FILE: include/asm-arm/arch-sa1100/ucb1x00.h:103:
+#define UCB_TS_CR_TSMX_LOW	(1 << 13)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1462: FILE: include/asm-arm/arch-sa1100/ucb1x00.h:105:
+#define UCB_ADC_SYNC_ENA	(1 << 0)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1463: FILE: include/asm-arm/arch-sa1100/ucb1x00.h:106:
+#define UCB_ADC_VREFBYP_CON	(1 << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1465: FILE: include/asm-arm/arch-sa1100/ucb1x00.h:108:
+#define UCB_ADC_INP_TSMX	(1 << 2)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1472: FILE: include/asm-arm/arch-sa1100/ucb1x00.h:115:
+#define UCB_ADC_EXT_REF		(1 << 5)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1473: FILE: include/asm-arm/arch-sa1100/ucb1x00.h:116:
+#define UCB_ADC_START		(1 << 7)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1474: FILE: include/asm-arm/arch-sa1100/ucb1x00.h:117:
+#define UCB_ADC_ENA		(1 << 15)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1476: FILE: include/asm-arm/arch-sa1100/ucb1x00.h:119:
+#define UCB_ADC_DAT_VAL		(1 << 15)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1483: FILE: include/asm-arm/arch-sa1100/ucb1x00.h:126:
+#define UCB_MODE_DYN_VFLAG_ENA	(1 << 12)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1484: FILE: include/asm-arm/arch-sa1100/ucb1x00.h:127:
+#define UCB_MODE_AUD_OFF_CAN	(1 << 13)

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1490: FILE: include/asm-arm/arch-sa1100/ucb1x00.h:133:
+	void (*fn)(int, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#1490: FILE: include/asm-arm/arch-sa1100/ucb1x00.h:133:
+	void (*fn)(int, void *);

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#1500: FILE: include/asm-arm/arch-sa1100/ucb1x00.h:143:
+	spinlock_t		io_lock;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1583: FILE: include/asm-arm/arch-sa1100/ucb1x00.h:226:
+}
+/**

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1584: FILE: include/asm-arm/arch-sa1100/ucb1x00.h:227:
+ *^Iucb1x00_set_audio_divisor - $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#1605: FILE: include/asm-arm/arch-sa1100/ucb1x00.h:248:
+void ucb1x00_io_set_dir(struct ucb1x00 *ucb, unsigned int, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#1605: FILE: include/asm-arm/arch-sa1100/ucb1x00.h:248:
+void ucb1x00_io_set_dir(struct ucb1x00 *ucb, unsigned int, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#1606: FILE: include/asm-arm/arch-sa1100/ucb1x00.h:249:
+void ucb1x00_io_write(struct ucb1x00 *ucb, unsigned int, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#1606: FILE: include/asm-arm/arch-sa1100/ucb1x00.h:249:
+void ucb1x00_io_write(struct ucb1x00 *ucb, unsigned int, unsigned int);

CHECK:BIT_MACRO: Prefer using the BIT macro
#1619: FILE: include/asm-arm/arch-sa1100/ucb1x00.h:262:
+#define UCB_RISING	(1 << 0)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1620: FILE: include/asm-arm/arch-sa1100/ucb1x00.h:263:
+#define UCB_FALLING	(1 << 1)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000166218.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 4 errors, 88 warnings, 68 checks, 1555 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000166218.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
