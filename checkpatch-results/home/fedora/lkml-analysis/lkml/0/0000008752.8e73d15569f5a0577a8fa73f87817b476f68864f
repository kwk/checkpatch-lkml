WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#43: 
>>> Jeff, I shall send all the sata patches which I have at you one single time

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#104: FILE: drivers/ata/Kconfig:304:
+config PATA_IT8213
+	tristate "IT8213 PATA support (Experimental)"
+	depends on PCI && EXPERIMENTAL
+	help
+	  This option enables support for the ITE 821 PATA
+          controllers via the new ATA layer.
+
+	  If unsure, say N.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#120: FILE: drivers/ata/Kconfig:349:
+config PATA_MPC52xx
+	tristate "Freescale MPC52xx SoC internal IDE"
+	depends on PPC_MPC52xx
+	help
+	  This option enables support for integrated IDE controller
+	  of the Freescale MPC52xx SoC.
+
+	  If unsure, say N.
+

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#401: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#406: FILE: drivers/ata/pata_it8213.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#481: FILE: drivers/ata/pata_it8213.c:76:
+static void it8213_set_piomode (struct ata_port *ap, struct ata_device *adev)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#485: FILE: drivers/ata/pata_it8213.c:80:
+	unsigned int idetm_port= ap->port_no ? 0x42 : 0x40;
 	                       ^

WARNING:TYPO_SPELLING: 'programing' may be misspelled - perhaps 'programming'?
#490: FILE: drivers/ata/pata_it8213.c:85:
+	 *	See Intel Document 298600-004 for the timing programing rules
 	  	                                             ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'seperate' may be misspelled - perhaps 'separate'?
#524: FILE: drivers/ata/pata_it8213.c:119:
+		/* Slave timing in seperate register */
 		                   ^^^^^^^^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#547: FILE: drivers/ata/pata_it8213.c:142:
+static void it8213_set_dmamode (struct ata_port *ap, struct ata_device *adev)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#610: FILE: drivers/ata/pata_it8213.c:205:
+		/* If the drive MWDMA is faster than it can do PIO then
+		   we must force PIO into PIO0 */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#610: FILE: drivers/ata/pata_it8213.c:205:
+		   we must force PIO into PIO0 */

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#622: FILE: drivers/ata/pata_it8213.c:217:
+			slave_data |= ((timings[pio][0] << 2) | timings[pio][1]) << (ap->port_no ? 4 : 0);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#624: FILE: drivers/ata/pata_it8213.c:219:
+^I^I} else { ^I/* Master */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#626: FILE: drivers/ata/pata_it8213.c:221:
+			master_data &= 0xCCF4;	/* Mask out IORDY|TIME1|DMAONLY
+						   and master timing bits */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#626: FILE: drivers/ata/pata_it8213.c:221:
+						   and master timing bits */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#691: FILE: drivers/ata/pata_it8213.c:286:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#706: FILE: drivers/ata/pata_it8213.c:301:
+static int it8213_init_one (struct pci_dev *pdev, const struct pci_device_id *ent)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#714: FILE: drivers/ata/pata_it8213.c:309:
+^I^I.udma_mask ^I= 0x1f, /* UDMA 100 */$

WARNING:PREFER_DEV_LEVEL: Prefer dev_dbg(... to dev_printk(KERN_DEBUG, ...
#720: FILE: drivers/ata/pata_it8213.c:315:
+		dev_printk(KERN_DEBUG, &pdev->dev,

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#796: FILE: drivers/ata/pata_mpc52xx.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#797: FILE: drivers/ata/pata_mpc52xx.c:2:
+ * drivers/ata/pata_mpc52xx.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#815: FILE: drivers/ata/pata_mpc52xx.c:20:
+#include <asm/io.h>

CHECK:LINE_SPACING: Please don't use multiple blank lines
#821: FILE: drivers/ata/pata_mpc52xx.c:26:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#825: FILE: drivers/ata/pata_mpc52xx.c:30:
+
+

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#834: FILE: drivers/ata/pata_mpc52xx.c:39:
+	struct mpc52xx_ata __iomem *	ata_regs;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#840: FILE: drivers/ata/pata_mpc52xx.c:45:
+
+

ERROR:SPACING: space required after that ',' (ctx:VxV)
#850: FILE: drivers/ata/pata_mpc52xx.c:55:
+#define CALC_CLKCYC(c,v) ((((v)+(c)-1)/(c)))
                      ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#850: FILE: drivers/ata/pata_mpc52xx.c:55:
+#define CALC_CLKCYC(c,v) ((((v)+(c)-1)/(c)))
                                ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#850: FILE: drivers/ata/pata_mpc52xx.c:55:
+#define CALC_CLKCYC(c,v) ((((v)+(c)-1)/(c)))
                                    ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#850: FILE: drivers/ata/pata_mpc52xx.c:55:
+#define CALC_CLKCYC(c,v) ((((v)+(c)-1)/(c)))
                                       ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'c' - possible side-effects?
#850: FILE: drivers/ata/pata_mpc52xx.c:55:
+#define CALC_CLKCYC(c,v) ((((v)+(c)-1)/(c)))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#852: FILE: drivers/ata/pata_mpc52xx.c:57:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#874: FILE: drivers/ata/pata_mpc52xx.c:79:
+
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#877: FILE: drivers/ata/pata_mpc52xx.c:82:
+struct mpc52xx_ata {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#932: FILE: drivers/ata/pata_mpc52xx.c:137:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#937: FILE: drivers/ata/pata_mpc52xx.c:142:
+
+

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#947: FILE: drivers/ata/pata_mpc52xx.c:152:
+	if ((pio<0) || (pio>4))
 	        ^

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#947: FILE: drivers/ata/pata_mpc52xx.c:152:
+	if ((pio<0) || (pio>4))
 	                   ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pio<0'
#947: FILE: drivers/ata/pata_mpc52xx.c:152:
+	if ((pio<0) || (pio>4))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pio>4'
#947: FILE: drivers/ata/pata_mpc52xx.c:152:
+	if ((pio<0) || (pio>4))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#994: FILE: drivers/ata/pata_mpc52xx.c:199:
+	out_be32(&regs->config,
+			MPC52xx_ATA_HOSTCONF_IE |

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#999: FILE: drivers/ata/pata_mpc52xx.c:204:
+	udelay(10);

usleep_range() should be preferred over udelay(). The proper way of
using usleep_range() is mentioned in the kernel docs.

See: https://www.kernel.org/doc/html/latest/timers/timers-howto.html#delays-information-on-the-various-kernel-delay-sleep-mechanisms

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1002: FILE: drivers/ata/pata_mpc52xx.c:207:
+	out_be32(&regs->config,
+			MPC52xx_ATA_HOSTCONF_IE |

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1007: FILE: drivers/ata/pata_mpc52xx.c:212:
+	out_be32(&regs->share_cnt, tslot << 16 );

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1010: FILE: drivers/ata/pata_mpc52xx.c:215:
+	memset(priv->timings, 0x00, 2*sizeof(struct mpc52xx_ata_timings));
 	                             ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1020: FILE: drivers/ata/pata_mpc52xx.c:225:
+
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1036: FILE: drivers/ata/pata_mpc52xx.c:241:
+		printk(KERN_ERR DRV_NAME

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1043: FILE: drivers/ata/pata_mpc52xx.c:248:
+}
+static void

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1051: FILE: drivers/ata/pata_mpc52xx.c:256:
+	ata_std_dev_select(ap,device);
 	                     ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1058: FILE: drivers/ata/pata_mpc52xx.c:263:
+	ata_bmdma_drive_eh(ap, ata_std_prereset, ata_std_softreset, NULL,
+			ata_std_postreset);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1061: FILE: drivers/ata/pata_mpc52xx.c:266:
+
+

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1113: FILE: drivers/ata/pata_mpc52xx.c:318:
+static int __devinit

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1156: FILE: drivers/ata/pata_mpc52xx.c:361:
+
+

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1161: FILE: drivers/ata/pata_mpc52xx.c:366:
+static int __devinit

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1174: FILE: drivers/ata/pata_mpc52xx.c:379:
+		printk(KERN_ERR DRV_NAME ": "

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1175: FILE: drivers/ata/pata_mpc52xx.c:380:
+			"Unable to find IPB Bus frequency\n" );

WARNING:SPLIT_STRING: quoted string split across lines
#1175: FILE: drivers/ata/pata_mpc52xx.c:380:
+		printk(KERN_ERR DRV_NAME ": "
+			"Unable to find IPB Bus frequency\n" );

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1182: FILE: drivers/ata/pata_mpc52xx.c:387:
+		printk(KERN_ERR DRV_NAME ": "

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1183: FILE: drivers/ata/pata_mpc52xx.c:388:
+			"Error while parsing device node resource\n" );

WARNING:SPLIT_STRING: quoted string split across lines
#1183: FILE: drivers/ata/pata_mpc52xx.c:388:
+		printk(KERN_ERR DRV_NAME ": "
+			"Error while parsing device node resource\n" );

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1189: FILE: drivers/ata/pata_mpc52xx.c:394:
+		printk(KERN_ERR DRV_NAME ": "

WARNING:SPLIT_STRING: quoted string split across lines
#1190: FILE: drivers/ata/pata_mpc52xx.c:395:
+		printk(KERN_ERR DRV_NAME ": "
+			"Error while mapping the irq\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1197: FILE: drivers/ata/pata_mpc52xx.c:402:
+		printk(KERN_ERR DRV_NAME ": "

WARNING:SPLIT_STRING: quoted string split across lines
#1198: FILE: drivers/ata/pata_mpc52xx.c:403:
+		printk(KERN_ERR DRV_NAME ": "
+			"Error while requesting mem region\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1206: FILE: drivers/ata/pata_mpc52xx.c:411:
+		printk(KERN_ERR DRV_NAME ": "

WARNING:SPLIT_STRING: quoted string split across lines
#1207: FILE: drivers/ata/pata_mpc52xx.c:412:
+		printk(KERN_ERR DRV_NAME ": "
+			"Error while mapping register set\n");

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*priv)...) over kmalloc(sizeof(struct mpc52xx_ata_priv)...)
#1213: FILE: drivers/ata/pata_mpc52xx.c:418:
+	priv = kmalloc(sizeof(struct mpc52xx_ata_priv), GFP_ATOMIC);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1215: FILE: drivers/ata/pata_mpc52xx.c:420:
+		printk(KERN_ERR DRV_NAME ": "

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#1215: FILE: drivers/ata/pata_mpc52xx.c:420:
+	if (!priv) {
+		printk(KERN_ERR DRV_NAME ": "

WARNING:SPLIT_STRING: quoted string split across lines
#1216: FILE: drivers/ata/pata_mpc52xx.c:421:
+		printk(KERN_ERR DRV_NAME ": "
+			"Error while allocating private structure\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1229: FILE: drivers/ata/pata_mpc52xx.c:434:
+		printk(KERN_ERR DRV_NAME ": Error during HW init\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1236: FILE: drivers/ata/pata_mpc52xx.c:441:
+		printk(KERN_ERR DRV_NAME ": "

WARNING:SPLIT_STRING: quoted string split across lines
#1237: FILE: drivers/ata/pata_mpc52xx.c:442:
+		printk(KERN_ERR DRV_NAME ": "
+			"Error while registering to ATA layer\n");

CHECK:BRACES: braces {} should be used on all arms of this statement
#1272: FILE: drivers/ata/pata_mpc52xx.c:477:
+	if (rv) {
[...]
+	} else
[...]

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1273: FILE: drivers/ata/pata_mpc52xx.c:478:
+		printk(KERN_ERR DRV_NAME ": "

WARNING:SPLIT_STRING: quoted string split across lines
#1274: FILE: drivers/ata/pata_mpc52xx.c:479:
+		printk(KERN_ERR DRV_NAME ": "
+			"Error while parsing device node resource\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1275: FILE: drivers/ata/pata_mpc52xx.c:480:
+		printk(KERN_ERR DRV_NAME ": "

WARNING:SPLIT_STRING: quoted string split across lines
#1276: FILE: drivers/ata/pata_mpc52xx.c:481:
+		printk(KERN_ERR DRV_NAME ": "
+			"Zone may not be properly released\n");

CHECK:BRACES: Unbalanced braces around else statement
#1277: FILE: drivers/ata/pata_mpc52xx.c:482:
+	} else

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1287: FILE: drivers/ata/pata_mpc52xx.c:492:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1304: FILE: drivers/ata/pata_mpc52xx.c:509:
+
+

WARNING:CONST_STRUCT: struct of_device_id should normally be const
#1305: FILE: drivers/ata/pata_mpc52xx.c:510:
+static struct of_device_id mpc52xx_ata_of_match[] = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:UNDOCUMENTED_DT_STRING: DT compatible string "mpc52xx-ata" appears un-documented -- check /home/fedora/lkml-analysis/linux/Documentation/devicetree/bindings/
#1310: FILE: drivers/ata/pata_mpc52xx.c:515:
+		.compatible = "mpc52xx-ata",

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1315: FILE: drivers/ata/pata_mpc52xx.c:520:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1332: FILE: drivers/ata/pata_mpc52xx.c:537:
+
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1340: FILE: drivers/ata/pata_mpc52xx.c:545:
+	printk(KERN_INFO "ata: MPC52xx IDE/ATA libata driver\n");

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1394: FILE: drivers/ata/pata_sis.c:850:
 	static struct sis_chipset sis_chipsets[] = {
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1575: FILE: drivers/ata/sata_nv.c:830:
+		writel(notifier_clears[0],
 			nv_adma_notifier_clear_block(host->ports[0]));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1578: FILE: drivers/ata/sata_nv.c:832:
+		writel(notifier_clears[1],
 			nv_adma_notifier_clear_block(host->ports[1]));

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#1615: FILE: drivers/ata/sata_sis.c:148:
+static unsigned int get_scr_cfg_addr(unsigned int port_no, unsigned int sc_reg, struct pci_dev *pdev)

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#1624: FILE: drivers/ata/sata_sis.c:153:
+		switch (pdev->device) {
+			case 0x0180:
+			case 0x0181:
[...]
+			case 0x0182:
+			case 0x0183:
+			case 0x1182:
+			case 0x1183:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pdev->device == 0x0182'
#1655: FILE: drivers/ata/sata_sis.c:184:
+	if ((pdev->device == 0x0182) || (pdev->device == 0x0183) || (pdev->device == 0x1182) ||
+	    (pdev->device == 0x1183) || (pmr & SIS_PMR_COMBINED))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pdev->device == 0x0183'
#1655: FILE: drivers/ata/sata_sis.c:184:
+	if ((pdev->device == 0x0182) || (pdev->device == 0x0183) || (pdev->device == 0x1182) ||
+	    (pdev->device == 0x1183) || (pmr & SIS_PMR_COMBINED))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pdev->device == 0x1182'
#1655: FILE: drivers/ata/sata_sis.c:184:
+	if ((pdev->device == 0x0182) || (pdev->device == 0x0183) || (pdev->device == 0x1182) ||
+	    (pdev->device == 0x1183) || (pmr & SIS_PMR_COMBINED))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pdev->device == 0x1183'
#1655: FILE: drivers/ata/sata_sis.c:184:
+	if ((pdev->device == 0x0182) || (pdev->device == 0x0183) || (pdev->device == 0x1182) ||
+	    (pdev->device == 0x1183) || (pmr & SIS_PMR_COMBINED))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pdev->device == 0x0182'
#1674: FILE: drivers/ata/sata_sis.c:204:
+	if ((pdev->device == 0x0182) || (pdev->device == 0x0183) || (pdev->device == 0x1182) ||
+	    (pdev->device == 0x1183) || (pmr & SIS_PMR_COMBINED))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pdev->device == 0x0183'
#1674: FILE: drivers/ata/sata_sis.c:204:
+	if ((pdev->device == 0x0182) || (pdev->device == 0x0183) || (pdev->device == 0x1182) ||
+	    (pdev->device == 0x1183) || (pmr & SIS_PMR_COMBINED))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pdev->device == 0x1182'
#1674: FILE: drivers/ata/sata_sis.c:204:
+	if ((pdev->device == 0x0182) || (pdev->device == 0x0183) || (pdev->device == 0x1182) ||
+	    (pdev->device == 0x1183) || (pmr & SIS_PMR_COMBINED))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pdev->device == 0x1183'
#1674: FILE: drivers/ata/sata_sis.c:204:
+	if ((pdev->device == 0x0182) || (pdev->device == 0x0183) || (pdev->device == 0x1182) ||
+	    (pdev->device == 0x1183) || (pmr & SIS_PMR_COMBINED))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pdev->device == 0x0182'
#1684: FILE: drivers/ata/sata_sis.c:225:
+	if ((pdev->device == 0x0182) || (pdev->device == 0x0183) || (pdev->device == 0x1182) ||
+	    (pdev->device == 0x1183) || (pmr & SIS_PMR_COMBINED))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pdev->device == 0x0183'
#1684: FILE: drivers/ata/sata_sis.c:225:
+	if ((pdev->device == 0x0182) || (pdev->device == 0x0183) || (pdev->device == 0x1182) ||
+	    (pdev->device == 0x1183) || (pmr & SIS_PMR_COMBINED))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pdev->device == 0x1182'
#1684: FILE: drivers/ata/sata_sis.c:225:
+	if ((pdev->device == 0x0182) || (pdev->device == 0x0183) || (pdev->device == 0x1182) ||
+	    (pdev->device == 0x1183) || (pmr & SIS_PMR_COMBINED))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pdev->device == 0x1183'
#1684: FILE: drivers/ata/sata_sis.c:225:
+	if ((pdev->device == 0x0182) || (pdev->device == 0x0183) || (pdev->device == 0x1182) ||
+	    (pdev->device == 0x1183) || (pmr & SIS_PMR_COMBINED))

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#1694: FILE: drivers/ata/sata_sis.c:246:
+		if ((pdev->device == 0x0182) || (pdev->device == 0x0183) || (pdev->device == 0x1182) ||

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pdev->device == 0x0182'
#1694: FILE: drivers/ata/sata_sis.c:246:
+		if ((pdev->device == 0x0182) || (pdev->device == 0x0183) || (pdev->device == 0x1182) ||
+		    (pdev->device == 0x1183) || (pmr & SIS_PMR_COMBINED))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pdev->device == 0x0183'
#1694: FILE: drivers/ata/sata_sis.c:246:
+		if ((pdev->device == 0x0182) || (pdev->device == 0x0183) || (pdev->device == 0x1182) ||
+		    (pdev->device == 0x1183) || (pmr & SIS_PMR_COMBINED))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pdev->device == 0x1182'
#1694: FILE: drivers/ata/sata_sis.c:246:
+		if ((pdev->device == 0x0182) || (pdev->device == 0x0183) || (pdev->device == 0x1182) ||
+		    (pdev->device == 0x1183) || (pmr & SIS_PMR_COMBINED))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pdev->device == 0x1183'
#1694: FILE: drivers/ata/sata_sis.c:246:
+		if ((pdev->device == 0x0182) || (pdev->device == 0x0183) || (pdev->device == 0x1182) ||
+		    (pdev->device == 0x1183) || (pmr & SIS_PMR_COMBINED))

WARNING:PREFER_DEV_LEVEL: Prefer dev_info(... to dev_printk(KERN_INFO, ...
#1750: FILE: drivers/ata/sata_sis.c:330:
+			dev_printk(KERN_INFO, &pdev->dev, "Detected SiS 1182/1183/966L SATA controller\n");

WARNING:PREFER_DEV_LEVEL: Prefer dev_info(... to dev_printk(KERN_INFO, ...
#1752: FILE: drivers/ata/sata_sis.c:332:
+			dev_printk(KERN_INFO, &pdev->dev, "Detected SiS 1182/1183/966 SATA controller\n");

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000008752.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 10 errors, 51 warnings, 50 checks, 1633 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000008752.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
