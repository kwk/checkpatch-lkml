WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#61: 
--- 2.6-git.orig/include/asm-generic/bitops.h	2006-01-25 19:07:14.000000000 +0900

WARNING:INCLUDE_LINUX: Use #include <linux/cache.h> instead of <asm/cache.h>
#76: FILE: include/asm-generic/bitops.h:13:
+#include <asm/cache.h>		/* we use L1_CACHE_BYTES */

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#83: FILE: include/asm-generic/bitops.h:20:
+#  define ATOMIC_HASH(a) (&(__atomic_hash[ (((unsigned long) a)/L1_CACHE_BYTES) & (ATOMIC_HASH_SIZE-1) ]))

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: No space is necessary after a cast
#83: FILE: include/asm-generic/bitops.h:20:
+#  define ATOMIC_HASH(a) (&(__atomic_hash[ (((unsigned long) a)/L1_CACHE_BYTES) & (ATOMIC_HASH_SIZE-1) ]))

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#83: FILE: include/asm-generic/bitops.h:20:
+#  define ATOMIC_HASH(a) (&(__atomic_hash[ (((unsigned long) a)/L1_CACHE_BYTES) & (ATOMIC_HASH_SIZE-1) ]))
                                                                ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#83: FILE: include/asm-generic/bitops.h:20:
+#  define ATOMIC_HASH(a) (&(__atomic_hash[ (((unsigned long) a)/L1_CACHE_BYTES) & (ATOMIC_HASH_SIZE-1) ]))
                                                                                                    ^

ERROR:SPACING: space prohibited after that open square bracket '['
#83: FILE: include/asm-generic/bitops.h:20:
+#  define ATOMIC_HASH(a) (&(__atomic_hash[ (((unsigned long) a)/L1_CACHE_BYTES) & (ATOMIC_HASH_SIZE-1) ]))

ERROR:SPACING: space prohibited before that close square bracket ']'
#83: FILE: include/asm-generic/bitops.h:20:
+#  define ATOMIC_HASH(a) (&(__atomic_hash[ (((unsigned long) a)/L1_CACHE_BYTES) & (ATOMIC_HASH_SIZE-1) ]))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around __atomic_hash[ (((unsigned long) a)/L1_CACHE_BYTES) & (ATOMIC_HASH_SIZE-1) ]
#83: FILE: include/asm-generic/bitops.h:20:
+#  define ATOMIC_HASH(a) (&(__atomic_hash[ (((unsigned long) a)/L1_CACHE_BYTES) & (ATOMIC_HASH_SIZE-1) ]))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#88: FILE: include/asm-generic/bitops.h:25:
+ * this is the substitute */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:SPACING: space required after that ',' (ctx:VxV)
#89: FILE: include/asm-generic/bitops.h:26:
+#define _atomic_spin_lock_irqsave(l,f) do {	\
                                    ^

ERROR:SPACING: space required before the open parenthesis '('
#93: FILE: include/asm-generic/bitops.h:30:
+} while(0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#95: FILE: include/asm-generic/bitops.h:32:
+#define _atomic_spin_unlock_irqrestore(l,f) do {	\
                                         ^

ERROR:SPACING: space required before the open parenthesis '('
#99: FILE: include/asm-generic/bitops.h:36:
+} while(0)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#101: FILE: include/asm-generic/bitops.h:38:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#103: FILE: include/asm-generic/bitops.h:40:
+#  define _atomic_spin_lock_irqsave(l,f) do { local_irq_save(f); } while (0)
                                      ^

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#103: FILE: include/asm-generic/bitops.h:40:
+#  define _atomic_spin_lock_irqsave(l,f) do { local_irq_save(f); } while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

ERROR:SPACING: space required after that ',' (ctx:VxV)
#104: FILE: include/asm-generic/bitops.h:41:
+#  define _atomic_spin_unlock_irqrestore(l,f) do { local_irq_restore(f); } while (0)
                                           ^

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#104: FILE: include/asm-generic/bitops.h:41:
+#  define _atomic_spin_unlock_irqrestore(l,f) do { local_irq_restore(f); } while (0)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#123: FILE: include/asm-generic/bitops.h:52:
+static __inline__ void set_bit(int nr, volatile unsigned long *addr)

WARNING:INLINE: plain inline is preferred over __inline__
#123: FILE: include/asm-generic/bitops.h:52:
+static __inline__ void set_bit(int nr, volatile unsigned long *addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#134: FILE: include/asm-generic/bitops.h:63:
+static __inline__ void clear_bit(int nr, volatile unsigned long *addr)

WARNING:INLINE: plain inline is preferred over __inline__
#134: FILE: include/asm-generic/bitops.h:63:
+static __inline__ void clear_bit(int nr, volatile unsigned long *addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#145: FILE: include/asm-generic/bitops.h:74:
+static __inline__ void change_bit(int nr, volatile unsigned long *addr)

WARNING:INLINE: plain inline is preferred over __inline__
#145: FILE: include/asm-generic/bitops.h:74:
+static __inline__ void change_bit(int nr, volatile unsigned long *addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#156: FILE: include/asm-generic/bitops.h:85:
+static __inline__ int test_and_set_bit(int nr, volatile unsigned long *addr)

WARNING:INLINE: plain inline is preferred over __inline__
#156: FILE: include/asm-generic/bitops.h:85:
+static __inline__ int test_and_set_bit(int nr, volatile unsigned long *addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#171: FILE: include/asm-generic/bitops.h:100:
+static __inline__ int test_and_clear_bit(int nr, volatile unsigned long *addr)

WARNING:INLINE: plain inline is preferred over __inline__
#171: FILE: include/asm-generic/bitops.h:100:
+static __inline__ int test_and_clear_bit(int nr, volatile unsigned long *addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#195: FILE: include/asm-generic/bitops.h:115:
+static __inline__ int test_and_change_bit(int nr, volatile unsigned long *addr)

WARNING:INLINE: plain inline is preferred over __inline__
#195: FILE: include/asm-generic/bitops.h:115:
+static __inline__ int test_and_change_bit(int nr, volatile unsigned long *addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#223: FILE: include/asm-generic/bitops.h:134:
+static __inline__ void __set_bit(int nr, volatile unsigned long *addr)

WARNING:INLINE: plain inline is preferred over __inline__
#223: FILE: include/asm-generic/bitops.h:134:
+static __inline__ void __set_bit(int nr, volatile unsigned long *addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#235: FILE: include/asm-generic/bitops.h:142:
+static __inline__ void __clear_bit(int nr, volatile unsigned long *addr)

WARNING:INLINE: plain inline is preferred over __inline__
#235: FILE: include/asm-generic/bitops.h:142:
+static __inline__ void __clear_bit(int nr, volatile unsigned long *addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#243: FILE: include/asm-generic/bitops.h:150:
+static __inline__ void __change_bit(int nr, volatile unsigned long *addr)

WARNING:INLINE: plain inline is preferred over __inline__
#243: FILE: include/asm-generic/bitops.h:150:
+static __inline__ void __change_bit(int nr, volatile unsigned long *addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#251: FILE: include/asm-generic/bitops.h:158:
+static __inline__ int __test_and_set_bit(int nr, volatile unsigned long *addr)

WARNING:INLINE: plain inline is preferred over __inline__
#251: FILE: include/asm-generic/bitops.h:158:
+static __inline__ int __test_and_set_bit(int nr, volatile unsigned long *addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#261: FILE: include/asm-generic/bitops.h:168:
+static __inline__ int __test_and_clear_bit(int nr, volatile unsigned long *addr)

WARNING:INLINE: plain inline is preferred over __inline__
#261: FILE: include/asm-generic/bitops.h:168:
+static __inline__ int __test_and_clear_bit(int nr, volatile unsigned long *addr)

WARNING:INLINE: plain inline is preferred over __inline__
#271: FILE: include/asm-generic/bitops.h:178:
+static __inline__ int __test_and_change_bit(int nr,

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#272: FILE: include/asm-generic/bitops.h:179:
+					    volatile unsigned long *addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#282: FILE: include/asm-generic/bitops.h:189:
+static __inline__ int test_bit(int nr, __const__ volatile unsigned long *addr)

WARNING:INLINE: plain inline is preferred over __inline__
#282: FILE: include/asm-generic/bitops.h:189:
+static __inline__ int test_bit(int nr, __const__ volatile unsigned long *addr)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#284: FILE: include/asm-generic/bitops.h:191:
+	return 1UL & (addr[BITOP_WORD(nr)] >> (nr & (BITS_PER_LONG-1)));
 	                                                          ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000111499.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 8 errors, 32 warnings, 6 checks, 228 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000111499.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
