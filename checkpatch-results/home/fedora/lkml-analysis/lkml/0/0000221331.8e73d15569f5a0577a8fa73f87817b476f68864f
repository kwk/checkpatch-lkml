WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#39: 
# This is a BitKeeper generated diff -Nru style patch.

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#40: 
#

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#41: 
# Allow multiple backends to be initialized

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#42: 
#

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#44: 
--- a/drivers/char/agp/agp.h	2004-12-22 11:04:31 -08:00

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#123: FILE: drivers/char/agp/backend.c:70:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#140: FILE: drivers/char/agp/backend.c:89:
 {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#191: FILE: drivers/char/agp/backend.c:248:
+        kfree(bridge);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#191: FILE: drivers/char/agp/backend.c:248:
+        kfree(bridge);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#193: FILE: drivers/char/agp/backend.c:250:
+        if (list_empty(&agp_bridges))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#193: FILE: drivers/char/agp/backend.c:250:
+        if (list_empty(&agp_bridges))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#194: FILE: drivers/char/agp/backend.c:251:
+                agp_bridge = NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#194: FILE: drivers/char/agp/backend.c:251:
+                agp_bridge = NULL;$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#231: FILE: drivers/char/agp/backend.c:283:
+			printk (KERN_INFO PFX "agp_frontend_initialize() failed.\n");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#231: FILE: drivers/char/agp/backend.c:283:
+			printk (KERN_INFO PFX "agp_frontend_initialize() failed.\n");

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#238: FILE: drivers/char/agp/backend.c:290:
+		printk(KERN_INFO PFX "AGP aperture is %dM @ 0x%lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#239: FILE: drivers/char/agp/backend.c:291:
+		printk(KERN_INFO PFX "AGP aperture is %dM @ 0x%lx\n",
+			bridge->driver->fetch_size(), bridge->gart_bus_addr);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#243: FILE: drivers/char/agp/backend.c:293:
 
+	}

ERROR:SPACING: space required before the open parenthesis '('
#348: FILE: drivers/char/agp/frontend.c:791:
+	if(!agp_bridge)

ERROR:CODE_INDENT: code indent should use tabs where possible
#351: FILE: drivers/char/agp/frontend.c:794:
+        if (atomic_read(&agp_bridge->agp_in_use))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#351: FILE: drivers/char/agp/frontend.c:794:
+        if (atomic_read(&agp_bridge->agp_in_use))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#352: FILE: drivers/char/agp/frontend.c:795:
+                return -EBUSY;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#352: FILE: drivers/char/agp/frontend.c:795:
+                return -EBUSY;$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!curr"
#393: FILE: drivers/char/agp/generic.c:120:
+	if (curr == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:TRAILING_WHITESPACE: trailing whitespace
#416: FILE: drivers/char/agp/generic.c:154:
+struct agp_memory *agp_allocate_memory(struct agp_bridge_data *bridge, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#417: FILE: drivers/char/agp/generic.c:155:
+struct agp_memory *agp_allocate_memory(struct agp_bridge_data *bridge, 
+					size_t page_count, u32 type)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!curr"
#503: FILE: drivers/char/agp/generic.c:330:
+	if (curr == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!curr"
#525: FILE: drivers/char/agp/generic.c:365:
+	if (curr == NULL)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#578: FILE: drivers/char/agp/generic.c:856:
+		if (!PGE_EMPTY(bridge, readl(bridge->gatt_table+j)))
 		                                               ^

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#591: FILE: drivers/char/agp/generic.c:867:
+		writel(bridge->driver->mask_memory(mem->memory[i], mem->type), bridge->gatt_table+j);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#591: FILE: drivers/char/agp/generic.c:867:
+		writel(bridge->driver->mask_memory(mem->memory[i], mem->type), bridge->gatt_table+j);
 		                                                                                 ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#615: FILE: drivers/char/agp/generic.c:891:
+		writel(bridge->scratch_page, bridge->gatt_table+i);
 		                                               ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#637: FILE: drivers/char/agp/generic.c:974:
+/* When we remove the global variable agp_bridge from all drivers $

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#691: FILE: include/linux/agp_backend.h:98:
+extern struct agp_memory *agp_allocate_memory(struct agp_bridge_data *, size_t, u32);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct agp_bridge_data *' should also have an identifier name
#691: FILE: include/linux/agp_backend.h:98:
+extern struct agp_memory *agp_allocate_memory(struct agp_bridge_data *, size_t, u32);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#691: FILE: include/linux/agp_backend.h:98:
+extern struct agp_memory *agp_allocate_memory(struct agp_bridge_data *, size_t, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#691: FILE: include/linux/agp_backend.h:98:
+extern struct agp_memory *agp_allocate_memory(struct agp_bridge_data *, size_t, u32);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#692: FILE: include/linux/agp_backend.h:99:
+extern int agp_copy_info(struct agp_bridge_data *, struct agp_kern_info *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct agp_bridge_data *' should also have an identifier name
#692: FILE: include/linux/agp_backend.h:99:
+extern int agp_copy_info(struct agp_bridge_data *, struct agp_kern_info *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct agp_kern_info *' should also have an identifier name
#692: FILE: include/linux/agp_backend.h:99:
+extern int agp_copy_info(struct agp_bridge_data *, struct agp_kern_info *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#698: FILE: include/linux/agp_backend.h:102:
+extern void agp_enable(struct agp_bridge_data *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct agp_bridge_data *' should also have an identifier name
#698: FILE: include/linux/agp_backend.h:102:
+extern void agp_enable(struct agp_bridge_data *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#698: FILE: include/linux/agp_backend.h:102:
+extern void agp_enable(struct agp_bridge_data *, u32);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#699: FILE: include/linux/agp_backend.h:103:
+extern struct agp_bridge_data *agp_backend_acquire(struct pci_dev *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pci_dev *' should also have an identifier name
#699: FILE: include/linux/agp_backend.h:103:
+extern struct agp_bridge_data *agp_backend_acquire(struct pci_dev *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#700: FILE: include/linux/agp_backend.h:104:
+extern void agp_backend_release(struct agp_bridge_data *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct agp_bridge_data *' should also have an identifier name
#700: FILE: include/linux/agp_backend.h:104:
+extern void agp_backend_release(struct agp_bridge_data *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct agp_bridge_data *' should also have an identifier name
#709: FILE: include/linux/agp_backend.h:113:
+	struct agp_memory *	(*allocate_memory)(struct agp_bridge_data *, size_t, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#709: FILE: include/linux/agp_backend.h:113:
+	struct agp_memory *	(*allocate_memory)(struct agp_bridge_data *, size_t, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#709: FILE: include/linux/agp_backend.h:113:
+	struct agp_memory *	(*allocate_memory)(struct agp_bridge_data *, size_t, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct agp_bridge_data *' should also have an identifier name
#716: FILE: include/linux/agp_backend.h:116:
+	void			(*enable)(struct agp_bridge_data *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#716: FILE: include/linux/agp_backend.h:116:
+	void			(*enable)(struct agp_bridge_data *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pci_dev *' should also have an identifier name
#717: FILE: include/linux/agp_backend.h:117:
+	struct agp_bridge_data *(*acquire)(struct pci_dev *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct agp_bridge_data *' should also have an identifier name
#718: FILE: include/linux/agp_backend.h:118:
+	void			(*release)(struct agp_bridge_data *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct agp_bridge_data *' should also have an identifier name
#719: FILE: include/linux/agp_backend.h:119:
+	int			(*copy_info)(struct agp_bridge_data *, struct agp_kern_info *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct agp_kern_info *' should also have an identifier name
#719: FILE: include/linux/agp_backend.h:119:
+	int			(*copy_info)(struct agp_bridge_data *, struct agp_kern_info *);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000221331.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 10 errors, 31 warnings, 15 checks, 625 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000221331.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
