CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#111: FILE: include/linux/cpuset.h:59:
+extern int cpuset_can_attach_task(struct container *cont,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#113: FILE: include/linux/cpuset.h:61:
+extern void cpuset_attach_task(struct container *cont,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#114: FILE: include/linux/cpuset.h:62:
+extern void cpuset_attach_task(struct container *cont,
+				struct task_struct *tsk);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#115: FILE: include/linux/cpuset.h:63:
+extern void cpuset_post_attach_task(struct container *cont,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#118: FILE: include/linux/cpuset.h:66:
+extern int cpuset_populate_dir(struct container *cont);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#119: FILE: include/linux/cpuset.h:67:
+extern int cpuset_create(struct container *cont);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#120: FILE: include/linux/cpuset.h:68:
+extern void cpuset_destroy(struct container *cont);

ERROR:CODE_INDENT: code indent should use tabs where possible
#185: FILE: kernel/fork.c:1053:
+ ^I^Igoto bad_fork_cleanup_container;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#185: FILE: kernel/fork.c:1053:
+ ^I^Igoto bad_fork_cleanup_container;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#185: FILE: kernel/fork.c:1053:
+ ^I^Igoto bad_fork_cleanup_container;$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#254: FILE: kernel/container.c:996:
+	if ((err = cpuset_populate_dir(cont)) < 0)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#266: FILE: kernel/container.c:1032:
+	if (err) goto err_unlock_free;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#318: FILE: kernel/container.c:1323:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1612: FILE: kernel/cpuset.c:1055:
+	if ((err = container_add_file(cont, &cft_cpus)) < 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1615: FILE: kernel/cpuset.c:1057:
+	if ((err = container_add_file(cont, &cft_mems)) < 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1618: FILE: kernel/cpuset.c:1059:
+	if ((err = container_add_file(cont, &cft_cpu_exclusive)) < 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1621: FILE: kernel/cpuset.c:1061:
+	if ((err = container_add_file(cont, &cft_mem_exclusive)) < 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1624: FILE: kernel/cpuset.c:1063:
+	if ((err = container_add_file(cont, &cft_memory_migrate)) < 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1627: FILE: kernel/cpuset.c:1065:
+	if ((err = container_add_file(cont, &cft_memory_pressure)) < 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1630: FILE: kernel/cpuset.c:1067:
+	if ((err = container_add_file(cont, &cft_spread_page)) < 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1635: FILE: kernel/cpuset.c:1069:
+	if ((err = container_add_file(cont, &cft_spread_slab)) < 0)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1745: FILE: kernel/cpuset.c:1130:
+		BUG_ON(retval);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:LINE_SPACING: Missing a blank line after declarations
#1776: FILE: kernel/cpuset.c:1143:
+	struct container *cont = current->container;
+	cont->cpuset = &top_cpuset;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000034026.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 11 errors, 4 warnings, 8 checks, 2255 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000034026.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
