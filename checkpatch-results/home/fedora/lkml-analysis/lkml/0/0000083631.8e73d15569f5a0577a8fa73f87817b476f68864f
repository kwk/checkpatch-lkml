WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#44: FILE: fs/gfs2/rgrp.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#88: FILE: fs/gfs2/rgrp.c:45:
+	uint32_t length = rgd->rd_ri.ri_length;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#89: FILE: fs/gfs2/rgrp.c:46:
+	uint32_t count[4], tmp;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#138: FILE: fs/gfs2/rgrp.c:95:
+	uint64_t first = ri->ri_data0;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#139: FILE: fs/gfs2/rgrp.c:96:
+	uint64_t last = first + ri->ri_data;

WARNING:LINE_SPACING: Missing a blank line after declarations
#140: FILE: fs/gfs2/rgrp.c:97:
+	uint64_t last = first + ri->ri_data;
+	return !!(first <= block && block < last);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#250: FILE: fs/gfs2/rgrp.c:207:
+	uint32_t length = rgd->rd_ri.ri_length; /* # blocks in hdr & bitmap */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#251: FILE: fs/gfs2/rgrp.c:208:
+	uint32_t bytes_left, bytes;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#324: FILE: fs/gfs2/rgrp.c:281:
+	uint64_t junk = ip->i_di.di_size;

WARNING:LINE_SPACING: Missing a blank line after declarations
#337: FILE: fs/gfs2/rgrp.c:294:
+		loff_t pos = sdp->sd_rgrps * sizeof(struct gfs2_rindex);
+		error = gfs2_internal_read(ip, &ra_state, buf, &pos,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#338: FILE: fs/gfs2/rgrp.c:295:
+		error = gfs2_internal_read(ip, &ra_state, buf, &pos,
+					    sizeof(struct gfs2_rindex));

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*rgd)...) over kzalloc(sizeof(struct gfs2_rgrpd)...)
#347: FILE: fs/gfs2/rgrp.c:304:
+		rgd = kzalloc(sizeof(struct gfs2_rgrpd), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:LINE_SPACING: Missing a blank line after declarations
#533: FILE: fs/gfs2/rgrp.c:490:
+		struct gfs2_bitmap *bi = rgd->rd_bits + x;
+		kfree(bi->bi_clone);

WARNING:LINE_SPACING: Missing a blank line after declarations
#550: FILE: fs/gfs2/rgrp.c:507:
+		struct gfs2_bitmap *bi = rgd->rd_bits + x;
+		if (!bi->bi_clone)

WARNING:RETURN_VOID: void function return statements are not generally useful
#587: FILE: fs/gfs2/rgrp.c:544:
+	return;
+}

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 40)
#745: FILE: fs/gfs2/rgrp.c:702:
+		for (x = 0, rgd = gfs2_rgrpd_get_first(sdp);
[...]
+			/* Do Nothing */;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#798: FILE: fs/gfs2/rgrp.c:755:
+		error = gfs2_glock_nq_init(rgd->rd_gl,
+					  LM_ST_EXCLUSIVE, LM_FLAG_TRY,

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#819: FILE: fs/gfs2/rgrp.c:776:
+	begin = rgd = forward_rgrp_get(sdp);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#823: FILE: fs/gfs2/rgrp.c:780:
+		error = gfs2_glock_nq_init(rgd->rd_gl,
+					  LM_ST_EXCLUSIVE, flags,

WARNING:SPLIT_STRING: quoted string split across lines
#911: FILE: fs/gfs2/rgrp.c:868:
+		fs_warn(sdp, "al_alloced = %u, al_requested = %u "
+			     "al_file = %s, al_line = %u\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:CODE_INDENT: code indent should use tabs where possible
#912: FILE: fs/gfs2/rgrp.c:869:
+^I^I             al->al_alloced, al->al_requested, al->al_file,$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#931: FILE: fs/gfs2/rgrp.c:888:
+	uint32_t length, rgrp_block, buf_block;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#948: FILE: fs/gfs2/rgrp.c:905:
+	type = gfs2_testbit(rgd,
+			   bi->bi_bh->b_data + bi->bi_offset,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#979: FILE: fs/gfs2/rgrp.c:936:
+	uint32_t length = rgd->rd_ri.ri_length;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#980: FILE: fs/gfs2/rgrp.c:937:
+	uint32_t blk = 0;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#996: FILE: fs/gfs2/rgrp.c:953:
+	/* Search (up to entire) bitmap in this rgrp for allocatable block.
+	   "x <= length", instead of "x < length", because we typically start

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#999: FILE: fs/gfs2/rgrp.c:956:
+	   search in the first part of our first-searched bit block.  */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1044: FILE: fs/gfs2/rgrp.c:1001:
+				     uint32_t blen, unsigned char new_state)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1048: FILE: fs/gfs2/rgrp.c:1005:
+	uint32_t length, rgrp_blk, buf_blk;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1102: FILE: fs/gfs2/rgrp.c:1059:
+	uint32_t goal, blk;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1103: FILE: fs/gfs2/rgrp.c:1060:
+	uint64_t block;

CHECK:SPACING: spaces preferred around that '+' (ctx:WxV)
#1126: FILE: fs/gfs2/rgrp.c:1083:
+	gfs2_quota_change(ip, +1, ip->i_di.di_uid, ip->i_di.di_gid);
 	                      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1147: FILE: fs/gfs2/rgrp.c:1104:
+	uint32_t goal, blk;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1148: FILE: fs/gfs2/rgrp.c:1105:
+	uint64_t block;

CHECK:SPACING: spaces preferred around that '+' (ctx:WxV)
#1171: FILE: fs/gfs2/rgrp.c:1128:
+	gfs2_quota_change(ip, +1, ip->i_di.di_uid, ip->i_di.di_gid);
 	                      ^

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1193: FILE: fs/gfs2/rgrp.c:1150:
+	uint32_t blk;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1194: FILE: fs/gfs2/rgrp.c:1151:
+	uint64_t block;

CHECK:SPACING: spaces preferred around that '+' (ctx:WxV)
#1212: FILE: fs/gfs2/rgrp.c:1169:
+	gfs2_statfs_change(sdp, 0, -1, +1);
 	                               ^

CHECK:SPACING: spaces preferred around that '+' (ctx:WxV)
#1246: FILE: fs/gfs2/rgrp.c:1203:
+	gfs2_statfs_change(sdp, 0, +blen, 0);
 	                           ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1248: FILE: fs/gfs2/rgrp.c:1205:
+	gfs2_quota_change(ip, -(int64_t)blen,
+			 ip->i_di.di_uid, ip->i_di.di_gid);

CHECK:SPACING: spaces preferred around that '+' (ctx:WxV)
#1275: FILE: fs/gfs2/rgrp.c:1232:
+	gfs2_statfs_change(sdp, 0, +blen, 0);
 	                           ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1277: FILE: fs/gfs2/rgrp.c:1234:
+	gfs2_quota_change(ip, -(int64_t)blen,
+			 ip->i_di.di_uid, ip->i_di.di_gid);

CHECK:SPACING: spaces preferred around that '+' (ctx:WxV)
#1299: FILE: fs/gfs2/rgrp.c:1256:
+	gfs2_statfs_change(sdp, 0, +1, -1);
 	                           ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1390: FILE: fs/gfs2/rgrp.c:1347:
+		gfs2_holder_init(rlist->rl_rgd[x]->rd_gl,
+				state, flags,

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1416: FILE: fs/gfs2/rgrp.h:1:
+/*

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1447: FILE: fs/gfs2/rgrp.h:32:
+int gfs2_inplace_reserve_i(struct gfs2_inode *ip,
+			 char *file, unsigned int line);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1481: FILE: fs/gfs2/bits.c:1:
+/*

ERROR:CODE_INDENT: code indent should use tabs where possible
#1514: FILE: fs/gfs2/bits.c:34:
+^I        /* current */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1518: FILE: fs/gfs2/bits.c:38:
+^I        1, 0, 0, 0$

CHECK:BRACES: braces {} should be used on all arms of this statement
#1544: FILE: fs/gfs2/bits.c:64:
+	if (valid_change[new_state * 4 + cur_state]) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#1547: FILE: fs/gfs2/bits.c:67:
+	} else

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1597: FILE: fs/gfs2/bits.c:117:
+	uint32_t blk = goal;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1647: FILE: fs/gfs2/bits.c:167:
+	uint32_t count = 0;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1666: FILE: fs/gfs2/bits.h:1:
+/*

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1681: FILE: fs/gfs2/bits.h:16:
+void gfs2_setbit(struct gfs2_rgrpd *rgd,
+		unsigned char *buffer, unsigned int buflen,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1682: FILE: fs/gfs2/bits.h:17:
+		uint32_t block, unsigned char new_state);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1684: FILE: fs/gfs2/bits.h:19:
+unsigned char gfs2_testbit(struct gfs2_rgrpd *rgd,
+			  unsigned char *buffer, unsigned int buflen,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1687: FILE: fs/gfs2/bits.h:22:
+uint32_t gfs2_bitfit(struct gfs2_rgrpd *rgd,
+		    unsigned char *buffer, unsigned int buflen,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1688: FILE: fs/gfs2/bits.h:23:
+		    uint32_t goal, unsigned char old_state);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1690: FILE: fs/gfs2/bits.h:25:
+uint32_t gfs2_bitcount(struct gfs2_rgrpd *rgd,
+		      unsigned char *buffer, unsigned int buflen,

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000083631.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 3 errors, 13 warnings, 44 checks, 1641 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000083631.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
