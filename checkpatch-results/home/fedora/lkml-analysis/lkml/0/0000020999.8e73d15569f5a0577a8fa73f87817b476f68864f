WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#51: 
--- linux-2.6.18/include/linux/lockdep.h.bak	2006-11-01 09:27:23.000000000 -0500

ERROR:TRAILING_WHITESPACE: trailing whitespace
#57: FILE: include/linux/lockdep.h:122:
+^Istruct list_head^I^Ilock_ordering_entry; $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#162: FILE: kernel/lockdep.c:2715:
+void dfs_lock_sort(struct lock_class *class) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#163: FILE: kernel/lockdep.c:2716:
+void dfs_lock_sort(struct lock_class *class) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#176: FILE: kernel/lockdep.c:2729:
+
+}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#178: FILE: kernel/lockdep.c:2731:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:FUNCTION_WITHOUT_ARGS: Bad function definition - struct list_head *generate_lock_ordering() should probably be struct list_head *generate_lock_ordering(void)
#179: FILE: kernel/lockdep.c:2732:
+struct list_head *generate_lock_ordering() {

Function declarations without arguments like::

  int foo()

should be::

  int foo(void)

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#179: FILE: kernel/lockdep.c:2732:
+struct list_head *generate_lock_ordering() {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#180: FILE: kernel/lockdep.c:2733:
+struct list_head *generate_lock_ordering() {
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#184: FILE: kernel/lockdep.c:2737:
+        list_for_each_entry(class, &all_lock_classes, lock_entry) {$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#184: FILE: kernel/lockdep.c:2737:
+        list_for_each_entry(class, &all_lock_classes, lock_entry) {$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#195: FILE: kernel/lockdep.c:2748:
+^Ireturn &ordering_list_head;^I$

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#197: FILE: kernel/lockdep.c:2750:
+
+}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#199: FILE: kernel/lockdep.c:2752:
+
+

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#206: FILE: kernel/lockdep_proc.c:19:
+#include <asm/uaccess.h>

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#216: FILE: kernel/lockdep_proc.c:332:
+{
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#222: FILE: kernel/lockdep_proc.c:338:
+        raw_local_irq_save(flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#222: FILE: kernel/lockdep_proc.c:338:
+        raw_local_irq_save(flags);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#228: FILE: kernel/lockdep_proc.c:344:
+                seq_printf(m, "%i: %s\n", i, class->name);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#228: FILE: kernel/lockdep_proc.c:344:
+                seq_printf(m, "%i: %s\n", i, class->name);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#229: FILE: kernel/lockdep_proc.c:345:
+                i++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#229: FILE: kernel/lockdep_proc.c:345:
+                i++;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#230: FILE: kernel/lockdep_proc.c:346:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#230: FILE: kernel/lockdep_proc.c:346:
+        }$

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#237: FILE: kernel/lockdep_proc.c:353:
+
+}

WARNING:CONST_STRUCT: struct file_operations should normally be const
#244: FILE: kernel/lockdep_proc.c:360:
+static struct file_operations proc_lockdep_ordering_operations = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR' are not preferred. Consider using octal permissions '0400'.
#258: FILE: kernel/lockdep_proc.c:379:
+	entry = create_proc_entry("lockdep_ordering", S_IRUSR, NULL);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#272: FILE: kernel/lockdep_internals.h:34:
+extern struct list_head *generate_lock_ordering(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000020999.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 10 errors, 9 warnings, 9 checks, 202 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000020999.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
