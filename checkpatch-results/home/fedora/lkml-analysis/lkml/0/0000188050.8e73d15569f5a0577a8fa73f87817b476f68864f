WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#35: 
Signed-Off-By: Dave Teigland <teigland@redhat.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#36: 
Signed-Off-By: Patrick Caulfield <pcaulfie@redhat.com>

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#60: FILE: include/linux/dlm.h:1:
+/******************************************************************************

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#61: FILE: include/linux/dlm.h:2:
+/******************************************************************************
+*******************************************************************************

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:NEW_TYPEDEFS: do not add new typedefs
#217: FILE: include/linux/dlm.h:158:
+typedef void dlm_lockspace_t;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#224: FILE: include/linux/dlm.h:165:
+	uint64_t ra_start;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#225: FILE: include/linux/dlm.h:166:
+	uint64_t ra_end;

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#262: FILE: include/linux/dlm.h:203:
+^Iint ^I sb_status;$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#263: FILE: include/linux/dlm.h:204:
+	uint32_t sb_lkid;

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#264: FILE: include/linux/dlm.h:205:
+^Ichar ^I sb_flags;$

ERROR:POINTER_LOCATION: "foo *	 bar" should be "foo *bar"
#265: FILE: include/linux/dlm.h:206:
+	char *	 sb_lvbptr;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#268: FILE: include/linux/dlm.h:209:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'asyncronous' may be misspelled - perhaps 'asynchronous'?
#292: FILE: include/linux/dlm.h:233:
+ * Make an asyncronous request to acquire or convert a lock on a named
            ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#329: FILE: include/linux/dlm.h:270:
+	     uint32_t flags,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#332: FILE: include/linux/dlm.h:273:
+	     uint32_t parent_lkid,

WARNING:SPACING: Unnecessary space before function pointer arguments
#333: FILE: include/linux/dlm.h:274:
+	     void (*lockast) (void *astarg),

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: Unnecessary space before function pointer arguments
#335: FILE: include/linux/dlm.h:276:
+	     void (*bast) (void *astarg, int mode),

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#359: FILE: include/linux/dlm.h:300:
+	       uint32_t lkid,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#360: FILE: include/linux/dlm.h:301:
+	       uint32_t flags,

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#370: FILE: drivers/dlm/dlm_internal.h:1:
+/******************************************************************************

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#371: FILE: drivers/dlm/dlm_internal.h:2:
+/******************************************************************************
+*******************************************************************************

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#406: FILE: drivers/dlm/dlm_internal.h:37:
+#include <asm/uaccess.h>

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'a' - possible side-effects?
#422: FILE: drivers/dlm/dlm_internal.h:53:
+#define MAX(a, b) (((a) > (b)) ? (a) : (b))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'b' - possible side-effects?
#422: FILE: drivers/dlm/dlm_internal.h:53:
+#define MAX(a, b) (((a) > (b)) ? (a) : (b))

CHECK:CAMELCASE: Avoid CamelCase: <PRIx64>
#425: FILE: drivers/dlm/dlm_internal.h:56:
+#define PRIx64 "lx"

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#444: FILE: drivers/dlm/dlm_internal.h:75:
+#define log_print(fmt, args...) printk("dlm: "fmt"\n", ##args)

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#444: FILE: drivers/dlm/dlm_internal.h:75:
+#define log_print(fmt, args...) printk("dlm: "fmt"\n", ##args)

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#445: FILE: drivers/dlm/dlm_internal.h:76:
+#define log_error(ls, fmt, args...) printk("dlm: %s: " fmt "\n", (ls)->ls_name, ##args)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#463: FILE: drivers/dlm/dlm_internal.h:94:
+  if (!(x)) \$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#463: FILE: drivers/dlm/dlm_internal.h:94:
+  if (!(x)) \
+  { \

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 2)
#463: FILE: drivers/dlm/dlm_internal.h:94:
+  if (!(x)) \
+  { \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#464: FILE: drivers/dlm/dlm_internal.h:95:
+  { \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#465: FILE: drivers/dlm/dlm_internal.h:96:
+    printk("\nDLM:  Assertion failed on line %d of file %s\n" \$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#465: FILE: drivers/dlm/dlm_internal.h:96:
+    printk("\nDLM:  Assertion failed on line %d of file %s\n" \

ERROR:CODE_INDENT: code indent should use tabs where possible
#466: FILE: drivers/dlm/dlm_internal.h:97:
+               "DLM:  assertion:  \"%s\"\n" \$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#466: FILE: drivers/dlm/dlm_internal.h:97:
+               "DLM:  assertion:  \"%s\"\n" \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#467: FILE: drivers/dlm/dlm_internal.h:98:
+               "DLM:  time = %lu\n", \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#467: FILE: drivers/dlm/dlm_internal.h:98:
+               "DLM:  time = %lu\n", \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#468: FILE: drivers/dlm/dlm_internal.h:99:
+               __LINE__, __FILE__, #x, jiffies); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#468: FILE: drivers/dlm/dlm_internal.h:99:
+               __LINE__, __FILE__, #x, jiffies); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#469: FILE: drivers/dlm/dlm_internal.h:100:
+    {do} \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#470: FILE: drivers/dlm/dlm_internal.h:101:
+    printk("\n"); \$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#470: FILE: drivers/dlm/dlm_internal.h:101:
+    printk("\n"); \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#471: FILE: drivers/dlm/dlm_internal.h:102:
+    BUG(); \$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#471: FILE: drivers/dlm/dlm_internal.h:102:
+    BUG(); \

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#472: FILE: drivers/dlm/dlm_internal.h:103:
+    panic("DLM:  Record message above and reboot.\n"); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#473: FILE: drivers/dlm/dlm_internal.h:104:
+  } \$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#476: FILE: drivers/dlm/dlm_internal.h:107:
+
+

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#479: FILE: drivers/dlm/dlm_internal.h:110:
+	uint32_t		master_nodeid;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#480: FILE: drivers/dlm/dlm_internal.h:111:
+	uint16_t		length;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#498: FILE: drivers/dlm/dlm_internal.h:129:
+	uint16_t		counter;

ERROR:POINTER_LOCATION: "foo *			bar" should be "foo *bar"
#517: FILE: drivers/dlm/dlm_internal.h:148:
+	int *			nodeids;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#527: FILE: drivers/dlm/dlm_internal.h:158:
+	uint32_t		flags;

ERROR:POINTER_LOCATION: "foo *			bar" should be "foo *bar"
#528: FILE: drivers/dlm/dlm_internal.h:159:
+	void *			astaddr;

ERROR:POINTER_LOCATION: "foo *			bar" should be "foo *bar"
#530: FILE: drivers/dlm/dlm_internal.h:161:
+	void *			bastaddr;

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#532: FILE: drivers/dlm/dlm_internal.h:163:
+	struct dlm_lksb *	lksb;

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#533: FILE: drivers/dlm/dlm_internal.h:164:
+	struct dlm_range *	range;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#536: FILE: drivers/dlm/dlm_internal.h:167:
+
+

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#602: FILE: drivers/dlm/dlm_internal.h:233:
+	struct dlm_rsb *	lkb_resource;	/* the rsb */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#606: FILE: drivers/dlm/dlm_internal.h:237:
+	uint32_t		lkb_id;		/* our lock ID */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#607: FILE: drivers/dlm/dlm_internal.h:238:
+	uint32_t		lkb_remid;	/* lock ID on remote partner */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#608: FILE: drivers/dlm/dlm_internal.h:239:
+	uint32_t		lkb_exflags;	/* external flags from caller */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#609: FILE: drivers/dlm/dlm_internal.h:240:
+	uint32_t		lkb_sbflags;	/* lksb flags */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#610: FILE: drivers/dlm/dlm_internal.h:241:
+	uint32_t		lkb_flags;	/* internal flags */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#611: FILE: drivers/dlm/dlm_internal.h:242:
+	uint32_t		lkb_lvbseq;	/* lvb sequence number */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's8' over 'int8_t'
#613: FILE: drivers/dlm/dlm_internal.h:244:
+	int8_t			lkb_status;     /* granted, waiting, convert */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's8' over 'int8_t'
#614: FILE: drivers/dlm/dlm_internal.h:245:
+	int8_t			lkb_rqmode;	/* requested lock mode */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's8' over 'int8_t'
#615: FILE: drivers/dlm/dlm_internal.h:246:
+	int8_t			lkb_grmode;	/* granted lock mode */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's8' over 'int8_t'
#616: FILE: drivers/dlm/dlm_internal.h:247:
+	int8_t			lkb_bastmode;	/* requested mode */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's8' over 'int8_t'
#617: FILE: drivers/dlm/dlm_internal.h:248:
+	int8_t			lkb_highbast;	/* highest mode bast sent for */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's8' over 'int8_t'
#619: FILE: drivers/dlm/dlm_internal.h:250:
+	int8_t			lkb_wait_type;	/* type of reply waiting for */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's8' over 'int8_t'
#620: FILE: drivers/dlm/dlm_internal.h:251:
+	int8_t			lkb_ast_type;	/* type of ast queued for */

ERROR:POINTER_LOCATION: "foo *		bar" should be "foo *bar"
#628: FILE: drivers/dlm/dlm_internal.h:259:
+	uint64_t *		lkb_range;	/* array of gr/rq ranges */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#628: FILE: drivers/dlm/dlm_internal.h:259:
+	uint64_t *		lkb_range;	/* array of gr/rq ranges */

ERROR:POINTER_LOCATION: "foo *			bar" should be "foo *bar"
#629: FILE: drivers/dlm/dlm_internal.h:260:
+	char *			lkb_lvbptr;

ERROR:POINTER_LOCATION: "foo *       bar" should be "foo *bar"
#630: FILE: drivers/dlm/dlm_internal.h:261:
+	struct dlm_lksb *       lkb_lksb;       /* caller's status block */

ERROR:POINTER_LOCATION: "foo *			bar" should be "foo *bar"
#631: FILE: drivers/dlm/dlm_internal.h:262:
+	void *			lkb_astaddr;	/* caller's ast function */

ERROR:POINTER_LOCATION: "foo *			bar" should be "foo *bar"
#632: FILE: drivers/dlm/dlm_internal.h:263:
+	void *			lkb_bastaddr;	/* caller's bast function */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#636: FILE: drivers/dlm/dlm_internal.h:267:
+
+

ERROR:POINTER_LOCATION: "foo *		bar" should be "foo *bar"
#651: FILE: drivers/dlm/dlm_internal.h:282:
+	struct dlm_ls *		res_ls;		/* the lockspace */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#657: FILE: drivers/dlm/dlm_internal.h:288:
+	uint32_t                res_lvbseq;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#658: FILE: drivers/dlm/dlm_internal.h:289:
+	uint32_t		res_bucket;	/* rsbtbl */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#660: FILE: drivers/dlm/dlm_internal.h:291:
+	uint32_t		res_trial_lkid;	/* lkb trying lookup result */

ERROR:POINTER_LOCATION: "foo *			bar" should be "foo *bar"
#671: FILE: drivers/dlm/dlm_internal.h:302:
+	char *			res_lvbptr;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#675: FILE: drivers/dlm/dlm_internal.h:306:
+
+

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#685: FILE: drivers/dlm/dlm_internal.h:316:
+	uint32_t		h_version;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#686: FILE: drivers/dlm/dlm_internal.h:317:
+	uint32_t		h_lockspace;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#687: FILE: drivers/dlm/dlm_internal.h:318:
+	uint32_t		h_nodeid;	/* nodeid of sender */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#688: FILE: drivers/dlm/dlm_internal.h:319:
+	uint16_t		h_length;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#689: FILE: drivers/dlm/dlm_internal.h:320:
+	uint8_t			h_cmd;		/* DLM_MSG, DLM_RCOM */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#690: FILE: drivers/dlm/dlm_internal.h:321:
+	uint8_t			h_pad;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#693: FILE: drivers/dlm/dlm_internal.h:324:
+
+

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#710: FILE: drivers/dlm/dlm_internal.h:341:
+	uint32_t		m_type;		/* DLM_MSG_ */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#711: FILE: drivers/dlm/dlm_internal.h:342:
+	uint32_t		m_nodeid;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#712: FILE: drivers/dlm/dlm_internal.h:343:
+	uint32_t		m_pid;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#713: FILE: drivers/dlm/dlm_internal.h:344:
+	uint32_t		m_lkid;		/* lkid on sender */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#714: FILE: drivers/dlm/dlm_internal.h:345:
+	uint32_t		m_remid;	/* lkid on receiver */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#715: FILE: drivers/dlm/dlm_internal.h:346:
+	uint32_t		m_parent_lkid;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#716: FILE: drivers/dlm/dlm_internal.h:347:
+	uint32_t		m_parent_remid;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#717: FILE: drivers/dlm/dlm_internal.h:348:
+	uint32_t		m_exflags;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#718: FILE: drivers/dlm/dlm_internal.h:349:
+	uint32_t		m_sbflags;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#719: FILE: drivers/dlm/dlm_internal.h:350:
+	uint32_t		m_flags;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#720: FILE: drivers/dlm/dlm_internal.h:351:
+	uint32_t		m_lvbseq;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#728: FILE: drivers/dlm/dlm_internal.h:359:
+	uint64_t		m_range[2];

CHECK:LINE_SPACING: Please don't use multiple blank lines
#732: FILE: drivers/dlm/dlm_internal.h:363:
+
+

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#749: FILE: drivers/dlm/dlm_internal.h:380:
+	uint32_t		rc_type;	/* DLM_RCOM_ */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#751: FILE: drivers/dlm/dlm_internal.h:382:
+	uint64_t		rc_id;		/* match reply with request */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#755: FILE: drivers/dlm/dlm_internal.h:386:
+
+

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#780: FILE: drivers/dlm/dlm_internal.h:411:
+	uint32_t		ls_global_id;	/* global unique lockspace ID */

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#785: FILE: drivers/dlm/dlm_internal.h:416:
+	struct dlm_rsbtable *	ls_rsbtbl;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#786: FILE: drivers/dlm/dlm_internal.h:417:
+	uint32_t		ls_rsbtbl_size;

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#788: FILE: drivers/dlm/dlm_internal.h:419:
+	struct dlm_lkbtable *	ls_lkbtbl;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#789: FILE: drivers/dlm/dlm_internal.h:420:
+	uint32_t		ls_lkbtbl_size;

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#791: FILE: drivers/dlm/dlm_internal.h:422:
+	struct dlm_dirtable *	ls_dirtbl;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#792: FILE: drivers/dlm/dlm_internal.h:423:
+	uint32_t		ls_dirtbl_size;

ERROR:POINTER_LOCATION: "foo *			bar" should be "foo *bar"
#801: FILE: drivers/dlm/dlm_internal.h:432:
+	int *			ls_node_array;

ERROR:POINTER_LOCATION: "foo *			bar" should be "foo *bar"
#802: FILE: drivers/dlm/dlm_internal.h:433:
+	int *			ls_nodeids_next;

ERROR:POINTER_LOCATION: "foo *		bar" should be "foo *bar"
#809: FILE: drivers/dlm/dlm_internal.h:440:
+	struct dentry *		ls_debug_dentry;/* debugfs */

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#814: FILE: drivers/dlm/dlm_internal.h:445:
+	struct task_struct *	ls_recoverd_task;

ERROR:POINTER_LOCATION: "foo *			bar" should be "foo *bar"
#827: FILE: drivers/dlm/dlm_internal.h:458:
+	char *			ls_recover_buf;

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#829: FILE: drivers/dlm/dlm_internal.h:460:
+	spinlock_t		ls_recover_list_lock;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#840: FILE: drivers/dlm/dlm_internal.h:471:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#845: FILE: drivers/dlm/lvb_table.h:1:
+/******************************************************************************

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#846: FILE: drivers/dlm/lvb_table.h:2:
+/******************************************************************************
+*******************************************************************************

ERROR:TRAILING_WHITESPACE: trailing whitespace
#849: FILE: drivers/dlm/lvb_table.h:5:
+**  $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#870: FILE: drivers/dlm/lvb_table.h:26:
+        /* UN   NL  CR  CW  PR  PW  EX  PD*/$

ERROR:CODE_INDENT: code indent should use tabs where possible
#871: FILE: drivers/dlm/lvb_table.h:27:
+        {  -1,  1,  1,  1,  1,  1,  1, -1 }, /* UN */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#871: FILE: drivers/dlm/lvb_table.h:27:
+        {  -1,  1,  1,  1,  1,  1,  1, -1 }, /* UN */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#872: FILE: drivers/dlm/lvb_table.h:28:
+        {  -1,  1,  1,  1,  1,  1,  1,  0 }, /* NL */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#872: FILE: drivers/dlm/lvb_table.h:28:
+        {  -1,  1,  1,  1,  1,  1,  1,  0 }, /* NL */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#873: FILE: drivers/dlm/lvb_table.h:29:
+        {  -1, -1,  1,  1,  1,  1,  1,  0 }, /* CR */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#873: FILE: drivers/dlm/lvb_table.h:29:
+        {  -1, -1,  1,  1,  1,  1,  1,  0 }, /* CR */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#874: FILE: drivers/dlm/lvb_table.h:30:
+        {  -1, -1, -1,  1,  1,  1,  1,  0 }, /* CW */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#874: FILE: drivers/dlm/lvb_table.h:30:
+        {  -1, -1, -1,  1,  1,  1,  1,  0 }, /* CW */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#875: FILE: drivers/dlm/lvb_table.h:31:
+        {  -1, -1, -1, -1,  1,  1,  1,  0 }, /* PR */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#875: FILE: drivers/dlm/lvb_table.h:31:
+        {  -1, -1, -1, -1,  1,  1,  1,  0 }, /* PR */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#876: FILE: drivers/dlm/lvb_table.h:32:
+        {  -1,  0,  0,  0,  0,  0,  1,  0 }, /* PW */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#876: FILE: drivers/dlm/lvb_table.h:32:
+        {  -1,  0,  0,  0,  0,  0,  1,  0 }, /* PW */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#877: FILE: drivers/dlm/lvb_table.h:33:
+        {  -1,  0,  0,  0,  0,  0,  0,  0 }, /* EX */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#877: FILE: drivers/dlm/lvb_table.h:33:
+        {  -1,  0,  0,  0,  0,  0,  0,  0 }, /* EX */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#878: FILE: drivers/dlm/lvb_table.h:34:
+        {  -1,  0,  0,  0,  0,  0,  0,  0 }  /* PD */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#878: FILE: drivers/dlm/lvb_table.h:34:
+        {  -1,  0,  0,  0,  0,  0,  0,  0 }  /* PD */$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#885: FILE: drivers/dlm/ast.c:1:
+/******************************************************************************

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#886: FILE: drivers/dlm/ast.c:2:
+/******************************************************************************
+*******************************************************************************

ERROR:TRAILING_WHITESPACE: trailing whitespace
#890: FILE: drivers/dlm/ast.c:6:
+**  $

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#905: FILE: drivers/dlm/ast.c:21:
+static struct task_struct *	astd_task;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#909: FILE: drivers/dlm/ast.c:25:
+
+

WARNING:SPACING: Unnecessary space before function pointer arguments
#937: FILE: drivers/dlm/ast.c:53:
+	void (*cast) (long param);

WARNING:SPACING: Unnecessary space before function pointer arguments
#938: FILE: drivers/dlm/ast.c:54:
+	void (*bast) (long param, int mode);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#970: FILE: drivers/dlm/ast.c:86:
+		/* FIXME: Is it safe to look at lkb_grmode here
+		   without doing a lock_rsb() ?

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#971: FILE: drivers/dlm/ast.c:87:
+		   Look at other checks in v1 to avoid basts. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#978: FILE: drivers/dlm/ast.c:94:
+		/* this removes the reference added by dlm_add_ast
+		   and may result in the lkb being freed */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#978: FILE: drivers/dlm/ast.c:94:
+		   and may result in the lkb being freed */

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1054: FILE: drivers/dlm/ast.h:1:
+/******************************************************************************

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1055: FILE: drivers/dlm/ast.h:2:
+/******************************************************************************
+*******************************************************************************

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1058: FILE: drivers/dlm/ast.h:5:
+**  $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1083: FILE: drivers/dlm/dir.c:1:
+/******************************************************************************

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1084: FILE: drivers/dlm/dir.c:2:
+/******************************************************************************
+*******************************************************************************

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1088: FILE: drivers/dlm/dir.c:6:
+**  $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1107: FILE: drivers/dlm/dir.c:25:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1151: FILE: drivers/dlm/dir.c:69:
+/* $

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1165: FILE: drivers/dlm/dir.c:83:
+	uint32_t hash, node, n = 0;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1188: FILE: drivers/dlm/dir.c:106:
+	DLM_ASSERT(memb , printk("num_nodes=%u n=%u node=%u\n",

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#1188: FILE: drivers/dlm/dir.c:106:
+	DLM_ASSERT(memb , printk("num_nodes=%u n=%u node=%u\n",
 	                ^

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1202: FILE: drivers/dlm/dir.c:120:
+	uint32_t val;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1212: FILE: drivers/dlm/dir.c:130:
+	uint32_t bucket;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1235: FILE: drivers/dlm/dir.c:153:
+	uint32_t bucket;

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1265: FILE: drivers/dlm/dir.c:183:
+	DLM_ASSERT(list_empty(&ls->ls_recover_list), );

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#1285: FILE: drivers/dlm/dir.c:203:
+	uint16_t namelen;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1311: FILE: drivers/dlm/dir.c:229:
+^I^I^I/* $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1323: FILE: drivers/dlm/dir.c:241:
+				/* namelen of 0xFFFFF marks end of names for
+				   this node; namelen of 0 marks end of the

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1324: FILE: drivers/dlm/dir.c:242:
+				   buffer */

ERROR:CODE_INDENT: code indent should use tabs where possible
#1347: FILE: drivers/dlm/dir.c:265:
+         done:$

WARNING:INDENTED_LABEL: labels should not be indented
#1347: FILE: drivers/dlm/dir.c:265:
+         done:

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'dlm_recover_directory', this function's name, in a string
#1354: FILE: drivers/dlm/dir.c:272:
+	log_debug(ls, "dlm_recover_directory %d entries", count);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1367: FILE: drivers/dlm/dir.c:285:
+	uint32_t bucket;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1410: FILE: drivers/dlm/dir.c:328:
+/* $

CHECK:BRACES: braces {} should be used on all arms of this statement
#1419: FILE: drivers/dlm/dir.c:337:
+	if (ls->ls_low_nodeid == dlm_our_nodeid()) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#1423: FILE: drivers/dlm/dir.c:341:
+	} else

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1430: FILE: drivers/dlm/dir.c:348:
+/* Copy the names of master rsb's into the buffer provided.
+   Only select names whose dir node is the given nodeid. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1430: FILE: drivers/dlm/dir.c:348:
+   Only select names whose dir node is the given nodeid. */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#1439: FILE: drivers/dlm/dir.c:357:
+	uint16_t be_namelen;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1456: FILE: drivers/dlm/dir.c:374:
+			   printk("error %d\n", error););

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1462: FILE: drivers/dlm/dir.c:380:
+^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1481: FILE: drivers/dlm/dir.c:399:
+^I^I$

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1490: FILE: drivers/dlm/dir.c:408:
+		if (offset + sizeof(uint16_t)*2 + r->res_length > outlen) {
 		                             ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1505: FILE: drivers/dlm/dir.c:423:
+^I/* $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'list == &ls->ls_root_list'
#1510: FILE: drivers/dlm/dir.c:428:
+	if ((list == &ls->ls_root_list) &&
+	    (offset + sizeof(uint16_t) <= outlen)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1525: FILE: drivers/dlm/dir.h:1:
+/******************************************************************************

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1526: FILE: drivers/dlm/dir.h:2:
+/******************************************************************************
+*******************************************************************************

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1530: FILE: drivers/dlm/dir.h:6:
+**  $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1541: FILE: drivers/dlm/dir.h:17:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1549: FILE: drivers/dlm/dir.h:25:
+int dlm_dir_lookup(struct dlm_ls *ls, int nodeid, char *name, int namelen,
+	int *r_nodeid);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1551: FILE: drivers/dlm/dir.h:27:
+int dlm_copy_master_names(struct dlm_ls *ls, char *inbuf, int inlen,
+	char *outbuf, int outlen, int nodeid);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1558: FILE: drivers/dlm/lock.h:1:
+/******************************************************************************

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1559: FILE: drivers/dlm/lock.h:2:
+/******************************************************************************
+*******************************************************************************

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1562: FILE: drivers/dlm/lock.h:5:
+**  $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1578: FILE: drivers/dlm/lock.h:21:
+int dlm_find_rsb(struct dlm_ls *ls, char *name, int namelen,
+	unsigned int flags, struct dlm_rsb **r_ret);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1599: FILE: drivers/dlm/lockspace.c:1:
+/******************************************************************************

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1600: FILE: drivers/dlm/lockspace.c:2:
+/******************************************************************************
+*******************************************************************************

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#1628: FILE: drivers/dlm/lockspace.c:30:
+static struct task_struct *	scand_task;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1630: FILE: drivers/dlm/lockspace.c:32:
+
+

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*ls)...) over kmalloc(sizeof(struct dlm_ls)...)
#1801: FILE: drivers/dlm/lockspace.c:203:
+	ls = kmalloc(sizeof(struct dlm_ls) + namelen, GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*ls->ls_rsbtbl)...) over kmalloc(sizeof(struct dlm_rsbtable)...)
#1813: FILE: drivers/dlm/lockspace.c:215:
+	ls->ls_rsbtbl = kmalloc(sizeof(struct dlm_rsbtable) * size, GFP_KERNEL);

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#1813: FILE: drivers/dlm/lockspace.c:215:
+	ls->ls_rsbtbl = kmalloc(sizeof(struct dlm_rsbtable) * size, GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*ls->ls_lkbtbl)...) over kmalloc(sizeof(struct dlm_lkbtable)...)
#1825: FILE: drivers/dlm/lockspace.c:227:
+	ls->ls_lkbtbl = kmalloc(sizeof(struct dlm_lkbtable) * size, GFP_KERNEL);

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#1825: FILE: drivers/dlm/lockspace.c:227:
+	ls->ls_lkbtbl = kmalloc(sizeof(struct dlm_lkbtable) * size, GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*ls->ls_dirtbl)...) over kmalloc(sizeof(struct dlm_dirtable)...)
#1837: FILE: drivers/dlm/lockspace.c:239:
+	ls->ls_dirtbl = kmalloc(sizeof(struct dlm_dirtable) * size, GFP_KERNEL);

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#1837: FILE: drivers/dlm/lockspace.c:239:
+	ls->ls_dirtbl = kmalloc(sizeof(struct dlm_dirtable) * size, GFP_KERNEL);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1903: FILE: drivers/dlm/lockspace.c:305:
+	/* Now we depend on userspace to notice the new ls, join it and
+	   give us a start or terminate.  The ls isn't actually running

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1904: FILE: drivers/dlm/lockspace.c:306:
+	   until it receives a start. */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1907: FILE: drivers/dlm/lockspace.c:309:
+	error = wait_event_interruptible(ls->ls_wait_member,
+				test_bit(LSFL_JOIN_DONE, &ls->ls_flags));

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1969: FILE: drivers/dlm/lockspace.c:371:
+	/* NOTE: We check the lockidtbl here rather than the resource table.
+	   This is because there may be LKBs queued as ASTs that have been

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1971: FILE: drivers/dlm/lockspace.c:373:
+	   been delivered */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2005: FILE: drivers/dlm/lockspace.c:407:
+		error = wait_event_interruptible(ls->ls_wait_member,
+				test_bit(LSFL_LEAVE_DONE, &ls->ls_flags));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2105: FILE: drivers/dlm/lockspace.c:507:
+^I$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2137: FILE: drivers/dlm/lockspace.h:1:
+/******************************************************************************

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#2138: FILE: drivers/dlm/lockspace.h:2:
+/******************************************************************************
+*******************************************************************************

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2142: FILE: drivers/dlm/lockspace.h:6:
+**  $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2166: FILE: drivers/dlm/main.c:1:
+/******************************************************************************

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#2167: FILE: drivers/dlm/main.c:2:
+/******************************************************************************
+*******************************************************************************

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2171: FILE: drivers/dlm/main.c:6:
+**  $

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#2188: FILE: drivers/dlm/main.c:23:
+void dlm_unregister_debugfs(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#2189: FILE: drivers/dlm/main.c:24:
+int dlm_node_ioctl_init(void);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#2190: FILE: drivers/dlm/main.c:25:
+void dlm_node_ioctl_exit(void);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2220: FILE: drivers/dlm/main.c:55:
+	printk("DLM (built %s %s) installed\n", __DATE__, __TIME__);

ERROR:DATE_TIME: Use of the '__DATE__' macro makes the build non-deterministic
#2220: FILE: drivers/dlm/main.c:55:
+	printk("DLM (built %s %s) installed\n", __DATE__, __TIME__);

It is generally desirable that building the same source code with
the same set of tools is reproducible, i.e. the output is always
exactly the same.

The kernel does *not* use the ``__DATE__`` and ``__TIME__`` macros,
and enables warnings if they are used as they can lead to
non-deterministic builds.

See: https://www.kernel.org/doc/html/latest/kbuild/reproducible-builds.html#timestamps

ERROR:DATE_TIME: Use of the '__TIME__' macro makes the build non-deterministic
#2220: FILE: drivers/dlm/main.c:55:
+	printk("DLM (built %s %s) installed\n", __DATE__, __TIME__);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2255: FILE: drivers/dlm/main.c:90:
+EXPORT_SYMBOL(dlm_new_lockspace);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2256: FILE: drivers/dlm/main.c:91:
+EXPORT_SYMBOL(dlm_release_lockspace);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2257: FILE: drivers/dlm/main.c:92:
+EXPORT_SYMBOL(dlm_lock);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2258: FILE: drivers/dlm/main.c:93:
+EXPORT_SYMBOL(dlm_unlock);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2262: FILE: drivers/dlm/memory.c:1:
+/******************************************************************************

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#2263: FILE: drivers/dlm/memory.c:2:
+/******************************************************************************
+*******************************************************************************

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2267: FILE: drivers/dlm/memory.c:6:
+**  $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2281: FILE: drivers/dlm/memory.c:20:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2287: FILE: drivers/dlm/memory.c:26:
+	lkb_cache = kmem_cache_create("dlm_lkb", sizeof(struct dlm_lkb),
+				__alignof__(struct dlm_lkb), 0, NULL, NULL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2292: FILE: drivers/dlm/memory.c:31:
+	lvb_cache = kmem_cache_create("dlm_lvb", DLM_LVB_LEN,
+				__alignof__(uint64_t), 0, NULL, NULL);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#2330: FILE: drivers/dlm/memory.c:69:
+	uint64_t *p;

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2334: FILE: drivers/dlm/memory.c:73:
+		memset(p, 0, 4*sizeof(uint64_t));
 		              ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2344: FILE: drivers/dlm/memory.c:83:
+/* FIXME: have some minimal space built-in to rsb for the name and
+   kmalloc a separate name if needed, like dentries are done */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2344: FILE: drivers/dlm/memory.c:83:
+   kmalloc a separate name if needed, like dentries are done */

ERROR:SPACING: space required after that ',' (ctx:VxB)
#2350: FILE: drivers/dlm/memory.c:89:
+	DLM_ASSERT(namelen <= DLM_RESNAME_MAXLEN,);
 	                                        ^

ERROR:SPACING: space required after that ',' (ctx:VxB)
#2384: FILE: drivers/dlm/memory.c:123:
+	DLM_ASSERT(namelen <= DLM_RESNAME_MAXLEN,);
 	                                        ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2400: FILE: drivers/dlm/memory.h:1:
+/******************************************************************************

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#2401: FILE: drivers/dlm/memory.h:2:
+/******************************************************************************
+*******************************************************************************

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2405: FILE: drivers/dlm/memory.h:6:
+**  $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2433: FILE: drivers/dlm/util.c:1:
+/******************************************************************************

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#2434: FILE: drivers/dlm/util.c:2:
+/******************************************************************************
+*******************************************************************************

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2437: FILE: drivers/dlm/util.c:5:
+**  $

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2465: FILE: drivers/dlm/util.c:33:
+	uint32_t h = hash;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2477: FILE: drivers/dlm/util.c:45:
+	uint32_t h = 0x811C9DC5;

WARNING:LINE_SPACING: Missing a blank line after declarations
#2478: FILE: drivers/dlm/util.c:46:
+	uint32_t h = 0x811C9DC5;
+	h = hash_more_internal(data, len, h);

CHECK:SPACING: No space is necessary after a cast
#2500: FILE: drivers/dlm/util.c:68:
+	struct dlm_header *hd = (struct dlm_header *) ms;

CHECK:SPACING: No space is necessary after a cast
#2529: FILE: drivers/dlm/util.c:97:
+	struct dlm_header *hd = (struct dlm_header *) ms;

CHECK:SPACING: No space is necessary after a cast
#2596: FILE: drivers/dlm/util.c:164:
+	struct dlm_header *hd = (struct dlm_header *) rc;

CHECK:SPACING: No space is necessary after a cast
#2606: FILE: drivers/dlm/util.c:174:
+		rcom_lock_out((struct rcom_lock *) rc->rc_buf);

CHECK:SPACING: No space is necessary after a cast
#2611: FILE: drivers/dlm/util.c:179:
+	struct dlm_header *hd = (struct dlm_header *) rc;

CHECK:SPACING: No space is necessary after a cast
#2620: FILE: drivers/dlm/util.c:188:
+		rcom_lock_in((struct rcom_lock *) rc->rc_buf);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2626: FILE: drivers/dlm/util.h:1:
+/******************************************************************************

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#2627: FILE: drivers/dlm/util.h:2:
+/******************************************************************************
+*******************************************************************************

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2630: FILE: drivers/dlm/util.h:5:
+**  $

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000188050.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 63 errors, 96 warnings, 103 checks, 2547 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000188050.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
