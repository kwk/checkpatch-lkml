WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#49: 
At swapon time (for an S_ISREG swapfile), each block in the file is bmapped()

WARNING:TYPO_SPELLING: 'discontiguities' may be misspelled - perhaps 'discontinuities'?
#94: 
discontiguities) are simply discarded - we never swap to those.
^^^^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#204: FILE: fs/buffer.c:1364:
+	BUG_ON(!PageLocked(page));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#369: FILE: include/linux/swap.h:194:
+struct swap_info_struct *get_swap_info_struct(unsigned type);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#496: FILE: mm/page_io.c:24:
+swap_get_block(struct inode *inode, sector_t iblock,
+		struct buffer_head *bh_result, int create)

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#542: FILE: mm/page_io.c:62:
+	const int uptodate = test_bit(BIO_UPTODATE, &bio->bi_flags);
 	          ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#545: FILE: mm/page_io.c:65:
+	if (!uptodate)
 	     ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#553: FILE: mm/page_io.c:73:
+	const int uptodate = test_bit(BIO_UPTODATE, &bio->bi_flags);
 	          ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#556: FILE: mm/page_io.c:76:
+	if (!uptodate) {
 	     ^^^^^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bio"
#626: FILE: mm/page_io.c:100:
+	if (bio == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bio"
#645: FILE: mm/page_io.c:119:
+	if (bio == NULL) {

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#654: FILE: mm/page_io.c:128:
+}
+/*

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONST_STRUCT: struct address_space_operations should normally be const
#669: FILE: mm/page_io.c:143:
+struct address_space_operations swap_aops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:INDENTED_LABEL: labels should not be indented
#670: FILE: mm/page_io.c:144:
+	vm_writeback:	swap_vm_writeback,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#671: FILE: mm/page_io.c:145:
+	writepage:	swap_writepage,
 	         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:INDENTED_LABEL: labels should not be indented
#671: FILE: mm/page_io.c:145:
+	writepage:	swap_writepage,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#672: FILE: mm/page_io.c:146:
+	readpage:	swap_readpage,
 	        ^

WARNING:INDENTED_LABEL: labels should not be indented
#672: FILE: mm/page_io.c:146:
+	readpage:	swap_readpage,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#673: FILE: mm/page_io.c:147:
+	sync_page:	block_sync_page,
 	         ^

WARNING:INDENTED_LABEL: labels should not be indented
#673: FILE: mm/page_io.c:147:
+	sync_page:	block_sync_page,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#674: FILE: mm/page_io.c:148:
+	set_page_dirty:	__set_page_dirty_nobuffers,
 	              ^

WARNING:INDENTED_LABEL: labels should not be indented
#674: FILE: mm/page_io.c:148:
+	set_page_dirty:	__set_page_dirty_nobuffers,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#698: FILE: mm/page_io.c:161:
+	BUG_ON(page->mapping);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#736: FILE: mm/swapfile.c:297:
+	BUG_ON(page_has_buffers(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#737: FILE: mm/swapfile.c:298:
+	BUG_ON(!PageLocked(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#777: FILE: mm/swapfile.c:352:
+		BUG_ON(page_has_buffers(page));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#810: FILE: mm/swapfile.c:735:
+		if (se->start_page <= offset &&
+				offset < (se->start_page + se->nr_pages)) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#818: FILE: mm/swapfile.c:743:
+		BUG_ON(se == start_se);		/* It *must* be present */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!new_se"
#868: FILE: mm/swapfile.c:793:
+	if (new_se == NULL)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#916: FILE: mm/swapfile.c:841:
+	unsigned blocks_per_page;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#918: FILE: mm/swapfile.c:843:
+	unsigned blkbits;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#940: FILE: mm/swapfile.c:865:
+	while ((probe_block + blocks_per_page) <= last_block &&
+			page_no < sis->max) {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#941: FILE: mm/swapfile.c:866:
+		unsigned block_in_page;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#974: FILE: mm/swapfile.c:899:
+		ret = add_swap_extent(sis, page_no, 1,
+				first_block >> (PAGE_SHIFT - blkbits));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#989: FILE: mm/swapfile.c:914:
+	sis->curr_swap_extent = list_entry(sis->extent_list.prev,
+					struct swap_extent, list);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#992: FILE: mm/swapfile.c:917:
+	printk(KERN_ERR "swapon: swapfile has holes\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1107: FILE: mm/swapfile.c:1158:
+	page = read_cache_page(mapping, 0,
+			(filler_t *)mapping->a_ops->readpage, swap_file);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1154: FILE: mm/swapfile.c:1181:
+		printk(KERN_ERR "version 0 swap is no longer supported. "

WARNING:SPLIT_STRING: quoted string split across lines
#1155: FILE: mm/swapfile.c:1182:
+		printk(KERN_ERR "version 0 swap is no longer supported. "
+			"Use mkswap -v1 %s\n", name);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1180: FILE: mm/swapfile.c:1251:
+	printk(KERN_INFO "Adding %dk swap on %s.  Priority:%d extents:%d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1181: FILE: mm/swapfile.c:1252:
+	printk(KERN_INFO "Adding %dk swap on %s.  Priority:%d extents:%d\n",
+		nr_good_pages<<(PAGE_SHIFT-10), name,

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1181: FILE: mm/swapfile.c:1252:
+		nr_good_pages<<(PAGE_SHIFT-10), name,
 		             ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1181: FILE: mm/swapfile.c:1252:
+		nr_good_pages<<(PAGE_SHIFT-10), name,
 		                          ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1259: FILE: mm/swapfile.c:1368:
+get_swap_info_struct(unsigned type)

WARNING:INDENTED_LABEL: labels should not be indented
#1348: FILE: mm/swap_state.c:31:
+	i_mapping:	&swapper_space,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1349: FILE: mm/swap_state.c:32:
+	i_size:		PAGE_SIZE * 0xffffffffLL,
 	      ^

WARNING:INDENTED_LABEL: labels should not be indented
#1349: FILE: mm/swap_state.c:32:
+	i_size:		PAGE_SIZE * 0xffffffffLL,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1350: FILE: mm/swap_state.c:33:
+	i_blkbits:	PAGE_SHIFT,
 	         ^

WARNING:INDENTED_LABEL: labels should not be indented
#1350: FILE: mm/swap_state.c:33:
+	i_blkbits:	PAGE_SHIFT,

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1353: FILE: mm/swap_state.c:36:
+extern struct address_space_operations swap_aops;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:CONST_STRUCT: struct address_space_operations should normally be const
#1353: FILE: mm/swap_state.c:36:
+extern struct address_space_operations swap_aops;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1370: FILE: mm/swap_state.c:127:
+	BUG_ON(page_has_buffers(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1388: FILE: mm/swap_state.c:195:
+	BUG_ON(page_has_buffers(page));

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000454950.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 6 errors, 34 warnings, 13 checks, 1168 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000454950.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
