CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#28: 
From: Christian Bornträger <cborntra@de.ibm.com>
                      ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#202: FILE: arch/s390/kernel/debug.c:699:
+extern inline void debug_finish_entry(debug_info_t * id, debug_entry_t* active,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#202: FILE: arch/s390/kernel/debug.c:699:
+extern inline void debug_finish_entry(debug_info_t * id, debug_entry_t* active,

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#202: FILE: arch/s390/kernel/debug.c:699:
+extern inline void debug_finish_entry(debug_info_t * id, debug_entry_t* active,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#203: FILE: arch/s390/kernel/debug.c:700:
+extern inline void debug_finish_entry(debug_info_t * id, debug_entry_t* active,
+		int level, int exception)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#271: FILE: arch/s390/kernel/debug.c:777:
+	int numargs,idx;
 	           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#294: FILE: arch/s390/kernel/debug.c:785:
+	numargs=debug_count_numargs(string);
 	       ^

CHECK:SPACING: No space is necessary after a cast
#298: FILE: arch/s390/kernel/debug.c:789:
+	curr_event=(debug_sprintf_entry_t *) DEBUG_DATA(active);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#298: FILE: arch/s390/kernel/debug.c:789:
+	curr_event=(debug_sprintf_entry_t *) DEBUG_DATA(active);
 	          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#299: FILE: arch/s390/kernel/debug.c:790:
+	va_start(ap,string);
 	           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#300: FILE: arch/s390/kernel/debug.c:791:
+	curr_event->string=string;
 	                  ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#301: FILE: arch/s390/kernel/debug.c:792:
+	for(idx=0;idx<MIN(numargs,((id->buf_size / sizeof(long))-1));idx++)
 	       ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#301: FILE: arch/s390/kernel/debug.c:792:
+	for(idx=0;idx<MIN(numargs,((id->buf_size / sizeof(long))-1));idx++)
 	         ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#301: FILE: arch/s390/kernel/debug.c:792:
+	for(idx=0;idx<MIN(numargs,((id->buf_size / sizeof(long))-1));idx++)
 	             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#301: FILE: arch/s390/kernel/debug.c:792:
+	for(idx=0;idx<MIN(numargs,((id->buf_size / sizeof(long))-1));idx++)
 	                         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#301: FILE: arch/s390/kernel/debug.c:792:
+	for(idx=0;idx<MIN(numargs,((id->buf_size / sizeof(long))-1));idx++)
 	                                                        ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#301: FILE: arch/s390/kernel/debug.c:792:
+	for(idx=0;idx<MIN(numargs,((id->buf_size / sizeof(long))-1));idx++)
 	                                                            ^

ERROR:SPACING: space required before the open parenthesis '('
#301: FILE: arch/s390/kernel/debug.c:792:
+	for(idx=0;idx<MIN(numargs,((id->buf_size / sizeof(long))-1));idx++)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#302: FILE: arch/s390/kernel/debug.c:793:
+		curr_event->args[idx]=va_arg(ap,long);
 		                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#302: FILE: arch/s390/kernel/debug.c:793:
+		curr_event->args[idx]=va_arg(ap,long);
 		                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#318: FILE: arch/s390/kernel/debug.c:809:
+	int numargs,idx;
 	           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#341: FILE: arch/s390/kernel/debug.c:817:
+	numargs=debug_count_numargs(string);
 	       ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#345: FILE: arch/s390/kernel/debug.c:821:
+	curr_event=(debug_sprintf_entry_t *)DEBUG_DATA(active);
 	          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#346: FILE: arch/s390/kernel/debug.c:822:
+	va_start(ap,string);
 	           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#347: FILE: arch/s390/kernel/debug.c:823:
+	curr_event->string=string;
 	                  ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#348: FILE: arch/s390/kernel/debug.c:824:
+	for(idx=0;idx<MIN(numargs,((id->buf_size / sizeof(long))-1));idx++)
 	       ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#348: FILE: arch/s390/kernel/debug.c:824:
+	for(idx=0;idx<MIN(numargs,((id->buf_size / sizeof(long))-1));idx++)
 	         ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#348: FILE: arch/s390/kernel/debug.c:824:
+	for(idx=0;idx<MIN(numargs,((id->buf_size / sizeof(long))-1));idx++)
 	             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#348: FILE: arch/s390/kernel/debug.c:824:
+	for(idx=0;idx<MIN(numargs,((id->buf_size / sizeof(long))-1));idx++)
 	                         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#348: FILE: arch/s390/kernel/debug.c:824:
+	for(idx=0;idx<MIN(numargs,((id->buf_size / sizeof(long))-1));idx++)
 	                                                        ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#348: FILE: arch/s390/kernel/debug.c:824:
+	for(idx=0;idx<MIN(numargs,((id->buf_size / sizeof(long))-1));idx++)
 	                                                            ^

ERROR:SPACING: space required before the open parenthesis '('
#348: FILE: arch/s390/kernel/debug.c:824:
+	for(idx=0;idx<MIN(numargs,((id->buf_size / sizeof(long))-1));idx++)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#349: FILE: arch/s390/kernel/debug.c:825:
+		curr_event->args[idx]=va_arg(ap,long);
 		                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#349: FILE: arch/s390/kernel/debug.c:825:
+		curr_event->args[idx]=va_arg(ap,long);
 		                               ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#363: FILE: arch/s390/kernel/debug.c:1142:
+                            char *out_buf, debug_sprintf_entry_t *curr_event)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#363: FILE: arch/s390/kernel/debug.c:1142:
+                            char *out_buf, debug_sprintf_entry_t *curr_event)$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#462: FILE: include/asm-s390/percpu.h:18:
+#define __reloc_hide(var,offset) \
                         ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#471: FILE: include/asm-s390/percpu.h:20:
+       asm ( "larl %0,per_cpu__"#var"@GOTENT" \$

ERROR:SPACING: space prohibited after that open parenthesis '('
#471: FILE: include/asm-s390/percpu.h:20:
+       asm ( "larl %0,per_cpu__"#var"@GOTENT" \

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#471: FILE: include/asm-s390/percpu.h:20:
+       asm ( "larl %0,per_cpu__"#var"@GOTENT" \

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

ERROR:CODE_INDENT: code indent should use tabs where possible
#472: FILE: include/asm-s390/percpu.h:21:
+             : "=a" (__ptr) : "X" (per_cpu__##var) ); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#472: FILE: include/asm-s390/percpu.h:21:
+             : "=a" (__ptr) : "X" (per_cpu__##var) ); \$

ERROR:SPACING: space prohibited before that close parenthesis ')'
#472: FILE: include/asm-s390/percpu.h:21:
+             : "=a" (__ptr) : "X" (per_cpu__##var) ); \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#473: FILE: include/asm-s390/percpu.h:22:
+       (typeof(&per_cpu__##var))((*__ptr) + (offset)); }))$

CHECK:SPACING: spaces preferred around that '&' (ctx:BxV)
#473: FILE: include/asm-s390/percpu.h:22:
+       (typeof(&per_cpu__##var))((*__ptr) + (offset)); }))
                ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#480: FILE: include/asm-s390/percpu.h:27:
+  (*({ unsigned long __ptr; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#481: FILE: include/asm-s390/percpu.h:28:
+       asm ( "" : "=a" (__ptr) : "0" (&per_cpu__##var) ); \$

ERROR:SPACING: space prohibited after that open parenthesis '('
#481: FILE: include/asm-s390/percpu.h:28:
+       asm ( "" : "=a" (__ptr) : "0" (&per_cpu__##var) ); \

ERROR:SPACING: space prohibited before that close parenthesis ')'
#481: FILE: include/asm-s390/percpu.h:28:
+       asm ( "" : "=a" (__ptr) : "0" (&per_cpu__##var) ); \

CHECK:SPACING: No space is necessary after a cast
#482: FILE: include/asm-s390/percpu.h:29:
+       (typeof(&per_cpu__##var)) (__ptr + (offset)); }))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#482: FILE: include/asm-s390/percpu.h:29:
+       (typeof(&per_cpu__##var)) (__ptr + (offset)); }))$

CHECK:SPACING: spaces preferred around that '&' (ctx:BxV)
#482: FILE: include/asm-s390/percpu.h:29:
+       (typeof(&per_cpu__##var)) (__ptr + (offset)); }))
                ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#491: FILE: include/asm-s390/percpu.h:38:
+#define DEFINE_PER_CPU(type, name) \
+    __attribute__((__section__(".data.percpu"))) \
+    __typeof__(type) per_cpu__##name

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#492: FILE: include/asm-s390/percpu.h:39:
+    __attribute__((__section__(".data.percpu"))) \$

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".data.percpu") over __attribute__((__section__(".data.percpu")))
#492: FILE: include/asm-s390/percpu.h:39:
+    __attribute__((__section__(".data.percpu"))) \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#493: FILE: include/asm-s390/percpu.h:40:
+    __typeof__(type) per_cpu__##name$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#495: FILE: include/asm-s390/percpu.h:42:
+#define __get_cpu_var(var) __reloc_hide(var,S390_lowcore.percpu_offset)
                                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#496: FILE: include/asm-s390/percpu.h:43:
+#define per_cpu(var,cpu) __reloc_hide(var,__per_cpu_offset[cpu])
                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#496: FILE: include/asm-s390/percpu.h:43:
+#define per_cpu(var,cpu) __reloc_hide(var,__per_cpu_offset[cpu])
                                          ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#502: FILE: include/asm-s390/percpu.h:49:
+	for (__i = 0; __i < NR_CPUS; __i++)			\

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#504: FILE: include/asm-s390/percpu.h:51:
+			memcpy((pcpudst)+__per_cpu_offset[__i],	\
 			                ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#510: FILE: include/asm-s390/percpu.h:57:
+#define DEFINE_PER_CPU(type, name) \
+    __typeof__(type) per_cpu__##name

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#511: FILE: include/asm-s390/percpu.h:58:
+    __typeof__(type) per_cpu__##name$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#513: FILE: include/asm-s390/percpu.h:60:
+#define __get_cpu_var(var) __reloc_hide(var,0)
                                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#514: FILE: include/asm-s390/percpu.h:61:
+#define per_cpu(var,cpu) __reloc_hide(var,0)
                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#514: FILE: include/asm-s390/percpu.h:61:
+#define per_cpu(var,cpu) __reloc_hide(var,0)
                                          ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#518: FILE: include/asm-s390/percpu.h:65:
+#define DECLARE_PER_CPU(type, name) extern __typeof__(type) per_cpu__##name

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#520: FILE: include/asm-s390/percpu.h:67:
+#define EXPORT_PER_CPU_SYMBOL(var) EXPORT_SYMBOL(per_cpu__##var)

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#521: FILE: include/asm-s390/percpu.h:68:
+#define EXPORT_PER_CPU_SYMBOL_GPL(var) EXPORT_SYMBOL_GPL(per_cpu__##var)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000270980.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 44 errors, 15 warnings, 10 checks, 430 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000270980.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
