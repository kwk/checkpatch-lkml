WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#26: 
Signed-Off-By: dhowells@redhat.com

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#71: FILE: include/asm-frv/registers.h:1:
+/* registers.h: register frame declarations

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#116: FILE: include/asm-frv/registers.h:46:
+ *^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#125: FILE: include/asm-frv/registers.h:55:
+#define __OFFSETC(X,N)	xxxxxxxxxxxxxxxxxxxxxxxx
                    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#127: FILE: include/asm-frv/registers.h:57:
+#define __OFFSET(X)	((X)*4)
                    	    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#128: FILE: include/asm-frv/registers.h:58:
+#define __OFFSETC(X,N)	((X)*4+(N))
                    ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#128: FILE: include/asm-frv/registers.h:58:
+#define __OFFSETC(X,N)	((X)*4+(N))
                       	    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#128: FILE: include/asm-frv/registers.h:58:
+#define __OFFSETC(X,N)	((X)*4+(N))
                       	      ^

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(8) over __attribute__((aligned(8)))
#186: FILE: include/asm-frv/registers.h:116:
+} __attribute__((aligned(8)));

ERROR:SPACING: space prohibited after that open parenthesis '('
#190: FILE: include/asm-frv/registers.h:120:
+#define REG_PSR		__OFFSET( 0)	/* Processor Status Register */

ERROR:SPACING: space prohibited after that open parenthesis '('
#191: FILE: include/asm-frv/registers.h:121:
+#define REG_ISR		__OFFSET( 1)	/* Integer Status Register */

ERROR:SPACING: space prohibited after that open parenthesis '('
#192: FILE: include/asm-frv/registers.h:122:
+#define REG_CCR		__OFFSET( 2)	/* Condition Code Register */

ERROR:SPACING: space prohibited after that open parenthesis '('
#193: FILE: include/asm-frv/registers.h:123:
+#define REG_CCCR	__OFFSET( 3)	/* Condition Code for Conditional Insns Register */

ERROR:SPACING: space prohibited after that open parenthesis '('
#194: FILE: include/asm-frv/registers.h:124:
+#define REG_LR		__OFFSET( 4)	/* Link Register */

ERROR:SPACING: space prohibited after that open parenthesis '('
#195: FILE: include/asm-frv/registers.h:125:
+#define REG_LCR		__OFFSET( 5)	/* Loop Count Register */

ERROR:SPACING: space prohibited after that open parenthesis '('
#196: FILE: include/asm-frv/registers.h:126:
+#define REG_PC		__OFFSET( 6)	/* Program Counter */

ERROR:SPACING: space prohibited after that open parenthesis '('
#198: FILE: include/asm-frv/registers.h:128:
+#define REG__STATUS	__OFFSET( 7)	/* exception status */

WARNING:TYPO_SPELLING: 'reenable' may be misspelled - perhaps 're-enable'?
#199: FILE: include/asm-frv/registers.h:129:
+#define REG__STATUS_STEP	0x00000001	/* - reenable single stepping on return */
                         	          	     ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:SPACING: space prohibited after that open parenthesis '('
#205: FILE: include/asm-frv/registers.h:135:
+#define REG_SYSCALLNO	__OFFSET( 8)	/* syscall number or -1 */

ERROR:SPACING: space prohibited after that open parenthesis '('
#206: FILE: include/asm-frv/registers.h:136:
+#define REG_ORIG_GR8	__OFFSET( 9)	/* saved GR8 for signal handling */

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#212: FILE: include/asm-frv/registers.h:142:
+#define REG_GR(R)	__OFFSET((14+(R)))
                  	            ^

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#227: FILE: include/asm-frv/registers.h:157:
+struct pt_debug_regs
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(8) over __attribute__((aligned(8)))
#233: FILE: include/asm-frv/registers.h:163:
+} __attribute__((aligned(8)));

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#250: FILE: include/asm-frv/registers.h:180:
+struct user_int_regs
+{

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#275: FILE: include/asm-frv/registers.h:205:
+struct user_fpmedia_regs
+{

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#286: FILE: include/asm-frv/registers.h:216:
+struct user_context
+{

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(8) over __attribute__((aligned(8)))
#294: FILE: include/asm-frv/registers.h:224:
+} __attribute__((aligned(8)));

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#299: FILE: include/asm-frv/registers.h:229:
+#define NR_USER_FPMEDIA_REGS	(64 + 2 + 2 + 8 + 8/4 + 1)
                             	                   ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#330: FILE: include/asm-frv/resource.h:1:
+#ifndef _ASM_RESOURCE_H

CHECK:LINE_SPACING: Please don't use multiple blank lines
#353: FILE: include/asm-frv/resource.h:24:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#374: FILE: include/asm-frv/resource.h:45:
+        { RLIM_INFINITY, RLIM_INFINITY },^I^I\$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#374: FILE: include/asm-frv/resource.h:45:
+        { RLIM_INFINITY, RLIM_INFINITY },^I^I\$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#387: FILE: include/asm-frv/scatterlist.h:1:
+#ifndef _ASM_SCATTERLIST_H

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#423: FILE: include/asm-frv/sections.h:1:
+/* sections.h: linkage layout variables

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".data") over __attribute__((section(".data")))
#448: FILE: include/asm-frv/sections.h:26:
+#define __nongpreldata	__attribute__((section(".data")))

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".bss") over __attribute__((section(".bss")))
#449: FILE: include/asm-frv/sections.h:27:
+#define __nongprelbss	__attribute__((section(".bss")))

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#473: FILE: include/asm-frv/segment.h:1:
+/* segment.h: MMU segment settings

WARNING:NEW_TYPEDEFS: do not add new typedefs
#491: FILE: include/asm-frv/segment.h:19:
+typedef struct {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#507: FILE: include/asm-frv/segment.h:35:
+#define segment_eq(a,b)		((a).seg == (b).seg)
                     ^

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#511: FILE: include/asm-frv/segment.h:39:
+#define set_fs(_x)					\
+do {							\
+	__current_thread_info->addr_limit = (_x);	\
+} while(0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

ERROR:SPACING: space required before the open parenthesis '('
#514: FILE: include/asm-frv/segment.h:42:
+} while(0)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#516: FILE: include/asm-frv/segment.h:44:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#523: FILE: include/asm-frv/semaphore.h:1:
+/* semaphore.h: semaphores for the FR-V

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#554: FILE: include/asm-frv/semaphore.h:32:
+	unsigned		counter;

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#555: FILE: include/asm-frv/semaphore.h:33:
+	spinlock_t		wait_lock;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#558: FILE: include/asm-frv/semaphore.h:36:
+	unsigned		__magic;

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#563: FILE: include/asm-frv/semaphore.h:41:
+# define __SEM_DEBUG_INIT(name) , (long)&(name).__magic
                                 ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#563: FILE: include/asm-frv/semaphore.h:41:
+# define __SEM_DEBUG_INIT(name) , (long)&(name).__magic

CHECK:LINE_SPACING: Please don't use multiple blank lines
#568: FILE: include/asm-frv/semaphore.h:46:
+
+

ERROR:SPACING: space required after that ',' (ctx:VxV)
#569: FILE: include/asm-frv/semaphore.h:47:
+#define __SEMAPHORE_INITIALIZER(name,count) \
                                     ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#569: FILE: include/asm-frv/semaphore.h:47:
+#define __SEMAPHORE_INITIALIZER(name,count) \
+{ count, SPIN_LOCK_UNLOCKED, LIST_HEAD_INIT((name).wait_list) __SEM_DEBUG_INIT(name) }

ERROR:SPACING: space required after that ',' (ctx:VxV)
#573: FILE: include/asm-frv/semaphore.h:51:
+	__SEMAPHORE_INITIALIZER(name,1)
 	                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#575: FILE: include/asm-frv/semaphore.h:53:
+#define __DECLARE_SEMAPHORE_GENERIC(name,count) \
                                         ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#575: FILE: include/asm-frv/semaphore.h:53:
+#define __DECLARE_SEMAPHORE_GENERIC(name,count) \
+	struct semaphore name = __SEMAPHORE_INITIALIZER(name,count)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#576: FILE: include/asm-frv/semaphore.h:54:
+	struct semaphore name = __SEMAPHORE_INITIALIZER(name,count)
 	                                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#578: FILE: include/asm-frv/semaphore.h:56:
+#define DECLARE_MUTEX(name) __DECLARE_SEMAPHORE_GENERIC(name,1)
                                                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#579: FILE: include/asm-frv/semaphore.h:57:
+#define DECLARE_MUTEX_LOCKED(name) __DECLARE_SEMAPHORE_GENERIC(name,0)
                                                                    ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#581: FILE: include/asm-frv/semaphore.h:59:
+static inline void sema_init (struct semaphore *sem, int val)

CHECK:SPACING: No space is necessary after a cast
#583: FILE: include/asm-frv/semaphore.h:61:
+	*sem = (struct semaphore) __SEMAPHORE_INITIALIZER(*sem, val);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#586: FILE: include/asm-frv/semaphore.h:64:
+static inline void init_MUTEX (struct semaphore *sem)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#591: FILE: include/asm-frv/semaphore.h:69:
+static inline void init_MUTEX_LOCKED (struct semaphore *sem)

WARNING:CONSIDER_COMPLETION: consider using a completion
#593: FILE: include/asm-frv/semaphore.h:71:
+	sema_init(sem, 0);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#596: FILE: include/asm-frv/semaphore.h:74:
+extern void __down(struct semaphore *sem, unsigned long flags);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#597: FILE: include/asm-frv/semaphore.h:75:
+extern int  __down_interruptible(struct semaphore *sem, unsigned long flags);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#598: FILE: include/asm-frv/semaphore.h:76:
+extern void __up(struct semaphore *sem);

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#613: FILE: include/asm-frv/semaphore.h:91:
+	}
+	else {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#613: FILE: include/asm-frv/semaphore.h:91:
+	else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#632: FILE: include/asm-frv/semaphore.h:110:
+	}
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#632: FILE: include/asm-frv/semaphore.h:110:
+	else {

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#688: FILE: include/asm-frv/sembuf.h:1:
+#ifndef _ASM_SEMBUF_H

ERROR:TRAILING_WHITESPACE: trailing whitespace
#691: FILE: include/asm-frv/sembuf.h:4:
+/* $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#718: FILE: include/asm-frv/serial.h:1:
+/*

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#741: FILE: include/asm-frv/serial-regs.h:1:
+/* serial-regs.h: serial port registers

ERROR:SPACING: space required after that ',' (ctx:VxV)
#764: FILE: include/asm-frv/serial-regs.h:24:
+#define __set_UART0(R,V) do { __reg(UART0_BASE + (R) * 8) = (V) << 24; } while(0)
                      ^

ERROR:SPACING: space required before the open parenthesis '('
#764: FILE: include/asm-frv/serial-regs.h:24:
+#define __set_UART0(R,V) do { __reg(UART0_BASE + (R) * 8) = (V) << 24; } while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#764: FILE: include/asm-frv/serial-regs.h:24:
+#define __set_UART0(R,V) do { __reg(UART0_BASE + (R) * 8) = (V) << 24; } while(0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#765: FILE: include/asm-frv/serial-regs.h:25:
+#define __set_UART1(R,V) do { __reg(UART1_BASE + (R) * 8) = (V) << 24; } while(0)
                      ^

ERROR:SPACING: space required before the open parenthesis '('
#765: FILE: include/asm-frv/serial-regs.h:25:
+#define __set_UART1(R,V) do { __reg(UART1_BASE + (R) * 8) = (V) << 24; } while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#765: FILE: include/asm-frv/serial-regs.h:25:
+#define __set_UART1(R,V) do { __reg(UART1_BASE + (R) * 8) = (V) << 24; } while(0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#770: FILE: include/asm-frv/serial-regs.h:30:
+#define __set_UART0_IER(V) __set_UART0(UART_IER,(V))
                                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#771: FILE: include/asm-frv/serial-regs.h:31:
+#define __set_UART1_IER(V) __set_UART1(UART_IER,(V))
                                                ^

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#774: FILE: include/asm-frv/serial-regs.h:34:
+#define __get_UCPSR()	({ *(volatile unsigned long *)(0xfeff9c90); })

ERROR:SPACING: space required before the open parenthesis '('
#775: FILE: include/asm-frv/serial-regs.h:35:
+#define __set_UCPSR(V)	do { *(volatile unsigned long *)(0xfeff9c90) = (V); } while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#775: FILE: include/asm-frv/serial-regs.h:35:
+#define __set_UCPSR(V)	do { *(volatile unsigned long *)(0xfeff9c90) = (V); } while(0)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#775: FILE: include/asm-frv/serial-regs.h:35:
+#define __set_UCPSR(V)	do { *(volatile unsigned long *)(0xfeff9c90) = (V); } while(0)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#780: FILE: include/asm-frv/serial-regs.h:40:
+#define __get_UCPVR()	({ *(volatile unsigned long *)(0xfeff9c98); mb(); })

ERROR:SPACING: space required before the open parenthesis '('
#781: FILE: include/asm-frv/serial-regs.h:41:
+#define __set_UCPVR(V)	do { *(volatile unsigned long *)(0xfeff9c98) = (V) << 24; mb(); } while(0)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#781: FILE: include/asm-frv/serial-regs.h:41:
+#define __set_UCPVR(V)	do { *(volatile unsigned long *)(0xfeff9c98) = (V) << 24; mb(); } while(0)

WARNING:MEMORY_BARRIER: memory barrier without comment
#781: FILE: include/asm-frv/serial-regs.h:41:
+#define __set_UCPVR(V)	do { *(volatile unsigned long *)(0xfeff9c98) = (V) << 24; mb(); } while(0)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#783: FILE: include/asm-frv/serial-regs.h:43:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#789: FILE: include/asm-frv/setup.h:1:
+/* setup.h: setup stuff

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#818: FILE: include/asm-frv/shmbuf.h:1:
+#ifndef _ASM_SHMBUF_H

ERROR:TRAILING_WHITESPACE: trailing whitespace
#821: FILE: include/asm-frv/shmbuf.h:4:
+/* $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#865: FILE: include/asm-frv/shmparam.h:1:
+#ifndef _ASM_SHMPARAM_H

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#876: FILE: include/asm-frv/sigcontext.h:1:
+/* sigcontext.h: FRV signal context

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#898: FILE: include/asm-frv/sigcontext.h:23:
+^Iunsigned long^I^Isc_oldmask; ^I/* old sigmask */$

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(8) over __attribute__((aligned(8)))
#899: FILE: include/asm-frv/sigcontext.h:24:
+} __attribute__((aligned(8)));

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#906: FILE: include/asm-frv/siginfo.h:1:
+#ifndef _ASM_SIGINFO_H

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#912: FILE: include/asm-frv/siginfo.h:7:
+#define FPE_MDAOVF	(__SI_FAULT|9)	/* media overflow */
                   	           ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#922: FILE: include/asm-frv/signal.h:1:
+#ifndef _ASM_SIGNAL_H

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#932: FILE: include/asm-frv/signal.h:11:
+/* Most things should be clean enough to redefine this at will, if care
+   is taken to make libc match.  */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#932: FILE: include/asm-frv/signal.h:11:
+   is taken to make libc match.  */

WARNING:NEW_TYPEDEFS: do not add new typedefs
#938: FILE: include/asm-frv/signal.h:17:
+typedef unsigned long old_sigset_t;		/* at least 32 bits */

WARNING:NEW_TYPEDEFS: do not add new typedefs
#940: FILE: include/asm-frv/signal.h:19:
+typedef struct {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#948: FILE: include/asm-frv/signal.h:27:
+typedef unsigned long sigset_t;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#984: FILE: include/asm-frv/signal.h:63:
+/*
+#define SIGLOST		29

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#992: FILE: include/asm-frv/signal.h:71:
+#define SIGRTMAX	(_NSIG-1)
                 	      ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1022: FILE: include/asm-frv/signal.h:101:
+/* $

WARNING:TABSTOP: Statements should start on a tabstop
#1079: FILE: include/asm-frv/signal.h:158:
+	  __sighandler_t _sa_handler;

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1080: FILE: include/asm-frv/signal.h:159:
+	  void (*_sa_sigaction)(int, struct siginfo *, void *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct siginfo *' should also have an identifier name
#1080: FILE: include/asm-frv/signal.h:159:
+	  void (*_sa_sigaction)(int, struct siginfo *, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#1080: FILE: include/asm-frv/signal.h:159:
+	  void (*_sa_sigaction)(int, struct siginfo *, void *);

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1092: FILE: include/asm-frv/signal.h:171:
+typedef struct sigaltstack {

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1098: FILE: include/asm-frv/signal.h:177:
+extern int do_signal(struct pt_regs *regs, sigset_t *oldset);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1113: FILE: include/asm-frv/smp.h:1:
+#ifndef __ASM_SMP_H

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1127: FILE: include/asm-frv/socket.h:1:
+#ifndef _ASM_SOCKET_H

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1182: FILE: include/asm-frv/sockios.h:1:
+#ifndef _ASM_SOCKIOS__

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1186: FILE: include/asm-frv/sockios.h:5:
+#define FIOSETOWN ^I0x8901$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1199: FILE: include/asm-frv/spinlock.h:1:
+/* spinlock.h: spinlocks for FR-V

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1220: FILE: include/asm-frv/spr-regs.h:1:
+/* spr-regs.h: special-purpose registers on the FRV

ERROR:SPACING: space required before the open parenthesis '('
#1278: FILE: include/asm-frv/spr-regs.h:59:
+#define __set_PSR(V)	do { asm volatile("movgs %0,psr" : : "r"(V)); } while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#1278: FILE: include/asm-frv/spr-regs.h:59:
+#define __set_PSR(V)	do { asm volatile("movgs %0,psr" : : "r"(V)); } while(0)

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#1362: FILE: include/asm-frv/spr-regs.h:143:
+#define __get_HSR(R)	({ unsigned long x; asm volatile("movsg hsr"#R",%0" : "=r"(x)); x; })

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1363: FILE: include/asm-frv/spr-regs.h:144:
+#define __set_HSR(R,V)	do { asm volatile("movgs %0,hsr"#R : : "r"(V)); } while(0)
                    ^

ERROR:SPACING: space required before the open parenthesis '('
#1363: FILE: include/asm-frv/spr-regs.h:144:
+#define __set_HSR(R,V)	do { asm volatile("movgs %0,hsr"#R : : "r"(V)); } while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#1363: FILE: include/asm-frv/spr-regs.h:144:
+#define __set_HSR(R,V)	do { asm volatile("movgs %0,hsr"#R : : "r"(V)); } while(0)

CHECK:CAMELCASE: Avoid CamelCase: <ESRx_VALID>
#1419: FILE: include/asm-frv/spr-regs.h:200:
+#define ESRx_VALID		0x00000001	/* register content validity indicator */

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <ESRx_EC>
#1420: FILE: include/asm-frv/spr-regs.h:201:
+#define ESRx_EC			0x0000003e	/* exception type */

CHECK:CAMELCASE: Avoid CamelCase: <ESRx_EC_DATA_STORE>
#1421: FILE: include/asm-frv/spr-regs.h:202:
+#define ESRx_EC_DATA_STORE	0x00000000	/* - data_store_error */

CHECK:CAMELCASE: Avoid CamelCase: <ESRx_EC_INSN_ACCESS>
#1422: FILE: include/asm-frv/spr-regs.h:203:
+#define ESRx_EC_INSN_ACCESS	0x00000006	/* - instruction_access_error */

CHECK:CAMELCASE: Avoid CamelCase: <ESRx_EC_PRIV_INSN>
#1423: FILE: include/asm-frv/spr-regs.h:204:
+#define ESRx_EC_PRIV_INSN	0x00000008	/* - privileged_instruction */

CHECK:CAMELCASE: Avoid CamelCase: <ESRx_EC_ILL_INSN>
#1424: FILE: include/asm-frv/spr-regs.h:205:
+#define ESRx_EC_ILL_INSN	0x0000000a	/* - illegal_instruction */

CHECK:CAMELCASE: Avoid CamelCase: <ESRx_EC_MP_EXCEP>
#1425: FILE: include/asm-frv/spr-regs.h:206:
+#define ESRx_EC_MP_EXCEP	0x0000001c	/* - mp_exception */

CHECK:CAMELCASE: Avoid CamelCase: <ESRx_EC_DATA_ACCESS>
#1426: FILE: include/asm-frv/spr-regs.h:207:
+#define ESRx_EC_DATA_ACCESS	0x00000024	/* - data_access_error */

CHECK:CAMELCASE: Avoid CamelCase: <ESRx_EC_DIVISION>
#1427: FILE: include/asm-frv/spr-regs.h:208:
+#define ESRx_EC_DIVISION	0x00000026	/* - division_exception */

CHECK:CAMELCASE: Avoid CamelCase: <ESRx_EC_ITLB_MISS>
#1428: FILE: include/asm-frv/spr-regs.h:209:
+#define ESRx_EC_ITLB_MISS	0x00000034	/* - instruction_access_TLB_miss */

CHECK:CAMELCASE: Avoid CamelCase: <ESRx_EC_DTLB_MISS>
#1429: FILE: include/asm-frv/spr-regs.h:210:
+#define ESRx_EC_DTLB_MISS	0x00000036	/* - data_access_TLB_miss */

CHECK:CAMELCASE: Avoid CamelCase: <ESRx_EC_DATA_ACCESS_DAT>
#1430: FILE: include/asm-frv/spr-regs.h:211:
+#define ESRx_EC_DATA_ACCESS_DAT	0x0000003a	/* - data_access_DAT_exception */

CHECK:CAMELCASE: Avoid CamelCase: <MSRx_OVF>
#1458: FILE: include/asm-frv/spr-regs.h:239:
+#define MSRx_OVF		0x00000002	/* overflow exception detected */

CHECK:CAMELCASE: Avoid CamelCase: <MSRx_SIE>
#1459: FILE: include/asm-frv/spr-regs.h:240:
+#define MSRx_SIE		0x0000003c	/* last SIMD instruction exception detected */

CHECK:CAMELCASE: Avoid CamelCase: <MSRx_SIE_NONE>
#1460: FILE: include/asm-frv/spr-regs.h:241:
+#define MSRx_SIE_NONE		0x00000000	/* - none detected */

CHECK:CAMELCASE: Avoid CamelCase: <MSRx_SIE_FRkHI_ACCk>
#1461: FILE: include/asm-frv/spr-regs.h:242:
+#define MSRx_SIE_FRkHI_ACCk	0x00000020	/* - exception at FRkHI or ACCk */

CHECK:CAMELCASE: Avoid CamelCase: <MSRx_SIE_FRkLO_ACCk1>
#1462: FILE: include/asm-frv/spr-regs.h:243:
+#define MSRx_SIE_FRkLO_ACCk1	0x00000010	/* - exception at FRkLO or ACCk+1 */

CHECK:CAMELCASE: Avoid CamelCase: <MSRx_SIE_FRk1HI_ACCk2>
#1463: FILE: include/asm-frv/spr-regs.h:244:
+#define MSRx_SIE_FRk1HI_ACCk2	0x00000008	/* - exception at FRk+1HI or ACCk+2 */

CHECK:CAMELCASE: Avoid CamelCase: <MSRx_SIE_FRk1LO_ACCk3>
#1464: FILE: include/asm-frv/spr-regs.h:245:
+#define MSRx_SIE_FRk1LO_ACCk3	0x00000004	/* - exception at FRk+1LO or ACCk+3 */

WARNING:TYPO_SPELLING: 'postive' may be misspelled - perhaps 'positive'?
#1481: FILE: include/asm-frv/spr-regs.h:262:
+#define MSR0_RD_POS_INF		0x80000000	/* - postive infinity */
                        		          	     ^^^^^^^

CHECK:CAMELCASE: Avoid CamelCase: <xAMPRx_V>
#1488: FILE: include/asm-frv/spr-regs.h:269:
+#define xAMPRx_V		0x00000001	/* register content validity indicator */

CHECK:CAMELCASE: Avoid CamelCase: <DAMPRx_WP>
#1489: FILE: include/asm-frv/spr-regs.h:270:
+#define DAMPRx_WP		0x00000002	/* write protect */

CHECK:CAMELCASE: Avoid CamelCase: <DAMPRx_WP_RW>
#1490: FILE: include/asm-frv/spr-regs.h:271:
+#define DAMPRx_WP_RW		0x00000000	/* - read/write */

CHECK:CAMELCASE: Avoid CamelCase: <DAMPRx_WP_RO>
#1491: FILE: include/asm-frv/spr-regs.h:272:
+#define DAMPRx_WP_RO		0x00000002	/* - read-only */

CHECK:CAMELCASE: Avoid CamelCase: <xAMPRx_C>
#1492: FILE: include/asm-frv/spr-regs.h:273:
+#define xAMPRx_C		0x00000004	/* cached/uncached */

CHECK:CAMELCASE: Avoid CamelCase: <xAMPRx_C_CACHED>
#1493: FILE: include/asm-frv/spr-regs.h:274:
+#define xAMPRx_C_CACHED		0x00000000	/* - cached */

CHECK:CAMELCASE: Avoid CamelCase: <xAMPRx_C_UNCACHED>
#1494: FILE: include/asm-frv/spr-regs.h:275:
+#define xAMPRx_C_UNCACHED	0x00000004	/* - uncached */

CHECK:CAMELCASE: Avoid CamelCase: <xAMPRx_S>
#1495: FILE: include/asm-frv/spr-regs.h:276:
+#define xAMPRx_S		0x00000008	/* supervisor only */

CHECK:CAMELCASE: Avoid CamelCase: <xAMPRx_S_USER>
#1496: FILE: include/asm-frv/spr-regs.h:277:
+#define xAMPRx_S_USER		0x00000000	/* - userspace can access */

CHECK:CAMELCASE: Avoid CamelCase: <xAMPRx_S_KERNEL>
#1497: FILE: include/asm-frv/spr-regs.h:278:
+#define xAMPRx_S_KERNEL		0x00000008	/* - kernel only */

CHECK:CAMELCASE: Avoid CamelCase: <xAMPRx_SS>
#1498: FILE: include/asm-frv/spr-regs.h:279:
+#define xAMPRx_SS		0x000000f0	/* segment size */

CHECK:CAMELCASE: Avoid CamelCase: <xAMPRx_SS_16Kb>
#1499: FILE: include/asm-frv/spr-regs.h:280:
+#define xAMPRx_SS_16Kb		0x00000000	/* - 16 kilobytes */

CHECK:CAMELCASE: Avoid CamelCase: <xAMPRx_SS_64Kb>
#1500: FILE: include/asm-frv/spr-regs.h:281:
+#define xAMPRx_SS_64Kb		0x00000010	/* - 64 kilobytes */

CHECK:CAMELCASE: Avoid CamelCase: <xAMPRx_SS_256Kb>
#1501: FILE: include/asm-frv/spr-regs.h:282:
+#define xAMPRx_SS_256Kb		0x00000020	/* - 256 kilobytes */

CHECK:CAMELCASE: Avoid CamelCase: <xAMPRx_SS_1Mb>
#1502: FILE: include/asm-frv/spr-regs.h:283:
+#define xAMPRx_SS_1Mb		0x00000030	/* - 1 megabyte */

CHECK:CAMELCASE: Avoid CamelCase: <xAMPRx_SS_2Mb>
#1503: FILE: include/asm-frv/spr-regs.h:284:
+#define xAMPRx_SS_2Mb		0x00000040	/* - 2 megabytes */

CHECK:CAMELCASE: Avoid CamelCase: <xAMPRx_SS_4Mb>
#1504: FILE: include/asm-frv/spr-regs.h:285:
+#define xAMPRx_SS_4Mb		0x00000050	/* - 4 megabytes */

CHECK:CAMELCASE: Avoid CamelCase: <xAMPRx_SS_8Mb>
#1505: FILE: include/asm-frv/spr-regs.h:286:
+#define xAMPRx_SS_8Mb		0x00000060	/* - 8 megabytes */

CHECK:CAMELCASE: Avoid CamelCase: <xAMPRx_SS_16Mb>
#1506: FILE: include/asm-frv/spr-regs.h:287:
+#define xAMPRx_SS_16Mb		0x00000070	/* - 16 megabytes */

CHECK:CAMELCASE: Avoid CamelCase: <xAMPRx_SS_32Mb>
#1507: FILE: include/asm-frv/spr-regs.h:288:
+#define xAMPRx_SS_32Mb		0x00000080	/* - 32 megabytes */

CHECK:CAMELCASE: Avoid CamelCase: <xAMPRx_SS_64Mb>
#1508: FILE: include/asm-frv/spr-regs.h:289:
+#define xAMPRx_SS_64Mb		0x00000090	/* - 64 megabytes */

CHECK:CAMELCASE: Avoid CamelCase: <xAMPRx_SS_128Mb>
#1509: FILE: include/asm-frv/spr-regs.h:290:
+#define xAMPRx_SS_128Mb		0x000000a0	/* - 128 megabytes */

CHECK:CAMELCASE: Avoid CamelCase: <xAMPRx_SS_256Mb>
#1510: FILE: include/asm-frv/spr-regs.h:291:
+#define xAMPRx_SS_256Mb		0x000000b0	/* - 256 megabytes */

CHECK:CAMELCASE: Avoid CamelCase: <xAMPRx_SS_512Mb>
#1511: FILE: include/asm-frv/spr-regs.h:292:
+#define xAMPRx_SS_512Mb		0x000000c0	/* - 512 megabytes */

CHECK:CAMELCASE: Avoid CamelCase: <xAMPRx_RESERVED8>
#1512: FILE: include/asm-frv/spr-regs.h:293:
+#define xAMPRx_RESERVED8	0x00000100	/* reserved bit */

CHECK:CAMELCASE: Avoid CamelCase: <xAMPRx_NG>
#1513: FILE: include/asm-frv/spr-regs.h:294:
+#define xAMPRx_NG		0x00000200	/* non-global */

CHECK:CAMELCASE: Avoid CamelCase: <xAMPRx_L>
#1514: FILE: include/asm-frv/spr-regs.h:295:
+#define xAMPRx_L		0x00000400	/* locked */

CHECK:CAMELCASE: Avoid CamelCase: <xAMPRx_M>
#1515: FILE: include/asm-frv/spr-regs.h:296:
+#define xAMPRx_M		0x00000800	/* modified */

CHECK:CAMELCASE: Avoid CamelCase: <xAMPRx_D>
#1516: FILE: include/asm-frv/spr-regs.h:297:
+#define xAMPRx_D		0x00001000	/* DAT entry */

CHECK:CAMELCASE: Avoid CamelCase: <xAMPRx_RESERVED13>
#1517: FILE: include/asm-frv/spr-regs.h:298:
+#define xAMPRx_RESERVED13	0x00002000	/* reserved bit */

CHECK:CAMELCASE: Avoid CamelCase: <xAMPRx_PPFN>
#1518: FILE: include/asm-frv/spr-regs.h:299:
+#define xAMPRx_PPFN		0xfff00000	/* physical page frame number */

CHECK:CAMELCASE: Avoid CamelCase: <xAMPRx_V_BIT>
#1520: FILE: include/asm-frv/spr-regs.h:301:
+#define xAMPRx_V_BIT		0

CHECK:CAMELCASE: Avoid CamelCase: <DAMPRx_WP_BIT>
#1521: FILE: include/asm-frv/spr-regs.h:302:
+#define DAMPRx_WP_BIT		1

CHECK:CAMELCASE: Avoid CamelCase: <xAMPRx_C_BIT>
#1522: FILE: include/asm-frv/spr-regs.h:303:
+#define xAMPRx_C_BIT		2

CHECK:CAMELCASE: Avoid CamelCase: <xAMPRx_S_BIT>
#1523: FILE: include/asm-frv/spr-regs.h:304:
+#define xAMPRx_S_BIT		3

CHECK:CAMELCASE: Avoid CamelCase: <xAMPRx_RESERVED8_BIT>
#1524: FILE: include/asm-frv/spr-regs.h:305:
+#define xAMPRx_RESERVED8_BIT	8

CHECK:CAMELCASE: Avoid CamelCase: <xAMPRx_NG_BIT>
#1525: FILE: include/asm-frv/spr-regs.h:306:
+#define xAMPRx_NG_BIT		9

CHECK:CAMELCASE: Avoid CamelCase: <xAMPRx_L_BIT>
#1526: FILE: include/asm-frv/spr-regs.h:307:
+#define xAMPRx_L_BIT		10

CHECK:CAMELCASE: Avoid CamelCase: <xAMPRx_M_BIT>
#1527: FILE: include/asm-frv/spr-regs.h:308:
+#define xAMPRx_M_BIT		11

CHECK:CAMELCASE: Avoid CamelCase: <xAMPRx_D_BIT>
#1528: FILE: include/asm-frv/spr-regs.h:309:
+#define xAMPRx_D_BIT		12

CHECK:CAMELCASE: Avoid CamelCase: <xAMPRx_RESERVED13_BIT>
#1529: FILE: include/asm-frv/spr-regs.h:310:
+#define xAMPRx_RESERVED13_BIT	13

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#1531: FILE: include/asm-frv/spr-regs.h:312:
+#define __get_IAMPR(R) ({ unsigned long x; asm volatile("movsg iampr"#R",%0" : "=r"(x)); x; })

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#1532: FILE: include/asm-frv/spr-regs.h:313:
+#define __get_DAMPR(R) ({ unsigned long x; asm volatile("movsg dampr"#R",%0" : "=r"(x)); x; })

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#1534: FILE: include/asm-frv/spr-regs.h:315:
+#define __get_IAMLR(R) ({ unsigned long x; asm volatile("movsg iamlr"#R",%0" : "=r"(x)); x; })

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#1535: FILE: include/asm-frv/spr-regs.h:316:
+#define __get_DAMLR(R) ({ unsigned long x; asm volatile("movsg damlr"#R",%0" : "=r"(x)); x; })

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1537: FILE: include/asm-frv/spr-regs.h:318:
+#define __set_IAMPR(R,V) ^Ido { asm volatile("movgs %0,iampr"#R : : "r"(V)); } while(0)$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1537: FILE: include/asm-frv/spr-regs.h:318:
+#define __set_IAMPR(R,V) 	do { asm volatile("movgs %0,iampr"#R : : "r"(V)); } while(0)
                      ^

ERROR:SPACING: space required before the open parenthesis '('
#1537: FILE: include/asm-frv/spr-regs.h:318:
+#define __set_IAMPR(R,V) 	do { asm volatile("movgs %0,iampr"#R : : "r"(V)); } while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#1537: FILE: include/asm-frv/spr-regs.h:318:
+#define __set_IAMPR(R,V) 	do { asm volatile("movgs %0,iampr"#R : : "r"(V)); } while(0)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1538: FILE: include/asm-frv/spr-regs.h:319:
+#define __set_DAMPR(R,V)  ^Ido { asm volatile("movgs %0,dampr"#R : : "r"(V)); } while(0)$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1538: FILE: include/asm-frv/spr-regs.h:319:
+#define __set_DAMPR(R,V)  	do { asm volatile("movgs %0,dampr"#R : : "r"(V)); } while(0)
                      ^

ERROR:SPACING: space required before the open parenthesis '('
#1538: FILE: include/asm-frv/spr-regs.h:319:
+#define __set_DAMPR(R,V)  	do { asm volatile("movgs %0,dampr"#R : : "r"(V)); } while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#1538: FILE: include/asm-frv/spr-regs.h:319:
+#define __set_DAMPR(R,V)  	do { asm volatile("movgs %0,dampr"#R : : "r"(V)); } while(0)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1540: FILE: include/asm-frv/spr-regs.h:321:
+#define __set_IAMLR(R,V) ^Ido { asm volatile("movgs %0,iamlr"#R : : "r"(V)); } while(0)$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1540: FILE: include/asm-frv/spr-regs.h:321:
+#define __set_IAMLR(R,V) 	do { asm volatile("movgs %0,iamlr"#R : : "r"(V)); } while(0)
                      ^

ERROR:SPACING: space required before the open parenthesis '('
#1540: FILE: include/asm-frv/spr-regs.h:321:
+#define __set_IAMLR(R,V) 	do { asm volatile("movgs %0,iamlr"#R : : "r"(V)); } while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#1540: FILE: include/asm-frv/spr-regs.h:321:
+#define __set_IAMLR(R,V) 	do { asm volatile("movgs %0,iamlr"#R : : "r"(V)); } while(0)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1541: FILE: include/asm-frv/spr-regs.h:322:
+#define __set_DAMLR(R,V)  ^Ido { asm volatile("movgs %0,damlr"#R : : "r"(V)); } while(0)$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1541: FILE: include/asm-frv/spr-regs.h:322:
+#define __set_DAMLR(R,V)  	do { asm volatile("movgs %0,damlr"#R : : "r"(V)); } while(0)
                      ^

ERROR:SPACING: space required before the open parenthesis '('
#1541: FILE: include/asm-frv/spr-regs.h:322:
+#define __set_DAMLR(R,V)  	do { asm volatile("movgs %0,damlr"#R : : "r"(V)); } while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#1541: FILE: include/asm-frv/spr-regs.h:322:
+#define __set_DAMLR(R,V)  	do { asm volatile("movgs %0,damlr"#R : : "r"(V)); } while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#1543: FILE: include/asm-frv/spr-regs.h:324:
+#define save_dampr(R, _dampr)					\
+do {								\
+	asm volatile("movsg dampr"R",%0" : "=r"(_dampr));	\
+} while(0)

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#1545: FILE: include/asm-frv/spr-regs.h:326:
+	asm volatile("movsg dampr"R",%0" : "=r"(_dampr));	\

ERROR:SPACING: space required before the open parenthesis '('
#1546: FILE: include/asm-frv/spr-regs.h:327:
+} while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#1548: FILE: include/asm-frv/spr-regs.h:329:
+#define restore_dampr(R, _dampr)			\
+do {							\
+	asm volatile("movgs %0,dampr"R :: "r"(_dampr));	\
+} while(0)

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#1550: FILE: include/asm-frv/spr-regs.h:331:
+	asm volatile("movgs %0,dampr"R :: "r"(_dampr));	\

ERROR:SPACING: space required before the open parenthesis '('
#1551: FILE: include/asm-frv/spr-regs.h:332:
+} while(0)

CHECK:CAMELCASE: Avoid CamelCase: <BRR_DBNEx>
#1608: FILE: include/asm-frv/spr-regs.h:389:
+#define BRR_DBNEx		0x0000f000	/* ? */

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1625: FILE: include/asm-frv/statfs.h:1:
+#ifndef _ASM_STATFS_H

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1636: FILE: include/asm-frv/stat.h:1:
+#ifndef _ASM_STAT_H

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1696: FILE: include/asm-frv/stat.h:61:
+/* This matches struct stat64 in uClibc/glibc.  The layout is exactly
+   the same as that of struct stat above, with 64-bit types taking up

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1699: FILE: include/asm-frv/stat.h:64:
+   overflow.  */

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1740: FILE: include/asm-frv/string.h:1:
+/* string.h: FRV string handling

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1759: FILE: include/asm-frv/string.h:20:
+extern void *memset(void *, int, __kernel_size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#1759: FILE: include/asm-frv/string.h:20:
+extern void *memset(void *, int, __kernel_size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1759: FILE: include/asm-frv/string.h:20:
+extern void *memset(void *, int, __kernel_size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument '__kernel_size_t' should also have an identifier name
#1759: FILE: include/asm-frv/string.h:20:
+extern void *memset(void *, int, __kernel_size_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1760: FILE: include/asm-frv/string.h:21:
+extern void *memcpy(void *, const void *, __kernel_size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#1760: FILE: include/asm-frv/string.h:21:
+extern void *memcpy(void *, const void *, __kernel_size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const void *' should also have an identifier name
#1760: FILE: include/asm-frv/string.h:21:
+extern void *memcpy(void *, const void *, __kernel_size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument '__kernel_size_t' should also have an identifier name
#1760: FILE: include/asm-frv/string.h:21:
+extern void *memcpy(void *, const void *, __kernel_size_t);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1795: FILE: include/asm-frv/suspend.h:1:
+/* suspend.h: suspension stuff

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1819: FILE: include/asm-frv/system.h:1:
+/* system.h: FR-V CPU control definitions

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#1835: FILE: include/asm-frv/system.h:17:
+#include <asm/atomic.h>

ERROR:SPACING: space required before the open parenthesis '('
#1839: FILE: include/asm-frv/system.h:21:
+#define prepare_to_switch()    do { } while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'prev' - possible side-effects?
#1849: FILE: include/asm-frv/system.h:31:
+#define switch_to(prev, next, last)						\
+do {										\
+	prev->thread.sched_lr = (unsigned long) __builtin_return_address(0);	\
+	__switch_to(&prev->thread, &next->thread);				\
+	mb();									\
+} while(0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'prev' may be better as '(prev)' to avoid precedence issues
#1849: FILE: include/asm-frv/system.h:31:
+#define switch_to(prev, next, last)						\
+do {										\
+	prev->thread.sched_lr = (unsigned long) __builtin_return_address(0);	\
+	__switch_to(&prev->thread, &next->thread);				\
+	mb();									\
+} while(0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'next' may be better as '(next)' to avoid precedence issues
#1849: FILE: include/asm-frv/system.h:31:
+#define switch_to(prev, next, last)						\
+do {										\
+	prev->thread.sched_lr = (unsigned long) __builtin_return_address(0);	\
+	__switch_to(&prev->thread, &next->thread);				\
+	mb();									\
+} while(0)

CHECK:SPACING: No space is necessary after a cast
#1851: FILE: include/asm-frv/system.h:33:
+	prev->thread.sched_lr = (unsigned long) __builtin_return_address(0);	\

WARNING:MEMORY_BARRIER: memory barrier without comment
#1853: FILE: include/asm-frv/system.h:35:
+	mb();									\

ERROR:SPACING: space required before the open parenthesis '('
#1854: FILE: include/asm-frv/system.h:36:
+} while(0)

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1862: FILE: include/asm-frv/system.h:44:
+	asm volatile("	movsg	psr,%0		\n"	\

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1863: FILE: include/asm-frv/system.h:45:
+		     "	andi	%0,%2,%0	\n"	\

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1864: FILE: include/asm-frv/system.h:46:
+		     "	ori	%0,%1,%0	\n"	\

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1865: FILE: include/asm-frv/system.h:47:
+		     "	movgs	%0,psr		\n"	\

ERROR:SPACING: space required before the open parenthesis '('
#1869: FILE: include/asm-frv/system.h:51:
+} while(0)

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1874: FILE: include/asm-frv/system.h:56:
+	asm volatile("	movsg	psr,%0		\n"	\

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1875: FILE: include/asm-frv/system.h:57:
+		     "	andi	%0,%1,%0	\n"	\

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1876: FILE: include/asm-frv/system.h:58:
+		     "	movgs	%0,psr		\n"	\

ERROR:SPACING: space required before the open parenthesis '('
#1880: FILE: include/asm-frv/system.h:62:
+} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#1889: FILE: include/asm-frv/system.h:71:
+} while(0)

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1895: FILE: include/asm-frv/system.h:77:
+	asm volatile("	movsg	psr,%0		\n"	\

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1896: FILE: include/asm-frv/system.h:78:
+		     "	andi	%0,%3,%1	\n"	\

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1897: FILE: include/asm-frv/system.h:79:
+		     "	ori	%1,%2,%1	\n"	\

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1898: FILE: include/asm-frv/system.h:80:
+		     "	movgs	%1,psr		\n"	\

ERROR:SPACING: space required before the open parenthesis '('
#1902: FILE: include/asm-frv/system.h:84:
+} while(0)

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1907: FILE: include/asm-frv/system.h:89:
+	asm volatile("	movgs	%0,psr		\n"	\

ERROR:SPACING: space required before the open parenthesis '('
#1911: FILE: include/asm-frv/system.h:93:
+} while(0)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1919: FILE: include/asm-frv/system.h:101:
+#define nop()			asm volatile ("nop"::)

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#1920: FILE: include/asm-frv/system.h:102:
+#define mb()			asm volatile ("membar" : : :"memory")
             			                           ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1920: FILE: include/asm-frv/system.h:102:
+#define mb()			asm volatile ("membar" : : :"memory")

WARNING:MEMORY_BARRIER: memory barrier without comment
#1920: FILE: include/asm-frv/system.h:102:
+#define mb()			asm volatile ("membar" : : :"memory")

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#1921: FILE: include/asm-frv/system.h:103:
+#define rmb()			asm volatile ("membar" : : :"memory")
              			                           ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1921: FILE: include/asm-frv/system.h:103:
+#define rmb()			asm volatile ("membar" : : :"memory")

WARNING:MEMORY_BARRIER: memory barrier without comment
#1921: FILE: include/asm-frv/system.h:103:
+#define rmb()			asm volatile ("membar" : : :"memory")

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#1922: FILE: include/asm-frv/system.h:104:
+#define wmb()			asm volatile ("membar" : : :"memory")
              			                           ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1922: FILE: include/asm-frv/system.h:104:
+#define wmb()			asm volatile ("membar" : : :"memory")

WARNING:MEMORY_BARRIER: memory barrier without comment
#1922: FILE: include/asm-frv/system.h:104:
+#define wmb()			asm volatile ("membar" : : :"memory")

WARNING:MEMORY_BARRIER: memory barrier without comment
#1923: FILE: include/asm-frv/system.h:105:
+#define set_mb(var, value)	do { var = value; mb(); } while (0)

WARNING:MEMORY_BARRIER: memory barrier without comment
#1924: FILE: include/asm-frv/system.h:106:
+#define set_wmb(var, value)	do { var = value; wmb(); } while (0)

WARNING:MEMORY_BARRIER: memory barrier without comment
#1926: FILE: include/asm-frv/system.h:108:
+#define smp_mb()		mb()

WARNING:MEMORY_BARRIER: memory barrier without comment
#1927: FILE: include/asm-frv/system.h:109:
+#define smp_rmb()		rmb()

WARNING:MEMORY_BARRIER: memory barrier without comment
#1928: FILE: include/asm-frv/system.h:110:
+#define smp_wmb()		wmb()

ERROR:SPACING: space required before the open parenthesis '('
#1930: FILE: include/asm-frv/system.h:112:
+#define read_barrier_depends()		do {} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#1936: FILE: include/asm-frv/system.h:118:
+} while(1)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(1, 2) over __attribute__((format(printf, 1, 2)))
#1938: FILE: include/asm-frv/system.h:120:
+extern void die_if_kernel(const char *, ...) __attribute__((format(printf, 1, 2)));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1938: FILE: include/asm-frv/system.h:120:
+extern void die_if_kernel(const char *, ...) __attribute__((format(printf, 1, 2)));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1939: FILE: include/asm-frv/system.h:121:
+extern void free_initmem(void);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1946: FILE: include/asm-frv/termbits.h:1:
+#ifndef _ASM_TERMBITS_H__

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1951: FILE: include/asm-frv/termbits.h:6:
+typedef unsigned char	cc_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1952: FILE: include/asm-frv/termbits.h:7:
+typedef unsigned int	speed_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1953: FILE: include/asm-frv/termbits.h:8:
+typedef unsigned int	tcflag_t;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1984: FILE: include/asm-frv/termbits.h:39:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2104: FILE: include/asm-frv/termbits.h:159:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2127: FILE: include/asm-frv/termios.h:1:
+#ifndef _ASM_TERMIOS_H

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2152: FILE: include/asm-frv/termios.h:26:
+/*	intr=^C		quit=^|		erase=del	kill=^U
+	eof=^D		vtime=\0	vmin=\1		sxtc=\0

WARNING:LONG_LINE_COMMENT: line length of 103 exceeds 100 columns
#2193: FILE: include/asm-frv/termios.h:67:
+#define N_SMSBLOCK	12	/* SMS block mode - for talking to GSM data cards about SMS messages */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2205: FILE: include/asm-frv/thread_info.h:1:
+/* thread_info.h: description

WARNING:INCLUDE_LINUX: Use #include <linux/processor.h> instead of <asm/processor.h>
#2223: FILE: include/asm-frv/thread_info.h:19:
+#include <asm/processor.h>

WARNING:TYPO_SPELLING: 'preemptable' may be misspelled - perhaps 'preemptible'?
#2240: FILE: include/asm-frv/thread_info.h:36:
+	__s32			preempt_count;	/* 0 => preemptable, <0 => BUG */
 	     			              	        ^^^^^^^^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#2243: FILE: include/asm-frv/thread_info.h:39:
+^I^I^I^I^I ^I   0-0xBFFFFFFF for user-thead$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2243: FILE: include/asm-frv/thread_info.h:39:
+^I^I^I^I^I ^I   0-0xBFFFFFFF for user-thead$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2243: FILE: include/asm-frv/thread_info.h:39:
+	mm_segment_t		addr_limit;	/* thread address space:
+					 	   0-0xBFFFFFFF for user-thead

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'tsk' may be better as '(tsk)' to avoid precedence issues
#2274: FILE: include/asm-frv/thread_info.h:70:
+#define INIT_THREAD_INFO(tsk)			\
+{						\
+	.task		= &tsk,			\
+	.exec_domain	= &default_exec_domain,	\
+	.flags		= 0,			\
+	.cpu		= 0,			\
+	.preempt_count	= 1,			\
+	.addr_limit	= KERNEL_DS,		\
+	.restart_block = {			\
+		.fn = do_no_restart_syscall,	\
+	},					\
+}

CHECK:BIT_MACRO: Prefer using the BIT macro
#2340: FILE: include/asm-frv/thread_info.h:136:
+#define _TIF_SYSCALL_TRACE	(1 << TIF_SYSCALL_TRACE)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#2341: FILE: include/asm-frv/thread_info.h:137:
+#define _TIF_NOTIFY_RESUME	(1 << TIF_NOTIFY_RESUME)

CHECK:BIT_MACRO: Prefer using the BIT macro
#2342: FILE: include/asm-frv/thread_info.h:138:
+#define _TIF_SIGPENDING		(1 << TIF_SIGPENDING)

CHECK:BIT_MACRO: Prefer using the BIT macro
#2343: FILE: include/asm-frv/thread_info.h:139:
+#define _TIF_NEED_RESCHED	(1 << TIF_NEED_RESCHED)

CHECK:BIT_MACRO: Prefer using the BIT macro
#2344: FILE: include/asm-frv/thread_info.h:140:
+#define _TIF_SINGLESTEP		(1 << TIF_SINGLESTEP)

CHECK:BIT_MACRO: Prefer using the BIT macro
#2345: FILE: include/asm-frv/thread_info.h:141:
+#define _TIF_IRET		(1 << TIF_IRET)

CHECK:BIT_MACRO: Prefer using the BIT macro
#2346: FILE: include/asm-frv/thread_info.h:142:
+#define _TIF_POLLING_NRFLAG	(1 << TIF_POLLING_NRFLAG)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2367: FILE: include/asm-frv/timer-regs.h:1:
+/* timer-regs.h: hardware timer register definitions

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#2392: FILE: include/asm-frv/timer-regs.h:26:
+#define __get_CLKC()	({ *(volatile unsigned long *)(0xfeff9a00); })

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#2398: FILE: include/asm-frv/timer-regs.h:32:
+	asm volatile("	st%I0.p	%2,%M0		\n"

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#2399: FILE: include/asm-frv/timer-regs.h:33:
+		     "	setlos	%3,%1		\n"

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#2400: FILE: include/asm-frv/timer-regs.h:34:
+		     "	membar			\n"

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#2401: FILE: include/asm-frv/timer-regs.h:35:
+		     "0:			\n"

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#2402: FILE: include/asm-frv/timer-regs.h:36:
+		     "	subicc	%1,#1,%1,icc0	\n"

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#2403: FILE: include/asm-frv/timer-regs.h:37:
+		     "	bnc	icc0,#1,0b	\n"

CHECK:SPACING: No space is necessary after a cast
#2404: FILE: include/asm-frv/timer-regs.h:38:
+		     : "=m"(*(volatile unsigned long *) 0xfeff9a00), "=r"(tmp)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#2404: FILE: include/asm-frv/timer-regs.h:38:
+		     : "=m"(*(volatile unsigned long *) 0xfeff9a00), "=r"(tmp)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#2409: FILE: include/asm-frv/timer-regs.h:43:
+#define __get_TCTR()	({ *(volatile unsigned long *)(0xfeff9418); })

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#2410: FILE: include/asm-frv/timer-regs.h:44:
+#define __get_TPRV()	({ *(volatile unsigned long *)(0xfeff9420); })

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#2411: FILE: include/asm-frv/timer-regs.h:45:
+#define __get_TPRCKSL()	({ *(volatile unsigned long *)(0xfeff9428); })

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#2412: FILE: include/asm-frv/timer-regs.h:46:
+#define __get_TCSR(T)	({ *(volatile unsigned long *)(0xfeff9400 + 8 * (T)); })

CHECK:CAMELCASE: Avoid CamelCase: <__get_TxCKSL>
#2413: FILE: include/asm-frv/timer-regs.h:47:
+#define __get_TxCKSL(T)	({ *(volatile unsigned long *)(0xfeff9430 + 8 * (T)); })

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#2413: FILE: include/asm-frv/timer-regs.h:47:
+#define __get_TxCKSL(T)	({ *(volatile unsigned long *)(0xfeff9430 + 8 * (T)); })

ERROR:SPACING: space required before the open parenthesis '('
#2417: FILE: include/asm-frv/timer-regs.h:51:
+#define __set_TCTR(V)	do { *(volatile unsigned long *)(0xfeff9418) = (V); mb(); } while(0)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#2417: FILE: include/asm-frv/timer-regs.h:51:
+#define __set_TCTR(V)	do { *(volatile unsigned long *)(0xfeff9418) = (V); mb(); } while(0)

WARNING:MEMORY_BARRIER: memory barrier without comment
#2417: FILE: include/asm-frv/timer-regs.h:51:
+#define __set_TCTR(V)	do { *(volatile unsigned long *)(0xfeff9418) = (V); mb(); } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#2418: FILE: include/asm-frv/timer-regs.h:52:
+#define __set_TPRV(V)	do { *(volatile unsigned long *)(0xfeff9420) = (V) << 24; mb(); } while(0)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#2418: FILE: include/asm-frv/timer-regs.h:52:
+#define __set_TPRV(V)	do { *(volatile unsigned long *)(0xfeff9420) = (V) << 24; mb(); } while(0)

WARNING:MEMORY_BARRIER: memory barrier without comment
#2418: FILE: include/asm-frv/timer-regs.h:52:
+#define __set_TPRV(V)	do { *(volatile unsigned long *)(0xfeff9420) = (V) << 24; mb(); } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#2419: FILE: include/asm-frv/timer-regs.h:53:
+#define __set_TPRCKSL(V) do { *(volatile unsigned long *)(0xfeff9428) = (V); mb(); } while(0)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#2419: FILE: include/asm-frv/timer-regs.h:53:
+#define __set_TPRCKSL(V) do { *(volatile unsigned long *)(0xfeff9428) = (V); mb(); } while(0)

WARNING:MEMORY_BARRIER: memory barrier without comment
#2419: FILE: include/asm-frv/timer-regs.h:53:
+#define __set_TPRCKSL(V) do { *(volatile unsigned long *)(0xfeff9428) = (V); mb(); } while(0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2420: FILE: include/asm-frv/timer-regs.h:54:
+#define __set_TCSR(T,V)	\
                     ^

ERROR:SPACING: space required before the open parenthesis '('
#2421: FILE: include/asm-frv/timer-regs.h:55:
+do { *(volatile unsigned long *)(0xfeff9400 + 8 * (T)) = (V); mb(); } while(0)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#2421: FILE: include/asm-frv/timer-regs.h:55:
+do { *(volatile unsigned long *)(0xfeff9400 + 8 * (T)) = (V); mb(); } while(0)

WARNING:MEMORY_BARRIER: memory barrier without comment
#2421: FILE: include/asm-frv/timer-regs.h:55:
+do { *(volatile unsigned long *)(0xfeff9400 + 8 * (T)) = (V); mb(); } while(0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2423: FILE: include/asm-frv/timer-regs.h:57:
+#define __set_TxCKSL(T,V) \
                       ^

CHECK:CAMELCASE: Avoid CamelCase: <__set_TxCKSL>
#2423: FILE: include/asm-frv/timer-regs.h:57:
+#define __set_TxCKSL(T,V) \

ERROR:SPACING: space required before the open parenthesis '('
#2424: FILE: include/asm-frv/timer-regs.h:58:
+do { *(volatile unsigned long *)(0xfeff9430 + 8 * (T)) = (V); mb(); } while(0)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#2424: FILE: include/asm-frv/timer-regs.h:58:
+do { *(volatile unsigned long *)(0xfeff9430 + 8 * (T)) = (V); mb(); } while(0)

WARNING:MEMORY_BARRIER: memory barrier without comment
#2424: FILE: include/asm-frv/timer-regs.h:58:
+do { *(volatile unsigned long *)(0xfeff9430 + 8 * (T)) = (V); mb(); } while(0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2426: FILE: include/asm-frv/timer-regs.h:60:
+#define __set_TCSR_DATA(T,V) __set_TCSR(T, (V) << 24)
                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2427: FILE: include/asm-frv/timer-regs.h:61:
+#define __set_TxCKSL_DATA(T,V) __set_TxCKSL(T, TxCKSL_EIGHT | __TxCKSL_SELECT((V)))
                            ^

CHECK:CAMELCASE: Avoid CamelCase: <__set_TxCKSL_DATA>
#2427: FILE: include/asm-frv/timer-regs.h:61:
+#define __set_TxCKSL_DATA(T,V) __set_TxCKSL(T, TxCKSL_EIGHT | __TxCKSL_SELECT((V)))

CHECK:CAMELCASE: Avoid CamelCase: <TxCKSL_EIGHT>
#2427: FILE: include/asm-frv/timer-regs.h:61:
+#define __set_TxCKSL_DATA(T,V) __set_TxCKSL(T, TxCKSL_EIGHT | __TxCKSL_SELECT((V)))

CHECK:CAMELCASE: Avoid CamelCase: <__TxCKSL_SELECT>
#2427: FILE: include/asm-frv/timer-regs.h:61:
+#define __set_TxCKSL_DATA(T,V) __set_TxCKSL(T, TxCKSL_EIGHT | __TxCKSL_SELECT((V)))

CHECK:CAMELCASE: Avoid CamelCase: <TCSRx_DATA>
#2459: FILE: include/asm-frv/timer-regs.h:93:
+#define TCSRx_DATA		0xff000000

CHECK:CAMELCASE: Avoid CamelCase: <TCSRx_OUTPUT>
#2462: FILE: include/asm-frv/timer-regs.h:96:
+#define TCSRx_OUTPUT		0x80000000

CHECK:CAMELCASE: Avoid CamelCase: <TCSRx_NULLCOUNT>
#2463: FILE: include/asm-frv/timer-regs.h:97:
+#define TCSRx_NULLCOUNT		0x40000000

CHECK:CAMELCASE: Avoid CamelCase: <TCSRx_RL>
#2464: FILE: include/asm-frv/timer-regs.h:98:
+#define TCSRx_RL		0x30000000

CHECK:CAMELCASE: Avoid CamelCase: <TCSRx_MODE>
#2465: FILE: include/asm-frv/timer-regs.h:99:
+#define TCSRx_MODE		0x07000000

CHECK:CAMELCASE: Avoid CamelCase: <TxCKSL_SELECT>
#2468: FILE: include/asm-frv/timer-regs.h:102:
+#define TxCKSL_SELECT		0x0f000000

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2477: FILE: include/asm-frv/timex.h:1:
+/* timex.h: FR-V architecture timex specifications

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2487: FILE: include/asm-frv/timex.h:11:
+   (1000000/CLOCK_TICK_FACTOR) / (CLOCK_TICK_RATE/CLOCK_TICK_FACTOR))^I\$

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#2487: FILE: include/asm-frv/timex.h:11:
+   (1000000/CLOCK_TICK_FACTOR) / (CLOCK_TICK_RATE/CLOCK_TICK_FACTOR))	\
            ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#2487: FILE: include/asm-frv/timex.h:11:
+   (1000000/CLOCK_TICK_FACTOR) / (CLOCK_TICK_RATE/CLOCK_TICK_FACTOR))	\
                                                  ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2488: FILE: include/asm-frv/timex.h:12:
+  << (SHIFT_SCALE-SHIFT_HZ)) / HZ)$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2488: FILE: include/asm-frv/timex.h:12:
+  << (SHIFT_SCALE-SHIFT_HZ)) / HZ)
                  ^

WARNING:NEW_TYPEDEFS: do not add new typedefs
#2490: FILE: include/asm-frv/timex.h:14:
+typedef unsigned long cycles_t;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2506: FILE: include/asm-frv/tlbflush.h:1:
+/* tlbflush.h: TLB flushing functions

WARNING:INCLUDE_LINUX: Use #include <linux/processor.h> instead of <asm/processor.h>
#2522: FILE: include/asm-frv/tlbflush.h:17:
+#include <asm/processor.h>

WARNING:STORAGE_CLASS: storage class 'asmlinkage' should be located before type 'void'
#2527: FILE: include/asm-frv/tlbflush.h:22:
+extern void asmlinkage __flush_tlb_all(void);

WARNING:STORAGE_CLASS: storage class 'asmlinkage' should be located before type 'void'
#2528: FILE: include/asm-frv/tlbflush.h:23:
+extern void asmlinkage __flush_tlb_mm(unsigned long contextid);

WARNING:STORAGE_CLASS: storage class 'asmlinkage' should be located before type 'void'
#2529: FILE: include/asm-frv/tlbflush.h:24:
+extern void asmlinkage __flush_tlb_page(unsigned long contextid, unsigned long start);

WARNING:STORAGE_CLASS: storage class 'asmlinkage' should be located before type 'void'
#2530: FILE: include/asm-frv/tlbflush.h:25:
+extern void asmlinkage __flush_tlb_range(unsigned long contextid,

ERROR:SPACING: space required before the open parenthesis '('
#2539: FILE: include/asm-frv/tlbflush.h:34:
+} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#2546: FILE: include/asm-frv/tlbflush.h:41:
+} while(0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2548: FILE: include/asm-frv/tlbflush.h:43:
+#define flush_tlb_range(vma,start,end)					\
                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2548: FILE: include/asm-frv/tlbflush.h:43:
+#define flush_tlb_range(vma,start,end)					\
                                  ^

ERROR:SPACING: space required before the open parenthesis '('
#2553: FILE: include/asm-frv/tlbflush.h:48:
+} while(0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2555: FILE: include/asm-frv/tlbflush.h:50:
+#define flush_tlb_page(vma,addr)				\
                           ^

ERROR:SPACING: space required before the open parenthesis '('
#2560: FILE: include/asm-frv/tlbflush.h:55:
+} while(0)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2562: FILE: include/asm-frv/tlbflush.h:57:
+
+

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2566: FILE: include/asm-frv/tlbflush.h:61:
+#define flush_tlb_pgtables(mm,start,end)	asm volatile("movgs gr0,scr0 ! movgs gr0,scr1");
                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2566: FILE: include/asm-frv/tlbflush.h:61:
+#define flush_tlb_pgtables(mm,start,end)	asm volatile("movgs gr0,scr0 ! movgs gr0,scr1");
                                    ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#2566: FILE: include/asm-frv/tlbflush.h:61:
+#define flush_tlb_pgtables(mm,start,end)	asm volatile("movgs gr0,scr0 ! movgs gr0,scr1");

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#2566: FILE: include/asm-frv/tlbflush.h:61:
+#define flush_tlb_pgtables(mm,start,end)	asm volatile("movgs gr0,scr0 ! movgs gr0,scr1");

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2570: FILE: include/asm-frv/tlbflush.h:65:
+#define flush_tlb()				BUG()

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2571: FILE: include/asm-frv/tlbflush.h:66:
+#define flush_tlb_all()				BUG()

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2572: FILE: include/asm-frv/tlbflush.h:67:
+#define flush_tlb_mm(mm)			BUG()

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2573: FILE: include/asm-frv/tlbflush.h:68:
+#define flush_tlb_page(vma,addr)		BUG()

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2573: FILE: include/asm-frv/tlbflush.h:68:
+#define flush_tlb_page(vma,addr)		BUG()
                           ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2574: FILE: include/asm-frv/tlbflush.h:69:
+#define flush_tlb_range(mm,start,end)		BUG()

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2574: FILE: include/asm-frv/tlbflush.h:69:
+#define flush_tlb_range(mm,start,end)		BUG()
                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2574: FILE: include/asm-frv/tlbflush.h:69:
+#define flush_tlb_range(mm,start,end)		BUG()
                                 ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2575: FILE: include/asm-frv/tlbflush.h:70:
+#define flush_tlb_pgtables(mm,start,end)	BUG()

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2575: FILE: include/asm-frv/tlbflush.h:70:
+#define flush_tlb_pgtables(mm,start,end)	BUG()
                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2575: FILE: include/asm-frv/tlbflush.h:70:
+#define flush_tlb_pgtables(mm,start,end)	BUG()
                                    ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2576: FILE: include/asm-frv/tlbflush.h:71:
+#define flush_tlb_kernel_range(start, end)	BUG()

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2580: FILE: include/asm-frv/tlbflush.h:75:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2586: FILE: include/asm-frv/tlb.h:1:
+#ifndef _ASM_TLB_H

ERROR:SPACING: space required before the open parenthesis '('
#2591: FILE: include/asm-frv/tlb.h:6:
+#define check_pgt_cache() do {} while(0)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2613: FILE: include/asm-frv/topology.h:1:
+#ifndef _ASM_TOPOLOGY_H

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2631: FILE: include/asm-frv/types.h:1:
+/* types.h: FRV types

WARNING:NEW_TYPEDEFS: do not add new typedefs
#2647: FILE: include/asm-frv/types.h:17:
+typedef unsigned short umode_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#2698: FILE: include/asm-frv/types.h:68:
+typedef unsigned short kmem_bufctl_t;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2709: FILE: include/asm-frv/uaccess.h:1:
+/* uaccess.h: userspace accessor functions

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2748: FILE: include/asm-frv/uaccess.h:40:
+	asm volatile (

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#2749: FILE: include/asm-frv/uaccess.h:41:
+		"	addcc	%3,%2,%1,icc0	\n"	/* set C-flag if addr+size>4GB */

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#2750: FILE: include/asm-frv/uaccess.h:42:
+		"	subcc.p	%1,%4,gr0,icc1	\n"	/* jump if addr+size>limit */

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#2751: FILE: include/asm-frv/uaccess.h:43:
+		"	bc	icc0,#0,0f	\n"

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#2752: FILE: include/asm-frv/uaccess.h:44:
+		"	bhi	icc1,#0,0f	\n"

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#2753: FILE: include/asm-frv/uaccess.h:45:
+		"	setlos	#0,%0		\n"	/* mark okay */

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#2754: FILE: include/asm-frv/uaccess.h:46:
+		"0:				\n"

CHECK:SPACING: No space is necessary after a cast
#2773: FILE: include/asm-frv/uaccess.h:65:
+#define __range_ok(addr,size) ___range_ok((unsigned long) (addr), (unsigned long) (size))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2773: FILE: include/asm-frv/uaccess.h:65:
+#define __range_ok(addr,size) ___range_ok((unsigned long) (addr), (unsigned long) (size))
                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2775: FILE: include/asm-frv/uaccess.h:67:
+#define access_ok(type,addr,size) (__range_ok((addr), (size)) == 0)
                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2775: FILE: include/asm-frv/uaccess.h:67:
+#define access_ok(type,addr,size) (__range_ok((addr), (size)) == 0)
                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2776: FILE: include/asm-frv/uaccess.h:68:
+#define __access_ok(addr,size) (__range_ok((addr), (size)) == 0)
                         ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2778: FILE: include/asm-frv/uaccess.h:70:
+static inline int verify_area(int type, const void * addr, unsigned long size)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#2796: FILE: include/asm-frv/uaccess.h:88:
+struct exception_table_entry
+{

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2801: FILE: include/asm-frv/uaccess.h:93:
+extern unsigned long search_exception_table(unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#2801: FILE: include/asm-frv/uaccess.h:93:
+extern unsigned long search_exception_table(unsigned long);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2803: FILE: include/asm-frv/uaccess.h:95:
+
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#2808: FILE: include/asm-frv/uaccess.h:100:
+#define __put_user(x, ptr)						\
+({									\
+	int __pu_err = 0;						\
+									\
+	typeof(*(ptr)) __pu_val = (x);					\
+									\
+	switch (sizeof (*(ptr))) {					\
+	case 1:								\
+		__put_user_asm(__pu_err, __pu_val, ptr, "b", "r");	\
+		break;							\
+	case 2:								\
+		__put_user_asm(__pu_err, __pu_val, ptr, "h", "r");	\
+		break;							\
+	case 4:								\
+		__put_user_asm(__pu_err, __pu_val, ptr, "",  "r");	\
+		break;							\
+	case 8:								\
+		__put_user_asm(__pu_err, __pu_val, ptr, "d", "e");	\
+		break;							\
+	default:							\
+		__pu_err = __put_user_bad();				\
+		break;							\
+	}								\
+	__pu_err;							\
+})

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2814: FILE: include/asm-frv/uaccess.h:106:
+	switch (sizeof (*(ptr))) {					\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#2834: FILE: include/asm-frv/uaccess.h:126:
+#define put_user(x, ptr)			\
+({						\
+	typeof(&*ptr) _p = (ptr);		\
+	int _e;					\
+						\
+	_e = __range_ok(_p, sizeof(*_p));	\
+	if (_e == 0)				\
+		_e = __put_user((x), _p);	\
+	_e;					\
+})

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'ptr' may be better as '(ptr)' to avoid precedence issues
#2834: FILE: include/asm-frv/uaccess.h:126:
+#define put_user(x, ptr)			\
+({						\
+	typeof(&*ptr) _p = (ptr);		\
+	int _e;					\
+						\
+	_e = __range_ok(_p, sizeof(*_p));	\
+	if (_e == 0)				\
+		_e = __put_user((x), _p);	\
+	_e;					\
+})

CHECK:SPACING: spaces preferred around that '&' (ctx:BxO)
#2836: FILE: include/asm-frv/uaccess.h:128:
+	typeof(&*ptr) _p = (ptr);		\
 	       ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2845: FILE: include/asm-frv/uaccess.h:137:
+extern int __put_user_bad(void);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2855: FILE: include/asm-frv/uaccess.h:147:
+#define __put_user_asm(err,x,ptr,dsize,constraint)					\
                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2855: FILE: include/asm-frv/uaccess.h:147:
+#define __put_user_asm(err,x,ptr,dsize,constraint)					\
                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2855: FILE: include/asm-frv/uaccess.h:147:
+#define __put_user_asm(err,x,ptr,dsize,constraint)					\
                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2855: FILE: include/asm-frv/uaccess.h:147:
+#define __put_user_asm(err,x,ptr,dsize,constraint)					\
                                       ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'err' - possible side-effects?
#2855: FILE: include/asm-frv/uaccess.h:147:
+#define __put_user_asm(err,x,ptr,dsize,constraint)					\
+do {											\
+	asm volatile("1:	st"dsize"%I1	%2,%M1	\n"				\
+		     "2:				\n"				\
+		     ".subsection 2			\n"				\
+		     "3:	setlos		%3,%0	\n"				\
+		     "		bra		2b	\n"				\
+		     ".previous				\n"				\
+		     ".section __ex_table,\"a\"		\n"				\
+		     "		.balign		8	\n"				\
+		     "		.long		1b,3b	\n"				\
+		     ".previous"							\
+		     : "=r" (err)							\
+		     : "m" (*__ptr(ptr)), constraint (x), "i"(-EFAULT), "0"(err)	\
+		     : "memory");							\
+} while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#2855: FILE: include/asm-frv/uaccess.h:147:
+#define __put_user_asm(err,x,ptr,dsize,constraint)					\
+do {											\
+	asm volatile("1:	st"dsize"%I1	%2,%M1	\n"				\
+		     "2:				\n"				\
+		     ".subsection 2			\n"				\
+		     "3:	setlos		%3,%0	\n"				\
+		     "		bra		2b	\n"				\
+		     ".previous				\n"				\
+		     ".section __ex_table,\"a\"		\n"				\
+		     "		.balign		8	\n"				\
+		     "		.long		1b,3b	\n"				\
+		     ".previous"							\
+		     : "=r" (err)							\
+		     : "m" (*__ptr(ptr)), constraint (x), "i"(-EFAULT), "0"(err)	\
+		     : "memory");							\
+} while (0)

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#2857: FILE: include/asm-frv/uaccess.h:149:
+	asm volatile("1:	st"dsize"%I1	%2,%M1	\n"				\

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#2857: FILE: include/asm-frv/uaccess.h:149:
+	asm volatile("1:	st"dsize"%I1	%2,%M1	\n"				\

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#2858: FILE: include/asm-frv/uaccess.h:150:
+		     "2:				\n"				\

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#2859: FILE: include/asm-frv/uaccess.h:151:
+		     ".subsection 2			\n"				\

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#2860: FILE: include/asm-frv/uaccess.h:152:
+		     "3:	setlos		%3,%0	\n"				\

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#2861: FILE: include/asm-frv/uaccess.h:153:
+		     "		bra		2b	\n"				\

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#2862: FILE: include/asm-frv/uaccess.h:154:
+		     ".previous				\n"				\

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#2863: FILE: include/asm-frv/uaccess.h:155:
+		     ".section __ex_table,\"a\"		\n"				\

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#2864: FILE: include/asm-frv/uaccess.h:156:
+		     "		.balign		8	\n"				\

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#2865: FILE: include/asm-frv/uaccess.h:157:
+		     "		.long		1b,3b	\n"				\

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2874: FILE: include/asm-frv/uaccess.h:166:
+#define __put_user_asm(err,x,ptr,bwl,con)	\
                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2874: FILE: include/asm-frv/uaccess.h:166:
+#define __put_user_asm(err,x,ptr,bwl,con)	\
                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2874: FILE: include/asm-frv/uaccess.h:166:
+#define __put_user_asm(err,x,ptr,bwl,con)	\
                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2874: FILE: include/asm-frv/uaccess.h:166:
+#define __put_user_asm(err,x,ptr,bwl,con)	\
                                     ^

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#2874: FILE: include/asm-frv/uaccess.h:166:
+#define __put_user_asm(err,x,ptr,bwl,con)	\
+do {						\
+	asm("	st"bwl"%I0	%1,%M0	\n"	\
+	    "	membar			\n"	\
+	    :					\
+	    : "m" (*__ptr(ptr)), con (x)	\
+	    : "memory");			\
+} while (0)

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#2876: FILE: include/asm-frv/uaccess.h:168:
+	asm("	st"bwl"%I0	%1,%M0	\n"	\

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#2876: FILE: include/asm-frv/uaccess.h:168:
+	asm("	st"bwl"%I0	%1,%M0	\n"	\

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#2877: FILE: include/asm-frv/uaccess.h:169:
+	    "	membar			\n"	\

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2879: FILE: include/asm-frv/uaccess.h:171:
+	    : "m" (*__ptr(ptr)), con (x)	\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#2889: FILE: include/asm-frv/uaccess.h:181:
+#define __get_user(x, ptr)						\
+({									\
+	typeof(*(ptr)) __gu_val = 0;					\
+	int __gu_err = 0;						\
+									\
+	switch (sizeof(*(ptr))) {					\
+	case 1:								\
+		__get_user_asm(__gu_err, __gu_val, ptr, "ub", "=r");	\
+		break;							\
+	case 2:								\
+		__get_user_asm(__gu_err, __gu_val, ptr, "uh", "=r");	\
+		break;							\
+	case 4:								\
+		__get_user_asm(__gu_err, __gu_val, ptr, "", "=r");	\
+		break;							\
+	case 8:								\
+		__get_user_asm(__gu_err, __gu_val, ptr, "d", "=e");	\
+		break;							\
+	default:							\
+		__gu_err = __get_user_bad();				\
+		break;							\
+	}								\
+	(x) = __gu_val;							\
+	__gu_err;							\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#2915: FILE: include/asm-frv/uaccess.h:207:
+#define get_user(x, ptr)			\
+({						\
+	typeof(&*ptr) _p = (ptr);		\
+	int _e;					\
+						\
+	_e = __range_ok(_p, sizeof(*_p));	\
+	if (likely(_e == 0))			\
+		_e = __get_user((x), _p);	\
+	else					\
+		(x) = (typeof(x)) 0;		\
+	_e;					\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#2915: FILE: include/asm-frv/uaccess.h:207:
+#define get_user(x, ptr)			\
+({						\
+	typeof(&*ptr) _p = (ptr);		\
+	int _e;					\
+						\
+	_e = __range_ok(_p, sizeof(*_p));	\
+	if (likely(_e == 0))			\
+		_e = __get_user((x), _p);	\
+	else					\
+		(x) = (typeof(x)) 0;		\
+	_e;					\
+})

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'ptr' may be better as '(ptr)' to avoid precedence issues
#2915: FILE: include/asm-frv/uaccess.h:207:
+#define get_user(x, ptr)			\
+({						\
+	typeof(&*ptr) _p = (ptr);		\
+	int _e;					\
+						\
+	_e = __range_ok(_p, sizeof(*_p));	\
+	if (likely(_e == 0))			\
+		_e = __get_user((x), _p);	\
+	else					\
+		(x) = (typeof(x)) 0;		\
+	_e;					\
+})

CHECK:SPACING: spaces preferred around that '&' (ctx:BxO)
#2917: FILE: include/asm-frv/uaccess.h:209:
+	typeof(&*ptr) _p = (ptr);		\
 	       ^

CHECK:SPACING: No space is necessary after a cast
#2924: FILE: include/asm-frv/uaccess.h:216:
+		(x) = (typeof(x)) 0;		\

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2928: FILE: include/asm-frv/uaccess.h:220:
+extern int __get_user_bad(void);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2932: FILE: include/asm-frv/uaccess.h:224:
+#define __get_user_asm(err,x,ptr,dtype,constraint)	\
                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2932: FILE: include/asm-frv/uaccess.h:224:
+#define __get_user_asm(err,x,ptr,dtype,constraint)	\
                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2932: FILE: include/asm-frv/uaccess.h:224:
+#define __get_user_asm(err,x,ptr,dtype,constraint)	\
                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2932: FILE: include/asm-frv/uaccess.h:224:
+#define __get_user_asm(err,x,ptr,dtype,constraint)	\
                                       ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'err' - possible side-effects?
#2932: FILE: include/asm-frv/uaccess.h:224:
+#define __get_user_asm(err,x,ptr,dtype,constraint)	\
+do {							\
+	asm("1:		ld"dtype"%I2	%M2,%1	\n"	\
+	    "2:					\n"	\
+	    ".subsection 2			\n"	\
+	    "3:		setlos		%3,%0	\n"	\
+	    "		setlos		#0,%1	\n"	\
+	    "		bra		2b	\n"	\
+	    ".previous				\n"	\
+	    ".section __ex_table,\"a\"		\n"	\
+	    "		.balign		8	\n"	\
+	    "		.long		1b,3b	\n"	\
+	    ".previous"					\
+	    : "=r" (err), constraint (x)		\
+	    : "m" (*__ptr(ptr)), "i"(-EFAULT), "0"(err)	\
+	    );						\
+} while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#2932: FILE: include/asm-frv/uaccess.h:224:
+#define __get_user_asm(err,x,ptr,dtype,constraint)	\
+do {							\
+	asm("1:		ld"dtype"%I2	%M2,%1	\n"	\
+	    "2:					\n"	\
+	    ".subsection 2			\n"	\
+	    "3:		setlos		%3,%0	\n"	\
+	    "		setlos		#0,%1	\n"	\
+	    "		bra		2b	\n"	\
+	    ".previous				\n"	\
+	    ".section __ex_table,\"a\"		\n"	\
+	    "		.balign		8	\n"	\
+	    "		.long		1b,3b	\n"	\
+	    ".previous"					\
+	    : "=r" (err), constraint (x)		\
+	    : "m" (*__ptr(ptr)), "i"(-EFAULT), "0"(err)	\
+	    );						\
+} while(0)

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#2934: FILE: include/asm-frv/uaccess.h:226:
+	asm("1:		ld"dtype"%I2	%M2,%1	\n"	\

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#2934: FILE: include/asm-frv/uaccess.h:226:
+	asm("1:		ld"dtype"%I2	%M2,%1	\n"	\

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#2935: FILE: include/asm-frv/uaccess.h:227:
+	    "2:					\n"	\

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#2936: FILE: include/asm-frv/uaccess.h:228:
+	    ".subsection 2			\n"	\

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#2937: FILE: include/asm-frv/uaccess.h:229:
+	    "3:		setlos		%3,%0	\n"	\

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#2938: FILE: include/asm-frv/uaccess.h:230:
+	    "		setlos		#0,%1	\n"	\

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#2939: FILE: include/asm-frv/uaccess.h:231:
+	    "		bra		2b	\n"	\

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#2940: FILE: include/asm-frv/uaccess.h:232:
+	    ".previous				\n"	\

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#2941: FILE: include/asm-frv/uaccess.h:233:
+	    ".section __ex_table,\"a\"		\n"	\

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#2942: FILE: include/asm-frv/uaccess.h:234:
+	    "		.balign		8	\n"	\

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#2943: FILE: include/asm-frv/uaccess.h:235:
+	    "		.long		1b,3b	\n"	\

ERROR:SPACING: space required before the open parenthesis '('
#2948: FILE: include/asm-frv/uaccess.h:240:
+} while(0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2952: FILE: include/asm-frv/uaccess.h:244:
+#define __get_user_asm(err,x,ptr,bwl,con)	\
                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2952: FILE: include/asm-frv/uaccess.h:244:
+#define __get_user_asm(err,x,ptr,bwl,con)	\
                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2952: FILE: include/asm-frv/uaccess.h:244:
+#define __get_user_asm(err,x,ptr,bwl,con)	\
                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2952: FILE: include/asm-frv/uaccess.h:244:
+#define __get_user_asm(err,x,ptr,bwl,con)	\
                                     ^

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#2953: FILE: include/asm-frv/uaccess.h:245:
+	asm("	ld"bwl"%I1	%M1,%0	\n"	\

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#2953: FILE: include/asm-frv/uaccess.h:245:
+	asm("	ld"bwl"%I1	%M1,%0	\n"	\

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#2954: FILE: include/asm-frv/uaccess.h:246:
+	    "	membar			\n"	\

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2965: FILE: include/asm-frv/uaccess.h:257:
+extern long __memset_user(void *dst, unsigned long count);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2966: FILE: include/asm-frv/uaccess.h:258:
+extern long __memcpy_user(void *dst, const void *src, unsigned long count);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2968: FILE: include/asm-frv/uaccess.h:260:
+#define clear_user(dst,count)			__memset_user((dst), (count))
                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2974: FILE: include/asm-frv/uaccess.h:266:
+#define clear_user(dst,count)			(memset((dst), 0, (count)), 0)
                       ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2983: FILE: include/asm-frv/uaccess.h:275:
+       might_sleep();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2984: FILE: include/asm-frv/uaccess.h:276:
+       return __copy_to_user_inatomic(to, from, n);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2990: FILE: include/asm-frv/uaccess.h:282:
+       might_sleep();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2991: FILE: include/asm-frv/uaccess.h:283:
+       return __copy_from_user_inatomic(to, from, n);$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#3012: FILE: include/asm-frv/uaccess.h:304:
+#define copy_to_user_ret(to,from,n,retval)	({ if (copy_to_user(to,from,n)) return retval; })
                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#3012: FILE: include/asm-frv/uaccess.h:304:
+#define copy_to_user_ret(to,from,n,retval)	({ if (copy_to_user(to,from,n)) return retval; })
                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#3012: FILE: include/asm-frv/uaccess.h:304:
+#define copy_to_user_ret(to,from,n,retval)	({ if (copy_to_user(to,from,n)) return retval; })
                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#3012: FILE: include/asm-frv/uaccess.h:304:
+#define copy_to_user_ret(to,from,n,retval)	({ if (copy_to_user(to,from,n)) return retval; })
                                           	                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#3012: FILE: include/asm-frv/uaccess.h:304:
+#define copy_to_user_ret(to,from,n,retval)	({ if (copy_to_user(to,from,n)) return retval; })
                                           	                           ^

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#3012: FILE: include/asm-frv/uaccess.h:304:
+#define copy_to_user_ret(to,from,n,retval)	({ if (copy_to_user(to,from,n)) return retval; })

ERROR:SPACING: space required after that ',' (ctx:VxV)
#3013: FILE: include/asm-frv/uaccess.h:305:
+#define copy_from_user_ret(to,from,n,retval)	({ if (copy_from_user(to,from,n)) return retval; })
                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#3013: FILE: include/asm-frv/uaccess.h:305:
+#define copy_from_user_ret(to,from,n,retval)	({ if (copy_from_user(to,from,n)) return retval; })
                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#3013: FILE: include/asm-frv/uaccess.h:305:
+#define copy_from_user_ret(to,from,n,retval)	({ if (copy_from_user(to,from,n)) return retval; })
                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#3013: FILE: include/asm-frv/uaccess.h:305:
+#define copy_from_user_ret(to,from,n,retval)	({ if (copy_from_user(to,from,n)) return retval; })
                                             	                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#3013: FILE: include/asm-frv/uaccess.h:305:
+#define copy_from_user_ret(to,from,n,retval)	({ if (copy_from_user(to,from,n)) return retval; })
                                             	                             ^

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#3013: FILE: include/asm-frv/uaccess.h:305:
+#define copy_from_user_ret(to,from,n,retval)	({ if (copy_from_user(to,from,n)) return retval; })

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3015: FILE: include/asm-frv/uaccess.h:307:
+extern long strncpy_from_user(char *dst, const char *src, long count);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3016: FILE: include/asm-frv/uaccess.h:308:
+extern long strnlen_user(const char *src, long count);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3020: FILE: include/asm-frv/uaccess.h:312:
+extern unsigned long search_exception_table(unsigned long addr);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3030: FILE: include/asm-frv/ucontext.h:1:
+#ifndef _ASM_UCONTEXT_H

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000232869.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 131 errors, 209 warnings, 151 checks, 2831 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000232869.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
