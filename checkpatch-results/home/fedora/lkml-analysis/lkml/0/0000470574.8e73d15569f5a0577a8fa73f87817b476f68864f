WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#29: 
> I was wondering whether something like a /proc/patches might be useful. This 

WARNING:TYPO_SPELLING: 'fo' may be misspelled - perhaps 'of'?
#33: 
> available at the link below. NOTE: I couldn't solve how to add entries fo a 
                                                                         ^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:LONG_LINE_COMMENT: line length of 110 exceeds 100 columns
#90: FILE: patchlist.c:48:
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,3,29) // fix me! 2.3.29 is not right even newer 2.2.x support this?

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LINUX_VERSION_CODE: LINUX_VERSION_CODE should be avoided, code should be for the version to which it is merged
#90: FILE: patchlist.c:48:
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,3,29) // fix me! 2.3.29 is not right even newer 2.2.x support this?

ERROR:SPACING: space required after that ',' (ctx:VxV)
#90: FILE: patchlist.c:48:
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,3,29) // fix me! 2.3.29 is not right even newer 2.2.x support this?
                                           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#90: FILE: patchlist.c:48:
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,3,29) // fix me! 2.3.29 is not right even newer 2.2.x support this?
                                             ^

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#90: FILE: patchlist.c:48:
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,3,29) // fix me! 2.3.29 is not right even newer 2.2.x support this?

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#101: FILE: patchlist.c:73:
+static int $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINUX_VERSION_CODE: LINUX_VERSION_CODE should be avoided, code should be for the version to which it is merged
#102: FILE: patchlist.c:74:
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,3,29)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#102: FILE: patchlist.c:74:
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,3,29)
                                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#102: FILE: patchlist.c:74:
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,3,29)
                                             ^

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#102: FILE: patchlist.c:74:
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,3,29)

ERROR:SPACING: space prohibited after that open parenthesis '('
#103: FILE: patchlist.c:75:
+patch_proc_read( char *buf, char **start, off_t offset,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#104: FILE: patchlist.c:76:
+patch_proc_read( char *buf, char **start, off_t offset,
                      int count, int *eof, void *data )

ERROR:SPACING: space prohibited after that open parenthesis '('
#106: FILE: patchlist.c:78:
+patch_proc_read( char *buf, char **start, off_t offset, int count, int unused )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#106: FILE: patchlist.c:78:
+patch_proc_read( char *buf, char **start, off_t offset, int count, int unused )

WARNING:LINUX_VERSION_CODE: LINUX_VERSION_CODE should be avoided, code should be for the version to which it is merged
#115: FILE: patchlist.c:96:
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,3,29)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#115: FILE: patchlist.c:96:
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,3,29)
                                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#115: FILE: patchlist.c:96:
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,3,29)
                                             ^

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#115: FILE: patchlist.c:96:
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,3,29)

WARNING:LINUX_VERSION_CODE: LINUX_VERSION_CODE should be avoided, code should be for the version to which it is merged
#121: FILE: patchlist.c:102:
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,3,29)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#121: FILE: patchlist.c:102:
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,3,29)
                                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#121: FILE: patchlist.c:102:
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,3,29)
                                            ^

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#121: FILE: patchlist.c:102:
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,3,29)

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#123: FILE: patchlist.c:104:
+struct proc_dir_entry proc_root_patch =
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#124: FILE: patchlist.c:105:
+      0, sizeof(PATCH_PROCPATH) - 1, PATCH_PROCPATH,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#125: FILE: patchlist.c:106:
+      S_IFREG | S_IRUGO,$

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#125: FILE: patchlist.c:106:
+      S_IFREG | S_IRUGO,

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#126: FILE: patchlist.c:107:
+      1,                    // LNK, DIR or FIL ?$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#127: FILE: patchlist.c:108:
+      0, 0,                 // uid, gid$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#128: FILE: patchlist.c:109:
+      0,                    // size$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#129: FILE: patchlist.c:110:
+      NULL,                 // inode ops$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#130: FILE: patchlist.c:111:
+      &patch_proc_read,     // get_info$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#131: FILE: patchlist.c:112:
+      NULL,                 // fill_inode$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#132: FILE: patchlist.c:113:
+      NULL,                 // next entry$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#133: FILE: patchlist.c:114:
+      NULL,                 // parent entry$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#134: FILE: patchlist.c:115:
+      NULL,                 // subdir entry$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#135: FILE: patchlist.c:116:
+      NULL,                 // void *data$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#136: FILE: patchlist.c:117:
+      NULL,                 // read_proc$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#137: FILE: patchlist.c:118:
+      NULL, ^I^I    // write_proc$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#137: FILE: patchlist.c:118:
+      NULL, ^I^I    // write_proc$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#138: FILE: patchlist.c:119:
+      NULL,                 // readlink_proc$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#139: FILE: patchlist.c:120:
+      0,                    // usage count$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#140: FILE: patchlist.c:121:
+      0,                    // delete flag$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#144: FILE: patchlist.c:125:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINUX_VERSION_CODE: LINUX_VERSION_CODE should be avoided, code should be for the version to which it is merged
#147: FILE: patchlist.c:128:
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,3,29)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#147: FILE: patchlist.c:128:
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,3,29)
                                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#147: FILE: patchlist.c:128:
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,3,29)
                                             ^

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#147: FILE: patchlist.c:128:
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,3,29)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#152: FILE: patchlist.c:133:
+    if ( proc_register (&proc_root, &proc_root_patch) < 0)$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#152: FILE: patchlist.c:133:
+    if ( proc_register (&proc_root, &proc_root_patch) < 0)

ERROR:SPACING: space prohibited after that open parenthesis '('
#152: FILE: patchlist.c:133:
+    if ( proc_register (&proc_root, &proc_root_patch) < 0)

ERROR:CODE_INDENT: code indent should use tabs where possible
#153: FILE: patchlist.c:134:
+    ^Ireturn -ERESTARTSYS;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#153: FILE: patchlist.c:134:
+    ^Ireturn -ERESTARTSYS;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#153: FILE: patchlist.c:134:
+    ^Ireturn -ERESTARTSYS;$

WARNING:LINUX_VERSION_CODE: LINUX_VERSION_CODE should be avoided, code should be for the version to which it is merged
#162: FILE: patchlist.c:144:
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,3,29)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#162: FILE: patchlist.c:144:
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,3,29)
                                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#162: FILE: patchlist.c:144:
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,3,29)
                                             ^

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#162: FILE: patchlist.c:144:
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,3,29)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#165: FILE: patchlist.c:147:
+    proc_unregister (&proc_root, proc_root_patch.low_ino);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#165: FILE: patchlist.c:147:
+    proc_unregister (&proc_root, proc_root_patch.low_ino);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000470574.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 19 errors, 40 warnings, 2 checks, 80 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000470574.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
