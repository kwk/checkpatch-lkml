WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#49: 
Signed-Off-By: Alasdair G Kergon <agk@redhat.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#78: FILE: drivers/md/dm-mpath.c:65:
+	unsigned pg_init_required;	/* pg_init needs calling? */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#137: FILE: drivers/md/dm-mpath.c:382:
+	unsigned init_required, must_queue = 0;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#174: FILE: drivers/md/dm-mpath.c:620:
+	unsigned hw_argc;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#226: FILE: drivers/md/dm-mpath.c:947:
+void dm_pg_init_complete(struct path *path, unsigned err_flags)

CHECK:BRACES: braces {} should be used on all arms of this statement
#244: FILE: drivers/md/dm-mpath.c:965:
+	if (!err_flags)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#246: FILE: drivers/md/dm-mpath.c:967:
+	else {

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#316: FILE: drivers/md/dm-mpath.c:1295:
+EXPORT_SYMBOL(dm_pg_init_complete);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#331: FILE: drivers/md/dm-mpath.h:23:
+void dm_pg_init_complete(struct path *path, unsigned err_flags);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#332: FILE: drivers/md/dm-mpath.h:24:
+ $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#332: FILE: drivers/md/dm-mpath.h:24:
+ $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#337: FILE: drivers/md/dm-hw-handler.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'hwhi->use == 0'
#381: FILE: drivers/md/dm-hw-handler.c:45:
+		if ((hwhi->use == 0) && !try_module_get(hwhi->hwht.module))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#423: FILE: drivers/md/dm-hw-handler.c:87:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:INDENTED_LABEL: labels should not be indented
#425: FILE: drivers/md/dm-hw-handler.c:89:
+      out:

CHECK:BRACES: braces {} should be used on all arms of this statement
#451: FILE: drivers/md/dm-hw-handler.c:115:
+	if (__find_hw_handler_type(hwht->name)) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#454: FILE: drivers/md/dm-hw-handler.c:118:
+	} else

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#488: FILE: drivers/md/dm-hw-handler.c:152:
+unsigned dm_scsi_err_handler(struct hw_handler *hwh, struct bio *bio)

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#492: FILE: drivers/md/dm-hw-handler.c:156:
+#if 0

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#502: FILE: drivers/md/dm-hw-handler.c:166:
+			 * So no point retrying on another path. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#518: FILE: drivers/md/dm-hw-handler.c:182:
+			 * the paths again... */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#528: FILE: drivers/md/dm-hw-handler.c:192:
+				 * becoming ready" */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#534: FILE: drivers/md/dm-hw-handler.c:198:
+			 * feature (START_UNIT). */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#537: FILE: drivers/md/dm-hw-handler.c:201:
+			 * error path? I don't think so. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#546: FILE: drivers/md/dm-hw-handler.c:210:
+	 * assume generic error condition. */

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#550: FILE: drivers/md/dm-hw-handler.c:214:
+EXPORT_SYMBOL(dm_register_hw_handler);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#551: FILE: drivers/md/dm-hw-handler.c:215:
+EXPORT_SYMBOL(dm_unregister_hw_handler);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#552: FILE: drivers/md/dm-hw-handler.c:216:
+EXPORT_SYMBOL(dm_scsi_err_handler);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#556: FILE: drivers/md/dm-hw-handler.h:1:
+/*

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#580: FILE: drivers/md/dm-hw-handler.h:25:
+typedef int (*hwh_ctr_fn) (struct hw_handler *hwh, unsigned arc, char **argv);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#583: FILE: drivers/md/dm-hw-handler.h:28:
+typedef void (*hwh_pg_init_fn) (struct hw_handler *hwh, unsigned bypassed,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#585: FILE: drivers/md/dm-hw-handler.h:30:
+typedef unsigned (*hwh_err_fn) (struct hw_handler *hwh, struct bio *bio);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#616: FILE: drivers/md/dm-hw-handler.h:61:
+unsigned dm_scsi_err_handler(struct hw_handler *hwh, struct bio *bio);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000207547.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 27 warnings, 5 checks, 543 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000207547.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
