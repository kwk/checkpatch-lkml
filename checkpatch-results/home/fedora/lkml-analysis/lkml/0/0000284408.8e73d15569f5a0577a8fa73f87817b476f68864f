WARNING:TYPO_SPELLING: 'permissons' may be misspelled - perhaps 'permissions'?
#63: 
this discards access permissons on the mapping leading to rwx protection. 
                     ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#64: 
This causes a load failure on systems where the VM cannot reserve swap space

WARNING:LONG_LINE: line length of 126 exceeds 100 columns
#147: FILE: arch/s390/kernel/binfmt_elf32.c:192:
+elf_map32 (struct file *filep, unsigned long addr, struct elf_phdr const *eppnt, int prot, int type, unsigned long total_size)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#147: FILE: arch/s390/kernel/binfmt_elf32.c:192:
+elf_map32 (struct file *filep, unsigned long addr, struct elf_phdr const *eppnt, int prot, int type, unsigned long total_size)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#166: FILE: arch/s390/kernel/binfmt_elf32.c:207:
+	if (total_size) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#170: FILE: arch/s390/kernel/binfmt_elf32.c:211:
+			do_munmap(current->mm, map_addr+size, total_size-size);
 			                               ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#170: FILE: arch/s390/kernel/binfmt_elf32.c:211:
+			do_munmap(current->mm, map_addr+size, total_size-size);
 			                                                ^

CHECK:BRACES: Unbalanced braces around else statement
#171: FILE: arch/s390/kernel/binfmt_elf32.c:212:
+	} else

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#194: FILE: arch/x86_64/ia32/ia32_aout.c:325:
+		error = do_brk(text_addr&PAGE_MASK, map_size,
 		                        ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#195: FILE: arch/x86_64/ia32/ia32_aout.c:326:
+		error = do_brk(text_addr&PAGE_MASK, map_size,
+					VM_DATA_DEFAULT_FLAGS);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#204: FILE: arch/x86_64/ia32/ia32_aout.c:362:
+			do_brk(N_TXTADDR(ex), ex.a_text+ex.a_data,
 			                               ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#205: FILE: arch/x86_64/ia32/ia32_aout.c:363:
+			do_brk(N_TXTADDR(ex), ex.a_text+ex.a_data,
+					VM_DATA_DEFAULT_FLAGS);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#215: FILE: arch/x86_64/ia32/ia32_aout.c:473:
+		do_brk(start_addr, ex.a_text + ex.a_data + ex.a_bss,
+				VM_DATA_DEFAULT_FLAGS);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#225: FILE: arch/x86_64/ia32/ia32_aout.c:498:
+		error = do_brk(start_addr + len, bss - len,
+					VM_DATA_DEFAULT_FLAGS);

WARNING:LONG_LINE: line length of 126 exceeds 100 columns
#237: FILE: arch/x86_64/ia32/ia32_binfmt.c:388:
+elf32_map (struct file *filep, unsigned long addr, struct elf_phdr const *eppnt, int prot, int type, unsigned long total_size)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#237: FILE: arch/x86_64/ia32/ia32_binfmt.c:388:
+elf32_map (struct file *filep, unsigned long addr, struct elf_phdr const *eppnt, int prot, int type, unsigned long total_size)

CHECK:BRACES: braces {} should be used on all arms of this statement
#257: FILE: arch/x86_64/ia32/ia32_binfmt.c:404:
+	if (total_size) {
[...]
+	} else
[...]

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#261: FILE: arch/x86_64/ia32/ia32_binfmt.c:408:
+			do_munmap(me->mm, map_addr+size, total_size-size);
 			                          ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#261: FILE: arch/x86_64/ia32/ia32_binfmt.c:408:
+			do_munmap(me->mm, map_addr+size, total_size-size);
 			                                           ^

CHECK:BRACES: Unbalanced braces around else statement
#262: FILE: arch/x86_64/ia32/ia32_binfmt.c:409:
+	} else

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#275: FILE: fs/binfmt_aout.c:46:
+static void set_brk(unsigned long start, unsigned long end, unsigned flags)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#305: FILE: fs/binfmt_aout.c:345:
+		error = do_brk(text_addr & PAGE_MASK, map_size,
+					VM_DATA_DEFAULT_FLAGS);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#314: FILE: fs/binfmt_aout.c:379:
+			do_brk(N_TXTADDR(ex), ex.a_text+ex.a_data,
 			                               ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#315: FILE: fs/binfmt_aout.c:380:
+			do_brk(N_TXTADDR(ex), ex.a_text+ex.a_data,
+						VM_DATA_DEFAULT_FLAGS);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#325: FILE: fs/binfmt_aout.c:416:
+	set_brk(current->mm->start_brk, current->mm->brk,
+			VM_DATA_DEFAULT_FLAGS);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#335: FILE: fs/binfmt_aout.c:483:
+		do_brk(start_addr, ex.a_text + ex.a_data + ex.a_bss,
+				VM_DATA_DEFAULT_FLAGS);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#345: FILE: fs/binfmt_aout.c:508:
+		error = do_brk(start_addr + len, bss - len,
+				VM_DATA_DEFAULT_FLAGS);

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#357: FILE: fs/binfmt_elf.c:48:
+static unsigned long elf_map (struct file *, unsigned long, struct elf_phdr const *, int, int, unsigned long);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#357: FILE: fs/binfmt_elf.c:48:
+static unsigned long elf_map (struct file *, unsigned long, struct elf_phdr const *, int, int, unsigned long);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#387: FILE: fs/binfmt_elf.c:106:
+static int do_bss_pages(unsigned long start, unsigned long end, unsigned flags)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#418: FILE: fs/binfmt_elf.c:138:
+calc_bss_inhibit(struct elf_phdr const *phdr, unsigned elf_prot)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#420: FILE: fs/binfmt_elf.c:140:
+	unsigned vm_inhib = (VM_READ|VM_WRITE|VM_EXEC) ^ calc_vm_prot_bits(elf_prot);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#420: FILE: fs/binfmt_elf.c:140:
+	unsigned vm_inhib = (VM_READ|VM_WRITE|VM_EXEC) ^ calc_vm_prot_bits(elf_prot);
 	                            ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#420: FILE: fs/binfmt_elf.c:140:
+	unsigned vm_inhib = (VM_READ|VM_WRITE|VM_EXEC) ^ calc_vm_prot_bits(elf_prot);
 	                                     ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#422: FILE: fs/binfmt_elf.c:142:
+  /* Can readonly .data have associated read+write .bss ?
+  //	if (phdr->p_filesz && !(phdr->p_flags & PF_W)) {

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:BRACES: braces {} should be used on all arms of this statement
#458: FILE: fs/binfmt_elf.c:326:
+	if (total_size) {
[...]
+	} else
[...]

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#462: FILE: fs/binfmt_elf.c:330:
+			do_munmap(current->mm, map_addr+size, total_size-size);
 			                               ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#462: FILE: fs/binfmt_elf.c:330:
+			do_munmap(current->mm, map_addr+size, total_size-size);
 			                                                ^

CHECK:BRACES: Unbalanced braces around else statement
#463: FILE: fs/binfmt_elf.c:331:
+	} else

WARNING:TABSTOP: Statements should start on a tabstop
#486: FILE: fs/binfmt_elf.c:394:
+	    unsigned long const vaddr = eppnt->p_vaddr;

WARNING:TABSTOP: Statements should start on a tabstop
#530: FILE: fs/binfmt_elf.c:427:
+	    if (elf_bss < k) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#531: FILE: fs/binfmt_elf.c:428:
+^I    ^I/* .bss: clear the low fragment; map anonymous pages. */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#531: FILE: fs/binfmt_elf.c:428:
+^I    ^I/* .bss: clear the low fragment; map anonymous pages. */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#532: FILE: fs/binfmt_elf.c:429:
+^I    ^Ielf_bss += load_addr;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#532: FILE: fs/binfmt_elf.c:429:
+^I    ^Ielf_bss += load_addr;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#534: FILE: fs/binfmt_elf.c:431:
+^I    ^I/* FIXME: !PF_W ==> must PROT_WRITE one page */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#534: FILE: fs/binfmt_elf.c:431:
+^I    ^I/* FIXME: !PF_W ==> must PROT_WRITE one page */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#535: FILE: fs/binfmt_elf.c:432:
+^I    ^Iif (eppnt->p_flags & PF_W)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#535: FILE: fs/binfmt_elf.c:432:
+^I    ^Iif (eppnt->p_flags & PF_W)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#536: FILE: fs/binfmt_elf.c:433:
+^I    ^I^Ielf_bss += padzero(elf_bss);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#536: FILE: fs/binfmt_elf.c:433:
+^I    ^I^Ielf_bss += padzero(elf_bss);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#538: FILE: fs/binfmt_elf.c:435:
+^I    ^Ierror = do_bss_pages(elf_bss, load_addr + k,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#538: FILE: fs/binfmt_elf.c:435:
+^I    ^Ierror = do_bss_pages(elf_bss, load_addr + k,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#539: FILE: fs/binfmt_elf.c:436:
+^I    ^I^I^IVM_DATA_DEFAULT_FLAGS &$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#539: FILE: fs/binfmt_elf.c:436:
+^I    ^I^I^IVM_DATA_DEFAULT_FLAGS &$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#539: FILE: fs/binfmt_elf.c:436:
+	    	error = do_bss_pages(elf_bss, load_addr + k,
+	    			VM_DATA_DEFAULT_FLAGS &

ERROR:CODE_INDENT: code indent should use tabs where possible
#541: FILE: fs/binfmt_elf.c:438:
+^I    ^Iif (error) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#541: FILE: fs/binfmt_elf.c:438:
+^I    ^Iif (error) {$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#541: FILE: fs/binfmt_elf.c:438:
+	    	if (error) {
+	    		goto out_close;
+	    	}

ERROR:CODE_INDENT: code indent should use tabs where possible
#542: FILE: fs/binfmt_elf.c:439:
+^I    ^I^Igoto out_close;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#542: FILE: fs/binfmt_elf.c:439:
+^I    ^I^Igoto out_close;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#543: FILE: fs/binfmt_elf.c:440:
+^I    ^I}$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#543: FILE: fs/binfmt_elf.c:440:
+^I    ^I}$

WARNING:TABSTOP: Statements should start on a tabstop
#544: FILE: fs/binfmt_elf.c:441:
+	    }

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#583: FILE: fs/binfmt_elf.c:489:
+	do_brk(ELF_PAGESTART(text_data + ELF_MIN_ALIGN - 1), interp_ex->a_bss,
+				VM_DATA_DEFAULT_FLAGS);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#594: FILE: fs/binfmt_elf.c:514:
+	struct elf_phdr const * elf_ppnt, *elf_phdata;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#659: FILE: fs/binfmt_elf.c:774:
+		place = elf_map(bprm->file, load_bias + vaddr, elf_ppnt, elf_prot, elf_flags, total_size);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'end_code < k'
#692: FILE: fs/binfmt_elf.c:808:
+		if ((elf_ppnt->p_flags & PF_X) && (end_code < k))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#711: FILE: fs/binfmt_elf.c:826:
+			retval = do_bss_pages(place, load_bias + k,
+				VM_DATA_DEFAULT_FLAGS &

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#739: FILE: fs/binfmt_elf.c:842:
+	current->mm->start_brk = current->mm->brk = elf_brk;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#769: FILE: include/linux/mm.h:602:
+extern unsigned long do_brk(unsigned long, unsigned long, unsigned int);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#769: FILE: include/linux/mm.h:602:
+extern unsigned long do_brk(unsigned long, unsigned long, unsigned int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#769: FILE: include/linux/mm.h:602:
+extern unsigned long do_brk(unsigned long, unsigned long, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#769: FILE: include/linux/mm.h:602:
+extern unsigned long do_brk(unsigned long, unsigned long, unsigned int);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#781: FILE: mm/mmap.c:135:
+	if (do_brk(oldbrk, newbrk-oldbrk, VM_DATA_DEFAULT_FLAGS) != oldbrk)
 	                         ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#790: FILE: mm/mmap.c:1381:
+unsigned long do_brk(unsigned long addr, unsigned long len, unsigned _flags)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#819: FILE: mm/nommu.c:538:
+unsigned long do_brk(unsigned long addr, unsigned long len, unsigned flags)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#831: FILE: arch/sparc64/kernel/sys_sunos32.c:176:
+	do_brk(oldbrk, newbrk-oldbrk, VM_DATA_DEFAULT_FLAGS);
 	                     ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#843: FILE: arch/ia64/ia32/binfmt_elf32.c:223:
+elf32_map (struct file *filep, unsigned long addr, struct elf_phdr const *eppnt,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#844: FILE: arch/ia64/ia32/binfmt_elf32.c:224:
+elf32_map (struct file *filep, unsigned long addr, struct elf_phdr const *eppnt,
+		int prot, int type, unsigned long total_size)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#856: FILE: arch/ia64/kernel/sys_ia64.c:150:
+	if (do_brk(oldbrk, newbrk-oldbrk, VM_DATA_DEFAULT_FLAGS) != oldbrk)
 	                         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#895: FILE: arch/mips/kernel/irixelf.c:859:
+		do_brk(len, bss-len, VM_DATA_DEFAULT_FLAGS);
 		               ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#907: FILE: arch/mips/kernel/sysirix.c:589:
+	do_brk(oldbrk, newbrk-oldbrk, VM_DATA_DEFAULT_FLAGS);
 	                     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#941: FILE: arch/sparc64/kernel/binfmt_aout32.c:261:
+			ex.a_text+ex.a_data + PAGE_SIZE - 1,
 			         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#951: FILE: arch/sparc64/kernel/binfmt_aout32.c:276:
+			do_brk(0, ex.a_text+ex.a_data, VM_DATA_DEFAULT_FLAGS);
 			                   ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#961: FILE: arch/sparc64/kernel/binfmt_aout32.c:393:
+		error = do_brk(start_addr + len, bss - len,
+				VM_DATA_DEFAULT_FLAGS);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#973: FILE: arch/sparc/kernel/sys_sunos.c:210:
+	do_brk(oldbrk, newbrk-oldbrk, VM_DATA_DEFAULT_FLAGS);
 	                     ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000284408.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 11 errors, 34 warnings, 42 checks, 741 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000284408.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
