WARNING:TYPO_SPELLING: 'Everytime' may be misspelled - perhaps 'Every time'?
#38: 
Everytime someone maps a page with write back or write combining
^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#45: 
MAKE_GLOBAL(_PAGE_KERNEL | _PAGE_PWT) for write combining if you really need 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#82: FILE: arch/i386/mm/pageattr.c:1:
+/* $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#82: FILE: arch/i386/mm/pageattr.c:1:
+/* 

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#83: FILE: arch/i386/mm/pageattr.c:2:
+ * Copyright 2002 Andi Kleen, SuSE Labs. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#85: FILE: arch/i386/mm/pageattr.c:4:
+ */ $

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/uaccess.h> instead of <asm/uaccess.h>
#92: FILE: arch/i386/mm/pageattr.c:11:
+#include <asm/uaccess.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/processor.h> instead of <asm/processor.h>
#93: FILE: arch/i386/mm/pageattr.c:12:
+#include <asm/processor.h>

WARNING:TYPO_SPELLING: 'appropiate' may be misspelled - perhaps 'appropriate'?
#95: FILE: arch/i386/mm/pageattr.c:14:
+/* Should move most of this stuff into the appropiate includes */
                                            ^^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#96: FILE: arch/i386/mm/pageattr.c:15:
+#define PAGE_LARGE (_PAGE_PSE|_PAGE_PRESENT) $

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#96: FILE: arch/i386/mm/pageattr.c:15:
+#define PAGE_LARGE (_PAGE_PSE|_PAGE_PRESENT) 
                              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#97: FILE: arch/i386/mm/pageattr.c:16:
+#define LARGE_PAGE_MASK (~(LARGE_PAGE_SIZE-1))
                                           ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#98: FILE: arch/i386/mm/pageattr.c:17:
+#define LARGE_PAGE_SIZE (1UL << PMD_SHIFT)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#100: FILE: arch/i386/mm/pageattr.c:19:
+static inline pte_t *lookup_address(unsigned long address) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#101: FILE: arch/i386/mm/pageattr.c:20:
+{ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#102: FILE: arch/i386/mm/pageattr.c:21:
+^Ipmd_t *pmd;^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#103: FILE: arch/i386/mm/pageattr.c:22:
+^Ipgd_t *pgd = pgd_offset(&init_mm, address); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#106: FILE: arch/i386/mm/pageattr.c:25:
+^I^Ireturn (pte_t *)pgd; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#107: FILE: arch/i386/mm/pageattr.c:26:
+^Ipmd = pmd_offset(pgd, address); ^I       $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#107: FILE: arch/i386/mm/pageattr.c:26:
+^Ipmd = pmd_offset(pgd, address); ^I       $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#109: FILE: arch/i386/mm/pageattr.c:28:
+^I^Ireturn (pte_t *)pmd; $

ERROR:CODE_INDENT: code indent should use tabs where possible
#111: FILE: arch/i386/mm/pageattr.c:30:
+        return pte_offset(pmd, address);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#111: FILE: arch/i386/mm/pageattr.c:30:
+        return pte_offset(pmd, address);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#112: FILE: arch/i386/mm/pageattr.c:31:
+} $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#115: FILE: arch/i386/mm/pageattr.c:34:
+{ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#117: FILE: arch/i386/mm/pageattr.c:36:
+^Iint i; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#118: FILE: arch/i386/mm/pageattr.c:37:
+^Ipte_t *base = (pte_t *) __get_free_page(GFP_KERNEL); $

CHECK:SPACING: No space is necessary after a cast
#118: FILE: arch/i386/mm/pageattr.c:37:
+	pte_t *base = (pte_t *) __get_free_page(GFP_KERNEL); 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#119: FILE: arch/i386/mm/pageattr.c:38:
+^Iif (!base) $

WARNING:LINE_SPACING: Missing a blank line after declarations
#119: FILE: arch/i386/mm/pageattr.c:38:
+	pte_t *base = (pte_t *) __get_free_page(GFP_KERNEL); 
+	if (!base) 

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#121: FILE: arch/i386/mm/pageattr.c:40:
+^IBUG_ON(atomic_read(&virt_to_page(base)->count) != 1); ^I$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#121: FILE: arch/i386/mm/pageattr.c:40:
+^IBUG_ON(atomic_read(&virt_to_page(base)->count) != 1); ^I$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#121: FILE: arch/i386/mm/pageattr.c:40:
+	BUG_ON(atomic_read(&virt_to_page(base)->count) != 1); 	

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:TRAILING_WHITESPACE: trailing whitespace
#123: FILE: arch/i386/mm/pageattr.c:42:
+^Iaddr = address & LARGE_PAGE_MASK; $

WARNING:BRACES: braces {} are not necessary for single statement blocks
#124: FILE: arch/i386/mm/pageattr.c:43:
+	for (i = 0; i < PTRS_PER_PTE; i++, addr += PAGE_SIZE) {
+		base[i] = mk_pte_phys(addr, addr == address ? prot : PAGE_KERNEL);
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#128: FILE: arch/i386/mm/pageattr.c:47:
+} $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#130: FILE: arch/i386/mm/pageattr.c:49:
+static void flush_kernel_map(void * address) $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#130: FILE: arch/i386/mm/pageattr.c:49:
+static void flush_kernel_map(void * address) 

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#131: FILE: arch/i386/mm/pageattr.c:50:
+{ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#132: FILE: arch/i386/mm/pageattr.c:51:
+^Iif (boot_cpu_data.x86_model >= 4) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#133: FILE: arch/i386/mm/pageattr.c:52:
+^I^Iasm volatile("wbinvd":::"memory"); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#137: FILE: arch/i386/mm/pageattr.c:56:
+static void set_pmd_pte(pte_t *kpte, unsigned long address, pte_t pte) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#138: FILE: arch/i386/mm/pageattr.c:57:
+{ $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#139: FILE: arch/i386/mm/pageattr.c:58:
+^Iset_pte_atomic(kpte, pte); ^I/* change init_mm */$

WARNING:LINE_SPACING: Missing a blank line after declarations
#143: FILE: arch/i386/mm/pageattr.c:62:
+		struct list_head *l;
+		spin_lock(&mmlist_lock);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#144: FILE: arch/i386/mm/pageattr.c:63:
+^I^Ilist_for_each(l, &init_mm.mmlist) { $

WARNING:LINE_SPACING: Missing a blank line after declarations
#147: FILE: arch/i386/mm/pageattr.c:66:
+			pmd_t *pmd = pmd_offset(pgd_offset(mm, address), address);
+			set_pte_atomic((pte_t *)pmd, pte);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#148: FILE: arch/i386/mm/pageattr.c:67:
+^I^I} $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#155: FILE: arch/i386/mm/pageattr.c:74:
+/* no more special protections in this 2/4MB area - revert to a
+   large page again. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#155: FILE: arch/i386/mm/pageattr.c:74:
+   large page again. */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#158: FILE: arch/i386/mm/pageattr.c:77:
+^Ipte_t *linear = (pte_t *) $

CHECK:SPACING: No space is necessary after a cast
#158: FILE: arch/i386/mm/pageattr.c:77:
+	pte_t *linear = (pte_t *) 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#161: FILE: arch/i386/mm/pageattr.c:80:
+	set_pmd_pte(linear,  address,
+		mk_pte_phys(__pa(address & LARGE_PAGE_MASK),

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#162: FILE: arch/i386/mm/pageattr.c:81:
+			    __pgprot(_KERNPG_TABLE|_PAGE_PSE)));
 			                          ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#163: FILE: arch/i386/mm/pageattr.c:82:
+^I__free_page(kpte_page); ^I^I^I   $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#163: FILE: arch/i386/mm/pageattr.c:82:
+^I__free_page(kpte_page); ^I^I^I   $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#164: FILE: arch/i386/mm/pageattr.c:83:
+}^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#165: FILE: arch/i386/mm/pageattr.c:84:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#165: FILE: arch/i386/mm/pageattr.c:84:
+ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#173: FILE: arch/i386/mm/pageattr.c:92:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#178: FILE: arch/i386/mm/pageattr.c:97:
+int change_page_attr(struct page *page, pgprot_t prot) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#179: FILE: arch/i386/mm/pageattr.c:98:
+{ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#180: FILE: arch/i386/mm/pageattr.c:99:
+^Iint err; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#181: FILE: arch/i386/mm/pageattr.c:100:
+^Ipte_t *kpte, *split; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#187: FILE: arch/i386/mm/pageattr.c:106:
+^Iif (page >= highmem_start_page) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#188: FILE: arch/i386/mm/pageattr.c:107:
+^I^Ireturn 0; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#193: FILE: arch/i386/mm/pageattr.c:112:
+^Idown_write(&init_mm.mmap_sem); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#196: FILE: arch/i386/mm/pageattr.c:115:
+^Iif (pgprot_val(prot) != pgprot_val(PAGE_KERNEL)) { $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#197: FILE: arch/i386/mm/pageattr.c:116:
+^I^Iif ((pte_val(*kpte) & _PAGE_PSE) == 0) { $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#199: FILE: arch/i386/mm/pageattr.c:118:
+^I^I^Ipte_t standard = mk_pte(page, PAGE_KERNEL); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#200: FILE: arch/i386/mm/pageattr.c:119:
+^I^I$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#204: FILE: arch/i386/mm/pageattr.c:123:
+			 * lost.  */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#205: FILE: arch/i386/mm/pageattr.c:124:
+^I^I^Iset_pte_atomic(kpte, mk_pte(page, prot)); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#206: FILE: arch/i386/mm/pageattr.c:125:
+^I^I^Iif (!memcmp(&old,&standard,sizeof(pte_t))) $

ERROR:SPACING: space required after that ',' (ctx:VxO)
#206: FILE: arch/i386/mm/pageattr.c:125:
+			if (!memcmp(&old,&standard,sizeof(pte_t))) 
 			                ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#206: FILE: arch/i386/mm/pageattr.c:125:
+			if (!memcmp(&old,&standard,sizeof(pte_t))) 
 			                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#206: FILE: arch/i386/mm/pageattr.c:125:
+			if (!memcmp(&old,&standard,sizeof(pte_t))) 
 			                          ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#209: FILE: arch/i386/mm/pageattr.c:128:
+^I^I^Ierr = -ENOMEM; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#210: FILE: arch/i386/mm/pageattr.c:129:
+^I^I^Isplit = split_large_page(address, prot); $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#213: FILE: arch/i386/mm/pageattr.c:132:
+			set_pmd_pte(kpte,address,
 			                ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#215: FILE: arch/i386/mm/pageattr.c:134:
+^I^I}^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#216: FILE: arch/i386/mm/pageattr.c:135:
+^I} else if ((pte_val(*kpte) & _PAGE_PSE) == 0) { $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#218: FILE: arch/i386/mm/pageattr.c:137:
+^I^Iatomic_dec(&kpte_page->count); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#221: FILE: arch/i386/mm/pageattr.c:140:
+#ifdef CONFIG_SMP $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#223: FILE: arch/i386/mm/pageattr.c:142:
+#endif^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#225: FILE: arch/i386/mm/pageattr.c:144:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#226: FILE: arch/i386/mm/pageattr.c:145:
+^Iif (test_bit(X86_FEATURE_PSE, &boot_cpu_data.x86_capability) && $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#231: FILE: arch/i386/mm/pageattr.c:150:
+^Iup_write(&init_mm.mmap_sem); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#233: FILE: arch/i386/mm/pageattr.c:152:
+} $

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#235: FILE: arch/i386/mm/pageattr.c:154:
+EXPORT_SYMBOL(change_page_attr);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#261: FILE: drivers/char/agp/agpgart_be.c:582:
+^Ifor (page = virt_to_page(table); page <= virt_to_page(table_end); page++) { $

CHECK:ARCH_DEFINES: architecture specific defines should be avoided
#296: FILE: drivers/char/agp/agpgart_be.c:765:
+#ifdef __i386__

Architecture specific defines should be avoided wherever
possible.

CHECK:ARCH_DEFINES: architecture specific defines should be avoided
#307: FILE: drivers/char/agp/agpgart_be.c:785:
+#ifdef __i386__

ERROR:TRAILING_WHITESPACE: trailing whitespace
#310: FILE: drivers/char/agp/agpgart_be.c:788:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#311: FILE: drivers/char/agp/agpgart_be.c:789:
+	
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#329: FILE: drivers/char/agp/agpgart_be.c:2247:
+^Ichange_page_attr(virt_to_page(page_map->real), PAGE_KERNEL_NOCACHE); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#330: FILE: drivers/char/agp/agpgart_be.c:2248:
+^Ipage_map->remapped = page_map->real; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#351: FILE: drivers/char/agp/agpgart_be.c:2740:
+^Iunsigned long p = agp_generic_alloc_page(); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#352: FILE: drivers/char/agp/agpgart_be.c:2741:
+^Iif (!p) $

WARNING:LINE_SPACING: Missing a blank line after declarations
#352: FILE: drivers/char/agp/agpgart_be.c:2741:
+	unsigned long p = agp_generic_alloc_page(); 
+	if (!p) 

ERROR:SPACING: space required after that ',' (ctx:VxV)
#435: FILE: include/asm-i386/pgtable-3level.h:56:
+#define set_pte_atomic(pteptr,pteval) \
                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#436: FILE: include/asm-i386/pgtable-3level.h:57:
+		set_64bit((unsigned long long *)(pteptr),pte_val(pteval))
 		                                        ^

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#449: FILE: include/asm-i386/pgtable.h:351:
+int change_page_attr(struct page *, pgprot_t prot);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000450169.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 70 errors, 21 warnings, 12 checks, 353 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000450169.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
