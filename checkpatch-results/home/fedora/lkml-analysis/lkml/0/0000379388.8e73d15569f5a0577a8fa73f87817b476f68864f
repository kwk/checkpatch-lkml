WARNING:LEADING_SPACE: please, no spaces at the start of a line
#104: FILE: fs/proc/base.c:89:
+  E(PROC_PID_ATTR,^I"attr",^I^IS_IFDIR|S_IRUGO|S_IXUGO),$

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#104: FILE: fs/proc/base.c:89:
+  E(PROC_PID_ATTR,	"attr",		S_IFDIR|S_IRUGO|S_IXUGO),
                   	       		       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#104: FILE: fs/proc/base.c:89:
+  E(PROC_PID_ATTR,	"attr",		S_IFDIR|S_IRUGO|S_IXUGO),
                   	       		               ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO|S_IXUGO' are not preferred. Consider using octal permissions '0555'.
#104: FILE: fs/proc/base.c:89:
+  E(PROC_PID_ATTR,	"attr",		S_IFDIR|S_IRUGO|S_IXUGO),

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#110: FILE: fs/proc/base.c:95:
 };
+static struct pid_entry attr_stuff[] = {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#111: FILE: fs/proc/base.c:96:
+  E(PROC_PID_ATTR_CURRENT,^I"current",^IS_IFREG|S_IRUGO|S_IWUSR),$

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#111: FILE: fs/proc/base.c:96:
+  E(PROC_PID_ATTR_CURRENT,	"current",	S_IFREG|S_IRUGO|S_IWUSR),
                           	          	       ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#111: FILE: fs/proc/base.c:96:
+  E(PROC_PID_ATTR_CURRENT,	"current",	S_IFREG|S_IRUGO|S_IWUSR),
                           	          	               ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO|S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#111: FILE: fs/proc/base.c:96:
+  E(PROC_PID_ATTR_CURRENT,	"current",	S_IFREG|S_IRUGO|S_IWUSR),

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#112: FILE: fs/proc/base.c:97:
+  E(PROC_PID_ATTR_EXEC,^I^I"exec",^I^IS_IFREG|S_IRUGO|S_IWUSR),$

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#112: FILE: fs/proc/base.c:97:
+  E(PROC_PID_ATTR_EXEC,		"exec",		S_IFREG|S_IRUGO|S_IWUSR),
                        		       		       ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#112: FILE: fs/proc/base.c:97:
+  E(PROC_PID_ATTR_EXEC,		"exec",		S_IFREG|S_IRUGO|S_IWUSR),
                        		       		               ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO|S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#112: FILE: fs/proc/base.c:97:
+  E(PROC_PID_ATTR_EXEC,		"exec",		S_IFREG|S_IRUGO|S_IWUSR),

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#113: FILE: fs/proc/base.c:98:
+  E(PROC_PID_ATTR_FSCREATE,^I"fscreate",^IS_IFREG|S_IRUGO|S_IWUSR),$

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#113: FILE: fs/proc/base.c:98:
+  E(PROC_PID_ATTR_FSCREATE,	"fscreate",	S_IFREG|S_IRUGO|S_IWUSR),
                            	           	       ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#113: FILE: fs/proc/base.c:98:
+  E(PROC_PID_ATTR_FSCREATE,	"fscreate",	S_IFREG|S_IRUGO|S_IWUSR),
                            	           	               ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO|S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#113: FILE: fs/proc/base.c:98:
+  E(PROC_PID_ATTR_FSCREATE,	"fscreate",	S_IFREG|S_IRUGO|S_IWUSR),

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#114: FILE: fs/proc/base.c:99:
+  {0,0,NULL,0}$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#114: FILE: fs/proc/base.c:99:
+  {0,0,NULL,0}
     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#114: FILE: fs/proc/base.c:99:
+  {0,0,NULL,0}
       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#114: FILE: fs/proc/base.c:99:
+  {0,0,NULL,0}
            ^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#123: FILE: fs/proc/base.c:975:
+static int proc_attr_readdir(struct file * filp,
                                            ^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#123: FILE: fs/proc/base.c:975:
+static int proc_attr_readdir(struct file * filp,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#124: FILE: fs/proc/base.c:976:
+static int proc_attr_readdir(struct file * filp,
+	void * dirent, filldir_t filldir)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#124: FILE: fs/proc/base.c:976:
+	void * dirent, filldir_t filldir)

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#140: FILE: fs/proc/base.c:992:
+	switch (i) {
+		case 0:
[...]
+		case 1:
[...]
+		default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#146: FILE: fs/proc/base.c:998:
+			/* fall through */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#153: FILE: fs/proc/base.c:1005:
+			/* fall through */

WARNING:ARRAY_SIZE: Prefer ARRAY_SIZE(attr_stuff)
#156: FILE: fs/proc/base.c:1008:
+			if (i>=sizeof(attr_stuff)/sizeof(attr_stuff[0])) {

The ARRAY_SIZE(foo) macro should be preferred over
sizeof(foo)/sizeof(foo[0]) for finding number of elements in an
array.

The macro is defined in include/linux/kernel.h::

  #define ARRAY_SIZE(x) (sizeof(x) / sizeof((x)[0]))

ERROR:SPACING: spaces required around that '>=' (ctx:VxV)
#156: FILE: fs/proc/base.c:1008:
+			if (i>=sizeof(attr_stuff)/sizeof(attr_stuff[0])) {
 			     ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#156: FILE: fs/proc/base.c:1008:
+			if (i>=sizeof(attr_stuff)/sizeof(attr_stuff[0])) {
 			                         ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#179: FILE: fs/proc/base.c:1031:
+	return security_getprocattr(task, #name , buffer, count); \
 	                                        ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#186: FILE: fs/proc/base.c:1038:
+static ssize_t proc_pid_attr_read(struct file * file, char * buf,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#186: FILE: fs/proc/base.c:1038:
+static ssize_t proc_pid_attr_read(struct file * file, char * buf,

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#188: FILE: fs/proc/base.c:1040:
+				  int (*attr_read)(struct task_struct *task, char *page, size_t count))

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#190: FILE: fs/proc/base.c:1042:
+	struct inode * inode = file->f_dentry->d_inode;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#198: FILE: fs/proc/base.c:1050:
+	if (!(page = __get_free_page(GFP_KERNEL)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#201: FILE: fs/proc/base.c:1053:
+	length = attr_read(task, (char*)page, count);

CHECK:SPACING: No space is necessary after a cast
#214: FILE: fs/proc/base.c:1066:
+	copy_to_user(buf, (char *) page + *ppos, count);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#221: FILE: fs/proc/base.c:1073:
+static ssize_t proc_pid_attr_read##name(struct file * file, \

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#222: FILE: fs/proc/base.c:1074:
+					char * buf, \

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#235: FILE: fs/proc/base.c:1087:
+	return security_setprocattr(task, #name , buffer, count); \
 	                                        ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#242: FILE: fs/proc/base.c:1094:
+static ssize_t proc_pid_attr_write(struct file * file, const char * buf,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#242: FILE: fs/proc/base.c:1094:
+static ssize_t proc_pid_attr_write(struct file * file, const char * buf,

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#244: FILE: fs/proc/base.c:1096:
+				   int (*attr_write)(struct task_struct *task, char *page, size_t count))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#245: FILE: fs/proc/base.c:1097:
+{ $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#246: FILE: fs/proc/base.c:1098:
+	struct inode * inode = file->f_dentry->d_inode;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#247: FILE: fs/proc/base.c:1099:
+^Ichar *page; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#248: FILE: fs/proc/base.c:1100:
+^Issize_t length; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#249: FILE: fs/proc/base.c:1101:
+^Istruct task_struct *task = proc_task(inode); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#251: FILE: fs/proc/base.c:1103:
+^Iif (count > PAGE_SIZE) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#252: FILE: fs/proc/base.c:1104:
+^I^Icount = PAGE_SIZE; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#257: FILE: fs/proc/base.c:1109:
+^Ipage = (char*)__get_free_page(GFP_USER); $

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#257: FILE: fs/proc/base.c:1109:
+	page = (char*)__get_free_page(GFP_USER); 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#258: FILE: fs/proc/base.c:1110:
+^Iif (!page) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#260: FILE: fs/proc/base.c:1112:
+^Ilength = -EFAULT; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#261: FILE: fs/proc/base.c:1113:
+^Iif (copy_from_user(page, buf, count)) $

CHECK:SPACING: No space is necessary after a cast
#266: FILE: fs/proc/base.c:1118:
+	free_page((unsigned long) page);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#268: FILE: fs/proc/base.c:1120:
+} $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#271: FILE: fs/proc/base.c:1123:
+static ssize_t proc_pid_attr_write##name(struct file * file, \

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#272: FILE: fs/proc/base.c:1124:
+					 const char * buf, \

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#282: FILE: fs/proc/base.c:1134:
+#define ATTROPS(name) \
+static struct file_operations proc_pid_attr_##name##_operations = { \
+	.read		= proc_pid_attr_read##name, \
+	.write		= proc_pid_attr_write##name, \
+};

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:CONST_STRUCT: struct file_operations should normally be const
#283: FILE: fs/proc/base.c:1135:
+static struct file_operations proc_pid_attr_##name##_operations = { \

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#323: FILE: fs/proc/base.c:1175:
+	switch(p->type) {
+		case PROC_PID_ATTR_CURRENT:
[...]
+		case PROC_PID_ATTR_EXEC:
[...]
+		case PROC_PID_ATTR_FSCREATE:
[...]
+		default:

ERROR:SPACING: space required before the open parenthesis '('
#323: FILE: fs/proc/base.c:1175:
+	switch(p->type) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#334: FILE: fs/proc/base.c:1186:
+			printk("procfs: impossible type (%d)",p->type);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#334: FILE: fs/proc/base.c:1186:
+			printk("procfs: impossible type (%d)",p->type);
 			                                     ^

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#335: FILE: fs/proc/base.c:1187:
+			iput(inode);
 			^^^^

WARNING:CONST_STRUCT: struct file_operations should normally be const
#348: FILE: fs/proc/base.c:1200:
+static struct file_operations proc_attr_operations = {

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#353: FILE: fs/proc/base.c:1205:
+static struct inode_operations proc_attr_inode_operations = {

ERROR:CODE_INDENT: code indent should use tabs where possible
#380: FILE: include/linux/security.h:1131:
+ ^Iint (*getprocattr)(struct task_struct *p, char *name, void *value, size_t size);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#380: FILE: include/linux/security.h:1131:
+ ^Iint (*getprocattr)(struct task_struct *p, char *name, void *value, size_t size);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#380: FILE: include/linux/security.h:1131:
+ ^Iint (*getprocattr)(struct task_struct *p, char *name, void *value, size_t size);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#381: FILE: include/linux/security.h:1132:
+ ^Iint (*setprocattr)(struct task_struct *p, char *name, void *value, size_t size);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#381: FILE: include/linux/security.h:1132:
+ ^Iint (*setprocattr)(struct task_struct *p, char *name, void *value, size_t size);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#381: FILE: include/linux/security.h:1132:
+ ^Iint (*setprocattr)(struct task_struct *p, char *name, void *value, size_t size);$

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#410: FILE: include/linux/security.h:2373:
+	return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#415: FILE: include/linux/security.h:2378:
+	return -ENOSYS;

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#430: FILE: security/dummy.c:746:
+	return -ENOSYS;

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#435: FILE: security/dummy.c:751:
+	return -ENOSYS;

ERROR:CODE_INDENT: code indent should use tabs where possible
#445: FILE: security/dummy.c:879:
+ ^Iset_to_dummy_if_null(ops, getprocattr);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#445: FILE: security/dummy.c:879:
+ ^Iset_to_dummy_if_null(ops, getprocattr);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#445: FILE: security/dummy.c:879:
+ ^Iset_to_dummy_if_null(ops, getprocattr);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#446: FILE: security/dummy.c:880:
+ ^Iset_to_dummy_if_null(ops, setprocattr);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#446: FILE: security/dummy.c:880:
+ ^Iset_to_dummy_if_null(ops, setprocattr);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#446: FILE: security/dummy.c:880:
+ ^Iset_to_dummy_if_null(ops, setprocattr);$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000379388.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 40 errors, 33 warnings, 13 checks, 344 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000379388.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
