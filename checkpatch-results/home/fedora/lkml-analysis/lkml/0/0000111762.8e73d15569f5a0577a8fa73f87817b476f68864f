WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#124: 
unsigned long find_next_zero_bit(const unsigned long *addr, unsigned long size,

WARNING:TYPO_SPELLING: 'unsinged' may be misspelled - perhaps 'unsigned'?
#197: 
unsinged long ext2_find_next_zero_bit(const unsigned long *addr,
^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#250: FILE: include/asm-generic/bitops.h:8:
+#define BITOP_LE_SWIZZLE	((BITS_PER_LONG-1) & ~0x7)
                         	               ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:INCLUDE_LINUX: Use #include <linux/cache.h> instead of <asm/cache.h>
#256: FILE: include/asm-generic/bitops.h:14:
+#include <asm/cache.h>		/* we use L1_CACHE_BYTES */

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#263: FILE: include/asm-generic/bitops.h:21:
+#  define ATOMIC_HASH(a) (&(__atomic_hash[ (((unsigned long) a)/L1_CACHE_BYTES) & (ATOMIC_HASH_SIZE-1) ]))

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: No space is necessary after a cast
#263: FILE: include/asm-generic/bitops.h:21:
+#  define ATOMIC_HASH(a) (&(__atomic_hash[ (((unsigned long) a)/L1_CACHE_BYTES) & (ATOMIC_HASH_SIZE-1) ]))

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#263: FILE: include/asm-generic/bitops.h:21:
+#  define ATOMIC_HASH(a) (&(__atomic_hash[ (((unsigned long) a)/L1_CACHE_BYTES) & (ATOMIC_HASH_SIZE-1) ]))
                                                                ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#263: FILE: include/asm-generic/bitops.h:21:
+#  define ATOMIC_HASH(a) (&(__atomic_hash[ (((unsigned long) a)/L1_CACHE_BYTES) & (ATOMIC_HASH_SIZE-1) ]))
                                                                                                    ^

ERROR:SPACING: space prohibited after that open square bracket '['
#263: FILE: include/asm-generic/bitops.h:21:
+#  define ATOMIC_HASH(a) (&(__atomic_hash[ (((unsigned long) a)/L1_CACHE_BYTES) & (ATOMIC_HASH_SIZE-1) ]))

ERROR:SPACING: space prohibited before that close square bracket ']'
#263: FILE: include/asm-generic/bitops.h:21:
+#  define ATOMIC_HASH(a) (&(__atomic_hash[ (((unsigned long) a)/L1_CACHE_BYTES) & (ATOMIC_HASH_SIZE-1) ]))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around __atomic_hash[ (((unsigned long) a)/L1_CACHE_BYTES) & (ATOMIC_HASH_SIZE-1) ]
#263: FILE: include/asm-generic/bitops.h:21:
+#  define ATOMIC_HASH(a) (&(__atomic_hash[ (((unsigned long) a)/L1_CACHE_BYTES) & (ATOMIC_HASH_SIZE-1) ]))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#268: FILE: include/asm-generic/bitops.h:26:
+ * this is the substitute */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:SPACING: space required after that ',' (ctx:VxV)
#269: FILE: include/asm-generic/bitops.h:27:
+#define _atomic_spin_lock_irqsave(l,f) do {	\
                                    ^

ERROR:SPACING: space required before the open parenthesis '('
#273: FILE: include/asm-generic/bitops.h:31:
+} while(0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#275: FILE: include/asm-generic/bitops.h:33:
+#define _atomic_spin_unlock_irqrestore(l,f) do {	\
                                         ^

ERROR:SPACING: space required before the open parenthesis '('
#279: FILE: include/asm-generic/bitops.h:37:
+} while(0)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#281: FILE: include/asm-generic/bitops.h:39:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#283: FILE: include/asm-generic/bitops.h:41:
+#  define _atomic_spin_lock_irqsave(l,f) do { local_irq_save(f); } while (0)
                                      ^

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#283: FILE: include/asm-generic/bitops.h:41:
+#  define _atomic_spin_lock_irqsave(l,f) do { local_irq_save(f); } while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

ERROR:SPACING: space required after that ',' (ctx:VxV)
#284: FILE: include/asm-generic/bitops.h:42:
+#  define _atomic_spin_unlock_irqrestore(l,f) do { local_irq_restore(f); } while (0)
                                           ^

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#284: FILE: include/asm-generic/bitops.h:42:
+#  define _atomic_spin_unlock_irqrestore(l,f) do { local_irq_restore(f); } while (0)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#303: FILE: include/asm-generic/bitops.h:53:
+static __inline__ void set_bit(int nr, volatile unsigned long *addr)

WARNING:INLINE: plain inline is preferred over __inline__
#303: FILE: include/asm-generic/bitops.h:53:
+static __inline__ void set_bit(int nr, volatile unsigned long *addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#314: FILE: include/asm-generic/bitops.h:64:
+static __inline__ void clear_bit(int nr, volatile unsigned long *addr)

WARNING:INLINE: plain inline is preferred over __inline__
#314: FILE: include/asm-generic/bitops.h:64:
+static __inline__ void clear_bit(int nr, volatile unsigned long *addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#325: FILE: include/asm-generic/bitops.h:75:
+static __inline__ void change_bit(int nr, volatile unsigned long *addr)

WARNING:INLINE: plain inline is preferred over __inline__
#325: FILE: include/asm-generic/bitops.h:75:
+static __inline__ void change_bit(int nr, volatile unsigned long *addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#336: FILE: include/asm-generic/bitops.h:86:
+static __inline__ int test_and_set_bit(int nr, volatile unsigned long *addr)

WARNING:INLINE: plain inline is preferred over __inline__
#336: FILE: include/asm-generic/bitops.h:86:
+static __inline__ int test_and_set_bit(int nr, volatile unsigned long *addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#351: FILE: include/asm-generic/bitops.h:101:
+static __inline__ int test_and_clear_bit(int nr, volatile unsigned long *addr)

WARNING:INLINE: plain inline is preferred over __inline__
#351: FILE: include/asm-generic/bitops.h:101:
+static __inline__ int test_and_clear_bit(int nr, volatile unsigned long *addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#366: FILE: include/asm-generic/bitops.h:116:
+static __inline__ int test_and_change_bit(int nr, volatile unsigned long *addr)

WARNING:INLINE: plain inline is preferred over __inline__
#366: FILE: include/asm-generic/bitops.h:116:
+static __inline__ int test_and_change_bit(int nr, volatile unsigned long *addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#385: FILE: include/asm-generic/bitops.h:135:
+static __inline__ void __set_bit(int nr, volatile unsigned long *addr)

WARNING:INLINE: plain inline is preferred over __inline__
#385: FILE: include/asm-generic/bitops.h:135:
+static __inline__ void __set_bit(int nr, volatile unsigned long *addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#393: FILE: include/asm-generic/bitops.h:143:
+static __inline__ void __clear_bit(int nr, volatile unsigned long *addr)

WARNING:INLINE: plain inline is preferred over __inline__
#393: FILE: include/asm-generic/bitops.h:143:
+static __inline__ void __clear_bit(int nr, volatile unsigned long *addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#401: FILE: include/asm-generic/bitops.h:151:
+static __inline__ void __change_bit(int nr, volatile unsigned long *addr)

WARNING:INLINE: plain inline is preferred over __inline__
#401: FILE: include/asm-generic/bitops.h:151:
+static __inline__ void __change_bit(int nr, volatile unsigned long *addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#409: FILE: include/asm-generic/bitops.h:159:
+static __inline__ int __test_and_set_bit(int nr, volatile unsigned long *addr)

WARNING:INLINE: plain inline is preferred over __inline__
#409: FILE: include/asm-generic/bitops.h:159:
+static __inline__ int __test_and_set_bit(int nr, volatile unsigned long *addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#428: FILE: include/asm-generic/bitops.h:169:
+static __inline__ int __test_and_clear_bit(int nr, volatile unsigned long *addr)

WARNING:INLINE: plain inline is preferred over __inline__
#428: FILE: include/asm-generic/bitops.h:169:
+static __inline__ int __test_and_clear_bit(int nr, volatile unsigned long *addr)

WARNING:INLINE: plain inline is preferred over __inline__
#447: FILE: include/asm-generic/bitops.h:179:
+static __inline__ int __test_and_change_bit(int nr,

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#448: FILE: include/asm-generic/bitops.h:180:
+					    volatile unsigned long *addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#458: FILE: include/asm-generic/bitops.h:190:
+static __inline__ int test_bit(int nr, __const__ volatile unsigned long *addr)

WARNING:INLINE: plain inline is preferred over __inline__
#458: FILE: include/asm-generic/bitops.h:190:
+static __inline__ int test_bit(int nr, __const__ volatile unsigned long *addr)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#460: FILE: include/asm-generic/bitops.h:192:
+	return 1UL & (addr[BITOP_WORD(nr)] >> (nr & (BITS_PER_LONG-1)));
 	                                                          ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#509: FILE: include/asm-generic/bitops.h:237:
+#define ffz(x)	__ffs(~x)

WARNING:INLINE: plain inline is preferred over __inline__
#521: FILE: include/asm-generic/bitops.h:247:
+static __inline__ int fls(int x)

WARNING:LINE_SPACING: Missing a blank line after declarations
#557: FILE: include/asm-generic/bitops.h:283:
+	__u32 h = x >> 32;
+	if (h)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#573: FILE: include/asm-generic/bitops.h:299:
+static inline unsigned long find_next_bit(const unsigned long *addr,
+				unsigned long size, unsigned long offset)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#576: FILE: include/asm-generic/bitops.h:302:
+	unsigned long result = offset & ~(BITS_PER_LONG-1);
 	                                               ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#593: FILE: include/asm-generic/bitops.h:319:
+	while (size & ~(BITS_PER_LONG-1)) {
 	                             ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#594: FILE: include/asm-generic/bitops.h:320:
+		if ((tmp = *(p++)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#616: FILE: include/asm-generic/bitops.h:342:
+static inline unsigned long find_next_zero_bit(const unsigned long *addr,
+				unsigned long size, unsigned long offset)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#619: FILE: include/asm-generic/bitops.h:345:
+	unsigned long result = offset & ~(BITS_PER_LONG-1);
 	                                               ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#636: FILE: include/asm-generic/bitops.h:362:
+	while (size & ~(BITS_PER_LONG-1)) {
 	                             ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#637: FILE: include/asm-generic/bitops.h:363:
+		if (~(tmp = *(p++)))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#736: FILE: include/asm-generic/bitops.h:461:
+
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#749: FILE: include/asm-generic/bitops.h:471:
+        unsigned int res = (w & 0x55555555) + ((w >> 1) & 0x55555555);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#749: FILE: include/asm-generic/bitops.h:471:
+        unsigned int res = (w & 0x55555555) + ((w >> 1) & 0x55555555);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#750: FILE: include/asm-generic/bitops.h:472:
+        res = (res & 0x33333333) + ((res >> 2) & 0x33333333);$

WARNING:LINE_SPACING: Missing a blank line after declarations
#750: FILE: include/asm-generic/bitops.h:472:
+        unsigned int res = (w & 0x55555555) + ((w >> 1) & 0x55555555);
+        res = (res & 0x33333333) + ((res >> 2) & 0x33333333);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#750: FILE: include/asm-generic/bitops.h:472:
+        res = (res & 0x33333333) + ((res >> 2) & 0x33333333);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#751: FILE: include/asm-generic/bitops.h:473:
+        res = (res & 0x0F0F0F0F) + ((res >> 4) & 0x0F0F0F0F);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#751: FILE: include/asm-generic/bitops.h:473:
+        res = (res & 0x0F0F0F0F) + ((res >> 4) & 0x0F0F0F0F);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#752: FILE: include/asm-generic/bitops.h:474:
+        res = (res & 0x00FF00FF) + ((res >> 8) & 0x00FF00FF);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#752: FILE: include/asm-generic/bitops.h:474:
+        res = (res & 0x00FF00FF) + ((res >> 8) & 0x00FF00FF);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#753: FILE: include/asm-generic/bitops.h:475:
+        return (res & 0x0000FFFF) + ((res >> 16) & 0x0000FFFF);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#753: FILE: include/asm-generic/bitops.h:475:
+        return (res & 0x0000FFFF) + ((res >> 16) & 0x0000FFFF);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#758: FILE: include/asm-generic/bitops.h:480:
+        unsigned int res = (w & 0x5555) + ((w >> 1) & 0x5555);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#758: FILE: include/asm-generic/bitops.h:480:
+        unsigned int res = (w & 0x5555) + ((w >> 1) & 0x5555);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#759: FILE: include/asm-generic/bitops.h:481:
+        res = (res & 0x3333) + ((res >> 2) & 0x3333);$

WARNING:LINE_SPACING: Missing a blank line after declarations
#759: FILE: include/asm-generic/bitops.h:481:
+        unsigned int res = (w & 0x5555) + ((w >> 1) & 0x5555);
+        res = (res & 0x3333) + ((res >> 2) & 0x3333);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#759: FILE: include/asm-generic/bitops.h:481:
+        res = (res & 0x3333) + ((res >> 2) & 0x3333);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#760: FILE: include/asm-generic/bitops.h:482:
+        res = (res & 0x0F0F) + ((res >> 4) & 0x0F0F);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#760: FILE: include/asm-generic/bitops.h:482:
+        res = (res & 0x0F0F) + ((res >> 4) & 0x0F0F);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#761: FILE: include/asm-generic/bitops.h:483:
+        return (res & 0x00FF) + ((res >> 8) & 0x00FF);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#761: FILE: include/asm-generic/bitops.h:483:
+        return (res & 0x00FF) + ((res >> 8) & 0x00FF);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#766: FILE: include/asm-generic/bitops.h:488:
+        unsigned int res = (w & 0x55) + ((w >> 1) & 0x55);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#766: FILE: include/asm-generic/bitops.h:488:
+        unsigned int res = (w & 0x55) + ((w >> 1) & 0x55);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#767: FILE: include/asm-generic/bitops.h:489:
+        res = (res & 0x33) + ((res >> 2) & 0x33);$

WARNING:LINE_SPACING: Missing a blank line after declarations
#767: FILE: include/asm-generic/bitops.h:489:
+        unsigned int res = (w & 0x55) + ((w >> 1) & 0x55);
+        res = (res & 0x33) + ((res >> 2) & 0x33);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#767: FILE: include/asm-generic/bitops.h:489:
+        res = (res & 0x33) + ((res >> 2) & 0x33);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#768: FILE: include/asm-generic/bitops.h:490:
+        return (res & 0x0F) + ((res >> 4) & 0x0F);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#768: FILE: include/asm-generic/bitops.h:490:
+        return (res & 0x0F) + ((res >> 4) & 0x0F);$

WARNING:LINE_SPACING: Missing a blank line after declarations
#781: FILE: include/asm-generic/bitops.h:503:
+	u64 res;
+	res = (w & 0x5555555555555555ul) + ((w >> 1) & 0x5555555555555555ul);

WARNING:INLINE: plain inline is preferred over __inline__
#798: FILE: include/asm-generic/bitops.h:520:
+static __inline__ int generic_test_le_bit(unsigned long nr,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#799: FILE: include/asm-generic/bitops.h:521:
+static __inline__ int generic_test_le_bit(unsigned long nr,
+				  __const__ unsigned long *addr)

WARNING:LINE_SPACING: Missing a blank line after declarations
#802: FILE: include/asm-generic/bitops.h:524:
+	__const__ unsigned char	*tmp = (__const__ unsigned char *) addr;
+	return (tmp[nr >> 3] >> (nr & 7)) & 1;

WARNING:INLINE: plain inline is preferred over __inline__
#818: FILE: include/asm-generic/bitops.h:540:
+static __inline__ int generic_test_le_bit(unsigned long nr,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#819: FILE: include/asm-generic/bitops.h:541:
+static __inline__ int generic_test_le_bit(unsigned long nr,
+				  __const__ unsigned long *addr)

CHECK:SPACING: No space is necessary after a cast
#821: FILE: include/asm-generic/bitops.h:543:
+	__const__ unsigned char	*tmp = (__const__ unsigned char *) addr;

WARNING:LINE_SPACING: Missing a blank line after declarations
#822: FILE: include/asm-generic/bitops.h:544:
+	__const__ unsigned char	*tmp = (__const__ unsigned char *) addr;
+	return (tmp[nr >> 3] >> (nr & 7)) & 1;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#841: FILE: include/asm-generic/bitops.h:563:
+static inline unsigned long ext2_swabp(const unsigned long * x)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#844: FILE: include/asm-generic/bitops.h:566:
+	return (unsigned long) __swab64p((u64 *) x);

CHECK:SPACING: No space is necessary after a cast
#846: FILE: include/asm-generic/bitops.h:568:
+	return (unsigned long) __swab32p((u32 *) x);

CHECK:SPACING: No space is necessary after a cast
#856: FILE: include/asm-generic/bitops.h:578:
+	return (unsigned long) __swab64((u64) y);

CHECK:SPACING: No space is necessary after a cast
#858: FILE: include/asm-generic/bitops.h:580:
+	return (unsigned long) __swab32((u32) y);

WARNING:INLINE: plain inline is preferred over __inline__
#864: FILE: include/asm-generic/bitops.h:586:
+static __inline__ unsigned long generic_find_next_zero_le_bit(const unsigned long *addr,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#865: FILE: include/asm-generic/bitops.h:587:
+static __inline__ unsigned long generic_find_next_zero_le_bit(const unsigned long *addr,
+				unsigned long size, unsigned long offset)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#887: FILE: include/asm-generic/bitops.h:609:
+		if (~(tmp = *(p++)))

ERROR:CODE_INDENT: code indent should use tabs where possible
#910: FILE: include/asm-generic/bitops.h:632:
+        generic_find_next_zero_le_bit((addr), (size), 0)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#910: FILE: include/asm-generic/bitops.h:632:
+        generic_find_next_zero_le_bit((addr), (size), 0)$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#912: FILE: include/asm-generic/bitops.h:634:
+#define ext2_set_bit(nr,addr)	\
                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#913: FILE: include/asm-generic/bitops.h:635:
+	generic___test_and_set_le_bit((nr),(unsigned long *)(addr))
 	                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#914: FILE: include/asm-generic/bitops.h:636:
+#define ext2_clear_bit(nr,addr)	\
                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#915: FILE: include/asm-generic/bitops.h:637:
+	generic___test_and_clear_le_bit((nr),(unsigned long *)(addr))
 	                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#917: FILE: include/asm-generic/bitops.h:639:
+#define ext2_test_bit(nr,addr)	\
                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#918: FILE: include/asm-generic/bitops.h:640:
+	generic_test_le_bit((nr),(unsigned long *)(addr))
 	                        ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lock' - possible side-effects?
#928: FILE: include/asm-generic/bitops.h:650:
+#define ext2_set_bit_atomic(lock, nr, addr)		\
+	({						\
+		int ret;				\
+		spin_lock(lock);			\
+		ret = ext2_set_bit((nr), (unsigned long *)(addr)); \
+		spin_unlock(lock);			\
+		ret;					\
+	})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lock' - possible side-effects?
#937: FILE: include/asm-generic/bitops.h:659:
+#define ext2_clear_bit_atomic(lock, nr, addr)		\
+	({						\
+		int ret;				\
+		spin_lock(lock);			\
+		ret = ext2_clear_bit((nr), (unsigned long *)(addr)); \
+		spin_unlock(lock);			\
+		ret;					\
+	})

ERROR:SPACING: space required after that ',' (ctx:VxV)
#950: FILE: include/asm-generic/bitops.h:672:
+#define minix_test_and_set_bit(nr,addr)	\
                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#951: FILE: include/asm-generic/bitops.h:673:
+	__test_and_set_bit((nr),(unsigned long *)(addr))
 	                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#952: FILE: include/asm-generic/bitops.h:674:
+#define minix_set_bit(nr,addr)		\
                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#953: FILE: include/asm-generic/bitops.h:675:
+	__set_bit((nr),(unsigned long *)(addr))
 	              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#954: FILE: include/asm-generic/bitops.h:676:
+#define minix_test_and_clear_bit(nr,addr) \
                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#955: FILE: include/asm-generic/bitops.h:677:
+	__test_and_clear_bit((nr),(unsigned long *)(addr))
 	                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#956: FILE: include/asm-generic/bitops.h:678:
+#define minix_test_bit(nr,addr)		\
                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#957: FILE: include/asm-generic/bitops.h:679:
+	test_bit((nr),(unsigned long *)(addr))
 	             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#958: FILE: include/asm-generic/bitops.h:680:
+#define minix_find_first_zero_bit(addr,size) \
                                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#959: FILE: include/asm-generic/bitops.h:681:
+	find_first_zero_bit((unsigned long *)(addr),(size))
 	                                           ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000111762.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 41 errors, 57 warnings, 25 checks, 722 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000111762.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
