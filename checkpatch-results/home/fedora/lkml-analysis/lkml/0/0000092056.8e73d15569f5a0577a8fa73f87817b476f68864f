CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#77: FILE: include/asm-i386/hypervisor.h:57:
+extern void hypervisor_callback(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#78: FILE: include/asm-i386/hypervisor.h:58:
+extern void failsafe_callback(void);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#109: FILE: include/asm-i386/mach-default/mach_setup.h:1:
+#ifndef __ASM_MACH_SETUP_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:SPACING: No space is necessary after a cast
#114: FILE: include/asm-i386/mach-default/mach_setup.h:6:
+#define MACH_LOADER_TYPE (*(unsigned char *) (PARAM+0x210))

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#114: FILE: include/asm-i386/mach-default/mach_setup.h:6:
+#define MACH_LOADER_TYPE (*(unsigned char *) (PARAM+0x210))
                                                    ^

CHECK:SPACING: No space is necessary after a cast
#115: FILE: include/asm-i386/mach-default/mach_setup.h:7:
+#define MACH_INITRD_START (*(unsigned long *) (PARAM+0x218))

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#115: FILE: include/asm-i386/mach-default/mach_setup.h:7:
+#define MACH_INITRD_START (*(unsigned long *) (PARAM+0x218))
                                                     ^

CHECK:SPACING: No space is necessary after a cast
#116: FILE: include/asm-i386/mach-default/mach_setup.h:8:
+#define MACH_INITRD_SIZE (*(unsigned long *) (PARAM+0x21c))

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#116: FILE: include/asm-i386/mach-default/mach_setup.h:8:
+#define MACH_INITRD_SIZE (*(unsigned long *) (PARAM+0x21c))
                                                    ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#124: FILE: include/asm-i386/mach-xen/mach_setup.h:1:
+#ifndef __ASM_MACH_SETUP_H

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#140: FILE: include/asm-i386/mach-xen/setup_arch_post.h:1:
+/**

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#168: FILE: include/asm-i386/mach-xen/setup_arch_post.h:29:
+	HYPERVISOR_set_callbacks(

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#181: FILE: include/asm-i386/mach-xen/setup_arch_post.h:42:
+		printk(KERN_INFO "ACPI in unprivileged domain disabled\n");

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#188: FILE: include/asm-i386/mach-xen/setup_arch_post.h:49:
+	       MAX_GUEST_CMDLINE > COMMAND_LINE_SIZE ?

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

WARNING:LINE_SPACING: Missing a blank line after declarations
#196: FILE: include/asm-i386/mach-xen/setup_arch_post.h:57:
+		extern int console_use_vt;
+		console_use_vt = 0;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#203: FILE: include/asm-i386/mach-xen/setup_arch_pre.h:1:
+

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#218: FILE: include/asm-i386/mach-xen/setup_arch_pre.h:16:
+#define ARCH_SETUP machine_specific_arch_setup();

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#219: FILE: include/asm-i386/mach-xen/setup_arch_pre.h:17:
+#define ARCH_FINAL_SETUP machine_specific_arch_final_setup();

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000092056.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 0 errors, 9 warnings, 9 checks, 159 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000092056.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
