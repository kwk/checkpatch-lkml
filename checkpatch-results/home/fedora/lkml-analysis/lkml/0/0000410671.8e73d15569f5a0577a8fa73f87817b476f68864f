WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#37: 
diff -ruNX /home/jack/.kerndiffexclude linux-2.5.48/fs/dquot.c linux-2.5.48-1-smplocks/fs/dquot.c

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#307: FILE: fs/dquot.c:275:
+ * no quota for this sb+type should be held. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:TRAILING_WHITESPACE: trailing whitespace
#331: FILE: fs/dquot.c:289:
+#ifdef __DQUOT_PARANOIA^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#334: FILE: fs/dquot.c:292:
+			BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#354: FILE: fs/dquot.c:313:
+	/* At this point any dirty dquot will definitely be written so we can clear
+	   dirty flag from info */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#354: FILE: fs/dquot.c:313:
+	   dirty flag from info */

WARNING:LONG_LINE: line length of 116 exceeds 100 columns
#389: FILE: fs/dquot.c:335:
+		if ((cnt == type || type == -1) && sb_has_quota_enabled(sb, cnt) && info_dirty(&dqopt->info[cnt])) {

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#406: FILE: fs/dquot.c:360:
 			if ((type == cnt || type == -1) && sb_has_quota_enabled(sb, cnt)
+			    && info_any_dquot_dirty(&sb_dqopt(sb)->info[cnt]))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#465: FILE: fs/dquot.c:443:
+		BUG();

ERROR:TRAILING_WHITESPACE: trailing whitespace
#469: FILE: fs/dquot.c:446:
+^I$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#508: FILE: fs/dquot.c:467:
+		BUG();

ERROR:CODE_INDENT: code indent should use tabs where possible
#545: FILE: fs/dquot.c:502:
+        if (!sb_has_quota_enabled(sb, type))$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#545: FILE: fs/dquot.c:502:
+        if (!sb_has_quota_enabled(sb, type))$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#615: FILE: fs/dquot.c:536:
+		BUG();

WARNING:LONG_LINE: line length of 140 exceeds 100 columns
#671: FILE: fs/dquot.c:607:
+				printk(KERN_WARNING "VFS: Adding dquot with dq_count %d to dispose list.\n", atomic_read(&dquot->dq_count));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#671: FILE: fs/dquot.c:607:
+				printk(KERN_WARNING "VFS: Adding dquot with dq_count %d to dispose list.\n", atomic_read(&dquot->dq_count));

WARNING:LONG_LINE_COMMENT: line length of 108 exceeds 100 columns
#683: FILE: fs/dquot.c:621:
+/* dquots are removed from inodes, no new references can be got so we are the only ones holding reference */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#880: FILE: fs/dquot.c:900:
+		if (check_bdq(inode->i_dquot[cnt], number, warn, warntype+cnt) == NO_QUOTA)
 		                                                         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#927: FILE: fs/dquot.c:932:
+		if (check_idq(inode->i_dquot[cnt], number, warntype+cnt) == NO_QUOTA)
 		                                                   ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1073: FILE: fs/dquot.c:1057:
+^I$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1183: FILE: fs/dquot.c:1195:
+	if ((error = dqopt->ops[type]->read_file_info(sb, type)) < 0) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1233: FILE: fs/dquot.c:1242:
+	if (!(dquot = dqget(sb, id, type))) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1289: FILE: fs/dquot.c:1311:
+	if (!(dquot = dqget(sb, id, type))) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1305: FILE: fs/dquot.c:1325:
+  $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1305: FILE: fs/dquot.c:1325:
+  $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#1352: FILE: fs/dquot.c:1408:
+	printk(KERN_NOTICE "VFS: Disk quotas %s\n", __DQUOT_VERSION__);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1361: FILE: fs/dquot.c:1426:
+EXPORT_SYMBOL(dq_data_lock);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

CHECK:BIT_MACRO: Prefer using the BIT macro
#1474: FILE: include/linux/quota.h:174:
+#define DQF_INFO_DIRTY (1 << DQF_INFO_DIRTY_B)	/* Is info dirty? */

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#1475: FILE: include/linux/quota.h:175:
+#define DQF_ANY_DQUOT_DIRTY (1 << DQF_ANY_DQUOT_DIRTY B)	/* Is any dquot dirty? */

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'info' - possible side-effects?
#1489: FILE: include/linux/quota.h:184:
+#define info_any_dirty(info) (info_dirty(info) || info_any_dquot_dirty(info))

CHECK:BIT_MACRO: Prefer using the BIT macro
#1508: FILE: include/linux/quota.h:208:
+#define DQ_MOD        (1 << DQ_MOD_B)	/* dquot modified since read */

CHECK:BIT_MACRO: Prefer using the BIT macro
#1509: FILE: include/linux/quota.h:209:
+#define DQ_BLKS       (1 << DQ_BLKS_B)	/* uid/gid has been warned about blk limit */

CHECK:BIT_MACRO: Prefer using the BIT macro
#1510: FILE: include/linux/quota.h:210:
+#define DQ_INODES     (1 << DQ_INODES_B)	/* uid/gid has been warned about inode limit */

CHECK:BIT_MACRO: Prefer using the BIT macro
#1511: FILE: include/linux/quota.h:211:
+#define DQ_FAKE       (1 << DQ_FAKE_B)	/* no limits only usage */

WARNING:LONG_LINE_COMMENT: line length of 163 exceeds 100 columns
#1541: FILE: include/linux/quota.h:283:
+	struct rw_semaphore dqoff_sem;		/* serialize quota_off() and quota_on() on device and ops using quota_info struct, pointers from inode to dquots */

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#1551: FILE: include/linux/quota.h:291:
+	set_bit(DQF_ANY_DQUOT_DIRTY_B, &(sb_dqopt((dquot)->dq_sb)->info[(dquot)->dq_type].dqi_flags));\

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#1570: FILE: include/linux/quota.h:297:
+#define sb_has_quota_enabled(sb, type) ((type)==USRQUOTA ? \
                                               ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'sb' - possible side-effects?
#1570: FILE: include/linux/quota.h:297:
+#define sb_has_quota_enabled(sb, type) ((type)==USRQUOTA ? \
+	(sb_dqopt(sb)->flags & DQUOT_USR_ENABLED) : (sb_dqopt(sb)->flags & DQUOT_GRP_ENABLED))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'sb' - possible side-effects?
#1574: FILE: include/linux/quota.h:300:
+#define sb_any_quota_enabled(sb) (sb_has_quota_enabled(sb, USRQUOTA) | \
+				  sb_has_quota_enabled(sb, GRPQUOTA))

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1615: FILE: include/linux/quotaops.h:69:
 	}
+	else {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#1615: FILE: include/linux/quotaops.h:69:
+	else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1638: FILE: include/linux/quotaops.h:92:
 	}
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#1638: FILE: include/linux/quotaops.h:92:
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#1670: FILE: include/linux/quotaops.h:122:
+	else {

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000410671.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 11 errors, 18 warnings, 15 checks, 1620 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000410671.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
