WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#42: 
###interrupt-off latency history

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#45: 
###preemption-off latency history

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#48: 
###wakeup latency history

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#66: FILE: kernel/latency_log.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#67: FILE: kernel/latency_log.c:2:
+ * kernel/latency_log.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#70: FILE: kernel/latency_log.c:5:
+ * interrupt-off latency and wakeup latency, it depends on $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#82: FILE: kernel/latency_log.c:17:
+#include <asm/atomic.h>

WARNING:NEW_TYPEDEFS: do not add new typedefs
#87: FILE: kernel/latency_log.c:22:
+typedef struct log_data_struct {

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#104: FILE: kernel/latency_log.c:39:
+static struct proc_dir_entry * latency_log_root = NULL;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#104: FILE: kernel/latency_log.c:39:
+static struct proc_dir_entry * latency_log_root = NULL;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#105: FILE: kernel/latency_log.c:40:
+static char * latency_log_proc_dir_root = "latency_log";

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#107: FILE: kernel/latency_log.c:42:
+static char * percpu_proc_name = "CPU";

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#111: FILE: kernel/latency_log.c:46:
+static char * interrupt_off_log_proc_dir = "interrupt_off_latency";

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#116: FILE: kernel/latency_log.c:51:
+static char * preempt_off_log_proc_dir = "preempt_off_latency";

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#121: FILE: kernel/latency_log.c:56:
+static char * wakeup_latency_log_proc_dir = "wakeup_latency";

ERROR:CODE_INDENT: code indent should use tabs where possible
#128: FILE: kernel/latency_log.c:63:
+        do_div(x, y);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#128: FILE: kernel/latency_log.c:63:
+        do_div(x, y);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#129: FILE: kernel/latency_log.c:64:
+        return x;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#129: FILE: kernel/latency_log.c:64:
+        return x;$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#134: FILE: kernel/latency_log.c:69:
+	log_data_t * my_log;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#136: FILE: kernel/latency_log.c:71:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cpu < 0'
#137: FILE: kernel/latency_log.c:72:
+	if ((cpu < 0) || (cpu >= NR_CPUS) || (latency_type <
INTERRUPT_LATENCY)
+		|| (latency_type > WAKEUP_LATENCY) || (latency < 0)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cpu >= NR_CPUS'
#137: FILE: kernel/latency_log.c:72:
+	if ((cpu < 0) || (cpu >= NR_CPUS) || (latency_type <
INTERRUPT_LATENCY)
+		|| (latency_type > WAKEUP_LATENCY) || (latency < 0)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'latency_type <
 NTERRUPT_LATENCY'
#137: FILE: kernel/latency_log.c:72:
+	if ((cpu < 0) || (cpu >= NR_CPUS) || (latency_type <
INTERRUPT_LATENCY)
+		|| (latency_type > WAKEUP_LATENCY) || (latency < 0)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'latency_type > WAKEUP_LATENCY'
#137: FILE: kernel/latency_log.c:72:
+	if ((cpu < 0) || (cpu >= NR_CPUS) || (latency_type <
INTERRUPT_LATENCY)
+		|| (latency_type > WAKEUP_LATENCY) || (latency < 0)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'latency < 0'
#137: FILE: kernel/latency_log.c:72:
+	if ((cpu < 0) || (cpu >= NR_CPUS) || (latency_type <
INTERRUPT_LATENCY)
+		|| (latency_type > WAKEUP_LATENCY) || (latency < 0)) {

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#137: FILE: kernel/latency_log.c:72:
+	if ((cpu < 0) || (cpu >= NR_CPUS) || (latency_type <

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#138: FILE: kernel/latency_log.c:72:
INTERRUPT_LATENCY)

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#139: FILE: kernel/latency_log.c:73:
+	if ((cpu < 0) || (cpu >= NR_CPUS) || (latency_type <
+		|| (latency_type > WAKEUP_LATENCY) || (latency < 0)) {

ERROR:SPACING: space required before the open parenthesis '('
#143: FILE: kernel/latency_log.c:77:
+	switch(latency_type) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BRACES: braces {} are not necessary for single statement blocks
#147: FILE: kernel/latency_log.c:81:
+		if (atomic_read(&my_log->log_mode) == 0) {
+			return;
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BRACES: braces {} are not necessary for single statement blocks
#156: FILE: kernel/latency_log.c:90:
+		if (atomic_read(&my_log->log_mode) == 0) {
+			return;
+		}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#165: FILE: kernel/latency_log.c:99:
+		if (atomic_read(&my_log->log_mode) == 0) {
+			return;
+		}

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#174: FILE: kernel/latency_log.c:108:
+	if (latency >= MAX_ENTRY_NUM) {
[...]
+	else {
[...]

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#177: FILE: kernel/latency_log.c:111:
+	}
+	else {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#177: FILE: kernel/latency_log.c:111:
+	else {

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#181: FILE: kernel/latency_log.c:115:
+	if (latency < my_log->min_lat) {
[...]
+	else if (latency > my_log->max_lat) { 
[...]

ERROR:TRAILING_WHITESPACE: trailing whitespace
#184: FILE: kernel/latency_log.c:118:
+^Ielse if (latency > my_log->max_lat) { $

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#184: FILE: kernel/latency_log.c:118:
+	}
+	else if (latency > my_log->max_lat) { 

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#195: FILE: kernel/latency_log.c:128:
+static void *l_start(struct seq_file *m, loff_t * pos)

CHECK:SPACING: No space is necessary after a cast
#199: FILE: kernel/latency_log.c:132:
+	log_data_t *my_log = (log_data_t *) m->private;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#201: FILE: kernel/latency_log.c:134:
+	if (index_ptr == NULL) {
+		return NULL;
+	}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!index_ptr"
#201: FILE: kernel/latency_log.c:134:
+	if (index_ptr == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:BRACES: braces {} are not necessary for single statement blocks
#220: FILE: kernel/latency_log.c:153:
+	if (index >= MAX_ENTRY_NUM) {
+		return NULL;
+	}

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#228: FILE: kernel/latency_log.c:161:
+static void *l_next(struct seq_file *m, void *p, loff_t * pos)

CHECK:SPACING: No space is necessary after a cast
#231: FILE: kernel/latency_log.c:164:
+	log_data_t *my_log = (log_data_t *) m->private;

CHECK:SPACING: No space is necessary after a cast
#248: FILE: kernel/latency_log.c:181:
+	int index = *(loff_t *) p;

CHECK:SPACING: No space is necessary after a cast
#249: FILE: kernel/latency_log.c:182:
+	log_data_t *my_log = (log_data_t *) m->private;

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#256: FILE: kernel/latency_log.c:189:
+static struct seq_operations latency_log_seq_op = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#273: FILE: kernel/latency_log.c:206:
+		for (j = 0; j < NR_CPUS; j++) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#274: FILE: kernel/latency_log.c:207:
+			if (entry[i][j] == NULL) {
+				continue;
+			}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!entry[i][j]"
#274: FILE: kernel/latency_log.c:207:
+			if (entry[i][j] == NULL) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#282: FILE: kernel/latency_log.c:215:
+		if (break_flags == 1) {
+			break;
+		}

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#293: FILE: kernel/latency_log.c:226:
+}
+static struct file_operations latency_log_seq_fops = {

WARNING:CONST_STRUCT: struct file_operations should normally be const
#293: FILE: kernel/latency_log.c:226:
+static struct file_operations latency_log_seq_fops = {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#310: FILE: kernel/latency_log.c:243:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#310: FILE: kernel/latency_log.c:243:
+
+	

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#314: FILE: kernel/latency_log.c:246:
+	tmp_parent_proc_dir = proc_mkdir(interrupt_off_log_proc_dir,
+	for (i = 0; i < NR_CPUS; i++) {

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#314: FILE: kernel/latency_log.c:246:
+	for (i = 0; i < NR_CPUS; i++) {

CHECK:SPACING: No space is necessary after a cast
#322: FILE: kernel/latency_log.c:253:
+		my_log = (log_data_t *) entry[INTERRUPT_LATENCY][i]->data;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#323: FILE: kernel/latency_log.c:254:
+		atomic_set(&my_log->log_mode,1);
 		                            ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#331: FILE: kernel/latency_log.c:261:
+	tmp_parent_proc_dir = proc_mkdir(preempt_off_log_proc_dir,
+	for (i = 0; i < NR_CPUS; i++) {

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#331: FILE: kernel/latency_log.c:261:
+	for (i = 0; i < NR_CPUS; i++) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#338: FILE: kernel/latency_log.c:267:
+                entry[PREEMPT_LATENCY][i]->proc_fops =$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#338: FILE: kernel/latency_log.c:267:
+                entry[PREEMPT_LATENCY][i]->proc_fops =$

CHECK:SPACING: No space is necessary after a cast
#340: FILE: kernel/latency_log.c:268:
+		my_log = (log_data_t *) entry[PREEMPT_LATENCY][i]->data;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#341: FILE: kernel/latency_log.c:269:
+^I^Iatomic_set(&my_log->log_mode,1); $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#341: FILE: kernel/latency_log.c:269:
+		atomic_set(&my_log->log_mode,1); 
 		                            ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#349: FILE: kernel/latency_log.c:276:
+	tmp_parent_proc_dir = proc_mkdir(wakeup_latency_log_proc_dir,
+	for (i = 0; i < NR_CPUS; i++) {

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#349: FILE: kernel/latency_log.c:276:
+	for (i = 0; i < NR_CPUS; i++) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#354: FILE: kernel/latency_log.c:281:
+                entry[WAKEUP_LATENCY][i]->data = (void$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#354: FILE: kernel/latency_log.c:281:
+                entry[WAKEUP_LATENCY][i]->data = (void$

ERROR:CODE_INDENT: code indent should use tabs where possible
#356: FILE: kernel/latency_log.c:282:
+                entry[WAKEUP_LATENCY][i]->proc_fops =$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#356: FILE: kernel/latency_log.c:282:
+                entry[WAKEUP_LATENCY][i]->proc_fops =$

CHECK:SPACING: No space is necessary after a cast
#358: FILE: kernel/latency_log.c:283:
+		my_log = (log_data_t *) entry[WAKEUP_LATENCY][i]->data;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#359: FILE: kernel/latency_log.c:284:
+^I^Iatomic_set(&my_log->log_mode,1); $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#359: FILE: kernel/latency_log.c:284:
+		atomic_set(&my_log->log_mode,1); 
 		                            ^

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#365: FILE: kernel/latency_log.c:290:
+
+}

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#367: FILE: kernel/latency_log.c:292:
+__initcall(latency_log_init);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#381: FILE: kernel/latency.c:32:
+};
+extern void latency_log(int latency_type, int cpu, unsigned long

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#381: FILE: kernel/latency.c:32:
+extern void latency_log(int latency_type, int cpu, unsigned long

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#431: FILE: kernel/latency.c:1274:
 
+

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#475: FILE: kernel/latency.c:1330:
+	if (is_interrupt_off_timing()) {
+                	latency_type = INTERRUPT_LATENCY;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#475: FILE: kernel/latency.c:1330:
+	if (is_interrupt_off_timing()) {
+                	latency_type = INTERRUPT_LATENCY;
+	}

ERROR:CODE_INDENT: code indent should use tabs where possible
#476: FILE: kernel/latency.c:1331:
+                ^Ilatency_type = INTERRUPT_LATENCY;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#476: FILE: kernel/latency.c:1331:
+                ^Ilatency_type = INTERRUPT_LATENCY;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#476: FILE: kernel/latency.c:1331:
+                ^Ilatency_type = INTERRUPT_LATENCY;$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#479: FILE: kernel/latency.c:1334:
+	else {
+		latency_type = PREEMPT_LATENCY;
+	}

CHECK:BRACES: Unbalanced braces around else statement
#479: FILE: kernel/latency.c:1334:
+	else {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#514: FILE: kernel/latency.c:1440:
+} $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#619: FILE: lib/Kconfig.debug:152:
+^I  bucket, in the meanwhile, it also dummies up printk produced by $

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#635: FILE: lib/Kconfig.debug:183:
+config PREEMPT_OFF_LOG
+        bool "Log non-preemptible critical section latency"
+        default n
+        depends on CRITICAL_PREEMPT_TIMING
+        help
+          This option logs all the non-preemptible critical section

Kconfig symbols should have a help text which fully describes
it.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#642: FILE: lib/Kconfig.debug:189:
+^I  timing to a big histogram bucket, in the meanwhile, it also $

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#661: FILE: lib/Kconfig.debug:216:
+config INTERRUPT_OFF_LOG
+        bool "Log interrupts-off critical section latency"
+        default n
+        depends on CRITICAL_IRQSOFF_TIMING
+        help
+          This option logs all the interrupts-off critical section

ERROR:TRAILING_WHITESPACE: trailing whitespace
#668: FILE: lib/Kconfig.debug:222:
+          timing to a big histogram bucket, in the meanwhile, it also $

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000167373.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 32 errors, 37 warnings, 26 checks, 608 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000167373.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
