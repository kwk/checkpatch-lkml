WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#79: FILE: arch/i386/kernel/crash_dump.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/processor.h> instead of <asm/processor.h>
#95: FILE: arch/i386/kernel/crash_dump.c:17:
+#include <asm/processor.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/nmi.h> instead of <asm/nmi.h>
#97: FILE: arch/i386/kernel/crash_dump.c:19:
+#include <asm/nmi.h>

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#106: FILE: arch/i386/kernel/crash_dump.c:28:
+extern void crash_dump_send_ipi(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#107: FILE: arch/i386/kernel/crash_dump.c:29:
+extern void stop_this_cpu(void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#107: FILE: arch/i386/kernel/crash_dump.c:29:
+extern void stop_this_cpu(void *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#126: FILE: arch/i386/kernel/crash_dump.c:48:
+	int other_cpus = num_online_cpus()-1;
 	                                  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#131: FILE: arch/i386/kernel/crash_dump.c:53:
+		for (i = 0; i < NR_CPUS; i++)

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#165: FILE: arch/i386/kernel/crash_dump.c:87:
+	__asm__ __volatile__("movw %%ss, %%ax;" :"=a"(regs->xss));
 	                                        ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#166: FILE: arch/i386/kernel/crash_dump.c:88:
+	__asm__ __volatile__("movw %%cs, %%ax;" :"=a"(regs->xcs));
 	                                        ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#167: FILE: arch/i386/kernel/crash_dump.c:89:
+	__asm__ __volatile__("movw %%ds, %%ax;" :"=a"(regs->xds));
 	                                        ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#168: FILE: arch/i386/kernel/crash_dump.c:90:
+	__asm__ __volatile__("movw %%es, %%ax;" :"=a"(regs->xes));
 	                                        ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#169: FILE: arch/i386/kernel/crash_dump.c:91:
+	__asm__ __volatile__("pushfl; popl %0" :"=m"(regs->eflags));
 	                                       ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxO)
#209: FILE: arch/i386/kernel/smp.c:147:
+		cfg = (cfg&~APIC_VECTOR_MASK)|APIC_DM_NMI;
 		          ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#209: FILE: arch/i386/kernel/smp.c:147:
+		cfg = (cfg&~APIC_VECTOR_MASK)|APIC_DM_NMI;
 		                             ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxO)
#219: FILE: arch/i386/kernel/smp.c:228:
+				cfg = (cfg&~APIC_VECTOR_MASK)|APIC_DM_NMI;
 				          ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#219: FILE: arch/i386/kernel/smp.c:228:
+				cfg = (cfg&~APIC_VECTOR_MASK)|APIC_DM_NMI;
 				                             ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#241: FILE: arch/i386/kernel/smp.c:579:
+void stop_this_cpu (void * dummy)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#241: FILE: arch/i386/kernel/smp.c:579:
+void stop_this_cpu (void * dummy)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#262: FILE: include/asm-i386/crash_dump.h:15:
+extern void crash_dump_save_this_cpu(struct pt_regs *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#262: FILE: include/asm-i386/crash_dump.h:15:
+extern void crash_dump_save_this_cpu(struct pt_regs *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#262: FILE: include/asm-i386/crash_dump.h:15:
+extern void crash_dump_save_this_cpu(struct pt_regs *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#263: FILE: include/asm-i386/crash_dump.h:16:
+extern void __crash_dump_stop_cpus(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#264: FILE: include/asm-i386/crash_dump.h:17:
+extern void crash_get_current_regs(struct pt_regs *regs);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#302: FILE: include/asm-i386/crash_dump.h:71:
+	memcpy(addr, crash_smp_regs, (sizeof(struct pt_regs)*NR_CPUS));
 	                                                    ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#302: FILE: include/asm-i386/crash_dump.h:71:
+	memcpy(addr, crash_smp_regs, (sizeof(struct pt_regs)*NR_CPUS));

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#303: FILE: include/asm-i386/crash_dump.h:72:
+	addr += sizeof(struct pt_regs)*NR_CPUS;
 	                              ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#303: FILE: include/asm-i386/crash_dump.h:72:
+	addr += sizeof(struct pt_regs)*NR_CPUS;

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#304: FILE: include/asm-i386/crash_dump.h:73:
+	memcpy(addr, crash_smp_current_task, (sizeof(long)*NR_CPUS));
 	                                                  ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#304: FILE: include/asm-i386/crash_dump.h:73:
+	memcpy(addr, crash_smp_current_task, (sizeof(long)*NR_CPUS));

ERROR:SPACING: space required before the open parenthesis '('
#312: FILE: include/asm-i386/crash_dump.h:81:
+#define crash_dump_stop_cpus() do { } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#313: FILE: include/asm-i386/crash_dump.h:82:
+#define crash_dump_save_registers() do { } while(0)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#333: FILE: include/asm-i386/smp.h:44:
+extern void stop_this_cpu(void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#333: FILE: include/asm-i386/smp.h:44:
+extern void stop_this_cpu(void *);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000249640.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 8 errors, 12 warnings, 14 checks, 239 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000249640.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
