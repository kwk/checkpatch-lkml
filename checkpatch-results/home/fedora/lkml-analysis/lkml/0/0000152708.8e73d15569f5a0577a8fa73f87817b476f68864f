CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#82: FILE: fs/nfs/callback.h:62:
+extern __be32 nfs4_callback_getattr(struct cb_getattrargs *args, struct cb_getattrres *res);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#83: FILE: fs/nfs/callback.h:63:
+extern __be32 nfs4_callback_recall(struct cb_recallargs *args, void *dummy);

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#239: FILE: fs/nfs/callback_xdr.c:173:
+static __be32 decode_getattr_args(struct svc_rqst *rqstp, struct xdr_stream *xdr, struct cb_getattrargs *args)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#251: FILE: fs/nfs/callback_xdr.c:187:
+static __be32 decode_recall_args(struct svc_rqst *rqstp, struct xdr_stream *xdr, struct cb_recallargs *args)

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#327: FILE: fs/nfs/callback_xdr.c:289:
+static __be32 encode_attr_ctime(struct xdr_stream *xdr, const uint32_t *bitmap, const struct timespec *time)

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#335: FILE: fs/nfs/callback_xdr.c:296:
+static __be32 encode_attr_mtime(struct xdr_stream *xdr, const uint32_t *bitmap, const struct timespec *time)

WARNING:LONG_LINE: line length of 113 exceeds 100 columns
#367: FILE: fs/nfs/callback_xdr.c:331:
+static __be32 encode_getattr_res(struct svc_rqst *rqstp, struct xdr_stream *xdr, const struct cb_getattrres *res)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#382: FILE: fs/nfs/callback_xdr.c:358:
+static __be32 process_op(struct svc_rqst *rqstp,
 		struct xdr_stream *xdr_in, void *argp,

ERROR:CODE_INDENT: code indent should use tabs where possible
#542: FILE: fs/nfs/nfs2xdr.c:151:
+        *p++ = (attr->ia_valid & flag) ? htonl(attr->field) : htonl(~(u32) 0)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:SPACING: No space is necessary after a cast
#542: FILE: fs/nfs/nfs2xdr.c:151:
+        *p++ = (attr->ia_valid & flag) ? htonl(attr->field) : htonl(~(u32) 0)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#542: FILE: fs/nfs/nfs2xdr.c:151:
+        *p++ = (attr->ia_valid & flag) ? htonl(attr->field) : htonl(~(u32) 0)$

CHECK:SPACING: No space is necessary after a cast
#554: FILE: fs/nfs/nfs2xdr.c:165:
+		*p++ = htonl(~(u32) 0);

CHECK:SPACING: No space is necessary after a cast
#555: FILE: fs/nfs/nfs2xdr.c:166:
+		*p++ = htonl(~(u32) 0);

CHECK:SPACING: No space is necessary after a cast
#565: FILE: fs/nfs/nfs2xdr.c:174:
+		*p++ = htonl(~(u32) 0);

CHECK:SPACING: No space is necessary after a cast
#566: FILE: fs/nfs/nfs2xdr.c:175:
+		*p++ = htonl(~(u32) 0);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#693: FILE: fs/nfs/nfs2xdr.c:422:
+	kaddr = p = kmap_atomic(*page, KM_USER0);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1032: FILE: fs/nfs/nfs3xdr.c:524:
+	kaddr = p = kmap_atomic(*page, KM_USER0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1072: FILE: fs/nfs/nfs3xdr.c:666:
+nfs3_xdr_setaclargs(struct rpc_rqst *req, __be32 *p,
                    struct nfs3_setaclargs *args)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1236: FILE: fs/nfs/nfs4_fs.h:236:
+extern __be32 *nfs4_decode_dirent(__be32 *p, struct nfs_entry *entry, int plus);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1248: FILE: fs/nfs/nfs4proc.c:63:
+extern __be32 *nfs4_decode_dirent(__be32 *p, struct nfs_entry *entry, int plus);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1266: FILE: fs/nfs/nfs4proc.c:143:
+	start = p = kmap_atomic(*readdir->pages, KM_USER0);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1280: FILE: fs/nfs/nfs4proc.c:2484:
+	p = (__be32*)sc_verifier.data;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#1366: FILE: fs/nfs/nfs4xdr.c:659:
+        __be32 *p;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1366: FILE: fs/nfs/nfs4xdr.c:659:
+        __be32 *p;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1375: FILE: fs/nfs/nfs4xdr.c:670:
+        __be32 *p;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1375: FILE: fs/nfs/nfs4xdr.c:670:
+        __be32 *p;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1537: FILE: fs/nfs/nfs4xdr.c:977:
+        __be32 *p;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1537: FILE: fs/nfs/nfs4xdr.c:977:
+        __be32 *p;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1645: FILE: fs/nfs/nfs4xdr.c:1185:
+        __be32 *p;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1645: FILE: fs/nfs/nfs4xdr.c:1185:
+        __be32 *p;$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1708: FILE: fs/nfs/nfs4xdr.c:1997:
+	uint32_t bmlen;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1898: FILE: fs/nfs/nfs4xdr.c:2366:
+	uint32_t len;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1908: FILE: fs/nfs/nfs4xdr.c:2391:
+	uint32_t len;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1918: FILE: fs/nfs/nfs4xdr.c:2416:
+	uint32_t major = 0, minor = 0;

ERROR:CODE_INDENT: code indent should use tabs where possible
#2054: FILE: fs/nfs/nfs4xdr.c:2934:
+        __be32 *p;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2054: FILE: fs/nfs/nfs4xdr.c:2934:
+        __be32 *p;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2063: FILE: fs/nfs/nfs4xdr.c:2953:
+        __be32 *p;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2063: FILE: fs/nfs/nfs4xdr.c:2953:
+        __be32 *p;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2072: FILE: fs/nfs/nfs4xdr.c:2979:
+        __be32 *p;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2072: FILE: fs/nfs/nfs4xdr.c:2979:
+        __be32 *p;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2081: FILE: fs/nfs/nfs4xdr.c:3007:
+        __be32 *p;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2081: FILE: fs/nfs/nfs4xdr.c:3007:
+        __be32 *p;$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2118: FILE: fs/nfs/nfs4xdr.c:3096:
+	kaddr = p = kmap_atomic(page, KM_USER0);

CHECK:SPACING: No space is necessary after a cast
#2119: FILE: fs/nfs/nfs4xdr.c:3097:
+	end = (__be32 *) ((char *)p + pglen + readdir->pgbase);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2176: FILE: fs/nfs/proc.c:537:
+extern __be32 * nfs_decode_dirent(__be32 *, struct nfs_entry *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument '__be32 *' should also have an identifier name
#2188: FILE: include/linux/nfs_xdr.h:748:
+	__be32 *(*decode_dirent)(__be32 *, struct nfs_entry *, int plus);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nfs_entry *' should also have an identifier name
#2188: FILE: include/linux/nfs_xdr.h:748:
+	__be32 *(*decode_dirent)(__be32 *, struct nfs_entry *, int plus);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2209: FILE: include/linux/sunrpc/xdr.h:200:
+extern void xdr_init_encode(struct xdr_stream *xdr, struct xdr_buf *buf, __be32 *p);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2210: FILE: include/linux/sunrpc/xdr.h:201:
+extern __be32 *xdr_reserve_space(struct xdr_stream *xdr, size_t nbytes);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2215: FILE: include/linux/sunrpc/xdr.h:204:
+extern void xdr_init_decode(struct xdr_stream *xdr, struct xdr_buf *buf, __be32 *p);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2216: FILE: include/linux/sunrpc/xdr.h:205:
+extern __be32 *xdr_inline_decode(struct xdr_stream *xdr, size_t nbytes);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2246: FILE: net/sunrpc/xdr.c:665:
+__be32 * xdr_reserve_space(struct xdr_stream *xdr, size_t nbytes)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2269: FILE: net/sunrpc/xdr.c:748:
+__be32 * xdr_inline_decode(struct xdr_stream *xdr, size_t nbytes)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000152708.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 13 errors, 17 warnings, 23 checks, 1976 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000152708.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
