ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#75: FILE: mm/mmap.c:673:
+	rb_node_t * rb_node;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#76: FILE: mm/mmap.c:674:
+	rb_node_t * rb_node;
+	if (!mm)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#87: FILE: mm/mmap.c:685:
+		struct vm_area_struct *vma_tmp;
+		vma_tmp = rb_entry(rb_node, struct vm_area_struct, vm_rb);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'addr < prev->vm_next->vm_end'
#93: FILE: mm/mmap.c:691:
+			if (!prev->vm_next || (addr < prev->vm_next->vm_end))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#107: FILE: mm/mmap.c:703:
+struct vm_area_struct * find_extend_vma(struct mm_struct * mm, unsigned long addr)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#107: FILE: mm/mmap.c:703:
+struct vm_area_struct * find_extend_vma(struct mm_struct * mm, unsigned long addr)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'vma->vm_start <= addr'
#113: FILE: mm/mmap.c:709:
+	if (vma && (vma->vm_start <= addr))

WARNING:BRACES: braces {} are not necessary for single statement blocks
#117: FILE: mm/mmap.c:713:
+	if (prev->vm_flags & VM_LOCKED) {
+		make_pages_present(addr, prev->vm_end);
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000449526.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 3 errors, 3 warnings, 2 checks, 99 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000449526.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
