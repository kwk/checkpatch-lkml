WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#37: 
http://opersys.com/ftp/pub/LTT/ExtraPatches/patch-ltt-linux-2.5.33-vanilla-020906-1.14.bz2

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#69: FILE: include/linux/trace.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#70: FILE: include/linux/trace.h:2:
+ * linux/include/linux/trace.h

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:REPEATED_WORD: Possible repeated word: 'the'
#75: FILE: include/linux/trace.h:7:
+ * This contains the necessary definitions for tracing the
+ * the system.

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#86: FILE: include/linux/trace.h:18:
+#if defined(CONFIG_TRACE) || defined(CONFIG_TRACE_MODULE)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#92: FILE: include/linux/trace.h:24:
+#define LTT_PACKED_STRUCT __attribute__ ((packed))

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#92: FILE: include/linux/trace.h:24:
+#define LTT_PACKED_STRUCT __attribute__ ((packed))

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#99: FILE: include/linux/trace.h:31:
+/* This structure contains all the information needed to be known
+   about the tracing module. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#99: FILE: include/linux/trace.h:31:
+   about the tracing module. */

WARNING:FUNCTION_ARGUMENTS: function definition argument 'tracer_call' should also have an identifier name
#141: FILE: include/linux/trace.h:73:
+int register_tracer

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#142: FILE: include/linux/trace.h:74:
+ (tracer_call /* The tracer function */ );$

ERROR:SPACING: space prohibited before that close parenthesis ')'
#142: FILE: include/linux/trace.h:74:
+ (tracer_call /* The tracer function */ );

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:FUNCTION_ARGUMENTS: function definition argument 'tracer_call' should also have an identifier name
#143: FILE: include/linux/trace.h:75:
+int unregister_tracer

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#144: FILE: include/linux/trace.h:76:
+ (tracer_call /* The tracer function */ );$

ERROR:SPACING: space prohibited before that close parenthesis ')'
#144: FILE: include/linux/trace.h:76:
+ (tracer_call /* The tracer function */ );

WARNING:FUNCTION_ARGUMENTS: function definition argument 'tracer_call' should also have an identifier name
#145: FILE: include/linux/trace.h:77:
+int trace_set_config

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#145: FILE: include/linux/trace.h:77:
+int trace_set_config

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#145: FILE: include/linux/trace.h:77:
+int trace_set_config

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#145: FILE: include/linux/trace.h:77:
+int trace_set_config

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#145: FILE: include/linux/trace.h:77:
+int trace_set_config

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#145: FILE: include/linux/trace.h:77:
+int trace_set_config

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#146: FILE: include/linux/trace.h:78:
+ (tracer_call /* The tracer function */ ,$

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#146: FILE: include/linux/trace.h:78:
+ (tracer_call /* The tracer function */ ,
                                         ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#147: FILE: include/linux/trace.h:79:
+  int /* Use depth to fetch eip */ ,$

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#147: FILE: include/linux/trace.h:79:
+  int /* Use depth to fetch eip */ ,
                                    ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#148: FILE: include/linux/trace.h:80:
+  int /* Use bounds to fetch eip */ ,$

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#148: FILE: include/linux/trace.h:80:
+  int /* Use bounds to fetch eip */ ,
                                     ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#149: FILE: include/linux/trace.h:81:
+  int /* Detph to fetch eip */ ,$

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#149: FILE: include/linux/trace.h:81:
+  int /* Detph to fetch eip */ ,
                                ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#150: FILE: include/linux/trace.h:82:
+  void * /* Lower bound eip address */ ,$

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#150: FILE: include/linux/trace.h:82:
+  void * /* Lower bound eip address */ ,
                                        ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#151: FILE: include/linux/trace.h:83:
+  void * /* Upper bound eip address */ );$

ERROR:SPACING: space prohibited before that close parenthesis ')'
#151: FILE: include/linux/trace.h:83:
+  void * /* Upper bound eip address */ );

WARNING:FUNCTION_ARGUMENTS: function definition argument 'tracer_call' should also have an identifier name
#152: FILE: include/linux/trace.h:84:
+int trace_register_callback

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u8' should also have an identifier name
#152: FILE: include/linux/trace.h:84:
+int trace_register_callback

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#153: FILE: include/linux/trace.h:85:
+ (tracer_call /* The callback to add */ ,$

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#153: FILE: include/linux/trace.h:85:
+ (tracer_call /* The callback to add */ ,
                                         ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#154: FILE: include/linux/trace.h:86:
+  u8 /* The event ID targeted */ );$

ERROR:SPACING: space prohibited before that close parenthesis ')'
#154: FILE: include/linux/trace.h:86:
+  u8 /* The event ID targeted */ );

WARNING:FUNCTION_ARGUMENTS: function definition argument 'tracer_call' should also have an identifier name
#155: FILE: include/linux/trace.h:87:
+int trace_unregister_callback

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u8' should also have an identifier name
#155: FILE: include/linux/trace.h:87:
+int trace_unregister_callback

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#156: FILE: include/linux/trace.h:88:
+ (tracer_call /* The callback to remove */ ,$

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#156: FILE: include/linux/trace.h:88:
+ (tracer_call /* The callback to remove */ ,
                                            ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#157: FILE: include/linux/trace.h:89:
+  u8 /* The event ID targeted */ );$

ERROR:SPACING: space prohibited before that close parenthesis ')'
#157: FILE: include/linux/trace.h:89:
+  u8 /* The event ID targeted */ );

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int *' should also have an identifier name
#158: FILE: include/linux/trace.h:90:
+int trace_get_config

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int *' should also have an identifier name
#158: FILE: include/linux/trace.h:90:
+int trace_get_config

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int *' should also have an identifier name
#158: FILE: include/linux/trace.h:90:
+int trace_get_config

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void **' should also have an identifier name
#158: FILE: include/linux/trace.h:90:
+int trace_get_config

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void **' should also have an identifier name
#158: FILE: include/linux/trace.h:90:
+int trace_get_config

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#159: FILE: include/linux/trace.h:91:
+ (int * /* Use depth to fetch eip */ ,$

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#159: FILE: include/linux/trace.h:91:
+ (int * /* Use depth to fetch eip */ ,
                                      ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#160: FILE: include/linux/trace.h:92:
+  int * /* Use bounds to fetch eip */ ,$

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#160: FILE: include/linux/trace.h:92:
+  int * /* Use bounds to fetch eip */ ,
                                       ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#161: FILE: include/linux/trace.h:93:
+  int * /* Detph to fetch eip */ ,$

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#161: FILE: include/linux/trace.h:93:
+  int * /* Detph to fetch eip */ ,
                                  ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#162: FILE: include/linux/trace.h:94:
+  void ** /* Lower bound eip address */ ,$

CHECK:SPACING: spaces preferred around that '*' (ctx:WxO)
#162: FILE: include/linux/trace.h:94:
+  void ** /* Lower bound eip address */ ,
        ^

ERROR:SPACING: space prohibited after that '*' (ctx:OxW)
#162: FILE: include/linux/trace.h:94:
+  void ** /* Lower bound eip address */ ,
         ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#162: FILE: include/linux/trace.h:94:
+  void ** /* Lower bound eip address */ ,
                                         ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#163: FILE: include/linux/trace.h:95:
+  void ** /* Upper bound eip address */ );$

CHECK:SPACING: spaces preferred around that '*' (ctx:WxO)
#163: FILE: include/linux/trace.h:95:
+  void ** /* Upper bound eip address */ );
        ^

ERROR:SPACING: space prohibited after that '*' (ctx:OxW)
#163: FILE: include/linux/trace.h:95:
+  void ** /* Upper bound eip address */ );
         ^

ERROR:SPACING: space prohibited before that close parenthesis ')'
#163: FILE: include/linux/trace.h:95:
+  void ** /* Upper bound eip address */ );

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#164: FILE: include/linux/trace.h:96:
+int trace_create_event

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#164: FILE: include/linux/trace.h:96:
+int trace_create_event

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#164: FILE: include/linux/trace.h:96:
+int trace_create_event

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#164: FILE: include/linux/trace.h:96:
+int trace_create_event

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#165: FILE: include/linux/trace.h:97:
+ (char * /* String describing event type */ ,$

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#165: FILE: include/linux/trace.h:97:
+ (char * /* String describing event type */ ,
                                             ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#166: FILE: include/linux/trace.h:98:
+  char * /* String to format standard event description */ ,$

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#166: FILE: include/linux/trace.h:98:
+  char * /* String to format standard event description */ ,
                                                            ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#167: FILE: include/linux/trace.h:99:
+  int /* Type of formatting used to log event data */ ,$

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#167: FILE: include/linux/trace.h:99:
+  int /* Type of formatting used to log event data */ ,
                                                       ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#168: FILE: include/linux/trace.h:100:
+  char * /* Data specific to format */ );$

ERROR:SPACING: space prohibited before that close parenthesis ')'
#168: FILE: include/linux/trace.h:100:
+  char * /* Data specific to format */ );

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#169: FILE: include/linux/trace.h:101:
+int trace_create_owned_event

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#169: FILE: include/linux/trace.h:101:
+int trace_create_owned_event

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#169: FILE: include/linux/trace.h:101:
+int trace_create_owned_event

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#169: FILE: include/linux/trace.h:101:
+int trace_create_owned_event

WARNING:FUNCTION_ARGUMENTS: function definition argument 'pid_t' should also have an identifier name
#169: FILE: include/linux/trace.h:101:
+int trace_create_owned_event

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#170: FILE: include/linux/trace.h:102:
+ (char * /* String describing event type */ ,$

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#170: FILE: include/linux/trace.h:102:
+ (char * /* String describing event type */ ,
                                             ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#171: FILE: include/linux/trace.h:103:
+  char * /* String to format standard event description */ ,$

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#171: FILE: include/linux/trace.h:103:
+  char * /* String to format standard event description */ ,
                                                            ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#172: FILE: include/linux/trace.h:104:
+  int /* Type of formatting used to log event data */ ,$

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#172: FILE: include/linux/trace.h:104:
+  int /* Type of formatting used to log event data */ ,
                                                       ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#173: FILE: include/linux/trace.h:105:
+  char * /* Data specific to format */ ,$

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#173: FILE: include/linux/trace.h:105:
+  char * /* Data specific to format */ ,
                                        ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#174: FILE: include/linux/trace.h:106:
+  pid_t /* PID of event's owner */ );$

ERROR:SPACING: space prohibited before that close parenthesis ')'
#174: FILE: include/linux/trace.h:106:
+  pid_t /* PID of event's owner */ );

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#175: FILE: include/linux/trace.h:107:
+void trace_destroy_event

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#176: FILE: include/linux/trace.h:108:
+ (int /* The event ID given by trace_create_event() */ );$

ERROR:SPACING: space prohibited before that close parenthesis ')'
#176: FILE: include/linux/trace.h:108:
+ (int /* The event ID given by trace_create_event() */ );

WARNING:FUNCTION_ARGUMENTS: function definition argument 'pid_t' should also have an identifier name
#177: FILE: include/linux/trace.h:109:
+void trace_destroy_owners_events

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#178: FILE: include/linux/trace.h:110:
+ (pid_t /* The PID of the process' who's events are to be deleted */ );$

ERROR:SPACING: space prohibited before that close parenthesis ')'
#178: FILE: include/linux/trace.h:110:
+ (pid_t /* The PID of the process' who's events are to be deleted */ );

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#180: FILE: include/linux/trace.h:112:
+ (void);$

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#181: FILE: include/linux/trace.h:113:
+int trace_std_formatted_event

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#182: FILE: include/linux/trace.h:114:
+ (int /* The event ID given by trace_create_event() */ ,$

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#182: FILE: include/linux/trace.h:114:
+ (int /* The event ID given by trace_create_event() */ ,
                                                        ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#183: FILE: include/linux/trace.h:115:
+  ... /* The parameters to be printed out in the event string */ );$

ERROR:SPACING: space prohibited before that close parenthesis ')'
#183: FILE: include/linux/trace.h:115:
+  ... /* The parameters to be printed out in the event string */ );

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#184: FILE: include/linux/trace.h:116:
+int trace_raw_event

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#184: FILE: include/linux/trace.h:116:
+int trace_raw_event

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#184: FILE: include/linux/trace.h:116:
+int trace_raw_event

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#185: FILE: include/linux/trace.h:117:
+ (int /* The event ID given by trace_create_event() */ ,$

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#185: FILE: include/linux/trace.h:117:
+ (int /* The event ID given by trace_create_event() */ ,
                                                        ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#186: FILE: include/linux/trace.h:118:
+  int /* The size of the raw data */ ,$

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#186: FILE: include/linux/trace.h:118:
+  int /* The size of the raw data */ ,
                                      ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#187: FILE: include/linux/trace.h:119:
+  void * /* Pointer to the raw event data */ );$

ERROR:SPACING: space prohibited before that close parenthesis ')'
#187: FILE: include/linux/trace.h:119:
+  void * /* Pointer to the raw event data */ );

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u8' should also have an identifier name
#188: FILE: include/linux/trace.h:120:
+int trace_event

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#188: FILE: include/linux/trace.h:120:
+int trace_event

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#189: FILE: include/linux/trace.h:121:
+ (u8 /* Event ID (as defined in this header file) */ ,$

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#189: FILE: include/linux/trace.h:121:
+ (u8 /* Event ID (as defined in this header file) */ ,
                                                      ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#190: FILE: include/linux/trace.h:122:
+  void * /* Structure describing the event */ );$

ERROR:SPACING: space prohibited before that close parenthesis ')'
#190: FILE: include/linux/trace.h:122:
+  void * /* Structure describing the event */ );

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#193: FILE: include/linux/trace.h:125:
+static inline void TRACE_EVENT(u8 event_id, void* data)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'begining' may be misspelled - perhaps 'beginning'?
#217: FILE: include/linux/trace.h:149:
+#define TRACE_EV_BUFFER_START   17	/* Mark the begining of a trace buffer */
                                   	            ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:NEW_TYPEDEFS: do not add new typedefs
#229: FILE: include/linux/trace.h:161:
+typedef struct _trace_syscall_entry {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#236: FILE: include/linux/trace.h:168:
+typedef struct _trace_trap_entry {

WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#238: FILE: include/linux/trace.h:170:
+	u32 address;		/* Address where trap occured */
 	            		                      ^^^^^^^

WARNING:NEW_TYPEDEFS: do not add new typedefs
#243: FILE: include/linux/trace.h:175:
+typedef struct _trace_trap_entry {

WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#245: FILE: include/linux/trace.h:177:
+	u32 address;		/* Address where trap occured */
 	            		                      ^^^^^^^

WARNING:NEW_TYPEDEFS: do not add new typedefs
#265: FILE: include/linux/trace.h:197:
+typedef struct _trace_irq_entry {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#286: FILE: include/linux/trace.h:218:
+typedef struct _trace_schedchange {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#291: FILE: include/linux/trace.h:223:
+static inline void TRACE_SCHEDCHANGE(task_t * task_out, task_t * task_in)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#291: FILE: include/linux/trace.h:223:
+static inline void TRACE_SCHEDCHANGE(task_t * task_out, task_t * task_in)

CHECK:SPACING: No space is necessary after a cast
#295: FILE: include/linux/trace.h:227:
+	sched_event.out = (u32) task_out->pid;

CHECK:SPACING: No space is necessary after a cast
#296: FILE: include/linux/trace.h:228:
+	sched_event.in = (u32) task_in;

CHECK:SPACING: No space is necessary after a cast
#297: FILE: include/linux/trace.h:229:
+	sched_event.out_state = (u32) task_out->state;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#307: FILE: include/linux/trace.h:239:
+typedef struct _trace_soft_irq {

WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#323: FILE: include/linux/trace.h:255:
+#define TRACE_EV_PROCESS_FORK        2	/* A fork or clone occured */
                                       	                   ^^^^^^^

WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#324: FILE: include/linux/trace.h:256:
+#define TRACE_EV_PROCESS_EXIT        3	/* An exit occured */
                                       	           ^^^^^^^

WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#325: FILE: include/linux/trace.h:257:
+#define TRACE_EV_PROCESS_WAIT        4	/* A wait occured */
                                       	          ^^^^^^^

WARNING:NEW_TYPEDEFS: do not add new typedefs
#328: FILE: include/linux/trace.h:260:
+typedef struct _trace_process {

WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#347: FILE: include/linux/trace.h:279:
+#define TRACE_EV_FILE_SYSTEM_EXEC            3	/* An exec occured */
                                               	           ^^^^^^^

WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#348: FILE: include/linux/trace.h:280:
+#define TRACE_EV_FILE_SYSTEM_OPEN            4	/* An open occured */
                                               	           ^^^^^^^

WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#349: FILE: include/linux/trace.h:281:
+#define TRACE_EV_FILE_SYSTEM_CLOSE           5	/* A close occured */
                                               	           ^^^^^^^

WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#350: FILE: include/linux/trace.h:282:
+#define TRACE_EV_FILE_SYSTEM_READ            6	/* A read occured */
                                               	          ^^^^^^^

WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#351: FILE: include/linux/trace.h:283:
+#define TRACE_EV_FILE_SYSTEM_WRITE           7	/* A write occured */
                                               	           ^^^^^^^

WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#352: FILE: include/linux/trace.h:284:
+#define TRACE_EV_FILE_SYSTEM_SEEK            8	/* A seek occured */
                                               	          ^^^^^^^

WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#353: FILE: include/linux/trace.h:285:
+#define TRACE_EV_FILE_SYSTEM_IOCTL           9	/* An ioctl occured */
                                               	            ^^^^^^^

WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#354: FILE: include/linux/trace.h:286:
+#define TRACE_EV_FILE_SYSTEM_SELECT         10	/* A select occured */
                                               	            ^^^^^^^

WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#355: FILE: include/linux/trace.h:287:
+#define TRACE_EV_FILE_SYSTEM_POLL           11	/* A poll occured */
                                               	          ^^^^^^^

WARNING:NEW_TYPEDEFS: do not add new typedefs
#356: FILE: include/linux/trace.h:288:
+typedef struct _trace_file_system {

CHECK:SPACING: No space is necessary after a cast
#369: FILE: include/linux/trace.h:301:
+	fs_event.file_name = (char*) file_name;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#369: FILE: include/linux/trace.h:301:
+	fs_event.file_name = (char*) file_name;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#378: FILE: include/linux/trace.h:310:
+typedef struct _trace_timer {

WARNING:TYPO_SPELLING: 'Swaping' may be misspelled - perhaps 'Swapping'?
#399: FILE: include/linux/trace.h:331:
+#define TRACE_EV_MEMORY_SWAP_IN           3	/* Swaping pages in */
                                            	   ^^^^^^^

WARNING:TYPO_SPELLING: 'Swaping' may be misspelled - perhaps 'Swapping'?
#400: FILE: include/linux/trace.h:332:
+#define TRACE_EV_MEMORY_SWAP_OUT          4	/* Swaping pages out */
                                            	   ^^^^^^^

WARNING:NEW_TYPEDEFS: do not add new typedefs
#403: FILE: include/linux/trace.h:335:
+typedef struct _trace_memory {

WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#418: FILE: include/linux/trace.h:350:
+#define TRACE_EV_SOCKET_CALL     1	/* A socket call occured */
                                   	                 ^^^^^^^

WARNING:NEW_TYPEDEFS: do not add new typedefs
#422: FILE: include/linux/trace.h:354:
+typedef struct _trace_socket {

WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#439: FILE: include/linux/trace.h:371:
+#define TRACE_EV_IPC_CALL            1	/* A System V IPC call occured */
                                       	                       ^^^^^^^

WARNING:NEW_TYPEDEFS: do not add new typedefs
#443: FILE: include/linux/trace.h:375:
+typedef struct _trace_ipc {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#462: FILE: include/linux/trace.h:394:
+typedef struct _trace_network {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#478: FILE: include/linux/trace.h:410:
+/* ***WARNING*** These structures should never be used as is, use the provided custom
+   event creation and logging functions. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#478: FILE: include/linux/trace.h:410:
+   event creation and logging functions. */

WARNING:NEW_TYPEDEFS: do not add new typedefs
#479: FILE: include/linux/trace.h:411:
+typedef struct _trace_new_event {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#489: FILE: include/linux/trace.h:421:
+typedef struct _trace_custom {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#497: FILE: include/linux/trace.h:429:
+typedef struct _trace_change_mask {

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#523: FILE: kernel/trace.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#524: FILE: kernel/trace.c:2:
+ * linux/kernel/trace.c

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#543: FILE: kernel/trace.c:21:
+unsigned int syscall_entry_trace_active = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#544: FILE: kernel/trace.c:22:
+unsigned int syscall_exit_trace_active = 0;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#547: FILE: kernel/trace.c:25:
+static int tracer_registered = 0;   /* Is there a tracer registered */

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:GLOBAL_INITIALISERS: do not initialise globals to NULL
#548: FILE: kernel/trace.c:26:
+struct tracer *tracer = NULL;       /* The registered tracer */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#551: FILE: kernel/trace.c:29:
+/* Registration lock. This lock avoids a race condition in case a tracer is
+removed while an event is being traced. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#551: FILE: kernel/trace.c:29:
+removed while an event is being traced. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#582: FILE: kernel/trace.c:60:
+/* Circular list lock. This is classic lock that provides for atomic access
+to the circular list. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#582: FILE: kernel/trace.c:60:
+to the circular list. */

CHECK:SPACING: No space is necessary after a cast
#600: FILE: kernel/trace.c:78:
+	if ((tracer = (struct tracer *) kmalloc(sizeof(struct tracer), GFP_ATOMIC)) == NULL)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 17)
#600: FILE: kernel/trace.c:78:
+	if ((tracer = (struct tracer *) kmalloc(sizeof(struct tracer), GFP_ATOMIC)) == NULL)
+		 return -ENOMEM;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#600: FILE: kernel/trace.c:78:
+	if ((tracer = (struct tracer *) kmalloc(sizeof(struct tracer), GFP_ATOMIC)) == NULL)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#600: FILE: kernel/trace.c:78:
+	if ((tracer = (struct tracer *) kmalloc(sizeof(struct tracer), GFP_ATOMIC)) == NULL)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*tracer)...) over kmalloc(sizeof(struct tracer)...)
#600: FILE: kernel/trace.c:78:
+	if ((tracer = (struct tracer *) kmalloc(sizeof(struct tracer), GFP_ATOMIC)) == NULL)

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:TABSTOP: Statements should start on a tabstop
#601: FILE: kernel/trace.c:79:
+		 return -ENOMEM;

CHECK:BRACES: Unbalanced braces around else statement
#636: FILE: kernel/trace.c:114:
+	else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#659: FILE: kernel/trace.c:137:
+ * Return values : $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#660: FILE: kernel/trace.c:138:
+ *   0, all is OK $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pm_syscall_lower_bound > pm_syscall_upper_bound'
#680: FILE: kernel/trace.c:158:
+	if ((pm_fetch_syscall_use_depth && pm_fetch_syscall_use_bounds)
+	    || (pm_syscall_lower_bound > pm_syscall_upper_bound)
+	    || (pm_syscall_eip_depth < 0))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pm_syscall_eip_depth < 0'
#680: FILE: kernel/trace.c:158:
+	if ((pm_fetch_syscall_use_depth && pm_fetch_syscall_use_bounds)
+	    || (pm_syscall_lower_bound > pm_syscall_upper_bound)
+	    || (pm_syscall_eip_depth < 0))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#681: FILE: kernel/trace.c:159:
+	if ((pm_fetch_syscall_use_depth && pm_fetch_syscall_use_bounds)
+	    || (pm_syscall_lower_bound > pm_syscall_upper_bound)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#682: FILE: kernel/trace.c:160:
+	    || (pm_syscall_lower_bound > pm_syscall_upper_bound)
+	    || (pm_syscall_eip_depth < 0))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#704: FILE: kernel/trace.c:182:
+ *   0, all is OK $

WARNING:TYPO_SPELLING: 'occurence' may be misspelled - perhaps 'occurrence'?
#727: FILE: kernel/trace.c:205:
+ * Register a callback function to be called on occurence
                                                 ^^^^^^^^^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around trace_callback_table[pm_event_id - 1]
#742: FILE: kernel/trace.c:220:
+	for (p_tct_entry = &(trace_callback_table[pm_event_id - 1]);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#742: FILE: kernel/trace.c:220:
+	for (p_tct_entry = &(trace_callback_table[pm_event_id - 1]);
[...]
+	     p_tct_entry = p_tct_entry->next);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "p_tct_entry->next"
#743: FILE: kernel/trace.c:221:
+	     p_tct_entry->next != NULL;

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#747: FILE: kernel/trace.c:225:
+	if ((p_tct_entry->next = kmalloc(sizeof(struct trace_callback_table_entry), GFP_ATOMIC)) == NULL)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 17)
#747: FILE: kernel/trace.c:225:
+	if ((p_tct_entry->next = kmalloc(sizeof(struct trace_callback_table_entry), GFP_ATOMIC)) == NULL)
+		 return -ENOMEM;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#747: FILE: kernel/trace.c:225:
+	if ((p_tct_entry->next = kmalloc(sizeof(struct trace_callback_table_entry), GFP_ATOMIC)) == NULL)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*p_tct_entry->next)...) over kmalloc(sizeof(struct trace_callback_table_entry)...)
#747: FILE: kernel/trace.c:225:
+	if ((p_tct_entry->next = kmalloc(sizeof(struct trace_callback_table_entry), GFP_ATOMIC)) == NULL)

WARNING:TABSTOP: Statements should start on a tabstop
#748: FILE: kernel/trace.c:226:
+		 return -ENOMEM;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around trace_callback_table[pm_event_id - 1]
#773: FILE: kernel/trace.c:251:
+	for (p_tct_entry = &(trace_callback_table[pm_event_id - 1]);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#773: FILE: kernel/trace.c:251:
+	for (p_tct_entry = &(trace_callback_table[pm_event_id - 1]);
[...]
+	     p_tct_entry = p_tct_entry->next);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "p_tct_entry->next"
#774: FILE: kernel/trace.c:252:
+	     ((p_tct_entry->next != NULL) && (p_tct_entry->next->callback != pm_trace_function));

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!p_tct_entry"
#778: FILE: kernel/trace.c:256:
+	if (p_tct_entry == NULL)

WARNING:LONG_LINE: line length of 119 exceeds 100 columns
#810: FILE: kernel/trace.c:288:
+	if ((p_new_event = (struct custom_event_desc *) kmalloc(sizeof(struct custom_event_desc), GFP_ATOMIC)) == NULL)

CHECK:SPACING: No space is necessary after a cast
#810: FILE: kernel/trace.c:288:
+	if ((p_new_event = (struct custom_event_desc *) kmalloc(sizeof(struct custom_event_desc), GFP_ATOMIC)) == NULL)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 17)
#810: FILE: kernel/trace.c:288:
+	if ((p_new_event = (struct custom_event_desc *) kmalloc(sizeof(struct custom_event_desc), GFP_ATOMIC)) == NULL)
+		 return -ENOMEM;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#810: FILE: kernel/trace.c:288:
+	if ((p_new_event = (struct custom_event_desc *) kmalloc(sizeof(struct custom_event_desc), GFP_ATOMIC)) == NULL)

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#810: FILE: kernel/trace.c:288:
+	if ((p_new_event = (struct custom_event_desc *) kmalloc(sizeof(struct custom_event_desc), GFP_ATOMIC)) == NULL)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*p_new_event)...) over kmalloc(sizeof(struct custom_event_desc)...)
#810: FILE: kernel/trace.c:288:
+	if ((p_new_event = (struct custom_event_desc *) kmalloc(sizeof(struct custom_event_desc), GFP_ATOMIC)) == NULL)

WARNING:TABSTOP: Statements should start on a tabstop
#811: FILE: kernel/trace.c:289:
+		 return -ENOMEM;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "pm_event_type"
#819: FILE: kernel/trace.c:297:
+	if (pm_event_type != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "pm_event_desc"
#821: FILE: kernel/trace.c:299:
+	if (pm_event_desc != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "pm_format_data"
#823: FILE: kernel/trace.c:301:
+	if (pm_format_data != NULL)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around p_new_event->event
#850: FILE: kernel/trace.c:328:
+	trace_event(TRACE_EV_NEW_EVENT, &(p_new_event->event));

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#854: FILE: kernel/trace.c:332:
+}
+int trace_create_event(char *pm_event_type,

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#861: FILE: kernel/trace.c:339:
+}
+int trace_create_owned_event(char *pm_event_type,

WARNING:LONG_LINE: line length of 111 exceeds 100 columns
#867: FILE: kernel/trace.c:345:
+	return _trace_create_event(pm_event_type, pm_event_desc, pm_format_type, pm_format_data, pm_owner_pid);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around p_event_desc->event
#959: FILE: kernel/trace.c:437:
+		trace_event(TRACE_EV_NEW_EVENT, &(p_event_desc->event));

ERROR:SPACING: space required after that ',' (ctx:VxV)
#973: FILE: kernel/trace.c:451:
+int trace_std_formatted_event(int pm_event_id,...)
                                              ^

WARNING:TYPO_SPELLING: 'outputed' may be misspelled - perhaps 'outputted'?
#975: FILE: kernel/trace.c:453:
+	int l_string_size;	/* Size of the string outputed by vsprintf() */
 	                  	                      ^^^^^^^^

CHECK:SPACING: No space is necessary after a cast
#1011: FILE: kernel/trace.c:489:
+	l_custom.data_size = (u32) (l_string_size + 1);

CHECK:SPACING: No space is necessary after a cast
#1055: FILE: kernel/trace.c:533:
+		l_custom.data_size = (u32) pm_event_size;

CHECK:SPACING: No space is necessary after a cast
#1057: FILE: kernel/trace.c:535:
+		l_custom.data_size = (u32) CUSTOM_EVENT_MAX_SIZE;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "trace_callback_table[pm_event_id - 1].next"
#1095: FILE: kernel/trace.c:573:
+		if (trace_callback_table[pm_event_id - 1].next != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "p_tct_entry"
#1098: FILE: kernel/trace.c:576:
+			     p_tct_entry != NULL;

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1138: FILE: kernel/trace.c:616:
+EXPORT_SYMBOL(unregister_tracer);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1139: FILE: kernel/trace.c:617:
+EXPORT_SYMBOL(trace_set_config);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1140: FILE: kernel/trace.c:618:
+EXPORT_SYMBOL(trace_get_config);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1141: FILE: kernel/trace.c:619:
+EXPORT_SYMBOL(trace_register_callback);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1142: FILE: kernel/trace.c:620:
+EXPORT_SYMBOL(trace_unregister_callback);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1143: FILE: kernel/trace.c:621:
+EXPORT_SYMBOL(trace_create_event);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1144: FILE: kernel/trace.c:622:
+EXPORT_SYMBOL(trace_create_owned_event);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1145: FILE: kernel/trace.c:623:
+EXPORT_SYMBOL(trace_destroy_event);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1146: FILE: kernel/trace.c:624:
+EXPORT_SYMBOL(trace_destroy_owners_events);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1147: FILE: kernel/trace.c:625:
+EXPORT_SYMBOL(trace_reregister_custom_events);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1148: FILE: kernel/trace.c:626:
+EXPORT_SYMBOL(trace_std_formatted_event);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1149: FILE: kernel/trace.c:627:
+EXPORT_SYMBOL(trace_raw_event);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1150: FILE: kernel/trace.c:628:
+EXPORT_SYMBOL(trace_event);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1152: FILE: kernel/trace.c:630:
+EXPORT_SYMBOL(syscall_entry_trace_active);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1153: FILE: kernel/trace.c:631:
+EXPORT_SYMBOL(syscall_exit_trace_active);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000434467.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 55 errors, 149 warnings, 33 checks, 1099 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000434467.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
