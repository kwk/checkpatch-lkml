WARNING:LEADING_SPACE: please, no spaces at the start of a line
#51: FILE: arch/i386/pci/acpi.c:10:
+       acpi_status status;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#52: FILE: arch/i386/pci/acpi.c:11:
+       struct acpi_device_info *info;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#53: FILE: arch/i386/pci/acpi.c:12:
+       struct acpi_buffer buffer = {ACPI_ALLOCATE_BUFFER, NULL};$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#54: FILE: arch/i386/pci/acpi.c:13:
+       int i;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#56: FILE: arch/i386/pci/acpi.c:15:
+       status = acpi_get_object_info(handle, &buffer);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#57: FILE: arch/i386/pci/acpi.c:16:
+       if (ACPI_FAILURE(status))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#57: FILE: arch/i386/pci/acpi.c:16:
+       if (ACPI_FAILURE(status))
+	       return 0;

WARNING:TABSTOP: Statements should start on a tabstop
#58: FILE: arch/i386/pci/acpi.c:17:
+	       return 0;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#59: FILE: arch/i386/pci/acpi.c:18:
+       info = buffer.pointer;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#60: FILE: arch/i386/pci/acpi.c:19:
+       if ((info->valid & ACPI_VALID_HID) &&$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#60: FILE: arch/i386/pci/acpi.c:19:
+       if ((info->valid & ACPI_VALID_HID) &&
[...]
+	       kfree(buffer.pointer);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#61: FILE: arch/i386/pci/acpi.c:20:
+       if ((info->valid & ACPI_VALID_HID) &&
+		       (!strcmp(ACPI_MB_HID1, info->hardware_id.value) ||

WARNING:TABSTOP: Statements should start on a tabstop
#64: FILE: arch/i386/pci/acpi.c:23:
+	       return 1;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#65: FILE: arch/i386/pci/acpi.c:24:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#66: FILE: arch/i386/pci/acpi.c:25:
+       if (info->valid & ACPI_VALID_CID) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#66: FILE: arch/i386/pci/acpi.c:25:
+       if (info->valid & ACPI_VALID_CID) {
+	       for (i=0; i < info->compatibility_id.count; i++) {

WARNING:TABSTOP: Statements should start on a tabstop
#67: FILE: arch/i386/pci/acpi.c:26:
+	       for (i=0; i < info->compatibility_id.count; i++) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#67: FILE: arch/i386/pci/acpi.c:26:
+	       for (i=0; i < info->compatibility_id.count; i++) {
+		       if (!strcmp(ACPI_MB_HID1,

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#67: FILE: arch/i386/pci/acpi.c:26:
+	       for (i=0; i < info->compatibility_id.count; i++) {
 	             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TABSTOP: Statements should start on a tabstop
#68: FILE: arch/i386/pci/acpi.c:27:
+		       if (!strcmp(ACPI_MB_HID1,

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (23, 40)
#68: FILE: arch/i386/pci/acpi.c:27:
+		       if (!strcmp(ACPI_MB_HID1,
[...]
+                                        kfree(buffer.pointer);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#69: FILE: arch/i386/pci/acpi.c:28:
+		       if (!strcmp(ACPI_MB_HID1,
+				info->compatibility_id.id[i].value) ||

ERROR:CODE_INDENT: code indent should use tabs where possible
#72: FILE: arch/i386/pci/acpi.c:31:
+                                        kfree(buffer.pointer);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#72: FILE: arch/i386/pci/acpi.c:31:
+                                        kfree(buffer.pointer);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#73: FILE: arch/i386/pci/acpi.c:32:
+                                        return 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#73: FILE: arch/i386/pci/acpi.c:32:
+                                        return 1;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#78: FILE: arch/i386/pci/acpi.c:37:
+        return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#78: FILE: arch/i386/pci/acpi.c:37:
+        return 0;$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#82: FILE: arch/i386/pci/acpi.c:41:
+static acpi_status __init check_mcfg_resource(struct acpi_resource *res,
+		void *data)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'mcfg_res->start >= fixmem32->address'
#94: FILE: arch/i386/pci/acpi.c:53:
+		if ((mcfg_res->start >= fixmem32->address) &&
+			(mcfg_res->end <= (fixmem32->address +
+					   fixmem32->address_length))) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#95: FILE: arch/i386/pci/acpi.c:54:
+		if ((mcfg_res->start >= fixmem32->address) &&
+			(mcfg_res->end <= (fixmem32->address +

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'res->type != ACPI_RESOURCE_TYPE_ADDRESS32'
#101: FILE: arch/i386/pci/acpi.c:60:
+	if ((res->type != ACPI_RESOURCE_TYPE_ADDRESS32) &&
+			(res->type != ACPI_RESOURCE_TYPE_ADDRESS64))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'res->type != ACPI_RESOURCE_TYPE_ADDRESS64'
#101: FILE: arch/i386/pci/acpi.c:60:
+	if ((res->type != ACPI_RESOURCE_TYPE_ADDRESS32) &&
+			(res->type != ACPI_RESOURCE_TYPE_ADDRESS64))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#102: FILE: arch/i386/pci/acpi.c:61:
+	if ((res->type != ACPI_RESOURCE_TYPE_ADDRESS32) &&
+			(res->type != ACPI_RESOURCE_TYPE_ADDRESS64))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'address.address_length <= 0'
#106: FILE: arch/i386/pci/acpi.c:65:
+	if (ACPI_FAILURE(status) || (address.address_length <= 0) ||
+			(address.resource_type != ACPI_MEMORY_RANGE))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'address.resource_type != ACPI_MEMORY_RANGE'
#106: FILE: arch/i386/pci/acpi.c:65:
+	if (ACPI_FAILURE(status) || (address.address_length <= 0) ||
+			(address.resource_type != ACPI_MEMORY_RANGE))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#107: FILE: arch/i386/pci/acpi.c:66:
+	if (ACPI_FAILURE(status) || (address.address_length <= 0) ||
+			(address.resource_type != ACPI_MEMORY_RANGE))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'mcfg_res->start >= address.minimum'
#110: FILE: arch/i386/pci/acpi.c:69:
+	if ((mcfg_res->start >= address.minimum) &&
+			(mcfg_res->end <=
+			 (address.minimum +address.address_length))) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#111: FILE: arch/i386/pci/acpi.c:70:
+	if ((mcfg_res->start >= address.minimum) &&
+			(mcfg_res->end <=

CHECK:SPACING: spaces preferred around that '+' (ctx:WxV)
#112: FILE: arch/i386/pci/acpi.c:71:
+			 (address.minimum +address.address_length))) {
 			                  ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#120: FILE: arch/i386/pci/acpi.c:79:
+static acpi_status __init find_mboard_resource(acpi_handle handle, u32 lvl,
+		void *context, void **rv)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#131: FILE: arch/i386/pci/acpi.c:90:
+		status = acpi_walk_resources(handle, METHOD_NAME__CRS,
+				check_mcfg_resource, context);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#145: FILE: arch/i386/pci/acpi.c:104:
+	acpi_walk_namespace(ACPI_TYPE_DEVICE, ACPI_ROOT_OBJECT,
+			ACPI_UINT32_MAX, find_mboard_resource,

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#150: FILE: arch/i386/pci/acpi.c:109:
 struct pci_bus * __devinit pci_acpi_scan_root(struct acpi_device *device, int domain, int busnum)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#163: FILE: arch/i386/pci/mmconfig.c:205:
+		if (!is_acpi_reserved(pci_mmcfg_config[0].base_address,
+					pci_mmcfg_config[0].base_address +

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#165: FILE: arch/i386/pci/mmconfig.c:207:
+			printk(KERN_ERR

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#170: FILE: arch/i386/pci/mmconfig.c:210:
+			printk(KERN_ERR "PCI: Not using MMCONFIG.\n");

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000064452.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 4 errors, 25 warnings, 18 checks, 144 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000064452.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
