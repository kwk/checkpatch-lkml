ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#40: 
--- a/fs/Makefile	Wed Apr 28 22:41:05 2004

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#57: FILE: fs/rcfs/Makefile:7:
+rcfs-objs := super.o inode.o dir.o rootdir.o magic.o tc_magic.o socket_fs.o $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#65: FILE: include/linux/rcfs.h:1:
+#ifndef _LINUX_RCFS_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:LINE_SPACING: Please don't use multiple blank lines
#74: FILE: include/linux/rcfs.h:10:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#76: FILE: include/linux/rcfs.h:12:
+/* The following declarations cannot be included in any of ckrm*.h files without $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#77: FILE: include/linux/rcfs.h:13:
+/* The following declarations cannot be included in any of ckrm*.h files without 
+   jumping hoops. Remove later when rearrangements done */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#77: FILE: include/linux/rcfs.h:13:
+   jumping hoops. Remove later when rearrangements done */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#79: FILE: include/linux/rcfs.h:15:
+// Hubertus .. taken out $

WARNING:NEW_TYPEDEFS: do not add new typedefs
#88: FILE: include/linux/rcfs.h:24:
+typedef struct rcfs_inode_info {

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IXUGO' are not preferred. Consider using octal permissions '0555'.
#94: FILE: include/linux/rcfs.h:30:
+#define RCFS_DEFAULT_DIR_MODE	(S_IFDIR | S_IRUGO | S_IXUGO)

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:SPACING: spaces preferred around that '|' (ctx:WxV)
#95: FILE: include/linux/rcfs.h:31:
+#define RCFS_DEFAULT_FILE_MODE	(S_IFREG | S_IRUSR | S_IWUSR | S_IRGRP |S_IROTH)
                               	                                       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IWUSR | S_IRGRP |S_IROTH' are not preferred. Consider using octal permissions '0644'.
#95: FILE: include/linux/rcfs.h:31:
+#define RCFS_DEFAULT_FILE_MODE	(S_IFREG | S_IRUSR | S_IWUSR | S_IRGRP |S_IROTH)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#97: FILE: include/linux/rcfs.h:33:
+
+

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#101: FILE: include/linux/rcfs.h:37:
+	struct inode_operations *i_op;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct file_operations should normally be const
#102: FILE: include/linux/rcfs.h:38:
+	struct file_operations *i_fop;

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#115: FILE: include/linux/rcfs.h:51:
+int rcfs_empty(struct dentry *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#116: FILE: include/linux/rcfs.h:52:
+struct inode *rcfs_get_inode(struct super_block *, int, dev_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#116: FILE: include/linux/rcfs.h:52:
+struct inode *rcfs_get_inode(struct super_block *, int, dev_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'dev_t' should also have an identifier name
#116: FILE: include/linux/rcfs.h:52:
+struct inode *rcfs_get_inode(struct super_block *, int, dev_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#117: FILE: include/linux/rcfs.h:53:
+int rcfs_mknod(struct inode *, struct dentry *, int, dev_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#117: FILE: include/linux/rcfs.h:53:
+int rcfs_mknod(struct inode *, struct dentry *, int, dev_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#117: FILE: include/linux/rcfs.h:53:
+int rcfs_mknod(struct inode *, struct dentry *, int, dev_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'dev_t' should also have an identifier name
#117: FILE: include/linux/rcfs.h:53:
+int rcfs_mknod(struct inode *, struct dentry *, int, dev_t);

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#118: FILE: include/linux/rcfs.h:54:
+int _rcfs_mknod(struct inode *, struct dentry *, int , dev_t);
                                                      ^

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#118: FILE: include/linux/rcfs.h:54:
+int _rcfs_mknod(struct inode *, struct dentry *, int , dev_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#118: FILE: include/linux/rcfs.h:54:
+int _rcfs_mknod(struct inode *, struct dentry *, int , dev_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#118: FILE: include/linux/rcfs.h:54:
+int _rcfs_mknod(struct inode *, struct dentry *, int , dev_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'dev_t' should also have an identifier name
#118: FILE: include/linux/rcfs.h:54:
+int _rcfs_mknod(struct inode *, struct dentry *, int , dev_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#119: FILE: include/linux/rcfs.h:55:
+int rcfs_mkdir(struct inode *, struct dentry *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#119: FILE: include/linux/rcfs.h:55:
+int rcfs_mkdir(struct inode *, struct dentry *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#119: FILE: include/linux/rcfs.h:55:
+int rcfs_mkdir(struct inode *, struct dentry *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#120: FILE: include/linux/rcfs.h:56:
+ckrm_core_class_t *rcfs_make_core(struct dentry *, struct ckrm_core_class *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ckrm_core_class *' should also have an identifier name
#120: FILE: include/linux/rcfs.h:56:
+ckrm_core_class_t *rcfs_make_core(struct dentry *, struct ckrm_core_class *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#121: FILE: include/linux/rcfs.h:57:
+struct dentry *rcfs_set_magf_byname(char *, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#121: FILE: include/linux/rcfs.h:57:
+struct dentry *rcfs_set_magf_byname(char *, void *);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#123: FILE: include/linux/rcfs.h:59:
+struct dentry * rcfs_create_internal(struct dentry *, struct rcfs_magf *, int);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#123: FILE: include/linux/rcfs.h:59:
+struct dentry * rcfs_create_internal(struct dentry *, struct rcfs_magf *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rcfs_magf *' should also have an identifier name
#123: FILE: include/linux/rcfs.h:59:
+struct dentry * rcfs_create_internal(struct dentry *, struct rcfs_magf *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#123: FILE: include/linux/rcfs.h:59:
+struct dentry * rcfs_create_internal(struct dentry *, struct rcfs_magf *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#124: FILE: include/linux/rcfs.h:60:
+int rcfs_delete_internal(struct dentry *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#125: FILE: include/linux/rcfs.h:61:
+int rcfs_create_magic(struct dentry *, struct rcfs_magf *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rcfs_magf *' should also have an identifier name
#125: FILE: include/linux/rcfs.h:61:
+int rcfs_create_magic(struct dentry *, struct rcfs_magf *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#125: FILE: include/linux/rcfs.h:61:
+int rcfs_create_magic(struct dentry *, struct rcfs_magf *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#126: FILE: include/linux/rcfs.h:62:
+int rcfs_clear_magic(struct dentry *);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#128: FILE: include/linux/rcfs.h:64:
+
+

WARNING:CONST_STRUCT: struct address_space_operations should normally be const
#130: FILE: include/linux/rcfs.h:66:
+extern struct address_space_operations rcfs_aops;

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#132: FILE: include/linux/rcfs.h:68:
+extern struct inode_operations rcfs_dir_inode_operations;

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#133: FILE: include/linux/rcfs.h:69:
+extern struct inode_operations rcfs_rootdir_inode_operations;

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#134: FILE: include/linux/rcfs.h:70:
+extern struct inode_operations rcfs_file_inode_operations;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#136: FILE: include/linux/rcfs.h:72:
+
+

WARNING:CONST_STRUCT: struct file_operations should normally be const
#137: FILE: include/linux/rcfs.h:73:
+extern struct file_operations target_fileops;

WARNING:CONST_STRUCT: struct file_operations should normally be const
#138: FILE: include/linux/rcfs.h:74:
+extern struct file_operations shares_fileops;

WARNING:CONST_STRUCT: struct file_operations should normally be const
#139: FILE: include/linux/rcfs.h:75:
+extern struct file_operations stats_fileops;

WARNING:CONST_STRUCT: struct file_operations should normally be const
#140: FILE: include/linux/rcfs.h:76:
+extern struct file_operations config_fileops;

WARNING:CONST_STRUCT: struct file_operations should normally be const
#141: FILE: include/linux/rcfs.h:77:
+extern struct file_operations members_fileops;

WARNING:CONST_STRUCT: struct file_operations should normally be const
#142: FILE: include/linux/rcfs.h:78:
+extern struct file_operations rcfs_file_operations;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#144: FILE: include/linux/rcfs.h:80:
+// Callbacks into rcfs from ckrm $

WARNING:NEW_TYPEDEFS: do not add new typedefs
#146: FILE: include/linux/rcfs.h:82:
+typedef struct rcfs_functions {

WARNING:SPACING: Unnecessary space before function pointer name
#147: FILE: include/linux/rcfs.h:83:
+	int  (* mkroot)(struct rcfs_magf *,int, struct dentry **);

ERROR:SPACING: space prohibited after that '*' (ctx:BxW)
#147: FILE: include/linux/rcfs.h:83:
+	int  (* mkroot)(struct rcfs_magf *,int, struct dentry **);
 	      ^

ERROR:SPACING: space required after that ',' (ctx:OxV)
#147: FILE: include/linux/rcfs.h:83:
+	int  (* mkroot)(struct rcfs_magf *,int, struct dentry **);
 	                                  ^

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rcfs_magf *' should also have an identifier name
#147: FILE: include/linux/rcfs.h:83:
+	int  (* mkroot)(struct rcfs_magf *,int, struct dentry **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#147: FILE: include/linux/rcfs.h:83:
+	int  (* mkroot)(struct rcfs_magf *,int, struct dentry **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry **' should also have an identifier name
#147: FILE: include/linux/rcfs.h:83:
+	int  (* mkroot)(struct rcfs_magf *,int, struct dentry **);

WARNING:SPACING: Unnecessary space before function pointer name
#148: FILE: include/linux/rcfs.h:84:
+	int  (* rmroot)(struct dentry *);

ERROR:SPACING: space prohibited after that '*' (ctx:BxW)
#148: FILE: include/linux/rcfs.h:84:
+	int  (* rmroot)(struct dentry *);
 	      ^

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#148: FILE: include/linux/rcfs.h:84:
+	int  (* rmroot)(struct dentry *);

WARNING:SPACING: Unnecessary space before function pointer name
#149: FILE: include/linux/rcfs.h:85:
+	int  (* register_classtype)(ckrm_classtype_t *);

ERROR:SPACING: space prohibited after that '*' (ctx:BxW)
#149: FILE: include/linux/rcfs.h:85:
+	int  (* register_classtype)(ckrm_classtype_t *);
 	      ^

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ckrm_classtype_t *' should also have an identifier name
#149: FILE: include/linux/rcfs.h:85:
+	int  (* register_classtype)(ckrm_classtype_t *);

WARNING:SPACING: Unnecessary space before function pointer name
#150: FILE: include/linux/rcfs.h:86:
+	int  (* deregister_classtype)(ckrm_classtype_t *);

ERROR:SPACING: space prohibited after that '*' (ctx:BxW)
#150: FILE: include/linux/rcfs.h:86:
+	int  (* deregister_classtype)(ckrm_classtype_t *);
 	      ^

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ckrm_classtype_t *' should also have an identifier name
#150: FILE: include/linux/rcfs.h:86:
+	int  (* deregister_classtype)(ckrm_classtype_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ckrm_classtype_t *' should also have an identifier name
#153: FILE: include/linux/rcfs.h:89:
+int rcfs_register_classtype(ckrm_classtype_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ckrm_classtype_t *' should also have an identifier name
#154: FILE: include/linux/rcfs.h:90:
+int rcfs_deregister_classtype(ckrm_classtype_t *);

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#155: FILE: include/linux/rcfs.h:91:
+int rcfs_mkroot(struct rcfs_magf *, int , struct dentry **);
                                         ^

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rcfs_magf *' should also have an identifier name
#155: FILE: include/linux/rcfs.h:91:
+int rcfs_mkroot(struct rcfs_magf *, int , struct dentry **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#155: FILE: include/linux/rcfs.h:91:
+int rcfs_mkroot(struct rcfs_magf *, int , struct dentry **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry **' should also have an identifier name
#155: FILE: include/linux/rcfs.h:91:
+int rcfs_mkroot(struct rcfs_magf *, int , struct dentry **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#156: FILE: include/linux/rcfs.h:92:
+int rcfs_rmroot(struct dentry *);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#161: FILE: include/linux/rcfs.h:97:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#162: FILE: include/linux/rcfs.h:98:
+#endif /* _LINUX_RCFS_H */ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#167: FILE: fs/rcfs/dir.c:1:
+/* $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#167: FILE: fs/rcfs/dir.c:1:
+/* 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#168: FILE: fs/rcfs/dir.c:2:
+ * fs/rcfs/dir.c $

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#168: FILE: fs/rcfs/dir.c:2:
+ * fs/rcfs/dir.c 

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#172: FILE: fs/rcfs/dir.c:6:
+ *           $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#173: FILE: fs/rcfs/dir.c:7:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#177: FILE: fs/rcfs/dir.c:11:
+ * $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#191: FILE: fs/rcfs/dir.c:25:
+
+

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#207: FILE: fs/rcfs/dir.c:41:
+#include <asm/uaccess.h>

CHECK:LINE_SPACING: Please don't use multiple blank lines
#211: FILE: fs/rcfs/dir.c:45:
+
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'dentry' - possible side-effects?
#213: FILE: fs/rcfs/dir.c:47:
+#define rcfs_positive(dentry)  ((dentry)->d_inode && !d_unhashed((dentry)))

ERROR:CODE_INDENT: code indent should use tabs where possible
#217: FILE: fs/rcfs/dir.c:51:
+        struct dentry *child;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#217: FILE: fs/rcfs/dir.c:51:
+        struct dentry *child;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#218: FILE: fs/rcfs/dir.c:52:
+        int ret = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#218: FILE: fs/rcfs/dir.c:52:
+        int ret = 0;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#219: FILE: fs/rcfs/dir.c:53:
+                                                                                               $

ERROR:CODE_INDENT: code indent should use tabs where possible
#219: FILE: fs/rcfs/dir.c:53:
+                                                                                               $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#219: FILE: fs/rcfs/dir.c:53:
+                                                                                               $

ERROR:CODE_INDENT: code indent should use tabs where possible
#220: FILE: fs/rcfs/dir.c:54:
+        spin_lock(&dcache_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#220: FILE: fs/rcfs/dir.c:54:
+        spin_lock(&dcache_lock);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#221: FILE: fs/rcfs/dir.c:55:
+        list_for_each_entry(child, &dentry->d_subdirs, d_child)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#221: FILE: fs/rcfs/dir.c:55:
+        list_for_each_entry(child, &dentry->d_subdirs, d_child)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#222: FILE: fs/rcfs/dir.c:56:
+                if (!rcfs_is_magic(child) && rcfs_positive(child))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#222: FILE: fs/rcfs/dir.c:56:
+                if (!rcfs_is_magic(child) && rcfs_positive(child))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#223: FILE: fs/rcfs/dir.c:57:
+                        goto out;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#223: FILE: fs/rcfs/dir.c:57:
+                        goto out;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#224: FILE: fs/rcfs/dir.c:58:
+        ret = 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#224: FILE: fs/rcfs/dir.c:58:
+        ret = 1;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#226: FILE: fs/rcfs/dir.c:60:
+        spin_unlock(&dcache_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#226: FILE: fs/rcfs/dir.c:60:
+        spin_unlock(&dcache_lock);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#227: FILE: fs/rcfs/dir.c:61:
+        return ret;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#227: FILE: fs/rcfs/dir.c:61:
+        return ret;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#230: FILE: fs/rcfs/dir.c:64:
+                                                                                               $

ERROR:CODE_INDENT: code indent should use tabs where possible
#230: FILE: fs/rcfs/dir.c:64:
+                                                                                               $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#230: FILE: fs/rcfs/dir.c:64:
+
+                                                                                               

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#230: FILE: fs/rcfs/dir.c:64:
+                                                                                               $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#232: FILE: fs/rcfs/dir.c:66:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#235: FILE: fs/rcfs/dir.c:69:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#236: FILE: fs/rcfs/dir.c:70:
+int $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#237: FILE: fs/rcfs/dir.c:71:
+rcfs_create(struct inode *dir, struct dentry *dentry, int mode, $

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#238: FILE: fs/rcfs/dir.c:72:
+	    struct nameidata *nd)
 	                      ^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#244: FILE: fs/rcfs/dir.c:78:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#246: FILE: fs/rcfs/dir.c:80:
+int  $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#247: FILE: fs/rcfs/dir.c:81:
+rcfs_symlink(struct inode * dir, struct dentry *dentry, const char * symname)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#247: FILE: fs/rcfs/dir.c:81:
+rcfs_symlink(struct inode * dir, struct dentry *dentry, const char * symname)

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#252: FILE: fs/rcfs/dir.c:86:
+	inode = rcfs_get_inode(dir->i_sb, S_IFLNK|S_IRWXUGO, 0);
 	                                         ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXUGO' are not preferred. Consider using octal permissions '0777'.
#252: FILE: fs/rcfs/dir.c:86:
+	inode = rcfs_get_inode(dir->i_sb, S_IFLNK|S_IRWXUGO, 0);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#254: FILE: fs/rcfs/dir.c:88:
+		int l = strlen(symname)+1;
 		                       ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#255: FILE: fs/rcfs/dir.c:89:
+		int l = strlen(symname)+1;
+		error = page_symlink(inode, symname, l);

CHECK:BRACES: braces {} should be used on all arms of this statement
#256: FILE: fs/rcfs/dir.c:90:
+		if (!error) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#261: FILE: fs/rcfs/dir.c:95:
+		} else

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#262: FILE: fs/rcfs/dir.c:96:
+			iput(inode);
 			^^^^

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#271: FILE: fs/rcfs/dir.c:105:
+{
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#278: FILE: fs/rcfs/dir.c:112:
+^I// Inform RC's - do Core operations $

WARNING:SPACING: space prohibited before semicolon
#280: FILE: fs/rcfs/dir.c:114:
+		sz = strlen(ripar->name) + strlen(dentry->d_name.name) + 2 ;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#282: FILE: fs/rcfs/dir.c:116:
+		if (!ridir->name) {
+			return -ENOMEM;
+		}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#285: FILE: fs/rcfs/dir.c:119:
+^I^Isnprintf(ridir->name, sz,"%s/%s", ripar->name, $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#285: FILE: fs/rcfs/dir.c:119:
+		snprintf(ridir->name, sz,"%s/%s", ripar->name, 
 		                        ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around ripar->core->classtype->alloc
#287: FILE: fs/rcfs/dir.c:121:
+		ridir->core = (*(ripar->core->classtype->alloc))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:SPACING: space required after that ',' (ctx:VxV)
#288: FILE: fs/rcfs/dir.c:122:
+			(ripar->core,ridir->name);
 			            ^

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#290: FILE: fs/rcfs/dir.c:124:
+	}
+	else {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#290: FILE: fs/rcfs/dir.c:124:
+	else {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#291: FILE: fs/rcfs/dir.c:125:
+		printk(KERN_ERR "rcfs_mkdir: Invalid parent core %p\n",

CHECK:LINE_SPACING: Please don't use multiple blank lines
#300: FILE: fs/rcfs/dir.c:134:
+
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#304: FILE: fs/rcfs/dir.c:138:
+{
+

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#308: FILE: fs/rcfs/dir.c:142:
+#if 0

ERROR:TRAILING_WHITESPACE: trailing whitespace
#309: FILE: fs/rcfs/dir.c:143:
+^Istruct dentry *pd = list_entry(dir->i_dentry.next, struct dentry, $

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#314: FILE: fs/rcfs/dir.c:148:
+		if (rcfs_eng_callbacks.mkdir) {
[...]
+		} else {
[...]

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#323: FILE: fs/rcfs/dir.c:157:
+		printk(KERN_ERR "rcfs_mkdir: error in _rcfs_mknod\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'rcfs_mkdir', this function's name, in a string
#323: FILE: fs/rcfs/dir.c:157:
+		printk(KERN_ERR "rcfs_mkdir: error in _rcfs_mknod\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#333: FILE: fs/rcfs/dir.c:167:
+
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#334: FILE: fs/rcfs/dir.c:168:
+ ^Iretval = rcfs_create_coredir(dir, dentry);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#334: FILE: fs/rcfs/dir.c:168:
+ ^Iretval = rcfs_create_coredir(dir, dentry);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#334: FILE: fs/rcfs/dir.c:168:
+ ^Iretval = rcfs_create_coredir(dir, dentry);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#335: FILE: fs/rcfs/dir.c:169:
+ ^Iif (retval) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#335: FILE: fs/rcfs/dir.c:169:
+ ^Iif (retval) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#335: FILE: fs/rcfs/dir.c:169:
+ ^Iif (retval) {$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#336: FILE: fs/rcfs/dir.c:170:
+		simple_rmdir(dir,dentry);
 		                ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#338: FILE: fs/rcfs/dir.c:172:
+                // goto mkdir_err;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#340: FILE: fs/rcfs/dir.c:174:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#340: FILE: fs/rcfs/dir.c:174:
+ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#341: FILE: fs/rcfs/dir.c:175:
+ ^I// create the default set of magic files $

ERROR:CODE_INDENT: code indent should use tabs where possible
#341: FILE: fs/rcfs/dir.c:175:
+ ^I// create the default set of magic files $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#341: FILE: fs/rcfs/dir.c:175:
+ ^I// create the default set of magic files $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#341: FILE: fs/rcfs/dir.c:175:
+ ^I// create the default set of magic files $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#343: FILE: fs/rcfs/dir.c:177:
+^Ircfs_create_magic(dentry, &(((struct rcfs_magf*)clstype->mfdesc)[1]), $

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#343: FILE: fs/rcfs/dir.c:177:
+	rcfs_create_magic(dentry, &(((struct rcfs_magf*)clstype->mfdesc)[1]), 

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#344: FILE: fs/rcfs/dir.c:178:
+			  clstype->mfcount-1);
 			                  ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#354: FILE: fs/rcfs/dir.c:188:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#355: FILE: fs/rcfs/dir.c:189:
+int $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#356: FILE: fs/rcfs/dir.c:190:
+rcfs_rmdir(struct inode * dir, struct dentry * dentry)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#356: FILE: fs/rcfs/dir.c:190:
+rcfs_rmdir(struct inode * dir, struct dentry * dentry)

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#360: FILE: fs/rcfs/dir.c:194:
+#if 0

ERROR:TRAILING_WHITESPACE: trailing whitespace
#361: FILE: fs/rcfs/dir.c:195:
+^Istruct dentry *pd = list_entry(dir->i_dentry.next, $

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#366: FILE: fs/rcfs/dir.c:200:
+		if (rcfs_eng_callbacks.rmdir) {
[...]
+		} else {
[...]

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#372: FILE: fs/rcfs/dir.c:206:
+	}
+	else if ((!strcmp(pd->d_name.name, "/") &&

ERROR:TRAILING_WHITESPACE: trailing whitespace
#377: FILE: fs/rcfs/dir.c:211:
+^I$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#379: FILE: fs/rcfs/dir.c:213:
+		printk(KERN_ERR "rcfs_rmdir: directory not empty\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'rcfs_rmdir', this function's name, in a string
#379: FILE: fs/rcfs/dir.c:213:
+		printk(KERN_ERR "rcfs_rmdir: directory not empty\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#383: FILE: fs/rcfs/dir.c:217:
+^I// Core class removal $

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ri->core"
#385: FILE: fs/rcfs/dir.c:219:
+	if (ri->core == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#386: FILE: fs/rcfs/dir.c:220:
+		printk(KERN_ERR "rcfs_rmdir: core==NULL\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'rcfs_rmdir', this function's name, in a string
#386: FILE: fs/rcfs/dir.c:220:
+		printk(KERN_ERR "rcfs_rmdir: core==NULL\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around ri->core->classtype->free
#391: FILE: fs/rcfs/dir.c:225:
+	if ((*(ri->core->classtype->free))(ri->core)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ri->core->classtype->free'
#391: FILE: fs/rcfs/dir.c:225:
+	if ((*(ri->core->classtype->free))(ri->core)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ri->core'
#391: FILE: fs/rcfs/dir.c:225:
+	if ((*(ri->core->classtype->free))(ri->core)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#392: FILE: fs/rcfs/dir.c:226:
+		printk(KERN_ERR "rcfs_rmdir: ckrm_free_core_class failed\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'rcfs_rmdir', this function's name, in a string
#392: FILE: fs/rcfs/dir.c:226:
+		printk(KERN_ERR "rcfs_rmdir: ckrm_free_core_class failed\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#395: FILE: fs/rcfs/dir.c:229:
+^Iri->core = NULL ; // just to be safe $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#397: FILE: fs/rcfs/dir.c:231:
+^I// Clear magic files only after core successfully removed $

ERROR:CODE_INDENT: code indent should use tabs where possible
#398: FILE: fs/rcfs/dir.c:232:
+ ^Ircfs_clear_magic(dentry);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#398: FILE: fs/rcfs/dir.c:232:
+ ^Ircfs_clear_magic(dentry);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#398: FILE: fs/rcfs/dir.c:232:
+ ^Ircfs_clear_magic(dentry);$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#407: FILE: fs/rcfs/dir.c:241:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#411: FILE: fs/rcfs/dir.c:245:
+^I// -ENOENT and not -ENOPERM to allow rm -rf to work despite $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#416: FILE: fs/rcfs/dir.c:250:
+^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#420: FILE: fs/rcfs/dir.c:254:
+rcfs_rename(struct inode *old_dir, struct dentry *old_dentry,
+		struct inode *new_dir, struct dentry *new_dentry)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#422: FILE: fs/rcfs/dir.c:256:
+^Iif (S_ISDIR(old_dentry->d_inode->i_mode)) $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#429: FILE: fs/rcfs/dir.c:263:
+
+

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#430: FILE: fs/rcfs/dir.c:264:
+struct inode_operations rcfs_dir_inode_operations = {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#442: FILE: fs/rcfs/dir.c:276:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#444: FILE: fs/rcfs/dir.c:278:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#446: FILE: fs/rcfs/dir.c:280:
+int $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#447: FILE: fs/rcfs/dir.c:281:
+rcfs_root_create(struct inode *dir, struct dentry *dentry, int mode, $

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#448: FILE: fs/rcfs/dir.c:282:
+		 struct nameidata *nd)
 		                   ^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#453: FILE: fs/rcfs/dir.c:287:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#454: FILE: fs/rcfs/dir.c:288:
+int  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#455: FILE: fs/rcfs/dir.c:289:
+rcfs_root_symlink(struct inode * dir, struct dentry *dentry, $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#455: FILE: fs/rcfs/dir.c:289:
+rcfs_root_symlink(struct inode * dir, struct dentry *dentry, 

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#456: FILE: fs/rcfs/dir.c:290:
+		  const char * symname)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#461: FILE: fs/rcfs/dir.c:295:
+int $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#467: FILE: fs/rcfs/dir.c:301:
+int $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#468: FILE: fs/rcfs/dir.c:302:
+rcfs_root_rmdir(struct inode * dir, struct dentry * dentry)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#468: FILE: fs/rcfs/dir.c:302:
+rcfs_root_rmdir(struct inode * dir, struct dentry * dentry)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#484: FILE: fs/rcfs/dir.c:318:
+^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#487: FILE: fs/rcfs/dir.c:321:
+rcfs_root_rename(struct inode *old_dir, struct dentry *old_dentry,
+		struct inode *new_dir, struct dentry *new_dentry)

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#492: FILE: fs/rcfs/dir.c:326:
+struct inode_operations rcfs_rootdir_inode_operations = {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#507: FILE: fs/rcfs/inode.c:1:
+/* $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#507: FILE: fs/rcfs/inode.c:1:
+/* 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#508: FILE: fs/rcfs/inode.c:2:
+ * fs/rcfs/inode.c $

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#508: FILE: fs/rcfs/inode.c:2:
+ * fs/rcfs/inode.c 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#512: FILE: fs/rcfs/inode.c:6:
+ *           $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#513: FILE: fs/rcfs/inode.c:7:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#514: FILE: fs/rcfs/inode.c:8:
+ * Resource class filesystem (rcfs) forming the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#518: FILE: fs/rcfs/inode.c:12:
+ * $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#534: FILE: fs/rcfs/inode.c:28:
+
+

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#550: FILE: fs/rcfs/inode.c:44:
+#include <asm/uaccess.h>

CHECK:LINE_SPACING: Please don't use multiple blank lines
#554: FILE: fs/rcfs/inode.c:48:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#556: FILE: fs/rcfs/inode.c:50:
+// Address of variable used as flag to indicate a magic file, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#557: FILE: fs/rcfs/inode.c:51:
+// ; value unimportant $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#560: FILE: fs/rcfs/inode.c:54:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#563: FILE: fs/rcfs/inode.c:57:
+	struct inode * inode = new_inode(sb);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#571: FILE: fs/rcfs/inode.c:65:
+		inode->i_atime = inode->i_mtime = inode->i_ctime = CURRENT_TIME;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#577: FILE: fs/rcfs/inode.c:71:
+			// Treat as default assignment */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#586: FILE: fs/rcfs/inode.c:80:
+^I^I^I// directory inodes start off with i_nlink == 2 $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#588: FILE: fs/rcfs/inode.c:82:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#588: FILE: fs/rcfs/inode.c:82:
+ $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#599: FILE: fs/rcfs/inode.c:93:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#618: FILE: fs/rcfs/inode.c:112:
+^I^Idget(dentry);^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#626: FILE: fs/rcfs/inode.c:120:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#638: FILE: fs/rcfs/inode.c:132:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#639: FILE: fs/rcfs/inode.c:133:
+struct dentry * $

WARNING:SPACING: space prohibited before semicolon
#643: FILE: fs/rcfs/inode.c:137:
+	struct dentry *mfdentry ;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#645: FILE: fs/rcfs/inode.c:139:
+^I// Get new dentry for name  $

ERROR:CODE_INDENT: code indent should use tabs where possible
#646: FILE: fs/rcfs/inode.c:140:
+ ^Iqstr.name = magf->name;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#646: FILE: fs/rcfs/inode.c:140:
+ ^Iqstr.name = magf->name;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#646: FILE: fs/rcfs/inode.c:140:
+ ^Iqstr.name = magf->name;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#647: FILE: fs/rcfs/inode.c:141:
+ ^Iqstr.len = strlen(magf->name);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#647: FILE: fs/rcfs/inode.c:141:
+ ^Iqstr.len = strlen(magf->name);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#647: FILE: fs/rcfs/inode.c:141:
+ ^Iqstr.len = strlen(magf->name);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#648: FILE: fs/rcfs/inode.c:142:
+ ^Iqstr.hash = full_name_hash(magf->name,qstr.len);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#648: FILE: fs/rcfs/inode.c:142:
+ ^Iqstr.hash = full_name_hash(magf->name,qstr.len);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#648: FILE: fs/rcfs/inode.c:142:
+ ^Iqstr.hash = full_name_hash(magf->name,qstr.len);$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#648: FILE: fs/rcfs/inode.c:142:
+ 	qstr.hash = full_name_hash(magf->name,qstr.len);
  	                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#649: FILE: fs/rcfs/inode.c:143:
+	mfdentry = lookup_hash(&qstr,parent);
 	                            ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#652: FILE: fs/rcfs/inode.c:146:
+^I^Iint err; $

ERROR:CODE_INDENT: code indent should use tabs where possible
#655: FILE: fs/rcfs/inode.c:149:
+ ^I^Iif (magic && (magf->mode & S_IFDIR))$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#655: FILE: fs/rcfs/inode.c:149:
+ ^I^Iif (magic && (magf->mode & S_IFDIR))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#655: FILE: fs/rcfs/inode.c:149:
+ ^I^Iif (magic && (magf->mode & S_IFDIR))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#656: FILE: fs/rcfs/inode.c:150:
+ ^I^I^Ierr = parent->d_inode->i_op->mkdir(parent->d_inode,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#656: FILE: fs/rcfs/inode.c:150:
+ ^I^I^Ierr = parent->d_inode->i_op->mkdir(parent->d_inode,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#656: FILE: fs/rcfs/inode.c:150:
+ ^I^I^Ierr = parent->d_inode->i_op->mkdir(parent->d_inode,$

CHECK:BRACES: Unbalanced braces around else statement
#658: FILE: fs/rcfs/inode.c:152:
+		else {

ERROR:CODE_INDENT: code indent should use tabs where possible
#659: FILE: fs/rcfs/inode.c:153:
+ ^I^I^Ierr =_rcfs_mknod(parent->d_inode,mfdentry,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#659: FILE: fs/rcfs/inode.c:153:
+ ^I^I^Ierr =_rcfs_mknod(parent->d_inode,mfdentry,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#659: FILE: fs/rcfs/inode.c:153:
+ ^I^I^Ierr =_rcfs_mknod(parent->d_inode,mfdentry,$

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#659: FILE: fs/rcfs/inode.c:153:
+ 			err =_rcfs_mknod(parent->d_inode,mfdentry,
  			    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#659: FILE: fs/rcfs/inode.c:153:
+ 			err =_rcfs_mknod(parent->d_inode,mfdentry,
  			                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#660: FILE: fs/rcfs/inode.c:154:
+					 magf->mode,0);
 					           ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#661: FILE: fs/rcfs/inode.c:155:
+^I^I^I// _rcfs_mknod doesn't increment parent's link count, $

WARNING:SPACING: space prohibited before semicolon
#672: FILE: fs/rcfs/inode.c:166:
+	return mfdentry ;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#676: FILE: fs/rcfs/inode.c:170:
+int $

WARNING:SPACING: space prohibited before semicolon
#679: FILE: fs/rcfs/inode.c:173:
+	struct dentry *parent ;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#683: FILE: fs/rcfs/inode.c:177:
+^I$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#686: FILE: fs/rcfs/inode.c:180:
+	if (!mfdentry->d_inode) {
+		return 0;
+	}

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#702: FILE: fs/rcfs/inode.c:196:
+struct inode_operations rcfs_file_inode_operations = {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#705: FILE: fs/rcfs/inode.c:199:
+^I^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#706: FILE: fs/rcfs/inode.c:200:
+		
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#708: FILE: fs/rcfs/inode.c:202:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#710: FILE: fs/rcfs/inode.c:204:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#715: FILE: fs/rcfs/magic.c:1:
+/* $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#715: FILE: fs/rcfs/magic.c:1:
+/* 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#716: FILE: fs/rcfs/magic.c:2:
+ * fs/rcfs/magic.c $

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#716: FILE: fs/rcfs/magic.c:2:
+ * fs/rcfs/magic.c 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#722: FILE: fs/rcfs/magic.c:8:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#723: FILE: fs/rcfs/magic.c:9:
+ * File operations for common magic files in rcfs, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#724: FILE: fs/rcfs/magic.c:10:
+ * the user interface for CKRM. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#725: FILE: fs/rcfs/magic.c:11:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#726: FILE: fs/rcfs/magic.c:12:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#728: FILE: fs/rcfs/magic.c:14:
+ * $

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#754: FILE: fs/rcfs/magic.c:40:
+#include <asm/uaccess.h>

CHECK:LINE_SPACING: Please don't use multiple blank lines
#758: FILE: fs/rcfs/magic.c:44:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#760: FILE: fs/rcfs/magic.c:46:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#768: FILE: fs/rcfs/magic.c:54:
+
+

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#769: FILE: fs/rcfs/magic.c:55:
+#define MAGIC_SHOW(FUNC)                                               \
+static int                                                             \
+FUNC ## _show(struct seq_file *s, void *v)			       \
+{								       \
+	int rc=0;						       \
+	ckrm_core_class_t *core ;				       \
+								       \
+	core = (ckrm_core_class_t *)                                   \
+		(((struct rcfs_inode_info *)s->private)->core);	       \
+								       \
+	if (!ckrm_is_core_valid(core)) {			       \
+		return -EINVAL;					       \
+        }                                                              \
+                                                                       \
+	if (core->classtype->show_ ## FUNC)			       \
+		rc = (* core->classtype->show_ ## FUNC)(core, s);      \
+								       \
+	return rc;						       \
+};                                                                      

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#773: FILE: fs/rcfs/magic.c:59:
+	int rc=0;						       \
 	      ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#781: FILE: fs/rcfs/magic.c:67:
+        }                                                              \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#781: FILE: fs/rcfs/magic.c:67:
+        }                                                              \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#782: FILE: fs/rcfs/magic.c:68:
+                                                                       \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#782: FILE: fs/rcfs/magic.c:68:
+                                                                       \$

ERROR:SPACING: space prohibited after that '*' (ctx:BxW)
#784: FILE: fs/rcfs/magic.c:70:
+		rc = (* core->classtype->show_ ## FUNC)(core, s);      \
 		      ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#787: FILE: fs/rcfs/magic.c:73:
+};                                                                      $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#788: FILE: fs/rcfs/magic.c:74:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#788: FILE: fs/rcfs/magic.c:74:
+ $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#789: FILE: fs/rcfs/magic.c:75:
+ 
+

ERROR:SPACING: spaces required around that '=' (ctx:VxO)
#795: FILE: fs/rcfs/magic.c:81:
+	int ret=-EINVAL;                                               \
 	       ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#795: FILE: fs/rcfs/magic.c:81:
+	int ret=-EINVAL;                                               \
 	        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#800: FILE: fs/rcfs/magic.c:86:
+		ret = single_open(file,FUNC ## _show, (void *)ri);     \
 		                      ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#803: FILE: fs/rcfs/magic.c:89:
+}^I^I^I^I^I^I^I^I       $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#804: FILE: fs/rcfs/magic.c:90:
+^I^I^I^I^I^I^I^I       $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#809: FILE: fs/rcfs/magic.c:95:
+	return single_release(inode,file);			       \
 	                           ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#811: FILE: fs/rcfs/magic.c:97:
+^I^I^I^I^I^I^I^I       $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#812: FILE: fs/rcfs/magic.c:98:
+								       
+

ERROR:SPACING: space required after that ',' (ctx:VxV)
#845: FILE: fs/rcfs/magic.c:131:
+#define MAGIC_WRITE(FUNC,CLSTYPEFUN)                                   \
                         ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'CLSTYPEFUN' - possible side-effects?
#845: FILE: fs/rcfs/magic.c:131:
+#define MAGIC_WRITE(FUNC,CLSTYPEFUN)                                   \
+static ssize_t                                                         \
+FUNC ## _write(struct file *file, const char __user *buf,	       \
+			   size_t count, loff_t *ppos)		       \
+{								       \
+	struct rcfs_inode_info *ri = 				       \
+		RCFS_I(file->f_dentry->d_parent->d_inode);	       \
+	char *optbuf, *otherstr=NULL, *resname=NULL;		       \
+	int done, rc = 0;					       \
+	ckrm_core_class_t *core ;				       \
+								       \
+	core = ri->core;					       \
+	if (!ckrm_is_core_valid(core)) 				       \
+		return -EINVAL;					       \
+								       \
+	if ((ssize_t) count < 0 				       \
+	    || (ssize_t) count > FUNC ## _max_input_size)              \
+		return -EINVAL;					       \
+								       \
+	if (!access_ok(VERIFY_READ, buf, count))		       \
+		return -EFAULT;					       \
+								       \
+	down(&(ri->vfs_inode.i_sem));				       \
+								       \
+	optbuf = kmalloc(FUNC ## _max_input_size, GFP_KERNEL);         \
+	__copy_from_user(optbuf, buf, count);			       \
+	if (optbuf[count-1] == '\n')				       \
+		optbuf[count-1]='\0';				       \
+								       \
+	done = FUNC ## _parse(optbuf, &resname, &otherstr);            \
+								       \
+	if (!done) {						       \
+		printk(KERN_ERR "Error parsing FUNC \n");	       \
+		goto FUNC ## _write_out;			       \
+	}							       \
+								       \
+	if (core->classtype-> CLSTYPEFUN) {		               \
+		rc = (*core->classtype->CLSTYPEFUN)	               \
+			(core, resname, otherstr);		       \
+		if (rc) {					       \
+			printk(KERN_ERR "FUNC_write: CLSTYPEFUN error\n");   \
+			goto FUNC ## _write_out; 	               \
+		}						       \
+	}							       \
+								       \
+FUNC ## _write_out:						       \
+	up(&(ri->vfs_inode.i_sem));				       \
+	kfree(optbuf);						       \
+	kfree(otherstr);					       \
+	kfree(resname);						       \
+	return rc ? rc : count;					       \
+}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'CLSTYPEFUN' may be better as '(CLSTYPEFUN)' to avoid precedence issues
#845: FILE: fs/rcfs/magic.c:131:
+#define MAGIC_WRITE(FUNC,CLSTYPEFUN)                                   \
+static ssize_t                                                         \
+FUNC ## _write(struct file *file, const char __user *buf,	       \
+			   size_t count, loff_t *ppos)		       \
+{								       \
+	struct rcfs_inode_info *ri = 				       \
+		RCFS_I(file->f_dentry->d_parent->d_inode);	       \
+	char *optbuf, *otherstr=NULL, *resname=NULL;		       \
+	int done, rc = 0;					       \
+	ckrm_core_class_t *core ;				       \
+								       \
+	core = ri->core;					       \
+	if (!ckrm_is_core_valid(core)) 				       \
+		return -EINVAL;					       \
+								       \
+	if ((ssize_t) count < 0 				       \
+	    || (ssize_t) count > FUNC ## _max_input_size)              \
+		return -EINVAL;					       \
+								       \
+	if (!access_ok(VERIFY_READ, buf, count))		       \
+		return -EFAULT;					       \
+								       \
+	down(&(ri->vfs_inode.i_sem));				       \
+								       \
+	optbuf = kmalloc(FUNC ## _max_input_size, GFP_KERNEL);         \
+	__copy_from_user(optbuf, buf, count);			       \
+	if (optbuf[count-1] == '\n')				       \
+		optbuf[count-1]='\0';				       \
+								       \
+	done = FUNC ## _parse(optbuf, &resname, &otherstr);            \
+								       \
+	if (!done) {						       \
+		printk(KERN_ERR "Error parsing FUNC \n");	       \
+		goto FUNC ## _write_out;			       \
+	}							       \
+								       \
+	if (core->classtype-> CLSTYPEFUN) {		               \
+		rc = (*core->classtype->CLSTYPEFUN)	               \
+			(core, resname, otherstr);		       \
+		if (rc) {					       \
+			printk(KERN_ERR "FUNC_write: CLSTYPEFUN error\n");   \
+			goto FUNC ## _write_out; 	               \
+		}						       \
+	}							       \
+								       \
+FUNC ## _write_out:						       \
+	up(&(ri->vfs_inode.i_sem));				       \
+	kfree(optbuf);						       \
+	kfree(otherstr);					       \
+	kfree(resname);						       \
+	return rc ? rc : count;					       \
+}

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#850: FILE: fs/rcfs/magic.c:136:
+^Istruct rcfs_inode_info *ri = ^I^I^I^I       \$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#852: FILE: fs/rcfs/magic.c:138:
+	char *optbuf, *otherstr=NULL, *resname=NULL;		       \
 	                       ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#852: FILE: fs/rcfs/magic.c:138:
+	char *optbuf, *otherstr=NULL, *resname=NULL;		       \
 	                                      ^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#857: FILE: fs/rcfs/magic.c:143:
+^Iif (!ckrm_is_core_valid(core)) ^I^I^I^I       \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#860: FILE: fs/rcfs/magic.c:146:
+^Iif ((ssize_t) count < 0 ^I^I^I^I       \$

CHECK:SPACING: No space is necessary after a cast
#860: FILE: fs/rcfs/magic.c:146:
+	if ((ssize_t) count < 0 				       \

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#861: FILE: fs/rcfs/magic.c:147:
+	if ((ssize_t) count < 0 				       \
+	    || (ssize_t) count > FUNC ## _max_input_size)              \

CHECK:SPACING: No space is necessary after a cast
#861: FILE: fs/rcfs/magic.c:147:
+	    || (ssize_t) count > FUNC ## _max_input_size)              \

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around ri->vfs_inode.i_sem
#867: FILE: fs/rcfs/magic.c:153:
+	down(&(ri->vfs_inode.i_sem));				       \

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#871: FILE: fs/rcfs/magic.c:157:
+	if (optbuf[count-1] == '\n')				       \
 	                ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#872: FILE: fs/rcfs/magic.c:158:
+		optbuf[count-1]='\0';				       \
 		            ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#872: FILE: fs/rcfs/magic.c:158:
+		optbuf[count-1]='\0';				       \
 		               ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#877: FILE: fs/rcfs/magic.c:163:
+		printk(KERN_ERR "Error parsing FUNC \n");	       \

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#877: FILE: fs/rcfs/magic.c:163:
+		printk(KERN_ERR "Error parsing FUNC \n");	       \

ERROR:SPACING: spaces prohibited around that '->' (ctx:VxW)
#881: FILE: fs/rcfs/magic.c:167:
+	if (core->classtype-> CLSTYPEFUN) {		               \
 	                   ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#885: FILE: fs/rcfs/magic.c:171:
+			printk(KERN_ERR "FUNC_write: CLSTYPEFUN error\n");   \

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#886: FILE: fs/rcfs/magic.c:172:
+^I^I^Igoto FUNC ## _write_out; ^I               \$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around ri->vfs_inode.i_sem
#891: FILE: fs/rcfs/magic.c:177:
+	up(&(ri->vfs_inode.i_sem));				       \

ERROR:TRAILING_WHITESPACE: trailing whitespace
#897: FILE: fs/rcfs/magic.c:183:
+^I^I^I^I^I^I^I^I       $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#898: FILE: fs/rcfs/magic.c:184:
+^I^I^I^I^I^I^I^I       $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#898: FILE: fs/rcfs/magic.c:184:
+								       
+								       

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#899: FILE: fs/rcfs/magic.c:185:
+#define MAGIC_RD_FILEOPS(FUNC)                                         \
+struct file_operations FUNC ## _fileops = {                            \
+	.open           = FUNC ## _open,			       \
+	.read           = seq_read,				       \
+	.llseek         = seq_lseek,				       \
+	.release        = FUNC ## _close,			       \
+};                                                                     \
+EXPORT_SYMBOL(FUNC ## _fileops);

WARNING:CONST_STRUCT: struct file_operations should normally be const
#900: FILE: fs/rcfs/magic.c:186:
+struct file_operations FUNC ## _fileops = {                            \

ERROR:TRAILING_WHITESPACE: trailing whitespace
#908: FILE: fs/rcfs/magic.c:194:
+^I^I^I^I^I^I^I^I       $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#908: FILE: fs/rcfs/magic.c:194:
+
+								       

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#909: FILE: fs/rcfs/magic.c:195:
+#define MAGIC_RDWR_FILEOPS(FUNC)                                       \
+struct file_operations FUNC ## _fileops = {                            \
+	.open           = FUNC ## _open,			       \
+	.read           = seq_read,				       \
+	.llseek         = seq_lseek,				       \
+	.release        = FUNC ## _close,			       \
+	.write          = FUNC ## _write,	                       \
+};                                                                     \
+EXPORT_SYMBOL(FUNC ## _fileops);

WARNING:CONST_STRUCT: struct file_operations should normally be const
#910: FILE: fs/rcfs/magic.c:196:
+struct file_operations FUNC ## _fileops = {                            \

CHECK:LINE_SPACING: Please don't use multiple blank lines
#919: FILE: fs/rcfs/magic.c:205:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#931: FILE: fs/rcfs/magic.c:217:
+target_write(struct file *file, const char __user *buf,
+			   size_t count, loff_t *ppos)

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#933: FILE: fs/rcfs/magic.c:219:
+	struct rcfs_inode_info *ri= RCFS_I(file->f_dentry->d_inode);
 	                          ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#938: FILE: fs/rcfs/magic.c:224:
+
+

CHECK:SPACING: No space is necessary after a cast
#939: FILE: fs/rcfs/magic.c:225:
+	if ((ssize_t) count < 0 || (ssize_t) count > TARGET_MAX_INPUT_SIZE)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#941: FILE: fs/rcfs/magic.c:227:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#944: FILE: fs/rcfs/magic.c:230:
+^I$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around ri->vfs_inode.i_sem
#945: FILE: fs/rcfs/magic.c:231:
+	down(&(ri->vfs_inode.i_sem));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#946: FILE: fs/rcfs/magic.c:232:
+^I$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#949: FILE: fs/rcfs/magic.c:235:
+	if (optbuf[count-1] == '\n')
 	                ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#950: FILE: fs/rcfs/magic.c:236:
+		optbuf[count-1]='\0';
 		            ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#950: FILE: fs/rcfs/magic.c:236:
+		optbuf[count-1]='\0';
 		               ^

ERROR:SPACING: space prohibited after that '*' (ctx:BxW)
#954: FILE: fs/rcfs/magic.c:240:
+		rc = (* clstype->forced_reclassify)(ri->core,optbuf);
 		      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#954: FILE: fs/rcfs/magic.c:240:
+		rc = (* clstype->forced_reclassify)(ri->core,optbuf);
 		                                            ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around ri->vfs_inode.i_sem
#956: FILE: fs/rcfs/magic.c:242:
+	up(&(ri->vfs_inode.i_sem));

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#960: FILE: fs/rcfs/magic.c:246:
+
+}

WARNING:CONST_STRUCT: struct file_operations should normally be const
#962: FILE: fs/rcfs/magic.c:248:
+struct file_operations target_fileops = {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#967: FILE: fs/rcfs/magic.c:253:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#972: FILE: fs/rcfs/magic.c:258:
+ * Set/get configuration parameters of a class. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#979: FILE: fs/rcfs/magic.c:265:
+^I^I^I^I^I^I^I^I       $

ERROR:CODE_INDENT: code indent should use tabs where possible
#983: FILE: fs/rcfs/magic.c:269:
+         config_str, config_res_type, config_err$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#983: FILE: fs/rcfs/magic.c:269:
+         config_str, config_res_type, config_err$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#987: FILE: fs/rcfs/magic.c:273:
+	{config_res_type,"res=%s"},
 	                ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#989: FILE: fs/rcfs/magic.c:275:
+        {config_err, NULL},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#989: FILE: fs/rcfs/magic.c:275:
+        {config_err, NULL},$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#992: FILE: fs/rcfs/magic.c:278:
+
+

ERROR:SPACING: space required after that ',' (ctx:VxV)
#994: FILE: fs/rcfs/magic.c:280:
+MAGIC_WRITE(config,set_config);
                   ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1001: FILE: fs/rcfs/magic.c:287:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1015: FILE: fs/rcfs/magic.c:301:
+
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#1028: FILE: fs/rcfs/magic.c:314:
+         stats_res_type, stats_str,stats_err$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1028: FILE: fs/rcfs/magic.c:314:
+         stats_res_type, stats_str,stats_err$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1028: FILE: fs/rcfs/magic.c:314:
+         stats_res_type, stats_str,stats_err
                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1032: FILE: fs/rcfs/magic.c:318:
+	{stats_res_type,"res=%s"},
 	               ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1034: FILE: fs/rcfs/magic.c:320:
+        {stats_err, NULL},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1034: FILE: fs/rcfs/magic.c:320:
+        {stats_err, NULL},$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1037: FILE: fs/rcfs/magic.c:323:
+
+

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1039: FILE: fs/rcfs/magic.c:325:
+MAGIC_WRITE(stats,reset_stats);
                  ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1046: FILE: fs/rcfs/magic.c:332:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1051: FILE: fs/rcfs/magic.c:337:
+ * Share types and semantics are defined by rcfs and ckrm core $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1052: FILE: fs/rcfs/magic.c:338:
+ * $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1055: FILE: fs/rcfs/magic.c:341:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1059: FILE: fs/rcfs/magic.c:345:
+/* The enums for the share types should match the indices expected by
+   array parameter to ckrm_set_resshare */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1059: FILE: fs/rcfs/magic.c:345:
+   array parameter to ckrm_set_resshare */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1062: FILE: fs/rcfs/magic.c:348:
+/* Note only the first NUM_SHAREVAL enums correspond to share types,
+   the remaining ones are for token matching purposes */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1062: FILE: fs/rcfs/magic.c:348:
+   the remaining ones are for token matching purposes */

ERROR:CODE_INDENT: code indent should use tabs where possible
#1065: FILE: fs/rcfs/magic.c:351:
+        MY_GUAR, MY_LIM, TOT_GUAR, MAX_LIM, SHARE_RES_TYPE, SHARE_ERR$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1065: FILE: fs/rcfs/magic.c:351:
+        MY_GUAR, MY_LIM, TOT_GUAR, MAX_LIM, SHARE_RES_TYPE, SHARE_ERR$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1071: FILE: fs/rcfs/magic.c:357:
+        {MY_GUAR, "guarantee=%d"},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1071: FILE: fs/rcfs/magic.c:357:
+        {MY_GUAR, "guarantee=%d"},$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1072: FILE: fs/rcfs/magic.c:358:
+        {MY_LIM,  "limit=%d"},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1072: FILE: fs/rcfs/magic.c:358:
+        {MY_LIM,  "limit=%d"},$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1073: FILE: fs/rcfs/magic.c:359:
+	{TOT_GUAR,"total_guarantee=%d"},
 	         ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1075: FILE: fs/rcfs/magic.c:361:
+        {SHARE_ERR, NULL}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1075: FILE: fs/rcfs/magic.c:361:
+        {SHARE_ERR, NULL}$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1078: FILE: fs/rcfs/magic.c:364:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1087: FILE: fs/rcfs/magic.c:373:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1089: FILE: fs/rcfs/magic.c:375:
+^I^I$

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1089: FILE: fs/rcfs/magic.c:375:
+	while ((p = strsep(&options, ",")) != NULL) {
+		

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1092: FILE: fs/rcfs/magic.c:378:
+^I^I$

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1125: FILE: fs/rcfs/magic.c:411:
+
+	}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1127: FILE: fs/rcfs/magic.c:413:
+}^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1129: FILE: fs/rcfs/magic.c:415:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1132: FILE: fs/rcfs/magic.c:418:
+shares_write(struct file *file, const char __user *buf,
+			   size_t count, loff_t *ppos)

CHECK:SPACING: No space is necessary after a cast
#1151: FILE: fs/rcfs/magic.c:437:
+	if ((ssize_t) count < 0 || (ssize_t) count > SHARES_MAX_INPUT_SIZE)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1153: FILE: fs/rcfs/magic.c:439:
+^I$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ri->core'
#1159: FILE: fs/rcfs/magic.c:445:
+	if (!ri || !ckrm_is_core_valid((ckrm_core_class_t *)(ri->core))) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1160: FILE: fs/rcfs/magic.c:446:
+		printk(KERN_ERR "shares_write: Error accessing core class\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'shares_write', this function's name, in a string
#1160: FILE: fs/rcfs/magic.c:446:
+		printk(KERN_ERR "shares_write: Error accessing core class\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1163: FILE: fs/rcfs/magic.c:449:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1165: FILE: fs/rcfs/magic.c:451:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1166: FILE: fs/rcfs/magic.c:452:
+^Icore = ri->core; $

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1169: FILE: fs/rcfs/magic.c:455:
+	if (optbuf[count-1] == '\n')
 	                ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1170: FILE: fs/rcfs/magic.c:456:
+		optbuf[count-1]='\0';
 		            ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1170: FILE: fs/rcfs/magic.c:456:
+		optbuf[count-1]='\0';
 		               ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1174: FILE: fs/rcfs/magic.c:460:
+		printk(KERN_ERR "Error parsing shares\n");

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1180: FILE: fs/rcfs/magic.c:466:
+		rc = (*core->classtype->set_shares)(core,resname,&newshares);
 		                                        ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#1180: FILE: fs/rcfs/magic.c:466:
+		rc = (*core->classtype->set_shares)(core,resname,&newshares);
 		                                                ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#1180: FILE: fs/rcfs/magic.c:466:
+		rc = (*core->classtype->set_shares)(core,resname,&newshares);
 		                                                 ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1182: FILE: fs/rcfs/magic.c:468:
+			printk(KERN_ERR "shares_write: resctlr share set error\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'shares_write', this function's name, in a string
#1182: FILE: fs/rcfs/magic.c:468:
+			printk(KERN_ERR "shares_write: resctlr share set error\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1186: FILE: fs/rcfs/magic.c:472:
+^I$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1187: FILE: fs/rcfs/magic.c:473:
+	printk(KERN_ERR "Set %s shares to %d %d %d %d\n",

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1189: FILE: fs/rcfs/magic.c:475:
+^I       newshares.my_guarantee, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1190: FILE: fs/rcfs/magic.c:476:
+^I       newshares.my_limit, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1193: FILE: fs/rcfs/magic.c:479:
+      $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1193: FILE: fs/rcfs/magic.c:479:
+      $

WARNING:SPACING: space prohibited before semicolon
#1194: FILE: fs/rcfs/magic.c:480:
+	rc = count ;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1196: FILE: fs/rcfs/magic.c:482:
+write_out:^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1204: FILE: fs/rcfs/magic.c:490:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1211: FILE: fs/rcfs/magic.c:497:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1218: FILE: fs/rcfs/magic.c:504:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1219: FILE: fs/rcfs/magic.c:505:
+int $

WARNING:SPACING: space prohibited before semicolon
#1222: FILE: fs/rcfs/magic.c:508:
+	struct dentry *mftmp, *mfdentry ;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1225: FILE: fs/rcfs/magic.c:511:
+^I^I$

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1225: FILE: fs/rcfs/magic.c:511:
+	list_for_each_entry_safe(mfdentry, mftmp, &parent->d_subdirs, d_child) {
+		

WARNING:SPACING: space prohibited before semicolon
#1227: FILE: fs/rcfs/magic.c:513:
+			continue ;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1229: FILE: fs/rcfs/magic.c:515:
+^I^Iif (rcfs_delete_internal(mfdentry)) $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1230: FILE: fs/rcfs/magic.c:516:
+			printk(KERN_ERR "rcfs_clear_magic: error deleting one\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'rcfs_clear_magic', this function's name, in a string
#1230: FILE: fs/rcfs/magic.c:516:
+			printk(KERN_ERR "rcfs_clear_magic: error deleting one\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1234: FILE: fs/rcfs/magic.c:520:
+  $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1234: FILE: fs/rcfs/magic.c:520:
+  $

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1235: FILE: fs/rcfs/magic.c:521:
+  
+}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1238: FILE: fs/rcfs/magic.c:524:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1239: FILE: fs/rcfs/magic.c:525:
+int $

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1245: FILE: fs/rcfs/magic.c:531:
+	for (i=0; i<count; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1245: FILE: fs/rcfs/magic.c:531:
+	for (i=0; i<count; i++) {
 	           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1246: FILE: fs/rcfs/magic.c:532:
+		mfdentry = rcfs_create_internal(parent, &magf[i],0);
 		                                                ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1265: FILE: fs/rcfs/rootdir.c:1:
+/* $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1265: FILE: fs/rcfs/rootdir.c:1:
+/* 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1266: FILE: fs/rcfs/rootdir.c:2:
+ * fs/rcfs/rootdir.c $

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#1266: FILE: fs/rcfs/rootdir.c:2:
+ * fs/rcfs/rootdir.c 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1269: FILE: fs/rcfs/rootdir.c:5:
+ *           $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1270: FILE: fs/rcfs/rootdir.c:6:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1271: FILE: fs/rcfs/rootdir.c:7:
+ * Functions for creating root directories and magic files $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1275: FILE: fs/rcfs/rootdir.c:11:
+ * $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1289: FILE: fs/rcfs/rootdir.c:25:
+
+

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#1305: FILE: fs/rcfs/rootdir.c:41:
+#include <asm/uaccess.h>

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1309: FILE: fs/rcfs/rootdir.c:45:
+
+

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1318: FILE: fs/rcfs/rootdir.c:54:
+	if (!rcbs->mkdir || rcfs_eng_callbacks.mkdir) {
+		return -EINVAL;
+	}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1326: FILE: fs/rcfs/rootdir.c:62:
+
+

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rcbs->mkdir != rcfs_eng_callbacks.mkdir'
#1331: FILE: fs/rcfs/rootdir.c:67:
+	if (!rcbs->mkdir || !rcfs_eng_callbacks.mkdir ||
+			(rcbs->mkdir != rcfs_eng_callbacks.mkdir)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1332: FILE: fs/rcfs/rootdir.c:68:
+	if (!rcbs->mkdir || !rcfs_eng_callbacks.mkdir ||
+			(rcbs->mkdir != rcfs_eng_callbacks.mkdir)) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1341: FILE: fs/rcfs/rootdir.c:77:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1343: FILE: fs/rcfs/rootdir.c:79:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1345: FILE: fs/rcfs/rootdir.c:81:
+ * Create and return a "root" dentry under /rcfs. Also create associated magic files $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1353: FILE: fs/rcfs/rootdir.c:89:
+int $

WARNING:SPACING: space prohibited before semicolon
#1358: FILE: fs/rcfs/rootdir.c:94:
+	struct dentry *dentry ;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'mfcount < 0'
#1361: FILE: fs/rcfs/rootdir.c:97:
+	if ((mfcount < 0) || (!mfdesc))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!mfdesc'
#1361: FILE: fs/rcfs/rootdir.c:97:
+	if ((mfcount < 0) || (!mfdesc))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1363: FILE: fs/rcfs/rootdir.c:99:
+^I$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1365: FILE: fs/rcfs/rootdir.c:101:
+	printk("allocating classtype root <%s>\n",rootdesc->name);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1365: FILE: fs/rcfs/rootdir.c:101:
+	printk("allocating classtype root <%s>\n",rootdesc->name);
 	                                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1366: FILE: fs/rcfs/rootdir.c:102:
+	dentry = rcfs_create_internal(rcfs_rootde, rootdesc,0);
 	                                                   ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1367: FILE: fs/rcfs/rootdir.c:103:
+^I$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1369: FILE: fs/rcfs/rootdir.c:105:
+		printk(KERN_ERR "Could not create %s\n",rootdesc->name);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1369: FILE: fs/rcfs/rootdir.c:105:
+		printk(KERN_ERR "Could not create %s\n",rootdesc->name);
 		                                       ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1371: FILE: fs/rcfs/rootdir.c:107:
+^I} $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1372: FILE: fs/rcfs/rootdir.c:108:
+^I$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1377: FILE: fs/rcfs/rootdir.c:113:
+		printk(KERN_ERR "Error allocating name for %s\n",

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1382: FILE: fs/rcfs/rootdir.c:118:
+	snprintf(rootri->name,sz,"%s/%s",RCFS_ROOT,rootdesc->name);
 	                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1382: FILE: fs/rcfs/rootdir.c:118:
+	snprintf(rootri->name,sz,"%s/%s",RCFS_ROOT,rootdesc->name);
 	                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1382: FILE: fs/rcfs/rootdir.c:118:
+	snprintf(rootri->name,sz,"%s/%s",RCFS_ROOT,rootdesc->name);
 	                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1382: FILE: fs/rcfs/rootdir.c:118:
+	snprintf(rootri->name,sz,"%s/%s",RCFS_ROOT,rootdesc->name);
 	                                          ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1383: FILE: fs/rcfs/rootdir.c:119:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1396: FILE: fs/rcfs/rootdir.c:132:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1397: FILE: fs/rcfs/rootdir.c:133:
+int $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1410: FILE: fs/rcfs/rootdir.c:146:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1411: FILE: fs/rcfs/rootdir.c:147:
+int $

WARNING:SPACING: space prohibited before semicolon
#1414: FILE: fs/rcfs/rootdir.c:150:
+	int rc ;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1418: FILE: fs/rcfs/rootdir.c:154:
+^I// Initialize mfdesc, mfcount $

CHECK:SPACING: No space is necessary after a cast
#1419: FILE: fs/rcfs/rootdir.c:155:
+	clstype->mfdesc = (void *) genmfdesc[clstype->mfidx]->rootmf;

ERROR:CODE_INDENT: code indent should use tabs where possible
#1420: FILE: fs/rcfs/rootdir.c:156:
+        clstype->mfcount = genmfdesc[clstype->mfidx]->rootmflen;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1420: FILE: fs/rcfs/rootdir.c:156:
+        clstype->mfcount = genmfdesc[clstype->mfidx]->rootmflen;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1423: FILE: fs/rcfs/rootdir.c:159:
+^I$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1425: FILE: fs/rcfs/rootdir.c:161:
+	strncpy(mfdesc[0].name,clstype->name,RCFS_MAGF_NAMELEN) ;
 	                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1425: FILE: fs/rcfs/rootdir.c:161:
+	strncpy(mfdesc[0].name,clstype->name,RCFS_MAGF_NAMELEN) ;
 	                                    ^

WARNING:SPACING: space prohibited before semicolon
#1425: FILE: fs/rcfs/rootdir.c:161:
+	strncpy(mfdesc[0].name,clstype->name,RCFS_MAGF_NAMELEN) ;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1427: FILE: fs/rcfs/rootdir.c:163:
+	rc = rcfs_mkroot(mfdesc,clstype->mfcount,
 	                       ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1428: FILE: fs/rcfs/rootdir.c:164:
+	rc = rcfs_mkroot(mfdesc,clstype->mfcount,
+				(struct dentry **)&(clstype->rootde));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around clstype->rootde
#1428: FILE: fs/rcfs/rootdir.c:164:
+				(struct dentry **)&(clstype->rootde));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1436: FILE: fs/rcfs/rootdir.c:172:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1437: FILE: fs/rcfs/rootdir.c:173:
+^I// Create magic files under root $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1438: FILE: fs/rcfs/rootdir.c:174:
+^Iif ((rc = rcfs_create_magic(clstype->rootde, &mfdesc[1], $

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1438: FILE: fs/rcfs/rootdir.c:174:
+	if ((rc = rcfs_create_magic(clstype->rootde, &mfdesc[1], 

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1439: FILE: fs/rcfs/rootdir.c:175:
+				    clstype->mfcount-1))) {
 				                    ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1449: FILE: fs/rcfs/rootdir.c:185:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1450: FILE: fs/rcfs/rootdir.c:186:
+int $

WARNING:SPACING: space prohibited before semicolon
#1457: FILE: fs/rcfs/rootdir.c:193:
+		clstype->default_class->name = NULL ;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1464: FILE: fs/rcfs/rootdir.c:200:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1472: FILE: fs/rcfs/rootdir.c:208:
+// magf entries. $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1485: FILE: fs/rcfs/rootdir.c:221:
+
+

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1486: FILE: fs/rcfs/rootdir.c:222:
+struct rcfs_mfdesc *genmfdesc[]={
                                ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1497: FILE: fs/rcfs/rootdir.c:233:
+// Create similar entry for RBCE ? $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1506: FILE: fs/rcfs/rootdir.c:242:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1508: FILE: fs/rcfs/rootdir.c:244:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1513: FILE: fs/rcfs/super.c:1:
+/* $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1513: FILE: fs/rcfs/super.c:1:
+/* 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1514: FILE: fs/rcfs/super.c:2:
+ * fs/rcfs/super.c $

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#1514: FILE: fs/rcfs/super.c:2:
+ * fs/rcfs/super.c 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1518: FILE: fs/rcfs/super.c:6:
+ *           $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1520: FILE: fs/rcfs/super.c:8:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1523: FILE: fs/rcfs/super.c:11:
+ * $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1537: FILE: fs/rcfs/super.c:25:
+
+

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#1553: FILE: fs/rcfs/super.c:41:
+#include <asm/uaccess.h>

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1558: FILE: fs/rcfs/super.c:46:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1561: FILE: fs/rcfs/super.c:49:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1568: FILE: fs/rcfs/super.c:56:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1574: FILE: fs/rcfs/super.c:62:
+^Iri = (struct rcfs_inode_info *) kmem_cache_alloc(rcfs_inode_cachep, $

CHECK:SPACING: No space is necessary after a cast
#1574: FILE: fs/rcfs/super.c:62:
+	ri = (struct rcfs_inode_info *) kmem_cache_alloc(rcfs_inode_cachep, 

WARNING:LINE_SPACING: Missing a blank line after declarations
#1574: FILE: fs/rcfs/super.c:62:
+	struct rcfs_inode_info *ri;
+	ri = (struct rcfs_inode_info *) kmem_cache_alloc(rcfs_inode_cachep, 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1582: FILE: fs/rcfs/super.c:70:
+static void $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1591: FILE: fs/rcfs/super.c:79:
+static void $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1592: FILE: fs/rcfs/super.c:80:
+rcfs_init_once(void * foo, kmem_cache_t * cachep, unsigned long flags)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1592: FILE: fs/rcfs/super.c:80:
+rcfs_init_once(void * foo, kmem_cache_t * cachep, unsigned long flags)

CHECK:SPACING: No space is necessary after a cast
#1594: FILE: fs/rcfs/super.c:82:
+	struct rcfs_inode_info *ri = (struct rcfs_inode_info *) foo;

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1596: FILE: fs/rcfs/super.c:84:
+	if ((flags & (SLAB_CTOR_VERIFY|SLAB_CTOR_CONSTRUCTOR)) ==
 	                              ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1601: FILE: fs/rcfs/super.c:89:
+int $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1605: FILE: fs/rcfs/super.c:93:
+	rcfs_inode_cachep = kmem_cache_create("rcfs_inode_cache",
+				sizeof(struct rcfs_inode_info),

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rcfs_inode_cachep"
#1608: FILE: fs/rcfs/super.c:96:
+	if (rcfs_inode_cachep == NULL)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1615: FILE: fs/rcfs/super.c:103:
+	printk(KERN_WARNING "destroy inodecache was called\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1617: FILE: fs/rcfs/super.c:105:
+		printk(KERN_INFO "rcfs_inode_cache: not all structures were freed\n");

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1621: FILE: fs/rcfs/super.c:109:
+struct super_operations rcfs_super_ops =
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1628: FILE: fs/rcfs/super.c:116:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1635: FILE: fs/rcfs/super.c:123:
+static int rcfs_fill_super(struct super_block * sb, void * data, int silent)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1635: FILE: fs/rcfs/super.c:123:
+static int rcfs_fill_super(struct super_block * sb, void * data, int silent)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1637: FILE: fs/rcfs/super.c:125:
+	struct inode * inode;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1638: FILE: fs/rcfs/super.c:126:
+	struct dentry * root;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1641: FILE: fs/rcfs/super.c:129:
+	int i,rc;
 	     ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1644: FILE: fs/rcfs/super.c:132:
+	if (rcfs_mounted) {
+		return -EPERM;
+	}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1650: FILE: fs/rcfs/super.c:138:
+^Isb->s_blocksize_bits = PAGE_CACHE_SHIFT;^I$

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1660: FILE: fs/rcfs/super.c:148:
+		iput(inode);
 		^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1665: FILE: fs/rcfs/super.c:153:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1665: FILE: fs/rcfs/super.c:153:
+
+	

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1666: FILE: fs/rcfs/super.c:154:
+^I// Link inode and core class $

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1671: FILE: fs/rcfs/super.c:159:
+		iput(inode);
 		^^^^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1678: FILE: fs/rcfs/super.c:166:
+	sb->s_fs_info = rcfs_root = inode;

WARNING:SPACING: space prohibited before semicolon
#1679: FILE: fs/rcfs/super.c:167:
+	rcfs_rootde = root ;

WARNING:SPACING: space prohibited before semicolon
#1680: FILE: fs/rcfs/super.c:168:
+	rcfs_rootri = rootri ;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1683: FILE: fs/rcfs/super.c:171:
+	for ( i=0; i<CKRM_MAX_CLASSTYPES; i++) {
 	       ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1683: FILE: fs/rcfs/super.c:171:
+	for ( i=0; i<CKRM_MAX_CLASSTYPES; i++) {
 	            ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#1683: FILE: fs/rcfs/super.c:171:
+	for ( i=0; i<CKRM_MAX_CLASSTYPES; i++) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1685: FILE: fs/rcfs/super.c:173:
+^I^Iif (clstype == NULL) $

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!clstype"
#1685: FILE: fs/rcfs/super.c:173:
+		if (clstype == NULL) 

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1687: FILE: fs/rcfs/super.c:175:
+		printk("A non null classtype\n");

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1689: FILE: fs/rcfs/super.c:177:
+		if ((rc = rcfs_register_classtype(clstype)))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1690: FILE: fs/rcfs/super.c:178:
+^I^I^Icontinue ;  // could return with an error too $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1693: FILE: fs/rcfs/super.c:181:
+^I// register CE's with rcfs $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1696: FILE: fs/rcfs/super.c:184:
+^I// AND rcfs_mkroot (preferably subsume latter in former) $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1701: FILE: fs/rcfs/super.c:189:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1703: FILE: fs/rcfs/super.c:191:
+static struct super_block *rcfs_get_sb(struct file_system_type *fs_type,
+	int flags, const char *dev_name, void *data)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1708: FILE: fs/rcfs/super.c:196:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1709: FILE: fs/rcfs/super.c:197:
+void $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1712: FILE: fs/rcfs/super.c:200:
+	int i,rc;
 	     ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1721: FILE: fs/rcfs/super.c:209:
+	for ( i=0; i < CKRM_MAX_CLASSTYPES; i++) {
 	       ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#1721: FILE: fs/rcfs/super.c:209:
+	for ( i=0; i < CKRM_MAX_CLASSTYPES; i++) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1722: FILE: fs/rcfs/super.c:210:
+	for ( i=0; i < CKRM_MAX_CLASSTYPES; i++) {
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1724: FILE: fs/rcfs/super.c:212:
+^I^Iif (clstype == NULL || clstype->rootde == NULL) $

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!clstype"
#1724: FILE: fs/rcfs/super.c:212:
+		if (clstype == NULL || clstype->rootde == NULL) 

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!clstype->rootde"
#1724: FILE: fs/rcfs/super.c:212:
+		if (clstype == NULL || clstype->rootde == NULL) 

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1727: FILE: fs/rcfs/super.c:215:
+		if ((rc = rcfs_deregister_classtype(clstype))) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1728: FILE: fs/rcfs/super.c:216:
+			printk(KERN_ERR "Error removing classtype %s\n",

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1733: FILE: fs/rcfs/super.c:221:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1737: FILE: fs/rcfs/super.c:225:
+^I// if ce is in  one directory /rcfs/ce, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1738: FILE: fs/rcfs/super.c:226:
+^I//       rcfs_deregister_engine for all classtypes within above $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1739: FILE: fs/rcfs/super.c:227:
+^I//             codebase $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1745: FILE: fs/rcfs/super.c:233:
+^I// following will automatically clear rcfs root entry including its $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1751: FILE: fs/rcfs/super.c:239:
+}^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1753: FILE: fs/rcfs/super.c:241:
+
+

WARNING:SPACING: space prohibited before semicolon
#1767: FILE: fs/rcfs/super.c:255:
+extern struct rcfs_functions rcfs_fn ;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1767: FILE: fs/rcfs/super.c:255:
+extern struct rcfs_functions rcfs_fn ;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:SPACING: space prohibited before semicolon
#1781: FILE: fs/rcfs/super.c:269:
+	rcfs_fn = my_rcfs_fn ;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1782: FILE: fs/rcfs/super.c:270:
+^I$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000285276.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 262 errors, 201 warnings, 134 checks, 1730 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000285276.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
