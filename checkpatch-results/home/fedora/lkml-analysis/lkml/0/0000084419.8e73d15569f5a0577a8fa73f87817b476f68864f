WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#24: 
This patch implements core AppArmor access control (where appropriate using 

WARNING:TYPO_SPELLING: 'appropiate' may be misspelled - perhaps 'appropriate'?
#27: 
creation, remove them during task release and for determining appropiate 
                                                              ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#44: FILE: security/apparmor/main.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:TYPO_SPELLING: 'non-existant' may be misspelled - perhaps 'non-existent'?
#66: FILE: security/apparmor/main.c:23:
+ * Used when in complain mode, to emit Permitting messages for non-existant
                                                                ^^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'iterface' may be misspelled - perhaps 'interface'?
#85: FILE: security/apparmor/main.c:42:
+ * This file is the usermode iterface for changing it's hat.
                              ^^^^^^^^

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#109: FILE: security/apparmor/main.c:66:
+	AA_DEBUG("%s: %s\n", __FUNCTION__, name);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#111: FILE: security/apparmor/main.c:68:
+		AA_DEBUG("%s: no name\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#116: FILE: security/apparmor/main.c:73:
+		AA_DEBUG("%s: no profile\n", __FUNCTION__);

WARNING:TYPO_SPELLING: 'execuition' may be misspelled - perhaps 'execution'?
#133: FILE: security/apparmor/main.c:90:
+ *         if the rule has no execuition qualifier {pui} then
                               ^^^^^^^^^^

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#195: FILE: security/apparmor/main.c:152:
+				break;
+			} else {

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#208: FILE: security/apparmor/main.c:165:
+
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPLIT_STRING: quoted string split across lines
#224: FILE: security/apparmor/main.c:181:
+		AA_DEBUG("%s: Unable to find execute entry in profile "
+			 "for image '%s'\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#225: FILE: security/apparmor/main.c:182:
+			 __FUNCTION__,

WARNING:SPLIT_STRING: quoted string split across lines
#229: FILE: security/apparmor/main.c:186:
+		AA_WARN("%s: Inconsistency in profile %s. "
+			"Two (or more) patterns specify conflicting exec "

WARNING:SPLIT_STRING: quoted string split across lines
#230: FILE: security/apparmor/main.c:187:
+			"Two (or more) patterns specify conflicting exec "
+			"qualifiers ('u', 'i' or 'p') for image %s\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#231: FILE: security/apparmor/main.c:188:
+			__FUNCTION__,

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#302: FILE: security/apparmor/main.c:259:
+#define PROCLEN sizeof(PROCPFX) - 1

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#304: FILE: security/apparmor/main.c:261:
+	AA_DEBUG("%s: %s 0x%x\n", __FUNCTION__, name, mask);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#325: FILE: security/apparmor/main.c:282:
+		 * or have we already accumulated it (shortcut below)? */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#332: FILE: security/apparmor/main.c:289:
+			if (aamatch_match(name, entry->filename,
+				entry->type, entry->extradata)) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#436: FILE: security/apparmor/main.c:393:
+	if ((path_error = aa_path_end(&data)) != 0) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#437: FILE: security/apparmor/main.c:394:
+		AA_ERROR("%s: An error occured while translating dentry %p "
 		                       ^^^^^^^

WARNING:SPLIT_STRING: quoted string split across lines
#438: FILE: security/apparmor/main.c:395:
+		AA_ERROR("%s: An error occured while translating dentry %p "
+			 "inode# %lu to a pathname. Error %d\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#439: FILE: security/apparmor/main.c:396:
+			 __FUNCTION__,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#500: FILE: security/apparmor/main.c:457:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#629: FILE: security/apparmor/main.c:586:
+		audit_log(current->audit_context, gfp_mask, AUDIT_AA,
+			"Internal error auditing event type %d (error %d)",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#632: FILE: security/apparmor/main.c:589:
+		AA_ERROR("Internal error auditing event type %d (error %d)\n",
+			sa->type, sa->error_code);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#652: FILE: security/apparmor/main.c:609:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#667: FILE: security/apparmor/main.c:624:
+		AA_ERROR("Unable to log event (%d) to audit subsys\n",
+			sa->type);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#689: FILE: security/apparmor/main.c:646:
+		audit_log_format(ab, "%s%s%s%s access to %s ",
+			perm & AA_MAY_READ  ? "r" : "",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#699: FILE: security/apparmor/main.c:656:
+		audit_log_format(ab, "%s on %s ",
+			sa->ival == aa_dir_mkdir ? "mkdir" : "rmdir",

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#703: FILE: security/apparmor/main.c:660:
+		struct iattr *iattr = (struct iattr*)sa->pval;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#706: FILE: security/apparmor/main.c:663:
+		audit_log_format(ab,
+			"attribute (%s%s%s%s%s%s%s) change to %s ",

WARNING:LINE_SPACING: Missing a blank line after declarations
#720: FILE: security/apparmor/main.c:677:
+		const char *fmt;
+		switch (sa->ival) {

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#720: FILE: security/apparmor/main.c:677:
+		switch (sa->ival) {
+			case aa_xattr_get:
[...]
+			case aa_xattr_set:
[...]
+			case aa_xattr_list:
[...]
+			case aa_xattr_remove:
[...]
+			default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#742: FILE: security/apparmor/main.c:699:
+		audit_log_format(ab,
+			"link access from %s to %s ",

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#744: FILE: security/apparmor/main.c:701:
+			(char*)sa->pval);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#748: FILE: security/apparmor/main.c:705:
+		audit_log_format(ab,
+			"access to capability '%s' ",

WARNING:TYPO_SPELLING: 'sucess' may be misspelled - perhaps 'success'?
#786: FILE: security/apparmor/main.c:743:
+ * Returns fully qualified path name on sucess, NULL on failure.
                                         ^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#798: FILE: security/apparmor/main.c:755:
+	name = d_path_flags(dentry, mnt, page, PAGE_SIZE,
+			DPATH_SYSROOT|DPATH_NODELETED);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#798: FILE: security/apparmor/main.c:755:
+			DPATH_SYSROOT|DPATH_NODELETED);
 			             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#800: FILE: security/apparmor/main.c:757:
+	AA_DEBUG("%s: full_path=%s\n", __FUNCTION__, name);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#894: FILE: security/apparmor/main.c:851:
+	if ((mask = aa_filter_mask(mask, dentry->d_inode)) == 0)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#918: FILE: security/apparmor/main.c:875:
+ * @nd: namespace data (for vfsmnt and dentry)
     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#921: FILE: security/apparmor/main.c:878:
+int aa_perm_nameidata(struct aaprofile *active, struct nameidata *nd, int mask)
                                                                   ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#925: FILE: security/apparmor/main.c:882:
+	if (nd)
 	    ^^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#948: FILE: security/apparmor/main.c:905:
+	if ((mask = aa_filter_mask(mask, dentry->d_inode)) == 0)

WARNING:TYPO_SPELLING: 'sucess' may be misspelled - perhaps 'success'?
#1040: FILE: security/apparmor/main.c:997:
+ * particularly ugly.  Returns %0 on sucess, error otherwise.
                                      ^^^^^^

WARNING:TYPO_SPELLING: 'uglyness' may be misspelled - perhaps 'ugliness'?
#1064: FILE: security/apparmor/main.c:1021:
+	 * target would allow all this uglyness to go away.
 	                               ^^^^^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1066: FILE: security/apparmor/main.c:1023:
+ ^I * If more than one mountpoint matches but none satisfy the profile,$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1066: FILE: security/apparmor/main.c:1023:
+ ^I * If more than one mountpoint matches but none satisfy the profile,$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1098: FILE: security/apparmor/main.c:1055:
+			if ((path_error = aa_path_end(&idata)) != 0) {

WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#1099: FILE: security/apparmor/main.c:1056:
+				AA_ERROR("%s: An error occured while "
 				                       ^^^^^^^

WARNING:SPLIT_STRING: quoted string split across lines
#1100: FILE: security/apparmor/main.c:1057:
+				AA_ERROR("%s: An error occured while "
+					 "translating inner dentry %p "

WARNING:SPLIT_STRING: quoted string split across lines
#1101: FILE: security/apparmor/main.c:1058:
+					 "translating inner dentry %p "
+					 "inode %lu to a pathname. Error %d\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1102: FILE: security/apparmor/main.c:1059:
+					 __FUNCTION__,

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1122: FILE: security/apparmor/main.c:1079:
+	} else if ((path_error = aa_path_end(&odata)) != 0) {

WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#1123: FILE: security/apparmor/main.c:1080:
+		AA_ERROR("%s: An error occured while translating outer "
 		                       ^^^^^^^

WARNING:SPLIT_STRING: quoted string split across lines
#1124: FILE: security/apparmor/main.c:1081:
+		AA_ERROR("%s: An error occured while translating outer "
+			 "dentry %p inode %lu to a pathname. Error %d\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1125: FILE: security/apparmor/main.c:1082:
+			 __FUNCTION__,

WARNING:TYPO_SPELLING: 'sucess' may be misspelled - perhaps 'success'?
#1179: FILE: security/apparmor/main.c:1136:
+ * will get one with %NULL values.  Return %0 on sucess.
                                                  ^^^^^^

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1190: FILE: security/apparmor/main.c:1147:
+	AA_DEBUG("%s\n", __FUNCTION__);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1210: FILE: security/apparmor/main.c:1167:
+			LOG_HINT(sd->active, GFP_KERNEL, HINT_FORK,
+				"pid=%d child=%d\n",

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1219: FILE: security/apparmor/main.c:1176:
+ * @filp: file of program being registered
     ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1224: FILE: security/apparmor/main.c:1181:
+int aa_register(struct file *filp)
                              ^^^^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1230: FILE: security/apparmor/main.c:1187:
+^Iint ^Ierror = -ENOMEM,$

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1236: FILE: security/apparmor/main.c:1193:
+	AA_DEBUG("%s\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1250: FILE: security/apparmor/main.c:1207:
+				__FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1259: FILE: security/apparmor/main.c:1216:
+		AA_WARN("%s: Failed to get filename\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1283: FILE: security/apparmor/main.c:1240:
+				 __FUNCTION__,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1289: FILE: security/apparmor/main.c:1246:
+				 __FUNCTION__,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1298: FILE: security/apparmor/main.c:1255:
+				 __FUNCTION__,

WARNING:SPLIT_STRING: quoted string split across lines
#1311: FILE: security/apparmor/main.c:1268:
+			AA_ERROR("%s: Rejecting exec(2) of image '%s'. "
+				"AA_MAY_EXEC without exec qualifier invalid "

WARNING:SPLIT_STRING: quoted string split across lines
#1312: FILE: security/apparmor/main.c:1269:
+				"AA_MAY_EXEC without exec qualifier invalid "
+				"(%s(%d) profile %s active %s\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1313: FILE: security/apparmor/main.c:1270:
+				 __FUNCTION__,

WARNING:SPLIT_STRING: quoted string split across lines
#1322: FILE: security/apparmor/main.c:1279:
+			AA_ERROR("%s: Rejecting exec(2) of image '%s'. "
+				 "Unknown exec qualifier %x "

WARNING:SPLIT_STRING: quoted string split across lines
#1323: FILE: security/apparmor/main.c:1280:
+				 "Unknown exec qualifier %x "
+				 "(%s (pid %d) profile %s active %s)\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1324: FILE: security/apparmor/main.c:1281:
+				 __FUNCTION__,

WARNING:SPLIT_STRING: quoted string split across lines
#1341: FILE: security/apparmor/main.c:1298:
+		AA_WARN("%s: Rejecting exec(2) of image '%s'. "
+			"Unable to determine exec qualifier "

WARNING:SPLIT_STRING: quoted string split across lines
#1342: FILE: security/apparmor/main.c:1299:
+			"Unable to determine exec qualifier "
+			"(%s (pid %d) profile %s active %s)\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1343: FILE: security/apparmor/main.c:1300:
+			__FUNCTION__,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1350: FILE: security/apparmor/main.c:1307:
+
+

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1359: FILE: security/apparmor/main.c:1316:
+			 __FUNCTION__, newprofile->name);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1365: FILE: security/apparmor/main.c:1322:
+			LOG_HINT(active, GFP_KERNEL, HINT_MANDPROF,
+				"image=%s pid=%d profile=%s active=%s\n",

WARNING:SPLIT_STRING: quoted string split across lines
#1373: FILE: security/apparmor/main.c:1330:
+			AA_WARN("REJECTING exec(2) of image '%s'. "
+				"Profile mandatory and not found "

WARNING:SPLIT_STRING: quoted string split across lines
#1374: FILE: security/apparmor/main.c:1331:
+				"Profile mandatory and not found "
+				"(%s(%d) profile %s active %s)\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1390: FILE: security/apparmor/main.c:1347:
+			 __FUNCTION__,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1394: FILE: security/apparmor/main.c:1351:
+
+

WARNING:TYPO_SPELLING: 'guarentee' may be misspelled - perhaps 'guarantee'?
#1403: FILE: security/apparmor/main.c:1360:
+		/* grab a lock - this is to guarentee consistency against
 		                            ^^^^^^^^^

WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#1414: FILE: security/apparmor/main.c:1371:
+		 *   the transition occured before replacement.
 		                    ^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1450: FILE: security/apparmor/main.c:1407:
+			LOG_HINT(newprofile, GFP_ATOMIC, HINT_CHGPROF,
+				"pid=%d\n",

WARNING:LINE_SPACING: Missing a blank line after declarations
#1480: FILE: security/apparmor/main.c:1437:
+	struct subdomain *sd = AA_SUBDOMAIN(p->security);
+	if (sd) {

WARNING:TYPO_SPELLING: 'swtich' may be misspelled - perhaps 'switch'?
#1497: FILE: security/apparmor/main.c:1454:
+ * @hat_name: name of hat to swtich to
                              ^^^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1524: FILE: security/apparmor/main.c:1481:
+ ^I^I^I^I"%s pid=%d "$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1524: FILE: security/apparmor/main.c:1481:
+ ^I^I^I^I"%s pid=%d "$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1524: FILE: security/apparmor/main.c:1481:
+			LOG_HINT(sd->active, GFP_ATOMIC, HINT_UNKNOWN_HAT,
+ 				"%s pid=%d "

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1524: FILE: security/apparmor/main.c:1481:
+ ^I^I^I^I"%s pid=%d "$

WARNING:SPLIT_STRING: quoted string split across lines
#1525: FILE: security/apparmor/main.c:1482:
+ 				"%s pid=%d "
+				"profile=%s active=%s\n",

WARNING:SPLIT_STRING: quoted string split across lines
#1532: FILE: security/apparmor/main.c:1489:
+			AA_DEBUG("%s: Unknown hatname '%s'. "
+				"Changing to NULL profile "

WARNING:SPLIT_STRING: quoted string split across lines
#1533: FILE: security/apparmor/main.c:1490:
+				"Changing to NULL profile "
+				"(%s(%d) profile %s active %s)\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1534: FILE: security/apparmor/main.c:1491:
+				 __FUNCTION__,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1564: FILE: security/apparmor/main.c:1521:
+		 __FUNCTION__,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1571: FILE: security/apparmor/main.c:1528:
+			__FUNCTION__, hat_name ? hat_name : "NULL",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1590: FILE: security/apparmor/main.c:1547:
+				 __FUNCTION__,

WARNING:SPLIT_STRING: quoted string split across lines
#1635: FILE: security/apparmor/main.c:1592:
+			AA_ERROR("KILLING process %s(%d) "
+				 "Invalid change_hat() magic# 0x%x "

WARNING:SPLIT_STRING: quoted string split across lines
#1636: FILE: security/apparmor/main.c:1593:
+				 "Invalid change_hat() magic# 0x%x "
+				 "(hatname %s profile %s active %s)\n",

WARNING:SPLIT_STRING: quoted string split across lines
#1647: FILE: security/apparmor/main.c:1604:
+			AA_ERROR("KILLING process %s(%d) "
+				 "Task was confined to current subprofile "

WARNING:SPLIT_STRING: quoted string split across lines
#1648: FILE: security/apparmor/main.c:1605:
+				 "Task was confined to current subprofile "
+				 "(profile %s active %s)\n",

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1657: FILE: security/apparmor/main.c:1614:
+
+	}

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000084419.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 11 errors, 77 warnings, 21 checks, 1618 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000084419.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
