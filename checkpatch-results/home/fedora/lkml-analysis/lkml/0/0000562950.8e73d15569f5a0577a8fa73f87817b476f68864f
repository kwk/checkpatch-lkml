WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#34: 
diff -u -r linux-2.2.18-pre24.clean/drivers/char/generic_serial.c linux-2.2.18-pre24.rio_break/drivers/char/generic_serial.c

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#59: FILE: drivers/char/generic_serial.c:753:
+		port->rd->hungup (port);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#61: FILE: drivers/char/generic_serial.c:755:
+#if 0

ERROR:TRAILING_WHITESPACE: trailing whitespace
#85: FILE: drivers/char/rio/rio_linux.c:208:
+int RIOShortCommand(struct rio_info *p, struct Port *PortP, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <RIOShortCommand>
#85: FILE: drivers/char/rio/rio_linux.c:208:
+int RIOShortCommand(struct rio_info *p, struct Port *PortP, 

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Port>
#85: FILE: drivers/char/rio/rio_linux.c:208:
+int RIOShortCommand(struct rio_info *p, struct Port *PortP, 

CHECK:CAMELCASE: Avoid CamelCase: <PortP>
#85: FILE: drivers/char/rio/rio_linux.c:208:
+int RIOShortCommand(struct rio_info *p, struct Port *PortP, 

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#85: FILE: drivers/char/rio/rio_linux.c:208:
+int RIOShortCommand(struct rio_info *p, struct Port *PortP, 

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#86: FILE: drivers/char/rio/rio_linux.c:209:
+int RIOShortCommand(struct rio_info *p, struct Port *PortP, 
+			   int command, int len, int arg);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#109: FILE: drivers/char/rio/rio_linux.c:521:
+  rio_dprintk ( RIO_DEBUG_IFLOW, "riointr() doing host %p type %d\n", $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#109: FILE: drivers/char/rio/rio_linux.c:521:
+  rio_dprintk ( RIO_DEBUG_IFLOW, "riointr() doing host %p type %d\n", $

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#109: FILE: drivers/char/rio/rio_linux.c:521:
+  rio_dprintk ( RIO_DEBUG_IFLOW, "riointr() doing host %p type %d\n", 

ERROR:SPACING: space prohibited after that open parenthesis '('
#109: FILE: drivers/char/rio/rio_linux.c:521:
+  rio_dprintk ( RIO_DEBUG_IFLOW, "riointr() doing host %p type %d\n", 

ERROR:CODE_INDENT: code indent should use tabs where possible
#110: FILE: drivers/char/rio/rio_linux.c:522:
+                ptr, HostP->Type);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#110: FILE: drivers/char/rio/rio_linux.c:522:
+  rio_dprintk ( RIO_DEBUG_IFLOW, "riointr() doing host %p type %d\n", 
+                ptr, HostP->Type);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#110: FILE: drivers/char/rio/rio_linux.c:522:
+                ptr, HostP->Type);$

CHECK:CAMELCASE: Avoid CamelCase: <HostP>
#110: FILE: drivers/char/rio/rio_linux.c:522:
+                ptr, HostP->Type);

CHECK:CAMELCASE: Avoid CamelCase: <Type>
#110: FILE: drivers/char/rio/rio_linux.c:522:
+                ptr, HostP->Type);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#118: FILE: drivers/char/rio/rio_linux.c:629:
+  struct Port *PortP;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#122: FILE: drivers/char/rio/rio_linux.c:633:
+  PortP = (struct Port *)ptr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#123: FILE: drivers/char/rio/rio_linux.c:634:
+  PortP->gs.tty = NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#132: FILE: drivers/char/rio/rio_linux.c:712:
+  PortP->gs.tty = NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#147: FILE: drivers/char/rio/rio_linux.c:766:
+    break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#148: FILE: drivers/char/rio/rio_linux.c:767:
+  case TCSBRK:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#149: FILE: drivers/char/rio/rio_linux.c:768:
+    if ( PortP->State & RIO_DELETED ) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 6)
#149: FILE: drivers/char/rio/rio_linux.c:768:
+    if ( PortP->State & RIO_DELETED ) {
+      rio_dprintk (RIO_DEBUG_TTY, "BREAK on deleted RTA\n");

ERROR:SPACING: space prohibited after that open parenthesis '('
#149: FILE: drivers/char/rio/rio_linux.c:768:
+    if ( PortP->State & RIO_DELETED ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#149: FILE: drivers/char/rio/rio_linux.c:768:
+    if ( PortP->State & RIO_DELETED ) {

CHECK:CAMELCASE: Avoid CamelCase: <State>
#149: FILE: drivers/char/rio/rio_linux.c:768:
+    if ( PortP->State & RIO_DELETED ) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#150: FILE: drivers/char/rio/rio_linux.c:769:
+      rio_dprintk (RIO_DEBUG_TTY, "BREAK on deleted RTA\n");$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#150: FILE: drivers/char/rio/rio_linux.c:769:
+      rio_dprintk (RIO_DEBUG_TTY, "BREAK on deleted RTA\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#151: FILE: drivers/char/rio/rio_linux.c:770:
+      rc = -EIO;      $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#151: FILE: drivers/char/rio/rio_linux.c:770:
+      rc = -EIO;      $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#152: FILE: drivers/char/rio/rio_linux.c:771:
+    } else {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 6)
#152: FILE: drivers/char/rio/rio_linux.c:771:
+    } else {
+      if (RIOShortCommand(p, PortP, SBREAK, 2, 250) == RIO_FAIL) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#153: FILE: drivers/char/rio/rio_linux.c:772:
+      if (RIOShortCommand(p, PortP, SBREAK, 2, 250) == RIO_FAIL) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (6, 9)
#153: FILE: drivers/char/rio/rio_linux.c:772:
+      if (RIOShortCommand(p, PortP, SBREAK, 2, 250) == RIO_FAIL) {
+         rio_dprintk (RIO_DEBUG_INTR, "SBREAK RIOShortCommand failed\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#154: FILE: drivers/char/rio/rio_linux.c:773:
+         rio_dprintk (RIO_DEBUG_INTR, "SBREAK RIOShortCommand failed\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#154: FILE: drivers/char/rio/rio_linux.c:773:
+         rio_dprintk (RIO_DEBUG_INTR, "SBREAK RIOShortCommand failed\n");$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#154: FILE: drivers/char/rio/rio_linux.c:773:
+         rio_dprintk (RIO_DEBUG_INTR, "SBREAK RIOShortCommand failed\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#155: FILE: drivers/char/rio/rio_linux.c:774:
+         rc = -EIO;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#155: FILE: drivers/char/rio/rio_linux.c:774:
+         rc = -EIO;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#156: FILE: drivers/char/rio/rio_linux.c:775:
+      }          $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#156: FILE: drivers/char/rio/rio_linux.c:775:
+      }          $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#157: FILE: drivers/char/rio/rio_linux.c:776:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#158: FILE: drivers/char/rio/rio_linux.c:777:
+    break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#159: FILE: drivers/char/rio/rio_linux.c:778:
+  case TCSBRKP:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#160: FILE: drivers/char/rio/rio_linux.c:779:
+    if ( PortP->State & RIO_DELETED ) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 6)
#160: FILE: drivers/char/rio/rio_linux.c:779:
+    if ( PortP->State & RIO_DELETED ) {
+      rio_dprintk (RIO_DEBUG_TTY, "BREAK on deleted RTA\n");

ERROR:SPACING: space prohibited after that open parenthesis '('
#160: FILE: drivers/char/rio/rio_linux.c:779:
+    if ( PortP->State & RIO_DELETED ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#160: FILE: drivers/char/rio/rio_linux.c:779:
+    if ( PortP->State & RIO_DELETED ) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#161: FILE: drivers/char/rio/rio_linux.c:780:
+      rio_dprintk (RIO_DEBUG_TTY, "BREAK on deleted RTA\n");$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#161: FILE: drivers/char/rio/rio_linux.c:780:
+      rio_dprintk (RIO_DEBUG_TTY, "BREAK on deleted RTA\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#162: FILE: drivers/char/rio/rio_linux.c:781:
+      rc = -EIO;      $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#162: FILE: drivers/char/rio/rio_linux.c:781:
+      rc = -EIO;      $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#163: FILE: drivers/char/rio/rio_linux.c:782:
+    } else {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 6)
#163: FILE: drivers/char/rio/rio_linux.c:782:
+    } else {
+      int l;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#164: FILE: drivers/char/rio/rio_linux.c:783:
+      int l;$

WARNING:LINE_SPACING: Missing a blank line after declarations
#165: FILE: drivers/char/rio/rio_linux.c:784:
+      int l;
+      l = arg?arg*100:250;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#165: FILE: drivers/char/rio/rio_linux.c:784:
+      l = arg?arg*100:250;$

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#165: FILE: drivers/char/rio/rio_linux.c:784:
+      l = arg?arg*100:250;
              ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#165: FILE: drivers/char/rio/rio_linux.c:784:
+      l = arg?arg*100:250;
                  ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#165: FILE: drivers/char/rio/rio_linux.c:784:
+      l = arg?arg*100:250;
                      ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#166: FILE: drivers/char/rio/rio_linux.c:785:
+      if (l > 255) l = 255;$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#166: FILE: drivers/char/rio/rio_linux.c:785:
+      if (l > 255) l = 255;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#167: FILE: drivers/char/rio/rio_linux.c:786:
+      if (RIOShortCommand(p, PortP, SBREAK, 2, arg?arg*100:250) == RIO_FAIL) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (6, 9)
#167: FILE: drivers/char/rio/rio_linux.c:786:
+      if (RIOShortCommand(p, PortP, SBREAK, 2, arg?arg*100:250) == RIO_FAIL) {
+         rio_dprintk (RIO_DEBUG_INTR, "SBREAK RIOShortCommand failed\n");

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#167: FILE: drivers/char/rio/rio_linux.c:786:
+      if (RIOShortCommand(p, PortP, SBREAK, 2, arg?arg*100:250) == RIO_FAIL) {
                                                   ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#167: FILE: drivers/char/rio/rio_linux.c:786:
+      if (RIOShortCommand(p, PortP, SBREAK, 2, arg?arg*100:250) == RIO_FAIL) {
                                                       ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#167: FILE: drivers/char/rio/rio_linux.c:786:
+      if (RIOShortCommand(p, PortP, SBREAK, 2, arg?arg*100:250) == RIO_FAIL) {
                                                           ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#168: FILE: drivers/char/rio/rio_linux.c:787:
+         rio_dprintk (RIO_DEBUG_INTR, "SBREAK RIOShortCommand failed\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#168: FILE: drivers/char/rio/rio_linux.c:787:
+         rio_dprintk (RIO_DEBUG_INTR, "SBREAK RIOShortCommand failed\n");$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#168: FILE: drivers/char/rio/rio_linux.c:787:
+         rio_dprintk (RIO_DEBUG_INTR, "SBREAK RIOShortCommand failed\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#169: FILE: drivers/char/rio/rio_linux.c:788:
+         rc = -EIO;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#169: FILE: drivers/char/rio/rio_linux.c:788:
+         rc = -EIO;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#170: FILE: drivers/char/rio/rio_linux.c:789:
+      }          $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#170: FILE: drivers/char/rio/rio_linux.c:789:
+      }          $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#171: FILE: drivers/char/rio/rio_linux.c:790:
+    }$

WARNING:LONG_LINE: line length of 127 exceeds 100 columns
#195: FILE: drivers/char/rio/riocmd.c:539:
+				if ( PortP->Mapped && (PortP->PortState & PORT_ISOPEN) && !(PortP->PortState & RIO_CLOSING))  {

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:SPACING: space prohibited after that open parenthesis '('
#195: FILE: drivers/char/rio/riocmd.c:539:
+				if ( PortP->Mapped && (PortP->PortState & PORT_ISOPEN) && !(PortP->PortState & RIO_CLOSING))  {

CHECK:CAMELCASE: Avoid CamelCase: <Mapped>
#195: FILE: drivers/char/rio/riocmd.c:539:
+				if ( PortP->Mapped && (PortP->PortState & PORT_ISOPEN) && !(PortP->PortState & RIO_CLOSING))  {

CHECK:CAMELCASE: Avoid CamelCase: <PortState>
#195: FILE: drivers/char/rio/riocmd.c:539:
+				if ( PortP->Mapped && (PortP->PortState & PORT_ISOPEN) && !(PortP->PortState & RIO_CLOSING))  {

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#213: FILE: drivers/char/rio/riocmd.c:558:
+				    ((PortP->State & (RIO_MOPEN|RIO_WOPEN)))) {
 				                               ^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (48, 50)
#220: FILE: drivers/char/rio/riocmd.c:583:
 						if (PortP->State & RIO_CARR_ON) {
+						  if (PortP->State & (PORT_ISOPEN|RIO_WOPEN|RIO_MOPEN)) 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#223: FILE: drivers/char/rio/riocmd.c:584:
+^I^I^I^I^I^I  if (PortP->State & (PORT_ISOPEN|RIO_WOPEN|RIO_MOPEN)) $

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#223: FILE: drivers/char/rio/riocmd.c:584:
+						  if (PortP->State & (PORT_ISOPEN|RIO_WOPEN|RIO_MOPEN)) 

WARNING:TABSTOP: Statements should start on a tabstop
#223: FILE: drivers/char/rio/riocmd.c:584:
+						  if (PortP->State & (PORT_ISOPEN|RIO_WOPEN|RIO_MOPEN)) 

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#223: FILE: drivers/char/rio/riocmd.c:584:
+						  if (PortP->State & (PORT_ISOPEN|RIO_WOPEN|RIO_MOPEN)) 

Indentation with 6 or more tabs usually indicate overly indented
code.

It is suggested to refactor excessive indentation of
if/else/for/do/while/switch statements.

See: https://lore.kernel.org/lkml/1328311239.21255.24.camel@joe2Laptop/

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (50, 58)
#223: FILE: drivers/char/rio/riocmd.c:584:
+						  if (PortP->State & (PORT_ISOPEN|RIO_WOPEN|RIO_MOPEN)) 
+							  tty_hangup (PortP->gs.tty);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#223: FILE: drivers/char/rio/riocmd.c:584:
+						  if (PortP->State & (PORT_ISOPEN|RIO_WOPEN|RIO_MOPEN)) 
 						                                 ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#223: FILE: drivers/char/rio/riocmd.c:584:
+						  if (PortP->State & (PORT_ISOPEN|RIO_WOPEN|RIO_MOPEN)) 
 						                                           ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#224: FILE: drivers/char/rio/riocmd.c:585:
+							  tty_hangup (PortP->gs.tty);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#237: FILE: drivers/char/rio/riotty.c:98:
+int RIOShortCommand(struct rio_info *p, struct Port *PortP, $

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#237: FILE: drivers/char/rio/riotty.c:98:
+int RIOShortCommand(struct rio_info *p, struct Port *PortP, 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#238: FILE: drivers/char/rio/riotty.c:99:
+int RIOShortCommand(struct rio_info *p, struct Port *PortP, 
 			   int command, int len, int arg);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#247: FILE: drivers/char/rio/riotty.c:798:
+int RIOShortCommand(struct rio_info *p, struct Port *PortP,
 		int command, int len, int arg)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000562950.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 20 errors, 55 warnings, 21 checks, 185 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000562950.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
