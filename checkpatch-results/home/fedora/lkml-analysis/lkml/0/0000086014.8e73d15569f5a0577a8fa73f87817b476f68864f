WARNING:TYPO_SPELLING: 'simliar' may be misspelled - perhaps 'similar'?
#54: 
 * two new elf sections simliar to the "classic" alternatives to
                        ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:CODE_INDENT: code indent should use tabs where possible
#101: FILE: arch/x86_64/kernel/module.c:149:
+                    const Elf_Shdr *sechdrs,$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#101: FILE: arch/x86_64/kernel/module.c:149:
+                    const Elf_Shdr *sechdrs,$

CHECK:CAMELCASE: Avoid CamelCase: <Elf_Shdr>
#101: FILE: arch/x86_64/kernel/module.c:149:
+                    const Elf_Shdr *sechdrs,

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

ERROR:CODE_INDENT: code indent should use tabs where possible
#102: FILE: arch/x86_64/kernel/module.c:150:
+                    struct module *me)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#102: FILE: arch/x86_64/kernel/module.c:150:
+                    struct module *me)$

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#122: FILE: arch/x86_64/kernel/module.c:161:
+			locks= s;
 			     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#128: FILE: arch/x86_64/kernel/module.c:167:
+		void *aseg = (void *)alt->sh_addr;
+		apply_alternatives(aseg, aseg + alt->sh_size);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#133: FILE: arch/x86_64/kernel/module.c:172:
+		void *tseg = (void *)text->sh_addr;
+		alternatives_smp_module_add(me, me->name,

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#255: FILE: arch/x86_64/kernel/smpboot.c:1264:
+			if (1 == num_online_cpus())

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#309: FILE: arch/x86_64/mm/init.c:623:
+	printk(KERN_INFO "Freeing %s: %ldk freed\n", what, (end - begin) >> 10);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#351: FILE: include/asm-x86_64/alternative.h:1:
+#ifndef _X86_64_ALTERNATIVE_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#359: FILE: include/asm-x86_64/alternative.h:9:
+^Iu8 *instr; ^I^I/* original instruction */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#363: FILE: include/asm-x86_64/alternative.h:13:
+^Iu8  replacementlen; ^I/* length of new instruction, <= instrlen */$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#367: FILE: include/asm-x86_64/alternative.h:17:
+extern void apply_alternatives(struct alt_instr *start, struct alt_instr *end);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#370: FILE: include/asm-x86_64/alternative.h:20:
+extern void alternatives_smp_module_add(struct module *mod, char *name,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#373: FILE: include/asm-x86_64/alternative.h:23:
+extern void alternatives_smp_module_del(struct module *mod);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#374: FILE: include/asm-x86_64/alternative.h:24:
+extern void alternatives_smp_switch(int smp);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#390: FILE: include/asm-x86_64/alternative.h:40:
+#define alternative(oldinstr, newinstr, feature) ^I\$

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#390: FILE: include/asm-x86_64/alternative.h:40:
+#define alternative(oldinstr, newinstr, feature) 	\
+	asm volatile ("661:\n\t" oldinstr "\n662:\n" 		     \
+		      ".section .altinstructions,\"a\"\n"     	     \
+		      "  .align 8\n"				       \
+		      "  .quad 661b\n"            /* label */          \
+		      "  .quad 663f\n"		  /* new instruction */ \
+		      "  .byte %c0\n"             /* feature bit */    \
+		      "  .byte 662b-661b\n"       /* sourcelen */      \
+		      "  .byte 664f-663f\n"       /* replacementlen */ \
+		      ".previous\n"					\
+		      ".section .altinstr_replacement,\"ax\"\n"		\
+		      "663:\n\t" newinstr "\n664:\n"   /* replacement */ \
+		      ".previous" :: "i" (feature) : "memory")

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#391: FILE: include/asm-x86_64/alternative.h:41:
+^Iasm volatile ("661:\n\t" oldinstr "\n662:\n" ^I^I     \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#392: FILE: include/asm-x86_64/alternative.h:42:
+^I^I      ".section .altinstructions,\"a\"\n"     ^I     \$

WARNING:TYPO_SPELLING: 'Pecularities' may be misspelled - perhaps 'Peculiarities'?
#407: FILE: include/asm-x86_64/alternative.h:57:
+ * Pecularities:
    ^^^^^^^^^^^^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#414: FILE: include/asm-x86_64/alternative.h:64:
+#define alternative_input(oldinstr, newinstr, feature, input...)	\
+	asm volatile ("661:\n\t" oldinstr "\n662:\n"			\
+		      ".section .altinstructions,\"a\"\n"		\
+		      "  .align 8\n"					\
+		      "  .quad 661b\n"            /* label */		\
+		      "  .quad 663f\n"		  /* new instruction */	\
+		      "  .byte %c0\n"             /* feature bit */	\
+		      "  .byte 662b-661b\n"       /* sourcelen */	\
+		      "  .byte 664f-663f\n"       /* replacementlen */	\
+		      ".previous\n"					\
+		      ".section .altinstr_replacement,\"ax\"\n"		\
+		      "663:\n\t" newinstr "\n664:\n"   /* replacement */ \
+		      ".previous" :: "i" (feature), ##input)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#429: FILE: include/asm-x86_64/alternative.h:79:
+#define alternative_io(oldinstr, newinstr, feature, output, input...) \
+	asm volatile ("661:\n\t" oldinstr "\n662:\n"			\
+		      ".section .altinstructions,\"a\"\n"		\
+		      "  .align 8\n"					\
+		      "  .quad 661b\n"            /* label */		\
+		      "  .quad 663f\n"		  /* new instruction */	\
+		      "  .byte %c[feat]\n"        /* feature bit */	\
+		      "  .byte 662b-661b\n"       /* sourcelen */	\
+		      "  .byte 664f-663f\n"       /* replacementlen */	\
+		      ".previous\n"					\
+		      ".section .altinstr_replacement,\"ax\"\n"		\
+		      "663:\n\t" newinstr "\n664:\n"   /* replacement */ \
+		      ".previous" : output : [feat] "i" (feature), ##input)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#468: FILE: include/asm-x86_64/alternative.h:118:
+#define alternative_smp(smpinstr, upinstr, args...)			\
+	asm volatile ("661:\n\t" smpinstr "\n662:\n"			\
+		      ".section .smp_altinstructions,\"a\"\n"		\
+		      "  .align 8\n"					\
+		      "  .quad 661b\n"            /* label */		\
+		      "  .quad 663f\n"		  /* new instruction */	\
+		      "  .byte 0x66\n"            /* X86_FEATURE_UP */	\
+		      "  .byte 662b-661b\n"       /* sourcelen */	\
+		      "  .byte 664f-663f\n"       /* replacementlen */	\
+		      ".previous\n"					\
+		      ".section .smp_altinstr_replacement,\"awx\"\n"	\
+		      "663:\n\t" upinstr "\n"     /* replacement */	\
+		      "664:\n\t.fill 662b-661b,1,0x42\n" /* space for original */ \
+		      ".previous" : args)

ERROR:CODE_INDENT: code indent should use tabs where possible
#488: FILE: include/asm-x86_64/alternative.h:138:
+^I       ^I"661:\n\tlock; "$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#488: FILE: include/asm-x86_64/alternative.h:138:
+^I       ^I"661:\n\tlock; "$

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#491: FILE: include/asm-x86_64/alternative.h:141:
+#define alternative_smp(smpinstr, upinstr, args...) \
+	asm volatile (upinstr : args)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#726: FILE: include/asm-x86_64/cpufeature.h:67:
+#define X86_FEATURE_UP		(3*32+ 7) /* SMP kernel running on UP */
                       		  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxW)
#726: FILE: include/asm-x86_64/cpufeature.h:67:
+#define X86_FEATURE_UP		(3*32+ 7) /* SMP kernel running on UP */
                       		     ^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#790: FILE: include/asm-x86_64/spinlock.h:44:
+	alternative_smp(

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#914: FILE: include/asm-x86_64/system.h:289:
+extern void free_init_pages(char *what, unsigned long begin, unsigned long end);

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#931: FILE: arch/i386/kernel/alternative.c:7:
+static int no_replacement    = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#932: FILE: arch/i386/kernel/alternative.c:8:
+static int smp_alt_once      = 0;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#933: FILE: arch/i386/kernel/alternative.c:9:
+static int debug_alternative = 0;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#940: FILE: arch/i386/kernel/alternative.c:16:
+}
+static int __init bootonly(char *str)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#945: FILE: arch/i386/kernel/alternative.c:21:
+}
+static int __init debug_alt(char *str)

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#951: FILE: arch/i386/kernel/alternative.c:27:
+__setup("noreplacement", noreplacement_setup);

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#952: FILE: arch/i386/kernel/alternative.c:28:
+__setup("smp-alt-boot", bootonly);

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#953: FILE: arch/i386/kernel/alternative.c:29:
+__setup("debug-alternative", debug_alt);

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#955: FILE: arch/i386/kernel/alternative.c:31:
+#define DPRINTK(fmt, args...) if (debug_alternative) \
+	printk(KERN_DEBUG fmt, args)

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#956: FILE: arch/i386/kernel/alternative.c:32:
+	printk(KERN_DEBUG fmt, args)

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#973: FILE: arch/i386/kernel/alternative.c:41:
+extern unsigned char intelnops[];

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#987: FILE: arch/i386/kernel/alternative.c:59:
+extern unsigned char k8nops[];

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1001: FILE: arch/i386/kernel/alternative.c:77:
+extern unsigned char k7nops[];

ERROR:POINTER_LOCATION: "foo** bar" should be "foo **bar"
#1014: FILE: arch/i386/kernel/alternative.c:94:
+static inline unsigned char** find_nop_table(void)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1046: FILE: arch/i386/kernel/alternative.c:127:
+extern struct alt_instr __smp_alt_instructions[], __smp_alt_instructions_end[];

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1047: FILE: arch/i386/kernel/alternative.c:128:
+extern u8 *__smp_locks[], *__smp_locks_end[];

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1049: FILE: arch/i386/kernel/alternative.c:130:
+extern u8 __smp_alt_begin[], __smp_alt_end[];

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1070: FILE: arch/i386/kernel/alternative.c:153:
+		if (instr >= (u8 *)VSYSCALL_START && instr < (u8*)VSYSCALL_END) {

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1071: FILE: arch/i386/kernel/alternative.c:154:
+			instr = __va(instr - (u8*)VSYSCALL_START + (u8*)__pa_symbol(&__vsyscall_0));

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1071: FILE: arch/i386/kernel/alternative.c:154:
+			instr = __va(instr - (u8*)VSYSCALL_START + (u8*)__pa_symbol(&__vsyscall_0));

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1073: FILE: arch/i386/kernel/alternative.c:156:
+				__FUNCTION__, a->instr, instr);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1128: FILE: arch/i386/kernel/alternative.c:334:
+		printk(KERN_INFO "(SMP-)alternatives turned off\n");

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1159: FILE: include/asm-x86_64/mutex.h:27:
+		LOCK_PREFIX "   decl (%%rdi)	\n"			\

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1168: FILE: include/asm-x86_64/mutex.h:77:
+		LOCK_PREFIX "   incl (%%rdi)	\n"			\

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000086014.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 17 errors, 26 warnings, 14 checks, 1013 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000086014.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
