WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#72: FILE: arch/ppc64/kernel/spu_base.c:78:
+		printk("%s: invalid access during switch!\n", __func__);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#93: FILE: arch/ppc64/kernel/spu_base.c:119:
+	/* Handle kernel space hash faults immediately.
+	   User hash faults need to be deferred to process context. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#93: FILE: arch/ppc64/kernel/spu_base.c:119:
+	   User hash faults need to be deferred to process context. */

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#95: FILE: arch/ppc64/kernel/spu_base.c:121:
+	if ((dsisr & MFC_DSISR_PTE_NOT_FOUND)
+	    && REGION_ID(ea) != USER_REGION_ID

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#96: FILE: arch/ppc64/kernel/spu_base.c:122:
+	    && REGION_ID(ea) != USER_REGION_ID
+	    && hash_page(ea, _PAGE_PRESENT, 0x300) == 0) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#102: FILE: arch/ppc64/kernel/spu_base.c:128:
+		printk("%s: invalid access during switch!\n", __func__);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#640: FILE: fs/spufs/switch.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:TYPO_SPELLING: 'premptive' may be misspelled - perhaps 'preemptive'?
#650: FILE: fs/spufs/switch.c:11:
+ * A fully premptive switch of an SPE is very expensive in terms
            ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'premptively' may be misspelled - perhaps 'preemptively'?
#654: FILE: fs/spufs/switch.c:15:
+ * this is not possible, this sequence may be used to premptively
                                                       ^^^^^^^^^^^

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#670: FILE: fs/spufs/switch.c:31:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#671: FILE: fs/spufs/switch.c:32:
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#686: FILE: fs/spufs/switch.c:47:
+#include <asm/io.h>

WARNING:INCLUDE_LINUX: Use #include <linux/mmu_context.h> instead of <asm/mmu_context.h>
#689: FILE: fs/spufs/switch.c:50:
+#include <asm/mmu_context.h>

WARNING:TYPO_SPELLING: 'succesful' may be misspelled - perhaps 'successful'?
#714: FILE: fs/spufs/switch.c:75:
+ * from a previous succesful save operation, and the
                    ^^^^^^^^^

CHECK:ALLOC_SIZEOF_STRUCT: Prefer vmalloc(sizeof(*lscsa)...) over vmalloc(sizeof(struct spu_lscsa)...)
#798: FILE: fs/spufs/switch.c:159:
+	lscsa = vmalloc(sizeof(struct spu_lscsa));

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:BIT_MACRO: Prefer using the BIT macro
#869: FILE: include/asm-ppc64/spu.h:78:
+#define MFC_MIN_DMA_SIZE        (1 << MFC_MIN_DMA_SIZE_SHIFT)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#870: FILE: include/asm-ppc64/spu.h:79:
+#define MFC_MAX_DMA_SIZE        (1 << MFC_MAX_DMA_SIZE_SHIFT)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'tag_id' may be better as '(tag_id)' to avoid precedence issues
#876: FILE: include/asm-ppc64/spu.h:85:
+#define MFC_TAGID_TO_TAGMASK(tag_id)  (1 << (tag_id & 0x1F))

CHECK:BIT_MACRO: Prefer using the BIT macro
#895: FILE: include/asm-ppc64/spu.h:104:
+#define SPU_CONTEXT_SWITCH_PENDING	(1UL << SPU_CONTEXT_SWITCH_PENDING_nr)

CHECK:BIT_MACRO: Prefer using the BIT macro
#896: FILE: include/asm-ppc64/spu.h:105:
+#define SPU_CONTEXT_SWITCH_ACTIVE	(1UL << SPU_CONTEXT_SWITCH_ACTIVE_nr)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#913: FILE: include/asm-ppc64/spu_csa.h:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#931: FILE: include/asm-ppc64/spu_csa.h:19:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#932: FILE: include/asm-ppc64/spu_csa.h:20:
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#941: FILE: include/asm-ppc64/spu_csa.h:29:
+#define NR_SPU_GPRS         ^I128$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#942: FILE: include/asm-ppc64/spu_csa.h:30:
+#define NR_SPU_SPRS         ^I9$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#943: FILE: include/asm-ppc64/spu_csa.h:31:
+#define NR_SPU_REGS_PAD^I    ^I7$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#944: FILE: include/asm-ppc64/spu_csa.h:32:
+#define NR_SPU_SPILL_REGS   ^I144^I/* GPRS + SPRS + PAD */$

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#945: FILE: include/asm-ppc64/spu_csa.h:33:
+#define SIZEOF_SPU_SPILL_REGS	NR_SPU_SPILL_REGS * 16

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#947: FILE: include/asm-ppc64/spu_csa.h:35:
+#define SPU_SAVE_COMPLETE      ^I0x3FFB$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#948: FILE: include/asm-ppc64/spu_csa.h:36:
+#define SPU_RESTORE_COMPLETE   ^I0x3FFC$

ERROR:SPACING: exactly one space required after that #ifndef
#964: FILE: include/asm-ppc64/spu_csa.h:52:
+#ifndef  __ASSEMBLY__

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <resource_allocation_groupID_RW>
#1048: FILE: include/asm-ppc64/spu_csa.h:136:
+	u64 resource_allocation_groupID_RW;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:TYPO_SPELLING: 'priviliged' may be misspelled - perhaps 'privileged'?
#1097: FILE: include/asm-ppc64/spu_csa.h:185:
+ * struct spu_priv2_collapsed - condensed priviliged 2 area, w/o pads.
                                           ^^^^^^^^^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1159: FILE: include/asm-ppc64/spu_csa.h:247:
+extern void spu_init_csa(struct spu_state *csa);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1160: FILE: include/asm-ppc64/spu_csa.h:248:
+extern void spu_fini_csa(struct spu_state *csa);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1161: FILE: include/asm-ppc64/spu_csa.h:249:
+extern int spu_save(struct spu_state *prev, struct spu *spu);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1162: FILE: include/asm-ppc64/spu_csa.h:250:
+extern int spu_restore(struct spu_state *new, struct spu *spu);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1163: FILE: include/asm-ppc64/spu_csa.h:251:
+extern int spu_switch(struct spu_state *prev, struct spu_state *new,

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000150652.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 6 errors, 18 warnings, 14 checks, 1063 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000150652.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
