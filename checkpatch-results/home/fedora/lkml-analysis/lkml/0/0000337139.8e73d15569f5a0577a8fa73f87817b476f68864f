WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#33: 
> > The patch works (although by looking over oom_kill.c, I'm sure oom_panic.c

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#61: 
# This is a BitKeeper generated patch for the following project:

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#62: 
# Project Name: Linux kernel tree

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#63: 
# This patch format is intended for GNU patch command version 2.5 or higher.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#64: 
# This patch includes the following deltas:

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#65: 
#	           ChangeSet	1.1283.1.32 -> 1.1287 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#66: 
#	     kernel/sysctl.c	1.53    -> 1.54   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#67: 
#	       mm/oom_kill.c	1.24    -> 1.25   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#68: 
#	include/linux/sysctl.h	1.51    -> 1.52   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#69: 
#	         mm/Makefile	1.24    -> 1.26   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#70: 
#	        init/Kconfig	1.28    -> 1.30   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#71: 
#	               (new)	        -> 1.1     mm/oom_panic.c 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#72: 
#	               (new)	        -> 1.1     mm/oom_notifier.c

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#73: 
#	               (new)	        -> 1.1     mm/oom_kill_parent.c

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#74: 
#

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#75: 
# The following is the BitKeeper ChangeSet Log

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#76: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#77: 
# 03/09/12	rusty@penguin.co.intel.com	1.1286

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#78: 
# Merge http://linux.bkbits.net:8080/linux-2.5

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#79: 
# into penguin.co.intel.com:/src/linux/linus

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#80: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#81: 
# 03/09/12	rusty@penguin.co.intel.com	1.1287

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#82: 
# Adding OOM handler that kills parents that produce bad children

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#83: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#84: 
#

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#86: 
--- a/include/linux/notifier.h	Fri Sep 12 18:59:35 2003

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#100: FILE: include/linux/oom_notifier.h:1:
+#ifndef _LINUX_OOM_NOTIFIER_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#103: FILE: include/linux/oom_notifier.h:4:
+int register_oom_notifier(struct notifier_block * nb);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#104: FILE: include/linux/oom_notifier.h:5:
+int unregister_oom_notifier(struct notifier_block * nb);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#114: FILE: include/linux/sysctl.h:157:
+	VM_OOM_PARENT_MAX=22,
 	                 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#115: FILE: include/linux/sysctl.h:158:
+	VM_OOM_PARENT_EXPIRE=23,
 	                    ^

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#126: FILE: init/Kconfig:165:
+config OOM_KILL
+        bool "Kill process on out-of-memory conditions"
+	---help---
+	 This option enables the traditional oom_kill.c mechanism for
+         killing processes in an attempt to recover from an out-of-memory
+         condition.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#133: FILE: init/Kconfig:172:
+config OOM_PANIC
+	tristate "Panic on out-of-memory conditions"
+	---help---
+	 This option enables panic() to be called when a system is out of
+         memory.  This feature along with /proc/sys/kernel/panic allows a
+         different behavior on out-of-memory conditions when the standard
+         behavior (killing processes in an attempt to recover) does not 
+         make sense.
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#139: FILE: init/Kconfig:178:
+         behavior (killing processes in an attempt to recover) does not $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#142: FILE: init/Kconfig:181:
+config OOM_KPPID
+	bool "Kill bad parents along with their children when out-of-memory"
+	---help---
+	 This option enables an out-of-memory handler that not only attempts
+         to kill bad processes to free up memory, but also kills parents
+         that repeatedly produce bad children.
+
+         Two tunables, oom_parent_max and oom_parent_expire, will be added
+         and  to /proc/sys/vm/ to control how many children a parent is 
+         allowed to have terminated, and how long between terminated children
+         before a parent is forgiven.          
 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#150: FILE: init/Kconfig:189:
+         and  to /proc/sys/vm/ to control how many children a parent is $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#152: FILE: init/Kconfig:191:
+         before a parent is forgiven.          $

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#163: FILE: kernel/sysctl.c:62:
+extern unsigned int oom_parent_max;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#164: FILE: kernel/sysctl.c:63:
+extern unsigned int oom_parent_expire;

ERROR:CODE_INDENT: code indent should use tabs where possible
#176: FILE: kernel/sysctl.c:681:
+                .data           = &oom_parent_max,$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#176: FILE: kernel/sysctl.c:681:
+                .data           = &oom_parent_max,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#177: FILE: kernel/sysctl.c:682:
+                .maxlen         = sizeof(oom_parent_max),$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#177: FILE: kernel/sysctl.c:682:
+                .maxlen         = sizeof(oom_parent_max),$

ERROR:CODE_INDENT: code indent should use tabs where possible
#179: FILE: kernel/sysctl.c:684:
+                .proc_handler   = &proc_dointvec,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#179: FILE: kernel/sysctl.c:684:
+                .proc_handler   = &proc_dointvec,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#184: FILE: kernel/sysctl.c:689:
+                .data           = &oom_parent_expire,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#184: FILE: kernel/sysctl.c:689:
+                .data           = &oom_parent_expire,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#185: FILE: kernel/sysctl.c:690:
+                .maxlen         = sizeof(oom_parent_expire),$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#185: FILE: kernel/sysctl.c:690:
+                .maxlen         = sizeof(oom_parent_expire),$

ERROR:CODE_INDENT: code indent should use tabs where possible
#187: FILE: kernel/sysctl.c:692:
+                .proc_handler   = &proc_dointvec,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#187: FILE: kernel/sysctl.c:692:
+                .proc_handler   = &proc_dointvec,$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#239: FILE: mm/oom_kill.c:313:
+static int oom_notify(struct notifier_block * s, unsigned long v, void * d)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#239: FILE: mm/oom_kill.c:313:
+static int oom_notify(struct notifier_block * s, unsigned long v, void * d)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#251: FILE: mm/oom_kill.c:325:
+	printk("Registering oom_kill handler\n");

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#259: FILE: mm/oom_kill_parent.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#260: FILE: mm/oom_kill_parent.c:2:
+ *  linux/mm/oom_kill_parent.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#261: FILE: mm/oom_kill_parent.c:3:
+ * $

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#283: FILE: mm/oom_kill_parent.c:25:
+#define OOM_DEFAULT_EXPIRE	(5*60)
                           	  ^

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#286: FILE: mm/oom_kill_parent.c:28:
+struct parent_record
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#301: FILE: mm/oom_kill_parent.c:43:
+#define dbg(format, arg...)					\
+	do {							\
+			printk (KERN_DEBUG "OOM: " format "\n",	\
+				## arg);                        \
+	} while(0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#302: FILE: mm/oom_kill_parent.c:44:
+	do {							\
+			printk (KERN_DEBUG "OOM: " format "\n",	\

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#303: FILE: mm/oom_kill_parent.c:45:
+			printk (KERN_DEBUG "OOM: " format "\n",	\

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#303: FILE: mm/oom_kill_parent.c:45:
+			printk (KERN_DEBUG "OOM: " format "\n",	\

ERROR:SPACING: space required before the open parenthesis '('
#305: FILE: mm/oom_kill_parent.c:47:
+	} while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#309: FILE: mm/oom_kill_parent.c:51:
+#define warn(format, arg...)					  \
+	do {							  \
+			printk (KERN_WARNING "OOM: " format "\n", \
+				## arg);                          \
+	} while(0)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#310: FILE: mm/oom_kill_parent.c:52:
+	do {							  \
+			printk (KERN_WARNING "OOM: " format "\n", \

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#311: FILE: mm/oom_kill_parent.c:53:
+			printk (KERN_WARNING "OOM: " format "\n", \

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#311: FILE: mm/oom_kill_parent.c:53:
+			printk (KERN_WARNING "OOM: " format "\n", \

ERROR:SPACING: space required before the open parenthesis '('
#313: FILE: mm/oom_kill_parent.c:55:
+	} while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#314: FILE: mm/oom_kill_parent.c:56:
+#define error(format, arg...)					        \
+	do {							        \
+			printk (KERN_ERR "Out-of-Memory: " format "\n",	\
+				## arg);                                \
+	} while(0)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#315: FILE: mm/oom_kill_parent.c:57:
+	do {							        \
+			printk (KERN_ERR "Out-of-Memory: " format "\n",	\

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#316: FILE: mm/oom_kill_parent.c:58:
+			printk (KERN_ERR "Out-of-Memory: " format "\n",	\

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#316: FILE: mm/oom_kill_parent.c:58:
+			printk (KERN_ERR "Out-of-Memory: " format "\n",	\

ERROR:SPACING: space required before the open parenthesis '('
#318: FILE: mm/oom_kill_parent.c:60:
+	} while(0)

ERROR:SPACING: space prohibited after that open parenthesis '('
#325: FILE: mm/oom_kill_parent.c:67:
+	if ( !task )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#325: FILE: mm/oom_kill_parent.c:67:
+	if ( !task )

ERROR:SPACING: space prohibited after that open parenthesis '('
#328: FILE: mm/oom_kill_parent.c:70:
+	for ( i = 0; i < OOM_BLACK_LIST_SIZE; i++ ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#328: FILE: mm/oom_kill_parent.c:70:
+	for ( i = 0; i < OOM_BLACK_LIST_SIZE; i++ ) {

ERROR:SPACING: space prohibited after that open parenthesis '('
#330: FILE: mm/oom_kill_parent.c:72:
+		if ( p->pid )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#330: FILE: mm/oom_kill_parent.c:72:
+		if ( p->pid )

ERROR:SPACING: space prohibited after that open parenthesis '('
#331: FILE: mm/oom_kill_parent.c:73:
+			if ( (task->pid == p->pid) && (task == p->task) )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#331: FILE: mm/oom_kill_parent.c:73:
+			if ( (task->pid == p->pid) && (task == p->task) )

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'task->pid == p->pid'
#331: FILE: mm/oom_kill_parent.c:73:
+			if ( (task->pid == p->pid) && (task == p->task) )

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'task == p->task'
#331: FILE: mm/oom_kill_parent.c:73:
+			if ( (task->pid == p->pid) && (task == p->task) )

ERROR:SPACING: space prohibited after that open parenthesis '('
#343: FILE: mm/oom_kill_parent.c:85:
+	if ( !task && !task->parent )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#343: FILE: mm/oom_kill_parent.c:85:
+	if ( !task && !task->parent )

ERROR:SPACING: space prohibited after that open parenthesis '('
#346: FILE: mm/oom_kill_parent.c:88:
+	for ( i = 0; i < OOM_BLACK_LIST_SIZE; i++ ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#346: FILE: mm/oom_kill_parent.c:88:
+	for ( i = 0; i < OOM_BLACK_LIST_SIZE; i++ ) {

ERROR:SPACING: space prohibited after that open parenthesis '('
#348: FILE: mm/oom_kill_parent.c:90:
+		if ( !p->pid )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#348: FILE: mm/oom_kill_parent.c:90:
+		if ( !p->pid )

ERROR:TRAILING_WHITESPACE: trailing whitespace
#352: FILE: mm/oom_kill_parent.c:94:
+^I^Idbg("black list is full... %d is getting off easy", $

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#356: FILE: mm/oom_kill_parent.c:98:
+	p->pid= task->parent->pid;
 	      ^

WARNING:RETURN_VOID: void function return statements are not generally useful
#362: FILE: mm/oom_kill_parent.c:104:
+	return;
+}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#367: FILE: mm/oom_kill_parent.c:109:
+ * $

WARNING:LINE_SPACING: Missing a blank line after declarations
#373: FILE: mm/oom_kill_parent.c:115:
+	unsigned int out = x;
+	while (x & ~(unsigned int)1) x >>=2, out >>=1;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '>>=' (ctx:WxV)
#373: FILE: mm/oom_kill_parent.c:115:
+	while (x & ~(unsigned int)1) x >>=2, out >>=1;
 	                               ^

ERROR:SPACING: spaces required around that '>>=' (ctx:WxV)
#373: FILE: mm/oom_kill_parent.c:115:
+	while (x & ~(unsigned int)1) x >>=2, out >>=1;
 	                                         ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#373: FILE: mm/oom_kill_parent.c:115:
+	while (x & ~(unsigned int)1) x >>=2, out >>=1;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:TYPECAST_INT_CONSTANT: Unnecessary typecast of c90 int constant - '(unsigned int)1' could be '1U'
#373: FILE: mm/oom_kill_parent.c:115:
+	while (x & ~(unsigned int)1) x >>=2, out >>=1;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#374: FILE: mm/oom_kill_parent.c:116:
+	if (x) out -= out >> 2;

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#375: FILE: mm/oom_kill_parent.c:117:
+	return (out ? out : 1);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#376: FILE: mm/oom_kill_parent.c:118:
+}^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#433: FILE: mm/oom_kill_parent.c:175:
+	if (cap_t(p->cap_effective) & CAP_TO_MASK(CAP_SYS_ADMIN) ||
+				p->uid == 0 || p->euid == 0)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#455: FILE: mm/oom_kill_parent.c:197:
+static struct task_struct * select_bad_process(void)

WARNING:LINE_SPACING: Missing a blank line after declarations
#464: FILE: mm/oom_kill_parent.c:206:
+			int points = badness(p);
+			if (points > maxpoints) {

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#501: FILE: mm/oom_kill_parent.c:243:
+	if (cap_t(p->cap_effective) & CAP_TO_MASK(CAP_SYS_RAWIO)) {
[...]
+	} else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#512: FILE: mm/oom_kill_parent.c:254:
+	struct mm_struct *mm = get_task_mm(p);
+	if (!mm || mm == &init_mm)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#515: FILE: mm/oom_kill_parent.c:257:
+^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#517: FILE: mm/oom_kill_parent.c:259:
+^I */^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#525: FILE: mm/oom_kill_parent.c:267:
+^I^I^Iif ( abs(jiffies - r->last_kill) >= $

ERROR:SPACING: space prohibited after that open parenthesis '('
#525: FILE: mm/oom_kill_parent.c:267:
+			if ( abs(jiffies - r->last_kill) >= 

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#526: FILE: mm/oom_kill_parent.c:268:
+			     (oom_parent_expire*HZ) ) {
 			                       ^

ERROR:SPACING: space prohibited before that close parenthesis ')'
#526: FILE: mm/oom_kill_parent.c:268:
+			     (oom_parent_expire*HZ) ) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#528: FILE: mm/oom_kill_parent.c:270:
+^I^I^I^I    "expired", $

WARNING:SPLIT_STRING: quoted string split across lines
#528: FILE: mm/oom_kill_parent.c:270:
+				dbg("Removing parent (%d) from black list: "
+				    "expired", 

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:SPACING: space prohibited after that open parenthesis '('
#531: FILE: mm/oom_kill_parent.c:273:
+			} else if ( r->value >= oom_parent_max ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#531: FILE: mm/oom_kill_parent.c:273:
+			} else if ( r->value >= oom_parent_max ) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#532: FILE: mm/oom_kill_parent.c:274:
+^I^I^I^Idbg("Marking parent (%d) for termination", $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#540: FILE: mm/oom_kill_parent.c:282:
+^I^I^I^I    "to %ld", $

WARNING:SPLIT_STRING: quoted string split across lines
#540: FILE: mm/oom_kill_parent.c:282:
+				dbg("Parent (%d) black list value increased "
+				    "to %ld", 

CHECK:LINE_SPACING: Please don't use multiple blank lines
#550: FILE: mm/oom_kill_parent.c:292:
+
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#586: FILE: mm/oom_kill_parent.c:328:
+		printk(KERN_INFO "Fixed up OOM kill of mm-less task\n");

WARNING:YIELD: Using yield() is generally wrong. See yield() kernel-doc (sched/core.c)
#595: FILE: mm/oom_kill_parent.c:337:
+	yield();

WARNING:RETURN_VOID: void function return statements are not generally useful
#597: FILE: mm/oom_kill_parent.c:339:
+	return;
+}

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#628: FILE: mm/oom_kill_parent.c:370:
+	if (since > 5*HZ)
 	             ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#641: FILE: mm/oom_kill_parent.c:383:
+^I * we're not really oom. $

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#652: FILE: mm/oom_kill_parent.c:394:
+	if (since < HZ*5)
 	              ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#678: FILE: mm/oom_kill_parent.c:420:
+static int oom_notify(struct notifier_block * s, unsigned long v, void * d)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#678: FILE: mm/oom_kill_parent.c:420:
+static int oom_notify(struct notifier_block * s, unsigned long v, void * d)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#698: FILE: mm/oom_notifier.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#699: FILE: mm/oom_notifier.c:2:
+ * linux/mm/oom_notifier.c

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#708: FILE: mm/oom_notifier.c:11:
+static struct notifier_block * oom_notify_list = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#708: FILE: mm/oom_notifier.c:11:
+static struct notifier_block * oom_notify_list = 0;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#710: FILE: mm/oom_notifier.c:13:
+int register_oom_notifier(struct notifier_block * nb)

WARNING:LINE_SPACING: Missing a blank line after declarations
#713: FILE: mm/oom_notifier.c:16:
+	int err;
+	down(&notify_mutex);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#720: FILE: mm/oom_notifier.c:23:
+int unregister_oom_notifier(struct notifier_block * nb)

WARNING:LINE_SPACING: Missing a blank line after declarations
#723: FILE: mm/oom_notifier.c:26:
+	int err;
+	down(&notify_mutex);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#740: FILE: mm/oom_panic.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#741: FILE: mm/oom_panic.c:2:
+ * linux/mm/oom_panic.c

ERROR:TRAILING_WHITESPACE: trailing whitespace
#743: FILE: mm/oom_panic.c:4:
+ * This is a very simple component that will cause the kernel to $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#746: FILE: mm/oom_panic.c:7:
+ *       $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#755: FILE: mm/oom_panic.c:16:
+static int oom_notify(struct notifier_block * s, unsigned long v, void * d)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#755: FILE: mm/oom_panic.c:16:
+static int oom_notify(struct notifier_block * s, unsigned long v, void * d)

WARNING:LINE_SPACING: Missing a blank line after declarations
#768: FILE: mm/oom_panic.c:29:
+	int err;
+	printk(KERN_INFO "Installing oom_panic handler\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#768: FILE: mm/oom_panic.c:29:
+	printk(KERN_INFO "Installing oom_panic handler\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#770: FILE: mm/oom_panic.c:31:
+	if (err) printk(KERN_ERR "Error installing oom_panic handler\n");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#770: FILE: mm/oom_panic.c:31:
+	if (err) printk(KERN_ERR "Error installing oom_panic handler\n");

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000337139.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 67 errors, 72 warnings, 8 checks, 654 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000337139.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
