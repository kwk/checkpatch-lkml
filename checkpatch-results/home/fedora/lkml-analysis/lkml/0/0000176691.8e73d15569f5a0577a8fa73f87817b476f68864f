WARNING:TYPO_SPELLING: 'completly' may be misspelled - perhaps 'completely'?
#44: 
Not without completly rewriting it and this would lead code that is not
            ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'ths' may be misspelled - perhaps 'the'?
#57: 
need ths CONFIG_BLK_DEV_RAM_LZMA build option to make use of lzma
     ^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#77: FILE: init/do_mounts.h:94:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#158: FILE: init/do_mounts_rd.c:31:
 
+

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#182: FILE: init/do_mounts_rd.c:51:
+ * ^Icompressed image formats (gzip, lzma)$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#223: FILE: init/do_mounts_rd.c:96:
+		printk(KERN_NOTICE

ERROR:TRAILING_WHITESPACE: trailing whitespace
#229: FILE: init/do_mounts_rd.c:102:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#244: FILE: init/do_mounts_rd.c:178:
+	switch (nblocks) {
+		case CRAMDISK_LZMA :     /* lzma image found */

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:SPACING: space prohibited before that ':' (ctx:WxW)
#245: FILE: init/do_mounts_rd.c:179:
+		case CRAMDISK_LZMA :     /* lzma image found */
 		                   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#247: FILE: init/do_mounts_rd.c:181:
+			if(lzma_load(in_fd, out_fd) == 0)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#253: FILE: init/do_mounts_rd.c:184:
+			printk(KERN_ALERT "RAMDISK: you don't have "

WARNING:SPLIT_STRING: quoted string split across lines
#254: FILE: init/do_mounts_rd.c:185:
+			printk(KERN_ALERT "RAMDISK: you don't have "
+					"CONFIG_BLK_DEV_RAM_LZMA\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:SPACING: space prohibited before that ':' (ctx:WxW)
#258: FILE: init/do_mounts_rd.c:188:
+		case CRAMDISK_GZ :      /* gzip image found */
 		                 ^

ERROR:SPACING: space required before the open parenthesis '('
#260: FILE: init/do_mounts_rd.c:190:
+			if(gz_load(in_fd, out_fd) == 0)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#263: FILE: init/do_mounts_rd.c:193:
+			printk(KERN_ALERT "RAMDISK: you don't have "

WARNING:SPLIT_STRING: quoted string split across lines
#264: FILE: init/do_mounts_rd.c:194:
+			printk(KERN_ALERT "RAMDISK: you don't have "
+					"CONFIG_BLK_DEV_RAM_GZ\n");

ERROR:SPACING: space prohibited before that ':' (ctx:WxE)
#267: FILE: init/do_mounts_rd.c:197:
+		default :
 		        ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#278: FILE: init/do_mounts_rd.c:245:
+	printk(KERN_NOTICE "RAMDISK: Loading %dKiB [%ld disk%s] into"

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#279: FILE: init/do_mounts_rd.c:246:
+		"ram disk... ",	nblocks, ((nblocks-1)/devblocks)+1,
 		               	                  ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#279: FILE: init/do_mounts_rd.c:246:
+		"ram disk... ",	nblocks, ((nblocks-1)/devblocks)+1,
 		               	                     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#279: FILE: init/do_mounts_rd.c:246:
+		"ram disk... ",	nblocks, ((nblocks-1)/devblocks)+1,
 		               	                                ^

WARNING:SPLIT_STRING: quoted string split across lines
#279: FILE: init/do_mounts_rd.c:246:
+	printk(KERN_NOTICE "RAMDISK: Loading %dKiB [%ld disk%s] into"
+		"ram disk... ",	nblocks, ((nblocks-1)/devblocks)+1,

WARNING:MISSING_SPACE: break quoted strings at a space character
#279: FILE: init/do_mounts_rd.c:246:
+	printk(KERN_NOTICE "RAMDISK: Loading %dKiB [%ld disk%s] into"
+		"ram disk... ",	nblocks, ((nblocks-1)/devblocks)+1,

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#280: FILE: init/do_mounts_rd.c:247:
+		nblocks>devblocks ? "s" : "");
 		       ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#329: FILE: init/do_mounts_rd.c:459:
+ * it's input data */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#333: FILE: init/do_mounts_rd.c:463:
+ * need extra memory for the dictionary, the default size is 8 MB */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#334: FILE: init/do_mounts_rd.c:464:
+#define _LZMA_OUT_READ $

CHECK:CAMELCASE: Avoid CamelCase: <UInt32>
#338: FILE: init/do_mounts_rd.c:468:
+#ifndef UInt32

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:NEW_TYPEDEFS: do not add new typedefs
#345: FILE: init/do_mounts_rd.c:475:
+typedef struct _cbuffer

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#346: FILE: init/do_mounts_rd.c:476:
+typedef struct _cbuffer
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:CAMELCASE: Avoid CamelCase: <ILzmaInCallback>
#347: FILE: init/do_mounts_rd.c:477:
+	ILzmaInCallback in_callback;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#350: FILE: init/do_mounts_rd.c:480:
+} cbuffer; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#351: FILE: init/do_mounts_rd.c:481:
+  $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#351: FILE: init/do_mounts_rd.c:481:
+  $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#358: FILE: init/do_mounts_rd.c:488:
+	read_size = sys_read(bo->lzma_read_fd, bo->buffer,
+		_LZMA_READ_COMPRESSED_BUFFER_SIZE);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#374: FILE: init/do_mounts_rd.c:504:
+^I$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#376: FILE: init/do_mounts_rd.c:506:
+		printk(KERN_ERR "RAMDISK: ran out of compressed data");

WARNING:LINE_SPACING: Missing a blank line after declarations
#383: FILE: init/do_mounts_rd.c:513:
+		unsigned char b;
+		if (sys_read(in_fd, &b, 1) == 0) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#384: FILE: init/do_mounts_rd.c:514:
+			printk(KERN_ERR "RAMDISK: ran out of compressed data");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#389: FILE: init/do_mounts_rd.c:519:
+^I$

WARNING:LINE_SPACING: Missing a blank line after declarations
#392: FILE: init/do_mounts_rd.c:522:
+		unsigned char b;
+		if (sys_read(in_fd, &b, 1) == 0) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#393: FILE: init/do_mounts_rd.c:523:
+			printk(KERN_ERR "RAMDISK: ran out of compressed data");

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#396: FILE: init/do_mounts_rd.c:526:
+		if (b!=0) {
 		     ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#397: FILE: init/do_mounts_rd.c:527:
+			printk(KERN_ERR "RAMDISK: either this is not a lzma"

WARNING:SPLIT_STRING: quoted string split across lines
#398: FILE: init/do_mounts_rd.c:528:
+			printk(KERN_ERR "RAMDISK: either this is not a lzma"
+				"compressed ramdisk or it's bigger 4 GB");

WARNING:MISSING_SPACE: break quoted strings at a space character
#398: FILE: init/do_mounts_rd.c:528:
+			printk(KERN_ERR "RAMDISK: either this is not a lzma"
+				"compressed ramdisk or it's bigger 4 GB");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#402: FILE: init/do_mounts_rd.c:532:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#404: FILE: init/do_mounts_rd.c:534:
+^Iif (prop0 >= (9*5*5)) { $

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#404: FILE: init/do_mounts_rd.c:534:
+	if (prop0 >= (9*5*5)) { 
 	               ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#404: FILE: init/do_mounts_rd.c:534:
+	if (prop0 >= (9*5*5)) { 
 	                 ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#405: FILE: init/do_mounts_rd.c:535:
+		printk(KERN_ERR "RAMDISK: lzma Properties error");

CHECK:CAMELCASE: Avoid CamelCase: <CProb>
#415: FILE: init/do_mounts_rd.c:545:
+		* sizeof(CProb);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#417: FILE: init/do_mounts_rd.c:547:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#419: FILE: init/do_mounts_rd.c:549:
+^Iif(lzma_internal == 0) { $

ERROR:SPACING: space required before the open parenthesis '('
#419: FILE: init/do_mounts_rd.c:549:
+	if(lzma_internal == 0) { 

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#420: FILE: init/do_mounts_rd.c:550:
+		printk(KERN_ERR "RAMDISK: failed to get memory "

WARNING:SPLIT_STRING: quoted string split across lines
#421: FILE: init/do_mounts_rd.c:551:
+		printk(KERN_ERR "RAMDISK: failed to get memory "
+			"for lzma_internal");

CHECK:CAMELCASE: Avoid CamelCase: <Read>
#425: FILE: init/do_mounts_rd.c:555:
+	bo.in_callback.Read = lzma_read_in;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#428: FILE: init/do_mounts_rd.c:558:
+^Iif (bo.buffer == 0) { $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#429: FILE: init/do_mounts_rd.c:559:
+		printk(KERN_ERR "RAMDISK: failed to get memory for bo.Buffer");

WARNING:BRACES: braces {} are not necessary for single statement blocks
#434: FILE: init/do_mounts_rd.c:564:
+	for (i = 0; i < 4; i++) {
+		dictionary_size += (u32)(properties[1 + i]) << (i * 8);
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#442: FILE: init/do_mounts_rd.c:572:
+^Iif (dictionary == 0) { $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#443: FILE: init/do_mounts_rd.c:573:
+		printk(KERN_ERR "RAMDISK: failed to get memory for dictionary");

CHECK:CAMELCASE: Avoid CamelCase: <LzmaDecoderInit>
#447: FILE: init/do_mounts_rd.c:577:
+	res = LzmaDecoderInit((unsigned char *)lzma_internal,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#448: FILE: init/do_mounts_rd.c:578:
+	res = LzmaDecoderInit((unsigned char *)lzma_internal,
+		lzma_internal_size,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#454: FILE: init/do_mounts_rd.c:584:
+^I^Iif (out_buffer == 0) { $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#455: FILE: init/do_mounts_rd.c:585:
+			printk(KERN_ERR "RAMDISK: failed to get memory"

WARNING:SPLIT_STRING: quoted string split across lines
#456: FILE: init/do_mounts_rd.c:586:
+			printk(KERN_ERR "RAMDISK: failed to get memory"
+				"for out_buffer");

WARNING:MISSING_SPACE: break quoted strings at a space character
#456: FILE: init/do_mounts_rd.c:586:
+			printk(KERN_ERR "RAMDISK: failed to get memory"
+				"for out_buffer");

CHECK:CAMELCASE: Avoid CamelCase: <LzmaDecode>
#461: FILE: init/do_mounts_rd.c:591:
+			res = LzmaDecode((unsigned char *)lzma_internal,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#462: FILE: init/do_mounts_rd.c:592:
+			res = LzmaDecode((unsigned char *)lzma_internal,
+				out_buffer, _LZMA_WRITE_BUFFER_SIZE,

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#472: FILE: init/do_mounts_rd.c:602:
+			if (res!=size_processed) {
 			       ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#473: FILE: init/do_mounts_rd.c:603:
+				printk(KERN_ERR "can't write everything,"

WARNING:SPLIT_STRING: quoted string split across lines
#474: FILE: init/do_mounts_rd.c:604:
+				printk(KERN_ERR "can't write everything,"
+					"the ramdisk is too small");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#490: FILE: init/do_mounts_rd.c:620:
+^I$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#499: FILE: lib/lzmadecode.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#500: FILE: lib/lzmadecode.c:2:
+/*
+  LzmaDecode.c

ERROR:TRAILING_WHITESPACE: trailing whitespace
#502: FILE: lib/lzmadecode.c:4:
+  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#509: FILE: lib/lzmadecode.c:11:
+  It means that you can select one of these two licenses and $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#513: FILE: lib/lzmadecode.c:15:
+  Igor Pavlov, as the author of this Code, expressly permits you to $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#514: FILE: lib/lzmadecode.c:16:
+  statically or dynamically link your Code (or bind by name) to the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#515: FILE: lib/lzmadecode.c:17:
+  interfaces of this file without subjecting your linked Code to the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#516: FILE: lib/lzmadecode.c:18:
+  terms of the CPL or GNU LGPL. Any modifications or additions $

CHECK:CAMELCASE: Avoid CamelCase: <Byte>
#522: FILE: lib/lzmadecode.c:24:
+#ifndef Byte

CHECK:CAMELCASE: Avoid CamelCase: <kNumTopBits>
#526: FILE: lib/lzmadecode.c:28:
+#define kNumTopBits 24

CHECK:CAMELCASE: Avoid CamelCase: <kTopValue>
#527: FILE: lib/lzmadecode.c:29:
+#define kTopValue ((UInt32)1 << kNumTopBits)

CHECK:CAMELCASE: Avoid CamelCase: <kNumBitModelTotalBits>
#529: FILE: lib/lzmadecode.c:31:
+#define kNumBitModelTotalBits 11

CHECK:CAMELCASE: Avoid CamelCase: <kBitModelTotal>
#530: FILE: lib/lzmadecode.c:32:
+#define kBitModelTotal (1 << kNumBitModelTotalBits)

CHECK:BIT_MACRO: Prefer using the BIT macro
#530: FILE: lib/lzmadecode.c:32:
+#define kBitModelTotal (1 << kNumBitModelTotalBits)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:CAMELCASE: Avoid CamelCase: <kNumMoveBits>
#531: FILE: lib/lzmadecode.c:33:
+#define kNumMoveBits 5

CHECK:CAMELCASE: Avoid CamelCase: <Buffer>
#533: FILE: lib/lzmadecode.c:35:
+#define RC_READ_BYTE (*Buffer++)

CHECK:CAMELCASE: Avoid CamelCase: <Code>
#535: FILE: lib/lzmadecode.c:37:
+#define RC_INIT2 Code = 0; Range = 0xFFFFFFFF; \

CHECK:CAMELCASE: Avoid CamelCase: <Range>
#535: FILE: lib/lzmadecode.c:37:
+#define RC_INIT2 Code = 0; Range = 0xFFFFFFFF; \

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#535: FILE: lib/lzmadecode.c:37:
+#define RC_INIT2 Code = 0; Range = 0xFFFFFFFF; \
+  { int i; for(i = 0; i < 5; i++) { RC_TEST; Code = (Code << 8) | RC_READ_BYTE; }}

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#536: FILE: lib/lzmadecode.c:38:
+  { int i; for(i = 0; i < 5; i++) { RC_TEST; Code = (Code << 8) | RC_READ_BYTE; }}$

ERROR:SPACING: space required before the open parenthesis '('
#536: FILE: lib/lzmadecode.c:38:
+  { int i; for(i = 0; i < 5; i++) { RC_TEST; Code = (Code << 8) | RC_READ_BYTE; }}

CHECK:CAMELCASE: Avoid CamelCase: <BufferLim>
#540: FILE: lib/lzmadecode.c:42:
+#define RC_TEST { if (Buffer == BufferLim) \

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#540: FILE: lib/lzmadecode.c:42:
+#define RC_TEST { if (Buffer == BufferLim) \
+  { UInt32 size; int result = InCallback->Read(InCallback, &Buffer, &size); if (result != LZMA_RESULT_OK) return result; \
+  BufferLim = Buffer + size; if (size == 0) return LZMA_RESULT_DATA_ERROR; }}

WARNING:LONG_LINE: line length of 122 exceeds 100 columns
#541: FILE: lib/lzmadecode.c:43:
+  { UInt32 size; int result = InCallback->Read(InCallback, &Buffer, &size); if (result != LZMA_RESULT_OK) return result; \

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#541: FILE: lib/lzmadecode.c:43:
+  { UInt32 size; int result = InCallback->Read(InCallback, &Buffer, &size); if (result != LZMA_RESULT_OK) return result; \$

CHECK:CAMELCASE: Avoid CamelCase: <InCallback>
#541: FILE: lib/lzmadecode.c:43:
+  { UInt32 size; int result = InCallback->Read(InCallback, &Buffer, &size); if (result != LZMA_RESULT_OK) return result; \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#542: FILE: lib/lzmadecode.c:44:
+  BufferLim = Buffer + size; if (size == 0) return LZMA_RESULT_DATA_ERROR; }}$

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#544: FILE: lib/lzmadecode.c:46:
+#define RC_INIT Buffer = BufferLim = 0; RC_INIT2

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#548: FILE: lib/lzmadecode.c:50:
+#define RC_TEST { if (Buffer == BufferLim) return LZMA_RESULT_DATA_ERROR; }

CHECK:CAMELCASE: Avoid CamelCase: <bufferSize>
#550: FILE: lib/lzmadecode.c:52:
+#define RC_INIT(buffer, bufferSize) Buffer = buffer; BufferLim = buffer + bufferSize; RC_INIT2

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#550: FILE: lib/lzmadecode.c:52:
+#define RC_INIT(buffer, bufferSize) Buffer = buffer; BufferLim = buffer + bufferSize; RC_INIT2

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'buffer' - possible side-effects?
#550: FILE: lib/lzmadecode.c:52:
+#define RC_INIT(buffer, bufferSize) Buffer = buffer; BufferLim = buffer + bufferSize; RC_INIT2

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'bufferSize' may be better as '(bufferSize)' to avoid precedence issues
#550: FILE: lib/lzmadecode.c:52:
+#define RC_INIT(buffer, bufferSize) Buffer = buffer; BufferLim = buffer + bufferSize; RC_INIT2

ERROR:TRAILING_WHITESPACE: trailing whitespace
#551: FILE: lib/lzmadecode.c:53:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#551: FILE: lib/lzmadecode.c:53:
+ $

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#554: FILE: lib/lzmadecode.c:56:
+#define RC_NORMALIZE if (Range < kTopValue) { RC_TEST; Range <<= 8; Code = (Code << 8) | RC_READ_BYTE; }

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#554: FILE: lib/lzmadecode.c:56:
+#define RC_NORMALIZE if (Range < kTopValue) { RC_TEST; Range <<= 8; Code = (Code << 8) | RC_READ_BYTE; }

CHECK:CAMELCASE: Avoid CamelCase: <IfBit0>
#556: FILE: lib/lzmadecode.c:58:
+#define IfBit0(p) RC_NORMALIZE; bound = (Range >> kNumBitModelTotalBits) * *(p); if (Code < bound)

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#556: FILE: lib/lzmadecode.c:58:
+#define IfBit0(p) RC_NORMALIZE; bound = (Range >> kNumBitModelTotalBits) * *(p); if (Code < bound)

CHECK:CAMELCASE: Avoid CamelCase: <UpdateBit0>
#557: FILE: lib/lzmadecode.c:59:
+#define UpdateBit0(p) Range = bound; *(p) += (kBitModelTotal - *(p)) >> kNumMoveBits;

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#557: FILE: lib/lzmadecode.c:59:
+#define UpdateBit0(p) Range = bound; *(p) += (kBitModelTotal - *(p)) >> kNumMoveBits;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#557: FILE: lib/lzmadecode.c:59:
+#define UpdateBit0(p) Range = bound; *(p) += (kBitModelTotal - *(p)) >> kNumMoveBits;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#557: FILE: lib/lzmadecode.c:59:
+#define UpdateBit0(p) Range = bound; *(p) += (kBitModelTotal - *(p)) >> kNumMoveBits;

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

CHECK:CAMELCASE: Avoid CamelCase: <UpdateBit1>
#558: FILE: lib/lzmadecode.c:60:
+#define UpdateBit1(p) Range -= bound; Code -= bound; *(p) -= (*(p)) >> kNumMoveBits;

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#558: FILE: lib/lzmadecode.c:60:
+#define UpdateBit1(p) Range -= bound; Code -= bound; *(p) -= (*(p)) >> kNumMoveBits;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#558: FILE: lib/lzmadecode.c:60:
+#define UpdateBit1(p) Range -= bound; Code -= bound; *(p) -= (*(p)) >> kNumMoveBits;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#558: FILE: lib/lzmadecode.c:60:
+#define UpdateBit1(p) Range -= bound; Code -= bound; *(p) -= (*(p)) >> kNumMoveBits;

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#560: FILE: lib/lzmadecode.c:62:
+#define RC_GET_BIT2(p, mi, A0, A1) IfBit0(p) \
+  { UpdateBit0(p); mi <<= 1; A0; } else \
+  { UpdateBit1(p); mi = (mi + mi) + 1; A1; } 

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#560: FILE: lib/lzmadecode.c:62:
+#define RC_GET_BIT2(p, mi, A0, A1) IfBit0(p) \
+  { UpdateBit0(p); mi <<= 1; A0; } else \
+  { UpdateBit1(p); mi = (mi + mi) + 1; A1; } 

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'mi' - possible side-effects?
#560: FILE: lib/lzmadecode.c:62:
+#define RC_GET_BIT2(p, mi, A0, A1) IfBit0(p) \
+  { UpdateBit0(p); mi <<= 1; A0; } else \
+  { UpdateBit1(p); mi = (mi + mi) + 1; A1; } 

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'mi' may be better as '(mi)' to avoid precedence issues
#560: FILE: lib/lzmadecode.c:62:
+#define RC_GET_BIT2(p, mi, A0, A1) IfBit0(p) \
+  { UpdateBit0(p); mi <<= 1; A0; } else \
+  { UpdateBit1(p); mi = (mi + mi) + 1; A1; } 

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#561: FILE: lib/lzmadecode.c:63:
+  { UpdateBit0(p); mi <<= 1; A0; } else \$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#562: FILE: lib/lzmadecode.c:64:
+  { UpdateBit1(p); mi = (mi + mi) + 1; A1; } $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#562: FILE: lib/lzmadecode.c:64:
+  { UpdateBit1(p); mi = (mi + mi) + 1; A1; } $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#563: FILE: lib/lzmadecode.c:65:
+  $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#563: FILE: lib/lzmadecode.c:65:
+  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#564: FILE: lib/lzmadecode.c:66:
+#define RC_GET_BIT(p, mi) RC_GET_BIT2(p, mi, ; , ;)               $

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#564: FILE: lib/lzmadecode.c:66:
+#define RC_GET_BIT(p, mi) RC_GET_BIT2(p, mi, ; , ;)               
                                                ^

CHECK:CAMELCASE: Avoid CamelCase: <RangeDecoderBitTreeDecode>
#566: FILE: lib/lzmadecode.c:68:
+#define RangeDecoderBitTreeDecode(probs, numLevels, res) \

CHECK:CAMELCASE: Avoid CamelCase: <numLevels>
#566: FILE: lib/lzmadecode.c:68:
+#define RangeDecoderBitTreeDecode(probs, numLevels, res) \

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'probs' may be better as '(probs)' to avoid precedence issues
#566: FILE: lib/lzmadecode.c:68:
+#define RangeDecoderBitTreeDecode(probs, numLevels, res) \
+  { int i = numLevels; res = 1; \
+  do { CProb *p = probs + res; RC_GET_BIT(p, res) } while(--i != 0); \
+  res -= (1 << numLevels); }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'numLevels' - possible side-effects?
#566: FILE: lib/lzmadecode.c:68:
+#define RangeDecoderBitTreeDecode(probs, numLevels, res) \
+  { int i = numLevels; res = 1; \
+  do { CProb *p = probs + res; RC_GET_BIT(p, res) } while(--i != 0); \
+  res -= (1 << numLevels); }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'res' - possible side-effects?
#566: FILE: lib/lzmadecode.c:68:
+#define RangeDecoderBitTreeDecode(probs, numLevels, res) \
+  { int i = numLevels; res = 1; \
+  do { CProb *p = probs + res; RC_GET_BIT(p, res) } while(--i != 0); \
+  res -= (1 << numLevels); }

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#567: FILE: lib/lzmadecode.c:69:
+  { int i = numLevels; res = 1; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#568: FILE: lib/lzmadecode.c:70:
+  do { CProb *p = probs + res; RC_GET_BIT(p, res) } while(--i != 0); \$

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#568: FILE: lib/lzmadecode.c:70:
+  do { CProb *p = probs + res; RC_GET_BIT(p, res) } while(--i != 0); \
              ^

ERROR:SPACING: space required before the open parenthesis '('
#568: FILE: lib/lzmadecode.c:70:
+  do { CProb *p = probs + res; RC_GET_BIT(p, res) } while(--i != 0); \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#569: FILE: lib/lzmadecode.c:71:
+  res -= (1 << numLevels); }$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#571: FILE: lib/lzmadecode.c:73:
+
+

CHECK:CAMELCASE: Avoid CamelCase: <kNumPosBitsMax>
#572: FILE: lib/lzmadecode.c:74:
+#define kNumPosBitsMax 4

CHECK:CAMELCASE: Avoid CamelCase: <kNumPosStatesMax>
#573: FILE: lib/lzmadecode.c:75:
+#define kNumPosStatesMax (1 << kNumPosBitsMax)

CHECK:BIT_MACRO: Prefer using the BIT macro
#573: FILE: lib/lzmadecode.c:75:
+#define kNumPosStatesMax (1 << kNumPosBitsMax)

CHECK:CAMELCASE: Avoid CamelCase: <kLenNumLowBits>
#575: FILE: lib/lzmadecode.c:77:
+#define kLenNumLowBits 3

CHECK:CAMELCASE: Avoid CamelCase: <kLenNumLowSymbols>
#576: FILE: lib/lzmadecode.c:78:
+#define kLenNumLowSymbols (1 << kLenNumLowBits)

CHECK:BIT_MACRO: Prefer using the BIT macro
#576: FILE: lib/lzmadecode.c:78:
+#define kLenNumLowSymbols (1 << kLenNumLowBits)

CHECK:CAMELCASE: Avoid CamelCase: <kLenNumMidBits>
#577: FILE: lib/lzmadecode.c:79:
+#define kLenNumMidBits 3

CHECK:CAMELCASE: Avoid CamelCase: <kLenNumMidSymbols>
#578: FILE: lib/lzmadecode.c:80:
+#define kLenNumMidSymbols (1 << kLenNumMidBits)

CHECK:BIT_MACRO: Prefer using the BIT macro
#578: FILE: lib/lzmadecode.c:80:
+#define kLenNumMidSymbols (1 << kLenNumMidBits)

CHECK:CAMELCASE: Avoid CamelCase: <kLenNumHighBits>
#579: FILE: lib/lzmadecode.c:81:
+#define kLenNumHighBits 8

CHECK:CAMELCASE: Avoid CamelCase: <kLenNumHighSymbols>
#580: FILE: lib/lzmadecode.c:82:
+#define kLenNumHighSymbols (1 << kLenNumHighBits)

CHECK:BIT_MACRO: Prefer using the BIT macro
#580: FILE: lib/lzmadecode.c:82:
+#define kLenNumHighSymbols (1 << kLenNumHighBits)

CHECK:CAMELCASE: Avoid CamelCase: <LenChoice>
#582: FILE: lib/lzmadecode.c:84:
+#define LenChoice 0

CHECK:CAMELCASE: Avoid CamelCase: <LenChoice2>
#583: FILE: lib/lzmadecode.c:85:
+#define LenChoice2 (LenChoice + 1)

CHECK:CAMELCASE: Avoid CamelCase: <LenLow>
#584: FILE: lib/lzmadecode.c:86:
+#define LenLow (LenChoice2 + 1)

CHECK:CAMELCASE: Avoid CamelCase: <LenMid>
#585: FILE: lib/lzmadecode.c:87:
+#define LenMid (LenLow + (kNumPosStatesMax << kLenNumLowBits))

CHECK:CAMELCASE: Avoid CamelCase: <LenHigh>
#586: FILE: lib/lzmadecode.c:88:
+#define LenHigh (LenMid + (kNumPosStatesMax << kLenNumMidBits))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#587: FILE: lib/lzmadecode.c:89:
+#define kNumLenProbs (LenHigh + kLenNumHighSymbols) $

CHECK:CAMELCASE: Avoid CamelCase: <kNumLenProbs>
#587: FILE: lib/lzmadecode.c:89:
+#define kNumLenProbs (LenHigh + kLenNumHighSymbols) 

CHECK:LINE_SPACING: Please don't use multiple blank lines
#589: FILE: lib/lzmadecode.c:91:
+
+

CHECK:CAMELCASE: Avoid CamelCase: <kNumStates>
#590: FILE: lib/lzmadecode.c:92:
+#define kNumStates 12

CHECK:CAMELCASE: Avoid CamelCase: <kNumLitStates>
#591: FILE: lib/lzmadecode.c:93:
+#define kNumLitStates 7

CHECK:CAMELCASE: Avoid CamelCase: <kStartPosModelIndex>
#593: FILE: lib/lzmadecode.c:95:
+#define kStartPosModelIndex 4

CHECK:CAMELCASE: Avoid CamelCase: <kEndPosModelIndex>
#594: FILE: lib/lzmadecode.c:96:
+#define kEndPosModelIndex 14

CHECK:CAMELCASE: Avoid CamelCase: <kNumFullDistances>
#595: FILE: lib/lzmadecode.c:97:
+#define kNumFullDistances (1 << (kEndPosModelIndex >> 1))

CHECK:CAMELCASE: Avoid CamelCase: <kNumPosSlotBits>
#597: FILE: lib/lzmadecode.c:99:
+#define kNumPosSlotBits 6

CHECK:CAMELCASE: Avoid CamelCase: <kNumLenToPosStates>
#598: FILE: lib/lzmadecode.c:100:
+#define kNumLenToPosStates 4

CHECK:CAMELCASE: Avoid CamelCase: <kNumAlignBits>
#600: FILE: lib/lzmadecode.c:102:
+#define kNumAlignBits 4

CHECK:CAMELCASE: Avoid CamelCase: <kAlignTableSize>
#601: FILE: lib/lzmadecode.c:103:
+#define kAlignTableSize (1 << kNumAlignBits)

CHECK:BIT_MACRO: Prefer using the BIT macro
#601: FILE: lib/lzmadecode.c:103:
+#define kAlignTableSize (1 << kNumAlignBits)

CHECK:CAMELCASE: Avoid CamelCase: <kMatchMinLen>
#603: FILE: lib/lzmadecode.c:105:
+#define kMatchMinLen 2

CHECK:CAMELCASE: Avoid CamelCase: <IsMatch>
#605: FILE: lib/lzmadecode.c:107:
+#define IsMatch 0

CHECK:CAMELCASE: Avoid CamelCase: <IsRep>
#606: FILE: lib/lzmadecode.c:108:
+#define IsRep (IsMatch + (kNumStates << kNumPosBitsMax))

CHECK:CAMELCASE: Avoid CamelCase: <IsRepG0>
#607: FILE: lib/lzmadecode.c:109:
+#define IsRepG0 (IsRep + kNumStates)

CHECK:CAMELCASE: Avoid CamelCase: <IsRepG1>
#608: FILE: lib/lzmadecode.c:110:
+#define IsRepG1 (IsRepG0 + kNumStates)

CHECK:CAMELCASE: Avoid CamelCase: <IsRepG2>
#609: FILE: lib/lzmadecode.c:111:
+#define IsRepG2 (IsRepG1 + kNumStates)

CHECK:CAMELCASE: Avoid CamelCase: <IsRep0Long>
#610: FILE: lib/lzmadecode.c:112:
+#define IsRep0Long (IsRepG2 + kNumStates)

CHECK:CAMELCASE: Avoid CamelCase: <PosSlot>
#611: FILE: lib/lzmadecode.c:113:
+#define PosSlot (IsRep0Long + (kNumStates << kNumPosBitsMax))

CHECK:CAMELCASE: Avoid CamelCase: <SpecPos>
#612: FILE: lib/lzmadecode.c:114:
+#define SpecPos (PosSlot + (kNumLenToPosStates << kNumPosSlotBits))

CHECK:CAMELCASE: Avoid CamelCase: <Align>
#613: FILE: lib/lzmadecode.c:115:
+#define Align (SpecPos + kNumFullDistances - kEndPosModelIndex)

CHECK:CAMELCASE: Avoid CamelCase: <LenCoder>
#614: FILE: lib/lzmadecode.c:116:
+#define LenCoder (Align + kAlignTableSize)

CHECK:CAMELCASE: Avoid CamelCase: <RepLenCoder>
#615: FILE: lib/lzmadecode.c:117:
+#define RepLenCoder (LenCoder + kNumLenProbs)

CHECK:CAMELCASE: Avoid CamelCase: <Literal>
#616: FILE: lib/lzmadecode.c:118:
+#define Literal (RepLenCoder + kNumLenProbs)

WARNING:NEW_TYPEDEFS: do not add new typedefs
#624: FILE: lib/lzmadecode.c:126:
+typedef struct _LzmaVarState

CHECK:CAMELCASE: Avoid CamelCase: <_LzmaVarState>
#624: FILE: lib/lzmadecode.c:126:
+typedef struct _LzmaVarState

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#625: FILE: lib/lzmadecode.c:127:
+typedef struct _LzmaVarState
+{

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#626: FILE: lib/lzmadecode.c:128:
+  Byte *Buffer;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#627: FILE: lib/lzmadecode.c:129:
+  Byte *BufferLim;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#628: FILE: lib/lzmadecode.c:130:
+  UInt32 Range;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#629: FILE: lib/lzmadecode.c:131:
+  UInt32 Code;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#631: FILE: lib/lzmadecode.c:133:
+  ILzmaInCallback *InCallback;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#633: FILE: lib/lzmadecode.c:135:
+  Byte *Dictionary;$

CHECK:CAMELCASE: Avoid CamelCase: <Dictionary>
#633: FILE: lib/lzmadecode.c:135:
+  Byte *Dictionary;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#634: FILE: lib/lzmadecode.c:136:
+  UInt32 DictionarySize;$

CHECK:CAMELCASE: Avoid CamelCase: <DictionarySize>
#634: FILE: lib/lzmadecode.c:136:
+  UInt32 DictionarySize;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#635: FILE: lib/lzmadecode.c:137:
+  UInt32 DictionaryPos;$

CHECK:CAMELCASE: Avoid CamelCase: <DictionaryPos>
#635: FILE: lib/lzmadecode.c:137:
+  UInt32 DictionaryPos;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#636: FILE: lib/lzmadecode.c:138:
+  UInt32 GlobalPos;$

CHECK:CAMELCASE: Avoid CamelCase: <GlobalPos>
#636: FILE: lib/lzmadecode.c:138:
+  UInt32 GlobalPos;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#637: FILE: lib/lzmadecode.c:139:
+  UInt32 Reps[4];$

CHECK:CAMELCASE: Avoid CamelCase: <Reps>
#637: FILE: lib/lzmadecode.c:139:
+  UInt32 Reps[4];

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#638: FILE: lib/lzmadecode.c:140:
+  int lc;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#639: FILE: lib/lzmadecode.c:141:
+  int lp;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#640: FILE: lib/lzmadecode.c:142:
+  int pb;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#641: FILE: lib/lzmadecode.c:143:
+  int State;$

CHECK:CAMELCASE: Avoid CamelCase: <State>
#641: FILE: lib/lzmadecode.c:143:
+  int State;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#642: FILE: lib/lzmadecode.c:144:
+  int RemainLen;$

CHECK:CAMELCASE: Avoid CamelCase: <RemainLen>
#642: FILE: lib/lzmadecode.c:144:
+  int RemainLen;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#643: FILE: lib/lzmadecode.c:145:
+  Byte TempDictionary[4];$

CHECK:CAMELCASE: Avoid CamelCase: <TempDictionary>
#643: FILE: lib/lzmadecode.c:145:
+  Byte TempDictionary[4];

CHECK:CAMELCASE: Avoid CamelCase: <LzmaVarState>
#644: FILE: lib/lzmadecode.c:146:
+} LzmaVarState;

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#646: FILE: lib/lzmadecode.c:148:
+int LzmaDecoderInit(

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#647: FILE: lib/lzmadecode.c:149:
+    unsigned char *buffer, UInt32 bufferSize,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#648: FILE: lib/lzmadecode.c:150:
+    int lc, int lp, int pb,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#649: FILE: lib/lzmadecode.c:151:
+    unsigned char *dictionary, UInt32 dictionarySize,$

CHECK:CAMELCASE: Avoid CamelCase: <dictionarySize>
#649: FILE: lib/lzmadecode.c:151:
+    unsigned char *dictionary, UInt32 dictionarySize,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#651: FILE: lib/lzmadecode.c:153:
+    ILzmaInCallback *InCallback$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#653: FILE: lib/lzmadecode.c:155:
+    unsigned char *inStream, UInt32 inSize$

CHECK:CAMELCASE: Avoid CamelCase: <inStream>
#653: FILE: lib/lzmadecode.c:155:
+    unsigned char *inStream, UInt32 inSize

CHECK:CAMELCASE: Avoid CamelCase: <inSize>
#653: FILE: lib/lzmadecode.c:155:
+    unsigned char *inStream, UInt32 inSize

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#655: FILE: lib/lzmadecode.c:157:
+    )$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#657: FILE: lib/lzmadecode.c:159:
+  Byte *Buffer;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#658: FILE: lib/lzmadecode.c:160:
+  Byte *BufferLim;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#659: FILE: lib/lzmadecode.c:161:
+  UInt32 Range;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#660: FILE: lib/lzmadecode.c:162:
+  UInt32 Code;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#661: FILE: lib/lzmadecode.c:163:
+  LzmaVarState *vs = (LzmaVarState *)buffer;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#662: FILE: lib/lzmadecode.c:164:
+  CProb *p = (CProb *)(buffer + sizeof(LzmaVarState));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#663: FILE: lib/lzmadecode.c:165:
+  UInt32 numProbs = Literal + ((UInt32)LZMA_LIT_SIZE << (lc + lp));$

CHECK:CAMELCASE: Avoid CamelCase: <numProbs>
#663: FILE: lib/lzmadecode.c:165:
+  UInt32 numProbs = Literal + ((UInt32)LZMA_LIT_SIZE << (lc + lp));

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#664: FILE: lib/lzmadecode.c:166:
+  UInt32 i;$

WARNING:LINE_SPACING: Missing a blank line after declarations
#665: FILE: lib/lzmadecode.c:167:
+  UInt32 i;
+  if (bufferSize < numProbs * sizeof(CProb) + sizeof(LzmaVarState))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#665: FILE: lib/lzmadecode.c:167:
+  if (bufferSize < numProbs * sizeof(CProb) + sizeof(LzmaVarState))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#665: FILE: lib/lzmadecode.c:167:
+  if (bufferSize < numProbs * sizeof(CProb) + sizeof(LzmaVarState))
+    return LZMA_RESULT_NOT_ENOUGH_MEM;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#666: FILE: lib/lzmadecode.c:168:
+    return LZMA_RESULT_NOT_ENOUGH_MEM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#667: FILE: lib/lzmadecode.c:169:
+  vs->Dictionary = dictionary;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#668: FILE: lib/lzmadecode.c:170:
+  vs->DictionarySize = dictionarySize;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#669: FILE: lib/lzmadecode.c:171:
+  vs->DictionaryPos = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#670: FILE: lib/lzmadecode.c:172:
+  vs->GlobalPos = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#671: FILE: lib/lzmadecode.c:173:
+  vs->Reps[0] = vs->Reps[1] = vs->Reps[2] = vs->Reps[3] = 1;$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#671: FILE: lib/lzmadecode.c:173:
+  vs->Reps[0] = vs->Reps[1] = vs->Reps[2] = vs->Reps[3] = 1;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#672: FILE: lib/lzmadecode.c:174:
+  vs->lc = lc;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#673: FILE: lib/lzmadecode.c:175:
+  vs->lp = lp;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#674: FILE: lib/lzmadecode.c:176:
+  vs->pb = pb;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#675: FILE: lib/lzmadecode.c:177:
+  vs->State = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#676: FILE: lib/lzmadecode.c:178:
+  vs->RemainLen = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#677: FILE: lib/lzmadecode.c:179:
+  dictionary[dictionarySize - 1] = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#678: FILE: lib/lzmadecode.c:180:
+  for (i = 0; i < numProbs; i++)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#678: FILE: lib/lzmadecode.c:180:
+  for (i = 0; i < numProbs; i++)
+    p[i] = kBitModelTotal >> 1; 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#679: FILE: lib/lzmadecode.c:181:
+    p[i] = kBitModelTotal >> 1; $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#679: FILE: lib/lzmadecode.c:181:
+    p[i] = kBitModelTotal >> 1; $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#682: FILE: lib/lzmadecode.c:184:
+  RC_INIT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#684: FILE: lib/lzmadecode.c:186:
+  RC_INIT(inStream, inSize);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#686: FILE: lib/lzmadecode.c:188:
+  vs->Buffer = Buffer;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#687: FILE: lib/lzmadecode.c:189:
+  vs->BufferLim = BufferLim;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#688: FILE: lib/lzmadecode.c:190:
+  vs->Range = Range;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#689: FILE: lib/lzmadecode.c:191:
+  vs->Code = Code;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#691: FILE: lib/lzmadecode.c:193:
+  vs->InCallback = InCallback;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#694: FILE: lib/lzmadecode.c:196:
+  return LZMA_RESULT_OK;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#697: FILE: lib/lzmadecode.c:199:
+int LzmaDecode(unsigned char *buffer, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#698: FILE: lib/lzmadecode.c:200:
+int LzmaDecode(unsigned char *buffer, 
+    unsigned char *outStream, UInt32 outSize,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#698: FILE: lib/lzmadecode.c:200:
+    unsigned char *outStream, UInt32 outSize,$

CHECK:CAMELCASE: Avoid CamelCase: <outStream>
#698: FILE: lib/lzmadecode.c:200:
+    unsigned char *outStream, UInt32 outSize,

CHECK:CAMELCASE: Avoid CamelCase: <outSize>
#698: FILE: lib/lzmadecode.c:200:
+    unsigned char *outStream, UInt32 outSize,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#699: FILE: lib/lzmadecode.c:201:
+    UInt32 *outSizeProcessed)$

CHECK:CAMELCASE: Avoid CamelCase: <outSizeProcessed>
#699: FILE: lib/lzmadecode.c:201:
+    UInt32 *outSizeProcessed)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#701: FILE: lib/lzmadecode.c:203:
+  LzmaVarState *vs = (LzmaVarState *)buffer;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#702: FILE: lib/lzmadecode.c:204:
+  Byte *Buffer = vs->Buffer;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#703: FILE: lib/lzmadecode.c:205:
+  Byte *BufferLim = vs->BufferLim;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#704: FILE: lib/lzmadecode.c:206:
+  UInt32 Range = vs->Range;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#705: FILE: lib/lzmadecode.c:207:
+  UInt32 Code = vs->Code;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#707: FILE: lib/lzmadecode.c:209:
+  ILzmaInCallback *InCallback = vs->InCallback;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#709: FILE: lib/lzmadecode.c:211:
+  CProb *p = (CProb *)(buffer + sizeof(LzmaVarState));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#710: FILE: lib/lzmadecode.c:212:
+  int state = vs->State;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#711: FILE: lib/lzmadecode.c:213:
+  Byte previousByte;$

CHECK:CAMELCASE: Avoid CamelCase: <previousByte>
#711: FILE: lib/lzmadecode.c:213:
+  Byte previousByte;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#712: FILE: lib/lzmadecode.c:214:
+  UInt32 rep0 = vs->Reps[0], rep1 = vs->Reps[1], rep2 = vs->Reps[2], rep3 = vs->Reps[3];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#713: FILE: lib/lzmadecode.c:215:
+  UInt32 nowPos = 0;$

CHECK:CAMELCASE: Avoid CamelCase: <nowPos>
#713: FILE: lib/lzmadecode.c:215:
+  UInt32 nowPos = 0;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#714: FILE: lib/lzmadecode.c:216:
+  UInt32 posStateMask = (1 << (vs->pb)) - 1;$

CHECK:CAMELCASE: Avoid CamelCase: <posStateMask>
#714: FILE: lib/lzmadecode.c:216:
+  UInt32 posStateMask = (1 << (vs->pb)) - 1;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#715: FILE: lib/lzmadecode.c:217:
+  UInt32 literalPosMask = (1 << (vs->lp)) - 1;$

CHECK:CAMELCASE: Avoid CamelCase: <literalPosMask>
#715: FILE: lib/lzmadecode.c:217:
+  UInt32 literalPosMask = (1 << (vs->lp)) - 1;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#716: FILE: lib/lzmadecode.c:218:
+  int lc = vs->lc;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#717: FILE: lib/lzmadecode.c:219:
+  int len = vs->RemainLen;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#718: FILE: lib/lzmadecode.c:220:
+  UInt32 globalPos = vs->GlobalPos;$

CHECK:CAMELCASE: Avoid CamelCase: <globalPos>
#718: FILE: lib/lzmadecode.c:220:
+  UInt32 globalPos = vs->GlobalPos;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#720: FILE: lib/lzmadecode.c:222:
+  Byte *dictionary = vs->Dictionary;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#721: FILE: lib/lzmadecode.c:223:
+  UInt32 dictionarySize = vs->DictionarySize;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#722: FILE: lib/lzmadecode.c:224:
+  UInt32 dictionaryPos = vs->DictionaryPos;$

CHECK:CAMELCASE: Avoid CamelCase: <dictionaryPos>
#722: FILE: lib/lzmadecode.c:224:
+  UInt32 dictionaryPos = vs->DictionaryPos;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#724: FILE: lib/lzmadecode.c:226:
+  Byte tempDictionary[4];$

CHECK:CAMELCASE: Avoid CamelCase: <tempDictionary>
#724: FILE: lib/lzmadecode.c:226:
+  Byte tempDictionary[4];

WARNING:LINE_SPACING: Missing a blank line after declarations
#725: FILE: lib/lzmadecode.c:227:
+  Byte tempDictionary[4];
+  if (dictionarySize == 0)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#725: FILE: lib/lzmadecode.c:227:
+  if (dictionarySize == 0)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#725: FILE: lib/lzmadecode.c:227:
+  if (dictionarySize == 0)
+  {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#725: FILE: lib/lzmadecode.c:227:
+  if (dictionarySize == 0)
+  {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#726: FILE: lib/lzmadecode.c:228:
+  {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#727: FILE: lib/lzmadecode.c:229:
+    dictionary = tempDictionary;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#728: FILE: lib/lzmadecode.c:230:
+    dictionarySize = 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#729: FILE: lib/lzmadecode.c:231:
+    tempDictionary[0] = vs->TempDictionary[0];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#730: FILE: lib/lzmadecode.c:232:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#732: FILE: lib/lzmadecode.c:234:
+  if (len == -1)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#732: FILE: lib/lzmadecode.c:234:
+  if (len == -1)
+  {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#732: FILE: lib/lzmadecode.c:234:
+  if (len == -1)
+  {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#733: FILE: lib/lzmadecode.c:235:
+  {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#734: FILE: lib/lzmadecode.c:236:
+    *outSizeProcessed = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#735: FILE: lib/lzmadecode.c:237:
+    return LZMA_RESULT_OK;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#736: FILE: lib/lzmadecode.c:238:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#738: FILE: lib/lzmadecode.c:240:
+  while(len != 0 && nowPos < outSize)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#738: FILE: lib/lzmadecode.c:240:
+  while(len != 0 && nowPos < outSize)
+  {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#738: FILE: lib/lzmadecode.c:240:
+  while(len != 0 && nowPos < outSize)
+  {

ERROR:SPACING: space required before the open parenthesis '('
#738: FILE: lib/lzmadecode.c:240:
+  while(len != 0 && nowPos < outSize)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#739: FILE: lib/lzmadecode.c:241:
+  {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#740: FILE: lib/lzmadecode.c:242:
+    UInt32 pos = dictionaryPos - rep0;$

WARNING:LINE_SPACING: Missing a blank line after declarations
#741: FILE: lib/lzmadecode.c:243:
+    UInt32 pos = dictionaryPos - rep0;
+    if (pos >= dictionarySize)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#741: FILE: lib/lzmadecode.c:243:
+    if (pos >= dictionarySize)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 6)
#741: FILE: lib/lzmadecode.c:243:
+    if (pos >= dictionarySize)
+      pos += dictionarySize;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#742: FILE: lib/lzmadecode.c:244:
+      pos += dictionarySize;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#743: FILE: lib/lzmadecode.c:245:
+    outStream[nowPos++] = dictionary[dictionaryPos] = dictionary[pos];$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#743: FILE: lib/lzmadecode.c:245:
+    outStream[nowPos++] = dictionary[dictionaryPos] = dictionary[pos];

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#744: FILE: lib/lzmadecode.c:246:
+    if (++dictionaryPos == dictionarySize)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 6)
#744: FILE: lib/lzmadecode.c:246:
+    if (++dictionaryPos == dictionarySize)
+      dictionaryPos = 0;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#745: FILE: lib/lzmadecode.c:247:
+      dictionaryPos = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#746: FILE: lib/lzmadecode.c:248:
+    len--;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#747: FILE: lib/lzmadecode.c:249:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#748: FILE: lib/lzmadecode.c:250:
+  if (dictionaryPos == 0)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#748: FILE: lib/lzmadecode.c:250:
+  if (dictionaryPos == 0)
+    previousByte = dictionary[dictionarySize - 1];

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#749: FILE: lib/lzmadecode.c:251:
+    previousByte = dictionary[dictionarySize - 1];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#750: FILE: lib/lzmadecode.c:252:
+  else$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#750: FILE: lib/lzmadecode.c:252:
+  else
+    previousByte = dictionary[dictionaryPos - 1];

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#751: FILE: lib/lzmadecode.c:253:
+    previousByte = dictionary[dictionaryPos - 1];$

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#754: FILE: lib/lzmadecode.c:256:
+int LzmaDecode(

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#755: FILE: lib/lzmadecode.c:257:
+    Byte *buffer, UInt32 bufferSize,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#756: FILE: lib/lzmadecode.c:258:
+    int lc, int lp, int pb,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#758: FILE: lib/lzmadecode.c:260:
+    ILzmaInCallback *InCallback,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#760: FILE: lib/lzmadecode.c:262:
+    unsigned char *inStream, UInt32 inSize,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#762: FILE: lib/lzmadecode.c:264:
+    unsigned char *outStream, UInt32 outSize,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#763: FILE: lib/lzmadecode.c:265:
+    UInt32 *outSizeProcessed)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#765: FILE: lib/lzmadecode.c:267:
+  UInt32 numProbs = Literal + ((UInt32)LZMA_LIT_SIZE << (lc + lp));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#766: FILE: lib/lzmadecode.c:268:
+  CProb *p = (CProb *)buffer;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#768: FILE: lib/lzmadecode.c:270:
+  UInt32 i;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#769: FILE: lib/lzmadecode.c:271:
+  int state = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#770: FILE: lib/lzmadecode.c:272:
+  Byte previousByte = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#771: FILE: lib/lzmadecode.c:273:
+  UInt32 rep0 = 1, rep1 = 1, rep2 = 1, rep3 = 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#772: FILE: lib/lzmadecode.c:274:
+  UInt32 nowPos = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#773: FILE: lib/lzmadecode.c:275:
+  UInt32 posStateMask = (1 << pb) - 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#774: FILE: lib/lzmadecode.c:276:
+  UInt32 literalPosMask = (1 << lp) - 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#775: FILE: lib/lzmadecode.c:277:
+  int len = 0;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#776: FILE: lib/lzmadecode.c:278:
+  $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#776: FILE: lib/lzmadecode.c:278:
+  $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#777: FILE: lib/lzmadecode.c:279:
+  Byte *Buffer;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#778: FILE: lib/lzmadecode.c:280:
+  Byte *BufferLim;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#779: FILE: lib/lzmadecode.c:281:
+  UInt32 Range;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#780: FILE: lib/lzmadecode.c:282:
+  UInt32 Code;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#781: FILE: lib/lzmadecode.c:283:
+  $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#781: FILE: lib/lzmadecode.c:283:
+  $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#782: FILE: lib/lzmadecode.c:284:
+  if (bufferSize < numProbs * sizeof(CProb))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#782: FILE: lib/lzmadecode.c:284:
+  if (bufferSize < numProbs * sizeof(CProb))
+    return LZMA_RESULT_NOT_ENOUGH_MEM;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#783: FILE: lib/lzmadecode.c:285:
+    return LZMA_RESULT_NOT_ENOUGH_MEM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#784: FILE: lib/lzmadecode.c:286:
+  for (i = 0; i < numProbs; i++)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#784: FILE: lib/lzmadecode.c:286:
+  for (i = 0; i < numProbs; i++)
+    p[i] = kBitModelTotal >> 1;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#785: FILE: lib/lzmadecode.c:287:
+    p[i] = kBitModelTotal >> 1;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#786: FILE: lib/lzmadecode.c:288:
+  $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#786: FILE: lib/lzmadecode.c:288:
+  $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#787: FILE: lib/lzmadecode.c:289:
+  
+

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#789: FILE: lib/lzmadecode.c:291:
+  RC_INIT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#791: FILE: lib/lzmadecode.c:293:
+  RC_INIT(inStream, inSize);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#795: FILE: lib/lzmadecode.c:297:
+  *outSizeProcessed = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#796: FILE: lib/lzmadecode.c:298:
+  while(nowPos < outSize)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#796: FILE: lib/lzmadecode.c:298:
+  while(nowPos < outSize)
+  {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#796: FILE: lib/lzmadecode.c:298:
+  while(nowPos < outSize)
+  {

ERROR:SPACING: space required before the open parenthesis '('
#796: FILE: lib/lzmadecode.c:298:
+  while(nowPos < outSize)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#797: FILE: lib/lzmadecode.c:299:
+  {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#798: FILE: lib/lzmadecode.c:300:
+    CProb *prob;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#799: FILE: lib/lzmadecode.c:301:
+    UInt32 bound;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#800: FILE: lib/lzmadecode.c:302:
+    int posState = (int)($

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#800: FILE: lib/lzmadecode.c:302:
+    int posState = (int)(

CHECK:CAMELCASE: Avoid CamelCase: <posState>
#800: FILE: lib/lzmadecode.c:302:
+    int posState = (int)(

ERROR:TRAILING_WHITESPACE: trailing whitespace
#801: FILE: lib/lzmadecode.c:303:
+        (nowPos $

ERROR:CODE_INDENT: code indent should use tabs where possible
#801: FILE: lib/lzmadecode.c:303:
+        (nowPos $

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#801: FILE: lib/lzmadecode.c:303:
+        (nowPos $

ERROR:CODE_INDENT: code indent should use tabs where possible
#802: FILE: lib/lzmadecode.c:304:
+        #ifdef _LZMA_OUT_READ$

ERROR:CODE_INDENT: code indent should use tabs where possible
#803: FILE: lib/lzmadecode.c:305:
+        + globalPos$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#803: FILE: lib/lzmadecode.c:305:
+        + globalPos$

ERROR:CODE_INDENT: code indent should use tabs where possible
#804: FILE: lib/lzmadecode.c:306:
+        #endif$

ERROR:CODE_INDENT: code indent should use tabs where possible
#805: FILE: lib/lzmadecode.c:307:
+        )$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#805: FILE: lib/lzmadecode.c:307:
+        )$

ERROR:CODE_INDENT: code indent should use tabs where possible
#806: FILE: lib/lzmadecode.c:308:
+        & posStateMask);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#806: FILE: lib/lzmadecode.c:308:
+        & posStateMask);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#808: FILE: lib/lzmadecode.c:310:
+    prob = p + IsMatch + (state << kNumPosBitsMax) + posState;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#809: FILE: lib/lzmadecode.c:311:
+    IfBit0(prob)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#810: FILE: lib/lzmadecode.c:312:
+    {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#811: FILE: lib/lzmadecode.c:313:
+      int symbol = 1;$

WARNING:LINE_SPACING: Missing a blank line after declarations
#812: FILE: lib/lzmadecode.c:314:
+      int symbol = 1;
+      UpdateBit0(prob)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#812: FILE: lib/lzmadecode.c:314:
+      UpdateBit0(prob)$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#813: FILE: lib/lzmadecode.c:315:
+      prob = p + Literal + (LZMA_LIT_SIZE * $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#813: FILE: lib/lzmadecode.c:315:
+      prob = p + Literal + (LZMA_LIT_SIZE * $

ERROR:CODE_INDENT: code indent should use tabs where possible
#814: FILE: lib/lzmadecode.c:316:
+        ((($

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#814: FILE: lib/lzmadecode.c:316:
+        ((($

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#814: FILE: lib/lzmadecode.c:316:
+        (((

ERROR:TRAILING_WHITESPACE: trailing whitespace
#815: FILE: lib/lzmadecode.c:317:
+        (nowPos $

ERROR:CODE_INDENT: code indent should use tabs where possible
#815: FILE: lib/lzmadecode.c:317:
+        (nowPos $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#815: FILE: lib/lzmadecode.c:317:
+        (nowPos $

ERROR:CODE_INDENT: code indent should use tabs where possible
#816: FILE: lib/lzmadecode.c:318:
+        #ifdef _LZMA_OUT_READ$

ERROR:CODE_INDENT: code indent should use tabs where possible
#817: FILE: lib/lzmadecode.c:319:
+        + globalPos$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#817: FILE: lib/lzmadecode.c:319:
+        + globalPos$

ERROR:CODE_INDENT: code indent should use tabs where possible
#818: FILE: lib/lzmadecode.c:320:
+        #endif$

ERROR:CODE_INDENT: code indent should use tabs where possible
#819: FILE: lib/lzmadecode.c:321:
+        )$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#819: FILE: lib/lzmadecode.c:321:
+        )$

ERROR:CODE_INDENT: code indent should use tabs where possible
#820: FILE: lib/lzmadecode.c:322:
+        & literalPosMask) << lc) + (previousByte >> (8 - lc))));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#820: FILE: lib/lzmadecode.c:322:
+        & literalPosMask) << lc) + (previousByte >> (8 - lc))));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#822: FILE: lib/lzmadecode.c:324:
+      if (state >= kNumLitStates)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#822: FILE: lib/lzmadecode.c:324:
+      if (state >= kNumLitStates)
+      {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#823: FILE: lib/lzmadecode.c:325:
+      {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#824: FILE: lib/lzmadecode.c:326:
+        int matchByte;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#824: FILE: lib/lzmadecode.c:326:
+        int matchByte;$

CHECK:CAMELCASE: Avoid CamelCase: <matchByte>
#824: FILE: lib/lzmadecode.c:326:
+        int matchByte;

ERROR:CODE_INDENT: code indent should use tabs where possible
#825: FILE: lib/lzmadecode.c:327:
+        #ifdef _LZMA_OUT_READ$

ERROR:CODE_INDENT: code indent should use tabs where possible
#826: FILE: lib/lzmadecode.c:328:
+        UInt32 pos = dictionaryPos - rep0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#826: FILE: lib/lzmadecode.c:328:
+        UInt32 pos = dictionaryPos - rep0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#827: FILE: lib/lzmadecode.c:329:
+        if (pos >= dictionarySize)$

WARNING:LINE_SPACING: Missing a blank line after declarations
#827: FILE: lib/lzmadecode.c:329:
+        UInt32 pos = dictionaryPos - rep0;
+        if (pos >= dictionarySize)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#827: FILE: lib/lzmadecode.c:329:
+        if (pos >= dictionarySize)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#827: FILE: lib/lzmadecode.c:329:
+        if (pos >= dictionarySize)
+          pos += dictionarySize;

ERROR:CODE_INDENT: code indent should use tabs where possible
#828: FILE: lib/lzmadecode.c:330:
+          pos += dictionarySize;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#828: FILE: lib/lzmadecode.c:330:
+          pos += dictionarySize;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#829: FILE: lib/lzmadecode.c:331:
+        matchByte = dictionary[pos];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#829: FILE: lib/lzmadecode.c:331:
+        matchByte = dictionary[pos];$

ERROR:CODE_INDENT: code indent should use tabs where possible
#830: FILE: lib/lzmadecode.c:332:
+        #else$

ERROR:CODE_INDENT: code indent should use tabs where possible
#831: FILE: lib/lzmadecode.c:333:
+        matchByte = outStream[nowPos - rep0];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#831: FILE: lib/lzmadecode.c:333:
+        matchByte = outStream[nowPos - rep0];$

ERROR:CODE_INDENT: code indent should use tabs where possible
#832: FILE: lib/lzmadecode.c:334:
+        #endif$

ERROR:CODE_INDENT: code indent should use tabs where possible
#833: FILE: lib/lzmadecode.c:335:
+        do$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#833: FILE: lib/lzmadecode.c:335:
+        do$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#833: FILE: lib/lzmadecode.c:335:
+        do
+        {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#833: FILE: lib/lzmadecode.c:335:
+        do
+        {

ERROR:CODE_INDENT: code indent should use tabs where possible
#834: FILE: lib/lzmadecode.c:336:
+        {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#834: FILE: lib/lzmadecode.c:336:
+        {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#835: FILE: lib/lzmadecode.c:337:
+          int bit;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#835: FILE: lib/lzmadecode.c:337:
+          int bit;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#836: FILE: lib/lzmadecode.c:338:
+          CProb *probLit;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#836: FILE: lib/lzmadecode.c:338:
+          CProb *probLit;$

CHECK:CAMELCASE: Avoid CamelCase: <probLit>
#836: FILE: lib/lzmadecode.c:338:
+          CProb *probLit;

ERROR:CODE_INDENT: code indent should use tabs where possible
#837: FILE: lib/lzmadecode.c:339:
+          matchByte <<= 1;$

WARNING:LINE_SPACING: Missing a blank line after declarations
#837: FILE: lib/lzmadecode.c:339:
+          CProb *probLit;
+          matchByte <<= 1;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#837: FILE: lib/lzmadecode.c:339:
+          matchByte <<= 1;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#838: FILE: lib/lzmadecode.c:340:
+          bit = (matchByte & 0x100);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#838: FILE: lib/lzmadecode.c:340:
+          bit = (matchByte & 0x100);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#839: FILE: lib/lzmadecode.c:341:
+          probLit = prob + 0x100 + bit + symbol;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#839: FILE: lib/lzmadecode.c:341:
+          probLit = prob + 0x100 + bit + symbol;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#840: FILE: lib/lzmadecode.c:342:
+          RC_GET_BIT2(probLit, symbol, if (bit != 0) break, if (bit == 0) break)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#840: FILE: lib/lzmadecode.c:342:
+          RC_GET_BIT2(probLit, symbol, if (bit != 0) break, if (bit == 0) break)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 8)
#840: FILE: lib/lzmadecode.c:342:
+          RC_GET_BIT2(probLit, symbol, if (bit != 0) break, if (bit == 0) break)
+        }

ERROR:CODE_INDENT: code indent should use tabs where possible
#841: FILE: lib/lzmadecode.c:343:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#841: FILE: lib/lzmadecode.c:343:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#842: FILE: lib/lzmadecode.c:344:
+        while (symbol < 0x100);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#842: FILE: lib/lzmadecode.c:344:
+        while (symbol < 0x100);$

ERROR:WHILE_AFTER_BRACE: while should follow close brace '}'
#842: FILE: lib/lzmadecode.c:344:
+        }
+        while (symbol < 0x100);

while should follow the closing bracket on the same line::

  do {
          ...
  } while(something);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#843: FILE: lib/lzmadecode.c:345:
+      }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#844: FILE: lib/lzmadecode.c:346:
+      while (symbol < 0x100)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#844: FILE: lib/lzmadecode.c:346:
+      while (symbol < 0x100)
+      {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#845: FILE: lib/lzmadecode.c:347:
+      {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#846: FILE: lib/lzmadecode.c:348:
+        CProb *probLit = prob + symbol;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#846: FILE: lib/lzmadecode.c:348:
+        CProb *probLit = prob + symbol;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#847: FILE: lib/lzmadecode.c:349:
+        RC_GET_BIT(probLit, symbol)$

WARNING:LINE_SPACING: Missing a blank line after declarations
#847: FILE: lib/lzmadecode.c:349:
+        CProb *probLit = prob + symbol;
+        RC_GET_BIT(probLit, symbol)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#847: FILE: lib/lzmadecode.c:349:
+        RC_GET_BIT(probLit, symbol)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#848: FILE: lib/lzmadecode.c:350:
+      }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#849: FILE: lib/lzmadecode.c:351:
+      previousByte = (Byte)symbol;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#851: FILE: lib/lzmadecode.c:353:
+      outStream[nowPos++] = previousByte;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#853: FILE: lib/lzmadecode.c:355:
+      dictionary[dictionaryPos] = previousByte;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#854: FILE: lib/lzmadecode.c:356:
+      if (++dictionaryPos == dictionarySize)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#855: FILE: lib/lzmadecode.c:357:
+        dictionaryPos = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#855: FILE: lib/lzmadecode.c:357:
+        dictionaryPos = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#857: FILE: lib/lzmadecode.c:359:
+      if (state < 4) state = 0;$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#857: FILE: lib/lzmadecode.c:359:
+      if (state < 4) state = 0;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#858: FILE: lib/lzmadecode.c:360:
+      else if (state < 10) state -= 3;$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#858: FILE: lib/lzmadecode.c:360:
+      else if (state < 10) state -= 3;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#859: FILE: lib/lzmadecode.c:361:
+      else state -= 6;$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#859: FILE: lib/lzmadecode.c:361:
+      else state -= 6;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#860: FILE: lib/lzmadecode.c:362:
+    }$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#861: FILE: lib/lzmadecode.c:363:
+    else             $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#861: FILE: lib/lzmadecode.c:363:
+    else             $

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#861: FILE: lib/lzmadecode.c:363:
+    else             
+    {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 6)
#861: FILE: lib/lzmadecode.c:363:
+    else             
+    {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#861: FILE: lib/lzmadecode.c:363:
+    }
+    else             

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#862: FILE: lib/lzmadecode.c:364:
+    {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#863: FILE: lib/lzmadecode.c:365:
+      UpdateBit1(prob);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#864: FILE: lib/lzmadecode.c:366:
+      prob = p + IsRep + state;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#865: FILE: lib/lzmadecode.c:367:
+      IfBit0(prob)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#866: FILE: lib/lzmadecode.c:368:
+      {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#867: FILE: lib/lzmadecode.c:369:
+        UpdateBit0(prob);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#867: FILE: lib/lzmadecode.c:369:
+        UpdateBit0(prob);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#868: FILE: lib/lzmadecode.c:370:
+        rep3 = rep2;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#868: FILE: lib/lzmadecode.c:370:
+        rep3 = rep2;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#869: FILE: lib/lzmadecode.c:371:
+        rep2 = rep1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#869: FILE: lib/lzmadecode.c:371:
+        rep2 = rep1;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#870: FILE: lib/lzmadecode.c:372:
+        rep1 = rep0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#870: FILE: lib/lzmadecode.c:372:
+        rep1 = rep0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#871: FILE: lib/lzmadecode.c:373:
+        state = state < kNumLitStates ? 0 : 3;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#871: FILE: lib/lzmadecode.c:373:
+        state = state < kNumLitStates ? 0 : 3;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#872: FILE: lib/lzmadecode.c:374:
+        prob = p + LenCoder;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#872: FILE: lib/lzmadecode.c:374:
+        prob = p + LenCoder;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#873: FILE: lib/lzmadecode.c:375:
+      }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#874: FILE: lib/lzmadecode.c:376:
+      else$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#874: FILE: lib/lzmadecode.c:376:
+      else
+      {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#874: FILE: lib/lzmadecode.c:376:
+      }
+      else

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#875: FILE: lib/lzmadecode.c:377:
+      {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#876: FILE: lib/lzmadecode.c:378:
+        UpdateBit1(prob);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#876: FILE: lib/lzmadecode.c:378:
+        UpdateBit1(prob);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#877: FILE: lib/lzmadecode.c:379:
+        prob = p + IsRepG0 + state;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#877: FILE: lib/lzmadecode.c:379:
+        prob = p + IsRepG0 + state;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#878: FILE: lib/lzmadecode.c:380:
+        IfBit0(prob)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#878: FILE: lib/lzmadecode.c:380:
+        IfBit0(prob)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#879: FILE: lib/lzmadecode.c:381:
+        {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#879: FILE: lib/lzmadecode.c:381:
+        {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#880: FILE: lib/lzmadecode.c:382:
+          UpdateBit0(prob);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#880: FILE: lib/lzmadecode.c:382:
+          UpdateBit0(prob);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#881: FILE: lib/lzmadecode.c:383:
+          prob = p + IsRep0Long + (state << kNumPosBitsMax) + posState;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#881: FILE: lib/lzmadecode.c:383:
+          prob = p + IsRep0Long + (state << kNumPosBitsMax) + posState;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#882: FILE: lib/lzmadecode.c:384:
+          IfBit0(prob)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#882: FILE: lib/lzmadecode.c:384:
+          IfBit0(prob)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#883: FILE: lib/lzmadecode.c:385:
+          {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#883: FILE: lib/lzmadecode.c:385:
+          {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#884: FILE: lib/lzmadecode.c:386:
+            #ifdef _LZMA_OUT_READ$

ERROR:CODE_INDENT: code indent should use tabs where possible
#885: FILE: lib/lzmadecode.c:387:
+            UInt32 pos;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#885: FILE: lib/lzmadecode.c:387:
+            UInt32 pos;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#886: FILE: lib/lzmadecode.c:388:
+            #endif$

ERROR:CODE_INDENT: code indent should use tabs where possible
#887: FILE: lib/lzmadecode.c:389:
+            UpdateBit0(prob);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#887: FILE: lib/lzmadecode.c:389:
+            UpdateBit0(prob);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#888: FILE: lib/lzmadecode.c:390:
+            if (nowPos $

ERROR:CODE_INDENT: code indent should use tabs where possible
#888: FILE: lib/lzmadecode.c:390:
+            if (nowPos $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#888: FILE: lib/lzmadecode.c:390:
+            if (nowPos $

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (12, 14)
#888: FILE: lib/lzmadecode.c:390:
+            if (nowPos 
[...]
+              return LZMA_RESULT_DATA_ERROR;

ERROR:CODE_INDENT: code indent should use tabs where possible
#889: FILE: lib/lzmadecode.c:391:
+                #ifdef _LZMA_OUT_READ$

ERROR:CODE_INDENT: code indent should use tabs where possible
#890: FILE: lib/lzmadecode.c:392:
+                + globalPos$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#890: FILE: lib/lzmadecode.c:392:
+                + globalPos$

ERROR:CODE_INDENT: code indent should use tabs where possible
#891: FILE: lib/lzmadecode.c:393:
+                #endif$

ERROR:CODE_INDENT: code indent should use tabs where possible
#892: FILE: lib/lzmadecode.c:394:
+                == 0)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#892: FILE: lib/lzmadecode.c:394:
+                == 0)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#893: FILE: lib/lzmadecode.c:395:
+              return LZMA_RESULT_DATA_ERROR;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#893: FILE: lib/lzmadecode.c:395:
+              return LZMA_RESULT_DATA_ERROR;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#894: FILE: lib/lzmadecode.c:396:
+            state = state < kNumLitStates ? 9 : 11;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#894: FILE: lib/lzmadecode.c:396:
+            state = state < kNumLitStates ? 9 : 11;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#895: FILE: lib/lzmadecode.c:397:
+            #ifdef _LZMA_OUT_READ$

ERROR:CODE_INDENT: code indent should use tabs where possible
#896: FILE: lib/lzmadecode.c:398:
+            pos = dictionaryPos - rep0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#896: FILE: lib/lzmadecode.c:398:
+            pos = dictionaryPos - rep0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#897: FILE: lib/lzmadecode.c:399:
+            if (pos >= dictionarySize)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#897: FILE: lib/lzmadecode.c:399:
+            if (pos >= dictionarySize)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (12, 14)
#897: FILE: lib/lzmadecode.c:399:
+            if (pos >= dictionarySize)
+              pos += dictionarySize;

ERROR:CODE_INDENT: code indent should use tabs where possible
#898: FILE: lib/lzmadecode.c:400:
+              pos += dictionarySize;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#898: FILE: lib/lzmadecode.c:400:
+              pos += dictionarySize;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#899: FILE: lib/lzmadecode.c:401:
+            previousByte = dictionary[pos];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#899: FILE: lib/lzmadecode.c:401:
+            previousByte = dictionary[pos];$

ERROR:CODE_INDENT: code indent should use tabs where possible
#900: FILE: lib/lzmadecode.c:402:
+            dictionary[dictionaryPos] = previousByte;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#900: FILE: lib/lzmadecode.c:402:
+            dictionary[dictionaryPos] = previousByte;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#901: FILE: lib/lzmadecode.c:403:
+            if (++dictionaryPos == dictionarySize)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#901: FILE: lib/lzmadecode.c:403:
+            if (++dictionaryPos == dictionarySize)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (12, 14)
#901: FILE: lib/lzmadecode.c:403:
+            if (++dictionaryPos == dictionarySize)
+              dictionaryPos = 0;

ERROR:CODE_INDENT: code indent should use tabs where possible
#902: FILE: lib/lzmadecode.c:404:
+              dictionaryPos = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#902: FILE: lib/lzmadecode.c:404:
+              dictionaryPos = 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#903: FILE: lib/lzmadecode.c:405:
+            #else$

ERROR:CODE_INDENT: code indent should use tabs where possible
#904: FILE: lib/lzmadecode.c:406:
+            previousByte = outStream[nowPos - rep0];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#904: FILE: lib/lzmadecode.c:406:
+            previousByte = outStream[nowPos - rep0];$

ERROR:CODE_INDENT: code indent should use tabs where possible
#905: FILE: lib/lzmadecode.c:407:
+            #endif$

ERROR:CODE_INDENT: code indent should use tabs where possible
#906: FILE: lib/lzmadecode.c:408:
+            outStream[nowPos++] = previousByte;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#906: FILE: lib/lzmadecode.c:408:
+            outStream[nowPos++] = previousByte;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#907: FILE: lib/lzmadecode.c:409:
+            continue;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#907: FILE: lib/lzmadecode.c:409:
+            continue;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#908: FILE: lib/lzmadecode.c:410:
+          }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#908: FILE: lib/lzmadecode.c:410:
+          }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#909: FILE: lib/lzmadecode.c:411:
+          else$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#909: FILE: lib/lzmadecode.c:411:
+          else$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#909: FILE: lib/lzmadecode.c:411:
+          else
+          {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 12)
#909: FILE: lib/lzmadecode.c:411:
+          else
+          {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#909: FILE: lib/lzmadecode.c:411:
+          }
+          else

ERROR:CODE_INDENT: code indent should use tabs where possible
#910: FILE: lib/lzmadecode.c:412:
+          {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#910: FILE: lib/lzmadecode.c:412:
+          {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#911: FILE: lib/lzmadecode.c:413:
+            UpdateBit1(prob);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#911: FILE: lib/lzmadecode.c:413:
+            UpdateBit1(prob);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#912: FILE: lib/lzmadecode.c:414:
+          }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#912: FILE: lib/lzmadecode.c:414:
+          }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#913: FILE: lib/lzmadecode.c:415:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#913: FILE: lib/lzmadecode.c:415:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#914: FILE: lib/lzmadecode.c:416:
+        else$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#914: FILE: lib/lzmadecode.c:416:
+        else$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#914: FILE: lib/lzmadecode.c:416:
+        else
+        {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#914: FILE: lib/lzmadecode.c:416:
+        else
+        {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#914: FILE: lib/lzmadecode.c:416:
+        }
+        else

ERROR:CODE_INDENT: code indent should use tabs where possible
#915: FILE: lib/lzmadecode.c:417:
+        {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#915: FILE: lib/lzmadecode.c:417:
+        {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#916: FILE: lib/lzmadecode.c:418:
+          UInt32 distance;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#916: FILE: lib/lzmadecode.c:418:
+          UInt32 distance;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#917: FILE: lib/lzmadecode.c:419:
+          UpdateBit1(prob);$

WARNING:LINE_SPACING: Missing a blank line after declarations
#917: FILE: lib/lzmadecode.c:419:
+          UInt32 distance;
+          UpdateBit1(prob);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#917: FILE: lib/lzmadecode.c:419:
+          UpdateBit1(prob);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#918: FILE: lib/lzmadecode.c:420:
+          prob = p + IsRepG1 + state;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#918: FILE: lib/lzmadecode.c:420:
+          prob = p + IsRepG1 + state;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#919: FILE: lib/lzmadecode.c:421:
+          IfBit0(prob)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#919: FILE: lib/lzmadecode.c:421:
+          IfBit0(prob)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#920: FILE: lib/lzmadecode.c:422:
+          {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#920: FILE: lib/lzmadecode.c:422:
+          {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#921: FILE: lib/lzmadecode.c:423:
+            UpdateBit0(prob);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#921: FILE: lib/lzmadecode.c:423:
+            UpdateBit0(prob);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#922: FILE: lib/lzmadecode.c:424:
+            distance = rep1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#922: FILE: lib/lzmadecode.c:424:
+            distance = rep1;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#923: FILE: lib/lzmadecode.c:425:
+          }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#923: FILE: lib/lzmadecode.c:425:
+          }$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#924: FILE: lib/lzmadecode.c:426:
+          else $

ERROR:CODE_INDENT: code indent should use tabs where possible
#924: FILE: lib/lzmadecode.c:426:
+          else $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#924: FILE: lib/lzmadecode.c:426:
+          else $

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#924: FILE: lib/lzmadecode.c:426:
+          else 
+          {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 12)
#924: FILE: lib/lzmadecode.c:426:
+          else 
+          {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#924: FILE: lib/lzmadecode.c:426:
+          }
+          else 

ERROR:CODE_INDENT: code indent should use tabs where possible
#925: FILE: lib/lzmadecode.c:427:
+          {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#925: FILE: lib/lzmadecode.c:427:
+          {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#926: FILE: lib/lzmadecode.c:428:
+            UpdateBit1(prob);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#926: FILE: lib/lzmadecode.c:428:
+            UpdateBit1(prob);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#927: FILE: lib/lzmadecode.c:429:
+            prob = p + IsRepG2 + state;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#927: FILE: lib/lzmadecode.c:429:
+            prob = p + IsRepG2 + state;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#928: FILE: lib/lzmadecode.c:430:
+            IfBit0(prob)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#928: FILE: lib/lzmadecode.c:430:
+            IfBit0(prob)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#929: FILE: lib/lzmadecode.c:431:
+            {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#929: FILE: lib/lzmadecode.c:431:
+            {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#930: FILE: lib/lzmadecode.c:432:
+              UpdateBit0(prob);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#930: FILE: lib/lzmadecode.c:432:
+              UpdateBit0(prob);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#931: FILE: lib/lzmadecode.c:433:
+              distance = rep2;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#931: FILE: lib/lzmadecode.c:433:
+              distance = rep2;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#932: FILE: lib/lzmadecode.c:434:
+            }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#932: FILE: lib/lzmadecode.c:434:
+            }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#933: FILE: lib/lzmadecode.c:435:
+            else$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#933: FILE: lib/lzmadecode.c:435:
+            else$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#933: FILE: lib/lzmadecode.c:435:
+            else
+            {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (12, 14)
#933: FILE: lib/lzmadecode.c:435:
+            else
+            {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#933: FILE: lib/lzmadecode.c:435:
+            }
+            else

ERROR:CODE_INDENT: code indent should use tabs where possible
#934: FILE: lib/lzmadecode.c:436:
+            {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#934: FILE: lib/lzmadecode.c:436:
+            {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#935: FILE: lib/lzmadecode.c:437:
+              UpdateBit1(prob);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#935: FILE: lib/lzmadecode.c:437:
+              UpdateBit1(prob);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#936: FILE: lib/lzmadecode.c:438:
+              distance = rep3;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#936: FILE: lib/lzmadecode.c:438:
+              distance = rep3;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#937: FILE: lib/lzmadecode.c:439:
+              rep3 = rep2;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#937: FILE: lib/lzmadecode.c:439:
+              rep3 = rep2;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#938: FILE: lib/lzmadecode.c:440:
+            }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#938: FILE: lib/lzmadecode.c:440:
+            }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#939: FILE: lib/lzmadecode.c:441:
+            rep2 = rep1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#939: FILE: lib/lzmadecode.c:441:
+            rep2 = rep1;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#940: FILE: lib/lzmadecode.c:442:
+          }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#940: FILE: lib/lzmadecode.c:442:
+          }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#941: FILE: lib/lzmadecode.c:443:
+          rep1 = rep0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#941: FILE: lib/lzmadecode.c:443:
+          rep1 = rep0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#942: FILE: lib/lzmadecode.c:444:
+          rep0 = distance;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#942: FILE: lib/lzmadecode.c:444:
+          rep0 = distance;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#943: FILE: lib/lzmadecode.c:445:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#943: FILE: lib/lzmadecode.c:445:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#944: FILE: lib/lzmadecode.c:446:
+        state = state < kNumLitStates ? 8 : 11;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#944: FILE: lib/lzmadecode.c:446:
+        state = state < kNumLitStates ? 8 : 11;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#945: FILE: lib/lzmadecode.c:447:
+        prob = p + RepLenCoder;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#945: FILE: lib/lzmadecode.c:447:
+        prob = p + RepLenCoder;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#946: FILE: lib/lzmadecode.c:448:
+      }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#947: FILE: lib/lzmadecode.c:449:
+      {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#948: FILE: lib/lzmadecode.c:450:
+        int numBits, offset;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#948: FILE: lib/lzmadecode.c:450:
+        int numBits, offset;$

CHECK:CAMELCASE: Avoid CamelCase: <numBits>
#948: FILE: lib/lzmadecode.c:450:
+        int numBits, offset;

ERROR:CODE_INDENT: code indent should use tabs where possible
#949: FILE: lib/lzmadecode.c:451:
+        CProb *probLen = prob + LenChoice;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#949: FILE: lib/lzmadecode.c:451:
+        CProb *probLen = prob + LenChoice;$

CHECK:CAMELCASE: Avoid CamelCase: <probLen>
#949: FILE: lib/lzmadecode.c:451:
+        CProb *probLen = prob + LenChoice;

ERROR:CODE_INDENT: code indent should use tabs where possible
#950: FILE: lib/lzmadecode.c:452:
+        IfBit0(probLen)$

WARNING:LINE_SPACING: Missing a blank line after declarations
#950: FILE: lib/lzmadecode.c:452:
+        CProb *probLen = prob + LenChoice;
+        IfBit0(probLen)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#950: FILE: lib/lzmadecode.c:452:
+        IfBit0(probLen)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#951: FILE: lib/lzmadecode.c:453:
+        {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#951: FILE: lib/lzmadecode.c:453:
+        {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#952: FILE: lib/lzmadecode.c:454:
+          UpdateBit0(probLen);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#952: FILE: lib/lzmadecode.c:454:
+          UpdateBit0(probLen);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#953: FILE: lib/lzmadecode.c:455:
+          probLen = prob + LenLow + (posState << kLenNumLowBits);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#953: FILE: lib/lzmadecode.c:455:
+          probLen = prob + LenLow + (posState << kLenNumLowBits);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#954: FILE: lib/lzmadecode.c:456:
+          offset = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#954: FILE: lib/lzmadecode.c:456:
+          offset = 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#955: FILE: lib/lzmadecode.c:457:
+          numBits = kLenNumLowBits;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#955: FILE: lib/lzmadecode.c:457:
+          numBits = kLenNumLowBits;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#956: FILE: lib/lzmadecode.c:458:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#956: FILE: lib/lzmadecode.c:458:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#957: FILE: lib/lzmadecode.c:459:
+        else$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#957: FILE: lib/lzmadecode.c:459:
+        else$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#957: FILE: lib/lzmadecode.c:459:
+        else
+        {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#957: FILE: lib/lzmadecode.c:459:
+        else
+        {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#957: FILE: lib/lzmadecode.c:459:
+        }
+        else

ERROR:CODE_INDENT: code indent should use tabs where possible
#958: FILE: lib/lzmadecode.c:460:
+        {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#958: FILE: lib/lzmadecode.c:460:
+        {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#959: FILE: lib/lzmadecode.c:461:
+          UpdateBit1(probLen);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#959: FILE: lib/lzmadecode.c:461:
+          UpdateBit1(probLen);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#960: FILE: lib/lzmadecode.c:462:
+          probLen = prob + LenChoice2;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#960: FILE: lib/lzmadecode.c:462:
+          probLen = prob + LenChoice2;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#961: FILE: lib/lzmadecode.c:463:
+          IfBit0(probLen)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#961: FILE: lib/lzmadecode.c:463:
+          IfBit0(probLen)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#962: FILE: lib/lzmadecode.c:464:
+          {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#962: FILE: lib/lzmadecode.c:464:
+          {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#963: FILE: lib/lzmadecode.c:465:
+            UpdateBit0(probLen);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#963: FILE: lib/lzmadecode.c:465:
+            UpdateBit0(probLen);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#964: FILE: lib/lzmadecode.c:466:
+            probLen = prob + LenMid + (posState << kLenNumMidBits);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#964: FILE: lib/lzmadecode.c:466:
+            probLen = prob + LenMid + (posState << kLenNumMidBits);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#965: FILE: lib/lzmadecode.c:467:
+            offset = kLenNumLowSymbols;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#965: FILE: lib/lzmadecode.c:467:
+            offset = kLenNumLowSymbols;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#966: FILE: lib/lzmadecode.c:468:
+            numBits = kLenNumMidBits;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#966: FILE: lib/lzmadecode.c:468:
+            numBits = kLenNumMidBits;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#967: FILE: lib/lzmadecode.c:469:
+          }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#967: FILE: lib/lzmadecode.c:469:
+          }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#968: FILE: lib/lzmadecode.c:470:
+          else$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#968: FILE: lib/lzmadecode.c:470:
+          else$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#968: FILE: lib/lzmadecode.c:470:
+          else
+          {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 12)
#968: FILE: lib/lzmadecode.c:470:
+          else
+          {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#968: FILE: lib/lzmadecode.c:470:
+          }
+          else

ERROR:CODE_INDENT: code indent should use tabs where possible
#969: FILE: lib/lzmadecode.c:471:
+          {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#969: FILE: lib/lzmadecode.c:471:
+          {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#970: FILE: lib/lzmadecode.c:472:
+            UpdateBit1(probLen);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#970: FILE: lib/lzmadecode.c:472:
+            UpdateBit1(probLen);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#971: FILE: lib/lzmadecode.c:473:
+            probLen = prob + LenHigh;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#971: FILE: lib/lzmadecode.c:473:
+            probLen = prob + LenHigh;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#972: FILE: lib/lzmadecode.c:474:
+            offset = kLenNumLowSymbols + kLenNumMidSymbols;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#972: FILE: lib/lzmadecode.c:474:
+            offset = kLenNumLowSymbols + kLenNumMidSymbols;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#973: FILE: lib/lzmadecode.c:475:
+            numBits = kLenNumHighBits;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#973: FILE: lib/lzmadecode.c:475:
+            numBits = kLenNumHighBits;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#974: FILE: lib/lzmadecode.c:476:
+          }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#974: FILE: lib/lzmadecode.c:476:
+          }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#975: FILE: lib/lzmadecode.c:477:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#975: FILE: lib/lzmadecode.c:477:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#976: FILE: lib/lzmadecode.c:478:
+        RangeDecoderBitTreeDecode(probLen, numBits, len);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#976: FILE: lib/lzmadecode.c:478:
+        RangeDecoderBitTreeDecode(probLen, numBits, len);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#977: FILE: lib/lzmadecode.c:479:
+        len += offset;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#977: FILE: lib/lzmadecode.c:479:
+        len += offset;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#978: FILE: lib/lzmadecode.c:480:
+      }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#980: FILE: lib/lzmadecode.c:482:
+      if (state < 4)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#980: FILE: lib/lzmadecode.c:482:
+      if (state < 4)
+      {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#981: FILE: lib/lzmadecode.c:483:
+      {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#982: FILE: lib/lzmadecode.c:484:
+        int posSlot;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#982: FILE: lib/lzmadecode.c:484:
+        int posSlot;$

CHECK:CAMELCASE: Avoid CamelCase: <posSlot>
#982: FILE: lib/lzmadecode.c:484:
+        int posSlot;

ERROR:CODE_INDENT: code indent should use tabs where possible
#983: FILE: lib/lzmadecode.c:485:
+        state += kNumLitStates;$

WARNING:LINE_SPACING: Missing a blank line after declarations
#983: FILE: lib/lzmadecode.c:485:
+        int posSlot;
+        state += kNumLitStates;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#983: FILE: lib/lzmadecode.c:485:
+        state += kNumLitStates;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#984: FILE: lib/lzmadecode.c:486:
+        prob = p + PosSlot +$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#984: FILE: lib/lzmadecode.c:486:
+        prob = p + PosSlot +$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#985: FILE: lib/lzmadecode.c:487:
+            ((len < kNumLenToPosStates ? len : kNumLenToPosStates - 1) << $

ERROR:CODE_INDENT: code indent should use tabs where possible
#985: FILE: lib/lzmadecode.c:487:
+            ((len < kNumLenToPosStates ? len : kNumLenToPosStates - 1) << $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#985: FILE: lib/lzmadecode.c:487:
+            ((len < kNumLenToPosStates ? len : kNumLenToPosStates - 1) << $

ERROR:CODE_INDENT: code indent should use tabs where possible
#986: FILE: lib/lzmadecode.c:488:
+            kNumPosSlotBits);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#986: FILE: lib/lzmadecode.c:488:
+            kNumPosSlotBits);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#987: FILE: lib/lzmadecode.c:489:
+        RangeDecoderBitTreeDecode(prob, kNumPosSlotBits, posSlot);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#987: FILE: lib/lzmadecode.c:489:
+        RangeDecoderBitTreeDecode(prob, kNumPosSlotBits, posSlot);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#988: FILE: lib/lzmadecode.c:490:
+        if (posSlot >= kStartPosModelIndex)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#988: FILE: lib/lzmadecode.c:490:
+        if (posSlot >= kStartPosModelIndex)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#988: FILE: lib/lzmadecode.c:490:
+        if (posSlot >= kStartPosModelIndex)
+        {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#988: FILE: lib/lzmadecode.c:490:
+        if (posSlot >= kStartPosModelIndex)
+        {

ERROR:CODE_INDENT: code indent should use tabs where possible
#989: FILE: lib/lzmadecode.c:491:
+        {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#989: FILE: lib/lzmadecode.c:491:
+        {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#990: FILE: lib/lzmadecode.c:492:
+          int numDirectBits = ((posSlot >> 1) - 1);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#990: FILE: lib/lzmadecode.c:492:
+          int numDirectBits = ((posSlot >> 1) - 1);$

CHECK:CAMELCASE: Avoid CamelCase: <numDirectBits>
#990: FILE: lib/lzmadecode.c:492:
+          int numDirectBits = ((posSlot >> 1) - 1);

ERROR:CODE_INDENT: code indent should use tabs where possible
#991: FILE: lib/lzmadecode.c:493:
+          rep0 = (2 | ((UInt32)posSlot & 1));$

WARNING:LINE_SPACING: Missing a blank line after declarations
#991: FILE: lib/lzmadecode.c:493:
+          int numDirectBits = ((posSlot >> 1) - 1);
+          rep0 = (2 | ((UInt32)posSlot & 1));

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#991: FILE: lib/lzmadecode.c:493:
+          rep0 = (2 | ((UInt32)posSlot & 1));$

ERROR:CODE_INDENT: code indent should use tabs where possible
#992: FILE: lib/lzmadecode.c:494:
+          if (posSlot < kEndPosModelIndex)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#992: FILE: lib/lzmadecode.c:494:
+          if (posSlot < kEndPosModelIndex)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#992: FILE: lib/lzmadecode.c:494:
+          if (posSlot < kEndPosModelIndex)
+          {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 12)
#992: FILE: lib/lzmadecode.c:494:
+          if (posSlot < kEndPosModelIndex)
+          {

ERROR:CODE_INDENT: code indent should use tabs where possible
#993: FILE: lib/lzmadecode.c:495:
+          {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#993: FILE: lib/lzmadecode.c:495:
+          {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#994: FILE: lib/lzmadecode.c:496:
+            rep0 <<= numDirectBits;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#994: FILE: lib/lzmadecode.c:496:
+            rep0 <<= numDirectBits;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#995: FILE: lib/lzmadecode.c:497:
+            prob = p + SpecPos + rep0 - posSlot - 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#995: FILE: lib/lzmadecode.c:497:
+            prob = p + SpecPos + rep0 - posSlot - 1;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#996: FILE: lib/lzmadecode.c:498:
+          }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#996: FILE: lib/lzmadecode.c:498:
+          }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#997: FILE: lib/lzmadecode.c:499:
+          else$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#997: FILE: lib/lzmadecode.c:499:
+          else$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#997: FILE: lib/lzmadecode.c:499:
+          else
+          {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 12)
#997: FILE: lib/lzmadecode.c:499:
+          else
+          {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#997: FILE: lib/lzmadecode.c:499:
+          }
+          else

ERROR:CODE_INDENT: code indent should use tabs where possible
#998: FILE: lib/lzmadecode.c:500:
+          {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#998: FILE: lib/lzmadecode.c:500:
+          {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#999: FILE: lib/lzmadecode.c:501:
+            numDirectBits -= kNumAlignBits;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#999: FILE: lib/lzmadecode.c:501:
+            numDirectBits -= kNumAlignBits;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1000: FILE: lib/lzmadecode.c:502:
+            do$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1000: FILE: lib/lzmadecode.c:502:
+            do$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1000: FILE: lib/lzmadecode.c:502:
+            do
+            {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (12, 14)
#1000: FILE: lib/lzmadecode.c:502:
+            do
+            {

ERROR:CODE_INDENT: code indent should use tabs where possible
#1001: FILE: lib/lzmadecode.c:503:
+            {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1001: FILE: lib/lzmadecode.c:503:
+            {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1002: FILE: lib/lzmadecode.c:504:
+              RC_NORMALIZE$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1002: FILE: lib/lzmadecode.c:504:
+              RC_NORMALIZE$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1003: FILE: lib/lzmadecode.c:505:
+              Range >>= 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1003: FILE: lib/lzmadecode.c:505:
+              Range >>= 1;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1004: FILE: lib/lzmadecode.c:506:
+              rep0 <<= 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1004: FILE: lib/lzmadecode.c:506:
+              rep0 <<= 1;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1005: FILE: lib/lzmadecode.c:507:
+              if (Code >= Range)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1005: FILE: lib/lzmadecode.c:507:
+              if (Code >= Range)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1005: FILE: lib/lzmadecode.c:507:
+              if (Code >= Range)
+              {

ERROR:CODE_INDENT: code indent should use tabs where possible
#1006: FILE: lib/lzmadecode.c:508:
+              {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1006: FILE: lib/lzmadecode.c:508:
+              {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1007: FILE: lib/lzmadecode.c:509:
+                Code -= Range;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1007: FILE: lib/lzmadecode.c:509:
+                Code -= Range;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1008: FILE: lib/lzmadecode.c:510:
+                rep0 |= 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1008: FILE: lib/lzmadecode.c:510:
+                rep0 |= 1;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1009: FILE: lib/lzmadecode.c:511:
+              }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1009: FILE: lib/lzmadecode.c:511:
+              }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1010: FILE: lib/lzmadecode.c:512:
+            }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1010: FILE: lib/lzmadecode.c:512:
+            }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1011: FILE: lib/lzmadecode.c:513:
+            while (--numDirectBits != 0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1011: FILE: lib/lzmadecode.c:513:
+            while (--numDirectBits != 0);$

ERROR:WHILE_AFTER_BRACE: while should follow close brace '}'
#1011: FILE: lib/lzmadecode.c:513:
+            }
+            while (--numDirectBits != 0);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1012: FILE: lib/lzmadecode.c:514:
+            prob = p + Align;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1012: FILE: lib/lzmadecode.c:514:
+            prob = p + Align;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1013: FILE: lib/lzmadecode.c:515:
+            rep0 <<= kNumAlignBits;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1013: FILE: lib/lzmadecode.c:515:
+            rep0 <<= kNumAlignBits;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1014: FILE: lib/lzmadecode.c:516:
+            numDirectBits = kNumAlignBits;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1014: FILE: lib/lzmadecode.c:516:
+            numDirectBits = kNumAlignBits;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1015: FILE: lib/lzmadecode.c:517:
+          }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1015: FILE: lib/lzmadecode.c:517:
+          }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1016: FILE: lib/lzmadecode.c:518:
+          {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1016: FILE: lib/lzmadecode.c:518:
+          {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1017: FILE: lib/lzmadecode.c:519:
+            int i = 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1017: FILE: lib/lzmadecode.c:519:
+            int i = 1;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1018: FILE: lib/lzmadecode.c:520:
+            int mi = 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1018: FILE: lib/lzmadecode.c:520:
+            int mi = 1;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1019: FILE: lib/lzmadecode.c:521:
+            do$

WARNING:LINE_SPACING: Missing a blank line after declarations
#1019: FILE: lib/lzmadecode.c:521:
+            int mi = 1;
+            do

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1019: FILE: lib/lzmadecode.c:521:
+            do$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1019: FILE: lib/lzmadecode.c:521:
+            do
+            {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (12, 14)
#1019: FILE: lib/lzmadecode.c:521:
+            do
+            {

ERROR:CODE_INDENT: code indent should use tabs where possible
#1020: FILE: lib/lzmadecode.c:522:
+            {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1020: FILE: lib/lzmadecode.c:522:
+            {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1021: FILE: lib/lzmadecode.c:523:
+              CProb *prob3 = prob + mi;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1021: FILE: lib/lzmadecode.c:523:
+              CProb *prob3 = prob + mi;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1022: FILE: lib/lzmadecode.c:524:
+              RC_GET_BIT2(prob3, mi, ; , rep0 |= i);$

WARNING:LINE_SPACING: Missing a blank line after declarations
#1022: FILE: lib/lzmadecode.c:524:
+              CProb *prob3 = prob + mi;
+              RC_GET_BIT2(prob3, mi, ; , rep0 |= i);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1022: FILE: lib/lzmadecode.c:524:
+              RC_GET_BIT2(prob3, mi, ; , rep0 |= i);$

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#1022: FILE: lib/lzmadecode.c:524:
+              RC_GET_BIT2(prob3, mi, ; , rep0 |= i);
                                        ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1023: FILE: lib/lzmadecode.c:525:
+              i <<= 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1023: FILE: lib/lzmadecode.c:525:
+              i <<= 1;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1024: FILE: lib/lzmadecode.c:526:
+            }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1024: FILE: lib/lzmadecode.c:526:
+            }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1025: FILE: lib/lzmadecode.c:527:
+            while(--numDirectBits != 0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1025: FILE: lib/lzmadecode.c:527:
+            while(--numDirectBits != 0);$

ERROR:SPACING: space required before the open parenthesis '('
#1025: FILE: lib/lzmadecode.c:527:
+            while(--numDirectBits != 0);

ERROR:WHILE_AFTER_BRACE: while should follow close brace '}'
#1025: FILE: lib/lzmadecode.c:527:
+            }
+            while(--numDirectBits != 0);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1026: FILE: lib/lzmadecode.c:528:
+          }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1026: FILE: lib/lzmadecode.c:528:
+          }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1027: FILE: lib/lzmadecode.c:529:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1027: FILE: lib/lzmadecode.c:529:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1028: FILE: lib/lzmadecode.c:530:
+        else$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1028: FILE: lib/lzmadecode.c:530:
+        else$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#1028: FILE: lib/lzmadecode.c:530:
+        else
+          rep0 = posSlot;

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1028: FILE: lib/lzmadecode.c:530:
+        }
+        else

ERROR:CODE_INDENT: code indent should use tabs where possible
#1029: FILE: lib/lzmadecode.c:531:
+          rep0 = posSlot;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1029: FILE: lib/lzmadecode.c:531:
+          rep0 = posSlot;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1030: FILE: lib/lzmadecode.c:532:
+        if (++rep0 == (UInt32)(0))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1030: FILE: lib/lzmadecode.c:532:
+        if (++rep0 == (UInt32)(0))$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1030: FILE: lib/lzmadecode.c:532:
+        if (++rep0 == (UInt32)(0))
+        {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#1030: FILE: lib/lzmadecode.c:532:
+        if (++rep0 == (UInt32)(0))
[...]
+          /* it's for stream version */

ERROR:CODE_INDENT: code indent should use tabs where possible
#1031: FILE: lib/lzmadecode.c:533:
+        {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1031: FILE: lib/lzmadecode.c:533:
+        {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1032: FILE: lib/lzmadecode.c:534:
+          /* it's for stream version */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1033: FILE: lib/lzmadecode.c:535:
+          len = -1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1033: FILE: lib/lzmadecode.c:535:
+          len = -1;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1034: FILE: lib/lzmadecode.c:536:
+          break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1034: FILE: lib/lzmadecode.c:536:
+          break;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1035: FILE: lib/lzmadecode.c:537:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1035: FILE: lib/lzmadecode.c:537:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1036: FILE: lib/lzmadecode.c:538:
+      }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1038: FILE: lib/lzmadecode.c:540:
+      len += kMatchMinLen;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1039: FILE: lib/lzmadecode.c:541:
+      if (rep0 > nowPos $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1039: FILE: lib/lzmadecode.c:541:
+      if (rep0 > nowPos $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1040: FILE: lib/lzmadecode.c:542:
+        #ifdef _LZMA_OUT_READ$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1041: FILE: lib/lzmadecode.c:543:
+        + globalPos || rep0 > dictionarySize$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1041: FILE: lib/lzmadecode.c:543:
+        + globalPos || rep0 > dictionarySize$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1042: FILE: lib/lzmadecode.c:544:
+        #endif$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1043: FILE: lib/lzmadecode.c:545:
+        ) $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1043: FILE: lib/lzmadecode.c:545:
+        ) $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1043: FILE: lib/lzmadecode.c:545:
+        ) $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1044: FILE: lib/lzmadecode.c:546:
+        return LZMA_RESULT_DATA_ERROR;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1044: FILE: lib/lzmadecode.c:546:
+        return LZMA_RESULT_DATA_ERROR;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1045: FILE: lib/lzmadecode.c:547:
+      do$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1045: FILE: lib/lzmadecode.c:547:
+      do
+      {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1046: FILE: lib/lzmadecode.c:548:
+      {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1047: FILE: lib/lzmadecode.c:549:
+        #ifdef _LZMA_OUT_READ$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1048: FILE: lib/lzmadecode.c:550:
+        UInt32 pos = dictionaryPos - rep0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1048: FILE: lib/lzmadecode.c:550:
+        UInt32 pos = dictionaryPos - rep0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1049: FILE: lib/lzmadecode.c:551:
+        if (pos >= dictionarySize)$

WARNING:LINE_SPACING: Missing a blank line after declarations
#1049: FILE: lib/lzmadecode.c:551:
+        UInt32 pos = dictionaryPos - rep0;
+        if (pos >= dictionarySize)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1049: FILE: lib/lzmadecode.c:551:
+        if (pos >= dictionarySize)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#1049: FILE: lib/lzmadecode.c:551:
+        if (pos >= dictionarySize)
+          pos += dictionarySize;

ERROR:CODE_INDENT: code indent should use tabs where possible
#1050: FILE: lib/lzmadecode.c:552:
+          pos += dictionarySize;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1050: FILE: lib/lzmadecode.c:552:
+          pos += dictionarySize;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1051: FILE: lib/lzmadecode.c:553:
+        previousByte = dictionary[pos];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1051: FILE: lib/lzmadecode.c:553:
+        previousByte = dictionary[pos];$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1052: FILE: lib/lzmadecode.c:554:
+        dictionary[dictionaryPos] = previousByte;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1052: FILE: lib/lzmadecode.c:554:
+        dictionary[dictionaryPos] = previousByte;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1053: FILE: lib/lzmadecode.c:555:
+        if (++dictionaryPos == dictionarySize)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1053: FILE: lib/lzmadecode.c:555:
+        if (++dictionaryPos == dictionarySize)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#1053: FILE: lib/lzmadecode.c:555:
+        if (++dictionaryPos == dictionarySize)
+          dictionaryPos = 0;

ERROR:CODE_INDENT: code indent should use tabs where possible
#1054: FILE: lib/lzmadecode.c:556:
+          dictionaryPos = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1054: FILE: lib/lzmadecode.c:556:
+          dictionaryPos = 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1055: FILE: lib/lzmadecode.c:557:
+        #else$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1056: FILE: lib/lzmadecode.c:558:
+        previousByte = outStream[nowPos - rep0];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1056: FILE: lib/lzmadecode.c:558:
+        previousByte = outStream[nowPos - rep0];$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1057: FILE: lib/lzmadecode.c:559:
+        #endif$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1058: FILE: lib/lzmadecode.c:560:
+        len--;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1058: FILE: lib/lzmadecode.c:560:
+        len--;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1059: FILE: lib/lzmadecode.c:561:
+        outStream[nowPos++] = previousByte;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1059: FILE: lib/lzmadecode.c:561:
+        outStream[nowPos++] = previousByte;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1060: FILE: lib/lzmadecode.c:562:
+      }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1061: FILE: lib/lzmadecode.c:563:
+      while(len != 0 && nowPos < outSize);$

ERROR:SPACING: space required before the open parenthesis '('
#1061: FILE: lib/lzmadecode.c:563:
+      while(len != 0 && nowPos < outSize);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1061: FILE: lib/lzmadecode.c:563:
+      while(len != 0 && nowPos < outSize);

ERROR:WHILE_AFTER_BRACE: while should follow close brace '}'
#1061: FILE: lib/lzmadecode.c:563:
+      }
+      while(len != 0 && nowPos < outSize);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1062: FILE: lib/lzmadecode.c:564:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1063: FILE: lib/lzmadecode.c:565:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1064: FILE: lib/lzmadecode.c:566:
+  RC_NORMALIZE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1067: FILE: lib/lzmadecode.c:569:
+  vs->Buffer = Buffer;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1068: FILE: lib/lzmadecode.c:570:
+  vs->BufferLim = BufferLim;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1069: FILE: lib/lzmadecode.c:571:
+  vs->Range = Range;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1070: FILE: lib/lzmadecode.c:572:
+  vs->Code = Code;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1071: FILE: lib/lzmadecode.c:573:
+  vs->DictionaryPos = dictionaryPos;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1072: FILE: lib/lzmadecode.c:574:
+  vs->GlobalPos = globalPos + nowPos;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1073: FILE: lib/lzmadecode.c:575:
+  vs->Reps[0] = rep0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1074: FILE: lib/lzmadecode.c:576:
+  vs->Reps[1] = rep1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1075: FILE: lib/lzmadecode.c:577:
+  vs->Reps[2] = rep2;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1076: FILE: lib/lzmadecode.c:578:
+  vs->Reps[3] = rep3;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1077: FILE: lib/lzmadecode.c:579:
+  vs->State = state;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1078: FILE: lib/lzmadecode.c:580:
+  vs->RemainLen = len;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1079: FILE: lib/lzmadecode.c:581:
+  vs->TempDictionary[0] = tempDictionary[0];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1082: FILE: lib/lzmadecode.c:584:
+  *outSizeProcessed = nowPos;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1083: FILE: lib/lzmadecode.c:585:
+  return LZMA_RESULT_OK;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1088: FILE: lib/lzmadecode.h:1:
+/* $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1088: FILE: lib/lzmadecode.h:1:
+/* 

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1089: FILE: lib/lzmadecode.h:2:
+/* 
+  LzmaDecode.h

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1098: FILE: lib/lzmadecode.h:11:
+  It means that you can select one of these two licenses and $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1102: FILE: lib/lzmadecode.h:15:
+  Igor Pavlov, as the author of this code, expressly permits you to $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1103: FILE: lib/lzmadecode.h:16:
+  statically or dynamically link your code (or bind by name) to the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1104: FILE: lib/lzmadecode.h:17:
+  interfaces of this file without subjecting your linked code to the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1105: FILE: lib/lzmadecode.h:18:
+  terms of the CPL or GNU LGPL. Any modifications or additions $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1119: FILE: lib/lzmadecode.h:32:
+/* It can increase speed on some 32-bit CPUs, $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1120: FILE: lib/lzmadecode.h:33:
+/* It can increase speed on some 32-bit CPUs, 
+   but memory usage will be doubled in that case */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1120: FILE: lib/lzmadecode.h:33:
+   but memory usage will be doubled in that case */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1122: FILE: lib/lzmadecode.h:35:
+#define _LZMA_LOC_OPT $

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1144: FILE: lib/lzmadecode.h:57:
+typedef struct _ILzmaInCallback

CHECK:CAMELCASE: Avoid CamelCase: <_ILzmaInCallback>
#1144: FILE: lib/lzmadecode.h:57:
+typedef struct _ILzmaInCallback

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#1145: FILE: lib/lzmadecode.h:58:
+typedef struct _ILzmaInCallback
+{

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1146: FILE: lib/lzmadecode.h:59:
+  int (*Read)(void *object, unsigned char **buffer, UInt32 *bufferSize);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1153: FILE: lib/lzmadecode.h:66:
+/* $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1154: FILE: lib/lzmadecode.h:67:
+/* 
+bufferSize = (LZMA_BASE_SIZE + (LZMA_LIT_SIZE << (lc + lp)))* sizeof(CProb)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1156: FILE: lib/lzmadecode.h:69:
+by default CProb is unsigned short, $

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1161: FILE: lib/lzmadecode.h:74:
+int LzmaDecoderInit(

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1162: FILE: lib/lzmadecode.h:75:
+    unsigned char *buffer, UInt32 bufferSize,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1163: FILE: lib/lzmadecode.h:76:
+    int lc, int lp, int pb,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1164: FILE: lib/lzmadecode.h:77:
+    unsigned char *dictionary, UInt32 dictionarySize,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1166: FILE: lib/lzmadecode.h:79:
+    ILzmaInCallback *inCallback$

CHECK:CAMELCASE: Avoid CamelCase: <inCallback>
#1166: FILE: lib/lzmadecode.h:79:
+    ILzmaInCallback *inCallback

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1168: FILE: lib/lzmadecode.h:81:
+    unsigned char *inStream, UInt32 inSize$

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1173: FILE: lib/lzmadecode.h:86:
+int LzmaDecode(

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1174: FILE: lib/lzmadecode.h:87:
+    unsigned char *buffer, $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1174: FILE: lib/lzmadecode.h:87:
+    unsigned char *buffer, $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1176: FILE: lib/lzmadecode.h:89:
+    UInt32 bufferSize,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1177: FILE: lib/lzmadecode.h:90:
+    int lc, int lp, int pb,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1179: FILE: lib/lzmadecode.h:92:
+    ILzmaInCallback *inCallback,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1181: FILE: lib/lzmadecode.h:94:
+    unsigned char *inStream, UInt32 inSize,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1184: FILE: lib/lzmadecode.h:97:
+    unsigned char *outStream, UInt32 outSize,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1185: FILE: lib/lzmadecode.h:98:
+    UInt32 *outSizeProcessed);$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000176691.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 334 errors, 507 warnings, 131 checks, 1089 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000176691.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
