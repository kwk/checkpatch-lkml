WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#24: 
tree that Amit Kale and I (and many others) have been working on for some time

WARNING:TYPO_SPELLING: 'arguement' may be misspelled - perhaps 'argument'?
#192: FILE: Documentation/DocBook/kgdb.tmpl:127:
+    <constant>kgdbwait</constant> after this arguement.
                                              ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'Iinclude' may be misspelled - perhaps 'Include'?
#265: FILE: Documentation/DocBook/kgdb.tmpl:200:
+!Iinclude/linux/kgdb.h
  ^^^^^^^^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#303: FILE: include/linux/kgdb.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#304: FILE: include/linux/kgdb.h:2:
+ * include/linux/kgdb.h

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#321: FILE: include/linux/kgdb.h:19:
+#include <asm/atomic.h>

CHECK:LINE_SPACING: Please don't use multiple blank lines
#333: FILE: include/linux/kgdb.h:31:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#335: FILE: include/linux/kgdb.h:33:
+extern void breakpoint(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#383: FILE: include/linux/kgdb.h:81:
+extern void regs_to_gdb_regs(unsigned long *gdb_regs, struct pt_regs *regs);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#397: FILE: include/linux/kgdb.h:95:
+extern void sleeping_thread_to_gdb_regs(unsigned long *gdb_regs,

WARNING:TYPO_SPELLING: 'recieved' may be misspelled - perhaps 'received'?
#402: FILE: include/linux/kgdb.h:100:
+ *	@gdb_regs: A pointer to hold the registers we've recieved from GDB.
   	                                                 ^^^^^^^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#408: FILE: include/linux/kgdb.h:106:
+extern void gdb_regs_to_regs(unsigned long *gdb_regs, struct pt_regs *regs);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#426: FILE: include/linux/kgdb.h:124:
+extern int kgdb_arch_handle_exception(int vector, int signo, int err_code,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#458: FILE: include/linux/kgdb.h:156:
+extern int kgdb_arch_init(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#459: FILE: include/linux/kgdb.h:157:
+extern void kgdb_disable_hw_debug(struct pt_regs *regs);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#460: FILE: include/linux/kgdb.h:158:
+extern void kgdb_post_master_code(struct pt_regs *regs, int e_vector,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#462: FILE: include/linux/kgdb.h:160:
+extern void kgdb_roundup_cpus(unsigned long flags);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#463: FILE: include/linux/kgdb.h:161:
+extern int kgdb_set_hw_break(unsigned long addr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#464: FILE: include/linux/kgdb.h:162:
+extern int kgdb_remove_hw_break(unsigned long addr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#465: FILE: include/linux/kgdb.h:163:
+extern void kgdb_remove_all_hw_break(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#466: FILE: include/linux/kgdb.h:164:
+extern void kgdb_correct_hw_break(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#467: FILE: include/linux/kgdb.h:165:
+extern void kgdb_shadowinfo(struct pt_regs *regs, char *buffer,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#468: FILE: include/linux/kgdb.h:166:
+			    unsigned threadid);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#469: FILE: include/linux/kgdb.h:167:
+extern struct task_struct *kgdb_get_shadow_thread(struct pt_regs *regs,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#471: FILE: include/linux/kgdb.h:169:
+extern struct pt_regs *kgdb_shadow_regs(struct pt_regs *regs, int threadid);

WARNING:TYPO_SPELLING: 'Desribe' may be misspelled - perhaps 'Describe'?
#474: FILE: include/linux/kgdb.h:172:
+ * struct kgdb_arch - Desribe architecture specific values.
                       ^^^^^^^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#494: FILE: include/linux/kgdb.h:192:
+	unsigned shadowth;

WARNING:SPACING: Unnecessary space before function pointer arguments
#495: FILE: include/linux/kgdb.h:193:
+	int (*set_breakpoint) (unsigned long, char *);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#495: FILE: include/linux/kgdb.h:193:
+	int (*set_breakpoint) (unsigned long, char *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#495: FILE: include/linux/kgdb.h:193:
+	int (*set_breakpoint) (unsigned long, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#496: FILE: include/linux/kgdb.h:194:
+	int (*remove_breakpoint)(unsigned long, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#496: FILE: include/linux/kgdb.h:194:
+	int (*remove_breakpoint)(unsigned long, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#497: FILE: include/linux/kgdb.h:195:
+	int (*set_hw_breakpoint)(unsigned long, int, enum kgdb_bptype);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#497: FILE: include/linux/kgdb.h:195:
+	int (*set_hw_breakpoint)(unsigned long, int, enum kgdb_bptype);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#498: FILE: include/linux/kgdb.h:196:
+	int (*remove_hw_breakpoint)(unsigned long, int, enum kgdb_bptype);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#498: FILE: include/linux/kgdb.h:196:
+	int (*remove_hw_breakpoint)(unsigned long, int, enum kgdb_bptype);

WARNING:NEW_TYPEDEFS: do not add new typedefs
#502: FILE: include/linux/kgdb.h:200:
+typedef unsigned char threadref[8];

WARNING:TYPO_SPELLING: 'Desribe' may be misspelled - perhaps 'Describe'?
#505: FILE: include/linux/kgdb.h:203:
+ * struct kgdb_io - Desribe the interface for an I/O driver to talk with KGDB.
                     ^^^^^^^

WARNING:SPACING: Unnecessary space before function pointer arguments
#528: FILE: include/linux/kgdb.h:226:
+	int (*read_char) (void);

WARNING:SPACING: Unnecessary space before function pointer arguments
#529: FILE: include/linux/kgdb.h:227:
+	void (*write_char) (int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#529: FILE: include/linux/kgdb.h:227:
+	void (*write_char) (int);

WARNING:SPACING: Unnecessary space before function pointer arguments
#530: FILE: include/linux/kgdb.h:228:
+	void (*flush) (void);

WARNING:SPACING: Unnecessary space before function pointer arguments
#531: FILE: include/linux/kgdb.h:229:
+	int (*init) (void);

WARNING:SPACING: Unnecessary space before function pointer arguments
#532: FILE: include/linux/kgdb.h:230:
+	void (*late_init) (void);

WARNING:SPACING: Unnecessary space before function pointer arguments
#533: FILE: include/linux/kgdb.h:231:
+	void (*pre_exception) (void);

WARNING:SPACING: Unnecessary space before function pointer arguments
#534: FILE: include/linux/kgdb.h:232:
+	void (*post_exception) (void);

WARNING:CONST_STRUCT: struct kgdb_io should normally be const
#537: FILE: include/linux/kgdb.h:235:
+extern struct kgdb_io kgdb_io_ops;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct kgdb_arch should normally be const
#538: FILE: include/linux/kgdb.h:236:
+extern struct kgdb_arch arch_kgdb_ops;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#541: FILE: include/linux/kgdb.h:239:
+extern int kgdb_register_io_module(struct kgdb_io *local_kgdb_io_ops);

WARNING:CONST_STRUCT: struct kgdb_io should normally be const
#541: FILE: include/linux/kgdb.h:239:
+extern int kgdb_register_io_module(struct kgdb_io *local_kgdb_io_ops);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#542: FILE: include/linux/kgdb.h:240:
+extern void kgdb_unregister_io_module(struct kgdb_io *local_kgdb_io_ops);

WARNING:CONST_STRUCT: struct kgdb_io should normally be const
#542: FILE: include/linux/kgdb.h:240:
+extern void kgdb_unregister_io_module(struct kgdb_io *local_kgdb_io_ops);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#544: FILE: include/linux/kgdb.h:242:
+extern void kgdb8250_add_port(int i, struct uart_port *serial_req);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#545: FILE: include/linux/kgdb.h:243:
+extern void kgdb8250_add_platform_port(int i, struct plat_serial8250_port *serial_req);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#547: FILE: include/linux/kgdb.h:245:
+extern int kgdb_hex2long(char **ptr, long *long_val);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#548: FILE: include/linux/kgdb.h:246:
+extern char *kgdb_mem2hex(char *mem, char *buf, int count);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#549: FILE: include/linux/kgdb.h:247:
+extern char *kgdb_hex2mem(char *buf, char *mem, int count);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#550: FILE: include/linux/kgdb.h:248:
+extern int kgdb_get_mem(char *addr, unsigned char *buf, int count);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#551: FILE: include/linux/kgdb.h:249:
+extern int kgdb_set_mem(char *addr, unsigned char *buf, int count);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#552: FILE: include/linux/kgdb.h:250:
+extern int kgdb_handle_exception(int ex_vector, int signo, int err_code,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#553: FILE: include/linux/kgdb.h:251:
+extern int kgdb_handle_exception(int ex_vector, int signo, int err_code,
+				struct pt_regs *regs);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#554: FILE: include/linux/kgdb.h:252:
+extern void kgdb_nmihook(int cpu, void *regs);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#567: FILE: kernel/kgdb.c:1:
+/*

WARNING:TYPO_SPELLING: 'Origianl' may be misspelled - perhaps 'Original'?
#607: FILE: kernel/kgdb.c:41:
+ * Origianl kgdb, compatibility with 2.1.xx kernel by
    ^^^^^^^^

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#623: FILE: kernel/kgdb.c:57:
+#include <asm/uaccess.h>

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#625: FILE: kernel/kgdb.c:59:
+#include <asm/atomic.h>

WARNING:INCLUDE_LINUX: Use #include <linux/cacheflush.h> instead of <asm/cacheflush.h>
#628: FILE: kernel/kgdb.c:62:
+#include <asm/cacheflush.h>

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#635: FILE: kernel/kgdb.c:69:
+extern int pidhash_init_done;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#647: FILE: kernel/kgdb.c:81:
+int kgdb_initialized = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

WARNING:TYPO_SPELLING: 'happend' may be misspelled - perhaps 'happened'?
#651: FILE: kernel/kgdb.c:85:
+ * also need to flag this has happend. */
                               ^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#651: FILE: kernel/kgdb.c:85:
+ * also need to flag this has happend. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#654: FILE: kernel/kgdb.c:88:
+int kgdb_from_module_registered = 0;

WARNING:TYPO_SPELLING: 'overriden' may be misspelled - perhaps 'overridden'?
#656: FILE: kernel/kgdb.c:90:
+/* We provide a kgdb_io_ops structure that may be overriden. */
                                                   ^^^^^^^^^

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#657: FILE: kernel/kgdb.c:91:
+struct kgdb_io __attribute__ ((weak)) kgdb_io_ops;

WARNING:CONST_STRUCT: struct kgdb_io should normally be const
#657: FILE: kernel/kgdb.c:91:
+struct kgdb_io __attribute__ ((weak)) kgdb_io_ops;

WARNING:CONST_STRUCT: struct kgdb_io should normally be const
#659: FILE: kernel/kgdb.c:93:
+static struct kgdb_io kgdb_io_ops_prev[MAX_KGDB_IO_HANDLERS];

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#660: FILE: kernel/kgdb.c:94:
+static int kgdb_io_handler_cnt = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#664: FILE: kernel/kgdb.c:98:
+EXPORT_SYMBOL(kgdb_tasklet_breakpoint);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#665: FILE: kernel/kgdb.c:99:
+EXPORT_SYMBOL(kgdb_connected);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#666: FILE: kernel/kgdb.c:100:
+EXPORT_SYMBOL(kgdb_register_io_module);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#667: FILE: kernel/kgdb.c:101:
+EXPORT_SYMBOL(kgdb_unregister_io_module);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#668: FILE: kernel/kgdb.c:102:
+EXPORT_SYMBOL(debugger_active);

WARNING:CONST_STRUCT: struct kgdb_arch should normally be const
#676: FILE: kernel/kgdb.c:110:
+struct kgdb_arch *kgdb_ops = &arch_kgdb_ops;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#681: FILE: kernel/kgdb.c:115:
+static volatile int procindebug[NR_CPUS];

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#697: FILE: kernel/kgdb.c:131:
+ JMP_REGS_ALIGNMENT;$

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#702: FILE: kernel/kgdb.c:136:
+} kgdb_info[NR_CPUS];

WARNING:TYPO_SPELLING: 'initalization' may be misspelled - perhaps 'initialization'?
#708: FILE: kernel/kgdb.c:142:
+ *	kgdb_arch_init - Perform any architecture specific initalization.
   	                                                   ^^^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'initalization' may be misspelled - perhaps 'initialization'?
#713: FILE: kernel/kgdb.c:147:
+ *	This function will handle the initalization of any architecture
   	                              ^^^^^^^^^^^^^

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#716: FILE: kernel/kgdb.c:150:
+int __attribute__ ((weak))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#717: FILE: kernel/kgdb.c:151:
+    kgdb_arch_init(void)$

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#730: FILE: kernel/kgdb.c:164:
+void __attribute__ ((weak))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#731: FILE: kernel/kgdb.c:165:
+    kgdb_disable_hw_debug(struct pt_regs *regs)$

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#739: FILE: kernel/kgdb.c:173:
+int __attribute__ ((weak))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#740: FILE: kernel/kgdb.c:174:
+    kgdb_set_hw_break(unsigned long addr)$

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#749: FILE: kernel/kgdb.c:183:
+int __attribute__ ((weak))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#750: FILE: kernel/kgdb.c:184:
+    kgdb_remove_hw_break(unsigned long addr)$

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#758: FILE: kernel/kgdb.c:192:
+void __attribute__ ((weak))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#759: FILE: kernel/kgdb.c:193:
+    kgdb_remove_all_hw_break(void)$

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#777: FILE: kernel/kgdb.c:211:
+void __attribute__ ((weak))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#778: FILE: kernel/kgdb.c:212:
+    kgdb_correct_hw_break(void)$

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#793: FILE: kernel/kgdb.c:227:
+void __attribute__ ((weak))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#794: FILE: kernel/kgdb.c:228:
+    kgdb_post_master_code(struct pt_regs *regs, int e_vector, int err_code)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#799: FILE: kernel/kgdb.c:233:
+ * ^Ikgdb_roundup_cpus - Get other CPUs into a holding pattern$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#800: FILE: kernel/kgdb.c:234:
+ * ^I@flags: Current IRQ state$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#802: FILE: kernel/kgdb.c:236:
+ * ^IOn SMP systems, we need to get the attention of the other CPUs$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#803: FILE: kernel/kgdb.c:237:
+ * ^Iand get them be in a known state.  This should do what is needed$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#804: FILE: kernel/kgdb.c:238:
+ * ^Ito get the other CPUs to call kgdb_wait(). Note that on some arches,$

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#812: FILE: kernel/kgdb.c:246:
+void __attribute__ ((weak))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#813: FILE: kernel/kgdb.c:247:
+    kgdb_roundup_cpus(unsigned long flags)$

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#823: FILE: kernel/kgdb.c:257:
+void __attribute__ ((weak))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#824: FILE: kernel/kgdb.c:258:
+    kgdb_shadowinfo(struct pt_regs *regs, char *buffer, unsigned threadid)$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#824: FILE: kernel/kgdb.c:258:
+    kgdb_shadowinfo(struct pt_regs *regs, char *buffer, unsigned threadid)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#837: FILE: kernel/kgdb.c:271:
+struct task_struct __attribute__ ((weak))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#838: FILE: kernel/kgdb.c:272:
+    * kgdb_get_shadow_thread(struct pt_regs *regs, int threadid)$

ERROR:SPACING: space prohibited after that '*' (ctx:ExW)
#838: FILE: kernel/kgdb.c:272:
+    * kgdb_get_shadow_thread(struct pt_regs *regs, int threadid)
     ^

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#851: FILE: kernel/kgdb.c:285:
+struct pt_regs __attribute__ ((weak))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#852: FILE: kernel/kgdb.c:286:
+    * kgdb_shadow_regs(struct pt_regs *regs, int threadid)$

ERROR:SPACING: space prohibited after that '*' (ctx:ExW)
#852: FILE: kernel/kgdb.c:286:
+    * kgdb_shadow_regs(struct pt_regs *regs, int threadid)
     ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#875: FILE: kernel/kgdb.c:309:
+	char ch;
+	if (!kgdb_io_ops.read_char)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#879: FILE: kernel/kgdb.c:313:
+		 * other characters */

WARNING:SPACING: space prohibited before semicolon
#880: FILE: kernel/kgdb.c:314:
+		while ((ch = (kgdb_io_ops.read_char())) != '$') ;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#880: FILE: kernel/kgdb.c:314:
+		while ((ch = (kgdb_io_ops.read_char())) != '$') ;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#957: FILE: kernel/kgdb.c:391:
+		 * packet. */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'count == 2'
#981: FILE: kernel/kgdb.c:415:
+	if ((count == 2) && (((long)mem & 1) == 0)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:LINE_SPACING: Missing a blank line after declarations
#983: FILE: kernel/kgdb.c:417:
+		unsigned short tmp_s = *(unsigned short *)mem;
+		mem += 2;

WARNING:LINE_SPACING: Missing a blank line after declarations
#997: FILE: kernel/kgdb.c:431:
+		unsigned long tmp_l = *(unsigned int *)mem;
+		mem += 4;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1020: FILE: kernel/kgdb.c:454:
+		unsigned long long tmp_ll = *(unsigned long long *)mem;
+		mem += 8;

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1066: FILE: kernel/kgdb.c:500:
+	return (buf);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'count == 2'
#1103: FILE: kernel/kgdb.c:537:
+	if ((count == 2) && (((long)mem & 1) == 0)) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1143: FILE: kernel/kgdb.c:577:
+		int i;
+		for (i = 0; i < count; i++) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1145: FILE: kernel/kgdb.c:579:
+			unsigned char ch = hex(*buf++) << 4;
+			ch |= hex(*buf++);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1150: FILE: kernel/kgdb.c:584:
+	return (mem);

CHECK:BRACES: braces {} should be used on all arms of this statement
#1165: FILE: kernel/kgdb.c:599:
+		if (hex_val >= 0) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#1168: FILE: kernel/kgdb.c:602:
+		} else

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1215: FILE: kernel/kgdb.c:649:
+static char *pack_threadid(char *pkt, threadref * id)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1228: FILE: kernel/kgdb.c:662:
+void int_to_threadref(threadref * id, int value)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1276: FILE: kernel/kgdb.c:710:
+	 * FIXME: this looks racy */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'kgdb_break[i].state == bp_enabled'
#1331: FILE: kernel/kgdb.c:765:
+		if ((kgdb_break[i].state == bp_enabled) &&
+		    (kgdb_break[i].bpt_addr == addr))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'kgdb_break[i].bpt_addr == addr'
#1331: FILE: kernel/kgdb.c:765:
+		if ((kgdb_break[i].state == bp_enabled) &&
+		    (kgdb_break[i].bpt_addr == addr))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'kgdb_break[i].bpt_addr == addr'
#1336: FILE: kernel/kgdb.c:770:
+			if ((breakno == -1) || (kgdb_break[i].bpt_addr == addr))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1344: FILE: kernel/kgdb.c:778:
+		if ((error = kgdb_ops->set_breakpoint(addr,

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1345: FILE: kernel/kgdb.c:779:
+		if ((error = kgdb_ops->set_breakpoint(addr,
+					kgdb_break[breakno].saved_instr)) < 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1348: FILE: kernel/kgdb.c:782:
+		if ((error = kgdb_get_mem((char *)addr,

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1353: FILE: kernel/kgdb.c:787:
+		if ((error = kgdb_set_mem((char *)addr, kgdb_ops->gdb_bpt_instr,

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'kgdb_break[i].state == bp_enabled'
#1377: FILE: kernel/kgdb.c:811:
+		if ((kgdb_break[i].state == bp_enabled) &&
+		    (kgdb_break[i].bpt_addr == addr)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'kgdb_break[i].bpt_addr == addr'
#1377: FILE: kernel/kgdb.c:811:
+		if ((kgdb_break[i].state == bp_enabled) &&
+		    (kgdb_break[i].bpt_addr == addr)) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1380: FILE: kernel/kgdb.c:814:
+				if ((error = kgdb_ops->remove_breakpoint(addr,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1381: FILE: kernel/kgdb.c:815:
+				if ((error = kgdb_ops->remove_breakpoint(addr,
+						kgdb_break[i].saved_instr)) < 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1383: FILE: kernel/kgdb.c:817:
+			} else if ((error =

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1389: FILE: kernel/kgdb.c:823:
+			if (CACHE_FLUSH_IS_SAFE && current->mm &&
+					addr < TASK_SIZE)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1391: FILE: kernel/kgdb.c:825:
+				flush_cache_range(current->mm->mmap_cache,
+						addr, addr + BREAK_INSTR_SIZE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1394: FILE: kernel/kgdb.c:828:
+				flush_icache_range(addr,
+						addr + BREAK_INSTR_SIZE);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1411: FILE: kernel/kgdb.c:845:
+			unsigned long addr = kgdb_break[i].bpt_addr;
+			if ((error =

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1411: FILE: kernel/kgdb.c:845:
+			if ((error =

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1417: FILE: kernel/kgdb.c:851:
+			if (CACHE_FLUSH_IS_SAFE && current->mm &&
+					addr < TASK_SIZE)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1419: FILE: kernel/kgdb.c:853:
+				flush_cache_range(current->mm->mmap_cache,
+						addr, addr + BREAK_INSTR_SIZE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1422: FILE: kernel/kgdb.c:856:
+				flush_icache_range(addr,
+						addr + BREAK_INSTR_SIZE);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1435: FILE: kernel/kgdb.c:869:
+	if (realpid) {
+		return realpid;
+	}

WARNING:TYPO_SPELLING: 'procesing' may be misspelled - perhaps 'processing'?
#1476: FILE: kernel/kgdb.c:910:
+ * This function does all command procesing for interfacing to gdb.
                                   ^^^^^^^^^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1497: FILE: kernel/kgdb.c:931:
+	unsigned procid;

WARNING:INDENTED_LABEL: labels should not be indented
#1509: FILE: kernel/kgdb.c:943:
+      acquirelock:

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1533: FILE: kernel/kgdb.c:967:
+		if (atomic_read(&cpu_doing_single_step) != -1 &&
+				atomic_read(&cpu_doing_single_step) != procid)

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1554: FILE: kernel/kgdb.c:988:
+		for (i = 0; i < NR_CPUS; i++)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1562: FILE: kernel/kgdb.c:996:
+	 * need one here */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1567: FILE: kernel/kgdb.c:1001:
+	 * as num_online_cpus() could be 0.*/

WARNING:LINE_SPACING: Missing a blank line after declarations
#1570: FILE: kernel/kgdb.c:1004:
+		int cpu, num = 0;
+		for (cpu = 0; cpu < NR_CPUS; cpu++) {

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1570: FILE: kernel/kgdb.c:1004:
+		for (cpu = 0; cpu < NR_CPUS; cpu++) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1591: FILE: kernel/kgdb.c:1025:
+		 * send an 'O' packet informing the user again. */

WARNING:SPLIT_STRING: quoted string split across lines
#1594: FILE: kernel/kgdb.c:1028:
+			kgdb_msg_write("Not all CPUs have been synced for "
+				       "KGDB\n", 39);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:LINE_SPACING: Missing a blank line after declarations
#1613: FILE: kernel/kgdb.c:1047:
+		char *bpt_type;
+		error = 0;

WARNING:TYPO_SPELLING: 'incase' may be misspelled - perhaps 'in case'?
#1624: FILE: kernel/kgdb.c:1058:
+			 * we clear out our breakpoints now incase
 			                                    ^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1625: FILE: kernel/kgdb.c:1059:
+			 * GDB is reconnecting. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1629: FILE: kernel/kgdb.c:1063:
+			 * as much.  Only need to do this once. */

WARNING:SPLIT_STRING: quoted string split across lines
#1632: FILE: kernel/kgdb.c:1066:
+				kgdb_msg_write("Not all CPUs have been "
+					       "synced for KGDB\n", 39);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1647: FILE: kernel/kgdb.c:1081:
+				for (i = 0; i < NR_CPUS; i++) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1661: FILE: kernel/kgdb.c:1095:
+			 * are in kgdb_wait, and thus have debuggerinfo. */

CHECK:BRACES: braces {} should be used on all arms of this statement
#1662: FILE: kernel/kgdb.c:1096:
+			if (kgdb_usethreadid >= pid_max + num_online_cpus()) {
[...]
+			} else if (local_debuggerinfo)
[...]
+			else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1676: FILE: kernel/kgdb.c:1110:
+			else {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1680: FILE: kernel/kgdb.c:1114:
+				 * This should be enough for a stack trace. */

CHECK:BRACES: braces {} should be used on all arms of this statement
#1692: FILE: kernel/kgdb.c:1126:
+			if (kgdb_usethread && kgdb_usethread != current)
[...]
+			else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1694: FILE: kernel/kgdb.c:1128:
+			else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#1703: FILE: kernel/kgdb.c:1137:
+			if (kgdb_hex2long(&ptr, &addr) > 0 && *ptr++ == ',' &&
[...]
+			} else
[...]

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1705: FILE: kernel/kgdb.c:1139:
+				if (IS_ERR(ptr = kgdb_mem2hex((char *)addr,

CHECK:BRACES: Unbalanced braces around else statement
#1710: FILE: kernel/kgdb.c:1144:
+			} else

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1716: FILE: kernel/kgdb.c:1150:
+			if (IS_ERR(ptr = write_mem_msg(0)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1723: FILE: kernel/kgdb.c:1157:
+			if (IS_ERR(ptr = write_mem_msg(1)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1733: FILE: kernel/kgdb.c:1167:
+			if ((error = remove_all_break()) < 0) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1772: FILE: kernel/kgdb.c:1206:
+				if (remcom_in_buffer[1] == 'f') {
+					threadid = 1;
+				}

WARNING:SPLIT_STRING: quoted string split across lines
#1831: FILE: kernel/kgdb.c:1265:
+					sprintf(tmpstr, "Shadow task %d"
+						" for pid 0",

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1904: FILE: kernel/kgdb.c:1338:
+			 * if we support it. */

WARNING:INDENTED_LABEL: labels should not be indented
#1959: FILE: kernel/kgdb.c:1393:
+		      default_handle:

WARNING:INDENTED_LABEL: labels should not be indented
#1976: FILE: kernel/kgdb.c:1410:
+      kgdb_exit:

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1988: FILE: kernel/kgdb.c:1422:
+		for (i = 0; i < NR_CPUS; i++)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1991: FILE: kernel/kgdb.c:1425:
+		 * from the debugger. */

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1992: FILE: kernel/kgdb.c:1426:
+		for (i = 0; i < NR_CPUS; i++) {

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#2072: FILE: kernel/kgdb.c:1506:
+	for (i = 0; i < NR_CPUS; i++)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#2116: FILE: kernel/kgdb.c:1550:
+		printk(KERN_CRIT "kgdb: ERROR the debug module unload was "

WARNING:TYPO_SPELLING: 'conencted' may be misspelled - perhaps 'connected'?
#2117: FILE: kernel/kgdb.c:1551:
+		       "called while kgdb was conencted.  Recovery "
 		                              ^^^^^^^^^

WARNING:SPLIT_STRING: quoted string split across lines
#2117: FILE: kernel/kgdb.c:1551:
+		printk(KERN_CRIT "kgdb: ERROR the debug module unload was "
+		       "called while kgdb was conencted.  Recovery "

WARNING:SPLIT_STRING: quoted string split across lines
#2118: FILE: kernel/kgdb.c:1552:
+		       "called while kgdb was conencted.  Recovery "
+		       "attempted, but further debugging may not be "

WARNING:SPLIT_STRING: quoted string split across lines
#2119: FILE: kernel/kgdb.c:1553:
+		       "attempted, but further debugging may not be "
+		       "possible.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#2121: FILE: kernel/kgdb.c:1555:
+			printk(KERN_CRIT "kgdb: recovery failed, rebooting "

WARNING:SPLIT_STRING: quoted string split across lines
#2122: FILE: kernel/kgdb.c:1556:
+			printk(KERN_CRIT "kgdb: recovery failed, rebooting "
+			       "is advised\n");

WARNING:CONST_STRUCT: struct kgdb_io should normally be const
#2128: FILE: kernel/kgdb.c:1562:
+int kgdb_register_io_module(struct kgdb_io *local_kgdb_io_ops)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#2130: FILE: kernel/kgdb.c:1564:
+{
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2132: FILE: kernel/kgdb.c:1566:
+		printk(KERN_ERR "kgdb: Cannot load I/O module while KGDB "

WARNING:SPLIT_STRING: quoted string split across lines
#2133: FILE: kernel/kgdb.c:1567:
+		printk(KERN_ERR "kgdb: Cannot load I/O module while KGDB "
+		       "connected.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2139: FILE: kernel/kgdb.c:1573:
+		printk(KERN_ERR "kgdb: No more I/O handles available.\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "kgdb_io_ops.init"
#2146: FILE: kernel/kgdb.c:1580:
+	if (kgdb_io_ops.init != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:CONST_STRUCT: struct kgdb_io should normally be const
#2148: FILE: kernel/kgdb.c:1582:
+		       &kgdb_io_ops, sizeof(struct kgdb_io));

WARNING:CONST_STRUCT: struct kgdb_io should normally be const
#2153: FILE: kernel/kgdb.c:1587:
+	memcpy(&kgdb_io_ops, local_kgdb_io_ops, sizeof(struct kgdb_io));

WARNING:CONST_STRUCT: struct kgdb_io should normally be const
#2161: FILE: kernel/kgdb.c:1595:
+void kgdb_unregister_io_module(struct kgdb_io *local_kgdb_io_ops)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "kgdb_io_ops_prev[0].init"
#2168: FILE: kernel/kgdb.c:1602:
+	if (kgdb_io_handler_cnt > 0 && kgdb_io_ops_prev[0].init != NULL) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2170: FILE: kernel/kgdb.c:1604:
+		 * removed */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2173: FILE: kernel/kgdb.c:1607:
+			 * shifed */

WARNING:CONST_STRUCT: struct kgdb_io should normally be const
#2176: FILE: kernel/kgdb.c:1610:
+			       sizeof(struct kgdb_io));

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2179: FILE: kernel/kgdb.c:1613:
+			 * that is not in use */

WARNING:CONST_STRUCT: struct kgdb_io should normally be const
#2193: FILE: kernel/kgdb.c:1627:
+			       sizeof(struct kgdb_io));

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2196: FILE: kernel/kgdb.c:1630:
+		 * to NULL; */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2200: FILE: kernel/kgdb.c:1634:
+			printk(KERN_ERR "kgdb: WARNING: I/O method changed "

WARNING:SPLIT_STRING: quoted string split across lines
#2201: FILE: kernel/kgdb.c:1635:
+			printk(KERN_ERR "kgdb: WARNING: I/O method changed "
+			       "while kgdb was connected state, "

WARNING:SPLIT_STRING: quoted string split across lines
#2202: FILE: kernel/kgdb.c:1636:
+			       "while kgdb was connected state, "
+			       "further debugging may not be " "possible\n");

WARNING:STRING_FRAGMENTS: Consecutive strings are generally better as a single string
#2202: FILE: kernel/kgdb.c:1636:
+			       "further debugging may not be " "possible\n");

WARNING:CONST_STRUCT: struct kgdb_io should normally be const
#2208: FILE: kernel/kgdb.c:1642:
+		memset(&kgdb_io_ops, 0, sizeof(struct kgdb_io));

WARNING:TYPO_SPELLING: 'defering' may be misspelled - perhaps 'deferring'?
#2291: FILE: kernel/kgdb.c:1725:
+			 * I/O init fails KGDB must default to defering the
 			                                       ^^^^^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2295: FILE: kernel/kgdb.c:1729:
+			printk(KERN_ERR "kgdb: Could not setup core I/O "

WARNING:SPLIT_STRING: quoted string split across lines
#2296: FILE: kernel/kgdb.c:1730:
+			printk(KERN_ERR "kgdb: Could not setup core I/O "
+			       "for KGDB.\n");

WARNING:TYPO_SPELLING: 'Defering' may be misspelled - perhaps 'Deferring'?
#2297: FILE: kernel/kgdb.c:1731:
+			printk(KERN_INFO "kgdb: Defering I/O setup to kernel "
 			                        ^^^^^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2297: FILE: kernel/kgdb.c:1731:
+			printk(KERN_INFO "kgdb: Defering I/O setup to kernel "

WARNING:SPLIT_STRING: quoted string split across lines
#2298: FILE: kernel/kgdb.c:1732:
+			printk(KERN_INFO "kgdb: Defering I/O setup to kernel "
+			       "module.\n");

WARNING:CONST_STRUCT: struct kgdb_io should normally be const
#2299: FILE: kernel/kgdb.c:1733:
+			memset(&kgdb_io_ops, 0, sizeof(struct kgdb_io));

WARNING:TYPO_SPELLING: 'Defering' may be misspelled - perhaps 'Deferring'?
#2301: FILE: kernel/kgdb.c:1735:
+			printk(KERN_INFO "kgdb: Defering I/O setup to kernel "
 			                        ^^^^^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2301: FILE: kernel/kgdb.c:1735:
+			printk(KERN_INFO "kgdb: Defering I/O setup to kernel "

WARNING:SPLIT_STRING: quoted string split across lines
#2302: FILE: kernel/kgdb.c:1736:
+			printk(KERN_INFO "kgdb: Defering I/O setup to kernel "
+			       "module.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#2321: FILE: kernel/kgdb.c:1755:
+		printk(KERN_CRIT "kgdb: Waiting for connection from remote"

WARNING:SPLIT_STRING: quoted string split across lines
#2322: FILE: kernel/kgdb.c:1756:
+		printk(KERN_CRIT "kgdb: Waiting for connection from remote"
+		       " gdb...\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#2342: FILE: kernel/kgdb.c:1776:
+			printk(KERN_CRIT "Waiting for connection from remote "

WARNING:SPLIT_STRING: quoted string split across lines
#2343: FILE: kernel/kgdb.c:1777:
+			printk(KERN_CRIT "Waiting for connection from remote "
+			       "gdb...\n");

CHECK:BRACES: Unbalanced braces around else statement
#2344: FILE: kernel/kgdb.c:1778:
+		else {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#2345: FILE: kernel/kgdb.c:1779:
+			printk(KERN_CRIT "KGDB cannot initialize I/O yet.\n");

WARNING:MEMORY_BARRIER: memory barrier without comment
#2351: FILE: kernel/kgdb.c:1785:
+	wmb();

WARNING:MEMORY_BARRIER: memory barrier without comment
#2353: FILE: kernel/kgdb.c:1787:
+	wmb();

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2357: FILE: kernel/kgdb.c:1791:
+EXPORT_SYMBOL(breakpoint);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2363: FILE: kernel/kgdb.c:1797:
+	printk("Entering GDB stub\n");

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2366: FILE: kernel/kgdb.c:1800:
+}
+static struct sysrq_key_op sysrq_gdb_op = {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2374: FILE: kernel/kgdb.c:1808:
+	printk("Registering GDB sysrq handler\n");

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2383: FILE: kernel/kgdb.c:1817:
+void kgdb_console_write(struct console *co, const char *s, unsigned count)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2388: FILE: kernel/kgdb.c:1822:
+	 * and print. */

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2402: FILE: kernel/kgdb.c:1836:
+};
+static int __init kgdb_console_init(void)

WARNING:MAINTAINERS_STYLE: Misordered MAINTAINERS entry - list 'M:' before 'P:'
#2554: FILE: MAINTAINERS:1355:
+P:	Amit S. Kale
+M:	trini@kernel.crashing.org

WARNING:MAINTAINERS_STYLE: Misordered MAINTAINERS entry - list 'L:' before 'W:'
#2557: FILE: MAINTAINERS:1358:
+W:	http://sourceforge.net/projects/kgdb
+L:	kgdb-bugreport@lists.sourceforge.net

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000156440.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 20 errors, 172 warnings, 59 checks, 2463 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000156440.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
