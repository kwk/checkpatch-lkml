WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#62: 
diff -Naurp -X /home/rddunlap/doc/dontdiff-osdl linux-266-pv/arch/i386/Kconfig linux-266-modprof/arch/i386/Kconfig

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#69: FILE: arch/i386/Kconfig:1297:
+config MODULE_PROFILE
+	bool "Module profiling support"
+	select PROFILING
+	help
+	  This enables profiling of kernel loadable modules.
+

Kconfig symbols should have a help text which fully describes
it.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#156: FILE: fs/proc/proc_misc.c:582:
+#ifdef CONFIG_MODULE_PROFILE^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#167: FILE: fs/proc/proc_misc.c:650:
+		extern struct file_operations proc_profile_operations;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:CONST_STRUCT: struct file_operations should normally be const
#167: FILE: fs/proc/proc_misc.c:650:
+		extern struct file_operations proc_profile_operations;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#173: FILE: fs/proc/proc_misc.c:656:
+#ifdef CONFIG_MODULE_PROFILE^I$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#188: FILE: include/asm-i386/hw_irq.h:81:
+	unsigned int * targ_prof_buffer;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BRACES: braces {} are not necessary for single statement blocks
#195: FILE: include/asm-i386/hw_irq.h:87:
+	if (user_mode(regs)) {
 		return;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BRACES: braces {} are not necessary for single statement blocks
#200: FILE: include/asm-i386/hw_irq.h:91:
+	if (!prof_buffer) {
 		return;
+	}

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#211: FILE: include/asm-i386/hw_irq.h:101:
+	if (!((1<<smp_processor_id()) & prof_cpu_mask)) {
 	        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BRACES: braces {} are not necessary for single statement blocks
#211: FILE: include/asm-i386/hw_irq.h:101:
+	if (!((1<<smp_processor_id()) & prof_cpu_mask)) {
 		return;
+	}

CHECK:SPACING: No space is necessary after a cast
#225: FILE: include/asm-i386/hw_irq.h:114:
+	eip -= (unsigned long) &_stext;

WARNING:CONST_STRUCT: struct file_operations should normally be const
#256: FILE: include/linux/proc_fs.h:118:
+extern struct file_operations proc_mprof_operations;

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#359: FILE: include/linux/profile.h:124:
+	}
+	else if (pc < (unsigned long)&_etext) { /* kernel profile */

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#363: FILE: include/linux/profile.h:128:
+	}
+	else if (pc < (unsigned long)&__init_end) { /* kernel init/exit code */

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#367: FILE: include/linux/profile.h:132:
+	}
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#367: FILE: include/linux/profile.h:132:
+	else {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#388: FILE: kernel/kallsyms.c:177:
+	unsigned stemlen, off = iter->nameoff;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#397: FILE: kernel/kallsyms.c:183:
+	strlcpy(iter->name+stemlen, kallsyms_names + off, 128-stemlen);
 	                  ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#397: FILE: kernel/kallsyms.c:183:
+	strlcpy(iter->name+stemlen, kallsyms_names + off, 128-stemlen);
 	                                                     ^

WARNING:STRLCPY: Prefer strscpy over strlcpy - see: https://lore.kernel.org/r/CAHk-=wgfRnXz0W3D37d01q3JFkr_i_uTL=V6A6G1oUZcprmknw@mail.gmail.com/
#397: FILE: kernel/kallsyms.c:183:
+	strlcpy(iter->name+stemlen, kallsyms_names + off, 128-stemlen);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#460: FILE: kernel/module.c:1569:
+		printk(KERN_WARNING "%s: creation of module "

WARNING:SPLIT_STRING: quoted string split across lines
#461: FILE: kernel/module.c:1570:
+		printk(KERN_WARNING "%s: creation of module "
+			"profiling buffer failed for module(%s).\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#462: FILE: kernel/module.c:1571:
+			__FUNCTION__, mod->name);

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#482: FILE: kernel/profile.c:17:
+#include <asm/uaccess.h>

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#509: FILE: kernel/profile.c:166:
+};
+struct mprof_info *module_profile_info = &mprof_info;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#525: FILE: kernel/profile.c:182:
+		snprintf(proc_name, l+1, "%s_profile", mod->name);
 		                     ^

WARNING:STATIC_CONST_CHAR_ARRAY: const array should probably be static const
#542: FILE: kernel/profile.c:199:
+	const char symprefix[] = "__insmod_";

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!proc_root_mprof"
#544: FILE: kernel/profile.c:201:
+	if (proc_root_mprof == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*new_mprof)...) over kmalloc(sizeof(struct module_profile)...)
#550: FILE: kernel/profile.c:207:
+	new_mprof = kmalloc(sizeof(struct module_profile), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!new_mprof"
#551: FILE: kernel/profile.c:208:
+	if (new_mprof == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!name_prefix"
#567: FILE: kernel/profile.c:224:
+	if (name_prefix == NULL) {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#571: FILE: kernel/profile.c:228:
+	snprintf(name_prefix, l+1, "%s%s_S.text_L", symprefix, mod->name);
 	                       ^

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#574: FILE: kernel/profile.c:231:
+	for (i = mod->num_syms, sym = mod->syms; i > 0; --i, ++sym) {
+

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#578: FILE: kernel/profile.c:235:
+			text_size = simple_strtoul(sym->name + l, NULL, 10);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#582: FILE: kernel/profile.c:239:
+				printk(KERN_ERR

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#584: FILE: kernel/profile.c:241:
+					__FUNCTION__, name_prefix);

WARNING:TYPO_SPELLING: 'registed' may be misspelled - perhaps 'registered'?
#597: FILE: kernel/profile.c:254:
+	/* if symbol "%s%s_S.text_L%d" is not registed in ksym,
 	                                      ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#598: FILE: kernel/profile.c:255:
+	/* if symbol "%s%s_S.text_L%d" is not registed in ksym,
+	   look on whole module as .text */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#598: FILE: kernel/profile.c:255:
+	   look on whole module as .text */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#600: FILE: kernel/profile.c:257:
+		printk(KERN_DEBUG "modprof: defaulting to entire module as .text:\n");

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#601: FILE: kernel/profile.c:258:
+#if 0

WARNING:IF_1: Consider removing the #if 1 and its #endif
#607: FILE: kernel/profile.c:264:
+#if 1

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!new_mprof->prof_buffer"
#625: FILE: kernel/profile.c:282:
+	if (new_mprof->prof_buffer == NULL) {

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#633: FILE: kernel/profile.c:290:
+	 * create /proc/mprof/$(mod->name)_profile
+	*/

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!new_mprof->proc_name"
#635: FILE: kernel/profile.c:292:
+	if (new_mprof->proc_name == NULL) {

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#641: FILE: kernel/profile.c:298:
+	entry = create_proc_entry(new_mprof->proc_name, S_IWUSR|S_IRUGO,
 	                                                       ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR|S_IRUGO' are not preferred. Consider using octal permissions '0644'.
#641: FILE: kernel/profile.c:298:
+	entry = create_proc_entry(new_mprof->proc_name, S_IWUSR|S_IRUGO,

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#642: FILE: kernel/profile.c:299:
+	entry = create_proc_entry(new_mprof->proc_name, S_IWUSR|S_IRUGO,
+					proc_root_mprof);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!proc_root_mprof"
#701: FILE: kernel/profile.c:358:
+	if (proc_root_mprof == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#725: FILE: kernel/profile.c:382:
+		printk(KERN_WARNING "delete_module_profile: "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'delete_module_profile', this function's name, in a string
#725: FILE: kernel/profile.c:382:
+		printk(KERN_WARNING "delete_module_profile: "

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:SPLIT_STRING: quoted string split across lines
#726: FILE: kernel/profile.c:383:
+		printk(KERN_WARNING "delete_module_profile: "
+			"no profiling buffer for module(%s).\n", mod->name);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#776: FILE: kernel/profile.c:433:
+static ssize_t read_module_profile(struct file *file, char *buf,
+					size_t count, loff_t *ppos)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#786: FILE: kernel/profile.c:443:
+		printk(KERN_DEBUG "read_module_profile: search_module_profile failed\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'read_module_profile', this function's name, in a string
#786: FILE: kernel/profile.c:443:
+		printk(KERN_DEBUG "read_module_profile: search_module_profile failed\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#824: FILE: kernel/profile.c:481:
+		memset(mprof->prof_buffer, 0,
+			mprof->prof_len * sizeof(*mprof->prof_buffer));

WARNING:CONST_STRUCT: struct file_operations should normally be const
#830: FILE: kernel/profile.c:487:
+struct file_operations proc_mprof_operations = {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#843: FILE: kernel/profile.c:500:
+ssize_t read_profile(struct file *file, char __user *buf,
+			size_t count, loff_t *ppos)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#847: FILE: kernel/profile.c:504:
+	char * pnt;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#861: FILE: kernel/profile.c:518:
+	copy_to_user(buf,(void *)pnt, count);
 	                ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#873: FILE: kernel/profile.c:530:
+ssize_t write_profile(struct file * file, const char __user *buf,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#874: FILE: kernel/profile.c:531:
+ssize_t write_profile(struct file * file, const char __user *buf,
+			size_t count, loff_t *ppos)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#877: FILE: kernel/profile.c:534:
+	extern int setup_profiling_timer (unsigned int multiplier);

WARNING:CONST_STRUCT: struct file_operations should normally be const
#898: FILE: kernel/profile.c:555:
+struct file_operations proc_profile_operations = {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#917: FILE: scripts/kallsyms.c:121:
+			 * make sure that _etext is in kallsyms */

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000282268.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 9 errors, 35 warnings, 22 checks, 816 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000282268.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
