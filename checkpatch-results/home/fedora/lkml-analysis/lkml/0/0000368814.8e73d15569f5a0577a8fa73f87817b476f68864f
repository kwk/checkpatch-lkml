WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#57: 
diff -urpN --exclude TAGS -X /home/rusty/devel/kernel/kernel-patches/current-dontdiff --minimal .31630-linux-2.5.69-bk13/include/asm-alpha/percpu.h .31630-linux-2.5.69-bk13.updated/include/asm-alpha/percpu.h

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#219: FILE: include/linux/percpu.h:32:
+extern void setup_per_cpu_areas(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#300: FILE: mm/percpu.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#307: FILE: mm/percpu.c:8:
+/* Simple linked list allocator: we don't stress it hard, but do want
+   it space-efficient.  We keep the bookkeeping separately. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#307: FILE: mm/percpu.c:8:
+   it space-efficient.  We keep the bookkeeping separately. */

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#330: FILE: mm/percpu.c:31:
+	return vmalloc(size * NR_CPUS);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#343: FILE: mm/percpu.c:44:
+	ptr = alloc_bootmem(*size * NR_CPUS);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#344: FILE: mm/percpu.c:45:
+	for (i = 0; i < NR_CPUS; i++) {

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#345: FILE: mm/percpu.c:46:
+		__per_cpu_offset[i] = ptr + *size*i - (void *)__per_cpu_start;
 		                                 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#346: FILE: mm/percpu.c:47:
+		memcpy(ptr + *size*i, __per_cpu_start,
 		                  ^

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#355: FILE: mm/percpu.c:56:
+struct pcpu_block
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#377: FILE: mm/percpu.c:78:
+			      + sizeof(b->size[0]) * b->num_allocated*2,
 			                                             ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#384: FILE: mm/percpu.c:85:
+		memcpy(new->size, b->size, sizeof(b->size[0])*b->num_used);
 		                                             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#392: FILE: mm/percpu.c:93:
+	memmove(&b->size[i+1], &b->size[i],
 	                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#396: FILE: mm/percpu.c:97:
+	b->size[i+1] -= size;
 	         ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#407: FILE: mm/percpu.c:108:
+	b = kmalloc(sizeof(*b) + PERCPU_INIT_BLOCKS*sizeof(int), GFP_KERNEL);
 	                                           ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#438: FILE: mm/percpu.c:139:
+	BUG_ON(align > SMP_CACHE_BYTES);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#439: FILE: mm/percpu.c:140:
+	BUG_ON(size > PERCPU_MAX);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#440: FILE: mm/percpu.c:141:
+	BUG_ON(!percpu_block_size);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#452: FILE: mm/percpu.c:153:
+			BUG_ON(i == 0 && extra != 0);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#458: FILE: mm/percpu.c:159:
+			if (b->size[i-1] < 0)
 			             ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#459: FILE: mm/percpu.c:160:
+				b->size[i-1] -= extra;
 				         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#461: FILE: mm/percpu.c:162:
+				b->size[i-1] += extra;
 				         ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#468: FILE: mm/percpu.c:169:
+				struct pcpu_block *realloc;
+				realloc = split_block(b, i, size);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#476: FILE: mm/percpu.c:177:
+^I^I^I/* Pointer will be offset by this: compensate. */ $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#477: FILE: mm/percpu.c:178:
+^I^I^Iret = RELOC_HIDE(ptr, -(percpu_base $

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#479: FILE: mm/percpu.c:180:
+			for (i = 0; i < NR_CPUS; i++)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#498: FILE: mm/percpu.c:199:
+	BUG_ON(b->size[i] >= 0);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#502: FILE: mm/percpu.c:203:
+	if (i > 0 && b->size[i-1] >= 0) {
 	                      ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#503: FILE: mm/percpu.c:204:
+		b->size[i-1] += b->size[i];
 		         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#505: FILE: mm/percpu.c:206:
+		memmove(&b->size[i], &b->size[i+1],
 		                               ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#510: FILE: mm/percpu.c:211:
+	if (i+1 < b->num_used && b->size[i+1] >= 0) {
 	     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#510: FILE: mm/percpu.c:211:
+	if (i+1 < b->num_used && b->size[i+1] >= 0) {
 	                                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#511: FILE: mm/percpu.c:212:
+		b->size[i] += b->size[i+1];
 		                       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#513: FILE: mm/percpu.c:214:
+		memmove(&b->size[i+1], &b->size[i+2],
 		                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#513: FILE: mm/percpu.c:214:
+		memmove(&b->size[i+1], &b->size[i+2],
 		                                 ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#514: FILE: mm/percpu.c:215:
+			(b->num_used - (i+1)) * sizeof(b->size[0]));
 			                 ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#528: FILE: mm/percpu.c:229:
+^I/* Pointer will be offset by this amount: compensate. */ $

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#544: FILE: mm/percpu.c:245:
+	BUG();

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#570: FILE: mm/percpu.c:271:
+	printk("Per-cpu data: %Zu of %lu bytes at %p\n",

WARNING:PRINTF_Z: %Zu is non-standard C, use %zu
#570: FILE: mm/percpu.c:271:
+	printk("Per-cpu data: %Zu of %lu bytes at %p\n",

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#574: FILE: mm/percpu.c:275:
+	pcpu = kmalloc(sizeof(*pcpu)+sizeof(pcpu->size[0])*PERCPU_INIT_BLOCKS,
 	                            ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#574: FILE: mm/percpu.c:275:
+	pcpu = kmalloc(sizeof(*pcpu)+sizeof(pcpu->size[0])*PERCPU_INIT_BLOCKS,
 	                                                  ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#579: FILE: mm/percpu.c:280:
+	pcpu->size[1] = percpu_block_size-(__per_cpu_end - __per_cpu_start);
 	                                 ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#717: FILE: arch/ia64/kernel/setup.c:662:
+/* FIXME: Implement.  This would need to allocate size * NR_CPUS, and
+   set up a different mapping on each CPU at that address minus

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#719: FILE: arch/ia64/kernel/setup.c:664:
+   ensure we can do that.  --RR */

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#722: FILE: arch/ia64/kernel/setup.c:667:
+	static int warned = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARN ...
#725: FILE: arch/ia64/kernel/setup.c:670:
+		printk(KERN_WARN "Out of per-cpu address space\n");

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#728: FILE: arch/ia64/kernel/setup.c:673:
+}
+static inline void free_percpumem(void *ptr, size_t size)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#730: FILE: arch/ia64/kernel/setup.c:675:
+	BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#738: FILE: arch/ia64/kernel/setup.c:683:
+	BUG_ON(*size > PERCPU_PAGE_SIZE);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#741: FILE: arch/ia64/kernel/setup.c:686:
+	ptr = __alloc_bootmem(PERCPU_PAGE_SIZE * NR_CPUS, PERCPU_PAGE_SIZE,

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#743: FILE: arch/ia64/kernel/setup.c:688:
+	for (i = 0; i < NR_CPUS; i++) {

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#744: FILE: arch/ia64/kernel/setup.c:689:
+		__per_cpu_offset[i] = ptr + *size*i - (void *)__per_cpu_start;
 		                                 ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#745: FILE: arch/ia64/kernel/setup.c:690:
+		memcpy(ptr + *size*i, __per_cpu_start,
 		                  ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000368814.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 5 errors, 24 warnings, 26 checks, 636 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000368814.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
