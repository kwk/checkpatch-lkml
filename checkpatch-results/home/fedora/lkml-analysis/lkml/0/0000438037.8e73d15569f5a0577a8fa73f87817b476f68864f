WARNING:TYPO_SPELLING: 'beeing' may be misspelled - perhaps 'being'?
#44: 
These changes should solve the problem of long running tasks beeing
                                                             ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'beeing' may be misspelled - perhaps 'being'?
#46: 
machine and not beeing able to return to their homenodes even if those
                ^^^^^^

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#89: 
--- a/arch/i386/config.in	Wed Aug 21 15:43:52 2002

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#109: FILE: arch/i386/kernel/smpboot.c:767:
+static int __initdata nr_lnodes = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:MISPLACED_INIT: __initdata should be placed after nr_lnodes
#109: FILE: arch/i386/kernel/smpboot.c:767:
+static int __initdata nr_lnodes = 0;

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

WARNING:BRACES: braces {} are not necessary for single statement blocks
#126: FILE: arch/i386/kernel/smpboot.c:784:
+	if (pnode_to_lnode[cell] < 0) {
+		pnode_to_lnode[cell] = nr_lnodes++;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LONG_LINE: line length of 116 exceeds 100 columns
#139: FILE: arch/i386/kernel/smpboot.c:1008:
+	printk("boot_cpu_apicid = %d, nr_lnodes = %d, lnode = %d\n", boot_cpu_apicid, nr_lnodes, pnode_to_lnode[0]);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#139: FILE: arch/i386/kernel/smpboot.c:1008:
+	printk("boot_cpu_apicid = %d, nr_lnodes = %d, lnode = %d\n", boot_cpu_apicid, nr_lnodes, pnode_to_lnode[0]);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#197: FILE: arch/ia64/kernel/smpboot.c:112:
+	for (end = n-1; end >= 0; end--) {
 	            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#199: FILE: arch/ia64/kernel/smpboot.c:114:
+			if (a[j] > a[j+1]) {
 			              ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#200: FILE: arch/ia64/kernel/smpboot.c:115:
+				t = a[j+1];
 				       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#201: FILE: arch/ia64/kernel/smpboot.c:116:
+				a[j+1] = a[j];
 				   ^

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#216: FILE: arch/ia64/kernel/smpboot.c:385:
+static int __initdata nr_lnodes=0;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#216: FILE: arch/ia64/kernel/smpboot.c:385:
+static int __initdata nr_lnodes=0;
                                ^

WARNING:MISPLACED_INIT: __initdata should be placed after nr_lnodes
#216: FILE: arch/ia64/kernel/smpboot.c:385:
+static int __initdata nr_lnodes=0;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#228: FILE: arch/ia64/kernel/smpboot.c:396:
+	if (pnode_to_lnode[cell] < 0) {
+		pnode_to_lnode[cell] = nr_lnodes++;
+	}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#259: FILE: arch/ia64/kernel/smpboot.c:523:
+^I/* $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#260: FILE: arch/ia64/kernel/smpboot.c:524:
+ ^I * To be on the safe side: sort SAPIC IDs of CPUs$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#260: FILE: arch/ia64/kernel/smpboot.c:524:
+ ^I * To be on the safe side: sort SAPIC IDs of CPUs$

ERROR:CODE_INDENT: code indent should use tabs where possible
#261: FILE: arch/ia64/kernel/smpboot.c:525:
+ ^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#261: FILE: arch/ia64/kernel/smpboot.c:525:
+ ^I */$

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#295: FILE: include/asm-i386/atomic.h:120:
+static inline int atomic_inc_return(atomic_t *v){

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required before the open brace '{'
#295: FILE: include/asm-i386/atomic.h:120:
+static inline int atomic_inc_return(atomic_t *v){

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'hwid' may be better as '(hwid)' to avoid precedence issues
#314: FILE: include/asm-i386/smp.h:130:
+#define SAPICID_TO_PNODE(hwid)  (hwid >> 4)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#339: FILE: include/asm-ia64/smp.h:138:
+/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#340: FILE: include/asm-ia64/smp.h:139:
+ * This is the node ID on the NEC AzusA, $

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'hwid' may be better as '(hwid)' to avoid precedence issues
#343: FILE: include/asm-ia64/smp.h:142:
+#define SAPICID_TO_PNODE(hwid) ((hwid >> 12) & 0xff)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#386: FILE: include/linux/sched.h:159:
+extern void sched_balance_exec(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#387: FILE: include/linux/sched.h:160:
+extern void sched_balance_fork(task_t *p);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#388: FILE: include/linux/sched.h:161:
+extern void set_task_node(task_t *p, int node);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#392: FILE: include/linux/sched.h:165:
+#define set_task_node(p,n) {}
                        ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#394: FILE: include/linux/sched.h:167:
+extern void sched_migrate_task(task_t *p, int cpu);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#425: FILE: include/linux/sched.h:446:
+#define POOL_DELAY(this_node,node)      \
                             ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'this_node' may be better as '(this_node)' to avoid precedence issues
#425: FILE: include/linux/sched.h:446:
+#define POOL_DELAY(this_node,node)      \
+                (_pool_delay[this_node * numpools + node])

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'node' may be better as '(node)' to avoid precedence issues
#425: FILE: include/linux/sched.h:446:
+#define POOL_DELAY(this_node,node)      \
+                (_pool_delay[this_node * numpools + node])

ERROR:CODE_INDENT: code indent should use tabs where possible
#426: FILE: include/linux/sched.h:447:
+                (_pool_delay[this_node * numpools + node])$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#426: FILE: include/linux/sched.h:447:
+                (_pool_delay[this_node * numpools + node])$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#427: FILE: include/linux/sched.h:448:
+#define POOL_WEIGHT(this_node,node)     \
                              ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'this_node' may be better as '(this_node)' to avoid precedence issues
#427: FILE: include/linux/sched.h:448:
+#define POOL_WEIGHT(this_node,node)     \
+                (_pool_weight[this_node * numpools + node])

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'node' may be better as '(node)' to avoid precedence issues
#427: FILE: include/linux/sched.h:448:
+#define POOL_WEIGHT(this_node,node)     \
+                (_pool_weight[this_node * numpools + node])

ERROR:CODE_INDENT: code indent should use tabs where possible
#428: FILE: include/linux/sched.h:449:
+                (_pool_weight[this_node * numpools + node])$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#428: FILE: include/linux/sched.h:449:
+                (_pool_weight[this_node * numpools + node])$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#439: FILE: include/linux/sched.h:460:
+extern int pool_ptr[NR_NODES+1];
                             ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#449: FILE: include/linux/sched.h:470:
+extern void pooldata_lock(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#450: FILE: include/linux/sched.h:471:
+extern void pooldata_unlock(void);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#451: FILE: include/linux/sched.h:472:
+# define HOMENODE_INC(rq,node) (rq)->nr_homenode[node]++
                         ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#451: FILE: include/linux/sched.h:472:
+# define HOMENODE_INC(rq,node) (rq)->nr_homenode[node]++

ERROR:SPACING: space required after that ',' (ctx:VxV)
#452: FILE: include/linux/sched.h:473:
+# define HOMENODE_DEC(rq,node) (rq)->nr_homenode[node]--
                         ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#452: FILE: include/linux/sched.h:473:
+# define HOMENODE_DEC(rq,node) (rq)->nr_homenode[node]--

ERROR:SPACING: space required after that ',' (ctx:VxV)
#454: FILE: include/linux/sched.h:475:
+# define HOMENODE_INC(rq,node) {}
                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#455: FILE: include/linux/sched.h:476:
+# define HOMENODE_DEC(rq,node) {}
                         ^

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#467: FILE: kernel/fork.c:731:
+		if (p->node_policy == NODPOL_FORK_ALL ||
+		    (p->node_policy == NODPOL_FORK && !(clone_flags & CLONE_VM)))
+			{

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#487: FILE: kernel/ksyms.c:608:
+EXPORT_SYMBOL(numpools);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#488: FILE: kernel/ksyms.c:609:
+EXPORT_SYMBOL(pool_ptr);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#489: FILE: kernel/ksyms.c:610:
+EXPORT_SYMBOL(pool_cpus);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#490: FILE: kernel/ksyms.c:611:
+EXPORT_SYMBOL(pool_nr_cpus);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#491: FILE: kernel/ksyms.c:612:
+EXPORT_SYMBOL(pool_mask);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#492: FILE: kernel/ksyms.c:613:
+EXPORT_SYMBOL(sched_migrate_task);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#537: FILE: kernel/sched.c:202:
+int pool_ptr[NR_NODES+1] = { 0, NR_CPUS, };
                      ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#537: FILE: kernel/sched.c:202:
+int pool_ptr[NR_NODES+1] = { 0, NR_CPUS, };

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#539: FILE: kernel/sched.c:204:
+int pool_nr_cpus[NR_NODES] = { NR_CPUS, };

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#541: FILE: kernel/sched.c:206:
+int pnode_to_lnode[NR_NODES] = { [0 ... NR_NODES-1] = -1 };
                                                 ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#544: FILE: kernel/sched.c:209:
+static int _pool_delay[NR_NODES*NR_NODES] __cacheline_aligned;
                                ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#545: FILE: kernel/sched.c:210:
+static int _pool_weight[NR_NODES*NR_NODES] __cacheline_aligned;
                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#557: FILE: kernel/sched.c:332:
+	HOMENODE_INC(rq,p->node);
 	               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#565: FILE: kernel/sched.c:340:
+	HOMENODE_DEC(rq,p->node);
 	               ^

ERROR:SPACING: spaces required around that '=' (ctx:VxO)
#621: FILE: kernel/sched.c:689:
+	int i, ii, idx=-1, refload, load;
 	              ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#621: FILE: kernel/sched.c:689:
+	int i, ii, idx=-1, refload, load;
 	               ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#658: FILE: kernel/sched.c:694:
+	for (ii = pool_ptr[pool]; ii < pool_ptr[pool+1]; ii++) {
 	                                            ^

WARNING:TYPO_SPELLING: 'easilly' may be misspelled - perhaps 'easily'?
#702: FILE: kernel/sched.c:733:
+ * This concept can be extended easilly to more than two levels (multi-level
                                 ^^^^^^^

ERROR:SPACING: spaces required around that '=' (ctx:VxO)
#712: FILE: kernel/sched.c:743:
+	int avg_load=-1, this_pool = CPU_TO_NODE(this_cpu);
 	            ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#712: FILE: kernel/sched.c:743:
+	int avg_load=-1, this_pool = CPU_TO_NODE(this_cpu);
 	             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#715: FILE: kernel/sched.c:746:
+#define BALANCED(m,t) (((m) <= 1) || (((m) - (t))/2 < (((m) + (t))/2 + 3)/4))
                   ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#715: FILE: kernel/sched.c:746:
+#define BALANCED(m,t) (((m) <= 1) || (((m) - (t))/2 < (((m) + (t))/2 + 3)/4))
                                                  ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#715: FILE: kernel/sched.c:746:
+#define BALANCED(m,t) (((m) <= 1) || (((m) - (t))/2 < (((m) + (t))/2 + 3)/4))
                                                                   ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#715: FILE: kernel/sched.c:746:
+#define BALANCED(m,t) (((m) <= 1) || (((m) - (t))/2 < (((m) + (t))/2 + 3)/4))
                                                                          ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'm' - possible side-effects?
#715: FILE: kernel/sched.c:746:
+#define BALANCED(m,t) (((m) <= 1) || (((m) - (t))/2 < (((m) + (t))/2 + 3)/4))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 't' - possible side-effects?
#715: FILE: kernel/sched.c:746:
+#define BALANCED(m,t) (((m) <= 1) || (((m) - (t))/2 < (((m) + (t))/2 + 3)/4))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'this_rq->nr_running > this_rq->prev_nr_running[this_cpu]'
#718: FILE: kernel/sched.c:748:
+	if (idle || (this_rq->nr_running > this_rq->prev_nr_running[this_cpu]))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#738: FILE: kernel/sched.c:765:
+		avg_load += this_rq->load[1][pool]*pool_nr_cpus[pool];
 		                                  ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'best_cpu < 0'
#746: FILE: kernel/sched.c:773:
+	if ((best_cpu < 0) ||
+	    BALANCED(max_pool_load,this_rq->load[1][this_pool])) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#747: FILE: kernel/sched.c:774:
+	    BALANCED(max_pool_load,this_rq->load[1][this_pool])) {
 	                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#753: FILE: kernel/sched.c:780:
+	if (BALANCED(avg_load,this_rq->load[1][this_pool]))
 	                     ^

CHECK:BRACES: Unbalanced braces around else statement
#772: FILE: kernel/sched.c:789:
+	} else

ERROR:SPACING: space required after that ',' (ctx:VxV)
#774: FILE: kernel/sched.c:791:
+		    (POOL_DELAY(this_pool,this_rq->wait_node) >> del_shift))
 		                         ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#778: FILE: kernel/sched.c:795:
+	if (!BALANCED(this_rq->load[0][best_cpu],*nr_running)) {
 	                                        ^

ERROR:SPACING: space required before that '*' (ctx:OxV)
#778: FILE: kernel/sched.c:795:
+	if (!BALANCED(this_rq->load[0][best_cpu],*nr_running)) {
 	                                         ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#815: FILE: kernel/sched.c:807:
+ * while calling this routine. $

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#827: FILE: kernel/sched.c:815:
+	int this_pool=CPU_TO_NODE(this_cpu), weight, maxweight=0;
 	             ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#827: FILE: kernel/sched.c:815:
+	int this_pool=CPU_TO_NODE(this_cpu), weight, maxweight=0;
 	                                                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#838: FILE: kernel/sched.c:823:
+#define CAN_MIGRATE_TASK(p,rq,this_cpu)	\
                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#838: FILE: kernel/sched.c:823:
+#define CAN_MIGRATE_TASK(p,rq,this_cpu)	\
                              ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#838: FILE: kernel/sched.c:823:
+#define CAN_MIGRATE_TASK(p,rq,this_cpu)	\
+		((jiffies - (p)->sleep_timestamp > cache_decay_ticks) && \
+		p != rq->curr && \
+		 ((p)->cpus_allowed & (1UL<<(this_cpu))))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'rq' may be better as '(rq)' to avoid precedence issues
#838: FILE: kernel/sched.c:823:
+#define CAN_MIGRATE_TASK(p,rq,this_cpu)	\
+		((jiffies - (p)->sleep_timestamp > cache_decay_ticks) && \
+		p != rq->curr && \
+		 ((p)->cpus_allowed & (1UL<<(this_cpu))))

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#841: FILE: kernel/sched.c:826:
+		 ((p)->cpus_allowed & (1UL<<(this_cpu))))
 		                          ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#859: FILE: kernel/sched.c:861:
+		weight = (jiffies - tmp->sleep_timestamp)/cache_decay_ticks;
 		                                         ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#862: FILE: kernel/sched.c:864:
+		if (weight >= MAX_CACHE_WEIGHT) weight=MAX_CACHE_WEIGHT-1;
 		                                      ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#862: FILE: kernel/sched.c:864:
+		if (weight >= MAX_CACHE_WEIGHT) weight=MAX_CACHE_WEIGHT-1;
 		                                                       ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#862: FILE: kernel/sched.c:864:
+		if (weight >= MAX_CACHE_WEIGHT) weight=MAX_CACHE_WEIGHT-1;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#864: FILE: kernel/sched.c:866:
+		weight += POOL_WEIGHT(this_pool,tmp->node);
 		                               ^

WARNING:LONG_LINE: line length of 119 exceeds 100 columns
#888: FILE: kernel/sched.c:890:
+static inline void pull_task(runqueue_t *src_rq, prio_array_t *src_array, task_t *p, runqueue_t *this_rq, int this_cpu)

WARNING:LINE_SPACING: Missing a blank line after declarations
#914: FILE: kernel/sched.c:912:
+	runqueue_t *rq;
+	static int sched_push_task(task_t *p, int cpu_dest);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#935: FILE: kernel/sched.c:921:
+		int load = 0;
+		for (ii=pool_ptr[tgt_pool]; ii<pool_ptr[tgt_pool+1]; ii++) {

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#935: FILE: kernel/sched.c:921:
+		for (ii=pool_ptr[tgt_pool]; ii<pool_ptr[tgt_pool+1]; ii++) {
 		       ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#935: FILE: kernel/sched.c:921:
+		for (ii=pool_ptr[tgt_pool]; ii<pool_ptr[tgt_pool+1]; ii++) {
 		                              ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#935: FILE: kernel/sched.c:921:
+		for (ii=pool_ptr[tgt_pool]; ii<pool_ptr[tgt_pool+1]; ii++) {
 		                                                ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#941: FILE: kernel/sched.c:927:
+		if (load < BALANCE_FACTOR/4) {
 		                         ^

WARNING:TYPO_SPELLING: 'inbalance' may be misspelled - perhaps 'imbalance'?
#959: FILE: kernel/sched.c:939:
+ * inbalance (current runqueue is too short) then pull from
    ^^^^^^^^^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#973: FILE: kernel/sched.c:953:
+	if (atomic_read(&pool_lock)) return;

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1004: FILE: kernel/sched.c:987:
+#define BUSY_REBALANCE_TICK (HZ/5 ?: 1)
                                ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1013: FILE: kernel/sched.c:2022:
+static atomic_t sched_node=ATOMIC_INIT(0);
                           ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1022: FILE: kernel/sched.c:2031:
+^I$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1024: FILE: kernel/sched.c:2033:
+	for (n = pool_ptr[p->node]; n < pool_ptr[p->node+1]; n++) {
 	                                                ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1045: FILE: kernel/sched.c:2054:
+	int n, best_node=0, min_load, pool_load, min_pool=p->node;
 	                ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1045: FILE: kernel/sched.c:2054:
+	int n, best_node=0, min_load, pool_load, min_pool=p->node;
 	                                                 ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1071: FILE: kernel/sched.c:2080:
+		pool_load = (100*load[pool])/pool_nr_cpus[pool];
 		                ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1071: FILE: kernel/sched.c:2080:
+		pool_load = (100*load[pool])/pool_nr_cpus[pool];
 		                            ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pool_load < min_load'
#1072: FILE: kernel/sched.c:2081:
+		if ((pool_load < min_load) && (pool_mask[pool] & mask)) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1089: FILE: kernel/sched.c:2098:
+		if (new_node != current->node) {
+			set_task_node(current, new_node);
+		}

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1111: FILE: kernel/sched.c:2120:
+	printk("CPU pools : %d\n",numpools);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1111: FILE: kernel/sched.c:2120:
+	printk("CPU pools : %d\n",numpools);
 	                         ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1112: FILE: kernel/sched.c:2121:
+	for (i=0;i<numpools;i++) {
 	      ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#1112: FILE: kernel/sched.c:2121:
+	for (i=0;i<numpools;i++) {
 	        ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1112: FILE: kernel/sched.c:2121:
+	for (i=0;i<numpools;i++) {
 	          ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#1112: FILE: kernel/sched.c:2121:
+	for (i=0;i<numpools;i++) {
 	                   ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1113: FILE: kernel/sched.c:2122:
+		printk("pool %d :",i);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1113: FILE: kernel/sched.c:2122:
+		printk("pool %d :",i);
 		                  ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1114: FILE: kernel/sched.c:2123:
+		for (j=pool_ptr[i];j<pool_ptr[i+1];j++)
 		      ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#1114: FILE: kernel/sched.c:2123:
+		for (j=pool_ptr[i];j<pool_ptr[i+1];j++)
 		                  ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1114: FILE: kernel/sched.c:2123:
+		for (j=pool_ptr[i];j<pool_ptr[i+1];j++)
 		                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1114: FILE: kernel/sched.c:2123:
+		for (j=pool_ptr[i];j<pool_ptr[i+1];j++)
 		                               ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#1114: FILE: kernel/sched.c:2123:
+		for (j=pool_ptr[i];j<pool_ptr[i+1];j++)
 		                                  ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1115: FILE: kernel/sched.c:2124:
+			printk("%d ",pool_cpus[j]);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1115: FILE: kernel/sched.c:2124:
+			printk("%d ",pool_cpus[j]);
 			            ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1116: FILE: kernel/sched.c:2125:
+		printk("\n");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1124: FILE: kernel/sched.c:2133:
+	while (atomic_read(&pool_lock));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1129: FILE: kernel/sched.c:2138:
+^I/* $

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1134: FILE: kernel/sched.c:2143:
+	for (i=0; i<100; i++)
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1134: FILE: kernel/sched.c:2143:
+	for (i=0; i<100; i++)
 	           ^

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#1135: FILE: kernel/sched.c:2144:
+		udelay(1000);

usleep_range() should be preferred over udelay(). The proper way of
using usleep_range() is mentioned in the kernel docs.

See: https://www.kernel.org/doc/html/latest/timers/timers-howto.html#delays-information-on-the-various-kernel-delay-sleep-mechanisms

ERROR:SPACING: space prohibited after that open square bracket '['
#1152: FILE: kernel/sched.c:2161:
+int __node_distance[ 8 * 8]    = { 10, 15, 15, 15, 20, 20, 20, 20,

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1160: FILE: kernel/sched.c:2169:
+#define node_distance(i,j)  __node_distance[i*8+j]
                        ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1160: FILE: kernel/sched.c:2169:
+#define node_distance(i,j)  __node_distance[i*8+j]
                                              ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1160: FILE: kernel/sched.c:2169:
+#define node_distance(i,j)  __node_distance[i*8+j]
                                                ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'i' may be better as '(i)' to avoid precedence issues
#1160: FILE: kernel/sched.c:2169:
+#define node_distance(i,j)  __node_distance[i*8+j]

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'j' may be better as '(j)' to avoid precedence issues
#1160: FILE: kernel/sched.c:2169:
+#define node_distance(i,j)  __node_distance[i*8+j]

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1176: FILE: kernel/sched.c:2185:
+		for (i=1; i<numpools; i++) {
 		      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1176: FILE: kernel/sched.c:2185:
+		for (i=1; i<numpools; i++) {
 		           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1178: FILE: kernel/sched.c:2187:
+			if (lev > node_levels[nr_node_levels-1] &&
 			                                    ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1180: FILE: kernel/sched.c:2189:
+				if (tgtlev < 100000) nlarger++;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1183: FILE: kernel/sched.c:2192:
+			if (lev > tgtlev) nlarger++;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1189: FILE: kernel/sched.c:2198:
+	for (i=0; i<nr_node_levels; i++)
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1189: FILE: kernel/sched.c:2198:
+	for (i=0; i<nr_node_levels; i++)
 	           ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1190: FILE: kernel/sched.c:2199:
+		printk("node level %d : %d\n",i,node_levels[i]);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1190: FILE: kernel/sched.c:2199:
+		printk("node level %d : %d\n",i,node_levels[i]);
 		                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1190: FILE: kernel/sched.c:2199:
+		printk("node level %d : %d\n",i,node_levels[i]);
 		                               ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1201: FILE: kernel/sched.c:2210:
+	for (i=0; i<numpools; i++)
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1201: FILE: kernel/sched.c:2210:
+	for (i=0; i<numpools; i++)
 	           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1202: FILE: kernel/sched.c:2211:
+		for (j=0; j<numpools; j++)
 		      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1202: FILE: kernel/sched.c:2211:
+		for (j=0; j<numpools; j++)
 		           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1203: FILE: kernel/sched.c:2212:
+			for (lev=0; lev<nr_node_levels; lev++)
 			        ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1203: FILE: kernel/sched.c:2212:
+			for (lev=0; lev<nr_node_levels; lev++)
 			               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1204: FILE: kernel/sched.c:2213:
+				if (node_distance(i,j) == node_levels[lev]) {
 				                   ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1205: FILE: kernel/sched.c:2214:
+					_pool_weight[i*numpools+j] =
 					              ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1205: FILE: kernel/sched.c:2214:
+					_pool_weight[i*numpools+j] =
 					                       ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1206: FILE: kernel/sched.c:2215:
+						(2*(nr_node_levels-lev)-1)
 						  ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1206: FILE: kernel/sched.c:2215:
+						(2*(nr_node_levels-lev)-1)
 						                  ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1206: FILE: kernel/sched.c:2215:
+						(2*(nr_node_levels-lev)-1)
 						                       ^

CHECK:SPACING: spaces preferred around that '*' (ctx:ExV)
#1207: FILE: kernel/sched.c:2216:
+						*MAX_CACHE_WEIGHT;
 						^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1220: FILE: kernel/sched.c:2229:
+	for(i=0; i<numpools; i++)
 	     ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1220: FILE: kernel/sched.c:2229:
+	for(i=0; i<numpools; i++)
 	          ^

ERROR:SPACING: space required before the open parenthesis '('
#1220: FILE: kernel/sched.c:2229:
+	for(i=0; i<numpools; i++)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1221: FILE: kernel/sched.c:2230:
+		for(j=0; j<numpools; j++)
 		     ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1221: FILE: kernel/sched.c:2230:
+		for(j=0; j<numpools; j++)
 		          ^

ERROR:SPACING: space required before the open parenthesis '('
#1221: FILE: kernel/sched.c:2230:
+		for(j=0; j<numpools; j++)

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#1222: FILE: kernel/sched.c:2231:
+			_pool_delay[i * numpools + j] = HZ * \

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1223: FILE: kernel/sched.c:2232:
+				node_distance(i,j) / 77;
 				               ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1225: FILE: kernel/sched.c:2234:
+	printk("pool_delay matrix:\n");

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1226: FILE: kernel/sched.c:2235:
+	for(i=0; i<numpools; i++){
 	     ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1226: FILE: kernel/sched.c:2235:
+	for(i=0; i<numpools; i++){
 	          ^

ERROR:SPACING: space required before the open brace '{'
#1226: FILE: kernel/sched.c:2235:
+	for(i=0; i<numpools; i++){

ERROR:SPACING: space required before the open parenthesis '('
#1226: FILE: kernel/sched.c:2235:
+	for(i=0; i<numpools; i++){

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1227: FILE: kernel/sched.c:2236:
+		for(j=0; j<numpools; j++)
 		     ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1227: FILE: kernel/sched.c:2236:
+		for(j=0; j<numpools; j++)
 		          ^

ERROR:SPACING: space required before the open parenthesis '('
#1227: FILE: kernel/sched.c:2236:
+		for(j=0; j<numpools; j++)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1228: FILE: kernel/sched.c:2237:
+			printk("%4d ",_pool_delay[i*numpools+j]);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1228: FILE: kernel/sched.c:2237:
+			printk("%4d ",_pool_delay[i*numpools+j]);
 			             ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1228: FILE: kernel/sched.c:2237:
+			printk("%4d ",_pool_delay[i*numpools+j]);
 			                           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1228: FILE: kernel/sched.c:2237:
+			printk("%4d ",_pool_delay[i*numpools+j]);
 			                                    ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1229: FILE: kernel/sched.c:2238:
+		printk("\n");

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1240: FILE: kernel/sched.c:2249:
+	int flag[NR_CPUS] = { [ 0 ... NR_CPUS-1] = 0 };
 	                                     ^

ERROR:SPACING: space prohibited after that open square bracket '['
#1240: FILE: kernel/sched.c:2249:
+	int flag[NR_CPUS] = { [ 0 ... NR_CPUS-1] = 0 };

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1245: FILE: kernel/sched.c:2254:
+		if (cpu_online_map & (1UL<<i))
 		                         ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1251: FILE: kernel/sched.c:2260:
+		if (!(cpu_online_map & (1UL<<i))) continue;
 		                           ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1251: FILE: kernel/sched.c:2260:
+		if (!(cpu_online_map & (1UL<<i))) continue;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1253: FILE: kernel/sched.c:2262:
+			pool_ptr[numpools]=ptr;
 			                  ^

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#1256: FILE: kernel/sched.c:2265:
+				if (! (cpu_online_map & (1UL<<j))) continue;
 				    ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1256: FILE: kernel/sched.c:2265:
+				if (! (cpu_online_map & (1UL<<j))) continue;
 				                            ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1256: FILE: kernel/sched.c:2265:
+				if (! (cpu_online_map & (1UL<<j))) continue;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1258: FILE: kernel/sched.c:2267:
+					pool_cpus[ptr++]=j;
 					                ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1259: FILE: kernel/sched.c:2268:
+					flag[j]=1;
 					       ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1260: FILE: kernel/sched.c:2269:
+					mask |= (1UL<<j);
 					            ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1268: FILE: kernel/sched.c:2277:
+	pool_ptr[numpools]=ptr;
 	                  ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1280: FILE: kernel/sched.c:2289:
+	if (node < 0 || node >= numpools) return;

CHECK:BRACES: braces {} should be used on all arms of this statement
#1341: FILE: kernel/sched.c:2425:
+	if (migr_req[cpu].task)
[...]
+	else {
[...]

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#1343: FILE: kernel/sched.c:2427:
+		return -1;
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#1343: FILE: kernel/sched.c:2427:
+	else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#1400: FILE: kernel/sched.c:2508:
+		if (sync)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1402: FILE: kernel/sched.c:2510:
+		else {

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1427: FILE: kernel/sched.c:2607:
+			rq->nr_homenode[j]=0;
 			                  ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1433: FILE: kernel/sched.c:2613:
+	pool_ptr[1] = NR_CPUS;

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1437: FILE: kernel/sched.c:2617:
+	pool_nr_cpus[0] = NR_CPUS;

CHECK:SPACING: No space is necessary after a cast
#1472: FILE: kernel/sys.c:1320:
+			pid = (int) arg3;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1476: FILE: kernel/sys.c:1324:
+				error = put_user(child->node,(int *)arg2);
 				                            ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1478: FILE: kernel/sys.c:1326:
+				printk("prctl: could not find process %d\n",pid);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1478: FILE: kernel/sys.c:1326:
+				printk("prctl: could not find process %d\n",pid);
 				                                           ^

CHECK:SPACING: No space is necessary after a cast
#1484: FILE: kernel/sys.c:1332:
+			pid = (int) arg3;

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#1488: FILE: kernel/sys.c:1336:
+				if (child->uid == current->uid || \

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1490: FILE: kernel/sys.c:1338:
+					printk("setting node of pid %d to %d\n",pid,(int)arg2);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1490: FILE: kernel/sys.c:1338:
+					printk("setting node of pid %d to %d\n",pid,(int)arg2);
 					                                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1490: FILE: kernel/sys.c:1338:
+					printk("setting node of pid %d to %d\n",pid,(int)arg2);
 					                                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1491: FILE: kernel/sys.c:1339:
+					set_task_node(child,(int)arg2);
 					                   ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1494: FILE: kernel/sys.c:1342:
+				printk("prctl: could not find pid %d\n",pid);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1494: FILE: kernel/sys.c:1342:
+				printk("prctl: could not find pid %d\n",pid);
 				                                       ^

CHECK:SPACING: No space is necessary after a cast
#1501: FILE: kernel/sys.c:1349:
+			pid = (int) arg3;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1505: FILE: kernel/sys.c:1353:
+				error = put_user(child->node_policy,(int *)arg2);
 				                                   ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1507: FILE: kernel/sys.c:1355:
+				printk("prctl: could not find pid %d\n",pid);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1507: FILE: kernel/sys.c:1355:
+				printk("prctl: could not find pid %d\n",pid);
 				                                       ^

CHECK:SPACING: No space is necessary after a cast
#1513: FILE: kernel/sys.c:1361:
+			pid = (int) arg3;

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#1517: FILE: kernel/sys.c:1365:
+				if (child->uid == current->uid || \

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#1519: FILE: kernel/sys.c:1367:
+					printk("setting node policy of process %d to %d\n",pid,(int)arg2);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1519: FILE: kernel/sys.c:1367:
+					printk("setting node policy of process %d to %d\n",pid,(int)arg2);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1519: FILE: kernel/sys.c:1367:
+					printk("setting node policy of process %d to %d\n",pid,(int)arg2);
 					                                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1519: FILE: kernel/sys.c:1367:
+					printk("setting node policy of process %d to %d\n",pid,(int)arg2);
 					                                                      ^

CHECK:SPACING: No space is necessary after a cast
#1520: FILE: kernel/sys.c:1368:
+					child->node_policy = (int) arg2;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1523: FILE: kernel/sys.c:1371:
+				printk("prctl: could not find pid %d\n",pid);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1523: FILE: kernel/sys.c:1371:
+				printk("prctl: could not find pid %d\n",pid);
 				                                       ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000438037.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 118 errors, 47 warnings, 72 checks, 1352 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000438037.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
