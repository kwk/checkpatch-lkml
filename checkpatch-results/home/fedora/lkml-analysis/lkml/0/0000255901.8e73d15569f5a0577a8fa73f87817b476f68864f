ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#78: 
--- a/drivers/serial/Kconfig	2004-08-27 11:21:34 -07:00

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#84: FILE: drivers/serial/Kconfig:729:
+config SERIAL_MPSC
+	bool "Marvell MPSC serial port support"
+	depends on PPC32 && MV64X60
+	select SERIAL_CORE
+	help
+	  Say Y here if you want to use the Marvell MPSC serial controller.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#91: FILE: drivers/serial/Kconfig:736:
+config SERIAL_MPSC_CONSOLE
+	bool "Support for console on Marvell MPSC serial port"
+	depends on SERIAL_MPSC
+	select SERIAL_CORE_CONSOLE
+	help
+	  Say Y here if you want to support a serial console on a Marvell MPSC.
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#121: FILE: drivers/serial/mpsc/mpsc.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#122: FILE: drivers/serial/mpsc/mpsc.c:2:
+ * drivers/serial/mpsc/mpsc.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#189: FILE: drivers/serial/mpsc/mpsc.c:69:
+#define DBG(x...) printk(x)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#203: FILE: drivers/serial/mpsc/mpsc.c:83:
+	if (pi->brg_can_tune) {
+		MPSC_MOD_FIELD_M(pi, brg, BRG_BCR, 1, 25, 0);
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:RETURN_VOID: void function return statements are not generally useful
#210: FILE: drivers/serial/mpsc/mpsc.c:90:
+	return;
+}

WARNING:RETURN_VOID: void function return statements are not generally useful
#216: FILE: drivers/serial/mpsc/mpsc.c:96:
+	return;
+}

WARNING:RETURN_VOID: void function return statements are not generally useful
#222: FILE: drivers/serial/mpsc/mpsc.c:102:
+	return;
+}

WARNING:RETURN_VOID: void function return statements are not generally useful
#242: FILE: drivers/serial/mpsc/mpsc.c:122:
+	return;
+}

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'mpsc_sdma_burstsize', this function's name, in a string
#256: FILE: drivers/serial/mpsc/mpsc.c:136:
+	DBG("mpsc_sdma_burstsize[%d]: burst_size: %d\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:RETURN_VOID: void function return statements are not generally useful
#272: FILE: drivers/serial/mpsc/mpsc.c:152:
+	return;
+}

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'mpsc_sdma_init', this function's name, in a string
#276: FILE: drivers/serial/mpsc/mpsc.c:156:
+	DBG("mpsc_sdma_init[%d]: burst_size: %d\n", pi->port.line, burst_size);

WARNING:RETURN_VOID: void function return statements are not generally useful
#281: FILE: drivers/serial/mpsc/mpsc.c:161:
+	return;
+}

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'mpsc_sdma_intr_mask', this function's name, in a string
#287: FILE: drivers/serial/mpsc/mpsc.c:167:
+	DBG("mpsc_sdma_intr_mask[%d]: mask: 0x%x\n", pi->port.line, mask);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#289: FILE: drivers/serial/mpsc/mpsc.c:169:
+	old = v = MPSC_READ_S(pi, sdma_intr, SDMA_INTR_MASK);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'mpsc_sdma_intr_unmask', this function's name, in a string
#305: FILE: drivers/serial/mpsc/mpsc.c:185:
+	DBG("mpsc_sdma_intr_unmask[%d]: mask: 0x%x\n", pi->port.line, mask);

WARNING:RETURN_VOID: void function return statements are not generally useful
#314: FILE: drivers/serial/mpsc/mpsc.c:194:
+	return;
+}

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'mpsc_sdma_intr_ack', this function's name, in a string
#318: FILE: drivers/serial/mpsc/mpsc.c:198:
+	DBG("mpsc_sdma_intr_ack[%d]: Acknowledging IRQ\n", pi->port.line);

WARNING:RETURN_VOID: void function return statements are not generally useful
#321: FILE: drivers/serial/mpsc/mpsc.c:201:
+	return;
+}

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'mpsc_sdma_set_rx_ring', this function's name, in a string
#326: FILE: drivers/serial/mpsc/mpsc.c:206:
+	DBG("mpsc_sdma_set_rx_ring[%d]: rxre_p: 0x%x\n",

CHECK:SPACING: No space is necessary after a cast
#327: FILE: drivers/serial/mpsc/mpsc.c:207:
+	    pi->port.line, (u32) rxre_p);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#329: FILE: drivers/serial/mpsc/mpsc.c:209:
+	MPSC_WRITE(pi, sdma, SDMA_SCRDP, (u32) rxre_p);

WARNING:RETURN_VOID: void function return statements are not generally useful
#331: FILE: drivers/serial/mpsc/mpsc.c:211:
+	return;
+}

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#335: FILE: drivers/serial/mpsc/mpsc.c:215:
+		      volatile struct mpsc_tx_desc *txre_p)

CHECK:SPACING: No space is necessary after a cast
#337: FILE: drivers/serial/mpsc/mpsc.c:217:
+	MPSC_WRITE(pi, sdma, SDMA_SFTDP, (u32) txre_p);

CHECK:SPACING: No space is necessary after a cast
#338: FILE: drivers/serial/mpsc/mpsc.c:218:
+	MPSC_WRITE(pi, sdma, SDMA_SCTDP, (u32) txre_p);

WARNING:RETURN_VOID: void function return statements are not generally useful
#340: FILE: drivers/serial/mpsc/mpsc.c:220:
+	return;
+}

WARNING:RETURN_VOID: void function return statements are not generally useful
#353: FILE: drivers/serial/mpsc/mpsc.c:233:
+	return;
+}

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#357: FILE: drivers/serial/mpsc/mpsc.c:237:
+	volatile struct mpsc_tx_desc *txre, *txre_p;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#361: FILE: drivers/serial/mpsc/mpsc.c:241:
+		txre = (volatile struct mpsc_tx_desc *)(pi->txr +

CHECK:SPACING: No space is necessary after a cast
#364: FILE: drivers/serial/mpsc/mpsc.c:244:
+		MPSC_CACHE_INVALIDATE(pi, (u32) txre,

CHECK:SPACING: No space is necessary after a cast
#365: FILE: drivers/serial/mpsc/mpsc.c:245:
+				      (u32) txre + MPSC_TXRE_SIZE);

WARNING:RETURN_VOID: void function return statements are not generally useful
#380: FILE: drivers/serial/mpsc/mpsc.c:260:
+	return;
+}

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'mpsc_sdma_stop', this function's name, in a string
#384: FILE: drivers/serial/mpsc/mpsc.c:264:
+	DBG("mpsc_sdma_stop[%d]: Stopping SDMA\n", pi->port.line);

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#397: FILE: drivers/serial/mpsc/mpsc.c:277:
+	udelay(1000);

usleep_range() should be preferred over udelay(). The proper way of
using usleep_range() is mentioned in the kernel docs.

See: https://www.kernel.org/doc/html/latest/timers/timers-howto.html#delays-information-on-the-various-kernel-delay-sleep-mechanisms

WARNING:RETURN_VOID: void function return statements are not generally useful
#400: FILE: drivers/serial/mpsc/mpsc.c:280:
+	return;
+}

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'mpsc_hw_init', this function's name, in a string
#417: FILE: drivers/serial/mpsc/mpsc.c:297:
+	DBG("mpsc_hw_init[%d]: Initializing hardware\n", pi->port.line);

WARNING:TYPO_SPELLING: 'enabel' may be misspelled - perhaps 'enable'?
#427: FILE: drivers/serial/mpsc/mpsc.c:307:
+	/* Put MPSC in UART mode & enabel Tx/Rx egines */
 	                           ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:RETURN_VOID: void function return statements are not generally useful
#445: FILE: drivers/serial/mpsc/mpsc.c:325:
+	return;
+}

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'mpsc_enter_hunt', this function's name, in a string
#451: FILE: drivers/serial/mpsc/mpsc.c:331:
+	DBG("mpsc_enter_hunt[%d]: Hunting...\n", pi->port.line);

CHECK:BRACES: braces {} should be used on all arms of this statement
#456: FILE: drivers/serial/mpsc/mpsc.c:336:
+	if (pi->mirror_regs) {
[...]
+	} else
[...]

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#457: FILE: drivers/serial/mpsc/mpsc.c:337:
+		udelay(100);

CHECK:BRACES: Unbalanced braces around else statement
#458: FILE: drivers/serial/mpsc/mpsc.c:338:
+	} else

WARNING:RETURN_VOID: void function return statements are not generally useful
#464: FILE: drivers/serial/mpsc/mpsc.c:344:
+	return;
+}

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'mpsc_freeze', this function's name, in a string
#468: FILE: drivers/serial/mpsc/mpsc.c:348:
+	DBG("mpsc_freeze[%d]: Freezing\n", pi->port.line);

WARNING:RETURN_VOID: void function return statements are not generally useful
#472: FILE: drivers/serial/mpsc/mpsc.c:352:
+	return;
+}

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'mpsc_unfreeze', this function's name, in a string
#478: FILE: drivers/serial/mpsc/mpsc.c:358:
+	DBG("mpsc_unfreeze[%d]: Unfrozen\n", pi->port.line);

WARNING:RETURN_VOID: void function return statements are not generally useful
#480: FILE: drivers/serial/mpsc/mpsc.c:360:
+	return;
+}

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'mpsc_set_char_length', this function's name, in a string
#484: FILE: drivers/serial/mpsc/mpsc.c:364:
+	DBG("mpsc_set_char_length[%d]: char len: %d\n", pi->port.line, len);

WARNING:RETURN_VOID: void function return statements are not generally useful
#488: FILE: drivers/serial/mpsc/mpsc.c:368:
+	return;
+}

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'mpsc_set_stop_bit_length', this function's name, in a string
#492: FILE: drivers/serial/mpsc/mpsc.c:372:
+	DBG("mpsc_set_stop_bit_length[%d]: stop bits: %d\n", pi->port.line,

WARNING:RETURN_VOID: void function return statements are not generally useful
#497: FILE: drivers/serial/mpsc/mpsc.c:377:
+	return;
+}

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'mpsc_set_parity', this function's name, in a string
#501: FILE: drivers/serial/mpsc/mpsc.c:381:
+	DBG("mpsc_set_parity[%d]: parity bits: 0x%x\n", pi->port.line, p);

WARNING:RETURN_VOID: void function return statements are not generally useful
#506: FILE: drivers/serial/mpsc/mpsc.c:386:
+	return;
+}

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'mpsc_init_hw', this function's name, in a string
#518: FILE: drivers/serial/mpsc/mpsc.c:398:
+	DBG("mpsc_init_hw[%d]: Initializing\n", pi->port.line);

WARNING:RETURN_VOID: void function return statements are not generally useful
#527: FILE: drivers/serial/mpsc/mpsc.c:407:
+	return;
+}

WARNING:LINE_SPACING: Missing a blank line after declarations
#532: FILE: drivers/serial/mpsc/mpsc.c:412:
+	int rc = 0;
+	static void mpsc_free_ring_mem(struct mpsc_port_info *pi);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'mpsc_alloc_ring_mem', this function's name, in a string
#534: FILE: drivers/serial/mpsc/mpsc.c:414:
+	DBG("mpsc_alloc_ring_mem[%d]: Allocating ring mem\n", pi->port.line);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#538: FILE: drivers/serial/mpsc/mpsc.c:418:
+			printk(KERN_ERR "MPSC: inadequate DMA support\n");

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#540: FILE: drivers/serial/mpsc/mpsc.c:420:
+		} else if ((pi->dma_region = dma_alloc_coherent(pi->port.dev,

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#543: FILE: drivers/serial/mpsc/mpsc.c:423:
+			== NULL) {
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#544: FILE: drivers/serial/mpsc/mpsc.c:424:
+			printk(KERN_ERR "MPSC: can't alloc Desc region\n");

CHECK:BRACES: Unbalanced braces around else statement
#546: FILE: drivers/serial/mpsc/mpsc.c:426:
+		} else

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'mpsc_free_ring_mem', this function's name, in a string
#557: FILE: drivers/serial/mpsc/mpsc.c:437:
+	DBG("mpsc_free_ring_mem[%d]: Freeing ring mem\n", pi->port.line);

CHECK:SPACING: No space is necessary after a cast
#566: FILE: drivers/serial/mpsc/mpsc.c:446:
+		pi->dma_region_p = (dma_addr_t) NULL;

WARNING:RETURN_VOID: void function return statements are not generally useful
#570: FILE: drivers/serial/mpsc/mpsc.c:450:
+	return;
+}

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'mpsc_init_rings', this function's name, in a string
#580: FILE: drivers/serial/mpsc/mpsc.c:460:
+	DBG("mpsc_init_rings[%d]: Initializing rings\n", pi->port.line);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#582: FILE: drivers/serial/mpsc/mpsc.c:462:
+	BUG_ON(pi->dma_region == NULL);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pi->dma_region"
#582: FILE: drivers/serial/mpsc/mpsc.c:462:
+	BUG_ON(pi->dma_region == NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:SPACING: No space is necessary after a cast
#590: FILE: drivers/serial/mpsc/mpsc.c:470:
+	dp = ALIGN((u32) pi->dma_region, dma_get_cache_alignment());

CHECK:SPACING: No space is necessary after a cast
#591: FILE: drivers/serial/mpsc/mpsc.c:471:
+	dp_p = ALIGN((u32) pi->dma_region_p, dma_get_cache_alignment());

CHECK:SPACING: No space is necessary after a cast
#602: FILE: drivers/serial/mpsc/mpsc.c:482:
+	pi->rxb = (u8 *) dp;

CHECK:SPACING: No space is necessary after a cast
#603: FILE: drivers/serial/mpsc/mpsc.c:483:
+	pi->rxb_p = (u8 *) dp_p;

CHECK:SPACING: No space is necessary after a cast
#614: FILE: drivers/serial/mpsc/mpsc.c:494:
+	pi->txb = (u8 *) dp;

CHECK:SPACING: No space is necessary after a cast
#615: FILE: drivers/serial/mpsc/mpsc.c:495:
+	pi->txb_p = (u8 *) dp_p;

WARNING:RETURN_VOID: void function return statements are not generally useful
#671: FILE: drivers/serial/mpsc/mpsc.c:551:
+	return;
+}

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'mpsc_uninit_rings', this function's name, in a string
#675: FILE: drivers/serial/mpsc/mpsc.c:555:
+	DBG("mpsc_uninit_rings[%d]: Uninitializing rings\n", pi->port.line);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#677: FILE: drivers/serial/mpsc/mpsc.c:557:
+	BUG_ON(pi->dma_region == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pi->dma_region"
#677: FILE: drivers/serial/mpsc/mpsc.c:557:
+	BUG_ON(pi->dma_region == NULL);

WARNING:RETURN_VOID: void function return statements are not generally useful
#694: FILE: drivers/serial/mpsc/mpsc.c:574:
+	return;
+}

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'mpsc_make_ready', this function's name, in a string
#700: FILE: drivers/serial/mpsc/mpsc.c:580:
+	DBG("mpsc_make_ready[%d]: Making cltr ready\n", pi->port.line);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#704: FILE: drivers/serial/mpsc/mpsc.c:584:
+		if ((rc = mpsc_alloc_ring_mem(pi)))

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#723: FILE: drivers/serial/mpsc/mpsc.c:603:
+	volatile struct mpsc_rx_desc *rxre;

WARNING:LINE_SPACING: Missing a blank line after declarations
#728: FILE: drivers/serial/mpsc/mpsc.c:608:
+	int rc = 0;
+	static void mpsc_start_rx(struct mpsc_port_info *pi);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'mpsc_rx_intr', this function's name, in a string
#730: FILE: drivers/serial/mpsc/mpsc.c:610:
+	DBG("mpsc_rx_intr[%d]: Handling Rx intr\n", pi->port.line);

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#732: FILE: drivers/serial/mpsc/mpsc.c:612:
+	rxre = (volatile struct mpsc_rx_desc *)(pi->rxr +

CHECK:SPACING: No space is necessary after a cast
#735: FILE: drivers/serial/mpsc/mpsc.c:615:
+	MPSC_CACHE_INVALIDATE(pi, (u32) rxre, (u32) rxre + MPSC_RXRE_SIZE);

ERROR:SPACING: space required before the open brace '{'
#740: FILE: drivers/serial/mpsc/mpsc.c:620:
+	while (!((cmdstat = be32_to_cpu(rxre->cmdstat)) & SDMA_DESC_CMDSTAT_O)){

ERROR:SPACING: space required before the open brace '{'
#743: FILE: drivers/serial/mpsc/mpsc.c:623:
+		if (unlikely((tty->flip.count + bytes_in) >= TTY_FLIPBUF_SIZE)){

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#766: FILE: drivers/serial/mpsc/mpsc.c:646:
+			       SDMA_DESC_CMDSTAT_OR)) {
+

WARNING:INDENTED_LABEL: labels should not be indented
#819: FILE: drivers/serial/mpsc/mpsc.c:699:
+	      next_frame:

WARNING:MEMORY_BARRIER: memory barrier without comment
#821: FILE: drivers/serial/mpsc/mpsc.c:701:
+		wmb();

CHECK:SPACING: No space is necessary after a cast
#826: FILE: drivers/serial/mpsc/mpsc.c:706:
+		MPSC_CACHE_FLUSH(pi, (u32) rxre, (u32) rxre + MPSC_RXRE_SIZE);

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#830: FILE: drivers/serial/mpsc/mpsc.c:710:
+		rxre = (volatile struct mpsc_rx_desc *)(pi->rxr +

CHECK:SPACING: No space is necessary after a cast
#833: FILE: drivers/serial/mpsc/mpsc.c:713:
+		MPSC_CACHE_INVALIDATE(pi, (u32) rxre,

CHECK:SPACING: No space is necessary after a cast
#834: FILE: drivers/serial/mpsc/mpsc.c:714:
+				      (u32) rxre + MPSC_RXRE_SIZE);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#840: FILE: drivers/serial/mpsc/mpsc.c:720:
+	if ((MPSC_READ(pi, sdma, SDMA_SDCM) & SDMA_SDCM_ERD) == 0) {
+		mpsc_start_rx(pi);
+	}

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#851: FILE: drivers/serial/mpsc/mpsc.c:731:
+	volatile struct mpsc_tx_desc *txre;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#853: FILE: drivers/serial/mpsc/mpsc.c:733:
+	txre = (volatile struct mpsc_tx_desc *)(pi->txr +

CHECK:SPACING: No space is necessary after a cast
#856: FILE: drivers/serial/mpsc/mpsc.c:736:
+	MPSC_CACHE_INVALIDATE(pi, (u32) txre, (u32) txre + MPSC_TXRE_SIZE);

CHECK:SPACING: No space is necessary after a cast
#865: FILE: drivers/serial/mpsc/mpsc.c:745:
+	MPSC_CACHE_FLUSH(pi, (u32) txre, (u32) txre + MPSC_TXRE_SIZE);

WARNING:RETURN_VOID: void function return statements are not generally useful
#868: FILE: drivers/serial/mpsc/mpsc.c:748:
+	return;
+}

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#894: FILE: drivers/serial/mpsc/mpsc.c:774:
+		} else if (!uart_circ_empty(xmit)
+			   && !uart_tx_stopped(&pi->port)) {

WARNING:RETURN_VOID: void function return statements are not generally useful
#917: FILE: drivers/serial/mpsc/mpsc.c:797:
+	return;
+}

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#921: FILE: drivers/serial/mpsc/mpsc.c:801:
+	volatile struct mpsc_tx_desc *txre;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#925: FILE: drivers/serial/mpsc/mpsc.c:805:
+		txre = (volatile struct mpsc_tx_desc *)(pi->txr +

CHECK:SPACING: No space is necessary after a cast
#928: FILE: drivers/serial/mpsc/mpsc.c:808:
+		MPSC_CACHE_INVALIDATE(pi, (u32) txre,

CHECK:SPACING: No space is necessary after a cast
#929: FILE: drivers/serial/mpsc/mpsc.c:809:
+				      (u32) txre + MPSC_TXRE_SIZE);

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#942: FILE: drivers/serial/mpsc/mpsc.c:822:
+			txre = (volatile struct mpsc_tx_desc *)(pi->txr +

CHECK:SPACING: No space is necessary after a cast
#944: FILE: drivers/serial/mpsc/mpsc.c:824:
+			MPSC_CACHE_INVALIDATE(pi, (u32) txre,

CHECK:SPACING: No space is necessary after a cast
#945: FILE: drivers/serial/mpsc/mpsc.c:825:
+					      (u32) txre + MPSC_TXRE_SIZE);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#950: FILE: drivers/serial/mpsc/mpsc.c:830:
+^I^I/* $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'mpsc_sdma_intr', this function's name, in a string
#975: FILE: drivers/serial/mpsc/mpsc.c:855:
+	DBG("mpsc_sdma_intr[%d]: SDMA Interrupt Received\n", pi->port.line);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'mpsc_sdma_intr', this function's name, in a string
#983: FILE: drivers/serial/mpsc/mpsc.c:863:
+	DBG("mpsc_sdma_intr[%d]: SDMA Interrupt Handled\n", pi->port.line);

WARNING:RETURN_VOID: void function return statements are not generally useful
#1011: FILE: drivers/serial/mpsc/mpsc.c:891:
+	return;
+}

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'mpsc_stop_tx', this function's name, in a string
#1036: FILE: drivers/serial/mpsc/mpsc.c:916:
+	DBG("mpsc_stop_tx[%d]: tty_start: %d\n", port->line, tty_start);

WARNING:RETURN_VOID: void function return statements are not generally useful
#1040: FILE: drivers/serial/mpsc/mpsc.c:920:
+	return;
+}

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'mpsc_start_tx', this function's name, in a string
#1050: FILE: drivers/serial/mpsc/mpsc.c:930:
+	DBG("mpsc_start_tx[%d]: tty_start: %d\n", port->line, tty_start);

WARNING:RETURN_VOID: void function return statements are not generally useful
#1052: FILE: drivers/serial/mpsc/mpsc.c:932:
+	return;
+}

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'mpsc_start_rx', this function's name, in a string
#1056: FILE: drivers/serial/mpsc/mpsc.c:936:
+	DBG("mpsc_start_rx[%d]: Starting...\n", pi->port.line);

WARNING:MEMORY_BARRIER: memory barrier without comment
#1059: FILE: drivers/serial/mpsc/mpsc.c:939:
+		mb();

WARNING:RETURN_VOID: void function return statements are not generally useful
#1064: FILE: drivers/serial/mpsc/mpsc.c:944:
+	return;
+}

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'mpsc_stop_rx', this function's name, in a string
#1070: FILE: drivers/serial/mpsc/mpsc.c:950:
+	DBG("mpsc_stop_rx[%d]: Stopping...\n", port->line);

WARNING:RETURN_VOID: void function return statements are not generally useful
#1074: FILE: drivers/serial/mpsc/mpsc.c:954:
+	return;
+}

WARNING:RETURN_VOID: void function return statements are not generally useful
#1097: FILE: drivers/serial/mpsc/mpsc.c:977:
+	return;
+}

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'mpsc_startup', this function's name, in a string
#1105: FILE: drivers/serial/mpsc/mpsc.c:985:
+	DBG("mpsc_startup[%d]: Starting up MPSC, irq: %d\n",

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1108: FILE: drivers/serial/mpsc/mpsc.c:988:
+	if ((rc = mpsc_make_ready(pi)) == 0) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1118: FILE: drivers/serial/mpsc/mpsc.c:998:
+			printk(KERN_ERR "MPSC: Can't get SDMA IRQ %d\n",

WARNING:LINE_SPACING: Missing a blank line after declarations
#1133: FILE: drivers/serial/mpsc/mpsc.c:1013:
+	struct mpsc_port_info *pi = (struct mpsc_port_info *)port;
+	static void mpsc_release_port(struct uart_port *port);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'mpsc_shutdown', this function's name, in a string
#1135: FILE: drivers/serial/mpsc/mpsc.c:1015:
+	DBG("mpsc_shutdown[%d]: Shutting down MPSC\n", port->line);

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#1138: FILE: drivers/serial/mpsc/mpsc.c:1018:
+		udelay(100);	/* Let Tx ring drain */

WARNING:RETURN_VOID: void function return statements are not generally useful
#1143: FILE: drivers/serial/mpsc/mpsc.c:1023:
+	return;
+}

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#1230: FILE: drivers/serial/mpsc/mpsc.c:1110:
+	if (!(termios->c_cflag & CREAD)) {
[...]
+	} else {
[...]

WARNING:RETURN_VOID: void function return statements are not generally useful
#1238: FILE: drivers/serial/mpsc/mpsc.c:1118:
+	return;
+}

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'mpsc_type', this function's name, in a string
#1242: FILE: drivers/serial/mpsc/mpsc.c:1122:
+	DBG("mpsc_type[%d]: port type: %s\n", port->line, MPSC_DRIVER_NAME);

WARNING:RETURN_VOID: void function return statements are not generally useful
#1261: FILE: drivers/serial/mpsc/mpsc.c:1141:
+	return;
+}

WARNING:RETURN_VOID: void function return statements are not generally useful
#1266: FILE: drivers/serial/mpsc/mpsc.c:1146:
+	return;
+}

WARNING:TYPO_SPELLING: 'ser' may be misspelled - perhaps 'set'?
#1268: FILE: drivers/serial/mpsc/mpsc.c:1148:
+static int mpsc_verify_port(struct uart_port *port, struct serial_struct *ser)
                                                                           ^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'mpsc_verify_port', this function's name, in a string
#1273: FILE: drivers/serial/mpsc/mpsc.c:1153:
+	DBG("mpsc_verify_port[%d]: Verifying port data\n", pi->port.line);

WARNING:CONST_STRUCT: struct uart_ops should normally be const
#1293: FILE: drivers/serial/mpsc/mpsc.c:1173:
+static struct uart_ops mpsc_pops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#1328: FILE: drivers/serial/mpsc/mpsc.c:1208:
+		udelay(100);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1334: FILE: drivers/serial/mpsc/mpsc.c:1214:
+		bp = dp = pi->txb + (pi->txr_head * MPSC_TXBE_SIZE);

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#1362: FILE: drivers/serial/mpsc/mpsc.c:1242:
+			udelay(100);

WARNING:RETURN_VOID: void function return statements are not generally useful
#1369: FILE: drivers/serial/mpsc/mpsc.c:1249:
+	return;
+}

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'mpsc_console_setup', this function's name, in a string
#1376: FILE: drivers/serial/mpsc/mpsc.c:1256:
+	DBG("mpsc_console_setup[%d]: options: %s\n", co->index, options);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'mpsc_console_init', this function's name, in a string
#1412: FILE: drivers/serial/mpsc/mpsc.c:1292:
+	DBG("mpsc_console_init: Enter\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'mpsc_late_console_init', this function's name, in a string
#1421: FILE: drivers/serial/mpsc/mpsc.c:1301:
+	DBG("mpsc_late_console_init: Enter\n");

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1430: FILE: drivers/serial/mpsc/mpsc.c:1310:
+#define MPSC_CONSOLE	&mpsc_console

CHECK:SPACING: No space is necessary after a cast
#1445: FILE: drivers/serial/mpsc/mpsc.c:1325:
+	pi->mpsc_base = (u32) ioremap(pi->mpsc_base_p, MPSC_REG_BLOCK_SIZE);

CHECK:SPACING: No space is necessary after a cast
#1446: FILE: drivers/serial/mpsc/mpsc.c:1326:
+	pi->mpsc_routing_base = (u32) ioremap(pi->mpsc_routing_base_p,

CHECK:SPACING: No space is necessary after a cast
#1448: FILE: drivers/serial/mpsc/mpsc.c:1328:
+	pi->sdma_base = (u32) ioremap(pi->sdma_base_p, SDMA_REG_BLOCK_SIZE);

CHECK:SPACING: No space is necessary after a cast
#1449: FILE: drivers/serial/mpsc/mpsc.c:1329:
+	pi->sdma_intr_base = (u32) ioremap(pi->sdma_intr_base_p,

CHECK:SPACING: No space is necessary after a cast
#1451: FILE: drivers/serial/mpsc/mpsc.c:1331:
+	pi->brg_base = (u32) ioremap(pi->brg_base_p, BRG_REG_BLOCK_SIZE);

WARNING:RETURN_VOID: void function return statements are not generally useful
#1454: FILE: drivers/serial/mpsc/mpsc.c:1334:
+	return;
+}

WARNING:RETURN_VOID: void function return statements are not generally useful
#1471: FILE: drivers/serial/mpsc/mpsc.c:1351:
+	return;
+}

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'index >= 0'
#1478: FILE: drivers/serial/mpsc/mpsc.c:1358:
+	if ((index >= 0) && (index < MPSC_NUM_CTLRS))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'index < MPSC_NUM_CTLRS'
#1478: FILE: drivers/serial/mpsc/mpsc.c:1358:
+	if ((index >= 0) && (index < MPSC_NUM_CTLRS))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'index >= 0'
#1489: FILE: drivers/serial/mpsc/mpsc.c:1369:
+	if ((index >= 0) && (index < MPSC_NUM_CTLRS))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'index < MPSC_NUM_CTLRS'
#1489: FILE: drivers/serial/mpsc/mpsc.c:1369:
+	if ((index >= 0) && (index < MPSC_NUM_CTLRS))

WARNING:CVS_KEYWORD: CVS style keyword markers, these will _not_ be updated
#1511: FILE: drivers/serial/mpsc/mpsc.c:1391:
+	printk(KERN_INFO "Serial: MPSC driver $Revision: 1.00 $\n");

Since linux moved to git, the CVS markers are no longer used.
So, CVS style keywords ($Id$, $Revision$, $Log$) should not be
added.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1511: FILE: drivers/serial/mpsc/mpsc.c:1391:
+	printk(KERN_INFO "Serial: MPSC driver $Revision: 1.00 $\n");

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1516: FILE: drivers/serial/mpsc/mpsc.c:1396:
+	if ((rc = mpsc_platform_register_driver()) >= 0) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1517: FILE: drivers/serial/mpsc/mpsc.c:1397:
+		if ((rc = uart_register_driver(&mpsc_reg)) < 0) {

CHECK:SPACING: No space is necessary after a cast
#1527: FILE: drivers/serial/mpsc/mpsc.c:1407:
+				pi->port.mapbase = (ulong) pi->mpsc_base;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1533: FILE: drivers/serial/mpsc/mpsc.c:1413:
+				if ((rc = mpsc_make_ready(pi)) >= 0) {

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'mpsc_exit', this function's name, in a string
#1558: FILE: drivers/serial/mpsc/mpsc.c:1438:
+	DBG("mpsc_exit: Exiting\n");

WARNING:RETURN_VOID: void function return statements are not generally useful
#1569: FILE: drivers/serial/mpsc/mpsc.c:1449:
+	return;
+}

WARNING:RETURN_VOID: void function return statements are not generally useful
#1580: FILE: drivers/serial/mpsc/mpsc.c:1460:
+	return;
+}

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1585: FILE: drivers/serial/mpsc/mpsc.c:1465:
+EXPORT_SYMBOL(register_serial);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1586: FILE: drivers/serial/mpsc/mpsc.c:1466:
+EXPORT_SYMBOL(unregister_serial);

WARNING:CVS_KEYWORD: CVS style keyword markers, these will _not_ be updated
#1589: FILE: drivers/serial/mpsc/mpsc.c:1469:
+MODULE_DESCRIPTION("Generic Marvell MPSC serial/UART driver $Revision: 1.00 $");

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1597: FILE: drivers/serial/mpsc/mpsc.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#1598: FILE: drivers/serial/mpsc/mpsc.h:2:
+ * drivers/serial/mpsc/mpsc.h

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#1624: FILE: drivers/serial/mpsc/mpsc.h:28:
+#include <asm/io.h>

WARNING:REPEATED_WORD: Possible repeated word: 'are'
#1673: FILE: drivers/serial/mpsc/mpsc.h:77:
+ * Some regs that have the erratum that you can't read them are are shared

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'pi' may be better as '(pi)' to avoid precedence issues
#1747: FILE: drivers/serial/mpsc/mpsc.h:151:
+#define	MPSC_CACHE_FLUSH(pi, s, e) {			\
+	if (pi->cache_mgmt) {				\
+		/* 64x60 erratum: can't use dcbst/clean_dcache_range() */ \
+		flush_dcache_range((ulong)s, (ulong)e);	\
+		mb();					\
+	}						\
+}

WARNING:MEMORY_BARRIER: memory barrier without comment
#1751: FILE: drivers/serial/mpsc/mpsc.h:155:
+		mb();					\

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'pi' may be better as '(pi)' to avoid precedence issues
#1755: FILE: drivers/serial/mpsc/mpsc.h:159:
+#define	MPSC_CACHE_INVALIDATE(pi, s, e) {			\
+	if (pi->cache_mgmt) {					\
+		invalidate_dcache_range((ulong)s, (ulong)e);	\
+		mb();						\
+	}							\
+}

WARNING:MEMORY_BARRIER: memory barrier without comment
#1758: FILE: drivers/serial/mpsc/mpsc.h:162:
+		mb();						\

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'pi' may be better as '(pi)' to avoid precedence issues
#1762: FILE: drivers/serial/mpsc/mpsc.h:166:
+#define	MPSC_CACHE_FLUSH_INVALIDATE(pi, s, e) {		\
+	if (pi->cache_mgmt) {				\
+		flush_dcache_range((ulong)s, (ulong)e);	\
+		mb();					\
+	}						\
+}

WARNING:MEMORY_BARRIER: memory barrier without comment
#1765: FILE: drivers/serial/mpsc/mpsc.h:169:
+		mb();					\

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1770: FILE: drivers/serial/mpsc/mpsc.h:174:
+#define	MPSC_CACHE_FLUSH(pi, s, e)		BUG()

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1771: FILE: drivers/serial/mpsc/mpsc.h:175:
+#define	MPSC_CACHE_INVALIDATE(pi, s, e)		BUG()

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1772: FILE: drivers/serial/mpsc/mpsc.h:176:
+#define	MPSC_CACHE_FLUSH_INVALIDATE(pi, s, e)	BUG()

ERROR:CODE_INDENT: code indent should use tabs where possible
#1783: FILE: drivers/serial/mpsc/mpsc.h:187:
+        __asm__ __volatile__(^I^I^I^I^I\$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1783: FILE: drivers/serial/mpsc/mpsc.h:187:
+        __asm__ __volatile__(^I^I^I^I^I\$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'b' - possible side-effects?
#1799: FILE: drivers/serial/mpsc/mpsc.h:203:
+#define MASK_INSERT(t, i, n, b)		\
+({					\
+	u32	m, rval = (t);		\
+	m = GEN_MASK((n), (b));		\
+	rval &= ~m;			\
+	rval |= (((i) << (b)) & m);	\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pi' - possible side-effects?
#1811: FILE: drivers/serial/mpsc/mpsc.h:215:
+#define	MPSC_MOD_FIELD(pi, unit, offset, num_bits, shift, val)	\
+{								\
+	u32	v;						\
+	v = readl((pi)->unit##_base + (offset));		\
+	writel(MASK_INSERT(v,val,num_bits,shift), (pi)->unit##_base+(offset));\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'offset' - possible side-effects?
#1811: FILE: drivers/serial/mpsc/mpsc.h:215:
+#define	MPSC_MOD_FIELD(pi, unit, offset, num_bits, shift, val)	\
+{								\
+	u32	v;						\
+	v = readl((pi)->unit##_base + (offset));		\
+	writel(MASK_INSERT(v,val,num_bits,shift), (pi)->unit##_base+(offset));\
+}

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1815: FILE: drivers/serial/mpsc/mpsc.h:219:
+	writel(MASK_INSERT(v,val,num_bits,shift), (pi)->unit##_base+(offset));\
 	                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1815: FILE: drivers/serial/mpsc/mpsc.h:219:
+	writel(MASK_INSERT(v,val,num_bits,shift), (pi)->unit##_base+(offset));\
 	                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1815: FILE: drivers/serial/mpsc/mpsc.h:219:
+	writel(MASK_INSERT(v,val,num_bits,shift), (pi)->unit##_base+(offset));\
 	                                 ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1815: FILE: drivers/serial/mpsc/mpsc.h:219:
+	writel(MASK_INSERT(v,val,num_bits,shift), (pi)->unit##_base+(offset));\
 	                                                           ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pi' - possible side-effects?
#1819: FILE: drivers/serial/mpsc/mpsc.h:223:
+#define	MPSC_READ_M(pi, unit, offset)			\
+({							\
+	u32	v;					\
+	if ((pi)->mirror_regs) v = (pi)->offset##_m;	\
+	else v = readl((pi)->unit##_base + (offset));	\
+	v;						\
+})

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1822: FILE: drivers/serial/mpsc/mpsc.h:226:
+	if ((pi)->mirror_regs) v = (pi)->offset##_m;	\

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1823: FILE: drivers/serial/mpsc/mpsc.h:227:
+	else v = readl((pi)->unit##_base + (offset));	\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pi' - possible side-effects?
#1827: FILE: drivers/serial/mpsc/mpsc.h:231:
+#define	MPSC_WRITE_M(pi, unit, offset, v)		\
+({							\
+	if ((pi)->mirror_regs) (pi)->offset##_m = v;	\
+	writel(v, (pi)->unit##_base + (offset));	\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'v' - possible side-effects?
#1827: FILE: drivers/serial/mpsc/mpsc.h:231:
+#define	MPSC_WRITE_M(pi, unit, offset, v)		\
+({							\
+	if ((pi)->mirror_regs) (pi)->offset##_m = v;	\
+	writel(v, (pi)->unit##_base + (offset));	\
+})

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1829: FILE: drivers/serial/mpsc/mpsc.h:233:
+	if ((pi)->mirror_regs) (pi)->offset##_m = v;	\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pi' - possible side-effects?
#1833: FILE: drivers/serial/mpsc/mpsc.h:237:
+#define	MPSC_MOD_FIELD_M(pi, unit, offset, num_bits, shift, val)	\
+({									\
+	u32	v;							\
+	if ((pi)->mirror_regs) v = (pi)->offset##_m;			\
+	else v = readl((pi)->unit##_base + (offset));			\
+	v = MASK_INSERT(v, val, num_bits, shift);			\
+	if ((pi)->mirror_regs) (pi)->offset##_m = v;			\
+	writel(v, (pi)->unit##_base + (offset));			\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'offset' - possible side-effects?
#1833: FILE: drivers/serial/mpsc/mpsc.h:237:
+#define	MPSC_MOD_FIELD_M(pi, unit, offset, num_bits, shift, val)	\
+({									\
+	u32	v;							\
+	if ((pi)->mirror_regs) v = (pi)->offset##_m;			\
+	else v = readl((pi)->unit##_base + (offset));			\
+	v = MASK_INSERT(v, val, num_bits, shift);			\
+	if ((pi)->mirror_regs) (pi)->offset##_m = v;			\
+	writel(v, (pi)->unit##_base + (offset));			\
+})

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1836: FILE: drivers/serial/mpsc/mpsc.h:240:
+	if ((pi)->mirror_regs) v = (pi)->offset##_m;			\

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1837: FILE: drivers/serial/mpsc/mpsc.h:241:
+	else v = readl((pi)->unit##_base + (offset));			\

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1839: FILE: drivers/serial/mpsc/mpsc.h:243:
+	if ((pi)->mirror_regs) (pi)->offset##_m = v;			\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pi' - possible side-effects?
#1844: FILE: drivers/serial/mpsc/mpsc.h:248:
+#define	MPSC_READ_S(pi, unit, offset)					\
+({									\
+	u32	v;							\
+	if ((pi)->mirror_regs) v = (pi)->shared_regs->offset##_m;	\
+	else v = readl((pi)->unit##_base + (offset));			\
+	v;								\
+})

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1847: FILE: drivers/serial/mpsc/mpsc.h:251:
+	if ((pi)->mirror_regs) v = (pi)->shared_regs->offset##_m;	\

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1848: FILE: drivers/serial/mpsc/mpsc.h:252:
+	else v = readl((pi)->unit##_base + (offset));			\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pi' - possible side-effects?
#1852: FILE: drivers/serial/mpsc/mpsc.h:256:
+#define	MPSC_WRITE_S(pi, unit, offset, v)				\
+({									\
+	if ((pi)->mirror_regs) (pi)->shared_regs->offset##_m = v;	\
+	writel(v, (pi)->unit##_base + (offset));			\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'v' - possible side-effects?
#1852: FILE: drivers/serial/mpsc/mpsc.h:256:
+#define	MPSC_WRITE_S(pi, unit, offset, v)				\
+({									\
+	if ((pi)->mirror_regs) (pi)->shared_regs->offset##_m = v;	\
+	writel(v, (pi)->unit##_base + (offset));			\
+})

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1854: FILE: drivers/serial/mpsc/mpsc.h:258:
+	if ((pi)->mirror_regs) (pi)->shared_regs->offset##_m = v;	\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pi' - possible side-effects?
#1858: FILE: drivers/serial/mpsc/mpsc.h:262:
+#define	MPSC_MOD_FIELD_S(pi, unit, offset, num_bits, shift, val)	\
+({									\
+	u32	v;							\
+	if ((pi)->mirror_regs) v = (pi)->shared_regs->offset##_m;	\
+	else v = readl((pi)->unit##_base + (offset));			\
+	v = MASK_INSERT(v, val, num_bits, shift);			\
+	if ((pi)->mirror_regs) (pi)->shared_regs->offset##_m = v;	\
+	writel(v, (pi)->unit##_base + (offset));			\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'offset' - possible side-effects?
#1858: FILE: drivers/serial/mpsc/mpsc.h:262:
+#define	MPSC_MOD_FIELD_S(pi, unit, offset, num_bits, shift, val)	\
+({									\
+	u32	v;							\
+	if ((pi)->mirror_regs) v = (pi)->shared_regs->offset##_m;	\
+	else v = readl((pi)->unit##_base + (offset));			\
+	v = MASK_INSERT(v, val, num_bits, shift);			\
+	if ((pi)->mirror_regs) (pi)->shared_regs->offset##_m = v;	\
+	writel(v, (pi)->unit##_base + (offset));			\
+})

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1861: FILE: drivers/serial/mpsc/mpsc.h:265:
+	if ((pi)->mirror_regs) v = (pi)->shared_regs->offset##_m;	\

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1862: FILE: drivers/serial/mpsc/mpsc.h:266:
+	else v = readl((pi)->unit##_base + (offset));			\

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1864: FILE: drivers/serial/mpsc/mpsc.h:268:
+	if ((pi)->mirror_regs) (pi)->shared_regs->offset##_m = v;	\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'a' - possible side-effects?
#1869: FILE: drivers/serial/mpsc/mpsc.h:273:
+#define	MIN(a, b)	(((a) < (b)) ? (a) : (b))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'b' - possible side-effects?
#1869: FILE: drivers/serial/mpsc/mpsc.h:273:
+#define	MIN(a, b)	(((a) < (b)) ? (a) : (b))

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1885: FILE: drivers/serial/mpsc/mpsc_defs.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#1886: FILE: drivers/serial/mpsc/mpsc_defs.h:2:
+ * drivers/serial/mpsc/mpsc_defs.h

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1887: FILE: drivers/serial/mpsc/mpsc_defs.h:3:
+ * $

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1935: FILE: drivers/serial/mpsc/mpsc_defs.h:51:
+#define	MPSC_CHR_2_TEV			(1<<1)
        	              			  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1935: FILE: drivers/serial/mpsc/mpsc_defs.h:51:
+#define	MPSC_CHR_2_TEV			(1<<1)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1936: FILE: drivers/serial/mpsc/mpsc_defs.h:52:
+#define	MPSC_CHR_2_TA			(1<<7)
        	             			  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1936: FILE: drivers/serial/mpsc/mpsc_defs.h:52:
+#define	MPSC_CHR_2_TA			(1<<7)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1937: FILE: drivers/serial/mpsc/mpsc_defs.h:53:
+#define	MPSC_CHR_2_TTCS			(1<<9)
        	               			  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1937: FILE: drivers/serial/mpsc/mpsc_defs.h:53:
+#define	MPSC_CHR_2_TTCS			(1<<9)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1938: FILE: drivers/serial/mpsc/mpsc_defs.h:54:
+#define	MPSC_CHR_2_REV			(1<<17)
        	              			  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1938: FILE: drivers/serial/mpsc/mpsc_defs.h:54:
+#define	MPSC_CHR_2_REV			(1<<17)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1939: FILE: drivers/serial/mpsc/mpsc_defs.h:55:
+#define	MPSC_CHR_2_RA			(1<<23)
        	             			  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1939: FILE: drivers/serial/mpsc/mpsc_defs.h:55:
+#define	MPSC_CHR_2_RA			(1<<23)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1940: FILE: drivers/serial/mpsc/mpsc_defs.h:56:
+#define	MPSC_CHR_2_CRD			(1<<25)
        	              			  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1940: FILE: drivers/serial/mpsc/mpsc_defs.h:56:
+#define	MPSC_CHR_2_CRD			(1<<25)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1941: FILE: drivers/serial/mpsc/mpsc_defs.h:57:
+#define	MPSC_CHR_2_EH			(1<<31)
        	             			  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1941: FILE: drivers/serial/mpsc/mpsc_defs.h:57:
+#define	MPSC_CHR_2_EH			(1<<31)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1971: FILE: drivers/serial/mpsc/mpsc_defs.h:87:
+#define	SDMA_DESC_CMDSTAT_PE		(1<<0)
        	                    		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1971: FILE: drivers/serial/mpsc/mpsc_defs.h:87:
+#define	SDMA_DESC_CMDSTAT_PE		(1<<0)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1972: FILE: drivers/serial/mpsc/mpsc_defs.h:88:
+#define	SDMA_DESC_CMDSTAT_CDL		(1<<1)
        	                     		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1972: FILE: drivers/serial/mpsc/mpsc_defs.h:88:
+#define	SDMA_DESC_CMDSTAT_CDL		(1<<1)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1973: FILE: drivers/serial/mpsc/mpsc_defs.h:89:
+#define	SDMA_DESC_CMDSTAT_FR		(1<<3)
        	                    		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1973: FILE: drivers/serial/mpsc/mpsc_defs.h:89:
+#define	SDMA_DESC_CMDSTAT_FR		(1<<3)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1974: FILE: drivers/serial/mpsc/mpsc_defs.h:90:
+#define	SDMA_DESC_CMDSTAT_OR		(1<<6)
        	                    		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1974: FILE: drivers/serial/mpsc/mpsc_defs.h:90:
+#define	SDMA_DESC_CMDSTAT_OR		(1<<6)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1975: FILE: drivers/serial/mpsc/mpsc_defs.h:91:
+#define	SDMA_DESC_CMDSTAT_BR		(1<<9)
        	                    		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1975: FILE: drivers/serial/mpsc/mpsc_defs.h:91:
+#define	SDMA_DESC_CMDSTAT_BR		(1<<9)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1976: FILE: drivers/serial/mpsc/mpsc_defs.h:92:
+#define	SDMA_DESC_CMDSTAT_MI		(1<<10)
        	                    		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1976: FILE: drivers/serial/mpsc/mpsc_defs.h:92:
+#define	SDMA_DESC_CMDSTAT_MI		(1<<10)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1977: FILE: drivers/serial/mpsc/mpsc_defs.h:93:
+#define	SDMA_DESC_CMDSTAT_A		(1<<11)
        	                   		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1977: FILE: drivers/serial/mpsc/mpsc_defs.h:93:
+#define	SDMA_DESC_CMDSTAT_A		(1<<11)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1978: FILE: drivers/serial/mpsc/mpsc_defs.h:94:
+#define	SDMA_DESC_CMDSTAT_AM		(1<<12)
        	                    		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1978: FILE: drivers/serial/mpsc/mpsc_defs.h:94:
+#define	SDMA_DESC_CMDSTAT_AM		(1<<12)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1979: FILE: drivers/serial/mpsc/mpsc_defs.h:95:
+#define	SDMA_DESC_CMDSTAT_CT		(1<<13)
        	                    		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1979: FILE: drivers/serial/mpsc/mpsc_defs.h:95:
+#define	SDMA_DESC_CMDSTAT_CT		(1<<13)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1980: FILE: drivers/serial/mpsc/mpsc_defs.h:96:
+#define	SDMA_DESC_CMDSTAT_C		(1<<14)
        	                   		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1980: FILE: drivers/serial/mpsc/mpsc_defs.h:96:
+#define	SDMA_DESC_CMDSTAT_C		(1<<14)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1981: FILE: drivers/serial/mpsc/mpsc_defs.h:97:
+#define	SDMA_DESC_CMDSTAT_ES		(1<<15)
        	                    		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1981: FILE: drivers/serial/mpsc/mpsc_defs.h:97:
+#define	SDMA_DESC_CMDSTAT_ES		(1<<15)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1982: FILE: drivers/serial/mpsc/mpsc_defs.h:98:
+#define	SDMA_DESC_CMDSTAT_L		(1<<16)
        	                   		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1982: FILE: drivers/serial/mpsc/mpsc_defs.h:98:
+#define	SDMA_DESC_CMDSTAT_L		(1<<16)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1983: FILE: drivers/serial/mpsc/mpsc_defs.h:99:
+#define	SDMA_DESC_CMDSTAT_F		(1<<17)
        	                   		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1983: FILE: drivers/serial/mpsc/mpsc_defs.h:99:
+#define	SDMA_DESC_CMDSTAT_F		(1<<17)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1984: FILE: drivers/serial/mpsc/mpsc_defs.h:100:
+#define	SDMA_DESC_CMDSTAT_P		(1<<18)
        	                   		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1984: FILE: drivers/serial/mpsc/mpsc_defs.h:100:
+#define	SDMA_DESC_CMDSTAT_P		(1<<18)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1985: FILE: drivers/serial/mpsc/mpsc_defs.h:101:
+#define	SDMA_DESC_CMDSTAT_EI		(1<<23)
        	                    		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1985: FILE: drivers/serial/mpsc/mpsc_defs.h:101:
+#define	SDMA_DESC_CMDSTAT_EI		(1<<23)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1986: FILE: drivers/serial/mpsc/mpsc_defs.h:102:
+#define	SDMA_DESC_CMDSTAT_O		(1<<31)
        	                   		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1986: FILE: drivers/serial/mpsc/mpsc_defs.h:102:
+#define	SDMA_DESC_CMDSTAT_O		(1<<31)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1991: FILE: drivers/serial/mpsc/mpsc_defs.h:107:
+#define	SDMA_SDC_RFT			(1<<0)
        	            			  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1991: FILE: drivers/serial/mpsc/mpsc_defs.h:107:
+#define	SDMA_SDC_RFT			(1<<0)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1992: FILE: drivers/serial/mpsc/mpsc_defs.h:108:
+#define	SDMA_SDC_SFM			(1<<1)
        	            			  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1992: FILE: drivers/serial/mpsc/mpsc_defs.h:108:
+#define	SDMA_SDC_SFM			(1<<1)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1993: FILE: drivers/serial/mpsc/mpsc_defs.h:109:
+#define	SDMA_SDC_BLMR			(1<<6)
        	             			  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1993: FILE: drivers/serial/mpsc/mpsc_defs.h:109:
+#define	SDMA_SDC_BLMR			(1<<6)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1994: FILE: drivers/serial/mpsc/mpsc_defs.h:110:
+#define	SDMA_SDC_BLMT			(1<<7)
        	             			  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1994: FILE: drivers/serial/mpsc/mpsc_defs.h:110:
+#define	SDMA_SDC_BLMT			(1<<7)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1995: FILE: drivers/serial/mpsc/mpsc_defs.h:111:
+#define	SDMA_SDC_POVR			(1<<8)
        	             			  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1995: FILE: drivers/serial/mpsc/mpsc_defs.h:111:
+#define	SDMA_SDC_POVR			(1<<8)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1996: FILE: drivers/serial/mpsc/mpsc_defs.h:112:
+#define	SDMA_SDC_RIFB			(1<<9)
        	             			  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1996: FILE: drivers/serial/mpsc/mpsc_defs.h:112:
+#define	SDMA_SDC_RIFB			(1<<9)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1998: FILE: drivers/serial/mpsc/mpsc_defs.h:114:
+#define	SDMA_SDCM_ERD			(1<<7)
        	             			  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1998: FILE: drivers/serial/mpsc/mpsc_defs.h:114:
+#define	SDMA_SDCM_ERD			(1<<7)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1999: FILE: drivers/serial/mpsc/mpsc_defs.h:115:
+#define	SDMA_SDCM_AR			(1<<15)
        	            			  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1999: FILE: drivers/serial/mpsc/mpsc_defs.h:115:
+#define	SDMA_SDCM_AR			(1<<15)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#2000: FILE: drivers/serial/mpsc/mpsc_defs.h:116:
+#define	SDMA_SDCM_STD			(1<<16)
        	             			  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#2000: FILE: drivers/serial/mpsc/mpsc_defs.h:116:
+#define	SDMA_SDCM_STD			(1<<16)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#2001: FILE: drivers/serial/mpsc/mpsc_defs.h:117:
+#define	SDMA_SDCM_TXD			(1<<23)
        	             			  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#2001: FILE: drivers/serial/mpsc/mpsc_defs.h:117:
+#define	SDMA_SDCM_TXD			(1<<23)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#2002: FILE: drivers/serial/mpsc/mpsc_defs.h:118:
+#define	SDMA_SDCM_AT			(1<<31)
        	            			  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#2002: FILE: drivers/serial/mpsc/mpsc_defs.h:118:
+#define	SDMA_SDCM_AT			(1<<31)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#2004: FILE: drivers/serial/mpsc/mpsc_defs.h:120:
+#define	SDMA_0_CAUSE_RXBUF		(1<<0)
        	                  		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#2004: FILE: drivers/serial/mpsc/mpsc_defs.h:120:
+#define	SDMA_0_CAUSE_RXBUF		(1<<0)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#2005: FILE: drivers/serial/mpsc/mpsc_defs.h:121:
+#define	SDMA_0_CAUSE_RXERR		(1<<1)
        	                  		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#2005: FILE: drivers/serial/mpsc/mpsc_defs.h:121:
+#define	SDMA_0_CAUSE_RXERR		(1<<1)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#2006: FILE: drivers/serial/mpsc/mpsc_defs.h:122:
+#define	SDMA_0_CAUSE_TXBUF		(1<<2)
        	                  		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#2006: FILE: drivers/serial/mpsc/mpsc_defs.h:122:
+#define	SDMA_0_CAUSE_TXBUF		(1<<2)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#2007: FILE: drivers/serial/mpsc/mpsc_defs.h:123:
+#define	SDMA_0_CAUSE_TXEND		(1<<3)
        	                  		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#2007: FILE: drivers/serial/mpsc/mpsc_defs.h:123:
+#define	SDMA_0_CAUSE_TXEND		(1<<3)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#2008: FILE: drivers/serial/mpsc/mpsc_defs.h:124:
+#define	SDMA_1_CAUSE_RXBUF		(1<<8)
        	                  		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#2008: FILE: drivers/serial/mpsc/mpsc_defs.h:124:
+#define	SDMA_1_CAUSE_RXBUF		(1<<8)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#2009: FILE: drivers/serial/mpsc/mpsc_defs.h:125:
+#define	SDMA_1_CAUSE_RXERR		(1<<9)
        	                  		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#2009: FILE: drivers/serial/mpsc/mpsc_defs.h:125:
+#define	SDMA_1_CAUSE_RXERR		(1<<9)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#2010: FILE: drivers/serial/mpsc/mpsc_defs.h:126:
+#define	SDMA_1_CAUSE_TXBUF		(1<<10)
        	                  		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#2010: FILE: drivers/serial/mpsc/mpsc_defs.h:126:
+#define	SDMA_1_CAUSE_TXBUF		(1<<10)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#2011: FILE: drivers/serial/mpsc/mpsc_defs.h:127:
+#define	SDMA_1_CAUSE_TXEND		(1<<11)
        	                  		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#2011: FILE: drivers/serial/mpsc/mpsc_defs.h:127:
+#define	SDMA_1_CAUSE_TXEND		(1<<11)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2040: FILE: drivers/serial/mpsc/mpsc_ppc32.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#2041: FILE: drivers/serial/mpsc/mpsc_ppc32.c:2:
+ * drivers/serial/mpsc/mpsc_ppc32.c

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2067: FILE: drivers/serial/mpsc/mpsc_ppc32.c:28:
+	if ((pi = mpsc_device_probe(ocpdev->def->index)) != NULL) {

WARNING:RETURN_VOID: void function return statements are not generally useful
#2125: FILE: drivers/serial/mpsc/mpsc_ppc32.c:86:
+	return;
+}

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2128: FILE: drivers/serial/mpsc/mpsc_ppc32.c:89:
+	{.vendor = OCP_VENDOR_MARVELL,.function = OCP_FUNC_MPSC},
 	                             ^

WARNING:RETURN_VOID: void function return statements are not generally useful
#2148: FILE: drivers/serial/mpsc/mpsc_ppc32.c:109:
+	return;
+}

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000255901.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 30 errors, 131 warnings, 151 checks, 2044 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000255901.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
