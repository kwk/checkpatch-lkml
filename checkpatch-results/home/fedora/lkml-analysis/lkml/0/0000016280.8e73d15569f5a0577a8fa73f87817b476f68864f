WARNING:COMMIT_MESSAGE: Missing commit description - Add an appropriate one

The patch is missing a commit description.  A brief
description of the changes made by the patch should be added.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#39: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#48: FILE: Documentation/kevent.txt:5:
+num - size of the ring buffer in events $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#59: FILE: Documentation/kevent.txt:16:
+ring_kidx - index in the ring buffer where kernel will put new events $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#60: FILE: Documentation/kevent.txt:17:
+^I^Iwhen kevent_wait() or kevent_get_events() is called $

WARNING:TYPO_SPELLING: 'happend' may be misspelled - perhaps 'happened'?
#62: FILE: Documentation/kevent.txt:19:
+ring_over - number of overflows of ring_uidx happend from the start.
                                              ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#63: FILE: Documentation/kevent.txt:20:
+^IOverflow counter is used to prevent situation when two threads $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#64: FILE: Documentation/kevent.txt:21:
+^Iare going to free the same events, but one of them was scheduled $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#65: FILE: Documentation/kevent.txt:22:
+^Iaway for too long, so ring indexes were wrapped, so when that $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#66: FILE: Documentation/kevent.txt:23:
+^Ithread will be awakened, it will free not those events, which $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#71: FILE: Documentation/kevent.txt:28:
+Each kevent syscall can be so called cancellation point in glibc, i.e. when $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#72: FILE: Documentation/kevent.txt:29:
+thread has been cancelled in kevent syscall, thread can be safely removed $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#73: FILE: Documentation/kevent.txt:30:
+and no events will be lost, since each syscall (kevent_wait() or $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#74: FILE: Documentation/kevent.txt:31:
+kevent_get_events()) will copy event into special ring buffer, accessible $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#77: FILE: Documentation/kevent.txt:34:
+When kevent is removed (not dequeued when it is ready, but just removed), $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#78: FILE: Documentation/kevent.txt:35:
+even if it was ready, it is not copied into ring buffer, since if it is $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#79: FILE: Documentation/kevent.txt:36:
+removed, no one cares about it (otherwise user would wait until it becomes $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#80: FILE: Documentation/kevent.txt:37:
+ready and got it through usual way using kevent_get_events() or kevent_wait()) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#88: FILE: Documentation/kevent.txt:45:
+fd - is the file descriptor referring to the kevent queue to manipulate. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#89: FILE: Documentation/kevent.txt:46:
+It is created by opening "/dev/kevent" char device, which is created with $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#90: FILE: Documentation/kevent.txt:47:
+dynamic minor number and major number assigned for misc devices. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#93: FILE: Documentation/kevent.txt:50:
+    KEVENT_CTL_ADD - add event notification $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#94: FILE: Documentation/kevent.txt:51:
+    KEVENT_CTL_REMOVE - remove event notification $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#95: FILE: Documentation/kevent.txt:52:
+    KEVENT_CTL_MODIFY - modify existing notification $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#97: FILE: Documentation/kevent.txt:54:
+num - number of struct ukevent in the array pointed to by arg $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#100: FILE: Documentation/kevent.txt:57:
+Return value: $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#103: FILE: Documentation/kevent.txt:60:
+When called, kevent_ctl will carry out the operation specified in the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#107: FILE: Documentation/kevent.txt:64:
+ int kevent_get_events(int ctl_fd, unsigned int min_nr, unsigned int max_nr, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#110: FILE: Documentation/kevent.txt:67:
+ctl_fd - file descriptor referring to the kevent queue $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#111: FILE: Documentation/kevent.txt:68:
+min_nr - minimum number of completed events that kevent_get_events will block $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#112: FILE: Documentation/kevent.txt:69:
+^I waiting for $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#113: FILE: Documentation/kevent.txt:70:
+max_nr - number of struct ukevent in buf $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#114: FILE: Documentation/kevent.txt:71:
+timeout - number of nanoseconds to wait before returning less than min_nr $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#115: FILE: Documentation/kevent.txt:72:
+^I  events. If this is -1, then wait forever. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#116: FILE: Documentation/kevent.txt:73:
+buf - pointer to an array of struct ukevent. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#117: FILE: Documentation/kevent.txt:74:
+flags - unused $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#122: FILE: Documentation/kevent.txt:79:
+kevent_get_events will wait timeout milliseconds for at least min_nr completed $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#123: FILE: Documentation/kevent.txt:80:
+events, copying completed struct ukevents to buf and deleting any $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#124: FILE: Documentation/kevent.txt:81:
+KEVENT_REQ_ONESHOT event requests. In nonblocking mode it returns as many $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#125: FILE: Documentation/kevent.txt:82:
+events as possible, but not more than max_nr. In blocking mode it waits until $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#134: FILE: Documentation/kevent.txt:91:
+ctl_fd - file descriptor referring to the kevent queue $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#135: FILE: Documentation/kevent.txt:92:
+num - number of processed kevents $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#136: FILE: Documentation/kevent.txt:93:
+timeout - this timeout specifies number of nanoseconds to wait until there is $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#137: FILE: Documentation/kevent.txt:94:
+^I^Ifree space in kevent queue $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#142: FILE: Documentation/kevent.txt:99:
+This syscall waits until either timeout expires or at least one event becomes $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#146: FILE: Documentation/kevent.txt:103:
+If kevent is edge-triggered (KEVENT_REQ_ET flag is set in 'req_flags') it is $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#150: FILE: Documentation/kevent.txt:107:
+ int kevent_commit(int ctl_fd, unsigned int start, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#153: FILE: Documentation/kevent.txt:110:
+ctl_fd - file descriptor referring to the kevent queue $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#164: FILE: Documentation/kevent.txt:121:
+Overflow counter is used to prevent situation when two threads are going $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#165: FILE: Documentation/kevent.txt:122:
+to free the same events, but one of them was scheduled away for too long, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#166: FILE: Documentation/kevent.txt:123:
+so ring indexes were wrapped, so when that thread will be awakened, it $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#174: FILE: Documentation/kevent.txt:131:
+The bulk of the interface is entirely done through the ukevent struct. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#175: FILE: Documentation/kevent.txt:132:
+It is used to add event requests, modify existing event requests, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#181: FILE: Documentation/kevent.txt:138:
+    Id of this request, e.g. socket number, file descriptor and so on $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#183: FILE: Documentation/kevent.txt:140:
+    Event type, e.g. KEVENT_SOCK, KEVENT_INODE, KEVENT_TIMER and so on $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#185: FILE: Documentation/kevent.txt:142:
+    Event itself, e.g. SOCK_ACCEPT, INODE_CREATED, TIMER_FIRED $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#190: FILE: Documentation/kevent.txt:147:
+        event will be removed when it is ready $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#193: FILE: Documentation/kevent.txt:150:
+        Kevent wakes up only first thread interested in given event, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#197: FILE: Documentation/kevent.txt:154:
+        Edge Triggered behaviour. It is an optimisation which allows to move $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#198: FILE: Documentation/kevent.txt:155:
+^Iready and dequeued (i.e. copied to userspace) event to move into set $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#199: FILE: Documentation/kevent.txt:156:
+^Iof interest for given storage (socket, inode and so on) again. It is $

WARNING:TYPO_SPELLING: 'usefull' may be misspelled - perhaps 'useful'?
#200: FILE: Documentation/kevent.txt:157:
+	very usefull for cases when the same event should be used many times 
 	     ^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#200: FILE: Documentation/kevent.txt:157:
+^Ivery usefull for cases when the same event should be used many times $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#201: FILE: Documentation/kevent.txt:158:
+^I(like reading from pipe). It is similar to epoll()'s EPOLLET flag. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#204: FILE: Documentation/kevent.txt:161:
+        if set allows to perform the last check on kevent (call appropriate $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#205: FILE: Documentation/kevent.txt:162:
+^Icallback) when kevent is marked as ready and has been removed from $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#206: FILE: Documentation/kevent.txt:163:
+^Iready queue. If it will be confirmed that kevent is ready $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#207: FILE: Documentation/kevent.txt:164:
+^I(k->callbacks.callback(k) returns true) then kevent will be copied $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#208: FILE: Documentation/kevent.txt:165:
+^Ito userspace, otherwise it will be requeued back to storage. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#209: FILE: Documentation/kevent.txt:166:
+^ISecond (checking) call is performed with this bit cleared, so callback $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#210: FILE: Documentation/kevent.txt:167:
+^Ican detect when it was called from kevent_storage_ready() - bit is set, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#211: FILE: Documentation/kevent.txt:168:
+^Ior kevent_dequeue_ready() - bit is cleared. If kevent will be requeued, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#215: FILE: Documentation/kevent.txt:172:
+        If this flag is set kevent will be queued into ready queue if it is $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#223: FILE: Documentation/kevent.txt:180:
+        Kevent is broken $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#226: FILE: Documentation/kevent.txt:183:
+        Kevent processing was finished successfully $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#229: FILE: Documentation/kevent.txt:186:
+        Kevent was not copied into ring buffer due to some error conditions. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#232: FILE: Documentation/kevent.txt:189:
+    Event return data. Event originator fills it with anything it likes $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#233: FILE: Documentation/kevent.txt:190:
+    (for example timer notifications put number of milliseconds when timer $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#234: FILE: Documentation/kevent.txt:191:
+    has fired $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#236: FILE: Documentation/kevent.txt:193:
+    User's data. It is not used, just copied to/from user. The whole structure $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#237: FILE: Documentation/kevent.txt:194:
+    is aligned to 8 bytes already, so the last union is aligned properly. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#243: FILE: Documentation/kevent.txt:200:
+For KEVENT_CTL_ADD, all fields relevant to the event type must be filled $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#244: FILE: Documentation/kevent.txt:201:
+(id, type, event, req_flags). $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#245: FILE: Documentation/kevent.txt:202:
+After kevent_ctl(..., KEVENT_CTL_ADD, ...) returns each struct's ret_flags $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#248: FILE: Documentation/kevent.txt:205:
+For KEVENT_CTL_MODIFY, the id, req_flags, and user and event fields must be $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#249: FILE: Documentation/kevent.txt:206:
+set and an existing kevent request must have matching id and user fields. If $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#250: FILE: Documentation/kevent.txt:207:
+match is found, req_flags and event are replaced with the newly supplied $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#251: FILE: Documentation/kevent.txt:208:
+values and requeueing is started, so modified kevent can be checked and $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#252: FILE: Documentation/kevent.txt:209:
+probably marked as ready immediately. If a match can't be found, the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#253: FILE: Documentation/kevent.txt:210:
+passed in ukevent's ret_flags has KEVENT_RET_BROKEN set. KEVENT_RET_DONE is $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#256: FILE: Documentation/kevent.txt:213:
+For KEVENT_CTL_REMOVE, the id and user fields must be set and an existing $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#257: FILE: Documentation/kevent.txt:214:
+kevent request must have matching id and user fields. If a match is found, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#258: FILE: Documentation/kevent.txt:215:
+the kevent request is removed. If a match can't be found, the passed in $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#269: FILE: Documentation/kevent.txt:226:
+    type - KEVENT_TIMER $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#270: FILE: Documentation/kevent.txt:227:
+    event - KEVENT_TIMER_FIRED $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#271: FILE: Documentation/kevent.txt:228:
+    req_flags - KEVENT_REQ_ONESHOT if you want to fire that timer only once $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#272: FILE: Documentation/kevent.txt:229:
+    id.raw[0] - number of seconds after commit when this timer shout expire $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#273: FILE: Documentation/kevent.txt:230:
+    id.raw[0] - additional to number of seconds number of nanoseconds $

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000016280.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 94 errors, 4 warnings, 0 checks, 230 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000016280.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
