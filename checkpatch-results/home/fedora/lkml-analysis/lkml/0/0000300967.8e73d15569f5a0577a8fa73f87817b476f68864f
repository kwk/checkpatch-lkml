WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#52: 
diff -urN linux-2.5/arch/ppc64/kernel/iSeries_irq.c test/arch/ppc64/kernel/iSeries_irq.c

CHECK:CAMELCASE: Avoid CamelCase: <busNumber>
#91: FILE: arch/ppc64/kernel/iSeries_irq.c:85:
+	realirq = ((busNumber - 1) << 6) + ((idsel - 1) << 3) + function;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <iSeries_IRQ_handler>
#94: FILE: arch/ppc64/kernel/iSeries_irq.c:88:
+	irq_desc[virtirq].handler = &iSeries_IRQ_handler;

CHECK:CAMELCASE: Avoid CamelCase: <deviceId>
#117: FILE: arch/ppc64/kernel/iSeries_irq.c:105:
+	deviceId = (REAL_IRQ_TO_IDSEL(rirq) << 4) + function;

CHECK:CAMELCASE: Avoid CamelCase: <Irq>
#203: FILE: arch/ppc64/kernel/iSeries_pci.c:280:
+		pdev->irq = node->Irq;

CHECK:CAMELCASE: Avoid CamelCase: <Bus>
#223: FILE: arch/ppc64/kernel/iSeries_pci.c:440:
+			       Bus, SubBus, AgentId, VendorId, Irq);

CHECK:CAMELCASE: Avoid CamelCase: <SubBus>
#223: FILE: arch/ppc64/kernel/iSeries_pci.c:440:
+			       Bus, SubBus, AgentId, VendorId, Irq);

CHECK:CAMELCASE: Avoid CamelCase: <AgentId>
#223: FILE: arch/ppc64/kernel/iSeries_pci.c:440:
+			       Bus, SubBus, AgentId, VendorId, Irq);

CHECK:CAMELCASE: Avoid CamelCase: <VendorId>
#223: FILE: arch/ppc64/kernel/iSeries_pci.c:440:
+			       Bus, SubBus, AgentId, VendorId, Irq);

WARNING:LINE_SPACING: Missing a blank line after declarations
#268: FILE: arch/ppc64/kernel/irq.c:853:
+	int i;
+	for (i = 0; i < NR_IRQS; i++)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#310: FILE: arch/ppc64/kernel/irq.c:895:
+		printk(KERN_CRIT "Interrupt table is full\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#311: FILE: arch/ppc64/kernel/irq.c:896:
+		printk(KERN_CRIT "Increase NR_IRQS (currently %d) "

WARNING:SPLIT_STRING: quoted string split across lines
#312: FILE: arch/ppc64/kernel/irq.c:897:
+		printk(KERN_CRIT "Increase NR_IRQS (currently %d) "
+		       "in your kernel sources and rebuild.\n", NR_IRQS);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#396: FILE: arch/ppc64/kernel/prom.c:2061:
+			printk(KERN_CRIT "Could not allocate interrupt "

WARNING:SPLIT_STRING: quoted string split across lines
#397: FILE: arch/ppc64/kernel/prom.c:2062:
+			printk(KERN_CRIT "Could not allocate interrupt "
+			       "number for %s\n", np->full_name);

CHECK:BRACES: Unbalanced braces around else statement
#398: FILE: arch/ppc64/kernel/prom.c:2063:
+		} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#419: FILE: arch/ppc64/kernel/prom.c:2976:
+		if (virq == NO_IRQ) {
[...]
+		} else
[...]

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#420: FILE: arch/ppc64/kernel/prom.c:2977:
+			printk(KERN_CRIT "Could not allocate interrupt "

WARNING:SPLIT_STRING: quoted string split across lines
#421: FILE: arch/ppc64/kernel/prom.c:2978:
+			printk(KERN_CRIT "Could not allocate interrupt "
+			       "number for %s\n", node->full_name);

CHECK:BRACES: Unbalanced braces around else statement
#422: FILE: arch/ppc64/kernel/prom.c:2979:
+		} else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#443: FILE: arch/ppc64/kernel/ras.c:80:
+				printk(KERN_ERR "Unable to allocate interrupt "

WARNING:SPLIT_STRING: quoted string split across lines
#444: FILE: arch/ppc64/kernel/ras.c:81:
+				printk(KERN_ERR "Unable to allocate interrupt "
+				       "number for %s\n", np->full_name);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#447: FILE: arch/ppc64/kernel/ras.c:84:
+^I^I^Irequest_irq(virq + NUM_8259_INTERRUPTS, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#458: FILE: arch/ppc64/kernel/ras.c:98:
+				printk(KERN_ERR "Unable to allocate interrupt "

WARNING:SPLIT_STRING: quoted string split across lines
#459: FILE: arch/ppc64/kernel/ras.c:99:
+				printk(KERN_ERR "Unable to allocate interrupt "
+				       " number for %s\n", np->full_name);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#462: FILE: arch/ppc64/kernel/ras.c:102:
+^I^I^Irequest_irq(virq + NUM_8259_INTERRUPTS, $

WARNING:LINE_SPACING: Missing a blank line after declarations
#479: FILE: arch/ppc64/kernel/vio.c:249:
+		int virq = virt_irq_create_mapping(*irq_p);
+		if (virq == NO_IRQ) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#479: FILE: arch/ppc64/kernel/vio.c:249:
+		if (virq == NO_IRQ) {
[...]
+		} else
[...]

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#480: FILE: arch/ppc64/kernel/vio.c:250:
+			printk(KERN_ERR "Unable to allocate interrupt "

WARNING:SPLIT_STRING: quoted string split across lines
#481: FILE: arch/ppc64/kernel/vio.c:251:
+			printk(KERN_ERR "Unable to allocate interrupt "
+			       "number for %s\n", of_node->full_name);

CHECK:BRACES: Unbalanced braces around else statement
#482: FILE: arch/ppc64/kernel/vio.c:252:
+		} else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#561: FILE: arch/ppc64/kernel/xics.c:222:
+		printk(KERN_CRIT "Out of memory creating real -> virtual"

WARNING:SPLIT_STRING: quoted string split across lines
#562: FILE: arch/ppc64/kernel/xics.c:223:
+		printk(KERN_CRIT "Out of memory creating real -> virtual"
+		       " IRQ mapping for irq %u (real 0x%x)\n",

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ptr"
#573: FILE: arch/ppc64/kernel/xics.c:233:
+	if (ptr == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#590: FILE: arch/ppc64/kernel/xics.c:261:
+		printk(KERN_ERR "xics_enable_irq: irq=%x: ibm_set_xive "

WARNING:SPLIT_STRING: quoted string split across lines
#591: FILE: arch/ppc64/kernel/xics.c:262:
+		printk(KERN_ERR "xics_enable_irq: irq=%x: ibm_set_xive "
+		       "returned %lx\n", irq, call_status);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#600: FILE: arch/ppc64/kernel/xics.c:269:
+		printk(KERN_ERR "xics_enable_irq: irq=%x: ibm_int_on "

WARNING:SPLIT_STRING: quoted string split across lines
#601: FILE: arch/ppc64/kernel/xics.c:270:
+		printk(KERN_ERR "xics_enable_irq: irq=%x: ibm_int_on "
+		       "returned %lx\n", irq, call_status);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#621: FILE: arch/ppc64/kernel/xics.c:284:
+		printk(KERN_ERR "xics_disable_real_irq: irq=%x: "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'xics_disable_real_irq', this function's name, in a string
#621: FILE: arch/ppc64/kernel/xics.c:284:
+		printk(KERN_ERR "xics_disable_real_irq: irq=%x: "

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:SPLIT_STRING: quoted string split across lines
#622: FILE: arch/ppc64/kernel/xics.c:285:
+		printk(KERN_ERR "xics_disable_real_irq: irq=%x: "
+		       "ibm_int_off returned %lx\n", irq, call_status);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#632: FILE: arch/ppc64/kernel/xics.c:293:
+		printk(KERN_ERR "xics_disable_irq: irq=%x: ibm_set_xive(0xff)"

WARNING:SPLIT_STRING: quoted string split across lines
#633: FILE: arch/ppc64/kernel/xics.c:294:
+		printk(KERN_ERR "xics_disable_irq: irq=%x: ibm_set_xive(0xff)"
+		       " returned %lx\n", irq, call_status);

CHECK:BRACES: braces {} should be used on all arms of this statement
#678: FILE: arch/ppc64/kernel/xics.c:352:
+		if (irq == NO_IRQ) {
[...]
+		} else
[...]

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#679: FILE: arch/ppc64/kernel/xics.c:353:
+			printk(KERN_ERR "Interrupt 0x%x (real) is invalid,"

WARNING:SPLIT_STRING: quoted string split across lines
#680: FILE: arch/ppc64/kernel/xics.c:354:
+			printk(KERN_ERR "Interrupt 0x%x (real) is invalid,"
+			       " disabling it.\n", vec);

CHECK:BRACES: Unbalanced braces around else statement
#682: FILE: arch/ppc64/kernel/xics.c:356:
+		} else

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#693: FILE: arch/ppc64/kernel/xics.c:506:
+		xics_irq_8259_cascade
+			= virt_irq_create_mapping(xics_irq_8259_cascade_real);

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#723: FILE: arch/ppc64/kernel/xics.c:593:
+		printk(KERN_ERR "xics_set_affinity: irq=%d ibm,get-xive "

WARNING:SPLIT_STRING: quoted string split across lines
#724: FILE: arch/ppc64/kernel/xics.c:594:
+		printk(KERN_ERR "xics_set_affinity: irq=%d ibm,get-xive "
+		       "returns %ld\n", irq, status);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#734: FILE: arch/ppc64/kernel/xics.c:612:
+		printk(KERN_ERR "xics_set_affinity irq=%d ibm,set-xive "

WARNING:SPLIT_STRING: quoted string split across lines
#735: FILE: arch/ppc64/kernel/xics.c:613:
+		printk(KERN_ERR "xics_set_affinity irq=%d ibm,set-xive "
+		       "returns %ld\n", irq, status);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000300967.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 2 errors, 33 warnings, 17 checks, 666 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000300967.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
