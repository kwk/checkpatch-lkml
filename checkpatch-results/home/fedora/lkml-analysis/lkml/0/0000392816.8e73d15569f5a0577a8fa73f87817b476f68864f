WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#40: 
--- linux-2.5.61-trojan/include/linux/brlock.h	15 Feb 2003 12:31:59 -0000	1.1.1.1

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#77: FILE: include/linux/sched.h:479:
+extern void migrate_all_tasks(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#83: FILE: include/linux/sched.h:485:
+extern void wake_idle_cpu(unsigned int cpu);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#126: FILE: include/linux/smp.h:106:
+extern int register_cpu_notifier(struct notifier_block *nb);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#127: FILE: include/linux/smp.h:107:
+extern void unregister_cpu_notifier(struct notifier_block *nb);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#129: FILE: include/linux/smp.h:109:
+extern int cpu_up(unsigned int cpu);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#130: FILE: include/linux/smp.h:110:
+extern int cpu_down(unsigned int cpu);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#208: FILE: kernel/cpu.c:35:
+ * cpu' with certain environment variables set.  */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#224: FILE: kernel/cpu.c:51:
+	envp [i++] = "HOME=/";

Whitespace before opening bracket '[' is prohibited.
There are some exceptions:

1. With a type on the left::

    int [] a;

2. At the beginning of a line for slice initialisers::

    [0...10] = 5,

3. Inside a curly brace::

    = { [0...10] = 5 }

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#225: FILE: kernel/cpu.c:52:
+	envp [i++] = "PATH=/sbin:/bin:/usr/sbin:/usr/bin";

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#226: FILE: kernel/cpu.c:53:
+	envp [i++] = cpu_str;

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#227: FILE: kernel/cpu.c:54:
+	envp [i++] = action_str;

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#228: FILE: kernel/cpu.c:55:
+	envp [i] = NULL;

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#230: FILE: kernel/cpu.c:57:
+	return call_usermodehelper(argv [0], argv, envp);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#237: FILE: kernel/cpu.c:64:
+^Iif ((ret = down_interruptible(&cpucontrol)) != 0) $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#237: FILE: kernel/cpu.c:64:
+	if ((ret = down_interruptible(&cpucontrol)) != 0) 

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#256: FILE: kernel/cpu.c:83:
+		printk("CPU disable failed: %i\n", ret);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#259: FILE: kernel/cpu.c:86:
+	BUG_ON(cpu_online(cpu));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:CODE_INDENT: code indent should use tabs where possible
#262: FILE: kernel/cpu.c:89:
+           not running now). */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#262: FILE: kernel/cpu.c:89:
+	/* Move other tasks off to other CPUs (simple since they are
+           not running now). */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#262: FILE: kernel/cpu.c:89:
+           not running now). */

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#277: FILE: kernel/cpu.c:104:
+	printk("Done DEAD notifier.\n");

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#288: FILE: kernel/cpu.c:115:
+			if (p->thread_info->cpu == cpu
+			    && !(p->state & TASK_ZOMBIE))

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#289: FILE: kernel/cpu.c:116:
+				printk("Left %s\n", p->comm);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#293: FILE: kernel/cpu.c:120:
+	printk("Done cpu down: %i.\n", ret);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#303: FILE: kernel/cpu.c:130:
+	struct cpu *cpu = container_of(container_of(dev,struct sys_device,dev),
 	                                               ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#303: FILE: kernel/cpu.c:130:
+	struct cpu *cpu = container_of(container_of(dev,struct sys_device,dev),
 	                                                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#311: FILE: kernel/cpu.c:138:
+	struct cpu *cpu = container_of(container_of(dev,struct sys_device,dev),
 	                                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#311: FILE: kernel/cpu.c:138:
+	struct cpu *cpu = container_of(container_of(dev,struct sys_device,dev),
 	                                                                 ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#315: FILE: kernel/cpu.c:142:
+	printk("cpu%d sending cpu%d %s\n", smp_processor_id(), cpu->sysdev.id,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#316: FILE: kernel/cpu.c:143:
+	printk("cpu%d sending cpu%d %s\n", smp_processor_id(), cpu->sysdev.id,
+		(buf[0] == '1') ? "ONLINE" : "OFFLINE");

WARNING:DEVICE_ATTR_PERMS: DEVICE_ATTR unusual permissions '0600' used
#332: FILE: kernel/cpu.c:159:
+}

The permissions used in DEVICE_ATTR are unusual.
Typically only three permissions are used - 0644 (RW), 0444 (RO)
and 0200 (WO).

See: https://www.kernel.org/doc/html/latest/filesystems/sysfs.html#attributes

CHECK:LINE_SPACING: Please don't use multiple blank lines
#336: FILE: kernel/cpu.c:163:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#346: FILE: kernel/cpu.c:203:
+int __devinit cpu_up(unsigned int cpu)

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#348: FILE: kernel/cpu.c:205:
+	return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#350: FILE: kernel/cpu.c:207:
+}
+int cpu_down(unsigned int cpu)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#352: FILE: kernel/cpu.c:209:
+       return -ENOSYS;$

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#352: FILE: kernel/cpu.c:209:
+       return -ENOSYS;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#354: FILE: kernel/cpu.c:211:
+}
+int register_cpu_notifier(struct notifier_block *nb)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#358: FILE: kernel/cpu.c:215:
+}
+void unregister_cpu_notifier(struct notifier_block *nb)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#363: FILE: kernel/cpu.c:220:
+
+

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#382: FILE: kernel/cpu.c:239:
+	for (i = 0; i < NR_CPUS; i++) {

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#395: FILE: kernel/cpu.c:252:
+__initcall(register_cpus);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#397: FILE: kernel/cpu.c:254:
+EXPORT_SYMBOL_GPL(register_cpu_notifier);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#398: FILE: kernel/cpu.c:255:
+EXPORT_SYMBOL_GPL(unregister_cpu_notifier);

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#412: FILE: kernel/rcupdate.c:55:
+	spinlock_t lock;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around rcu_global_queue.list
#416: FILE: kernel/rcupdate.c:59:
+	.list = { &(rcu_global_queue.list), &(rcu_global_queue.list) }

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around rcu_global_queue.list
#416: FILE: kernel/rcupdate.c:59:
+	.list = { &(rcu_global_queue.list), &(rcu_global_queue.list) }

ERROR:TRAILING_WHITESPACE: trailing whitespace
#426: FILE: kernel/rcupdate.c:182:
+^I$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#429: FILE: kernel/rcupdate.c:185:
+	 * ok if we miss one since someone else can pick it up */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#436: FILE: kernel/rcupdate.c:192:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#477: FILE: kernel/rcupdate.c:263:
+^I$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#478: FILE: kernel/rcupdate.c:264:
+	BUG_ON(!list_empty(&RCU_curlist(cpu)));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#479: FILE: kernel/rcupdate.c:265:
+	BUG_ON(!list_empty(&RCU_nxtlist(cpu)));

ERROR:CODE_INDENT: code indent should use tabs where possible
#482: FILE: kernel/rcupdate.c:268:
+        list_del_init(&RCU_curlist(cpu));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#482: FILE: kernel/rcupdate.c:268:
+        list_del_init(&RCU_curlist(cpu));$

ERROR:CODE_INDENT: code indent should use tabs where possible
#483: FILE: kernel/rcupdate.c:269:
+        list_del_init(&RCU_nxtlist(cpu));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#483: FILE: kernel/rcupdate.c:269:
+        list_del_init(&RCU_nxtlist(cpu));$

ERROR:CODE_INDENT: code indent should use tabs where possible
#484: FILE: kernel/rcupdate.c:270:
+       ^Imemset(&per_cpu(rcu_data, cpu), 0, sizeof(struct rcu_data));$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#484: FILE: kernel/rcupdate.c:270:
+       ^Imemset(&per_cpu(rcu_data, cpu), 0, sizeof(struct rcu_data));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#484: FILE: kernel/rcupdate.c:270:
+       ^Imemset(&per_cpu(rcu_data, cpu), 0, sizeof(struct rcu_data));$

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#487: FILE: kernel/rcupdate.c:273:
 static int __devinit rcu_cpu_notify(struct notifier_block *self, 

ERROR:CODE_INDENT: code indent should use tabs where possible
#496: FILE: kernel/rcupdate.c:282:
+                rcu_offline_cpu(cpu);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#496: FILE: kernel/rcupdate.c:282:
+                rcu_offline_cpu(cpu);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#497: FILE: kernel/rcupdate.c:283:
+                break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#497: FILE: kernel/rcupdate.c:283:
+                break;$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#536: FILE: kernel/sched.c:477:
+			if (likely(cpu_online(smp_processor_id())) &&
+				unlikely(sync && !task_running(rq, p) &&

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#537: FILE: kernel/sched.c:478:
+				unlikely(sync && !task_running(rq, p) &&
 				(task_cpu(p) != smp_processor_id()) &&

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#545: FILE: kernel/sched.c:952:
+	/* CPU going down is a special case: we don't pull more tasks
+	   onboard */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#545: FILE: kernel/sched.c:952:
+	   onboard */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#611: FILE: kernel/sched.c:2257:
+/* Move (not current) task off this cpu, onto dest cpu.  Reference to
+   task must be held. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#611: FILE: kernel/sched.c:2257:
+   task must be held. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#641: FILE: kernel/sched.c:2287:
+/* Slow but sure.  We don't fight against load_balance, new people
+   setting affinity, or try_to_wake_up's fast path pulling things in,

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#642: FILE: kernel/sched.c:2288:
+   as cpu_online() no longer true. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#657: FILE: kernel/sched.c:2303:
+		/* Kernel threads which are bound to specific
+		   processors need to look after themselves

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#658: FILE: kernel/sched.c:2304:
+		   with their own callbacks */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!t->mm"
#659: FILE: kernel/sched.c:2305:
+		if (t->mm == NULL && t->cpus_allowed != ~0UL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#696: FILE: kernel/sched.c:2342:
+		schedule_timeout(30*HZ);
 		                   ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#755: FILE: kernel/sched.c:2394:
+		move_task_away(req->task,
+			any_online_cpu(req->task->cpus_allowed));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#760: FILE: kernel/sched.c:2399:
+	printk("Migration thread for %u exiting\n", cpu);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#784: FILE: kernel/sched.c:2423:
+
+

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#811: FILE: kernel/softirq.c:301:
+static struct task_struct *ksoftirq_killer = NULL;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#817: FILE: kernel/softirq.c:307:
+	BUG_ON (ksoftirqd_task(cpu));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#817: FILE: kernel/softirq.c:307:
+	BUG_ON (ksoftirqd_task(cpu));

WARNING:MEMORY_BARRIER: memory barrier without comment
#828: FILE: kernel/softirq.c:324:
+		rmb();

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#839: FILE: kernel/softirq.c:340:
+	printk("ksoftirqd for cpu%i dying\n", cpu);

WARNING:MEMORY_BARRIER: memory barrier without comment
#841: FILE: kernel/softirq.c:342:
+	wmb();

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#847: FILE: kernel/softirq.c:348:
 static int __devinit cpu_callback(struct notifier_block *nfb,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#858: FILE: kernel/softirq.c:357:
+		printk("firing up ksoftirqd for cpu%d\n", hotcpu);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#862: FILE: kernel/softirq.c:359:
+			printk("ksoftirqd for cpu%i failed\n", hotcpu);

ERROR:CODE_INDENT: code indent should use tabs where possible
#869: FILE: kernel/softirq.c:366:
+ ^I^Ibreak;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#869: FILE: kernel/softirq.c:366:
+ ^I^Ibreak;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#869: FILE: kernel/softirq.c:366:
+ ^I^Ibreak;$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#875: FILE: kernel/softirq.c:372:
+		/* Kill ksoftirqd: get ref in case it exits before we
+		   wake it */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#875: FILE: kernel/softirq.c:372:
+		   wake it */

WARNING:HOTPLUG_SECTION: Using __devinitdata is unnecessary
#912: FILE: kernel/softirq.c:408:
 static struct notifier_block __devinitdata cpu_nfb = {

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#939: FILE: kernel/timer.c:1180:
+static void __devinit migrate_timers_from(int cpu)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#945: FILE: kernel/timer.c:1186:
+	BUG_ON(cpu_online(cpu));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#953: FILE: kernel/timer.c:1194:
+	if (!base->tv1.index &&	(cascade(base, &base->tv2) == 1) &&
+		(cascade(base, &base->tv3) == 1) && cascade(base, &base->tv4) == 1)

WARNING:LINE_SPACING: Missing a blank line after declarations
#960: FILE: kernel/timer.c:1201:
+		timer_t *timer;
+		timer = list_entry(curr, timer_t, entry);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#962: FILE: kernel/timer.c:1203:
+		printk(KERN_DEBUG "migrating timer %p from cpu%d to cpu%d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#963: FILE: kernel/timer.c:1204:
+		printk(KERN_DEBUG "migrating timer %p from cpu%d to cpu%d\n",
+			timer, cpu, smp_processor_id());

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#972: FILE: kernel/timer.c:1213:
 static int __devinit timer_cpu_notify(struct notifier_block *self, 

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1058: FILE: kernel/workqueue.c:285:
+		BUG_ON(!cwq->thread);

WARNING:MEMORY_BARRIER: memory barrier without comment
#1126: FILE: kernel/workqueue.c:332:
+		wmb();

WARNING:MEMORY_BARRIER: memory barrier without comment
#1128: FILE: kernel/workqueue.c:334:
+		wmb();

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1132: FILE: kernel/workqueue.c:338:
+		printk("Workqueue thread %s for cpu %i exited\n",

CHECK:BRACES: Unbalanced braces around else statement
#1134: FILE: kernel/workqueue.c:340:
+	} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1135: FILE: kernel/workqueue.c:341:
+		printk("NO workqueue thread %s for cpu %i\n",

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1168: FILE: kernel/workqueue.c:363:
+static int __devinit cpu_callback(struct notifier_block *nfb,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1181: FILE: kernel/workqueue.c:376:
+				printk("workqueue for %i failed\n", hotcpu);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1189: FILE: kernel/workqueue.c:384:
+			printk("Cleaning up workqueue for %s\n", wq->name);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000392816.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 23 errors, 64 warnings, 25 checks, 1052 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000392816.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
