WARNING:TYPO_SPELLING: 'spliting' may be misspelled - perhaps 'splitting'?
#25: 
200kB (mostly new USB code and merging / spliting old code), so I will not 
                                         ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#69: 
--- a/include/sound/version.h	Tue Oct  1 17:05:36 2002

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:CVS_KEYWORD: CVS style keyword markers, these will _not_ be updated
#84: FILE: sound/arm/sa11xx-uda1341.c:18:
+/* $Id: sa11xx-uda1341.c,v 1.4 2002/08/06 18:03:25 perex Exp $ */

Since linux moved to git, the CVS markers are no longer used.
So, CVS style keywords ($Id$, $Revision$, $Log$) should not be
added.

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#181: FILE: sound/drivers/opl3/opl3_lib.c:104:
+	udelay(10);

usleep_range() should be preferred over udelay(). The proper way of
using usleep_range() is mentioned in the kernel docs.

See: https://www.kernel.org/doc/html/latest/timers/timers-howto.html#delays-information-on-the-various-kernel-delay-sleep-mechanisms

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#184: FILE: sound/drivers/opl3/opl3_lib.c:107:
+	udelay(30);

CHECK:BRACES: braces {} should be used on all arms of this statement
#250: FILE: sound/pci/cs4281.c:542:
+		if (can_schedule) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#252: FILE: sound/pci/cs4281.c:544:
+			signed long end_time;
+			delay = (delay * HZ) / 1000000;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:JIFFIES_COMPARISON: Comparing jiffies is almost always wrong; prefer time_after, time_before and friends
#259: FILE: sound/pci/cs4281.c:551:
+			} while (end_time - (signed long)jiffies >= 0);

CHECK:BRACES: Unbalanced braces around else statement
#260: FILE: sound/pci/cs4281.c:552:
+		} else

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#267: FILE: sound/pci/cs4281.c:559:
+inline static void snd_cs4281_delay_long(int can_schedule)

The inline keyword should sit between storage class and type.

For example, the following segment::

  inline static int example_function(void)
  {
          ...
  }

should be::

  static inline int example_function(void)
  {
          ...
  }

CHECK:BRACES: Unbalanced braces around else statement
#272: FILE: sound/pci/cs4281.c:564:
+	} else

CHECK:CAMELCASE: Avoid CamelCase: <regFCR>
#284: FILE: sound/pci/cs4281.c:742:
+		if (dma->regFCR != BA0_FCR0)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <valFCR>
#285: FILE: sound/pci/cs4281.c:743:
+			dma->valFCR &= ~BA0_FCR_FEN;

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#295: FILE: sound/pci/cs4281.c:829:
+		snd_cs4281_pokeBA0(chip, dma->regFCR, snd_cs4281_peekBA0(chip, dma->regFCR) & ~BA0_FCR_FEN);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:CAMELCASE: Avoid CamelCase: <snd_cs4281_pokeBA0>
#295: FILE: sound/pci/cs4281.c:829:
+		snd_cs4281_pokeBA0(chip, dma->regFCR, snd_cs4281_peekBA0(chip, dma->regFCR) & ~BA0_FCR_FEN);

CHECK:CAMELCASE: Avoid CamelCase: <snd_cs4281_peekBA0>
#295: FILE: sound/pci/cs4281.c:829:
+		snd_cs4281_pokeBA0(chip, dma->regFCR, snd_cs4281_peekBA0(chip, dma->regFCR) & ~BA0_FCR_FEN);

CHECK:CAMELCASE: Avoid CamelCase: <regDCC>
#313: FILE: sound/pci/cs4281.c:888:
+	       snd_cs4281_peekBA0(chip, dma->regDCC) - 1;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#323: FILE: sound/pci/cs4281.c:1059:
+static int snd_cs4281_info_volume(snd_kcontrol_t * kcontrol, snd_ctl_elem_info_t * uinfo)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#323: FILE: sound/pci/cs4281.c:1059:
+static int snd_cs4281_info_volume(snd_kcontrol_t * kcontrol, snd_ctl_elem_info_t * uinfo)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#331: FILE: sound/pci/cs4281.c:1067:
+ $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#331: FILE: sound/pci/cs4281.c:1067:
+ $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#332: FILE: sound/pci/cs4281.c:1068:
+static int snd_cs4281_get_volume(snd_kcontrol_t * kcontrol, snd_ctl_elem_value_t * ucontrol)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#332: FILE: sound/pci/cs4281.c:1068:
+static int snd_cs4281_get_volume(snd_kcontrol_t * kcontrol, snd_ctl_elem_value_t * ucontrol)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#347: FILE: sound/pci/cs4281.c:1083:
+static int snd_cs4281_put_volume(snd_kcontrol_t * kcontrol, snd_ctl_elem_value_t * ucontrol)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#347: FILE: sound/pci/cs4281.c:1083:
+static int snd_cs4281_put_volume(snd_kcontrol_t * kcontrol, snd_ctl_elem_value_t * ucontrol)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#371: FILE: sound/pci/cs4281.c:1107:
+static snd_kcontrol_new_t snd_cs4281_fm_vol = $

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#372: FILE: sound/pci/cs4281.c:1108:
+static snd_kcontrol_new_t snd_cs4281_fm_vol = 
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:INDENTED_LABEL: labels should not be indented
#373: FILE: sound/pci/cs4281.c:1109:
+	iface: SNDRV_CTL_ELEM_IFACE_MIXER,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#374: FILE: sound/pci/cs4281.c:1110:
+	name: "Synth Playback Volume",
 	    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:INDENTED_LABEL: labels should not be indented
#374: FILE: sound/pci/cs4281.c:1110:
+	name: "Synth Playback Volume",

ERROR:TRAILING_WHITESPACE: trailing whitespace
#375: FILE: sound/pci/cs4281.c:1111:
+^Iinfo: snd_cs4281_info_volume, $

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#375: FILE: sound/pci/cs4281.c:1111:
+	info: snd_cs4281_info_volume, 
 	    ^

WARNING:INDENTED_LABEL: labels should not be indented
#375: FILE: sound/pci/cs4281.c:1111:
+	info: snd_cs4281_info_volume, 

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#376: FILE: sound/pci/cs4281.c:1112:
+	get: snd_cs4281_get_volume,
 	   ^

WARNING:INDENTED_LABEL: labels should not be indented
#376: FILE: sound/pci/cs4281.c:1112:
+	get: snd_cs4281_get_volume,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#377: FILE: sound/pci/cs4281.c:1113:
+^Iput: snd_cs4281_put_volume, $

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#377: FILE: sound/pci/cs4281.c:1113:
+	put: snd_cs4281_put_volume, 
 	   ^

WARNING:INDENTED_LABEL: labels should not be indented
#377: FILE: sound/pci/cs4281.c:1113:
+	put: snd_cs4281_put_volume, 

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#378: FILE: sound/pci/cs4281.c:1114:
+	private_value: ((BA0_FMLVC << 16) | BA0_FMRVC),
 	             ^

WARNING:INDENTED_LABEL: labels should not be indented
#378: FILE: sound/pci/cs4281.c:1114:
+	private_value: ((BA0_FMLVC << 16) | BA0_FMRVC),

ERROR:TRAILING_WHITESPACE: trailing whitespace
#381: FILE: sound/pci/cs4281.c:1117:
+static snd_kcontrol_new_t snd_cs4281_pcm_vol = $

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#382: FILE: sound/pci/cs4281.c:1118:
+static snd_kcontrol_new_t snd_cs4281_pcm_vol = 
+{

WARNING:INDENTED_LABEL: labels should not be indented
#383: FILE: sound/pci/cs4281.c:1119:
+	iface: SNDRV_CTL_ELEM_IFACE_MIXER,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#384: FILE: sound/pci/cs4281.c:1120:
+	name: "PCM Stream Playback Volume",
 	    ^

WARNING:INDENTED_LABEL: labels should not be indented
#384: FILE: sound/pci/cs4281.c:1120:
+	name: "PCM Stream Playback Volume",

ERROR:TRAILING_WHITESPACE: trailing whitespace
#385: FILE: sound/pci/cs4281.c:1121:
+^Iinfo: snd_cs4281_info_volume, $

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#385: FILE: sound/pci/cs4281.c:1121:
+	info: snd_cs4281_info_volume, 
 	    ^

WARNING:INDENTED_LABEL: labels should not be indented
#385: FILE: sound/pci/cs4281.c:1121:
+	info: snd_cs4281_info_volume, 

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#386: FILE: sound/pci/cs4281.c:1122:
+	get: snd_cs4281_get_volume,
 	   ^

WARNING:INDENTED_LABEL: labels should not be indented
#386: FILE: sound/pci/cs4281.c:1122:
+	get: snd_cs4281_get_volume,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#387: FILE: sound/pci/cs4281.c:1123:
+^Iput: snd_cs4281_put_volume, $

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#387: FILE: sound/pci/cs4281.c:1123:
+	put: snd_cs4281_put_volume, 
 	   ^

WARNING:INDENTED_LABEL: labels should not be indented
#387: FILE: sound/pci/cs4281.c:1123:
+	put: snd_cs4281_put_volume, 

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#388: FILE: sound/pci/cs4281.c:1124:
+	private_value: ((BA0_PPLVC << 16) | BA0_PPRVC),
 	             ^

WARNING:INDENTED_LABEL: labels should not be indented
#388: FILE: sound/pci/cs4281.c:1124:
+	private_value: ((BA0_PPLVC << 16) | BA0_PPRVC),

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#398: FILE: sound/pci/cs4281.c:1154:
+	if ((err = snd_ctl_add(card, snd_ctl_new1(&snd_cs4281_fm_vol, chip))) < 0)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#400: FILE: sound/pci/cs4281.c:1156:
+	if ((err = snd_ctl_add(card, snd_ctl_new1(&snd_cs4281_pcm_vol, chip))) < 0)

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#421: FILE: sound/pci/cs4281.c:1450:
 static int __devinit snd_cs4281_create(snd_card_t * card,

ERROR:POINTER_LOCATION: "foo ** bar" should be "foo **bar"
#425: FILE: sound/pci/cs4281.c:1452:
+				       cs4281_t ** rchip,

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#451: FILE: sound/pci/cs4281.c:1518:
+	if ((err = snd_device_new(card, SNDRV_DEV_LOWLEVEL, chip, &ops)) < 0) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#596: FILE: sound/pci/cs4281.c:1719:
+^I^I              BA0_FCR_RS(1) |$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:CODE_INDENT: code indent should use tabs where possible
#597: FILE: sound/pci/cs4281.c:1720:
+ ^I  ^I              BA0_FCR_SZ(CS4281_FIFO_SIZE) |$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#597: FILE: sound/pci/cs4281.c:1720:
+ ^I  ^I              BA0_FCR_SZ(CS4281_FIFO_SIZE) |$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#597: FILE: sound/pci/cs4281.c:1720:
+ ^I  ^I              BA0_FCR_SZ(CS4281_FIFO_SIZE) |$

ERROR:CODE_INDENT: code indent should use tabs where possible
#598: FILE: sound/pci/cs4281.c:1721:
+^I^I              BA0_FCR_OF(chip->dma[0].fifo_offset);$

WARNING:HOTPLUG_SECTION: Using __devexit is unnecessary
#637: FILE: sound/pci/cs4281.c:2054:
 static void __devexit snd_cs4281_remove(struct pci_dev *pci)

WARNING:LINE_SPACING: Missing a blank line after declarations
#641: FILE: sound/pci/cs4281.c:2057:
+	cs4281_t *chip = pci_get_drvdata(pci);
+	snd_card_free(chip->card);

WARNING:ARRAY_SIZE: Prefer ARRAY_SIZE(array)
#666: FILE: sound/pci/cs4281.c:2082:
+#define number_of(array)	(sizeof(array) / sizeof(array[0]))

The ARRAY_SIZE(foo) macro should be preferred over
sizeof(foo)/sizeof(foo[0]) for finding number of elements in an
array.

The macro is defined in include/linux/kernel.h::

  #define ARRAY_SIZE(x) (sizeof(x) / sizeof((x)[0]))

CHECK:CAMELCASE: Avoid CamelCase: <ulCLK>
#673: FILE: sound/pci/cs4281.c:2089:
+	u32 ulCLK;

ERROR:CODE_INDENT: code indent should use tabs where possible
#711: FILE: sound/pci/cs4281.c:2127:
+      ^Isnd_power_unlock(card);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#711: FILE: sound/pci/cs4281.c:2127:
+      ^Isnd_power_unlock(card);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#711: FILE: sound/pci/cs4281.c:2127:
+      ^Isnd_power_unlock(card);$

WARNING:INDENTED_LABEL: labels should not be indented
#746: FILE: sound/pci/cs4281.c:2162:
+      __skip:

ERROR:CODE_INDENT: code indent should use tabs where possible
#747: FILE: sound/pci/cs4281.c:2163:
+      ^Isnd_power_unlock(card);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#747: FILE: sound/pci/cs4281.c:2163:
+      ^Isnd_power_unlock(card);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#747: FILE: sound/pci/cs4281.c:2163:
+      ^Isnd_power_unlock(card);$

WARNING:LINE_SPACING: Missing a blank line after declarations
#754: FILE: sound/pci/cs4281.c:2170:
+	cs4281_t *chip = snd_magic_cast(cs4281_t, pci_get_drvdata(dev), return -ENXIO);
+	cs4281_suspend(chip);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#757: FILE: sound/pci/cs4281.c:2173:
+}
+static int snd_cs4281_resume(struct pci_dev *dev)

WARNING:LINE_SPACING: Missing a blank line after declarations
#760: FILE: sound/pci/cs4281.c:2176:
+	cs4281_t *chip = snd_magic_cast(cs4281_t, pci_get_drvdata(dev), return -ENXIO);
+	cs4281_resume(chip);

WARNING:LINE_SPACING: Missing a blank line after declarations
#767: FILE: sound/pci/cs4281.c:2183:
+	cs4281_t *chip = snd_magic_cast(cs4281_t, pci_get_drvdata(dev), return);
+	cs4281_suspend(chip);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#769: FILE: sound/pci/cs4281.c:2185:
+}
+static void snd_cs4281_resume(struct pci_dev *dev)

WARNING:LINE_SPACING: Missing a blank line after declarations
#772: FILE: sound/pci/cs4281.c:2188:
+	cs4281_t *chip = snd_magic_cast(cs4281_t, pci_get_drvdata(dev), return);
+	cs4281_resume(chip);

WARNING:LINE_SPACING: Missing a blank line after declarations
#780: FILE: sound/pci/cs4281.c:2196:
+	cs4281_t *chip = snd_magic_cast(cs4281_t, card->power_state_private_data, return -ENXIO);
+	switch (power_state) {

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#804: FILE: sound/pci/cs4281.c:2220:
+	suspend: snd_cs4281_suspend,
 	       ^

WARNING:INDENTED_LABEL: labels should not be indented
#804: FILE: sound/pci/cs4281.c:2220:
+	suspend: snd_cs4281_suspend,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#805: FILE: sound/pci/cs4281.c:2221:
+	resume: snd_cs4281_resume,
 	      ^

WARNING:INDENTED_LABEL: labels should not be indented
#805: FILE: sound/pci/cs4281.c:2221:
+	resume: snd_cs4281_resume,

WARNING:INDENTED_LABEL: labels should not be indented
#893: FILE: sound/pci/ice1712.c:978:
+     __error:

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1032: FILE: sound/pci/ice1712.c:3850:
+		if ((err = snd_ice1712_ews88mt_chip_select(ice, 0x0f)) < 0)

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#1034: FILE: sound/pci/ice1712.c:3852:
+		/* Fall through */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1055: FILE: sound/pci/maestro3.c:784:
+	int irda_workaround;	/* non-zero if avoid to touch 0x10 on GPIO_DIRECTION
+				   (e.g. for IrDA on Dell Inspirons) */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1055: FILE: sound/pci/maestro3.c:784:
+				   (e.g. for IrDA on Dell Inspirons) */

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1080: FILE: sound/pci/maestro3.c:921:
+		device: 0x833e,
 		      ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1081: FILE: sound/pci/maestro3.c:922:
+		amp_gpio: 0x0d,
 		        ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1086: FILE: sound/pci/maestro3.c:927:
+		device: 0x00b0,
 		      ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1087: FILE: sound/pci/maestro3.c:928:
+		amp_gpio: -1,
 		        ^

WARNING:INDENTED_LABEL: labels should not be indented
#1087: FILE: sound/pci/maestro3.c:928:
+		amp_gpio: -1,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1093: FILE: sound/pci/maestro3.c:934:
+		device: 0x00a4,
 		      ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1094: FILE: sound/pci/maestro3.c:935:
+		amp_gpio: -1,
 		        ^

WARNING:INDENTED_LABEL: labels should not be indented
#1094: FILE: sound/pci/maestro3.c:935:
+		amp_gpio: -1,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1102: FILE: sound/pci/maestro3.c:943:
+
+

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#1114: FILE: sound/pci/maestro3.c:1895:
+		if (! chip->quirk || ! chip->quirk->irda_workaround)
 		    ^

ERROR:SPACING: space prohibited after that '!' (ctx:WxW)
#1114: FILE: sound/pci/maestro3.c:1895:
+		if (! chip->quirk || ! chip->quirk->irda_workaround)
 		                     ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000428088.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 47 errors, 42 warnings, 14 checks, 1025 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000428088.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
