WARNING:TYPO_SPELLING: 'seperate' may be misspelled - perhaps 'separate'?
#35: 
and counts free pages into seperate functions.  So that I can 
                           ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#62: 
Content-Type: application/x-patch ; name="linux-2.4.20-pre3_meminit_A1.patch"

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#67: 
--- a/arch/i386/mm/init.c	Sat Aug 17 13:35:47 2002

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

CHECK:BRACES: braces {} should be used on all arms of this statement
#82: FILE: arch/i386/mm/init.c:332:
+	if (low < max_dma)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#84: FILE: arch/i386/mm/init.c:334:
+	else {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#152: FILE: arch/i386/mm/init.c:461:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#167: FILE: arch/i386/mm/init.c:473:
+        highmem_start_page = mem_map + highstart_pfn;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#167: FILE: arch/i386/mm/init.c:473:
+        highmem_start_page = mem_map + highstart_pfn;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#168: FILE: arch/i386/mm/init.c:474:
+        max_mapnr = num_physpages = highend_pfn;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#168: FILE: arch/i386/mm/init.c:474:
+        max_mapnr = num_physpages = highend_pfn;$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#168: FILE: arch/i386/mm/init.c:474:
+        max_mapnr = num_physpages = highend_pfn;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:CODE_INDENT: code indent should use tabs where possible
#169: FILE: arch/i386/mm/init.c:475:
+        num_mappedpages = max_low_pfn;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#169: FILE: arch/i386/mm/init.c:475:
+        num_mappedpages = max_low_pfn;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#172: FILE: arch/i386/mm/init.c:477:
+        max_mapnr = num_mappedpages = num_physpages = max_low_pfn;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#172: FILE: arch/i386/mm/init.c:477:
+        max_mapnr = num_mappedpages = num_physpages = max_low_pfn;$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#172: FILE: arch/i386/mm/init.c:477:
+        max_mapnr = num_mappedpages = num_physpages = max_low_pfn;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#181: FILE: arch/i386/mm/init.c:483:
+	extern int ppro_with_ram_bug(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#196: FILE: arch/i386/mm/init.c:496:
+		if (page_is_ram(pfn) && PageReserved(mem_map+pfn))
 		                                            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#218: FILE: arch/i386/mm/init.c:500:
+	for (pfn = highend_pfn-1; pfn >= highstart_pfn; pfn--)
 	                      ^

CHECK:SPACING: No space is necessary after a cast
#219: FILE: arch/i386/mm/init.c:501:
+		one_highpage_init((struct page *) (mem_map + pfn), pfn, bad_ppro);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#230: FILE: arch/i386/mm/init.c:512:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:TRAILING_WHITESPACE: trailing whitespace
#231: FILE: arch/i386/mm/init.c:513:
+^I$

CHECK:SPACING: No space is necessary after a cast
#234: FILE: arch/i386/mm/init.c:516:
+	high_memory = (void *) __va(max_low_pfn * PAGE_SIZE);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000438737.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 7 errors, 8 warnings, 8 checks, 172 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000438737.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
