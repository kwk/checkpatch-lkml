WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#74: FILE: drivers/dma/dmaengine.c:108:
+	__ATTR(count, S_IRUGO, show_count, NULL),

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#95: FILE: drivers/dma/dmaengine.c:249:
+struct dma_client *dma_async_client_register(enum dma_function_type type,
+		dma_event_callback event_callback)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#117: FILE: drivers/dma/dmaengine.c:412:
+EXPORT_SYMBOL(dma_async_buf_to_pg);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#118: FILE: drivers/dma/dmaengine.c:413:
+EXPORT_SYMBOL(dma_async_pg_to_pg);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#119: FILE: drivers/dma/dmaengine.c:414:
+EXPORT_SYMBOL(dma_async_complete);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#120: FILE: drivers/dma/dmaengine.c:415:
+EXPORT_SYMBOL(dma_async_issue_pending);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#132: FILE: drivers/dma/ioatdma.c:43:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#134: FILE: drivers/dma/ioatdma.c:45:
 static int __devinit ioat_probe(struct pci_dev *pdev, const struct pci_device_id *ent);

WARNING:HOTPLUG_SECTION: Using __devexit is unnecessary
#135: FILE: drivers/dma/ioatdma.c:46:
 static void __devexit ioat_remove(struct pci_dev *pdev);

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#148: FILE: drivers/dma/ioatdma.c:693:
 static int __devinit ioat_probe(struct pci_dev *pdev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#221: FILE: include/linux/dmaengine.h:179:
+	dma_cookie_t (*buf_to_buf)(struct dma_chan *chan,
+				void *dest, void *src, size_t len);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#223: FILE: include/linux/dmaengine.h:181:
+	dma_cookie_t (*buf_to_pg)(struct dma_chan *chan,
+				struct page *page, unsigned int offset,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#226: FILE: include/linux/dmaengine.h:184:
+	dma_cookie_t (*pg_to_pg)(struct dma_chan *chan,
+				struct page *dest_pg, unsigned int dest_off,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#230: FILE: include/linux/dmaengine.h:188:
+	enum dma_status (*complete)(struct dma_chan *chan,
+				dma_cookie_t cookie, dma_cookie_t *last,

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'chan' - possible side-effects?
#275: FILE: include/linux/dmaengine.h:221:
+#define CHAN2FUNCS(chan) (chan->device->funcs[chan->client->type])

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'chan' may be better as '(chan)' to avoid precedence issues
#275: FILE: include/linux/dmaengine.h:221:
+#define CHAN2FUNCS(chan) (chan->device->funcs[chan->client->type])

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#281: FILE: include/linux/dmaengine.h:226:
+struct dma_client *dma_async_client_register(enum dma_function_type type,
+		dma_event_callback event_callback);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#299: FILE: include/linux/dmaengine.h:244:
+static inline dma_cookie_t dma_async_buf_to_buf(struct dma_chan *chan,
+		void *dest, void *src, size_t len)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#324: FILE: include/linux/dmaengine.h:268:
+static inline dma_cookie_t dma_async_buf_to_pg(struct dma_chan *chan,
+		struct page *page, unsigned int offset,

ERROR:SPACING: space prohibited after that open parenthesis '('
#352: FILE: include/linux/dmaengine.h:294:
+static inline dma_cookie_t dma_async_pg_to_pg( struct dma_chan *chan,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#353: FILE: include/linux/dmaengine.h:295:
+static inline dma_cookie_t dma_async_pg_to_pg( struct dma_chan *chan,
+		struct page *dest_pg, unsigned int dest_off,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#396: FILE: include/linux/dmaengine.h:331:
+static inline enum dma_status dma_async_complete(struct dma_chan *chan,
+		dma_cookie_t cookie, dma_cookie_t *last,

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#444: FILE: drivers/dma/iovlock.c:154:
+			dma_cookie = dma_async_buf_to_buf(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#454: FILE: drivers/dma/iovlock.c:214:
+			dma_cookie = dma_async_buf_to_pg(chan,
 					page_list->pages[page_idx],

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#463: FILE: drivers/dma/iovlock.c:278:
+			dma_cookie = dma_async_pg_to_pg(chan,
 					page_list->pages[page_idx],

ERROR:CODE_INDENT: code indent should use tabs where possible
#481: FILE: net/ipv4/tcp.c:1437:
+^I^I                          tp->ucopy.dma_cookie, &done,$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:CODE_INDENT: code indent should use tabs where possible
#482: FILE: net/ipv4/tcp.c:1438:
+^I^I                          &used) == DMA_IN_PROGRESS) {$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000037831.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 3 errors, 8 warnings, 16 checks, 389 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000037831.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
