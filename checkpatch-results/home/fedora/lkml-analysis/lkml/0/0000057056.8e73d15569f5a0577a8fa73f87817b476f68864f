WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#66: 
did not handle their demotions well, as they occured well into their
                                             ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#115: FILE: security/slim/slm_main.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#175: FILE: security/slim/slm_main.c:61:
+};
+static char *slm_sac_str[] = { ZERO_STR,

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited before semicolon
#196: FILE: security/slim/slm_main.c:82:
+			while ((*bufp != '\n') && (bufp++ < buf_end)) ;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#196: FILE: security/slim/slm_main.c:82:
+			while ((*bufp != '\n') && (bufp++ < buf_end)) ;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'level->guard.iac_r != SLM_IAC_NOTDEFINED'
#222: FILE: security/slim/slm_main.c:108:
+	if ((level->guard.iac_r != SLM_IAC_NOTDEFINED)
+	    && (level->guard.iac_wx != SLM_IAC_NOTDEFINED))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'level->guard.iac_wx != SLM_IAC_NOTDEFINED'
#222: FILE: security/slim/slm_main.c:108:
+	if ((level->guard.iac_r != SLM_IAC_NOTDEFINED)
+	    && (level->guard.iac_wx != SLM_IAC_NOTDEFINED))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#223: FILE: security/slim/slm_main.c:109:
+	if ((level->guard.iac_r != SLM_IAC_NOTDEFINED)
+	    && (level->guard.iac_wx != SLM_IAC_NOTDEFINED))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'level->guard.sac_rx != SLM_SAC_NOTDEFINED'
#230: FILE: security/slim/slm_main.c:116:
+	if ((level->guard.sac_rx != SLM_SAC_NOTDEFINED)
+	    && (level->guard.sac_w != SLM_SAC_NOTDEFINED))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'level->guard.sac_w != SLM_SAC_NOTDEFINED'
#230: FILE: security/slim/slm_main.c:116:
+	if ((level->guard.sac_rx != SLM_SAC_NOTDEFINED)
+	    && (level->guard.sac_w != SLM_SAC_NOTDEFINED))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#231: FILE: security/slim/slm_main.c:117:
+	if ((level->guard.sac_rx != SLM_SAC_NOTDEFINED)
+	    && (level->guard.sac_w != SLM_SAC_NOTDEFINED))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#236: FILE: security/slim/slm_main.c:122:
+/* $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#262: FILE: security/slim/slm_main.c:148:
+ * Revoke write permission on an open file.  $

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#279: FILE: security/slim/slm_main.c:165:
+		i =j * __NFDBITS;
 		  ^

ERROR:SPACING: spaces required around that '>=' (ctx:VxW)
#280: FILE: security/slim/slm_main.c:166:
+		if ( i>= fdt->max_fdset || i >= fdt->max_fds)
 		      ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#280: FILE: security/slim/slm_main.c:166:
+		if ( i>= fdt->max_fdset || i >= fdt->max_fds)

ERROR:SPACING: space required before the open parenthesis '('
#283: FILE: security/slim/slm_main.c:169:
+		while(fd) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cur_level->iac_level < isec->level.iac_level'
#304: FILE: security/slim/slm_main.c:190:
+	if ((mpnt->vm_flags & VM_WRITE)
+	    && (mpnt->vm_flags & VM_SHARED)
+	    && (cur_level->iac_level < isec->level.iac_level)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#305: FILE: security/slim/slm_main.c:191:
+	if ((mpnt->vm_flags & VM_WRITE)
+	    && (mpnt->vm_flags & VM_SHARED)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#306: FILE: security/slim/slm_main.c:192:
+	    && (mpnt->vm_flags & VM_SHARED)
+	    && (cur_level->iac_level < isec->level.iac_level)) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#307: FILE: security/slim/slm_main.c:193:
+		if (strncmp(dentry->d_name.name, "SYSV", 4) == 0) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#311: FILE: security/slim/slm_main.c:197:
+		} else

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'current->pid != group_tsk->pid'
#353: FILE: security/slim/slm_main.c:239:
+	if ((current->pid != group_tsk->pid) && (current->mm == group_tsk->mm))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'current->mm == group_tsk->mm'
#353: FILE: security/slim/slm_main.c:239:
+	if ((current->pid != group_tsk->pid) && (current->mm == group_tsk->mm))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#359: FILE: security/slim/slm_main.c:245:
+^I^I^I^I   $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'current->pid != 1'
#396: FILE: security/slim/slm_main.c:282:
+	if ((!is_kernel_thread(current)) && (current->pid != 1)) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#409: FILE: security/slim/slm_main.c:295:
+	if (memcmp(token, EXEMPT_STR, strlen(EXEMPT_STR)) == 0)
[...]
+	else {
[...]

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#411: FILE: security/slim/slm_main.c:297:
+		return SLM_IAC_EXEMPT;
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#411: FILE: security/slim/slm_main.c:297:
+	else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#425: FILE: security/slim/slm_main.c:311:
+	if (memcmp(token, EXEMPT_STR, strlen(EXEMPT_STR)) == 0)
[...]
+	else {
[...]

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#427: FILE: security/slim/slm_main.c:313:
+		return SLM_SAC_EXEMPT;
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#427: FILE: security/slim/slm_main.c:313:
+	else {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#444: FILE: security/slim/slm_main.c:330:
+/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#445: FILE: security/slim/slm_main.c:331:
+ * Get the 7 access class levels from the extended attribute $

WARNING:LONG_LINE_COMMENT: line length of 116 exceeds 100 columns
#446: FILE: security/slim/slm_main.c:332:
+ * Format: TIMESTAMP INTEGRITY SECRECY [INTEGRITY_GUARD INTEGRITY_GUARD] [SECRECY_GUARD SECRECY_GUARD] [GUARD_ TYPE]

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#466: FILE: security/slim/slm_main.c:352:
+			if ((level->iac_level =

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#497: FILE: security/slim/slm_main.c:383:
+ * ^I^I^I or -EINVAL$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#509: FILE: security/slim/slm_main.c:395:
+		printk(KERN_INFO

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#524: FILE: security/slim/slm_main.c:410:
+			printk(KERN_INFO "%s integrity_verify_data failed "

WARNING:SPLIT_STRING: quoted string split across lines
#525: FILE: security/slim/slm_main.c:411:
+			printk(KERN_INFO "%s integrity_verify_data failed "
+			       " (%d)\n", dentry->d_name.name, rc);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rc == INTEGRITY_FAIL'
#557: FILE: security/slim/slm_main.c:443:
+	if ((rc == INTEGRITY_FAIL) || (rc == INTEGRITY_NOLABEL)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rc == INTEGRITY_NOLABEL'
#557: FILE: security/slim/slm_main.c:443:
+	if ((rc == INTEGRITY_FAIL) || (rc == INTEGRITY_NOLABEL)) {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*isec)...) over kzalloc(sizeof(struct slm_isec_data)...)
#573: FILE: security/slim/slm_main.c:459:
+	isec = kzalloc(sizeof(struct slm_isec_data), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#581: FILE: security/slim/slm_main.c:467:
+static struct slm_isec_data * slm_inode_alloc_and_lock(struct inode *inode)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#584: FILE: security/slim/slm_main.c:470:
+	struct slm_isec_data *isec = slm_alloc_security();
+	if (!isec)

CHECK:BRACES: braces {} should be used on all arms of this statement
#588: FILE: security/slim/slm_main.c:474:
+	if (inode->i_security) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#591: FILE: security/slim/slm_main.c:477:
+	} else

ERROR:TRAILING_WHITESPACE: trailing whitespace
#599: FILE: security/slim/slm_main.c:485:
+ * Exempt objects without extended attribute support $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'inode->i_sb->s_magic == PROC_SUPER_MAGIC'
#603: FILE: security/slim/slm_main.c:489:
+	if ((inode->i_sb->s_magic == PROC_SUPER_MAGIC)
+	    || S_ISCHR(inode->i_mode) || S_ISBLK(inode->i_mode))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#604: FILE: security/slim/slm_main.c:490:
+	if ((inode->i_sb->s_magic == PROC_SUPER_MAGIC)
+	    || S_ISCHR(inode->i_mode) || S_ISBLK(inode->i_mode))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'isec->level.iac_level != SLM_IAC_NOTDEFINED'
#618: FILE: security/slim/slm_main.c:504:
+	if (isec && (isec->level.iac_level != SLM_IAC_NOTDEFINED)) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#629: FILE: security/slim/slm_main.c:515:
+	if (is_exempt(inode)) {
[...]
+	} else if (S_ISSOCK(inode->i_mode))
[...]
+	else
[...]

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*tsec)...) over kzalloc(sizeof(struct slm_tsec_data)...)
#650: FILE: security/slim/slm_main.c:536:
+	tsec = kzalloc(sizeof(struct slm_tsec_data), GFP_KERNEL);

CHECK:BRACES: braces {} should be used on all arms of this statement
#654: FILE: security/slim/slm_main.c:540:
+	if (!cur_tsec) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#659: FILE: security/slim/slm_main.c:545:
+	} else

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cur_tsec->iac_r <= level->iac_level'
#674: FILE: security/slim/slm_main.c:560:
+	if (!((cur_tsec->iac_r <= level->iac_level)
+	      || (level->iac_level == SLM_IAC_EXEMPT))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'level->iac_level == SLM_IAC_EXEMPT'
#674: FILE: security/slim/slm_main.c:560:
+	if (!((cur_tsec->iac_r <= level->iac_level)
+	      || (level->iac_level == SLM_IAC_EXEMPT))) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#675: FILE: security/slim/slm_main.c:561:
+	if (!((cur_tsec->iac_r <= level->iac_level)
+	      || (level->iac_level == SLM_IAC_EXEMPT))) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#677: FILE: security/slim/slm_main.c:563:
+		 * Even in the case of a integrity guard process. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cur_tsec->sac_rx >= level->sac_level'
#696: FILE: security/slim/slm_main.c:582:
+	if (!((cur_tsec->sac_rx >= level->sac_level)
+	      || (level->sac_level == SLM_SAC_EXEMPT))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'level->sac_level == SLM_SAC_EXEMPT'
#696: FILE: security/slim/slm_main.c:582:
+	if (!((cur_tsec->sac_rx >= level->sac_level)
+	      || (level->sac_level == SLM_SAC_EXEMPT))) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#697: FILE: security/slim/slm_main.c:583:
+	if (!((cur_tsec->sac_rx >= level->sac_level)
+	      || (level->sac_level == SLM_SAC_EXEMPT))) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#698: FILE: security/slim/slm_main.c:584:
+	      || (level->sac_level == SLM_SAC_EXEMPT))) {
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#700: FILE: security/slim/slm_main.c:586:
+		 * Even in the case of a secrecy guard process. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#709: FILE: security/slim/slm_main.c:595:
+		 * sensitive data */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cur_tsec->iac_wx >= level->iac_level'
#727: FILE: security/slim/slm_main.c:613:
+	if (!((cur_tsec->iac_wx >= level->iac_level)
+	      || (level->iac_level == SLM_IAC_NOTDEFINED)
+	      || (level->iac_level == SLM_IAC_EXEMPT)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'level->iac_level == SLM_IAC_NOTDEFINED'
#727: FILE: security/slim/slm_main.c:613:
+	if (!((cur_tsec->iac_wx >= level->iac_level)
+	      || (level->iac_level == SLM_IAC_NOTDEFINED)
+	      || (level->iac_level == SLM_IAC_EXEMPT)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'level->iac_level == SLM_IAC_EXEMPT'
#727: FILE: security/slim/slm_main.c:613:
+	if (!((cur_tsec->iac_wx >= level->iac_level)
+	      || (level->iac_level == SLM_IAC_NOTDEFINED)
+	      || (level->iac_level == SLM_IAC_EXEMPT)))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#728: FILE: security/slim/slm_main.c:614:
+	if (!((cur_tsec->iac_wx >= level->iac_level)
+	      || (level->iac_level == SLM_IAC_NOTDEFINED)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#729: FILE: security/slim/slm_main.c:615:
+	      || (level->iac_level == SLM_IAC_NOTDEFINED)
+	      || (level->iac_level == SLM_IAC_EXEMPT)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cur_tsec->sac_w <= level->sac_level'
#742: FILE: security/slim/slm_main.c:628:
+	if (!((cur_tsec->sac_w <= level->sac_level)
+	      || (level->sac_level == SLM_SAC_EXEMPT)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'level->sac_level == SLM_SAC_EXEMPT'
#742: FILE: security/slim/slm_main.c:628:
+	if (!((cur_tsec->sac_w <= level->sac_level)
+	      || (level->sac_level == SLM_SAC_EXEMPT)))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#743: FILE: security/slim/slm_main.c:629:
+	if (!((cur_tsec->sac_w <= level->sac_level)
+	      || (level->sac_level == SLM_SAC_EXEMPT)))

CHECK:BRACES: braces {} should be used on all arms of this statement
#772: FILE: security/slim/slm_main.c:658:
+		if (current->security) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#775: FILE: security/slim/slm_main.c:661:
+		} else

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#811: FILE: security/slim/slm_main.c:697:
+				struct nameidata *nd)
 				                  ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#819: FILE: security/slim/slm_main.c:705:
+	dentry = (!nd || !nd->dentry) ? d_find_alias(inode) : nd->dentry;
 	           ^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#832: FILE: security/slim/slm_main.c:718:
+/* $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cur_tsec->iac_wx >= parent_level->iac_level'
#872: FILE: security/slim/slm_main.c:758:
+	if (!((cur_tsec->iac_wx >= parent_level->iac_level)
+	      || (parent_level->iac_level == SLM_IAC_EXEMPT)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'parent_level->iac_level == SLM_IAC_EXEMPT'
#872: FILE: security/slim/slm_main.c:758:
+	if (!((cur_tsec->iac_wx >= parent_level->iac_level)
+	      || (parent_level->iac_level == SLM_IAC_EXEMPT)))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#873: FILE: security/slim/slm_main.c:759:
+	if (!((cur_tsec->iac_wx >= parent_level->iac_level)
+	      || (parent_level->iac_level == SLM_IAC_EXEMPT)))

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#881: FILE: security/slim/slm_main.c:767:
+			 char **name, void **value, size_t * value_len)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#939: FILE: security/slim/slm_main.c:825:
+				   char **name, void **value, size_t * len)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'parent_isec->level.iac_level != SLM_IAC_NOTDEFINED'
#953: FILE: security/slim/slm_main.c:839:
+	if (parent_isec && (parent_isec->level.iac_level != SLM_IAC_NOTDEFINED))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cur_tsec->iac_wx != cur_tsec->iac_r'
#968: FILE: security/slim/slm_main.c:854:
+		if (S_ISDIR(inode->i_mode)
+		    && (cur_tsec->iac_wx != cur_tsec->iac_r)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#969: FILE: security/slim/slm_main.c:855:
+		if (S_ISDIR(inode->i_mode)
+		    && (cur_tsec->iac_wx != cur_tsec->iac_r)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cur_tsec->iac_wx != cur_tsec->iac_r'
#976: FILE: security/slim/slm_main.c:862:
+	if (S_ISSOCK(inode->i_mode)
+	    && (cur_tsec->iac_wx != cur_tsec->iac_r)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#977: FILE: security/slim/slm_main.c:863:
+	if (S_ISSOCK(inode->i_mode)
+	    && (cur_tsec->iac_wx != cur_tsec->iac_r)) {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*data)...) over kmalloc(sizeof(struct xattr_data)...)
#989: FILE: security/slim/slm_main.c:875:
+	data = kmalloc(sizeof(struct xattr_data), GFP_KERNEL);

CHECK:BRACES: braces {} should be used on all arms of this statement
#1010: FILE: security/slim/slm_main.c:896:
+		if (is_exempt(inode)) {
[...]
+		} else if (S_ISSOCK(inode->i_mode))
[...]
+		else
[...]

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1074: FILE: security/slim/slm_main.c:960:
+ * being promoted.
+*/

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1095: FILE: security/slim/slm_main.c:981:
+		      strlen(USER_STR)) != 0)
+		    &&

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1105: FILE: security/slim/slm_main.c:991:
+		      strlen(SYSTEM_STR)) != 0)
+		    &&

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1109: FILE: security/slim/slm_main.c:995:
+		      strlen(USER_STR)) != 0)
+		    &&

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1114: FILE: security/slim/slm_main.c:1000:
+		     != 0)
+		    &&

WARNING:LINE_SPACING: Missing a blank line after declarations
#1167: FILE: security/slim/slm_main.c:1053:
+	struct slm_isec_data *isec = slm_alloc_security();
+	if (!isec)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'family != AF_UNIX'
#1186: FILE: security/slim/slm_main.c:1072:
+	if ((family != AF_UNIX) && (family != AF_NETLINK)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'family != AF_NETLINK'
#1186: FILE: security/slim/slm_main.c:1072:
+	if ((family != AF_UNIX) && (family != AF_NETLINK)) {

WARNING:SPACING: space prohibited before semicolon
#1273: FILE: security/slim/slm_main.c:1159:
+	if (!cur_tsec) ;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1273: FILE: security/slim/slm_main.c:1159:
+	if (!cur_tsec) ;

CHECK:BRACES: braces {} should be used on all arms of this statement
#1273: FILE: security/slim/slm_main.c:1159:
+	if (!cur_tsec) ;
[...]
+	else if (flags == LSM_SETID_ID) {
[...]

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cur_tsec->iac_r == cur_tsec->iac_wx'
#1276: FILE: security/slim/slm_main.c:1162:
+		if ((cur_tsec->iac_r == cur_tsec->iac_wx)
+			&& (cur_tsec->iac_r == SLM_IAC_UNTRUSTED));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cur_tsec->iac_r == SLM_IAC_UNTRUSTED'
#1276: FILE: security/slim/slm_main.c:1162:
+		if ((cur_tsec->iac_r == cur_tsec->iac_wx)
+			&& (cur_tsec->iac_r == SLM_IAC_UNTRUSTED));

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1276: FILE: security/slim/slm_main.c:1162:
+		if ((cur_tsec->iac_r == cur_tsec->iac_wx)
+			&& (cur_tsec->iac_r == SLM_IAC_UNTRUSTED));

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1277: FILE: security/slim/slm_main.c:1163:
+		if ((cur_tsec->iac_r == cur_tsec->iac_wx)
+			&& (cur_tsec->iac_r == SLM_IAC_UNTRUSTED));

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1298: FILE: security/slim/slm_main.c:1184:
+
+}

CHECK:BRACES: braces {} should be used on all arms of this statement
#1306: FILE: security/slim/slm_main.c:1192:
+	if (is_kernel_thread(tsk))
[...]
+	else if (!tsec)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1310: FILE: security/slim/slm_main.c:1196:
+	else {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cur_tsec->iac_wx <= level->iac_level'
#1331: FILE: security/slim/slm_main.c:1217:
+	if ((cur_tsec->iac_wx <= level->iac_level)
+	    || (level->iac_level == SLM_IAC_EXEMPT)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'level->iac_level == SLM_IAC_EXEMPT'
#1331: FILE: security/slim/slm_main.c:1217:
+	if ((cur_tsec->iac_wx <= level->iac_level)
+	    || (level->iac_level == SLM_IAC_EXEMPT)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1332: FILE: security/slim/slm_main.c:1218:
+	if ((cur_tsec->iac_wx <= level->iac_level)
+	    || (level->iac_level == SLM_IAC_EXEMPT)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'level->guard.unlimited'
#1352: FILE: security/slim/slm_main.c:1238:
+	if ((strcmp(bprm->filename, bprm->interp) != 0)
+	    && (level->guard.unlimited))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1353: FILE: security/slim/slm_main.c:1239:
+	if ((strcmp(bprm->filename, bprm->interp) != 0)
+	    && (level->guard.unlimited))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cur_tsec->sac_rx >= level->sac_level'
#1380: FILE: security/slim/slm_main.c:1266:
+	if ((cur_tsec->sac_rx >= level->sac_level)
+	    || (level->sac_level == SLM_SAC_EXEMPT)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'level->sac_level == SLM_SAC_EXEMPT'
#1380: FILE: security/slim/slm_main.c:1266:
+	if ((cur_tsec->sac_rx >= level->sac_level)
+	    || (level->sac_level == SLM_SAC_EXEMPT)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1381: FILE: security/slim/slm_main.c:1267:
+	if ((cur_tsec->sac_rx >= level->sac_level)
+	    || (level->sac_level == SLM_SAC_EXEMPT)) {

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1418: FILE: security/slim/slm_main.c:1304:
+ * ^I- update integrity process level of integrity guard program$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1419: FILE: security/slim/slm_main.c:1305:
+ * ^I- update secrecy process level of secrecy guard program$

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#1433: FILE: security/slim/slm_main.c:1319:
+			return 0;
+		else

CHECK:BRACES: braces {} should be used on all arms of this statement
#1532: FILE: security/slim/slm_main.c:1418:
+		if (is_exempt(inode)) {
[...]
+		} else if (S_ISSOCK(inode->i_mode))
[...]
+		else 
[...]

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1537: FILE: security/slim/slm_main.c:1423:
+^I^Ielse $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1548: FILE: security/slim/slm_main.c:1434:
+			 char __user * shmaddr, int shmflg)

CHECK:BRACES: braces {} should be used on all arms of this statement
#1567: FILE: security/slim/slm_main.c:1453:
+		if (is_exempt(inode)) {
[...]
+		} else if (S_ISSOCK(inode->i_mode))
[...]
+		else 
[...]

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1572: FILE: security/slim/slm_main.c:1458:
+^I^Ielse $

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000057056.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 21 errors, 22 warnings, 81 checks, 1536 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000057056.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
