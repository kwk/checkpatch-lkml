WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#44: 
D: #define __get_cpu_var(var) (*RELOC_HIDE(&per_cpu__##var, __ia64_per_cpu_var(local_per_cpu_offset)))

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#77: FILE: include/asm-ia64/percpu.h:19:
+#define DECLARE_PER_CPU(type, name) extern __typeof__(type) per_cpu__##name

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#94: FILE: include/asm-ia64/percpu.h:34:
+    __attribute__((__section__(".data.percpu"))) __typeof__(type) per_cpu__##name$

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".data.percpu") over __attribute__((__section__(".data.percpu")))
#94: FILE: include/asm-ia64/percpu.h:34:
+    __attribute__((__section__(".data.percpu"))) __typeof__(type) per_cpu__##name

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#111: FILE: include/asm-ia64/percpu.h:43:
+#define DEFINE_PER_CPU(type, name)		__typeof__(type) per_cpu__##name

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#117: FILE: include/asm-ia64/percpu.h:49:
+#define EXPORT_PER_CPU_SYMBOL(var)		EXPORT_SYMBOL(per_cpu__##var)

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#118: FILE: include/asm-ia64/percpu.h:50:
+#define EXPORT_PER_CPU_SYMBOL_GPL(var)		EXPORT_SYMBOL_GPL(per_cpu__##var)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#151: FILE: include/asm-ia64/atomic.h:24:
+typedef struct { volatile __s64 counter; } atomic64_t;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#160: FILE: include/asm-ia64/atomic.h:33:
+#define atomic64_set(v,i)	(((v)->counter) = (i))
                       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:INLINE: plain inline is preferred over __inline__
#173: FILE: include/asm-ia64/atomic.h:49:
+static __inline__ int

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#174: FILE: include/asm-ia64/atomic.h:50:
+ia64_atomic64_add (int i, atomic64_t *v)

WARNING:LINE_SPACING: Missing a blank line after declarations
#177: FILE: include/asm-ia64/atomic.h:53:
+	__s64 old, new;
+	CMPXCHG_BUGCHECK_DECL

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:INLINE: plain inline is preferred over __inline__
#191: FILE: include/asm-ia64/atomic.h:77:
+static __inline__ int

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#192: FILE: include/asm-ia64/atomic.h:78:
+ia64_atomic64_sub (int i, atomic64_t *v)

WARNING:LINE_SPACING: Missing a blank line after declarations
#195: FILE: include/asm-ia64/atomic.h:81:
+	__s64 old, new;
+	CMPXCHG_BUGCHECK_DECL

ERROR:SPACING: space required after that ',' (ctx:VxV)
#212: FILE: include/asm-ia64/atomic.h:103:
+#define atomic64_add_return(i,v)					\
                              ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'v' - possible side-effects?
#212: FILE: include/asm-ia64/atomic.h:103:
+#define atomic64_add_return(i,v)					\
+({									\
+	long __ia64_aar_i = (i);					\
+	(__builtin_constant_p(i)					\
+	 && (   (__ia64_aar_i ==  1) || (__ia64_aar_i ==   4)		\
+	     || (__ia64_aar_i ==  8) || (__ia64_aar_i ==  16)		\
+	     || (__ia64_aar_i == -1) || (__ia64_aar_i ==  -4)		\
+	     || (__ia64_aar_i == -8) || (__ia64_aar_i == -16)))		\
+		? ia64_fetch_and_add(__ia64_aar_i, &(v)->counter)	\
+		: ia64_atomic64_add(__ia64_aar_i, v);			\
+})

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#216: FILE: include/asm-ia64/atomic.h:107:
+	(__builtin_constant_p(i)					\
+	 && (   (__ia64_aar_i ==  1) || (__ia64_aar_i ==   4)		\

ERROR:SPACING: space prohibited after that open parenthesis '('
#216: FILE: include/asm-ia64/atomic.h:107:
+	 && (   (__ia64_aar_i ==  1) || (__ia64_aar_i ==   4)		\

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#217: FILE: include/asm-ia64/atomic.h:108:
+	 && (   (__ia64_aar_i ==  1) || (__ia64_aar_i ==   4)		\
+	     || (__ia64_aar_i ==  8) || (__ia64_aar_i ==  16)		\

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#218: FILE: include/asm-ia64/atomic.h:109:
+	     || (__ia64_aar_i ==  8) || (__ia64_aar_i ==  16)		\
+	     || (__ia64_aar_i == -1) || (__ia64_aar_i ==  -4)		\

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#219: FILE: include/asm-ia64/atomic.h:110:
+	     || (__ia64_aar_i == -1) || (__ia64_aar_i ==  -4)		\
+	     || (__ia64_aar_i == -8) || (__ia64_aar_i == -16)))		\

WARNING:INLINE: plain inline is preferred over __inline__
#231: FILE: include/asm-ia64/atomic.h:125:
+static __inline__ int

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#232: FILE: include/asm-ia64/atomic.h:126:
+atomic_add64_negative (int i, atomic64_t *v)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#244: FILE: include/asm-ia64/atomic.h:143:
+#define atomic64_sub_return(i,v)					\
                              ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'v' - possible side-effects?
#244: FILE: include/asm-ia64/atomic.h:143:
+#define atomic64_sub_return(i,v)					\
+({									\
+	long __ia64_asr_i = (i);					\
+	(__builtin_constant_p(i)					\
+	 && (   (__ia64_asr_i ==   1) || (__ia64_asr_i ==   4)		\
+	     || (__ia64_asr_i ==   8) || (__ia64_asr_i ==  16)		\
+	     || (__ia64_asr_i ==  -1) || (__ia64_asr_i ==  -4)		\
+	     || (__ia64_asr_i ==  -8) || (__ia64_asr_i == -16)))	\
+		? ia64_fetch_and_add(-__ia64_asr_i, &(v)->counter)	\
+		: ia64_atomic64_sub(__ia64_asr_i, v);			\
+})

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#248: FILE: include/asm-ia64/atomic.h:147:
+	(__builtin_constant_p(i)					\
+	 && (   (__ia64_asr_i ==   1) || (__ia64_asr_i ==   4)		\

ERROR:SPACING: space prohibited after that open parenthesis '('
#248: FILE: include/asm-ia64/atomic.h:147:
+	 && (   (__ia64_asr_i ==   1) || (__ia64_asr_i ==   4)		\

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#249: FILE: include/asm-ia64/atomic.h:148:
+	 && (   (__ia64_asr_i ==   1) || (__ia64_asr_i ==   4)		\
+	     || (__ia64_asr_i ==   8) || (__ia64_asr_i ==  16)		\

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#250: FILE: include/asm-ia64/atomic.h:149:
+	     || (__ia64_asr_i ==   8) || (__ia64_asr_i ==  16)		\
+	     || (__ia64_asr_i ==  -1) || (__ia64_asr_i ==  -4)		\

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#251: FILE: include/asm-ia64/atomic.h:150:
+	     || (__ia64_asr_i ==  -1) || (__ia64_asr_i ==  -4)		\
+	     || (__ia64_asr_i ==  -8) || (__ia64_asr_i == -16)))	\

ERROR:SPACING: space required after that ',' (ctx:VxV)
#264: FILE: include/asm-ia64/atomic.h:163:
+#define atomic64_sub_and_test(i,v)	(atomic64_sub_return((i), (v)) == 0)
                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#273: FILE: include/asm-ia64/atomic.h:172:
+#define atomic64_add(i,v)		atomic64_add_return((i), (v))
                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#274: FILE: include/asm-ia64/atomic.h:173:
+#define atomic64_sub(i,v)		atomic64_sub_return((i), (v))
                       ^

WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#284: FILE: asm-ia64/local.h:1:
+#ifndef _ASM_IA64_LOCAL_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:NEW_TYPEDEFS: do not add new typedefs
#294: FILE: asm-ia64/local.h:11:
+typedef struct {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#310: FILE: asm-ia64/local.h:27:
+#define __local_add(i,l)	((l)->val.counter += (i))
                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#311: FILE: asm-ia64/local.h:28:
+#define __local_sub(i,l)	((l)->val.counter -= (i))
                      ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000354297.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 12 errors, 17 warnings, 10 checks, 266 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000354297.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
