WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#57: 
 kernel/posix-timers.c                   |   60 ++++++++++++++++----------------

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#78: FILE: arch/i386/kernel/timers/timer_cyclone.c:70:
+	offset = offset*(NSEC_PER_SEC/CYCLONE_TIMER_FREQ);
 	               ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#78: FILE: arch/i386/kernel/timers/timer_cyclone.c:70:
+	offset = offset*(NSEC_PER_SEC/CYCLONE_TIMER_FREQ);
 	                             ^

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#189: FILE: include/linux/posix-timers.h:59:
+asmlinkage long sys_timer_create(clockid_t which_clock,
+				struct sigevent *timer_event_spec,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#194: FILE: include/linux/posix-timers.h:64:
+asmlinkage long sys_timer_settime(timer_t timer_id, int flags,
+				 const struct itimerspec *new_setting,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#202: FILE: include/linux/posix-timers.h:72:
+asmlinkage long sys_clock_nanosleep(clockid_t which_clock, int flags,
+				const struct timespec *rqtp, struct timespec *rmtp);

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#213: FILE: kernel/posix-timers.c:51:
+	myoffset = (i+1) % MAXLOG;
 	             ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#222: FILE: kernel/posix-timers.c:96:
+	t->it_v.it_interval.tv_nsec = NSEC_PER_SEC/HZ;
 	                                          ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#235: FILE: kernel/posix-timers.c:255:
+	if (ts.tv_sec > 0 || ts.tv_nsec > (NSEC_PER_SEC/HZ))
 	                                               ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#244: FILE: kernel/posix-timers.c:363:
+	in =  (long long)t->it_v.it_interval.tv_sec*NSEC_PER_SEC +
 	                                           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#274: FILE: kernel/posix-timers.c:459:
+				nsec = dt.tv_sec ? NSEC_PER_SEC-dt.tv_nsec :
 				                               ^

WARNING:TRAILING_SEMICOLON: trailing semicolon indicates no statements, indent implies otherwise
#285: FILE: kernel/posix-timers.c:476:
 if (dt.tv_sec || dt.tv_nsec > 50000) logit(8, dt.tv_nsec, get_eip(regs));
 		timer_remove_nolock(t);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#303: FILE: kernel/posix-timers.c:562:
+		set_APIC_timer(NSEC_PER_SEC/HZ);
 		                           ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#310: FILE: kernel/posix-timers.c:568:
+	next_expiry = NSEC_PER_SEC/HZ;
 	                          ^

ERROR:SPACING: spaces required around that '-=' (ctx:WxV)
#366: FILE: kernel/posix-timers.c:927:
+		nsec -=NSEC_PER_SEC;
 		     ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#376: FILE: kernel/posix-timers.c:936:
+asmlinkage long sys_timer_settime(timer_t timer_id, int flags,
 				 const struct itimerspec *new_setting,

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#466: FILE: kernel/timer.c:652:
+	if (xtime.tv_nsec >= NSEC_PER_SEC) {
+	    xtime.tv_nsec -= NSEC_PER_SEC;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 't.tv_nsec >= NSEC_PER_SEC'
#476: FILE: kernel/timer.c:1084:
+	if ((t.tv_nsec >= NSEC_PER_SEC) || (t.tv_nsec < 0) || (t.tv_sec < 0))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 't.tv_nsec < 0'
#476: FILE: kernel/timer.c:1084:
+	if ((t.tv_nsec >= NSEC_PER_SEC) || (t.tv_nsec < 0) || (t.tv_sec < 0))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 't.tv_sec < 0'
#476: FILE: kernel/timer.c:1084:
+	if ((t.tv_nsec >= NSEC_PER_SEC) || (t.tv_nsec < 0) || (t.tv_sec < 0))

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#517: FILE: kernel/id2ptr.c:118:
+	while (id_free_count < n+1) {
 	                        ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000396899.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 10 warnings, 17 checks, 404 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000396899.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
