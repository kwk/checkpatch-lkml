WARNING:PATCH_PREFIX: patch prefix 'arch' exists, appears to be a -p0 patch

WARNING:LONG_LINE_COMMENT: line length of 105 exceeds 100 columns
#125: FILE: i386/kernel/entry.S:529:
+	.long SYMBOL_NAME(sys_ni_syscall)	/* 130 */		/* old get_kernel_syms syscall */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PATCH_PREFIX: patch prefix 'arch' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'arch' exists, appears to be a -p0 patch

ERROR:CODE_INDENT: code indent should use tabs where possible
#197: FILE: i386/mm/extable.c:18:
+        while (first < last) {$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#197: FILE: i386/mm/extable.c:18:
+        while (first < last) {$

WARNING:PATCH_PREFIX: patch prefix 'fs' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'fs' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'fs' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'fs' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'fs' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#410: FILE: linux/fs.h:964:
+	usecount:	ATOMIC_INIT(0), \
 	        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:INDENTED_LABEL: labels should not be indented
#410: FILE: linux/fs.h:964:
+	usecount:	ATOMIC_INIT(0), \

WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct module *' should also have an identifier name
#508: FILE: linux/module.h:75:
+	int (*init)(struct module *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#517: FILE: linux/module.h:97:
+struct module
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#527: FILE: linux/module.h:107:
+	unsigned nsyms;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#529: FILE: linux/module.h:109:
+	unsigned ndeps;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#597: FILE: linux/module.h:168:
+#define mod_member_present(mod,member) 1
                               ^

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#611: FILE: linux/module.h:181:
+#define mod_bound(p, n, m) ((unsigned long)(p) >= ((unsigned long)(m)->old + (sizeof(struct module))) && \

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#611: FILE: linux/module.h:181:
+#define mod_bound(p, n, m) ((unsigned long)(p) >= ((unsigned long)(m)->old + (sizeof(struct module))) && \
+	         (unsigned long)((p)+(n)) < (unsigned long)(m)->old + (m)->size)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'm' - possible side-effects?
#611: FILE: linux/module.h:181:
+#define mod_bound(p, n, m) ((unsigned long)(p) >= ((unsigned long)(m)->old + (sizeof(struct module))) && \
+	         (unsigned long)((p)+(n)) < (unsigned long)(m)->old + (m)->size)

ERROR:CODE_INDENT: code indent should use tabs where possible
#612: FILE: linux/module.h:182:
+^I         (unsigned long)((p)+(n)) < (unsigned long)(m)->old + (m)->size)$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#612: FILE: linux/module.h:182:
+	         (unsigned long)((p)+(n)) < (unsigned long)(m)->old + (m)->size)
 	                            ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#654: FILE: linux/module.h:232:
+extern int init_module_hack(struct module *, struct module *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct module *' should also have an identifier name
#654: FILE: linux/module.h:232:
+extern int init_module_hack(struct module *, struct module *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct module *' should also have an identifier name
#654: FILE: linux/module.h:232:
+extern int init_module_hack(struct module *, struct module *);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'mod' - possible side-effects?
#656: FILE: linux/module.h:234:
+#define mod_for_each_locked(mod)				\
+{								\
+	unsigned long flags;					\
+	struct list_head *list;					\
+								\
+	spin_lock_irqsave(&modlist_lock, flags);		\
+	list_for_each(list, &module_list) {			\
+		mod = list_entry(list, struct module, list);	\
+		if (!test_bit(MOD_LOADED, &mod->flags))		\
+			continue;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#656: FILE: linux/module.h:234:
+#define mod_for_each_locked(mod)				\
+{								\
+	unsigned long flags;					\
+	struct list_head *list;					\
+								\
+	spin_lock_irqsave(&modlist_lock, flags);		\
+	list_for_each(list, &module_list) {			\
+		mod = list_entry(list, struct module, list);	\
+		if (!test_bit(MOD_LOADED, &mod->flags))		\
+			continue;

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#666: FILE: linux/module.h:244:
+#define mod_for_done_locked					\
+	}							\
+	spin_unlock_irqrestore(&modlist_lock, flags);		\
+}

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#697: FILE: linux/module.h:344:
+#define DEFINE_MODULE				\
+int __init init_module(struct module *m)	\
+{ return init_module_hack(m, THIS_MODULE); }	\
+struct module __THIS_MODULE = {			\
+	.old =		&__this_module,

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#702: FILE: linux/module.h:349:
+#define DEFINE_MODULE_END \
+};

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#702: FILE: linux/module.h:349:
+#define DEFINE_MODULE_END \
+};

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#705: FILE: linux/module.h:352:
+#define module_init(x)^I ^I^I^I\$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#726: FILE: linux/module.h:397:
+extern int init_builtin_module(struct module *mod);

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#728: FILE: linux/module.h:399:
+#define DEFINE_MODULE \
+static int __init __init_module(void)			\
+{ return init_builtin_module(&__THIS_MODULE); }		\
+__initcall(__init_module);				\
+struct module __THIS_MODULE = {				\
+	.name =		__stringify(KBUILD_BASENAME),	\
+	.flags =	(1 << MOD_OLDSTYLE),

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#731: FILE: linux/module.h:402:
+__initcall(__init_module);				\

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#735: FILE: linux/module.h:406:
+#define DEFINE_MODULE_END \
+};

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#735: FILE: linux/module.h:406:
+#define DEFINE_MODULE_END \
+};

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'var' - possible side-effects?
#762: FILE: linux/module.h:480:
+#define EXPORT_SYMBOL(var)  __EXPORT_SYMBOL(var, __stringify(__VERSIONED_SYMBOL(var)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'var' - possible side-effects?
#763: FILE: linux/module.h:481:
+#define EXPORT_SYMBOL_GPL(var)  __EXPORT_SYMBOL(var, __stringify(__VERSIONED_SYMBOL(var)))

WARNING:PATCH_PREFIX: patch prefix 'init' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'kernel' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'kernel' exists, appears to be a -p0 patch

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#823: FILE: module.c:46:
+^I.ref_cnt =^I ^IATOMIC_INIT(1),$

WARNING:LONG_LINE: line length of 117 exceeds 100 columns
#824: FILE: module.c:47:
+	.flags =		(1 << MOD_BUILTIN) | (1 << MOD_LOADED) | (1 << MOD_INITIALIZED) | (1 << MOD_RUNNING),

WARNING:REPEATED_WORD: Possible repeated word: 'for'
#853: FILE: module.c:71:
+ *	has to be used for for this.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#860: FILE: module.c:77:
+void free_module(struct module *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct module *' should also have an identifier name
#860: FILE: module.c:77:
+void free_module(struct module *);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#977: FILE: module.c:251:
+void unregister_module(struct module *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct module *' should also have an identifier name
#977: FILE: module.c:251:
+void unregister_module(struct module *);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1023: FILE: module.c:292:
+	if (!mod->init || !(res = mod->init()))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1034: FILE: module.c:303:
+	if (!mod->exit || !(res = mod->exit()))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1045: FILE: module.c:314:
+	if (!mod->start || !(res = mod->start()))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1056: FILE: module.c:325:
+	if (!mod->stop || !(res = mod->stop()))

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*mod)...) over kmalloc(sizeof(struct module)...)
#1167: FILE: module.c:404:
+	mod = kmalloc(sizeof(struct module) + namelen + 1, GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1304: FILE: module.c:489:
+			printk(KERN_ERR "init_module: self-referential "

WARNING:SPLIT_STRING: quoted string split across lines
#1305: FILE: module.c:490:
+			printk(KERN_ERR "init_module: self-referential "
+					"dependency in mod->deps.\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1377: FILE: module.c:501:
+		printk(KERN_ERR "init_module: found dependency that is "

WARNING:SPLIT_STRING: quoted string split across lines
#1378: FILE: module.c:502:
+		printk(KERN_ERR "init_module: found dependency that is "
+			"(no longer?) a module.\n");

WARNING:INDENTED_LABEL: labels should not be indented
#1386: FILE: module.c:505:
+	found:

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1477: FILE: module.c:540:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1925: FILE: module.c:817:
+			if (copy_to_user(strings, s->name, len)
+			    || __put_user(s->value, vals+0)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1925: FILE: module.c:817:
+			    || __put_user(s->value, vals+0)
 			                                ^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1926: FILE: module.c:818:
+			    || __put_user(s->value, vals+0)
+			    || __put_user(space, vals+1))

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1926: FILE: module.c:818:
+			    || __put_user(space, vals+1))
 			                             ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2148: FILE: module.c:954:
+		BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2150: FILE: module.c:956:
+		BUG();

CHECK:BRACES: braces {} should be used on all arms of this statement
#2215: FILE: module.c:994:
+	if (test_bit(MOD_ALLOCED, &mod->flags)) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#2219: FILE: module.c:998:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#2265: FILE: module.c:1046:
+		if (test_bit(MOD_RUNNING, &mod->flags)) {
[...]
-		else if (mod->flags & MOD_INITIALIZING)
[...]
+		else if (test_bit(MOD_INITIALIZED, &mod->flags))
[...]
+		else if (test_bit(MOD_LOADED, &mod->flags))
[...]

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#2271: FILE: module.c:1050:
 		}
+		else if (test_bit(MOD_INITIALIZED, &mod->flags))

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PATCH_PREFIX: patch prefix 'kernel' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'mm' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'net' exists, appears to be a -p0 patch

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000444782.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 13 errors, 48 warnings, 16 checks, 2151 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000444782.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
