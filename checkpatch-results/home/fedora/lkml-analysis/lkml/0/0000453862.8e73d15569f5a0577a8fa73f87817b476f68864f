CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pfn' - possible side-effects?
#278: FILE: include/asm-alpha/pgtable.h:183:
+#define PHYS_TWIDDLE(pfn) \
+  ((((pfn) & KSEG_PFN) == (0x40000000000UL >> PAGE_SHIFT)) \
+  ? ((pfn) ^= KSEG_PFN) : (pfn))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#279: FILE: include/asm-alpha/pgtable.h:184:
+  ((((pfn) & KSEG_PFN) == (0x40000000000UL >> PAGE_SHIFT)) \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#280: FILE: include/asm-alpha/pgtable.h:185:
+  ? ((pfn) ^= KSEG_PFN) : (pfn))$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#310: FILE: include/asm-alpha/pgtable.h:227:
+	struct page * __xx;						\

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#312: FILE: include/asm-alpha/pgtable.h:229:
+	kvirt = (unsigned long)__va(pte_val(x) >> (32-PAGE_SHIFT));	\
 	                                             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#350: FILE: include/asm-alpha/tlb.h:1:
+#ifndef _ALPHA_TLB_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:SPACING: space required after that ',' (ctx:VxV)
#361: FILE: include/asm-alpha/tlb.h:12:
+#define pte_free_tlb(tlb,pte)			pte_free(pte)
                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#362: FILE: include/asm-alpha/tlb.h:13:
+#define pmd_free_tlb(tlb,pmd)			pmd_free(pmd)
                         ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#363: FILE: include/asm-alpha/tlb.h:14:
+ $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#363: FILE: include/asm-alpha/tlb.h:14:
+ $

WARNING:LINE_SPACING: Missing a blank line after declarations
#378: FILE: include/asm-alpha/bitops.h:325:
+	long result;
+	__asm__("ctlz %1,%0" : "=r"(result) : "r"(word & 0xffffffff));

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#391: FILE: include/asm-alpha/regdef.h:1:
+#ifndef __alpha_regdef_h__

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#394: FILE: include/asm-alpha/regdef.h:4:
+#define v0	$0	/* function return value */

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#396: FILE: include/asm-alpha/regdef.h:6:
+#define t0	$1	/* temporary registers (caller-saved) */

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#397: FILE: include/asm-alpha/regdef.h:7:
+#define t1	$2

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#398: FILE: include/asm-alpha/regdef.h:8:
+#define t2	$3

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#399: FILE: include/asm-alpha/regdef.h:9:
+#define t3	$4

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#400: FILE: include/asm-alpha/regdef.h:10:
+#define t4	$5

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#401: FILE: include/asm-alpha/regdef.h:11:
+#define t5	$6

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#402: FILE: include/asm-alpha/regdef.h:12:
+#define t6	$7

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#403: FILE: include/asm-alpha/regdef.h:13:
+#define t7	$8

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#405: FILE: include/asm-alpha/regdef.h:15:
+#define	s0	$9	/* saved-registers (callee-saved registers) */

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#406: FILE: include/asm-alpha/regdef.h:16:
+#define	s1	$10

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#407: FILE: include/asm-alpha/regdef.h:17:
+#define	s2	$11

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#408: FILE: include/asm-alpha/regdef.h:18:
+#define	s3	$12

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#409: FILE: include/asm-alpha/regdef.h:19:
+#define	s4	$13

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#410: FILE: include/asm-alpha/regdef.h:20:
+#define	s5	$14

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#411: FILE: include/asm-alpha/regdef.h:21:
+#define	s6	$15

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#414: FILE: include/asm-alpha/regdef.h:24:
+#define a0	$16	/* argument registers (caller-saved) */

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#415: FILE: include/asm-alpha/regdef.h:25:
+#define a1	$17

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#416: FILE: include/asm-alpha/regdef.h:26:
+#define a2	$18

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#417: FILE: include/asm-alpha/regdef.h:27:
+#define a3	$19

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#418: FILE: include/asm-alpha/regdef.h:28:
+#define a4	$20

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#419: FILE: include/asm-alpha/regdef.h:29:
+#define a5	$21

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#421: FILE: include/asm-alpha/regdef.h:31:
+#define t8	$22	/* more temps (caller-saved) */

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#422: FILE: include/asm-alpha/regdef.h:32:
+#define t9	$23

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#423: FILE: include/asm-alpha/regdef.h:33:
+#define t10	$24

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#424: FILE: include/asm-alpha/regdef.h:34:
+#define t11	$25

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#425: FILE: include/asm-alpha/regdef.h:35:
+#define ra	$26	/* return address register */

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#426: FILE: include/asm-alpha/regdef.h:36:
+#define t12	$27

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#429: FILE: include/asm-alpha/regdef.h:39:
+#define AT	$at	/* assembler temporary */

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#430: FILE: include/asm-alpha/regdef.h:40:
+#define gp	$29	/* global pointer */

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#431: FILE: include/asm-alpha/regdef.h:41:
+#define sp	$30	/* stack pointer */

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#432: FILE: include/asm-alpha/regdef.h:42:
+#define zero	$31	/* reads as zero, writes are noops */

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#442: FILE: include/asm-alpha/hardirq.h:59:
+	for (i = 0; i < NR_CPUS; i++)

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#454: FILE: include/asm-alpha/mmu_context.h:230:
+	for (i = 0; i < NR_CPUS; i++)

ERROR:SPACING: space required before the open parenthesis '('
#486: FILE: include/asm-alpha/system.h:133:
+#define prepare_arch_schedule(prev)		do { } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#487: FILE: include/asm-alpha/system.h:134:
+#define finish_arch_schedule(prev)		do { } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#488: FILE: include/asm-alpha/system.h:135:
+#define prepare_arch_switch(rq)			do { } while(0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#491: FILE: include/asm-alpha/system.h:138:
+#define switch_to(prev,next,last)						  \
                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#491: FILE: include/asm-alpha/system.h:138:
+#define switch_to(prev,next,last)						  \
                            ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000453862.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 41 errors, 8 warnings, 2 checks, 376 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000453862.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
