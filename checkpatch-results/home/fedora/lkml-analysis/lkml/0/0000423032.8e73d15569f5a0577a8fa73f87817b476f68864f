WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#62: 
diff -Naur -X ../dontdiff bleeding_edge-2.5/arch/i386/kernel/ptrace.c lsm-2.5/arch/i386/kernel/ptrace.c

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#71: FILE: arch/i386/kernel/ptrace.c:163:
+		if ((ret = security_ptrace(current->parent, current)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#172: FILE: include/linux/sched.h:603:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#206: FILE: include/linux/security.h:34:
 
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#220: FILE: include/linux/security.h:856:
+static inline int security_ptrace (struct task_struct * parent, struct task_struct * child)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#220: FILE: include/linux/security.h:856:
+static inline int security_ptrace (struct task_struct * parent, struct task_struct * child)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#220: FILE: include/linux/security.h:856:
+static inline int security_ptrace (struct task_struct * parent, struct task_struct * child)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#222: FILE: include/linux/security.h:858:
+	return security_ops->ptrace (parent, child);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#232: FILE: include/linux/security.h:869:
 
+

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#235: FILE: include/linux/security.h:872:
+static inline int security_scaffolding_startup (void) { return 0; }

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#238: FILE: include/linux/security.h:875:
+static inline int security_ptrace (struct task_struct *parent, struct task_struct * child)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#238: FILE: include/linux/security.h:875:
+static inline int security_ptrace (struct task_struct *parent, struct task_struct * child)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#333: FILE: security/sys_security.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#365: FILE: security/sys_security.c:33:
+asmlinkage long sys_security (unsigned int id, unsigned int call,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#368: FILE: security/sys_security.c:36:
+	return security_ops->sys_security (id, call, args);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#371: FILE: security/sys_security.c:39:
+asmlinkage long sys_security (unsigned int id, unsigned int call,

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#374: FILE: security/sys_security.c:42:
+	return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000423032.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 4 errors, 10 warnings, 3 checks, 236 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000423032.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
