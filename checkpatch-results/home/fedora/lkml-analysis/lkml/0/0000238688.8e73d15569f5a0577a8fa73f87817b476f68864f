WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#33: 
> > > I haven't heard an answer on the comments on this on on -fsdevel yet..

WARNING:REPEATED_WORD: Possible repeated word: 'on'
#33: 
> > > I haven't heard an answer on the comments on this on on -fsdevel yet..

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#73: FILE: fs/hfs/hfs_fs.h:211:
+extern int hfs_setxattr(struct dentry *dentry, const char *name,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#75: FILE: fs/hfs/hfs_fs.h:213:
+extern ssize_t hfs_getxattr(struct dentry *dentry, const char *name,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#77: FILE: fs/hfs/hfs_fs.h:215:
+extern ssize_t hfs_listxattr(struct dentry *dentry, char *buffer, size_t size);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#87: FILE: fs/hfs/attr.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#88: FILE: fs/hfs/attr.c:2:
+ *  linux/fs/hfs/attr.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#95: FILE: fs/hfs/attr.c:9:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#122: FILE: fs/hfs/attr.c:36:
+	hfs_bnode_read(fd.bnode, &rec, fd.entryoffset,
+			sizeof(struct hfs_cat_file));

CHECK:BRACES: braces {} should be used on all arms of this statement
#125: FILE: fs/hfs/attr.c:39:
+	if (!strcmp(name, "hfs.type")) {
[...]
+	} else if (!strcmp(name, "hfs.creator")) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:CAMELCASE: Avoid CamelCase: <UsrWds>
#127: FILE: fs/hfs/attr.c:41:
+			memcpy(&file->UsrWds.fdType, value, 4);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <fdType>
#127: FILE: fs/hfs/attr.c:41:
+			memcpy(&file->UsrWds.fdType, value, 4);

CHECK:CAMELCASE: Avoid CamelCase: <fdCreator>
#132: FILE: fs/hfs/attr.c:46:
+			memcpy(&file->UsrWds.fdCreator, value, 4);

CHECK:BRACES: Unbalanced braces around else statement
#135: FILE: fs/hfs/attr.c:49:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#146: FILE: fs/hfs/attr.c:60:
+ssize_t hfs_getxattr(struct dentry *dentry, const char *name,
+			 void *value, size_t size)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#166: FILE: fs/hfs/attr.c:80:
+		hfs_bnode_read(fd.bnode, &rec, fd.entryoffset,
+				sizeof(struct hfs_cat_file));

CHECK:BRACES: braces {} should be used on all arms of this statement
#170: FILE: fs/hfs/attr.c:84:
+	if (!strcmp(name, "hfs.type")) {
[...]
+	} else if (!strcmp(name, "hfs.creator")) {
[...]
+	} else
[...]

CHECK:BRACES: braces {} should be used on all arms of this statement
#171: FILE: fs/hfs/attr.c:85:
+		if (size >= 4) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#174: FILE: fs/hfs/attr.c:88:
+		} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#177: FILE: fs/hfs/attr.c:91:
+		if (size >= 4) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#180: FILE: fs/hfs/attr.c:94:
+		} else

CHECK:BRACES: Unbalanced braces around else statement
#182: FILE: fs/hfs/attr.c:96:
+	} else

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#190: FILE: fs/hfs/attr.c:104:
+#define HFS_ATTRLIST_SIZE (sizeof("hfs.creator")+sizeof("hfs.type"))
                                                 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#244: FILE: fs/hfsplus/ioctl.c:104:
+	hfs_bnode_read(fd.bnode, &entry, fd.entryoffset,
+			sizeof(struct hfsplus_cat_file));

CHECK:BRACES: braces {} should be used on all arms of this statement
#247: FILE: fs/hfsplus/ioctl.c:107:
+	if (!strcmp(name, "hfs.type")) {
[...]
+	} else if (!strcmp(name, "hfs.creator")) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#257: FILE: fs/hfsplus/ioctl.c:117:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#287: FILE: fs/hfsplus/ioctl.c:147:
+		hfs_bnode_read(fd.bnode, &entry, fd.entryoffset,
+				sizeof(struct hfsplus_cat_file));

CHECK:BRACES: braces {} should be used on all arms of this statement
#291: FILE: fs/hfsplus/ioctl.c:151:
+	if (!strcmp(name, "hfs.type")) {
[...]
+	} else if (!strcmp(name, "hfs.creator")) {
[...]
+	} else
[...]

CHECK:BRACES: braces {} should be used on all arms of this statement
#292: FILE: fs/hfsplus/ioctl.c:152:
+		if (size >= 4) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#295: FILE: fs/hfsplus/ioctl.c:155:
+		} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#298: FILE: fs/hfsplus/ioctl.c:158:
+		if (size >= 4) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#301: FILE: fs/hfsplus/ioctl.c:161:
+		} else

CHECK:BRACES: Unbalanced braces around else statement
#303: FILE: fs/hfsplus/ioctl.c:163:
+	} else

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#311: FILE: fs/hfsplus/ioctl.c:171:
+#define HFSPLUS_ATTRLIST_SIZE (sizeof("hfs.creator")+sizeof("hfs.type"))
                                                     ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000238688.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 0 errors, 4 warnings, 30 checks, 283 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000238688.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
