WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#67: FILE: drivers/rtc/rtc-test.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:LINE_SPACING: Please don't use multiple blank lines
#85: FILE: drivers/rtc/rtc-test.c:19:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#87: FILE: drivers/rtc/rtc-test.c:21:
+static int test_rtc_read_alarm(struct device *dev,
+	struct rtc_wkalrm *alrm)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#93: FILE: drivers/rtc/rtc-test.c:27:
+static int test_rtc_set_alarm(struct device *dev,
+	struct rtc_wkalrm *alrm)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#99: FILE: drivers/rtc/rtc-test.c:33:
+static int test_rtc_read_time(struct device *dev,
+	struct rtc_time *tm)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#106: FILE: drivers/rtc/rtc-test.c:40:
+static int test_rtc_set_time(struct device *dev,
+	struct rtc_time *tm)

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#120: FILE: drivers/rtc/rtc-test.c:54:
+	seq_printf(seq, "24hr\t\t: yes\n");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#121: FILE: drivers/rtc/rtc-test.c:55:
+	seq_printf(seq, "test\t\t: yes\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#128: FILE: drivers/rtc/rtc-test.c:62:
+static int test_rtc_ioctl(struct device *dev, unsigned int cmd,
+	unsigned long arg)

WARNING:CONST_STRUCT: struct rtc_class_ops should normally be const
#147: FILE: drivers/rtc/rtc-test.c:81:
+static struct rtc_class_ops test_rtc_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#158: FILE: drivers/rtc/rtc-test.c:92:
+static ssize_t test_irq_show(struct device *dev,
+				struct device_attribute *attr, char *buf)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#162: FILE: drivers/rtc/rtc-test.c:96:
+}
+static ssize_t test_irq_store(struct device *dev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#163: FILE: drivers/rtc/rtc-test.c:97:
+static ssize_t test_irq_store(struct device *dev,
+				struct device_attribute *attr,

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'test_irq_show' to 'irq_show' 'test_irq_store' to 'irq_store'
#181: FILE: drivers/rtc/rtc-test.c:115:
+}

The function names used in DEVICE_ATTR is unusual.
Typically, the store and show functions are used with <attr>_store and
<attr>_show, where <attr> is a named attribute variable of the device.

Consider the following examples::

  static DEVICE_ATTR(type, 0444, type_show, NULL);
  static DEVICE_ATTR(power, 0644, power_show, power_store);

The function names should preferably follow the above pattern.

See: https://www.kernel.org/doc/html/latest/driver-api/driver-model/device.html#attributes

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#182: FILE: drivers/rtc/rtc-test.c:116:
+static DEVICE_ATTR(irq, S_IRUGO | S_IWUSR, test_irq_show, test_irq_store);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:HOTPLUG_SECTION: Using __devexit is unnecessary
#202: FILE: drivers/rtc/rtc-test.c:136:
+static int __devexit test_remove(struct platform_device *plat_dev)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#225: FILE: drivers/rtc/rtc-test.c:159:
+	if ((err = platform_driver_register(&test_drv)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#228: FILE: drivers/rtc/rtc-test.c:162:
+	if ((test0 = platform_device_alloc("rtc-test", 0)) == NULL) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#233: FILE: drivers/rtc/rtc-test.c:167:
+	if ((test1 = platform_device_alloc("rtc-test", 1)) == NULL) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#238: FILE: drivers/rtc/rtc-test.c:172:
+	if ((err = platform_device_add(test0)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#241: FILE: drivers/rtc/rtc-test.c:175:
+	if ((err = platform_device_add(test1)))

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000102773.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 5 errors, 7 warnings, 9 checks, 230 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000102773.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
