ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#43: 
--- a/drivers/i2c/chips/Kconfig	Mon Jan 19 15:33:05 2004

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#78: FILE: drivers/i2c/chips/asb100.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#79: FILE: drivers/i2c/chips/asb100.c:2:
+/*
+    asb100.c - Part of lm_sensors, Linux kernel modules for hardware

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:CODE_INDENT: code indent should use tabs where possible
#80: FILE: drivers/i2c/chips/asb100.c:3:
+^I        monitoring$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#101: FILE: drivers/i2c/chips/asb100.c:24:
+    along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#102: FILE: drivers/i2c/chips/asb100.c:25:
+    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#106: FILE: drivers/i2c/chips/asb100.c:29:
+/*
+    This driver supports the hardware sensor chips: Asus ASB100 and

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#127: FILE: drivers/i2c/chips/asb100.c:50:
+#include <asm/io.h>

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#131: FILE: drivers/i2c/chips/asb100.c:54:
+/*
+	HISTORY:

WARNING:SPLIT_STRING: quoted string split across lines
#150: FILE: drivers/i2c/chips/asb100.c:73:
+I2C_CLIENT_MODULE_PARM(force_subclients, "List of subclient addresses: "
+	"{bus, clientaddr, subclientaddr1, subclientaddr2}");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'nr' may be better as '(nr)' to avoid precedence issues
#154: FILE: drivers/i2c/chips/asb100.c:77:
+#define ASB100_REG_IN_MAX(nr)	(0x2b + (nr * 2))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'nr' may be better as '(nr)' to avoid precedence issues
#155: FILE: drivers/i2c/chips/asb100.c:78:
+#define ASB100_REG_IN_MIN(nr)	(0x2c + (nr * 2))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#173: FILE: drivers/i2c/chips/asb100.c:96:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#194: FILE: drivers/i2c/chips/asb100.c:117:
+/* CONVERSIONS
+   Rounding and limit checking is only done on the TO_REG variants. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#194: FILE: drivers/i2c/chips/asb100.c:117:
+   Rounding and limit checking is only done on the TO_REG variants. */

ERROR:SPACING: space prohibited after that open parenthesis '('
#197: FILE: drivers/i2c/chips/asb100.c:120:
+#define ASB100_IN_MIN (   0)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#201: FILE: drivers/i2c/chips/asb100.c:124:
+/* IN: 1/1000 V (0V to 4.08V)
+   REG: 16mV/bit */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#201: FILE: drivers/i2c/chips/asb100.c:124:
+   REG: 16mV/bit */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#202: FILE: drivers/i2c/chips/asb100.c:125:
+static u8 IN_TO_REG(unsigned val)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#204: FILE: drivers/i2c/chips/asb100.c:127:
+	unsigned nval = SENSORS_LIMIT(val, ASB100_IN_MIN, ASB100_IN_MAX);

WARNING:LINE_SPACING: Missing a blank line after declarations
#205: FILE: drivers/i2c/chips/asb100.c:128:
+	unsigned nval = SENSORS_LIMIT(val, ASB100_IN_MIN, ASB100_IN_MAX);
+	return nval / 16;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#208: FILE: drivers/i2c/chips/asb100.c:131:
+static unsigned IN_FROM_REG(u8 reg)

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#225: FILE: drivers/i2c/chips/asb100.c:148:
+	return val==0 ? -1 : val==255 ? 0 : 1350000/(val*div);
 	          ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#225: FILE: drivers/i2c/chips/asb100.c:148:
+	return val==0 ? -1 : val==255 ? 0 : 1350000/(val*div);
 	                        ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#225: FILE: drivers/i2c/chips/asb100.c:148:
+	return val==0 ? -1 : val==255 ? 0 : 1350000/(val*div);
 	                                           ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#225: FILE: drivers/i2c/chips/asb100.c:148:
+	return val==0 ? -1 : val==255 ? 0 : 1350000/(val*div);
 	                                                ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#230: FILE: drivers/i2c/chips/asb100.c:153:
+#define ASB100_TEMP_MAX ( 127000)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#233: FILE: drivers/i2c/chips/asb100.c:156:
+/* TEMP: 0.001C/bit (-128C to +127C)
+   REG: 1C/bit, two's complement */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#233: FILE: drivers/i2c/chips/asb100.c:156:
+   REG: 1C/bit, two's complement */

WARNING:LINE_SPACING: Missing a blank line after declarations
#237: FILE: drivers/i2c/chips/asb100.c:160:
+	int ntemp = SENSORS_LIMIT(temp, ASB100_TEMP_MIN, ASB100_TEMP_MAX);
+	ntemp += (ntemp<0 ? -500 : 500);

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#237: FILE: drivers/i2c/chips/asb100.c:160:
+	ntemp += (ntemp<0 ? -500 : 500);
 	               ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#247: FILE: drivers/i2c/chips/asb100.c:170:
+/* PWM: 0 - 255 per sensors documentation
+   REG: (6.25% duty cycle per bit) */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#247: FILE: drivers/i2c/chips/asb100.c:170:
+   REG: (6.25% duty cycle per bit) */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#264: FILE: drivers/i2c/chips/asb100.c:187:
+/* FAN DIV: 1, 2, 4, or 8 (defaults to 2)
+   REG: 0, 1, 2, or 3 (respectively) (defaults to 1) */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#264: FILE: drivers/i2c/chips/asb100.c:187:
+   REG: 0, 1, 2, or 3 (respectively) (defaults to 1) */

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#267: FILE: drivers/i2c/chips/asb100.c:190:
+	return val==8 ? 3 : val==4 ? 2 : val==1 ? 0 : 1;
 	          ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#267: FILE: drivers/i2c/chips/asb100.c:190:
+	return val==8 ? 3 : val==4 ? 2 : val==1 ? 0 : 1;
 	                       ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#267: FILE: drivers/i2c/chips/asb100.c:190:
+	return val==8 ? 3 : val==4 ? 2 : val==1 ? 0 : 1;
 	                                    ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#271: FILE: drivers/i2c/chips/asb100.c:194:
+/* For each registered client, we need to keep some data in memory. That
+   data is pointed to by client->data. The structure itself is

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#272: FILE: drivers/i2c/chips/asb100.c:195:
+   dynamically allocated, at the same time the client itself is allocated. */

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'reg' may be better as '(reg)' to avoid precedence issues
#318: FILE: drivers/i2c/chips/asb100.c:241:
+#define show_in_reg(reg) \
+static ssize_t show_##reg (struct device *dev, char *buf, int nr) \
+{ \
+	struct asb100_data *data = asb100_update_device(dev); \
+	return sprintf(buf, "%d\n", IN_FROM_REG(data->reg[nr])); \
+}

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#319: FILE: drivers/i2c/chips/asb100.c:242:
+static ssize_t show_##reg (struct device *dev, char *buf, int nr) \

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#335: FILE: drivers/i2c/chips/asb100.c:258:
+	unsigned long val = simple_strtoul(buf, NULL, 10); \

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#347: FILE: drivers/i2c/chips/asb100.c:270:
+	show_in##offset (struct device *dev, char *buf) \

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#351: FILE: drivers/i2c/chips/asb100.c:274:
+static DEVICE_ATTR(in_input##offset, S_IRUGO, \

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#354: FILE: drivers/i2c/chips/asb100.c:277:
+	show_in##offset##_min (struct device *dev, char *buf) \

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#359: FILE: drivers/i2c/chips/asb100.c:282:
+	show_in##offset##_max (struct device *dev, char *buf) \

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#363: FILE: drivers/i2c/chips/asb100.c:286:
+static ssize_t set_in##offset##_min (struct device *dev, \

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#368: FILE: drivers/i2c/chips/asb100.c:291:
+static ssize_t set_in##offset##_max (struct device *dev, \

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#373: FILE: drivers/i2c/chips/asb100.c:296:
+static DEVICE_ATTR(in_min##offset, S_IRUGO | S_IWUSR, \

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#375: FILE: drivers/i2c/chips/asb100.c:298:
+static DEVICE_ATTR(in_max##offset, S_IRUGO | S_IWUSR, \

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'client' - possible side-effects?
#386: FILE: drivers/i2c/chips/asb100.c:309:
+#define device_create_file_in(client, offset) do { \
+	device_create_file(&client->dev, &dev_attr_in_input##offset); \
+	device_create_file(&client->dev, &dev_attr_in_min##offset); \
+	device_create_file(&client->dev, &dev_attr_in_max##offset); \
+} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'client' may be better as '(client)' to avoid precedence issues
#386: FILE: drivers/i2c/chips/asb100.c:309:
+#define device_create_file_in(client, offset) do { \
+	device_create_file(&client->dev, &dev_attr_in_input##offset); \
+	device_create_file(&client->dev, &dev_attr_in_min##offset); \
+	device_create_file(&client->dev, &dev_attr_in_max##offset); \
+} while (0)

WARNING:LINE_SPACING: Missing a blank line after declarations
#396: FILE: drivers/i2c/chips/asb100.c:319:
+	struct asb100_data *data = asb100_update_device(dev);
+	return sprintf(buf, "%d\n", FAN_FROM_REG(data->fan[nr],

WARNING:LINE_SPACING: Missing a blank line after declarations
#403: FILE: drivers/i2c/chips/asb100.c:326:
+	struct asb100_data *data = asb100_update_device(dev);
+	return sprintf(buf, "%d\n", FAN_FROM_REG(data->fan_min[nr],

WARNING:LINE_SPACING: Missing a blank line after declarations
#410: FILE: drivers/i2c/chips/asb100.c:333:
+	struct asb100_data *data = asb100_update_device(dev);
+	return sprintf(buf, "%d\n", DIV_FROM_REG(data->fan_div[nr]));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#414: FILE: drivers/i2c/chips/asb100.c:337:
+static ssize_t set_fan_min(struct device *dev, const char *buf,
+				size_t count, int nr)

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#418: FILE: drivers/i2c/chips/asb100.c:341:
+	u32 val = simple_strtoul(buf, NULL, 10);

WARNING:LINE_SPACING: Missing a blank line after declarations
#419: FILE: drivers/i2c/chips/asb100.c:342:
+	u32 val = simple_strtoul(buf, NULL, 10);
+	data->fan_min[nr] = FAN_TO_REG(val, DIV_FROM_REG(data->fan_div[nr]));

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#425: FILE: drivers/i2c/chips/asb100.c:348:
+/* Note: we save and restore the fan minimum here, because its value is
+   determined in part by the fan divisor.  This follows the principle of

WARNING:TYPO_SPELLING: 'suprise' may be misspelled - perhaps 'surprise'?
#426: FILE: drivers/i2c/chips/asb100.c:349:
+   least suprise; the user doesn't expect the fan minimum to change just
          ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#427: FILE: drivers/i2c/chips/asb100.c:350:
+   because the divisor changed. */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#429: FILE: drivers/i2c/chips/asb100.c:352:
+static ssize_t set_fan_div(struct device *dev, const char *buf,
+				size_t count, int nr)

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#435: FILE: drivers/i2c/chips/asb100.c:358:
+	unsigned long val = simple_strtoul(buf, NULL, 10);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#437: FILE: drivers/i2c/chips/asb100.c:360:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#440: FILE: drivers/i2c/chips/asb100.c:363:
+	switch(nr) {

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'offset' - possible side-effects?
#466: FILE: drivers/i2c/chips/asb100.c:389:
+#define sysfs_fan(offset) \
+static ssize_t show_fan##offset(struct device *dev, char *buf) \
+{ \
+	return show_fan(dev, buf, offset - 1); \
+} \
+static ssize_t show_fan##offset##_min(struct device *dev, char *buf) \
+{ \
+	return show_fan_min(dev, buf, offset - 1); \
+} \
+static ssize_t show_fan##offset##_div(struct device *dev, char *buf) \
+{ \
+	return show_fan_div(dev, buf, offset - 1); \
+} \
+static ssize_t set_fan##offset##_min(struct device *dev, const char *buf, \
+					size_t count) \
+{ \
+	return set_fan_min(dev, buf, count, offset - 1); \
+} \
+static ssize_t set_fan##offset##_div(struct device *dev, const char *buf, \
+					size_t count) \
+{ \
+	return set_fan_div(dev, buf, count, offset - 1); \
+} \
+static DEVICE_ATTR(fan_input##offset, S_IRUGO, \
+		show_fan##offset, NULL) \
+static DEVICE_ATTR(fan_min##offset, S_IRUGO | S_IWUSR, \
+		show_fan##offset##_min, set_fan##offset##_min) \
+static DEVICE_ATTR(fan_div##offset, S_IRUGO | S_IWUSR, \
+		show_fan##offset##_div, set_fan##offset##_div)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'offset' may be better as '(offset)' to avoid precedence issues
#466: FILE: drivers/i2c/chips/asb100.c:389:
+#define sysfs_fan(offset) \
+static ssize_t show_fan##offset(struct device *dev, char *buf) \
+{ \
+	return show_fan(dev, buf, offset - 1); \
+} \
+static ssize_t show_fan##offset##_min(struct device *dev, char *buf) \
+{ \
+	return show_fan_min(dev, buf, offset - 1); \
+} \
+static ssize_t show_fan##offset##_div(struct device *dev, char *buf) \
+{ \
+	return show_fan_div(dev, buf, offset - 1); \
+} \
+static ssize_t set_fan##offset##_min(struct device *dev, const char *buf, \
+					size_t count) \
+{ \
+	return set_fan_min(dev, buf, count, offset - 1); \
+} \
+static ssize_t set_fan##offset##_div(struct device *dev, const char *buf, \
+					size_t count) \
+{ \
+	return set_fan_div(dev, buf, count, offset - 1); \
+} \
+static DEVICE_ATTR(fan_input##offset, S_IRUGO, \
+		show_fan##offset, NULL) \
+static DEVICE_ATTR(fan_min##offset, S_IRUGO | S_IWUSR, \
+		show_fan##offset##_min, set_fan##offset##_min) \
+static DEVICE_ATTR(fan_div##offset, S_IRUGO | S_IWUSR, \
+		show_fan##offset##_div, set_fan##offset##_div)

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#489: FILE: drivers/i2c/chips/asb100.c:412:
+static DEVICE_ATTR(fan_input##offset, S_IRUGO, \

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#491: FILE: drivers/i2c/chips/asb100.c:414:
+static DEVICE_ATTR(fan_min##offset, S_IRUGO | S_IWUSR, \

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#493: FILE: drivers/i2c/chips/asb100.c:416:
+static DEVICE_ATTR(fan_div##offset, S_IRUGO | S_IWUSR, \

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'client' - possible side-effects?
#500: FILE: drivers/i2c/chips/asb100.c:423:
+#define device_create_file_fan(client, offset) do { \
+	device_create_file(&client->dev, &dev_attr_fan_input##offset); \
+	device_create_file(&client->dev, &dev_attr_fan_min##offset); \
+	device_create_file(&client->dev, &dev_attr_fan_div##offset); \
+} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'client' may be better as '(client)' to avoid precedence issues
#500: FILE: drivers/i2c/chips/asb100.c:423:
+#define device_create_file_fan(client, offset) do { \
+	device_create_file(&client->dev, &dev_attr_fan_input##offset); \
+	device_create_file(&client->dev, &dev_attr_fan_min##offset); \
+	device_create_file(&client->dev, &dev_attr_fan_div##offset); \
+} while (0)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#521: FILE: drivers/i2c/chips/asb100.c:444:
+^I^I ^I$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#521: FILE: drivers/i2c/chips/asb100.c:444:
+^I^I ^I$

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'reg' may be better as '(reg)' to avoid precedence issues
#522: FILE: drivers/i2c/chips/asb100.c:445:
+#define show_temp_reg(reg) \
+static ssize_t show_##reg(struct device *dev, char *buf, int nr) \
+{ \
+	struct asb100_data *data = asb100_update_device(dev); \
+	return sprintf_temp_from_reg(data->reg[nr], buf, nr); \
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'reg' - possible side-effects?
#533: FILE: drivers/i2c/chips/asb100.c:456:
+#define set_temp_reg(REG, reg) \
+static ssize_t set_##reg(struct device *dev, const char *buf, \
+			size_t count, int nr) \
+{ \
+	struct i2c_client *client = to_i2c_client(dev); \
+	struct asb100_data *data = i2c_get_clientdata(client); \
+	unsigned long val = simple_strtoul(buf, NULL, 10); \
+	switch (nr) { \
+	case 1: case 2: \
+		data->reg[nr] = LM75_TEMP_TO_REG(val); \
+		break; \
+	case 0: case 3: default: \
+		data->reg[nr] = TEMP_TO_REG(val); \
+		break; \
+	} \
+	asb100_write_value(client, ASB100_REG_TEMP_##REG(nr), \
+			data->reg[nr]); \
+	return count; \
+}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'reg' may be better as '(reg)' to avoid precedence issues
#533: FILE: drivers/i2c/chips/asb100.c:456:
+#define set_temp_reg(REG, reg) \
+static ssize_t set_##reg(struct device *dev, const char *buf, \
+			size_t count, int nr) \
+{ \
+	struct i2c_client *client = to_i2c_client(dev); \
+	struct asb100_data *data = i2c_get_clientdata(client); \
+	unsigned long val = simple_strtoul(buf, NULL, 10); \
+	switch (nr) { \
+	case 1: case 2: \
+		data->reg[nr] = LM75_TEMP_TO_REG(val); \
+		break; \
+	case 0: case 3: default: \
+		data->reg[nr] = TEMP_TO_REG(val); \
+		break; \
+	} \
+	asb100_write_value(client, ASB100_REG_TEMP_##REG(nr), \
+			data->reg[nr]); \
+	return count; \
+}

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#539: FILE: drivers/i2c/chips/asb100.c:462:
+	unsigned long val = simple_strtoul(buf, NULL, 10); \

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'num' - possible side-effects?
#556: FILE: drivers/i2c/chips/asb100.c:479:
+#define sysfs_temp(num) \
+static ssize_t show_temp##num(struct device *dev, char *buf) \
+{ \
+	return show_temp(dev, buf, num-1); \
+} \
+static DEVICE_ATTR(temp_input##num, S_IRUGO, show_temp##num, NULL) \
+static ssize_t show_temp_max##num(struct device *dev, char *buf) \
+{ \
+	return show_temp_max(dev, buf, num-1); \
+} \
+static ssize_t set_temp_max##num(struct device *dev, const char *buf, \
+					size_t count) \
+{ \
+	return set_temp_max(dev, buf, count, num-1); \
+} \
+static DEVICE_ATTR(temp_max##num, S_IRUGO | S_IWUSR, \
+		show_temp_max##num, set_temp_max##num) \
+static ssize_t show_temp_hyst##num(struct device *dev, char *buf) \
+{ \
+	return show_temp_hyst(dev, buf, num-1); \
+} \
+static ssize_t set_temp_hyst##num(struct device *dev, const char *buf, \
+					size_t count) \
+{ \
+	return set_temp_hyst(dev, buf, count, num-1); \
+} \
+static DEVICE_ATTR(temp_hyst##num, S_IRUGO | S_IWUSR, \
+		show_temp_hyst##num, set_temp_hyst##num)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'num' may be better as '(num)' to avoid precedence issues
#556: FILE: drivers/i2c/chips/asb100.c:479:
+#define sysfs_temp(num) \
+static ssize_t show_temp##num(struct device *dev, char *buf) \
+{ \
+	return show_temp(dev, buf, num-1); \
+} \
+static DEVICE_ATTR(temp_input##num, S_IRUGO, show_temp##num, NULL) \
+static ssize_t show_temp_max##num(struct device *dev, char *buf) \
+{ \
+	return show_temp_max(dev, buf, num-1); \
+} \
+static ssize_t set_temp_max##num(struct device *dev, const char *buf, \
+					size_t count) \
+{ \
+	return set_temp_max(dev, buf, count, num-1); \
+} \
+static DEVICE_ATTR(temp_max##num, S_IRUGO | S_IWUSR, \
+		show_temp_max##num, set_temp_max##num) \
+static ssize_t show_temp_hyst##num(struct device *dev, char *buf) \
+{ \
+	return show_temp_hyst(dev, buf, num-1); \
+} \
+static ssize_t set_temp_hyst##num(struct device *dev, const char *buf, \
+					size_t count) \
+{ \
+	return set_temp_hyst(dev, buf, count, num-1); \
+} \
+static DEVICE_ATTR(temp_hyst##num, S_IRUGO | S_IWUSR, \
+		show_temp_hyst##num, set_temp_hyst##num)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#559: FILE: drivers/i2c/chips/asb100.c:482:
+	return show_temp(dev, buf, num-1); \
 	                              ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#561: FILE: drivers/i2c/chips/asb100.c:484:
+static DEVICE_ATTR(temp_input##num, S_IRUGO, show_temp##num, NULL) \

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#564: FILE: drivers/i2c/chips/asb100.c:487:
+	return show_temp_max(dev, buf, num-1); \
 	                                  ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#569: FILE: drivers/i2c/chips/asb100.c:492:
+	return set_temp_max(dev, buf, count, num-1); \
 	                                        ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#571: FILE: drivers/i2c/chips/asb100.c:494:
+static DEVICE_ATTR(temp_max##num, S_IRUGO | S_IWUSR, \

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#575: FILE: drivers/i2c/chips/asb100.c:498:
+	return show_temp_hyst(dev, buf, num-1); \
 	                                   ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#580: FILE: drivers/i2c/chips/asb100.c:503:
+	return set_temp_hyst(dev, buf, count, num-1); \
 	                                         ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#582: FILE: drivers/i2c/chips/asb100.c:505:
+static DEVICE_ATTR(temp_hyst##num, S_IRUGO | S_IWUSR, \

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'client' - possible side-effects?
#591: FILE: drivers/i2c/chips/asb100.c:514:
+#define device_create_file_temp(client, num) do { \
+	device_create_file(&client->dev, &dev_attr_temp_input##num); \
+	device_create_file(&client->dev, &dev_attr_temp_max##num); \
+	device_create_file(&client->dev, &dev_attr_temp_hyst##num); \
+} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'client' may be better as '(client)' to avoid precedence issues
#591: FILE: drivers/i2c/chips/asb100.c:514:
+#define device_create_file_temp(client, num) do { \
+	device_create_file(&client->dev, &dev_attr_temp_input##num); \
+	device_create_file(&client->dev, &dev_attr_temp_max##num); \
+	device_create_file(&client->dev, &dev_attr_temp_hyst##num); \
+} while (0)

WARNING:LINE_SPACING: Missing a blank line after declarations
#600: FILE: drivers/i2c/chips/asb100.c:523:
+	struct asb100_data *data = asb100_update_device(dev);
+	return sprintf(buf, "%d\n", vid_from_reg(data->vid, data->vrm));

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'show_vid' to 'vid_show'
#601: FILE: drivers/i2c/chips/asb100.c:524:
+}

The function names used in DEVICE_ATTR is unusual.
Typically, the store and show functions are used with <attr>_store and
<attr>_show, where <attr> is a named attribute variable of the device.

Consider the following examples::

  static DEVICE_ATTR(type, 0444, type_show, NULL);
  static DEVICE_ATTR(power, 0644, power_show, power_store);

The function names should preferably follow the above pattern.

See: https://www.kernel.org/doc/html/latest/driver-api/driver-model/device.html#attributes

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#603: FILE: drivers/i2c/chips/asb100.c:526:
+static DEVICE_ATTR(vid, S_IRUGO, show_vid, NULL)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'client' may be better as '(client)' to avoid precedence issues
#604: FILE: drivers/i2c/chips/asb100.c:527:
+#define device_create_file_vid(client) \
+device_create_file(&client->dev, &dev_attr_vid)

WARNING:LINE_SPACING: Missing a blank line after declarations
#611: FILE: drivers/i2c/chips/asb100.c:534:
+	struct asb100_data *data = asb100_update_device(dev);
+	return sprintf(buf, "%d\n", data->vrm);

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#618: FILE: drivers/i2c/chips/asb100.c:541:
+	unsigned long val = simple_strtoul(buf, NULL, 10);

WARNING:LINE_SPACING: Missing a blank line after declarations
#619: FILE: drivers/i2c/chips/asb100.c:542:
+	unsigned long val = simple_strtoul(buf, NULL, 10);
+	data->vrm = val;

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'show_vrm' to 'vrm_show' 'set_vrm' to 'vrm_store'
#621: FILE: drivers/i2c/chips/asb100.c:544:
+}

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#624: FILE: drivers/i2c/chips/asb100.c:547:
+static DEVICE_ATTR(vrm, S_IRUGO | S_IWUSR, show_vrm, set_vrm)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'client' may be better as '(client)' to avoid precedence issues
#625: FILE: drivers/i2c/chips/asb100.c:548:
+#define device_create_file_vrm(client) \
+device_create_file(&client->dev, &dev_attr_vrm);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#625: FILE: drivers/i2c/chips/asb100.c:548:
+#define device_create_file_vrm(client) \
+device_create_file(&client->dev, &dev_attr_vrm);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:LINE_SPACING: Missing a blank line after declarations
#631: FILE: drivers/i2c/chips/asb100.c:554:
+	struct asb100_data *data = asb100_update_device(dev);
+	return sprintf(buf, "%d\n", ALARMS_FROM_REG(data->alarms));

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'show_alarms' to 'alarms_show'
#632: FILE: drivers/i2c/chips/asb100.c:555:
+}

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#634: FILE: drivers/i2c/chips/asb100.c:557:
+static DEVICE_ATTR(alarms, S_IRUGO, show_alarms, NULL)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'client' may be better as '(client)' to avoid precedence issues
#635: FILE: drivers/i2c/chips/asb100.c:558:
+#define device_create_file_alarms(client) \
+device_create_file(&client->dev, &dev_attr_alarms)

WARNING:LINE_SPACING: Missing a blank line after declarations
#642: FILE: drivers/i2c/chips/asb100.c:565:
+	struct asb100_data *data = asb100_update_device(dev);
+	return sprintf(buf, "%d\n", ASB100_PWM_FROM_REG(data->pwm & 0x0f));

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#649: FILE: drivers/i2c/chips/asb100.c:572:
+	unsigned long val = simple_strtoul(buf, NULL, 10);

WARNING:LINE_SPACING: Missing a blank line after declarations
#650: FILE: drivers/i2c/chips/asb100.c:573:
+	unsigned long val = simple_strtoul(buf, NULL, 10);
+	data->pwm &= 0x80; /* keep the enable bit */

WARNING:LINE_SPACING: Missing a blank line after declarations
#659: FILE: drivers/i2c/chips/asb100.c:582:
+	struct asb100_data *data = asb100_update_device(dev);
+	return sprintf(buf, "%d\n", (data->pwm & 0x80) ? 1 : 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#663: FILE: drivers/i2c/chips/asb100.c:586:
+static ssize_t set_pwm_enable1(struct device *dev, const char *buf,
+				size_t count)

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#667: FILE: drivers/i2c/chips/asb100.c:590:
+	unsigned long val = simple_strtoul(buf, NULL, 10);

WARNING:LINE_SPACING: Missing a blank line after declarations
#668: FILE: drivers/i2c/chips/asb100.c:591:
+	unsigned long val = simple_strtoul(buf, NULL, 10);
+	data->pwm &= 0x0f; /* keep the duty cycle bits */

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'show_pwm1' to 'pwm1_show' 'set_pwm1' to 'pwm1_store'
#672: FILE: drivers/i2c/chips/asb100.c:595:
+}

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'show_pwm1' to 'pwm1_show' 'set_pwm1' to 'pwm1_store'
#674: FILE: drivers/i2c/chips/asb100.c:597:
+static DEVICE_ATTR(pwm1, S_IRUGO | S_IWUSR, show_pwm1, set_pwm1)

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#674: FILE: drivers/i2c/chips/asb100.c:597:
+static DEVICE_ATTR(pwm1, S_IRUGO | S_IWUSR, show_pwm1, set_pwm1)

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'show_pwm_enable1' to 'pwm_enable1_show' 'set_pwm_enable1' to 'pwm_enable1_store'
#675: FILE: drivers/i2c/chips/asb100.c:598:
+static DEVICE_ATTR(pwm_enable1, S_IRUGO | S_IWUSR,

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#675: FILE: drivers/i2c/chips/asb100.c:598:
+static DEVICE_ATTR(pwm_enable1, S_IRUGO | S_IWUSR,

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#683: FILE: drivers/i2c/chips/asb100.c:606:
+/* This function is called when:
+	asb100_driver is inserted (when this module is loaded), for each

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#695: FILE: drivers/i2c/chips/asb100.c:618:
+static int asb100_detect_subclients(struct i2c_adapter *adapter, int address,
+		int kind, struct i2c_client *new_client)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*data->lm75[0])...) over kmalloc(sizeof(struct i2c_client)...)
#700: FILE: drivers/i2c/chips/asb100.c:623:
+	data->lm75[0] = kmalloc(sizeof(struct i2c_client), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*data->lm75[1])...) over kmalloc(sizeof(struct i2c_client)...)
#707: FILE: drivers/i2c/chips/asb100.c:630:
+	data->lm75[1] = kmalloc(sizeof(struct i2c_client), GFP_KERNEL);

WARNING:SPLIT_STRING: quoted string split across lines
#721: FILE: drivers/i2c/chips/asb100.c:644:
+				dev_err(&new_client->dev, "invalid subclient "
+					"address %d; must be 0x48-0x4f\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#728: FILE: drivers/i2c/chips/asb100.c:651:
+		asb100_write_value(new_client, ASB100_REG_I2C_SUBADDR,
+					(force_subclients[2] & 0x07) |

CHECK:SPACING: spaces preferred around that '<<' (ctx:WxV)
#729: FILE: drivers/i2c/chips/asb100.c:652:
+					((force_subclients[3] & 0x07) <<4));
 					                              ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#734: FILE: drivers/i2c/chips/asb100.c:657:
+		int val = asb100_read_value(new_client, ASB100_REG_I2C_SUBADDR);
+		data->lm75[0]->addr = 0x48 + (val & 0x07);

ERROR:SPACING: space required before the open parenthesis '('
#738: FILE: drivers/i2c/chips/asb100.c:661:
+	if(data->lm75[0]->addr == data->lm75[1]->addr) {

WARNING:SPLIT_STRING: quoted string split across lines
#740: FILE: drivers/i2c/chips/asb100.c:663:
+		dev_err(&new_client->dev, "duplicate addresses 0x%x "
+				"for subclients\n", data->lm75[0]->addr);

WARNING:STRLCPY: Prefer strscpy over strlcpy - see: https://lore.kernel.org/r/CAHk-=wgfRnXz0W3D37d01q3JFkr_i_uTL=V6A6G1oUZcprmknw@mail.gmail.com/
#750: FILE: drivers/i2c/chips/asb100.c:673:
+		strlcpy(data->lm75[i]->name, "asb100 subclient", I2C_NAME_SIZE);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#753: FILE: drivers/i2c/chips/asb100.c:676:
+	if ((err = i2c_attach_client(data->lm75[0]))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:SPLIT_STRING: quoted string split across lines
#755: FILE: drivers/i2c/chips/asb100.c:678:
+		dev_err(&new_client->dev, "subclient %d registration "
+			"at address 0x%x failed.\n", i, data->lm75[0]->addr);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#759: FILE: drivers/i2c/chips/asb100.c:682:
+	if ((err = i2c_attach_client(data->lm75[1]))) {

WARNING:SPLIT_STRING: quoted string split across lines
#761: FILE: drivers/i2c/chips/asb100.c:684:
+		dev_err(&new_client->dev, "subclient %d registration "
+			"at address 0x%x failed.\n", i, data->lm75[1]->addr);

WARNING:SPLIT_STRING: quoted string split across lines
#787: FILE: drivers/i2c/chips/asb100.c:710:
+		pr_debug("asb100.o: detect failed, "
+				"cannot attach to legacy adapter!\n");

WARNING:SPLIT_STRING: quoted string split across lines
#794: FILE: drivers/i2c/chips/asb100.c:717:
+		pr_debug("asb100.o: detect failed, "
+				"smbus byte data not supported!\n");

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#800: FILE: drivers/i2c/chips/asb100.c:723:
+	/* OK. For now, we presume we have a valid client. We now create the
+	   client structure, even though we cannot fill it completely yet.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#801: FILE: drivers/i2c/chips/asb100.c:724:
+	   But it allows us to access asb100_{read,write}_value. */

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#803: FILE: drivers/i2c/chips/asb100.c:726:
+	if (!(new_client = kmalloc(sizeof(struct i2c_client) +

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*new_client)...) over kmalloc(sizeof(struct i2c_client)...)
#803: FILE: drivers/i2c/chips/asb100.c:726:
+	if (!(new_client = kmalloc(sizeof(struct i2c_client) +

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#811: FILE: drivers/i2c/chips/asb100.c:734:
+	memset(new_client, 0,
+		sizeof(struct i2c_client) + sizeof(struct asb100_data));

CHECK:SPACING: No space is necessary after a cast
#813: FILE: drivers/i2c/chips/asb100.c:736:
+	data = (struct asb100_data *) (new_client + 1);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#824: FILE: drivers/i2c/chips/asb100.c:747:
+	/* The chip may be stuck in some other bank than bank 0. This may
+	   make reading other information impossible. Specify a force=... or

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#826: FILE: drivers/i2c/chips/asb100.c:749:
+	   bank. */

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#828: FILE: drivers/i2c/chips/asb100.c:751:
+	if (kind < 0) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space prohibited after that open parenthesis '('
#833: FILE: drivers/i2c/chips/asb100.c:756:
+		if ( (!(val1 & 0x07)) &&

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'val2 != 0x94'
#833: FILE: drivers/i2c/chips/asb100.c:756:
+		if ( (!(val1 & 0x07)) &&
+				/* Check for ASB100 ID (low byte) */
+				( ((!(val1 & 0x80)) && (val2 != 0x94)) ||
+				/* Check for ASB100 ID (high byte ) */
+				((val1 & 0x80) && (val2 != 0x06)) ) ) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'val2 != 0x06'
#833: FILE: drivers/i2c/chips/asb100.c:756:
+		if ( (!(val1 & 0x07)) &&
+				/* Check for ASB100 ID (low byte) */
+				( ((!(val1 & 0x80)) && (val2 != 0x94)) ||
+				/* Check for ASB100 ID (high byte ) */
+				((val1 & 0x80) && (val2 != 0x06)) ) ) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#834: FILE: drivers/i2c/chips/asb100.c:757:
+		if ( (!(val1 & 0x07)) &&
+				/* Check for ASB100 ID (low byte) */

ERROR:SPACING: space prohibited after that open parenthesis '('
#835: FILE: drivers/i2c/chips/asb100.c:758:
+				( ((!(val1 & 0x80)) && (val2 != 0x94)) ||

ERROR:SPACING: space prohibited before that close parenthesis ')'
#837: FILE: drivers/i2c/chips/asb100.c:760:
+				((val1 & 0x80) && (val2 != 0x06)) ) ) {

WARNING:SPLIT_STRING: quoted string split across lines
#839: FILE: drivers/i2c/chips/asb100.c:762:
+			pr_debug("asb100.o: detect failed, "
+					"bad chip id 0x%02x!\n", val2);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#847: FILE: drivers/i2c/chips/asb100.c:770:
+	/* We have either had a force parameter, or we have already detected
+	   Winbond. Put it now into bank 0 and Vendor ID High Byte */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#847: FILE: drivers/i2c/chips/asb100.c:770:
+	   Winbond. Put it now into bank 0 and Vendor ID High Byte */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#849: FILE: drivers/i2c/chips/asb100.c:772:
+	asb100_write_value(new_client, ASB100_REG_BANK,
+		(asb100_read_value(new_client, ASB100_REG_BANK) & 0x78) | 0x80);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'val1 == 0x31'
#856: FILE: drivers/i2c/chips/asb100.c:779:
+		if ((val1 == 0x31) && (val2 == 0x06))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'val2 == 0x06'
#856: FILE: drivers/i2c/chips/asb100.c:779:
+		if ((val1 == 0x31) && (val2 == 0x06))

CHECK:BRACES: braces {} should be used on all arms of this statement
#856: FILE: drivers/i2c/chips/asb100.c:779:
+		if ((val1 == 0x31) && (val2 == 0x06))
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#858: FILE: drivers/i2c/chips/asb100.c:781:
+		else {

WARNING:SPLIT_STRING: quoted string split across lines
#861: FILE: drivers/i2c/chips/asb100.c:784:
+				dev_warn(&new_client->dev, "ignoring "
+					"'force' parameter for unknown chip "

WARNING:SPLIT_STRING: quoted string split across lines
#862: FILE: drivers/i2c/chips/asb100.c:785:
+					"'force' parameter for unknown chip "
+					"at adapter %d, address 0x%02x.\n",

WARNING:STRLCPY: Prefer strscpy over strlcpy - see: https://lore.kernel.org/r/CAHk-=wgfRnXz0W3D37d01q3JFkr_i_uTL=V6A6G1oUZcprmknw@mail.gmail.com/
#870: FILE: drivers/i2c/chips/asb100.c:793:
+	strlcpy(new_client->name, "asb100", I2C_NAME_SIZE);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#877: FILE: drivers/i2c/chips/asb100.c:800:
+	if ((err = i2c_attach_client(new_client)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#881: FILE: drivers/i2c/chips/asb100.c:804:
+	if ((err = asb100_detect_subclients(adapter, address, kind,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#882: FILE: drivers/i2c/chips/asb100.c:805:
+	if ((err = asb100_detect_subclients(adapter, address, kind,
+			new_client)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#927: FILE: drivers/i2c/chips/asb100.c:850:
+	if ((err = i2c_detach_client(client))) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#944: FILE: drivers/i2c/chips/asb100.c:867:
+/* The SMBus locks itself, usually, but nothing may access the chip between
+   bank switches. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#944: FILE: drivers/i2c/chips/asb100.c:867:
+   bank switches. */

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#967: FILE: drivers/i2c/chips/asb100.c:890:
+			res = swap_bytes(i2c_smbus_read_word_data (cl, 0));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#973: FILE: drivers/i2c/chips/asb100.c:896:
+			res = swap_bytes(i2c_smbus_read_word_data (cl, 2));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#977: FILE: drivers/i2c/chips/asb100.c:900:
+			res = swap_bytes(i2c_smbus_read_word_data (cl, 3));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1040: FILE: drivers/i2c/chips/asb100.c:963:
+^Iasb100_write_value(client, ASB100_REG_CONFIG, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1041: FILE: drivers/i2c/chips/asb100.c:964:
+	asb100_write_value(client, ASB100_REG_CONFIG, 
+		(asb100_read_value(client, ASB100_REG_CONFIG) & 0xf7) | 0x01);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1052: FILE: drivers/i2c/chips/asb100.c:975:
+	if (time_after(jiffies - data->last_updated, (unsigned long)(HZ+HZ/2))
 	                                                               ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1052: FILE: drivers/i2c/chips/asb100.c:975:
+	if (time_after(jiffies - data->last_updated, (unsigned long)(HZ+HZ/2))
 	                                                                  ^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1053: FILE: drivers/i2c/chips/asb100.c:976:
+	if (time_after(jiffies - data->last_updated, (unsigned long)(HZ+HZ/2))
+		|| time_before(jiffies, data->last_updated) || !data->valid) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1054: FILE: drivers/i2c/chips/asb100.c:977:
+		|| time_before(jiffies, data->last_updated) || !data->valid) {
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1060: FILE: drivers/i2c/chips/asb100.c:983:
+			data->in[i] = asb100_read_value(client,
+				ASB100_REG_IN(i));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1062: FILE: drivers/i2c/chips/asb100.c:985:
+			data->in_min[i] = asb100_read_value(client,
+				ASB100_REG_IN_MIN(i));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1064: FILE: drivers/i2c/chips/asb100.c:987:
+			data->in_max[i] = asb100_read_value(client,
+				ASB100_REG_IN_MAX(i));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1070: FILE: drivers/i2c/chips/asb100.c:993:
+			data->fan[i] = asb100_read_value(client,
+					ASB100_REG_FAN(i));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1072: FILE: drivers/i2c/chips/asb100.c:995:
+			data->fan_min[i] = asb100_read_value(client,
+					ASB100_REG_FAN_MIN(i));

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1077: FILE: drivers/i2c/chips/asb100.c:1000:
+			data->temp[i-1] = asb100_read_value(client,
 			            ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1078: FILE: drivers/i2c/chips/asb100.c:1001:
+			data->temp[i-1] = asb100_read_value(client,
+					ASB100_REG_TEMP(i));

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1079: FILE: drivers/i2c/chips/asb100.c:1002:
+			data->temp_max[i-1] = asb100_read_value(client,
 			                ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1080: FILE: drivers/i2c/chips/asb100.c:1003:
+			data->temp_max[i-1] = asb100_read_value(client,
+					ASB100_REG_TEMP_MAX(i));

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1081: FILE: drivers/i2c/chips/asb100.c:1004:
+			data->temp_hyst[i-1] = asb100_read_value(client,
 			                 ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1082: FILE: drivers/i2c/chips/asb100.c:1005:
+			data->temp_hyst[i-1] = asb100_read_value(client,
+					ASB100_REG_TEMP_HYST(i));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1115: FILE: drivers/i2c/chips/asb100.c:1038:
+	printk(KERN_INFO "asb100 version %s\n", ASB100_VERSION);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000310433.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 26 errors, 98 warnings, 64 checks, 1084 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000310433.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
