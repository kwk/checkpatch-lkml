WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#49: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#56: FILE: drivers/adma/Kconfig:3:
+config ADMA
+	bool "Support asynchronous memory engines"
+	help
+	  Support asynchronous (hardware acceleratated) dma, xor, memset, etc... 
+	  Required for RAID 5/6.
+

Kconfig symbols should have a help text which fully describes
it.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#59: FILE: drivers/adma/Kconfig:6:
+^I  Support asynchronous (hardware acceleratated) dma, xor, memset, etc... $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#62: FILE: drivers/adma/Kconfig:9:
+config PIO_ADMA
+	bool "Software ADMA engine implementation"
+	depends on ADMA
+	help
+	  Select this option to use a soft engine rather than a hardware accelerated
+	  ADMA engine
+

ERROR:EXECUTE_PERMISSIONS: do not set execute permissions for source files
#79: FILE: drivers/adma/adma.c

There is no reason for source files to be executable.  The executable
bit can be removed safely.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#84: FILE: drivers/adma/adma.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:TYPO_SPELLING: 'Asychronous' may be misspelled - perhaps 'Asynchronous'?
#85: FILE: drivers/adma/adma.c:2:
+ * adma.c : Asychronous Memory Manipulation client interface
             ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#100: FILE: drivers/adma/adma.c:17:
+#define PRINTK(x...) ((void)(ADMA_DEBUG && printk(x)))

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#103: FILE: drivers/adma/adma.c:20:
+#define dump_desc(x) { printk("%s: ", __FUNCTION__); __dump_desc(x);}

ERROR:SPACING: space required after that ';' (ctx:VxV)
#103: FILE: drivers/adma/adma.c:20:
+#define dump_desc(x) { printk("%s: ", __FUNCTION__); __dump_desc(x);}
                                                                    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#103: FILE: drivers/adma/adma.c:20:
+#define dump_desc(x) { printk("%s: ", __FUNCTION__); __dump_desc(x);}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#104: FILE: drivers/adma/adma.c:21:
+/* Note: needs to change if engine internally modifies the $

WARNING:LINE_SPACING: Missing a blank line after declarations
#110: FILE: drivers/adma/adma.c:27:
+	int i;
+	if (desc) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#110: FILE: drivers/adma/adma.c:27:
+	if (desc) {
[...]
+	} else printk("ERROR: NULL descriptor\n");
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#111: FILE: drivers/adma/adma.c:28:
+		printk("desc[%p] command[%d] flags[%lu] len[%d] sources[%d] ops[%d]\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#112: FILE: drivers/adma/adma.c:29:
+		printk("desc[%p] command[%d] flags[%lu] len[%d] sources[%d] ops[%d]\n",
+		desc,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#113: FILE: drivers/adma/adma.c:30:
+^I^Idesc->command, $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#119: FILE: drivers/adma/adma.c:36:
+			printk("\tsource[%d]: %p\n", i, desc->buf[i]);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#120: FILE: drivers/adma/adma.c:37:
+	} else printk("ERROR: NULL descriptor\n");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#120: FILE: drivers/adma/adma.c:37:
+	} else printk("ERROR: NULL descriptor\n");

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:SPACING: space required before the open parenthesis '('
#123: FILE: drivers/adma/adma.c:40:
+#define dump_desc(x) do {} while(0)

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#142: FILE: drivers/adma/adma.c:59:
+	if (wake) adma_wakeup_thread(eng->thread);

ERROR:SPACING: space required before the open parenthesis '('
#163: FILE: drivers/adma/adma.c:80:
+	while(1) {

WARNING:TYPO_SPELLING: 'operatations' may be misspelled - perhaps 'operations'?
#173: FILE: drivers/adma/adma.c:90:
+		 * engines that process copy and xor operatations on different
 		                                     ^^^^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#174: FILE: drivers/adma/adma.c:91:
+^I^I * channels $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#175: FILE: drivers/adma/adma.c:92:
+^I^I */ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#184: FILE: drivers/adma/adma.c:101:
+^I^I$

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#185: FILE: drivers/adma/adma.c:102:
+		switch(desc->command) {
+			case ADMA_COPY:
[...]
+			case ADMA_SET:
[...]
+			case ADMA_COMPARE:
[...]
+			case ADMA_XOR:
[...]
+			case ADMA_PQXOR:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:SPACING: space required before the open parenthesis '('
#185: FILE: drivers/adma/adma.c:102:
+		switch(desc->command) {

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#190: FILE: drivers/adma/adma.c:107:
+				eng->set_block_op(desc->sources, desc->len, desc->buf, desc->pattern);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:TRAILING_WHITESPACE: trailing whitespace
#193: FILE: drivers/adma/adma.c:110:
+^I^I^I^Iif (eng->cmp_op(desc->buf[0], $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#194: FILE: drivers/adma/adma.c:111:
+^I^I^I^I    desc->buf[1], $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#194: FILE: drivers/adma/adma.c:111:
+				if (eng->cmp_op(desc->buf[0], 
+				    desc->buf[1], 

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#204: FILE: drivers/adma/adma.c:121:
+				printk("%s: Error ADMA_PQXOR not yet implemented\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#204: FILE: drivers/adma/adma.c:121:
+				printk("%s: Error ADMA_PQXOR not yet implemented\n", __FUNCTION__);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#205: FILE: drivers/adma/adma.c:122:
+				BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:SPACING: space required before the open parenthesis '('
#210: FILE: drivers/adma/adma.c:127:
+		if(desc->callback)

CHECK:BRACES: braces {} should be used on all arms of this statement
#210: FILE: drivers/adma/adma.c:127:
+		if(desc->callback)
[...]
+		else if(test_bit(ADMA_AUTO_REAP, &desc->flags)) {
[...]

ERROR:SPACING: space required before the open parenthesis '('
#212: FILE: drivers/adma/adma.c:129:
+		else if(test_bit(ADMA_AUTO_REAP, &desc->flags)) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#213: FILE: drivers/adma/adma.c:130:
+			BUG_ON(desc->args != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "desc->args"
#213: FILE: drivers/adma/adma.c:130:
+			BUG_ON(desc->args != NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#220: FILE: drivers/adma/adma.c:137:
+static int adma_thread(void * arg)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#235: FILE: drivers/adma/adma.c:152:
+	while (!kthread_should_stop()) {
+

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#247: FILE: drivers/adma/adma.c:164:
+			 test_bit(THREAD_WAKEUP, &thread->flags)
+			 || kthread_should_stop(),

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#262: FILE: drivers/adma/adma.c:179:
+	static int cnt = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#293: FILE: drivers/adma/adma.c:210:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#299: FILE: drivers/adma/adma.c:216:
+^I$

ERROR:POINTER_LOCATION: "(foo**)" should be "(foo **)"
#301: FILE: drivers/adma/adma.c:218:
+	desc_size += sizeof(void**) * (src_cnt - 1);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#303: FILE: drivers/adma/adma.c:220:
+^I/* if we fail to allocate a cache then it is assumed that $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#308: FILE: drivers/adma/adma.c:225:
+^I^I^I^I^I    desc_size, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#316: FILE: drivers/adma/adma.c:233:
+^Iprintk("%s: %s[%d]\n", __FUNCTION__, $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#316: FILE: drivers/adma/adma.c:233:
+	printk("%s: %s[%d]\n", __FUNCTION__, 

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#316: FILE: drivers/adma/adma.c:233:
+	printk("%s: %s[%d]\n", __FUNCTION__, 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#317: FILE: drivers/adma/adma.c:234:
+	printk("%s: %s[%d]\n", __FUNCTION__, 
+				    eng->desc_cache_name,

ERROR:EXECUTE_PERMISSIONS: do not set execute permissions for source files
#340: FILE: drivers/adma/pio_adma.c

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#345: FILE: drivers/adma/pio_adma.c:1:
+/*

WARNING:INCLUDE_LINUX: Use #include <linux/string.h> instead of <asm/string.h>
#356: FILE: drivers/adma/pio_adma.c:12:
+#include <asm/string.h>

ERROR:SPACING: space required before the open parenthesis '('
#371: FILE: drivers/adma/pio_adma.c:27:
+	for(i = 0; i < count; i++)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#384: FILE: drivers/adma/pio_adma.c:40:
+static adma_desc_t *adma_pio_build_desc(adma_desc_t *desc, int command, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#385: FILE: drivers/adma/pio_adma.c:41:
+^I^I^I^I^I     void **ptr, int sources, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#385: FILE: drivers/adma/pio_adma.c:41:
+static adma_desc_t *adma_pio_build_desc(adma_desc_t *desc, int command, 
+					     void **ptr, int sources, 

WARNING:LINE_SPACING: Missing a blank line after declarations
#389: FILE: drivers/adma/pio_adma.c:45:
+	int i;
+	if (!desc) desc = adma_get_desc(&pio_adma_engine);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#389: FILE: drivers/adma/pio_adma.c:45:
+	if (!desc) desc = adma_get_desc(&pio_adma_engine);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#391: FILE: drivers/adma/pio_adma.c:47:
+^Iif (desc) { $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#421: FILE: drivers/adma/pio_adma.c:77:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#432: FILE: drivers/adma/pio_adma.c:88:
+^I.flags = (1 << ADMA_ENG_CAP_COPY) | (1 << ADMA_ENG_CAP_SET) | $

ERROR:EXECUTE_PERMISSIONS: do not set execute permissions for source files
#437: FILE: include/linux/adma/adma.h

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#442: FILE: include/linux/adma/adma.h:1:
+#ifndef _ADMA_H

WARNING:NEW_TYPEDEFS: do not add new typedefs
#449: FILE: include/linux/adma/adma.h:8:
+typedef struct adma_thread {

WARNING:SPACING: Unnecessary space before function pointer arguments
#450: FILE: include/linux/adma/adma.h:9:
+	void			(*run) (struct adma_engine *eng);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#451: FILE: include/linux/adma/adma.h:10:
+^Istruct adma_engine ^I*eng;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#458: FILE: include/linux/adma/adma.h:17:
+/* Client code should not depend on the format or $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#459: FILE: include/linux/adma/adma.h:18:
+ * size of this structure, and should use the $

WARNING:NEW_TYPEDEFS: do not add new typedefs
#463: FILE: include/linux/adma/adma.h:22:
+typedef struct adma_desc {

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#465: FILE: include/linux/adma/adma.h:24:
+^Iint ^I^I command;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#466: FILE: include/linux/adma/adma.h:25:
+^Isize_t ^I^I len;^I^I      /* transaction size */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#470: FILE: include/linux/adma/adma.h:29:
+^Istruct ^I^I adma_engine *engine;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#471: FILE: include/linux/adma/adma.h:30:
+^Ivoid ^I^I (*callback)(struct adma_desc *, void *);$

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct adma_desc *' should also have an identifier name
#471: FILE: include/linux/adma/adma.h:30:
+	void 		 (*callback)(struct adma_desc *, void *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#471: FILE: include/linux/adma/adma.h:30:
+	void 		 (*callback)(struct adma_desc *, void *);

WARNING:LONG_LINE_COMMENT: line length of 101 exceeds 100 columns
#473: FILE: include/linux/adma/adma.h:32:
+	int		 state;		      /* a generic integer for clients to use in callbacks */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#474: FILE: include/linux/adma/adma.h:33:
+^Ivoid ^I^I *buf[1];^I      /* array entry per num sources (grows at init time) */$

WARNING:NEW_TYPEDEFS: do not add new typedefs
#477: FILE: include/linux/adma/adma.h:36:
+typedef struct adma_engine {

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#478: FILE: include/linux/adma/adma.h:37:
+^Iint ^I^I max_source_count;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#482: FILE: include/linux/adma/adma.h:41:
+^Ikmem_cache_t^I *desc_cache; ^I      /* for allocating descriptors */$

WARNING:SPACING: Unnecessary space before function pointer arguments
#487: FILE: include/linux/adma/adma.h:46:
+	adma_desc_t *(*build_desc) (adma_desc_t *, int, void **, int, size_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'adma_desc_t *' should also have an identifier name
#487: FILE: include/linux/adma/adma.h:46:
+	adma_desc_t *(*build_desc) (adma_desc_t *, int, void **, int, size_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#487: FILE: include/linux/adma/adma.h:46:
+	adma_desc_t *(*build_desc) (adma_desc_t *, int, void **, int, size_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void **' should also have an identifier name
#487: FILE: include/linux/adma/adma.h:46:
+	adma_desc_t *(*build_desc) (adma_desc_t *, int, void **, int, size_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#487: FILE: include/linux/adma/adma.h:46:
+	adma_desc_t *(*build_desc) (adma_desc_t *, int, void **, int, size_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#487: FILE: include/linux/adma/adma.h:46:
+	adma_desc_t *(*build_desc) (adma_desc_t *, int, void **, int, size_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#487: FILE: include/linux/adma/adma.h:46:
+	adma_desc_t *(*build_desc) (adma_desc_t *, int, void **, int, size_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'adma_desc_t *' should also have an identifier name
#488: FILE: include/linux/adma/adma.h:47:
+	void (*queue_desc)(adma_desc_t *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#488: FILE: include/linux/adma/adma.h:47:
+	void (*queue_desc)(adma_desc_t *, int);

WARNING:SPACING: Unnecessary space before function pointer arguments
#489: FILE: include/linux/adma/adma.h:48:
+	void (*xor_block_op) (unsigned int, unsigned int, void **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#489: FILE: include/linux/adma/adma.h:48:
+	void (*xor_block_op) (unsigned int, unsigned int, void **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#489: FILE: include/linux/adma/adma.h:48:
+	void (*xor_block_op) (unsigned int, unsigned int, void **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void **' should also have an identifier name
#489: FILE: include/linux/adma/adma.h:48:
+	void (*xor_block_op) (unsigned int, unsigned int, void **);

WARNING:SPACING: Unnecessary space before function pointer arguments
#490: FILE: include/linux/adma/adma.h:49:
+	void (*set_block_op) (unsigned int, unsigned int, void **, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#490: FILE: include/linux/adma/adma.h:49:
+	void (*set_block_op) (unsigned int, unsigned int, void **, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#490: FILE: include/linux/adma/adma.h:49:
+	void (*set_block_op) (unsigned int, unsigned int, void **, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void **' should also have an identifier name
#490: FILE: include/linux/adma/adma.h:49:
+	void (*set_block_op) (unsigned int, unsigned int, void **, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#490: FILE: include/linux/adma/adma.h:49:
+	void (*set_block_op) (unsigned int, unsigned int, void **, int);

WARNING:SPACING: Unnecessary space before function pointer arguments
#491: FILE: include/linux/adma/adma.h:50:
+	void *(*cpy_op) (void *, const void *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#491: FILE: include/linux/adma/adma.h:50:
+	void *(*cpy_op) (void *, const void *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const void *' should also have an identifier name
#491: FILE: include/linux/adma/adma.h:50:
+	void *(*cpy_op) (void *, const void *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#491: FILE: include/linux/adma/adma.h:50:
+	void *(*cpy_op) (void *, const void *, size_t);

WARNING:SPACING: Unnecessary space before function pointer arguments
#492: FILE: include/linux/adma/adma.h:51:
+	int (*cmp_op) (const void *, const void *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const void *' should also have an identifier name
#492: FILE: include/linux/adma/adma.h:51:
+	int (*cmp_op) (const void *, const void *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const void *' should also have an identifier name
#492: FILE: include/linux/adma/adma.h:51:
+	int (*cmp_op) (const void *, const void *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#492: FILE: include/linux/adma/adma.h:51:
+	int (*cmp_op) (const void *, const void *, size_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#497: FILE: include/linux/adma/adma.h:56:
+extern void adma_queue_desc(adma_desc_t *desc, int wake);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#498: FILE: include/linux/adma/adma.h:57:
+extern adma_engine_t *adma_engine_init(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#499: FILE: include/linux/adma/adma.h:58:
+extern void adma_run(adma_engine_t *eng);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#500: FILE: include/linux/adma/adma.h:59:
+extern void adma_wakeup_thread(adma_thread_t *thread);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#516: FILE: include/linux/adma/adma.h:75:
+static inline void adma_set_callback(adma_desc_t *desc, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#517: FILE: include/linux/adma/adma.h:76:
+^I^I^I^I^I void (*cb)(adma_desc_t *, void *), $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#517: FILE: include/linux/adma/adma.h:76:
+static inline void adma_set_callback(adma_desc_t *desc, 
+					 void (*cb)(adma_desc_t *, void *), 

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#563: FILE: include/linux/adma/adma.h:122:
+#define ADMA_AUTO_REAP ^I1 /* adma_thread handles freeing the descriptor */$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#568: FILE: include/linux/adma/adma.h:127:
+
+

ERROR:SPACING: space required before the open parenthesis '('
#571: FILE: include/linux/adma/adma.h:130:
+	do {} while(!test_bit(ADMA_STAT_DONE, &desc->flags));

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000108605.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 39 errors, 66 warnings, 16 checks, 496 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000108605.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
