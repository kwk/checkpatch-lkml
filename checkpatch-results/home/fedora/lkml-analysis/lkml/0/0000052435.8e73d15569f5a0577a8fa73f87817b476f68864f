WARNING:BAD_SIGN_OFF: Use a single space after Signed-off-by:
#36: 
Signed-off-by:  Ben Greear <greearb@candelatech.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#68: FILE: fs/cifs/connect.c:104:
+			char * server_netb_name,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#89: FILE: fs/cifs/connect.c:991:
+				printk(KERN_WARNING "CIFS: local_ip value not specified.\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around vol->local_ip
#92: FILE: fs/cifs/connect.c:994:
+			i = cifs_inet_pton(AF_INET, value, &(vol->local_ip));

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#95: FILE: fs/cifs/connect.c:997:
+				printk(KERN_WARNING "CIFS:  Could not parse local_ip: %s\n",

CHECK:CAMELCASE: Avoid CamelCase: <userName>
#107: FILE: fs/cifs/connect.c:1235:
+		      char *userName, struct TCP_Server_Info **psrvTcp,

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <psrvTcp>
#107: FILE: fs/cifs/connect.c:1235:
+		      char *userName, struct TCP_Server_Info **psrvTcp,

ERROR:SPACING: space required before the open parenthesis '('
#117: FILE: fs/cifs/connect.c:1246:
+			if((target_ip_addr &&

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <uncName>
#130: FILE: fs/cifs/connect.c:1273:
+find_unc(__be32 new_target_ip_addr, char *uncName, char *userName, u32 local_ip)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'local_ip == tcon->ses->server->ip4_local_ip'
#140: FILE: fs/cifs/connect.c:1288:
+				if ((local_ip == tcon->ses->server->ip4_local_ip) &&
+				    (tcon->ses->server->addr.sockAddr.sin_addr.
+				     s_addr == new_target_ip_addr)) {

CHECK:CAMELCASE: Avoid CamelCase: <sockAddr>
#141: FILE: fs/cifs/connect.c:1289:
+				    (tcon->ses->server->addr.sockAddr.sin_addr.

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'tcon->ses->server->addr.sockAddr.sin_addr.s_addr'
#142: FILE: fs/cifs/connect.c:1290:
+				    (tcon->ses->server->addr.sockAddr.sin_addr.
+				     s_addr == new_target_ip_addr)) {

A single dereferencing identifier spanned on multiple lines like::

  struct_identifier->member[index].
  member = <foo>;

is generally hard to follow. It can easily lead to typos and so makes
the code vulnerable to bugs.

If fixing the multiple line dereferencing leads to an 80 column
violation, then either rewrite the code in a more simple way or if the
starting part of the dereferencing identifier is the same and used at
multiple places then store it in a temporary variable, and use that
temporary variable only at all the places. For example, if there are
two dereferencing identifiers::

  member1->member2->member3.foo1;
  member1->member2->member3.foo2;

then store the member1->member2->member3 part in a temporary variable.
It not only helps to avoid the 80 column violation but also reduces
the program size by removing the unnecessary dereferences.

But if none of the above methods work then ignore the 80 column
violation because it is much easier to read a dereferencing identifier
on a single line.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#151: FILE: fs/cifs/connect.c:1390:
+	     char * netbios_name, char * target_name,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#151: FILE: fs/cifs/connect.c:1390:
+	     char * netbios_name, char * target_name,

CHECK:SPACING: No space is necessary after a cast
#167: FILE: fs/cifs/connect.c:1417:
+		rc = (*csocket)->ops->bind(*csocket, (struct sockaddr *) &myaddr,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#170: FILE: fs/cifs/connect.c:1420:
+			printk("Tried to bind to local ip: 0x%x, but failed with error: %d\n",

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#173: FILE: fs/cifs/connect.c:1423:
+		}
+		else {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#173: FILE: fs/cifs/connect.c:1423:
+		else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#174: FILE: fs/cifs/connect.c:1424:
+			printk("CIFS:  Successfully bound to local ip: 0x%x\n", local_ip);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#177: FILE: fs/cifs/connect.c:1427:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <srvTcp>
#186: FILE: fs/cifs/connect.c:1707:
+			volume_info.username, &srvTcp,

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000052435.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 6 errors, 6 warnings, 9 checks, 161 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000052435.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
