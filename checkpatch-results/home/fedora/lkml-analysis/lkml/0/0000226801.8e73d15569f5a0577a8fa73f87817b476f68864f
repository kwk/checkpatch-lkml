WARNING:TYPO_SPELLING: 'Resrouce' may be misspelled - perhaps 'Resource'?
#27: 
Main code for CKRM default classification engine.  Adds Resrouce
                                                        ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#31: 
Signed-Off-By: Chandra Seetharaman <sekharan@us.ibm.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#32: 
Signed-Off-By: Hubertus Franke <frankeh@us.ibm.com>

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#33: 
Signed-Off-By: Shailabh Nagar <nagar@us.ibm.com>

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#34: 
Signed-Off-By: Gerrit Huizenga <gh@us.ibm.com>

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#35: 
Signed-Off-By: Vivek Kashyap <vivk@us.ibm.com>

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#54: FILE: include/linux/ckrm_ce.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#60: FILE: include/linux/ckrm_ce.h:7:
+ * $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#61: FILE: include/linux/ckrm_ce.h:8:
+ * Provides data structures, macros and kernel API of CKRM for $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#65: FILE: include/linux/ckrm_ce.h:12:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#92: FILE: include/linux/ckrm_ce.h:39:
+ * Action parameters identifying the cause of a task<->class notify callback $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#93: FILE: include/linux/ckrm_ce.h:40:
+ * these can perculate up to user daemon consuming records send by the $

WARNING:NEW_TYPEDEFS: do not add new typedefs
#103: FILE: include/linux/ckrm_ce.h:50:
+typedef struct ckrm_eng_callback {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#105: FILE: include/linux/ckrm_ce.h:52:
+^Iint always_callback;^I/* set if CE should always be called back $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#106: FILE: include/linux/ckrm_ce.h:53:
+	int always_callback;	/* set if CE should always be called back 
+				   regardless of numclasses */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#106: FILE: include/linux/ckrm_ce.h:53:
+				   regardless of numclasses */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#110: FILE: include/linux/ckrm_ce.h:57:
+^Iunsigned long c_interest;^I/* set of classification events of $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#111: FILE: include/linux/ckrm_ce.h:58:
+^I^I^I^I^I * interest to CE $

WARNING:SPACING: Unnecessary space before function pointer arguments
#118: FILE: include/linux/ckrm_ce.h:65:
+	void (*class_add) (const char *name, void *core, int classtype);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: Unnecessary space before function pointer arguments
#121: FILE: include/linux/ckrm_ce.h:68:
+	void (*class_delete) (const char *name, void *core, int classtype);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#124: FILE: include/linux/ckrm_ce.h:71:
+^Iunsigned long n_interest;^I/* set of notification events of $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#125: FILE: include/linux/ckrm_ce.h:72:
+^I^I^I^I^I *  interest to CE $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#128: FILE: include/linux/ckrm_ce.h:75:
+^Ice_notify_fct_t notify;^I$

WARNING:NEW_TYPEDEFS: do not add new typedefs
#134: FILE: include/linux/ckrm_ce.h:81:
+typedef struct rbce_eng_callback {

WARNING:SPACING: Unnecessary space before function pointer arguments
#135: FILE: include/linux/ckrm_ce.h:82:
+	int (*mkdir) (struct inode *, struct dentry *, int);	/* mkdir */

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#135: FILE: include/linux/ckrm_ce.h:82:
+	int (*mkdir) (struct inode *, struct dentry *, int);	/* mkdir */

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#135: FILE: include/linux/ckrm_ce.h:82:
+	int (*mkdir) (struct inode *, struct dentry *, int);	/* mkdir */

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#135: FILE: include/linux/ckrm_ce.h:82:
+	int (*mkdir) (struct inode *, struct dentry *, int);	/* mkdir */

WARNING:SPACING: Unnecessary space before function pointer arguments
#136: FILE: include/linux/ckrm_ce.h:83:
+	int (*rmdir) (struct inode *, struct dentry *);		/* rmdir */

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#136: FILE: include/linux/ckrm_ce.h:83:
+	int (*rmdir) (struct inode *, struct dentry *);		/* rmdir */

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#136: FILE: include/linux/ckrm_ce.h:83:
+	int (*rmdir) (struct inode *, struct dentry *);		/* rmdir */

WARNING:SPACING: Unnecessary space before function pointer arguments
#137: FILE: include/linux/ckrm_ce.h:84:
+	int (*mnt) (void);

WARNING:SPACING: Unnecessary space before function pointer arguments
#138: FILE: include/linux/ckrm_ce.h:85:
+	int (*umnt) (void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#141: FILE: include/linux/ckrm_ce.h:88:
+extern int ckrm_register_engine(const char *name, ckrm_eng_callback_t *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ckrm_eng_callback_t *' should also have an identifier name
#141: FILE: include/linux/ckrm_ce.h:88:
+extern int ckrm_register_engine(const char *name, ckrm_eng_callback_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#142: FILE: include/linux/ckrm_ce.h:89:
+extern int ckrm_unregister_engine(const char *name);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#144: FILE: include/linux/ckrm_ce.h:91:
+extern void *ckrm_classobj(char *, int *classtype);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#144: FILE: include/linux/ckrm_ce.h:91:
+extern void *ckrm_classobj(char *, int *classtype);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#145: FILE: include/linux/ckrm_ce.h:92:
+extern int get_exe_path_name(struct task_struct *t, char *filename,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#148: FILE: include/linux/ckrm_ce.h:95:
+extern int rcfs_register_engine(rbce_eng_callback_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'rbce_eng_callback_t *' should also have an identifier name
#148: FILE: include/linux/ckrm_ce.h:95:
+extern int rcfs_register_engine(rbce_eng_callback_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#149: FILE: include/linux/ckrm_ce.h:96:
+extern int rcfs_unregister_engine(rbce_eng_callback_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'rbce_eng_callback_t *' should also have an identifier name
#149: FILE: include/linux/ckrm_ce.h:96:
+extern int rcfs_unregister_engine(rbce_eng_callback_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#151: FILE: include/linux/ckrm_ce.h:98:
+extern int ckrm_reclassify(int pid);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#155: FILE: include/linux/ckrm_ce.h:102:
+extern void ckrm_core_grab(void *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#156: FILE: include/linux/ckrm_ce.h:103:
+extern void ckrm_core_drop(void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#156: FILE: include/linux/ckrm_ce.h:103:
+extern void ckrm_core_drop(void *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#181: FILE: include/linux/ckrm_events.h:178:
+extern void ckrm_init(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#182: FILE: include/linux/ckrm_events.h:179:
+extern void ckrm_cb_newtask(struct task_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#182: FILE: include/linux/ckrm_events.h:179:
+extern void ckrm_cb_newtask(struct task_struct *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#183: FILE: include/linux/ckrm_events.h:180:
+extern void ckrm_cb_exit(struct task_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#183: FILE: include/linux/ckrm_events.h:180:
+extern void ckrm_cb_exit(struct task_struct *);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#194: FILE: include/linux/ckrm_rc.h:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#201: FILE: include/linux/ckrm_rc.h:8:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#202: FILE: include/linux/ckrm_rc.h:9:
+ * Provides data structures, macros and kernel API of CKRM for $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#206: FILE: include/linux/ckrm_rc.h:13:
+ * $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#234: FILE: include/linux/ckrm_rc.h:41:
+#define CKRM_MAX_CLASSTYPE_NAME     32 ^I/* maximum classtype name length */$

WARNING:NEW_TYPEDEFS: do not add new typedefs
#246: FILE: include/linux/ckrm_rc.h:53:
+typedef struct ckrm_shares {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#255: FILE: include/linux/ckrm_rc.h:62:
+#define CKRM_SHARE_UNCHANGED     (-1)^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#256: FILE: include/linux/ckrm_rc.h:63:
+#define CKRM_SHARE_DONTCARE      (-2)^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#257: FILE: include/linux/ckrm_rc.h:64:
+#define CKRM_SHARE_DFLT_TOTAL_GUARANTEE (100) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#258: FILE: include/linux/ckrm_rc.h:65:
+#define CKRM_SHARE_DFLT_MAX_LIMIT     (100)  $

WARNING:NEW_TYPEDEFS: do not add new typedefs
#266: FILE: include/linux/ckrm_rc.h:73:
+typedef struct ckrm_res_ctlr {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#273: FILE: include/linux/ckrm_rc.h:80:
+	void *(*res_alloc) (struct ckrm_core_class * this,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: Unnecessary space before function pointer arguments
#273: FILE: include/linux/ckrm_rc.h:80:
+	void *(*res_alloc) (struct ckrm_core_class * this,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#274: FILE: include/linux/ckrm_rc.h:81:
+			    struct ckrm_core_class * parent);

WARNING:SPACING: Unnecessary space before function pointer arguments
#275: FILE: include/linux/ckrm_rc.h:82:
+	void (*res_free) (void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#275: FILE: include/linux/ckrm_rc.h:82:
+	void (*res_free) (void *);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#278: FILE: include/linux/ckrm_rc.h:85:
+	int (*set_share_values) (void *, struct ckrm_shares * shares);

WARNING:SPACING: Unnecessary space before function pointer arguments
#278: FILE: include/linux/ckrm_rc.h:85:
+	int (*set_share_values) (void *, struct ckrm_shares * shares);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#278: FILE: include/linux/ckrm_rc.h:85:
+	int (*set_share_values) (void *, struct ckrm_shares * shares);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#279: FILE: include/linux/ckrm_rc.h:86:
+	int (*get_share_values) (void *, struct ckrm_shares * shares);

WARNING:SPACING: Unnecessary space before function pointer arguments
#279: FILE: include/linux/ckrm_rc.h:86:
+	int (*get_share_values) (void *, struct ckrm_shares * shares);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#279: FILE: include/linux/ckrm_rc.h:86:
+	int (*get_share_values) (void *, struct ckrm_shares * shares);

WARNING:SPACING: Unnecessary space before function pointer arguments
#282: FILE: include/linux/ckrm_rc.h:89:
+	int (*get_stats) (void *, struct seq_file *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#282: FILE: include/linux/ckrm_rc.h:89:
+	int (*get_stats) (void *, struct seq_file *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct seq_file *' should also have an identifier name
#282: FILE: include/linux/ckrm_rc.h:89:
+	int (*get_stats) (void *, struct seq_file *);

WARNING:SPACING: Unnecessary space before function pointer arguments
#283: FILE: include/linux/ckrm_rc.h:90:
+	int (*reset_stats) (void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#283: FILE: include/linux/ckrm_rc.h:90:
+	int (*reset_stats) (void *);

WARNING:SPACING: Unnecessary space before function pointer arguments
#284: FILE: include/linux/ckrm_rc.h:91:
+	int (*show_config) (void *, struct seq_file *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#284: FILE: include/linux/ckrm_rc.h:91:
+	int (*show_config) (void *, struct seq_file *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct seq_file *' should also have an identifier name
#284: FILE: include/linux/ckrm_rc.h:91:
+	int (*show_config) (void *, struct seq_file *);

WARNING:SPACING: Unnecessary space before function pointer arguments
#285: FILE: include/linux/ckrm_rc.h:92:
+	int (*set_config) (void *, const char *cfgstr);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#285: FILE: include/linux/ckrm_rc.h:92:
+	int (*set_config) (void *, const char *cfgstr);

WARNING:SPACING: Unnecessary space before function pointer arguments
#287: FILE: include/linux/ckrm_rc.h:94:
+	void (*change_resclass) (void *, void *, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#287: FILE: include/linux/ckrm_rc.h:94:
+	void (*change_resclass) (void *, void *, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#287: FILE: include/linux/ckrm_rc.h:94:
+	void (*change_resclass) (void *, void *, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#287: FILE: include/linux/ckrm_rc.h:94:
+	void (*change_resclass) (void *, void *, void *);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#293: FILE: include/linux/ckrm_rc.h:100:
+ * A <struct ckrm_classtype> object describes a dimension for CKRM to classify $

WARNING:NEW_TYPEDEFS: do not add new typedefs
#305: FILE: include/linux/ckrm_rc.h:112:
+typedef struct ckrm_classtype {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#320: FILE: include/linux/ckrm_rc.h:127:
+^Istruct ckrm_core_class *default_class;^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#322: FILE: include/linux/ckrm_rc.h:129:
+^Iint num_classes;^I $

ERROR:CODE_INDENT: code indent should use tabs where possible
#339: FILE: include/linux/ckrm_rc.h:146:
+^I                                  /* but could be different */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:CAMELCASE: Avoid CamelCase: <typeID>
#340: FILE: include/linux/ckrm_rc.h:147:
+	int typeID;			  /* unique TypeID */

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

ERROR:TRAILING_WHITESPACE: trailing whitespace
#345: FILE: include/linux/ckrm_rc.h:152:
+^Istruct ckrm_core_class *(*alloc) (struct ckrm_core_class * parent, $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#345: FILE: include/linux/ckrm_rc.h:152:
+	struct ckrm_core_class *(*alloc) (struct ckrm_core_class * parent, 

WARNING:SPACING: Unnecessary space before function pointer arguments
#345: FILE: include/linux/ckrm_rc.h:152:
+	struct ckrm_core_class *(*alloc) (struct ckrm_core_class * parent, 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#346: FILE: include/linux/ckrm_rc.h:153:
+^I^I^I^I^I  const char *name);^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#347: FILE: include/linux/ckrm_rc.h:154:
+^Iint (*free) (struct ckrm_core_class * cls);^I$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#347: FILE: include/linux/ckrm_rc.h:154:
+	int (*free) (struct ckrm_core_class * cls);	

WARNING:SPACING: Unnecessary space before function pointer arguments
#347: FILE: include/linux/ckrm_rc.h:154:
+	int (*free) (struct ckrm_core_class * cls);	

WARNING:SPACING: Unnecessary space before function pointer arguments
#348: FILE: include/linux/ckrm_rc.h:155:
+	int (*show_members) (struct ckrm_core_class *, struct seq_file *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ckrm_core_class *' should also have an identifier name
#348: FILE: include/linux/ckrm_rc.h:155:
+	int (*show_members) (struct ckrm_core_class *, struct seq_file *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct seq_file *' should also have an identifier name
#348: FILE: include/linux/ckrm_rc.h:155:
+	int (*show_members) (struct ckrm_core_class *, struct seq_file *);

WARNING:SPACING: Unnecessary space before function pointer arguments
#349: FILE: include/linux/ckrm_rc.h:156:
+	int (*show_stats) (struct ckrm_core_class *, struct seq_file *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ckrm_core_class *' should also have an identifier name
#349: FILE: include/linux/ckrm_rc.h:156:
+	int (*show_stats) (struct ckrm_core_class *, struct seq_file *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct seq_file *' should also have an identifier name
#349: FILE: include/linux/ckrm_rc.h:156:
+	int (*show_stats) (struct ckrm_core_class *, struct seq_file *);

WARNING:SPACING: Unnecessary space before function pointer arguments
#350: FILE: include/linux/ckrm_rc.h:157:
+	int (*show_config) (struct ckrm_core_class *, struct seq_file *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ckrm_core_class *' should also have an identifier name
#350: FILE: include/linux/ckrm_rc.h:157:
+	int (*show_config) (struct ckrm_core_class *, struct seq_file *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct seq_file *' should also have an identifier name
#350: FILE: include/linux/ckrm_rc.h:157:
+	int (*show_config) (struct ckrm_core_class *, struct seq_file *);

WARNING:SPACING: Unnecessary space before function pointer arguments
#351: FILE: include/linux/ckrm_rc.h:158:
+	int (*show_shares) (struct ckrm_core_class *, struct seq_file *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ckrm_core_class *' should also have an identifier name
#351: FILE: include/linux/ckrm_rc.h:158:
+	int (*show_shares) (struct ckrm_core_class *, struct seq_file *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct seq_file *' should also have an identifier name
#351: FILE: include/linux/ckrm_rc.h:158:
+	int (*show_shares) (struct ckrm_core_class *, struct seq_file *);

WARNING:SPACING: Unnecessary space before function pointer arguments
#353: FILE: include/linux/ckrm_rc.h:160:
+	int (*reset_stats) (struct ckrm_core_class *, const char *resname,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ckrm_core_class *' should also have an identifier name
#353: FILE: include/linux/ckrm_rc.h:160:
+	int (*reset_stats) (struct ckrm_core_class *, const char *resname,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#353: FILE: include/linux/ckrm_rc.h:160:
+	int (*reset_stats) (struct ckrm_core_class *, const char *resname,

WARNING:SPACING: Unnecessary space before function pointer arguments
#355: FILE: include/linux/ckrm_rc.h:162:
+	int (*set_config) (struct ckrm_core_class *, const char *resname,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ckrm_core_class *' should also have an identifier name
#355: FILE: include/linux/ckrm_rc.h:162:
+	int (*set_config) (struct ckrm_core_class *, const char *resname,

WARNING:SPACING: Unnecessary space before function pointer arguments
#357: FILE: include/linux/ckrm_rc.h:164:
+	int (*set_shares) (struct ckrm_core_class *, const char *resname,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ckrm_core_class *' should also have an identifier name
#357: FILE: include/linux/ckrm_rc.h:164:
+	int (*set_shares) (struct ckrm_core_class *, const char *resname,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#358: FILE: include/linux/ckrm_rc.h:165:
+			   struct ckrm_shares * shares);

WARNING:SPACING: Unnecessary space before function pointer arguments
#359: FILE: include/linux/ckrm_rc.h:166:
+	int (*forced_reclassify) (struct ckrm_core_class *, const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ckrm_core_class *' should also have an identifier name
#359: FILE: include/linux/ckrm_rc.h:166:
+	int (*forced_reclassify) (struct ckrm_core_class *, const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#359: FILE: include/linux/ckrm_rc.h:166:
+	int (*forced_reclassify) (struct ckrm_core_class *, const char *);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#364: FILE: include/linux/ckrm_rc.h:171:
+^Ivoid (*add_resctrl) (struct ckrm_core_class *, int resid);^I$

WARNING:SPACING: Unnecessary space before function pointer arguments
#364: FILE: include/linux/ckrm_rc.h:171:
+	void (*add_resctrl) (struct ckrm_core_class *, int resid);	

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ckrm_core_class *' should also have an identifier name
#364: FILE: include/linux/ckrm_rc.h:171:
+	void (*add_resctrl) (struct ckrm_core_class *, int resid);	

WARNING:REPEATED_WORD: Possible repeated word: 'the'
#373: FILE: include/linux/ckrm_rc.h:180:
+ * basic definition of a hierarchy that is to be used by the the CORE classes

WARNING:NEW_TYPEDEFS: do not add new typedefs
#379: FILE: include/linux/ckrm_rc.h:186:
+typedef struct ckrm_hnode {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#381: FILE: include/linux/ckrm_rc.h:188:
+^Istruct list_head siblings;^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#382: FILE: include/linux/ckrm_rc.h:189:
+^Istruct list_head children;^I$

WARNING:NEW_TYPEDEFS: do not add new typedefs
#385: FILE: include/linux/ckrm_rc.h:192:
+typedef struct ckrm_core_class {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#386: FILE: include/linux/ckrm_rc.h:193:
+^Istruct ckrm_classtype *classtype;^I$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#404: FILE: include/linux/ckrm_rc.h:211:
+#define class_type(type,coreptr)   container_of(coreptr,type,core)
                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#404: FILE: include/linux/ckrm_rc.h:211:
+#define class_type(type,coreptr)   container_of(coreptr,type,core)
                                                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#404: FILE: include/linux/ckrm_rc.h:211:
+#define class_type(type,coreptr)   container_of(coreptr,type,core)
                                                             ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'rescls' - possible side-effects?
#416: FILE: include/linux/ckrm_rc.h:223:
+#define ckrm_get_res_class(rescls, resid, type) \
+	((type*) (((resid != -1) && ((rescls) != NULL) \
+			   && ((rescls) != (void *)-1)) ? \
+	 ((struct ckrm_core_class *)(rescls))->res_class[resid] : NULL))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'resid' - possible side-effects?
#416: FILE: include/linux/ckrm_rc.h:223:
+#define ckrm_get_res_class(rescls, resid, type) \
+	((type*) (((resid != -1) && ((rescls) != NULL) \
+			   && ((rescls) != (void *)-1)) ? \
+	 ((struct ckrm_core_class *)(rescls))->res_class[resid] : NULL))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'resid' may be better as '(resid)' to avoid precedence issues
#416: FILE: include/linux/ckrm_rc.h:223:
+#define ckrm_get_res_class(rescls, resid, type) \
+	((type*) (((resid != -1) && ((rescls) != NULL) \
+			   && ((rescls) != (void *)-1)) ? \
+	 ((struct ckrm_core_class *)(rescls))->res_class[resid] : NULL))

CHECK:SPACING: No space is necessary after a cast
#417: FILE: include/linux/ckrm_rc.h:224:
+	((type*) (((resid != -1) && ((rescls) != NULL) \

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#417: FILE: include/linux/ckrm_rc.h:224:
+	((type*) (((resid != -1) && ((rescls) != NULL) \

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#418: FILE: include/linux/ckrm_rc.h:225:
+	((type*) (((resid != -1) && ((rescls) != NULL) \
+			   && ((rescls) != (void *)-1)) ? \

CHECK:LINE_SPACING: Please don't use multiple blank lines
#421: FILE: include/linux/ckrm_rc.h:228:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#422: FILE: include/linux/ckrm_rc.h:229:
+extern int ckrm_register_res_ctlr(struct ckrm_classtype *, ckrm_res_ctlr_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ckrm_classtype *' should also have an identifier name
#422: FILE: include/linux/ckrm_rc.h:229:
+extern int ckrm_register_res_ctlr(struct ckrm_classtype *, ckrm_res_ctlr_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ckrm_res_ctlr_t *' should also have an identifier name
#422: FILE: include/linux/ckrm_rc.h:229:
+extern int ckrm_register_res_ctlr(struct ckrm_classtype *, ckrm_res_ctlr_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#423: FILE: include/linux/ckrm_rc.h:230:
+extern int ckrm_unregister_res_ctlr(ckrm_res_ctlr_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ckrm_res_ctlr_t *' should also have an identifier name
#423: FILE: include/linux/ckrm_rc.h:230:
+extern int ckrm_unregister_res_ctlr(ckrm_res_ctlr_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#425: FILE: include/linux/ckrm_rc.h:232:
+extern int ckrm_validate_and_grab_core(struct ckrm_core_class *core);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#426: FILE: include/linux/ckrm_rc.h:233:
+extern int ckrm_init_core_class(struct ckrm_classtype *clstype,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#430: FILE: include/linux/ckrm_rc.h:237:
+extern int ckrm_release_core_class(struct ckrm_core_class *);^I$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#430: FILE: include/linux/ckrm_rc.h:237:
+extern int ckrm_release_core_class(struct ckrm_core_class *);	

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ckrm_core_class *' should also have an identifier name
#430: FILE: include/linux/ckrm_rc.h:237:
+extern int ckrm_release_core_class(struct ckrm_core_class *);	

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#434: FILE: include/linux/ckrm_rc.h:241:
+extern struct ckrm_res_ctlr *ckrm_resctlr_lookup(struct ckrm_classtype *type,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#437: FILE: include/linux/ckrm_rc.h:244:
+extern void ckrm_lock_hier(struct ckrm_core_class *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ckrm_core_class *' should also have an identifier name
#437: FILE: include/linux/ckrm_rc.h:244:
+extern void ckrm_lock_hier(struct ckrm_core_class *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#438: FILE: include/linux/ckrm_rc.h:245:
+extern void ckrm_unlock_hier(struct ckrm_core_class *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ckrm_core_class *' should also have an identifier name
#438: FILE: include/linux/ckrm_rc.h:245:
+extern void ckrm_unlock_hier(struct ckrm_core_class *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#439: FILE: include/linux/ckrm_rc.h:246:
+extern struct ckrm_core_class *ckrm_get_next_child(struct ckrm_core_class *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ckrm_core_class *' should also have an identifier name
#439: FILE: include/linux/ckrm_rc.h:246:
+extern struct ckrm_core_class *ckrm_get_next_child(struct ckrm_core_class *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ckrm_core_class *' should also have an identifier name
#439: FILE: include/linux/ckrm_rc.h:246:
+extern struct ckrm_core_class *ckrm_get_next_child(struct ckrm_core_class *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#442: FILE: include/linux/ckrm_rc.h:249:
+extern void child_guarantee_changed(struct ckrm_shares *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ckrm_shares *' should also have an identifier name
#442: FILE: include/linux/ckrm_rc.h:249:
+extern void child_guarantee_changed(struct ckrm_shares *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#442: FILE: include/linux/ckrm_rc.h:249:
+extern void child_guarantee_changed(struct ckrm_shares *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#442: FILE: include/linux/ckrm_rc.h:249:
+extern void child_guarantee_changed(struct ckrm_shares *, int, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#443: FILE: include/linux/ckrm_rc.h:250:
+extern void child_maxlimit_changed(struct ckrm_shares *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ckrm_shares *' should also have an identifier name
#443: FILE: include/linux/ckrm_rc.h:250:
+extern void child_maxlimit_changed(struct ckrm_shares *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#443: FILE: include/linux/ckrm_rc.h:250:
+extern void child_maxlimit_changed(struct ckrm_shares *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#444: FILE: include/linux/ckrm_rc.h:251:
+extern int set_shares(struct ckrm_shares *, struct ckrm_shares *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ckrm_shares *' should also have an identifier name
#444: FILE: include/linux/ckrm_rc.h:251:
+extern int set_shares(struct ckrm_shares *, struct ckrm_shares *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ckrm_shares *' should also have an identifier name
#444: FILE: include/linux/ckrm_rc.h:251:
+extern int set_shares(struct ckrm_shares *, struct ckrm_shares *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ckrm_shares *' should also have an identifier name
#444: FILE: include/linux/ckrm_rc.h:251:
+extern int set_shares(struct ckrm_shares *, struct ckrm_shares *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#448: FILE: include/linux/ckrm_rc.h:255:
+extern int ckrm_register_classtype(struct ckrm_classtype *clstype);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#449: FILE: include/linux/ckrm_rc.h:256:
+extern int ckrm_unregister_classtype(struct ckrm_classtype *clstype);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#450: FILE: include/linux/ckrm_rc.h:257:
+extern struct ckrm_classtype *ckrm_find_classtype_by_name(const char *name);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#453: FILE: include/linux/ckrm_rc.h:260:
+extern int ckrm_class_show_shares(struct ckrm_core_class *core,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#455: FILE: include/linux/ckrm_rc.h:262:
+extern int ckrm_class_show_stats(struct ckrm_core_class *core,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#457: FILE: include/linux/ckrm_rc.h:264:
+extern int ckrm_class_show_config(struct ckrm_core_class *core,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#459: FILE: include/linux/ckrm_rc.h:266:
+extern int ckrm_class_set_config(struct ckrm_core_class *core,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#461: FILE: include/linux/ckrm_rc.h:268:
+extern int ckrm_class_set_shares(struct ckrm_core_class *core,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#464: FILE: include/linux/ckrm_rc.h:271:
+extern int ckrm_class_reset_stats(struct ckrm_core_class *core,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#476: FILE: include/linux/ckrm_rc.h:283:
+	extern void ckrm_free_core_class(struct ckrm_core_class *core);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#481: FILE: include/linux/ckrm_rc.h:288:
+static inline unsigned int ckrm_is_core_valid(ckrm_core_class_t * core)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#488: FILE: include/linux/ckrm_rc.h:295:
+ * requires following arguments (ckrm_core_class *cls, $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#494: FILE: include/linux/ckrm_rc.h:301:
+#define forall_class_resobjs(cls,rcbs,robj,bmap)			\
                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#494: FILE: include/linux/ckrm_rc.h:301:
+#define forall_class_resobjs(cls,rcbs,robj,bmap)			\
                                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#494: FILE: include/linux/ckrm_rc.h:301:
+#define forall_class_resobjs(cls,rcbs,robj,bmap)			\
                                           ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cls' - possible side-effects?
#494: FILE: include/linux/ckrm_rc.h:301:
+#define forall_class_resobjs(cls,rcbs,robj,bmap)			\
+       for ( bmap=((cls->classtype)->bit_res_ctlrs) ;			\
+	     ({ int rid; ((rid=ffs(bmap)-1) >= 0) &&			\
+	                 (bmap &= ~(1<<rid),				\
+				((rcbs=cls->classtype->res_ctlrs[rid])	\
+				 && (robj=cls->res_class[rid]))); });	\
+           )

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'cls' may be better as '(cls)' to avoid precedence issues
#494: FILE: include/linux/ckrm_rc.h:301:
+#define forall_class_resobjs(cls,rcbs,robj,bmap)			\
+       for ( bmap=((cls->classtype)->bit_res_ctlrs) ;			\
+	     ({ int rid; ((rid=ffs(bmap)-1) >= 0) &&			\
+	                 (bmap &= ~(1<<rid),				\
+				((rcbs=cls->classtype->res_ctlrs[rid])	\
+				 && (robj=cls->res_class[rid]))); });	\
+           )

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'bmap' - possible side-effects?
#494: FILE: include/linux/ckrm_rc.h:301:
+#define forall_class_resobjs(cls,rcbs,robj,bmap)			\
+       for ( bmap=((cls->classtype)->bit_res_ctlrs) ;			\
+	     ({ int rid; ((rid=ffs(bmap)-1) >= 0) &&			\
+	                 (bmap &= ~(1<<rid),				\
+				((rcbs=cls->classtype->res_ctlrs[rid])	\
+				 && (robj=cls->res_class[rid]))); });	\
+           )

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#495: FILE: include/linux/ckrm_rc.h:302:
+       for ( bmap=((cls->classtype)->bit_res_ctlrs) ;^I^I^I\$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#495: FILE: include/linux/ckrm_rc.h:302:
+       for ( bmap=((cls->classtype)->bit_res_ctlrs) ;			\
                  ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#495: FILE: include/linux/ckrm_rc.h:302:
+       for ( bmap=((cls->classtype)->bit_res_ctlrs) ;			\

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#496: FILE: include/linux/ckrm_rc.h:303:
+	     ({ int rid; ((rid=ffs(bmap)-1) >= 0) &&			\
 	                      ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#496: FILE: include/linux/ckrm_rc.h:303:
+	     ({ int rid; ((rid=ffs(bmap)-1) >= 0) &&			\
 	                                ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#497: FILE: include/linux/ckrm_rc.h:304:
+^I                 (bmap &= ~(1<<rid),^I^I^I^I\$

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#497: FILE: include/linux/ckrm_rc.h:304:
+	                 (bmap &= ~(1<<rid),				\
 	                             ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#498: FILE: include/linux/ckrm_rc.h:305:
+				((rcbs=cls->classtype->res_ctlrs[rid])	\
 				      ^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#499: FILE: include/linux/ckrm_rc.h:306:
+				((rcbs=cls->classtype->res_ctlrs[rid])	\
+				 && (robj=cls->res_class[rid]))); });	\

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#499: FILE: include/linux/ckrm_rc.h:306:
+				 && (robj=cls->res_class[rid]))); });	\
 				         ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#500: FILE: include/linux/ckrm_rc.h:307:
+           )$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#500: FILE: include/linux/ckrm_rc.h:307:
+           )$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#502: FILE: include/linux/ckrm_rc.h:309:
+extern struct ckrm_classtype *ckrm_classtypes[];^I$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ctype' - possible side-effects?
#513: FILE: include/linux/ckrm_rc.h:320:
+#define CE_CLASSIFY_NORET(ctype, event, objs_to_classify...)		\
+do {									\
+	if ((ctype)->ce_cb_active					\
+	    && (test_bit(event,&(ctype)->ce_callbacks.c_interest)))	\
+		(*(ctype)->ce_callbacks.classify)(event,		\
+						  objs_to_classify);	\
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'event' - possible side-effects?
#513: FILE: include/linux/ckrm_rc.h:320:
+#define CE_CLASSIFY_NORET(ctype, event, objs_to_classify...)		\
+do {									\
+	if ((ctype)->ce_cb_active					\
+	    && (test_bit(event,&(ctype)->ce_callbacks.c_interest)))	\
+		(*(ctype)->ce_callbacks.classify)(event,		\
+						  objs_to_classify);	\
+} while (0)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#516: FILE: include/linux/ckrm_rc.h:323:
+	if ((ctype)->ce_cb_active					\
+	    && (test_bit(event,&(ctype)->ce_callbacks.c_interest)))	\

ERROR:SPACING: space required after that ',' (ctx:VxO)
#516: FILE: include/linux/ckrm_rc.h:323:
+	    && (test_bit(event,&(ctype)->ce_callbacks.c_interest)))	\
 	                      ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#516: FILE: include/linux/ckrm_rc.h:323:
+	    && (test_bit(event,&(ctype)->ce_callbacks.c_interest)))	\
 	                       ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ctype' - possible side-effects?
#521: FILE: include/linux/ckrm_rc.h:328:
+#define CE_CLASSIFY_RET(ret, ctype, event, objs_to_classify...)		\
+do {									\
+	if ((ctype)->ce_cb_active					\
+	    && (test_bit(event,&(ctype)->ce_callbacks.c_interest)))	\
+		ret = (*(ctype)->ce_callbacks.classify)(event,		\
+							objs_to_classify);\
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'event' - possible side-effects?
#521: FILE: include/linux/ckrm_rc.h:328:
+#define CE_CLASSIFY_RET(ret, ctype, event, objs_to_classify...)		\
+do {									\
+	if ((ctype)->ce_cb_active					\
+	    && (test_bit(event,&(ctype)->ce_callbacks.c_interest)))	\
+		ret = (*(ctype)->ce_callbacks.classify)(event,		\
+							objs_to_classify);\
+} while (0)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#524: FILE: include/linux/ckrm_rc.h:331:
+	if ((ctype)->ce_cb_active					\
+	    && (test_bit(event,&(ctype)->ce_callbacks.c_interest)))	\

ERROR:SPACING: space required after that ',' (ctx:VxO)
#524: FILE: include/linux/ckrm_rc.h:331:
+	    && (test_bit(event,&(ctype)->ce_callbacks.c_interest)))	\
 	                      ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#524: FILE: include/linux/ckrm_rc.h:331:
+	    && (test_bit(event,&(ctype)->ce_callbacks.c_interest)))	\
 	                       ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ctype' - possible side-effects?
#529: FILE: include/linux/ckrm_rc.h:336:
+#define CE_NOTIFY(ctype, event, cls, objs_to_classify)			\
+do {									\
+	if ((ctype)->ce_cb_active					\
+	    && (test_bit(event,&(ctype)->ce_callbacks.n_interest)))	\
+		(*(ctype)->ce_callbacks.notify)(event,			\
+						cls,objs_to_classify);	\
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'event' - possible side-effects?
#529: FILE: include/linux/ckrm_rc.h:336:
+#define CE_NOTIFY(ctype, event, cls, objs_to_classify)			\
+do {									\
+	if ((ctype)->ce_cb_active					\
+	    && (test_bit(event,&(ctype)->ce_callbacks.n_interest)))	\
+		(*(ctype)->ce_callbacks.notify)(event,			\
+						cls,objs_to_classify);	\
+} while (0)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#532: FILE: include/linux/ckrm_rc.h:339:
+	if ((ctype)->ce_cb_active					\
+	    && (test_bit(event,&(ctype)->ce_callbacks.n_interest)))	\

ERROR:SPACING: space required after that ',' (ctx:VxO)
#532: FILE: include/linux/ckrm_rc.h:339:
+	    && (test_bit(event,&(ctype)->ce_callbacks.n_interest)))	\
 	                      ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#532: FILE: include/linux/ckrm_rc.h:339:
+	    && (test_bit(event,&(ctype)->ce_callbacks.n_interest)))	\
 	                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#534: FILE: include/linux/ckrm_rc.h:341:
+						cls,objs_to_classify);	\
 						   ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#538: FILE: include/linux/ckrm_rc.h:345:
+ * RCFS related $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#554: FILE: include/linux/rcfs.h:1:
+#ifndef _LINUX_RCFS_H

ERROR:TRAILING_WHITESPACE: trailing whitespace
#564: FILE: include/linux/rcfs.h:11:
+ * The following declarations cannot be included in any of ckrm*.h files $

WARNING:NEW_TYPEDEFS: do not add new typedefs
#574: FILE: include/linux/rcfs.h:21:
+typedef struct rcfs_inode_info {

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IXUGO' are not preferred. Consider using octal permissions '0555'.
#580: FILE: include/linux/rcfs.h:27:
+#define RCFS_DEFAULT_DIR_MODE	(S_IFDIR | S_IRUGO | S_IXUGO)

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:SPACING: spaces preferred around that '|' (ctx:WxV)
#581: FILE: include/linux/rcfs.h:28:
+#define RCFS_DEFAULT_FILE_MODE	(S_IFREG | S_IRUSR | S_IWUSR | S_IRGRP |S_IROTH)
                               	                                       ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IWUSR | S_IRGRP |S_IROTH' are not preferred. Consider using octal permissions '0644'.
#581: FILE: include/linux/rcfs.h:28:
+#define RCFS_DEFAULT_FILE_MODE	(S_IFREG | S_IRUSR | S_IWUSR | S_IRGRP |S_IROTH)

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#586: FILE: include/linux/rcfs.h:33:
+	struct inode_operations *i_op;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct file_operations should normally be const
#587: FILE: include/linux/rcfs.h:34:
+	struct file_operations *i_fop;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#594: FILE: include/linux/rcfs.h:41:
+^I * Can have a different magf describing magic files $

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#603: FILE: include/linux/rcfs.h:50:
+int rcfs_empty(struct dentry *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#604: FILE: include/linux/rcfs.h:51:
+struct inode *rcfs_get_inode(struct super_block *, int, dev_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#604: FILE: include/linux/rcfs.h:51:
+struct inode *rcfs_get_inode(struct super_block *, int, dev_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'dev_t' should also have an identifier name
#604: FILE: include/linux/rcfs.h:51:
+struct inode *rcfs_get_inode(struct super_block *, int, dev_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#605: FILE: include/linux/rcfs.h:52:
+int rcfs_mknod(struct inode *, struct dentry *, int, dev_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#605: FILE: include/linux/rcfs.h:52:
+int rcfs_mknod(struct inode *, struct dentry *, int, dev_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#605: FILE: include/linux/rcfs.h:52:
+int rcfs_mknod(struct inode *, struct dentry *, int, dev_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'dev_t' should also have an identifier name
#605: FILE: include/linux/rcfs.h:52:
+int rcfs_mknod(struct inode *, struct dentry *, int, dev_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#606: FILE: include/linux/rcfs.h:53:
+int _rcfs_mknod(struct inode *, struct dentry *, int, dev_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#606: FILE: include/linux/rcfs.h:53:
+int _rcfs_mknod(struct inode *, struct dentry *, int, dev_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#606: FILE: include/linux/rcfs.h:53:
+int _rcfs_mknod(struct inode *, struct dentry *, int, dev_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'dev_t' should also have an identifier name
#606: FILE: include/linux/rcfs.h:53:
+int _rcfs_mknod(struct inode *, struct dentry *, int, dev_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#607: FILE: include/linux/rcfs.h:54:
+int rcfs_mkdir(struct inode *, struct dentry *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#607: FILE: include/linux/rcfs.h:54:
+int rcfs_mkdir(struct inode *, struct dentry *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#607: FILE: include/linux/rcfs.h:54:
+int rcfs_mkdir(struct inode *, struct dentry *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#608: FILE: include/linux/rcfs.h:55:
+ckrm_core_class_t *rcfs_make_core(struct dentry *, struct ckrm_core_class *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ckrm_core_class *' should also have an identifier name
#608: FILE: include/linux/rcfs.h:55:
+ckrm_core_class_t *rcfs_make_core(struct dentry *, struct ckrm_core_class *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#609: FILE: include/linux/rcfs.h:56:
+struct dentry *rcfs_set_magf_byname(char *, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#609: FILE: include/linux/rcfs.h:56:
+struct dentry *rcfs_set_magf_byname(char *, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#611: FILE: include/linux/rcfs.h:58:
+struct dentry *rcfs_create_internal(struct dentry *, struct rcfs_magf *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rcfs_magf *' should also have an identifier name
#611: FILE: include/linux/rcfs.h:58:
+struct dentry *rcfs_create_internal(struct dentry *, struct rcfs_magf *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#611: FILE: include/linux/rcfs.h:58:
+struct dentry *rcfs_create_internal(struct dentry *, struct rcfs_magf *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#612: FILE: include/linux/rcfs.h:59:
+int rcfs_delete_internal(struct dentry *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#613: FILE: include/linux/rcfs.h:60:
+int rcfs_create_magic(struct dentry *, struct rcfs_magf *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rcfs_magf *' should also have an identifier name
#613: FILE: include/linux/rcfs.h:60:
+int rcfs_create_magic(struct dentry *, struct rcfs_magf *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#613: FILE: include/linux/rcfs.h:60:
+int rcfs_create_magic(struct dentry *, struct rcfs_magf *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#614: FILE: include/linux/rcfs.h:61:
+int rcfs_clear_magic(struct dentry *);

WARNING:CONST_STRUCT: struct address_space_operations should normally be const
#617: FILE: include/linux/rcfs.h:64:
+extern struct address_space_operations rcfs_aops;

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#619: FILE: include/linux/rcfs.h:66:
+extern struct inode_operations rcfs_dir_inode_operations;

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#620: FILE: include/linux/rcfs.h:67:
+extern struct inode_operations rcfs_rootdir_inode_operations;

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#621: FILE: include/linux/rcfs.h:68:
+extern struct inode_operations rcfs_file_inode_operations;

WARNING:CONST_STRUCT: struct file_operations should normally be const
#623: FILE: include/linux/rcfs.h:70:
+extern struct file_operations target_fileops;

WARNING:CONST_STRUCT: struct file_operations should normally be const
#624: FILE: include/linux/rcfs.h:71:
+extern struct file_operations shares_fileops;

WARNING:CONST_STRUCT: struct file_operations should normally be const
#625: FILE: include/linux/rcfs.h:72:
+extern struct file_operations stats_fileops;

WARNING:CONST_STRUCT: struct file_operations should normally be const
#626: FILE: include/linux/rcfs.h:73:
+extern struct file_operations config_fileops;

WARNING:CONST_STRUCT: struct file_operations should normally be const
#627: FILE: include/linux/rcfs.h:74:
+extern struct file_operations members_fileops;

WARNING:CONST_STRUCT: struct file_operations should normally be const
#628: FILE: include/linux/rcfs.h:75:
+extern struct file_operations reclassify_fileops;

WARNING:CONST_STRUCT: struct file_operations should normally be const
#629: FILE: include/linux/rcfs.h:76:
+extern struct file_operations rcfs_file_operations;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#633: FILE: include/linux/rcfs.h:80:
+typedef struct rcfs_functions {

WARNING:SPACING: Unnecessary space before function pointer arguments
#634: FILE: include/linux/rcfs.h:81:
+	int (*mkroot) (struct rcfs_magf *, int, struct dentry **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rcfs_magf *' should also have an identifier name
#634: FILE: include/linux/rcfs.h:81:
+	int (*mkroot) (struct rcfs_magf *, int, struct dentry **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#634: FILE: include/linux/rcfs.h:81:
+	int (*mkroot) (struct rcfs_magf *, int, struct dentry **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry **' should also have an identifier name
#634: FILE: include/linux/rcfs.h:81:
+	int (*mkroot) (struct rcfs_magf *, int, struct dentry **);

WARNING:SPACING: Unnecessary space before function pointer arguments
#635: FILE: include/linux/rcfs.h:82:
+	int (*rmroot) (struct dentry *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#635: FILE: include/linux/rcfs.h:82:
+	int (*rmroot) (struct dentry *);

WARNING:SPACING: Unnecessary space before function pointer arguments
#636: FILE: include/linux/rcfs.h:83:
+	int (*register_classtype) (ckrm_classtype_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ckrm_classtype_t *' should also have an identifier name
#636: FILE: include/linux/rcfs.h:83:
+	int (*register_classtype) (ckrm_classtype_t *);

WARNING:SPACING: Unnecessary space before function pointer arguments
#637: FILE: include/linux/rcfs.h:84:
+	int (*deregister_classtype) (ckrm_classtype_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ckrm_classtype_t *' should also have an identifier name
#637: FILE: include/linux/rcfs.h:84:
+	int (*deregister_classtype) (ckrm_classtype_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ckrm_classtype_t *' should also have an identifier name
#640: FILE: include/linux/rcfs.h:87:
+int rcfs_register_classtype(ckrm_classtype_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ckrm_classtype_t *' should also have an identifier name
#641: FILE: include/linux/rcfs.h:88:
+int rcfs_deregister_classtype(ckrm_classtype_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rcfs_magf *' should also have an identifier name
#642: FILE: include/linux/rcfs.h:89:
+int rcfs_mkroot(struct rcfs_magf *, int, struct dentry **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#642: FILE: include/linux/rcfs.h:89:
+int rcfs_mkroot(struct rcfs_magf *, int, struct dentry **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry **' should also have an identifier name
#642: FILE: include/linux/rcfs.h:89:
+int rcfs_mkroot(struct rcfs_magf *, int, struct dentry **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#643: FILE: include/linux/rcfs.h:90:
+int rcfs_rmroot(struct dentry *);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#645: FILE: include/linux/rcfs.h:92:
+#define RCFS_ROOT "/rcfs"  ^I/* TODO:  Should use the mount point */$

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#667: FILE: include/linux/sched.h:672:
+	spinlock_t  ckrm_tsklock;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#699: FILE: kernel/ckrm/ckrm.c:1:
+/* ckrm.c - Class-based Kernel Resource Management (CKRM)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#705: FILE: kernel/ckrm/ckrm.c:7:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#706: FILE: kernel/ckrm/ckrm.c:8:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#707: FILE: kernel/ckrm/ckrm.c:9:
+ * Provides kernel API of CKRM for in-kernel,per-resource controllers $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#708: FILE: kernel/ckrm/ckrm.c:10:
+ * (one each for cpu, memory, io, network) and callbacks for $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#712: FILE: kernel/ckrm/ckrm.c:14:
+ * $

WARNING:TYPO_SPELLING: 'paramter' may be misspelled - perhaps 'parameter'?
#729: FILE: kernel/ckrm/ckrm.c:31:
+ *        surrounding logic. Added task paramter for all CE callbacks.
                                         ^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#734: FILE: kernel/ckrm/ckrm.c:36:
+ *  $

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#742: FILE: kernel/ckrm/ckrm.c:44:
+#include <asm/uaccess.h>

WARNING:BRACES: braces {} are not necessary for single statement blocks
#787: FILE: kernel/ckrm/ckrm.c:89:
+	if (!clstype || !resname) {
+		return NULL;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#793: FILE: kernel/ckrm/ckrm.c:95:
+			struct ckrm_res_ctlr *rctrl = clstype->res_ctlrs[resid];
+			if (!strncmp(resname, rctrl->res_name,

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#801: FILE: kernel/ckrm/ckrm.c:103:
+EXPORT_SYMBOL_GPL(ckrm_resctlr_lookup);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

CHECK:CAMELCASE: Avoid CamelCase: <classTypeID>
#804: FILE: kernel/ckrm/ckrm.c:106:
+void *ckrm_classobj(char *classname, int *classTypeID)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#809: FILE: kernel/ckrm/ckrm.c:111:
+	if (!classname || !*classname) {
+		return NULL;
+	}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ctype"
#818: FILE: kernel/ckrm/ckrm.c:120:
+		if (ctype == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#833: FILE: kernel/ckrm/ckrm.c:135:
+EXPORT_SYMBOL_GPL(is_res_regd);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#834: FILE: kernel/ckrm/ckrm.c:136:
+EXPORT_SYMBOL_GPL(ckrm_classobj);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#844: FILE: kernel/ckrm/ckrm.c:146:
+			       (ctype->ce_callbacks.always_callback
+				|| (ctype->num_classes > 1)));

WARNING:LINE_SPACING: Missing a blank line after declarations
#850: FILE: kernel/ckrm/ckrm.c:152:
+	int rc = 0;
+	read_lock(&ckrm_class_lock);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#868: FILE: kernel/ckrm/ckrm.c:170:
+int ckrm_register_engine(const char *typename, ckrm_eng_callback_t * ecbs)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ctype"
#873: FILE: kernel/ckrm/ckrm.c:175:
+	if (ctype == NULL)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#885: FILE: kernel/ckrm/ckrm.c:187:
+^I * One of the following must be set: $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#886: FILE: kernel/ckrm/ckrm.c:188:
+^I * classify, class_delete (due to object reference) or $

WARNING:TYPO_SPELLING: 'momement' may be misspelled - perhaps 'moment'?
#888: FILE: kernel/ckrm/ckrm.c:190:
+	 * The function pointer must be set the momement the mask is non-null
 	                                        ^^^^^^^^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ecbs->classify'
#890: FILE: kernel/ckrm/ckrm.c:192:
+	if (!(((ecbs->classify) && (ecbs->class_delete)) || (ecbs->notify)) ||
+	    (ecbs->c_interest && ecbs->classify == NULL) ||
+	    (ecbs->n_interest && ecbs->notify == NULL)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ecbs->class_delete'
#890: FILE: kernel/ckrm/ckrm.c:192:
+	if (!(((ecbs->classify) && (ecbs->class_delete)) || (ecbs->notify)) ||
+	    (ecbs->c_interest && ecbs->classify == NULL) ||
+	    (ecbs->n_interest && ecbs->notify == NULL)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ecbs->notify'
#890: FILE: kernel/ckrm/ckrm.c:192:
+	if (!(((ecbs->classify) && (ecbs->class_delete)) || (ecbs->notify)) ||
+	    (ecbs->c_interest && ecbs->classify == NULL) ||
+	    (ecbs->n_interest && ecbs->notify == NULL)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ecbs->classify"
#891: FILE: kernel/ckrm/ckrm.c:193:
+	    (ecbs->c_interest && ecbs->classify == NULL) ||

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ecbs->notify"
#892: FILE: kernel/ckrm/ckrm.c:194:
+	    (ecbs->n_interest && ecbs->notify == NULL)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ctype"
#923: FILE: kernel/ckrm/ckrm.c:225:
+	if (ctype == NULL)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#946: FILE: kernel/ckrm/ckrm.c:248:
+		printk(KERN_ERR "Invalid child %p given in ckrm_add_child\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ckrm_add_child', this function's name, in a string
#946: FILE: kernel/ckrm/ckrm.c:248:
+		printk(KERN_ERR "Invalid child %p given in ckrm_add_child\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#958: FILE: kernel/ckrm/ckrm.c:260:
+			printk(KERN_ERR

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ckrm_add_child', this function's name, in a string
#959: FILE: kernel/ckrm/ckrm.c:261:
+			       "Invalid parent %p given in ckrm_add_child\n",

WARNING:RETURN_VOID: void function return statements are not generally useful
#972: FILE: kernel/ckrm/ckrm.c:274:
+	return;
+}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#980: FILE: kernel/ckrm/ckrm.c:282:
+		printk(KERN_ERR "Invalid child %p given"

ERROR:CODE_INDENT: code indent should use tabs where possible
#981: FILE: kernel/ckrm/ckrm.c:283:
+^I^I       ^I^I" in ckrm_remove_child\n",$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#981: FILE: kernel/ckrm/ckrm.c:283:
+^I^I       ^I^I" in ckrm_remove_child\n",$

WARNING:SPLIT_STRING: quoted string split across lines
#981: FILE: kernel/ckrm/ckrm.c:283:
+		printk(KERN_ERR "Invalid child %p given"
+		       		" in ckrm_remove_child\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ckrm_remove_child', this function's name, in a string
#981: FILE: kernel/ckrm/ckrm.c:283:
+		       		" in ckrm_remove_child\n",

ERROR:CODE_INDENT: code indent should use tabs where possible
#982: FILE: kernel/ckrm/ckrm.c:284:
+^I^I       ^Ichild);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#982: FILE: kernel/ckrm/ckrm.c:284:
+^I^I       ^Ichild);$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#989: FILE: kernel/ckrm/ckrm.c:291:
+		printk(KERN_ERR "Invalid parent %p in ckrm_remove_child\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ckrm_remove_child', this function's name, in a string
#989: FILE: kernel/ckrm/ckrm.c:291:
+		printk(KERN_ERR "Invalid parent %p in ckrm_remove_child\n",

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1012: FILE: kernel/ckrm/ckrm.c:314:
+	if (ckrm_is_core_valid(parent)) {
+		read_lock(&parent->hnode_rwlock);
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1019: FILE: kernel/ckrm/ckrm.c:321:
+	if (ckrm_is_core_valid(parent)) {
+		read_unlock(&parent->hnode_rwlock);
+	}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#1029: FILE: kernel/ckrm/ckrm.c:331:
+#define hnode_2_core(ptr) \
+((ptr)? container_of(ptr, struct ckrm_core_class, hnode) : NULL)

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#1030: FILE: kernel/ckrm/ckrm.c:332:
+((ptr)? container_of(ptr, struct ckrm_core_class, hnode) : NULL)
       ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1040: FILE: kernel/ckrm/ckrm.c:342:
+		printk(KERN_ERR "Invalid parent %p in ckrm_get_next_child\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ckrm_get_next_child', this function's name, in a string
#1040: FILE: kernel/ckrm/ckrm.c:342:
+		printk(KERN_ERR "Invalid parent %p in ckrm_get_next_child\n",

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1044: FILE: kernel/ckrm/ckrm.c:346:
+	if (list_empty(&parent->hnode.children)) {
+		return NULL;
+	}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1049: FILE: kernel/ckrm/ckrm.c:351:
+			printk(KERN_ERR

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ckrm_get_next_child', this function's name, in a string
#1050: FILE: kernel/ckrm/ckrm.c:352:
+			       "Invalid child %p in ckrm_get_next_child\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1067: FILE: kernel/ckrm/ckrm.c:369:
+		printk(KERN_ERR

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ckrm_get_next_child', this function's name, in a string
#1068: FILE: kernel/ckrm/ckrm.c:370:
+		       "Invalid next child %p in ckrm_get_next_child\n",

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1075: FILE: kernel/ckrm/ckrm.c:377:
+EXPORT_SYMBOL_GPL(ckrm_lock_hier);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1076: FILE: kernel/ckrm/ckrm.c:378:
+EXPORT_SYMBOL_GPL(ckrm_unlock_hier);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1077: FILE: kernel/ckrm/ckrm.c:379:
+EXPORT_SYMBOL_GPL(ckrm_get_next_child);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1083: FILE: kernel/ckrm/ckrm.c:385:
+{
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1085: FILE: kernel/ckrm/ckrm.c:387:
+^I/* $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1105: FILE: kernel/ckrm/ckrm.c:407:
+			printk(KERN_ERR "Error creating res class\n");

ERROR:SPACING: space required before the open brace '{'
#1129: FILE: kernel/ckrm/ckrm.c:431:
+	if ((dcore != clstype->default_class) && (!ckrm_is_core_valid(parent))){

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dcore != clstype->default_class'
#1129: FILE: kernel/ckrm/ckrm.c:431:
+	if ((dcore != clstype->default_class) && (!ckrm_is_core_valid(parent))){

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1130: FILE: kernel/ckrm/ckrm.c:432:
+		printk("error not a valid parent %p\n", parent);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1165: FILE: kernel/ckrm/ckrm.c:467:
+^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1167: FILE: kernel/ckrm/ckrm.c:469:
+^I * registered with core $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1179: FILE: kernel/ckrm/ckrm.c:481:
+^I^I^Iatomic_dec(&clstype->nr_resusers[resid]); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1187: FILE: kernel/ckrm/ckrm.c:489:
+ * Free a core class $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1203: FILE: kernel/ckrm/ckrm.c:505:
+		printk("class <%s> finally deleted %lu\n", core->name, jiffies);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1205: FILE: kernel/ckrm/ckrm.c:507:
+	if (ckrm_remove_child(core) == 0) {
+		printk("Core class removal failed. Chilren present\n");
+	}

WARNING:TYPO_SPELLING: 'Chilren' may be misspelled - perhaps 'Children'?
#1206: FILE: kernel/ckrm/ckrm.c:508:
+		printk("Core class removal failed. Chilren present\n");
 		                                   ^^^^^^^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1206: FILE: kernel/ckrm/ckrm.c:508:
+		printk("Core class removal failed. Chilren present\n");

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1208: FILE: kernel/ckrm/ckrm.c:510:
+	for (i = 0; i < clstype->max_resid; i++) {
+		ckrm_free_res_class(core, i);
+	}

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#1215: FILE: kernel/ckrm/ckrm.c:517:
+#if 0				/* Dynamic not yet enabled */

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1261: FILE: kernel/ckrm/ckrm.c:563:
+			      ckrm_res_ctlr_t * rcbs)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1271: FILE: kernel/ckrm/ckrm.c:573:
+	printk(KERN_WARNING "resid is %d name is %s %s\n",

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'resid < CKRM_MAX_RES_CTLRS'
#1274: FILE: kernel/ckrm/ckrm.c:576:
+		if ((resid < CKRM_MAX_RES_CTLRS)
+		    && (clstype->res_ctlrs[resid] == NULL)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'clstype->res_ctlrs[resid] == NULL'
#1274: FILE: kernel/ckrm/ckrm.c:576:
+		if ((resid < CKRM_MAX_RES_CTLRS)
+		    && (clstype->res_ctlrs[resid] == NULL)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1275: FILE: kernel/ckrm/ckrm.c:577:
+		if ((resid < CKRM_MAX_RES_CTLRS)
+		    && (clstype->res_ctlrs[resid] == NULL)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!clstype->res_ctlrs[resid]"
#1275: FILE: kernel/ckrm/ckrm.c:577:
+		    && (clstype->res_ctlrs[resid] == NULL)) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1280: FILE: kernel/ckrm/ckrm.c:582:
+			if (resid >= clstype->max_resid) {
+				clstype->max_resid = resid + 1;
+			}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!clstype->res_ctlrs[i]"
#1290: FILE: kernel/ckrm/ckrm.c:592:
+		if (clstype->res_ctlrs[i] == NULL) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1295: FILE: kernel/ckrm/ckrm.c:597:
+			if (i >= clstype->max_resid) {
+				clstype->max_resid = i + 1;
+			}

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1307: FILE: kernel/ckrm/ckrm.c:609:
+ckrm_register_res_ctlr(struct ckrm_classtype *clstype, ckrm_res_ctlr_t * rcbs)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1315: FILE: kernel/ckrm/ckrm.c:617:
+^I^I/* run through all classes and create the resource class $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1316: FILE: kernel/ckrm/ckrm.c:618:
+^I^I * object and if necessary "initialize" class in context $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1317: FILE: kernel/ckrm/ckrm.c:619:
+^I^I * of this resource $

WARNING:TYPO_SPELLING: 'resouce' may be misspelled - perhaps 'resource'?
#1321: FILE: kernel/ckrm/ckrm.c:623:
+			printk("CKRM .. create res clsobj for resouce <%s>"
 			                                      ^^^^^^^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1321: FILE: kernel/ckrm/ckrm.c:623:
+			printk("CKRM .. create res clsobj for resouce <%s>"

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1322: FILE: kernel/ckrm/ckrm.c:624:
+^I^I^I       "class <%s> par=%p\n", rcbs->res_name, $

WARNING:SPLIT_STRING: quoted string split across lines
#1322: FILE: kernel/ckrm/ckrm.c:624:
+			printk("CKRM .. create res clsobj for resouce <%s>"
+			       "class <%s> par=%p\n", rcbs->res_name, 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1326: FILE: kernel/ckrm/ckrm.c:628:
+^I^I^Iif (clstype->add_resctrl) { $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'clstype == NULL'
#1347: FILE: kernel/ckrm/ckrm.c:649:
+	if ((clstype == NULL) || (resid < 0)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'resid < 0'
#1347: FILE: kernel/ckrm/ckrm.c:649:
+	if ((clstype == NULL) || (resid < 0)) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1347: FILE: kernel/ckrm/ckrm.c:649:
+	if ((clstype == NULL) || (resid < 0)) {
+		return -EINVAL;
+	}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!clstype"
#1347: FILE: kernel/ckrm/ckrm.c:649:
+	if ((clstype == NULL) || (resid < 0)) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1359: FILE: kernel/ckrm/ckrm.c:661:
+	if (atomic_read(&clstype->nr_resusers[resid])) {
+		return -EBUSY;
+	}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1380: FILE: kernel/ckrm/ckrm.c:682:
+EXPORT_SYMBOL_GPL(ckrm_classtypes);^I$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tid < 0'
#1387: FILE: kernel/ckrm/ckrm.c:689:
+		if ((tid < 0) || (tid > CKRM_MAX_CLASSTYPES)
+		    || (ckrm_classtypes[tid]))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tid > CKRM_MAX_CLASSTYPES'
#1387: FILE: kernel/ckrm/ckrm.c:689:
+		if ((tid < 0) || (tid > CKRM_MAX_CLASSTYPES)
+		    || (ckrm_classtypes[tid]))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ckrm_classtypes[tid]'
#1387: FILE: kernel/ckrm/ckrm.c:689:
+		if ((tid < 0) || (tid > CKRM_MAX_CLASSTYPES)
+		    || (ckrm_classtypes[tid]))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1388: FILE: kernel/ckrm/ckrm.c:690:
+		if ((tid < 0) || (tid > CKRM_MAX_CLASSTYPES)
+		    || (ckrm_classtypes[tid]))

WARNING:LINE_SPACING: Missing a blank line after declarations
#1392: FILE: kernel/ckrm/ckrm.c:694:
+		int i;
+		for (i = CKRM_RESV_CLASSTYPES; i < CKRM_MAX_CLASSTYPES; i++) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ckrm_classtypes[i]"
#1393: FILE: kernel/ckrm/ckrm.c:695:
+			if (ckrm_classtypes[i] == NULL) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tid < 0'
#1416: FILE: kernel/ckrm/ckrm.c:718:
+	if ((tid < 0) || (tid > CKRM_MAX_CLASSTYPES)
+	    || (ckrm_classtypes[tid] != clstype))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tid > CKRM_MAX_CLASSTYPES'
#1416: FILE: kernel/ckrm/ckrm.c:718:
+	if ((tid < 0) || (tid > CKRM_MAX_CLASSTYPES)
+	    || (ckrm_classtypes[tid] != clstype))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ckrm_classtypes[tid] != clstype'
#1416: FILE: kernel/ckrm/ckrm.c:718:
+	if ((tid < 0) || (tid > CKRM_MAX_CLASSTYPES)
+	    || (ckrm_classtypes[tid] != clstype))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1417: FILE: kernel/ckrm/ckrm.c:719:
+	if ((tid < 0) || (tid > CKRM_MAX_CLASSTYPES)
+	    || (ckrm_classtypes[tid] != clstype))

WARNING:LINE_SPACING: Missing a blank line after declarations
#1433: FILE: kernel/ckrm/ckrm.c:735:
+	int i;
+	for (i = 0; i < CKRM_MAX_CLASSTYPES; i++) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1435: FILE: kernel/ckrm/ckrm.c:737:
+		struct ckrm_classtype *ctype = ckrm_classtypes[i];
+		if (ctype && !strncmp(ctype->name, name, CKRM_MAX_TYPENAME_LEN))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1442: FILE: kernel/ckrm/ckrm.c:744:
+ *   Generic Functions that can be used as default functions $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1460: FILE: kernel/ckrm/ckrm.c:762:
+			seq_printf(seq,"res=%s,guarantee=%d,limit=%d,"
 			              ^

WARNING:SPLIT_STRING: quoted string split across lines
#1461: FILE: kernel/ckrm/ckrm.c:763:
+			seq_printf(seq,"res=%s,guarantee=%d,limit=%d,"
+				   "total_guarantee=%d,max_limit=%d\n",

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rcbs"
#1510: FILE: kernel/ckrm/ckrm.c:812:
+	if (rcbs == NULL || rcbs->set_config == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rcbs->set_config"
#1510: FILE: kernel/ckrm/ckrm.c:812:
+	if (rcbs == NULL || rcbs->set_config == NULL)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'a' - possible side-effects?
#1516: FILE: kernel/ckrm/ckrm.c:818:
+#define legalshare(a)   \
+         ( ((a) >=0) \
+	   || ((a) == CKRM_SHARE_UNCHANGED) \
+	   || ((a) == CKRM_SHARE_DONTCARE) )

ERROR:CODE_INDENT: code indent should use tabs where possible
#1517: FILE: kernel/ckrm/ckrm.c:819:
+         ( ((a) >=0) \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1517: FILE: kernel/ckrm/ckrm.c:819:
+         ( ((a) >=0) \$

ERROR:SPACING: spaces required around that '>=' (ctx:WxV)
#1517: FILE: kernel/ckrm/ckrm.c:819:
+         ( ((a) >=0) \
                 ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#1517: FILE: kernel/ckrm/ckrm.c:819:
+         ( ((a) >=0) \

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1518: FILE: kernel/ckrm/ckrm.c:820:
+         ( ((a) >=0) \
+	   || ((a) == CKRM_SHARE_UNCHANGED) \

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1519: FILE: kernel/ckrm/ckrm.c:821:
+	   || ((a) == CKRM_SHARE_UNCHANGED) \
+	   || ((a) == CKRM_SHARE_DONTCARE) )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1519: FILE: kernel/ckrm/ckrm.c:821:
+	   || ((a) == CKRM_SHARE_DONTCARE) )

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1530: FILE: kernel/ckrm/ckrm.c:832:
+	if (!legalshare(shares->my_guarantee) || !legalshare(shares->my_limit)
+	    || !legalshare(shares->total_guarantee)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1531: FILE: kernel/ckrm/ckrm.c:833:
+	    || !legalshare(shares->total_guarantee)
+	    || !legalshare(shares->max_limit))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rcbs"
#1535: FILE: kernel/ckrm/ckrm.c:837:
+	if (rcbs == NULL || rcbs->set_share_values == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rcbs->set_share_values"
#1535: FILE: kernel/ckrm/ckrm.c:837:
+	if (rcbs == NULL || rcbs->set_share_values == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rcbs"
#1548: FILE: kernel/ckrm/ckrm.c:850:
+	if (rcbs == NULL || rcbs->reset_stats == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rcbs->reset_stats"
#1548: FILE: kernel/ckrm/ckrm.c:850:
+	if (rcbs == NULL || rcbs->reset_stats == NULL)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1573: FILE: kernel/ckrm/ckrm.c:875:
+	printk("CKRM Initialization\n");

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1579: FILE: kernel/ckrm/ckrm.c:881:
+		extern void ckrm_meta_init_taskclass(void);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1585: FILE: kernel/ckrm/ckrm.c:887:
+		extern void ckrm_meta_init_sockclass(void);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1591: FILE: kernel/ckrm/ckrm.c:893:
+	printk("CKRM Initialization done\n");

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1594: FILE: kernel/ckrm/ckrm.c:896:
+EXPORT_SYMBOL_GPL(ckrm_register_engine);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1595: FILE: kernel/ckrm/ckrm.c:897:
+EXPORT_SYMBOL_GPL(ckrm_unregister_engine);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1597: FILE: kernel/ckrm/ckrm.c:899:
+EXPORT_SYMBOL_GPL(ckrm_register_res_ctlr);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1598: FILE: kernel/ckrm/ckrm.c:900:
+EXPORT_SYMBOL_GPL(ckrm_unregister_res_ctlr);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1600: FILE: kernel/ckrm/ckrm.c:902:
+EXPORT_SYMBOL_GPL(ckrm_init_core_class);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1601: FILE: kernel/ckrm/ckrm.c:903:
+EXPORT_SYMBOL_GPL(ckrm_free_core_class);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1602: FILE: kernel/ckrm/ckrm.c:904:
+EXPORT_SYMBOL_GPL(ckrm_release_core_class);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1604: FILE: kernel/ckrm/ckrm.c:906:
+EXPORT_SYMBOL_GPL(ckrm_register_classtype);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1605: FILE: kernel/ckrm/ckrm.c:907:
+EXPORT_SYMBOL_GPL(ckrm_unregister_classtype);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1606: FILE: kernel/ckrm/ckrm.c:908:
+EXPORT_SYMBOL_GPL(ckrm_find_classtype_by_name);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1608: FILE: kernel/ckrm/ckrm.c:910:
+EXPORT_SYMBOL_GPL(ckrm_core_grab);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1609: FILE: kernel/ckrm/ckrm.c:911:
+EXPORT_SYMBOL_GPL(ckrm_core_drop);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1610: FILE: kernel/ckrm/ckrm.c:912:
+EXPORT_SYMBOL_GPL(ckrm_is_core_valid);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1611: FILE: kernel/ckrm/ckrm.c:913:
+EXPORT_SYMBOL_GPL(ckrm_validate_and_grab_core);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1613: FILE: kernel/ckrm/ckrm.c:915:
+EXPORT_SYMBOL_GPL(ckrm_register_event_set);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1614: FILE: kernel/ckrm/ckrm.c:916:
+EXPORT_SYMBOL_GPL(ckrm_unregister_event_set);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1615: FILE: kernel/ckrm/ckrm.c:917:
+EXPORT_SYMBOL_GPL(ckrm_register_event_cb);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1616: FILE: kernel/ckrm/ckrm.c:918:
+EXPORT_SYMBOL_GPL(ckrm_unregister_event_cb);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1618: FILE: kernel/ckrm/ckrm.c:920:
+EXPORT_SYMBOL_GPL(ckrm_class_show_stats);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1619: FILE: kernel/ckrm/ckrm.c:921:
+EXPORT_SYMBOL_GPL(ckrm_class_show_config);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1620: FILE: kernel/ckrm/ckrm.c:922:
+EXPORT_SYMBOL_GPL(ckrm_class_show_shares);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1622: FILE: kernel/ckrm/ckrm.c:924:
+EXPORT_SYMBOL_GPL(ckrm_class_set_config);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1623: FILE: kernel/ckrm/ckrm.c:925:
+EXPORT_SYMBOL_GPL(ckrm_class_set_shares);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1625: FILE: kernel/ckrm/ckrm.c:927:
+EXPORT_SYMBOL_GPL(ckrm_class_reset_stats);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1631: FILE: kernel/ckrm/ckrmutils.c:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1636: FILE: kernel/ckrm/ckrmutils.c:6:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1641: FILE: kernel/ckrm/ckrmutils.c:11:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1651: FILE: kernel/ckrm/ckrmutils.c:21:
+ * $

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1672: FILE: kernel/ckrm/ckrmutils.c:42:
+	if (!mm) {
+		return -EINVAL;
+	}

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#1682: FILE: kernel/ckrm/ckrmutils.c:52:
+			if (!IS_ERR(lname)) {
[...]
+			} else {
[...]

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1705: FILE: kernel/ckrm/ckrmutils.c:75:
+	if (new == cur || !parent) {
+		return;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1708: FILE: kernel/ckrm/ckrmutils.c:78:
+	if (new != CKRM_SHARE_DONTCARE) {
+		parent->unused_guarantee -= new;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1711: FILE: kernel/ckrm/ckrmutils.c:81:
+	if (cur != CKRM_SHARE_DONTCARE) {
+		parent->unused_guarantee += cur;
+	}

WARNING:RETURN_VOID: void function return statements are not generally useful
#1715: FILE: kernel/ckrm/ckrmutils.c:85:
+	return;
+}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1719: FILE: kernel/ckrm/ckrmutils.c:89:
+ * Caller is responsible for making sure that the new limit is not more $

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1724: FILE: kernel/ckrm/ckrmutils.c:94:
+	if (parent && parent->cur_max_limit < new_limit) {
+		parent->cur_max_limit = new_limit;
+	}

WARNING:RETURN_VOID: void function return statements are not generally useful
#1728: FILE: kernel/ckrm/ckrmutils.c:98:
+	return;
+}

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#1743: FILE: kernel/ckrm/ckrmutils.c:113:
+	if (new->total_guarantee <= CKRM_SHARE_DONTCARE) {
[...]
+	} else if (new->total_guarantee == CKRM_SHARE_UNCHANGED) {
[...]
+	} else if (cur_usage_guar > new->total_guarantee) {
[...]

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 32)
#1745: FILE: kernel/ckrm/ckrmutils.c:115:
+	} else if (new->total_guarantee == CKRM_SHARE_UNCHANGED) {
+		/* do nothing */;

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#1751: FILE: kernel/ckrm/ckrmutils.c:121:
+	if (new->max_limit <= CKRM_SHARE_DONTCARE) {
[...]
+	} else if (new->max_limit == CKRM_SHARE_UNCHANGED) {
[...]
+	} else if (cur->cur_max_limit > new->max_limit) {
[...]

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 32)
#1753: FILE: kernel/ckrm/ckrmutils.c:123:
+	} else if (new->max_limit == CKRM_SHARE_UNCHANGED) {
+		/* do nothing */;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 32)
#1759: FILE: kernel/ckrm/ckrmutils.c:129:
+	if (new->my_guarantee == CKRM_SHARE_UNCHANGED) {
+		/* do nothing */;

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#1759: FILE: kernel/ckrm/ckrmutils.c:129:
+	if (new->my_guarantee == CKRM_SHARE_UNCHANGED) {
[...]
+	} else if (new->my_guarantee == CKRM_SHARE_DONTCARE) {
[...]
+	} else if (par && increase_by > par->unused_guarantee) {
[...]

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 32)
#1761: FILE: kernel/ckrm/ckrmutils.c:131:
+	} else if (new->my_guarantee == CKRM_SHARE_DONTCARE) {
+		/* do nothing */;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 32)
#1767: FILE: kernel/ckrm/ckrmutils.c:137:
+	if (new->my_limit == CKRM_SHARE_UNCHANGED) {
+		/* do nothing */;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 32)
#1769: FILE: kernel/ckrm/ckrmutils.c:139:
+	} else if (new->my_limit == CKRM_SHARE_DONTCARE) {
+		/* do nothing */;

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1775: FILE: kernel/ckrm/ckrmutils.c:145:
+
+	}

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 32)
#1777: FILE: kernel/ckrm/ckrmutils.c:147:
+	if (new->my_limit == CKRM_SHARE_DONTCARE) {
+		/* do nothing */;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 40)
#1780: FILE: kernel/ckrm/ckrmutils.c:150:
+		if (new->my_guarantee == CKRM_SHARE_DONTCARE) {
+			/* do nothing */;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 27)
#1782: FILE: kernel/ckrm/ckrmutils.c:152:
+		} else if (new->my_guarantee == CKRM_SHARE_UNCHANGED) {
[...]
+			 */;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 40)
#1791: FILE: kernel/ckrm/ckrmutils.c:161:
+		if (new->my_guarantee == CKRM_SHARE_DONTCARE) {
+			/* do nothing */;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1794: FILE: kernel/ckrm/ckrmutils.c:164:
+			if (cur->my_guarantee > new->my_limit) {
+				goto set_share_err;
+			}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1814: FILE: kernel/ckrm/ckrmutils.c:184:
+	if (new->max_limit != CKRM_SHARE_UNCHANGED) {
+		cur->max_limit = new->max_limit;
+	}

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1822: FILE: kernel/ckrm/ckrmutils.c:192:
+EXPORT_SYMBOL_GPL(get_exe_path_name);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1823: FILE: kernel/ckrm/ckrmutils.c:193:
+EXPORT_SYMBOL_GPL(child_guarantee_changed);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1824: FILE: kernel/ckrm/ckrmutils.c:194:
+EXPORT_SYMBOL_GPL(child_maxlimit_changed);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1825: FILE: kernel/ckrm/ckrmutils.c:195:
+EXPORT_SYMBOL_GPL(set_shares);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000226801.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 100 errors, 276 warnings, 100 checks, 1740 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000226801.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
