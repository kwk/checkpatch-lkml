WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#75: FILE: arch/ppc64/kernel/eeh.c:452:
+			printk(KERN_INFO "EEH: MMIO failure (%d) on device:%s %s\n",

WARNING:TYPO_SPELLING: 'buid' may be misspelled - perhaps 'build'?
#120: FILE: arch/ppc64/kernel/pSeries_pci.c:76:
+				addr, buid >> 32, buid & 0xffffffff, size);
 				      ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'buid' may be misspelled - perhaps 'build'?
#120: FILE: arch/ppc64/kernel/pSeries_pci.c:76:
+				addr, buid >> 32, buid & 0xffffffff, size);
 				                  ^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#150: FILE: arch/ppc64/kernel/prom.c:93:
+        prom_printf("kernel BUG at %s line 0x%x!\n",^I^I\$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#150: FILE: arch/ppc64/kernel/prom.c:93:
+        prom_printf("kernel BUG at %s line 0x%x!\n",^I^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#152: FILE: arch/ppc64/kernel/prom.c:95:
+        __asm__ __volatile__(".long " BUG_ILLEGAL_INSTR);^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#152: FILE: arch/ppc64/kernel/prom.c:95:
+        __asm__ __volatile__(".long " BUG_ILLEGAL_INSTR);^I\$

CHECK:SPACING: No space is necessary after a cast
#173: FILE: arch/ppc64/kernel/prom.c:187:
+#define ADDR(x)		(u32) ((unsigned long)(x) - offset)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#173: FILE: arch/ppc64/kernel/prom.c:187:
+#define ADDR(x)		(u32) ((unsigned long)(x) - offset)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#200: FILE: arch/ppc64/kernel/prom.c:209:
+	for (i=0; i < nargs; i++)
 	      ^

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#210: FILE: arch/ppc64/kernel/prom.c:218:
+	return (nret > 0)? _prom->args.rets[0]: 0;
 	                 ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#210: FILE: arch/ppc64/kernel/prom.c:218:
+	return (nret > 0)? _prom->args.rets[0]: 0;
 	                                      ^

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __noreturn over __attribute__((noreturn))
#296: FILE: arch/ppc64/kernel/prom.c:303:
+static void __init __attribute__((noreturn)) prom_panic(const char *reason)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#316: FILE: arch/ppc64/kernel/prom.c:321:
 	if ((node = *nodep) != 0
+	    && (*nodep = call_prom("child", 1, 1, node)) != 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#319: FILE: arch/ppc64/kernel/prom.c:323:
+	if ((*nodep = call_prom("peer", 1, 1, node)) != 0)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#323: FILE: arch/ppc64/kernel/prom.c:326:
+		if ((node = call_prom("parent", 1, 1, node)) == 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#326: FILE: arch/ppc64/kernel/prom.c:328:
+		if ((*nodep = call_prom("peer", 1, 1, node)) != 0)

CHECK:SPACING: No space is necessary after a cast
#337: FILE: arch/ppc64/kernel/prom.c:339:
+			 (u32)(unsigned long) value, (u32) valuelen);

ERROR:SPACING: space required before the open brace '{'
#379: FILE: arch/ppc64/kernel/prom.c:371:
+				if (_systemcfg->platform == PLATFORM_POWERMAC){

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#424: FILE: arch/ppc64/kernel/prom.c:402:
+					prom_getprop(node, "ibm,pft-size",
+						&pft_size, sizeof(pft_size));

WARNING:SPLIT_STRING: quoted string split across lines
#478: FILE: arch/ppc64/kernel/prom.c:457:
+				prom_printf("prom: failed to recognize"
+					    " interrupt-controller\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:CODE_INDENT: code indent should use tabs where possible
#537: FILE: arch/ppc64/kernel/prom.c:499:
+        prom_debug("systemcfg->processorCount       = 0x%x\n",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#537: FILE: arch/ppc64/kernel/prom.c:499:
+        prom_debug("systemcfg->processorCount       = 0x%x\n",$

CHECK:CAMELCASE: Avoid CamelCase: <processorCount>
#538: FILE: arch/ppc64/kernel/prom.c:500:
+		   _systemcfg->processorCount);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

ERROR:CODE_INDENT: code indent should use tabs where possible
#539: FILE: arch/ppc64/kernel/prom.c:501:
+        prom_debug("systemcfg->physicalMemorySize   = 0x%x\n",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#539: FILE: arch/ppc64/kernel/prom.c:501:
+        prom_debug("systemcfg->physicalMemorySize   = 0x%x\n",$

CHECK:CAMELCASE: Avoid CamelCase: <physicalMemorySize>
#540: FILE: arch/ppc64/kernel/prom.c:502:
+		   _systemcfg->physicalMemorySize);

ERROR:CODE_INDENT: code indent should use tabs where possible
#541: FILE: arch/ppc64/kernel/prom.c:503:
+        prom_debug("naca->pftSize                   = 0x%x\n",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#541: FILE: arch/ppc64/kernel/prom.c:503:
+        prom_debug("naca->pftSize                   = 0x%x\n",$

CHECK:CAMELCASE: Avoid CamelCase: <pftSize>
#542: FILE: arch/ppc64/kernel/prom.c:504:
+		   _naca->pftSize);

ERROR:CODE_INDENT: code indent should use tabs where possible
#543: FILE: arch/ppc64/kernel/prom.c:505:
+        prom_debug("systemcfg->dCacheL1LineSize     = 0x%x\n",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#543: FILE: arch/ppc64/kernel/prom.c:505:
+        prom_debug("systemcfg->dCacheL1LineSize     = 0x%x\n",$

CHECK:CAMELCASE: Avoid CamelCase: <dCacheL1LineSize>
#544: FILE: arch/ppc64/kernel/prom.c:506:
+		   _systemcfg->dCacheL1LineSize);

ERROR:CODE_INDENT: code indent should use tabs where possible
#545: FILE: arch/ppc64/kernel/prom.c:507:
+        prom_debug("systemcfg->iCacheL1LineSize     = 0x%x\n",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#545: FILE: arch/ppc64/kernel/prom.c:507:
+        prom_debug("systemcfg->iCacheL1LineSize     = 0x%x\n",$

CHECK:CAMELCASE: Avoid CamelCase: <iCacheL1LineSize>
#546: FILE: arch/ppc64/kernel/prom.c:508:
+		   _systemcfg->iCacheL1LineSize);

ERROR:CODE_INDENT: code indent should use tabs where possible
#547: FILE: arch/ppc64/kernel/prom.c:509:
+        prom_debug("naca->serialPortAddr            = 0x%x\n",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#547: FILE: arch/ppc64/kernel/prom.c:509:
+        prom_debug("naca->serialPortAddr            = 0x%x\n",$

CHECK:CAMELCASE: Avoid CamelCase: <serialPortAddr>
#548: FILE: arch/ppc64/kernel/prom.c:510:
+		   _naca->serialPortAddr);

ERROR:CODE_INDENT: code indent should use tabs where possible
#549: FILE: arch/ppc64/kernel/prom.c:511:
+        prom_debug("naca->interrupt_controller      = 0x%x\n",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#549: FILE: arch/ppc64/kernel/prom.c:511:
+        prom_debug("naca->interrupt_controller      = 0x%x\n",$

ERROR:CODE_INDENT: code indent should use tabs where possible
#551: FILE: arch/ppc64/kernel/prom.c:513:
+        prom_debug("systemcfg->platform             = 0x%x\n",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#551: FILE: arch/ppc64/kernel/prom.c:513:
+        prom_debug("systemcfg->platform             = 0x%x\n",$

ERROR:CODE_INDENT: code indent should use tabs where possible
#588: FILE: arch/ppc64/kernel/prom.c:554:
+        prom_printf("\nprom_dump_lmb:\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#588: FILE: arch/ppc64/kernel/prom.c:554:
+        prom_printf("\nprom_dump_lmb:\n");$

ERROR:CODE_INDENT: code indent should use tabs where possible
#589: FILE: arch/ppc64/kernel/prom.c:555:
+        prom_printf("    memory.cnt                  = 0x%x\n",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#589: FILE: arch/ppc64/kernel/prom.c:555:
+        prom_printf("    memory.cnt                  = 0x%x\n",$

ERROR:CODE_INDENT: code indent should use tabs where possible
#591: FILE: arch/ppc64/kernel/prom.c:557:
+        prom_printf("    memory.size                 = 0x%x\n",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#591: FILE: arch/ppc64/kernel/prom.c:557:
+        prom_printf("    memory.size                 = 0x%x\n",$

ERROR:CODE_INDENT: code indent should use tabs where possible
#605: FILE: arch/ppc64/kernel/prom.c:560:
+                prom_printf("    memory.region[0x%x].base       = 0x%x\n",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#605: FILE: arch/ppc64/kernel/prom.c:560:
+                prom_printf("    memory.region[0x%x].base       = 0x%x\n",$

ERROR:CODE_INDENT: code indent should use tabs where possible
#607: FILE: arch/ppc64/kernel/prom.c:562:
+                prom_printf("                      .physbase = 0x%x\n",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#607: FILE: arch/ppc64/kernel/prom.c:562:
+                prom_printf("                      .physbase = 0x%x\n",$

ERROR:CODE_INDENT: code indent should use tabs where possible
#609: FILE: arch/ppc64/kernel/prom.c:564:
+                prom_printf("                      .size     = 0x%x\n",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#609: FILE: arch/ppc64/kernel/prom.c:564:
+                prom_printf("                      .size     = 0x%x\n",$

ERROR:CODE_INDENT: code indent should use tabs where possible
#620: FILE: arch/ppc64/kernel/prom.c:568:
+        prom_printf("\n    reserved.cnt                  = 0x%x\n",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#620: FILE: arch/ppc64/kernel/prom.c:568:
+        prom_printf("\n    reserved.cnt                  = 0x%x\n",$

ERROR:CODE_INDENT: code indent should use tabs where possible
#622: FILE: arch/ppc64/kernel/prom.c:570:
+        prom_printf("    reserved.size                 = 0x%x\n",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#622: FILE: arch/ppc64/kernel/prom.c:570:
+        prom_printf("    reserved.size                 = 0x%x\n",$

ERROR:CODE_INDENT: code indent should use tabs where possible
#636: FILE: arch/ppc64/kernel/prom.c:573:
+                prom_printf("    reserved.region[0x%x\n].base       = 0x%x\n",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#636: FILE: arch/ppc64/kernel/prom.c:573:
+                prom_printf("    reserved.region[0x%x\n].base       = 0x%x\n",$

ERROR:CODE_INDENT: code indent should use tabs where possible
#638: FILE: arch/ppc64/kernel/prom.c:575:
+                prom_printf("                      .physbase = 0x%x\n",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#638: FILE: arch/ppc64/kernel/prom.c:575:
+                prom_printf("                      .physbase = 0x%x\n",$

ERROR:CODE_INDENT: code indent should use tabs where possible
#640: FILE: arch/ppc64/kernel/prom.c:577:
+                prom_printf("                      .size     = 0x%x\n",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#640: FILE: arch/ppc64/kernel/prom.c:577:
+                prom_printf("                      .size     = 0x%x\n",$

ERROR:CODE_INDENT: code indent should use tabs where possible
#651: FILE: arch/ppc64/kernel/prom.c:604:
+                prom_getprop(node, "device_type", type, sizeof(type));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#651: FILE: arch/ppc64/kernel/prom.c:604:
+                prom_getprop(node, "device_type", type, sizeof(type));$

ERROR:CODE_INDENT: code indent should use tabs where possible
#760: FILE: arch/ppc64/kernel/prom.c:710:
+        ^Iprom_debug("rtas->base                = 0x%x\n", _rtas->base);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#760: FILE: arch/ppc64/kernel/prom.c:710:
+        ^Iprom_debug("rtas->base                = 0x%x\n", _rtas->base);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#760: FILE: arch/ppc64/kernel/prom.c:710:
+        ^Iprom_debug("rtas->base                = 0x%x\n", _rtas->base);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#761: FILE: arch/ppc64/kernel/prom.c:711:
+        ^Iprom_debug("rtas->entry               = 0x%x\n", _rtas->entry);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#761: FILE: arch/ppc64/kernel/prom.c:711:
+        ^Iprom_debug("rtas->entry               = 0x%x\n", _rtas->entry);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#761: FILE: arch/ppc64/kernel/prom.c:711:
+        ^Iprom_debug("rtas->entry               = 0x%x\n", _rtas->entry);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#762: FILE: arch/ppc64/kernel/prom.c:712:
+        ^Iprom_debug("rtas->size                = 0x%x\n", _rtas->size);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#762: FILE: arch/ppc64/kernel/prom.c:712:
+        ^Iprom_debug("rtas->size                = 0x%x\n", _rtas->size);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#762: FILE: arch/ppc64/kernel/prom.c:712:
+        ^Iprom_debug("rtas->size                = 0x%x\n", _rtas->size);$

WARNING:SPLIT_STRING: quoted string split across lines
#797: FILE: arch/ppc64/kernel/prom.c:764:
+			prom_printf("WARNING: PCI host bridge ignored, "
+				    "need to increase MAX_PHB\n");

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#882: FILE: arch/ppc64/kernel/prom.c:855:
+			      path, sizeof(path)-1) == PROM_ERROR) {
 			                        ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#883: FILE: arch/ppc64/kernel/prom.c:856:
+                        prom_printf("package-to-path failed\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#883: FILE: arch/ppc64/kernel/prom.c:856:
+                        prom_printf("package-to-path failed\n");$

ERROR:CODE_INDENT: code indent should use tabs where possible
#887: FILE: arch/ppc64/kernel/prom.c:858:
+                        prom_printf("opening PHB %s", path);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#887: FILE: arch/ppc64/kernel/prom.c:858:
+                        prom_printf("opening PHB %s", path);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#891: FILE: arch/ppc64/kernel/prom.c:861:
+                phb_node = call_prom("open", 1, 1, path);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#891: FILE: arch/ppc64/kernel/prom.c:861:
+                phb_node = call_prom("open", 1, 1, path);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#894: FILE: arch/ppc64/kernel/prom.c:863:
+                        prom_printf("... failed\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#894: FILE: arch/ppc64/kernel/prom.c:863:
+                        prom_printf("... failed\n");$

ERROR:CODE_INDENT: code indent should use tabs where possible
#897: FILE: arch/ppc64/kernel/prom.c:865:
+                        prom_printf("... done\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#897: FILE: arch/ppc64/kernel/prom.c:865:
+                        prom_printf("... done\n");$

ERROR:CODE_INDENT: code indent should use tabs where possible
#907: FILE: arch/ppc64/kernel/prom.c:867:
+                call_prom("call-method", 6, 0, ADDR("set-64-bit-addressing"),$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#907: FILE: arch/ppc64/kernel/prom.c:867:
+                call_prom("call-method", 6, 0, ADDR("set-64-bit-addressing"),$

CHECK:SPACING: No space is necessary after a cast
#909: FILE: arch/ppc64/kernel/prom.c:869:
+			  (u32) base, (u32) (base >> 32));

ERROR:CODE_INDENT: code indent should use tabs where possible
#910: FILE: arch/ppc64/kernel/prom.c:870:
+                call_prom("close", 1, 0, phb_node);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#910: FILE: arch/ppc64/kernel/prom.c:870:
+                call_prom("close", 1, 0, phb_node);$

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1129: FILE: arch/ppc64/kernel/prom.c:1113:
+	if (cpuid > NR_CPUS)

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1130: FILE: arch/ppc64/kernel/prom.c:1114:
+		prom_printf("WARNING: maximum CPUs (" __stringify(NR_CPUS)

ERROR:CODE_INDENT: code indent should use tabs where possible
#1266: FILE: arch/ppc64/kernel/prom.c:1256:
+        if (prom_getprop(_prom->chosen, "stdout", &val, sizeof(val)) <= 0)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1266: FILE: arch/ppc64/kernel/prom.c:1256:
+        if (prom_getprop(_prom->chosen, "stdout", &val, sizeof(val)) <= 0)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1267: FILE: arch/ppc64/kernel/prom.c:1257:
+                prom_panic("cannot find stdout");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1267: FILE: arch/ppc64/kernel/prom.c:1257:
+                prom_panic("cannot find stdout");$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1270: FILE: arch/ppc64/kernel/prom.c:1259:
+        _prom->stdout = val;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1270: FILE: arch/ppc64/kernel/prom.c:1259:
+        _prom->stdout = val;$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1282: FILE: arch/ppc64/kernel/prom.c:1270:
+			   compat, sizeof(compat)-1);
 			                         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1428: FILE: arch/ppc64/kernel/prom.c:1507:
+				      path, sizeof(path)-1) > 0)
 				                        ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1507: FILE: arch/ppc64/kernel/prom.c:1595:
+  ^Iprom_debug("birec_verify: r6=0x%x\n", (unsigned long)bi_recs);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1507: FILE: arch/ppc64/kernel/prom.c:1595:
+  ^Iprom_debug("birec_verify: r6=0x%x\n", (unsigned long)bi_recs);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1507: FILE: arch/ppc64/kernel/prom.c:1595:
+  ^Iprom_debug("birec_verify: r6=0x%x\n", (unsigned long)bi_recs);$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "bi_recs"
#1508: FILE: arch/ppc64/kernel/prom.c:1596:
+	if (bi_recs != NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:CODE_INDENT: code indent should use tabs where possible
#1526: FILE: arch/ppc64/kernel/prom.c:1604:
+  ^Iprom_debug("  last=0x%x\n", (unsigned long)last);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1526: FILE: arch/ppc64/kernel/prom.c:1604:
+  ^Iprom_debug("  last=0x%x\n", (unsigned long)last);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1526: FILE: arch/ppc64/kernel/prom.c:1604:
+  ^Iprom_debug("  last=0x%x\n", (unsigned long)last);$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "last"
#1527: FILE: arch/ppc64/kernel/prom.c:1605:
+	if (last != NULL)

ERROR:CODE_INDENT: code indent should use tabs where possible
#1539: FILE: arch/ppc64/kernel/prom.c:1612:
+  ^Iprom_debug("  first=0x%x\n", (unsigned long)first);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1539: FILE: arch/ppc64/kernel/prom.c:1612:
+  ^Iprom_debug("  first=0x%x\n", (unsigned long)first);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1539: FILE: arch/ppc64/kernel/prom.c:1612:
+  ^Iprom_debug("  first=0x%x\n", (unsigned long)first);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1571: FILE: arch/ppc64/kernel/prom.c:1684:
+  ^Iprom_debug("klimit=0x%x\n", RELOC(klimit));$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1571: FILE: arch/ppc64/kernel/prom.c:1684:
+  ^Iprom_debug("klimit=0x%x\n", RELOC(klimit));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1571: FILE: arch/ppc64/kernel/prom.c:1684:
+  ^Iprom_debug("klimit=0x%x\n", RELOC(klimit));$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1572: FILE: arch/ppc64/kernel/prom.c:1685:
+  ^Iprom_debug("offset=0x%x\n", offset);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1572: FILE: arch/ppc64/kernel/prom.c:1685:
+  ^Iprom_debug("offset=0x%x\n", offset);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1572: FILE: arch/ppc64/kernel/prom.c:1685:
+  ^Iprom_debug("offset=0x%x\n", offset);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1573: FILE: arch/ppc64/kernel/prom.c:1686:
+  ^Iprom_debug("->mem=0x%x\n", RELOC(klimit) - offset);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1573: FILE: arch/ppc64/kernel/prom.c:1686:
+  ^Iprom_debug("->mem=0x%x\n", RELOC(klimit) - offset);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1573: FILE: arch/ppc64/kernel/prom.c:1686:
+  ^Iprom_debug("->mem=0x%x\n", RELOC(klimit) - offset);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1622: FILE: arch/ppc64/kernel/prom.c:1731:
+        if (prom_getprop(_prom->chosen, "cpu",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1622: FILE: arch/ppc64/kernel/prom.c:1731:
+        if (prom_getprop(_prom->chosen, "cpu",$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1624: FILE: arch/ppc64/kernel/prom.c:1733:
+                prom_panic("cannot find boot cpu");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1624: FILE: arch/ppc64/kernel/prom.c:1733:
+                prom_panic("cannot find boot cpu");$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1638: FILE: arch/ppc64/kernel/prom.c:1742:
+  ^Iprom_debug("Booting CPU hw index = 0x%x\n", _prom->cpu);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1638: FILE: arch/ppc64/kernel/prom.c:1742:
+  ^Iprom_debug("Booting CPU hw index = 0x%x\n", _prom->cpu);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1638: FILE: arch/ppc64/kernel/prom.c:1742:
+  ^Iprom_debug("Booting CPU hw index = 0x%x\n", _prom->cpu);$

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1644: FILE: arch/ppc64/kernel/prom.c:1746:
+	l = prom_getprop(_prom->chosen, "bootpath", p, 1<<20);
 	                                                ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1652: FILE: arch/ppc64/kernel/prom.c:1753:
+		call_prom("canon", 3, 1, p, d, 1<<20);
 		                                ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1673: FILE: arch/ppc64/kernel/prom.c:1787:
+  ^Iprom_debug("after basic inits, mem=0x%x\n", mem);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1673: FILE: arch/ppc64/kernel/prom.c:1787:
+  ^Iprom_debug("after basic inits, mem=0x%x\n", mem);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1673: FILE: arch/ppc64/kernel/prom.c:1787:
+  ^Iprom_debug("after basic inits, mem=0x%x\n", mem);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1702: FILE: arch/ppc64/kernel/prom.c:1799:
+  ^Iprom_debug("klimit=0x%x\n", RELOC(klimit));$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1702: FILE: arch/ppc64/kernel/prom.c:1799:
+  ^Iprom_debug("klimit=0x%x\n", RELOC(klimit));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1702: FILE: arch/ppc64/kernel/prom.c:1799:
+  ^Iprom_debug("klimit=0x%x\n", RELOC(klimit));$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1768: FILE: arch/ppc64/kernel/rtas-proc.c:465:
+^I^I^Ierror =^Irtas_call(get_sensor_state, 2, 2, &state, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1769: FILE: arch/ppc64/kernel/rtas-proc.c:466:
+			error =	rtas_call(get_sensor_state, 2, 2, &state, 
 				  	  sensors.sensor[i].token, 

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#1813: FILE: arch/ppc64/kernel/rtas.c:192:
+	ret = (nret > 0)? rtas_args->rets[0]: 0;
 	                ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1813: FILE: arch/ppc64/kernel/rtas.c:192:
+	ret = (nret > 0)? rtas_args->rets[0]: 0;
 	                                    ^

CHECK:BRACES: Unbalanced braces around else statement
#1861: FILE: arch/ppc64/kernel/rtas.c:255:
+		} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#1889: FILE: arch/ppc64/kernel/rtas.c:278:
+		} else

ERROR:CODE_INDENT: code indent should use tabs where possible
#1911: FILE: arch/ppc64/kernel/rtas.c:394:
+        printk("RTAS system-reboot returned %d\n",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1911: FILE: arch/ppc64/kernel/rtas.c:394:
+        printk("RTAS system-reboot returned %d\n",$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1911: FILE: arch/ppc64/kernel/rtas.c:394:
+        printk("RTAS system-reboot returned %d\n",

ERROR:CODE_INDENT: code indent should use tabs where possible
#1921: FILE: arch/ppc64/kernel/rtas.c:405:
+        printk("RTAS power-off returned %d\n",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1921: FILE: arch/ppc64/kernel/rtas.c:405:
+        printk("RTAS power-off returned %d\n",$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1921: FILE: arch/ppc64/kernel/rtas.c:405:
+        printk("RTAS power-off returned %d\n",

ERROR:CODE_INDENT: code indent should use tabs where possible
#1922: FILE: arch/ppc64/kernel/rtas.c:406:
+               rtas_call(rtas_token("power-off"), 2, 1, NULL, -1, -1));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1922: FILE: arch/ppc64/kernel/rtas.c:406:
+               rtas_call(rtas_token("power-off"), 2, 1, NULL, -1, -1));$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#1940: FILE: arch/ppc64/kernel/rtas.c:434:
+			printk(KERN_EMERG "ibm,os-term call failed %d\n",

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1953: FILE: arch/ppc64/kernel/rtas_flash.c:347:
+^I^Irc = rtas_call(rtas_token("ibm,manage-flash-image"), 1, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1972: FILE: arch/ppc64/kernel/rtas_flash.c:439:
+^I^Irc = rtas_call(token, 2, 2, &update_results, $

CHECK:SPACING: No space is necessary after a cast
#1973: FILE: arch/ppc64/kernel/rtas_flash.c:440:
+			       (u32) __pa(rtas_data_buf), args_buf->buf_size);

ERROR:CODE_INDENT: code indent should use tabs where possible
#2010: FILE: arch/ppc64/kernel/rtc.c:384:
+        int ret[8];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2010: FILE: arch/ppc64/kernel/rtc.c:384:
+        int ret[8];$

CHECK:SPACING: No space is necessary after a cast
#2038: FILE: arch/ppc64/kernel/scanlog.c:84:
+				   (u32) __pa(rtas_data_buf), (u32) count);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2118: FILE: arch/ppc64/kernel/traps.c:177:
+		printk("FWNMI: nmi-interlock failed: %d\n", ret);

WARNING:SPLIT_STRING: quoted string split across lines
#2139: FILE: arch/ppc64/kernel/xics.c:291:
 		printk(KERN_ERR "xics_enable_irq: irq=%x: ibm_set_xive "
+		       "returned %x\n", irq, call_status);

WARNING:SPLIT_STRING: quoted string split across lines
#2148: FILE: arch/ppc64/kernel/xics.c:299:
 		printk(KERN_ERR "xics_enable_irq: irq=%x: ibm_int_on "
+		       "returned %x\n", irq, call_status);

WARNING:SPLIT_STRING: quoted string split across lines
#2165: FILE: arch/ppc64/kernel/xics.c:315:
 		printk(KERN_ERR "xics_disable_real_irq: irq=%x: "
+		       "ibm_int_off returned %x\n", irq, call_status);

WARNING:SPLIT_STRING: quoted string split across lines
#2174: FILE: arch/ppc64/kernel/xics.c:324:
 		printk(KERN_ERR "xics_disable_irq: irq=%x: ibm_set_xive(0xff)"
+		       " returned %x\n", irq, call_status);

WARNING:SPLIT_STRING: quoted string split across lines
#2199: FILE: arch/ppc64/kernel/xics.c:630:
 		printk(KERN_ERR "xics_set_affinity: irq=%d ibm,get-xive "
+		       "returns %d\n", irq, status);

WARNING:SPLIT_STRING: quoted string split across lines
#2208: FILE: arch/ppc64/kernel/xics.c:649:
 		printk(KERN_ERR "xics_set_affinity irq=%d ibm,set-xive "
+		       "returns %d\n", irq, status);

WARNING:SPLIT_STRING: quoted string split across lines
#2245: FILE: arch/ppc64/kernel/xics.c:700:
 			printk(KERN_ERR "migrate_irqs_away: irq=%d "
+					"ibm,get-xive returns %d\n",

WARNING:SPLIT_STRING: quoted string split across lines
#2254: FILE: arch/ppc64/kernel/xics.c:723:
 			printk(KERN_ERR "migrate_irqs_away irq=%d "
+					"ibm,set-xive returns %d\n",

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2287: FILE: include/asm-ppc64/rtas.h:171:
+extern int rtas_call(int token, int, int, int *, ...);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#2287: FILE: include/asm-ppc64/rtas.h:171:
+extern int rtas_call(int token, int, int, int *, ...);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#2287: FILE: include/asm-ppc64/rtas.h:171:
+extern int rtas_call(int token, int, int, int *, ...);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int *' should also have an identifier name
#2287: FILE: include/asm-ppc64/rtas.h:171:
+extern int rtas_call(int token, int, int, int *, ...);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000272463.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 63 errors, 85 warnings, 24 checks, 2083 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000272463.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
