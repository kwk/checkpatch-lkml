WARNING:REPEATED_WORD: Possible repeated word: 'waiter'
#58: 
      waiter waiter to unblock, and reorder loop to protect against the

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#101: FILE: include/linux/fs.h:408:
+	spinlock_t		i_flock_lock;

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#221: FILE: fs/locks.c:377:
+static struct file_lock *lease_alloc_ilf(struct file *filp, int type)
                                                       ^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "fl"
#229: FILE: fs/locks.c:380:
+	if (fl != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#238: FILE: fs/locks.c:384:
+		fl->fl_file = filp;
 		              ^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#283: FILE: fs/locks.c:439:
+static void locks_insert_block_ilr(struct file_lock *blocker, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#284: FILE: fs/locks.c:440:
+static void locks_insert_block_ilr(struct file_lock *blocker, 
 			       struct file_lock *waiter)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#288: FILE: fs/locks.c:443:
+		printk(KERN_ERR "locks_insert_block_ilr: removing duplicated lock "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'locks_insert_block_ilr', this function's name, in a string
#288: FILE: fs/locks.c:443:
+		printk(KERN_ERR "locks_insert_block_ilr: removing duplicated lock "

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#309: FILE: fs/locks.c:462:
+static void locks_wake_up_blocks_ilr(struct file_lock *blocker, struct inode *inode, unsigned int wait)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:TRAILING_WHITESPACE: trailing whitespace
#324: FILE: fs/locks.c:475:
+^I^Iif (waiter->fl_notify) $

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#369: FILE: fs/locks.c:522:
+static void locks_delete_lock_ilr(struct file_lock **thisfl_p, struct inode *inode, unsigned int wait)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#385: FILE: fs/locks.c:536:
+		printk(KERN_ERR "locks_delete_lock_ilr: fasync == %p\n", fl->fl_fasync);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'locks_delete_lock_ilr', this function's name, in a string
#385: FILE: fs/locks.c:536:
+		printk(KERN_ERR "locks_delete_lock_ilr: fasync == %p\n", fl->fl_fasync);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#409: FILE: fs/locks.c:557:
+	int (*lock)(struct file *, int, struct file_lock *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#409: FILE: fs/locks.c:557:
+	int (*lock)(struct file *, int, struct file_lock *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file_lock *' should also have an identifier name
#409: FILE: fs/locks.c:557:
+	int (*lock)(struct file *, int, struct file_lock *);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#411: FILE: fs/locks.c:559:
+	if ((lock = fl->fl_file->f_op->lock) != NULL) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#434: FILE: fs/locks.c:581:
+		printk(KERN_ERR "locks_conflict_ilr(): impossible lock type - %d\n",

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#457: FILE: fs/locks.c:606:
+	return (locks_conflict_ilr(caller_fl, sys_fl));

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#480: FILE: fs/locks.c:630:
+static int interruptible_sleep_on_locked_ilr(wait_queue_head_t *fl_wait, int timeout, struct inode *inode)

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#506: FILE: fs/locks.c:652:
+static int locks_block_on_ilr(struct file_lock *blocker, struct file_lock *waiter, struct inode *inode)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#521: FILE: fs/locks.c:663:
+static int locks_block_on_timeout_ilr(struct file_lock *blocker, struct file_lock *waiter,
+					struct inode *inode, int time)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!new_fl"
#781: FILE: fs/locks.c:1126:
+	if (new_fl == NULL) {

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#853: FILE: fs/locks.c:1240:
+static int lease_modify_ilr(struct file_lock **before, int arg, int fd, struct file *filp)
                                                                                      ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#888: FILE: fs/locks.c:1298:
+	new_fl = lease_alloc_ilf(filp, arg);
 	                         ^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!new_fl"
#889: FILE: fs/locks.c:1299:
+	if (new_fl == NULL) {

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#903: FILE: fs/locks.c:1325:
+		error = lease_modify_ilr(my_before, arg, fd, filp);
 		                                             ^^^^

WARNING:LONG_LINE_COMMENT: line length of 107 exceeds 100 columns
#961: FILE: fs/locks.c:1744:
+			locks_unlock_delete_ilr(before, inode);		/* This opens the inode spinlock */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#1145: FILE: Documentation/filesystems/Locking:235:
To unsubscribe from this list: send the line "unsubscribe linux-kernel" in

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000568255.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 5 errors, 19 warnings, 6 checks, 973 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000568255.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
