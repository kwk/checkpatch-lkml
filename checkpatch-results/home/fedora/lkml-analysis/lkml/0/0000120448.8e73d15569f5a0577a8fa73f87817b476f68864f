WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#33: 
- for cpu running time, use tsk->sched_info.cpu_time (collected by schedstats)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#60: FILE: fs/proc/array.c:493:
+int proc_pid_delay(struct task_struct *task, char * buffer)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited before semicolon
#66: FILE: fs/proc/array.c:499:
+	run_count = task->sched_info.pcnt ;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#67: FILE: fs/proc/array.c:500:
+	run_time = jiffies_to_usecs(task->sched_info.cpu_time)*1000;
 	                                                      ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#68: FILE: fs/proc/array.c:501:
+	run_delay = jiffies_to_usecs(task->sched_info.run_delay)*1000;
 	                                                        ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#72: FILE: fs/proc/array.c:505:
+	run_time = run_delay = 1;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:SPACING: space required after that ',' (ctx:VxV)
#74: FILE: fs/proc/array.c:507:
+	return sprintf(buffer,"%lu %llu %llu %u %llu %u %llu\n",
 	                     ^

CHECK:SPACING: No space is necessary after a cast
#75: FILE: fs/proc/array.c:508:
+		       run_count, (uint64_t) run_time, (uint64_t) run_delay,

CHECK:SPACING: No space is necessary after a cast
#76: FILE: fs/proc/array.c:509:
+		       (unsigned int) task->delays.blkio_count,

CHECK:SPACING: No space is necessary after a cast
#77: FILE: fs/proc/array.c:510:
+		       (uint64_t) task->delays.blkio_delay,

CHECK:SPACING: No space is necessary after a cast
#78: FILE: fs/proc/array.c:511:
+		       (unsigned int) task->delays.swapin_count,

CHECK:SPACING: No space is necessary after a cast
#79: FILE: fs/proc/array.c:512:
+		       (uint64_t) task->delays.swapin_delay);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#87: FILE: fs/proc/array.c:520:
+int proc_tgid_delay(struct task_struct *task, char * buffer)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#89: FILE: fs/proc/array.c:522:
+	uint64_t run_time = 0, run_delay = 0, run_count = 0;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#90: FILE: fs/proc/array.c:523:
+	uint64_t blkio_delay = 0, blkio_count = 0;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#91: FILE: fs/proc/array.c:524:
+	uint64_t swapin_delay = 0, swapin_count = 0, tmp;

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#98: FILE: fs/proc/array.c:531:
+		tmp = run_time + jiffies_to_usecs(t->sched_info.cpu_time)*1000;
 		                                                         ^

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#99: FILE: fs/proc/array.c:532:
+		run_time = (tmp < run_time)? 0:tmp ;
 		                           ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#99: FILE: fs/proc/array.c:532:
+		run_time = (tmp < run_time)? 0:tmp ;
 		                              ^

WARNING:SPACING: space prohibited before semicolon
#99: FILE: fs/proc/array.c:532:
+		run_time = (tmp < run_time)? 0:tmp ;

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#100: FILE: fs/proc/array.c:533:
+		tmp = run_delay + jiffies_to_usecs(t->sched_info.run_delay)*1000;
 		                                                           ^

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#101: FILE: fs/proc/array.c:534:
+		run_delay = (tmp < run_delay)? 0:tmp;
 		                             ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#101: FILE: fs/proc/array.c:534:
+		run_delay = (tmp < run_delay)? 0:tmp;
 		                                ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#105: FILE: fs/proc/array.c:538:
+		run_time = run_delay = 1;

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#109: FILE: fs/proc/array.c:542:
+		blkio_delay = (tmp < blkio_delay)? 0:tmp ;
 		                                 ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#109: FILE: fs/proc/array.c:542:
+		blkio_delay = (tmp < blkio_delay)? 0:tmp ;
 		                                    ^

WARNING:SPACING: space prohibited before semicolon
#109: FILE: fs/proc/array.c:542:
+		blkio_delay = (tmp < blkio_delay)? 0:tmp ;

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#111: FILE: fs/proc/array.c:544:
+		swapin_delay = (tmp < swapin_delay)? 0:tmp ;
 		                                   ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#111: FILE: fs/proc/array.c:544:
+		swapin_delay = (tmp < swapin_delay)? 0:tmp ;
 		                                      ^

WARNING:SPACING: space prohibited before semicolon
#111: FILE: fs/proc/array.c:544:
+		swapin_delay = (tmp < swapin_delay)? 0:tmp ;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#119: FILE: fs/proc/array.c:552:
+	return sprintf(buffer,"%llu %llu %llu %llu %llu %llu %llu\n",
 	                     ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#136: FILE: fs/proc/base.c:169:
+        PROC_TID_DELAY_ACCT,$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#136: FILE: fs/proc/base.c:169:
+        PROC_TID_DELAY_ACCT,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#137: FILE: fs/proc/base.c:170:
+        PROC_TGID_DELAY_ACCT,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#137: FILE: fs/proc/base.c:170:
+        PROC_TGID_DELAY_ACCT,$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#147: FILE: fs/proc/base.c:227:
+	E(PROC_TGID_DELAY_ACCT,"delay",   S_IFREG|S_IRUGO),
 	                      ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#147: FILE: fs/proc/base.c:227:
+	E(PROC_TGID_DELAY_ACCT,"delay",   S_IFREG|S_IRUGO),
 	                                         ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#147: FILE: fs/proc/base.c:227:
+	E(PROC_TGID_DELAY_ACCT,"delay",   S_IFREG|S_IRUGO),

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

ERROR:SPACING: space required after that ',' (ctx:VxV)
#157: FILE: fs/proc/base.c:272:
+	E(PROC_TID_DELAY_ACCT,"delay",   S_IFREG|S_IRUGO),
 	                     ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#157: FILE: fs/proc/base.c:272:
+	E(PROC_TID_DELAY_ACCT,"delay",   S_IFREG|S_IRUGO),
 	                                        ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#157: FILE: fs/proc/base.c:272:
+	E(PROC_TID_DELAY_ACCT,"delay",   S_IFREG|S_IRUGO),

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#187: FILE: fs/proc/internal.h:39:
+extern int proc_pid_delay(struct task_struct *, char*);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#187: FILE: fs/proc/internal.h:39:
+extern int proc_pid_delay(struct task_struct *, char*);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char*' should also have an identifier name
#187: FILE: fs/proc/internal.h:39:
+extern int proc_pid_delay(struct task_struct *, char*);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#188: FILE: fs/proc/internal.h:40:
+extern int proc_tgid_delay(struct task_struct *, char*);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#188: FILE: fs/proc/internal.h:40:
+extern int proc_tgid_delay(struct task_struct *, char*);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char*' should also have an identifier name
#188: FILE: fs/proc/internal.h:40:
+extern int proc_tgid_delay(struct task_struct *, char*);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000120448.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 12 errors, 13 warnings, 22 checks, 124 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000120448.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
