WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#29: 
nf_bridge_info. There is still a need to change ip_output.c, but the change 

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#53: FILE: include/linux/netfilter.h:121:
+ nf_hook_slow((pf), (hook), (skb), (indev), (outdev), (okfn), INT_MIN)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#60: FILE: include/linux/netfilter.h:127:
+ : nf_hook_slow((pf), (hook), (skb), (indev), (outdev), (okfn), INT_MIN))$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pf' - possible side-effects?
#61: FILE: include/linux/netfilter.h:128:
+#define NF_HOOK_THRESH(pf, hook, skb, indev, outdev, okfn, thresh)	\
+(list_empty(&nf_hooks[(pf)][(hook)])					\
+ ? (okfn)(skb)								\
+ : nf_hook_slow((pf), (hook), (skb), (indev), (outdev), (okfn), (thresh)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'hook' - possible side-effects?
#61: FILE: include/linux/netfilter.h:128:
+#define NF_HOOK_THRESH(pf, hook, skb, indev, outdev, okfn, thresh)	\
+(list_empty(&nf_hooks[(pf)][(hook)])					\
+ ? (okfn)(skb)								\
+ : nf_hook_slow((pf), (hook), (skb), (indev), (outdev), (okfn), (thresh)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'skb' - possible side-effects?
#61: FILE: include/linux/netfilter.h:128:
+#define NF_HOOK_THRESH(pf, hook, skb, indev, outdev, okfn, thresh)	\
+(list_empty(&nf_hooks[(pf)][(hook)])					\
+ ? (okfn)(skb)								\
+ : nf_hook_slow((pf), (hook), (skb), (indev), (outdev), (okfn), (thresh)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'okfn' - possible side-effects?
#61: FILE: include/linux/netfilter.h:128:
+#define NF_HOOK_THRESH(pf, hook, skb, indev, outdev, okfn, thresh)	\
+(list_empty(&nf_hooks[(pf)][(hook)])					\
+ ? (okfn)(skb)								\
+ : nf_hook_slow((pf), (hook), (skb), (indev), (outdev), (okfn), (thresh)))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#63: FILE: include/linux/netfilter.h:130:
+ ? (okfn)(skb)^I^I^I^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#64: FILE: include/linux/netfilter.h:131:
+ : nf_hook_slow((pf), (hook), (skb), (indev), (outdev), (okfn), (thresh)))$

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#94: FILE: include/linux/netfilter_bridge.h:9:
+#include <asm/atomic.h>

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around skb->nf_bridge
#122: FILE: include/linux/netfilter_bridge.h:44:
+	struct nf_bridge_info **nf_bridge = &(skb->nf_bridge);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#124: FILE: include/linux/netfilter_bridge.h:46:
+	if ((*nf_bridge = kmalloc(sizeof(**nf_bridge), GFP_ATOMIC)) != NULL) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#184: FILE: include/linux/skbuff.h:1165:
+}
+static inline void nf_bridge_get(struct nf_bridge_info *nf_bridge)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#278: FILE: net/bridge/br_private.h:147:
+extern int br_dev_queue_push_xmit(struct sk_buff *skb);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#281: FILE: net/bridge/br_private.h:150:
+extern int br_forward_finish(struct sk_buff *skb);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#289: FILE: net/bridge/br_private.h:171:
+extern int br_handle_frame_finish(struct sk_buff *skb);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#299: FILE: net/bridge/br_private.h:184:
+extern int br_netfilter_init(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#300: FILE: net/bridge/br_private.h:185:
+extern void br_netfilter_fini(void);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#352: FILE: net/core/netfilter.c:447:
+		if (physindev) dev_hold(physindev);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#354: FILE: net/core/netfilter.c:449:
+		if (physoutdev) dev_hold(physoutdev);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#362: FILE: net/core/netfilter.c:457:
+		if (physindev) dev_put(physindev);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#363: FILE: net/core/netfilter.c:458:
+		if (physoutdev) dev_put(physoutdev);

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#472: FILE: net/ipv4/netfilter/ip_tables.c:161:
+	for (i = 0, ret2 = 0; i < IFNAMSIZ/sizeof(unsigned long); i++) {
 	                                  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#487: FILE: net/ipv4/netfilter/ip_tables.c:180:
+	for (i = 0, ret2 = 0; i < IFNAMSIZ/sizeof(unsigned long); i++) {
 	                                  ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#528: FILE: net/ipv4/netfilter/ip_tables.c:340:
+		if (ip_packet_match(ip, indev, physindev, outdev, physoutdev,
+		    &e->ip, offset)) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#542: FILE: net/ipv4/netfilter/ipt_LOG.c:288:
+	printk("%sIN=%s ", loginfo->prefix, in ? in->name : "");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#548: FILE: net/ipv4/netfilter/ipt_LOG.c:294:
+			printk("PHYSIN=%s ", physindev->name);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#549: FILE: net/ipv4/netfilter/ipt_LOG.c:295:
+		printk("OUT=%s ", out ? out->name : "");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#551: FILE: net/ipv4/netfilter/ipt_LOG.c:297:
+			printk("PHYSOUT=%s ", physoutdev->name);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#560: FILE: net/bridge/br_netfilter.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#568: FILE: net/bridge/br_netfilter.c:9:
+ *^I$Id: bridge-nf-0.0.10-dev-pre2-against-2.5.42.diff,v 1.1 2002/10/19 $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CVS_KEYWORD: CVS style keyword markers, these will _not_ be updated
#568: FILE: net/bridge/br_netfilter.c:9:
+ *	$Id: bridge-nf-0.0.10-dev-pre2-against-2.5.42.diff,v 1.1 2002/10/19 

Since linux moved to git, the CVS markers are no longer used.
So, CVS style keywords ($Id$, $Revision$, $Log$) should not be
added.

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#569: FILE: net/bridge/br_netfilter.c:9:
10:46:51 bdschuym Exp $

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#589: FILE: net/bridge/br_netfilter.c:29:
+#include <asm/uaccess.h>

CHECK:LINE_SPACING: Please don't use multiple blank lines
#593: FILE: net/bridge/br_netfilter.c:33:
+
+

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'skb' may be better as '(skb)' to avoid precedence issues
#594: FILE: net/bridge/br_netfilter.c:34:
+#define skb_origaddr(skb)	 (((struct bridge_skb_cb *) \
+				 (skb->cb))->daddr.ipv4)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'skb' - possible side-effects?
#596: FILE: net/bridge/br_netfilter.c:36:
+#define store_orig_dstaddr(skb)	 (skb_origaddr(skb) = (skb)->nh.iph->daddr)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'skb' - possible side-effects?
#597: FILE: net/bridge/br_netfilter.c:37:
+#define dnat_took_place(skb)	 (skb_origaddr(skb) != (skb)->nh.iph->daddr)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "br_port"
#601: FILE: net/bridge/br_netfilter.c:41:
+#define has_bridge_parent(device)	((device)->br_port != NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:INDENTED_LABEL: labels should not be indented
#614: FILE: net/bridge/br_netfilter.c:54:
+	hard_header_len:	ETH_HLEN

WARNING:INDENTED_LABEL: labels should not be indented
#618: FILE: net/bridge/br_netfilter.c:58:
+	u: {

WARNING:INDENTED_LABEL: labels should not be indented
#619: FILE: net/bridge/br_netfilter.c:59:
+		dst: {

WARNING:INDENTED_LABEL: labels should not be indented
#620: FILE: net/bridge/br_netfilter.c:60:
+			__refcnt:		ATOMIC_INIT(1),

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#621: FILE: net/bridge/br_netfilter.c:61:
+			dev:			&__fake_net_device,
 			   ^

WARNING:INDENTED_LABEL: labels should not be indented
#621: FILE: net/bridge/br_netfilter.c:61:
+			dev:			&__fake_net_device,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#622: FILE: net/bridge/br_netfilter.c:62:
+			pmtu:			1500
 			    ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#626: FILE: net/bridge/br_netfilter.c:66:
+	rt_flags:	0
 	        ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#629: FILE: net/bridge/br_netfilter.c:69:
+
+

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#633: FILE: net/bridge/br_netfilter.c:73:
+	static unsigned long last_complaint = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#636: FILE: net/bridge/br_netfilter.c:76:
+		printk(KERN_WARNING "Performing cross-bridge DNAT requires IP "

WARNING:SPLIT_STRING: quoted string split across lines
#637: FILE: net/bridge/br_netfilter.c:77:
+		printk(KERN_WARNING "Performing cross-bridge DNAT requires IP "
+			"forwarding to be enabled\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#642: FILE: net/bridge/br_netfilter.c:82:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#721: FILE: net/bridge/br_netfilter.c:161:
+		if (ip_route_input(skb, iph->daddr, iph->saddr, iph->tos,
+		    dev)) {

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#737: FILE: net/bridge/br_netfilter.c:177:
+			return 0;
+		} else {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#774: FILE: net/bridge/br_netfilter.c:214:
+static unsigned int br_nf_pre_routing(unsigned int hook, struct sk_buff $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#776: FILE: net/bridge/br_netfilter.c:215:
+   const struct net_device *in, const struct net_device *out,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#777: FILE: net/bridge/br_netfilter.c:216:
+   int (*okfn)(struct sk_buff *))$

WARNING:CONSTANT_CONVERSION: __constant_htons should be htons
#784: FILE: net/bridge/br_netfilter.c:223:
+	if ((*pskb)->protocol != __constant_htons(ETH_P_IP))

Use of __constant_<foo> form is discouraged for the following functions::

  __constant_cpu_to_be[x]
  __constant_cpu_to_le[x]
  __constant_be[x]_to_cpu
  __constant_le[x]_to_cpu
  __constant_htons
  __constant_ntohs

Using any of these outside of include/uapi/ is not preferred as using the
function without __constant_ is identical when the argument is a
constant.

In big endian systems, the macros like __constant_cpu_to_be32(x) and
cpu_to_be32(x) expand to the same expression::

  #define __constant_cpu_to_be32(x) ((__force __be32)(__u32)(x))
  #define __cpu_to_be32(x)          ((__force __be32)(__u32)(x))

In little endian systems, the macros __constant_cpu_to_be32(x) and
cpu_to_be32(x) expand to __constant_swab32 and __swab32.  __swab32
has a __builtin_constant_p check::

  #define __swab32(x)				\
    (__builtin_constant_p((__u32)(x)) ?	\
    ___constant_swab32(x) :			\
    __fswab32(x))

So ultimately they have a special case for constants.
Similar is the case with all of the macros in the list.  Thus
using the __constant_... forms are unnecessarily verbose and
not preferred outside of include/uapi.

See: https://lore.kernel.org/lkml/1400106425.12666.6.camel@joe-AO725/

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#787: FILE: net/bridge/br_netfilter.c:226:
+	if ((skb = skb_share_check(*pskb, GFP_ATOMIC)) == NULL)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#797: FILE: net/bridge/br_netfilter.c:236:
+	if (!pskb_may_pull(skb, 4*iph->ihl))
 	                         ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#805: FILE: net/bridge/br_netfilter.c:244:
+	if (skb->len < len || len < 4*iph->ihl)
 	                             ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#817: FILE: net/bridge/br_netfilter.c:256:
+ ^Iif ((nf_bridge = nf_bridge_alloc(skb)) == NULL)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#817: FILE: net/bridge/br_netfilter.c:256:
+ ^Iif ((nf_bridge = nf_bridge_alloc(skb)) == NULL)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#817: FILE: net/bridge/br_netfilter.c:256:
+ ^Iif ((nf_bridge = nf_bridge_alloc(skb)) == NULL)$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#817: FILE: net/bridge/br_netfilter.c:256:
+ 	if ((nf_bridge = nf_bridge_alloc(skb)) == NULL)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#840: FILE: net/bridge/br_netfilter.c:279:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#850: FILE: net/bridge/br_netfilter.c:289:
+static unsigned int br_nf_local_in(unsigned int hook, struct sk_buff **pskb,
+   const struct net_device *in, const struct net_device *out,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#850: FILE: net/bridge/br_netfilter.c:289:
+   const struct net_device *in, const struct net_device *out,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#851: FILE: net/bridge/br_netfilter.c:290:
+   int (*okfn)(struct sk_buff *))$

WARNING:CONSTANT_CONVERSION: __constant_htons should be htons
#855: FILE: net/bridge/br_netfilter.c:294:
+	if (skb->protocol != __constant_htons(ETH_P_IP))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#866: FILE: net/bridge/br_netfilter.c:305:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#882: FILE: net/bridge/br_netfilter.c:321:
+	NF_HOOK_THRESH(PF_BRIDGE, NF_BR_FORWARD, skb, nf_bridge->physindev,
+			skb->dev, br_forward_finish, 1);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#896: FILE: net/bridge/br_netfilter.c:335:
+static unsigned int br_nf_forward(unsigned int hook, struct sk_buff **pskb,
+   const struct net_device *in, const struct net_device *out,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#896: FILE: net/bridge/br_netfilter.c:335:
+   const struct net_device *in, const struct net_device *out,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#897: FILE: net/bridge/br_netfilter.c:336:
+   int (*okfn)(struct sk_buff *))$

WARNING:CONSTANT_CONVERSION: __constant_htons should be htons
#902: FILE: net/bridge/br_netfilter.c:341:
+	if (skb->protocol != __constant_htons(ETH_P_IP))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#918: FILE: net/bridge/br_netfilter.c:357:
+	NF_HOOK(PF_INET, NF_IP_FORWARD, skb, bridge_parent(nf_bridge->physindev),
+			bridge_parent(skb->dev), br_nf_forward_finish);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#923: FILE: net/bridge/br_netfilter.c:362:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#932: FILE: net/bridge/br_netfilter.c:371:
+	NF_HOOK_THRESH(PF_BRIDGE, NF_BR_LOCAL_OUT, skb, NULL, skb->dev,
+			br_forward_finish, NF_BR_PRI_FIRST + 1);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#937: FILE: net/bridge/br_netfilter.c:376:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#952: FILE: net/bridge/br_netfilter.c:391:
+ * Otherwise, if nf_bridge->physindev is NULL, the bridge-nf code never $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#956: FILE: net/bridge/br_netfilter.c:394:
+ * Finally, if nf_bridge->physindev isn't NULL, then the packet was IP $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#964: FILE: net/bridge/br_netfilter.c:401:
+static unsigned int br_nf_local_out(unsigned int hook, struct sk_buff **pskb,
+   const struct net_device *in, const struct net_device *out,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#964: FILE: net/bridge/br_netfilter.c:401:
+   const struct net_device *in, const struct net_device *out,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#965: FILE: net/bridge/br_netfilter.c:402:
+   int (*_okfn)(struct sk_buff *))$

WARNING:CONSTANT_CONVERSION: __constant_htons should be htons
#972: FILE: net/bridge/br_netfilter.c:409:
+	if (skb->protocol != __constant_htons(ETH_P_IP))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!skb->dst"
#978: FILE: net/bridge/br_netfilter.c:415:
+	if (skb->dst == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "realindev"
#1004: FILE: net/bridge/br_netfilter.c:441:
+		if (realindev != NULL) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1026: FILE: net/bridge/br_netfilter.c:463:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1028: FILE: net/bridge/br_netfilter.c:465:
+static unsigned int br_nf_post_routing(unsigned int hook, struct sk_buff $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1030: FILE: net/bridge/br_netfilter.c:466:
+   const struct net_device *in, const struct net_device *out,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1031: FILE: net/bridge/br_netfilter.c:467:
+   int (*okfn)(struct sk_buff *))$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#1038: FILE: net/bridge/br_netfilter.c:474:
+		printk(KERN_CRIT "br_netfilter: Argh!! br_nf_post_routing: "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'br_nf_post_routing', this function's name, in a string
#1038: FILE: net/bridge/br_netfilter.c:474:
+		printk(KERN_CRIT "br_netfilter: Argh!! br_nf_post_routing: "

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:SPLIT_STRING: quoted string split across lines
#1039: FILE: net/bridge/br_netfilter.c:475:
+		printk(KERN_CRIT "br_netfilter: Argh!! br_nf_post_routing: "
+				 "bad mac.raw pointer.");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "skb->dev"
#1040: FILE: net/bridge/br_netfilter.c:476:
+		if (skb->dev != NULL) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1041: FILE: net/bridge/br_netfilter.c:477:
+			printk("[%s]", skb->dev->name);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1043: FILE: net/bridge/br_netfilter.c:479:
+				printk("[%s]", bridge_parent(skb->dev)->name);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1045: FILE: net/bridge/br_netfilter.c:481:
+		printk("\n");

WARNING:CONSTANT_CONVERSION: __constant_htons should be htons
#1049: FILE: net/bridge/br_netfilter.c:485:
+	if (skb->protocol != __constant_htons(ETH_P_IP))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!skb->dst"
#1055: FILE: net/bridge/br_netfilter.c:491:
+	if (skb->dst == NULL)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1078: FILE: net/bridge/br_netfilter.c:514:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1084: FILE: net/bridge/br_netfilter.c:520:
+static unsigned int ipv4_sabotage_in(unsigned int hook, struct sk_buff $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1086: FILE: net/bridge/br_netfilter.c:521:
+   const struct net_device *in, const struct net_device *out,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1087: FILE: net/bridge/br_netfilter.c:522:
+   int (*okfn)(struct sk_buff *))$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1102: FILE: net/bridge/br_netfilter.c:537:
+static unsigned int ipv4_sabotage_out(unsigned int hook, struct sk_buff $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1104: FILE: net/bridge/br_netfilter.c:538:
+   const struct net_device *in, const struct net_device *out,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1105: FILE: net/bridge/br_netfilter.c:539:
+   int (*okfn)(struct sk_buff *))$

WARNING:TYPO_SPELLING: 'brouter' may be misspelled - perhaps 'router'?
#1120: FILE: net/bridge/br_netfilter.c:554:
+		 * will need the indev then. For a brouter, the real indev
 		                                   ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!nf_bridge->physindev"
#1125: FILE: net/bridge/br_netfilter.c:559:
+		if (hook == NF_IP_FORWARD && nf_bridge->physindev == NULL) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1136: FILE: net/bridge/br_netfilter.c:570:
+/* For br_nf_local_out we need (prio = NF_BR_PRI_FIRST), to insure that $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1143: FILE: net/bridge/br_netfilter.c:576:
+^I{ { NULL, NULL }, br_nf_pre_routing, PF_BRIDGE, NF_BR_PRE_ROUTING, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1145: FILE: net/bridge/br_netfilter.c:577:
+^I{ { NULL, NULL }, br_nf_local_in, PF_BRIDGE, NF_BR_LOCAL_IN, NF_BR_PRI_BRNF $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1148: FILE: net/bridge/br_netfilter.c:579:
+^I{ { NULL, NULL }, br_nf_local_out, PF_BRIDGE, NF_BR_LOCAL_OUT, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1150: FILE: net/bridge/br_netfilter.c:580:
+^I{ { NULL, NULL }, br_nf_post_routing, PF_BRIDGE, NF_BR_POST_ROUTING, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1152: FILE: net/bridge/br_netfilter.c:581:
+^I{ { NULL, NULL }, ipv4_sabotage_in, PF_INET, NF_IP_PRE_ROUTING, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1154: FILE: net/bridge/br_netfilter.c:582:
+^I{ { NULL, NULL }, ipv4_sabotage_out, PF_INET, NF_IP_FORWARD, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1156: FILE: net/bridge/br_netfilter.c:583:
+^I{ { NULL, NULL }, ipv4_sabotage_out, PF_INET, NF_IP_LOCAL_OUT, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1158: FILE: net/bridge/br_netfilter.c:584:
+^I{ { NULL, NULL }, ipv4_sabotage_out, PF_INET, NF_IP_POST_ROUTING, $

WARNING:ARRAY_SIZE: Prefer ARRAY_SIZE(br_nf_ops)
#1162: FILE: net/bridge/br_netfilter.c:587:
+#define NUMHOOKS (sizeof(br_nf_ops)/sizeof(br_nf_ops[0]))

The ARRAY_SIZE(foo) macro should be preferred over
sizeof(foo)/sizeof(foo[0]) for finding number of elements in an
array.

The macro is defined in include/linux/kernel.h::

  #define ARRAY_SIZE(x) (sizeof(x) / sizeof((x)[0]))

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1162: FILE: net/bridge/br_netfilter.c:587:
+#define NUMHOOKS (sizeof(br_nf_ops)/sizeof(br_nf_ops[0]))
                                    ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1171: FILE: net/bridge/br_netfilter.c:596:
+		if ((ret = nf_register_hook(&br_nf_ops[i])) >= 0)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#1180: FILE: net/bridge/br_netfilter.c:605:
+	printk(KERN_NOTICE "Bridge firewalling registered\n");

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000421381.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 30 errors, 51 warnings, 42 checks, 1078 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000421381.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
