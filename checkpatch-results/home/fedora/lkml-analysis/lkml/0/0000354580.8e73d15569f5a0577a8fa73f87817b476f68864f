WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#73: 
diff -urpN -X dontdiff linux-2.6.0-test1/include/linux/printk-dynamic.h linux-2.6.0-test1-relayfs-printk/include/linux/printk-dynamic.h

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#77: FILE: include/linux/printk-dynamic.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#78: FILE: include/linux/printk-dynamic.h:2:
+ * linux/include/linux/printk-dynamic.h

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#93: FILE: include/linux/printk-dynamic.h:17:
+extern int do_syslog(int type, char * buf, int len);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#93: FILE: include/linux/printk-dynamic.h:17:
+extern int do_syslog(int type, char * buf, int len);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#94: FILE: include/linux/printk-dynamic.h:18:
+extern void release_console_sem(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#95: FILE: include/linux/printk-dynamic.h:19:
+extern int register_printk_channel(void);

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#97: FILE: include/linux/printk-dynamic.h:21:
+#define DO_SYSLOG		__init do_syslog_static

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#98: FILE: include/linux/printk-dynamic.h:22:
+#define RELEASE_CONSOLE_SEM	__init release_console_sem_static

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#99: FILE: include/linux/printk-dynamic.h:23:
+#define _PRINTK			__init _printk

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#100: FILE: include/linux/printk-dynamic.h:24:
+#define PRINTK			__init unused_printk

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#101: FILE: include/linux/printk-dynamic.h:25:
+#define PRINTK_INITDATA		__initdata = { 0, }

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#122: FILE: init/Kconfig:95:
+config DYNAMIC_PRINTK
+	bool "Dynamic printk support" if DEBUG_KERNEL
+	depends on RELAYFS_FS=y
+	---help---
+	  If you say Y here, printk will use a dynamically auto-resizing
+	  buffer.  The static printk buffer is still needed for system init,
+	  but will be discarded after that, and so can be configured much
+	  larger if necessary to capture large numbers of init-time messages
+	  (i.e. increase the LOG_BUF_SHIFT value).  The normal working size
+	  the dynamic printk buffer will try to maintain is specified by 
+	  MIN_LOG_BUF_SHIFT, which should probably be the same value you
+	  would have made the static printk buffer if dynamic printk wasn't
+	  enabled.
+
 config LOG_BUF_SHIFT
 	int "Kernel log buffer size (16 => 64KB, 17 => 128KB)" if DEBUG_KERNEL
 	range 12 20

Kconfig symbols should have a help text which fully describes
it.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#131: FILE: init/Kconfig:104:
+^I  the dynamic printk buffer will try to maintain is specified by $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#151: FILE: init/Kconfig:134:
+^I  The normal working size the dynamic printk buffer will try to $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#189: FILE: init/main.c:577:
+^I$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#190: FILE: init/main.c:578:
+	if ((err = register_printk_channel()) < 0)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#210: FILE: kernel/printk-dynamic.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#211: FILE: kernel/printk-dynamic.c:2:
+ *  linux/kernel/printk-dynamic.c

ERROR:TRAILING_WHITESPACE: trailing whitespace
#222: FILE: kernel/printk-dynamic.c:13:
+ * Fixed SMP synchronization, 08/08/99, Manfred Spraul $

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#245: FILE: kernel/printk-dynamic.c:36:
+#include <asm/uaccess.h>

CHECK:BIT_MACRO: Prefer using the BIT macro
#252: FILE: kernel/printk-dynamic.c:43:
+#define MIN_LOG_BUF_LEN	(1 << CONFIG_MIN_LOG_BUF_SHIFT)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#253: FILE: kernel/printk-dynamic.c:44:
+#define LOG_BUF_LEN	(1 << CONFIG_LOG_BUF_SHIFT)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#254: FILE: kernel/printk-dynamic.c:45:
+#define LOG_BUF_MASK	(LOG_BUF_LEN-1)
                     	            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#257: FILE: kernel/printk-dynamic.c:48:
+extern void _printk(char *printk_buf, int printed_len);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#258: FILE: kernel/printk-dynamic.c:49:
+extern void release_console_sem_static(void);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#259: FILE: kernel/printk-dynamic.c:50:
+extern int do_syslog_static(int type, char * buf, int len);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#259: FILE: kernel/printk-dynamic.c:50:
+extern int do_syslog_static(int type, char * buf, int len);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#260: FILE: kernel/printk-dynamic.c:51:
+extern wait_queue_head_t log_wait;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#261: FILE: kernel/printk-dynamic.c:52:
+extern int oops_in_progress;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#262: FILE: kernel/printk-dynamic.c:53:
+extern struct semaphore console_sem;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#263: FILE: kernel/printk-dynamic.c:54:
+extern struct console *console_drivers;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#264: FILE: kernel/printk-dynamic.c:55:
+extern int console_may_schedule;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#271: FILE: kernel/printk-dynamic.c:62:
+static int resize_buf_size = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#272: FILE: kernel/printk-dynamic.c:63:
+static int resize_n_bufs = 0;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#273: FILE: kernel/printk-dynamic.c:64:
+static int replace_pending = 0;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#274: FILE: kernel/printk-dynamic.c:65:
+static int needs_resize = 0;

WARNING:LONG_LINE_COMMENT: line length of 109 exceeds 100 columns
#283: FILE: kernel/printk-dynamic.c:74:
+static u32 dyn_log_start = 0;			/* Index into dyn_logbuf: next char to be read by syslog() */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#283: FILE: kernel/printk-dynamic.c:74:
+static u32 dyn_log_start = 0;			/* Index into dyn_logbuf: next char to be read by syslog() */

WARNING:LONG_LINE_COMMENT: line length of 109 exceeds 100 columns
#284: FILE: kernel/printk-dynamic.c:75:
+static u32 dyn_con_start = 0;			/* Index into dyn_logbuf: next char to be sent to consoles */

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#284: FILE: kernel/printk-dynamic.c:75:
+static u32 dyn_con_start = 0;			/* Index into dyn_logbuf: next char to be sent to consoles */

WARNING:LONG_LINE_COMMENT: line length of 110 exceeds 100 columns
#285: FILE: kernel/printk-dynamic.c:76:
+static u32 dyn_logged_chars = 0;		/* Number of chars produced since last read+clear operation */

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#285: FILE: kernel/printk-dynamic.c:76:
+static u32 dyn_logged_chars = 0;		/* Number of chars produced since last read+clear operation */

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#293: FILE: kernel/printk-dynamic.c:84:
+extern spinlock_t logbuf_lock;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#295: FILE: kernel/printk-dynamic.c:86:
+static int using_dynamic = 0;

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#300: FILE: kernel/printk-dynamic.c:91:
+ * ^I0 -- Close the log.  Currently a NOP.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#301: FILE: kernel/printk-dynamic.c:92:
+ * ^I1 -- Open the log. Currently a NOP.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#302: FILE: kernel/printk-dynamic.c:93:
+ * ^I2 -- Read from the log.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#303: FILE: kernel/printk-dynamic.c:94:
+ * ^I3 -- Read all messages remaining in the ring buffer.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#304: FILE: kernel/printk-dynamic.c:95:
+ * ^I4 -- Read and clear all messages remaining in the ring buffer$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#305: FILE: kernel/printk-dynamic.c:96:
+ * ^I5 -- Clear ring buffer.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#306: FILE: kernel/printk-dynamic.c:97:
+ * ^I6 -- Disable printk's to console$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#307: FILE: kernel/printk-dynamic.c:98:
+ * ^I7 -- Enable printk's to console$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#311: FILE: kernel/printk-dynamic.c:102:
+int do_syslog_dynamic(int type, char * buf, int len)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#334: FILE: kernel/printk-dynamic.c:125:
+		error = verify_area(VERIFY_WRITE,buf,len);
 		                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#334: FILE: kernel/printk-dynamic.c:125:
+		error = verify_area(VERIFY_WRITE,buf,len);
 		                                    ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#342: FILE: kernel/printk-dynamic.c:133:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#348: FILE: kernel/printk-dynamic.c:139:
+^I^Ido_clear = 1; $

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#349: FILE: kernel/printk-dynamic.c:140:
+		/* FALL THRU */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

ERROR:SPACING: space required after that ',' (ctx:VxV)
#357: FILE: kernel/printk-dynamic.c:148:
+		error = verify_area(VERIFY_WRITE,buf,len);
 		                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#357: FILE: kernel/printk-dynamic.c:148:
+		error = verify_area(VERIFY_WRITE,buf,len);
 		                                    ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#407: FILE: kernel/printk-dynamic.c:198:
+int do_syslog(int type, char * buf, int len)

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#462: FILE: kernel/printk-dynamic.c:253:
+		if (	msg_level < 0 &&
+			((end - cur_index) > 2) &&
+			*(dyn_logbuf + cur_index + 0) == '<' &&
+			*(dyn_logbuf + cur_index + 1) >= '0' &&
+			*(dyn_logbuf + cur_index + 1) <= '7' &&
+			*(dyn_logbuf + cur_index + 2) == '>')
+		{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space prohibited after that open parenthesis '('
#462: FILE: kernel/printk-dynamic.c:253:
+		if (	msg_level < 0 &&

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#463: FILE: kernel/printk-dynamic.c:254:
+		if (	msg_level < 0 &&
+			((end - cur_index) > 2) &&

WARNING:LINE_SPACING: Missing a blank line after declarations
#475: FILE: kernel/printk-dynamic.c:266:
+			char c = *(dyn_logbuf + cur_index);
+			cur_index++;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#504: FILE: kernel/printk-dynamic.c:295:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#508: FILE: kernel/printk-dynamic.c:299:
+^I$

WARNING:LONG_LINE: line length of 132 exceeds 100 columns
#531: FILE: kernel/printk-dynamic.c:322:
+		printk_internal("dynamic printk buffer resized to %d (%u x %u)\n", dyn_bufsize * dyn_nbufs, dyn_nbufs, dyn_bufsize);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#571: FILE: kernel/printk-dynamic.c:362:
+	if (*(p-1) != '\n') {
 	       ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#581: FILE: kernel/printk-dynamic.c:372:
+ * $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#594: FILE: kernel/printk-dynamic.c:385:
+asmlinkage int printk(const char *fmt, ...)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#626: FILE: kernel/printk-dynamic.c:417:
+^I^I_printk(printk_buf, printed_len);^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#657: FILE: kernel/printk-dynamic.c:448:
+^I/* The printk buffer needs resizing, allocate it now */ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#674: FILE: kernel/printk-dynamic.c:465:
+^I$

WARNING:LONG_LINE: line length of 111 exceeds 100 columns
#676: FILE: kernel/printk-dynamic.c:467:
+		bytes_avail = relay_read(dyn_channel, NULL, dyn_bufsize, dyn_con_start, &new_dyn_con_start, 0);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#681: FILE: kernel/printk-dynamic.c:472:
+^I^I$

WARNING:WAITQUEUE_ACTIVE: waitqueue_active without comment
#693: FILE: kernel/printk-dynamic.c:484:
+	if (wake_klogd && !oops_in_progress && waitqueue_active(&log_wait))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#751: FILE: kernel/printk-dynamic.c:542:
+^Iif (resize_type == RELAY_RESIZE_EXPAND || $

CHECK:BRACES: braces {} should be used on all arms of this statement
#751: FILE: kernel/printk-dynamic.c:542:
+	if (resize_type == RELAY_RESIZE_EXPAND || 
[...]
+	} else if (resize_type == RELAY_RESIZE_REPLACED) {
[...]
+	} else if (resize_type == RELAY_RESIZE_REPLACE)
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#752: FILE: kernel/printk-dynamic.c:543:
+	if (resize_type == RELAY_RESIZE_EXPAND || 
+	   resize_type == RELAY_RESIZE_SHRINK) {

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#776: FILE: kernel/printk-dynamic.c:567:
+extern char log_buf[];

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#779: FILE: kernel/printk-dynamic.c:570:
+extern unsigned long log_start;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#780: FILE: kernel/printk-dynamic.c:571:
+extern unsigned long con_start;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#781: FILE: kernel/printk-dynamic.c:572:
+extern unsigned long log_end;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#782: FILE: kernel/printk-dynamic.c:573:
+extern unsigned long logged_chars;

WARNING:LINE_SPACING: Missing a blank line after declarations
#794: FILE: kernel/printk-dynamic.c:585:
+	u32 channel_flags = RELAY_DELIVERY_PACKET | RELAY_USAGE_GLOBAL;
+	channel_flags |= RELAY_SCHEME_ANY | RELAY_TIMESTAMP_ANY;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#795: FILE: kernel/printk-dynamic.c:586:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#797: FILE: kernel/printk-dynamic.c:588:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#808: FILE: kernel/printk-dynamic.c:599:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#811: FILE: kernel/printk-dynamic.c:602:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#812: FILE: kernel/printk-dynamic.c:603:
+^Iresize_min = total_bufsize < MIN_LOG_BUF_LEN ? $

WARNING:LINE_SPACING: Missing a blank line after declarations
#835: FILE: kernel/printk-dynamic.c:626:
+	int write_count = relay_write(dyn_channel, &LOG_BUF(start), count, -1);
+	dyn_logged_chars += write_count;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#859: FILE: kernel/printk-dynamic.c:650:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#865: FILE: kernel/printk-dynamic.c:656:
+ * contents into it.  For the buffer copy, we assume log_start == 0 $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#874: FILE: kernel/printk-dynamic.c:665:
+^I$

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#894: FILE: kernel/printk-dynamic.c:685:
+		copy_end = LOG_BUF_LEN > log_end ? log_end : LOG_BUF_LEN;

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#904: FILE: kernel/printk-dynamic.c:695:
+^I$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#907: FILE: kernel/printk-dynamic.c:698:
+	printk("Now using dynamic printk\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#908: FILE: kernel/printk-dynamic.c:699:
+	printk("Static printk buffer was %d bytes\n", LOG_BUF_LEN);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#910: FILE: kernel/printk-dynamic.c:701:
+		printk("Static printk buffer was too small for init messages - consider configuring it larger\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#911: FILE: kernel/printk-dynamic.c:702:
+	printk("Initial dynamic printk buffer is %u bytes (%u x %u)\n",

ERROR:TRAILING_WHITESPACE: trailing whitespace
#912: FILE: kernel/printk-dynamic.c:703:
+^I       rchan_info.buf_size * rchan_info.n_bufs, $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#914: FILE: kernel/printk-dynamic.c:705:
+	printk("Minimum dynamic printk buffer is %u bytes\n", MIN_LOG_BUF_LEN);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#942: FILE: kernel/printk-dynamic.c:733:
+
+

WARNING:LONG_LINE_COMMENT: line length of 106 exceeds 100 columns
#983: FILE: kernel/printk.c:80:
+unsigned long log_start;			/* Index into log_buf: next char to be read by syslog() */

WARNING:LONG_LINE_COMMENT: line length of 106 exceeds 100 columns
#984: FILE: kernel/printk.c:81:
+unsigned long con_start;			/* Index into log_buf: next char to be sent to consoles */

WARNING:LONG_LINE_COMMENT: line length of 102 exceeds 100 columns
#986: FILE: kernel/printk.c:83:
+unsigned long logged_chars;		/* Number of chars produced since last read+clear operation */

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1002: FILE: kernel/printk.c:160:
+int DO_SYSLOG(int type, char __user * buf, int len)

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#1020: FILE: kernel/printk.c:307:
+static void PRINTK_INIT _call_console_drivers(unsigned long start, unsigned long end, int msg_log_level)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000354580.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 49 errors, 50 warnings, 11 checks, 1012 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000354580.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
