WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#48: 
diff -u --recursive --new-file -X /linux/dontdiff a/drivers/char/ip2/ip2.h b/drivers/char/ip2/ip2.h

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#49: 
--- a/drivers/char/ip2/ip2.h	Fri Nov 22 22:40:25 2002

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:CONST_STRUCT: struct file_operations should normally be const
#120: FILE: fs/char_dev.c:34:
+	struct file_operations *fops;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct file_operations should normally be const
#167: FILE: fs/char_dev.c:70:
+	struct file_operations *ret = NULL;

WARNING:CONST_STRUCT: struct file_operations should normally be const
#204: FILE: fs/char_dev.c:93:
+static struct file_operations *

WARNING:CONST_STRUCT: struct file_operations should normally be const
#207: FILE: fs/char_dev.c:96:
+	struct file_operations *ret = NULL;

WARNING:CONST_STRUCT: struct file_operations should normally be const
#237: FILE: fs/char_dev.c:122:
+			   struct file_operations *fops)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#260: FILE: fs/char_dev.c:131:
+		for (i = ARRAY_SIZE(chrdevs)-1; i > 0; i--)
 		                            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!chrdevs[i]"
#261: FILE: fs/char_dev.c:132:
+			if (chrdevs[i] == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#267: FILE: fs/char_dev.c:138:
+		ret = major = i;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*cd)...) over kmalloc(sizeof(struct char_device_struct)...)
#270: FILE: fs/char_dev.c:141:
+	cd = kmalloc(sizeof(struct char_device_struct), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cd"
#271: FILE: fs/char_dev.c:142:
+	if (cd == NULL)

WARNING:CONST_STRUCT: struct file_operations should normally be const
#306: FILE: fs/char_dev.c:171:
+		    struct file_operations *fops)

CHECK:BRACES: braces {} should be used on all arms of this statement
#329: FILE: fs/char_dev.c:189:
+	if (!*cp || strcmp((*cp)->name, name))
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#331: FILE: fs/char_dev.c:191:
+	else {

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#383: FILE: fs/inode.c:148:
+			mapping->backing_dev_info = sb->s_bdev->bd_inode->i_mapping->backing_dev_info;

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#395: FILE: include/linux/fs.h:1056:
+extern int register_chrdev_region(unsigned int, unsigned int, int,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#395: FILE: include/linux/fs.h:1056:
+extern int register_chrdev_region(unsigned int, unsigned int, int,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#395: FILE: include/linux/fs.h:1056:
+extern int register_chrdev_region(unsigned int, unsigned int, int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#395: FILE: include/linux/fs.h:1056:
+extern int register_chrdev_region(unsigned int, unsigned int, int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#395: FILE: include/linux/fs.h:1056:
+extern int register_chrdev_region(unsigned int, unsigned int, int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file_operations *' should also have an identifier name
#395: FILE: include/linux/fs.h:1056:
+extern int register_chrdev_region(unsigned int, unsigned int, int,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#397: FILE: include/linux/fs.h:1058:
+extern int register_chrdev(unsigned int, const char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#397: FILE: include/linux/fs.h:1058:
+extern int register_chrdev(unsigned int, const char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#397: FILE: include/linux/fs.h:1058:
+extern int register_chrdev(unsigned int, const char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file_operations *' should also have an identifier name
#397: FILE: include/linux/fs.h:1058:
+extern int register_chrdev(unsigned int, const char *,

WARNING:CONST_STRUCT: struct file_operations should normally be const
#398: FILE: include/linux/fs.h:1059:
+			   struct file_operations *);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000384832.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 17 warnings, 9 checks, 333 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000384832.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
