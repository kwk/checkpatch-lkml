WARNING:BAD_SIGN_OFF: Do not use whitespace before Signed-off-by:
#38: 
  Signed-off-by: Dmitry Torokhov <dtor@mail.ru>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#58: FILE: drivers/base/base.h:1:
+extern int bus_add_device(struct device * dev, int lock);

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#58: FILE: drivers/base/base.h:1:
+extern int bus_add_device(struct device * dev, int lock);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#58: FILE: drivers/base/base.h:1:
+extern int bus_add_device(struct device * dev, int lock);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#59: FILE: drivers/base/base.h:2:
+extern void bus_remove_device(struct device * dev, int lock);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#59: FILE: drivers/base/base.h:2:
+extern void bus_remove_device(struct device * dev, int lock);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#82: FILE: drivers/base/bus.c:408:
+int bus_add_device(struct device * dev, int lock)

CHECK:BRACES: braces {} should be used on all arms of this statement
#89: FILE: drivers/base/bus.c:414:
+		if (lock)
[...]
+		else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#91: FILE: drivers/base/bus.c:416:
+		else {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#98: FILE: drivers/base/bus.c:423:
+			BUG_ON(down_write_trylock(&bus->subsys.rwsem));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#127: FILE: drivers/base/bus.c:450:
+void bus_remove_device(struct device * dev, int lock)

CHECK:BRACES: braces {} should be used on all arms of this statement
#132: FILE: drivers/base/bus.c:454:
+		if (lock)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#134: FILE: drivers/base/bus.c:456:
+		else {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#141: FILE: drivers/base/bus.c:463:
+			BUG_ON(down_write_trylock(&dev->bus->subsys.rwsem));

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#183: FILE: drivers/base/core.c:234:
+	if ((error = bus_add_device(dev, lock)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:REPEATED_WORD: Possible repeated word: 'users'
#203: FILE: drivers/base/core.c:273:
+ *	Regular users users should just call device_register().

WARNING:REPEATED_WORD: Possible repeated word: 'users'
#229: FILE: drivers/base/core.c:323:
+ *	Regular users users should just call device_del().

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#233: FILE: drivers/base/core.c:326:
+void __device_del(struct device * dev, int lock)

WARNING:REPEATED_WORD: Possible repeated word: 'users'
#262: FILE: drivers/base/core.c:362:
+ *	Regular users users should just call device_unregister().

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#265: FILE: drivers/base/core.c:364:
+void __device_unregister(struct device * dev, int lock)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#280: FILE: drivers/base/core.c:416:
+EXPORT_SYMBOL(__device_register);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#284: FILE: drivers/base/core.c:418:
+EXPORT_SYMBOL(__device_del);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#285: FILE: drivers/base/core.c:419:
+EXPORT_SYMBOL(__device_unregister);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#298: FILE: include/linux/device.h:319:
+extern int __device_register(struct device * dev, int lock);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#298: FILE: include/linux/device.h:319:
+extern int __device_register(struct device * dev, int lock);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#299: FILE: include/linux/device.h:320:
+static inline int device_register(struct device * dev)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#304: FILE: include/linux/device.h:325:
+extern void __device_unregister(struct device * dev, int lock);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#304: FILE: include/linux/device.h:325:
+extern void __device_unregister(struct device * dev, int lock);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#305: FILE: include/linux/device.h:326:
+static inline void device_unregister(struct device * dev)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#314: FILE: include/linux/device.h:333:
+extern int __device_add(struct device * dev, int lock);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#314: FILE: include/linux/device.h:333:
+extern int __device_add(struct device * dev, int lock);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#315: FILE: include/linux/device.h:334:
+static inline int device_add(struct device * dev)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#320: FILE: include/linux/device.h:339:
+extern void __device_del(struct device * dev, int lock);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#320: FILE: include/linux/device.h:339:
+extern void __device_del(struct device * dev, int lock);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#321: FILE: include/linux/device.h:340:
+static inline void device_del(struct device * dev)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000275907.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 15 errors, 10 warnings, 10 checks, 257 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000275907.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
