WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#32: 
> >  - softirq handling can now be restarted N times within do_softirq(), if a

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#84: FILE: include/linux/interrupt.h:77:
+#define __cpu_raise_softirq(cpu, nr) \
+		do { softirq_pending(cpu) |= 1UL << (nr); } while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#87: FILE: include/linux/interrupt.h:80:
+#define rerun_softirqs(cpu) ^I^I^I^I^I\$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cpu' - possible side-effects?
#87: FILE: include/linux/interrupt.h:80:
+#define rerun_softirqs(cpu) 					\
+do {								\
+	if (!(local_irq_count(cpu) | local_bh_count(cpu)))	\
+		do_softirq();					\
+} while (0);

WARNING:DO_WHILE_MACRO_WITH_TRAILING_SEMICOLON: do {} while (0) macros should not be semicolon terminated
#87: FILE: include/linux/interrupt.h:80:
+#define rerun_softirqs(cpu) 					\
+do {								\
+	if (!(local_irq_count(cpu) | local_bh_count(cpu)))	\
+		do_softirq();					\
+} while (0);

do {} while(0) macros should not have a trailing semicolon.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#127: FILE: include/linux/sched.h:559:
+extern void FASTCALL(__unwakeup_process(struct task_struct * p, long state));

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#127: FILE: include/linux/sched.h:559:
+extern void FASTCALL(__unwakeup_process(struct task_struct * p, long state));

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:SPACING: space required after that ',' (ctx:VxV)
#136: FILE: include/linux/sched.h:579:
+#define unwakeup_process(tsk,state)		\
                             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'tsk' - possible side-effects?
#136: FILE: include/linux/sched.h:579:
+#define unwakeup_process(tsk,state)		\
+do {						\
+	if (task_on_runqueue(tsk))		\
+		__unwakeup_process(tsk,state);	\
+} while (0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#139: FILE: include/linux/sched.h:582:
+		__unwakeup_process(tsk,state);	\
 		                      ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#173: FILE: kernel/sched.c:378:
+void __unwakeup_process(struct task_struct * p, long state)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'p != current'
#178: FILE: kernel/sched.c:383:
+	if (!p->has_cpu && (p != current) && task_on_runqueue(p)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#200: FILE: kernel/softirq.c:65:
+static inline void unwakeup_softirqd(unsigned cpu)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#202: FILE: kernel/softirq.c:67:
+	struct task_struct * tsk = ksoftirqd_task(cpu);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#357: FILE: kernel/softirq.c:376:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:INDENTED_LABEL: labels should not be indented
#378: FILE: kernel/softirq.c:387:
+		back:

CHECK:SPACING: No space is necessary after a cast
#396: FILE: kernel/softirq.c:404:
+		if (kernel_thread(ksoftirqd, (void *) cpu,

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000510615.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 5 errors, 7 warnings, 5 checks, 337 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000510615.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
