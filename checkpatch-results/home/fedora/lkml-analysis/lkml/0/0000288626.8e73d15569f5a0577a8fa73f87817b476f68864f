WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#63: 
--- mmlinux-2.6/fs/hugetlbfs/inode.c~110_sem_contention	2004-04-14 15:49:01.000000000 -0400

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'vma' may be better as '(vma)' to avoid precedence issues
#133: FILE: include/linux/mm.h:165:
+#define	vm_set_lock(vma)	bit_spin_lock(VM_SET_LOCK, \
+					(unsigned long *)&(vma->vm_flags))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around vma->vm_flags
#134: FILE: include/linux/mm.h:166:
+					(unsigned long *)&(vma->vm_flags))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'vma' may be better as '(vma)' to avoid precedence issues
#135: FILE: include/linux/mm.h:167:
+#define	vm_set_trylock(vma)	bit_spin_trylock(VM_SET_LOCK, \
+					(unsigned long *)&(vma->vm_flags))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around vma->vm_flags
#136: FILE: include/linux/mm.h:168:
+					(unsigned long *)&(vma->vm_flags))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'vma' may be better as '(vma)' to avoid precedence issues
#137: FILE: include/linux/mm.h:169:
+#define	vm_set_unlock(vma)	bit_spin_unlock(VM_SET_LOCK, \
+					(unsigned long *)&(vma->vm_flags))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around vma->vm_flags
#138: FILE: include/linux/mm.h:170:
+					(unsigned long *)&(vma->vm_flags))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#163: FILE: include/linux/mm.h:252:
+	BUG_ON(vma->shared.both.parent);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:BRACES: braces {} should be used on all arms of this statement
#165: FILE: include/linux/mm.h:254:
+	if (vma->vm_set_head) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#168: FILE: include/linux/mm.h:257:
+		BUG_ON(vma->vm_set_head->vm_set_head != vma);

CHECK:BRACES: braces {} should be used on all arms of this statement
#170: FILE: include/linux/mm.h:259:
+		if (!list_empty(&vma->shared.vm_set.list)) {
[...]
+		else
[...]

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#171: FILE: include/linux/mm.h:260:
+			new_head = list_entry(

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#179: FILE: include/linux/mm.h:268:
+		}
+		else

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#181: FILE: include/linux/mm.h:270:
+	} else

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#198: FILE: include/linux/mm.h:301:
+static inline struct vm_area_struct *__vma_prio_tree_find(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#224: FILE: include/linux/mm.h:336:
+static inline struct vm_area_struct *__vma_prio_tree_first_lock(

WARNING:LINE_SPACING: Missing a blank line after declarations
#229: FILE: include/linux/mm.h:341:
+	struct vm_area_struct *vma;
+	vma = __vma_prio_tree_first(root, iter, begin,  end);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#248: FILE: include/linux/mm.h:364:
+static inline struct vm_area_struct *__vma_prio_tree_next(

WARNING:LINE_SPACING: Missing a blank line after declarations
#268: FILE: include/linux/mm.h:387:
+	struct vm_area_struct *vma;
+	vma = prio_tree_entry(iter->cur, struct vm_area_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#269: FILE: include/linux/mm.h:388:
+	vma = prio_tree_entry(iter->cur, struct vm_area_struct,
+				shared.prio_tree_node);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#273: FILE: include/linux/mm.h:392:
+static inline struct vm_area_struct *__vma_prio_tree_next_lock(

CHECK:BRACES: braces {} should be used on all arms of this statement
#287: FILE: include/linux/mm.h:406:
+	if (ptr) {
[...]
+	} else
[...]

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#289: FILE: include/linux/mm.h:408:
+		next = prio_tree_entry(ptr, struct vm_area_struct,
+				shared.prio_tree_node);

CHECK:BRACES: Unbalanced braces around else statement
#292: FILE: include/linux/mm.h:411:
+	} else

CHECK:LINE_SPACING: Please don't use multiple blank lines
#296: FILE: include/linux/mm.h:415:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#307: FILE: include/linux/prio_tree.h:70:
+extern struct prio_tree_node *prio_tree_find(struct prio_tree_root *,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct prio_tree_root *' should also have an identifier name
#307: FILE: include/linux/prio_tree.h:70:
+extern struct prio_tree_node *prio_tree_find(struct prio_tree_root *,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#307: FILE: include/linux/prio_tree.h:70:
+extern struct prio_tree_node *prio_tree_find(struct prio_tree_root *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#307: FILE: include/linux/prio_tree.h:70:
+extern struct prio_tree_node *prio_tree_find(struct prio_tree_root *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#308: FILE: include/linux/prio_tree.h:71:
+extern struct prio_tree_node *prio_tree_find(struct prio_tree_root *,
+	unsigned long, unsigned long);

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#334: FILE: kernel/fork.c:340:
+			}
+			else {

CHECK:BRACES: Unbalanced braces around else statement
#334: FILE: kernel/fork.c:340:
+			else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#338: FILE: kernel/fork.c:344:
+					list_add(&tmp->shared.vm_set.list,
+						    &mpnt->shared.vm_set.list);

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#341: FILE: kernel/fork.c:347:
+				}
+				else {

CHECK:BRACES: Unbalanced braces around else statement
#341: FILE: kernel/fork.c:347:
+				else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#344: FILE: kernel/fork.c:350:
+					struct prio_tree_root *root;
+					if (mpnt->vm_flags & VM_SHARED)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#351: FILE: kernel/fork.c:357:
+					tree_node = __vma_prio_tree_find(root,
+							RADIX_INDEX(mpnt),

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#353: FILE: kernel/fork.c:359:
+					BUG_ON(!tree_node);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#422: FILE: mm/mmap.c:108:
+		if (likely(!(vma->vm_flags & VM_NONLINEAR) &&
+					!vma->shared.both.parent)) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#425: FILE: mm/mmap.c:111:
+			struct vm_area_struct *tree_node;
+			if (vma->vm_flags & VM_SHARED)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#436: FILE: mm/mmap.c:122:
+			tree_node = __vma_prio_tree_find(root,
+					RADIX_INDEX(vma), HEAP_INDEX(vma));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#437: FILE: mm/mmap.c:123:
+			BUG_ON(!tree_node);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#488: FILE: mm/mmap.c:350:
+		tree_node = __vma_prio_tree_find(root,
+				RADIX_INDEX(vma), HEAP_INDEX(vma));

WARNING:LINE_SPACING: Missing a blank line after declarations
#491: FILE: mm/mmap.c:353:
+			struct inode *inode = vma->vm_file->f_dentry->d_inode;
+			if (vma->vm_flags & VM_DENYWRITE)

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#501: FILE: mm/mmap.c:363:
+		}
+		else {

CHECK:BRACES: Unbalanced braces around else statement
#501: FILE: mm/mmap.c:363:
+		else {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#512: FILE: mm/mmap.c:374:
+	}
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#512: FILE: mm/mmap.c:374:
+	else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#664: FILE: mm/prio_tree.c:287:
+struct prio_tree_node *prio_tree_find(struct prio_tree_root *root,
+		unsigned long radix_index, unsigned long heap_index)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#671: FILE: mm/prio_tree.c:294:
+	if (prio_tree_empty(root) ||
+			heap_index > prio_tree_maxindex(root->index_bits))

ERROR:CODE_INDENT: code indent should use tabs where possible
#683: FILE: mm/prio_tree.c:306:
+                if (h_index < heap_index || (h_index == heap_index &&$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#683: FILE: mm/prio_tree.c:306:
+                if (h_index < heap_index || (h_index == heap_index &&$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#684: FILE: mm/prio_tree.c:307:
+                if (h_index < heap_index || (h_index == heap_index &&
+						r_index > radix_index))

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#695: FILE: mm/prio_tree.c:318:
+				return NULL;
+			else

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#698: FILE: mm/prio_tree.c:321:
+		}
+		else {

CHECK:BRACES: Unbalanced braces around else statement
#698: FILE: mm/prio_tree.c:321:
+		else {

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#701: FILE: mm/prio_tree.c:324:
+				return NULL;
+			else

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#713: FILE: mm/prio_tree.c:336:
+	BUG();

CHECK:LINE_SPACING: Please don't use multiple blank lines
#717: FILE: mm/prio_tree.c:340:
+
+

CHECK:BRACES: braces {} should be used on all arms of this statement
#752: FILE: mm/prio_tree.c:603:
+		if (!list_empty(&head->shared.vm_set.list)) {
[...]
+		else
[...]

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#754: FILE: mm/prio_tree.c:605:
+			new_head = list_entry(head->shared.vm_set.list.next,
+				struct vm_area_struct, shared.vm_set.list);

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#757: FILE: mm/prio_tree.c:608:
+		}
+		else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#766: FILE: mm/prio_tree.c:612:
+		prio_tree_replace(root, &vma->shared.prio_tree_node,
+				&head->shared.prio_tree_node);

CHECK:BRACES: Unbalanced braces around else statement
#789: FILE: mm/prio_tree.c:617:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#809: FILE: mm/rmap.c:286:
+	vma = __vma_prio_tree_first_lock(&mapping->i_mmap,
 					&iter, pgoff, pgoff);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#823: FILE: mm/rmap.c:305:
+	vma = __vma_prio_tree_first_lock(&mapping->i_mmap_shared,
 					&iter, pgoff, pgoff);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#858: FILE: mm/rmap.c:721:
+	vma = __vma_prio_tree_first_lock(&mapping->i_mmap,
 					&iter, pgoff, pgoff);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#875: FILE: mm/rmap.c:735:
+	vma = __vma_prio_tree_first_lock(&mapping->i_mmap_shared,
 					&iter, pgoff, pgoff);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000288626.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 8 errors, 17 warnings, 43 checks, 778 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000288626.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
