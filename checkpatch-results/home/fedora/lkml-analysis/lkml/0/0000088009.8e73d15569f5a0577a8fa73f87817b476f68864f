ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#82: FILE: drivers/char/tpm/tpm.c:484:
+	if ((len = tpm_transmit(chip, data, sizeof(data)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:SPLIT_STRING: quoted string split across lines
#85: FILE: drivers/char/tpm/tpm.c:487:
+		dev_dbg(chip->dev, "A TPM error (%d) occurred "
+			"attempting to determine the timeouts\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:SPACING: No space is necessary after a cast
#86: FILE: drivers/char/tpm/tpm.c:488:
+			be32_to_cpu(*((__be32 *) (data + TPM_RET_CODE_IDX))));

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#100: FILE: drivers/char/tpm/tpm.c:502:
+	if ((len = tpm_transmit(chip, data, sizeof(data)))

WARNING:SPLIT_STRING: quoted string split across lines
#103: FILE: drivers/char/tpm/tpm.c:505:
+		dev_dbg(chip->dev, "A TPM error (%d) occurred "
+			"attempting to determine the timeouts\n",

CHECK:SPACING: No space is necessary after a cast
#104: FILE: drivers/char/tpm/tpm.c:506:
+			be32_to_cpu(*((__be32 *) (data + TPM_RET_CODE_IDX))));

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#108: FILE: drivers/char/tpm/tpm.c:510:
+	if ((len =

CHECK:SPACING: No space is necessary after a cast
#109: FILE: drivers/char/tpm/tpm.c:511:
+	     be32_to_cpu(*((__be32 *) (data + TPM_GET_CAP_RET_SIZE_IDX))))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#114: FILE: drivers/char/tpm/tpm.c:516:
+^Itimeout = $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#115: FILE: drivers/char/tpm/tpm.c:517:
+	    be32_to_cpu(*((__be32 *) (data + TPM_GET_CAP_RET_UINT32_1_IDX)));

CHECK:SPACING: No space is necessary after a cast
#119: FILE: drivers/char/tpm/tpm.c:521:
+	    be32_to_cpu(*((__be32 *) (data + TPM_GET_CAP_RET_UINT32_2_IDX)));

CHECK:SPACING: No space is necessary after a cast
#123: FILE: drivers/char/tpm/tpm.c:525:
+	    be32_to_cpu(*((__be32 *) (data + TPM_GET_CAP_RET_UINT32_3_IDX)));

CHECK:SPACING: No space is necessary after a cast
#127: FILE: drivers/char/tpm/tpm.c:529:
+	    be32_to_cpu(*((__be32 *) (data + TPM_GET_CAP_RET_UINT32_4_IDX)));

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#136: FILE: drivers/char/tpm/tpm.c:538:
+	if ((len = tpm_transmit(chip, data, sizeof(data)))

WARNING:SPLIT_STRING: quoted string split across lines
#139: FILE: drivers/char/tpm/tpm.c:541:
+		dev_dbg(chip->dev, "A TPM error (%d) occurred "
+			"attempting to determine the durations\n",

CHECK:SPACING: No space is necessary after a cast
#140: FILE: drivers/char/tpm/tpm.c:542:
+			be32_to_cpu(*((__be32 *) (data + TPM_RET_CODE_IDX))));

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#144: FILE: drivers/char/tpm/tpm.c:546:
+	if ((len =

CHECK:SPACING: No space is necessary after a cast
#145: FILE: drivers/char/tpm/tpm.c:547:
+	     be32_to_cpu(*((__be32 *) (data + TPM_GET_CAP_RET_SIZE_IDX))))

CHECK:SPACING: No space is necessary after a cast
#150: FILE: drivers/char/tpm/tpm.c:552:
+	    be32_to_cpu(*((__be32 *) (data + TPM_GET_CAP_RET_UINT32_1_IDX)));

CHECK:SPACING: No space is necessary after a cast
#152: FILE: drivers/char/tpm/tpm.c:554:
+	    be32_to_cpu(*((__be32 *) (data + TPM_GET_CAP_RET_UINT32_2_IDX)));

CHECK:SPACING: No space is necessary after a cast
#154: FILE: drivers/char/tpm/tpm.c:556:
+	    be32_to_cpu(*((__be32 *) (data + TPM_GET_CAP_RET_UINT32_3_IDX)));

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#158: FILE: drivers/char/tpm/tpm.c:560:
+ssize_t tpm_show_state(struct device * dev, struct device_attribute * attr,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#158: FILE: drivers/char/tpm/tpm.c:560:
+ssize_t tpm_show_state(struct device * dev, struct device_attribute * attr,

WARNING:LINE_SPACING: Missing a blank line after declarations
#166: FILE: drivers/char/tpm/tpm.c:568:
+	struct tpm_chip *chip = dev_get_drvdata(dev);
+	if (chip == NULL)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!chip"
#166: FILE: drivers/char/tpm/tpm.c:568:
+	if (chip == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#173: FILE: drivers/char/tpm/tpm.c:575:
+	if ((len = tpm_transmit(chip, data, sizeof(data)))

WARNING:SPLIT_STRING: quoted string split across lines
#176: FILE: drivers/char/tpm/tpm.c:578:
+		dev_dbg(chip->dev, "A TPM error (%d) occurred "
+			"attempting to determine the permanent state\n",

CHECK:SPACING: No space is necessary after a cast
#177: FILE: drivers/char/tpm/tpm.c:579:
+			be32_to_cpu(*((__be32 *) (data + TPM_RET_CODE_IDX))));

CHECK:BRACES: Unbalanced braces around else statement
#178: FILE: drivers/char/tpm/tpm.c:580:
+	else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#192: FILE: drivers/char/tpm/tpm.c:594:
+	if ((len = tpm_transmit(chip, data, sizeof(data)))

WARNING:SPLIT_STRING: quoted string split across lines
#195: FILE: drivers/char/tpm/tpm.c:597:
+		dev_dbg(chip->dev, "A TPM error (%d) occurred "
+			"attempting to determine the owner state\n",

CHECK:SPACING: No space is necessary after a cast
#196: FILE: drivers/char/tpm/tpm.c:598:
+			be32_to_cpu(*((__be32 *) (data + TPM_RET_CODE_IDX))));

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#207: FILE: drivers/char/tpm/tpm.c:609:
+	if ((len = tpm_transmit(chip, data, sizeof(data)))

WARNING:SPLIT_STRING: quoted string split across lines
#210: FILE: drivers/char/tpm/tpm.c:612:
+		dev_dbg(chip->dev, "A TPM error (%d) occurred "
+			"attempting to determine the temporary state\n",

CHECK:SPACING: No space is necessary after a cast
#211: FILE: drivers/char/tpm/tpm.c:613:
+			be32_to_cpu(*((__be32 *) (data + TPM_RET_CODE_IDX))));

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#237: FILE: drivers/char/tpm/tpm.c:833:
+ssize_t tpm_show_caps_1_2(struct device * dev,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#238: FILE: drivers/char/tpm/tpm.c:834:
+			  struct device_attribute * attr, char *buf)

WARNING:LINE_SPACING: Missing a blank line after declarations
#245: FILE: drivers/char/tpm/tpm.c:841:
+	struct tpm_chip *chip = dev_get_drvdata(dev);
+	if (chip == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!chip"
#245: FILE: drivers/char/tpm/tpm.c:841:
+	if (chip == NULL)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#252: FILE: drivers/char/tpm/tpm.c:848:
+	if ((len = tpm_transmit(chip, data, sizeof(data))) <=

WARNING:SPLIT_STRING: quoted string split across lines
#255: FILE: drivers/char/tpm/tpm.c:851:
+		dev_dbg(chip->dev, "A TPM error (%d) occurred "
+			"attempting to determine the manufacturer\n",

CHECK:SPACING: No space is necessary after a cast
#256: FILE: drivers/char/tpm/tpm.c:852:
+			be32_to_cpu(*((__be32 *) (data + TPM_RET_CODE_IDX))));

CHECK:SPACING: No space is necessary after a cast
#261: FILE: drivers/char/tpm/tpm.c:857:
+		       be32_to_cpu(*((__be32 *) (data + TPM_GET_CAP_RET_UINT32_1_IDX))));

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#266: FILE: drivers/char/tpm/tpm.c:862:
+	if ((len = tpm_transmit(chip, data, sizeof(data))) <=

WARNING:SPLIT_STRING: quoted string split across lines
#269: FILE: drivers/char/tpm/tpm.c:865:
+		dev_err(chip->dev, "A TPM error (%d) occurred "
+			"attempting to determine the 1.2 version\n",

CHECK:SPACING: No space is necessary after a cast
#270: FILE: drivers/char/tpm/tpm.c:866:
+			be32_to_cpu(*((__be32 *) (data + TPM_RET_CODE_IDX))));

CHECK:SPACING: No space is necessary after a cast
#275: FILE: drivers/char/tpm/tpm.c:871:
+		       (int) data[16], (int) data[17], (int) data[18],

CHECK:SPACING: No space is necessary after a cast
#276: FILE: drivers/char/tpm/tpm.c:872:
+		       (int) data[19]);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#292: FILE: drivers/char/tpm/tpm.h:44:
+extern ssize_t tpm_show_caps_1_2(struct device *, struct device_attribute *attr,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct device *' should also have an identifier name
#292: FILE: drivers/char/tpm/tpm.h:44:
+extern ssize_t tpm_show_caps_1_2(struct device *, struct device_attribute *attr,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#292: FILE: drivers/char/tpm/tpm.h:44:
+extern ssize_t tpm_show_caps_1_2(struct device *, struct device_attribute *attr,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#293: FILE: drivers/char/tpm/tpm.h:45:
+extern ssize_t tpm_show_caps_1_2(struct device *, struct device_attribute *attr,
+				char *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#296: FILE: drivers/char/tpm/tpm.h:48:
+extern ssize_t tpm_show_state(struct device *, struct device_attribute *attr,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct device *' should also have an identifier name
#296: FILE: drivers/char/tpm/tpm.h:48:
+extern ssize_t tpm_show_state(struct device *, struct device_attribute *attr,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#296: FILE: drivers/char/tpm/tpm.h:48:
+extern ssize_t tpm_show_state(struct device *, struct device_attribute *attr,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#297: FILE: drivers/char/tpm/tpm.h:49:
+extern ssize_t tpm_show_state(struct device *, struct device_attribute *attr,
+				char *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#313: FILE: drivers/char/tpm/tpm.h:117:
+extern void tpm_get_timeouts(struct tpm_chip *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#314: FILE: drivers/char/tpm/tpm.h:118:
+extern void tpm_gen_interrupt(struct tpm_chip *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct tpm_chip *' should also have an identifier name
#314: FILE: drivers/char/tpm/tpm.h:118:
+extern void tpm_gen_interrupt(struct tpm_chip *);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000088009.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 15 errors, 15 warnings, 29 checks, 268 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000088009.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
