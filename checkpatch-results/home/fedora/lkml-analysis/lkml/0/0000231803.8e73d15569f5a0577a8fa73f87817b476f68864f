WARNING:CVS_KEYWORD: CVS style keyword markers, these will _not_ be updated
#46: FILE: drivers/s390/block/dasd_devmap.c:14:
+ * $Revision: 1.33 $

Since linux moved to git, the CVS markers are no longer used.
So, CVS style keywords ($Id$, $Revision$, $Log$) should not be
added.

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#60: FILE: drivers/s390/block/dasd_devmap.c:212:
+static char *
+dasd_parse_keyword( char *parsestring ) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space prohibited after that open parenthesis '('
#61: FILE: drivers/s390/block/dasd_devmap.c:213:
+dasd_parse_keyword( char *parsestring ) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited before that close parenthesis ')'
#61: FILE: drivers/s390/block/dasd_devmap.c:213:
+dasd_parse_keyword( char *parsestring ) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#62: FILE: drivers/s390/block/dasd_devmap.c:214:
+dasd_parse_keyword( char *parsestring ) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#66: FILE: drivers/s390/block/dasd_devmap.c:218:
+	nextcomma = strchr(parsestring,',');
 	                              ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#73: FILE: drivers/s390/block/dasd_devmap.c:225:
+        }$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#73: FILE: drivers/s390/block/dasd_devmap.c:225:
+        }$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#74: FILE: drivers/s390/block/dasd_devmap.c:226:
+	if (strncmp ("autodetect", parsestring, length) == 0) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#76: FILE: drivers/s390/block/dasd_devmap.c:228:
+		MESSAGE (KERN_INFO, "%s",

ERROR:CODE_INDENT: code indent should use tabs where possible
#78: FILE: drivers/s390/block/dasd_devmap.c:230:
+                return residual_str;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#78: FILE: drivers/s390/block/dasd_devmap.c:230:
+                return residual_str;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#79: FILE: drivers/s390/block/dasd_devmap.c:231:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#79: FILE: drivers/s390/block/dasd_devmap.c:231:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#80: FILE: drivers/s390/block/dasd_devmap.c:232:
+        if (strncmp ("probeonly", parsestring, length) == 0) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#80: FILE: drivers/s390/block/dasd_devmap.c:232:
+        if (strncmp ("probeonly", parsestring, length) == 0) {$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#80: FILE: drivers/s390/block/dasd_devmap.c:232:
+        if (strncmp ("probeonly", parsestring, length) == 0) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#84: FILE: drivers/s390/block/dasd_devmap.c:236:
+                return residual_str;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#84: FILE: drivers/s390/block/dasd_devmap.c:236:
+                return residual_str;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#85: FILE: drivers/s390/block/dasd_devmap.c:237:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#85: FILE: drivers/s390/block/dasd_devmap.c:237:
+        }$

WARNING:TYPO_SPELLING: 'interprete' may be misspelled - perhaps 'interpret'?
#90: FILE: drivers/s390/block/dasd_devmap.c:242:
+ * Try to interprete the first element on the comma separated parse string
           ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'successfull' may be misspelled - perhaps 'successful'?
#92: FILE: drivers/s390/block/dasd_devmap.c:244:
+ * successfull, create the matching dasd_devmap entries and return a pointer
    ^^^^^^^^^^^

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#99: FILE: drivers/s390/block/dasd_devmap.c:248:
+static char *
+dasd_parse_range( char *parsestring ) {

ERROR:SPACING: space prohibited after that open parenthesis '('
#100: FILE: drivers/s390/block/dasd_devmap.c:249:
+dasd_parse_range( char *parsestring ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#100: FILE: drivers/s390/block/dasd_devmap.c:249:
+dasd_parse_range( char *parsestring ) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#101: FILE: drivers/s390/block/dasd_devmap.c:250:
+dasd_parse_range( char *parsestring ) {
+

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#107: FILE: drivers/s390/block/dasd_devmap.c:255:
+	char bus_id[BUS_ID_SIZE+1], *str;
 	                       ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#206: FILE: drivers/s390/block/dasd_devmap.c:295:
+dasd_parse_next_element( char *parsestring ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#206: FILE: drivers/s390/block/dasd_devmap.c:295:
+dasd_parse_next_element( char *parsestring ) {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#207: FILE: drivers/s390/block/dasd_devmap.c:296:
+	char * residual_str;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#208: FILE: drivers/s390/block/dasd_devmap.c:297:
+	char * residual_str;
+	residual_str = dasd_parse_keyword(parsestring);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#239: FILE: drivers/s390/block/dasd_devmap.c:326:
+			if(IS_ERR(parsestring)) {

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000231803.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 17 errors, 13 warnings, 3 checks, 204 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000231803.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
