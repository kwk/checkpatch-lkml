WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#37: 
diff -Nur linux-2.6.0-0.test9.waitq2/fs/autofs4/autofs_i.h linux-2.6.0-0.test9.readdir/fs/autofs4/autofs_i.h

WARNING:RETURN_VOID: void function return statements are not generally useful
#56: FILE: fs/autofs4/autofs_i.h:136:
+	return;
+}

WARNING:CONST_STRUCT: struct file_operations should normally be const
#65: FILE: fs/autofs4/autofs_i.h:154:
+extern struct file_operations autofs4_dir_operations;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

ERROR:SPACING: space required after that ',' (ctx:OxV)
#74: FILE: fs/autofs4/autofs_i.h:171:
+int autofs4_wait(struct autofs_sb_info *,struct dentry *, enum autofs_notify);
                                         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct autofs_sb_info *' should also have an identifier name
#74: FILE: fs/autofs4/autofs_i.h:171:
+int autofs4_wait(struct autofs_sb_info *,struct dentry *, enum autofs_notify);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#74: FILE: fs/autofs4/autofs_i.h:171:
+int autofs4_wait(struct autofs_sb_info *,struct dentry *, enum autofs_notify);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#119: FILE: fs/autofs4/root.c:30:
+static int autofs4_dir_readdir(struct file * filp, void * dirent, filldir_t filldir);
                                              ^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#119: FILE: fs/autofs4/root.c:30:
+static int autofs4_dir_readdir(struct file * filp, void * dirent, filldir_t filldir);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#119: FILE: fs/autofs4/root.c:30:
+static int autofs4_dir_readdir(struct file * filp, void * dirent, filldir_t filldir);

WARNING:CONST_STRUCT: struct file_operations should normally be const
#131: FILE: fs/autofs4/root.c:41:
+struct file_operations autofs4_dir_operations = {

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#166: FILE: fs/autofs4/root.c:101:
+static int autofs4_dcache_readdir(struct file * filp, void * dirent, filldir_t filldir)
                                                 ^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#166: FILE: fs/autofs4/root.c:101:
+static int autofs4_dcache_readdir(struct file * filp, void * dirent, filldir_t filldir)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#166: FILE: fs/autofs4/root.c:101:
+static int autofs4_dcache_readdir(struct file * filp, void * dirent, filldir_t filldir)

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#172: FILE: fs/autofs4/root.c:107:
+	switch (i) {
+		case 0:
[...]
+		case 1:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#178: FILE: fs/autofs4/root.c:113:
+			/* fallthrough */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#180: FILE: fs/autofs4/root.c:115:
+			if (filldir(dirent, "..", 2, i, dentry->d_parent->d_inode->i_ino, DT_DIR) < 0)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#184: FILE: fs/autofs4/root.c:119:
+			/* fallthrough */

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#187: FILE: fs/autofs4/root.c:122:
+			int j = i-2;
 			         ^

ERROR:SPACING: space required before the open parenthesis '('
#203: FILE: fs/autofs4/root.c:138:
+			while(1) {

WARNING:LONG_LINE: line length of 142 exceeds 100 columns
#208: FILE: fs/autofs4/root.c:143:
+					if (filldir(dirent, de->d_name.name, de->d_name.len, filp->f_pos, de->d_inode->i_ino, DT_UNKNOWN) < 0)

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'autofs4_dir_open', this function's name, in a string
#231: FILE: fs/autofs4/root.c:166:
+	DPRINTK(("autofs4_dir_open: file=%p dentry=%p %.*s\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#232: FILE: fs/autofs4/root.c:167:
+	DPRINTK(("autofs4_dir_open: file=%p dentry=%p %.*s\n",
+		file, dentry, dentry->d_name.len, dentry->d_name.name));

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'autofs4_dir_open', this function's name, in a string
#238: FILE: fs/autofs4/root.c:173:
+		DPRINTK(("autofs4_dir_open: dentry busy\n"));

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#243: FILE: fs/autofs4/root.c:178:
+		struct nameidata nd;
 		                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#254: FILE: fs/autofs4/root.c:189:
+		nd.flags = LOOKUP_CONTINUE;
 		^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#255: FILE: fs/autofs4/root.c:190:
+		status = (dentry->d_op->d_revalidate)(dentry, &nd);
 		                                               ^^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around function pointer (dentry->d_op->d_revalidate)
#255: FILE: fs/autofs4/root.c:190:
+		status = (dentry->d_op->d_revalidate)(dentry, &nd);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#266: FILE: fs/autofs4/root.c:201:
+		while (follow_down(&fp_mnt, &fp_dentry) && d_mountpoint(fp_dentry));

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'autofs4_dir_close', this function's name, in a string
#286: FILE: fs/autofs4/root.c:221:
+	DPRINTK(("autofs4_dir_close: file=%p dentry=%p %.*s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#287: FILE: fs/autofs4/root.c:222:
+	DPRINTK(("autofs4_dir_close: file=%p dentry=%p %.*s\n",
+		file, dentry, dentry->d_name.len, dentry->d_name.name));

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'autofs4_dir_close', this function's name, in a string
#293: FILE: fs/autofs4/root.c:228:
+		DPRINTK(("autofs4_dir_close: dentry busy\n"));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#317: FILE: fs/autofs4/root.c:252:
+	DPRINTK(("autofs4_readdir: file=%p dentry=%p %.*s\n",
+		file, dentry, dentry->d_name.len, dentry->d_name.name));

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dentry->d_inode"
#378: FILE: fs/autofs4/root.c:306:
+	if (dentry->d_inode == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#394: FILE: fs/autofs4/root.c:329:
+		DPRINTK(("try_to_fill_entry: waiting for mount name=%.*s\n",
+			dentry->d_name.len, dentry->d_name.name));

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#431: FILE: fs/autofs4/root.c:357:
+static int autofs4_revalidate(struct dentry * dentry, struct nameidata *nd)
                                                                         ^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#431: FILE: fs/autofs4/root.c:357:
+static int autofs4_revalidate(struct dentry * dentry, struct nameidata *nd)

WARNING:TYPO_SPELLING: 'exaclty' may be misspelled - perhaps 'exactly'?
#503: FILE: fs/autofs4/root.c:427:
+ * to do the lookup again in exaclty the same way.
                              ^^^^^^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#505: FILE: fs/autofs4/root.c:429:
+static struct dentry * real_lookup(struct dentry * parent, struct qstr * name, struct nameidata *nd)
                                                                                                  ^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#505: FILE: fs/autofs4/root.c:429:
+static struct dentry * real_lookup(struct dentry * parent, struct qstr * name, struct nameidata *nd)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#505: FILE: fs/autofs4/root.c:429:
+static struct dentry * real_lookup(struct dentry * parent, struct qstr * name, struct nameidata *nd)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#505: FILE: fs/autofs4/root.c:429:
+static struct dentry * real_lookup(struct dentry * parent, struct qstr * name, struct nameidata *nd)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#507: FILE: fs/autofs4/root.c:431:
+	struct dentry * result;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#513: FILE: fs/autofs4/root.c:437:
+		struct dentry * dentry = d_alloc(parent, name);

WARNING:LINE_SPACING: Missing a blank line after declarations
#514: FILE: fs/autofs4/root.c:438:
+		struct dentry * dentry = d_alloc(parent, name);
+		result = ERR_PTR(-ENOMEM);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#516: FILE: fs/autofs4/root.c:440:
+			result = dir->i_op->lookup(dir, dentry, nd);
 			                                        ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#528: FILE: fs/autofs4/root.c:452:
+		if (!result->d_op->d_revalidate(result, nd) && !d_invalidate(result)) {
 		                                        ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#541: FILE: fs/autofs4/root.c:465:
+	DPRINTK(("autofs4_is_mountpoint: parent=%p %.*s\n",
+		parent, parent->d_name.len, parent->d_name.name));

ERROR:SPACING: space prohibited after that open parenthesis '('
#545: FILE: fs/autofs4/root.c:469:
+	while ( tmp != &parent->d_subdirs ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#545: FILE: fs/autofs4/root.c:469:
+	while ( tmp != &parent->d_subdirs ) {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#546: FILE: fs/autofs4/root.c:470:
+		struct dentry * dentry = list_entry(tmp, struct dentry, d_child);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#574: FILE: fs/autofs4/root.c:493:
+	DPRINTK(("autofs4_dir_lookup: lookup of %p %.*s/%.*s\n",
+		dentry->d_parent,

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#585: FILE: fs/autofs4/root.c:504:
+	 * we need to mount it and redo the lookup */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#588: FILE: fs/autofs4/root.c:507:
+		DPRINTK(("autofs4_dir_lookup: waiting for mount name=%.*s\n",
+			parent->d_name.len, parent->d_name.name));

WARNING:TABSTOP: Statements should start on a tabstop
#596: FILE: fs/autofs4/root.c:515:
+		 if ( !status )

ERROR:SPACING: space prohibited after that open parenthesis '('
#596: FILE: fs/autofs4/root.c:515:
+		 if ( !status )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#596: FILE: fs/autofs4/root.c:515:
+		 if ( !status )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#601: FILE: fs/autofs4/root.c:520:
+	if (current->fs->pwd == parent )

ERROR:SPACING: space prohibited after that open parenthesis '('
#607: FILE: fs/autofs4/root.c:526:
+	if ( !mnt )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#607: FILE: fs/autofs4/root.c:526:
+	if ( !mnt )

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#615: FILE: fs/autofs4/root.c:534:
+	return real_lookup(mnt->mnt_root, name, nd);
 	                                        ^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ino"
#649: FILE: fs/autofs4/root.c:623:
+	if (ino == NULL)

ERROR:SPACING: space prohibited after that open parenthesis '('
#718: FILE: fs/autofs4/root.c:728:
+	if ( !autofs4_oz_mode(sbi) )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#718: FILE: fs/autofs4/root.c:728:
+	if ( !autofs4_oz_mode(sbi) )

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ino"
#728: FILE: fs/autofs4/root.c:735:
+	if (ino == NULL)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#743: FILE: fs/autofs4/root.c:756:
+/* Identify autofs_dentries - this is so we can tell if there's
+   an extra dentry refcount or not.  We only hold a refcount on the

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "dentry->d_fsdata"
#751: FILE: fs/autofs4/root.c:764:
+		dentry->d_fsdata != NULL;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#835: FILE: fs/autofs4/waitq.c:163:
+int autofs4_wait(struct autofs_sb_info *sbi, struct dentry *dentry,
 		enum autofs_notify notify)

ERROR:SPACING: space prohibited after that open parenthesis '('
#880: FILE: fs/autofs4/waitq.c:195:
+		if ( !wq ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#880: FILE: fs/autofs4/waitq.c:195:
+		if ( !wq ) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#928: FILE: include/linux/auto_fs4.h:51:
+#define AUTOFS_IOC_PROTOSUBVER  _IOR(0x93,0x67,int)
                                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#928: FILE: include/linux/auto_fs4.h:51:
+#define AUTOFS_IOC_PROTOSUBVER  _IOR(0x93,0x67,int)
                                               ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000308156.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 28 errors, 29 warnings, 14 checks, 841 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000308156.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
