WARNING:TYPO_SPELLING: 'serice' may be misspelled - perhaps 'service'?
#47: 
     http://www.serice.net/shunt/
                ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'Serice' may be misspelled - perhaps 'Service'?
#69: 
Paul Serice
     ^^^^^^

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#78: 
diff -uprN -X dontdiff linux-2.6.7-rc2/fs/isofs/Makefile linux-2.6.7-rc2-isofs.3/fs/isofs/Makefile

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#117: FILE: fs/isofs/export.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#118: FILE: fs/isofs/export.c:2:
+ * fs/isofs/export.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:TYPO_SPELLING: 'Serice' may be misspelled - perhaps 'Service'?
#120: FILE: fs/isofs/export.c:4:
+ *  (C) 2004  Paul Serice - The new inode scheme requires switching
                    ^^^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#146: FILE: fs/isofs/export.c:30:
+	struct dentry *result;
+	if (block == 0)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!inode"
#149: FILE: fs/isofs/export.c:33:
+	if (inode == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#151: FILE: fs/isofs/export.c:35:
+	if (is_bad_inode(inode)
+	    || (generation && inode->i_generation != generation))
+	{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#152: FILE: fs/isofs/export.c:36:
+	if (is_bad_inode(inode)
+	    || (generation && inode->i_generation != generation))

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#154: FILE: fs/isofs/export.c:38:
+		iput(inode);
 		^^^^

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#159: FILE: fs/isofs/export.c:43:
+		iput(inode);
 		^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#172: FILE: fs/isofs/export.c:56:
+	__u32 generation = objp[2];
+	return isofs_export_iget(sb, block, offset, generation);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#179: FILE: fs/isofs/export.c:63:
+ * isofs_normalize_block_and_offset(). */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#188: FILE: fs/isofs/export.c:72:
+	struct buffer_head * bh = NULL;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#193: FILE: fs/isofs/export.c:77:
+		printk(KERN_ERR "isofs: isofs_export_get_parent(): "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'isofs_export_get_parent', this function's name, in a string
#193: FILE: fs/isofs/export.c:77:
+		printk(KERN_ERR "isofs: isofs_export_get_parent(): "

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:SPLIT_STRING: quoted string split across lines
#194: FILE: fs/isofs/export.c:78:
+		printk(KERN_ERR "isofs: isofs_export_get_parent(): "
+		       "child is not a directory!\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#201: FILE: fs/isofs/export.c:85:
+	 * normalized for some reason. */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#203: FILE: fs/isofs/export.c:87:
+		printk(KERN_ERR "isofs: isofs_export_get_parent(): "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'isofs_export_get_parent', this function's name, in a string
#203: FILE: fs/isofs/export.c:87:
+		printk(KERN_ERR "isofs: isofs_export_get_parent(): "

WARNING:SPLIT_STRING: quoted string split across lines
#204: FILE: fs/isofs/export.c:88:
+		printk(KERN_ERR "isofs: isofs_export_get_parent(): "
+		       "child directory not normalized!\n");

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#211: FILE: fs/isofs/export.c:95:
+	 * the ".." entry is located in the same block. */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bh"
#216: FILE: fs/isofs/export.c:100:
+	if (bh == NULL) {

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#222: FILE: fs/isofs/export.c:106:
+	de = (struct iso_directory_record*)bh->b_data;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#226: FILE: fs/isofs/export.c:110:
+	de = (struct iso_directory_record*)(bh->b_data + parent_offset);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'de->name[0] != 1'
#229: FILE: fs/isofs/export.c:113:
+	if ((isonum_711(de->name_len) != 1) || (de->name[0] != 1)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#230: FILE: fs/isofs/export.c:114:
+		printk(KERN_ERR "isofs: Unable to find the \"..\" "

WARNING:SPLIT_STRING: quoted string split across lines
#231: FILE: fs/isofs/export.c:115:
+		printk(KERN_ERR "isofs: Unable to find the \"..\" "
+		       "directory for NFS.\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!parent_inode"
#243: FILE: fs/isofs/export.c:127:
+	if (parent_inode == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rv"
#250: FILE: fs/isofs/export.c:134:
+	if (rv == NULL) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#256: FILE: fs/isofs/export.c:140:
+	if (bh) {
+		brelse(bh);
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#268: FILE: fs/isofs/export.c:152:
+	struct inode * inode = dentry->d_inode;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#269: FILE: fs/isofs/export.c:153:
+	struct iso_inode_info * ei = ISOFS_I(inode);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#272: FILE: fs/isofs/export.c:156:
+	__u16 *fh16 = (__u16*)fh32;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#274: FILE: fs/isofs/export.c:158:
+^I/* $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#286: FILE: fs/isofs/export.c:170:
+ ^Ifh16[2] = (__u16)ei->i_iget5_offset;  /* fh16 [sic] */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#286: FILE: fs/isofs/export.c:170:
+ ^Ifh16[2] = (__u16)ei->i_iget5_offset;  /* fh16 [sic] */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#286: FILE: fs/isofs/export.c:170:
+ ^Ifh16[2] = (__u16)ei->i_iget5_offset;  /* fh16 [sic] */$

WARNING:LINE_SPACING: Missing a blank line after declarations
#291: FILE: fs/isofs/export.c:175:
+		struct iso_inode_info *eparent;
+		spin_lock(&dentry->d_lock);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#305: FILE: fs/isofs/export.c:189:
+
+

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#314: FILE: fs/isofs/export.c:198:
+	__u16 *fh16 = (__u16*)fh32;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#324: FILE: fs/isofs/export.c:208:
+^I$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#329: FILE: fs/isofs/export.c:213:
+		if (fh_len > 2) parent[0] = fh32[3];

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#331: FILE: fs/isofs/export.c:215:
+		if (fh_len > 4) parent[2] = fh32[4];

CHECK:LINE_SPACING: Please don't use multiple blank lines
#338: FILE: fs/isofs/export.c:222:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#341: FILE: fs/isofs/export.c:225:
+ * sorely missed. */

WARNING:TYPO_SPELLING: 'Serice' may be misspelled - perhaps 'Service'?
#355: FILE: fs/isofs/inode.c:10:
+ *	2004  Paul Serice - Comprehensive Inode Scheme
   	           ^^^^^^

WARNING:TYPO_SPELLING: 'Serice' may be misspelled - perhaps 'Service'?
#356: FILE: fs/isofs/inode.c:11:
+ *	2004  Paul Serice - NFS Export Operations
   	           ^^^^^^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#388: FILE: fs/isofs/inode.c:731:
+	first_data_zone = isonum_733 (rootp->extent) +

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#389: FILE: fs/isofs/inode.c:732:
+			  isonum_711 (rootp->ext_attr_length);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#398: FILE: fs/isofs/inode.c:738:
+	printk(KERN_DEBUG "First datazone:%ld\n", sbi->s_firstdatazone);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#409: FILE: fs/isofs/inode.c:755:
+		first_data_zone = isonum_733 (rootp->extent) +

ERROR:CODE_INDENT: code indent should use tabs where possible
#410: FILE: fs/isofs/inode.c:756:
+^I^I^I  ^Iisonum_711 (rootp->ext_attr_length);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#410: FILE: fs/isofs/inode.c:756:
+^I^I^I  ^Iisonum_711 (rootp->ext_attr_length);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#410: FILE: fs/isofs/inode.c:756:
+			  	isonum_711 (rootp->ext_attr_length);

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#471: FILE: fs/isofs/inode.c:986:
+				sect_size = ISOFS_I(ninode)->i_section_size >> ISOFS_BUFFER_BITS(ninode);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#480: FILE: fs/isofs/inode.c:993:
+					printk("isofs_get_blocks: block=%ld firstext=%u sect_size=%u "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'isofs_get_blocks', this function's name, in a string
#480: FILE: fs/isofs/inode.c:993:
+					printk("isofs_get_blocks: block=%ld firstext=%u sect_size=%u "

WARNING:SPLIT_STRING: quoted string split across lines
#481: FILE: fs/isofs/inode.c:994:
+					printk("isofs_get_blocks: block=%ld firstext=%u sect_size=%u "
+					       "nextblk=%lu nextoff=%lu\n",

CHECK:SPACING: No space is necessary after a cast
#482: FILE: fs/isofs/inode.c:995:
+					       iblock, firstext, (unsigned) sect_size,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#482: FILE: fs/isofs/inode.c:995:
+					       iblock, firstext, (unsigned) sect_size,

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#518: FILE: fs/isofs/inode.c:1101:
+	 * this is the last section. */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#551: FILE: fs/isofs/inode.c:1157:
+^I^I^Iei->i_next_section_offset = offset_saved;^I^I^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#566: FILE: fs/isofs/inode.c:1187:
+^I  ^I"isofs_read_level3_size: inode=%lu\n",$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#566: FILE: fs/isofs/inode.c:1187:
+^I  ^I"isofs_read_level3_size: inode=%lu\n",$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#627: FILE: fs/isofs/inode.c:1396:
+		(struct isofs_iget5_callback_data*)data;

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#629: FILE: fs/isofs/inode.c:1398:
+	return (i->i_iget5_block == d->block)
+	       && (i->i_iget5_offset == d->offset);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#636: FILE: fs/isofs/inode.c:1405:
+		(struct isofs_iget5_callback_data*)data;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#645: FILE: fs/isofs/inode.c:1414:
+ * include/linux/fs.h */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#664: FILE: fs/isofs/inode.c:1433:
+^I$

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#691: FILE: fs/isofs/namei.c:63:
+	unsigned long *block_rv, unsigned long* offset_rv,

ERROR:CODE_INDENT: code indent should use tabs where possible
#726: FILE: fs/isofs/namei.c:158:
+                        *block_rv = block_saved;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#726: FILE: fs/isofs/namei.c:158:
+                        *block_rv = block_saved;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#727: FILE: fs/isofs/namei.c:159:
+                        *offset_rv = offset_saved;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#727: FILE: fs/isofs/namei.c:159:
+                        *offset_rv = offset_saved;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#790: FILE: fs/isofs/rock.c:448:
+        struct iso_inode_info *ei = ISOFS_I(inode);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#790: FILE: fs/isofs/rock.c:448:
+        struct iso_inode_info *ei = ISOFS_I(inode);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#816: FILE: fs/isofs/rock.c:471:
+        offset = ei->i_iget5_offset;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#816: FILE: fs/isofs/rock.c:471:
+        offset = ei->i_iget5_offset;$

CHECK:SPACING: No space is necessary after a cast
#817: FILE: fs/isofs/rock.c:472:
+	pnt = (unsigned char *) bh->b_data + offset;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#836: FILE: include/linux/iso_fs.h:234:
+extern struct inode *isofs_iget(struct super_block *sb,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:CODE_INDENT: code indent should use tabs where possible
#837: FILE: include/linux/iso_fs.h:235:
+                                unsigned long block,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#837: FILE: include/linux/iso_fs.h:235:
+                                unsigned long block,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#838: FILE: include/linux/iso_fs.h:236:
+                                unsigned long offset);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#838: FILE: include/linux/iso_fs.h:236:
+                                unsigned long offset);$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#850: FILE: include/linux/iso_fs.h:248:
+ * file. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#887: FILE: include/linux/iso_fs.h:285:
+ * types. */

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#888: FILE: include/linux/iso_fs.h:286:
+static void inline

The inline keyword should sit between storage class and type.

For example, the following segment::

  inline static int example_function(void)
  {
          ...
  }

should be::

  static inline int example_function(void)
  {
          ...
  }

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#889: FILE: include/linux/iso_fs.h:287:
+isofs_normalize_block_and_offset(struct iso_directory_record* de,

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000277968.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 28 errors, 50 warnings, 12 checks, 789 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000277968.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
