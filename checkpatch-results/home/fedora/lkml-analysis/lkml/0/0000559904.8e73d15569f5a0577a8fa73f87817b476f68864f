WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#29: 
diff -Nur --exclude-from=exclude linux.orig/include/linux/mm.h linux/include/linux/mm.h

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#36: FILE: include/linux/mm.h:454:
+extern inline struct page * ___find_page_nolock(struct address_space *, unsigned long, struct page *);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#36: FILE: include/linux/mm.h:454:
+extern inline struct page * ___find_page_nolock(struct address_space *, unsigned long, struct page *);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#48: FILE: include/linux/swap.h:169:
+ $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#48: FILE: include/linux/swap.h:169:
+ $

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#61: FILE: mm/filemap.c:245:
+inline struct page * ___find_page_nolock(struct address_space *mapping, unsigned long offset, struct page *page)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#61: FILE: mm/filemap.c:245:
+inline struct page * ___find_page_nolock(struct address_space *mapping, unsigned long offset, struct page *page)

WARNING:LONG_LINE: line length of 118 exceeds 100 columns
#79: FILE: mm/filemap.c:262:
+static inline struct page * __find_page_nolock(struct address_space *mapping, unsigned long offset, struct page *page)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#79: FILE: mm/filemap.c:262:
+static inline struct page * __find_page_nolock(struct address_space *mapping, unsigned long offset, struct page *page)

ERROR:SPACING: space required before the open parenthesis '('
#83: FILE: mm/filemap.c:266:
+	if(!page)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#114: FILE: mm/swap_state.c:22:
+static inline struct page * swap_page_dirty(unsigned long, unsigned long, struct swap_info_struct *);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#114: FILE: mm/swap_state.c:22:
+static inline struct page * swap_page_dirty(unsigned long, unsigned long, struct swap_info_struct *);

CHECK:BIT_MACRO: Prefer using the BIT macro
#116: FILE: mm/swap_state.c:24:
+#define SWAP_WRITE_CLUSTER (1 << page_cluster)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#124: FILE: mm/swap_state.c:31:
+	struct page *cpages[SWAP_WRITE_CLUSTER*2];
 	                                      ^

ERROR:SPACING: space required before the open parenthesis '('
#134: FILE: mm/swap_state.c:41:
+	if(!swap->swap_device) {

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#139: FILE: mm/swap_state.c:46:
+	page_offset = offset = SWP_OFFSET(entry);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#151: FILE: mm/swap_state.c:58:
+^I $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#152: FILE: mm/swap_state.c:59:
+^Iwhile (count < SWAP_WRITE_CLUSTER) { $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#155: FILE: mm/swap_state.c:62:
+^I^Iif(offset <= 0) $

ERROR:SPACING: space required before the open parenthesis '('
#155: FILE: mm/swap_state.c:62:
+		if(offset <= 0) 

ERROR:SPACING: space required before the open parenthesis '('
#161: FILE: mm/swap_state.c:68:
+		if(!p)

WARNING:LINE_SPACING: Missing a blank line after declarations
#175: FILE: mm/swap_state.c:82:
+		struct page *p = NULL;
+		offset = page_offset + curr;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#177: FILE: mm/swap_state.c:84:
+		if(offset >= swap->max)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#181: FILE: mm/swap_state.c:88:
+^I^Iif(!p) $

ERROR:SPACING: space required before the open parenthesis '('
#181: FILE: mm/swap_state.c:88:
+		if(!p) 

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#195: FILE: mm/swap_state.c:102:
+	for(i=0; i<count; i++) {
 	     ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#195: FILE: mm/swap_state.c:102:
+	for(i=0; i<count; i++) {
 	          ^

ERROR:SPACING: space required before the open parenthesis '('
#195: FILE: mm/swap_state.c:102:
+	for(i=0; i<count; i++) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#197: FILE: mm/swap_state.c:104:
+		int pos = first + i;
+		rw_swap_page(WRITE, cpages[pos], 0);

ERROR:SPACING: space required before the open parenthesis '('
#200: FILE: mm/swap_state.c:107:
+		if(pos != SWAP_WRITE_CLUSTER)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#212: FILE: mm/swap_state.c:128:
+static inline struct page * swap_page_dirty(unsigned long offset, unsigned long type,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#213: FILE: mm/swap_state.c:129:
+^I^Istruct swap_info_struct *swapdev) $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#213: FILE: mm/swap_state.c:129:
+static inline struct page * swap_page_dirty(unsigned long offset, unsigned long type,
+		struct swap_info_struct *swapdev) 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#214: FILE: mm/swap_state.c:130:
+{ $

ERROR:SPACING: space required before the open parenthesis '('
#223: FILE: mm/swap_state.c:139:
+	if(!swapdev->swap_map[offset])

ERROR:SPACING: space required before the open parenthesis '('
#226: FILE: mm/swap_state.c:142:
+	if(swapdev->swap_map[offset] == SWAP_MAP_BAD)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#228: FILE: mm/swap_state.c:144:
+^I$

ERROR:SPACING: space required before the open parenthesis '('
#233: FILE: mm/swap_state.c:149:
+	if(!page)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#236: FILE: mm/swap_state.c:152:
+^Iif(TryLockPage(page)) $

ERROR:SPACING: space required before the open parenthesis '('
#236: FILE: mm/swap_state.c:152:
+	if(TryLockPage(page)) 

CHECK:CAMELCASE: Avoid CamelCase: <TryLockPage>
#236: FILE: mm/swap_state.c:152:
+	if(TryLockPage(page)) 

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

ERROR:SPACING: space required before the open parenthesis '('
#241: FILE: mm/swap_state.c:157:
+	if(PageDirty(page) && PageSwapCache(page))

CHECK:CAMELCASE: Avoid CamelCase: <UnlockPage>
#244: FILE: mm/swap_state.c:160:
+	UnlockPage(page);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000559904.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 29 errors, 8 warnings, 6 checks, 202 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000559904.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
