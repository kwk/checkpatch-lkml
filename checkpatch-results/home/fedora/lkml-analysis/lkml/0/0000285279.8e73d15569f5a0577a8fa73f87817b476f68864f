WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#43: FILE: include/linux/ckrm_net.h:1:
+/* ckrm_rc.h - Header file to be used by Resource controllers of CKRM

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#46: FILE: include/linux/ckrm_net.h:4:
+ * $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#47: FILE: include/linux/ckrm_net.h:5:
+ * Provides data structures, macros and kernel API of CKRM for $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#51: FILE: include/linux/ckrm_net.h:9:
+ * $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#65: FILE: include/linux/ckrm_net.h:23:
+^Iint ^I^I ns_type;                    // type of net class$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#74: FILE: include/linux/ckrm_net.h:32:
+^I__u16 ^I^Ins_dport;       // listener's port$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#77: FILE: include/linux/ckrm_net.h:35:
+^Istruct ckrm_sock_class ^I*core;^I^I$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#77: FILE: include/linux/ckrm_net.h:35:
+^Istruct ckrm_sock_class ^I*core;^I^I$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#88: FILE: kernel/ckrm/ckrm_sockc.c:1:
+/* ckrm_sock.c - Class-based Kernel Resource Management (CKRM)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#94: FILE: kernel/ckrm/ckrm_sockc.c:7:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#95: FILE: kernel/ckrm/ckrm_sockc.c:8:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#96: FILE: kernel/ckrm/ckrm_sockc.c:9:
+ * Provides kernel API of CKRM for in-kernel,per-resource controllers $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#97: FILE: kernel/ckrm/ckrm_sockc.c:10:
+ * (one each for cpu, memory, io, network) and callbacks for $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#101: FILE: kernel/ckrm/ckrm_sockc.c:14:
+ * $

WARNING:TYPO_SPELLING: 'paramter' may be misspelled - perhaps 'parameter'?
#117: FILE: kernel/ckrm/ckrm_sockc.c:30:
+ *        surrounding logic. Added task paramter for all CE callbacks.
                                         ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#129: FILE: kernel/ckrm/ckrm_sockc.c:42:
+#include <asm/uaccess.h>

ERROR:TRAILING_WHITESPACE: trailing whitespace
#164: FILE: kernel/ckrm/ckrm_sockc.c:77:
+^I.typeID         = CKRM_CLASSTYPE_SOCKET_CLASS, $

CHECK:CAMELCASE: Avoid CamelCase: <typeID>
#164: FILE: kernel/ckrm/ckrm_sockc.c:77:
+	.typeID         = CKRM_CLASSTYPE_SOCKET_CLASS, 

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

ERROR:TRAILING_WHITESPACE: trailing whitespace
#165: FILE: kernel/ckrm/ckrm_sockc.c:78:
+^I.maxdepth       = 3,                           $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#166: FILE: kernel/ckrm/ckrm_sockc.c:79:
+^I.resid_reserved = 0,                           $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#167: FILE: kernel/ckrm/ckrm_sockc.c:80:
+^I.max_res_ctlrs  = CKRM_MAX_RES_CTLRS,        $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#174: FILE: kernel/ckrm/ckrm_sockc.c:87:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#175: FILE: kernel/ckrm/ckrm_sockc.c:88:
+^I// private version of functions $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#181: FILE: kernel/ckrm/ckrm_sockc.c:94:
+^I// use of default functions $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#190: FILE: kernel/ckrm/ckrm_sockc.c:103:
+^I.add_resctrl    = &sock_add_resctrl,^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#198: FILE: kernel/ckrm/ckrm_sockc.c:111:
+        atomic_inc(&ns->ns_refcnt);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#198: FILE: kernel/ckrm/ckrm_sockc.c:111:
+        atomic_inc(&ns->ns_refcnt);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#199: FILE: kernel/ckrm/ckrm_sockc.c:112:
+        return;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#199: FILE: kernel/ckrm/ckrm_sockc.c:112:
+        return;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#205: FILE: kernel/ckrm/ckrm_sockc.c:118:
+        if (atomic_dec_and_test(&ns->ns_refcnt))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#205: FILE: kernel/ckrm/ckrm_sockc.c:118:
+        if (atomic_dec_and_test(&ns->ns_refcnt))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#206: FILE: kernel/ckrm/ckrm_sockc.c:119:
+                kfree(ns);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#206: FILE: kernel/ckrm/ckrm_sockc.c:119:
+                kfree(ns);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#208: FILE: kernel/ckrm/ckrm_sockc.c:121:
+        return;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#208: FILE: kernel/ckrm/ckrm_sockc.c:121:
+        return;$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#210: FILE: kernel/ckrm/ckrm_sockc.c:123:
+}
+/*

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#211: FILE: kernel/ckrm/ckrm_sockc.c:124:
+ * Change the class of a netstruct $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#213: FILE: kernel/ckrm/ckrm_sockc.c:126:
+ * Change the task's task class  to "newcls" if the task's current $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#220: FILE: kernel/ckrm/ckrm_sockc.c:133:
+sock_set_class(struct ckrm_net_struct *ns, struct ckrm_sock_class *newcls,
+	      struct ckrm_sock_class *oldcls, enum ckrm_event event)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'newcls == oldcls'
#227: FILE: kernel/ckrm/ckrm_sockc.c:140:
+	if ((newcls == oldcls) || (newcls == NULL)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'newcls == NULL'
#227: FILE: kernel/ckrm/ckrm_sockc.c:140:
+	if ((newcls == oldcls) || (newcls == NULL)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!newcls"
#227: FILE: kernel/ckrm/ckrm_sockc.c:140:
+	if ((newcls == oldcls) || (newcls == NULL)) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:TRAILING_WHITESPACE: trailing whitespace
#237: FILE: kernel/ckrm/ckrm_sockc.c:150:
+^Iclstype = class_isa(newcls);                 $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#243: FILE: kernel/ckrm/ckrm_sockc.c:156:
+^I^Iif (rcbs && rcbs->change_resclass && (old_res_class != new_res_class)) $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'old_res_class != new_res_class'
#243: FILE: kernel/ckrm/ckrm_sockc.c:156:
+		if (rcbs && rcbs->change_resclass && (old_res_class != new_res_class)) 

WARNING:RETURN_VOID: void function return statements are not generally useful
#248: FILE: kernel/ckrm/ckrm_sockc.c:161:
+	return;
+}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#256: FILE: kernel/ckrm/ckrm_sockc.c:169:
+^Iif ((resid < 0) || (resid >= CKRM_MAX_RES_CTLRS) || ((rcbs = core->classtype->res_ctlrs[resid]) == NULL)) $

WARNING:LONG_LINE: line length of 114 exceeds 100 columns
#256: FILE: kernel/ckrm/ckrm_sockc.c:169:
+	if ((resid < 0) || (resid >= CKRM_MAX_RES_CTLRS) || ((rcbs = core->classtype->res_ctlrs[resid]) == NULL)) 

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'resid < 0'
#256: FILE: kernel/ckrm/ckrm_sockc.c:169:
+	if ((resid < 0) || (resid >= CKRM_MAX_RES_CTLRS) || ((rcbs = core->classtype->res_ctlrs[resid]) == NULL)) 

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'resid >= CKRM_MAX_RES_CTLRS'
#256: FILE: kernel/ckrm/ckrm_sockc.c:169:
+	if ((resid < 0) || (resid >= CKRM_MAX_RES_CTLRS) || ((rcbs = core->classtype->res_ctlrs[resid]) == NULL)) 

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#256: FILE: kernel/ckrm/ckrm_sockc.c:169:
+	if ((resid < 0) || (resid >= CKRM_MAX_RES_CTLRS) || ((rcbs = core->classtype->res_ctlrs[resid]) == NULL)) 

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#267: FILE: kernel/ckrm/ckrm_sockc.c:180:
+
+

ERROR:SPACING: space required after that ',' (ctx:VxV)
#291: FILE: kernel/ckrm/ckrm_sockc.c:204:
+	memset(ns,0, sizeof(ns));
 	         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#300: FILE: kernel/ckrm/ckrm_sockc.c:213:
+^I^I$

ERROR:SPACING: space required after that ',' (ctx:VxO)
#305: FILE: kernel/ckrm/ckrm_sockc.c:218:
+	CE_CLASSIFY_RET(newcls,&CT_sockclass,CKRM_EVENT_LISTEN_START,ns,current);
 	                      ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#305: FILE: kernel/ckrm/ckrm_sockc.c:218:
+	CE_CLASSIFY_RET(newcls,&CT_sockclass,CKRM_EVENT_LISTEN_START,ns,current);
 	                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#305: FILE: kernel/ckrm/ckrm_sockc.c:218:
+	CE_CLASSIFY_RET(newcls,&CT_sockclass,CKRM_EVENT_LISTEN_START,ns,current);
 	                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#305: FILE: kernel/ckrm/ckrm_sockc.c:218:
+	CE_CLASSIFY_RET(newcls,&CT_sockclass,CKRM_EVENT_LISTEN_START,ns,current);
 	                                                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#305: FILE: kernel/ckrm/ckrm_sockc.c:218:
+	CE_CLASSIFY_RET(newcls,&CT_sockclass,CKRM_EVENT_LISTEN_START,ns,current);
 	                                                               ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!newcls"
#308: FILE: kernel/ckrm/ckrm_sockc.c:221:
+	if (newcls == NULL)  {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#318: FILE: kernel/ckrm/ckrm_sockc.c:231:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#319: FILE: kernel/ckrm/ckrm_sockc.c:232:
+	
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#332: FILE: kernel/ckrm/ckrm_sockc.c:245:
+^I^I^I(*rcbs->change_resclass)((void *)ns, $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#333: FILE: kernel/ckrm/ckrm_sockc.c:246:
+					 NULL,class_core(newcls)->res_class[i]);
 					     ^

WARNING:RETURN_VOID: void function return statements are not generally useful
#338: FILE: kernel/ckrm/ckrm_sockc.c:251:
+	return;
+}

WARNING:RETURN_VOID: void function return statements are not generally useful
#370: FILE: kernel/ckrm/ckrm_sockc.c:283:
+	return;
+}

ERROR:SPACING: space prohibited after that open parenthesis '('
#373: FILE: kernel/ckrm/ckrm_sockc.c:286:
+	CKRM_EVENT_SPEC( LISTEN_START, cb_sockclass_listen_start  ),

ERROR:SPACING: space prohibited before that close parenthesis ')'
#373: FILE: kernel/ckrm/ckrm_sockc.c:286:
+	CKRM_EVENT_SPEC( LISTEN_START, cb_sockclass_listen_start  ),

ERROR:SPACING: space prohibited after that open parenthesis '('
#374: FILE: kernel/ckrm/ckrm_sockc.c:287:
+	CKRM_EVENT_SPEC( LISTEN_STOP,  cb_sockclass_listen_stop  ),

ERROR:SPACING: space prohibited before that close parenthesis ')'
#374: FILE: kernel/ckrm/ckrm_sockc.c:287:
+	CKRM_EVENT_SPEC( LISTEN_STOP,  cb_sockclass_listen_stop  ),

WARNING:LINE_SPACING: Missing a blank line after declarations
#386: FILE: kernel/ckrm/ckrm_sockc.c:299:
+	struct ckrm_sock_class *sockcls;
+	sockcls = kmalloc(sizeof(struct ckrm_sock_class), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*sockcls)...) over kmalloc(sizeof(struct ckrm_sock_class)...)
#386: FILE: kernel/ckrm/ckrm_sockc.c:299:
+	sockcls = kmalloc(sizeof(struct ckrm_sock_class), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

ERROR:TRAILING_WHITESPACE: trailing whitespace
#387: FILE: kernel/ckrm/ckrm_sockc.c:300:
+^Iif (sockcls == NULL) $

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sockcls"
#387: FILE: kernel/ckrm/ckrm_sockc.c:300:
+	if (sockcls == NULL) 

ERROR:SPACING: space required after that ',' (ctx:VxV)
#390: FILE: kernel/ckrm/ckrm_sockc.c:303:
+	ckrm_init_core_class(&CT_sockclass,class_core(sockcls),parent,name);
 	                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#390: FILE: kernel/ckrm/ckrm_sockc.c:303:
+	ckrm_init_core_class(&CT_sockclass,class_core(sockcls),parent,name);
 	                                                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#390: FILE: kernel/ckrm/ckrm_sockc.c:303:
+	ckrm_init_core_class(&CT_sockclass,class_core(sockcls),parent,name);
 	                                                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#394: FILE: kernel/ckrm/ckrm_sockc.c:307:
+		(*CT_sockclass.ce_callbacks.class_add)(name,sockcls);
 		                                           ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#412: FILE: kernel/ckrm/ckrm_sockc.c:325:
+ ^I^Ireturn 0;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#412: FILE: kernel/ckrm/ckrm_sockc.c:325:
+ ^I^Ireturn 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#412: FILE: kernel/ckrm/ckrm_sockc.c:325:
+ ^I^Ireturn 0;$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#420: FILE: kernel/ckrm/ckrm_sockc.c:333:
+		(*CT_sockclass.ce_callbacks.class_delete)(core->name,sockcls);
 		                                                    ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#422: FILE: kernel/ckrm/ckrm_sockc.c:335:
+	sock_reclassify_class ( sockcls );

ERROR:SPACING: space prohibited after that open parenthesis '('
#422: FILE: kernel/ckrm/ckrm_sockc.c:335:
+	sock_reclassify_class ( sockcls );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#422: FILE: kernel/ckrm/ckrm_sockc.c:335:
+	sock_reclassify_class ( sockcls );

CHECK:LINE_SPACING: Please don't use multiple blank lines
#430: FILE: kernel/ckrm/ckrm_sockc.c:343:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#431: FILE: kernel/ckrm/ckrm_sockc.c:344:
+static int                      $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#432: FILE: kernel/ckrm/ckrm_sockc.c:345:
+sock_show_members(struct ckrm_core_class *core, struct seq_file *seq) $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#439: FILE: kernel/ckrm/ckrm_sockc.c:352:
+		ns = container_of(lh, struct ckrm_net_struct,ckrm_link);
 		                                            ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#440: FILE: kernel/ckrm/ckrm_sockc.c:353:
+^I^Iseq_printf(seq, "%d.%d.%d.%d\\%d\n", $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#441: FILE: kernel/ckrm/ckrm_sockc.c:354:
+			   NIPQUAD(ns->ns_daddrv4),ns->ns_dport);
 			                          ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#456: FILE: kernel/ckrm/ckrm_sockc.c:369:
+	if (!ckrm_is_core_valid(core)) {
+		return rc;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#463: FILE: kernel/ckrm/ckrm_sockc.c:376:
+	sk = tcp_v4_lookup_listener(tns->ns_daddrv4,tns->ns_dport,0);
 	                                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#463: FILE: kernel/ckrm/ckrm_sockc.c:376:
+	sk = tcp_v4_lookup_listener(tns->ns_daddrv4,tns->ns_dport,0);
 	                                                         ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#465: FILE: kernel/ckrm/ckrm_sockc.c:378:
+		printk(KERN_INFO "No such listener 0x%x:%d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#466: FILE: kernel/ckrm/ckrm_sockc.c:379:
+		printk(KERN_INFO "No such listener 0x%x:%d\n",
+				tns->ns_daddrv4, tns->ns_dport);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#470: FILE: kernel/ckrm/ckrm_sockc.c:383:
+	if (!sk->sk_ns) {
+		goto out;
+	}

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'oldcls == NULL'
#476: FILE: kernel/ckrm/ckrm_sockc.c:389:
+	if ((oldcls == NULL) || (oldcls == newcls)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'oldcls == newcls'
#476: FILE: kernel/ckrm/ckrm_sockc.c:389:
+	if ((oldcls == NULL) || (oldcls == newcls)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!oldcls"
#476: FILE: kernel/ckrm/ckrm_sockc.c:389:
+	if ((oldcls == NULL) || (oldcls == newcls)) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#497: FILE: kernel/ckrm/ckrm_sockc.c:410:
+} $

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#497: FILE: kernel/ckrm/ckrm_sockc.c:410:
+
+} 

ERROR:CODE_INDENT: code indent should use tabs where possible
#500: FILE: kernel/ckrm/ckrm_sockc.c:413:
+        IPV4, IPV6, SOCKC_TARGET_ERR$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#500: FILE: kernel/ckrm/ckrm_sockc.c:413:
+        IPV4, IPV6, SOCKC_TARGET_ERR$

ERROR:CODE_INDENT: code indent should use tabs where possible
#506: FILE: kernel/ckrm/ckrm_sockc.c:419:
+        {SOCKC_TARGET_ERR, NULL},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#506: FILE: kernel/ckrm/ckrm_sockc.c:419:
+        {SOCKC_TARGET_ERR, NULL},$

ERROR:SPACING: space required before the open parenthesis '('
#514: FILE: kernel/ckrm/ckrm_sockc.c:427:
+	while(*s && (*s != c)) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#515: FILE: kernel/ckrm/ckrm_sockc.c:428:
+		if (*s == '.') {
[...]
+		else 
[...]

ERROR:TRAILING_WHITESPACE: trailing whitespace
#520: FILE: kernel/ckrm/ckrm_sockc.c:433:
+^I^Ielse $

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#520: FILE: kernel/ckrm/ckrm_sockc.c:433:
+		}
+		else 

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#521: FILE: kernel/ckrm/ckrm_sockc.c:434:
+			k = k *10 + *s - '0';
 			      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#532: FILE: kernel/ckrm/ckrm_sockc.c:445:
+sock_forced_reclassify(struct ckrm_core_class *target,const char *options)
                                                      ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#533: FILE: kernel/ckrm/ckrm_sockc.c:446:
+{^I$

ERROR:SPACING: space required after that ',' (ctx:VxO)
#534: FILE: kernel/ckrm/ckrm_sockc.c:447:
+	char *p,*p2;
 	       ^

ERROR:SPACING: space required before that '*' (ctx:OxV)
#534: FILE: kernel/ckrm/ckrm_sockc.c:447:
+	char *p,*p2;
 	        ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#540: FILE: kernel/ckrm/ckrm_sockc.c:453:
+^I$

ERROR:POINTER_LOCATION: "(foo**)" should be "(foo **)"
#541: FILE: kernel/ckrm/ckrm_sockc.c:454:
+	while ((p = strsep((char**)&options, ",")) != NULL) {

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#544: FILE: kernel/ckrm/ckrm_sockc.c:457:
+^I^I$

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#549: FILE: kernel/ckrm/ckrm_sockc.c:462:
+		switch (token) {
+

ERROR:SPACING: space required before the open parenthesis '('
#553: FILE: kernel/ckrm/ckrm_sockc.c:466:
+			while(*p2 && (*p2 != '='))

ERROR:SPACING: space required after that ',' (ctx:VxO)
#556: FILE: kernel/ckrm/ckrm_sockc.c:469:
+			p2 = v4toi(p2, '\\',&(v4addr));
 			                   ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#556: FILE: kernel/ckrm/ckrm_sockc.c:469:
+			p2 = v4toi(p2, '\\',&(v4addr));
 			                    ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#559: FILE: kernel/ckrm/ckrm_sockc.c:472:
+			p2 = v4toi(++p2, ':',&tmp); ns.ns_dport = (__u16)tmp;
 			                    ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#559: FILE: kernel/ckrm/ckrm_sockc.c:472:
+			p2 = v4toi(++p2, ':',&tmp); ns.ns_dport = (__u16)tmp;
 			                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#560: FILE: kernel/ckrm/ckrm_sockc.c:473:
+			p2 = v4toi(++p2,'\0',&ns.ns_pid);
 			               ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#560: FILE: kernel/ckrm/ckrm_sockc.c:473:
+			p2 = v4toi(++p2,'\0',&ns.ns_pid);
 			                    ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#560: FILE: kernel/ckrm/ckrm_sockc.c:473:
+			p2 = v4toi(++p2,'\0',&ns.ns_pid);
 			                     ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#561: FILE: kernel/ckrm/ckrm_sockc.c:474:
+^I^I^I$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#562: FILE: kernel/ckrm/ckrm_sockc.c:475:
+			sock_forced_reclassify_ns(&ns,target);
 			                             ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#566: FILE: kernel/ckrm/ckrm_sockc.c:479:
+			printk(KERN_INFO "rcfs: IPV6 not supported yet\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#567: FILE: kernel/ckrm/ckrm_sockc.c:480:
+^I^I^Ireturn 0;^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#573: FILE: kernel/ckrm/ckrm_sockc.c:486:
+}^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#603: FILE: kernel/ckrm/ckrm_sockc.c:516:
+^I$

WARNING:SPACING: space prohibited before semicolon
#614: FILE: kernel/ckrm/ckrm_sockc.c:527:
+	return ;

WARNING:RETURN_VOID: void function return statements are not generally useful
#615: FILE: kernel/ckrm/ckrm_sockc.c:528:
+	return ;
+}

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#620: FILE: kernel/ckrm/ckrm_sockc.c:533:
+	printk("...... Initializing ClassType<%s> ........\n",CT_sockclass.name);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#620: FILE: kernel/ckrm/ckrm_sockc.c:533:
+	printk("...... Initializing ClassType<%s> ........\n",CT_sockclass.name);
 	                                                     ^

WARNING:TYPO_SPELLING: 'intialize' may be misspelled - perhaps 'initialize'?
#621: FILE: kernel/ckrm/ckrm_sockc.c:534:
+	// intialize the default class
 	   ^^^^^^^^^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#623: FILE: kernel/ckrm/ckrm_sockc.c:536:
+			     NULL,dflt_sockclass_name);
 			         ^

WARNING:TYPO_SPELLING: 'registeration' may be misspelled - perhaps 'registration'?
#629: FILE: kernel/ckrm/ckrm_sockc.c:542:
+	// note registeration of all resource controllers will be done later dynamically 
 	        ^^^^^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#629: FILE: kernel/ckrm/ckrm_sockc.c:542:
+^I// note registeration of all resource controllers will be done later dynamically $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#633: FILE: kernel/ckrm/ckrm_sockc.c:546:
+
+

WARNING:IF_1: Consider removing the #if 1 and its #endif
#635: FILE: kernel/ckrm/ckrm_sockc.c:548:
+#if 1

ERROR:TRAILING_WHITESPACE: trailing whitespace
#646: FILE: fs/rcfs/socket_fs.c:1:
+/* ckrm_socketaq.c $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#646: FILE: fs/rcfs/socket_fs.c:1:
+/* ckrm_socketaq.c 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#649: FILE: fs/rcfs/socket_fs.c:4:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#651: FILE: fs/rcfs/socket_fs.c:6:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#665: FILE: fs/rcfs/socket_fs.c:20:
+ *   $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#667: FILE: fs/rcfs/socket_fs.c:22:
+ * connection control is supported based on prioritized accept queues. $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#670: FILE: fs/rcfs/socket_fs.c:25:
+
+

ERROR:SPACING: space required after that ',' (ctx:OxV)
#674: FILE: fs/rcfs/socket_fs.c:29:
+extern int rcfs_create(struct inode *,struct dentry *, int, struct nameidata *);
                                      ^

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#675: FILE: fs/rcfs/socket_fs.c:30:
+extern int rcfs_unlink(struct inode *, struct dentry *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#675: FILE: fs/rcfs/socket_fs.c:30:
+extern int rcfs_unlink(struct inode *, struct dentry *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#675: FILE: fs/rcfs/socket_fs.c:30:
+extern int rcfs_unlink(struct inode *, struct dentry *);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#676: FILE: fs/rcfs/socket_fs.c:31:
+extern int  rcfs_symlink(struct inode *, struct dentry *, const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#676: FILE: fs/rcfs/socket_fs.c:31:
+extern int  rcfs_symlink(struct inode *, struct dentry *, const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#676: FILE: fs/rcfs/socket_fs.c:31:
+extern int  rcfs_symlink(struct inode *, struct dentry *, const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#676: FILE: fs/rcfs/socket_fs.c:31:
+extern int  rcfs_symlink(struct inode *, struct dentry *, const char *);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#677: FILE: fs/rcfs/socket_fs.c:32:
+extern int rcfs_mknod(struct inode *, struct dentry *, int mode, dev_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#677: FILE: fs/rcfs/socket_fs.c:32:
+extern int rcfs_mknod(struct inode *, struct dentry *, int mode, dev_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#677: FILE: fs/rcfs/socket_fs.c:32:
+extern int rcfs_mknod(struct inode *, struct dentry *, int mode, dev_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'dev_t' should also have an identifier name
#677: FILE: fs/rcfs/socket_fs.c:32:
+extern int rcfs_mknod(struct inode *, struct dentry *, int mode, dev_t);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#678: FILE: fs/rcfs/socket_fs.c:33:
+extern int rcfs_mkdir(struct inode *, struct dentry *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#678: FILE: fs/rcfs/socket_fs.c:33:
+extern int rcfs_mkdir(struct inode *, struct dentry *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#678: FILE: fs/rcfs/socket_fs.c:33:
+extern int rcfs_mkdir(struct inode *, struct dentry *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#678: FILE: fs/rcfs/socket_fs.c:33:
+extern int rcfs_mkdir(struct inode *, struct dentry *, int);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#679: FILE: fs/rcfs/socket_fs.c:34:
+extern int rcfs_rmdir(struct inode *, struct dentry *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#679: FILE: fs/rcfs/socket_fs.c:34:
+extern int rcfs_rmdir(struct inode *, struct dentry *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#679: FILE: fs/rcfs/socket_fs.c:34:
+extern int rcfs_rmdir(struct inode *, struct dentry *);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#680: FILE: fs/rcfs/socket_fs.c:35:
+extern int rcfs_rename(struct inode *, struct dentry *, struct inode *, $

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#680: FILE: fs/rcfs/socket_fs.c:35:
+extern int rcfs_rename(struct inode *, struct dentry *, struct inode *, 

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#680: FILE: fs/rcfs/socket_fs.c:35:
+extern int rcfs_rename(struct inode *, struct dentry *, struct inode *, 

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#680: FILE: fs/rcfs/socket_fs.c:35:
+extern int rcfs_rename(struct inode *, struct dentry *, struct inode *, 

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#680: FILE: fs/rcfs/socket_fs.c:35:
+extern int rcfs_rename(struct inode *, struct dentry *, struct inode *, 

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#680: FILE: fs/rcfs/socket_fs.c:35:
+extern int rcfs_rename(struct inode *, struct dentry *, struct inode *, 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#681: FILE: fs/rcfs/socket_fs.c:36:
+extern int rcfs_rename(struct inode *, struct dentry *, struct inode *, 
+		struct dentry *);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#683: FILE: fs/rcfs/socket_fs.c:38:
+extern int rcfs_create_coredir(struct inode *, struct dentry *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#683: FILE: fs/rcfs/socket_fs.c:38:
+extern int rcfs_create_coredir(struct inode *, struct dentry *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#683: FILE: fs/rcfs/socket_fs.c:38:
+extern int rcfs_create_coredir(struct inode *, struct dentry *);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#684: FILE: fs/rcfs/socket_fs.c:39:
+int sock_mkdir(struct inode *, struct dentry *, int mode);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#684: FILE: fs/rcfs/socket_fs.c:39:
+int sock_mkdir(struct inode *, struct dentry *, int mode);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#684: FILE: fs/rcfs/socket_fs.c:39:
+int sock_mkdir(struct inode *, struct dentry *, int mode);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#685: FILE: fs/rcfs/socket_fs.c:40:
+int sock_rmdir(struct inode *, struct dentry *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#685: FILE: fs/rcfs/socket_fs.c:40:
+int sock_rmdir(struct inode *, struct dentry *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#685: FILE: fs/rcfs/socket_fs.c:40:
+int sock_rmdir(struct inode *, struct dentry *);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#687: FILE: fs/rcfs/socket_fs.c:42:
+
+

ERROR:SPACING: space required after that ',' (ctx:OxV)
#688: FILE: fs/rcfs/socket_fs.c:43:
+int sock_create_noperm(struct inode *, struct dentry *,int, struct nameidata *);
                                                       ^

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#688: FILE: fs/rcfs/socket_fs.c:43:
+int sock_create_noperm(struct inode *, struct dentry *,int, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#688: FILE: fs/rcfs/socket_fs.c:43:
+int sock_create_noperm(struct inode *, struct dentry *,int, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#688: FILE: fs/rcfs/socket_fs.c:43:
+int sock_create_noperm(struct inode *, struct dentry *,int, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#688: FILE: fs/rcfs/socket_fs.c:43:
+int sock_create_noperm(struct inode *, struct dentry *,int, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nameidata *' should also have an identifier name
#688: FILE: fs/rcfs/socket_fs.c:43:
+int sock_create_noperm(struct inode *, struct dentry *,int, struct nameidata *);

ERROR:SPACING: space required after that ',' (ctx:OxV)
#689: FILE: fs/rcfs/socket_fs.c:44:
+int sock_unlink_noperm(struct inode *,struct dentry *);
                                      ^

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#689: FILE: fs/rcfs/socket_fs.c:44:
+int sock_unlink_noperm(struct inode *,struct dentry *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#689: FILE: fs/rcfs/socket_fs.c:44:
+int sock_unlink_noperm(struct inode *,struct dentry *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#689: FILE: fs/rcfs/socket_fs.c:44:
+int sock_unlink_noperm(struct inode *,struct dentry *);

ERROR:SPACING: space required after that ',' (ctx:OxV)
#690: FILE: fs/rcfs/socket_fs.c:45:
+int sock_mkdir_noperm(struct inode *,struct dentry *,int);
                                     ^

ERROR:SPACING: space required after that ',' (ctx:OxV)
#690: FILE: fs/rcfs/socket_fs.c:45:
+int sock_mkdir_noperm(struct inode *,struct dentry *,int);
                                                     ^

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#690: FILE: fs/rcfs/socket_fs.c:45:
+int sock_mkdir_noperm(struct inode *,struct dentry *,int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#690: FILE: fs/rcfs/socket_fs.c:45:
+int sock_mkdir_noperm(struct inode *,struct dentry *,int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#690: FILE: fs/rcfs/socket_fs.c:45:
+int sock_mkdir_noperm(struct inode *,struct dentry *,int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#690: FILE: fs/rcfs/socket_fs.c:45:
+int sock_mkdir_noperm(struct inode *,struct dentry *,int);

ERROR:SPACING: space required after that ',' (ctx:OxV)
#691: FILE: fs/rcfs/socket_fs.c:46:
+int sock_rmdir_noperm(struct inode *,struct dentry *);
                                     ^

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#691: FILE: fs/rcfs/socket_fs.c:46:
+int sock_rmdir_noperm(struct inode *,struct dentry *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#691: FILE: fs/rcfs/socket_fs.c:46:
+int sock_rmdir_noperm(struct inode *,struct dentry *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#691: FILE: fs/rcfs/socket_fs.c:46:
+int sock_rmdir_noperm(struct inode *,struct dentry *);

ERROR:SPACING: space required after that ',' (ctx:OxV)
#692: FILE: fs/rcfs/socket_fs.c:47:
+int sock_mknod_noperm(struct inode *,struct dentry *,int, dev_t);
                                     ^

ERROR:SPACING: space required after that ',' (ctx:OxV)
#692: FILE: fs/rcfs/socket_fs.c:47:
+int sock_mknod_noperm(struct inode *,struct dentry *,int, dev_t);
                                                     ^

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#692: FILE: fs/rcfs/socket_fs.c:47:
+int sock_mknod_noperm(struct inode *,struct dentry *,int, dev_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#692: FILE: fs/rcfs/socket_fs.c:47:
+int sock_mknod_noperm(struct inode *,struct dentry *,int, dev_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#692: FILE: fs/rcfs/socket_fs.c:47:
+int sock_mknod_noperm(struct inode *,struct dentry *,int, dev_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#692: FILE: fs/rcfs/socket_fs.c:47:
+int sock_mknod_noperm(struct inode *,struct dentry *,int, dev_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'dev_t' should also have an identifier name
#692: FILE: fs/rcfs/socket_fs.c:47:
+int sock_mknod_noperm(struct inode *,struct dentry *,int, dev_t);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#694: FILE: fs/rcfs/socket_fs.c:49:
+void sock_set_directory(void);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#696: FILE: fs/rcfs/socket_fs.c:51:
+extern struct file_operations config_fileops,

WARNING:CONST_STRUCT: struct file_operations should normally be const
#696: FILE: fs/rcfs/socket_fs.c:51:
+extern struct file_operations config_fileops,

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#702: FILE: fs/rcfs/socket_fs.c:57:
+
+

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#703: FILE: fs/rcfs/socket_fs.c:58:
+struct inode_operations my_iops = {

ERROR:CODE_INDENT: code indent should use tabs where possible
#704: FILE: fs/rcfs/socket_fs.c:59:
+^I        .create         = rcfs_create,$

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#715: FILE: fs/rcfs/socket_fs.c:70:
+struct inode_operations class_iops = {

ERROR:CODE_INDENT: code indent should use tabs where possible
#716: FILE: fs/rcfs/socket_fs.c:71:
+^I        .create         = sock_create_noperm,$

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#727: FILE: fs/rcfs/socket_fs.c:82:
+struct inode_operations sub_iops = {

ERROR:CODE_INDENT: code indent should use tabs where possible
#728: FILE: fs/rcfs/socket_fs.c:83:
+^I        .create         = sock_create_noperm,$

ERROR:SPACING: spaces required around that '=' (ctx:WxO)
#778: FILE: fs/rcfs/socket_fs.c:133:
+		.i_fop =&members_fileops,
 		       ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#778: FILE: fs/rcfs/socket_fs.c:133:
+		.i_fop =&members_fileops,
 		        ^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#823: FILE: fs/rcfs/socket_fs.c:178:
+^I.rootmflen ^I= (sizeof(sock_rootdesc)/sizeof(struct rcfs_magf)),$

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#823: FILE: fs/rcfs/socket_fs.c:178:
+	.rootmflen 	= (sizeof(sock_rootdesc)/sizeof(struct rcfs_magf)),
 	           	                        ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#826: FILE: fs/rcfs/socket_fs.c:181:
+
+

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#827: FILE: fs/rcfs/socket_fs.c:182:
+#define SOCK_MAX_MAGF (sizeof(sock_magf)/sizeof(struct rcfs_magf))
                                         ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#828: FILE: fs/rcfs/socket_fs.c:183:
+#define LAQ_MAX_SUBMAGF (sizeof(sub_magf)/sizeof(struct rcfs_magf))
                                          ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#830: FILE: fs/rcfs/socket_fs.c:185:
+int $

WARNING:SPACING: space prohibited before semicolon
#833: FILE: fs/rcfs/socket_fs.c:188:
+	struct dentry *mftmp, *mfdentry ;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#841: FILE: fs/rcfs/socket_fs.c:196:
+	rcfs_rmdir(p,me);
 	            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#856: FILE: fs/rcfs/socket_fs.c:211:
+	int i,j;
 	     ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#860: FILE: fs/rcfs/socket_fs.c:215:
+		printk(KERN_ERR "rcfs_mkdir: error reaching parent\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#863: FILE: fs/rcfs/socket_fs.c:218:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#868: FILE: fs/rcfs/socket_fs.c:223:
+^Iif (retval) $

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#872: FILE: fs/rcfs/socket_fs.c:227:
+	for (i =0; i < SOCK_MAX_MAGF; i++) {
 	       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#873: FILE: fs/rcfs/socket_fs.c:228:
+		mfdentry = rcfs_create_internal(dentry, &sock_magf[i],0);
 		                                                     ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#875: FILE: fs/rcfs/socket_fs.c:230:
+^I^IRCFS_I(mfdentry->d_inode)->core = $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#882: FILE: fs/rcfs/socket_fs.c:237:
+^I$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#883: FILE: fs/rcfs/socket_fs.c:238:
+	for (i=1; i < LAQ_NUM_ACCEPT_QUEUES; i++) {
 	      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#884: FILE: fs/rcfs/socket_fs.c:239:
+		j = sprintf(def_magf.name, "%d",i);
 		                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#887: FILE: fs/rcfs/socket_fs.c:242:
+		pentry = rcfs_create_internal(dentry, &def_magf,0);
 		                                               ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#891: FILE: fs/rcfs/socket_fs.c:246:
+		for (j=0; j < LAQ_MAX_SUBMAGF; j++) {
 		      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#892: FILE: fs/rcfs/socket_fs.c:247:
+			mfdentry = rcfs_create_internal(pentry, &sub_magf[j],0);
 			                                                    ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#894: FILE: fs/rcfs/socket_fs.c:249:
+^I^I^IRCFS_I(mfdentry->d_inode)->core = $

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#911: FILE: fs/rcfs/socket_fs.c:266:
+}
+#ifndef NUM_ACCEPT_QUEUES

ERROR:TRAILING_WHITESPACE: trailing whitespace
#919: FILE: fs/rcfs/socket_fs.c:274:
+^I$

ERROR:SPACING: space required before the open parenthesis '('
#920: FILE: fs/rcfs/socket_fs.c:275:
+	while(*p)

ERROR:SPACING: space prohibited after that open parenthesis '('
#922: FILE: fs/rcfs/socket_fs.c:277:
+	while( *p != '/' && p != c->name)

ERROR:SPACING: space required before the open parenthesis '('
#922: FILE: fs/rcfs/socket_fs.c:277:
+	while( *p != '/' && p != c->name)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#928: FILE: fs/rcfs/socket_fs.c:283:
+int $

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#929: FILE: fs/rcfs/socket_fs.c:284:
+sock_create_noperm(struct inode *dir,struct dentry *dentry,int mode, struct nameidata *nd)
                                                                                        ^^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#929: FILE: fs/rcfs/socket_fs.c:284:
+sock_create_noperm(struct inode *dir,struct dentry *dentry,int mode, struct nameidata *nd)
                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#929: FILE: fs/rcfs/socket_fs.c:284:
+sock_create_noperm(struct inode *dir,struct dentry *dentry,int mode, struct nameidata *nd)
                                                           ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#934: FILE: fs/rcfs/socket_fs.c:289:
+int $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#935: FILE: fs/rcfs/socket_fs.c:290:
+sock_unlink_noperm(struct inode *dir,struct dentry *dentry)
                                     ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#940: FILE: fs/rcfs/socket_fs.c:295:
+int $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#941: FILE: fs/rcfs/socket_fs.c:296:
+sock_mkdir_noperm(struct inode *dir,struct dentry *dentry, int mode)
                                    ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#946: FILE: fs/rcfs/socket_fs.c:301:
+int $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#947: FILE: fs/rcfs/socket_fs.c:302:
+sock_rmdir_noperm(struct inode *dir,struct dentry *dentry)
                                    ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#952: FILE: fs/rcfs/socket_fs.c:307:
+int $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#953: FILE: fs/rcfs/socket_fs.c:308:
+sock_mknod_noperm(struct inode *dir,struct dentry *dentry,int mode, dev_t dev)
                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#953: FILE: fs/rcfs/socket_fs.c:308:
+sock_mknod_noperm(struct inode *dir,struct dentry *dentry,int mode, dev_t dev)
                                                          ^

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#958: FILE: fs/rcfs/socket_fs.c:313:
+#if 0

ERROR:SPACING: space required after that ',' (ctx:VxV)
#966: FILE: fs/rcfs/socket_fs.c:321:
+		dentry = rcfs_create_internal(pentry, &my_dir_magf[1],0);
 		                                                     ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#969: FILE: fs/rcfs/socket_fs.c:324:
+^I^IRCFS_I(dentry->d_inode)->core = $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#971: FILE: fs/rcfs/socket_fs.c:326:
+		dentry = rcfs_create_internal(pentry, &my_dir_magf[2],0);
 		                                                     ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#974: FILE: fs/rcfs/socket_fs.c:329:
+^I^IRCFS_I(dentry->d_inode)->core = $

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#977: FILE: fs/rcfs/socket_fs.c:332:
+	}
+	else  {

CHECK:BRACES: Unbalanced braces around else statement
#977: FILE: fs/rcfs/socket_fs.c:332:
+	else  {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#978: FILE: fs/rcfs/socket_fs.c:333:
+		printk(KERN_ERR "Could not create /rcfs/listen_aq\n"

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000285279.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 142 errors, 97 warnings, 34 checks, 933 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000285279.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
