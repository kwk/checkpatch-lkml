CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#335: FILE: include/linux/rcupdate.h:303:
+extern long rcu_batches_completed(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#442: FILE: kernel/rcupdate.c:947:
+EXPORT_SYMBOL_GPL(rcu_batches_completed);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#734: FILE: kernel/rcutorture.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#748: FILE: kernel/rcutorture.c:15:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#749: FILE: kernel/rcutorture.c:16:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#768: FILE: kernel/rcutorture.c:35:
+#include <asm/atomic.h>

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#785: FILE: kernel/rcutorture.c:52:
+static int stat_interval = 0;	/* Interval between stats, in seconds. */

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#787: FILE: kernel/rcutorture.c:54:
+static int verbose = 0;		/* Print more debug info. */

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#796: FILE: kernel/rcutorture.c:63:
+#define PRINTK_STRING(s) \
+	do { printk(KERN_ALERT TORTURE_FLAG s "\n"); } while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#797: FILE: kernel/rcutorture.c:64:
+	do { printk(KERN_ALERT TORTURE_FLAG s "\n"); } while (0)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#799: FILE: kernel/rcutorture.c:66:
+	do { if (verbose) printk(KERN_ALERT TORTURE_FLAG s "\n"); } while (0)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#801: FILE: kernel/rcutorture.c:68:
+	do { if (verbose) printk(KERN_ALERT TORTURE_FLAG "!!! " s "\n"); } while (0)

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#819: FILE: kernel/rcutorture.c:86:
+static int fullstop = 0;	/* stop generating callbacks at test end. */

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#821: FILE: kernel/rcutorture.c:88:
+static struct rcu_torture *rcu_torture_current = NULL;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#822: FILE: kernel/rcutorture.c:89:
+static long rcu_torture_current_version = 0;

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#826: FILE: kernel/rcutorture.c:93:
+static DEFINE_PER_CPU(long [RCU_TORTURE_PIPE_LEN + 1], rcu_torture_count) =
+	{ 0 };

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#828: FILE: kernel/rcutorture.c:95:
+static DEFINE_PER_CPU(long [RCU_TORTURE_PIPE_LEN + 1], rcu_torture_batch) =
+	{ 0 };

CHECK:BRACES: braces {} should be used on all arms of this statement
#884: FILE: kernel/rcutorture.c:151:
+	if (++rp->rtort_pipe_count >= RCU_TORTURE_PIPE_LEN) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#887: FILE: kernel/rcutorture.c:154:
+	} else

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'rcu_torture_writer', this function's name, in a string
#934: FILE: kernel/rcutorture.c:201:
+	VERBOSE_PRINTK_STRING("rcu_torture_writer task started");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#940: FILE: kernel/rcutorture.c:207:
+		if ((rp = rcu_torture_alloc()) == NULL)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:MEMORY_BARRIER: memory barrier without comment
#947: FILE: kernel/rcutorture.c:214:
+		smp_wmb();

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "old_rp"
#948: FILE: kernel/rcutorture.c:215:
+		if (old_rp != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'rcu_torture_writer', this function's name, in a string
#959: FILE: kernel/rcutorture.c:226:
+	VERBOSE_PRINTK_STRING("rcu_torture_writer task stopping");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'rcu_torture_reader', this function's name, in a string
#979: FILE: kernel/rcutorture.c:246:
+	VERBOSE_PRINTK_STRING("rcu_torture_reader task started");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!p"
#985: FILE: kernel/rcutorture.c:252:
+		if (p == NULL) {

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'rcu_torture_reader', this function's name, in a string
#1011: FILE: kernel/rcutorture.c:278:
+	VERBOSE_PRINTK_STRING("rcu_torture_reader task stopping");

WARNING:SPLIT_STRING: quoted string split across lines
#1042: FILE: kernel/rcutorture.c:309:
+		       "rtc: %p ver: %ld tfle: %d rta: %d rtaf: %d rtf: %d "
+		       "rtmbe: %d",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#1088: FILE: kernel/rcutorture.c:355:
+	printk(KERN_ALERT "%s", printk_buf);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'rcu_torture_stats', this function's name, in a string
#1101: FILE: kernel/rcutorture.c:368:
+	VERBOSE_PRINTK_STRING("rcu_torture_stats task started");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'rcu_torture_stats', this function's name, in a string
#1106: FILE: kernel/rcutorture.c:373:
+	VERBOSE_PRINTK_STRING("rcu_torture_stats task stopping");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "writer_task"
#1116: FILE: kernel/rcutorture.c:383:
+	if (writer_task != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "reader_tasks"
#1122: FILE: kernel/rcutorture.c:389:
+	if (reader_tasks != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "reader_tasks[i]"
#1124: FILE: kernel/rcutorture.c:391:
+			if (reader_tasks[i] != NULL) {

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1125: FILE: kernel/rcutorture.c:392:
+				VERBOSE_PRINTK_STRING(

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "stats_task"
#1136: FILE: kernel/rcutorture.c:403:
+	if (stats_task != NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#1147: FILE: kernel/rcutorture.c:414:
+	printk(KERN_ALERT TORTURE_FLAG

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#1165: FILE: kernel/rcutorture.c:432:
+	printk(KERN_ALERT TORTURE_FLAG

WARNING:ARRAY_SIZE: Prefer ARRAY_SIZE(rcu_tortures)
#1173: FILE: kernel/rcutorture.c:440:
+	for (i = 0; i < sizeof(rcu_tortures) / sizeof(rcu_tortures[0]); i++) {

The ARRAY_SIZE(foo) macro should be preferred over
sizeof(foo)/sizeof(foo[0]) for finding number of elements in an
array.

The macro is defined in include/linux/kernel.h::

  #define ARRAY_SIZE(x) (sizeof(x) / sizeof((x)[0]))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!reader_tasks"
#1210: FILE: kernel/rcutorture.c:477:
+	if (reader_tasks == NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1229: FILE: kernel/rcutorture.c:496:
+		stats_task = kthread_run(rcu_torture_stats, NULL,
+					"rcu_torture_stats");

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000135035.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 10 errors, 19 warnings, 12 checks, 818 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000135035.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
