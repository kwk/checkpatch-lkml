WARNING:BAD_SIGN_OFF: Unexpected content after email: 'Jeff Dike <jdike@karaya.com>, liinux-kerel@vger.kernel.org', should be: 'Jeff Dike <jdike@karaya.com> (, liinux-kerel@vger.kernel.org)'
#33: 
Cc: Jeff Dike <jdike@karaya.com>, liinux-kerel@vger.kernel.org

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#87: 
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#103: FILE: arch/i386/config.in:291:
E_POWER_OFF

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#119: FILE: arch/i386/kernel/ldt.c:27:
+static int read_ldt(struct task_struct *task, void * ptr,=20

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxO)
#119: FILE: arch/i386/kernel/ldt.c:27:
+static int read_ldt(struct task_struct *task, void * ptr,=20
                                                         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:OxV)
#119: FILE: arch/i386/kernel/ldt.c:27:
+static int read_ldt(struct task_struct *task, void * ptr,=20
                                                          ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#125: FILE: arch/i386/kernel/ldt.c:32:
+	struct mm_struct * mm =3D task->mm;

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#125: FILE: arch/i386/kernel/ldt.c:32:
+	struct mm_struct * mm =3D task->mm;
 	                      ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#134: FILE: arch/i386/kernel/ldt.c:67:
 }
+static int write_ldt(struct task_struct *task, void * ptr,=20

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#134: FILE: arch/i386/kernel/ldt.c:67:
+static int write_ldt(struct task_struct *task, void * ptr,=20

ERROR:SPACING: space required after that ',' (ctx:VxO)
#134: FILE: arch/i386/kernel/ldt.c:67:
+static int write_ldt(struct task_struct *task, void * ptr,=20
                                                          ^

ERROR:SPACING: spaces required around that '=' (ctx:OxV)
#134: FILE: arch/i386/kernel/ldt.c:67:
+static int write_ldt(struct task_struct *task, void * ptr,=20
                                                           ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#138: FILE: arch/i386/kernel/ldt.c:70:
+	struct mm_struct * mm =3D task->mm;

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#138: FILE: arch/i386/kernel/ldt.c:70:
+	struct mm_struct * mm =3D task->mm;
 	                      ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#148: FILE: arch/i386/kernel/ldt.c:152:
 }
+int modify_ldt(struct task_struct *task, int func, void *ptr,=20

ERROR:SPACING: space required after that ',' (ctx:VxO)
#148: FILE: arch/i386/kernel/ldt.c:152:
+int modify_ldt(struct task_struct *task, int func, void *ptr,=20
                                                             ^

ERROR:SPACING: spaces required around that '=' (ctx:OxV)
#148: FILE: arch/i386/kernel/ldt.c:152:
+int modify_ldt(struct task_struct *task, int func, void *ptr,=20
                                                              ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#156: FILE: arch/i386/kernel/ldt.c:158:
+		ret =3D read_ldt(task, ptr, bytecount);
 		    ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#160: FILE: arch/i386/kernel/ldt.c:161:
+		ret =3D write_ldt(task, ptr, bytecount, 1);
 		    ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#167: FILE: arch/i386/kernel/ldt.c:167:
+		ret =3D write_ldt(task, ptr, bytecount, 0);
 		    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#173: FILE: arch/i386/kernel/ldt.c:173:
+asmlinkage int sys_modify_ldt(int func, void *ptr, unsigned long bytecount=
                                                                           ^

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#175: FILE: arch/i386/kernel/ldt.c:174:
+asmlinkage int sys_modify_ldt(int func, void *ptr, unsigned long bytecount=
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#176: FILE: arch/i386/kernel/ldt.c:175:
+	return(modify_ldt(current, func, ptr, bytecount));

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#224: FILE: arch/i386/kernel/process.c:149:
 }
+extern int modify_ldt(struct task_struct *task, int func, void *ptr,=20

ERROR:SPACING: space required after that ',' (ctx:VxO)
#224: FILE: arch/i386/kernel/process.c:149:
+extern int modify_ldt(struct task_struct *task, int func, void *ptr,=20
                                                                    ^

ERROR:SPACING: spaces required around that '=' (ctx:OxV)
#224: FILE: arch/i386/kernel/process.c:149:
+extern int modify_ldt(struct task_struct *task, int func, void *ptr,=20
                                                                     ^

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#227: FILE: arch/i386/kernel/process.c:152:
+extern struct mm_struct *proc_mm_get_mm(int fd);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#236: FILE: arch/i386/kernel/process.c:423:
+		ret =3D 0;
 		    ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#243: FILE: arch/i386/kernel/process.c:430:
+		fault =3D ((struct ptrace_faultinfo)=20

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#243: FILE: arch/i386/kernel/process.c:430:
+		fault =3D ((struct ptrace_faultinfo)=20
 		      ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#243: FILE: arch/i386/kernel/process.c:430:
+		fault =3D ((struct ptrace_faultinfo)=20
 		                                    ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#244: FILE: arch/i386/kernel/process.c:431:
+			{ .is_write	=3D child->thread.error_code,
 			           	^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#245: FILE: arch/i386/kernel/process.c:432:
+			  .addr		=3D child->thread.cr2 });
 			       		^

CHECK:SPACING: No space is necessary after a cast
#246: FILE: arch/i386/kernel/process.c:433:
+		ret =3D copy_to_user((unsigned long *) data, &fault,=20

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#246: FILE: arch/i386/kernel/process.c:433:
+		ret =3D copy_to_user((unsigned long *) data, &fault,=20
 		    ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#246: FILE: arch/i386/kernel/process.c:433:
+		ret =3D copy_to_user((unsigned long *) data, &fault,=20
 		                                                   ^

ERROR:SPACING: spaces required around that '=' (ctx:OxV)
#246: FILE: arch/i386/kernel/process.c:433:
+		ret =3D copy_to_user((unsigned long *) data, &fault,=20
 		                                                    ^

ERROR:SPACING: space required before the open parenthesis '('
#248: FILE: arch/i386/kernel/process.c:435:
+		if(ret)

CHECK:SPACING: No space is necessary after a cast
#253: FILE: arch/i386/kernel/process.c:440:
+		ret =3D copy_to_user((unsigned long *) data,=20

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#253: FILE: arch/i386/kernel/process.c:440:
+		ret =3D copy_to_user((unsigned long *) data,=20
 		    ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#253: FILE: arch/i386/kernel/process.c:440:
+		ret =3D copy_to_user((unsigned long *) data,=20
 		                                           ^

ERROR:SPACING: spaces required around that '=' (ctx:OxV)
#253: FILE: arch/i386/kernel/process.c:440:
+		ret =3D copy_to_user((unsigned long *) data,=20
 		                                            ^

CHECK:SPACING: spaces preferred around that '&' (ctx:ExV)
#254: FILE: arch/i386/kernel/process.c:441:
+				   &child->pending.signal,
 				   ^

CHECK:SPACING: No space is necessary after a cast
#261: FILE: arch/i386/kernel/process.c:448:
+		if(copy_from_user(&ldt, (unsigned long *) data,=20

ERROR:SPACING: space required after that ',' (ctx:VxO)
#261: FILE: arch/i386/kernel/process.c:448:
+		if(copy_from_user(&ldt, (unsigned long *) data,=20
 		                                              ^

ERROR:SPACING: spaces required around that '=' (ctx:OxV)
#261: FILE: arch/i386/kernel/process.c:448:
+		if(copy_from_user(&ldt, (unsigned long *) data,=20
 		                                               ^

ERROR:SPACING: space required before the open parenthesis '('
#261: FILE: arch/i386/kernel/process.c:448:
+		if(copy_from_user(&ldt, (unsigned long *) data,=20

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#261: FILE: arch/i386/kernel/process.c:448:
+		if(copy_from_user(&ldt, (unsigned long *) data,=20

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:SPACING: space required before the open brace '{'
#262: FILE: arch/i386/kernel/process.c:449:
+				  sizeof(ldt))){

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#263: FILE: arch/i386/kernel/process.c:450:
+			ret =3D -EIO;
 			    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#263: FILE: arch/i386/kernel/process.c:450:
+			ret =3D -EIO;
 			        ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#266: FILE: arch/i386/kernel/process.c:453:
+		ret =3D modify_ldt(child, ldt.func, ldt.ptr, ldt.bytecount);
 		    ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#271: FILE: arch/i386/kernel/process.c:458:
+		struct mm_struct *old =3D child->mm;
 		                      ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#272: FILE: arch/i386/kernel/process.c:459:
+		struct mm_struct *new =3D proc_mm_get_mm(data);
 		                      ^

ERROR:SPACING: space required before the open brace '{'
#274: FILE: arch/i386/kernel/process.c:461:
+		if(IS_ERR(new)){

ERROR:SPACING: space required before the open parenthesis '('
#274: FILE: arch/i386/kernel/process.c:461:
+		if(IS_ERR(new)){

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#275: FILE: arch/i386/kernel/process.c:462:
+			ret =3D PTR_ERR(new);
 			    ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#280: FILE: arch/i386/kernel/process.c:467:
+		child->mm =3D new;
 		          ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#281: FILE: arch/i386/kernel/process.c:468:
+		child->active_mm =3D new;
 		                 ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#296: FILE: arch/i386/kernel/sys_i386.c:43:
+long do_mmap2(struct mm_struct *mm,
 	unsigned long addr, unsigned long len,

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#307: FILE: arch/i386/kernel/sys_i386.c:58:
+	error =3D do_mmap_pgoff(mm, file, addr, len, prot, flags, pgoff);
 	      ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#327: FILE: arch/i386/kernel/sys_i386.c:102:
+	err =3D do_mmap2(current->mm, a.addr, a.len, a.prot, a.flags, a.fd, a.off=
 	    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#327: FILE: arch/i386/kernel/sys_i386.c:102:
+	err =3D do_mmap2(current->mm, a.addr, a.len, a.prot, a.flags, a.fd, a.off=
 	                                                                         ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#341: FILE: include/asm-i386/processor.h:438:
+extern void mm_copy_segments(struct mm_struct *old_mm,=20
                                                      ^

ERROR:SPACING: spaces required around that '=' (ctx:OxV)
#341: FILE: include/asm-i386/processor.h:438:
+extern void mm_copy_segments(struct mm_struct *old_mm,=20
                                                       ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#341: FILE: include/asm-i386/processor.h:438:
+extern void mm_copy_segments(struct mm_struct *old_mm,=20

ERROR:CODE_INDENT: code indent should use tabs where possible
#361: FILE: include/asm-i386/ptrace.h:59:
+  ^Ivoid *ptr;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#361: FILE: include/asm-i386/ptrace.h:59:
+  ^Ivoid *ptr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#361: FILE: include/asm-i386/ptrace.h:59:
+  ^Ivoid *ptr;$

ERROR:SPACING: space required after that ',' (ctx:VxO)
#382: FILE: include/linux/mm.h:495:
+extern long do_mprotect(struct mm_struct *mm, unsigned long start,=20
                                                                  ^

ERROR:SPACING: spaces required around that '=' (ctx:OxV)
#382: FILE: include/linux/mm.h:495:
+extern long do_mprotect(struct mm_struct *mm, unsigned long start,=20
                                                                   ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#382: FILE: include/linux/mm.h:495:
+extern long do_mprotect(struct mm_struct *mm, unsigned long start,=20

ERROR:SPACING: space required after that ',' (ctx:VxO)
#396: FILE: include/linux/mm.h:543:
+extern unsigned long do_mmap_pgoff(struct mm_struct *mm,=20
                                                        ^

ERROR:SPACING: spaces required around that '=' (ctx:OxV)
#396: FILE: include/linux/mm.h:543:
+extern unsigned long do_mmap_pgoff(struct mm_struct *mm,=20
                                                         ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#396: FILE: include/linux/mm.h:543:
+extern unsigned long do_mmap_pgoff(struct mm_struct *mm,=20

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#409: FILE: include/linux/mm.h:558:
+		ret =3D do_mmap_pgoff(current->mm, file, addr, len, prot, flag, offset >=
 		    ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#418: FILE: include/linux/proc_mm.h:1:
+/*=20

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:SPACING: space required after that ';' (ctx:VxO)
#442: FILE: include/linux/proc_mm.h:25:
+	unsigned long len;=09
 	                 ^

ERROR:SPACING: spaces required around that '=' (ctx:OxV)
#442: FILE: include/linux/proc_mm.h:25:
+	unsigned long len;=09
 	                  ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#448: FILE: include/linux/proc_mm.h:31:
+        unsigned int prot;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#448: FILE: include/linux/proc_mm.h:31:
+        unsigned int prot;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#456: FILE: include/linux/proc_mm.h:39:
+^I        struct mm_mprotect mprotect;$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#482: FILE: mm/mmap.c:392:
 }
+unsigned long do_mmap_pgoff(struct mm_struct *mm, struct file * file,=20

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#482: FILE: mm/mmap.c:392:
+unsigned long do_mmap_pgoff(struct mm_struct *mm, struct file * file,=20

ERROR:SPACING: space required after that ',' (ctx:VxO)
#482: FILE: mm/mmap.c:392:
+unsigned long do_mmap_pgoff(struct mm_struct *mm, struct file * file,=20
                                                                     ^

ERROR:SPACING: spaces required around that '=' (ctx:OxV)
#482: FILE: mm/mmap.c:392:
+unsigned long do_mmap_pgoff(struct mm_struct *mm, struct file * file,=20
                                                                      ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#484: FILE: mm/mmap.c:394:
+			    unsigned long prot, unsigned long flags,=20
 			                                           ^

ERROR:SPACING: spaces required around that '=' (ctx:OxV)
#484: FILE: mm/mmap.c:394:
+			    unsigned long prot, unsigned long flags,=20
 			                                            ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#485: FILE: mm/mmap.c:395:
+			    unsigned long prot, unsigned long flags,=20
+			    unsigned long pgoff)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#500: FILE: mm/mprotect.c:266:
 }
+long do_mprotect(struct mm_struct *mm, unsigned long start, size_t len,=20

ERROR:SPACING: space required after that ',' (ctx:VxO)
#500: FILE: mm/mprotect.c:266:
+long do_mprotect(struct mm_struct *mm, unsigned long start, size_t len,=20
                                                                       ^

ERROR:SPACING: spaces required around that '=' (ctx:OxV)
#500: FILE: mm/mprotect.c:266:
+long do_mprotect(struct mm_struct *mm, unsigned long start, size_t len,=20
                                                                        ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#513: FILE: mm/mprotect.c:285:
+	vma =3D find_vma_prev(mm, start, &prev);
 	    ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#526: FILE: mm/mprotect.c:340:
+asmlinkage long sys_mprotect(unsigned long start, size_t len, unsigned lon=

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#526: FILE: mm/mprotect.c:340:
+asmlinkage long sys_mprotect(unsigned long start, size_t len, unsigned lon=
                                                                           ^

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#528: FILE: mm/mprotect.c:341:
+asmlinkage long sys_mprotect(unsigned long start, size_t len, unsigned lon=
+{

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#529: FILE: mm/mprotect.c:342:
+	return(do_mprotect(current->mm, start, len, prot));

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#535: FILE: mm/proc_mm.c:1:
+/*=20

WARNING:CONST_STRUCT: struct file_operations should normally be const
#546: FILE: mm/proc_mm.c:12:
+static struct file_operations proc_mm_fops;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#550: FILE: mm/proc_mm.c:16:
+	struct mm_struct *ret =3D ERR_PTR(-EBADF);
 	                      ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#553: FILE: mm/proc_mm.c:19:
+	file =3D fget(fd);
 	     ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#557: FILE: mm/proc_mm.c:23:
+	ret =3D ERR_PTR(-EINVAL);
 	    ^

ERROR:SPACING: spaces required around that '!=' (ctx:WxV)
#558: FILE: mm/proc_mm.c:24:
+	if(file->f_op !=3D &proc_mm_fops)
 	              ^

CHECK:SPACING: spaces preferred around that '&' (ctx:WxV)
#558: FILE: mm/proc_mm.c:24:
+	if(file->f_op !=3D &proc_mm_fops)
 	                   ^

ERROR:SPACING: space required before the open parenthesis '('
#558: FILE: mm/proc_mm.c:24:
+	if(file->f_op !=3D &proc_mm_fops)

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#561: FILE: mm/proc_mm.c:27:
+	ret =3D file->private_data;
 	    ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#569: FILE: mm/proc_mm.c:35:
+extern long do_mmap2(struct mm_struct *mm, unsigned long addr,=20
                                                              ^

ERROR:SPACING: spaces required around that '=' (ctx:OxV)
#569: FILE: mm/proc_mm.c:35:
+extern long do_mmap2(struct mm_struct *mm, unsigned long addr,=20
                                                               ^

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#569: FILE: mm/proc_mm.c:35:
+extern long do_mmap2(struct mm_struct *mm, unsigned long addr,=20

ERROR:SPACING: space required after that ',' (ctx:VxO)
#570: FILE: mm/proc_mm.c:36:
+		     unsigned long len, unsigned long prot,=20
 		                                          ^

ERROR:SPACING: spaces required around that '=' (ctx:OxV)
#570: FILE: mm/proc_mm.c:36:
+		     unsigned long len, unsigned long prot,=20
 		                                           ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#577: FILE: mm/proc_mm.c:43:
+	struct mm_struct *mm =3D file->private_data;
 	                     ^

ERROR:SPACING: space required before the open parenthesis '('
#581: FILE: mm/proc_mm.c:47:
+	if(count > sizeof(req))

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#584: FILE: mm/proc_mm.c:50:
+	n =3D copy_from_user(&req, buffer, count);
 	  ^

ERROR:SPACING: spaces required around that '!=' (ctx:WxV)
#585: FILE: mm/proc_mm.c:51:
+	if(n !=3D 0)
 	     ^

ERROR:SPACING: space required before the open parenthesis '('
#585: FILE: mm/proc_mm.c:51:
+	if(n !=3D 0)

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#588: FILE: mm/proc_mm.c:54:
+	ret =3D count;
 	    ^

ERROR:SPACING: space required before the open brace '{'
#589: FILE: mm/proc_mm.c:55:
+	switch(req.op){

ERROR:SPACING: space required before the open parenthesis '('
#589: FILE: mm/proc_mm.c:55:
+	switch(req.op){

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#591: FILE: mm/proc_mm.c:57:
+		struct mm_mmap *map =3D &req.u.mmap;
 		                    ^

CHECK:SPACING: spaces preferred around that '&' (ctx:WxV)
#591: FILE: mm/proc_mm.c:57:
+		struct mm_mmap *map =3D &req.u.mmap;
 		                        ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#593: FILE: mm/proc_mm.c:59:
+		ret =3D do_mmap2(mm, map->addr, map->len, map->prot,=20
 		    ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#593: FILE: mm/proc_mm.c:59:
+		ret =3D do_mmap2(mm, map->addr, map->len, map->prot,=20
 		                                                   ^

ERROR:SPACING: spaces required around that '=' (ctx:OxV)
#593: FILE: mm/proc_mm.c:59:
+		ret =3D do_mmap2(mm, map->addr, map->len, map->prot,=20
 		                                                    ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#595: FILE: mm/proc_mm.c:61:
+		if((ret & ~PAGE_MASK) =3D=3D 0)
 		                      ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#595: FILE: mm/proc_mm.c:61:
+		if((ret & ~PAGE_MASK) =3D=3D 0)
 		                         ^

ERROR:SPACING: space required before the open parenthesis '('
#595: FILE: mm/proc_mm.c:61:
+		if((ret & ~PAGE_MASK) =3D=3D 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#595: FILE: mm/proc_mm.c:61:
+		if((ret & ~PAGE_MASK) =3D=3D 0)

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#596: FILE: mm/proc_mm.c:62:
+			ret =3D count;
 			    ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#597: FILE: mm/proc_mm.c:63:
+=09
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#601: FILE: mm/proc_mm.c:67:
+		struct mm_munmap *unmap =3D &req.u.munmap;
 		                        ^

CHECK:SPACING: spaces preferred around that '&' (ctx:WxV)
#601: FILE: mm/proc_mm.c:67:
+		struct mm_munmap *unmap =3D &req.u.munmap;
 		                            ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#604: FILE: mm/proc_mm.c:70:
+		ret =3D do_munmap(mm, unmap->addr, unmap->len);
 		    ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#607: FILE: mm/proc_mm.c:73:
+		if(ret =3D=3D 0)
 		       ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#607: FILE: mm/proc_mm.c:73:
+		if(ret =3D=3D 0)
 		          ^

ERROR:SPACING: space required before the open parenthesis '('
#607: FILE: mm/proc_mm.c:73:
+		if(ret =3D=3D 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#607: FILE: mm/proc_mm.c:73:
+		if(ret =3D=3D 0)

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#608: FILE: mm/proc_mm.c:74:
+			ret =3D count;
 			    ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#612: FILE: mm/proc_mm.c:78:
+		struct mm_mprotect *protect =3D &req.u.mprotect;
 		                            ^

CHECK:SPACING: spaces preferred around that '&' (ctx:WxV)
#612: FILE: mm/proc_mm.c:78:
+		struct mm_mprotect *protect =3D &req.u.mprotect;
 		                                ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#614: FILE: mm/proc_mm.c:80:
+		ret =3D do_mprotect(mm, protect->addr, protect->len,=20
 		    ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#614: FILE: mm/proc_mm.c:80:
+		ret =3D do_mprotect(mm, protect->addr, protect->len,=20
 		                                                   ^

ERROR:SPACING: spaces required around that '=' (ctx:OxV)
#614: FILE: mm/proc_mm.c:80:
+		ret =3D do_mprotect(mm, protect->addr, protect->len,=20
 		                                                    ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#616: FILE: mm/proc_mm.c:82:
+		if(ret =3D=3D 0)
 		       ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#616: FILE: mm/proc_mm.c:82:
+		if(ret =3D=3D 0)
 		          ^

ERROR:SPACING: space required before the open parenthesis '('
#616: FILE: mm/proc_mm.c:82:
+		if(ret =3D=3D 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#616: FILE: mm/proc_mm.c:82:
+		if(ret =3D=3D 0)

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#617: FILE: mm/proc_mm.c:83:
+			ret =3D count;
 			    ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#622: FILE: mm/proc_mm.c:88:
+		struct mm_struct *from =3D proc_mm_get_mm(req.u.copy_segments);
 		                       ^

ERROR:SPACING: space required before the open brace '{'
#624: FILE: mm/proc_mm.c:90:
+		if(IS_ERR(from)){

ERROR:SPACING: space required before the open parenthesis '('
#624: FILE: mm/proc_mm.c:90:
+		if(IS_ERR(from)){

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#625: FILE: mm/proc_mm.c:91:
+			ret =3D PTR_ERR(from);
 			    ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#633: FILE: mm/proc_mm.c:99:
+		ret =3D -EINVAL;
 		    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#633: FILE: mm/proc_mm.c:99:
+		ret =3D -EINVAL;
 		        ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#642: FILE: mm/proc_mm.c:108:
+	struct mm_struct *mm =3D mm_alloc();
 	                     ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#645: FILE: mm/proc_mm.c:111:
+	ret =3D -ENOMEM;
 	    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#645: FILE: mm/proc_mm.c:111:
+	ret =3D -ENOMEM;
 	        ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#646: FILE: mm/proc_mm.c:112:
+	if(mm =3D=3D NULL)
 	      ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#646: FILE: mm/proc_mm.c:112:
+	if(mm =3D=3D NULL)
 	         ^

ERROR:SPACING: space required before the open parenthesis '('
#646: FILE: mm/proc_mm.c:112:
+	if(mm =3D=3D NULL)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#646: FILE: mm/proc_mm.c:112:
+	if(mm =3D=3D NULL)

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#649: FILE: mm/proc_mm.c:115:
+	ret =3D init_new_context(current, mm);
 	    ^

ERROR:SPACING: space required before the open parenthesis '('
#650: FILE: mm/proc_mm.c:116:
+	if(ret)

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#658: FILE: mm/proc_mm.c:124:
+	file->private_data =3D mm;
 	                   ^

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#660: FILE: mm/proc_mm.c:126:
+	return(0);

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#670: FILE: mm/proc_mm.c:136:
+	struct mm_struct *mm =3D file->private_data;
 	                     ^

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#673: FILE: mm/proc_mm.c:139:
+	return(0);

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#676: FILE: mm/proc_mm.c:142:
+static struct file_operations proc_mm_fops =3D {
                                            ^

WARNING:CONST_STRUCT: struct file_operations should normally be const
#676: FILE: mm/proc_mm.c:142:
+static struct file_operations proc_mm_fops =3D {

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#677: FILE: mm/proc_mm.c:143:
+	.open		=3D open_proc_mm,
 	     		^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#678: FILE: mm/proc_mm.c:144:
+	.release	=3D release_proc_mm,
 	        	^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#679: FILE: mm/proc_mm.c:145:
+	.write		=3D write_proc_mm,
 	      		^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#686: FILE: mm/proc_mm.c:152:
+	ent =3D create_proc_entry("mm", 0222, &proc_root);
 	    ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#687: FILE: mm/proc_mm.c:153:
+	if(ent =3D=3D NULL){
 	       ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#687: FILE: mm/proc_mm.c:153:
+	if(ent =3D=3D NULL){
 	          ^

ERROR:SPACING: space required before the open brace '{'
#687: FILE: mm/proc_mm.c:153:
+	if(ent =3D=3D NULL){

ERROR:SPACING: space required before the open parenthesis '('
#687: FILE: mm/proc_mm.c:153:
+	if(ent =3D=3D NULL){

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#687: FILE: mm/proc_mm.c:153:
+	if(ent =3D=3D NULL){

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#688: FILE: mm/proc_mm.c:154:
+		printk("make_proc_mm : Failed to register /proc/mm\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'make_proc_mm', this function's name, in a string
#688: FILE: mm/proc_mm.c:154:
+		printk("make_proc_mm : Failed to register /proc/mm\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#689: FILE: mm/proc_mm.c:155:
+		return(0);

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#691: FILE: mm/proc_mm.c:157:
+	ent->proc_fops =3D &proc_mm_fops;
 	               ^

CHECK:SPACING: spaces preferred around that '&' (ctx:WxV)
#691: FILE: mm/proc_mm.c:157:
+	ent->proc_fops =3D &proc_mm_fops;
 	                   ^

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#693: FILE: mm/proc_mm.c:159:
+	return(0);

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#696: FILE: mm/proc_mm.c:162:
+__initcall(make_proc_mm);

WARNING:BAD_SIGN_OFF: Do not use whitespace before To:
#752: 
   To:   editor@lwn.net, scoop@freshmeat.net, kernel@linuxtoday.com, kernel=

WARNING:BAD_SIGN_OFF: Use a single space after To:
#752: 
   To:   editor@lwn.net, scoop@freshmeat.net, kernel@linuxtoday.com, kernel=

WARNING:BAD_SIGN_OFF: email address 'editor@lwn.net, scoop@freshmeat.net, kernel@linuxtoday.com, kernel=' might be better as 'editor@lwn.net scoop@freshmeat.net, kernel@linuxtoday.com, kernel='
#752: 
   To:   editor@lwn.net, scoop@freshmeat.net, kernel@linuxtoday.com, kernel=

WARNING:BAD_SIGN_OFF: Unexpected content after email: 'editor@lwn.net, scoop@freshmeat.net, kernel@linuxtoday.com, kernel=', should be: 'editor@lwn.net (scoop@freshmeat.net, kernel@linuxtoday.com, kernel=)'
#752: 
   To:   editor@lwn.net, scoop@freshmeat.net, kernel@linuxtoday.com, kernel=

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#809: FILE: arch/arm/kernel/process.c:369:
+pid_t arch_kernel_thread(int (*fn)(void *), void *arg, unsigned long flags=
                                                                           ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#845: FILE: arch/i386/kernel/process.c:498:
+int arch_kernel_thread(int (*fn)(void *), void * arg, unsigned long flags)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#888: FILE: arch/m68k/kernel/process.c:127:
+int arch_kernel_thread(int (*fn)(void *), void * arg, unsigned long flags)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#901: FILE: arch/mips/kernel/process.c:158:
+int arch_kernel_thread(int (*fn)(void *), void * arg, unsigned long flags)

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#928: FILE: arch/parisc/kernel/process.c:121:
+pid_t arch_kernel_thread(int (*fn)(void *), void *arg, unsigned long flags=
                                                                           ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#973: FILE: arch/s390/kernel/process.c:108:
+int arch_kernel_thread(int (*fn)(void *), void * arg, unsigned long flags)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#986: FILE: arch/s390x/kernel/process.c:105:
+int arch_kernel_thread(int (*fn)(void *), void * arg, unsigned long flags)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#999: FILE: arch/sh/kernel/process.c:121:
+int arch_kernel_thread(int (*fn)(void *), void * arg, unsigned long flags)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1012: FILE: arch/sparc/kernel/process.c:679:
+pid_t arch_kernel_thread(int (*fn)(void *), void * arg, unsigned long flag=

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#1012: FILE: arch/sparc/kernel/process.c:679:
+pid_t arch_kernel_thread(int (*fn)(void *), void * arg, unsigned long flag=
                                                                           ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1026: FILE: arch/sparc64/kernel/process.c:661:
+pid_t arch_kernel_thread(int (*fn)(void *), void * arg, unsigned long flag=

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#1026: FILE: arch/sparc64/kernel/process.c:661:
+pid_t arch_kernel_thread(int (*fn)(void *), void * arg, unsigned long flag=
                                                                           ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1040: FILE: arch/um/kernel/process_kern.c:174:
+int arch_kernel_thread(int (*fn)(void *), void * arg, unsigned long flags)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1048: FILE: arch/um/kernel/process_kern.c:181:
+       if(pid < 0) panic("do_fork failed in arch_kernel_thread");$

ERROR:SPACING: space required before the open parenthesis '('
#1048: FILE: arch/um/kernel/process_kern.c:181:
+       if(pid < 0) panic("do_fork failed in arch_kernel_thread");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1048: FILE: arch/um/kernel/process_kern.c:181:
+       if(pid < 0) panic("do_fork failed in arch_kernel_thread");

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'arch_kernel_thread', this function's name, in a string
#1048: FILE: arch/um/kernel/process_kern.c:181:
+       if(pid < 0) panic("do_fork failed in arch_kernel_thread");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1061: FILE: fs/exec.c:562:
+       if (current->euid =3D=3D current->uid && current->egid =3D=3D curre=$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#1061: FILE: fs/exec.c:562:
+       if (current->euid =3D=3D current->uid && current->egid =3D=3D curre=
[...]
                current->mm->dumpable =3D 1;

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1061: FILE: fs/exec.c:562:
+       if (current->euid =3D=3D current->uid && current->egid =3D=3D curre=
                          ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1061: FILE: fs/exec.c:562:
+       if (current->euid =3D=3D current->uid && current->egid =3D=3D curre=
                             ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1061: FILE: fs/exec.c:562:
+       if (current->euid =3D=3D current->uid && current->egid =3D=3D curre=
                                                               ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1061: FILE: fs/exec.c:562:
+       if (current->euid =3D=3D current->uid && current->egid =3D=3D curre=
                                                                  ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#1061: FILE: fs/exec.c:562:
+       if (current->euid =3D=3D current->uid && current->egid =3D=3D curre=
                                                                           ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1061: FILE: fs/exec.c:562:
+       if (current->euid =3D=3D current->uid && current->egid =3D=3D curre=

ERROR:CODE_INDENT: code indent should use tabs where possible
#1064: FILE: fs/exec.c:564:
+               current->task_dumpable =3D 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1064: FILE: fs/exec.c:564:
+               current->task_dumpable =3D 1;$

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1064: FILE: fs/exec.c:564:
+               current->task_dumpable =3D 1;
                                       ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1065: FILE: fs/exec.c:565:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1074: FILE: fs/exec.c:957:
+       if (!is_dumpable(current))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#1074: FILE: fs/exec.c:957:
+       if (!is_dumpable(current))
                goto fail;

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#1088: FILE: include/asm-alpha/processor.h:122:
+extern long arch_kernel_thread(int (*fn)(void *), void *arg, unsigned long=
                                                                           ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1088: FILE: include/asm-alpha/processor.h:122:
+extern long arch_kernel_thread(int (*fn)(void *), void *arg, unsigned long=

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#1088: FILE: include/asm-alpha/processor.h:122:
+extern long arch_kernel_thread(int (*fn)(void *), void *arg, unsigned long=

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1103: FILE: include/asm-arm/processor.h:120:
+extern int arch_kernel_thread(int (*fn)(void *), void *arg, unsigned long =

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#1103: FILE: include/asm-arm/processor.h:120:
+extern int arch_kernel_thread(int (*fn)(void *), void *arg, unsigned long =

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1118: FILE: include/asm-cris/processor.h:84:
+extern int arch_kernel_thread(int (*fn)(void *), void * arg, unsigned long=

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#1118: FILE: include/asm-cris/processor.h:84:
+extern int arch_kernel_thread(int (*fn)(void *), void * arg, unsigned long=
                                                                           ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1118: FILE: include/asm-cris/processor.h:84:
+extern int arch_kernel_thread(int (*fn)(void *), void * arg, unsigned long=

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#1118: FILE: include/asm-cris/processor.h:84:
+extern int arch_kernel_thread(int (*fn)(void *), void * arg, unsigned long=

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1133: FILE: include/asm-i386/processor.h:436:
+extern int arch_kernel_thread(int (*fn)(void *), void * arg, unsigned long=

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#1133: FILE: include/asm-i386/processor.h:436:
+extern int arch_kernel_thread(int (*fn)(void *), void * arg, unsigned long=
                                                                           ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1133: FILE: include/asm-i386/processor.h:436:
+extern int arch_kernel_thread(int (*fn)(void *), void * arg, unsigned long=

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#1133: FILE: include/asm-i386/processor.h:436:
+extern int arch_kernel_thread(int (*fn)(void *), void * arg, unsigned long=

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#1148: FILE: include/asm-ia64/processor.h:479:
+extern int arch_kernel_thread (int (*fn)(void *), void *arg, unsigned long=
                                                                           ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1148: FILE: include/asm-ia64/processor.h:479:
+extern int arch_kernel_thread (int (*fn)(void *), void *arg, unsigned long=

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#1148: FILE: include/asm-ia64/processor.h:479:
+extern int arch_kernel_thread (int (*fn)(void *), void *arg, unsigned long=

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1163: FILE: include/asm-m68k/processor.h:108:
+extern int arch_kernel_thread(int (*fn)(void *), void * arg, unsigned long=

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#1163: FILE: include/asm-m68k/processor.h:108:
+extern int arch_kernel_thread(int (*fn)(void *), void * arg, unsigned long=
                                                                           ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1163: FILE: include/asm-m68k/processor.h:108:
+extern int arch_kernel_thread(int (*fn)(void *), void * arg, unsigned long=

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#1163: FILE: include/asm-m68k/processor.h:108:
+extern int arch_kernel_thread(int (*fn)(void *), void * arg, unsigned long=

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1178: FILE: include/asm-mips/processor.h:189:
+extern int arch_kernel_thread(int (*fn)(void *), void * arg, unsigned long=

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#1178: FILE: include/asm-mips/processor.h:189:
+extern int arch_kernel_thread(int (*fn)(void *), void * arg, unsigned long=
                                                                           ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1178: FILE: include/asm-mips/processor.h:189:
+extern int arch_kernel_thread(int (*fn)(void *), void * arg, unsigned long=

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#1178: FILE: include/asm-mips/processor.h:189:
+extern int arch_kernel_thread(int (*fn)(void *), void * arg, unsigned long=

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1193: FILE: include/asm-mips64/processor.h:248:
+extern int arch_kernel_thread(int (*fn)(void *), void * arg, unsigned long=

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#1193: FILE: include/asm-mips64/processor.h:248:
+extern int arch_kernel_thread(int (*fn)(void *), void * arg, unsigned long=
                                                                           ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1193: FILE: include/asm-mips64/processor.h:248:
+extern int arch_kernel_thread(int (*fn)(void *), void * arg, unsigned long=

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#1193: FILE: include/asm-mips64/processor.h:248:
+extern int arch_kernel_thread(int (*fn)(void *), void * arg, unsigned long=

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1208: FILE: include/asm-parisc/processor.h:308:
+extern int arch_kernel_thread(int (*fn)(void *), void * arg, unsigned long=

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#1208: FILE: include/asm-parisc/processor.h:308:
+extern int arch_kernel_thread(int (*fn)(void *), void * arg, unsigned long=
                                                                           ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1208: FILE: include/asm-parisc/processor.h:308:
+extern int arch_kernel_thread(int (*fn)(void *), void * arg, unsigned long=

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#1208: FILE: include/asm-parisc/processor.h:308:
+extern int arch_kernel_thread(int (*fn)(void *), void * arg, unsigned long=

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#1223: FILE: include/asm-ppc/processor.h:596:
+extern long arch_kernel_thread(int (*fn)(void *), void *arg, unsigned long=
                                                                           ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1223: FILE: include/asm-ppc/processor.h:596:
+extern long arch_kernel_thread(int (*fn)(void *), void *arg, unsigned long=

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#1223: FILE: include/asm-ppc/processor.h:596:
+extern long arch_kernel_thread(int (*fn)(void *), void *arg, unsigned long=

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#1238: FILE: include/asm-ppc64/processor.h:612:
+extern long arch_kernel_thread(int (*fn)(void *), void *arg, unsigned long=
                                                                           ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1238: FILE: include/asm-ppc64/processor.h:612:
+extern long arch_kernel_thread(int (*fn)(void *), void *arg, unsigned long=

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#1238: FILE: include/asm-ppc64/processor.h:612:
+extern long arch_kernel_thread(int (*fn)(void *), void *arg, unsigned long=

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1253: FILE: include/asm-s390/processor.h:116:
+extern int arch_kernel_thread(int (*fn)(void *), void * arg, unsigned long=

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#1253: FILE: include/asm-s390/processor.h:116:
+extern int arch_kernel_thread(int (*fn)(void *), void * arg, unsigned long=
                                                                           ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1253: FILE: include/asm-s390/processor.h:116:
+extern int arch_kernel_thread(int (*fn)(void *), void * arg, unsigned long=

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#1253: FILE: include/asm-s390/processor.h:116:
+extern int arch_kernel_thread(int (*fn)(void *), void * arg, unsigned long=

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1268: FILE: include/asm-s390x/processor.h:130:
+extern int arch_kernel_thread(int (*fn)(void *), void * arg, unsigned long=

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#1268: FILE: include/asm-s390x/processor.h:130:
+extern int arch_kernel_thread(int (*fn)(void *), void * arg, unsigned long=
                                                                           ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1268: FILE: include/asm-s390x/processor.h:130:
+extern int arch_kernel_thread(int (*fn)(void *), void * arg, unsigned long=

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#1268: FILE: include/asm-s390x/processor.h:130:
+extern int arch_kernel_thread(int (*fn)(void *), void * arg, unsigned long=

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1283: FILE: include/asm-sh/processor.h:140:
+extern int arch_kernel_thread(int (*fn)(void *), void * arg, unsigned long=

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#1283: FILE: include/asm-sh/processor.h:140:
+extern int arch_kernel_thread(int (*fn)(void *), void * arg, unsigned long=
                                                                           ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1283: FILE: include/asm-sh/processor.h:140:
+extern int arch_kernel_thread(int (*fn)(void *), void * arg, unsigned long=

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#1283: FILE: include/asm-sh/processor.h:140:
+extern int arch_kernel_thread(int (*fn)(void *), void * arg, unsigned long=

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1298: FILE: include/asm-sparc/processor.h:149:
+extern pid_t arch_kernel_thread(int (*fn)(void *), void * arg, unsigned lo=

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1298: FILE: include/asm-sparc/processor.h:149:
+extern pid_t arch_kernel_thread(int (*fn)(void *), void * arg, unsigned lo=

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#1298: FILE: include/asm-sparc/processor.h:149:
+extern pid_t arch_kernel_thread(int (*fn)(void *), void * arg, unsigned lo=
                                                                           ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1298: FILE: include/asm-sparc/processor.h:149:
+extern pid_t arch_kernel_thread(int (*fn)(void *), void * arg, unsigned lo=

WARNING:FUNCTION_ARGUMENTS: function definition argument 'gs' should also have an identifier name
#1298: FILE: include/asm-sparc/processor.h:149:
+extern pid_t arch_kernel_thread(int (*fn)(void *), void * arg, unsigned lo=

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1313: FILE: include/asm-sparc64/processor.h:273:
+extern pid_t arch_kernel_thread(int (*fn)(void *), void * arg, unsigned lo=

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1313: FILE: include/asm-sparc64/processor.h:273:
+extern pid_t arch_kernel_thread(int (*fn)(void *), void * arg, unsigned lo=

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#1313: FILE: include/asm-sparc64/processor.h:273:
+extern pid_t arch_kernel_thread(int (*fn)(void *), void * arg, unsigned lo=
                                                                           ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1313: FILE: include/asm-sparc64/processor.h:273:
+extern pid_t arch_kernel_thread(int (*fn)(void *), void * arg, unsigned lo=

WARNING:FUNCTION_ARGUMENTS: function definition argument 'gs' should also have an identifier name
#1313: FILE: include/asm-sparc64/processor.h:273:
+extern pid_t arch_kernel_thread(int (*fn)(void *), void * arg, unsigned lo=

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1325: FILE: include/linux/sched.h:365:
+       unsigned task_dumpable:1;$

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#1333: FILE: include/linux/sched.h:489:
+#define is_dumpable(tsk)       ((tsk)->task_dumpable && (tsk)->mm->dumpabl=
                                                                           ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1333: FILE: include/linux/sched.h:489:
+#define is_dumpable(tsk)       ((tsk)->task_dumpable && (tsk)->mm->dumpabl=

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'tsk' - possible side-effects?
#1333: FILE: include/linux/sched.h:489:
+#define is_dumpable(tsk)       ((tsk)->task_dumpable && (tsk)->mm->dumpabl=

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1343: FILE: include/linux/sched.h:854:
+extern long kernel_thread(int (*fn)(void *), void * arg, unsigned long fla=

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#1343: FILE: include/linux/sched.h:854:
+extern long kernel_thread(int (*fn)(void *), void * arg, unsigned long fla=
                                                                           ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1343: FILE: include/linux/sched.h:854:
+extern long kernel_thread(int (*fn)(void *), void * arg, unsigned long fla=

WARNING:INCLUDE_LINUX: Use #include <linux/processor.h> instead of <asm/processor.h>
#1356: FILE: kernel/fork.c:31:
+#include <asm/processor.h>

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1364: FILE: kernel/fork.c:579:
+long kernel_thread(int (*fn)(void *), void * arg, unsigned long flags)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1366: FILE: kernel/fork.c:581:
+       struct task_struct *task =3D current;$

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1366: FILE: kernel/fork.c:581:
+       struct task_struct *task =3D current;
                                 ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1367: FILE: kernel/fork.c:582:
+       unsigned old_task_dumpable;$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1367: FILE: kernel/fork.c:582:
+       unsigned old_task_dumpable;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1368: FILE: kernel/fork.c:583:
+       long ret;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1371: FILE: kernel/fork.c:586:
+       task_lock(task);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1372: FILE: kernel/fork.c:587:
+       if (task->ptrace) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#1372: FILE: kernel/fork.c:587:
+       if (task->ptrace) {
+               task_unlock(task);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1373: FILE: kernel/fork.c:588:
+               task_unlock(task);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1373: FILE: kernel/fork.c:588:
+               task_unlock(task);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1374: FILE: kernel/fork.c:589:
+               return -EPERM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1374: FILE: kernel/fork.c:589:
+               return -EPERM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1375: FILE: kernel/fork.c:590:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1377: FILE: kernel/fork.c:592:
+       old_task_dumpable =3D task->task_dumpable;$

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1377: FILE: kernel/fork.c:592:
+       old_task_dumpable =3D task->task_dumpable;
                          ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1378: FILE: kernel/fork.c:593:
+       task->task_dumpable =3D 0;$

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1378: FILE: kernel/fork.c:593:
+       task->task_dumpable =3D 0;
                            ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1379: FILE: kernel/fork.c:594:
+       task_unlock(task);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1381: FILE: kernel/fork.c:596:
+       ret =3D arch_kernel_thread(fn, arg, flags);$

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1381: FILE: kernel/fork.c:596:
+       ret =3D arch_kernel_thread(fn, arg, flags);
            ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1384: FILE: kernel/fork.c:599:
+       current->task_dumpable =3D old_task_dumpable;$

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1384: FILE: kernel/fork.c:599:
+       current->task_dumpable =3D old_task_dumpable;
                               ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1386: FILE: kernel/fork.c:601:
+       return ret;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1399: FILE: kernel/ptrace.c:24:
+       mb();$

WARNING:MEMORY_BARRIER: memory barrier without comment
#1399: FILE: kernel/ptrace.c:24:
+       mb();

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1400: FILE: kernel/ptrace.c:25:
+       if (!is_dumpable(child))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#1400: FILE: kernel/ptrace.c:25:
+       if (!is_dumpable(child))
+               return -EPERM;

ERROR:CODE_INDENT: code indent should use tabs where possible
#1401: FILE: kernel/ptrace.c:26:
+               return -EPERM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1401: FILE: kernel/ptrace.c:26:
+               return -EPERM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1411: FILE: kernel/ptrace.c:64:
+       if (!is_dumpable(task) && !capable(CAP_SYS_PTRACE))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#1411: FILE: kernel/ptrace.c:64:
+       if (!is_dumpable(task) && !capable(CAP_SYS_PTRACE))
                goto bad;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1419: FILE: kernel/ptrace.c:130:
+       if (!is_dumpable(tsk) || (&init_mm =3D=3D mm))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#1419: FILE: kernel/ptrace.c:130:
+       if (!is_dumpable(tsk) || (&init_mm =3D=3D mm))
+               mm =3D NULL;

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1419: FILE: kernel/ptrace.c:130:
+       if (!is_dumpable(tsk) || (&init_mm =3D=3D mm))
                                           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1419: FILE: kernel/ptrace.c:130:
+       if (!is_dumpable(tsk) || (&init_mm =3D=3D mm))
                                              ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1419: FILE: kernel/ptrace.c:130:
+       if (!is_dumpable(tsk) || (&init_mm =3D=3D mm))

ERROR:CODE_INDENT: code indent should use tabs where possible
#1420: FILE: kernel/ptrace.c:131:
+               mm =3D NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1420: FILE: kernel/ptrace.c:131:
+               mm =3D NULL;$

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1420: FILE: kernel/ptrace.c:131:
+               mm =3D NULL;
                   ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1433: FILE: kernel/sys.c:1289:
+                       if (is_dumpable(current))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1433: FILE: kernel/sys.c:1289:
+                       if (is_dumpable(current))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (23, 31)
#1433: FILE: kernel/sys.c:1289:
+                       if (is_dumpable(current))
                                error =3D 1;

ERROR:CODE_INDENT: code indent should use tabs where possible
#1442: FILE: kernel/sys.c:1297:
+                       if (is_dumpable(current))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1442: FILE: kernel/sys.c:1297:
+                       if (is_dumpable(current))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (23, 31)
#1442: FILE: kernel/sys.c:1297:
+                       if (is_dumpable(current))
+                               current->mm->dumpable =3D arg2;

ERROR:CODE_INDENT: code indent should use tabs where possible
#1443: FILE: kernel/sys.c:1298:
+                               current->mm->dumpable =3D arg2;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1443: FILE: kernel/sys.c:1298:
+                               current->mm->dumpable =3D arg2;$

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1443: FILE: kernel/sys.c:1298:
+                               current->mm->dumpable =3D arg2;
                                                      ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000384576.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 218 errors, 80 warnings, 39 checks, 1024 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000384576.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
