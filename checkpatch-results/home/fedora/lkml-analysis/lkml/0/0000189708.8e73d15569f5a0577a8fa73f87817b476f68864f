WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'tpm_atml_send', this function's name, in a string
#131: FILE: drivers/char/tpm/tpm_atmel.c:103:
+	dev_dbg(chip->dev, "tpm_atml_send: ");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:HOTPLUG_SECTION: Using __devinitdata is unnecessary
#151: FILE: drivers/char/tpm/tpm_atmel.c:126:
+static struct pci_device_id tpm_pci_tbl[] __devinitdata = {

WARNING:ONE_SEMICOLON: Statements terminations use 1 semicolon
#204: FILE: drivers/char/tpm/tpm_atmel.c:179:
+		return -EIO;;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#221: FILE: drivers/char/tpm/tpm_atmel.c:204:
+	if ((rc = tpm_register_hardware(&atmel_tpm->dev, &tpm_atmel)) < 0)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#329: FILE: drivers/char/tpm/tpm.c:124:
+^I^Itpm_write_index(TPM_BASE_ADDR_HI, (base & 0xFF00) >> 8); $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#351: FILE: drivers/char/tpm/tpm.c:147:
+	count = be32_to_cpu(*((__be32 *) (buf + 2)));

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#363: FILE: drivers/char/tpm/tpm.c:158:
+		be32_to_cpu(*((__be32 *) (buf + 6))));

CHECK:SPACING: No space is necessary after a cast
#373: FILE: drivers/char/tpm/tpm.c:164:
+	if ((rc = chip->vendor->send(chip, (u8 *) buf, count)) < 0) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#373: FILE: drivers/char/tpm/tpm.c:164:
+	if ((rc = chip->vendor->send(chip, (u8 *) buf, count)) < 0) {

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'tpm_transmit', this function's name, in a string
#375: FILE: drivers/char/tpm/tpm.c:166:
+			"tpm_transmit: tpm_send: error %Zd\n", rc);

WARNING:PRINTF_Z: %Zd is non-standard C, use %zd
#375: FILE: drivers/char/tpm/tpm.c:166:
+			"tpm_transmit: tpm_send: error %Zd\n", rc);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'status == chip->vendor->req_canceled'
#385: FILE: drivers/char/tpm/tpm.c:178:
+		if ((status == chip->vendor->req_canceled)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:UNNECESSARY_PARENTHESES: Unnecessary parentheses - maybe == should be = ?
#385: FILE: drivers/char/tpm/tpm.c:178:
+		if ((status == chip->vendor->req_canceled)) {

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#395: FILE: drivers/char/tpm/tpm.c:187:
+	while (time_before(jiffies, stop));

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:WHILE_AFTER_BRACE: while should follow close brace '}'
#395: FILE: drivers/char/tpm/tpm.c:187:
+	}
+	while (time_before(jiffies, stop));

while should follow the closing bracket on the same line::

  do {
          ...
  } while(something);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: No space is necessary after a cast
#411: FILE: drivers/char/tpm/tpm.c:196:
+	rc = chip->vendor->recv(chip, (u8 *) buf, bufsiz);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'tpm_transmit', this function's name, in a string
#414: FILE: drivers/char/tpm/tpm.c:199:
+			"tpm_transmit: tpm_recv: error %Zd\n", rc);

WARNING:PRINTF_Z: %Zd is non-standard C, use %zd
#414: FILE: drivers/char/tpm/tpm.c:199:
+			"tpm_transmit: tpm_recv: error %Zd\n", rc);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#459: FILE: drivers/char/tpm/tpm.c:237:
+	if ((len =

CHECK:SPACING: No space is necessary after a cast
#464: FILE: drivers/char/tpm/tpm.c:241:
+	num_pcrs = be32_to_cpu(*((__be32 *) (data + 14)));

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#473: FILE: drivers/char/tpm/tpm.c:258:
+EXPORT_SYMBOL_GPL(tpm_show_pcrs);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#510: FILE: drivers/char/tpm/tpm.c:285:
+	if ((len = tpm_transmit(chip, data, READ_PUBEK_RESULT_SIZE)) <

CHECK:SPACING: No space is necessary after a cast
#533: FILE: drivers/char/tpm/tpm.c:312:
+		    be32_to_cpu(*((__be32 *) (data + 32))));

WARNING:INDENTED_LABEL: labels should not be indented
#542: FILE: drivers/char/tpm/tpm.c:320:
+      out:

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#548: FILE: drivers/char/tpm/tpm.c:325:
+EXPORT_SYMBOL_GPL(tpm_show_pubek);

CHECK:SPACING: No space is necessary after a cast
#588: FILE: drivers/char/tpm/tpm.c:363:
+		       be32_to_cpu(*((__be32 *) (data + 14))));

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#594: FILE: drivers/char/tpm/tpm.c:367:
+	if ((len =

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#604: FILE: drivers/char/tpm/tpm.c:379:
+EXPORT_SYMBOL_GPL(tpm_show_caps);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#606: FILE: drivers/char/tpm/tpm.c:381:
+ssize_t tpm_store_cancel(struct device * dev, const char *buf,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#610: FILE: drivers/char/tpm/tpm.c:385:
+	struct tpm_chip *chip = dev_get_drvdata(dev);
+	if (chip == NULL)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!chip"
#610: FILE: drivers/char/tpm/tpm.c:385:
+	if (chip == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#617: FILE: drivers/char/tpm/tpm.c:392:
+EXPORT_SYMBOL_GPL(tpm_store_cancel);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#681: FILE: drivers/char/tpm/tpm.c:465:
+tpm_write(struct file * file, const char __user * buf,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#681: FILE: drivers/char/tpm/tpm.c:465:
+tpm_write(struct file * file, const char __user * buf,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#682: FILE: drivers/char/tpm/tpm.c:466:
+	  size_t size, loff_t * off)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#707: FILE: drivers/char/tpm/tpm.c:502:
+tpm_read(struct file * file, char __user * buf, size_t size, loff_t * off)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#707: FILE: drivers/char/tpm/tpm.c:502:
+tpm_read(struct file * file, char __user * buf, size_t size, loff_t * off)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#707: FILE: drivers/char/tpm/tpm.c:502:
+tpm_read(struct file * file, char __user * buf, size_t size, loff_t * off)

CHECK:SPACING: No space is necessary after a cast
#741: FILE: drivers/char/tpm/tpm.c:516:
+		    ((void __user *) buf, chip->data_buffer, ret_size))

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#788: FILE: drivers/char/tpm/tpm.c:555:
+EXPORT_SYMBOL_GPL(tpm_remove_hardware);

CHECK:SPACING: No space is necessary after a cast
#821: FILE: drivers/char/tpm/tpm.c:626:
+	chip->user_read_timer.data = (unsigned long) chip;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#926: FILE: drivers/char/tpm/tpm.h:39:
+extern ssize_t tpm_show_pubek(struct device *, char *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct device *' should also have an identifier name
#926: FILE: drivers/char/tpm/tpm.h:39:
+extern ssize_t tpm_show_pubek(struct device *, char *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#926: FILE: drivers/char/tpm/tpm.h:39:
+extern ssize_t tpm_show_pubek(struct device *, char *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#927: FILE: drivers/char/tpm/tpm.h:40:
+extern ssize_t tpm_show_pcrs(struct device *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct device *' should also have an identifier name
#927: FILE: drivers/char/tpm/tpm.h:40:
+extern ssize_t tpm_show_pcrs(struct device *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#927: FILE: drivers/char/tpm/tpm.h:40:
+extern ssize_t tpm_show_pcrs(struct device *, char *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#928: FILE: drivers/char/tpm/tpm.h:41:
+extern ssize_t tpm_show_caps(struct device *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct device *' should also have an identifier name
#928: FILE: drivers/char/tpm/tpm.h:41:
+extern ssize_t tpm_show_caps(struct device *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#928: FILE: drivers/char/tpm/tpm.h:41:
+extern ssize_t tpm_show_caps(struct device *, char *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#929: FILE: drivers/char/tpm/tpm.h:42:
+extern ssize_t tpm_store_cancel(struct device *, const char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct device *' should also have an identifier name
#929: FILE: drivers/char/tpm/tpm.h:42:
+extern ssize_t tpm_store_cancel(struct device *, const char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#929: FILE: drivers/char/tpm/tpm.h:42:
+extern ssize_t tpm_store_cancel(struct device *, const char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#929: FILE: drivers/char/tpm/tpm.h:42:
+extern ssize_t tpm_store_cancel(struct device *, const char *, size_t);

ERROR:CODE_INDENT: code indent should use tabs where possible
#932: FILE: drivers/char/tpm/tpm.h:45:
+        __ATTR(pubek, S_IRUGO, tpm_show_pubek, NULL), \$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#932: FILE: drivers/char/tpm/tpm.h:45:
+        __ATTR(pubek, S_IRUGO, tpm_show_pubek, NULL), \$

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#932: FILE: drivers/char/tpm/tpm.h:45:
+        __ATTR(pubek, S_IRUGO, tpm_show_pubek, NULL), \

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

ERROR:CODE_INDENT: code indent should use tabs where possible
#933: FILE: drivers/char/tpm/tpm.h:46:
+        __ATTR(pcrs, S_IRUGO, tpm_show_pcrs, NULL), \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#933: FILE: drivers/char/tpm/tpm.h:46:
+        __ATTR(pcrs, S_IRUGO, tpm_show_pcrs, NULL), \$

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#933: FILE: drivers/char/tpm/tpm.h:46:
+        __ATTR(pcrs, S_IRUGO, tpm_show_pcrs, NULL), \

ERROR:CODE_INDENT: code indent should use tabs where possible
#934: FILE: drivers/char/tpm/tpm.h:47:
+        __ATTR(caps, S_IRUGO, tpm_show_caps, NULL), \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#934: FILE: drivers/char/tpm/tpm.h:47:
+        __ATTR(caps, S_IRUGO, tpm_show_caps, NULL), \$

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#934: FILE: drivers/char/tpm/tpm.h:47:
+        __ATTR(caps, S_IRUGO, tpm_show_caps, NULL), \

ERROR:CODE_INDENT: code indent should use tabs where possible
#935: FILE: drivers/char/tpm/tpm.h:48:
+        __ATTR(cancel, S_IWUSR | S_IWGRP, NULL, tpm_store_cancel) }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#935: FILE: drivers/char/tpm/tpm.h:48:
+        __ATTR(cancel, S_IWUSR | S_IWGRP, NULL, tpm_store_cancel) }$

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR | S_IWGRP' are not preferred. Consider using octal permissions '0220'.
#935: FILE: drivers/char/tpm/tpm.h:48:
+        __ATTR(cancel, S_IWUSR | S_IWGRP, NULL, tpm_store_cancel) }

WARNING:SPACING: missing space after return type
#948: FILE: drivers/char/tpm/tpm.h:61:
+	 u8(*status) (struct tpm_chip *);

WARNING:SPACING: Unnecessary space before function pointer arguments
#948: FILE: drivers/char/tpm/tpm.h:61:
+	 u8(*status) (struct tpm_chip *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct tpm_chip *' should also have an identifier name
#948: FILE: drivers/char/tpm/tpm.h:61:
+	 u8(*status) (struct tpm_chip *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#973: FILE: drivers/char/tpm/tpm.h:100:
+extern int tpm_register_hardware(struct device *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct device *' should also have an identifier name
#973: FILE: drivers/char/tpm/tpm.h:100:
+extern int tpm_register_hardware(struct device *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct tpm_vendor_specific *' should also have an identifier name
#973: FILE: drivers/char/tpm/tpm.h:100:
+extern int tpm_register_hardware(struct device *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#975: FILE: drivers/char/tpm/tpm.h:102:
+extern void tpm_remove_hardware(struct device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct device *' should also have an identifier name
#975: FILE: drivers/char/tpm/tpm.h:102:
+extern void tpm_remove_hardware(struct device *);

WARNING:HOTPLUG_SECTION: Using __devinitdata is unnecessary
#1155: FILE: drivers/char/tpm/tpm_nsc.c:244:
+static struct pci_device_id tpm_pci_tbl[] __devinitdata = {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1252: FILE: drivers/char/tpm/tpm_nsc.c:352:
+	if ((rc = tpm_register_hardware(&nsc_tpm->dev, &tpm_nsc)) < 0)

WARNING:MAINTAINERS_STYLE: Misordered MAINTAINERS entry - list 'M:' before 'P:'
#1306: FILE: MAINTAINERS:2121:
+P:	Kylene Hall
+M:	kjhall@us.ibm.com

WARNING:MAINTAINERS_STYLE: Misordered MAINTAINERS entry - list 'L:' before 'W:'
#1308: FILE: MAINTAINERS:2123:
+W:	http://tpmdd.sourceforge.net
+L:	tpmdd-devel@lists.sourceforge.net

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000189708.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 20 errors, 41 warnings, 17 checks, 1206 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000189708.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
