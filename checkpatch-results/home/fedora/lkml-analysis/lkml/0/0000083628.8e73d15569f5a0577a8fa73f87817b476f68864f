WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#44: FILE: fs/gfs2/log.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#109: FILE: fs/gfs2/log.c:66:
+	uint64_t sync_gen;

ERROR:SPACING: space required before the open parenthesis '('
#214: FILE: fs/gfs2/log.c:171:
+	while(sdp->sd_log_blks_free <= blks) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#242: FILE: fs/gfs2/log.c:199:
+{
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#255: FILE: fs/gfs2/log.c:212:
+	uint64_t dbn;

CHECK:BRACES: braces {} should be used on all arms of this statement
#297: FILE: fs/gfs2/log.c:254:
+	if (list_empty(&sdp->sd_ail1_list))
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#299: FILE: fs/gfs2/log.c:256:
+	else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#314: FILE: fs/gfs2/log.c:271:
+		gfs2_assert_withdraw(sdp,
+				sdp->sd_log_flush_head == sdp->sd_log_head);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#331: FILE: fs/gfs2/log.c:288:
+	uint64_t blkno = log_bmap(sdp, sdp->sd_log_flush_head);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*lb)...) over kzalloc(sizeof(struct gfs2_log_buf)...)
#335: FILE: fs/gfs2/log.c:292:
+	lb = kzalloc(sizeof(struct gfs2_log_buf), GFP_NOFS | __GFP_NOFAIL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#338: FILE: fs/gfs2/log.c:295:
+	bh = lb->lb_bh = sb_getblk(sdp->sd_vfs, blkno);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#361: FILE: fs/gfs2/log.c:318:
+	uint64_t blkno = log_bmap(sdp, sdp->sd_log_flush_head);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*lb)...) over kzalloc(sizeof(struct gfs2_log_buf)...)
#365: FILE: fs/gfs2/log.c:322:
+	lb = kzalloc(sizeof(struct gfs2_log_buf), GFP_NOFS | __GFP_NOFAIL);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#369: FILE: fs/gfs2/log.c:326:
+	bh = lb->lb_bh = alloc_buffer_head(GFP_NOFS | __GFP_NOFAIL);

WARNING:LONG_LINE_COMMENT: line length of 138 exceeds 100 columns
#390: FILE: fs/gfs2/log.c:347:
+	/* printk(KERN_INFO "pull tail refunding %u blocks (%u left) pull=%d\n", dist - ((pull) ? 1 : 0), sdp->sd_log_blks_free, pull); */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#407: FILE: fs/gfs2/log.c:364:
+	uint64_t blkno = log_bmap(sdp, sdp->sd_log_flush_head);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#411: FILE: fs/gfs2/log.c:368:
+	uint32_t hash;

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#458: FILE: fs/gfs2/log.c:415:
+#if 0

CHECK:BRACES: braces {} should be used on all arms of this statement
#474: FILE: fs/gfs2/log.c:431:
+		if (lb->lb_real) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#478: FILE: fs/gfs2/log.c:435:
+		} else

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*ai)...) over kzalloc(sizeof(struct gfs2_ail)...)
#509: FILE: fs/gfs2/log.c:466:
+	ai = kzalloc(sizeof(struct gfs2_ail), GFP_NOFS | __GFP_NOFAIL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#514: FILE: fs/gfs2/log.c:471:
+	gfs2_assert_withdraw(sdp,
+			sdp->sd_log_num_buf == sdp->sd_log_commited_buf);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#516: FILE: fs/gfs2/log.c:473:
+	gfs2_assert_withdraw(sdp,
+			sdp->sd_log_num_revoke == sdp->sd_log_commited_revoke);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#535: FILE: fs/gfs2/log.c:492:
+^I^Isdp->sd_log_num_hdrs = $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#600: FILE: fs/gfs2/log.c:557:
+	if (sdp->sd_log_num_buf > gfs2_tune_get(sdp, gt_incore_log_blocks)) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#603: FILE: fs/gfs2/log.c:560:
+	} else

WARNING:LONG_LINE_COMMENT: line length of 129 exceeds 100 columns
#632: FILE: fs/gfs2/log.c:589:
+	/* printk(KERN_INFO "sd_log_blks_free %u, sd_jdesc->jd_blocks %u\n", sdp->sd_log_blks_free, sdp->sd_jdesc->jd_blocks); */

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#646: FILE: fs/gfs2/log.h:1:
+/*

WARNING:BRACES: braces {} are not necessary for single statement blocks
#683: FILE: fs/gfs2/log.h:38:
+	if (++value == sdp->sd_jdesc->jd_blocks) {
+		value = 0;
+	}

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#686: FILE: fs/gfs2/log.h:41:
+	sdp->sd_log_head = sdp->sd_log_tail = value;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#690: FILE: fs/gfs2/log.h:45:
+unsigned int gfs2_struct2blk(struct gfs2_sbd *sdp, unsigned int nstruct,
+			    unsigned int ssize);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#710: FILE: fs/gfs2/recovery.c:1:
+/*

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#748: FILE: fs/gfs2/recovery.c:39:
+	uint64_t dblock;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#749: FILE: fs/gfs2/recovery.c:40:
+	uint32_t extlen;

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*rr)...) over kmalloc(sizeof(struct gfs2_revoke_replay)...)
#785: FILE: fs/gfs2/recovery.c:76:
+	rr = kmalloc(sizeof(struct gfs2_revoke_replay), GFP_KERNEL);

WARNING:TYPO_SPELLING: 'segement' may be misspelled - perhaps 'segment'?
#838: FILE: fs/gfs2/recovery.c:129:
+ * Read the log header for a given segement in a given journal.  Do a few
                                    ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#851: FILE: fs/gfs2/recovery.c:142:
+	uint32_t hash;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#964: FILE: fs/gfs2/recovery.c:255:
+	uint32_t blk_1, blk_2, blk_m;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1022: FILE: fs/gfs2/recovery.c:313:
+	unsigned int offset = sizeof(struct gfs2_log_descriptor);
+	offset += (sizeof(__be64)-1);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1022: FILE: fs/gfs2/recovery.c:313:
+	offset += (sizeof(__be64)-1);
 	                         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1023: FILE: fs/gfs2/recovery.c:314:
+	offset &= ~(sizeof(__be64)-1);
 	                          ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1038: FILE: fs/gfs2/recovery.c:329:
+			struct gfs2_log_header lh;
+			error = get_log_header(jd, start, &lh);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1085: FILE: fs/gfs2/recovery.c:376:
+	uint64_t dblock;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1087: FILE: fs/gfs2/recovery.c:378:
+	uint32_t hash;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1090: FILE: fs/gfs2/recovery.c:381:
+^I$

WARNING:TYPO_SPELLING: 'Aquire' may be misspelled - perhaps 'Acquire'?
#1150: FILE: fs/gfs2/recovery.c:441:
+	/* Aquire the journal lock so we can do recovery */
 	   ^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1235: FILE: fs/gfs2/recovery.c:526:
+^I^I$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1290: FILE: fs/gfs2/recovery.h:1:
+/*

ERROR:CODE_INDENT: code indent should use tabs where possible
#1305: FILE: fs/gfs2/recovery.h:16:
+^I        *blk = 0;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000083628.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 5 errors, 12 warnings, 32 checks, 1269 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000083628.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
