CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#60: FILE: include/linux/cpuset.h:31:
+extern int cpumeter_register_controller(struct cpumeter_ctlr *ctlr);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#61: FILE: include/linux/cpuset.h:32:
+extern void *cpumeter_get_controller_data(struct cpuset *cs,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#63: FILE: include/linux/cpuset.h:34:
+extern void *cpumeter_get_rcdomain(struct cpuset *cs,

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#95: FILE: init/Kconfig:241:
+config CPUMETER
+	bool "Cpumeter support"
+	depends on CPUSETS
+	help
+	  This option enables the resource control of CPUs and memory
+	  via the CPUSETS interface.
+
+	  Say N if unsure.
+

Kconfig symbols should have a help text which fully describes
it.

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#123: FILE: kernel/cpuset.c:68:
+static int cpumeter_numctlrs = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:TYPO_SPELLING: 'recource' may be misspelled - perhaps 'resource'?
#135: FILE: kernel/cpuset.c:95:
+	 * rcdomains: used for the recource control domains
 	                           ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'ammount' may be misspelled - perhaps 'amount'?
#136: FILE: kernel/cpuset.c:96:
+	 *            to keep track of total ammount of resources.
 	                                     ^^^^^^^

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#229: FILE: kernel/cpuset.c:1126:
+			      struct inode_operations *iop,

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct file_operations should normally be const
#230: FILE: kernel/cpuset.c:1127:
+			      struct file_operations *fop)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#280: FILE: kernel/cpuset.c:1400:
+	if ((err = cpumeter_add_meter_flags(cs_dentry)) < 0)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#306: FILE: kernel/cpuset.c:1777:
+static ssize_t cpumeter_file_read_common(struct file *file, char __user *buf, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#312: FILE: kernel/cpuset.c:1783:
+static ssize_t cpumeter_meter_file_read(struct file *file, char __user *buf, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#318: FILE: kernel/cpuset.c:1789:
+static ssize_t cpumeter_guar_file_read(struct file *file, char __user *buf, $

WARNING:CONST_STRUCT: struct file_operations should normally be const
#328: FILE: kernel/cpuset.c:1799:
+				   struct file_operations *fop,

WARNING:STATIC_CONST_CHAR_ARRAY: static char array declaration should probably be static const char
#334: FILE: kernel/cpuset.c:1805:
+static char cpumeter_guar_suffix[] = "_guar";

WARNING:STATIC_CONST_CHAR_ARRAY: static char array declaration should probably be static const char
#335: FILE: kernel/cpuset.c:1806:
+static char cpumeter_lim_suffix[] = "_lim";

WARNING:STATIC_CONST_CHAR_ARRAY: static char array declaration should probably be static const char
#336: FILE: kernel/cpuset.c:1807:
+static char cpumeter_cur_suffix[] = "_cur";

WARNING:STATIC_CONST_CHAR_ARRAY: static char array declaration should probably be static const char
#337: FILE: kernel/cpuset.c:1808:
+static char cpumeter_meter_prefix[] = "meter_";

ERROR:TRAILING_WHITESPACE: trailing whitespace
#388: FILE: kernel/cpuset.c:1859:
+static ssize_t cpumeter_file_read_common(struct file *file, char __user *buf, $

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#396: FILE: kernel/cpuset.c:1867:
+	if (!(page = (char *)__get_free_page(GFP_KERNEL)))

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#425: FILE: kernel/cpuset.c:1896:
+	if (nbytes > 100 + 6 * NR_CPUS)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#429: FILE: kernel/cpuset.c:1900:
+	if ((buffer = kmalloc(nbytes + 1, GFP_KERNEL)) == 0)

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#438: FILE: kernel/cpuset.c:1909:
+	*valp = simple_strtoul(buffer, NULL, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

ERROR:TRAILING_WHITESPACE: trailing whitespace
#444: FILE: kernel/cpuset.c:1915:
+static ssize_t cpumeter_meter_file_read(struct file *file, char __user *buf, $

WARNING:CONST_STRUCT: struct file_operations should normally be const
#580: FILE: kernel/cpuset.c:2051:
+static struct file_operations cpumeter_meter_file_operations = {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#587: FILE: kernel/cpuset.c:2058:
+static ssize_t cpumeter_guar_file_read(struct file *file, char __user *buf, $

WARNING:CONST_STRUCT: struct file_operations should normally be const
#664: FILE: kernel/cpuset.c:2135:
+static struct file_operations cpumeter_guar_file_operations = {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#671: FILE: kernel/cpuset.c:2142:
+static ssize_t cpumeter_lim_file_read(struct file *file, char __user *buf, $

WARNING:CONST_STRUCT: struct file_operations should normally be const
#722: FILE: kernel/cpuset.c:2193:
+static struct file_operations cpumeter_lim_file_operations = {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#729: FILE: kernel/cpuset.c:2200:
+static ssize_t cpumeter_cur_file_read(struct file *file, char __user *buf, $

WARNING:CONST_STRUCT: struct file_operations should normally be const
#751: FILE: kernel/cpuset.c:2222:
+static struct file_operations cpumeter_cur_file_operations = {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#757: FILE: kernel/cpuset.c:2228:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONST_STRUCT: struct file_operations should normally be const
#809: FILE: kernel/cpuset.c:2280:
+				   struct file_operations *fop,

CHECK:BRACES: braces {} should be used on all arms of this statement
#816: FILE: kernel/cpuset.c:2287:
+	if (!IS_ERR(dentry)) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#821: FILE: kernel/cpuset.c:2292:
+	} else

WARNING:LINE_SPACING: Missing a blank line after declarations
#876: FILE: kernel/cpuset.c:2347:
+		struct dentry *d = list_entry(node, struct dentry, d_child);
+		n = node->next;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#899: FILE: kernel/cpuset.c:2370:
+^I^I * this might be paranoid, but we have released $

WARNING:INDENTED_LABEL: labels should not be indented
#903: FILE: kernel/cpuset.c:2374:
+	next:

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000148260.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 13 errors, 19 warnings, 6 checks, 975 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000148260.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
