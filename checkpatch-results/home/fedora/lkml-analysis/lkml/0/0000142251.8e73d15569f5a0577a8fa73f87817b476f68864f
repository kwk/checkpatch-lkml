WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#41: 
diff -ur linux-2.6.13.4.orig/arch/arm/kernel/time.c linux-2.6.13.4.new/arch/arm/kernel/time.c

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#49: FILE: arch/arm/kernel/time.c:146:
+static ssize_t leds_store(struct sys_device *dev, struct sysdev_attribute *attr, const char *buf, size_t size)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:CODE_INDENT: code indent should use tabs where possible
#63: FILE: arch/ppc64/kernel/sysfs.c:32:
+                                      const char *buf, size_t count)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#63: FILE: arch/ppc64/kernel/sysfs.c:32:
+                                      const char *buf, size_t count)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#73: FILE: arch/ppc64/kernel/sysfs.c:48:
+                                     char *buf)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#73: FILE: arch/ppc64/kernel/sysfs.c:48:
+                                     char *buf)$

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#90: FILE: arch/ppc64/kernel/sysfs.c:211:
+	store_##NAME(struct sys_device *dev, struct sysdev_attribute *attr, const char *buf, size_t count) \

ERROR:CODE_INDENT: code indent should use tabs where possible
#162: FILE: arch/sh/drivers/dma/dma-sysfs.c:104:
+                                struct sysdev_attribute *attr,          \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#162: FILE: arch/sh/drivers/dma/dma-sysfs.c:104:
+                                struct sysdev_attribute *attr,          \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#163: FILE: arch/sh/drivers/dma/dma-sysfs.c:105:
+                                char *buf)^I                        \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#163: FILE: arch/sh/drivers/dma/dma-sysfs.c:105:
+                                char *buf)^I                        \$

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#175: FILE: arch/x86_64/kernel/mce.c:531:
+	static ssize_t show_ ## name(struct sys_device *s,                         \
+                                     struct sysdev_attribute *attr,                \
+                                     char *buf) { 	   	                   \

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#176: FILE: arch/x86_64/kernel/mce.c:532:
+                                     struct sysdev_attribute *attr,                \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#176: FILE: arch/x86_64/kernel/mce.c:532:
+                                     struct sysdev_attribute *attr,                \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#177: FILE: arch/x86_64/kernel/mce.c:533:
+                                     char *buf) { ^I   ^I                   \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#177: FILE: arch/x86_64/kernel/mce.c:533:
+                                     char *buf) { ^I   ^I                   \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#177: FILE: arch/x86_64/kernel/mce.c:533:
+                                     char *buf) { ^I   ^I                   \$

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#181: FILE: arch/x86_64/kernel/mce.c:536:
+	static ssize_t set_ ## name(struct sys_device *s,                          \
+                                    struct sysdev_attribute *attr,                 \
+                                    const char *buf,size_t siz) {                  \

ERROR:CODE_INDENT: code indent should use tabs where possible
#182: FILE: arch/x86_64/kernel/mce.c:537:
+                                    struct sysdev_attribute *attr,                 \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#182: FILE: arch/x86_64/kernel/mce.c:537:
+                                    struct sysdev_attribute *attr,                 \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#183: FILE: arch/x86_64/kernel/mce.c:538:
+                                    const char *buf,size_t siz) {                  \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#183: FILE: arch/x86_64/kernel/mce.c:538:
+                                    const char *buf,size_t siz) {                  \$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#183: FILE: arch/x86_64/kernel/mce.c:538:
+                                    const char *buf,size_t siz) {                  \
                                                    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#204: FILE: drivers/base/cpu.c:31:
+static ssize_t store_online(struct sys_device *dev, struct sysdev_attribute *attr, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#205: FILE: drivers/base/cpu.c:32:
+                            const char *buf, size_t count)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#205: FILE: drivers/base/cpu.c:32:
+                            const char *buf, size_t count)$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#217: FILE: drivers/base/node.c:20:
+static ssize_t node_read_cpumap(struct sys_device * dev, struct sysdev_attribute *attr, char * buf)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#217: FILE: drivers/base/node.c:20:
+static ssize_t node_read_cpumap(struct sys_device * dev, struct sysdev_attribute *attr, char * buf)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#226: FILE: drivers/base/node.c:37:
+static ssize_t node_read_meminfo(struct sys_device * dev, struct sysdev_attribute *attr,

ERROR:CODE_INDENT: code indent should use tabs where possible
#227: FILE: drivers/base/node.c:38:
+                                 char * buf)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#227: FILE: drivers/base/node.c:38:
+                                 char * buf)$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#227: FILE: drivers/base/node.c:38:
+                                 char * buf)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#236: FILE: drivers/base/node.c:76:
+static ssize_t node_read_numastat(struct sys_device * dev, struct sysdev_attribute *attr,

ERROR:CODE_INDENT: code indent should use tabs where possible
#237: FILE: drivers/base/node.c:77:
+                                  char * buf)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#237: FILE: drivers/base/node.c:77:
+                                  char * buf)$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#237: FILE: drivers/base/node.c:77:
+                                  char * buf)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#246: FILE: drivers/base/node.c:117:
+static ssize_t node_read_distance(struct sys_device * dev, struct sysdev_attribute *attr,

ERROR:CODE_INDENT: code indent should use tabs where possible
#247: FILE: drivers/base/node.c:118:
+                                  char * buf)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#247: FILE: drivers/base/node.c:118:
+                                  char * buf)$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#247: FILE: drivers/base/node.c:118:
+                                  char * buf)

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sys_device *' should also have an identifier name
#285: FILE: include/linux/sysdev.h:79:
+	ssize_t (*show)(struct sys_device *, struct sysdev_attribute *, char *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sysdev_attribute *' should also have an identifier name
#285: FILE: include/linux/sysdev.h:79:
+	ssize_t (*show)(struct sys_device *, struct sysdev_attribute *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#285: FILE: include/linux/sysdev.h:79:
+	ssize_t (*show)(struct sys_device *, struct sysdev_attribute *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sys_device *' should also have an identifier name
#286: FILE: include/linux/sysdev.h:80:
+	ssize_t (*store)(struct sys_device *, struct sysdev_attribute *, const char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sysdev_attribute *' should also have an identifier name
#286: FILE: include/linux/sysdev.h:80:
+	ssize_t (*store)(struct sys_device *, struct sysdev_attribute *, const char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#286: FILE: include/linux/sysdev.h:80:
+	ssize_t (*store)(struct sys_device *, struct sysdev_attribute *, const char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#286: FILE: include/linux/sysdev.h:80:
+	ssize_t (*store)(struct sys_device *, struct sysdev_attribute *, const char *, size_t);

ERROR:CODE_INDENT: code indent should use tabs where possible
#287: FILE: include/linux/sysdev.h:81:
+        void * data;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#287: FILE: include/linux/sysdev.h:81:
+        void * data;$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#287: FILE: include/linux/sysdev.h:81:
+        void * data;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#292: FILE: include/linux/sysdev.h:85:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#293: FILE: include/linux/sysdev.h:86:
+#define SYSDEV_ATTR_WITH_DATA(_name,_mode,_show,_store,_data) ^I^I\$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#293: FILE: include/linux/sysdev.h:86:
+#define SYSDEV_ATTR_WITH_DATA(_name,_mode,_show,_store,_data) 		\
                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#293: FILE: include/linux/sysdev.h:86:
+#define SYSDEV_ATTR_WITH_DATA(_name,_mode,_show,_store,_data) 		\
                                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#293: FILE: include/linux/sysdev.h:86:
+#define SYSDEV_ATTR_WITH_DATA(_name,_mode,_show,_store,_data) 		\
                                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#293: FILE: include/linux/sysdev.h:86:
+#define SYSDEV_ATTR_WITH_DATA(_name,_mode,_show,_store,_data) 		\
                                                       ^

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#293: FILE: include/linux/sysdev.h:86:
+#define SYSDEV_ATTR_WITH_DATA(_name,_mode,_show,_store,_data) 		\
 struct sysdev_attribute attr_##_name = { 			\
 	.attr = {.name = __stringify(_name), .mode = _mode },	\
 	.show	= _show,					\
 	.store	= _store,					\
+        .data   = _data,                                        \
 };

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:CODE_INDENT: code indent should use tabs where possible
#298: FILE: include/linux/sysdev.h:91:
+        .data   = _data,                                        \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#298: FILE: include/linux/sysdev.h:91:
+        .data   = _data,                                        \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#301: FILE: include/linux/sysdev.h:94:
+#define SYSDEV_ATTR(_name,_mode,_show,_store) ^I^I\$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#301: FILE: include/linux/sysdev.h:94:
+#define SYSDEV_ATTR(_name,_mode,_show,_store) 		\
                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#301: FILE: include/linux/sysdev.h:94:
+#define SYSDEV_ATTR(_name,_mode,_show,_store) 		\
                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#301: FILE: include/linux/sysdev.h:94:
+#define SYSDEV_ATTR(_name,_mode,_show,_store) 		\
                                      ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#302: FILE: include/linux/sysdev.h:95:
+  SYSDEV_ATTR_WITH_DATA(_name,_mode,_show,_store,NULL)$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#302: FILE: include/linux/sysdev.h:95:
+  SYSDEV_ATTR_WITH_DATA(_name,_mode,_show,_store,NULL)
                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#302: FILE: include/linux/sysdev.h:95:
+  SYSDEV_ATTR_WITH_DATA(_name,_mode,_show,_store,NULL)
                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#302: FILE: include/linux/sysdev.h:95:
+  SYSDEV_ATTR_WITH_DATA(_name,_mode,_show,_store,NULL)
                                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#302: FILE: include/linux/sysdev.h:95:
+  SYSDEV_ATTR_WITH_DATA(_name,_mode,_show,_store,NULL)
                                                 ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000142251.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 38 errors, 29 warnings, 1 checks, 223 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000142251.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
