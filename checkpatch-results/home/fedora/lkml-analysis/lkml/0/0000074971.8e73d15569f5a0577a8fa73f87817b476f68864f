CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'len > sysctl_tcp_dma_copybreak'
#62: FILE: net/ipv4/tcp.c:1140:
+	if ((len > sysctl_tcp_dma_copybreak) && !(flags & MSG_PEEK) &&
+	    !sysctl_tcp_low_latency && __get_cpu_var(softnet_data.net_dma)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:BRACES: Unbalanced braces around else statement
#66: FILE: net/ipv4/tcp.c:1144:
+	} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#100: FILE: net/ipv4/tcp.c:1353:
+				tp->ucopy.dma_cookie = dma_skb_copy_datagram_iovec(

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#106: FILE: net/ipv4/tcp.c:1359:
+				if (tp->ucopy.dma_cookie < 0) {
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#107: FILE: net/ipv4/tcp.c:1360:
+					printk(KERN_ALERT "dma_cookie < 0\n");

CHECK:BRACES: Unbalanced braces around else statement
#117: FILE: net/ipv4/tcp.c:1370:
+			} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#121: FILE: net/ipv4/tcp.c:1374:
+				err = skb_copy_datagram_iovec(skb, offset,
+						msg->msg_iov, used);

ERROR:CODE_INDENT: code indent should use tabs where possible
#167: FILE: net/ipv4/tcp.c:1443:
+^I^I                                 tp->ucopy.dma_cookie, &done,$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:CODE_INDENT: code indent should use tabs where possible
#168: FILE: net/ipv4/tcp.c:1444:
+^I^I                                 &used) == DMA_IN_PROGRESS) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#172: FILE: net/ipv4/tcp.c:1448:
+^I^I^I                              used) == DMA_SUCCESS)) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#227: FILE: net/ipv4/tcp_input.c:3800:
+          ^Ireturn 0;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#227: FILE: net/ipv4/tcp_input.c:3800:
+          ^Ireturn 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#227: FILE: net/ipv4/tcp_input.c:3800:
+          ^Ireturn 0;$

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#233: FILE: net/ipv4/tcp_input.c:3806:
+	if (tp->ucopy.dma_chan && skb->ip_summed == CHECKSUM_UNNECESSARY) {
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#235: FILE: net/ipv4/tcp_input.c:3808:
+		dma_cookie = dma_skb_copy_datagram_iovec(tp->ucopy.dma_chan,
+			skb, hlen, tp->ucopy.iov, chunk, tp->ucopy.pinned_list);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tp->ucopy.len == 0'
#247: FILE: net/ipv4/tcp_input.c:3820:
+		if ((tp->ucopy.len == 0) ||
+		    (tcp_flag_word(skb->h.th) & TCP_FLAG_PSH) ||
+		    (atomic_read(&sk->sk_rmem_alloc) > (sk->sk_rcvbuf >> 1))) {

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#284: FILE: net/ipv4/tcp_input.c:3961:
+				if (tp->ucopy.task == current && sock_owned_by_user(sk) && !copied_early) {

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 24)
#313: FILE: net/ipv4/tcp_input.c:4029:
+			else
[...]
 			if (eaten)

WARNING:LINE_SPACING: Missing a blank line after declarations
#337: FILE: net/ipv4/tcp_ipv4.c:1097:
+		struct tcp_sock *tp = tcp_sk(sk);
+		if (!tp->ucopy.dma_chan && tp->ucopy.pinned_list)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 24)
#344: FILE: net/ipv4/tcp_ipv4.c:1104:
+			if (!tcp_prequeue(sk, skb))
+			ret = tcp_v4_do_rcv(sk, skb);

ERROR:CODE_INDENT: code indent should use tabs where possible
#356: FILE: net/ipv4/tcp_ipv4.c:1312:
+  ^I__skb_queue_purge(&sk->sk_async_wait_queue);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#356: FILE: net/ipv4/tcp_ipv4.c:1312:
+  ^I__skb_queue_purge(&sk->sk_async_wait_queue);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#356: FILE: net/ipv4/tcp_ipv4.c:1312:
+  ^I__skb_queue_purge(&sk->sk_async_wait_queue);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#373: FILE: net/ipv6/tcp_ipv6.c:1222:
+                struct tcp_sock *tp = tcp_sk(sk);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#373: FILE: net/ipv6/tcp_ipv6.c:1222:
+                struct tcp_sock *tp = tcp_sk(sk);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#374: FILE: net/ipv6/tcp_ipv6.c:1223:
+                if (tp->ucopy.dma_chan)$

WARNING:LINE_SPACING: Missing a blank line after declarations
#374: FILE: net/ipv6/tcp_ipv6.c:1223:
+                struct tcp_sock *tp = tcp_sk(sk);
+                if (tp->ucopy.dma_chan)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#374: FILE: net/ipv6/tcp_ipv6.c:1223:
+                if (tp->ucopy.dma_chan)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#375: FILE: net/ipv6/tcp_ipv6.c:1224:
+                        ret = tcp_v6_do_rcv(sk, skb);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#375: FILE: net/ipv6/tcp_ipv6.c:1224:
+                        ret = tcp_v6_do_rcv(sk, skb);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#376: FILE: net/ipv6/tcp_ipv6.c:1225:
+                else$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#376: FILE: net/ipv6/tcp_ipv6.c:1225:
+                else$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000074971.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 9 errors, 14 warnings, 9 checks, 318 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000074971.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
