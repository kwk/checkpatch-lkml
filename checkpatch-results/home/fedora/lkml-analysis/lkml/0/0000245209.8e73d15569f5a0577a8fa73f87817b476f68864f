WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#37: 
It does that by checking whether the page can be moved, allocating a new page, 

WARNING:TYPO_SPELLING: 'uncomplete' may be misspelled - perhaps 'incomplete'?
#41: 
Its very uncomplete yet - for one SMP concurrent radix lookups will screw file
         ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'doesnt' may be misspelled - perhaps 'doesn't'?
#43: 
For example it doesnt re establishes pte's once it has unmapped them.
               ^^^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#81: FILE: page_alloc.c:105:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#82: FILE: page_alloc.c:106:
+void page_remove_rmap(struct page *page);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#83: FILE: page_alloc.c:107:
+void page_add_anon_rmap(struct page *page,

ERROR:CODE_INDENT: code indent should use tabs where possible
#84: FILE: page_alloc.c:108:
+        struct vm_area_struct *vma, unsigned long address);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#84: FILE: page_alloc.c:108:
+void page_add_anon_rmap(struct page *page,
+        struct vm_area_struct *vma, unsigned long address);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#84: FILE: page_alloc.c:108:
+        struct vm_area_struct *vma, unsigned long address);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#91: FILE: page_alloc.c:115:
+        pgoff_t pgoff = page->index << (PAGE_CACHE_SHIFT - PAGE_SHIFT);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#91: FILE: page_alloc.c:115:
+        pgoff_t pgoff = page->index << (PAGE_CACHE_SHIFT - PAGE_SHIFT);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#92: FILE: page_alloc.c:116:
+        unsigned long address;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#92: FILE: page_alloc.c:116:
+        unsigned long address;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#94: FILE: page_alloc.c:118:
+        address = vma->vm_start + ((pgoff - vma->vm_pgoff) << PAGE_SHIFT);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#94: FILE: page_alloc.c:118:
+        address = vma->vm_start + ((pgoff - vma->vm_pgoff) << PAGE_SHIFT);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#96: FILE: page_alloc.c:120:
+        if (unlikely(address < vma->vm_start || address >= vma->vm_end)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#96: FILE: page_alloc.c:120:
+        if (unlikely(address < vma->vm_start || address >= vma->vm_end)) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#97: FILE: page_alloc.c:121:
+                /* page should be within any vma from prio_tree_next */$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#98: FILE: page_alloc.c:122:
+		printk(KERN_ERR "address: %x pgoff:%x vma->start:%x vma->end:%x\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#99: FILE: page_alloc.c:123:
+		printk(KERN_ERR "address: %x pgoff:%x vma->start:%x vma->end:%x\n",
+				address, pgoff,vma->vm_start, vma->vm_end );

ERROR:SPACING: space required after that ',' (ctx:VxV)
#99: FILE: page_alloc.c:123:
+				address, pgoff,vma->vm_start, vma->vm_end );
 				              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited before that close parenthesis ')'
#99: FILE: page_alloc.c:123:
+				address, pgoff,vma->vm_start, vma->vm_end );

ERROR:CODE_INDENT: code indent should use tabs where possible
#100: FILE: page_alloc.c:124:
+                BUG_ON(!PageAnon(page));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#100: FILE: page_alloc.c:124:
+                BUG_ON(!PageAnon(page));$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#100: FILE: page_alloc.c:124:
+                BUG_ON(!PageAnon(page));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:CODE_INDENT: code indent should use tabs where possible
#101: FILE: page_alloc.c:125:
+                return -EFAULT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#101: FILE: page_alloc.c:125:
+                return -EFAULT;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#102: FILE: page_alloc.c:126:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#102: FILE: page_alloc.c:126:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#103: FILE: page_alloc.c:127:
+        return address;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#103: FILE: page_alloc.c:127:
+        return address;$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#106: FILE: page_alloc.c:130:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#111: FILE: page_alloc.c:135:
+^Istruct mm_struct *mm = vma->vm_mm;^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#113: FILE: page_alloc.c:137:
+        pmd_t *pmd;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#113: FILE: page_alloc.c:137:
+        pmd_t *pmd;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#114: FILE: page_alloc.c:138:
+        pte_t *pte;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#114: FILE: page_alloc.c:138:
+        pte_t *pte;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#115: FILE: page_alloc.c:139:
+        pte_t pteval;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#115: FILE: page_alloc.c:139:
+        pte_t pteval;$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#118: FILE: page_alloc.c:142:
+	printk(KERN_ERR "try_to_remap_file!\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'try_to_remap_file', this function's name, in a string
#118: FILE: page_alloc.c:142:
+	printk(KERN_ERR "try_to_remap_file!\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#120: FILE: page_alloc.c:144:
+^Iif (!mm->rss) $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#125: FILE: page_alloc.c:149:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#134: FILE: page_alloc.c:158:
+
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#135: FILE: page_alloc.c:159:
+        pte = pte_offset_map(pmd, address);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#135: FILE: page_alloc.c:159:
+        pte = pte_offset_map(pmd, address);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#136: FILE: page_alloc.c:160:
+        if (!pte_present(*pte))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#136: FILE: page_alloc.c:160:
+        if (!pte_present(*pte))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#137: FILE: page_alloc.c:161:
+                goto out_unlock;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#137: FILE: page_alloc.c:161:
+                goto out_unlock;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#139: FILE: page_alloc.c:163:
+        if (page_to_pfn(page) != pte_pfn(*pte))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#139: FILE: page_alloc.c:163:
+        if (page_to_pfn(page) != pte_pfn(*pte))$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#141: FILE: page_alloc.c:165:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#142: FILE: page_alloc.c:166:
+^Iif ((vma->vm_flags & (VM_LOCKED|VM_RESERVED))) $

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#142: FILE: page_alloc.c:166:
+	if ((vma->vm_flags & (VM_LOCKED|VM_RESERVED))) 
 	                               ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#147: FILE: page_alloc.c:171:
+        flush_cache_page(vma, address);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#147: FILE: page_alloc.c:171:
+        flush_cache_page(vma, address);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#149: FILE: page_alloc.c:173:
+       pteval = ptep_clear_flush(vma, address, pte);$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#169: FILE: page_alloc.c:193:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#171: FILE: page_alloc.c:195:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#175: FILE: page_alloc.c:199:
+^Istruct mm_struct *mm = vma->vm_mm;^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#177: FILE: page_alloc.c:201:
+        pmd_t *pmd;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#177: FILE: page_alloc.c:201:
+        pmd_t *pmd;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#178: FILE: page_alloc.c:202:
+        pte_t *pte;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#178: FILE: page_alloc.c:202:
+        pte_t *pte;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#179: FILE: page_alloc.c:203:
+        pte_t pteval;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#179: FILE: page_alloc.c:203:
+        pte_t pteval;$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#182: FILE: page_alloc.c:206:
+
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#184: FILE: page_alloc.c:208:
+		printk(KERN_ERR "!vma\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#190: FILE: page_alloc.c:214:
+^Iif (address == -EFAULT) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#193: FILE: page_alloc.c:217:
+^Iif (!mm) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#196: FILE: page_alloc.c:220:
+^Iif (!mm->rss) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#200: FILE: page_alloc.c:224:
+^Iif (!pgd_present(*pgd)) $

ERROR:CODE_INDENT: code indent should use tabs where possible
#207: FILE: page_alloc.c:231:
+        pte = pte_offset_map(pmd, address);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#207: FILE: page_alloc.c:231:
+        pte = pte_offset_map(pmd, address);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#208: FILE: page_alloc.c:232:
+        if (!pte_present(*pte))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#208: FILE: page_alloc.c:232:
+        if (!pte_present(*pte))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#209: FILE: page_alloc.c:233:
+                goto out_unlock;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#209: FILE: page_alloc.c:233:
+                goto out_unlock;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#211: FILE: page_alloc.c:235:
+        if (page_to_pfn(page) != pte_pfn(*pte))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#211: FILE: page_alloc.c:235:
+        if (page_to_pfn(page) != pte_pfn(*pte))$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#213: FILE: page_alloc.c:237:
+^I$

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#214: FILE: page_alloc.c:238:
+	if ((vma->vm_flags & (VM_LOCKED|VM_RESERVED)))
 	                               ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#219: FILE: page_alloc.c:243:
+        flush_cache_page(vma, address);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#219: FILE: page_alloc.c:243:
+        flush_cache_page(vma, address);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#220: FILE: page_alloc.c:244:
+        pteval = ptep_clear_flush(vma, address, pte);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#220: FILE: page_alloc.c:244:
+        pteval = ptep_clear_flush(vma, address, pte);$

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#242: FILE: page_alloc.c:266:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#244: FILE: page_alloc.c:268:
+/* Move LRU pages to other locations, undo the remapping operation $

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#245: FILE: page_alloc.c:269:
+/* Move LRU pages to other locations, undo the remapping operation 
+* if any of the mapped pte's fails to be remapped.

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:TRAILING_WHITESPACE: trailing whitespace
#246: FILE: page_alloc.c:270:
+* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#249: FILE: page_alloc.c:273:
+int can_move_page(struct page *page) $

CHECK:SPACING: No space is necessary after a cast
#271: FILE: page_alloc.c:295:
+			unsigned long anon_mapping = (unsigned long) page->mapping;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#274: FILE: page_alloc.c:298:
+^I^I^I$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 40)
#277: FILE: page_alloc.c:301:
+			if (PageSwapCache(page) &&
[...]
+					free_page(newpage);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#278: FILE: page_alloc.c:302:
+			if (PageSwapCache(page) &&
+				page_count(page) != page_mapcount(page) + 1) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#284: FILE: page_alloc.c:308:
+				free_page (newpage);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#296: FILE: page_alloc.c:320:
+^I^I^Iif (PageSwapCache(page)) { $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#316: FILE: page_alloc.c:340:
+^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#340: FILE: page_alloc.c:364:
+^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#343: FILE: page_alloc.c:367:
+                   ^I^I^I^I^I^Isavedindex, newpage);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#343: FILE: page_alloc.c:367:
+                   ^I^I^I^I^I^Isavedindex, newpage);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#343: FILE: page_alloc.c:367:
+				error = radix_tree_insert(&swapper_space.page_tree,
+                   						savedindex, newpage);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#343: FILE: page_alloc.c:367:
+                   ^I^I^I^I^I^Isavedindex, newpage);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#345: FILE: page_alloc.c:369:
+^I^I^I^I//if (error) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#348: FILE: page_alloc.c:372:
+^I^I^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#348: FILE: page_alloc.c:372:
+
+			

ERROR:TRAILING_WHITESPACE: trailing whitespace
#354: FILE: page_alloc.c:378:
+^I^I} else if (!PageAnon(page) && $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#362: FILE: page_alloc.c:386:
+^I^I^Ipgoff_t pgoff = page->index << (PAGE_CACHE_SHIFT - $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#375: FILE: page_alloc.c:399:
+				printk(KERN_ERR "PagePrivate!\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#377: FILE: page_alloc.c:401:
+				printk(KERN_ERR "PageWriteback! quitting\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#384: FILE: page_alloc.c:408:
+			if (page_count(page) != 1 ||
+			  !PageLRU(page) || PageAnon(page) ||

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#395: FILE: page_alloc.c:419:
+				printk(KERN_ERR "page locked!!!\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#401: FILE: page_alloc.c:425:
+^I^I        spin_lock(&mapping->i_mmap_lock);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#405: FILE: page_alloc.c:429:
+^I^I^Ivma_prio_tree_foreach(vma, &iter, &mapping->i_mmap, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#406: FILE: page_alloc.c:430:
+^I^I^I^Ipgoff, pgoff) $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#406: FILE: page_alloc.c:430:
+			vma_prio_tree_foreach(vma, &iter, &mapping->i_mmap, 
+				pgoff, pgoff) 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#417: FILE: page_alloc.c:441:
+^I^I^I^I^I$

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#418: FILE: page_alloc.c:442:
+					
+			}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#422: FILE: page_alloc.c:446:
+^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#431: FILE: page_alloc.c:455:
+^I^I^Iadd_to_page_cache_lru(newpage, mapping, savedindex, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#432: FILE: page_alloc.c:456:
+			add_to_page_cache_lru(newpage, mapping, savedindex, 
+				GFP_KERNEL);

ERROR:CODE_INDENT: code indent should use tabs where possible
#439: FILE: page_alloc.c:463:
+^I^I        spin_unlock(&mapping->i_mmap_lock);$

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#443: FILE: page_alloc.c:467:
+
+	}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#445: FILE: page_alloc.c:469:
+
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#452: FILE: page_alloc.c:476:
+	printk(KERN_ERR "unmap PTE failed!@#$^5! ptes_unmapped:%d\n", ptes_unmapped);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#462: FILE: page_alloc.c:486:
+^I$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#464: FILE: page_alloc.c:488:
+		printk(KERN_ERR "order <= 2");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#475: FILE: page_alloc.c:499:
+^I^Inr_pages = (1UL << order) - (1UL << torder); $

WARNING:LINE_SPACING: Missing a blank line after declarations
#475: FILE: page_alloc.c:499:
+		struct free_area *area = zone->free_area + torder;
+		nr_pages = (1UL << order) - (1UL << torder); 

WARNING:LINE_SPACING: Missing a blank line after declarations
#481: FILE: page_alloc.c:505:
+			int ret;
+			page = list_entry(entry, struct page, lru);

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#488: FILE: page_alloc.c:512:
+			for (walkcount = 1; walkcount<nr_pages; walkcount++) {
 			                             ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#489: FILE: page_alloc.c:513:
+				pwalk = page-walkcount;
 				            ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#499: FILE: page_alloc.c:523:
+^I^I^I^I^I$

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#500: FILE: page_alloc.c:524:
+					
+			}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#506: FILE: page_alloc.c:530:
+^I^I^I/* Look forward, skipping the page frames from this $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#507: FILE: page_alloc.c:531:
+			/* Look forward, skipping the page frames from this 
+			  high order page we are looking at */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#507: FILE: page_alloc.c:531:
+			  high order page we are looking at */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#509: FILE: page_alloc.c:533:
+^I^I^Ifor (walkcount = (1UL << torder); walkcount<nr_pages; $

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#509: FILE: page_alloc.c:533:
+			for (walkcount = (1UL << torder); walkcount<nr_pages; 
 			                                           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#511: FILE: page_alloc.c:535:
+				pwalk = page+walkcount;
 				            ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#515: FILE: page_alloc.c:539:
+^I^I^I^Iif (ret) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#525: FILE: page_alloc.c:549:
+^I$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#532: FILE: page_alloc.c:556:
+	printk(KERN_ERR "failure nr_pages:%d nr_freed_pages:%d!\n", nr_pages,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#533: FILE: page_alloc.c:557:
+	printk(KERN_ERR "failure nr_pages:%d nr_freed_pages:%d!\n", nr_pages,
+nr_freed_pages);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#537: FILE: page_alloc.c:561:
+printk(KERN_ERR "SUCCESS coalesced %d pages!\n", nr_freed_pages);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#539: FILE: page_alloc.c:563:
+^I$

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#540: FILE: page_alloc.c:564:
+	
+}

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000245209.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 68 errors, 53 warnings, 27 checks, 480 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000245209.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
