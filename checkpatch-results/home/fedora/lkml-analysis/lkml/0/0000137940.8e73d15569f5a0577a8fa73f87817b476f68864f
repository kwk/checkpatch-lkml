WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#33: 
 drivers/scsi/libata-core.c |  129 +++++++++++++++++++++++++++++++++++++++------

WARNING:LINE_SPACING: Missing a blank line after declarations
#153: FILE: drivers/scsi/libata-core.c:2419:
+			void *addr = kmap_atomic(psg->page, KM_IRQ0);
+			memcpy(addr + psg->offset, pad_buf, qc->pad_len);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "qc->__sg"
#183: FILE: drivers/scsi/libata-core.c:2453:
+	assert(qc->__sg != NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:LINE_SPACING: Missing a blank line after declarations
#291: FILE: drivers/scsi/libata-core.c:2682:
+			void *addr = kmap_atomic(psg->page, KM_IRQ0);
+			memcpy(pad_buf, addr + psg->offset, qc->pad_len);

CHECK:SPACING: No space is necessary after a cast
#379: FILE: drivers/scsi/libata-scsi.c:358:
+			qc->__sg = (struct scatterlist *) cmd->request_buffer;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#399: FILE: drivers/scsi/libata-scsi.c:713:
+			request_queue_t *q = sdev->request_queue;
+			blk_queue_max_hw_segments(q, q->max_hw_segments - 1);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "qc->__sg"
#555: FILE: drivers/scsi/sata_qstor.c:280:
+	assert(qc->__sg != NULL);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'sg' - possible side-effects?
#785: FILE: include/linux/libata.h:549:
+#define ata_for_each_sg(sg, qc) \
+	for (sg = qc->__sg; sg; sg = ata_qc_next_sg(sg, qc))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'qc' - possible side-effects?
#785: FILE: include/linux/libata.h:549:
+#define ata_for_each_sg(sg, qc) \
+	for (sg = qc->__sg; sg; sg = ata_qc_next_sg(sg, qc))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'qc' may be better as '(qc)' to avoid precedence issues
#785: FILE: include/linux/libata.h:549:
+#define ata_for_each_sg(sg, qc) \
+	for (sg = qc->__sg; sg; sg = ata_qc_next_sg(sg, qc))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ap->pad"
#800: FILE: include/linux/libata.h:785:
+	return (ap->pad == NULL) ? -ENOMEM : 0;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000137940.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 0 errors, 4 warnings, 7 checks, 687 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000137940.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
