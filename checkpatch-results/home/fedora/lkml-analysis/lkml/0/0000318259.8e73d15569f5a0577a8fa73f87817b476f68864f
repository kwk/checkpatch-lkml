WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#43: 
memory informartion. This is a variation of maps but it includes information

WARNING:TYPO_SPELLING: 'applicatin' may be misspelled - perhaps 'application'?
#52: 
You may now build an applicatin like top and access /proc/PID/smaps as you
                     ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#119: FILE: fs/proc/base.c:122:
+	E(PROC_TGID_SMAPS,     "smaps",   S_IFREG|S_IRUGO),	/* created by 10LE */
 	                                         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#119: FILE: fs/proc/base.c:122:
+	E(PROC_TGID_SMAPS,     "smaps",   S_IFREG|S_IRUGO),	/* created by 10LE */

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#127: FILE: fs/proc/base.c:145:
+	E(PROC_TID_SMAPS,      "smaps",   S_IFREG|S_IRUGO),
 	                                         ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#127: FILE: fs/proc/base.c:145:
+	E(PROC_TID_SMAPS,      "smaps",   S_IFREG|S_IRUGO),

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#136: FILE: fs/proc/base.c:447:
+extern struct seq_operations proc_pid_smaps_op;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#136: FILE: fs/proc/base.c:447:
+extern struct seq_operations proc_pid_smaps_op;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:LINE_SPACING: Missing a blank line after declarations
#141: FILE: fs/proc/base.c:452:
+	int ret = seq_open(file, &proc_pid_smaps_op);
+	if (!ret) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#143: FILE: fs/proc/base.c:454:
+		struct seq_file *m = file->private_data;
+		m->private = task;

WARNING:CONST_STRUCT: struct file_operations should normally be const
#148: FILE: fs/proc/base.c:459:
+static struct file_operations proc_smaps_operations = {

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#154: FILE: fs/proc/base.c:465:
+};
+/* END - Created by 10LE */

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#180: FILE: fs/proc/task_mmu.c:116:
+void resident_mem_size(struct mm_struct *mm, unsigned long start_address,
+			unsigned long end_address, unsigned long *size) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#181: FILE: fs/proc/task_mmu.c:117:
+void resident_mem_size(struct mm_struct *mm, unsigned long start_address,
+			unsigned long end_address, unsigned long *size) {

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#189: FILE: fs/proc/task_mmu.c:125:
+		if (pgd_none(*my_pgd) || pgd_bad(*my_pgd)) continue;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#191: FILE: fs/proc/task_mmu.c:127:
+		if (pmd_none(*my_pmd) || pmd_bad(*my_pmd)) continue;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#193: FILE: fs/proc/task_mmu.c:129:
+		if (pte_present(*my_pte)) {
+			*size += PAGE_SIZE;
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:TABSTOP: Statements should start on a tabstop
#196: FILE: fs/proc/task_mmu.c:132:
+	  }

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#200: FILE: fs/proc/task_mmu.c:135:
shareable,

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

WARNING:TYPO_SPELLING: 'libray' may be misspelled - perhaps 'library'?
#201: FILE: fs/proc/task_mmu.c:136:
+ * data, stack, executable and libray size for each VM_AREA of a PID in new
                                ^^^^^^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#219: FILE: fs/proc/task_mmu.c:154:
+		if (map->vm_flags & VM_SHARED) {
+			shared = vma_len;
+		}

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#223: FILE: fs/proc/task_mmu.c:158:
+	}
+	else {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#223: FILE: fs/proc/task_mmu.c:158:
+	else {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#230: FILE: fs/proc/task_mmu.c:165:
+	}
+	else if (map->vm_flags & VM_GROWSDOWN) {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#233: FILE: fs/proc/task_mmu.c:168:
+	}
+	else if (map->vm_flags & VM_EXEC) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#241: FILE: fs/proc/task_mmu.c:176:
+	seq_printf(m, "%08lx-%08lx %c%c%c%c %n",
+			map->vm_start,

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#250: FILE: fs/proc/task_mmu.c:185:
+		len = sizeof(void*) * 6 - len;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#268: FILE: fs/proc/task_mmu.c:203:
+
+

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#280: FILE: fs/proc/task_mmu.c:255:
+struct seq_operations proc_pid_smaps_op = {

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000318259.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 8 errors, 14 warnings, 7 checks, 175 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000318259.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
