ERROR:TRAILING_WHITESPACE: trailing whitespace
#62: FILE: fs/aio.c:568:
+^I^Ilist_add_tail(&iocb->ki_run_list, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#63: FILE: fs/aio.c:569:
+		list_add_tail(&iocb->ki_run_list, 
+			&ctx->run_list);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kiocb *' should also have an identifier name
#77: FILE: fs/aio.c:579:
+	ssize_t (*retry)(struct kiocb *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#85: FILE: fs/aio.c:582:
+	if (iocb->ki_retried++ > 1024*1024) {
 	                             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#86: FILE: fs/aio.c:583:
+		printk("Maximal retry count. Bytes done %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#87: FILE: fs/aio.c:584:
+		printk("Maximal retry count. Bytes done %d\n",
+			iocb->ki_nbytes - iocb->ki_left);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#92: FILE: fs/aio.c:589:
+		printk("%ld aio retries completed %d bytes of %d\n",

ERROR:TRAILING_WHITESPACE: trailing whitespace
#93: FILE: fs/aio.c:590:
+^I^I^Iiocb->ki_retried, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#93: FILE: fs/aio.c:590:
+		printk("%ld aio retries completed %d bytes of %d\n",
+			iocb->ki_retried, 

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#97: FILE: fs/aio.c:594:
+	if (!(retry = iocb->ki_retry)) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#98: FILE: fs/aio.c:595:
+		printk("aio_run_iocb: iocb->ki_retry = NULL\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'aio_run_iocb', this function's name, in a string
#98: FILE: fs/aio.c:595:
+		printk("aio_run_iocb: iocb->ki_retry = NULL\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:SPACING: space prohibited before that '++' (ctx:WxO)
#102: FILE: fs/aio.c:599:
+	iocb->ki_users ++;
 	               ^

CHECK:CAMELCASE: Avoid CamelCase: <kiocbClearKicked>
#103: FILE: fs/aio.c:600:
+	kiocbClearKicked(iocb);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#104: FILE: fs/aio.c:601:
+	iocb->ki_run_list.next = iocb->ki_run_list.prev = NULL;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#105: FILE: fs/aio.c:602:
+^Iiocb->ki_retry = NULL;^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#107: FILE: fs/aio.c:604:
+^I$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#108: FILE: fs/aio.c:605:
+	BUG_ON(current->iocb != NULL);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "current->iocb"
#108: FILE: fs/aio.c:605:
+	BUG_ON(current->iocb != NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:TRAILING_WHITESPACE: trailing whitespace
#109: FILE: fs/aio.c:606:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#118: FILE: fs/aio.c:612:
+^I^Iif (list_empty(&iocb->ki_wait.task_list)) $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#123: FILE: fs/aio.c:615:
+			printk("can't delete iocb in use\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#125: FILE: fs/aio.c:617:
+^I^Iif (list_empty(&iocb->ki_wait.task_list)) $

CHECK:CAMELCASE: Avoid CamelCase: <kiocbSetKicked>
#126: FILE: fs/aio.c:618:
+			kiocbSetKicked(iocb);

CHECK:CAMELCASE: Avoid CamelCase: <kiocbIsKicked>
#135: FILE: fs/aio.c:624:
+	if (kiocbIsKicked(iocb)) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#136: FILE: fs/aio.c:625:
+		BUG_ON(ret != -EIOCBQUEUED);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#138: FILE: fs/aio.c:627:
+^I} $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#151: FILE: fs/aio.c:640:
+		iocb = list_entry(ctx->run_list.next, struct kiocb,
+			ki_run_list);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#171: FILE: fs/aio.c:659:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:WAITQUEUE_ACTIVE: waitqueue_active without comment
#184: FILE: fs/aio.c:672:
+		if (waitqueue_active(&ctx->wait))

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#220: FILE: fs/aio.c:727:
+			ret = (0 == iocb->ki_users);

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#245: FILE: fs/aio.c:949:
+^I^I^I/* accelerate kicked iocbs for this ctx */^I$

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'aio_pread', this function's name, in a string
#262: FILE: fs/aio.c:1078:
+	pr_debug("aio_pread: fop ret %d\n", ret);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#265: FILE: fs/aio.c:1081:
+^I * Can't just depend on iocb->ki_left to determine $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#277: FILE: fs/aio.c:1093:
+^Iif (ret == 0) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#293: FILE: fs/aio.c:1109:
+^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#294: FILE: fs/aio.c:1110:
+^I * TBD: Even if iocb->ki_left = 0, could we need to $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#308: FILE: fs/aio.c:1124:
+^Iif (ret == 0) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#323: FILE: fs/aio.c:1139:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#333: FILE: fs/aio.c:1149:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#339: FILE: fs/aio.c:1155:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#346: FILE: fs/aio.c:1162:
+^I^Iif (unlikely(!access_ok(VERIFY_WRITE, iocb->ki_buf, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#347: FILE: fs/aio.c:1163:
+		if (unlikely(!access_ok(VERIFY_WRITE, iocb->ki_buf, 
+			iocb->ki_left)))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#358: FILE: fs/aio.c:1174:
+^I^Iif (unlikely(!access_ok(VERIFY_READ, iocb->ki_buf, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#359: FILE: fs/aio.c:1175:
+		if (unlikely(!access_ok(VERIFY_READ, iocb->ki_buf, 
+			iocb->ki_left)))

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#388: FILE: fs/aio.c:1204:
+int aio_wake_function(wait_queue_t *wait, unsigned mode, int sync)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#414: FILE: fs/aio.c:1262:
+	req->ki_left = req->ki_nbytes = iocb->aio_nbytes;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#418: FILE: fs/aio.c:1266:
+	req->ki_run_list.next = req->ki_run_list.prev = NULL;

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kiocb *' should also have an identifier name
#487: FILE: include/linux/aio.h:57:
+	ssize_t			(*ki_retry)(struct kiocb *);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#495: FILE: include/linux/aio.h:65:
+^I$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#498: FILE: include/linux/aio.h:68:
+^Isize_t^I^I^Iki_nbytes; ^I/* copy of iocb->aio_nbytes */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#499: FILE: include/linux/aio.h:69:
+^Ichar ^I^I^I*ki_buf;^I/* remaining iocb->aio_buf */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#500: FILE: include/linux/aio.h:70:
+^Isize_t^I^I^Iki_left; ^I/* remaining bytes */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#502: FILE: include/linux/aio.h:72:
+^Ilong^I^I^Iki_retried; ^I/* just for testing */$

WARNING:DO_WHILE_MACRO_WITH_TRAILING_SEMICOLON: do {} while (0) macros should not be semicolon terminated
#519: FILE: include/linux/aio.h:164:
+#define do_sync_op(op)		do { \
+	struct kiocb *iocb = current->iocb; \
+	current->iocb = NULL; \
+	op; \
+	current->iocb = iocb; \
+	} while (0);

do {} while(0) macros should not have a trailing semicolon.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000381238.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 22 errors, 18 warnings, 15 checks, 496 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000381238.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
