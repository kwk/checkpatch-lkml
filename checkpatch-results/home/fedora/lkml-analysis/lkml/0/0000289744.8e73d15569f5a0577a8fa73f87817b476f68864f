WARNING:TYPO_SPELLING: 'accodingly' may be misspelled - perhaps 'accordingly'?
#84: 
	(scanargs): Adjust uses of parse_symbols accodingly.  Add
	                                         ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:SPACING: space prohibited after that '!' (ctx:WxW)
#310: FILE: dd.c:52:
+#if ! HAVE_FDATASYNC
     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#311: FILE: dd.c:53:
+# define fdatasync(fd) (errno = ENOSYS, -1)

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#333: FILE: dd.c:123:
+static int input_flags = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#334: FILE: dd.c:124:
+static int output_flags = 0;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#352: FILE: dd.c:164:
+  char symbol[sizeof LONGEST_SYMBOL];$

WARNING:SIZEOF_PARENTHESIS: sizeof LONGEST_SYMBOL should be sizeof(LONGEST_SYMBOL)
#352: FILE: dd.c:164:
+  char symbol[sizeof LONGEST_SYMBOL];

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#353: FILE: dd.c:165:
+  int value;$

WARNING:STATIC_CONST: Move const after static - use 'static const struct symbol_value'
#358: FILE: dd.c:169:
+static struct symbol_value const conversions[] =

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#366: FILE: dd.c:180:
+  {"nocreat", C_NOCREAT},^I/* Do not create output file.  */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#367: FILE: dd.c:181:
+  {"excl", C_EXCL},^I^I/* Fail if the output file already exists.  */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#371: FILE: dd.c:184:
+  {"fdatasync", C_FDATASYNC},^I/* Synchronize output data before finishing.  */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#372: FILE: dd.c:185:
+  {"fsync", C_FSYNC},^I^I/* Also synchronize output metadata.  */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#373: FILE: dd.c:186:
+  {"", 0}$

WARNING:STATIC_CONST: Move const after static - use 'static const struct symbol_value'
#377: FILE: dd.c:190:
+static struct symbol_value const flags[] =

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#378: FILE: dd.c:191:
+static struct symbol_value const flags[] =
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#379: FILE: dd.c:192:
+  {"append",^IO_APPEND},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#380: FILE: dd.c:193:
+  {"direct",^IO_DIRECT},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#381: FILE: dd.c:194:
+  {"dsync",^IO_DSYNC},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#382: FILE: dd.c:195:
+  {"noctty",^IO_NOCTTY},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#383: FILE: dd.c:196:
+  {"nofollow",^IO_NOFOLLOW},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#384: FILE: dd.c:197:
+  {"nonblock",^IO_NONBLOCK},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#385: FILE: dd.c:198:
+  {"sync",^IO_SYNC},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#386: FILE: dd.c:199:
+  {"",^I^I0}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#395: FILE: dd.c:327:
+  conv=CONVS      convert the file as per the comma separated symbol list\n\$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#395: FILE: dd.c:327:
+  conv=CONVS      convert the file as per the comma separated symbol list\n\
       ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#401: FILE: dd.c:333:
+  iflag=FLAGS     read as per the comma separated symbol list\n\$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#401: FILE: dd.c:333:
+  iflag=FLAGS     read as per the comma separated symbol list\n\
        ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#404: FILE: dd.c:336:
+  oflag=FLAGS     write as per the comma separated symbol list\n\$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#404: FILE: dd.c:336:
+  oflag=FLAGS     write as per the comma separated symbol list\n\
        ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#414: FILE: dd.c:348:
+Each CONV symbol may be:\n\
                        ^

CHECK:CAMELCASE: Avoid CamelCase: <Each>
#414: FILE: dd.c:348:
+Each CONV symbol may be:\n\

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#422: FILE: dd.c:360:
+  nocreat   do not create the output file\n\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#423: FILE: dd.c:361:
+  excl      fail if the output file already exists\n\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#430: FILE: dd.c:368:
+  fdatasync physically write output file data before finishing\n\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#431: FILE: dd.c:369:
+  fsync     likewise, but also write metadata\n\$

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#435: FILE: dd.c:373:
+Each FLAG symbol may be:\n\
                        ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#437: FILE: dd.c:375:
+  append    append mode (makes sense only for output)\n\$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#437: FILE: dd.c:375:
+  append    append mode (makes sense only for output)\n\

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#439: FILE: dd.c:377:
+      if (O_DIRECT)$

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#440: FILE: dd.c:378:
+	fputs (_("  direct    use direct I/O for data\n"), stdout);
 	                                  ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#441: FILE: dd.c:379:
+      if (O_DSYNC)$

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#442: FILE: dd.c:380:
+	fputs (_("  dsync     use synchronized I/O for data\n"), stdout);
 	                                        ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#443: FILE: dd.c:381:
+      if (O_SYNC)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#445: FILE: dd.c:383:
+      if (O_NONBLOCK)$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#446: FILE: dd.c:384:
+	fputs (_("  nonblock  use non-blocking I/O\n"), stdout);
 	                             ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#446: FILE: dd.c:384:
+	fputs (_("  nonblock  use non-blocking I/O\n"), stdout);
 	                                        ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#447: FILE: dd.c:385:
+      if (O_NOFOLLOW)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#449: FILE: dd.c:387:
+      if (O_NOCTTY)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#452: FILE: dd.c:390:
+      fputs (_("\$

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#452: FILE: dd.c:390:
+      fputs (_("\

WARNING:LINE_CONTINUATIONS: Avoid line continuations in quoted strings
#452: FILE: dd.c:390:
+      fputs (_("\

WARNING:STATIC_CONST: Move const after static - use 'static const char'
#463: FILE: dd.c:550:
+static char const iflag_error_msgid[] = N_("invalid input flag: %s");

WARNING:STATIC_CONST: Move const after static - use 'static const char'
#464: FILE: dd.c:551:
+static char const oflag_error_msgid[] = N_("invalid output flag: %s");

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#467: FILE: dd.c:554:
+/* Interpret one "conv=..." or similar option STR according to the
+   symbols in TABLE, returning the flags specified.  If the option

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#474: FILE: dd.c:559:
+parse_symbols (char *str, struct symbol_value const *table,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#479: FILE: dd.c:562:
+  int value = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#484: FILE: dd.c:566:
+      struct symbol_value const *entry;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#485: FILE: dd.c:567:
+      char *new = strchr (str, ',');$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#485: FILE: dd.c:567:
+      char *new = strchr (str, ',');

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#495: FILE: dd.c:570:
+      for (entry = table; ; entry++)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (6, 10)
#495: FILE: dd.c:570:
+      for (entry = table; ; entry++)
 	{

WARNING:TABSTOP: Statements should start on a tabstop
#499: FILE: dd.c:572:
+	  if (! entry->symbol[0])

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#499: FILE: dd.c:572:
+	  if (! entry->symbol[0])
+	    {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 14)
#499: FILE: dd.c:572:
+	  if (! entry->symbol[0])
+	    {

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#499: FILE: dd.c:572:
+	  if (! entry->symbol[0])
 	      ^

WARNING:TABSTOP: Statements should start on a tabstop
#500: FILE: dd.c:573:
+	    {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#501: FILE: dd.c:574:
+	      error (0, 0, _(error_msgid), quote (str));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#501: FILE: dd.c:574:
+	      error (0, 0, _(error_msgid), quote (str));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#502: FILE: dd.c:575:
+	      usage (EXIT_FAILURE);

WARNING:TABSTOP: Statements should start on a tabstop
#503: FILE: dd.c:576:
+	    }

WARNING:TABSTOP: Statements should start on a tabstop
#504: FILE: dd.c:577:
+	  if (STREQ (entry->symbol, str))

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#504: FILE: dd.c:577:
+	  if (STREQ (entry->symbol, str))
+	    {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 14)
#504: FILE: dd.c:577:
+	  if (STREQ (entry->symbol, str))
+	    {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#504: FILE: dd.c:577:
+	  if (STREQ (entry->symbol, str))

WARNING:TABSTOP: Statements should start on a tabstop
#505: FILE: dd.c:578:
+	    {

WARNING:TABSTOP: Statements should start on a tabstop
#506: FILE: dd.c:579:
+	      if (! entry->value)

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#506: FILE: dd.c:579:
+	      if (! entry->value)
 	          ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#507: FILE: dd.c:580:
+		error (EXIT_FAILURE, 0, _(error_msgid), quote (str));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#507: FILE: dd.c:580:
+		error (EXIT_FAILURE, 0, _(error_msgid), quote (str));

WARNING:TABSTOP: Statements should start on a tabstop
#509: FILE: dd.c:582:
+	      break;

WARNING:TABSTOP: Statements should start on a tabstop
#510: FILE: dd.c:583:
+	    }

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#514: FILE: dd.c:586:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#515: FILE: dd.c:587:
+  while (str);$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#515: FILE: dd.c:587:
+  while (str);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#517: FILE: dd.c:589:
+  return value;$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#526: FILE: dd.c:651:
+	conversions_mask |= parse_symbols (val, conversions,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#528: FILE: dd.c:653:
+      else if (STREQ (name, "iflag"))$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#528: FILE: dd.c:653:
+      else if (STREQ (name, "iflag"))

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#529: FILE: dd.c:654:
+	input_flags |= parse_symbols (val, flags, iflag_error_msgid);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#530: FILE: dd.c:655:
+      else if (STREQ (name, "oflag"))$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#530: FILE: dd.c:655:
+      else if (STREQ (name, "oflag"))

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#531: FILE: dd.c:656:
+	output_flags |= parse_symbols (val, flags, oflag_error_msgid);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#540: FILE: dd.c:721:
+  if (input_flags & (O_DSYNC | O_SYNC))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#540: FILE: dd.c:721:
+  if (input_flags & (O_DSYNC | O_SYNC))
+    input_flags |= O_RSYNC;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#541: FILE: dd.c:722:
+    input_flags |= O_RSYNC;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#543: FILE: dd.c:724:
+  if ((conversions_mask & (C_EXCL | C_NOCREAT)) == (C_EXCL | C_NOCREAT))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#543: FILE: dd.c:724:
+  if ((conversions_mask & (C_EXCL | C_NOCREAT)) == (C_EXCL | C_NOCREAT))
+    error (EXIT_FAILURE, 0, _("cannot combine excl and nocreat"));

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#544: FILE: dd.c:725:
+    error (EXIT_FAILURE, 0, _("cannot combine excl and nocreat"));$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#544: FILE: dd.c:725:
+    error (EXIT_FAILURE, 0, _("cannot combine excl and nocreat"));

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#553: FILE: dd.c:1017:
+/* Set the file descriptor flags for FD that correspond to the nonzero bits
+   in FLAGS.  The file's name is NAME.  */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#553: FILE: dd.c:1017:
+   in FLAGS.  The file's name is NAME.  */

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#556: FILE: dd.c:1020:
+set_fd_flags (int fd, int flags, char const *name)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#558: FILE: dd.c:1022:
+  if (flags)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#558: FILE: dd.c:1022:
+  if (flags)
+    {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#558: FILE: dd.c:1022:
+  if (flags)
+    {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#559: FILE: dd.c:1023:
+    {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#560: FILE: dd.c:1024:
+      int old_flags = fcntl (fd, F_GETFL);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#560: FILE: dd.c:1024:
+      int old_flags = fcntl (fd, F_GETFL);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#561: FILE: dd.c:1025:
+      int new_flags = old_flags | flags;$

WARNING:LINE_SPACING: Missing a blank line after declarations
#562: FILE: dd.c:1026:
+      int new_flags = old_flags | flags;
+      if (old_flags < 0

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#562: FILE: dd.c:1026:
+      if (old_flags < 0$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#563: FILE: dd.c:1027:
+      if (old_flags < 0
+	  || (new_flags != old_flags && fcntl (fd, F_SETFL, new_flags) == -1))

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#563: FILE: dd.c:1027:
+	  || (new_flags != old_flags && fcntl (fd, F_SETFL, new_flags) == -1))

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#564: FILE: dd.c:1028:
+	error (EXIT_FAILURE, errno, _("setting flags for %s"), quote (name));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#564: FILE: dd.c:1028:
+	error (EXIT_FAILURE, errno, _("setting flags for %s"), quote (name));

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#565: FILE: dd.c:1029:
+    }$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#574: FILE: dd.c:1097:
   if (max_records == 0)
+    return exit_status;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#576: FILE: dd.c:1098:
+    return exit_status;$

WARNING:TABSTOP: Statements should start on a tabstop
#585: FILE: dd.c:1165:
+	      return EXIT_FAILURE;

WARNING:TABSTOP: Statements should start on a tabstop
#594: FILE: dd.c:1226:
+	  return EXIT_FAILURE;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#602: FILE: dd.c:1234:
+  if ((conversions_mask & C_FDATASYNC) && fdatasync (STDOUT_FILENO) != 0)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#602: FILE: dd.c:1234:
+  if ((conversions_mask & C_FDATASYNC) && fdatasync (STDOUT_FILENO) != 0)
+    {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#602: FILE: dd.c:1234:
+  if ((conversions_mask & C_FDATASYNC) && fdatasync (STDOUT_FILENO) != 0)
+    {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#602: FILE: dd.c:1234:
+  if ((conversions_mask & C_FDATASYNC) && fdatasync (STDOUT_FILENO) != 0)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#603: FILE: dd.c:1235:
+    {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#604: FILE: dd.c:1236:
+      if (errno != ENOSYS && errno != EINVAL)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#604: FILE: dd.c:1236:
+      if (errno != ENOSYS && errno != EINVAL)
+	{

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (6, 10)
#604: FILE: dd.c:1236:
+      if (errno != ENOSYS && errno != EINVAL)
+	{

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#604: FILE: dd.c:1236:
+      if (errno != ENOSYS && errno != EINVAL)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#606: FILE: dd.c:1238:
+	  error (0, errno, "fdatasync %s", quote (output_file));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#606: FILE: dd.c:1238:
+	  error (0, errno, "fdatasync %s", quote (output_file));

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#609: FILE: dd.c:1241:
+      conversions_mask |= C_FSYNC;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#610: FILE: dd.c:1242:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#612: FILE: dd.c:1244:
+  if (conversions_mask & C_FSYNC)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#612: FILE: dd.c:1244:
+  if (conversions_mask & C_FSYNC)
+    while (fsync (STDOUT_FILENO) != 0)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#613: FILE: dd.c:1245:
+    while (fsync (STDOUT_FILENO) != 0)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 6)
#613: FILE: dd.c:1245:
+    while (fsync (STDOUT_FILENO) != 0)
+      if (errno != EINTR)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#613: FILE: dd.c:1245:
+    while (fsync (STDOUT_FILENO) != 0)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#614: FILE: dd.c:1246:
+      if (errno != EINTR)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#614: FILE: dd.c:1246:
+      if (errno != EINTR)
+	{

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (6, 10)
#614: FILE: dd.c:1246:
+      if (errno != EINTR)
+	{

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#616: FILE: dd.c:1248:
+	  error (0, errno, "fsync %s", quote (output_file));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#616: FILE: dd.c:1248:
+	  error (0, errno, "fsync %s", quote (output_file));

WARNING:TABSTOP: Statements should start on a tabstop
#617: FILE: dd.c:1249:
+	  return EXIT_FAILURE;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#628: FILE: dd.c:1296:
+  if (input_file == NULL)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#628: FILE: dd.c:1296:
+  if (input_file == NULL)
     {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!input_file"
#628: FILE: dd.c:1296:
+  if (input_file == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#632: FILE: dd.c:1298:
+      input_file = _("standard input");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#633: FILE: dd.c:1299:
+      set_fd_flags (STDIN_FILENO, input_flags, input_file);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#633: FILE: dd.c:1299:
+      set_fd_flags (STDIN_FILENO, input_flags, input_file);

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#635: FILE: dd.c:1301:
   else
+    {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#635: FILE: dd.c:1301:
   else
+    {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#637: FILE: dd.c:1302:
+    {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#638: FILE: dd.c:1303:
+      if (open_fd (STDIN_FILENO, input_file, O_RDONLY | input_flags, 0) < 0)$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#638: FILE: dd.c:1303:
+      if (open_fd (STDIN_FILENO, input_file, O_RDONLY | input_flags, 0) < 0)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#639: FILE: dd.c:1304:
+	error (EXIT_FAILURE, errno, _("opening %s"), quote (input_file));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#639: FILE: dd.c:1304:
+	error (EXIT_FAILURE, errno, _("opening %s"), quote (input_file));

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#640: FILE: dd.c:1305:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#643: FILE: dd.c:1307:
+  if (output_file == NULL)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#643: FILE: dd.c:1307:
+  if (output_file == NULL)
+    {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#643: FILE: dd.c:1307:
+  if (output_file == NULL)
+    {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!output_file"
#643: FILE: dd.c:1307:
+  if (output_file == NULL)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#644: FILE: dd.c:1308:
+    {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#645: FILE: dd.c:1309:
+      output_file = _("standard output");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#646: FILE: dd.c:1310:
+      set_fd_flags (STDOUT_FILENO, output_flags, output_file);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#646: FILE: dd.c:1310:
+      set_fd_flags (STDOUT_FILENO, output_flags, output_file);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#647: FILE: dd.c:1311:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#648: FILE: dd.c:1312:
+  else$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#648: FILE: dd.c:1312:
+  else
     {

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#653: FILE: dd.c:1316:
       int opts
+	= (output_flags

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000289744.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 18 errors, 142 warnings, 11 checks, 556 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000289744.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
