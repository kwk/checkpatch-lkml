WARNING:TYPO_SPELLING: 'inconsistant' may be misspelled - perhaps 'inconsistent'?
#31: 
be quite inconsistant). Let me know if you want to see the numbers.
         ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#35: 
Patch can also be downloaded at: http://prdownloads.sf.net/lse/fast_walkA1-2.5.10.patch

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#49: FILE: fs/dcache.c:849:
+	struct dentry * dentry;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#50: FILE: fs/dcache.c:850:
+	struct dentry * dentry;
+	spin_lock(&dcache_lock);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#51: FILE: fs/dcache.c:851:
+	dentry = __d_lookup(parent,name);
 	                          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#56: FILE: fs/dcache.c:856:
+struct dentry * __d_lookup(struct dentry * parent, struct qstr * name)  $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#56: FILE: fs/dcache.c:856:
+struct dentry * __d_lookup(struct dentry * parent, struct qstr * name)  

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#56: FILE: fs/dcache.c:856:
+struct dentry * __d_lookup(struct dentry * parent, struct qstr * name)  

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#56: FILE: fs/dcache.c:856:
+struct dentry * __d_lookup(struct dentry * parent, struct qstr * name)  

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#58: FILE: fs/dcache.c:858:
+{
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#87: FILE: fs/namei.c:271:
+^I$

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#98: FILE: fs/namei.c:282:
+static inline void undo_locked(struct nameidata *nd)
                                                  ^^

ERROR:SPACING: space required before the open brace '{'
#100: FILE: fs/namei.c:284:
+	if(nd->flags & LOOKUP_LOCKED){

ERROR:SPACING: space required before the open parenthesis '('
#100: FILE: fs/namei.c:284:
+	if(nd->flags & LOOKUP_LOCKED){

ERROR:TRAILING_WHITESPACE: trailing whitespace
#109: FILE: fs/namei.c:293:
+ * For fast path lookup while holding the dcache_lock. $

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#112: FILE: fs/namei.c:296:
+static struct dentry * cached_lookup_nd(struct nameidata * nd, struct qstr * name, int flags)
                                                            ^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#112: FILE: fs/namei.c:296:
+static struct dentry * cached_lookup_nd(struct nameidata * nd, struct qstr * name, int flags)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#112: FILE: fs/namei.c:296:
+static struct dentry * cached_lookup_nd(struct nameidata * nd, struct qstr * name, int flags)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#112: FILE: fs/namei.c:296:
+static struct dentry * cached_lookup_nd(struct nameidata * nd, struct qstr * name, int flags)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#114: FILE: fs/namei.c:298:
+	struct dentry * dentry = NULL;

WARNING:LINE_SPACING: Missing a blank line after declarations
#115: FILE: fs/namei.c:299:
+	struct dentry * dentry = NULL;
+	if(!(nd->flags & LOOKUP_LOCKED))

ERROR:SPACING: space required before the open parenthesis '('
#115: FILE: fs/namei.c:299:
+	if(!(nd->flags & LOOKUP_LOCKED))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#117: FILE: fs/namei.c:301:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#119: FILE: fs/namei.c:303:
+^I$

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#121: FILE: fs/namei.c:305:
+		undo_locked(nd);
 		            ^^

ERROR:SPACING: space required before the open brace '{'
#166: FILE: fs/namei.c:537:
+		if(err){

ERROR:SPACING: space required before the open parenthesis '('
#166: FILE: fs/namei.c:537:
+		if(err){

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#167: FILE: fs/namei.c:538:
+			undo_locked(nd);
 			            ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#177: FILE: fs/namei.c:575:
+				undo_locked(nd);
 				            ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#186: FILE: fs/namei.c:592:
+		dentry = cached_lookup_nd(nd, &this, LOOKUP_CONTINUE);
 		                          ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#188: FILE: fs/namei.c:594:
+			undo_locked(nd);
 			            ^^

ERROR:SPACING: space required before the open brace '{'
#197: FILE: fs/namei.c:601:
+		if(d_mountpoint(dentry)){

ERROR:SPACING: space required before the open parenthesis '('
#197: FILE: fs/namei.c:601:
+		if(d_mountpoint(dentry)){

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#198: FILE: fs/namei.c:602:
+			undo_locked(nd);
 			            ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#209: FILE: fs/namei.c:616:
+			undo_locked(nd);
 			            ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#227: FILE: fs/namei.c:650:
+				undo_locked(nd);
 				            ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#236: FILE: fs/namei.c:662:
+		dentry = cached_lookup_nd(nd, &this, 0);
 		                          ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#237: FILE: fs/namei.c:663:
+		undo_locked(nd); 
 		            ^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#237: FILE: fs/namei.c:663:
+^I^Iundo_locked(nd); $

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#245: FILE: fs/namei.c:703:
+		undo_locked(nd);
 		            ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#248: FILE: fs/namei.c:706:
+		undo_locked(nd);
 		            ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#252: FILE: fs/namei.c:710:
+	undo_locked(nd);
 	            ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#262: FILE: fs/namei.c:816:
+int path_lookup(const char *name, unsigned int flags, struct nameidata *nd)
                                                                         ^^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#266: FILE: fs/namei.c:820:
+	if (*name=='/'){
 	         ^

ERROR:SPACING: space required before the open brace '{'
#266: FILE: fs/namei.c:820:
+	if (*name=='/'){

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#272: FILE: fs/namei.c:826:
+			if (__emul_lookup_dentry(name,nd))
 			                              ^^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#272: FILE: fs/namei.c:826:
+			if (__emul_lookup_dentry(name,nd))
 			                             ^

ERROR:SPACING: space required before the open brace '{'
#281: FILE: fs/namei.c:835:
+	else{

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#281: FILE: fs/namei.c:835:
+	}
+	else{

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#281: FILE: fs/namei.c:835:
+	else{

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#289: FILE: fs/namei.c:843:
+	return (path_walk(name, nd));
 	                        ^^

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#289: FILE: fs/namei.c:843:
+	return (path_walk(name, nd));

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#300: FILE: include/linux/dcache.h:232:
+extern struct dentry * __d_lookup(struct dentry *, struct qstr *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#300: FILE: include/linux/dcache.h:232:
+extern struct dentry * __d_lookup(struct dentry *, struct qstr *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#300: FILE: include/linux/dcache.h:232:
+extern struct dentry * __d_lookup(struct dentry *, struct qstr *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct qstr *' should also have an identifier name
#300: FILE: include/linux/dcache.h:232:
+extern struct dentry * __d_lookup(struct dentry *, struct qstr *);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#327: FILE: include/linux/fs.h:1427:
+extern int FASTCALL(path_lookup(const char *, unsigned, struct nameidata *));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#327: FILE: include/linux/fs.h:1427:
+extern int FASTCALL(path_lookup(const char *, unsigned, struct nameidata *));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#327: FILE: include/linux/fs.h:1427:
+extern int FASTCALL(path_lookup(const char *, unsigned, struct nameidata *));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned' should also have an identifier name
#327: FILE: include/linux/fs.h:1427:
+extern int FASTCALL(path_lookup(const char *, unsigned, struct nameidata *));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nameidata *' should also have an identifier name
#327: FILE: include/linux/fs.h:1427:
+extern int FASTCALL(path_lookup(const char *, unsigned, struct nameidata *));

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000462236.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 29 errors, 28 warnings, 4 checks, 269 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000462236.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
