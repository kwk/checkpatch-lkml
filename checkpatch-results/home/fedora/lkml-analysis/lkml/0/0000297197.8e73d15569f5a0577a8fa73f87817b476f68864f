WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#52: 
 linux-2.6-npiggin/mm/vmscan.c                   |  193 ++++++++++--------------

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxW)
#65: FILE: arch/i386/mm/hugetlbpage.c:415:
+				1 << PG_reserved | 1 << PG_private | 1<< PG_writeback);
 				                                      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxW)
#79: FILE: arch/ia64/mm/hugetlbpage.c:435:
+				1 << PG_reserved | 1 << PG_private | 1<< PG_writeback);
 				                                      ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxW)
#93: FILE: arch/ppc64/mm/hugetlbpage.c:804:
+				1 << PG_reserved | 1 << PG_private | 1<< PG_writeback);
 				                                      ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxW)
#107: FILE: arch/sparc64/mm/hugetlbpage.c:369:
+				1 << PG_reserved | 1 << PG_private | 1<< PG_writeback);
 				                                      ^

WARNING:DUPLICATED_SYSCTL_CONST: duplicated sysctl range checking value 'one', consider using the shared one in include/linux/sysctl.h
#322: FILE: kernel/sysctl.c:707:
+		.extra1		= &one,

Commit d91bff3011cf ("proc/sysctl: add shared variables for range
check") added some shared const variables to be used instead of a local
copy in each source file.

Consider replacing the sysctl range checking value with the shared
one in include/linux/sysctl.h.  The following conversion scheme may
be used::

  &zero     ->  SYSCTL_ZERO
  &one      ->  SYSCTL_ONE
  &int_max  ->  SYSCTL_INT_MAX

See:

  1. https://lore.kernel.org/lkml/20190430180111.10688-1-mcroce@redhat.com/
  2. https://lore.kernel.org/lkml/20190531131422.14970-1-mcroce@redhat.com/

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#432: FILE: mm/swap.c:71:
+	if (PageLRU(page)
+		&& !PageActiveMapped(page) && !PageActiveUnmapped(page)) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#433: FILE: mm/swap.c:72:
+		&& !PageActiveMapped(page) && !PageActiveUnmapped(page)) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#443: FILE: mm/swap.c:92:
+	if (PageLRU(page)
+		&& !PageActiveMapped(page) && !PageActiveUnmapped(page)) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#444: FILE: mm/swap.c:93:
+		&& !PageActiveMapped(page) && !PageActiveUnmapped(page)) {
+

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#465: FILE: mm/swap.c:118:
+	if (!PageActiveMapped(page) && !PageActiveUnmapped(page)
+			&& PageReferenced(page) && PageLRU(page)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around _page->lru
#510: FILE: mm/vmscan.c:55:
+			prev = lru_to_page(&(_page->lru));		\

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around _page->lru
#520: FILE: mm/vmscan.c:69:
+			prev = lru_to_page(&(_page->lru));			\

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#538: FILE: mm/vmscan.c:274:
+		BUG_ON(PageActiveMapped(page) || PageActiveUnmapped(page));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#590: FILE: mm/vmscan.c:587:
+static void shrink_active_list(struct zone *zone, struct list_head *list,
+		unsigned long *list_count, const int nr_scan,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#697: FILE: mm/vmscan.c:638:
+		if (unlikely(total_swap_pages == 0 && !page->mapping &&
+						!PagePrivate(page))) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#712: FILE: mm/vmscan.c:654:
+		if (!TestClearPageActiveMapped(page)
+				&& !TestClearPageActiveUnmapped(page))

ERROR:SPACING: space required before the open parenthesis '('
#730: FILE: mm/vmscan.c:684:
+		if(!TestClearPageActiveMapped(page)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#731: FILE: mm/vmscan.c:685:
+		if(!TestClearPageActiveMapped(page)
+				&& !TestClearPageActiveUnmapped(page))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#732: FILE: mm/vmscan.c:686:
+			BUG();

CHECK:SPACING: spaces preferred around that '+' (ctx:WxV)
#784: FILE: mm/vmscan.c:743:
+	do_div(mapped_ratio, (zone->nr_active_unmapped * vm_mapped_page_cost) +1);
 	                                                                      ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#787: FILE: mm/vmscan.c:746:
+	atomic_add(ratio+1, &zone->nr_scan_active_unmapped);
 	                ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#792: FILE: mm/vmscan.c:751:
+		shrink_active_list(zone, &zone->active_unmapped_list,
+					&zone->nr_active_unmapped, count, ps);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#797: FILE: mm/vmscan.c:754:
+	atomic_add(mapped_ratio+1, &zone->nr_scan_active_mapped);
 	                       ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#804: FILE: mm/vmscan.c:759:
+		shrink_active_list(zone, &zone->active_mapped_list,
+					&zone->nr_active_mapped, count, ps);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000297197.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 4 warnings, 20 checks, 744 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000297197.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
