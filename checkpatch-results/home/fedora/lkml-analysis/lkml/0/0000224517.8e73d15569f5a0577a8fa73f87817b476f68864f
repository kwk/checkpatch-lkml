WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#37: 
The page fault handler for anonymous pages can generate significant overhead

WARNING:TYPO_SPELLING: 'acccess' may be misspelled - perhaps 'access'?
#58: 
(assuming linear acccess by the application). If the prediction turns out to
                 ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'continous' may be misspelled - perhaps 'continuous'?
#66: 
continous allocation the number of faults is reduced by a factor of 8.
^^^^^^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#193: FILE: mm/memory.c:1436:
+	struct page * page;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#197: FILE: mm/memory.c:1440:
+ ^Iif (current->anon_fault_next_addr == addr) {$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#197: FILE: mm/memory.c:1440:
+ ^Iif (current->anon_fault_next_addr == addr) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#197: FILE: mm/memory.c:1440:
+ ^Iif (current->anon_fault_next_addr == addr) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#198: FILE: mm/memory.c:1441:
+ ^I^Iunsigned long end_addr;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#198: FILE: mm/memory.c:1441:
+ ^I^Iunsigned long end_addr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#198: FILE: mm/memory.c:1441:
+ ^I^Iunsigned long end_addr;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#199: FILE: mm/memory.c:1442:
+ ^I^Iint order = current->anon_fault_order;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#199: FILE: mm/memory.c:1442:
+ ^I^Iint order = current->anon_fault_order;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#199: FILE: mm/memory.c:1442:
+ ^I^Iint order = current->anon_fault_order;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#204: FILE: mm/memory.c:1447:
+ ^I^Iorder++;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#204: FILE: mm/memory.c:1447:
+ ^I^Iorder++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#204: FILE: mm/memory.c:1447:
+ ^I^Iorder++;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#217: FILE: mm/memory.c:1460:
+^I ^Icurrent->anon_fault_order = order;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#217: FILE: mm/memory.c:1460:
+^I ^Icurrent->anon_fault_order = order;$

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#220: FILE: mm/memory.c:1463:
+		if (write_access) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required after that ';' (ctx:VxV)
#234: FILE: mm/memory.c:1477:
+			for(a = addr;a < end_addr ; a += PAGE_SIZE) {
 			            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#234: FILE: mm/memory.c:1477:
+			for(a = addr;a < end_addr ; a += PAGE_SIZE) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#237: FILE: mm/memory.c:1480:
+				if (p) {
[...]
+				} else
[...]

ERROR:SPACING: space required after that ',' (ctx:VxV)
#239: FILE: mm/memory.c:1482:
+					pagevec_add(&pv,p);
 					               ^

CHECK:BRACES: Unbalanced braces around else statement
#240: FILE: mm/memory.c:1483:
+				} else

ERROR:CODE_INDENT: code indent should use tabs where possible
#247: FILE: mm/memory.c:1490:
+ ^I^I^Ifor(p = pv.pages; addr < end_addr; addr += PAGE_SIZE, p++) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#247: FILE: mm/memory.c:1490:
+ ^I^I^Ifor(p = pv.pages; addr < end_addr; addr += PAGE_SIZE, p++) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#247: FILE: mm/memory.c:1490:
+ ^I^I^Ifor(p = pv.pages; addr < end_addr; addr += PAGE_SIZE, p++) {$

ERROR:SPACING: space required before the open parenthesis '('
#247: FILE: mm/memory.c:1490:
+ 			for(p = pv.pages; addr < end_addr; addr += PAGE_SIZE, p++) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#248: FILE: mm/memory.c:1491:
+ 			for(p = pv.pages; addr < end_addr; addr += PAGE_SIZE, p++) {
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#257: FILE: mm/memory.c:1500:
+ ^I^I^I^Ientry = maybe_mkwrite(pte_mkdirty(mk_pte(*p,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#257: FILE: mm/memory.c:1500:
+ ^I^I^I^Ientry = maybe_mkwrite(pte_mkdirty(mk_pte(*p,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#257: FILE: mm/memory.c:1500:
+ ^I^I^I^Ientry = maybe_mkwrite(pte_mkdirty(mk_pte(*p,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#258: FILE: mm/memory.c:1501:
+ ^I^I^I^I^I^I^I vma->vm_page_prot)),$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#258: FILE: mm/memory.c:1501:
+ ^I^I^I^I^I^I^I vma->vm_page_prot)),$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#258: FILE: mm/memory.c:1501:
+ 				entry = maybe_mkwrite(pte_mkdirty(mk_pte(*p,
+ 							 vma->vm_page_prot)),

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#258: FILE: mm/memory.c:1501:
+ ^I^I^I^I^I^I^I vma->vm_page_prot)),$

ERROR:CODE_INDENT: code indent should use tabs where possible
#259: FILE: mm/memory.c:1502:
+ ^I^I^I^I^I^I      vma);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#259: FILE: mm/memory.c:1502:
+ ^I^I^I^I^I^I      vma);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#259: FILE: mm/memory.c:1502:
+ ^I^I^I^I^I^I      vma);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#269: FILE: mm/memory.c:1512:
+ ^I^I^I^I/* No need to invalidate - it was non-present before */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#269: FILE: mm/memory.c:1512:
+ ^I^I^I^I/* No need to invalidate - it was non-present before */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#269: FILE: mm/memory.c:1512:
+ ^I^I^I^I/* No need to invalidate - it was non-present before */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#270: FILE: mm/memory.c:1513:
+ ^I^I^I^Iupdate_mmu_cache(vma, addr, entry);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#270: FILE: mm/memory.c:1513:
+ ^I^I^I^Iupdate_mmu_cache(vma, addr, entry);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#270: FILE: mm/memory.c:1513:
+ ^I^I^I^Iupdate_mmu_cache(vma, addr, entry);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#272: FILE: mm/memory.c:1515:
+ ^I^I} else {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#272: FILE: mm/memory.c:1515:
+ ^I^I} else {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#272: FILE: mm/memory.c:1515:
+ ^I^I} else {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#273: FILE: mm/memory.c:1516:
+ ^I^I^I/* Read */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#273: FILE: mm/memory.c:1516:
+ ^I^I^I/* Read */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#273: FILE: mm/memory.c:1516:
+ ^I^I^I/* Read */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#274: FILE: mm/memory.c:1517:
+ ^I^I^Ifor(;addr < end_addr; addr += PAGE_SIZE) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#274: FILE: mm/memory.c:1517:
+ ^I^I^Ifor(;addr < end_addr; addr += PAGE_SIZE) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#274: FILE: mm/memory.c:1517:
+ ^I^I^Ifor(;addr < end_addr; addr += PAGE_SIZE) {$

ERROR:SPACING: space required after that ';' (ctx:BxV)
#274: FILE: mm/memory.c:1517:
+ 			for(;addr < end_addr; addr += PAGE_SIZE) {
  			    ^

ERROR:SPACING: space required before the open parenthesis '('
#274: FILE: mm/memory.c:1517:
+ 			for(;addr < end_addr; addr += PAGE_SIZE) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#276: FILE: mm/memory.c:1519:
+ ^I^I^I^Ientry = pte_wrprotect(mk_pte(ZERO_PAGE(addr), vma->vm_page_prot));$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#276: FILE: mm/memory.c:1519:
+ ^I^I^I^Ientry = pte_wrprotect(mk_pte(ZERO_PAGE(addr), vma->vm_page_prot));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#276: FILE: mm/memory.c:1519:
+ ^I^I^I^Ientry = pte_wrprotect(mk_pte(ZERO_PAGE(addr), vma->vm_page_prot));$

ERROR:CODE_INDENT: code indent should use tabs where possible
#280: FILE: mm/memory.c:1523:
+ ^I^I^I^I/* No need to invalidate - it was non-present before */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#280: FILE: mm/memory.c:1523:
+ ^I^I^I^I/* No need to invalidate - it was non-present before */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#280: FILE: mm/memory.c:1523:
+ ^I^I^I^I/* No need to invalidate - it was non-present before */$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000224517.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 23 errors, 34 warnings, 5 checks, 122 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000224517.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
