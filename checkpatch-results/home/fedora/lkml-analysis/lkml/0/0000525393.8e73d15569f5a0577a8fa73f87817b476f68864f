CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "np->node"
#60: FILE: arch/ppc/kernel/prom.c:1159:
+	if (np->node != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:SPACING: No space is necessary after a cast
#62: FILE: arch/ppc/kernel/prom.c:1161:
+		pp = (struct property *) mem_start;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#65: FILE: arch/ppc/kernel/prom.c:1164:
+		namep = (char *) (pp + 1);

CHECK:SPACING: No space is necessary after a cast
#69: FILE: arch/ppc/kernel/prom.c:1168:
+		pp->value = (unsigned char *) PTRUNRELOC(&np->node);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "np"
#87: FILE: arch/ppc/kernel/prom.c:1207:
+	for (np = allnodes; np != NULL; np = np->allnext) {

CHECK:CAMELCASE: Avoid CamelCase: <_MACH_Pmac>
#97: FILE: arch/ppc/kernel/prom.c:1213:
+	if (_machine == _MACH_Pmac && use_of_interrupt_tree)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "np"
#118: FILE: arch/ppc/kernel/prom.c:1234:
+		for (np = allnodes; np != NULL; np = np->allnext) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#119: FILE: arch/ppc/kernel/prom.c:1235:
+			if ((name = get_property(np, "name", NULL)) == NULL

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#120: FILE: arch/ppc/kernel/prom.c:1236:
+			if ((name = get_property(np, "name", NULL)) == NULL
+			    || strcmp(name, "interrupt-controller") != 0)

CHECK:SPACING: No space is necessary after a cast
#157: FILE: arch/ppc/kernel/prom.c:1349:
+	parp = (phandle *) get_property(p, "interrupt-parent", NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!parp"
#158: FILE: arch/ppc/kernel/prom.c:1350:
+	if (parp == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "p"
#161: FILE: arch/ppc/kernel/prom.c:1353:
+	if (p != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "icp"
#203: FILE: arch/ppc/kernel/prom.c:1379:
+		if (icp != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "get_property"
#205: FILE: arch/ppc/kernel/prom.c:1381:
+		if (get_property(p, "interrupt-controller", NULL) != NULL

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#206: FILE: arch/ppc/kernel/prom.c:1382:
+		if (get_property(p, "interrupt-controller", NULL) != NULL
+		    || get_property(p, "interrupt-map", NULL) != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "get_property"
#206: FILE: arch/ppc/kernel/prom.c:1382:
+		    || get_property(p, "interrupt-map", NULL) != NULL) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#207: FILE: arch/ppc/kernel/prom.c:1383:
+			printk("oops, node %s doesn't have #interrupt-cells\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#212: FILE: arch/ppc/kernel/prom.c:1388:
+	printk("prom_n_intr_cells failed for %s\n", np->full_name);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'prom_n_intr_cells', this function's name, in a string
#212: FILE: arch/ppc/kernel/prom.c:1388:
+	printk("prom_n_intr_cells failed for %s\n", np->full_name);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:SPACING: No space is necessary after a cast
#265: FILE: arch/ppc/kernel/prom.c:1407:
+	reg = (unsigned int *) get_property(np, "reg", NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "p"
#268: FILE: arch/ppc/kernel/prom.c:1410:
+	while (p != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "get_property"
#269: FILE: arch/ppc/kernel/prom.c:1411:
+		if (get_property(p, "interrupt-controller", NULL) != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!imap"
#274: FILE: arch/ppc/kernel/prom.c:1416:
+		if (imap == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!imask"
#280: FILE: arch/ppc/kernel/prom.c:1422:
+		if (imask == NULL) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#281: FILE: arch/ppc/kernel/prom.c:1423:
+			printk("oops, %s has interrupt-map but no mask\n",

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#294: FILE: arch/ppc/kernel/prom.c:1436:
+				match = ((ints[i-naddrc] ^ imap[i]) & imask[i]) == 0;
 				                ^

CHECK:SPACING: No space is necessary after a cast
#298: FILE: arch/ppc/kernel/prom.c:1440:
+			ipar = find_phandle((phandle) *imap++);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ipar"
#300: FILE: arch/ppc/kernel/prom.c:1442:
+			if (ipar == NULL && num_interrupt_controllers == 1)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ipar"
#303: FILE: arch/ppc/kernel/prom.c:1445:
+			if (ipar == NULL) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#304: FILE: arch/ppc/kernel/prom.c:1446:
+				printk("oops, no int parent %x in map of %s\n",

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ip"
#311: FILE: arch/ppc/kernel/prom.c:1453:
+			if (ip == NULL) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#312: FILE: arch/ppc/kernel/prom.c:1454:
+				printk("oops, no #interrupt-cells on %s\n",

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#319: FILE: arch/ppc/kernel/prom.c:1461:
+			newaddrc = (ip == NULL)? 0: *ip;
 			                       ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#319: FILE: arch/ppc/kernel/prom.c:1461:
+			newaddrc = (ip == NULL)? 0: *ip;
 			                          ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ip"
#319: FILE: arch/ppc/kernel/prom.c:1461:
+			newaddrc = (ip == NULL)? 0: *ip;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#324: FILE: arch/ppc/kernel/prom.c:1466:
+			printk("oops, error decoding int-map on %s, len=%d\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#329: FILE: arch/ppc/kernel/prom.c:1471:
+			printk("oops, no match in %s int-map for %s\n",

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!p"
#339: FILE: arch/ppc/kernel/prom.c:1481:
+	if (p == NULL)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#340: FILE: arch/ppc/kernel/prom.c:1482:
+		printk("hmmm, int tree for %s doesn't have ctrler\n",

CHECK:SPACING: No space is necessary after a cast
#359: FILE: arch/ppc/kernel/prom.c:1501:
+	ints = (unsigned int *) get_property(np, "interrupts", &intlen);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ints"
#360: FILE: arch/ppc/kernel/prom.c:1502:
+	if (ints == NULL)

CHECK:SPACING: No space is necessary after a cast
#435: FILE: arch/ppc/kernel/prom.c:1507:
+	np->intrs = (struct interrupt_info *) mem_start;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ic"
#455: FILE: arch/ppc/kernel/prom.c:1527:
+		if (num_interrupt_controllers > 1 && ic != NULL

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#456: FILE: arch/ppc/kernel/prom.c:1528:
+		if (num_interrupt_controllers > 1 && ic != NULL
+		    && get_property(ic, "interrupt-parent", NULL) == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!get_property"
#456: FILE: arch/ppc/kernel/prom.c:1528:
+		    && get_property(ic, "interrupt-parent", NULL) == NULL)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#462: FILE: arch/ppc/kernel/prom.c:1534:
+			printk("hmmm, got %d intr cells for %s:", n,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#465: FILE: arch/ppc/kernel/prom.c:1537:
+				printk(" %d", irq[j]);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#466: FILE: arch/ppc/kernel/prom.c:1538:
+			printk("\n");

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000525393.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 3 errors, 12 warnings, 33 checks, 544 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000525393.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
