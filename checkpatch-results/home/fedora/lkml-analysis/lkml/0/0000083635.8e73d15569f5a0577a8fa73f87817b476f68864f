WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#62: FILE: fs/gfs2/ops_file.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#87: FILE: fs/gfs2/ops_file.c:26:
+#include <asm/uaccess.h>

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#112: FILE: fs/gfs2/ops_file.c:51:
+	uint64_t fbe_offset;

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#145: FILE: fs/gfs2/ops_file.c:84:
+	.f_flags = O_NOATIME|O_RDONLY,
 	                    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#159: FILE: fs/gfs2/ops_file.c:98:
+        kunmap(page);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#159: FILE: fs/gfs2/ops_file.c:98:
+        kunmap(page);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#161: FILE: fs/gfs2/ops_file.c:100:
+        desc->count = count - size;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#161: FILE: fs/gfs2/ops_file.c:100:
+        desc->count = count - size;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#162: FILE: fs/gfs2/ops_file.c:101:
+        desc->written += size;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#162: FILE: fs/gfs2/ops_file.c:101:
+        desc->written += size;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#163: FILE: fs/gfs2/ops_file.c:102:
+        desc->arg.buf += size;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#163: FILE: fs/gfs2/ops_file.c:102:
+        desc->arg.buf += size;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#164: FILE: fs/gfs2/ops_file.c:103:
+        return size;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#164: FILE: fs/gfs2/ops_file.c:103:
+        return size;$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#168: FILE: fs/gfs2/ops_file.c:107:
+		       char *buf, loff_t *pos, unsigned size)

WARNING:LINE_SPACING: Missing a blank line after declarations
#172: FILE: fs/gfs2/ops_file.c:111:
+	read_descriptor_t desc;
+	desc.written = 0;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#200: FILE: fs/gfs2/ops_file.c:139:
+	if (origin == 2) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#207: FILE: fs/gfs2/ops_file.c:146:
+	} else

CHECK:LINE_SPACING: Please don't use multiple blank lines
#213: FILE: fs/gfs2/ops_file.c:152:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#231: FILE: fs/gfs2/ops_file.c:170:
+ * $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#242: FILE: fs/gfs2/ops_file.c:181:
+	struct file *filp = iocb->ki_filp;
 	             ^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#258: FILE: fs/gfs2/ops_file.c:197:
+		if (unlikely((ssize_t)(count|iv->iov_len) < 0))
 		                            ^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#298: FILE: fs/gfs2/ops_file.c:237:
+		file_accessed(filp);
 		              ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#316: FILE: fs/gfs2/ops_file.c:255:
+			do_generic_file_read(filp,ppos,&desc,file_read_actor);
 			                     ^^^^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#316: FILE: fs/gfs2/ops_file.c:255:
+			do_generic_file_read(filp,ppos,&desc,file_read_actor);
 			                         ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#316: FILE: fs/gfs2/ops_file.c:255:
+			do_generic_file_read(filp,ppos,&desc,file_read_actor);
 			                              ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#316: FILE: fs/gfs2/ops_file.c:255:
+			do_generic_file_read(filp,ppos,&desc,file_read_actor);
 			                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#316: FILE: fs/gfs2/ops_file.c:255:
+			do_generic_file_read(filp,ppos,&desc,file_read_actor);
 			                                    ^

WARNING:TABSTOP: Statements should start on a tabstop
#320: FILE: fs/gfs2/ops_file.c:259:
+				 break;

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#340: FILE: fs/gfs2/ops_file.c:279:
+static ssize_t gfs2_read(struct file *filp, char __user *buf, size_t size,
                                       ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#347: FILE: fs/gfs2/ops_file.c:286:
+	init_sync_kiocb(&kiocb, filp);
 	                        ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#354: FILE: fs/gfs2/ops_file.c:293:
+static ssize_t gfs2_file_readv(struct file *filp, const struct iovec *iov,
                                             ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#360: FILE: fs/gfs2/ops_file.c:299:
+	init_sync_kiocb(&kiocb, filp);
 	                        ^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#370: FILE: fs/gfs2/ops_file.c:309:
+        struct iovec local_iov = { .iov_base = buf, .iov_len = count };$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#370: FILE: fs/gfs2/ops_file.c:309:
+        struct iovec local_iov = { .iov_base = buf, .iov_len = count };$

ERROR:CODE_INDENT: code indent should use tabs where possible
#372: FILE: fs/gfs2/ops_file.c:311:
+        BUG_ON(iocb->ki_pos != pos);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#372: FILE: fs/gfs2/ops_file.c:311:
+        BUG_ON(iocb->ki_pos != pos);$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#372: FILE: fs/gfs2/ops_file.c:311:
+        BUG_ON(iocb->ki_pos != pos);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:CODE_INDENT: code indent should use tabs where possible
#373: FILE: fs/gfs2/ops_file.c:312:
+        return __gfs2_file_aio_read(iocb, &local_iov, 1, &iocb->ki_pos);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#373: FILE: fs/gfs2/ops_file.c:312:
+        return __gfs2_file_aio_read(iocb, &local_iov, 1, &iocb->ki_pos);$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#376: FILE: fs/gfs2/ops_file.c:315:
+
+

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#390: FILE: fs/gfs2/ops_file.c:329:
+			    uint64_t offset, struct gfs2_inum *inum,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#404: FILE: fs/gfs2/ops_file.c:343:
+		gfs2_glock_prefetch_num(sdp,
+				       inum->no_addr, &gfs2_inode_glops,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#407: FILE: fs/gfs2/ops_file.c:346:
+		gfs2_glock_prefetch_num(sdp,
+				       inum->no_addr, &gfs2_iopen_glops,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#429: FILE: fs/gfs2/ops_file.c:368:
+	uint64_t offset = file->f_pos;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#468: FILE: fs/gfs2/ops_file.c:407:
+			    uint64_t offset, struct gfs2_inum *inum,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#492: FILE: fs/gfs2/ops_file.c:431:
+		gfs2_glock_prefetch_num(sdp,
+				       inum->no_addr, &gfs2_inode_glops,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#495: FILE: fs/gfs2/ops_file.c:434:
+		gfs2_glock_prefetch_num(sdp,
+				       inum->no_addr, &gfs2_iopen_glops,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#522: FILE: fs/gfs2/ops_file.c:461:
+	uint64_t offset = file->f_pos;

CHECK:CAMELCASE: Avoid CamelCase: <iflag_Sync>
#602: FILE: fs/gfs2/ops_file.c:541:
+	[iflag_Sync] = GFS2_DIF_SYNC,

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <iflag_Immutable>
#603: FILE: fs/gfs2/ops_file.c:542:
+	[iflag_Immutable] = GFS2_DIF_IMMUTABLE,

CHECK:CAMELCASE: Avoid CamelCase: <iflag_Append>
#604: FILE: fs/gfs2/ops_file.c:543:
+	[iflag_Append] = GFS2_DIF_APPENDONLY,

CHECK:CAMELCASE: Avoid CamelCase: <iflag_NoAtime>
#605: FILE: fs/gfs2/ops_file.c:544:
+	[iflag_NoAtime] = GFS2_DIF_NOATIME,

CHECK:CAMELCASE: Avoid CamelCase: <iflag_Index>
#606: FILE: fs/gfs2/ops_file.c:545:
+	[iflag_Index] = GFS2_DIF_EXHASH,

CHECK:CAMELCASE: Avoid CamelCase: <iflag_JournalData>
#607: FILE: fs/gfs2/ops_file.c:546:
+	[iflag_JournalData] = GFS2_DIF_JDATA,

CHECK:CAMELCASE: Avoid CamelCase: <iflag_DirectIO>
#608: FILE: fs/gfs2/ops_file.c:547:
+	[iflag_DirectIO] = GFS2_DIF_DIRECTIO,

CHECK:CAMELCASE: Avoid CamelCase: <iflag_InheritDirectIO>
#609: FILE: fs/gfs2/ops_file.c:548:
+	[iflag_InheritDirectIO] = GFS2_DIF_INHERIT_DIRECTIO,

CHECK:CAMELCASE: Avoid CamelCase: <iflag_InheritJdata>
#610: FILE: fs/gfs2/ops_file.c:549:
+	[iflag_InheritJdata] = GFS2_DIF_INHERIT_JDATA,

CHECK:CAMELCASE: Avoid CamelCase: <gfs2fl_Sync>
#614: FILE: fs/gfs2/ops_file.c:553:
+	[gfs2fl_Sync] = IFLAG_SYNC,

CHECK:CAMELCASE: Avoid CamelCase: <gfs2fl_Immutable>
#615: FILE: fs/gfs2/ops_file.c:554:
+	[gfs2fl_Immutable] = IFLAG_IMMUTABLE,

CHECK:CAMELCASE: Avoid CamelCase: <gfs2fl_AppendOnly>
#616: FILE: fs/gfs2/ops_file.c:555:
+	[gfs2fl_AppendOnly] = IFLAG_APPEND,

CHECK:CAMELCASE: Avoid CamelCase: <gfs2fl_NoAtime>
#617: FILE: fs/gfs2/ops_file.c:556:
+	[gfs2fl_NoAtime] = IFLAG_NOATIME,

CHECK:CAMELCASE: Avoid CamelCase: <gfs2fl_ExHash>
#618: FILE: fs/gfs2/ops_file.c:557:
+	[gfs2fl_ExHash] = IFLAG_INDEX,

CHECK:CAMELCASE: Avoid CamelCase: <gfs2fl_Jdata>
#619: FILE: fs/gfs2/ops_file.c:558:
+	[gfs2fl_Jdata] = IFLAG_JOURNAL_DATA,

CHECK:CAMELCASE: Avoid CamelCase: <gfs2fl_Directio>
#620: FILE: fs/gfs2/ops_file.c:559:
+	[gfs2fl_Directio] = IFLAG_DIRECTIO,

CHECK:CAMELCASE: Avoid CamelCase: <gfs2fl_InheritDirectio>
#621: FILE: fs/gfs2/ops_file.c:560:
+	[gfs2fl_InheritDirectio] = IFLAG_INHERITDIRECTIO,

CHECK:CAMELCASE: Avoid CamelCase: <gfs2fl_InheritJdata>
#622: FILE: fs/gfs2/ops_file.c:561:
+	[gfs2fl_InheritJdata] = IFLAG_INHERITJDATA,

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#625: FILE: fs/gfs2/ops_file.c:564:
+static int gfs2_get_flags(struct file *filp, u32 __user *ptr)
                                        ^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#637: FILE: fs/gfs2/ops_file.c:576:
+^I$

CHECK:SPACING: spaces preferred around that '|' (ctx:VxE)
#648: FILE: fs/gfs2/ops_file.c:587:
+#define GFS2_FLAGS_USER_SET (GFS2_DIF_JDATA|			\
                                            ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxE)
#649: FILE: fs/gfs2/ops_file.c:588:
+			     GFS2_DIF_DIRECTIO|			\
 			                      ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxE)
#650: FILE: fs/gfs2/ops_file.c:589:
+			     GFS2_DIF_IMMUTABLE|		\
 			                       ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxE)
#651: FILE: fs/gfs2/ops_file.c:590:
+			     GFS2_DIF_APPENDONLY|		\
 			                        ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxE)
#652: FILE: fs/gfs2/ops_file.c:591:
+			     GFS2_DIF_NOATIME|			\
 			                     ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxE)
#653: FILE: fs/gfs2/ops_file.c:592:
+			     GFS2_DIF_SYNC|			\
 			                  ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxE)
#654: FILE: fs/gfs2/ops_file.c:593:
+			     GFS2_DIF_SYSTEM|			\
 			                    ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxE)
#655: FILE: fs/gfs2/ops_file.c:594:
+			     GFS2_DIF_INHERIT_DIRECTIO|		\
 			                              ^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#665: FILE: fs/gfs2/ops_file.c:604:
+static int do_gfs2_set_flags(struct file *filp, u32 reqflags, u32 mask)
                                           ^^^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#689: FILE: fs/gfs2/ops_file.c:628:
+	if (S_ISDIR(inode->i_mode)) {
[...]
+	} else if (S_ISREG(inode->i_mode)) {
[...]
+	} else
[...]

CHECK:SPACING: space preferred before that '|' (ctx:VxE)
#693: FILE: fs/gfs2/ops_file.c:632:
+		if ((new_flags ^ flags) & (GFS2_DIF_INHERIT_DIRECTIO|
 		                                                    ^

CHECK:BRACES: Unbalanced braces around else statement
#696: FILE: fs/gfs2/ops_file.c:635:
+	} else

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#725: FILE: fs/gfs2/ops_file.c:664:
+static int gfs2_set_flags(struct file *filp, u32 __user *ptr)
                                        ^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#728: FILE: fs/gfs2/ops_file.c:667:
+	u32 iflags, gfsflags;
+	if (get_user(iflags, ptr))

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#731: FILE: fs/gfs2/ops_file.c:670:
+	return do_gfs2_set_flags(filp, gfsflags, ~0);
 	                         ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#734: FILE: fs/gfs2/ops_file.c:673:
+static long gfs2_ioctl(struct file *filp, unsigned int cmd, unsigned long arg)
                                     ^^^^

ERROR:SPACING: space required before the open parenthesis '('
#736: FILE: fs/gfs2/ops_file.c:675:
+	switch(cmd) {

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#738: FILE: fs/gfs2/ops_file.c:677:
+		return gfs2_get_flags(filp, (u32 __user *)arg);
 		                      ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#740: FILE: fs/gfs2/ops_file.c:679:
+		return gfs2_set_flags(filp, (u32 __user *)arg);
 		                      ^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#745: FILE: fs/gfs2/ops_file.c:684:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#768: FILE: fs/gfs2/ops_file.c:707:
+	/* This is VM_MAYWRITE instead of VM_WRITE because a call
+	   to mprotect() can turn on VM_WRITE later. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#768: FILE: fs/gfs2/ops_file.c:707:
+	   to mprotect() can turn on VM_WRITE later. */

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*fp)...) over kzalloc(sizeof(struct gfs2_file)...)
#796: FILE: fs/gfs2/ops_file.c:735:
+	fp = kzalloc(sizeof(struct gfs2_file), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#892: FILE: fs/gfs2/ops_file.c:831:
+	struct lm_lockname name =
+		{ .ln_number = ip->i_num.no_addr,

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IXGRP' are not preferred. Consider using octal permissions '0010'.
#897: FILE: fs/gfs2/ops_file.c:836:
+	if ((ip->i_di.di_mode & (S_ISGID | S_IXGRP)) == S_ISGID)

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:LINE_SPACING: Missing a blank line after declarations
#904: FILE: fs/gfs2/ops_file.c:843:
+			int ret;
+			ret = posix_test_lock(file, fl, &tmp);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#961: FILE: fs/gfs2/ops_file.c:900:
+^I^I^I^I     &(struct file_lock){.fl_type = F_UNLCK});^I^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#965: FILE: fs/gfs2/ops_file.c:904:
+		error = gfs2_glock_get(ip->i_sbd,
+				      ip->i_num.no_addr, &gfs2_flock_glops,

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IXGRP' are not preferred. Consider using octal permissions '0010'.
#1018: FILE: fs/gfs2/ops_file.c:957:
+	if ((ip->i_di.di_mode & (S_ISGID | S_IXGRP)) == S_ISGID)

CHECK:BRACES: braces {} should be used on all arms of this statement
#1024: FILE: fs/gfs2/ops_file.c:963:
+	if (fl->fl_type == F_UNLCK) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1027: FILE: fs/gfs2/ops_file.c:966:
+	} else

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1031: FILE: fs/gfs2/ops_file.c:970:
+struct file_operations gfs2_file_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1051: FILE: fs/gfs2/ops_file.c:990:
+struct file_operations gfs2_dir_fops = {

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1064: FILE: include/linux/iflags.h:1:
+#ifndef _LINUX_IFLAGS_H

CHECK:CAMELCASE: Avoid CamelCase: <iflag_SecureRm>
#1091: FILE: include/linux/iflags.h:28:
+	iflag_SecureRm		= 0,	/* Secure deletion */

CHECK:CAMELCASE: Avoid CamelCase: <iflag_Unrm>
#1092: FILE: include/linux/iflags.h:29:
+	iflag_Unrm		= 1,	/* Undelete */

CHECK:CAMELCASE: Avoid CamelCase: <iflag_Compress>
#1093: FILE: include/linux/iflags.h:30:
+	iflag_Compress		= 2,	/* Compress file */

CHECK:CAMELCASE: Avoid CamelCase: <iflag_NoDump>
#1097: FILE: include/linux/iflags.h:34:
+	iflag_NoDump		= 6,	/* Don't dump file */

CHECK:CAMELCASE: Avoid CamelCase: <iflag_Dirty>
#1100: FILE: include/linux/iflags.h:37:
+	iflag_Dirty		= 8,

CHECK:CAMELCASE: Avoid CamelCase: <iflag_ComprBlk>
#1101: FILE: include/linux/iflags.h:38:
+	iflag_ComprBlk		= 9,	/* One or more compressed clusters */

CHECK:CAMELCASE: Avoid CamelCase: <iflag_NoComp>
#1102: FILE: include/linux/iflags.h:39:
+	iflag_NoComp		= 10,	/* Don't compress */

CHECK:CAMELCASE: Avoid CamelCase: <iflag_Ecompr>
#1103: FILE: include/linux/iflags.h:40:
+	iflag_Ecompr		= 11,	/* Compression error */

CHECK:CAMELCASE: Avoid CamelCase: <iflag_Btree>
#1105: FILE: include/linux/iflags.h:42:
+	iflag_Btree		= 12,	/* btree format dir */

CHECK:CAMELCASE: Avoid CamelCase: <iflag_Imagic>
#1107: FILE: include/linux/iflags.h:44:
+	iflag_Imagic		= 13,	/* AFS directory */

CHECK:CAMELCASE: Avoid CamelCase: <iflag_NoTail>
#1109: FILE: include/linux/iflags.h:46:
+	iflag_NoTail		= 15,	/* file tail should not be merged */

CHECK:CAMELCASE: Avoid CamelCase: <iflag_DirSync>
#1110: FILE: include/linux/iflags.h:47:
+	iflag_DirSync		= 16,	/* dirsync behaviour */

CHECK:CAMELCASE: Avoid CamelCase: <iflag_TopDir>
#1111: FILE: include/linux/iflags.h:48:
+	iflag_TopDir		= 17,	/* Top of directory hierarchies */

CHECK:CAMELCASE: Avoid CamelCase: <iflag_Reserved>
#1115: FILE: include/linux/iflags.h:52:
+	iflag_Reserved		= 31	/* reserved for ext2/3 lib */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1118: FILE: include/linux/iflags.h:55:
+#define __IFL(x) (1<<(iflag_##x))
                    ^

CHECK:CAMELCASE: Avoid CamelCase: <SecureRm>
#1119: FILE: include/linux/iflags.h:56:
+#define IFLAG_SECRM		__IFL(SecureRm)		/* 0x00000001 */

CHECK:CAMELCASE: Avoid CamelCase: <Unrm>
#1120: FILE: include/linux/iflags.h:57:
+#define IFLAG_UNRM		__IFL(Unrm)		/* 0x00000002 */

CHECK:CAMELCASE: Avoid CamelCase: <Compr>
#1121: FILE: include/linux/iflags.h:58:
+#define IFLAG_COMPR		__IFL(Compr)		/* 0x00000004 */

CHECK:CAMELCASE: Avoid CamelCase: <Sync>
#1122: FILE: include/linux/iflags.h:59:
+#define IFLAG_SYNC		__IFL(Sync)		/* 0x00000008 */

CHECK:CAMELCASE: Avoid CamelCase: <Immutable>
#1123: FILE: include/linux/iflags.h:60:
+#define IFLAG_IMMUTABLE		__IFL(Immutable)	/* 0x00000010 */

CHECK:CAMELCASE: Avoid CamelCase: <Append>
#1124: FILE: include/linux/iflags.h:61:
+#define IFLAG_APPEND		__IFL(Append)		/* 0x00000020 */

CHECK:CAMELCASE: Avoid CamelCase: <NoDump>
#1125: FILE: include/linux/iflags.h:62:
+#define IFLAG_NODUMP		__IFL(NoDump)		/* 0x00000040 */

CHECK:CAMELCASE: Avoid CamelCase: <NoAtime>
#1126: FILE: include/linux/iflags.h:63:
+#define IFLAG_NOATIME		__IFL(NoAtime)		/* 0x00000080 */

CHECK:CAMELCASE: Avoid CamelCase: <Dirty>
#1127: FILE: include/linux/iflags.h:64:
+#define IFLAG_DIRTY		__IFL(Dirty)		/* 0x00000100 */

CHECK:CAMELCASE: Avoid CamelCase: <ComprBlk>
#1128: FILE: include/linux/iflags.h:65:
+#define IFLAG_COMPRBLK		__IFL(ComprBlk)		/* 0x00000200 */

CHECK:CAMELCASE: Avoid CamelCase: <NoComp>
#1129: FILE: include/linux/iflags.h:66:
+#define IFLAG_NOCOMP		__IFL(NoComp)		/* 0x00000400 */

CHECK:CAMELCASE: Avoid CamelCase: <Ecompr>
#1130: FILE: include/linux/iflags.h:67:
+#define IFLAG_ECOMPR		__IFL(Ecompr)		/* 0x00000800 */

CHECK:CAMELCASE: Avoid CamelCase: <Btree>
#1131: FILE: include/linux/iflags.h:68:
+#define IFLAG_BTREE		__IFL(Btree)		/* 0x00001000 */

CHECK:CAMELCASE: Avoid CamelCase: <Index>
#1132: FILE: include/linux/iflags.h:69:
+#define IFLAG_INDEX		__IFL(Index)		/* 0x00001000 */

CHECK:CAMELCASE: Avoid CamelCase: <Imagic>
#1133: FILE: include/linux/iflags.h:70:
+#define IFLAG_IMAGIC		__IFL(Imagic)		/* 0x00002000 */

CHECK:CAMELCASE: Avoid CamelCase: <JournalData>
#1134: FILE: include/linux/iflags.h:71:
+#define IFLAG_JOURNAL_DATA	__IFL(JournalData)	/* 0x00004000 */

CHECK:CAMELCASE: Avoid CamelCase: <NoTail>
#1135: FILE: include/linux/iflags.h:72:
+#define IFLAG_NOTAIL		__IFL(NoTail)		/* 0x00008000 */

CHECK:CAMELCASE: Avoid CamelCase: <DirSync>
#1136: FILE: include/linux/iflags.h:73:
+#define IFLAG_DIRSYNC		__IFL(DirSync)		/* 0x00010000 */

CHECK:CAMELCASE: Avoid CamelCase: <TopDir>
#1137: FILE: include/linux/iflags.h:74:
+#define IFLAG_TOPDIR		__IFL(TopDir)		/* 0x00020000 */

CHECK:CAMELCASE: Avoid CamelCase: <DirectIO>
#1138: FILE: include/linux/iflags.h:75:
+#define IFLAG_DIRECTIO		__IFL(DirectIO)		/* 0x00040000 */

CHECK:CAMELCASE: Avoid CamelCase: <InheritDirectIO>
#1139: FILE: include/linux/iflags.h:76:
+#define IFLAG_INHERITDIRECTIO	__IFL(InheritDirectIO)	/* 0x00080000 */

CHECK:CAMELCASE: Avoid CamelCase: <InheritJdata>
#1140: FILE: include/linux/iflags.h:77:
+#define IFLAG_INHERITJDATA	__IFL(InheritJdata)	/* 0x00100000 */

CHECK:CAMELCASE: Avoid CamelCase: <Reserved>
#1141: FILE: include/linux/iflags.h:78:
+#define IFLAG_RESERVED		__IFL(Reserved)		/* 0x80000000 */

WARNING:LINE_SPACING: Missing a blank line after declarations
#1157: FILE: include/linux/iflags.h:94:
+	u32 res = 0;
+	while(val) {

ERROR:SPACING: space required before the open parenthesis '('
#1157: FILE: include/linux/iflags.h:94:
+	while(val) {

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1171: FILE: fs/gfs2/ops_file.h:1:
+/*

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1183: FILE: fs/gfs2/ops_file.h:13:
+extern int gfs2_internal_read(struct gfs2_inode *ip,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1185: FILE: fs/gfs2/ops_file.h:15:
+			      char *buf, loff_t *pos, unsigned size);

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1187: FILE: fs/gfs2/ops_file.h:17:
+extern struct file_operations gfs2_file_fops;

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1188: FILE: fs/gfs2/ops_file.h:18:
+extern struct file_operations gfs2_dir_fops;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1194: FILE: fs/gfs2/ops_fstype.c:1:
+/*

CHECK:ALLOC_SIZEOF_STRUCT: Prefer vmalloc(sizeof(*sdp)...) over vmalloc(sizeof(struct gfs2_sbd)...)
#1241: FILE: fs/gfs2/ops_fstype.c:48:
+	sdp = vmalloc(sizeof(struct gfs2_sbd));

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1305: FILE: fs/gfs2/ops_fstype.c:112:
+static void init_vfs(struct super_block *sb, unsigned noatime)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1334: FILE: fs/gfs2/ops_fstype.c:141:
+		struct buffer_head *bh;
+		bh = sb_getblk(sdp->sd_vfs,

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*sb)...) over kmalloc(sizeof(struct gfs2_sb)...)
#1348: FILE: fs/gfs2/ops_fstype.c:155:
+		sb = kmalloc(sizeof(struct gfs2_sb), GFP_KERNEL);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1353: FILE: fs/gfs2/ops_fstype.c:160:
+^I^Igfs2_sb_in(sb, bh->b_data); $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1467: FILE: fs/gfs2/ops_fstype.c:274:
+        int error;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1467: FILE: fs/gfs2/ops_fstype.c:274:
+        int error;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1474: FILE: fs/gfs2/ops_fstype.c:281:
+        if (!error) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1474: FILE: fs/gfs2/ops_fstype.c:281:
+        if (!error) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1475: FILE: fs/gfs2/ops_fstype.c:282:
+               ^Ierror = gfs2_inode_get(gl, inum, CREATE, &ip);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1475: FILE: fs/gfs2/ops_fstype.c:282:
+               ^Ierror = gfs2_inode_get(gl, inum, CREATE, &ip);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1475: FILE: fs/gfs2/ops_fstype.c:282:
+               ^Ierror = gfs2_inode_get(gl, inum, CREATE, &ip);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1483: FILE: fs/gfs2/ops_fstype.c:290:
+                gfs2_glock_put(gl);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1483: FILE: fs/gfs2/ops_fstype.c:290:
+                gfs2_glock_put(gl);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1484: FILE: fs/gfs2/ops_fstype.c:291:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1484: FILE: fs/gfs2/ops_fstype.c:291:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1485: FILE: fs/gfs2/ops_fstype.c:292:
+        return ERR_PTR(error);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1485: FILE: fs/gfs2/ops_fstype.c:292:
+        return ERR_PTR(error);$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1496: FILE: fs/gfs2/ops_fstype.c:303:
+	if (undo) {
+		return 0;
+	}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1499: FILE: fs/gfs2/ops_fstype.c:306:
+^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1501: FILE: fs/gfs2/ops_fstype.c:308:
+	error = gfs2_glock_nq_num(sdp,
+				 GFS2_SB_LOCK, &gfs2_meta_glops,

WARNING:SPLIT_STRING: quoted string split across lines
#1518: FILE: fs/gfs2/ops_fstype.c:325:
+		fs_err(sdp, "FS block size (%u) is too small for device "
+		       "block size (%u)\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#1525: FILE: fs/gfs2/ops_fstype.c:332:
+		fs_err(sdp, "FS block size (%u) is too big for machine "
+		       "page size (%u)\n",

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1551: FILE: fs/gfs2/ops_fstype.c:358:
+		iput(inode);
 		^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1590: FILE: fs/gfs2/ops_fstype.c:397:
+^I^Igoto fail_jindex;^I^I$

WARNING:LINE_SPACING: Missing a blank line after declarations
#1639: FILE: fs/gfs2/ops_fstype.c:446:
+		unsigned int x;
+		for (x = 0; x < sdp->sd_journals; x++) {

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1693: FILE: fs/gfs2/ops_fstype.c:500:
+	iput(sdp->sd_jindex);
 	^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1698: FILE: fs/gfs2/ops_fstype.c:505:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1728: FILE: fs/gfs2/ops_fstype.c:535:
+
+

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1758: FILE: fs/gfs2/ops_fstype.c:565:
+	iput(sdp->sd_quota_inode);
 	^^^^

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1762: FILE: fs/gfs2/ops_fstype.c:569:
+	iput(sdp->sd_rindex);
 	^^^^

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1765: FILE: fs/gfs2/ops_fstype.c:572:
+	iput(sdp->sd_statfs_inode);
 	^^^^

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1768: FILE: fs/gfs2/ops_fstype.c:575:
+	iput(sdp->sd_inum_inode);
 	^^^^

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1772: FILE: fs/gfs2/ops_fstype.c:579:
+	iput(sdp->sd_master_dir);
 	^^^^

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1829: FILE: fs/gfs2/ops_fstype.c:636:
+	iput(pn);
 	^^^^

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1883: FILE: fs/gfs2/ops_fstype.c:690:
+	iput(sdp->sd_qc_inode);
 	^^^^

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1886: FILE: fs/gfs2/ops_fstype.c:693:
+	iput(sdp->sd_ut_inode);
 	^^^^

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1889: FILE: fs/gfs2/ops_fstype.c:696:
+	iput(sdp->sd_sc_inode);
 	^^^^

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1892: FILE: fs/gfs2/ops_fstype.c:699:
+	iput(sdp->sd_ir_inode);
 	^^^^

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1896: FILE: fs/gfs2/ops_fstype.c:703:
+		iput(pn);
 		^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1948: FILE: fs/gfs2/ops_fstype.c:755:
+^I$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1969: FILE: fs/gfs2/ops_fstype.c:776:
+		printk(KERN_WARNING "GFS2: can't alloc struct gfs2_sbd\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1975: FILE: fs/gfs2/ops_fstype.c:782:
+		printk(KERN_WARNING "GFS2: can't parse mount arguments\n");

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1982: FILE: fs/gfs2/ops_fstype.c:789:
+	/* Set up the buffer cache and fill in some fake block size values
+	   to allow us to read-in the on-disk superblock. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1982: FILE: fs/gfs2/ops_fstype.c:789:
+	   to allow us to read-in the on-disk superblock. */

ERROR:CODE_INDENT: code indent should use tabs where possible
#1986: FILE: fs/gfs2/ops_fstype.c:793:
+                               GFS2_BASIC_BLOCK_SHIFT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1986: FILE: fs/gfs2/ops_fstype.c:793:
+                               GFS2_BASIC_BLOCK_SHIFT;$

WARNING:YIELD: Using yield() is generally wrong. See yield() kernel-doc (sched/core.c)
#2058: FILE: fs/gfs2/ops_fstype.c:865:
+		yield();

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2101: FILE: fs/gfs2/ops_fstype.h:1:
+/*

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2120: FILE: fs/gfs2/ops_inode.c:1:
+/*

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#2142: FILE: fs/gfs2/ops_inode.c:23:
+#include <asm/uaccess.h>

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#2174: FILE: fs/gfs2/ops_inode.c:55:
+		       int mode, struct nameidata *nd)
 		                                   ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#2200: FILE: fs/gfs2/ops_inode.c:81:
+		inode = gfs2_lookupi(dir, &dentry->d_name, 0, nd);
 		                                              ^^

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#2206: FILE: fs/gfs2/ops_inode.c:87:
+				break;
+			} else {

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#2224: FILE: fs/gfs2/ops_inode.c:105:
+ * @nd: passed from Linux VFS, ignored by us
     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#2232: FILE: fs/gfs2/ops_inode.c:113:
+				  struct nameidata *nd)
 				                    ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#2238: FILE: fs/gfs2/ops_inode.c:119:
+	inode = gfs2_lookupi(dir, &dentry->d_name, 0, nd);
 	                                              ^^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2312: FILE: fs/gfs2/ops_inode.c:193:
+	alloc_required = error = gfs2_diradd_alloc_required(dir, &dentry->d_name);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:SPACING: spaces preferred around that '+' (ctx:WxV)
#2353: FILE: fs/gfs2/ops_inode.c:234:
+	error = gfs2_change_nlink(ip, +1);
 	                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2425: FILE: fs/gfs2/ops_inode.c:306:
+	error = gfs2_unlinki(dip, &dentry->d_name, ip,ul);
 	                                             ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXUGO' are not preferred. Consider using octal permissions '0777'.
#2468: FILE: fs/gfs2/ops_inode.c:349:
+	inode = gfs2_createi(ghs, &dentry->d_name, S_IFLNK | S_IRWXUGO);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2539: FILE: fs/gfs2/ops_inode.c:420:
+		struct gfs2_dirent *dent = (struct gfs2_dirent *)(di+1);
 		                                                    ^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#2550: FILE: fs/gfs2/ops_inode.c:431:
+		dent = (struct gfs2_dirent *)((char*)dent + GFS2_DIRENT_SIZE(1));

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#2551: FILE: fs/gfs2/ops_inode.c:432:
+		gfs2_qstr2dirent(&str, dibh->b_size - GFS2_DIRENT_SIZE(1) - sizeof(struct gfs2_dinode), dent);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: No space is necessary after a cast
#2553: FILE: fs/gfs2/ops_inode.c:434:
+		gfs2_inum_out(&dip->i_num, (char *) &dent->de_inum);

CHECK:SPACING: spaces preferred around that '+' (ctx:WxV)
#2561: FILE: fs/gfs2/ops_inode.c:442:
+	error = gfs2_change_nlink(dip, +1);
 	                               ^

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2661: FILE: fs/gfs2/ops_inode.c:542:
+	uint32_t major = 0, minor = 0;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2674: FILE: fs/gfs2/ops_inode.c:555:
+^I^Ireturn -EOPNOTSUPP;^I^I$

WARNING:TYPO_SPELLING: 'dirctory' may be misspelled - perhaps 'directory'?
#2747: FILE: fs/gfs2/ops_inode.c:628:
+	/* Make sure we aren't trying to move a dirctory into it's subdir */
 	                                        ^^^^^^^^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2841: FILE: fs/gfs2/ops_inode.c:722:
+	alloc_required = error = gfs2_diradd_alloc_required(ndir, &ndentry->d_name);

WARNING:LINE_SPACING: Missing a blank line after declarations
#2892: FILE: fs/gfs2/ops_inode.c:773:
+		struct qstr name;
+		gfs2_str2qstr(&name, "..");

CHECK:SPACING: spaces preferred around that '+' (ctx:WxV)
#2894: FILE: fs/gfs2/ops_inode.c:775:
+		error = gfs2_change_nlink(ndip, +1);
 		                                ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#2906: FILE: fs/gfs2/ops_inode.c:787:
+		struct buffer_head *dibh;
+		error = gfs2_meta_inode_buffer(ip, &dibh);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#2994: FILE: fs/gfs2/ops_inode.c:875:
+ * @nd: Data that we pass to vfs_follow_link()
     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#3002: FILE: fs/gfs2/ops_inode.c:883:
+static void *gfs2_follow_link(struct dentry *dentry, struct nameidata *nd)
                                                                        ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#3011: FILE: fs/gfs2/ops_inode.c:892:
+		error = vfs_follow_link(nd, buf);
 		                        ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#3023: FILE: fs/gfs2/ops_inode.c:904:
+ * @nd: passed from Linux VFS, ignored by us
     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#3028: FILE: fs/gfs2/ops_inode.c:909:
+static int gfs2_permission(struct inode *inode, int mask, struct nameidata *nd)
                                                                             ^^

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3071: FILE: fs/gfs2/ops_inode.c:952:
+	uint32_t ouid, ogid, nuid, ngid;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#3080: FILE: fs/gfs2/ops_inode.c:961:
+		ouid = nuid = NO_QUOTA_CHANGE;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#3082: FILE: fs/gfs2/ops_inode.c:963:
+		ogid = ngid = NO_QUOTA_CHANGE;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3114: FILE: fs/gfs2/ops_inode.c:995:
+		gfs2_quota_change(ip, -ip->i_di.di_blocks,
+				 ouid, ogid);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3116: FILE: fs/gfs2/ops_inode.c:997:
+		gfs2_quota_change(ip, ip->i_di.di_blocks,
+				 nuid, ngid);

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#3265: FILE: fs/gfs2/ops_inode.c:1146:
+struct inode_operations gfs2_file_iops = {

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#3275: FILE: fs/gfs2/ops_inode.c:1156:
+struct inode_operations gfs2_dev_iops = {

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#3285: FILE: fs/gfs2/ops_inode.c:1166:
+struct inode_operations gfs2_dir_iops = {

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#3304: FILE: fs/gfs2/ops_inode.c:1185:
+struct inode_operations gfs2_symlink_iops = {

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3319: FILE: fs/gfs2/ops_inode.h:1:
+/*

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#3331: FILE: fs/gfs2/ops_inode.h:13:
+extern struct inode_operations gfs2_file_iops;

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#3332: FILE: fs/gfs2/ops_inode.h:14:
+extern struct inode_operations gfs2_dir_iops;

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#3333: FILE: fs/gfs2/ops_inode.h:15:
+extern struct inode_operations gfs2_symlink_iops;

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#3334: FILE: fs/gfs2/ops_inode.h:16:
+extern struct inode_operations gfs2_dev_iops;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000083635.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 32 errors, 103 warnings, 106 checks, 3257 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000083635.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
