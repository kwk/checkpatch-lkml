ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#74: FILE: drivers/base/core.c:341:
+void put_device_process_context(struct device * dev, struct kref_work *work)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#76: FILE: drivers/base/core.c:343:
 	if (dev)
+	  kobject_put_process_context(&dev->kobj, work);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#100: FILE: include/linux/device.h:399:
+extern void put_device_process_context(struct device * dev,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#100: FILE: include/linux/device.h:399:
+extern void put_device_process_context(struct device * dev,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#106: FILE: include/linux/device.h:405:
+^I^I^I^I^I^I  $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#119: FILE: include/linux/kobject.h:79:
+extern void kobject_put_process_context(struct kobject *, struct kref_work *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kobject *' should also have an identifier name
#119: FILE: include/linux/kobject.h:79:
+extern void kobject_put_process_context(struct kobject *, struct kref_work *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kref_work *' should also have an identifier name
#119: FILE: include/linux/kobject.h:79:
+extern void kobject_put_process_context(struct kobject *, struct kref_work *);

WARNING:SPACING: Unnecessary space before function pointer arguments
#153: FILE: include/linux/kref.h:37:
+			     void (*release) (struct kref *kref),

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: Unnecessary space before function pointer arguments
#156: FILE: include/linux/kref.h:40:
+			   void (*release) (struct kref *kref))

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#172: FILE: lib/kobject.c:375:
+void kobject_put_process_context(struct kobject * kobj, struct kref_work *work)

CHECK:BRACES: braces {} should be used on all arms of this statement
#241: FILE: lib/kref.c:69:
+		if (!work || !in_interrupt())
[...]
+		else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#243: FILE: lib/kref.c:71:
+		else {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#248: FILE: lib/kref.c:76:
+^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#249: FILE: lib/kref.c:77:
+^I^I^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#249: FILE: lib/kref.c:77:
+			
+			

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000103696.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 6 errors, 5 warnings, 5 checks, 160 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000103696.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
