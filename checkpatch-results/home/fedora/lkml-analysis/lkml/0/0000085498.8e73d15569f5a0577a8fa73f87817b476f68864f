WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#34: 
Since those variable will not be accessed in hot path. the impact to performance should be limited.

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#111: FILE: arch/ia64/mm/hugetlbpage.c:25:
+unsigned int init_hpage_shift=HPAGE_SHIFT_DEFAULT;
                              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#213: FILE: arch/ia64/mm/hugetlbpage.c:179:
+  mm->hugepage_shift = init_hpage_shift;$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#414: FILE: arch/sparc64/mm/hugetlbpage.c:122:
+	addr = (mm->mmap_base-len) & HPAGE_MASK(mm);
 	                     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#423: FILE: arch/sparc64/mm/hugetlbpage.c:141:
+		addr = (vma->vm_start-len) & HPAGE_MASK(mm);
 		                     ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#503: FILE: fs/hugetlbfs/inode.c:100:
+		if (hugetlb_extend_reservation(info,
+					len >> HPAGE_SHIFT(vma->vm_mm),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#548: FILE: fs/hugetlbfs/inode.c:203:
+static void truncate_hugepages(struct inode *inode, loff_t lstart,
+	 struct super_block *sb)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#600: FILE: fs/hugetlbfs/inode.c:329:
+	BUG_ON(offset & (inode->i_sb->s_blocksize - 1));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#713: FILE: include/asm-i386/page.h:72:
+#define HUGETLB_INIT_PAGE_SIZE  (1UL<<HPAGE_SHIFT(0))
                                     ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#713: FILE: include/asm-i386/page.h:72:
+#define HUGETLB_INIT_PAGE_SIZE  (1UL<<HPAGE_SHIFT(0))

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'mm' may be better as '(mm)' to avoid precedence issues
#727: FILE: include/asm-ia64/page.h:53:
+# define HPAGE_SHIFT(mm)	(mm->hugepage_shift)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'mm' may be better as '(mm)' to avoid precedence issues
#733: FILE: include/asm-ia64/page.h:57:
+# define HUGETLB_PAGE_ORDER(mm) ((mm->hugepage_shift) - PAGE_SHIFT)

CHECK:SPACING: No space is necessary after a cast
#744: FILE: include/asm-ia64/page.h:158:
+# define htlbpage_to_page(mm,x)	(((unsigned long) REGION_NUMBER(x) << 61)			\

ERROR:SPACING: space required after that ',' (ctx:VxV)
#744: FILE: include/asm-ia64/page.h:158:
+# define htlbpage_to_page(mm,x)	(((unsigned long) REGION_NUMBER(x) << 61)			\
                             ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'mm' may be better as '(mm)' to avoid precedence issues
#744: FILE: include/asm-ia64/page.h:158:
+# define htlbpage_to_page(mm,x)	(((unsigned long) REGION_NUMBER(x) << 61)			\
+				 | (REGION_OFFSET(x) >> (mm->hugepage_shift-PAGE_SHIFT)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#744: FILE: include/asm-ia64/page.h:158:
+# define htlbpage_to_page(mm,x)	(((unsigned long) REGION_NUMBER(x) << 61)			\
+				 | (REGION_OFFSET(x) >> (mm->hugepage_shift-PAGE_SHIFT)))

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#745: FILE: include/asm-ia64/page.h:159:
+				 | (REGION_OFFSET(x) >> (mm->hugepage_shift-PAGE_SHIFT)))
 				                                           ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#748: FILE: include/asm-ia64/page.h:162:
+# define HUGETLB_INIT_PAGE_SIZE  (__IA64_UL_CONST(1)<<init_hpage_shift)
                                                     ^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#771: FILE: include/asm-parisc/page.h:162:
+#define HPAGE_SIZE(mm)      ^I((1UL) << HPAGE_SHIFT(mm))$

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#777: FILE: include/asm-parisc/page.h:168:
+#define HUGETLB_INIT_PAGE_SIZE  (1UL<<HPAGE_SHIFT(0))
                                     ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#777: FILE: include/asm-parisc/page.h:168:
+#define HUGETLB_INIT_PAGE_SIZE  (1UL<<HPAGE_SHIFT(0))

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#790: FILE: include/asm-powerpc/page_64.h:81:
+#define HPAGE_SHIFT(mm) hpage_shift;

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#805: FILE: include/asm-powerpc/page_64.h:91:
+#define HUGETLB_INIT_PAGE_SIZE  (1UL<<HPAGE_SHIFT(0))
                                     ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#805: FILE: include/asm-powerpc/page_64.h:91:
+#define HUGETLB_INIT_PAGE_SIZE  (1UL<<HPAGE_SHIFT(0))

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#829: FILE: include/asm-sh/page.h:32:
+#define HPAGE_MASK(mm)		(~(HPAGE_SIZE(mm)-1))
                       		                 ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#834: FILE: include/asm-sh/page.h:37:
+#define HUGETLB_INIT_PAGE_SIZE  (1UL<<HPAGE_SHIFT(0))
                                     ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#834: FILE: include/asm-sh/page.h:37:
+#define HUGETLB_INIT_PAGE_SIZE  (1UL<<HPAGE_SHIFT(0))

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#861: FILE: include/asm-sh64/page.h:42:
+#define HPAGE_MASK(mm)		(~(HPAGE_SIZE(mm)-1))
                       		                 ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#866: FILE: include/asm-sh64/page.h:47:
+#define HUGETLB_INIT_PAGE_SIZE  (1UL<<HPAGE_SHIFT(0))
                                     ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#866: FILE: include/asm-sh64/page.h:47:
+#define HUGETLB_INIT_PAGE_SIZE  (1UL<<HPAGE_SHIFT(0))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#892: FILE: include/asm-sparc64/page.h:42:
+#define HPAGE_SIZE(mm)		(_AC(1,UL) << HPAGE_SHIFT(mm))
                       		      ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#898: FILE: include/asm-sparc64/page.h:48:
+#define HUGETLB_INIT_PAGE_SIZE  (1UL<<HPAGE_SHIFT(0))
                                     ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#898: FILE: include/asm-sparc64/page.h:48:
+#define HUGETLB_INIT_PAGE_SIZE  (1UL<<HPAGE_SHIFT(0))

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#922: FILE: include/asm-x86_64/page.h:46:
+#define HUGETLB_INIT_PAGE_SIZE  (1UL<<HPAGE_SHIFT(0))
                                     ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#922: FILE: include/asm-x86_64/page.h:46:
+#define HUGETLB_INIT_PAGE_SIZE  (1UL<<HPAGE_SHIFT(0))

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#967: FILE: include/linux/hugetlb.h:160:
+struct file *hugetlb_zero_setup(size_t, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#967: FILE: include/linux/hugetlb.h:160:
+struct file *hugetlb_zero_setup(size_t, int);

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#982: FILE: include/linux/hugetlb.h:181:
+#define hugetlb_zero_setup(size, int)	ERR_PTR(-ENOSYS)

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1007: FILE: ipc/shm.c:221:
+		file = hugetlb_zero_setup(size,
+			HUGETLB_PAGE_ORDER(current->mm));

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1017: FILE: ipc/shm.c:416:
+			*rss += (sb->s_blocksize/PAGE_SIZE)*mapping->nrpages;
 			                        ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1017: FILE: ipc/shm.c:416:
+			*rss += (sb->s_blocksize/PAGE_SIZE)*mapping->nrpages;
 			                                   ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1029: FILE: mm/hugetlb.c:25:
+static unsigned long nr_huge_pages[MAX_ORDER], free_huge_pages[MAX_ORDER], $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1051: FILE: mm/hugetlb.c:42:
+	for (i = 0; i < (HPAGE_SIZE(mm)/PAGE_SIZE); i++) {
 	                               ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1059: FILE: mm/hugetlb.c:48:
+static void copy_huge_page(struct mm_struct *mm, struct page *dst, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1060: FILE: mm/hugetlb.c:49:
+static void copy_huge_page(struct mm_struct *mm, struct page *dst, 
+	struct page *src, unsigned long addr)

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1066: FILE: mm/hugetlb.c:54:
+	for (i = 0; i < HPAGE_SIZE(mm)/PAGE_SIZE; i++) {
 	                              ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1137: FILE: mm/hugetlb.c:117:
+		nr_huge_pages_size += 1UL<<order;
 		                         ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1172: FILE: mm/hugetlb.c:159:
+		BUG_ON(reserved_huge_pages[order] == 0);

WARNING:TYPO_SPELLING: 'atleast' may be misspelled - perhaps 'at least'?
#1186: FILE: mm/hugetlb.c:187:
+			       unsigned long atleast, int order)
 			                     ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1195: FILE: mm/hugetlb.c:204:
+^Iif ((reserved_huge_pages[order] + change_in_reserve) $

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1221: FILE: mm/hugetlb.c:253:
+	BUG_ON(reserved_huge_pages[order] < change_in_reserve);

WARNING:LONG_LINE: line length of 111 exceeds 100 columns
#1251: FILE: mm/hugetlb.c:279:
+	max_huge_pages = free_huge_pages[HUGETLB_INIT_PAGE_ORDER] = nr_huge_pages[HUGETLB_INIT_PAGE_ORDER] = i;

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1251: FILE: mm/hugetlb.c:279:
+	max_huge_pages = free_huge_pages[HUGETLB_INIT_PAGE_ORDER] = nr_huge_pages[HUGETLB_INIT_PAGE_ORDER] = i;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1252: FILE: mm/hugetlb.c:280:
+^Iprintk("Total HugeTLB memory allocated, %ld\n", $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1252: FILE: mm/hugetlb.c:280:
+	printk("Total HugeTLB memory allocated, %ld\n", 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1253: FILE: mm/hugetlb.c:281:
+	printk("Total HugeTLB memory allocated, %ld\n", 
+		free_huge_pages[HUGETLB_INIT_PAGE_ORDER]);

CHECK:SPACING: spaces preferred around that '/' (ctx:VxW)
#1271: FILE: mm/hugetlb.c:301:
+	for (i = 0; i < ((1UL << (PAGE_SHIFT + order))/ PAGE_SIZE); i++) {
 	                                              ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1355: FILE: mm/hugetlb.c:364:
+	max_huge_pages = set_max_huge_pages(max_huge_pages,
+		HUGETLB_INIT_PAGE_ORDER);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1369: FILE: mm/hugetlb.c:378:
+^I^I        reserved_huge_pages[HUGETLB_INIT_PAGE_ORDER],$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1370: FILE: mm/hugetlb.c:379:
+			HUGETLB_INIT_PAGE_SIZE/1024);
 			                      ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1397: FILE: mm/hugetlb.c:453:
+^Ifor (addr = vma->vm_start; addr < vma->vm_end; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1407: FILE: mm/hugetlb.c:469:
+^I^I^Iadd_mm_counter(dst, file_rss, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1408: FILE: mm/hugetlb.c:470:
+			add_mm_counter(dst, file_rss, 
+					HPAGE_SIZE(src) / PAGE_SIZE);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1418: FILE: mm/hugetlb.c:492:
+	BUG_ON(start & ~HPAGE_MASK(mm));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1419: FILE: mm/hugetlb.c:493:
+	BUG_ON(end & ~HPAGE_MASK(mm));

CHECK:SPACING: No space is necessary after a cast
#1436: FILE: mm/hugetlb.c:511:
+		add_mm_counter(mm, file_rss, (int) -(HPAGE_SIZE(mm) / PAGE_SIZE));

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1514: FILE: mm/hugetlb.c:726:
+				pfn_offset < HPAGE_SIZE(mm)/PAGE_SIZE) {
 				                           ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000085498.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 10 errors, 15 warnings, 42 checks, 1357 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000085498.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
