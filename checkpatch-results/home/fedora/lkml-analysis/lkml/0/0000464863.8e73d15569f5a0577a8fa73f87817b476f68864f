WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#41: 
- Replace all occurrences of ide_wait_taskfile() with ide_raw_taskfile().  One

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#235: FILE: drivers/ide/ide-disk.c:954:
+	ide_do_drive_cmd (drive, &rq, ide_wait);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#294: FILE: drivers/ide/ide-disk.c:1002:
+	args.taskfile.feature = (arg)?SETFEATURES_EN_AAM:SETFEATURES_DIS_AAM;
 	                             ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#294: FILE: drivers/ide/ide-disk.c:1002:
+	args.taskfile.feature = (arg)?SETFEATURES_EN_AAM:SETFEATURES_DIS_AAM;
 	                                                ^

WARNING:SPACING: space prohibited before semicolon
#339: FILE: drivers/ide/ide-proc.c:181:
+	args.taskfile.command = (drive->type == ATA_DISK) ? WIN_IDENTIFY : WIN_PIDENTIFY ;

CHECK:BRACES: Unbalanced braces around else statement
#366: FILE: drivers/ide/ide-proc.c:203:
+	} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LONG_LINE: line length of 115 exceeds 100 columns
#444: FILE: drivers/ide/ide-taskfile.c:993:
+int ide_task_ioctl(ide_drive_t *drive, struct inode *inode, struct file *file, unsigned int cmd, unsigned long arg)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#454: FILE: drivers/ide/ide-taskfile.c:1023:
+EXPORT_SYMBOL(ata_taskfile);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:TYPO_SPELLING: 'Compatability' may be misspelled - perhaps 'Compatibility'?
#696: FILE: drivers/ide/ide.c:2319:
+ * Compatability function for existing drivers.  If you want
    ^^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:LONG_LINE: line length of 196 exceeds 100 columns
#705: FILE: drivers/ide/ide.c:2330:
+void ide_add_setting(ide_drive_t *drive, const char *name, int rw, int read_ioctl, int write_ioctl, int data_type, int min, int max, int mul_factor, int div_factor, void *data, ide_procset_t *set)

WARNING:LONG_LINE_COMMENT: line length of 287 exceeds 100 columns
#716: FILE: drivers/ide/ide.c:2509:
+/*			drive	setting name		read/write access				read ioctl		write ioctl		data type	min	max				mul_factor	div_factor	data pointer			set function */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE: line length of 113 exceeds 100 columns
#969: FILE: drivers/ide/piix.c:202:
+			if ((piix_config->flags & PIIX_UDMA) >= PIIX_UDMA_100 && (u & (1 << (i + 12)))) umul = 1;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#969: FILE: drivers/ide/piix.c:202:
+			if ((piix_config->flags & PIIX_UDMA) >= PIIX_UDMA_100 && (u & (1 << (i + 12)))) umul = 1;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#987: FILE: include/linux/ide.h:865:
+extern int ide_raw_taskfile(ide_drive_t *drive, struct ata_taskfile *cmd, byte *buf);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:LONG_LINE: line length of 122 exceeds 100 columns
#991: FILE: include/linux/ide.h:867:
+extern int ide_cmd_ioctl(ide_drive_t *drive, struct inode *inode, struct file *file, unsigned int cmd, unsigned long arg);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#991: FILE: include/linux/ide.h:867:
+extern int ide_cmd_ioctl(ide_drive_t *drive, struct inode *inode, struct file *file, unsigned int cmd, unsigned long arg);

WARNING:LONG_LINE: line length of 123 exceeds 100 columns
#992: FILE: include/linux/ide.h:868:
+extern int ide_task_ioctl(ide_drive_t *drive, struct inode *inode, struct file *file, unsigned int cmd, unsigned long arg);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#992: FILE: include/linux/ide.h:868:
+extern int ide_task_ioctl(ide_drive_t *drive, struct inode *inode, struct file *file, unsigned int cmd, unsigned long arg);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000464863.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 11 warnings, 6 checks, 867 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000464863.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
