WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#373: FILE: fs/ext2/xattr.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#374: FILE: fs/ext2/xattr.h:2:
+  File: fs/ext2/xattr.h

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#374: FILE: fs/ext2/xattr.h:2:
+/*
+  File: fs/ext2/xattr.h

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#415: FILE: fs/ext2/xattr.h:43:
+#define EXT2_XATTR_PAD		(1<<EXT2_XATTR_PAD_BITS)
                       		  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BIT_MACRO: Prefer using the BIT macro
#415: FILE: fs/ext2/xattr.h:43:
+#define EXT2_XATTR_PAD		(1<<EXT2_XATTR_PAD_BITS)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#416: FILE: fs/ext2/xattr.h:44:
+#define EXT2_XATTR_ROUND		(EXT2_XATTR_PAD-1)
                         		               ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'entry' - possible side-effects?
#420: FILE: fs/ext2/xattr.h:48:
+#define EXT2_XATTR_NEXT(entry) \
+	( (struct ext2_xattr_entry *)( \
+	  (char *)(entry) + EXT2_XATTR_LEN((entry)->e_name_len)) )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#422: FILE: fs/ext2/xattr.h:50:
+	  (char *)(entry) + EXT2_XATTR_LEN((entry)->e_name_len)) )

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#438: FILE: fs/ext2/xattr.h:66:
+extern int ext2_xattr_register(int, struct ext2_xattr_handler *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#438: FILE: fs/ext2/xattr.h:66:
+extern int ext2_xattr_register(int, struct ext2_xattr_handler *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ext2_xattr_handler *' should also have an identifier name
#438: FILE: fs/ext2/xattr.h:66:
+extern int ext2_xattr_register(int, struct ext2_xattr_handler *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#439: FILE: fs/ext2/xattr.h:67:
+extern void ext2_xattr_unregister(int, struct ext2_xattr_handler *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#439: FILE: fs/ext2/xattr.h:67:
+extern void ext2_xattr_unregister(int, struct ext2_xattr_handler *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ext2_xattr_handler *' should also have an identifier name
#439: FILE: fs/ext2/xattr.h:67:
+extern void ext2_xattr_unregister(int, struct ext2_xattr_handler *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#441: FILE: fs/ext2/xattr.h:69:
+extern int ext2_setxattr(struct dentry *, const char *, void *, size_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#441: FILE: fs/ext2/xattr.h:69:
+extern int ext2_setxattr(struct dentry *, const char *, void *, size_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#441: FILE: fs/ext2/xattr.h:69:
+extern int ext2_setxattr(struct dentry *, const char *, void *, size_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#441: FILE: fs/ext2/xattr.h:69:
+extern int ext2_setxattr(struct dentry *, const char *, void *, size_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#441: FILE: fs/ext2/xattr.h:69:
+extern int ext2_setxattr(struct dentry *, const char *, void *, size_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#441: FILE: fs/ext2/xattr.h:69:
+extern int ext2_setxattr(struct dentry *, const char *, void *, size_t, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#442: FILE: fs/ext2/xattr.h:70:
+extern ssize_t ext2_getxattr(struct dentry *, const char *, void *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#442: FILE: fs/ext2/xattr.h:70:
+extern ssize_t ext2_getxattr(struct dentry *, const char *, void *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#442: FILE: fs/ext2/xattr.h:70:
+extern ssize_t ext2_getxattr(struct dentry *, const char *, void *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#442: FILE: fs/ext2/xattr.h:70:
+extern ssize_t ext2_getxattr(struct dentry *, const char *, void *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#442: FILE: fs/ext2/xattr.h:70:
+extern ssize_t ext2_getxattr(struct dentry *, const char *, void *, size_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#443: FILE: fs/ext2/xattr.h:71:
+extern ssize_t ext2_listxattr(struct dentry *, char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#443: FILE: fs/ext2/xattr.h:71:
+extern ssize_t ext2_listxattr(struct dentry *, char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#443: FILE: fs/ext2/xattr.h:71:
+extern ssize_t ext2_listxattr(struct dentry *, char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#443: FILE: fs/ext2/xattr.h:71:
+extern ssize_t ext2_listxattr(struct dentry *, char *, size_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#444: FILE: fs/ext2/xattr.h:72:
+extern int ext2_removexattr(struct dentry *, const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#444: FILE: fs/ext2/xattr.h:72:
+extern int ext2_removexattr(struct dentry *, const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#444: FILE: fs/ext2/xattr.h:72:
+extern int ext2_removexattr(struct dentry *, const char *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#446: FILE: fs/ext2/xattr.h:74:
+extern int ext2_xattr_get(struct inode *, int, const char *, void *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#446: FILE: fs/ext2/xattr.h:74:
+extern int ext2_xattr_get(struct inode *, int, const char *, void *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#446: FILE: fs/ext2/xattr.h:74:
+extern int ext2_xattr_get(struct inode *, int, const char *, void *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#446: FILE: fs/ext2/xattr.h:74:
+extern int ext2_xattr_get(struct inode *, int, const char *, void *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#446: FILE: fs/ext2/xattr.h:74:
+extern int ext2_xattr_get(struct inode *, int, const char *, void *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#446: FILE: fs/ext2/xattr.h:74:
+extern int ext2_xattr_get(struct inode *, int, const char *, void *, size_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#447: FILE: fs/ext2/xattr.h:75:
+extern int ext2_xattr_list(struct inode *, char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#447: FILE: fs/ext2/xattr.h:75:
+extern int ext2_xattr_list(struct inode *, char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#447: FILE: fs/ext2/xattr.h:75:
+extern int ext2_xattr_list(struct inode *, char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#447: FILE: fs/ext2/xattr.h:75:
+extern int ext2_xattr_list(struct inode *, char *, size_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#448: FILE: fs/ext2/xattr.h:76:
+extern int ext2_xattr_set(struct inode *, int, const char *, const void *, size_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#448: FILE: fs/ext2/xattr.h:76:
+extern int ext2_xattr_set(struct inode *, int, const char *, const void *, size_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#448: FILE: fs/ext2/xattr.h:76:
+extern int ext2_xattr_set(struct inode *, int, const char *, const void *, size_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#448: FILE: fs/ext2/xattr.h:76:
+extern int ext2_xattr_set(struct inode *, int, const char *, const void *, size_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const void *' should also have an identifier name
#448: FILE: fs/ext2/xattr.h:76:
+extern int ext2_xattr_set(struct inode *, int, const char *, const void *, size_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#448: FILE: fs/ext2/xattr.h:76:
+extern int ext2_xattr_set(struct inode *, int, const char *, const void *, size_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#448: FILE: fs/ext2/xattr.h:76:
+extern int ext2_xattr_set(struct inode *, int, const char *, const void *, size_t, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#450: FILE: fs/ext2/xattr.h:78:
+extern void ext2_xattr_delete_inode(struct inode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#450: FILE: fs/ext2/xattr.h:78:
+extern void ext2_xattr_delete_inode(struct inode *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#451: FILE: fs/ext2/xattr.h:79:
+extern void ext2_xattr_put_super(struct super_block *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#451: FILE: fs/ext2/xattr.h:79:
+extern void ext2_xattr_put_super(struct super_block *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#453: FILE: fs/ext2/xattr.h:81:
+extern int init_ext2_xattr(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#454: FILE: fs/ext2/xattr.h:82:
+extern void exit_ext2_xattr(void);

WARNING:ENOTSUPP: ENOTSUPP is not a SUSV4 error code, prefer EOPNOTSUPP
#466: FILE: fs/ext2/xattr.h:94:
+	return -ENOTSUPP;

ENOTSUPP is not a standard error code and should be avoided in new patches.
EOPNOTSUPP should be used instead.

See: https://lore.kernel.org/netdev/20200510182252.GA411829@lunn.ch/

WARNING:ENOTSUPP: ENOTSUPP is not a SUSV4 error code, prefer EOPNOTSUPP
#472: FILE: fs/ext2/xattr.h:100:
+	return -ENOTSUPP;

WARNING:ENOTSUPP: ENOTSUPP is not a SUSV4 error code, prefer EOPNOTSUPP
#479: FILE: fs/ext2/xattr.h:107:
+	return -ENOTSUPP;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000423296.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 40 warnings, 17 checks, 426 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000423296.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
