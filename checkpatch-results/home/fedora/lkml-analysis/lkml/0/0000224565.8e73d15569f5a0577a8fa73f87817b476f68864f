WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#70: FILE: drivers/char/rio/linux_compat.h:22:
+#define disable(oldspl) local_irq_save(oldspl);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:SPACING: space prohibited before semicolon
#71: FILE: drivers/char/rio/linux_compat.h:23:
+#define restore(oldspl) local_irq_restore(oldspl) ;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#71: FILE: drivers/char/rio/linux_compat.h:23:
+#define restore(oldspl) local_irq_restore(oldspl) ;

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#71: FILE: drivers/char/rio/linux_compat.h:23:
+#define restore(oldspl) local_irq_restore(oldspl) ;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#91: FILE: drivers/char/rio/rio_linux.c:408:
+  int old_debug=rio_debug;$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#91: FILE: drivers/char/rio/rio_linux.c:408:
+  int old_debug=rio_debug;
                ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#92: FILE: drivers/char/rio/rio_linux.c:409:
+  int old_debug=rio_debug;
+  rio_debug=0;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#92: FILE: drivers/char/rio/rio_linux.c:409:
+  rio_debug=0;$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#92: FILE: drivers/char/rio/rio_linux.c:409:
+  rio_debug=0;
            ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#101: FILE: drivers/char/rio/rio_linux.c:463:
+  if ((HostP->Flags & RUN_STATE) != RC_RUNNING) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 10)
#101: FILE: drivers/char/rio/rio_linux.c:463:
+  if ((HostP->Flags & RUN_STATE) != RC_RUNNING) {
+          rio_debug=old_debug;

CHECK:CAMELCASE: Avoid CamelCase: <HostP>
#101: FILE: drivers/char/rio/rio_linux.c:463:
+  if ((HostP->Flags & RUN_STATE) != RC_RUNNING) {

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Flags>
#101: FILE: drivers/char/rio/rio_linux.c:463:
+  if ((HostP->Flags & RUN_STATE) != RC_RUNNING) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#102: FILE: drivers/char/rio/rio_linux.c:464:
+          rio_debug=old_debug;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#102: FILE: drivers/char/rio/rio_linux.c:464:
+          rio_debug=old_debug;$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#102: FILE: drivers/char/rio/rio_linux.c:464:
+          rio_debug=old_debug;
                    ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#105: FILE: drivers/char/rio/rio_linux.c:466:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#109: FILE: drivers/char/rio/rio_linux.c:470:
+    rio_debug=old_debug;$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#109: FILE: drivers/char/rio/rio_linux.c:470:
+    rio_debug=old_debug;
              ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#117: FILE: drivers/char/rio/rio_linux.c:483:
+rio_debug=old_debug;
          ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#127: FILE: drivers/char/rio/rio_linux.c:736:
+
+

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#135: FILE: drivers/char/rio/rio_linux.c:991:
+    port->gs.driver_lock = SPIN_LOCK_UNLOCKED;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#144: FILE: drivers/char/rio/rio_linux.c:1060:
+  char *rebase;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#153: FILE: drivers/char/rio/rio_linux.c:1068:
+  rebase =  ioremap(hwbase, 0x80);$

CHECK:SPACING: No space is necessary after a cast
#162: FILE: drivers/char/rio/rio_linux.c:1149:
+      hp->CardP = (struct DpRam *) hp->Caddr;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#162: FILE: drivers/char/rio/rio_linux.c:1149:
+      hp->CardP = (struct DpRam *) hp->Caddr;$

CHECK:CAMELCASE: Avoid CamelCase: <CardP>
#162: FILE: drivers/char/rio/rio_linux.c:1149:
+      hp->CardP = (struct DpRam *) hp->Caddr;

CHECK:CAMELCASE: Avoid CamelCase: <DpRam>
#162: FILE: drivers/char/rio/rio_linux.c:1149:
+      hp->CardP = (struct DpRam *) hp->Caddr;

CHECK:CAMELCASE: Avoid CamelCase: <Caddr>
#162: FILE: drivers/char/rio/rio_linux.c:1149:
+      hp->CardP = (struct DpRam *) hp->Caddr;

CHECK:SPACING: No space is necessary after a cast
#171: FILE: drivers/char/rio/rio_linux.c:1207:
+      hp->CardP = (struct DpRam *) hp->Caddr;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#171: FILE: drivers/char/rio/rio_linux.c:1207:
+      hp->CardP = (struct DpRam *) hp->Caddr;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#183: FILE: drivers/char/rio/riotty.c:205:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open brace '{'
#184: FILE: drivers/char/rio/riotty.c:206:
+	if (PortP->gs.flags & ASYNC_CLOSING){

CHECK:CAMELCASE: Avoid CamelCase: <PortP>
#184: FILE: drivers/char/rio/riotty.c:206:
+	if (PortP->gs.flags & ASYNC_CLOSING){

WARNING:BRACES: braces {} are not necessary for single statement blocks
#184: FILE: drivers/char/rio/riotty.c:206:
+	if (PortP->gs.flags & ASYNC_CLOSING){
+		interruptible_sleep_on(&PortP->gs.close_wait);
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#194: FILE: drivers/char/rio/riotty.c:414:
+			func_exit ();

ERROR:SPACING: space prohibited after that open parenthesis '('
#205: FILE: drivers/char/rio/riotty.c:467:
+					if( PortP->gs.count <= 1 )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#205: FILE: drivers/char/rio/riotty.c:467:
+					if( PortP->gs.count <= 1 )

ERROR:SPACING: space required before the open parenthesis '('
#205: FILE: drivers/char/rio/riotty.c:467:
+					if( PortP->gs.count <= 1 )

ERROR:SPACING: space prohibited after that open parenthesis '('
#206: FILE: drivers/char/rio/riotty.c:468:
+						RIOPreemptiveCmd( p, PortP, FCLOSE );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#206: FILE: drivers/char/rio/riotty.c:468:
+						RIOPreemptiveCmd( p, PortP, FCLOSE );

CHECK:CAMELCASE: Avoid CamelCase: <RIOPreemptiveCmd>
#206: FILE: drivers/char/rio/riotty.c:468:
+						RIOPreemptiveCmd( p, PortP, FCLOSE );

CHECK:CAMELCASE: Avoid CamelCase: <portSem>
#216: FILE: drivers/char/rio/riotty.c:477:
+				rio_spin_lock_irqsave(&PortP->portSem, flags);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000224565.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 14 errors, 18 warnings, 11 checks, 166 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000224565.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
