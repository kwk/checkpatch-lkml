WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#52: 
    #      ino       size   cached cached%  state   refcnt  dev             file

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#65: 
    # flags R:referenced A:active U:uptodate D:dirty W:writeback M:mmap
                                    ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#139: FILE: fs/seq_file.c:98:
+		BUG_ON(m->from == SEQFILE_SHOW_FROM_NEXT);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#246: FILE: Documentation/filesystems/proc.txt:499:
+    # flags R:referenced A:active U:uptodate D:dirty W:writeback M:mmap
                                     ^^^^^^^^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#292: FILE: fs/proc/filecache.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#293: FILE: fs/proc/filecache.c:2:
+ * linux/fs/proc/filecache.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#313: FILE: fs/proc/filecache.c:22:
+#include <asm/uaccess.h>

WARNING:TYPO_SPELLING: 'assiocated' may be misspelled - perhaps 'associated'?
#321: FILE: fs/proc/filecache.c:30:
+ * Each opened /proc/filecache file is assiocated with a session object.
                                        ^^^^^^^^^^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#325: FILE: fs/proc/filecache.c:34:
+ * ^I- NULL: call inode_index_*() to show the index of cached inodes$

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#326: FILE: fs/proc/filecache.c:35:
+ * 	- filp: call page_ranges_*() to show the cached pages of filp
    	  ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#326: FILE: fs/proc/filecache.c:35:
+ * 	- filp: call page_ranges_*() to show the cached pages of filp
    	                                                         ^^^^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#326: FILE: fs/proc/filecache.c:35:
+ * ^I- filp: call page_ranges_*() to show the cached pages of filp$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#329: FILE: fs/proc/filecache.c:38:
+ * ^I- initialized from global_name on open();$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#330: FILE: fs/proc/filecache.c:39:
+ * ^I- updated on write("filename");$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#331: FILE: fs/proc/filecache.c:40:
+ * ^I  note that the new filename will also be saved in global_name if$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#332: FILE: fs/proc/filecache.c:41:
+ * ^I  session.private_session is false.$

WARNING:STATIC_CONST_CHAR_ARRAY: static char array declaration should probably be static const char
#342: FILE: fs/proc/filecache.c:51:
+static char name_index[] = "index";

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#354: FILE: fs/proc/filecache.c:63:
+		if ((ret = filp_close(s->query_file, NULL)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#364: FILE: fs/proc/filecache.c:73:
+		if (IS_ERR(s->query_file =

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#365: FILE: fs/proc/filecache.c:74:
+				filp_open(name, O_RDONLY|O_LARGEFILE, 0))) {
 				                        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#383: FILE: fs/proc/filecache.c:92:
+		if (!strcmp(name, name_index))
[...]
+		else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#385: FILE: fs/proc/filecache.c:94:
+		else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#387: FILE: fs/proc/filecache.c:96:
+			if (global_name)
[...]
+			else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#389: FILE: fs/proc/filecache.c:98:
+			else {

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#411: FILE: fs/proc/filecache.c:120:
+int new_session(struct file* proc_file)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#419: FILE: fs/proc/filecache.c:128:
+	BUG_ON(proc_file->f_ra.flags);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#431: FILE: fs/proc/filecache.c:140:
+	if (!(ret = name_session(s, NULL)))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#437: FILE: fs/proc/filecache.c:146:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#442: FILE: fs/proc/filecache.c:151:
+ * ^I^Iecho -n index > /proc/filecache$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#443: FILE: fs/proc/filecache.c:152:
+ * ^I^Icat /proc/filecache$

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#460: FILE: fs/proc/filecache.c:169:
+#if 0 /* FIXME: permission() is not enough -

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#461: FILE: fs/proc/filecache.c:170:
+#if 0 /* FIXME: permission() is not enough -
+		it applies to the file content, not the file path. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#461: FILE: fs/proc/filecache.c:170:
+		it applies to the file content, not the file path. */

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#488: FILE: fs/proc/filecache.c:197:
+	if (inode->i_state & (I_DIRTY_DATASYNC|I_DIRTY_PAGES))
 	                                      ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#502: FILE: fs/proc/filecache.c:211:
+	seq_printf(m, "%10lu %10llu %8lu %6d\t%s\t%d\t%02x:%02x(%s)\t",
+			inode->i_ino,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#517: FILE: fs/proc/filecache.c:226:
+			seq_printf(m, "(%02x:%02x)\n",
+					imajor(inode), iminor(inode));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#520: FILE: fs/proc/filecache.c:229:
+		dentry = list_entry(inode->i_dentry.next,
+							struct dentry, d_alias);

CHECK:SPACING: No space is necessary after a cast
#528: FILE: fs/proc/filecache.c:237:
+	unsigned long index = *(loff_t *) v;

ERROR:CODE_INDENT: code indent should use tabs where possible
#530: FILE: fs/proc/filecache.c:239:
+        struct inode *inode;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#530: FILE: fs/proc/filecache.c:239:
+        struct inode *inode;$

WARNING:SPLIT_STRING: quoted string split across lines
#535: FILE: fs/proc/filecache.c:244:
+		seq_puts(m, "#      ino       size   cached cached%"
+				"\tstate\trefcnt\tdev\t\tfile\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#538: FILE: fs/proc/filecache.c:247:
+	BUG_ON(!s->ordered_inodes);

ERROR:CODE_INDENT: code indent should use tabs where possible
#539: FILE: fs/proc/filecache.c:248:
+        inode = s->ordered_inodes[index];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#539: FILE: fs/proc/filecache.c:248:
+        inode = s->ordered_inodes[index];$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#557: FILE: fs/proc/filecache.c:266:
+	ip = s->ordered_inodes = vmalloc(n * sizeof(*ip));

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#611: FILE: fs/proc/filecache.c:320:
+
+

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#616: FILE: fs/proc/filecache.c:325:
+ * ^I^Iecho -n 'file name' > /proc/filecache$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#617: FILE: fs/proc/filecache.c:326:
+ * ^I^Icat /proc/filecache$

WARNING:ARRAY_SIZE: Prefer ARRAY_SIZE(page_flag)
#622: FILE: fs/proc/filecache.c:331:
+#define PG_COUNT	(sizeof(page_flag)/sizeof(page_flag[0]))

The ARRAY_SIZE(foo) macro should be preferred over
sizeof(foo)/sizeof(foo[0]) for finding number of elements in an
array.

The macro is defined in include/linux/kernel.h::

  #define ARRAY_SIZE(x) (sizeof(x) / sizeof((x)[0]))

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#622: FILE: fs/proc/filecache.c:331:
+#define PG_COUNT	(sizeof(page_flag)/sizeof(page_flag[0]))
                 	                  ^

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#630: FILE: fs/proc/filecache.c:339:
+} page_flag [] = {

Whitespace before opening bracket '[' is prohibited.
There are some exceptions:

1. With a type on the left::

    int [] a;

2. At the beginning of a line for slice initialisers::

    [0...10] = 5,

3. Inside a curly brace::

    = { [0...10] = 5 }

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#634: FILE: fs/proc/filecache.c:343:
+	{1 << PG_uptodate,	"U:uptodate"},
 	                  	   ^^^^^^^^

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#642: FILE: fs/proc/filecache.c:351:
+static unsigned long page_flags(struct page* page)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#654: FILE: fs/proc/filecache.c:363:
+static int pages_similiar(struct page* page0, struct page* page)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#654: FILE: fs/proc/filecache.c:363:
+static int pages_similiar(struct page* page0, struct page* page)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#665: FILE: fs/proc/filecache.c:374:
+static void show_range(struct seq_file *m, struct page* page, unsigned long len)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#685: FILE: fs/proc/filecache.c:394:
+static pgoff_t show_file_cache(struct seq_file *m,
+				struct address_space *mapping, pgoff_t start)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#697: FILE: fs/proc/filecache.c:406:
+		pvec.nr = radix_tree_gang_lookup(&mapping->page_tree,
+				(void **)pvec.pages, start + len, PAGEVEC_SIZE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#712: FILE: fs/proc/filecache.c:421:
+			if (page->index == start + len &&
+					pages_similiar(page0, page))

CHECK:BRACES: Unbalanced braces around else statement
#714: FILE: fs/proc/filecache.c:423:
+			else {

CHECK:SPACING: No space is necessary after a cast
#738: FILE: fs/proc/filecache.c:447:
+	offset = *(loff_t *) v;

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#804: FILE: fs/proc/filecache.c:513:
+struct seq_operations seq_filecache_op = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#811: FILE: fs/proc/filecache.c:520:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#820: FILE: fs/proc/filecache.c:529:
+	int ret;
+	if (!(ret = seq_open(proc_file, &seq_filecache_op))) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#820: FILE: fs/proc/filecache.c:529:
+	if (!(ret = seq_open(proc_file, &seq_filecache_op))) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#831: FILE: fs/proc/filecache.c:540:
+	int ret;
+	if (!(ret = kill_session(proc_file)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#831: FILE: fs/proc/filecache.c:540:
+	if (!(ret = kill_session(proc_file)))

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#836: FILE: fs/proc/filecache.c:545:
+ssize_t filecache_write(struct file *proc_file, const char __user * buffer,

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#846: FILE: fs/proc/filecache.c:555:
+	name = kmalloc(count+1, GFP_KERNEL);
 	                    ^

WARNING:CONST_STRUCT: struct file_operations should normally be const
#870: FILE: fs/proc/filecache.c:579:
+static struct file_operations proc_filecache_fops = {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#879: FILE: fs/proc/filecache.c:588:
+
+

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000012797.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 14 errors, 35 warnings, 22 checks, 828 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000012797.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
