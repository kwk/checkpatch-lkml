WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#43: 
diff -urpN linux-2.6.12.2.n/crypto/twofish.c linux-2.6.12.3.n/crypto/twofish.c

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'j' - possible side-effects?
#55: FILE: crypto/twofish.c:535:
+#define CALC_K_2(a, b, c, d, j) ( \
+     mds[0][q0[(a) ^ key[(j) + 8]] ^ key[j]] \
+   ^ mds[1][q0[(b) ^ key[(j) + 9]] ^ key[(j) + 1]] \
+   ^ mds[2][q1[(c) ^ key[(j) + 10]] ^ key[(j) + 2]] \
+   ^ mds[3][q1[(d) ^ key[(j) + 11]] ^ key[(j) + 3]] \
+)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#56: FILE: crypto/twofish.c:536:
+     mds[0][q0[(a) ^ key[(j) + 8]] ^ key[j]] \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#57: FILE: crypto/twofish.c:537:
+   ^ mds[1][q0[(b) ^ key[(j) + 9]] ^ key[(j) + 1]] \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#58: FILE: crypto/twofish.c:538:
+   ^ mds[2][q1[(c) ^ key[(j) + 10]] ^ key[(j) + 2]] \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#59: FILE: crypto/twofish.c:539:
+   ^ mds[3][q1[(d) ^ key[(j) + 11]] ^ key[(j) + 3]] \$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'a' - possible side-effects?
#63: FILE: crypto/twofish.c:542:
+#define CALC_K(a, j, k, l, m, n) { \
    x = CALC_K_2 (k, l, k, l, 0); \
    y = CALC_K_2 (m, n, m, n, 4); \
    y = rol32(y, 8); \
+   x += y; y += x; \
+   ctx->a[j] = x; \
+   ctx->a[(j) + 1] = rol32(y, 9); \
+}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'a' may be better as '(a)' to avoid precedence issues
#63: FILE: crypto/twofish.c:542:
+#define CALC_K(a, j, k, l, m, n) { \
    x = CALC_K_2 (k, l, k, l, 0); \
    y = CALC_K_2 (m, n, m, n, 4); \
    y = rol32(y, 8); \
+   x += y; y += x; \
+   ctx->a[j] = x; \
+   ctx->a[(j) + 1] = rol32(y, 9); \
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'j' - possible side-effects?
#63: FILE: crypto/twofish.c:542:
+#define CALC_K(a, j, k, l, m, n) { \
    x = CALC_K_2 (k, l, k, l, 0); \
    y = CALC_K_2 (m, n, m, n, 4); \
    y = rol32(y, 8); \
+   x += y; y += x; \
+   ctx->a[j] = x; \
+   ctx->a[(j) + 1] = rol32(y, 9); \
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'k' - possible side-effects?
#63: FILE: crypto/twofish.c:542:
+#define CALC_K(a, j, k, l, m, n) { \
    x = CALC_K_2 (k, l, k, l, 0); \
    y = CALC_K_2 (m, n, m, n, 4); \
    y = rol32(y, 8); \
+   x += y; y += x; \
+   ctx->a[j] = x; \
+   ctx->a[(j) + 1] = rol32(y, 9); \
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'l' - possible side-effects?
#63: FILE: crypto/twofish.c:542:
+#define CALC_K(a, j, k, l, m, n) { \
    x = CALC_K_2 (k, l, k, l, 0); \
    y = CALC_K_2 (m, n, m, n, 4); \
    y = rol32(y, 8); \
+   x += y; y += x; \
+   ctx->a[j] = x; \
+   ctx->a[(j) + 1] = rol32(y, 9); \
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'm' - possible side-effects?
#63: FILE: crypto/twofish.c:542:
+#define CALC_K(a, j, k, l, m, n) { \
    x = CALC_K_2 (k, l, k, l, 0); \
    y = CALC_K_2 (m, n, m, n, 4); \
    y = rol32(y, 8); \
+   x += y; y += x; \
+   ctx->a[j] = x; \
+   ctx->a[(j) + 1] = rol32(y, 9); \
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#63: FILE: crypto/twofish.c:542:
+#define CALC_K(a, j, k, l, m, n) { \
    x = CALC_K_2 (k, l, k, l, 0); \
    y = CALC_K_2 (m, n, m, n, 4); \
    y = rol32(y, 8); \
+   x += y; y += x; \
+   ctx->a[j] = x; \
+   ctx->a[(j) + 1] = rol32(y, 9); \
+}

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#69: FILE: crypto/twofish.c:546:
+   x += y; y += x; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#70: FILE: crypto/twofish.c:547:
+   ctx->a[j] = x; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#71: FILE: crypto/twofish.c:548:
+   ctx->a[(j) + 1] = rol32(y, 9); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#79: FILE: crypto/twofish.c:552:
+   CALC_K_2 (q0[(a) ^ key[(j) + 16]], \$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#79: FILE: crypto/twofish.c:552:
+   CALC_K_2 (q0[(a) ^ key[(j) + 16]], \

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'a' - possible side-effects?
#85: FILE: crypto/twofish.c:557:
+#define CALC_K192(a, j, k, l, m, n) { \
    x = CALC_K192_2 (l, l, k, k, 0); \
    y = CALC_K192_2 (n, n, m, m, 4); \
    y = rol32(y, 8); \
+   x += y; y += x; \
+   ctx->a[j] = x; \
+   ctx->a[(j) + 1] = rol32(y, 9); \
+}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'a' may be better as '(a)' to avoid precedence issues
#85: FILE: crypto/twofish.c:557:
+#define CALC_K192(a, j, k, l, m, n) { \
    x = CALC_K192_2 (l, l, k, k, 0); \
    y = CALC_K192_2 (n, n, m, m, 4); \
    y = rol32(y, 8); \
+   x += y; y += x; \
+   ctx->a[j] = x; \
+   ctx->a[(j) + 1] = rol32(y, 9); \
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'j' - possible side-effects?
#85: FILE: crypto/twofish.c:557:
+#define CALC_K192(a, j, k, l, m, n) { \
    x = CALC_K192_2 (l, l, k, k, 0); \
    y = CALC_K192_2 (n, n, m, m, 4); \
    y = rol32(y, 8); \
+   x += y; y += x; \
+   ctx->a[j] = x; \
+   ctx->a[(j) + 1] = rol32(y, 9); \
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'k' - possible side-effects?
#85: FILE: crypto/twofish.c:557:
+#define CALC_K192(a, j, k, l, m, n) { \
    x = CALC_K192_2 (l, l, k, k, 0); \
    y = CALC_K192_2 (n, n, m, m, 4); \
    y = rol32(y, 8); \
+   x += y; y += x; \
+   ctx->a[j] = x; \
+   ctx->a[(j) + 1] = rol32(y, 9); \
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'l' - possible side-effects?
#85: FILE: crypto/twofish.c:557:
+#define CALC_K192(a, j, k, l, m, n) { \
    x = CALC_K192_2 (l, l, k, k, 0); \
    y = CALC_K192_2 (n, n, m, m, 4); \
    y = rol32(y, 8); \
+   x += y; y += x; \
+   ctx->a[j] = x; \
+   ctx->a[(j) + 1] = rol32(y, 9); \
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'm' - possible side-effects?
#85: FILE: crypto/twofish.c:557:
+#define CALC_K192(a, j, k, l, m, n) { \
    x = CALC_K192_2 (l, l, k, k, 0); \
    y = CALC_K192_2 (n, n, m, m, 4); \
    y = rol32(y, 8); \
+   x += y; y += x; \
+   ctx->a[j] = x; \
+   ctx->a[(j) + 1] = rol32(y, 9); \
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#85: FILE: crypto/twofish.c:557:
+#define CALC_K192(a, j, k, l, m, n) { \
    x = CALC_K192_2 (l, l, k, k, 0); \
    y = CALC_K192_2 (n, n, m, m, 4); \
    y = rol32(y, 8); \
+   x += y; y += x; \
+   ctx->a[j] = x; \
+   ctx->a[(j) + 1] = rol32(y, 9); \
+}

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#91: FILE: crypto/twofish.c:561:
+   x += y; y += x; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#92: FILE: crypto/twofish.c:562:
+   ctx->a[j] = x; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#93: FILE: crypto/twofish.c:563:
+   ctx->a[(j) + 1] = rol32(y, 9); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#101: FILE: crypto/twofish.c:567:
+   CALC_K192_2 (q1[(b) ^ key[(j) + 24]], \$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#101: FILE: crypto/twofish.c:567:
+   CALC_K192_2 (q1[(b) ^ key[(j) + 24]], \

ERROR:CODE_INDENT: code indent should use tabs where possible
#102: FILE: crypto/twofish.c:568:
+^I        q1[(a) ^ key[(j) + 25]], \$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:CODE_INDENT: code indent should use tabs where possible
#103: FILE: crypto/twofish.c:569:
+^I        q0[(a) ^ key[(j) + 26]], \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#104: FILE: crypto/twofish.c:570:
+^I        q0[(b) ^ key[(j) + 27]], (j))$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'a' - possible side-effects?
#107: FILE: crypto/twofish.c:572:
+#define CALC_K256(a, j, k, l, m, n) { \
    x = CALC_K256_2 (k, l, 0); \
    y = CALC_K256_2 (m, n, 4); \
    y = rol32(y, 8); \
+   x += y; y += x; \
+   ctx->a[j] = x; \
+   ctx->a[(j) + 1] = rol32(y, 9); \
+}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'a' may be better as '(a)' to avoid precedence issues
#107: FILE: crypto/twofish.c:572:
+#define CALC_K256(a, j, k, l, m, n) { \
    x = CALC_K256_2 (k, l, 0); \
    y = CALC_K256_2 (m, n, 4); \
    y = rol32(y, 8); \
+   x += y; y += x; \
+   ctx->a[j] = x; \
+   ctx->a[(j) + 1] = rol32(y, 9); \
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'j' - possible side-effects?
#107: FILE: crypto/twofish.c:572:
+#define CALC_K256(a, j, k, l, m, n) { \
    x = CALC_K256_2 (k, l, 0); \
    y = CALC_K256_2 (m, n, 4); \
    y = rol32(y, 8); \
+   x += y; y += x; \
+   ctx->a[j] = x; \
+   ctx->a[(j) + 1] = rol32(y, 9); \
+}

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#114: FILE: crypto/twofish.c:576:
+   x += y; y += x; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#115: FILE: crypto/twofish.c:577:
+   ctx->a[j] = x; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#116: FILE: crypto/twofish.c:578:
+   ctx->a[(j) + 1] = rol32(y, 9); \$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'a' - possible side-effects?
#130: FILE: crypto/twofish.c:585:
+#define G1(a) ( \
+     (ctx->s[0][BYTE0(a)]) ^ (ctx->s[1][BYTE1(a)]) \
+   ^ (ctx->s[2][BYTE2(a)]) ^ (ctx->s[3][BYTE3(a)]) \
+)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#131: FILE: crypto/twofish.c:586:
+     (ctx->s[0][BYTE0(a)]) ^ (ctx->s[1][BYTE1(a)]) \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#132: FILE: crypto/twofish.c:587:
+   ^ (ctx->s[2][BYTE2(a)]) ^ (ctx->s[3][BYTE3(a)]) \$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'b' - possible side-effects?
#135: FILE: crypto/twofish.c:590:
+#define G2(b) ( \
+     (ctx->s[1][BYTE0(b)]) ^ (ctx->s[2][BYTE1(b)]) \
+   ^ (ctx->s[3][BYTE2(b)]) ^ (ctx->s[0][BYTE3(b)]) \
+)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#136: FILE: crypto/twofish.c:591:
+     (ctx->s[1][BYTE0(b)]) ^ (ctx->s[2][BYTE1(b)]) \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#137: FILE: crypto/twofish.c:592:
+   ^ (ctx->s[3][BYTE2(b)]) ^ (ctx->s[0][BYTE3(b)]) \$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#151: FILE: crypto/twofish.c:600:
+#define ENCROUND(n, a, b, c, d) { \
+   y = G2 (b); x = y + G1 (a); y += x; \
+   (c) = ror32((c) ^ (x + ctx->k[2 * (n)]), 1); \
+   (d) = rol32((d), 1) ^ (y + ctx->k[2 * (n) + 1]); \
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'c' - possible side-effects?
#151: FILE: crypto/twofish.c:600:
+#define ENCROUND(n, a, b, c, d) { \
+   y = G2 (b); x = y + G1 (a); y += x; \
+   (c) = ror32((c) ^ (x + ctx->k[2 * (n)]), 1); \
+   (d) = rol32((d), 1) ^ (y + ctx->k[2 * (n) + 1]); \
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'd' - possible side-effects?
#151: FILE: crypto/twofish.c:600:
+#define ENCROUND(n, a, b, c, d) { \
+   y = G2 (b); x = y + G1 (a); y += x; \
+   (c) = ror32((c) ^ (x + ctx->k[2 * (n)]), 1); \
+   (d) = rol32((d), 1) ^ (y + ctx->k[2 * (n) + 1]); \
+}

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#152: FILE: crypto/twofish.c:601:
+   y = G2 (b); x = y + G1 (a); y += x; \$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#152: FILE: crypto/twofish.c:601:
+   y = G2 (b); x = y + G1 (a); y += x; \

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#152: FILE: crypto/twofish.c:601:
+   y = G2 (b); x = y + G1 (a); y += x; \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#153: FILE: crypto/twofish.c:602:
+   (c) = ror32((c) ^ (x + ctx->k[2 * (n)]), 1); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#154: FILE: crypto/twofish.c:603:
+   (d) = rol32((d), 1) ^ (y + ctx->k[2 * (n) + 1]); \$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#164: FILE: crypto/twofish.c:606:
+#define DECROUND(n, a, b, c, d) { \
+   y = G2 (b); x = y + G1 (a); y += x; \
+   (d) = ror32((d) ^ (y + ctx->k[2 * (n) + 1]), 1); \
+   (c) = rol32((c), 1) ^ (x + ctx->k[2 * (n)]); \
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'c' - possible side-effects?
#164: FILE: crypto/twofish.c:606:
+#define DECROUND(n, a, b, c, d) { \
+   y = G2 (b); x = y + G1 (a); y += x; \
+   (d) = ror32((d) ^ (y + ctx->k[2 * (n) + 1]), 1); \
+   (c) = rol32((c), 1) ^ (x + ctx->k[2 * (n)]); \
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'd' - possible side-effects?
#164: FILE: crypto/twofish.c:606:
+#define DECROUND(n, a, b, c, d) { \
+   y = G2 (b); x = y + G1 (a); y += x; \
+   (d) = ror32((d) ^ (y + ctx->k[2 * (n) + 1]), 1); \
+   (c) = rol32((c), 1) ^ (x + ctx->k[2 * (n)]); \
+}

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#165: FILE: crypto/twofish.c:607:
+   y = G2 (b); x = y + G1 (a); y += x; \$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#165: FILE: crypto/twofish.c:607:
+   y = G2 (b); x = y + G1 (a); y += x; \

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#165: FILE: crypto/twofish.c:607:
+   y = G2 (b); x = y + G1 (a); y += x; \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#166: FILE: crypto/twofish.c:608:
+   (d) = ror32((d) ^ (y + ctx->k[2 * (n) + 1]), 1); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#167: FILE: crypto/twofish.c:609:
+   (c) = rol32((c), 1) ^ (x + ctx->k[2 * (n)]); \$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#174: FILE: crypto/twofish.c:615:
+#define ENCCYCLE(n) { \
    ENCROUND (2 * (n), a, b, c, d); \
+   ENCROUND (2 * (n) + 1, c, d, a, b); \
+}

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#177: FILE: crypto/twofish.c:617:
+   ENCROUND (2 * (n) + 1, c, d, a, b); \$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#177: FILE: crypto/twofish.c:617:
+   ENCROUND (2 * (n) + 1, c, d, a, b); \

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#181: FILE: crypto/twofish.c:620:
+#define DECCYCLE(n) { \
    DECROUND (2 * (n) + 1, c, d, a, b); \
+   DECROUND (2 * (n), a, b, c, d); \
+}

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#184: FILE: crypto/twofish.c:622:
+   DECROUND (2 * (n), a, b, c, d); \$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#184: FILE: crypto/twofish.c:622:
+   DECROUND (2 * (n), a, b, c, d); \

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#216: FILE: crypto/twofish.c:729:
+/* We do not unroll loops with CALC_Knnn macros: this would cost
+** x2.5 code size (+18k on i386) but would give only +7% speed:

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:SPACING: space prohibited after that open parenthesis '('
#224: FILE: crypto/twofish.c:737:
+		for ( i = 0; i < 8; i += 2 ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#224: FILE: crypto/twofish.c:737:
+		for ( i = 0; i < 8; i += 2 ) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#224: FILE: crypto/twofish.c:737:
+		for ( i = 0; i < 8; i += 2 ) {
+			CALC_K256 (w, i, q0[i], q1[i], q0[i+1], q1[i+1]);
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#225: FILE: crypto/twofish.c:738:
+			CALC_K256 (w, i, q0[i], q1[i], q0[i+1], q1[i+1]);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#225: FILE: crypto/twofish.c:738:
+			CALC_K256 (w, i, q0[i], q1[i], q0[i+1], q1[i+1]);
 			                                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#225: FILE: crypto/twofish.c:738:
+			CALC_K256 (w, i, q0[i], q1[i], q0[i+1], q1[i+1]);
 			                                            ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#227: FILE: crypto/twofish.c:740:
+		for ( i = 0; i < 32; i += 2 ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#227: FILE: crypto/twofish.c:740:
+		for ( i = 0; i < 32; i += 2 ) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#227: FILE: crypto/twofish.c:740:
+		for ( i = 0; i < 32; i += 2 ) {
+			CALC_K256 (k, i, q0[i+8], q1[i+8], q0[i+9], q1[i+9]);
+		}

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#228: FILE: crypto/twofish.c:741:
+			CALC_K256 (k, i, q0[i+8], q1[i+8], q0[i+9], q1[i+9]);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#228: FILE: crypto/twofish.c:741:
+			CALC_K256 (k, i, q0[i+8], q1[i+8], q0[i+9], q1[i+9]);
 			                     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#228: FILE: crypto/twofish.c:741:
+			CALC_K256 (k, i, q0[i+8], q1[i+8], q0[i+9], q1[i+9]);
 			                              ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#228: FILE: crypto/twofish.c:741:
+			CALC_K256 (k, i, q0[i+8], q1[i+8], q0[i+9], q1[i+9]);
 			                                       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#228: FILE: crypto/twofish.c:741:
+			CALC_K256 (k, i, q0[i+8], q1[i+8], q0[i+9], q1[i+9]);
 			                                                ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#259: FILE: crypto/twofish.c:750:
+		for ( i = 0; i < 8; i += 2 ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#259: FILE: crypto/twofish.c:750:
+		for ( i = 0; i < 8; i += 2 ) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#259: FILE: crypto/twofish.c:750:
+		for ( i = 0; i < 8; i += 2 ) {
+			CALC_K192 (w, i, q0[i], q1[i], q0[i+1], q1[i+1]);
+		}

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#260: FILE: crypto/twofish.c:751:
+			CALC_K192 (w, i, q0[i], q1[i], q0[i+1], q1[i+1]);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#260: FILE: crypto/twofish.c:751:
+			CALC_K192 (w, i, q0[i], q1[i], q0[i+1], q1[i+1]);
 			                                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#260: FILE: crypto/twofish.c:751:
+			CALC_K192 (w, i, q0[i], q1[i], q0[i+1], q1[i+1]);
 			                                            ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#262: FILE: crypto/twofish.c:753:
+		for ( i = 0; i < 32; i += 2 ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#262: FILE: crypto/twofish.c:753:
+		for ( i = 0; i < 32; i += 2 ) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#262: FILE: crypto/twofish.c:753:
+		for ( i = 0; i < 32; i += 2 ) {
+			CALC_K192 (k, i, q0[i+8], q1[i+8], q0[i+9], q1[i+9]);
+		}

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#263: FILE: crypto/twofish.c:754:
+			CALC_K192 (k, i, q0[i+8], q1[i+8], q0[i+9], q1[i+9]);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#263: FILE: crypto/twofish.c:754:
+			CALC_K192 (k, i, q0[i+8], q1[i+8], q0[i+9], q1[i+9]);
 			                     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#263: FILE: crypto/twofish.c:754:
+			CALC_K192 (k, i, q0[i+8], q1[i+8], q0[i+9], q1[i+9]);
 			                              ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#263: FILE: crypto/twofish.c:754:
+			CALC_K192 (k, i, q0[i+8], q1[i+8], q0[i+9], q1[i+9]);
 			                                       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#263: FILE: crypto/twofish.c:754:
+			CALC_K192 (k, i, q0[i+8], q1[i+8], q0[i+9], q1[i+9]);
 			                                                ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#294: FILE: crypto/twofish.c:763:
+		for ( i = 0; i < 8; i += 2 ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#294: FILE: crypto/twofish.c:763:
+		for ( i = 0; i < 8; i += 2 ) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#294: FILE: crypto/twofish.c:763:
+		for ( i = 0; i < 8; i += 2 ) {
+			CALC_K (w, i, q0[i], q1[i], q0[i+1], q1[i+1]);
+		}

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#295: FILE: crypto/twofish.c:764:
+			CALC_K (w, i, q0[i], q1[i], q0[i+1], q1[i+1]);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#295: FILE: crypto/twofish.c:764:
+			CALC_K (w, i, q0[i], q1[i], q0[i+1], q1[i+1]);
 			                                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#295: FILE: crypto/twofish.c:764:
+			CALC_K (w, i, q0[i], q1[i], q0[i+1], q1[i+1]);
 			                                         ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#297: FILE: crypto/twofish.c:766:
+		for ( i = 0; i < 32; i += 2 ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#297: FILE: crypto/twofish.c:766:
+		for ( i = 0; i < 32; i += 2 ) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#297: FILE: crypto/twofish.c:766:
+		for ( i = 0; i < 32; i += 2 ) {
+			CALC_K (k, i, q0[i+8], q1[i+8], q0[i+9], q1[i+9]);
+		}

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#298: FILE: crypto/twofish.c:767:
+			CALC_K (k, i, q0[i+8], q1[i+8], q0[i+9], q1[i+9]);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#298: FILE: crypto/twofish.c:767:
+			CALC_K (k, i, q0[i+8], q1[i+8], q0[i+9], q1[i+9]);
 			                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#298: FILE: crypto/twofish.c:767:
+			CALC_K (k, i, q0[i+8], q1[i+8], q0[i+9], q1[i+9]);
 			                           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#298: FILE: crypto/twofish.c:767:
+			CALC_K (k, i, q0[i+8], q1[i+8], q0[i+9], q1[i+9]);
 			                                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#298: FILE: crypto/twofish.c:767:
+			CALC_K (k, i, q0[i+8], q1[i+8], q0[i+9], q1[i+9]);
 			                                             ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#308: FILE: crypto/twofish.c:792:
+	ENCCYCLE (0); /* ~70 insns each */

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#317: FILE: crypto/twofish.c:827:
+	DECCYCLE (7); /* ~70 insns each */

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000175154.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 15 errors, 51 warnings, 46 checks, 271 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000175154.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
