WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#25: 
This adds IO_CMD_IO_CMD_P{READ,WRITE}V to let userspace specify buffers with

WARNING:BAD_SIGN_OFF: Do not use whitespace before Signed-off-by:
#33: 
  Signed-off-by: Zach Brown <zach.brown@oracle.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#87: FILE: fs/aio.c:1305:
+	BUG_ON(ret <= 0);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:MINMAX: min() should probably be min_t(size_t, iov->iov_len, ret)
#90: FILE: fs/aio.c:1308:
+		ssize_t this = min(iov->iov_len, (size_t)ret);

WARNING:LINE_SPACING: Missing a blank line after declarations
#91: FILE: fs/aio.c:1309:
+		ssize_t this = min(iov->iov_len, (size_t)ret);
+		iov->iov_base += this;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#102: FILE: fs/aio.c:1320:
+	 * the remaining iovecs */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#103: FILE: fs/aio.c:1321:
+	BUG_ON(ret > 0 && iocb->ki_left == 0);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kiocb *' should also have an identifier name
#111: FILE: fs/aio.c:1329:
+	ssize_t (*rw_op)(struct kiocb *, const struct iovec *,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct iovec *' should also have an identifier name
#111: FILE: fs/aio.c:1329:
+	ssize_t (*rw_op)(struct kiocb *, const struct iovec *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#111: FILE: fs/aio.c:1329:
+	ssize_t (*rw_op)(struct kiocb *, const struct iovec *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t' should also have an identifier name
#111: FILE: fs/aio.c:1329:
+	ssize_t (*rw_op)(struct kiocb *, const struct iovec *,

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#128: FILE: fs/aio.c:1346:
+	 * regular file. */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ret == 0'
#135: FILE: fs/aio.c:1353:
+	if ((ret == 0) || (iocb->ki_left == 0))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'iocb->ki_left == 0'
#135: FILE: fs/aio.c:1353:
+	if ((ret == 0) || (iocb->ki_left == 0))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#167: FILE: fs/aio.c:1461:
+}^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#226: FILE: fs/block_dev.c:781:
+static ssize_t blkdev_file_aio_writev(struct kiocb *iocb,
+					const struct iovec *iov,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#232: FILE: fs/block_dev.c:787:
+
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#240: FILE: fs/block_dev.c:810:
+  ^I.aio_readv^I= generic_file_aio_readv,$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#240: FILE: fs/block_dev.c:810:
+  ^I.aio_readv^I= generic_file_aio_readv,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#240: FILE: fs/block_dev.c:810:
+  ^I.aio_readv^I= generic_file_aio_readv,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#242: FILE: fs/block_dev.c:812:
+  ^I.aio_writev^I= blkdev_file_aio_writev,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#242: FILE: fs/block_dev.c:812:
+  ^I.aio_writev^I= blkdev_file_aio_writev,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#242: FILE: fs/block_dev.c:812:
+  ^I.aio_writev^I= blkdev_file_aio_writev,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#341: FILE: fs/ntfs/file.c:2188:
+static ssize_t ntfs_file_aio_writev(struct kiocb *iocb, const struct iovec *iov,
+		unsigned long nr_segs, loff_t pos)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#365: FILE: fs/ntfs/file.c:2212:
+static ssize_t ntfs_file_aio_write(struct kiocb *iocb, const char __user *buf,
+		size_t count, loff_t pos)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#397: FILE: fs/read_write.c:430:
+ssize_t rw_copy_check_uvector(const struct iovec __user * uvector,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#397: FILE: fs/read_write.c:430:
+ssize_t rw_copy_check_uvector(const struct iovec __user * uvector,
+			      unsigned long nr_segs, unsigned long fast_segs,
+			      struct iovec *fast_pointer,
+			      struct iovec **ret_pointer)
+  {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#401: FILE: fs/read_write.c:434:
+  {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#403: FILE: fs/read_write.c:436:
+  ^Issize_t ret;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#403: FILE: fs/read_write.c:436:
+  ^Issize_t ret;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#403: FILE: fs/read_write.c:436:
+  ^Issize_t ret;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#405: FILE: fs/read_write.c:438:
+  $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#405: FILE: fs/read_write.c:438:
+  $

ERROR:CODE_INDENT: code indent should use tabs where possible
#406: FILE: fs/read_write.c:439:
+  ^I/*$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#406: FILE: fs/read_write.c:439:
+  ^I/*$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#406: FILE: fs/read_write.c:439:
+  ^I/*$

ERROR:CODE_INDENT: code indent should use tabs where possible
#407: FILE: fs/read_write.c:440:
+  ^I * SuS says "The readv() function *may* fail if the iovcnt argument$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#407: FILE: fs/read_write.c:440:
+  ^I * SuS says "The readv() function *may* fail if the iovcnt argument$

ERROR:CODE_INDENT: code indent should use tabs where possible
#408: FILE: fs/read_write.c:441:
+  ^I * was less than or equal to 0, or greater than {IOV_MAX}.  Linux has$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#408: FILE: fs/read_write.c:441:
+  ^I * was less than or equal to 0, or greater than {IOV_MAX}.  Linux has$

ERROR:CODE_INDENT: code indent should use tabs where possible
#409: FILE: fs/read_write.c:442:
+  ^I * traditionally returned zero for zero segments, so...$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#409: FILE: fs/read_write.c:442:
+  ^I * traditionally returned zero for zero segments, so...$

ERROR:CODE_INDENT: code indent should use tabs where possible
#410: FILE: fs/read_write.c:443:
+  ^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#410: FILE: fs/read_write.c:443:
+  ^I */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#413: FILE: fs/read_write.c:446:
+  ^I^Igoto out;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#413: FILE: fs/read_write.c:446:
+  ^I^Igoto out;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#413: FILE: fs/read_write.c:446:
+  ^I^Igoto out;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#415: FILE: fs/read_write.c:448:
+  $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#415: FILE: fs/read_write.c:448:
+  $

ERROR:CODE_INDENT: code indent should use tabs where possible
#416: FILE: fs/read_write.c:449:
+  ^I/*$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#416: FILE: fs/read_write.c:449:
+  ^I/*$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#416: FILE: fs/read_write.c:449:
+  ^I/*$

ERROR:CODE_INDENT: code indent should use tabs where possible
#417: FILE: fs/read_write.c:450:
+  ^I * First get the "struct iovec" from user memory and$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#417: FILE: fs/read_write.c:450:
+  ^I * First get the "struct iovec" from user memory and$

ERROR:CODE_INDENT: code indent should use tabs where possible
#418: FILE: fs/read_write.c:451:
+  ^I * verify all the pointers$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#418: FILE: fs/read_write.c:451:
+  ^I * verify all the pointers$

ERROR:CODE_INDENT: code indent should use tabs where possible
#419: FILE: fs/read_write.c:452:
+  ^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#419: FILE: fs/read_write.c:452:
+  ^I */$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'nr_segs > UIO_MAXIOV'
#420: FILE: fs/read_write.c:453:
+	if ((nr_segs > UIO_MAXIOV) || (nr_segs <= 0)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'nr_segs <= 0'
#420: FILE: fs/read_write.c:453:
+	if ((nr_segs > UIO_MAXIOV) || (nr_segs <= 0)) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#422: FILE: fs/read_write.c:455:
+  ^I^Igoto out;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#422: FILE: fs/read_write.c:455:
+  ^I^Igoto out;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#422: FILE: fs/read_write.c:455:
+  ^I^Igoto out;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#425: FILE: fs/read_write.c:458:
+  ^I^Iiov = kmalloc(nr_segs*sizeof(struct iovec), GFP_KERNEL);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#425: FILE: fs/read_write.c:458:
+  ^I^Iiov = kmalloc(nr_segs*sizeof(struct iovec), GFP_KERNEL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#425: FILE: fs/read_write.c:458:
+  ^I^Iiov = kmalloc(nr_segs*sizeof(struct iovec), GFP_KERNEL);$

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#425: FILE: fs/read_write.c:458:
+  		iov = kmalloc(nr_segs*sizeof(struct iovec), GFP_KERNEL);
   		                     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#425: FILE: fs/read_write.c:458:
+  		iov = kmalloc(nr_segs*sizeof(struct iovec), GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!iov"
#426: FILE: fs/read_write.c:459:
+		if (iov == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:CODE_INDENT: code indent should use tabs where possible
#428: FILE: fs/read_write.c:461:
+  ^I^I^Igoto out;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#428: FILE: fs/read_write.c:461:
+  ^I^I^Igoto out;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#428: FILE: fs/read_write.c:461:
+  ^I^I^Igoto out;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#430: FILE: fs/read_write.c:463:
+  ^I}$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#430: FILE: fs/read_write.c:463:
+  ^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#430: FILE: fs/read_write.c:463:
+  ^I}$

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#431: FILE: fs/read_write.c:464:
+	if (copy_from_user(iov, uvector, nr_segs*sizeof(*uvector))) {
 	                                        ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#433: FILE: fs/read_write.c:466:
+  ^I^Igoto out;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#433: FILE: fs/read_write.c:466:
+  ^I^Igoto out;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#433: FILE: fs/read_write.c:466:
+  ^I^Igoto out;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#435: FILE: fs/read_write.c:468:
+  $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#435: FILE: fs/read_write.c:468:
+  $

ERROR:CODE_INDENT: code indent should use tabs where possible
#436: FILE: fs/read_write.c:469:
+  ^I/*$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#436: FILE: fs/read_write.c:469:
+  ^I/*$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#436: FILE: fs/read_write.c:469:
+  ^I/*$

ERROR:CODE_INDENT: code indent should use tabs where possible
#441: FILE: fs/read_write.c:474:
+  ^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#441: FILE: fs/read_write.c:474:
+  ^I */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#443: FILE: fs/read_write.c:476:
+  ^Ifor (seg = 0; seg < nr_segs; seg++) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#443: FILE: fs/read_write.c:476:
+  ^Ifor (seg = 0; seg < nr_segs; seg++) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#443: FILE: fs/read_write.c:476:
+  ^Ifor (seg = 0; seg < nr_segs; seg++) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#444: FILE: fs/read_write.c:477:
+  ^I^Ivoid __user *buf = iov[seg].iov_base;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#444: FILE: fs/read_write.c:477:
+  ^I^Ivoid __user *buf = iov[seg].iov_base;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#444: FILE: fs/read_write.c:477:
+  ^I^Ivoid __user *buf = iov[seg].iov_base;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#445: FILE: fs/read_write.c:478:
+  ^I^Issize_t len = (ssize_t)iov[seg].iov_len;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#445: FILE: fs/read_write.c:478:
+  ^I^Issize_t len = (ssize_t)iov[seg].iov_len;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#445: FILE: fs/read_write.c:478:
+  ^I^Issize_t len = (ssize_t)iov[seg].iov_len;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#446: FILE: fs/read_write.c:479:
+  $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#446: FILE: fs/read_write.c:479:
+  $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#448: FILE: fs/read_write.c:481:
+		 * it's about to overflow ssize_t */

ERROR:CODE_INDENT: code indent should use tabs where possible
#451: FILE: fs/read_write.c:484:
+  ^I^I^Igoto out;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#451: FILE: fs/read_write.c:484:
+  ^I^I^Igoto out;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#451: FILE: fs/read_write.c:484:
+  ^I^I^Igoto out;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#455: FILE: fs/read_write.c:488:
+  ^I^I^Igoto out;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#455: FILE: fs/read_write.c:488:
+  ^I^I^Igoto out;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#455: FILE: fs/read_write.c:488:
+  ^I^I^Igoto out;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#459: FILE: fs/read_write.c:492:
+  ^I}$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#459: FILE: fs/read_write.c:492:
+  ^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#459: FILE: fs/read_write.c:492:
+  ^I}$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#534: FILE: fs/read_write.c:520:
+^Itot_len = rw_copy_check_uvector(uvector, nr_segs, ARRAY_SIZE(iovstack), $

WARNING:SPACING: Unnecessary space before function pointer arguments
#601: FILE: include/linux/fs.h:957:
+	ssize_t (*aio_readv) (struct kiocb *, const struct iovec *, unsigned long, loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kiocb *' should also have an identifier name
#601: FILE: include/linux/fs.h:957:
+	ssize_t (*aio_readv) (struct kiocb *, const struct iovec *, unsigned long, loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct iovec *' should also have an identifier name
#601: FILE: include/linux/fs.h:957:
+	ssize_t (*aio_readv) (struct kiocb *, const struct iovec *, unsigned long, loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#601: FILE: include/linux/fs.h:957:
+	ssize_t (*aio_readv) (struct kiocb *, const struct iovec *, unsigned long, loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t' should also have an identifier name
#601: FILE: include/linux/fs.h:957:
+	ssize_t (*aio_readv) (struct kiocb *, const struct iovec *, unsigned long, loff_t);

WARNING:SPACING: Unnecessary space before function pointer arguments
#604: FILE: include/linux/fs.h:960:
+	ssize_t (*aio_writev) (struct kiocb *, const struct iovec *, unsigned long, loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kiocb *' should also have an identifier name
#604: FILE: include/linux/fs.h:960:
+	ssize_t (*aio_writev) (struct kiocb *, const struct iovec *, unsigned long, loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct iovec *' should also have an identifier name
#604: FILE: include/linux/fs.h:960:
+	ssize_t (*aio_writev) (struct kiocb *, const struct iovec *, unsigned long, loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#604: FILE: include/linux/fs.h:960:
+	ssize_t (*aio_writev) (struct kiocb *, const struct iovec *, unsigned long, loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t' should also have an identifier name
#604: FILE: include/linux/fs.h:960:
+	ssize_t (*aio_writev) (struct kiocb *, const struct iovec *, unsigned long, loff_t);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#612: FILE: include/linux/fs.h:1010:
+ssize_t rw_copy_check_uvector(const struct iovec __user * uvector,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#624: FILE: include/linux/fs.h:1507:
+extern ssize_t generic_file_aio_readv(struct kiocb *, const struct iovec *, unsigned long, loff_t);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kiocb *' should also have an identifier name
#624: FILE: include/linux/fs.h:1507:
+extern ssize_t generic_file_aio_readv(struct kiocb *, const struct iovec *, unsigned long, loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct iovec *' should also have an identifier name
#624: FILE: include/linux/fs.h:1507:
+extern ssize_t generic_file_aio_readv(struct kiocb *, const struct iovec *, unsigned long, loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#624: FILE: include/linux/fs.h:1507:
+extern ssize_t generic_file_aio_readv(struct kiocb *, const struct iovec *, unsigned long, loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t' should also have an identifier name
#624: FILE: include/linux/fs.h:1507:
+extern ssize_t generic_file_aio_readv(struct kiocb *, const struct iovec *, unsigned long, loff_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#627: FILE: include/linux/fs.h:1510:
+extern ssize_t generic_file_aio_writev(struct kiocb *, const struct iovec *, unsigned long, loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kiocb *' should also have an identifier name
#627: FILE: include/linux/fs.h:1510:
+extern ssize_t generic_file_aio_writev(struct kiocb *, const struct iovec *, unsigned long, loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct iovec *' should also have an identifier name
#627: FILE: include/linux/fs.h:1510:
+extern ssize_t generic_file_aio_writev(struct kiocb *, const struct iovec *, unsigned long, loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#627: FILE: include/linux/fs.h:1510:
+extern ssize_t generic_file_aio_writev(struct kiocb *, const struct iovec *, unsigned long, loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t' should also have an identifier name
#627: FILE: include/linux/fs.h:1510:
+extern ssize_t generic_file_aio_writev(struct kiocb *, const struct iovec *, unsigned long, loff_t);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#640: FILE: mm/filemap.c:1058:
+generic_file_aio_readv(struct kiocb *iocb, const struct iovec *iov,
+		unsigned long nr_segs, loff_t pos)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#642: FILE: mm/filemap.c:1060:
+	BUG_ON(iocb->ki_pos != pos);

ERROR:CODE_INDENT: code indent should use tabs where possible
#658: FILE: mm/filemap.c:2154:
+^I^I^I        unsigned long nr_segs, loff_t pos)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#658: FILE: mm/filemap.c:2154:
+ssize_t generic_file_aio_writev(struct kiocb *iocb, const struct iovec *iov,
+			        unsigned long nr_segs, loff_t pos)

ERROR:CODE_INDENT: code indent should use tabs where possible
#672: FILE: mm/filemap.c:2164:
+ ^Iret = generic_file_aio_write_nolock(iocb, iov, nr_segs, &iocb->ki_pos);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#672: FILE: mm/filemap.c:2164:
+ ^Iret = generic_file_aio_write_nolock(iocb, iov, nr_segs, &iocb->ki_pos);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#672: FILE: mm/filemap.c:2164:
+ ^Iret = generic_file_aio_write_nolock(iocb, iov, nr_segs, &iocb->ki_pos);$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#678: FILE: mm/filemap.c:2170:
 
+

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000138799.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 37 errors, 84 warnings, 16 checks, 566 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000138799.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
