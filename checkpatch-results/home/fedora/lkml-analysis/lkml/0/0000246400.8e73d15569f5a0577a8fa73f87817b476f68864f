ERROR:CODE_INDENT: code indent should use tabs where possible
#165: FILE: mm/memory.c:1484:
+        pmd_t *pmd, pte_t orig_entry)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#165: FILE: mm/memory.c:1484:
+        pmd_t *pmd, pte_t orig_entry)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#289: FILE: mm/memory.c:1699:
+       ^I^Ipmd_t *new = pmd_alloc_one(mm, address);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#289: FILE: mm/memory.c:1699:
+       ^I^Ipmd_t *new = pmd_alloc_one(mm, address);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#289: FILE: mm/memory.c:1699:
+       ^I^Ipmd_t *new = pmd_alloc_one(mm, address);$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#290: FILE: mm/memory.c:1700:
+		if (!new) return VM_FAULT_OOM;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#293: FILE: mm/memory.c:1703:
+		if (!pgd_test_and_populate(mm, pgd, new)) pmd_free(new);

ERROR:CODE_INDENT: code indent should use tabs where possible
#296: FILE: mm/memory.c:1706:
+        pmd = pmd_offset(pgd, address);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#296: FILE: mm/memory.c:1706:
+        pmd = pmd_offset(pgd, address);$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#308: FILE: mm/memory.c:1715:
+			if (!new) return VM_FAULT_OOM;

CHECK:MACRO_ARG_REUSE: Macro argument reuse '__ptep' - possible side-effects?
#340: FILE: include/asm-generic/pgtable.h:137:
+#define ptep_xchg_flush(__vma, __address, __ptep, __pteval)		\
+({									\
+	pte_t __pte;							\
+	spin_lock(&mm->page_table_lock);				\
+	__pte = *(__ptep);						\
+	set_pte(__ptep, __pteval);					\
+	flush_tlb_page(__vma, __address);				\
+	spin_unlock(&mm->page_table_lock);				\
+	__pte;								\
+})

CHECK:LINE_SPACING: Please don't use multiple blank lines
#351: FILE: include/asm-generic/pgtable.h:148:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#362: FILE: include/asm-generic/pgtable.h:159:
+
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse '__ptep' - possible side-effects?
#363: FILE: include/asm-generic/pgtable.h:160:
+#define ptep_cmpxchg(__vma, __addr, __ptep, __oldval, __newval)		\
+({									\
+	int __rc;							\
+	spin_lock(&mm->page_table_lock);				\
+	__rc = pte_same(*(__ptep), __oldval);				\
+	if (__rc) set_pte(__ptep, __newval);				\
+	flush_tlb_page(__vma, __addr);					\
+	spin_unlock(&mm->page_table_lock);				\
+	__rc;								\
+})

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#368: FILE: include/asm-generic/pgtable.h:165:
+	if (__rc) set_pte(__ptep, __newval);				\

CHECK:MACRO_ARG_REUSE: Macro argument reuse '__pgd' - possible side-effects?
#374: FILE: include/asm-generic/pgtable.h:171:
+#define pgd_test_and_populate(__mm, __pgd, __pmd)			\
+({									\
+	int __rc;							\
+	spin_lock(&mm->page_table_lock);				\
+	__rc = !pgd_present(*(__pgd));					\
+	if (__rc) pgd_populate(__mm, __pgd, __pmd);			\
+	spin_unlock(&mm->page_table_lock);				\
+	__rc;								\
+})

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#379: FILE: include/asm-generic/pgtable.h:176:
+	if (__rc) pgd_populate(__mm, __pgd, __pmd);			\

CHECK:MACRO_ARG_REUSE: Macro argument reuse '__pmd' - possible side-effects?
#384: FILE: include/asm-generic/pgtable.h:181:
+#define pmd_test_and_populate(__mm, __pmd, __page)			\
+({									\
+	int __rc;							\
+	spin_lock(&mm->page_table_lock);				\
+	__rc = !pmd_present(*(__pmd));					\
+	if (__rc) pmd_populate(__mm, __pmd, __page);			\
+	spin_unlock(&mm->page_table_lock);				\
+	__rc;								\
+})

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#389: FILE: include/asm-generic/pgtable.h:186:
+	if (__rc) pmd_populate(__mm, __pmd, __page);			\

CHECK:LINE_SPACING: Please don't use multiple blank lines
#394: FILE: include/asm-generic/pgtable.h:191:
+
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse '__vma' - possible side-effects?
#398: FILE: include/asm-generic/pgtable.h:195:
+#define ptep_xchg_flush(__vma, __address, __ptep, __pteval)		\
+({									\
+	pte_t __pte = ptep_xchg((__vma)->vm_mm, __ptep, __pteval);	\
+	flush_tlb_page(__vma, __address);				\
+	__pte;								\
+})

CHECK:BRACES: Unbalanced braces around else statement
#446: FILE: mm/rmap.c:579:
+	} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000246400.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 9 errors, 4 warnings, 9 checks, 411 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000246400.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
