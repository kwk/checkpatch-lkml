WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#29: 
> > wondering about an alternate solution.  What would happen if LDT_ENTRIES was

WARNING:TYPO_SPELLING: 'warnig' may be misspelled - perhaps 'warning'?
#61: FILE: arch/i386/kernel/ldt.c:22:
+#ifdef CONFIG_SMP /* avoids "defined but not used" warnig */
                                                    ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#64: FILE: arch/i386/kernel/ldt.c:25:
+       if (current->mm)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#64: FILE: arch/i386/kernel/ldt.c:25:
+       if (current->mm)
+               load_LDT(&current->mm->context);

ERROR:CODE_INDENT: code indent should use tabs where possible
#65: FILE: arch/i386/kernel/ldt.c:26:
+               load_LDT(&current->mm->context);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#65: FILE: arch/i386/kernel/ldt.c:26:
+               load_LDT(&current->mm->context);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#71: FILE: arch/i386/kernel/ldt.c:32:
+       void *oldldt;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#72: FILE: arch/i386/kernel/ldt.c:33:
+       void *newldt;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#73: FILE: arch/i386/kernel/ldt.c:34:
+       int oldsize;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#75: FILE: arch/i386/kernel/ldt.c:36:
+       if (mincount <= pc->size)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#75: FILE: arch/i386/kernel/ldt.c:36:
+       if (mincount <= pc->size)
+               return 0;

ERROR:CODE_INDENT: code indent should use tabs where possible
#76: FILE: arch/i386/kernel/ldt.c:37:
+               return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#76: FILE: arch/i386/kernel/ldt.c:37:
+               return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#77: FILE: arch/i386/kernel/ldt.c:38:
+       oldsize = pc->size;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#78: FILE: arch/i386/kernel/ldt.c:39:
+       mincount = (mincount+511)&(~511);$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#78: FILE: arch/i386/kernel/ldt.c:39:
+       mincount = (mincount+511)&(~511);
                            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#78: FILE: arch/i386/kernel/ldt.c:39:
+       mincount = (mincount+511)&(~511);
                                 ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#79: FILE: arch/i386/kernel/ldt.c:40:
+       if (mincount*LDT_ENTRY_SIZE > PAGE_SIZE)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#79: FILE: arch/i386/kernel/ldt.c:40:
+       if (mincount*LDT_ENTRY_SIZE > PAGE_SIZE)
+               newldt = vmalloc(mincount*LDT_ENTRY_SIZE);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#79: FILE: arch/i386/kernel/ldt.c:40:
+       if (mincount*LDT_ENTRY_SIZE > PAGE_SIZE)
                    ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#80: FILE: arch/i386/kernel/ldt.c:41:
+               newldt = vmalloc(mincount*LDT_ENTRY_SIZE);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#80: FILE: arch/i386/kernel/ldt.c:41:
+               newldt = vmalloc(mincount*LDT_ENTRY_SIZE);$

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#80: FILE: arch/i386/kernel/ldt.c:41:
+               newldt = vmalloc(mincount*LDT_ENTRY_SIZE);
                                         ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#81: FILE: arch/i386/kernel/ldt.c:42:
+       else$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#81: FILE: arch/i386/kernel/ldt.c:42:
+       else
+               newldt = kmalloc(mincount*LDT_ENTRY_SIZE, GFP_KERNEL);

ERROR:CODE_INDENT: code indent should use tabs where possible
#82: FILE: arch/i386/kernel/ldt.c:43:
+               newldt = kmalloc(mincount*LDT_ENTRY_SIZE, GFP_KERNEL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#82: FILE: arch/i386/kernel/ldt.c:43:
+               newldt = kmalloc(mincount*LDT_ENTRY_SIZE, GFP_KERNEL);$

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#82: FILE: arch/i386/kernel/ldt.c:43:
+               newldt = kmalloc(mincount*LDT_ENTRY_SIZE, GFP_KERNEL);
                                         ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#84: FILE: arch/i386/kernel/ldt.c:45:
+       if (!newldt)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#84: FILE: arch/i386/kernel/ldt.c:45:
+       if (!newldt)
+               return -ENOMEM;

ERROR:CODE_INDENT: code indent should use tabs where possible
#85: FILE: arch/i386/kernel/ldt.c:46:
+               return -ENOMEM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#85: FILE: arch/i386/kernel/ldt.c:46:
+               return -ENOMEM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#87: FILE: arch/i386/kernel/ldt.c:48:
+       if (oldsize)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#87: FILE: arch/i386/kernel/ldt.c:48:
+       if (oldsize)
+               memcpy(newldt, pc->ldt, oldsize*LDT_ENTRY_SIZE);

ERROR:CODE_INDENT: code indent should use tabs where possible
#88: FILE: arch/i386/kernel/ldt.c:49:
+               memcpy(newldt, pc->ldt, oldsize*LDT_ENTRY_SIZE);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#88: FILE: arch/i386/kernel/ldt.c:49:
+               memcpy(newldt, pc->ldt, oldsize*LDT_ENTRY_SIZE);$

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#88: FILE: arch/i386/kernel/ldt.c:49:
+               memcpy(newldt, pc->ldt, oldsize*LDT_ENTRY_SIZE);
                                               ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#89: FILE: arch/i386/kernel/ldt.c:50:
+       oldldt = pc->ldt;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#90: FILE: arch/i386/kernel/ldt.c:51:
+       memset(newldt+oldsize*LDT_ENTRY_SIZE, 0, (mincount-oldsize)*LDT_ENTRY_SIZE);$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#90: FILE: arch/i386/kernel/ldt.c:51:
+       memset(newldt+oldsize*LDT_ENTRY_SIZE, 0, (mincount-oldsize)*LDT_ENTRY_SIZE);
                     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#90: FILE: arch/i386/kernel/ldt.c:51:
+       memset(newldt+oldsize*LDT_ENTRY_SIZE, 0, (mincount-oldsize)*LDT_ENTRY_SIZE);
                             ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#90: FILE: arch/i386/kernel/ldt.c:51:
+       memset(newldt+oldsize*LDT_ENTRY_SIZE, 0, (mincount-oldsize)*LDT_ENTRY_SIZE);
                                                          ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#90: FILE: arch/i386/kernel/ldt.c:51:
+       memset(newldt+oldsize*LDT_ENTRY_SIZE, 0, (mincount-oldsize)*LDT_ENTRY_SIZE);
                                                                   ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#91: FILE: arch/i386/kernel/ldt.c:52:
+       wmb();$

WARNING:MEMORY_BARRIER: memory barrier without comment
#91: FILE: arch/i386/kernel/ldt.c:52:
+       wmb();

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#92: FILE: arch/i386/kernel/ldt.c:53:
+       pc->ldt = newldt;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#93: FILE: arch/i386/kernel/ldt.c:54:
+       pc->size = mincount;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#94: FILE: arch/i386/kernel/ldt.c:55:
+       if (reload) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#94: FILE: arch/i386/kernel/ldt.c:55:
+       if (reload) {
+               load_LDT(pc);

ERROR:CODE_INDENT: code indent should use tabs where possible
#95: FILE: arch/i386/kernel/ldt.c:56:
+               load_LDT(pc);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#95: FILE: arch/i386/kernel/ldt.c:56:
+               load_LDT(pc);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#97: FILE: arch/i386/kernel/ldt.c:58:
+               if (current->mm->cpu_vm_mask != (1<<smp_processor_id()))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#97: FILE: arch/i386/kernel/ldt.c:58:
+               if (current->mm->cpu_vm_mask != (1<<smp_processor_id()))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#97: FILE: arch/i386/kernel/ldt.c:58:
+               if (current->mm->cpu_vm_mask != (1<<smp_processor_id()))
+                       smp_call_function(flush_ldt, 0, 1, 1);

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#97: FILE: arch/i386/kernel/ldt.c:58:
+               if (current->mm->cpu_vm_mask != (1<<smp_processor_id()))
                                                  ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#98: FILE: arch/i386/kernel/ldt.c:59:
+                       smp_call_function(flush_ldt, 0, 1, 1);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#98: FILE: arch/i386/kernel/ldt.c:59:
+                       smp_call_function(flush_ldt, 0, 1, 1);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#100: FILE: arch/i386/kernel/ldt.c:61:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#101: FILE: arch/i386/kernel/ldt.c:62:
+       wmb();$

WARNING:MEMORY_BARRIER: memory barrier without comment
#101: FILE: arch/i386/kernel/ldt.c:62:
+       wmb();

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#102: FILE: arch/i386/kernel/ldt.c:63:
+       if (oldsize) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#102: FILE: arch/i386/kernel/ldt.c:63:
+       if (oldsize) {
+               if (oldsize*LDT_ENTRY_SIZE > PAGE_SIZE)

ERROR:CODE_INDENT: code indent should use tabs where possible
#103: FILE: arch/i386/kernel/ldt.c:64:
+               if (oldsize*LDT_ENTRY_SIZE > PAGE_SIZE)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#103: FILE: arch/i386/kernel/ldt.c:64:
+               if (oldsize*LDT_ENTRY_SIZE > PAGE_SIZE)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#103: FILE: arch/i386/kernel/ldt.c:64:
+               if (oldsize*LDT_ENTRY_SIZE > PAGE_SIZE)
+                       vfree(oldldt);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#103: FILE: arch/i386/kernel/ldt.c:64:
+               if (oldsize*LDT_ENTRY_SIZE > PAGE_SIZE)
                           ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#104: FILE: arch/i386/kernel/ldt.c:65:
+                       vfree(oldldt);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#104: FILE: arch/i386/kernel/ldt.c:65:
+                       vfree(oldldt);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#105: FILE: arch/i386/kernel/ldt.c:66:
+               else$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#105: FILE: arch/i386/kernel/ldt.c:66:
+               else$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#105: FILE: arch/i386/kernel/ldt.c:66:
+               else
+                       kfree(oldldt);

ERROR:CODE_INDENT: code indent should use tabs where possible
#106: FILE: arch/i386/kernel/ldt.c:67:
+                       kfree(oldldt);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#106: FILE: arch/i386/kernel/ldt.c:67:
+                       kfree(oldldt);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#107: FILE: arch/i386/kernel/ldt.c:68:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#108: FILE: arch/i386/kernel/ldt.c:69:
+       return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#113: FILE: arch/i386/kernel/ldt.c:74:
+       int err = alloc_ldt(new, old->size, 0);$

WARNING:LINE_SPACING: Missing a blank line after declarations
#114: FILE: arch/i386/kernel/ldt.c:75:
+       int err = alloc_ldt(new, old->size, 0);
+       if (err < 0) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#114: FILE: arch/i386/kernel/ldt.c:75:
+       if (err < 0) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#114: FILE: arch/i386/kernel/ldt.c:75:
+       if (err < 0) {
+               printk(KERN_WARNING "ldt allocation failed\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#115: FILE: arch/i386/kernel/ldt.c:76:
+               printk(KERN_WARNING "ldt allocation failed\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#115: FILE: arch/i386/kernel/ldt.c:76:
+               printk(KERN_WARNING "ldt allocation failed\n");$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#115: FILE: arch/i386/kernel/ldt.c:76:
+               printk(KERN_WARNING "ldt allocation failed\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#116: FILE: arch/i386/kernel/ldt.c:77:
+               new->size = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#116: FILE: arch/i386/kernel/ldt.c:77:
+               new->size = 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#117: FILE: arch/i386/kernel/ldt.c:78:
+               return err;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#117: FILE: arch/i386/kernel/ldt.c:78:
+               return err;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#118: FILE: arch/i386/kernel/ldt.c:79:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#119: FILE: arch/i386/kernel/ldt.c:80:
+       memcpy(new->ldt, old->ldt, old->size*LDT_ENTRY_SIZE);$

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#119: FILE: arch/i386/kernel/ldt.c:80:
+       memcpy(new->ldt, old->ldt, old->size*LDT_ENTRY_SIZE);
                                            ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#120: FILE: arch/i386/kernel/ldt.c:81:
+       return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#133: FILE: arch/i386/kernel/ldt.c:90:
+       struct mm_struct * old_mm;$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#133: FILE: arch/i386/kernel/ldt.c:90:
+       struct mm_struct * old_mm;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#134: FILE: arch/i386/kernel/ldt.c:91:
+       int retval = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#136: FILE: arch/i386/kernel/ldt.c:93:
+       init_MUTEX(&mm->context.sem);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#137: FILE: arch/i386/kernel/ldt.c:94:
+       mm->context.size = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#138: FILE: arch/i386/kernel/ldt.c:95:
+       old_mm = current->mm;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#139: FILE: arch/i386/kernel/ldt.c:96:
+       if (old_mm && old_mm->context.size > 0) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#139: FILE: arch/i386/kernel/ldt.c:96:
+       if (old_mm && old_mm->context.size > 0) {
+               down(&old_mm->context.sem);

ERROR:CODE_INDENT: code indent should use tabs where possible
#140: FILE: arch/i386/kernel/ldt.c:97:
+               down(&old_mm->context.sem);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#140: FILE: arch/i386/kernel/ldt.c:97:
+               down(&old_mm->context.sem);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#141: FILE: arch/i386/kernel/ldt.c:98:
+               retval = copy_ldt(&mm->context, &old_mm->context);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#141: FILE: arch/i386/kernel/ldt.c:98:
+               retval = copy_ldt(&mm->context, &old_mm->context);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#142: FILE: arch/i386/kernel/ldt.c:99:
+               up(&old_mm->context.sem);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#142: FILE: arch/i386/kernel/ldt.c:99:
+               up(&old_mm->context.sem);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#143: FILE: arch/i386/kernel/ldt.c:100:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#144: FILE: arch/i386/kernel/ldt.c:101:
+       return retval;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#152: FILE: arch/i386/kernel/ldt.c:109:
+       if (mm->context.size) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#152: FILE: arch/i386/kernel/ldt.c:109:
+       if (mm->context.size) {
+               clear_LDT();

ERROR:CODE_INDENT: code indent should use tabs where possible
#153: FILE: arch/i386/kernel/ldt.c:110:
+               clear_LDT();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#153: FILE: arch/i386/kernel/ldt.c:110:
+               clear_LDT();$

ERROR:CODE_INDENT: code indent should use tabs where possible
#154: FILE: arch/i386/kernel/ldt.c:111:
+               if (mm->context.size*LDT_ENTRY_SIZE > PAGE_SIZE)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#154: FILE: arch/i386/kernel/ldt.c:111:
+               if (mm->context.size*LDT_ENTRY_SIZE > PAGE_SIZE)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#154: FILE: arch/i386/kernel/ldt.c:111:
+               if (mm->context.size*LDT_ENTRY_SIZE > PAGE_SIZE)
+                       vfree(mm->context.ldt);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#154: FILE: arch/i386/kernel/ldt.c:111:
+               if (mm->context.size*LDT_ENTRY_SIZE > PAGE_SIZE)
                                    ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#155: FILE: arch/i386/kernel/ldt.c:112:
+                       vfree(mm->context.ldt);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#155: FILE: arch/i386/kernel/ldt.c:112:
+                       vfree(mm->context.ldt);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#156: FILE: arch/i386/kernel/ldt.c:113:
+               else$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#156: FILE: arch/i386/kernel/ldt.c:113:
+               else$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#156: FILE: arch/i386/kernel/ldt.c:113:
+               else
+                       kfree(mm->context.ldt);

ERROR:CODE_INDENT: code indent should use tabs where possible
#157: FILE: arch/i386/kernel/ldt.c:114:
+                       kfree(mm->context.ldt);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#157: FILE: arch/i386/kernel/ldt.c:114:
+                       kfree(mm->context.ldt);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#158: FILE: arch/i386/kernel/ldt.c:115:
+               mm->context.size = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#158: FILE: arch/i386/kernel/ldt.c:115:
+               mm->context.size = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#159: FILE: arch/i386/kernel/ldt.c:116:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#171: FILE: arch/i386/kernel/ldt.c:125:
+       if (!mm->context.size)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#171: FILE: arch/i386/kernel/ldt.c:125:
+       if (!mm->context.size)
+               return 0;

ERROR:CODE_INDENT: code indent should use tabs where possible
#172: FILE: arch/i386/kernel/ldt.c:126:
+               return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#172: FILE: arch/i386/kernel/ldt.c:126:
+               return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#173: FILE: arch/i386/kernel/ldt.c:127:
+       if (bytecount > LDT_ENTRY_SIZE*LDT_ENTRIES)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#173: FILE: arch/i386/kernel/ldt.c:127:
+       if (bytecount > LDT_ENTRY_SIZE*LDT_ENTRIES)
+               bytecount = LDT_ENTRY_SIZE*LDT_ENTRIES;

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#173: FILE: arch/i386/kernel/ldt.c:127:
+       if (bytecount > LDT_ENTRY_SIZE*LDT_ENTRIES)
                                      ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#174: FILE: arch/i386/kernel/ldt.c:128:
+               bytecount = LDT_ENTRY_SIZE*LDT_ENTRIES;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#174: FILE: arch/i386/kernel/ldt.c:128:
+               bytecount = LDT_ENTRY_SIZE*LDT_ENTRIES;$

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#174: FILE: arch/i386/kernel/ldt.c:128:
+               bytecount = LDT_ENTRY_SIZE*LDT_ENTRIES;
                                          ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#177: FILE: arch/i386/kernel/ldt.c:130:
+       down(&mm->context.sem);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#178: FILE: arch/i386/kernel/ldt.c:131:
+       size = mm->context.size*LDT_ENTRY_SIZE;$

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#178: FILE: arch/i386/kernel/ldt.c:131:
+       size = mm->context.size*LDT_ENTRY_SIZE;
                               ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#182: FILE: arch/i386/kernel/ldt.c:135:
+       err = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#183: FILE: arch/i386/kernel/ldt.c:136:
+       if (copy_to_user(ptr, mm->context.ldt, size))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 16)
#183: FILE: arch/i386/kernel/ldt.c:136:
+       if (copy_to_user(ptr, mm->context.ldt, size))
+		err = -EFAULT;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#185: FILE: arch/i386/kernel/ldt.c:138:
+       up(&mm->context.sem);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#186: FILE: arch/i386/kernel/ldt.c:139:
+       if (err < 0)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#186: FILE: arch/i386/kernel/ldt.c:139:
+       if (err < 0)
+               return err;

ERROR:CODE_INDENT: code indent should use tabs where possible
#187: FILE: arch/i386/kernel/ldt.c:140:
+               return err;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#187: FILE: arch/i386/kernel/ldt.c:140:
+               return err;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#188: FILE: arch/i386/kernel/ldt.c:141:
+       if (size != bytecount) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#188: FILE: arch/i386/kernel/ldt.c:141:
+       if (size != bytecount) {
[...]
+               clear_user(ptr+size, bytecount-size);

ERROR:CODE_INDENT: code indent should use tabs where possible
#189: FILE: arch/i386/kernel/ldt.c:142:
+               /* zero-fill the rest */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#190: FILE: arch/i386/kernel/ldt.c:143:
+               clear_user(ptr+size, bytecount-size);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#190: FILE: arch/i386/kernel/ldt.c:143:
+               clear_user(ptr+size, bytecount-size);$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#190: FILE: arch/i386/kernel/ldt.c:143:
+               clear_user(ptr+size, bytecount-size);
                              ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#190: FILE: arch/i386/kernel/ldt.c:143:
+               clear_user(ptr+size, bytecount-size);
                                              ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#191: FILE: arch/i386/kernel/ldt.c:144:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#192: FILE: arch/i386/kernel/ldt.c:145:
+       return bytecount;$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#195: FILE: arch/i386/kernel/ldt.c:148:
+static int read_default_ldt(void * ptr, unsigned long bytecount)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#203: FILE: arch/i386/kernel/ldt.c:156:
+       size = 5*sizeof(struct desc_struct);$

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#203: FILE: arch/i386/kernel/ldt.c:156:
+       size = 5*sizeof(struct desc_struct);
                ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#229: FILE: arch/i386/kernel/ldt.c:191:
+       down(&mm->context.sem);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#230: FILE: arch/i386/kernel/ldt.c:192:
+       if (ldt_info.entry_number >= mm->context.size) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#230: FILE: arch/i386/kernel/ldt.c:192:
+       if (ldt_info.entry_number >= mm->context.size) {
+               error = alloc_ldt(&current->mm->context, ldt_info.entry_number+1, 1);

ERROR:CODE_INDENT: code indent should use tabs where possible
#231: FILE: arch/i386/kernel/ldt.c:193:
+               error = alloc_ldt(&current->mm->context, ldt_info.entry_number+1, 1);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#231: FILE: arch/i386/kernel/ldt.c:193:
+               error = alloc_ldt(&current->mm->context, ldt_info.entry_number+1, 1);$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#231: FILE: arch/i386/kernel/ldt.c:193:
+               error = alloc_ldt(&current->mm->context, ldt_info.entry_number+1, 1);
                                                                              ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#232: FILE: arch/i386/kernel/ldt.c:194:
+               if (error < 0)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#232: FILE: arch/i386/kernel/ldt.c:194:
+               if (error < 0)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 24)
#232: FILE: arch/i386/kernel/ldt.c:194:
+               if (error < 0)
 			goto out_unlock;

CHECK:SPACING: No space is necessary after a cast
#242: FILE: arch/i386/kernel/ldt.c:198:
+       lp = (__u32 *) ((ldt_info.entry_number << 3) + (char *) mm->context.ldt);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#242: FILE: arch/i386/kernel/ldt.c:198:
+       lp = (__u32 *) ((ldt_info.entry_number << 3) + (char *) mm->context.ldt);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#251: FILE: arch/i386/kernel/ldt.c:236:
+       up(&mm->context.sem);$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 15)
#295: FILE: arch/i386/kernel/process.c:518:
 	if (dead_task->mm) {
[...]
+               if (dead_task->mm->context.size) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#302: FILE: arch/i386/kernel/process.c:520:
+               if (dead_task->mm->context.size) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#302: FILE: arch/i386/kernel/process.c:520:
+               if (dead_task->mm->context.size) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#302: FILE: arch/i386/kernel/process.c:520:
+               if (dead_task->mm->context.size) {
+                       printk("WARNING: dead process %8s still has LDT? <%p/%d>\n",

ERROR:CODE_INDENT: code indent should use tabs where possible
#303: FILE: arch/i386/kernel/process.c:521:
+                       printk("WARNING: dead process %8s still has LDT? <%p/%d>\n",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#303: FILE: arch/i386/kernel/process.c:521:
+                       printk("WARNING: dead process %8s still has LDT? <%p/%d>\n",$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#303: FILE: arch/i386/kernel/process.c:521:
+                       printk("WARNING: dead process %8s still has LDT? <%p/%d>\n",

ERROR:CODE_INDENT: code indent should use tabs where possible
#304: FILE: arch/i386/kernel/process.c:522:
+                                       dead_task->comm,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#304: FILE: arch/i386/kernel/process.c:522:
+                       printk("WARNING: dead process %8s still has LDT? <%p/%d>\n",
+                                       dead_task->comm,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#304: FILE: arch/i386/kernel/process.c:522:
+                                       dead_task->comm,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#305: FILE: arch/i386/kernel/process.c:523:
+                                       dead_task->mm->context.ldt,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#305: FILE: arch/i386/kernel/process.c:523:
+                                       dead_task->mm->context.ldt,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#306: FILE: arch/i386/kernel/process.c:524:
+                                       dead_task->mm->context.size);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#306: FILE: arch/i386/kernel/process.c:524:
+                                       dead_task->mm->context.size);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#349: FILE: include/asm-i386/desc.h:82:
+static inline void load_LDT (mm_context_t *pc)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#354: FILE: include/asm-i386/desc.h:85:
+       void *segments = pc->ldt;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#355: FILE: include/asm-i386/desc.h:86:
+       int count = pc->size;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#358: FILE: include/asm-i386/desc.h:88:
+       if (!count) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 16)
#358: FILE: include/asm-i386/desc.h:88:
+       if (!count) {
 		segments = &default_ldt[0];

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#375: FILE: include/asm-i386/mmu.h:11:
+       int size;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#376: FILE: include/asm-i386/mmu.h:12:
+       struct semaphore sem;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#377: FILE: include/asm-i386/mmu.h:13:
+       void *  ldt;$

ERROR:POINTER_LOCATION: "foo *  bar" should be "foo *bar"
#377: FILE: include/asm-i386/mmu.h:13:
+       void *  ldt;

ERROR:CODE_INDENT: code indent should use tabs where possible
#411: FILE: include/asm-i386/mmu_context.h:41:
+               /* load_LDT, if either the previous or next thread$

ERROR:CODE_INDENT: code indent should use tabs where possible
#412: FILE: include/asm-i386/mmu_context.h:42:
+                * has a non-default LDT.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#413: FILE: include/asm-i386/mmu_context.h:43:
+                */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#414: FILE: include/asm-i386/mmu_context.h:44:
+               if (next->context.size+prev->context.size)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#414: FILE: include/asm-i386/mmu_context.h:44:
+               if (next->context.size+prev->context.size)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#414: FILE: include/asm-i386/mmu_context.h:44:
+               if (next->context.size+prev->context.size)
+                       load_LDT(&next->context);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#414: FILE: include/asm-i386/mmu_context.h:44:
+               if (next->context.size+prev->context.size)
                                      ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#415: FILE: include/asm-i386/mmu_context.h:45:
+                       load_LDT(&next->context);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#415: FILE: include/asm-i386/mmu_context.h:45:
+                       load_LDT(&next->context);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#423: FILE: include/asm-i386/mmu_context.h:57:
+                       load_LDT(&next->context);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#423: FILE: include/asm-i386/mmu_context.h:57:
+                       load_LDT(&next->context);$

WARNING:TYPO_SPELLING: 'warnig' may be misspelled - perhaps 'warning'?
#477: FILE: arch/i386/kernel/ldt.c:22:
+#ifdef CONFIG_SMP /* avoids "defined but not used" warnig */
                                                    ^^^^^^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#480: FILE: arch/i386/kernel/ldt.c:25:
+       if (current->mm)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#480: FILE: arch/i386/kernel/ldt.c:25:
+       if (current->mm)
+               load_LDT(&current->mm->context);

ERROR:CODE_INDENT: code indent should use tabs where possible
#481: FILE: arch/i386/kernel/ldt.c:26:
+               load_LDT(&current->mm->context);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#481: FILE: arch/i386/kernel/ldt.c:26:
+               load_LDT(&current->mm->context);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#487: FILE: arch/i386/kernel/ldt.c:32:
+       void *oldldt;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#488: FILE: arch/i386/kernel/ldt.c:33:
+       void *newldt;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#489: FILE: arch/i386/kernel/ldt.c:34:
+       int oldsize;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#491: FILE: arch/i386/kernel/ldt.c:36:
+       if (mincount <= pc->size)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#491: FILE: arch/i386/kernel/ldt.c:36:
+       if (mincount <= pc->size)
+               return 0;

ERROR:CODE_INDENT: code indent should use tabs where possible
#492: FILE: arch/i386/kernel/ldt.c:37:
+               return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#492: FILE: arch/i386/kernel/ldt.c:37:
+               return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#493: FILE: arch/i386/kernel/ldt.c:38:
+       oldsize = pc->size;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#494: FILE: arch/i386/kernel/ldt.c:39:
+       mincount = (mincount+511)&(~511);$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#494: FILE: arch/i386/kernel/ldt.c:39:
+       mincount = (mincount+511)&(~511);
                            ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#494: FILE: arch/i386/kernel/ldt.c:39:
+       mincount = (mincount+511)&(~511);
                                 ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#495: FILE: arch/i386/kernel/ldt.c:40:
+       if (mincount*LDT_ENTRY_SIZE > PAGE_SIZE)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#495: FILE: arch/i386/kernel/ldt.c:40:
+       if (mincount*LDT_ENTRY_SIZE > PAGE_SIZE)
+               newldt = vmalloc(mincount*LDT_ENTRY_SIZE);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#495: FILE: arch/i386/kernel/ldt.c:40:
+       if (mincount*LDT_ENTRY_SIZE > PAGE_SIZE)
                    ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#496: FILE: arch/i386/kernel/ldt.c:41:
+               newldt = vmalloc(mincount*LDT_ENTRY_SIZE);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#496: FILE: arch/i386/kernel/ldt.c:41:
+               newldt = vmalloc(mincount*LDT_ENTRY_SIZE);$

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#496: FILE: arch/i386/kernel/ldt.c:41:
+               newldt = vmalloc(mincount*LDT_ENTRY_SIZE);
                                         ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#497: FILE: arch/i386/kernel/ldt.c:42:
+       else$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#497: FILE: arch/i386/kernel/ldt.c:42:
+       else
+               newldt = kmalloc(mincount*LDT_ENTRY_SIZE, GFP_KERNEL);

ERROR:CODE_INDENT: code indent should use tabs where possible
#498: FILE: arch/i386/kernel/ldt.c:43:
+               newldt = kmalloc(mincount*LDT_ENTRY_SIZE, GFP_KERNEL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#498: FILE: arch/i386/kernel/ldt.c:43:
+               newldt = kmalloc(mincount*LDT_ENTRY_SIZE, GFP_KERNEL);$

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#498: FILE: arch/i386/kernel/ldt.c:43:
+               newldt = kmalloc(mincount*LDT_ENTRY_SIZE, GFP_KERNEL);
                                         ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#500: FILE: arch/i386/kernel/ldt.c:45:
+       if (!newldt)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#500: FILE: arch/i386/kernel/ldt.c:45:
+       if (!newldt)
+               return -ENOMEM;

ERROR:CODE_INDENT: code indent should use tabs where possible
#501: FILE: arch/i386/kernel/ldt.c:46:
+               return -ENOMEM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#501: FILE: arch/i386/kernel/ldt.c:46:
+               return -ENOMEM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#503: FILE: arch/i386/kernel/ldt.c:48:
+       if (oldsize)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#503: FILE: arch/i386/kernel/ldt.c:48:
+       if (oldsize)
+               memcpy(newldt, pc->ldt, oldsize*LDT_ENTRY_SIZE);

ERROR:CODE_INDENT: code indent should use tabs where possible
#504: FILE: arch/i386/kernel/ldt.c:49:
+               memcpy(newldt, pc->ldt, oldsize*LDT_ENTRY_SIZE);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#504: FILE: arch/i386/kernel/ldt.c:49:
+               memcpy(newldt, pc->ldt, oldsize*LDT_ENTRY_SIZE);$

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#504: FILE: arch/i386/kernel/ldt.c:49:
+               memcpy(newldt, pc->ldt, oldsize*LDT_ENTRY_SIZE);
                                               ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#505: FILE: arch/i386/kernel/ldt.c:50:
+       oldldt = pc->ldt;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#506: FILE: arch/i386/kernel/ldt.c:51:
+       memset(newldt+oldsize*LDT_ENTRY_SIZE, 0, (mincount-oldsize)*LDT_ENTRY_SIZE);$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#506: FILE: arch/i386/kernel/ldt.c:51:
+       memset(newldt+oldsize*LDT_ENTRY_SIZE, 0, (mincount-oldsize)*LDT_ENTRY_SIZE);
                     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#506: FILE: arch/i386/kernel/ldt.c:51:
+       memset(newldt+oldsize*LDT_ENTRY_SIZE, 0, (mincount-oldsize)*LDT_ENTRY_SIZE);
                             ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#506: FILE: arch/i386/kernel/ldt.c:51:
+       memset(newldt+oldsize*LDT_ENTRY_SIZE, 0, (mincount-oldsize)*LDT_ENTRY_SIZE);
                                                          ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#506: FILE: arch/i386/kernel/ldt.c:51:
+       memset(newldt+oldsize*LDT_ENTRY_SIZE, 0, (mincount-oldsize)*LDT_ENTRY_SIZE);
                                                                   ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#507: FILE: arch/i386/kernel/ldt.c:52:
+       wmb();$

WARNING:MEMORY_BARRIER: memory barrier without comment
#507: FILE: arch/i386/kernel/ldt.c:52:
+       wmb();

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#508: FILE: arch/i386/kernel/ldt.c:53:
+       pc->ldt = newldt;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#509: FILE: arch/i386/kernel/ldt.c:54:
+       pc->size = mincount;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#510: FILE: arch/i386/kernel/ldt.c:55:
+       if (reload) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#510: FILE: arch/i386/kernel/ldt.c:55:
+       if (reload) {
+               load_LDT(pc);

ERROR:CODE_INDENT: code indent should use tabs where possible
#511: FILE: arch/i386/kernel/ldt.c:56:
+               load_LDT(pc);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#511: FILE: arch/i386/kernel/ldt.c:56:
+               load_LDT(pc);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#513: FILE: arch/i386/kernel/ldt.c:58:
+               if (current->mm->cpu_vm_mask != (1<<smp_processor_id()))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#513: FILE: arch/i386/kernel/ldt.c:58:
+               if (current->mm->cpu_vm_mask != (1<<smp_processor_id()))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#513: FILE: arch/i386/kernel/ldt.c:58:
+               if (current->mm->cpu_vm_mask != (1<<smp_processor_id()))
+                       smp_call_function(flush_ldt, 0, 1, 1);

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#513: FILE: arch/i386/kernel/ldt.c:58:
+               if (current->mm->cpu_vm_mask != (1<<smp_processor_id()))
                                                  ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#514: FILE: arch/i386/kernel/ldt.c:59:
+                       smp_call_function(flush_ldt, 0, 1, 1);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#514: FILE: arch/i386/kernel/ldt.c:59:
+                       smp_call_function(flush_ldt, 0, 1, 1);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#516: FILE: arch/i386/kernel/ldt.c:61:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#517: FILE: arch/i386/kernel/ldt.c:62:
+       wmb();$

WARNING:MEMORY_BARRIER: memory barrier without comment
#517: FILE: arch/i386/kernel/ldt.c:62:
+       wmb();

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#518: FILE: arch/i386/kernel/ldt.c:63:
+       if (oldsize) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#518: FILE: arch/i386/kernel/ldt.c:63:
+       if (oldsize) {
+               if (oldsize*LDT_ENTRY_SIZE > PAGE_SIZE)

ERROR:CODE_INDENT: code indent should use tabs where possible
#519: FILE: arch/i386/kernel/ldt.c:64:
+               if (oldsize*LDT_ENTRY_SIZE > PAGE_SIZE)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#519: FILE: arch/i386/kernel/ldt.c:64:
+               if (oldsize*LDT_ENTRY_SIZE > PAGE_SIZE)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#519: FILE: arch/i386/kernel/ldt.c:64:
+               if (oldsize*LDT_ENTRY_SIZE > PAGE_SIZE)
+                       vfree(oldldt);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#519: FILE: arch/i386/kernel/ldt.c:64:
+               if (oldsize*LDT_ENTRY_SIZE > PAGE_SIZE)
                           ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#520: FILE: arch/i386/kernel/ldt.c:65:
+                       vfree(oldldt);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#520: FILE: arch/i386/kernel/ldt.c:65:
+                       vfree(oldldt);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#521: FILE: arch/i386/kernel/ldt.c:66:
+               else$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#521: FILE: arch/i386/kernel/ldt.c:66:
+               else$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#521: FILE: arch/i386/kernel/ldt.c:66:
+               else
+                       kfree(oldldt);

ERROR:CODE_INDENT: code indent should use tabs where possible
#522: FILE: arch/i386/kernel/ldt.c:67:
+                       kfree(oldldt);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#522: FILE: arch/i386/kernel/ldt.c:67:
+                       kfree(oldldt);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#523: FILE: arch/i386/kernel/ldt.c:68:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#524: FILE: arch/i386/kernel/ldt.c:69:
+       return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#529: FILE: arch/i386/kernel/ldt.c:74:
+       int err = alloc_ldt(new, old->size, 0);$

WARNING:LINE_SPACING: Missing a blank line after declarations
#530: FILE: arch/i386/kernel/ldt.c:75:
+       int err = alloc_ldt(new, old->size, 0);
+       if (err < 0) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#530: FILE: arch/i386/kernel/ldt.c:75:
+       if (err < 0) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#530: FILE: arch/i386/kernel/ldt.c:75:
+       if (err < 0) {
+               printk(KERN_WARNING "ldt allocation failed\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#531: FILE: arch/i386/kernel/ldt.c:76:
+               printk(KERN_WARNING "ldt allocation failed\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#531: FILE: arch/i386/kernel/ldt.c:76:
+               printk(KERN_WARNING "ldt allocation failed\n");$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#531: FILE: arch/i386/kernel/ldt.c:76:
+               printk(KERN_WARNING "ldt allocation failed\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#532: FILE: arch/i386/kernel/ldt.c:77:
+               new->size = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#532: FILE: arch/i386/kernel/ldt.c:77:
+               new->size = 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#533: FILE: arch/i386/kernel/ldt.c:78:
+               return err;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#533: FILE: arch/i386/kernel/ldt.c:78:
+               return err;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#534: FILE: arch/i386/kernel/ldt.c:79:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#535: FILE: arch/i386/kernel/ldt.c:80:
+       memcpy(new->ldt, old->ldt, old->size*LDT_ENTRY_SIZE);$

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#535: FILE: arch/i386/kernel/ldt.c:80:
+       memcpy(new->ldt, old->ldt, old->size*LDT_ENTRY_SIZE);
                                            ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#536: FILE: arch/i386/kernel/ldt.c:81:
+       return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#549: FILE: arch/i386/kernel/ldt.c:90:
+       struct mm_struct * old_mm;$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#549: FILE: arch/i386/kernel/ldt.c:90:
+       struct mm_struct * old_mm;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#550: FILE: arch/i386/kernel/ldt.c:91:
+       int retval = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#552: FILE: arch/i386/kernel/ldt.c:93:
+       init_MUTEX(&mm->context.sem);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#553: FILE: arch/i386/kernel/ldt.c:94:
+       mm->context.size = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#554: FILE: arch/i386/kernel/ldt.c:95:
+       old_mm = current->mm;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#555: FILE: arch/i386/kernel/ldt.c:96:
+       if (old_mm && old_mm->context.size > 0) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#555: FILE: arch/i386/kernel/ldt.c:96:
+       if (old_mm && old_mm->context.size > 0) {
+               down(&old_mm->context.sem);

ERROR:CODE_INDENT: code indent should use tabs where possible
#556: FILE: arch/i386/kernel/ldt.c:97:
+               down(&old_mm->context.sem);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#556: FILE: arch/i386/kernel/ldt.c:97:
+               down(&old_mm->context.sem);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#557: FILE: arch/i386/kernel/ldt.c:98:
+               retval = copy_ldt(&mm->context, &old_mm->context);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#557: FILE: arch/i386/kernel/ldt.c:98:
+               retval = copy_ldt(&mm->context, &old_mm->context);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#558: FILE: arch/i386/kernel/ldt.c:99:
+               up(&old_mm->context.sem);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#558: FILE: arch/i386/kernel/ldt.c:99:
+               up(&old_mm->context.sem);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#559: FILE: arch/i386/kernel/ldt.c:100:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#560: FILE: arch/i386/kernel/ldt.c:101:
+       return retval;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#568: FILE: arch/i386/kernel/ldt.c:109:
+       if (mm->context.size) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#568: FILE: arch/i386/kernel/ldt.c:109:
+       if (mm->context.size) {
+               clear_LDT();

ERROR:CODE_INDENT: code indent should use tabs where possible
#569: FILE: arch/i386/kernel/ldt.c:110:
+               clear_LDT();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#569: FILE: arch/i386/kernel/ldt.c:110:
+               clear_LDT();$

ERROR:CODE_INDENT: code indent should use tabs where possible
#570: FILE: arch/i386/kernel/ldt.c:111:
+               if (mm->context.size*LDT_ENTRY_SIZE > PAGE_SIZE)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#570: FILE: arch/i386/kernel/ldt.c:111:
+               if (mm->context.size*LDT_ENTRY_SIZE > PAGE_SIZE)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#570: FILE: arch/i386/kernel/ldt.c:111:
+               if (mm->context.size*LDT_ENTRY_SIZE > PAGE_SIZE)
+                       vfree(mm->context.ldt);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#570: FILE: arch/i386/kernel/ldt.c:111:
+               if (mm->context.size*LDT_ENTRY_SIZE > PAGE_SIZE)
                                    ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#571: FILE: arch/i386/kernel/ldt.c:112:
+                       vfree(mm->context.ldt);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#571: FILE: arch/i386/kernel/ldt.c:112:
+                       vfree(mm->context.ldt);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#572: FILE: arch/i386/kernel/ldt.c:113:
+               else$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#572: FILE: arch/i386/kernel/ldt.c:113:
+               else$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#572: FILE: arch/i386/kernel/ldt.c:113:
+               else
+                       kfree(mm->context.ldt);

ERROR:CODE_INDENT: code indent should use tabs where possible
#573: FILE: arch/i386/kernel/ldt.c:114:
+                       kfree(mm->context.ldt);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#573: FILE: arch/i386/kernel/ldt.c:114:
+                       kfree(mm->context.ldt);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#574: FILE: arch/i386/kernel/ldt.c:115:
+               mm->context.size = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#574: FILE: arch/i386/kernel/ldt.c:115:
+               mm->context.size = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#575: FILE: arch/i386/kernel/ldt.c:116:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#587: FILE: arch/i386/kernel/ldt.c:125:
+       if (!mm->context.size)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#587: FILE: arch/i386/kernel/ldt.c:125:
+       if (!mm->context.size)
+               return 0;

ERROR:CODE_INDENT: code indent should use tabs where possible
#588: FILE: arch/i386/kernel/ldt.c:126:
+               return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#588: FILE: arch/i386/kernel/ldt.c:126:
+               return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#589: FILE: arch/i386/kernel/ldt.c:127:
+       if (bytecount > LDT_ENTRY_SIZE*LDT_ENTRIES)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#589: FILE: arch/i386/kernel/ldt.c:127:
+       if (bytecount > LDT_ENTRY_SIZE*LDT_ENTRIES)
+               bytecount = LDT_ENTRY_SIZE*LDT_ENTRIES;

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#589: FILE: arch/i386/kernel/ldt.c:127:
+       if (bytecount > LDT_ENTRY_SIZE*LDT_ENTRIES)
                                      ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#590: FILE: arch/i386/kernel/ldt.c:128:
+               bytecount = LDT_ENTRY_SIZE*LDT_ENTRIES;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#590: FILE: arch/i386/kernel/ldt.c:128:
+               bytecount = LDT_ENTRY_SIZE*LDT_ENTRIES;$

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#590: FILE: arch/i386/kernel/ldt.c:128:
+               bytecount = LDT_ENTRY_SIZE*LDT_ENTRIES;
                                          ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#593: FILE: arch/i386/kernel/ldt.c:130:
+       down(&mm->context.sem);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#594: FILE: arch/i386/kernel/ldt.c:131:
+       size = mm->context.size*LDT_ENTRY_SIZE;$

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#594: FILE: arch/i386/kernel/ldt.c:131:
+       size = mm->context.size*LDT_ENTRY_SIZE;
                               ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#598: FILE: arch/i386/kernel/ldt.c:135:
+       err = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#599: FILE: arch/i386/kernel/ldt.c:136:
+       if (copy_to_user(ptr, mm->context.ldt, size))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 16)
#599: FILE: arch/i386/kernel/ldt.c:136:
+       if (copy_to_user(ptr, mm->context.ldt, size))
+		err = -EFAULT;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#601: FILE: arch/i386/kernel/ldt.c:138:
+       up(&mm->context.sem);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#602: FILE: arch/i386/kernel/ldt.c:139:
+       if (err < 0)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#602: FILE: arch/i386/kernel/ldt.c:139:
+       if (err < 0)
+               return err;

ERROR:CODE_INDENT: code indent should use tabs where possible
#603: FILE: arch/i386/kernel/ldt.c:140:
+               return err;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#603: FILE: arch/i386/kernel/ldt.c:140:
+               return err;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#604: FILE: arch/i386/kernel/ldt.c:141:
+       if (size != bytecount) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#604: FILE: arch/i386/kernel/ldt.c:141:
+       if (size != bytecount) {
[...]
+               clear_user(ptr+size, bytecount-size);

ERROR:CODE_INDENT: code indent should use tabs where possible
#605: FILE: arch/i386/kernel/ldt.c:142:
+               /* zero-fill the rest */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#606: FILE: arch/i386/kernel/ldt.c:143:
+               clear_user(ptr+size, bytecount-size);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#606: FILE: arch/i386/kernel/ldt.c:143:
+               clear_user(ptr+size, bytecount-size);$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#606: FILE: arch/i386/kernel/ldt.c:143:
+               clear_user(ptr+size, bytecount-size);
                              ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#606: FILE: arch/i386/kernel/ldt.c:143:
+               clear_user(ptr+size, bytecount-size);
                                              ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#607: FILE: arch/i386/kernel/ldt.c:144:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#608: FILE: arch/i386/kernel/ldt.c:145:
+       return bytecount;$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#611: FILE: arch/i386/kernel/ldt.c:148:
+static int read_default_ldt(void * ptr, unsigned long bytecount)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#619: FILE: arch/i386/kernel/ldt.c:156:
+       size = 5*sizeof(struct desc_struct);$

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#619: FILE: arch/i386/kernel/ldt.c:156:
+       size = 5*sizeof(struct desc_struct);
                ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#645: FILE: arch/i386/kernel/ldt.c:191:
+       down(&mm->context.sem);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#646: FILE: arch/i386/kernel/ldt.c:192:
+       if (ldt_info.entry_number >= mm->context.size) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#646: FILE: arch/i386/kernel/ldt.c:192:
+       if (ldt_info.entry_number >= mm->context.size) {
+               error = alloc_ldt(&current->mm->context, ldt_info.entry_number+1, 1);

ERROR:CODE_INDENT: code indent should use tabs where possible
#647: FILE: arch/i386/kernel/ldt.c:193:
+               error = alloc_ldt(&current->mm->context, ldt_info.entry_number+1, 1);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#647: FILE: arch/i386/kernel/ldt.c:193:
+               error = alloc_ldt(&current->mm->context, ldt_info.entry_number+1, 1);$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#647: FILE: arch/i386/kernel/ldt.c:193:
+               error = alloc_ldt(&current->mm->context, ldt_info.entry_number+1, 1);
                                                                              ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#648: FILE: arch/i386/kernel/ldt.c:194:
+               if (error < 0)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#648: FILE: arch/i386/kernel/ldt.c:194:
+               if (error < 0)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 24)
#648: FILE: arch/i386/kernel/ldt.c:194:
+               if (error < 0)
 			goto out_unlock;

CHECK:SPACING: No space is necessary after a cast
#658: FILE: arch/i386/kernel/ldt.c:198:
+       lp = (__u32 *) ((ldt_info.entry_number << 3) + (char *) mm->context.ldt);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#658: FILE: arch/i386/kernel/ldt.c:198:
+       lp = (__u32 *) ((ldt_info.entry_number << 3) + (char *) mm->context.ldt);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#667: FILE: arch/i386/kernel/ldt.c:236:
+       up(&mm->context.sem);$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 15)
#711: FILE: arch/i386/kernel/process.c:518:
 	if (dead_task->mm) {
[...]
+               if (dead_task->mm->context.size) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#718: FILE: arch/i386/kernel/process.c:520:
+               if (dead_task->mm->context.size) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#718: FILE: arch/i386/kernel/process.c:520:
+               if (dead_task->mm->context.size) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#718: FILE: arch/i386/kernel/process.c:520:
+               if (dead_task->mm->context.size) {
+                       printk("WARNING: dead process %8s still has LDT? <%p/%d>\n",

ERROR:CODE_INDENT: code indent should use tabs where possible
#719: FILE: arch/i386/kernel/process.c:521:
+                       printk("WARNING: dead process %8s still has LDT? <%p/%d>\n",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#719: FILE: arch/i386/kernel/process.c:521:
+                       printk("WARNING: dead process %8s still has LDT? <%p/%d>\n",$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#719: FILE: arch/i386/kernel/process.c:521:
+                       printk("WARNING: dead process %8s still has LDT? <%p/%d>\n",

ERROR:CODE_INDENT: code indent should use tabs where possible
#720: FILE: arch/i386/kernel/process.c:522:
+                                       dead_task->comm,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#720: FILE: arch/i386/kernel/process.c:522:
+                       printk("WARNING: dead process %8s still has LDT? <%p/%d>\n",
+                                       dead_task->comm,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#720: FILE: arch/i386/kernel/process.c:522:
+                                       dead_task->comm,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#721: FILE: arch/i386/kernel/process.c:523:
+                                       dead_task->mm->context.ldt,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#721: FILE: arch/i386/kernel/process.c:523:
+                                       dead_task->mm->context.ldt,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#722: FILE: arch/i386/kernel/process.c:524:
+                                       dead_task->mm->context.size);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#722: FILE: arch/i386/kernel/process.c:524:
+                                       dead_task->mm->context.size);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#765: FILE: include/asm-i386/desc.h:82:
+static inline void load_LDT (mm_context_t *pc)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#770: FILE: include/asm-i386/desc.h:85:
+       void *segments = pc->ldt;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#771: FILE: include/asm-i386/desc.h:86:
+       int count = pc->size;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#774: FILE: include/asm-i386/desc.h:88:
+       if (!count) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 16)
#774: FILE: include/asm-i386/desc.h:88:
+       if (!count) {
 		segments = &default_ldt[0];

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#791: FILE: include/asm-i386/mmu.h:11:
+       int size;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#792: FILE: include/asm-i386/mmu.h:12:
+       struct semaphore sem;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#793: FILE: include/asm-i386/mmu.h:13:
+       void *  ldt;$

ERROR:POINTER_LOCATION: "foo *  bar" should be "foo *bar"
#793: FILE: include/asm-i386/mmu.h:13:
+       void *  ldt;

ERROR:CODE_INDENT: code indent should use tabs where possible
#827: FILE: include/asm-i386/mmu_context.h:41:
+               /* load_LDT, if either the previous or next thread$

ERROR:CODE_INDENT: code indent should use tabs where possible
#828: FILE: include/asm-i386/mmu_context.h:42:
+                * has a non-default LDT.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#829: FILE: include/asm-i386/mmu_context.h:43:
+                */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#830: FILE: include/asm-i386/mmu_context.h:44:
+               if (next->context.size+prev->context.size)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#830: FILE: include/asm-i386/mmu_context.h:44:
+               if (next->context.size+prev->context.size)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#830: FILE: include/asm-i386/mmu_context.h:44:
+               if (next->context.size+prev->context.size)
+                       load_LDT(&next->context);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#830: FILE: include/asm-i386/mmu_context.h:44:
+               if (next->context.size+prev->context.size)
                                      ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#831: FILE: include/asm-i386/mmu_context.h:45:
+                       load_LDT(&next->context);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#831: FILE: include/asm-i386/mmu_context.h:45:
+                       load_LDT(&next->context);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#839: FILE: include/asm-i386/mmu_context.h:57:
+                       load_LDT(&next->context);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#839: FILE: include/asm-i386/mmu_context.h:57:
+                       load_LDT(&next->context);$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000470392.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 92 errors, 265 warnings, 48 checks, 754 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000470392.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
