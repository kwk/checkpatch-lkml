WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct statistic *' should also have an identifier name
#245: FILE: include/linux/statistic.h:86:
+	void			(*add)(struct statistic *, s64, u64);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 's64' should also have an identifier name
#245: FILE: include/linux/statistic.h:86:
+	void			(*add)(struct statistic *, s64, u64);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u64' should also have an identifier name
#245: FILE: include/linux/statistic.h:86:
+	void			(*add)(struct statistic *, s64, u64);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#305: FILE: include/linux/statistic.h:130:
+extern void _statistic_add(struct statistic *, int, s64, u64);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct statistic *' should also have an identifier name
#305: FILE: include/linux/statistic.h:130:
+extern void _statistic_add(struct statistic *, int, s64, u64);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#305: FILE: include/linux/statistic.h:130:
+extern void _statistic_add(struct statistic *, int, s64, u64);

WARNING:FUNCTION_ARGUMENTS: function definition argument 's64' should also have an identifier name
#305: FILE: include/linux/statistic.h:130:
+extern void _statistic_add(struct statistic *, int, s64, u64);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u64' should also have an identifier name
#305: FILE: include/linux/statistic.h:130:
+extern void _statistic_add(struct statistic *, int, s64, u64);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#306: FILE: include/linux/statistic.h:131:
+extern void statistic_add(struct statistic *, int, s64, u64);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct statistic *' should also have an identifier name
#306: FILE: include/linux/statistic.h:131:
+extern void statistic_add(struct statistic *, int, s64, u64);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#306: FILE: include/linux/statistic.h:131:
+extern void statistic_add(struct statistic *, int, s64, u64);

WARNING:FUNCTION_ARGUMENTS: function definition argument 's64' should also have an identifier name
#306: FILE: include/linux/statistic.h:131:
+extern void statistic_add(struct statistic *, int, s64, u64);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u64' should also have an identifier name
#306: FILE: include/linux/statistic.h:131:
+extern void statistic_add(struct statistic *, int, s64, u64);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#514: FILE: lib/statistic.c:850:
+	*(u64*)stat->pdata->ptrs[smp_processor_id()] += incr;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#524: FILE: lib/statistic.c:858:
+	*(u64*)stat->pdata->ptrs[smp_processor_id()] += value * incr;

WARNING:LINE_SPACING: Missing a blank line after declarations
#550: FILE: lib/statistic.c:955:
+	signed int sign = (a ^ (signed long long)b) & ~LLONG_MAX ? -1 : 1;
+	if (!b)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#552: FILE: lib/statistic.c:957:
+	for (p = 1; precision; precision--, p *= 10);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:PRINTF_L: %Lu is non-standard C, use %llu
#598: FILE: lib/statistic.c:981:
+			       "%s %Lu %Ld %Ld.%03Ld %Ld\n", name,

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#613: FILE: lib/statistic.c:1044:
+	((u64*)stat->pdata->ptrs[smp_processor_id()])[i] += incr;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#622: FILE: lib/statistic.c:1051:
+	((u64*)stat->pdata->ptrs[smp_processor_id()])[i] += incr;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#725: FILE: lib/statistic.c:1450:
+	BUG_ON(!stat || !info || !interface->number);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#732: FILE: lib/statistic.c:1457:
+	interface->data_file = debugfs_create_file(

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR' are not preferred. Consider using octal permissions '0400'.
#733: FILE: lib/statistic.c:1458:
+		"data", S_IFREG | S_IRUSR, interface->debugfs_dir,

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#734: FILE: lib/statistic.c:1459:
+		(void*)interface, &statistic_data_fops);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#740: FILE: lib/statistic.c:1465:
+	interface->def_file = debugfs_create_file(

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IWUSR' are not preferred. Consider using octal permissions '0600'.
#741: FILE: lib/statistic.c:1466:
+		"definition", S_IFREG | S_IRUSR | S_IWUSR,

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#742: FILE: lib/statistic.c:1467:
+		interface->debugfs_dir, (void*)interface, &statistic_def_fops);

WARNING:LINE_SPACING: Missing a blank line after declarations
#840: FILE: lib/statistic.c:1565:
+	unsigned long flags;
+	local_irq_save(flags);

WARNING:LINE_SPACING: Missing a blank line after declarations
#869: FILE: lib/statistic.c:1594:
+	struct statistic_discipline *disc = &statistic_discs[stat[i].type];
+	if (stat[i].state == STATISTIC_STATE_ON)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000062604.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 7 errors, 18 warnings, 4 checks, 788 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000062604.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
