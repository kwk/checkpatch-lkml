WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#42: FILE: include/linux/dlm_device.h:1:
+/******************************************************************************

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#43: FILE: include/linux/dlm_device.h:2:
+/******************************************************************************
+*******************************************************************************

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:CODE_INDENT: code indent should use tabs where possible
#74: FILE: include/linux/dlm_device.h:33:
+        void __user *castparam;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#74: FILE: include/linux/dlm_device.h:33:
+        void __user *castparam;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#77: FILE: include/linux/dlm_device.h:36:
+        void __user *bastaddr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#77: FILE: include/linux/dlm_device.h:36:
+        void __user *bastaddr;$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#100: FILE: include/linux/dlm_device.h:59:
+/* struct read from the "device" fd,
+   consists mainly of userspace pointers for the library to use */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#100: FILE: include/linux/dlm_device.h:59:
+   consists mainly of userspace pointers for the library to use */

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#103: FILE: include/linux/dlm_device.h:62:
+	void __user * user_astaddr;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#104: FILE: include/linux/dlm_device.h:63:
+	void __user * user_astparam;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#105: FILE: include/linux/dlm_device.h:64:
+	struct dlm_lksb __user * user_lksb;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#129: FILE: drivers/dlm/device.c:1:
+/******************************************************************************

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#130: FILE: drivers/dlm/device.c:2:
+/******************************************************************************
+*******************************************************************************

WARNING:CONST_STRUCT: struct file_operations should normally be const
#172: FILE: drivers/dlm/device.c:44:
+static struct file_operations _dlm_fops;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#173: FILE: drivers/dlm/device.c:45:
+static const char *name_prefix="dlm";
                               ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#190: FILE: drivers/dlm/device.c:62:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#194: FILE: drivers/dlm/device.c:66:
+	uint32_t li_magic;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#195: FILE: drivers/dlm/device.c:67:
+	uint8_t li_cmd;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's8' over 'int8_t'
#196: FILE: drivers/dlm/device.c:68:
+	int8_t	li_grmode;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's8' over 'int8_t'
#197: FILE: drivers/dlm/device.c:69:
+	int8_t  li_rqmode;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#217: FILE: drivers/dlm/device.c:89:
+	uint32_t lvb_updated;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#218: FILE: drivers/dlm/device.c:90:
+	uint32_t progress;      /* How much has been read */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#251: FILE: drivers/dlm/device.c:123:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#253: FILE: drivers/dlm/device.c:125:
+/* get and put ops for file_info.
+   Actually I don't really like "get" and "put", but everyone

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#255: FILE: drivers/dlm/device.c:127:
+   nicer at the moment */

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#276: FILE: drivers/dlm/device.c:148:
+	if (li->li_lksb.sb_lvbptr)
+		kfree(li->li_lksb.sb_lvbptr);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#326: FILE: drivers/dlm/device.c:198:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#358: FILE: drivers/dlm/device.c:230:
+/* Register a lockspace with the DLM and create a misc
+   device for userland to access it */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#358: FILE: drivers/dlm/device.c:230:
+   device for userland to access it */

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#365: FILE: drivers/dlm/device.c:237:
+	namelen = strlen(name)+strlen(name_prefix)+2;
 	                      ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#365: FILE: drivers/dlm/device.c:237:
+	namelen = strlen(name)+strlen(name_prefix)+2;
 	                                          ^

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*newls)...) over kmalloc(sizeof(struct user_ls)...)
#367: FILE: drivers/dlm/device.c:239:
+	newls = kmalloc(sizeof(struct user_ls), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#386: FILE: drivers/dlm/device.c:258:
+	snprintf((char*)newls->ls_miscinfo.name, namelen, "%s_%s",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#394: FILE: drivers/dlm/device.c:266:
+		printk(KERN_ERR "dlm: misc register failed for %s", name);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*ast)...) over kmalloc(sizeof(struct ast_info)...)
#437: FILE: drivers/dlm/device.c:309:
+	struct ast_info *ast = kmalloc(sizeof(struct ast_info), GFP_KERNEL);

WARNING:LINE_SPACING: Missing a blank line after declarations
#438: FILE: drivers/dlm/device.c:310:
+	struct ast_info *ast = kmalloc(sizeof(struct ast_info), GFP_KERNEL);
+	if (!ast)

WARNING:TYPO_SPELLING: 'syncronous' may be misspelled - perhaps 'synchronous'?
#465: FILE: drivers/dlm/device.c:337:
+ * The only syncronous ops are those done during device close.
             ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'succesful' may be misspelled - perhaps 'successful'?
#475: FILE: drivers/dlm/device.c:347:
+	/* If this is a succesful conversion then activate the blocking ast
 	                ^^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#476: FILE: drivers/dlm/device.c:348:
+	 * args from the conversion request */

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#479: FILE: drivers/dlm/device.c:351:
+	    li->li_lksb.sb_status == 0) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#490: FILE: drivers/dlm/device.c:362:
+		if (dlm_lvb_operations[li->li_grmode+1][li->li_rqmode+1] == 1)
 		                                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#490: FILE: drivers/dlm/device.c:362:
+		if (dlm_lvb_operations[li->li_grmode+1][li->li_rqmode+1] == 1)
 		                                                     ^

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#507: FILE: drivers/dlm/device.c:379:
+		    li->li_lksb.sb_status != 0) {
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#545: FILE: drivers/dlm/device.c:417:
+
+

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*f)...) over kmalloc(sizeof(struct file_info)...)
#569: FILE: drivers/dlm/device.c:441:
+	f = kmalloc(sizeof(struct file_info), GFP_KERNEL);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#595: FILE: drivers/dlm/device.c:467:
+	     req->version[1] > DLM_DEVICE_VERSION_MINOR)) {
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#596: FILE: drivers/dlm/device.c:468:
+		printk(KERN_DEBUG "dlm: process %s (%d) version mismatch "

WARNING:SPLIT_STRING: quoted string split across lines
#597: FILE: drivers/dlm/device.c:469:
+		printk(KERN_DEBUG "dlm: process %s (%d) version mismatch "
+		       "user (%d.%d.%d) kernel (%d.%d.%d),",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#659: FILE: drivers/dlm/device.c:531:
+			/* TODO: Check locking core updates the local and
+			   remote ORPHAN flags */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#659: FILE: drivers/dlm/device.c:531:
+			   remote ORPHAN flags */

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#663: FILE: drivers/dlm/device.c:535:
+					  DLM_LKF_CONVERT|DLM_LKF_ORPHAN,
 					                 ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#667: FILE: drivers/dlm/device.c:539:
+				printk("dlm: Error orphaning lock %x: %d\n",

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#693: FILE: drivers/dlm/device.c:565:
+		 * parent */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#698: FILE: drivers/dlm/device.c:570:
+		/* If it was waiting for a conversion, it will
+		   now be granted so we can unlock it properly */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#698: FILE: drivers/dlm/device.c:570:
+		   now be granted so we can unlock it properly */

WARNING:TYPO_SPELLING: 'suceeded' may be misspelled - perhaps 'succeeded'?
#708: FILE: drivers/dlm/device.c:580:
+		/* Unlock suceeded, free the lock_info struct. */
 		          ^^^^^^^^

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#722: FILE: drivers/dlm/device.c:594:
+	if (atomic_dec_and_test(&lsinfo->ls_refcnt)) {
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#726: FILE: drivers/dlm/device.c:598:
+				/* TODO this breaks!
+				unregister_lockspace(lsinfo, 1); */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#726: FILE: drivers/dlm/device.c:598:
+				unregister_lockspace(lsinfo, 1); */

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#804: FILE: drivers/dlm/device.c:676:
+	if (list_empty(&fi->fi_ast_list)) {
+

WARNING:INDENTED_LABEL: labels should not be indented
#818: FILE: drivers/dlm/device.c:690:
+	repeat:

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#822: FILE: drivers/dlm/device.c:694:
+		    !signal_pending(current)) {
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#851: FILE: drivers/dlm/device.c:723:
+	if (count >= data_size) {
+

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#853: FILE: drivers/dlm/device.c:725:
+			if (copy_to_user(buffer+offset,
 			                       ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#868: FILE: drivers/dlm/device.c:740:
+	/* If we only returned a header and there's more to come then put it
+	   back on the list */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#868: FILE: drivers/dlm/device.c:740:
+	   back on the list */

CHECK:BRACES: braces {} should be used on all arms of this statement
#869: FILE: drivers/dlm/device.c:741:
+	if (count < data_size) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#873: FILE: drivers/dlm/device.c:745:
+	} else

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*li)...) over kmalloc(sizeof(struct lock_info)...)
#902: FILE: drivers/dlm/device.c:774:
+	li = kmalloc(sizeof(struct lock_info), GFP_KERNEL);

ERROR:CODE_INDENT: code indent should use tabs where possible
#942: FILE: drivers/dlm/device.c:814:
+        /* For conversions, there should already be a lockinfo struct,$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#943: FILE: drivers/dlm/device.c:815:
+        /* For conversions, there should already be a lockinfo struct,
+	   unless we are adopting an orphaned persistent lock */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#943: FILE: drivers/dlm/device.c:815:
+	   unless we are adopting an orphaned persistent lock */

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#945: FILE: drivers/dlm/device.c:817:
+	if (kparams->flags & DLM_LKF_CONVERT) {
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#949: FILE: drivers/dlm/device.c:821:
+		/* If this is a persistent lock we will have to create a
+		   lockinfo again */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#949: FILE: drivers/dlm/device.c:821:
+		   lockinfo again */

WARNING:TYPO_SPELLING: 'isn;t' may be misspelled - perhaps 'isn't'?
#957: FILE: drivers/dlm/device.c:829:
+			/* OK, this isn;t exactly a FIRSTLOCK but it is the
 			            ^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#958: FILE: drivers/dlm/device.c:830:
+			/* OK, this isn;t exactly a FIRSTLOCK but it is the
+			   first time we've used this lockinfo, and if things

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#959: FILE: drivers/dlm/device.c:831:
+			   fail we want rid of it */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#973: FILE: drivers/dlm/device.c:845:
+		/* For conversions don't overwrite the current blocking AST
+		   info so that:

ERROR:CODE_INDENT: code indent should use tabs where possible
#989: FILE: drivers/dlm/device.c:861:
+  ^I^I   the AST routine runs. In fact we only need (and use) this$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#989: FILE: drivers/dlm/device.c:861:
+  ^I^I   the AST routine runs. In fact we only need (and use) this$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#989: FILE: drivers/dlm/device.c:861:
+		/* semaphore to allow us to complete our work before
+  		   the AST routine runs. In fact we only need (and use) this

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#990: FILE: drivers/dlm/device.c:862:
+		   when the initial lock fails */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1032: FILE: drivers/dlm/device.c:904:
+	/* If it succeeded (this far) with a new lock then keep track of
+	   it on the file's lockinfo list */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1032: FILE: drivers/dlm/device.c:904:
+	   it on the file's lockinfo list */

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1034: FILE: drivers/dlm/device.c:906:
+	if (!status && test_bit(LI_FLAG_FIRSTLOCK, &li->li_flags)) {
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1039: FILE: drivers/dlm/device.c:911:
+			printk(KERN_WARNING "Add lockinfo failed\n");

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1052: FILE: drivers/dlm/device.c:924:
+
+}

ERROR:CODE_INDENT: code indent should use tabs where possible
#1068: FILE: drivers/dlm/device.c:940:
+ ^Iif (!li)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1068: FILE: drivers/dlm/device.c:940:
+ ^Iif (!li)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1068: FILE: drivers/dlm/device.c:940:
+ ^Iif (!li)$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1083: FILE: drivers/dlm/device.c:955:
+	/* dlm_unlock() passes a 0 for castaddr which means don't overwrite
+	   the existing li_castaddr as that's the completion routine for

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1085: FILE: drivers/dlm/device.c:957:
+	   executed when the unlock completes. */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1091: FILE: drivers/dlm/device.c:963:
+	status = dlm_unlock(fi->fi_ls->ls_lockspace,
+			     kparams->lkid,

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1114: FILE: drivers/dlm/device.c:986:
+	if (count < sizeof(struct dlm_write_request)-1)
 	                                            ^

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1139: FILE: drivers/dlm/device.c:1011:
+	switch (kparams->cmd)
+	{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1142: FILE: drivers/dlm/device.c:1014:
+		if (!fi) goto out_sig;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1147: FILE: drivers/dlm/device.c:1019:
+		if (!fi) goto out_sig;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1152: FILE: drivers/dlm/device.c:1024:
+		if (fi) goto out_sig;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1158: FILE: drivers/dlm/device.c:1030:
+		if (fi) goto out_sig;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1163: FILE: drivers/dlm/device.c:1035:
+		printk("Unknown command passed to DLM device : %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1164: FILE: drivers/dlm/device.c:1036:
+		printk("Unknown command passed to DLM device : %d\n",
+			kparams->cmd);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1182: FILE: drivers/dlm/device.c:1054:
+/* Called when the cluster is shutdown uncleanly, all lockspaces
+   have been summarily removed */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1182: FILE: drivers/dlm/device.c:1054:
+   have been summarily removed */

ERROR:FUNCTION_WITHOUT_ARGS: Bad function definition - void dlm_device_free_devices() should probably be void dlm_device_free_devices(void)
#1183: FILE: drivers/dlm/device.c:1055:
+void dlm_device_free_devices()

Function declarations without arguments like::

  int foo()

should be::

  int foo(void)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1193: FILE: drivers/dlm/device.c:1065:
+		/* Tidy up, but don't delete the lsinfo struct until
+		   all the users have closed their devices */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1193: FILE: drivers/dlm/device.c:1065:
+		   all the users have closed their devices */

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1201: FILE: drivers/dlm/device.c:1073:
+static struct file_operations _dlm_fops = {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1202: FILE: drivers/dlm/device.c:1074:
+      .open    = dlm_open,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1203: FILE: drivers/dlm/device.c:1075:
+      .release = dlm_close,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1204: FILE: drivers/dlm/device.c:1076:
+      .read    = dlm_read,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1205: FILE: drivers/dlm/device.c:1077:
+      .write   = dlm_write,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1206: FILE: drivers/dlm/device.c:1078:
+      .poll    = dlm_poll,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1207: FILE: drivers/dlm/device.c:1079:
+      .owner   = THIS_MODULE,$

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1210: FILE: drivers/dlm/device.c:1082:
+static struct file_operations _dlm_ctl_fops = {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1211: FILE: drivers/dlm/device.c:1083:
+      .open    = dlm_ctl_open,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1212: FILE: drivers/dlm/device.c:1084:
+      .release = dlm_ctl_close,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1213: FILE: drivers/dlm/device.c:1085:
+      .write   = dlm_write,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1214: FILE: drivers/dlm/device.c:1086:
+      .owner   = THIS_MODULE,$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1234: FILE: drivers/dlm/device.c:1106:
+		printk(KERN_ERR "dlm: misc_register failed for control device");

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1256: FILE: drivers/dlm/device.h:1:
+/******************************************************************************

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1257: FILE: drivers/dlm/device.h:2:
+/******************************************************************************
+*******************************************************************************

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1272: FILE: drivers/dlm/device.h:17:
+extern void dlm_device_free_devices(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1273: FILE: drivers/dlm/device.h:18:
+extern int dlm_device_init(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1274: FILE: drivers/dlm/device.h:19:
+extern void dlm_device_exit(void);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000183364.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 16 errors, 71 warnings, 38 checks, 1229 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000183364.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
