WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#82: FILE: drivers/block/elevator.c:244:
+	unsigned max_back;

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#100: FILE: drivers/block/elevator.c:262:
+		if (pos->flags & (REQ_SOFTBARRIER|REQ_HARDBARRIER|REQ_STARTED))
 		                                 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#100: FILE: drivers/block/elevator.c:262:
+		if (pos->flags & (REQ_SOFTBARRIER|REQ_HARDBARRIER|REQ_STARTED))
 		                                                 ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#259: FILE: drivers/block/elevator.c:397:
+		BUG_ON(!blk_fs_request(rq));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#265: FILE: drivers/block/elevator.c:403:
+		printk(KERN_ERR "%s: bad insertion point %d\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#266: FILE: drivers/block/elevator.c:404:
+		       __FUNCTION__, where);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#267: FILE: drivers/block/elevator.c:405:
+		BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#363: FILE: drivers/block/elevator.c:523:
+	BUG_ON(list_empty(&rq->queuelist));

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#421: FILE: drivers/block/elevator.c:805:
+EXPORT_SYMBOL(elv_dispatch_insert);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

CHECK:BIT_MACRO: Prefer using the BIT macro
#525: FILE: include/linux/blkdev.h:239:
+#define REQ_SORTED	(1 << __REQ_SORTED)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#608: FILE: include/linux/elevator.h:82:
+extern void elv_dispatch_insert(request_queue_t *, struct request *, int);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'request_queue_t *' should also have an identifier name
#608: FILE: include/linux/elevator.h:82:
+extern void elv_dispatch_insert(request_queue_t *, struct request *, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct request *' should also have an identifier name
#608: FILE: include/linux/elevator.h:82:
+extern void elv_dispatch_insert(request_queue_t *, struct request *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#608: FILE: include/linux/elevator.h:82:
+extern void elv_dispatch_insert(request_queue_t *, struct request *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#616: FILE: include/linux/elevator.h:89:
+extern void elv_dequeue_request(request_queue_t *, struct request *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'request_queue_t *' should also have an identifier name
#616: FILE: include/linux/elevator.h:89:
+extern void elv_dequeue_request(request_queue_t *, struct request *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct request *' should also have an identifier name
#616: FILE: include/linux/elevator.h:89:
+extern void elv_dequeue_request(request_queue_t *, struct request *);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000142574.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 0 errors, 12 warnings, 5 checks, 534 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000142574.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
