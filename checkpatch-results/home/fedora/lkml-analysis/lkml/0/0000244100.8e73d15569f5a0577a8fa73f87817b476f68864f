WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#63: FILE: drivers/serial/Kconfig:744:
+config SERIAL_M32R_SIO
+	bool "M32R SIO I/F"
+	depends on M32R
+	default y
+	select SERIAL_CORE
+	help
+	  Say Y here if you want to use the M32R serial controller.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#71: FILE: drivers/serial/Kconfig:752:
+config SERIAL_M32R_SIO_CONSOLE
+	bool "use SIO console"
+	depends on SERIAL_M32R_SIO=y
+	select SERIAL_CORE_CONSOLE
+	help
+	  Say Y here if you want to support a serial console.
+
+	  If you use an M3T-M32700UT or an OPSPUT platform,
+	  please say also y for SERIAL_M32R_PLDSIO.
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#105: FILE: drivers/serial/m32r_sio.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#144: FILE: drivers/serial/m32r_sio.c:40:
+#include <asm/io.h>

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#169: FILE: drivers/serial/m32r_sio.c:65:
+#if 0

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#170: FILE: drivers/serial/m32r_sio.c:66:
+#define DEBUG_AUTOCONF(fmt...)	printk(fmt)

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#175: FILE: drivers/serial/m32r_sio.c:71:
+#if 0

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#176: FILE: drivers/serial/m32r_sio.c:72:
+#define DEBUG_INTR(fmt...)	printk(fmt)

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#251: FILE: drivers/serial/m32r_sio.c:147:
+	spinlock_t		lock;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#260: FILE: drivers/serial/m32r_sio.c:156:
+static const struct serial_uart_config uart_config[PORT_MAX_SIO+1] = {
                                                                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#268: FILE: drivers/serial/m32r_sio.c:164:
+#define __sio_out(v,x) outw((v),(unsigned long)(x))
                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#268: FILE: drivers/serial/m32r_sio.c:164:
+#define __sio_out(v,x) outw((v),(unsigned long)(x))
                                ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#273: FILE: drivers/serial/m32r_sio.c:169:
+	unsigned short sbaud;
+	sbaud = (boot_cpu_data.bus_clock / (baud * 4))-1;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#273: FILE: drivers/serial/m32r_sio.c:169:
+	sbaud = (boot_cpu_data.bus_clock / (baud * 4))-1;
 	                                              ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#302: FILE: drivers/serial/m32r_sio.c:198:
+	printk("SIO0 error[%04x]\n", *status);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#311: FILE: drivers/serial/m32r_sio.c:207:
+#define __sio_out(v,x) outl((v),(x))
                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#311: FILE: drivers/serial/m32r_sio.c:207:
+#define __sio_out(v,x) outl((v),(x))
                                ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#348: FILE: drivers/serial/m32r_sio.c:244:
+	printk("SIO0 error[%04x]\n", *status);

ERROR:SPACING: space required before the open parenthesis '('
#406: FILE: drivers/serial/m32r_sio.c:302:
+	while((serial_in(up, UART_LSR) & UART_EMPTY) != UART_EMPTY);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#406: FILE: drivers/serial/m32r_sio.c:302:
+	while((serial_in(up, UART_LSR) & UART_EMPTY) != UART_EMPTY);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:WHILE_AFTER_BRACE: while should follow close brace '}'
#406: FILE: drivers/serial/m32r_sio.c:302:
+	}
+	while((serial_in(up, UART_LSR) & UART_EMPTY) != UART_EMPTY);

while should follow the closing bracket on the same line::

  do {
          ...
  } while(something);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#435: FILE: drivers/serial/m32r_sio.c:331:
+static _INLINE_ void receive_chars(struct uart_sio_port *up, int *status,
+	struct pt_regs *regs)

CHECK:BRACES: braces {} should be used on all arms of this statement
#457: FILE: drivers/serial/m32r_sio.c:353:
+			if (*status & UART_LSR_BI) {
[...]
+			} else if (*status & UART_LSR_PE)
[...]
+			else if (*status & UART_LSR_FE)
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:TYPO_SPELLING: 'ingored' may be misspelled - perhaps 'ignored'?
#476: FILE: drivers/serial/m32r_sio.c:372:
+			 * Mask off conditions which should be ingored.
 			                                       ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:BRACES: braces {} should be used on all arms of this statement
#486: FILE: drivers/serial/m32r_sio.c:382:
+			if (*status & UART_LSR_BI) {
[...]
+			} else if (*status & UART_LSR_PE)
[...]
+			else if (*status & UART_LSR_FE)
[...]

WARNING:INDENTED_LABEL: labels should not be indented
#513: FILE: drivers/serial/m32r_sio.c:409:
+	ignore_char:

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#544: FILE: drivers/serial/m32r_sio.c:440:
+		while (!serial_in(up, UART_LSR) & UART_LSR_THRE);

WARNING:TYPO_SPELLING: 'THRE' may be misspelled - perhaps 'THREE'?
#551: FILE: drivers/serial/m32r_sio.c:447:
+	DEBUG_INTR("THRE...");
 	            ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#561: FILE: drivers/serial/m32r_sio.c:457:
+static inline void m32r_sio_handle_port(struct uart_sio_port *up,
+	unsigned int status, struct pt_regs *regs)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#587: FILE: drivers/serial/m32r_sio.c:483:
+static irqreturn_t m32r_sio_interrupt(int irq, void *dev_id,
+	struct pt_regs *regs)

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'm32r_sio_interrupt', this function's name, in a string
#593: FILE: drivers/serial/m32r_sio.c:489:
+	DEBUG_INTR("m32r_sio_interrupt(%d)...", irq);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:BRACES: braces {} should be used on all arms of this statement
#613: FILE: drivers/serial/m32r_sio.c:509:
+		if (sts & 0x5) {
[...]
+		} else if (end == NULL)
[...]

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!end"
#619: FILE: drivers/serial/m32r_sio.c:515:
+		} else if (end == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#654: FILE: drivers/serial/m32r_sio.c:550:
+		BUG_ON(i->head != &up->list);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#693: FILE: drivers/serial/m32r_sio.c:589:
+	BUG_ON(i->head == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!i->head"
#693: FILE: drivers/serial/m32r_sio.c:589:
+	BUG_ON(i->head == NULL);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#747: FILE: drivers/serial/m32r_sio.c:643:
+{
+

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#748: FILE: drivers/serial/m32r_sio.c:644:
+
+}

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#752: FILE: drivers/serial/m32r_sio.c:648:
+{
+

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#753: FILE: drivers/serial/m32r_sio.c:649:
+
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#821: FILE: drivers/serial/m32r_sio.c:717:
+static unsigned int m32r_sio_get_divisor(struct uart_port *port,
+	unsigned int baud)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#827: FILE: drivers/serial/m32r_sio.c:723:
+static void m32r_sio_set_termios(struct uart_port *port,
+	struct termios *termios, struct termios *old)

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#865: FILE: drivers/serial/m32r_sio.c:761:
+	baud = uart_get_baud_rate(port, termios, old, 0, port->uartclk/4);
 	                                                              ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#867: FILE: drivers/serial/m32r_sio.c:763:
+	baud = uart_get_baud_rate(port, termios, old, 0, port->uartclk/16);
 	                                                              ^

WARNING:TYPO_SPELLING: 'Characteres' may be misspelled - perhaps 'Characters'?
#891: FILE: drivers/serial/m32r_sio.c:787:
+	 * Characteres to ignore
 	   ^^^^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#926: FILE: drivers/serial/m32r_sio.c:822:
+static void m32r_sio_pm(struct uart_port *port, unsigned int state,
+	unsigned int oldstate)

ERROR:SPACING: space required before the open brace '{'
#1057: FILE: drivers/serial/m32r_sio.c:953:
+	if (up->port.type == PORT_RSA){

WARNING:TYPO_SPELLING: 'ser' may be misspelled - perhaps 'set'?
#1097: FILE: drivers/serial/m32r_sio.c:993:
+m32r_sio_verify_port(struct uart_port *port, struct serial_struct *ser)
                                                                    ^^^

WARNING:CONST_STRUCT: struct uart_ops should normally be const
#1117: FILE: drivers/serial/m32r_sio.c:1013:
+static struct uart_ops m32r_sio_pops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1222: FILE: drivers/serial/m32r_sio.c:1118:
+static void m32r_sio_console_write(struct console *co, const char *s,
+	unsigned int count)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1309: FILE: drivers/serial/m32r_sio.c:1205:
+#define M32R_SIO_CONSOLE	&m32r_sio_console

CHECK:SPACING: No space is necessary after a cast
#1349: FILE: drivers/serial/m32r_sio.c:1245:
+		port.iobase |= (long) req->port_high << HIGH_BITS_OFFSET;

ERROR:CODE_INDENT: code indent should use tabs where possible
#1382: FILE: drivers/serial/m32r_sio.c:1278:
+ ^Im32r_sio_ports[port->line].port = *port;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1382: FILE: drivers/serial/m32r_sio.c:1278:
+ ^Im32r_sio_ports[port->line].port = *port;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1382: FILE: drivers/serial/m32r_sio.c:1278:
+ ^Im32r_sio_ports[port->line].port = *port;$

WARNING:CVS_KEYWORD: CVS style keyword markers, these will _not_ be updated
#1440: FILE: drivers/serial/m32r_sio.c:1336:
+	printk(KERN_INFO "Serial: M32R SIO driver $Revision: 1.6 $ "

Since linux moved to git, the CVS markers are no longer used.
So, CVS style keywords ($Id$, $Revision$, $Log$) should not be
added.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1440: FILE: drivers/serial/m32r_sio.c:1336:
+	printk(KERN_INFO "Serial: M32R SIO driver $Revision: 1.6 $ "

WARNING:SPLIT_STRING: quoted string split across lines
#1441: FILE: drivers/serial/m32r_sio.c:1337:
+	printk(KERN_INFO "Serial: M32R SIO driver $Revision: 1.6 $ "
+		"IRQ sharing %sabled\n", share_irqs_sio ? "en" : "dis");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1466: FILE: drivers/serial/m32r_sio.c:1362:
+EXPORT_SYMBOL(register_m32r_sio);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1467: FILE: drivers/serial/m32r_sio.c:1363:
+EXPORT_SYMBOL(unregister_m32r_sio);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1468: FILE: drivers/serial/m32r_sio.c:1364:
+EXPORT_SYMBOL(m32r_sio_get_irq_map);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1469: FILE: drivers/serial/m32r_sio.c:1365:
+EXPORT_SYMBOL(m32r_sio_suspend_port);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1470: FILE: drivers/serial/m32r_sio.c:1366:
+EXPORT_SYMBOL(m32r_sio_resume_port);

WARNING:CVS_KEYWORD: CVS style keyword markers, these will _not_ be updated
#1473: FILE: drivers/serial/m32r_sio.c:1369:
+MODULE_DESCRIPTION("Generic M32R SIO serial driver $Revision: 1.6 $");

WARNING:SPLIT_STRING: quoted string split across lines
#1477: FILE: drivers/serial/m32r_sio.c:1373:
+MODULE_PARM_DESC(share_irqs_sio, "Share IRQs with other non-M32R SIO devices"
+	" (unsafe)");

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1482: FILE: drivers/serial/m32r_sio.h:1:
+/*

CHECK:BIT_MACRO: Prefer using the BIT macro
#1528: FILE: drivers/serial/m32r_sio.h:47:
+#define PROBE_RSA	(1 << 0)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1531: FILE: drivers/serial/m32r_sio.h:50:
+#define HIGH_BITS_OFFSET ((sizeof(long)-sizeof(int))*8)
                                        ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1531: FILE: drivers/serial/m32r_sio.h:50:
+#define HIGH_BITS_OFFSET ((sizeof(long)-sizeof(int))*8)
                                                     ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1542: FILE: drivers/serial/m32r_sio_reg.h:1:
+/*

CHECK:SPACING: No space is necessary after a cast
#1573: FILE: drivers/serial/m32r_sio_reg.h:32:
+#define UART_RX		((unsigned long) PLD_ESIO0RXB)

CHECK:SPACING: No space is necessary after a cast
#1575: FILE: drivers/serial/m32r_sio_reg.h:34:
+#define UART_TX		((unsigned long) PLD_ESIO0TXB)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1581: FILE: drivers/serial/m32r_sio_reg.h:40:
+				 * XR16C85x only */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:SPACING: No space is necessary after a cast
#1584: FILE: drivers/serial/m32r_sio_reg.h:43:
+#define UART_IER	((unsigned long) PLD_ESIO0INTCR)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1587: FILE: drivers/serial/m32r_sio_reg.h:46:
+				 * XR16C85x only */

CHECK:SPACING: No space is necessary after a cast
#1596: FILE: drivers/serial/m32r_sio_reg.h:55:
+#define UART_LSR	((unsigned long) PLD_ESIO0STS)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1602: FILE: drivers/serial/m32r_sio_reg.h:61:
+				 * XR16c85x only */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1622: FILE: drivers/serial/m32r_sio_reg.h:81:
+				 * XR16C85x only */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1627: FILE: drivers/serial/m32r_sio_reg.h:86:
+				 * XR16C85x only */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1641: FILE: drivers/serial/m32r_sio_reg.h:100:
+				 * XR16c85x only */

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1763: FILE: drivers/serial/m32r_sio_reg.h:222:
+#define UART_TFL ^I0x04^I/* Transmitter FIFO level */$

WARNING:TYPO_SPELLING: 'Reigster' may be misspelled - perhaps 'Register'?
#1784: FILE: drivers/serial/m32r_sio_reg.h:243:
+ * The 16C950 Additional Control Reigster
                                  ^^^^^^^^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1845: FILE: drivers/serial/m32r_sio_reg.h:304:
+#define UART_RSA_MSR_SWAP (1 << 0) /* Swap low/high 8 bytes in I/O port addr */

CHECK:BIT_MACRO: Prefer using the BIT macro
#1846: FILE: drivers/serial/m32r_sio_reg.h:305:
+#define UART_RSA_MSR_FIFO (1 << 2) /* Enable the external FIFO */

CHECK:BIT_MACRO: Prefer using the BIT macro
#1847: FILE: drivers/serial/m32r_sio_reg.h:306:
+#define UART_RSA_MSR_FLOW (1 << 3) /* Enable the auto RTS/CTS flow control */

WARNING:TYPO_SPELLING: 'triger' may be misspelled - perhaps 'trigger'?
#1848: FILE: drivers/serial/m32r_sio_reg.h:307:
+#define UART_RSA_MSR_ITYP (1 << 4) /* Level (1) / Edge triger (0) */
                                                        ^^^^^^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1848: FILE: drivers/serial/m32r_sio_reg.h:307:
+#define UART_RSA_MSR_ITYP (1 << 4) /* Level (1) / Edge triger (0) */

CHECK:BIT_MACRO: Prefer using the BIT macro
#1852: FILE: drivers/serial/m32r_sio_reg.h:311:
+#define UART_RSA_IER_Rx_FIFO_H (1 << 0) /* Enable Rx FIFO half full int. */

CHECK:BIT_MACRO: Prefer using the BIT macro
#1853: FILE: drivers/serial/m32r_sio_reg.h:312:
+#define UART_RSA_IER_Tx_FIFO_H (1 << 1) /* Enable Tx FIFO half full int. */

CHECK:BIT_MACRO: Prefer using the BIT macro
#1854: FILE: drivers/serial/m32r_sio_reg.h:313:
+#define UART_RSA_IER_Tx_FIFO_E (1 << 2) /* Enable Tx FIFO empty int. */

CHECK:BIT_MACRO: Prefer using the BIT macro
#1855: FILE: drivers/serial/m32r_sio_reg.h:314:
+#define UART_RSA_IER_Rx_TOUT (1 << 3) /* Enable char receive timeout int */

CHECK:BIT_MACRO: Prefer using the BIT macro
#1856: FILE: drivers/serial/m32r_sio_reg.h:315:
+#define UART_RSA_IER_TIMER (1 << 4) /* Enable timer interrupt */

CHECK:BIT_MACRO: Prefer using the BIT macro
#1860: FILE: drivers/serial/m32r_sio_reg.h:319:
+#define UART_RSA_SRR_Tx_FIFO_NEMP (1 << 0) /* Tx FIFO is not empty (1) */

CHECK:BIT_MACRO: Prefer using the BIT macro
#1861: FILE: drivers/serial/m32r_sio_reg.h:320:
+#define UART_RSA_SRR_Tx_FIFO_NHFL (1 << 1) /* Tx FIFO is not half full (1) */

CHECK:BIT_MACRO: Prefer using the BIT macro
#1862: FILE: drivers/serial/m32r_sio_reg.h:321:
+#define UART_RSA_SRR_Tx_FIFO_NFUL (1 << 2) /* Tx FIFO is not full (1) */

CHECK:BIT_MACRO: Prefer using the BIT macro
#1863: FILE: drivers/serial/m32r_sio_reg.h:322:
+#define UART_RSA_SRR_Rx_FIFO_NEMP (1 << 3) /* Rx FIFO is not empty (1) */

CHECK:BIT_MACRO: Prefer using the BIT macro
#1864: FILE: drivers/serial/m32r_sio_reg.h:323:
+#define UART_RSA_SRR_Rx_FIFO_NHFL (1 << 4) /* Rx FIFO is not half full (1) */

CHECK:BIT_MACRO: Prefer using the BIT macro
#1865: FILE: drivers/serial/m32r_sio_reg.h:324:
+#define UART_RSA_SRR_Rx_FIFO_NFUL (1 << 5) /* Rx FIFO is not full (1) */

CHECK:BIT_MACRO: Prefer using the BIT macro
#1866: FILE: drivers/serial/m32r_sio_reg.h:325:
+#define UART_RSA_SRR_Rx_TOUT (1 << 6) /* Character reception timeout occurred (1) */

CHECK:BIT_MACRO: Prefer using the BIT macro
#1867: FILE: drivers/serial/m32r_sio_reg.h:326:
+#define UART_RSA_SRR_TIMER (1 << 7) /* Timer interrupt occurred */

CHECK:BIT_MACRO: Prefer using the BIT macro
#1875: FILE: drivers/serial/m32r_sio_reg.h:334:
+#define UART_RSA_TCR_SWITCH (1 << 0) /* Timer on */

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000244100.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 11 errors, 43 warnings, 47 checks, 1809 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000244100.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
