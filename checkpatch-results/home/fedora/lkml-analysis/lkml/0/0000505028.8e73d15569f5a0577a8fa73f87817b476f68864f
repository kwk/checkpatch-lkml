WARNING:TYPO_SPELLING: 'transfered' may be misspelled - perhaps 'transferred'?
#35: 
>> the controller 1 MB could be transfered with 0 memcopies, 1 DMA,
                                ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#60: FILE: drivers/char/raw.c:287:
+    int             cursector_size, cursector_bits;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#61: FILE: drivers/char/raw.c:288:
+    loff_t          startpg,endpg ;$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#61: FILE: drivers/char/raw.c:288:
+    loff_t          startpg,endpg ;
                            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited before semicolon
#61: FILE: drivers/char/raw.c:288:
+    loff_t          startpg,endpg ;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#71: FILE: drivers/char/raw.c:310:
+    sector_size = cursector_size = raw_devices[minor].sector_size;$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#71: FILE: drivers/char/raw.c:310:
+    sector_size = cursector_size = raw_devices[minor].sector_size;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#72: FILE: drivers/char/raw.c:311:
+    sector_bits = cursector_bits = raw_devices[minor].sector_bits;$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#72: FILE: drivers/char/raw.c:311:
+    sector_bits = cursector_bits = raw_devices[minor].sector_bits;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#81: FILE: drivers/char/raw.c:332:
+    /* Using multiple I/O granularities
+       Divide <size> into <initial> <pagealigned> <final>

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#89: FILE: drivers/char/raw.c:340:
+    startpg = (*offp + (loff_t)(PAGE_SIZE - 1)) & (loff_t)PAGE_MASK ;$

WARNING:SPACING: space prohibited before semicolon
#89: FILE: drivers/char/raw.c:340:
+    startpg = (*offp + (loff_t)(PAGE_SIZE - 1)) & (loff_t)PAGE_MASK ;

CHECK:SPACING: No space is necessary after a cast
#90: FILE: drivers/char/raw.c:341:
+    endpg = (*offp + (loff_t) size) & (loff_t)PAGE_MASK ;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#90: FILE: drivers/char/raw.c:341:
+    endpg = (*offp + (loff_t) size) & (loff_t)PAGE_MASK ;$

WARNING:SPACING: space prohibited before semicolon
#90: FILE: drivers/char/raw.c:341:
+    endpg = (*offp + (loff_t) size) & (loff_t)PAGE_MASK ;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#92: FILE: drivers/char/raw.c:343:
+    if ((startpg == endpg) || (sector_size == PAGE_SIZE))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 9)
#92: FILE: drivers/char/raw.c:343:
+    if ((startpg == endpg) || (sector_size == PAGE_SIZE))
[...]
+         startpg = endpg = ~(loff_t)0 ;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'startpg == endpg'
#92: FILE: drivers/char/raw.c:343:
+    if ((startpg == endpg) || (sector_size == PAGE_SIZE))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sector_size == PAGE_SIZE'
#92: FILE: drivers/char/raw.c:343:
+    if ((startpg == endpg) || (sector_size == PAGE_SIZE))

ERROR:CODE_INDENT: code indent should use tabs where possible
#93: FILE: drivers/char/raw.c:344:
+         /* PAGE_SIZE I/O either unnecessary or being done anyway */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:CODE_INDENT: code indent should use tabs where possible
#94: FILE: drivers/char/raw.c:345:
+         /* impossible values make startpg,endpg act as flags     */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#95: FILE: drivers/char/raw.c:346:
+         startpg = endpg = ~(loff_t)0 ;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#95: FILE: drivers/char/raw.c:346:
+         startpg = endpg = ~(loff_t)0 ;$

WARNING:SPACING: space prohibited before semicolon
#95: FILE: drivers/char/raw.c:346:
+         startpg = endpg = ~(loff_t)0 ;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#95: FILE: drivers/char/raw.c:346:
+         startpg = endpg = ~(loff_t)0 ;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 9)
#105: FILE: drivers/char/raw.c:355:
     while (size > 0) {
[...]
+         if (*offp  == startpg) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#107: FILE: drivers/char/raw.c:356:
     while (size > 0) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#108: FILE: drivers/char/raw.c:357:
+         if (*offp  == startpg) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#108: FILE: drivers/char/raw.c:357:
+         if (*offp  == startpg) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (9, 14)
#108: FILE: drivers/char/raw.c:357:
+         if (*offp  == startpg) {
+              cursector_size = PAGE_SIZE ;

ERROR:CODE_INDENT: code indent should use tabs where possible
#109: FILE: drivers/char/raw.c:358:
+              cursector_size = PAGE_SIZE ;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#109: FILE: drivers/char/raw.c:358:
+              cursector_size = PAGE_SIZE ;$

WARNING:SPACING: space prohibited before semicolon
#109: FILE: drivers/char/raw.c:358:
+              cursector_size = PAGE_SIZE ;

ERROR:CODE_INDENT: code indent should use tabs where possible
#110: FILE: drivers/char/raw.c:359:
+              cursector_bits = PAGE_SHIFT ;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#110: FILE: drivers/char/raw.c:359:
+              cursector_bits = PAGE_SHIFT ;$

WARNING:SPACING: space prohibited before semicolon
#110: FILE: drivers/char/raw.c:359:
+              cursector_bits = PAGE_SHIFT ;

ERROR:CODE_INDENT: code indent should use tabs where possible
#111: FILE: drivers/char/raw.c:360:
+         }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#111: FILE: drivers/char/raw.c:360:
+         }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#112: FILE: drivers/char/raw.c:361:
+         else if (*offp == endpg) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#112: FILE: drivers/char/raw.c:361:
+         else if (*offp == endpg) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (9, 14)
#112: FILE: drivers/char/raw.c:361:
+         else if (*offp == endpg) {
+              cursector_size = sector_size ;

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#112: FILE: drivers/char/raw.c:361:
+         }
+         else if (*offp == endpg) {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#113: FILE: drivers/char/raw.c:362:
+              cursector_size = sector_size ;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#113: FILE: drivers/char/raw.c:362:
+              cursector_size = sector_size ;$

WARNING:SPACING: space prohibited before semicolon
#113: FILE: drivers/char/raw.c:362:
+              cursector_size = sector_size ;

ERROR:CODE_INDENT: code indent should use tabs where possible
#114: FILE: drivers/char/raw.c:363:
+              cursector_bits = sector_bits ;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#114: FILE: drivers/char/raw.c:363:
+              cursector_bits = sector_bits ;$

WARNING:SPACING: space prohibited before semicolon
#114: FILE: drivers/char/raw.c:363:
+              cursector_bits = sector_bits ;

ERROR:CODE_INDENT: code indent should use tabs where possible
#115: FILE: drivers/char/raw.c:364:
+         }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#115: FILE: drivers/char/raw.c:364:
+         }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#117: FILE: drivers/char/raw.c:366:
+         blocknr = *offp >> cursector_bits ;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#117: FILE: drivers/char/raw.c:366:
+         blocknr = *offp >> cursector_bits ;$

WARNING:SPACING: space prohibited before semicolon
#117: FILE: drivers/char/raw.c:366:
+         blocknr = *offp >> cursector_bits ;

ERROR:CODE_INDENT: code indent should use tabs where possible
#118: FILE: drivers/char/raw.c:367:
+         max_sectors = KIO_MAX_SECTORS << (cursector_bits - 9) ;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#118: FILE: drivers/char/raw.c:367:
+         max_sectors = KIO_MAX_SECTORS << (cursector_bits - 9) ;$

WARNING:SPACING: space prohibited before semicolon
#118: FILE: drivers/char/raw.c:367:
+         max_sectors = KIO_MAX_SECTORS << (cursector_bits - 9) ;

ERROR:CODE_INDENT: code indent should use tabs where possible
#119: FILE: drivers/char/raw.c:368:
+         if (limit != INT_MAX)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#119: FILE: drivers/char/raw.c:368:
+         if (limit != INT_MAX)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (9, 14)
#119: FILE: drivers/char/raw.c:368:
+         if (limit != INT_MAX)
+              limit = (((loff_t) blk_size[MAJOR(dev)][MINOR(dev)]) <<

ERROR:CODE_INDENT: code indent should use tabs where possible
#120: FILE: drivers/char/raw.c:369:
+              limit = (((loff_t) blk_size[MAJOR(dev)][MINOR(dev)]) <<$

CHECK:SPACING: No space is necessary after a cast
#120: FILE: drivers/char/raw.c:369:
+              limit = (((loff_t) blk_size[MAJOR(dev)][MINOR(dev)]) <<

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#120: FILE: drivers/char/raw.c:369:
+              limit = (((loff_t) blk_size[MAJOR(dev)][MINOR(dev)]) <<$

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#121: FILE: drivers/char/raw.c:369:
BLOCK_SIZE_BITS) >> cursector_bits ;

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

ERROR:CODE_INDENT: code indent should use tabs where possible
#123: FILE: drivers/char/raw.c:371:
+         blocks = size >> cursector_bits;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#123: FILE: drivers/char/raw.c:371:
+         blocks = size >> cursector_bits;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#132: FILE: drivers/char/raw.c:379:
+         iosize = blocks << cursector_bits;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#132: FILE: drivers/char/raw.c:379:
+         iosize = blocks << cursector_bits;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#141: FILE: drivers/char/raw.c:388:
+         err = brw_kiovec(rw, 1, &iobuf, dev, iobuf->blocks,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#141: FILE: drivers/char/raw.c:388:
+         err = brw_kiovec(rw, 1, &iobuf, dev, iobuf->blocks,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#143: FILE: drivers/char/raw.c:389:
+         err = brw_kiovec(rw, 1, &iobuf, dev, iobuf->blocks,


ERROR:CODE_INDENT: code indent should use tabs where possible
#150: FILE: drivers/char/raw.c:397:
+              *offp += err ;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#150: FILE: drivers/char/raw.c:397:
+              *offp += err ;$

WARNING:SPACING: space prohibited before semicolon
#150: FILE: drivers/char/raw.c:397:
+              *offp += err ;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000505028.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 22 errors, 42 warnings, 9 checks, 99 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000505028.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
