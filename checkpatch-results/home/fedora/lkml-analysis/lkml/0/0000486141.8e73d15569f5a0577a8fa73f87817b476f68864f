WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#29: 
> inode/dentry and just point the filp always at that.
                                  ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#43: 
diff -X dontdiff -ruN linux-2.4.17/arch/i386/kernel/entry.S linux-2.4.17-usersem/arch/i386/kernel/entry.S

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#73: FILE: include/linux/usersem.h:1:
+#ifndef __LINUX_USERSEM_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(64) over __attribute__((aligned(64)))
#81: FILE: include/linux/usersem.h:9:
+} __attribute__((aligned(64)));

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#106: FILE: kernel/usersem.c:1:
+/*

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#118: FILE: kernel/usersem.c:13:
+#include <asm/uaccess.h>

WARNING:CONST_STRUCT: struct file_operations should normally be const
#127: FILE: kernel/usersem.c:22:
+static struct file_operations lock_file_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#131: FILE: kernel/usersem.c:26:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#136: FILE: kernel/usersem.c:31:
+	struct file *f;
+	if(get_user(fd, &fs->fd))

ERROR:SPACING: space required before the open parenthesis '('
#136: FILE: kernel/usersem.c:31:
+	if(get_user(fd, &fs->fd))

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#138: FILE: kernel/usersem.c:33:
+	if(!(f = fget(fd)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#138: FILE: kernel/usersem.c:33:
+	if(!(f = fget(fd)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#141: FILE: kernel/usersem.c:36:
+	return (struct semaphore*)f->private_data;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#144: FILE: kernel/usersem.c:39:
+
+

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#150: FILE: kernel/usersem.c:45:
+	static struct dentry *dent = NULL;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#151: FILE: kernel/usersem.c:46:
+	static struct inode *semi = NULL;

ERROR:CODE_INDENT: code indent should use tabs where possible
#153: FILE: kernel/usersem.c:48:
+       ^Iif((fd = get_unused_fd()) < 0)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#153: FILE: kernel/usersem.c:48:
+       ^Iif((fd = get_unused_fd()) < 0)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#153: FILE: kernel/usersem.c:48:
+       ^Iif((fd = get_unused_fd()) < 0)$

ERROR:SPACING: space required before the open parenthesis '('
#153: FILE: kernel/usersem.c:48:
+       	if((fd = get_unused_fd()) < 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#153: FILE: kernel/usersem.c:48:
+       	if((fd = get_unused_fd()) < 0)

ERROR:SPACING: space required before the open parenthesis '('
#156: FILE: kernel/usersem.c:51:
+	if(!(f = get_empty_filp())) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#156: FILE: kernel/usersem.c:51:
+	if(!(f = get_empty_filp())) {

ERROR:SPACING: space required before the open parenthesis '('
#162: FILE: kernel/usersem.c:57:
+	if(unlikely(!dent)) {

ERROR:SPACING: space required before the open parenthesis '('
#163: FILE: kernel/usersem.c:58:
+		if(!(dent = d_alloc(NULL, &(const struct qstr){ "lock", 4, 0})))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#163: FILE: kernel/usersem.c:58:
+		if(!(dent = d_alloc(NULL, &(const struct qstr){ "lock", 4, 0})))

ERROR:SPACING: space required before the open parenthesis '('
#167: FILE: kernel/usersem.c:62:
+	if(unlikely(!semi)) {

ERROR:SPACING: space required before the open parenthesis '('
#168: FILE: kernel/usersem.c:63:
+		if(!(semi = get_empty_inode()))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#168: FILE: kernel/usersem.c:63:
+		if(!(semi = get_empty_inode()))

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IWUSR' are not preferred. Consider using octal permissions '0600'.
#172: FILE: kernel/usersem.c:67:
+		semi->i_mode = S_IFREG | S_IRUSR | S_IWUSR;

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#175: FILE: kernel/usersem.c:70:
+		semi->i_atime = semi->i_mtime = semi->i_ctime = CURRENT_TIME;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:SPACING: space required before the open parenthesis '('
#179: FILE: kernel/usersem.c:74:
+	if(!(s = kmalloc(sizeof(*s), GFP_KERNEL)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#179: FILE: kernel/usersem.c:74:
+	if(!(s = kmalloc(sizeof(*s), GFP_KERNEL)))

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#185: FILE: kernel/usersem.c:80:
+	f->private_data = (void*)s;

ERROR:SPACING: space required before the open parenthesis '('
#187: FILE: kernel/usersem.c:82:
+	if(put_user(0, &sem->count) || put_user(0, &sem->fd)) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#205: FILE: kernel/usersem.c:100:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#206: FILE: kernel/usersem.c:101:
+static struct file * get_filp(struct fast_sem *s)

WARNING:LINE_SPACING: Missing a blank line after declarations
#209: FILE: kernel/usersem.c:104:
+	int r;
+	if(get_user(r, &s->fd))

ERROR:SPACING: space required before the open parenthesis '('
#209: FILE: kernel/usersem.c:104:
+	if(get_user(r, &s->fd))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#214: FILE: kernel/usersem.c:109:
+
+

ERROR:SPACING: space required before the open parenthesis '('
#221: FILE: kernel/usersem.c:116:
+	if(!(f = get_filp(fs)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#221: FILE: kernel/usersem.c:116:
+	if(!(f = get_filp(fs)))

ERROR:CODE_INDENT: code indent should use tabs where possible
#224: FILE: kernel/usersem.c:119:
+       ^Is = get_sem(fs);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#224: FILE: kernel/usersem.c:119:
+       ^Is = get_sem(fs);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#224: FILE: kernel/usersem.c:119:
+       ^Is = get_sem(fs);$

ERROR:SPACING: space required before the open parenthesis '('
#225: FILE: kernel/usersem.c:120:
+	if(s) {

ERROR:SPACING: space required before the open parenthesis '('
#239: FILE: kernel/usersem.c:134:
+	if(!(f = get_filp(fs)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#239: FILE: kernel/usersem.c:134:
+	if(!(f = get_filp(fs)))

ERROR:CODE_INDENT: code indent should use tabs where possible
#242: FILE: kernel/usersem.c:137:
+       ^Is = get_sem(fs);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#242: FILE: kernel/usersem.c:137:
+       ^Is = get_sem(fs);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#242: FILE: kernel/usersem.c:137:
+       ^Is = get_sem(fs);$

ERROR:SPACING: space required before the open parenthesis '('
#243: FILE: kernel/usersem.c:138:
+	if(s) {

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000486141.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 31 errors, 16 warnings, 5 checks, 187 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000486141.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
