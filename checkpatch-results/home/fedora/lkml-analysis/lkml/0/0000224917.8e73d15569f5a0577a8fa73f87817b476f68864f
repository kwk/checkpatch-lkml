WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#29: 
I have corresponding patches for drm and some video drivers which use agpgart

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#34: 
# This is a BitKeeper generated diff -Nru style patch.

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#35: 
#

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#36: 
#   Allow multiple agpgart backends to be initialized and addressed.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#37: 
#   The semantics of agp_backend_acquire has been extended to allow

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#38: 
#   addressing the default agp bridge or a specific bridge described

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#39: 
#   by a struct agp_bridge_data.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#40: 
# 

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#43: 
--- a/drivers/char/agp/agp.h	2004-12-06 17:14:39 -08:00

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#95: FILE: drivers/char/agp/backend.c:63:
+ *^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#101: FILE: drivers/char/agp/backend.c:68:
+int agp_backend_acquire(struct pci_dev *pdev, agp_bridge_data_p $

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#102: FILE: drivers/char/agp/backend.c:68:
*acquired_bridge)

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

ERROR:CODE_INDENT: code indent should use tabs where possible
#114: FILE: drivers/char/agp/backend.c:77:
+        ^Ilist_for_each_entry(bridge, &agp_bridges, list) {$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#114: FILE: drivers/char/agp/backend.c:77:
+        ^Ilist_for_each_entry(bridge, &agp_bridges, list) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#114: FILE: drivers/char/agp/backend.c:77:
+        ^Ilist_for_each_entry(bridge, &agp_bridges, list) {$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#115: FILE: drivers/char/agp/backend.c:78:
+			int match=0;
 			         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#116: FILE: drivers/char/agp/backend.c:79:
+			int match=0;
+			switch(pdev->class) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#116: FILE: drivers/char/agp/backend.c:79:
+			switch(pdev->class) {
[...]
+				case PCI_CLASS_BRIDGE_HOST:
[...]
+				default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:SPACING: space required before the open parenthesis '('
#116: FILE: drivers/char/agp/backend.c:79:
+			switch(pdev->class) {

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#119: FILE: drivers/char/agp/backend.c:82:
+					if (bridge->dev==pdev)
 					               ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#120: FILE: drivers/char/agp/backend.c:83:
+						match=1;
 						     ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#124: FILE: drivers/char/agp/backend.c:87:
+                ^I^I^Iif (bridge->dev->bus==pdev->bus)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#124: FILE: drivers/char/agp/backend.c:87:
+                ^I^I^Iif (bridge->dev->bus==pdev->bus)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#124: FILE: drivers/char/agp/backend.c:87:
+                ^I^I^Iif (bridge->dev->bus==pdev->bus)$

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#124: FILE: drivers/char/agp/backend.c:87:
+                			if (bridge->dev->bus==pdev->bus)
                 			                    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#125: FILE: drivers/char/agp/backend.c:88:
+						match=1;
 						     ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#128: FILE: drivers/char/agp/backend.c:91:
+                        if (match)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#128: FILE: drivers/char/agp/backend.c:91:
+                        if (match)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#130: FILE: drivers/char/agp/backend.c:93:
+        ^I}$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#130: FILE: drivers/char/agp/backend.c:93:
+        ^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#130: FILE: drivers/char/agp/backend.c:93:
+        ^I}$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#139: FILE: drivers/char/agp/backend.c:101:
+^IDBG("pdev = 0x%lx, acquired bridge = 0x%lx\n", (unsigned long)pdev, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#141: FILE: drivers/char/agp/backend.c:102:
+	DBG("pdev = 0x%lx, acquired bridge = 0x%lx\n", (unsigned long)pdev, 
 	return 0;

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#153: FILE: drivers/char/agp/backend.c:117:
 {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#174: FILE: drivers/char/agp/backend.c:155:
+^Iif(!agp_count) printk(KERN_INFO PFX "Maximum main memory to use for agp $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#174: FILE: drivers/char/agp/backend.c:155:
+	if(!agp_count) printk(KERN_INFO PFX "Maximum main memory to use for agp 

ERROR:SPACING: space required before the open parenthesis '('
#174: FILE: drivers/char/agp/backend.c:155:
+	if(!agp_count) printk(KERN_INFO PFX "Maximum main memory to use for agp 

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#174: FILE: drivers/char/agp/backend.c:155:
+	if(!agp_count) printk(KERN_INFO PFX "Maximum main memory to use for agp 

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#192: FILE: drivers/char/agp/backend.c:212:
+	printk(KERN_INFO PFX "agp_bridge = 0x%lx: AGP aperture is %dM @ 0x%lx\n",

ERROR:CODE_INDENT: code indent should use tabs where possible
#232: FILE: drivers/char/agp/backend.c:277:
+        kfree(bridge);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#232: FILE: drivers/char/agp/backend.c:277:
+        kfree(bridge);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#234: FILE: drivers/char/agp/backend.c:279:
+        /* Kludge for the transition to passing the agp_bridge around */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#235: FILE: drivers/char/agp/backend.c:280:
+        if (!agp_count)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#235: FILE: drivers/char/agp/backend.c:280:
+        if (!agp_count)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#236: FILE: drivers/char/agp/backend.c:281:
+                agp_bridge = NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#236: FILE: drivers/char/agp/backend.c:281:
+                agp_bridge = NULL;$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#279: FILE: drivers/char/agp/backend.c:313:
+			printk (KERN_INFO PFX "agp_frontend_initialize() failed.\n");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#279: FILE: drivers/char/agp/backend.c:313:
+			printk (KERN_INFO PFX "agp_frontend_initialize() failed.\n");

ERROR:SPACING: space required before the open parenthesis '('
#313: FILE: drivers/char/agp/backend.c:339:
+	if(!agp_count) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bridge == NULL'
#451: FILE: drivers/char/agp/generic.c:120:
+	if ((bridge == NULL) || (curr == NULL))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'curr == NULL'
#451: FILE: drivers/char/agp/generic.c:120:
+	if ((bridge == NULL) || (curr == NULL))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bridge"
#451: FILE: drivers/char/agp/generic.c:120:
+	if ((bridge == NULL) || (curr == NULL))

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!curr"
#451: FILE: drivers/char/agp/generic.c:120:
+	if ((bridge == NULL) || (curr == NULL))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#475: FILE: drivers/char/agp/generic.c:154:
+struct agp_memory *agp_allocate_memory(agp_bridge_data_p bridge, size_t $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#488: FILE: drivers/char/agp/generic.c:163:
+^Iif ((atomic_read(&bridge->current_memory_agp) + page_count) > $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#580: FILE: drivers/char/agp/generic.c:322:
+int agp_bind_memory(agp_bridge_data_p bridge, struct agp_memory *curr, off_t $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bridge == NULL'
#586: FILE: drivers/char/agp/generic.c:326:
+	if ((bridge == NULL) || (curr == NULL))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'curr == NULL'
#586: FILE: drivers/char/agp/generic.c:326:
+	if ((bridge == NULL) || (curr == NULL))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bridge"
#586: FILE: drivers/char/agp/generic.c:326:
+	if ((bridge == NULL) || (curr == NULL))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!curr"
#586: FILE: drivers/char/agp/generic.c:326:
+	if ((bridge == NULL) || (curr == NULL))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bridge == NULL'
#614: FILE: drivers/char/agp/generic.c:361:
+	if ((bridge == NULL) || (curr == NULL))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'curr == NULL'
#614: FILE: drivers/char/agp/generic.c:361:
+	if ((bridge == NULL) || (curr == NULL))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bridge"
#614: FILE: drivers/char/agp/generic.c:361:
+	if ((bridge == NULL) || (curr == NULL))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!curr"
#614: FILE: drivers/char/agp/generic.c:361:
+	if ((bridge == NULL) || (curr == NULL))

WARNING:NEW_TYPEDEFS: do not add new typedefs
#666: FILE: include/linux/agp_backend.h:91:
+typedef struct agp_bridge_data *agp_bridge_data_p;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#670: FILE: include/linux/agp_backend.h:95:
+extern void agp_free_memory(agp_bridge_data_p, struct agp_memory *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'agp_bridge_data_p' should also have an identifier name
#670: FILE: include/linux/agp_backend.h:95:
+extern void agp_free_memory(agp_bridge_data_p, struct agp_memory *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct agp_memory *' should also have an identifier name
#670: FILE: include/linux/agp_backend.h:95:
+extern void agp_free_memory(agp_bridge_data_p, struct agp_memory *);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#671: FILE: include/linux/agp_backend.h:96:
+extern struct agp_memory *agp_allocate_memory(agp_bridge_data_p, size_t, $

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#671: FILE: include/linux/agp_backend.h:96:
+extern struct agp_memory *agp_allocate_memory(agp_bridge_data_p, size_t, 

WARNING:FUNCTION_ARGUMENTS: function definition argument 'agp_bridge_data_p' should also have an identifier name
#671: FILE: include/linux/agp_backend.h:96:
+extern struct agp_memory *agp_allocate_memory(agp_bridge_data_p, size_t, 

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#671: FILE: include/linux/agp_backend.h:96:
+extern struct agp_memory *agp_allocate_memory(agp_bridge_data_p, size_t, 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#673: FILE: include/linux/agp_backend.h:97:
+extern struct agp_memory *agp_allocate_memory(agp_bridge_data_p, size_t, 
+extern int agp_copy_info(agp_bridge_data_p, struct agp_kern_info *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#673: FILE: include/linux/agp_backend.h:97:
+extern int agp_copy_info(agp_bridge_data_p, struct agp_kern_info *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'agp_bridge_data_p' should also have an identifier name
#673: FILE: include/linux/agp_backend.h:97:
+extern int agp_copy_info(agp_bridge_data_p, struct agp_kern_info *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct agp_kern_info *' should also have an identifier name
#673: FILE: include/linux/agp_backend.h:97:
+extern int agp_copy_info(agp_bridge_data_p, struct agp_kern_info *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#674: FILE: include/linux/agp_backend.h:98:
+extern int agp_bind_memory(agp_bridge_data_p, struct agp_memory *, off_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'agp_bridge_data_p' should also have an identifier name
#674: FILE: include/linux/agp_backend.h:98:
+extern int agp_bind_memory(agp_bridge_data_p, struct agp_memory *, off_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct agp_memory *' should also have an identifier name
#674: FILE: include/linux/agp_backend.h:98:
+extern int agp_bind_memory(agp_bridge_data_p, struct agp_memory *, off_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'off_t' should also have an identifier name
#674: FILE: include/linux/agp_backend.h:98:
+extern int agp_bind_memory(agp_bridge_data_p, struct agp_memory *, off_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#675: FILE: include/linux/agp_backend.h:99:
+extern int agp_unbind_memory(agp_bridge_data_p, struct agp_memory *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'agp_bridge_data_p' should also have an identifier name
#675: FILE: include/linux/agp_backend.h:99:
+extern int agp_unbind_memory(agp_bridge_data_p, struct agp_memory *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct agp_memory *' should also have an identifier name
#675: FILE: include/linux/agp_backend.h:99:
+extern int agp_unbind_memory(agp_bridge_data_p, struct agp_memory *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#676: FILE: include/linux/agp_backend.h:100:
+extern void agp_enable(agp_bridge_data_p, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'agp_bridge_data_p' should also have an identifier name
#676: FILE: include/linux/agp_backend.h:100:
+extern void agp_enable(agp_bridge_data_p, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#676: FILE: include/linux/agp_backend.h:100:
+extern void agp_enable(agp_bridge_data_p, u32);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#677: FILE: include/linux/agp_backend.h:101:
+extern int agp_backend_acquire(struct pci_dev *, agp_bridge_data_p *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pci_dev *' should also have an identifier name
#677: FILE: include/linux/agp_backend.h:101:
+extern int agp_backend_acquire(struct pci_dev *, agp_bridge_data_p *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'agp_bridge_data_p *' should also have an identifier name
#677: FILE: include/linux/agp_backend.h:101:
+extern int agp_backend_acquire(struct pci_dev *, agp_bridge_data_p *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#678: FILE: include/linux/agp_backend.h:102:
+extern void agp_backend_release(agp_bridge_data_p);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'agp_bridge_data_p' should also have an identifier name
#678: FILE: include/linux/agp_backend.h:102:
+extern void agp_backend_release(agp_bridge_data_p);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'agp_bridge_data_p' should also have an identifier name
#694: FILE: include/linux/agp_backend.h:110:
+	void			(*free_memory)(agp_bridge_data_p, struct agp_memory *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct agp_memory *' should also have an identifier name
#694: FILE: include/linux/agp_backend.h:110:
+	void			(*free_memory)(agp_bridge_data_p, struct agp_memory *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'agp_bridge_data_p' should also have an identifier name
#695: FILE: include/linux/agp_backend.h:111:
+	struct agp_memory *	(*allocate_memory)(agp_bridge_data_p, size_t, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#695: FILE: include/linux/agp_backend.h:111:
+	struct agp_memory *	(*allocate_memory)(agp_bridge_data_p, size_t, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#695: FILE: include/linux/agp_backend.h:111:
+	struct agp_memory *	(*allocate_memory)(agp_bridge_data_p, size_t, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'agp_bridge_data_p' should also have an identifier name
#696: FILE: include/linux/agp_backend.h:112:
+	int			(*bind_memory)(agp_bridge_data_p, struct agp_memory *, off_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct agp_memory *' should also have an identifier name
#696: FILE: include/linux/agp_backend.h:112:
+	int			(*bind_memory)(agp_bridge_data_p, struct agp_memory *, off_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'off_t' should also have an identifier name
#696: FILE: include/linux/agp_backend.h:112:
+	int			(*bind_memory)(agp_bridge_data_p, struct agp_memory *, off_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'agp_bridge_data_p' should also have an identifier name
#697: FILE: include/linux/agp_backend.h:113:
+	int			(*unbind_memory)(agp_bridge_data_p, struct agp_memory *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct agp_memory *' should also have an identifier name
#697: FILE: include/linux/agp_backend.h:113:
+	int			(*unbind_memory)(agp_bridge_data_p, struct agp_memory *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'agp_bridge_data_p' should also have an identifier name
#698: FILE: include/linux/agp_backend.h:114:
+	void			(*enable)(agp_bridge_data_p, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#698: FILE: include/linux/agp_backend.h:114:
+	void			(*enable)(agp_bridge_data_p, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pci_dev *' should also have an identifier name
#699: FILE: include/linux/agp_backend.h:115:
+	int			(*acquire)(struct pci_dev *, agp_bridge_data_p *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'agp_bridge_data_p *' should also have an identifier name
#699: FILE: include/linux/agp_backend.h:115:
+	int			(*acquire)(struct pci_dev *, agp_bridge_data_p *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'agp_bridge_data_p' should also have an identifier name
#700: FILE: include/linux/agp_backend.h:116:
+	void			(*release)(agp_bridge_data_p);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'agp_bridge_data_p' should also have an identifier name
#701: FILE: include/linux/agp_backend.h:117:
+	int			(*copy_info)(agp_bridge_data_p, struct agp_kern_info *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct agp_kern_info *' should also have an identifier name
#701: FILE: include/linux/agp_backend.h:117:
+	int			(*copy_info)(agp_bridge_data_p, struct agp_kern_info *);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000224917.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 28 errors, 57 warnings, 23 checks, 610 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000224917.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
