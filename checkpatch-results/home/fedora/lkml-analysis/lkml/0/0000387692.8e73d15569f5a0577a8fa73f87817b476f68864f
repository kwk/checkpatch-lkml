WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#35: 
diff -u --recursive --new-file -X /linux/dontdiff a/Documentation/cdrom/cdrom-standard.tex b/Documentation/cdrom/cdrom-standard.tex

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#36: 
--- a/Documentation/cdrom/cdrom-standard.tex	Fri Nov 22 22:40:24 2002

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:TYPO_SPELLING: 'stram' may be misspelled - perhaps 'steam'?
#61: FILE: arch/m68k/atari/stram.c:1055:
+	if (register_blkdev(STRAM_MAJOR, "stram")) {
 	                                  ^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#106: FILE: arch/um/drivers/ubd_kern.c:700:
+^Ifor (i = 0; i < MAX_DEV; i++) $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#169: FILE: drivers/block/DAC960.c:2381:
+  if (register_blkdev(MajorNumber, "dac960") < 0)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#169: FILE: drivers/block/DAC960.c:2381:
+  if (register_blkdev(MajorNumber, "dac960") < 0)
       return false;

CHECK:CAMELCASE: Avoid CamelCase: <MajorNumber>
#169: FILE: drivers/block/DAC960.c:2381:
+  if (register_blkdev(MajorNumber, "dac960") < 0)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

ERROR:SPACING: space required after that ',' (ctx:VxV)
#206: FILE: drivers/block/amiflop.c:1757:
+	if (register_blkdev(FLOPPY_MAJOR,"fd"))
 	                                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#222: FILE: drivers/block/ataflop.c:1932:
+	if (register_blkdev(FLOPPY_MAJOR,"fd"))
 	                                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#239: FILE: drivers/block/cciss.c:2440:
+	if (register_blkdev(COMPAQ_CISS_MAJOR+i, hba[i]->devname)) {
 	                                     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#259: FILE: drivers/block/cpqarray.c:342:
+		if (register_blkdev(COMPAQ_SMART2_MAJOR+i, hba[i]->devname))
 		                                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#275: FILE: drivers/block/floppy.c:4235:
+	if (register_blkdev(FLOPPY_MAJOR,"fd")) {
 	                                ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around n->name[0]
#329: FILE: drivers/block/genhd.c:63:
+		name = &(n->name[0]);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#347: FILE: drivers/block/genhd.c:81:
+			len += sprintf(p+len, "%3d %s\n",
 			                ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#366: FILE: drivers/block/genhd.c:100:
+		for (index = ARRAY_SIZE(major_names)-1; index > 0; index--)
 		                                    ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!major_names[index]"
#367: FILE: drivers/block/genhd.c:101:
+			if (major_names[index] == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#372: FILE: drivers/block/genhd.c:106:
+			printk("register_blkdev: failed to get major for %s\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'register_blkdev', this function's name, in a string
#372: FILE: drivers/block/genhd.c:106:
+			printk("register_blkdev: failed to get major for %s\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#376: FILE: drivers/block/genhd.c:110:
+		ret = major = index;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*p)...) over kmalloc(sizeof(struct blk_major_name)...)
#379: FILE: drivers/block/genhd.c:113:
+	p = kmalloc(sizeof(struct blk_major_name), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!p"
#380: FILE: drivers/block/genhd.c:114:
+	if (p == NULL)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#384: FILE: drivers/block/genhd.c:118:
+	strncpy(p->name, name, sizeof(p->name)-1);
 	                                      ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#385: FILE: drivers/block/genhd.c:119:
+	p->name[sizeof(p->name)-1] = 0;
 	                       ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#400: FILE: drivers/block/genhd.c:134:
+		printk("register_blkdev: cannot get major %d for %s\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'register_blkdev', this function's name, in a string
#400: FILE: drivers/block/genhd.c:134:
+		printk("register_blkdev: cannot get major %d for %s\n",

CHECK:BRACES: braces {} should be used on all arms of this statement
#421: FILE: drivers/block/genhd.c:155:
+	if (!*n || strcmp((*n)->name, name))
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#423: FILE: drivers/block/genhd.c:157:
+	else {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!p"
#438: FILE: drivers/block/genhd.c:180:
+	if (p == NULL)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#614: FILE: drivers/block/umem.c:1148:
+	err = major_nr = register_blkdev(0, "umem");

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#629: FILE: drivers/block/xd.c:157:
+		if (((xd[i] = xd[i-1]) >= 0) && !count)
 		                  ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#629: FILE: drivers/block/xd.c:157:
+		if (((xd[i] = xd[i-1]) >= 0) && !count)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#632: FILE: drivers/block/xd.c:159:
+	if ((xd[0] = count))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#661: FILE: drivers/block/z2ram.c:337:
+    if (!MACH_IS_AMIGA)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#668: FILE: drivers/block/z2ram.c:340:
+    if (register_blkdev(Z2RAM_MAJOR, DEVICE_NAME))$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#878: FILE: drivers/ide/legacy/hd.c:712:
+	if (register_blkdev(MAJOR_NR,"hd"))
 	                            ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1230: FILE: include/linux/fs.h:1036:
+extern int register_blkdev(unsigned int, const char *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#1230: FILE: include/linux/fs.h:1036:
+extern int register_blkdev(unsigned int, const char *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#1230: FILE: include/linux/fs.h:1036:
+extern int register_blkdev(unsigned int, const char *);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000387692.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 8 errors, 12 warnings, 18 checks, 975 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000387692.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
