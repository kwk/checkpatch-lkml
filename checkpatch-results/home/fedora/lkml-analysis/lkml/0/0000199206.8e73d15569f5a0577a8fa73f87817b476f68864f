WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#41: 
diff --new-file -urp linux-2.6.11.3/fs/Kconfig linux-2.6.11.3-squashfs/fs/Kconfig

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#118: FILE: fs/squashfs/squashfs1_0.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#135: FILE: fs/squashfs/squashfs1_0.c:18:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#136: FILE: fs/squashfs/squashfs1_0.c:19:
+ * Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#154: FILE: fs/squashfs/squashfs1_0.c:37:
+#include <asm/uaccess.h>

WARNING:CONST_STRUCT: struct address_space_operations should normally be const
#169: FILE: fs/squashfs/squashfs1_0.c:52:
+static struct address_space_operations squashfs_aops_lessthan4K = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:CAMELCASE: Avoid CamelCase: <msBlk>
#173: FILE: fs/squashfs/squashfs1_0.c:56:
+int squashfs_1_0_supported(squashfs_sb_info *msBlk)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <sBlk>
#177: FILE: fs/squashfs/squashfs1_0.c:60:
+	msBlk->sBlk.block_size = msBlk->sBlk.block_size_1;

ERROR:CODE_INDENT: code indent should use tabs where possible
#193: FILE: fs/squashfs/squashfs1_0.c:76:
+ ^Ivoid *pageaddr = kmap(page);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#193: FILE: fs/squashfs/squashfs1_0.c:76:
+ ^Ivoid *pageaddr = kmap(page);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#193: FILE: fs/squashfs/squashfs1_0.c:76:
+ ^Ivoid *pageaddr = kmap(page);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#194: FILE: fs/squashfs/squashfs1_0.c:77:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'squashfs_readpage_lessthan4K', this function's name, in a string
#198: FILE: fs/squashfs/squashfs1_0.c:81:
+	TRACE("Entered squashfs_readpage_lessthan4K, page index %x, start "

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:SPLIT_STRING: quoted string split across lines
#199: FILE: fs/squashfs/squashfs1_0.c:82:
+	TRACE("Entered squashfs_readpage_lessthan4K, page index %x, start "
+					"block %x\n", (unsigned int)

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#203: FILE: fs/squashfs/squashfs1_0.c:86:
+	block = read_blocklist_1(inode, index, readahead_blks, block_list,
+					&block_listp, NULL);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#213: FILE: fs/squashfs/squashfs1_0.c:96:
+		if (!(byte = squashfs_read_data(inode->i_sb, pageaddr, block,

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#214: FILE: fs/squashfs/squashfs1_0.c:97:
+		if (!(byte = squashfs_read_data(inode->i_sb, pageaddr, block,
+					c_byte, NULL))) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#216: FILE: fs/squashfs/squashfs1_0.c:99:
+			ERROR("Unable to read page, block %x, size %x\n", block,
+					*block_listp);

ERROR:SPACING: space prohibited before that '++' (ctx:WxO)
#222: FILE: fs/squashfs/squashfs1_0.c:105:
+		index ++;
 		      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited before that '++' (ctx:WxO)
#223: FILE: fs/squashfs/squashfs1_0.c:106:
+		block_listp ++;
 		            ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#234: FILE: fs/squashfs/squashfs1_0.c:117:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#263: FILE: fs/squashfs/squashfs1_0.c:146:
+				ERROR("Unable to read block list [%d:%x]\n",
+					block_ptr, offset);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#267: FILE: fs/squashfs/squashfs1_0.c:150:
+			SQUASHFS_SWAP_SHORTS(((unsigned short *)block_list),
+					((unsigned short *)sblock_list),

CHECK:BRACES: Unbalanced braces around else statement
#269: FILE: fs/squashfs/squashfs1_0.c:152:
+		} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#274: FILE: fs/squashfs/squashfs1_0.c:157:
+				ERROR("Unable to read block list [%d:%x]\n",
+					block_ptr, offset);

CHECK:SPACING: No space is necessary after a cast
#278: FILE: fs/squashfs/squashfs1_0.c:161:
+		for (block_listp = (unsigned short *) block_list; i < index &&

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#279: FILE: fs/squashfs/squashfs1_0.c:162:
+		for (block_listp = (unsigned short *) block_list; i < index &&
+					blocks; i ++, block_listp ++, blocks --)

ERROR:SPACING: space prohibited before that '--' (ctx:WxB)
#279: FILE: fs/squashfs/squashfs1_0.c:162:
+					blocks; i ++, block_listp ++, blocks --)
 					                                     ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#293: FILE: fs/squashfs/squashfs1_0.c:176:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#295: FILE: fs/squashfs/squashfs1_0.c:178:
+static struct inode *squashfs_new_inode(struct super_block *s,
+			squashfs_base_inode_header_1 *inodeb, unsigned int ino)

CHECK:SPACING: No space is necessary after a cast
#323: FILE: fs/squashfs/squashfs1_0.c:206:
+	unsigned int block = SQUASHFS_INODE_BLK(inode) +

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'squashfs_iget_1', this function's name, in a string
#331: FILE: fs/squashfs/squashfs1_0.c:214:
+	TRACE("Entered squashfs_iget_1\n");

CHECK:SPACING: No space is necessary after a cast
#336: FILE: fs/squashfs/squashfs1_0.c:219:
+		if (!squashfs_get_cached_block(s, (char *) &sinodeb, block,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#337: FILE: fs/squashfs/squashfs1_0.c:220:
+		if (!squashfs_get_cached_block(s, (char *) &sinodeb, block,
+						offset, sizeof(sinodeb),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#341: FILE: fs/squashfs/squashfs1_0.c:224:
+		SQUASHFS_SWAP_BASE_INODE_HEADER_1(&inodeb, &sinodeb,
+						sizeof(sinodeb));

CHECK:BRACES: Unbalanced braces around else statement
#342: FILE: fs/squashfs/squashfs1_0.c:225:
+	} else

CHECK:SPACING: No space is necessary after a cast
#343: FILE: fs/squashfs/squashfs1_0.c:226:
+		if (!squashfs_get_cached_block(s, (char *) &inodeb, block,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#344: FILE: fs/squashfs/squashfs1_0.c:227:
+		if (!squashfs_get_cached_block(s, (char *) &inodeb, block,
+						offset, sizeof(inodeb),

ERROR:SPACING: space required before the open parenthesis '('
#348: FILE: fs/squashfs/squashfs1_0.c:231:
+	switch(inodeb.inode_type == SQUASHFS_IPC_TYPE ? SQUASHFS_IPC_TYPE :

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#362: FILE: fs/squashfs/squashfs1_0.c:245:
+				SQUASHFS_SWAP_REG_INODE_HEADER_1(&inodep,
+						&sinodep);

CHECK:BRACES: Unbalanced braces around else statement
#363: FILE: fs/squashfs/squashfs1_0.c:246:
+			} else

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#370: FILE: fs/squashfs/squashfs1_0.c:253:
+			if ((i = squashfs_new_inode(s, &inodeb, ino)) == NULL)

WARNING:SPLIT_STRING: quoted string split across lines
#394: FILE: fs/squashfs/squashfs1_0.c:277:
+			TRACE("File inode %x:%x, start_block %x, "
+					"block_list_start %x, offset %x\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#412: FILE: fs/squashfs/squashfs1_0.c:295:
+				SQUASHFS_SWAP_DIR_INODE_HEADER_1(&inodep,
+								&sinodep);

CHECK:BRACES: Unbalanced braces around else statement
#413: FILE: fs/squashfs/squashfs1_0.c:296:
+			} else

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#420: FILE: fs/squashfs/squashfs1_0.c:303:
+			if ((i = squashfs_new_inode(s, &inodeb, ino)) == NULL)

WARNING:SPLIT_STRING: quoted string split across lines
#434: FILE: fs/squashfs/squashfs1_0.c:317:
+			TRACE("Directory inode %x:%x, start_block %x, offset "
+					"%x\n", SQUASHFS_INODE_BLK(inode),

ERROR:TRAILING_WHITESPACE: trailing whitespace
#441: FILE: fs/squashfs/squashfs1_0.c:324:
+^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#451: FILE: fs/squashfs/squashfs1_0.c:334:
+				SQUASHFS_SWAP_SYMLINK_INODE_HEADER_1(&inodep,
+								&sinodep);

CHECK:BRACES: Unbalanced braces around else statement
#452: FILE: fs/squashfs/squashfs1_0.c:335:
+			} else

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#459: FILE: fs/squashfs/squashfs1_0.c:342:
+			if ((i = squashfs_new_inode(s, &inodeb, ino)) == NULL)

WARNING:SPLIT_STRING: quoted string split across lines
#469: FILE: fs/squashfs/squashfs1_0.c:352:
+			TRACE("Symbolic link inode %x:%x, start_block %x, "
+						"offset %x\n",

WARNING:TABSTOP: Statements should start on a tabstop
#474: FILE: fs/squashfs/squashfs1_0.c:357:
+		 }

WARNING:TABSTOP: Statements should start on a tabstop
#475: FILE: fs/squashfs/squashfs1_0.c:358:
+		 case SQUASHFS_BLKDEV_TYPE:

WARNING:TABSTOP: Statements should start on a tabstop
#476: FILE: fs/squashfs/squashfs1_0.c:359:
+		 case SQUASHFS_CHRDEV_TYPE: {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#488: FILE: fs/squashfs/squashfs1_0.c:371:
+				SQUASHFS_SWAP_DEV_INODE_HEADER_1(&inodep,
+						&sinodep);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#489: FILE: fs/squashfs/squashfs1_0.c:372:
+^I^I^I} else^I$

CHECK:BRACES: Unbalanced braces around else statement
#489: FILE: fs/squashfs/squashfs1_0.c:372:
+			} else	

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#496: FILE: fs/squashfs/squashfs1_0.c:379:
+			if ((i = squashfs_new_inode(s, &inodeb, ino)) == NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#502: FILE: fs/squashfs/squashfs1_0.c:385:
+			init_special_inode(i, i->i_mode,
+						old_decode_dev(inodep.rdev));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#505: FILE: fs/squashfs/squashfs1_0.c:388:
+			TRACE("Device inode %x:%x, rdev %x\n",
+						SQUASHFS_INODE_BLK(inode),

WARNING:TABSTOP: Statements should start on a tabstop
#508: FILE: fs/squashfs/squashfs1_0.c:391:
+		 }

WARNING:TABSTOP: Statements should start on a tabstop
#509: FILE: fs/squashfs/squashfs1_0.c:392:
+		 case SQUASHFS_IPC_TYPE: {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#521: FILE: fs/squashfs/squashfs1_0.c:404:
+				SQUASHFS_SWAP_IPC_INODE_HEADER_1(&inodep,
+								&sinodep);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#522: FILE: fs/squashfs/squashfs1_0.c:405:
+^I^I^I} else^I$

CHECK:BRACES: Unbalanced braces around else statement
#522: FILE: fs/squashfs/squashfs1_0.c:405:
+			} else	

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#529: FILE: fs/squashfs/squashfs1_0.c:412:
+			if ((i = squashfs_new_inode(s, &inodeb, ino)) == NULL)

WARNING:TABSTOP: Statements should start on a tabstop
#536: FILE: fs/squashfs/squashfs1_0.c:419:
+		 }

WARNING:TABSTOP: Statements should start on a tabstop
#537: FILE: fs/squashfs/squashfs1_0.c:420:
+		 default:

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#539: FILE: fs/squashfs/squashfs1_0.c:422:
+			ERROR("Unknown inode type %d in squashfs_iget!\n",
+						inodeb.inode_type);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#542: FILE: fs/squashfs/squashfs1_0.c:425:
+^I$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#561: FILE: fs/squashfs/squashfs.h:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#578: FILE: fs/squashfs/squashfs.h:18:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#579: FILE: fs/squashfs/squashfs.h:19:
+ * Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#584: FILE: fs/squashfs/squashfs.h:24:
+
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#586: FILE: fs/squashfs/squashfs.h:26:
+#define TRACE(s, args...)	printk(KERN_NOTICE "SQUASHFS: "s, ## args)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#591: FILE: fs/squashfs/squashfs.h:31:
+#define ERROR(s, args...)	printk(KERN_ERR "SQUASHFS error: "s, ## args)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (32, 32)
#594: FILE: fs/squashfs/squashfs.h:34:
+				if (!silent) \
+				printk(KERN_ERR "SQUASHFS error: "s, ## args);\

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#595: FILE: fs/squashfs/squashfs.h:35:
+				printk(KERN_ERR "SQUASHFS error: "s, ## args);\

ERROR:SPACING: space required before the open parenthesis '('
#596: FILE: fs/squashfs/squashfs.h:36:
+				} while(0)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#598: FILE: fs/squashfs/squashfs.h:38:
+#define WARNING(s, args...)	printk(KERN_WARNING "SQUASHFS: "s, ## args)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#600: FILE: fs/squashfs/squashfs.h:40:
+extern unsigned int squashfs_read_data(struct super_block *s, char *buffer,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#601: FILE: fs/squashfs/squashfs.h:41:
+extern unsigned int squashfs_read_data(struct super_block *s, char *buffer,
+				unsigned int index, unsigned int length,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#603: FILE: fs/squashfs/squashfs.h:43:
+extern int squashfs_get_cached_block(struct super_block *s, char *buffer,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#604: FILE: fs/squashfs/squashfs.h:44:
+extern int squashfs_get_cached_block(struct super_block *s, char *buffer,
+				unsigned int block, unsigned int offset,

WARNING:CONST_STRUCT: struct address_space_operations should normally be const
#608: FILE: fs/squashfs/squashfs.h:48:
+extern struct address_space_operations squashfs_symlink_aops;

WARNING:CONST_STRUCT: struct address_space_operations should normally be const
#609: FILE: fs/squashfs/squashfs.h:49:
+extern struct address_space_operations squashfs_aops;

WARNING:CONST_STRUCT: struct address_space_operations should normally be const
#610: FILE: fs/squashfs/squashfs.h:50:
+extern struct address_space_operations squashfs_aops_4K;

WARNING:CONST_STRUCT: struct file_operations should normally be const
#611: FILE: fs/squashfs/squashfs.h:51:
+extern struct file_operations squashfs_dir_ops;

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#612: FILE: fs/squashfs/squashfs.h:52:
+extern struct inode_operations squashfs_dir_inode_ops;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#614: FILE: fs/squashfs/squashfs.h:54:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#620: FILE: fs/squashfs/squashfs.h:60:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#622: FILE: fs/squashfs/squashfs.h:62:
+extern int squashfs_1_0_supported(squashfs_sb_info *msBlk);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#633: FILE: include/linux/squashfs_fs.h:1:
+#ifndef SQUASHFS_FS

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#653: FILE: include/linux/squashfs_fs.h:21:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#654: FILE: include/linux/squashfs_fs.h:22:
+ * Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

CHECK:SPACING: No space is necessary after a cast
#682: FILE: include/linux/squashfs_fs.h:50:
+#define SQUASHFS_INVALID		((long long) 0xffffffffffff)

WARNING:TYPECAST_INT_CONSTANT: Unnecessary typecast of c90 int constant - '(long long) 0xffffffffffff' could be '0xffffffffffffLL'
#682: FILE: include/linux/squashfs_fs.h:50:
+#define SQUASHFS_INVALID		((long long) 0xffffffffffff)

CHECK:SPACING: No space is necessary after a cast
#683: FILE: include/linux/squashfs_fs.h:51:
+#define SQUASHFS_INVALID_BLK		((long long) 0xffffffff)

WARNING:TYPECAST_INT_CONSTANT: Unnecessary typecast of c90 int constant - '(long long) 0xffffffff' could be '0xffffffffLL'
#683: FILE: include/linux/squashfs_fs.h:51:
+#define SQUASHFS_INVALID_BLK		((long long) 0xffffffff)

CHECK:SPACING: No space is necessary after a cast
#684: FILE: include/linux/squashfs_fs.h:52:
+#define SQUASHFS_USED_BLK		((long long) 0xfffffffe)

WARNING:TYPECAST_INT_CONSTANT: Unnecessary typecast of c90 int constant - '(long long) 0xfffffffe' could be '0xfffffffeLL'
#684: FILE: include/linux/squashfs_fs.h:52:
+#define SQUASHFS_USED_BLK		((long long) 0xfffffffe)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'flag' may be better as '(flag)' to avoid precedence issues
#695: FILE: include/linux/squashfs_fs.h:63:
+#define SQUASHFS_BIT(flag, bit)		((flag >> bit) & 1)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'bit' may be better as '(bit)' to avoid precedence issues
#695: FILE: include/linux/squashfs_fs.h:63:
+#define SQUASHFS_BIT(flag, bit)		((flag >> bit) & 1)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'noi' may be better as '(noi)' to avoid precedence issues
#718: FILE: include/linux/squashfs_fs.h:86:
+#define SQUASHFS_MKFLAGS(noi, nod, check_data, nof, no_frag, always_frag, \
+		duplicate_checking)	(noi | (nod << 1) | (check_data << 2) \
+		| (nof << 3) | (no_frag << 4) | (always_frag << 5) | \
+		(duplicate_checking << 6))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'nod' may be better as '(nod)' to avoid precedence issues
#718: FILE: include/linux/squashfs_fs.h:86:
+#define SQUASHFS_MKFLAGS(noi, nod, check_data, nof, no_frag, always_frag, \
+		duplicate_checking)	(noi | (nod << 1) | (check_data << 2) \
+		| (nof << 3) | (no_frag << 4) | (always_frag << 5) | \
+		(duplicate_checking << 6))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'check_data' may be better as '(check_data)' to avoid precedence issues
#718: FILE: include/linux/squashfs_fs.h:86:
+#define SQUASHFS_MKFLAGS(noi, nod, check_data, nof, no_frag, always_frag, \
+		duplicate_checking)	(noi | (nod << 1) | (check_data << 2) \
+		| (nof << 3) | (no_frag << 4) | (always_frag << 5) | \
+		(duplicate_checking << 6))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'nof' may be better as '(nof)' to avoid precedence issues
#718: FILE: include/linux/squashfs_fs.h:86:
+#define SQUASHFS_MKFLAGS(noi, nod, check_data, nof, no_frag, always_frag, \
+		duplicate_checking)	(noi | (nod << 1) | (check_data << 2) \
+		| (nof << 3) | (no_frag << 4) | (always_frag << 5) | \
+		(duplicate_checking << 6))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'no_frag' may be better as '(no_frag)' to avoid precedence issues
#718: FILE: include/linux/squashfs_fs.h:86:
+#define SQUASHFS_MKFLAGS(noi, nod, check_data, nof, no_frag, always_frag, \
+		duplicate_checking)	(noi | (nod << 1) | (check_data << 2) \
+		| (nof << 3) | (no_frag << 4) | (always_frag << 5) | \
+		(duplicate_checking << 6))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'always_frag' may be better as '(always_frag)' to avoid precedence issues
#718: FILE: include/linux/squashfs_fs.h:86:
+#define SQUASHFS_MKFLAGS(noi, nod, check_data, nof, no_frag, always_frag, \
+		duplicate_checking)	(noi | (nod << 1) | (check_data << 2) \
+		| (nof << 3) | (no_frag << 4) | (always_frag << 5) | \
+		(duplicate_checking << 6))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'duplicate_checking' may be better as '(duplicate_checking)' to avoid precedence issues
#718: FILE: include/linux/squashfs_fs.h:86:
+#define SQUASHFS_MKFLAGS(noi, nod, check_data, nof, no_frag, always_frag, \
+		duplicate_checking)	(noi | (nod << 1) | (check_data << 2) \
+		| (nof << 3) | (no_frag << 4) | (always_frag << 5) | \
+		(duplicate_checking << 6))

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#738: FILE: include/linux/squashfs_fs.h:106:
+ * uncompressed */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:BIT_MACRO: Prefer using the BIT macro
#739: FILE: include/linux/squashfs_fs.h:107:
+#define SQUASHFS_COMPRESSED_BIT		(1 << 15)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'B' - possible side-effects?
#741: FILE: include/linux/squashfs_fs.h:109:
+#define SQUASHFS_COMPRESSED_SIZE(B)	(((B) & ~SQUASHFS_COMPRESSED_BIT) ? \
+		(B) & ~SQUASHFS_COMPRESSED_BIT :  SQUASHFS_COMPRESSED_BIT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#746: FILE: include/linux/squashfs_fs.h:114:
+#define SQUASHFS_COMPRESSED_BIT_BLOCK		(1 << 24)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'B' - possible side-effects?
#748: FILE: include/linux/squashfs_fs.h:116:
+#define SQUASHFS_COMPRESSED_SIZE_BLOCK(B)	(((B) & \
+	~SQUASHFS_COMPRESSED_BIT_BLOCK) ? (B) & \
+	~SQUASHFS_COMPRESSED_BIT_BLOCK : SQUASHFS_COMPRESSED_BIT_BLOCK)

CHECK:SPACING: No space is necessary after a cast
#758: FILE: include/linux/squashfs_fs.h:126:
+#define SQUASHFS_INODE_BLK(a)		((unsigned int) ((a) >> 16))

CHECK:SPACING: No space is necessary after a cast
#760: FILE: include/linux/squashfs_fs.h:128:
+#define SQUASHFS_INODE_OFFSET(a)	((unsigned int) ((a) & 0xffff))

CHECK:SPACING: No space is necessary after a cast
#762: FILE: include/linux/squashfs_fs.h:130:
+#define SQUASHFS_MKINODE(A, B)		((squashfs_inode)(((squashfs_inode) (A)\

CHECK:SPACING: No space is necessary after a cast
#766: FILE: include/linux/squashfs_fs.h:134:
+#define SQUASHFS_MK_VFS_INODE(a, b)	((unsigned int) (((a) << 8) + \

WARNING:NEW_TYPEDEFS: do not add new typedefs
#773: FILE: include/linux/squashfs_fs.h:141:
+typedef unsigned int			squashfs_fragment_index;

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'A' may be better as '(A)' to avoid precedence issues
#774: FILE: include/linux/squashfs_fs.h:142:
+#define SQUASHFS_FRAGMENT_BYTES(A)	(A * sizeof(squashfs_fragment_entry))

CHECK:SPACING: No space is necessary after a cast
#796: FILE: include/linux/squashfs_fs.h:164:
+#define SQUASHFS_MAX_FILE_SIZE		((long long) 1 << \

WARNING:TYPECAST_INT_CONSTANT: Unnecessary typecast of c90 int constant - '(long long) 1' could be '1LL'
#796: FILE: include/linux/squashfs_fs.h:164:
+#define SQUASHFS_MAX_FILE_SIZE		((long long) 1 << \

CHECK:LINE_SPACING: Please don't use multiple blank lines
#801: FILE: include/linux/squashfs_fs.h:169:
+
+

WARNING:NEW_TYPEDEFS: do not add new typedefs
#806: FILE: include/linux/squashfs_fs.h:174:
+typedef unsigned int		squashfs_block;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#807: FILE: include/linux/squashfs_fs.h:175:
+typedef long long		squashfs_inode;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#809: FILE: include/linux/squashfs_fs.h:177:
+typedef unsigned int		squashfs_uid;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#811: FILE: include/linux/squashfs_fs.h:179:
+typedef struct squashfs_super_block {

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#831: FILE: include/linux/squashfs_fs.h:199:
+} __attribute__ ((packed)) squashfs_super_block;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#833: FILE: include/linux/squashfs_fs.h:201:
+typedef struct {

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#838: FILE: include/linux/squashfs_fs.h:206:
+} __attribute__ ((packed)) squashfs_dir_index;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#840: FILE: include/linux/squashfs_fs.h:208:
+typedef struct {

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#845: FILE: include/linux/squashfs_fs.h:213:
+} __attribute__ ((packed)) squashfs_base_inode_header;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#847: FILE: include/linux/squashfs_fs.h:215:
+typedef squashfs_base_inode_header squashfs_ipc_inode_header;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#849: FILE: include/linux/squashfs_fs.h:217:
+typedef struct {

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#855: FILE: include/linux/squashfs_fs.h:223:
+} __attribute__ ((packed)) squashfs_dev_inode_header;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#856: FILE: include/linux/squashfs_fs.h:224:
+^I$

WARNING:NEW_TYPEDEFS: do not add new typedefs
#857: FILE: include/linux/squashfs_fs.h:225:
+typedef struct {

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#864: FILE: include/linux/squashfs_fs.h:232:
+} __attribute__ ((packed)) squashfs_symlink_inode_header;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#866: FILE: include/linux/squashfs_fs.h:234:
+typedef struct {

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#877: FILE: include/linux/squashfs_fs.h:245:
+} __attribute__ ((packed)) squashfs_reg_inode_header;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#879: FILE: include/linux/squashfs_fs.h:247:
+typedef struct {

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#888: FILE: include/linux/squashfs_fs.h:256:
+} __attribute__  ((packed)) squashfs_dir_inode_header;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#890: FILE: include/linux/squashfs_fs.h:258:
+typedef struct {

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#901: FILE: include/linux/squashfs_fs.h:269:
+} __attribute__  ((packed)) squashfs_ldir_inode_header;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#903: FILE: include/linux/squashfs_fs.h:271:
+typedef union {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#912: FILE: include/linux/squashfs_fs.h:280:
+^I$

WARNING:NEW_TYPEDEFS: do not add new typedefs
#913: FILE: include/linux/squashfs_fs.h:281:
+typedef struct {

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#918: FILE: include/linux/squashfs_fs.h:286:
+} __attribute__ ((packed)) squashfs_dir_entry;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#920: FILE: include/linux/squashfs_fs.h:288:
+typedef struct {

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#923: FILE: include/linux/squashfs_fs.h:291:
+} __attribute__ ((packed)) squashfs_dir_header;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#925: FILE: include/linux/squashfs_fs.h:293:
+typedef struct {

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#928: FILE: include/linux/squashfs_fs.h:296:
+} __attribute__ ((packed)) squashfs_fragment_entry;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#930: FILE: include/linux/squashfs_fs.h:298:
+extern int squashfs_uncompress_block(void *d, int dstlen, void *s, int srclen);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#931: FILE: include/linux/squashfs_fs.h:299:
+extern int squashfs_uncompress_init(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#932: FILE: include/linux/squashfs_fs.h:300:
+extern int squashfs_uncompress_exit(void);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 's' - possible side-effects?
#941: FILE: include/linux/squashfs_fs.h:309:
+#define SQUASHFS_SWAP_SUPER_BLOCK(s, d) {\
+	SQUASHFS_MEMSET(s, d, sizeof(squashfs_super_block));\
+	SQUASHFS_SWAP((s)->s_magic, d, 0, 32);\
+	SQUASHFS_SWAP((s)->inodes, d, 32, 32);\
+	SQUASHFS_SWAP((s)->bytes_used, d, 64, 32);\
+	SQUASHFS_SWAP((s)->uid_start, d, 96, 32);\
+	SQUASHFS_SWAP((s)->guid_start, d, 128, 32);\
+	SQUASHFS_SWAP((s)->inode_table_start, d, 160, 32);\
+	SQUASHFS_SWAP((s)->directory_table_start, d, 192, 32);\
+	SQUASHFS_SWAP((s)->s_major, d, 224, 16);\
+	SQUASHFS_SWAP((s)->s_minor, d, 240, 16);\
+	SQUASHFS_SWAP((s)->block_size_1, d, 256, 16);\
+	SQUASHFS_SWAP((s)->block_log, d, 272, 16);\
+	SQUASHFS_SWAP((s)->flags, d, 288, 8);\
+	SQUASHFS_SWAP((s)->no_uids, d, 296, 8);\
+	SQUASHFS_SWAP((s)->no_guids, d, 304, 8);\
+	SQUASHFS_SWAP((s)->mkfs_time, d, 312, 32);\
+	SQUASHFS_SWAP((s)->root_inode, d, 344, 64);\
+	SQUASHFS_SWAP((s)->block_size, d, 408, 32);\
+	SQUASHFS_SWAP((s)->fragments, d, 440, 32);\
+	SQUASHFS_SWAP((s)->fragment_table_start, d, 472, 32);\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'd' - possible side-effects?
#941: FILE: include/linux/squashfs_fs.h:309:
+#define SQUASHFS_SWAP_SUPER_BLOCK(s, d) {\
+	SQUASHFS_MEMSET(s, d, sizeof(squashfs_super_block));\
+	SQUASHFS_SWAP((s)->s_magic, d, 0, 32);\
+	SQUASHFS_SWAP((s)->inodes, d, 32, 32);\
+	SQUASHFS_SWAP((s)->bytes_used, d, 64, 32);\
+	SQUASHFS_SWAP((s)->uid_start, d, 96, 32);\
+	SQUASHFS_SWAP((s)->guid_start, d, 128, 32);\
+	SQUASHFS_SWAP((s)->inode_table_start, d, 160, 32);\
+	SQUASHFS_SWAP((s)->directory_table_start, d, 192, 32);\
+	SQUASHFS_SWAP((s)->s_major, d, 224, 16);\
+	SQUASHFS_SWAP((s)->s_minor, d, 240, 16);\
+	SQUASHFS_SWAP((s)->block_size_1, d, 256, 16);\
+	SQUASHFS_SWAP((s)->block_log, d, 272, 16);\
+	SQUASHFS_SWAP((s)->flags, d, 288, 8);\
+	SQUASHFS_SWAP((s)->no_uids, d, 296, 8);\
+	SQUASHFS_SWAP((s)->no_guids, d, 304, 8);\
+	SQUASHFS_SWAP((s)->mkfs_time, d, 312, 32);\
+	SQUASHFS_SWAP((s)->root_inode, d, 344, 64);\
+	SQUASHFS_SWAP((s)->block_size, d, 408, 32);\
+	SQUASHFS_SWAP((s)->fragments, d, 440, 32);\
+	SQUASHFS_SWAP((s)->fragment_table_start, d, 472, 32);\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 's' - possible side-effects?
#964: FILE: include/linux/squashfs_fs.h:332:
+#define SQUASHFS_SWAP_BASE_INODE_HEADER(s, d, n) {\
+	SQUASHFS_MEMSET(s, d, n);\
+	SQUASHFS_SWAP((s)->inode_type, d, 0, 4);\
+	SQUASHFS_SWAP((s)->mode, d, 4, 12);\
+	SQUASHFS_SWAP((s)->uid, d, 16, 8);\
+	SQUASHFS_SWAP((s)->guid, d, 24, 8);\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'd' - possible side-effects?
#964: FILE: include/linux/squashfs_fs.h:332:
+#define SQUASHFS_SWAP_BASE_INODE_HEADER(s, d, n) {\
+	SQUASHFS_MEMSET(s, d, n);\
+	SQUASHFS_SWAP((s)->inode_type, d, 0, 4);\
+	SQUASHFS_SWAP((s)->mode, d, 4, 12);\
+	SQUASHFS_SWAP((s)->uid, d, 16, 8);\
+	SQUASHFS_SWAP((s)->guid, d, 24, 8);\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 's' - possible side-effects?
#975: FILE: include/linux/squashfs_fs.h:343:
+#define SQUASHFS_SWAP_DEV_INODE_HEADER(s, d) {\
+	SQUASHFS_SWAP_BASE_INODE_HEADER(s, d, \
+			sizeof(squashfs_dev_inode_header)); \
+	SQUASHFS_SWAP((s)->rdev, d, 32, 16);\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'd' - possible side-effects?
#975: FILE: include/linux/squashfs_fs.h:343:
+#define SQUASHFS_SWAP_DEV_INODE_HEADER(s, d) {\
+	SQUASHFS_SWAP_BASE_INODE_HEADER(s, d, \
+			sizeof(squashfs_dev_inode_header)); \
+	SQUASHFS_SWAP((s)->rdev, d, 32, 16);\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 's' - possible side-effects?
#981: FILE: include/linux/squashfs_fs.h:349:
+#define SQUASHFS_SWAP_SYMLINK_INODE_HEADER(s, d) {\
+	SQUASHFS_SWAP_BASE_INODE_HEADER(s, d, \
+			sizeof(squashfs_symlink_inode_header));\
+	SQUASHFS_SWAP((s)->symlink_size, d, 32, 16);\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'd' - possible side-effects?
#981: FILE: include/linux/squashfs_fs.h:349:
+#define SQUASHFS_SWAP_SYMLINK_INODE_HEADER(s, d) {\
+	SQUASHFS_SWAP_BASE_INODE_HEADER(s, d, \
+			sizeof(squashfs_symlink_inode_header));\
+	SQUASHFS_SWAP((s)->symlink_size, d, 32, 16);\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 's' - possible side-effects?
#987: FILE: include/linux/squashfs_fs.h:355:
+#define SQUASHFS_SWAP_REG_INODE_HEADER(s, d) {\
+	SQUASHFS_SWAP_BASE_INODE_HEADER(s, d, \
+			sizeof(squashfs_reg_inode_header));\
+	SQUASHFS_SWAP((s)->mtime, d, 32, 32);\
+	SQUASHFS_SWAP((s)->start_block, d, 64, 32);\
+	SQUASHFS_SWAP((s)->fragment, d, 96, 32);\
+	SQUASHFS_SWAP((s)->offset, d, 128, 32);\
+	SQUASHFS_SWAP((s)->file_size, d, 160, SQUASHFS_MAX_FILE_SIZE_LOG);\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'd' - possible side-effects?
#987: FILE: include/linux/squashfs_fs.h:355:
+#define SQUASHFS_SWAP_REG_INODE_HEADER(s, d) {\
+	SQUASHFS_SWAP_BASE_INODE_HEADER(s, d, \
+			sizeof(squashfs_reg_inode_header));\
+	SQUASHFS_SWAP((s)->mtime, d, 32, 32);\
+	SQUASHFS_SWAP((s)->start_block, d, 64, 32);\
+	SQUASHFS_SWAP((s)->fragment, d, 96, 32);\
+	SQUASHFS_SWAP((s)->offset, d, 128, 32);\
+	SQUASHFS_SWAP((s)->file_size, d, 160, SQUASHFS_MAX_FILE_SIZE_LOG);\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 's' - possible side-effects?
#997: FILE: include/linux/squashfs_fs.h:365:
+#define SQUASHFS_SWAP_DIR_INODE_HEADER(s, d) {\
+	SQUASHFS_SWAP_BASE_INODE_HEADER(s, d, \
+			sizeof(squashfs_dir_inode_header));\
+	SQUASHFS_SWAP((s)->file_size, d, 32, 19);\
+	SQUASHFS_SWAP((s)->offset, d, 51, 13);\
+	SQUASHFS_SWAP((s)->mtime, d, 64, 32);\
+	SQUASHFS_SWAP((s)->start_block, d, 96, 24);\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'd' - possible side-effects?
#997: FILE: include/linux/squashfs_fs.h:365:
+#define SQUASHFS_SWAP_DIR_INODE_HEADER(s, d) {\
+	SQUASHFS_SWAP_BASE_INODE_HEADER(s, d, \
+			sizeof(squashfs_dir_inode_header));\
+	SQUASHFS_SWAP((s)->file_size, d, 32, 19);\
+	SQUASHFS_SWAP((s)->offset, d, 51, 13);\
+	SQUASHFS_SWAP((s)->mtime, d, 64, 32);\
+	SQUASHFS_SWAP((s)->start_block, d, 96, 24);\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 's' - possible side-effects?
#1006: FILE: include/linux/squashfs_fs.h:374:
+#define SQUASHFS_SWAP_LDIR_INODE_HEADER(s, d) {\
+	SQUASHFS_SWAP_BASE_INODE_HEADER(s, d, \
+			sizeof(squashfs_ldir_inode_header));\
+	SQUASHFS_SWAP((s)->file_size, d, 32, 27);\
+	SQUASHFS_SWAP((s)->offset, d, 59, 13);\
+	SQUASHFS_SWAP((s)->mtime, d, 72, 32);\
+	SQUASHFS_SWAP((s)->start_block, d, 104, 24);\
+	SQUASHFS_SWAP((s)->i_count, d, 128, 16);\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'd' - possible side-effects?
#1006: FILE: include/linux/squashfs_fs.h:374:
+#define SQUASHFS_SWAP_LDIR_INODE_HEADER(s, d) {\
+	SQUASHFS_SWAP_BASE_INODE_HEADER(s, d, \
+			sizeof(squashfs_ldir_inode_header));\
+	SQUASHFS_SWAP((s)->file_size, d, 32, 27);\
+	SQUASHFS_SWAP((s)->offset, d, 59, 13);\
+	SQUASHFS_SWAP((s)->mtime, d, 72, 32);\
+	SQUASHFS_SWAP((s)->start_block, d, 104, 24);\
+	SQUASHFS_SWAP((s)->i_count, d, 128, 16);\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 's' - possible side-effects?
#1016: FILE: include/linux/squashfs_fs.h:384:
+#define SQUASHFS_SWAP_DIR_INDEX(s, d) {\
+	SQUASHFS_MEMSET(s, d, sizeof(squashfs_dir_index));\
+	SQUASHFS_SWAP((s)->index, d, 0, 27);\
+	SQUASHFS_SWAP((s)->start_block, d, 27, 29);\
+	SQUASHFS_SWAP((s)->size, d, 56, 8);\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'd' - possible side-effects?
#1016: FILE: include/linux/squashfs_fs.h:384:
+#define SQUASHFS_SWAP_DIR_INDEX(s, d) {\
+	SQUASHFS_MEMSET(s, d, sizeof(squashfs_dir_index));\
+	SQUASHFS_SWAP((s)->index, d, 0, 27);\
+	SQUASHFS_SWAP((s)->start_block, d, 27, 29);\
+	SQUASHFS_SWAP((s)->size, d, 56, 8);\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 's' - possible side-effects?
#1023: FILE: include/linux/squashfs_fs.h:391:
+#define SQUASHFS_SWAP_DIR_HEADER(s, d) {\
+	SQUASHFS_MEMSET(s, d, sizeof(squashfs_dir_header));\
+	SQUASHFS_SWAP((s)->count, d, 0, 8);\
+	SQUASHFS_SWAP((s)->start_block, d, 8, 24);\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'd' - possible side-effects?
#1023: FILE: include/linux/squashfs_fs.h:391:
+#define SQUASHFS_SWAP_DIR_HEADER(s, d) {\
+	SQUASHFS_MEMSET(s, d, sizeof(squashfs_dir_header));\
+	SQUASHFS_SWAP((s)->count, d, 0, 8);\
+	SQUASHFS_SWAP((s)->start_block, d, 8, 24);\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 's' - possible side-effects?
#1029: FILE: include/linux/squashfs_fs.h:397:
+#define SQUASHFS_SWAP_DIR_ENTRY(s, d) {\
+	SQUASHFS_MEMSET(s, d, sizeof(squashfs_dir_entry));\
+	SQUASHFS_SWAP((s)->offset, d, 0, 13);\
+	SQUASHFS_SWAP((s)->type, d, 13, 3);\
+	SQUASHFS_SWAP((s)->size, d, 16, 8);\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'd' - possible side-effects?
#1029: FILE: include/linux/squashfs_fs.h:397:
+#define SQUASHFS_SWAP_DIR_ENTRY(s, d) {\
+	SQUASHFS_MEMSET(s, d, sizeof(squashfs_dir_entry));\
+	SQUASHFS_SWAP((s)->offset, d, 0, 13);\
+	SQUASHFS_SWAP((s)->type, d, 13, 3);\
+	SQUASHFS_SWAP((s)->size, d, 16, 8);\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 's' - possible side-effects?
#1036: FILE: include/linux/squashfs_fs.h:404:
+#define SQUASHFS_SWAP_FRAGMENT_ENTRY(s, d) {\
+	SQUASHFS_MEMSET(s, d, sizeof(squashfs_fragment_entry));\
+	SQUASHFS_SWAP((s)->start_block, d, 0, 32);\
+	SQUASHFS_SWAP((s)->size, d, 32, 32);\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'd' - possible side-effects?
#1036: FILE: include/linux/squashfs_fs.h:404:
+#define SQUASHFS_SWAP_FRAGMENT_ENTRY(s, d) {\
+	SQUASHFS_MEMSET(s, d, sizeof(squashfs_fragment_entry));\
+	SQUASHFS_SWAP((s)->start_block, d, 0, 32);\
+	SQUASHFS_SWAP((s)->size, d, 32, 32);\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 's' - possible side-effects?
#1042: FILE: include/linux/squashfs_fs.h:410:
+#define SQUASHFS_SWAP_SHORTS(s, d, n) {\
+	int entry;\
+	int bit_position;\
+	SQUASHFS_MEMSET(s, d, n * 2);\
+	for(entry = 0, bit_position = 0; entry < n; entry++, bit_position += \
+			16)\
+		SQUASHFS_SWAP(s[entry], d, bit_position, 16);\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'd' - possible side-effects?
#1042: FILE: include/linux/squashfs_fs.h:410:
+#define SQUASHFS_SWAP_SHORTS(s, d, n) {\
+	int entry;\
+	int bit_position;\
+	SQUASHFS_MEMSET(s, d, n * 2);\
+	for(entry = 0, bit_position = 0; entry < n; entry++, bit_position += \
+			16)\
+		SQUASHFS_SWAP(s[entry], d, bit_position, 16);\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#1042: FILE: include/linux/squashfs_fs.h:410:
+#define SQUASHFS_SWAP_SHORTS(s, d, n) {\
+	int entry;\
+	int bit_position;\
+	SQUASHFS_MEMSET(s, d, n * 2);\
+	for(entry = 0, bit_position = 0; entry < n; entry++, bit_position += \
+			16)\
+		SQUASHFS_SWAP(s[entry], d, bit_position, 16);\
+}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'n' may be better as '(n)' to avoid precedence issues
#1042: FILE: include/linux/squashfs_fs.h:410:
+#define SQUASHFS_SWAP_SHORTS(s, d, n) {\
+	int entry;\
+	int bit_position;\
+	SQUASHFS_MEMSET(s, d, n * 2);\
+	for(entry = 0, bit_position = 0; entry < n; entry++, bit_position += \
+			16)\
+		SQUASHFS_SWAP(s[entry], d, bit_position, 16);\
+}

ERROR:SPACING: space required before the open parenthesis '('
#1046: FILE: include/linux/squashfs_fs.h:414:
+	for(entry = 0, bit_position = 0; entry < n; entry++, bit_position += \

CHECK:MACRO_ARG_REUSE: Macro argument reuse 's' - possible side-effects?
#1051: FILE: include/linux/squashfs_fs.h:419:
+#define SQUASHFS_SWAP_INTS(s, d, n) {\
+	int entry;\
+	int bit_position;\
+	SQUASHFS_MEMSET(s, d, n * 4);\
+	for(entry = 0, bit_position = 0; entry < n; entry++, bit_position += \
+			32)\
+		SQUASHFS_SWAP(s[entry], d, bit_position, 32);\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'd' - possible side-effects?
#1051: FILE: include/linux/squashfs_fs.h:419:
+#define SQUASHFS_SWAP_INTS(s, d, n) {\
+	int entry;\
+	int bit_position;\
+	SQUASHFS_MEMSET(s, d, n * 4);\
+	for(entry = 0, bit_position = 0; entry < n; entry++, bit_position += \
+			32)\
+		SQUASHFS_SWAP(s[entry], d, bit_position, 32);\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#1051: FILE: include/linux/squashfs_fs.h:419:
+#define SQUASHFS_SWAP_INTS(s, d, n) {\
+	int entry;\
+	int bit_position;\
+	SQUASHFS_MEMSET(s, d, n * 4);\
+	for(entry = 0, bit_position = 0; entry < n; entry++, bit_position += \
+			32)\
+		SQUASHFS_SWAP(s[entry], d, bit_position, 32);\
+}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'n' may be better as '(n)' to avoid precedence issues
#1051: FILE: include/linux/squashfs_fs.h:419:
+#define SQUASHFS_SWAP_INTS(s, d, n) {\
+	int entry;\
+	int bit_position;\
+	SQUASHFS_MEMSET(s, d, n * 4);\
+	for(entry = 0, bit_position = 0; entry < n; entry++, bit_position += \
+			32)\
+		SQUASHFS_SWAP(s[entry], d, bit_position, 32);\
+}

ERROR:SPACING: space required before the open parenthesis '('
#1055: FILE: include/linux/squashfs_fs.h:423:
+	for(entry = 0, bit_position = 0; entry < n; entry++, bit_position += \

CHECK:MACRO_ARG_REUSE: Macro argument reuse 's' - possible side-effects?
#1060: FILE: include/linux/squashfs_fs.h:428:
+#define SQUASHFS_SWAP_DATA(s, d, n, bits) {\
+	int entry;\
+	int bit_position;\
+	SQUASHFS_MEMSET(s, d, n * bits / 8);\
+	for(entry = 0, bit_position = 0; entry < n; entry++, bit_position += \
+			bits)\
+		SQUASHFS_SWAP(s[entry], d, bit_position, bits);\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'd' - possible side-effects?
#1060: FILE: include/linux/squashfs_fs.h:428:
+#define SQUASHFS_SWAP_DATA(s, d, n, bits) {\
+	int entry;\
+	int bit_position;\
+	SQUASHFS_MEMSET(s, d, n * bits / 8);\
+	for(entry = 0, bit_position = 0; entry < n; entry++, bit_position += \
+			bits)\
+		SQUASHFS_SWAP(s[entry], d, bit_position, bits);\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#1060: FILE: include/linux/squashfs_fs.h:428:
+#define SQUASHFS_SWAP_DATA(s, d, n, bits) {\
+	int entry;\
+	int bit_position;\
+	SQUASHFS_MEMSET(s, d, n * bits / 8);\
+	for(entry = 0, bit_position = 0; entry < n; entry++, bit_position += \
+			bits)\
+		SQUASHFS_SWAP(s[entry], d, bit_position, bits);\
+}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'n' may be better as '(n)' to avoid precedence issues
#1060: FILE: include/linux/squashfs_fs.h:428:
+#define SQUASHFS_SWAP_DATA(s, d, n, bits) {\
+	int entry;\
+	int bit_position;\
+	SQUASHFS_MEMSET(s, d, n * bits / 8);\
+	for(entry = 0, bit_position = 0; entry < n; entry++, bit_position += \
+			bits)\
+		SQUASHFS_SWAP(s[entry], d, bit_position, bits);\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'bits' - possible side-effects?
#1060: FILE: include/linux/squashfs_fs.h:428:
+#define SQUASHFS_SWAP_DATA(s, d, n, bits) {\
+	int entry;\
+	int bit_position;\
+	SQUASHFS_MEMSET(s, d, n * bits / 8);\
+	for(entry = 0, bit_position = 0; entry < n; entry++, bit_position += \
+			bits)\
+		SQUASHFS_SWAP(s[entry], d, bit_position, bits);\
+}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'bits' may be better as '(bits)' to avoid precedence issues
#1060: FILE: include/linux/squashfs_fs.h:428:
+#define SQUASHFS_SWAP_DATA(s, d, n, bits) {\
+	int entry;\
+	int bit_position;\
+	SQUASHFS_MEMSET(s, d, n * bits / 8);\
+	for(entry = 0, bit_position = 0; entry < n; entry++, bit_position += \
+			bits)\
+		SQUASHFS_SWAP(s[entry], d, bit_position, bits);\
+}

ERROR:SPACING: space required before the open parenthesis '('
#1064: FILE: include/linux/squashfs_fs.h:432:
+	for(entry = 0, bit_position = 0; entry < n; entry++, bit_position += \

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1073: FILE: include/linux/squashfs_fs.h:441:
+typedef struct {

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1078: FILE: include/linux/squashfs_fs.h:446:
+} __attribute__ ((packed)) squashfs_base_inode_header_1;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1080: FILE: include/linux/squashfs_fs.h:448:
+typedef struct {

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1087: FILE: include/linux/squashfs_fs.h:455:
+} __attribute__ ((packed)) squashfs_ipc_inode_header_1;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1089: FILE: include/linux/squashfs_fs.h:457:
+typedef struct {

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1095: FILE: include/linux/squashfs_fs.h:463:
+} __attribute__ ((packed)) squashfs_dev_inode_header_1;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1096: FILE: include/linux/squashfs_fs.h:464:
+^I$

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1097: FILE: include/linux/squashfs_fs.h:465:
+typedef struct {

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1104: FILE: include/linux/squashfs_fs.h:472:
+} __attribute__ ((packed)) squashfs_symlink_inode_header_1;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1106: FILE: include/linux/squashfs_fs.h:474:
+typedef struct {

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1115: FILE: include/linux/squashfs_fs.h:483:
+} __attribute__ ((packed)) squashfs_reg_inode_header_1;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1117: FILE: include/linux/squashfs_fs.h:485:
+typedef struct {

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1126: FILE: include/linux/squashfs_fs.h:494:
+} __attribute__  ((packed)) squashfs_dir_inode_header_1;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 's' - possible side-effects?
#1128: FILE: include/linux/squashfs_fs.h:496:
+#define SQUASHFS_SWAP_BASE_INODE_HEADER_1(s, d, n) {\
+	SQUASHFS_MEMSET(s, d, n);\
+	SQUASHFS_SWAP((s)->inode_type, d, 0, 4);\
+	SQUASHFS_SWAP((s)->mode, d, 4, 12);\
+	SQUASHFS_SWAP((s)->uid, d, 16, 4);\
+	SQUASHFS_SWAP((s)->guid, d, 20, 4);\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'd' - possible side-effects?
#1128: FILE: include/linux/squashfs_fs.h:496:
+#define SQUASHFS_SWAP_BASE_INODE_HEADER_1(s, d, n) {\
+	SQUASHFS_MEMSET(s, d, n);\
+	SQUASHFS_SWAP((s)->inode_type, d, 0, 4);\
+	SQUASHFS_SWAP((s)->mode, d, 4, 12);\
+	SQUASHFS_SWAP((s)->uid, d, 16, 4);\
+	SQUASHFS_SWAP((s)->guid, d, 20, 4);\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 's' - possible side-effects?
#1136: FILE: include/linux/squashfs_fs.h:504:
+#define SQUASHFS_SWAP_IPC_INODE_HEADER_1(s, d) {\
+	SQUASHFS_SWAP_BASE_INODE_HEADER_1(s, d, \
+			sizeof(squashfs_ipc_inode_header_1));\
+	SQUASHFS_SWAP((s)->type, d, 24, 4);\
+	SQUASHFS_SWAP((s)->offset, d, 28, 4);\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'd' - possible side-effects?
#1136: FILE: include/linux/squashfs_fs.h:504:
+#define SQUASHFS_SWAP_IPC_INODE_HEADER_1(s, d) {\
+	SQUASHFS_SWAP_BASE_INODE_HEADER_1(s, d, \
+			sizeof(squashfs_ipc_inode_header_1));\
+	SQUASHFS_SWAP((s)->type, d, 24, 4);\
+	SQUASHFS_SWAP((s)->offset, d, 28, 4);\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 's' - possible side-effects?
#1143: FILE: include/linux/squashfs_fs.h:511:
+#define SQUASHFS_SWAP_DEV_INODE_HEADER_1(s, d) {\
+	SQUASHFS_SWAP_BASE_INODE_HEADER_1(s, d, \
+			sizeof(squashfs_dev_inode_header_1));\
+	SQUASHFS_SWAP((s)->rdev, d, 24, 16);\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'd' - possible side-effects?
#1143: FILE: include/linux/squashfs_fs.h:511:
+#define SQUASHFS_SWAP_DEV_INODE_HEADER_1(s, d) {\
+	SQUASHFS_SWAP_BASE_INODE_HEADER_1(s, d, \
+			sizeof(squashfs_dev_inode_header_1));\
+	SQUASHFS_SWAP((s)->rdev, d, 24, 16);\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 's' - possible side-effects?
#1149: FILE: include/linux/squashfs_fs.h:517:
+#define SQUASHFS_SWAP_SYMLINK_INODE_HEADER_1(s, d) {\
+	SQUASHFS_SWAP_BASE_INODE_HEADER(s, d, \
+			sizeof(squashfs_symlink_inode_header_1));\
+	SQUASHFS_SWAP((s)->symlink_size, d, 24, 16);\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'd' - possible side-effects?
#1149: FILE: include/linux/squashfs_fs.h:517:
+#define SQUASHFS_SWAP_SYMLINK_INODE_HEADER_1(s, d) {\
+	SQUASHFS_SWAP_BASE_INODE_HEADER(s, d, \
+			sizeof(squashfs_symlink_inode_header_1));\
+	SQUASHFS_SWAP((s)->symlink_size, d, 24, 16);\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 's' - possible side-effects?
#1155: FILE: include/linux/squashfs_fs.h:523:
+#define SQUASHFS_SWAP_REG_INODE_HEADER_1(s, d) {\
+	SQUASHFS_SWAP_BASE_INODE_HEADER(s, d, \
+			sizeof(squashfs_reg_inode_header_1));\
+	SQUASHFS_SWAP((s)->mtime, d, 24, 32);\
+	SQUASHFS_SWAP((s)->start_block, d, 56, 32);\
+	SQUASHFS_SWAP((s)->file_size, d, 88, SQUASHFS_MAX_FILE_SIZE_LOG);\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'd' - possible side-effects?
#1155: FILE: include/linux/squashfs_fs.h:523:
+#define SQUASHFS_SWAP_REG_INODE_HEADER_1(s, d) {\
+	SQUASHFS_SWAP_BASE_INODE_HEADER(s, d, \
+			sizeof(squashfs_reg_inode_header_1));\
+	SQUASHFS_SWAP((s)->mtime, d, 24, 32);\
+	SQUASHFS_SWAP((s)->start_block, d, 56, 32);\
+	SQUASHFS_SWAP((s)->file_size, d, 88, SQUASHFS_MAX_FILE_SIZE_LOG);\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 's' - possible side-effects?
#1163: FILE: include/linux/squashfs_fs.h:531:
+#define SQUASHFS_SWAP_DIR_INODE_HEADER_1(s, d) {\
+	SQUASHFS_SWAP_BASE_INODE_HEADER(s, d, \
+			sizeof(squashfs_dir_inode_header_1));\
+	SQUASHFS_SWAP((s)->file_size, d, 24, 19);\
+	SQUASHFS_SWAP((s)->offset, d, 43, 13);\
+	SQUASHFS_SWAP((s)->mtime, d, 56, 32);\
+	SQUASHFS_SWAP((s)->start_block, d, 88, 24);\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'd' - possible side-effects?
#1163: FILE: include/linux/squashfs_fs.h:531:
+#define SQUASHFS_SWAP_DIR_INODE_HEADER_1(s, d) {\
+	SQUASHFS_SWAP_BASE_INODE_HEADER(s, d, \
+			sizeof(squashfs_dir_inode_header_1));\
+	SQUASHFS_SWAP((s)->file_size, d, 24, 19);\
+	SQUASHFS_SWAP((s)->offset, d, 43, 13);\
+	SQUASHFS_SWAP((s)->mtime, d, 56, 32);\
+	SQUASHFS_SWAP((s)->start_block, d, 88, 24);\
+}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1189: FILE: include/linux/squashfs_fs.h:557:
+^I/* convert from big endian to little endian */ $

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'tbits' - possible side-effects?
#1190: FILE: include/linux/squashfs_fs.h:558:
+#define SQUASHFS_SWAP(value, p, pos, tbits) _SQUASHFS_SWAP(value, p, pos, \
+		tbits, 64 - tbits - b_pos)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'p' may be better as '(p)' to avoid precedence issues
#1194: FILE: include/linux/squashfs_fs.h:562:
+#define _SQUASHFS_SWAP(value, p, pos, tbits, SHIFT) {\
+	int bits;\
+	int b_pos = pos % 8;\
+	unsigned long long val = 0;\
+	unsigned char *s = (unsigned char *)p + (pos / 8);\
+	unsigned char *d = ((unsigned char *) &val) + 7;\
+	for(bits = 0; bits < (tbits + b_pos); bits += 8) \
+		*d-- = *s++;\
+	value = (val >> (SHIFT))/* & ((1 << tbits) - 1)*/;\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pos' - possible side-effects?
#1194: FILE: include/linux/squashfs_fs.h:562:
+#define _SQUASHFS_SWAP(value, p, pos, tbits, SHIFT) {\
+	int bits;\
+	int b_pos = pos % 8;\
+	unsigned long long val = 0;\
+	unsigned char *s = (unsigned char *)p + (pos / 8);\
+	unsigned char *d = ((unsigned char *) &val) + 7;\
+	for(bits = 0; bits < (tbits + b_pos); bits += 8) \
+		*d-- = *s++;\
+	value = (val >> (SHIFT))/* & ((1 << tbits) - 1)*/;\
+}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'pos' may be better as '(pos)' to avoid precedence issues
#1194: FILE: include/linux/squashfs_fs.h:562:
+#define _SQUASHFS_SWAP(value, p, pos, tbits, SHIFT) {\
+	int bits;\
+	int b_pos = pos % 8;\
+	unsigned long long val = 0;\
+	unsigned char *s = (unsigned char *)p + (pos / 8);\
+	unsigned char *d = ((unsigned char *) &val) + 7;\
+	for(bits = 0; bits < (tbits + b_pos); bits += 8) \
+		*d-- = *s++;\
+	value = (val >> (SHIFT))/* & ((1 << tbits) - 1)*/;\
+}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'tbits' may be better as '(tbits)' to avoid precedence issues
#1194: FILE: include/linux/squashfs_fs.h:562:
+#define _SQUASHFS_SWAP(value, p, pos, tbits, SHIFT) {\
+	int bits;\
+	int b_pos = pos % 8;\
+	unsigned long long val = 0;\
+	unsigned char *s = (unsigned char *)p + (pos / 8);\
+	unsigned char *d = ((unsigned char *) &val) + 7;\
+	for(bits = 0; bits < (tbits + b_pos); bits += 8) \
+		*d-- = *s++;\
+	value = (val >> (SHIFT))/* & ((1 << tbits) - 1)*/;\
+}

CHECK:SPACING: No space is necessary after a cast
#1199: FILE: include/linux/squashfs_fs.h:567:
+	unsigned char *d = ((unsigned char *) &val) + 7;\

ERROR:SPACING: space required before the open parenthesis '('
#1200: FILE: include/linux/squashfs_fs.h:568:
+	for(bits = 0; bits < (tbits + b_pos); bits += 8) \

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#1205: FILE: include/linux/squashfs_fs.h:573:
+#define SQUASHFS_MEMSET(s, d, n)	memset(s, 0, n);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1213: FILE: include/linux/squashfs_fs_i.h:1:
+#ifndef SQUASHFS_FS_I

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1232: FILE: include/linux/squashfs_fs_i.h:20:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1233: FILE: include/linux/squashfs_fs_i.h:21:
+ * Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1238: FILE: include/linux/squashfs_fs_i.h:26:
+typedef struct squashfs_inode_info {

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1261: FILE: include/linux/squashfs_fs_sb.h:1:
+#ifndef SQUASHFS_FS_SB

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1280: FILE: include/linux/squashfs_fs_sb.h:20:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1281: FILE: include/linux/squashfs_fs_sb.h:21:
+ * Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1288: FILE: include/linux/squashfs_fs_sb.h:28:
+typedef struct {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1302: FILE: include/linux/squashfs_fs_sb.h:42:
+typedef struct squashfs_sb_info {

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#1322: FILE: include/linux/squashfs_fs_sb.h:62:
+	struct inode		*(*iget)(struct super_block *s, squashfs_inode \

WARNING:FUNCTION_ARGUMENTS: function definition argument 'squashfs_inode' should also have an identifier name
#1322: FILE: include/linux/squashfs_fs_sb.h:62:
+	struct inode		*(*iget)(struct super_block *s, squashfs_inode \

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'inode' should also have an identifier name
#1322: FILE: include/linux/squashfs_fs_sb.h:62:
+	struct inode		*(*iget)(struct super_block *s, squashfs_inode \

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#1324: FILE: include/linux/squashfs_fs_sb.h:64:
+	unsigned int		(*read_blocklist)(struct inode *inode, int \

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1324: FILE: include/linux/squashfs_fs_sb.h:64:
+	unsigned int		(*read_blocklist)(struct inode *inode, int \

CHECK:SPACING: No space is necessary after a cast
#1360: FILE: init/do_mounts_rd.c:70:
+	squashfsb = (struct squashfs_super_block *) buf;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#1370: FILE: init/do_mounts_rd.c:110:
+		printk(KERN_NOTICE

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1373: FILE: init/do_mounts_rd.c:113:
+		nblocks = (squashfsb->bytes_used+BLOCK_SIZE-1)>>BLOCK_SIZE_BITS;
 		                                ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1373: FILE: init/do_mounts_rd.c:113:
+		nblocks = (squashfsb->bytes_used+BLOCK_SIZE-1)>>BLOCK_SIZE_BITS;
 		                                           ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#1373: FILE: init/do_mounts_rd.c:113:
+		nblocks = (squashfsb->bytes_used+BLOCK_SIZE-1)>>BLOCK_SIZE_BITS;
 		                                              ^

WARNING:MAINTAINERS_STYLE: MAINTAINERS entries use one tab after TYPE:
#1388: FILE: MAINTAINERS:2129:
+P: Phillip Lougher

WARNING:MAINTAINERS_STYLE: MAINTAINERS entries use one tab after TYPE:
#1389: FILE: MAINTAINERS:2130:
+M: phillip@lougher.demon.co.uk

WARNING:MAINTAINERS_STYLE: Misordered MAINTAINERS entry - list 'M:' before 'P:'
#1389: FILE: MAINTAINERS:2130:
+P: Phillip Lougher
+M: phillip@lougher.demon.co.uk

WARNING:MAINTAINERS_STYLE: MAINTAINERS entries use one tab after TYPE:
#1390: FILE: MAINTAINERS:2131:
+W: http://squashfs.sourceforge.net

WARNING:MAINTAINERS_STYLE: MAINTAINERS entries use one tab after TYPE:
#1391: FILE: MAINTAINERS:2132:
+L: squashfs-devel@lists.sourceforge.net

WARNING:MAINTAINERS_STYLE: Misordered MAINTAINERS entry - list 'L:' before 'W:'
#1391: FILE: MAINTAINERS:2132:
+W: http://squashfs.sourceforge.net
+L: squashfs-devel@lists.sourceforge.net

WARNING:MAINTAINERS_STYLE: MAINTAINERS entries use one tab after TYPE:
#1392: FILE: MAINTAINERS:2133:
+S: Maintained

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000199206.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 35 errors, 95 warnings, 126 checks, 1312 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000199206.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
