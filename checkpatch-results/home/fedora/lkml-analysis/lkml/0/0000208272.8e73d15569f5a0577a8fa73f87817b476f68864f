ERROR:TRAILING_WHITESPACE: trailing whitespace
#63: FILE: crypto/cipher.c:44:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Unbalanced braces around else statement
#67: FILE: crypto/cipher.c:48:
+	} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#76: FILE: crypto/cipher.c:54:
+ * Electronic Code Book (ECB) mode implementation $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#94: FILE: crypto/cipher.c:62:
+static int ecb_process_gw(void *priv, int nsg, void **buf) $

WARNING:LINE_SPACING: Missing a blank line after declarations
#97: FILE: crypto/cipher.c:65:
+	struct ecb_process_priv *ecb_priv = priv;
+	ecb_priv->crfn(crypto_tfm_ctx(ecb_priv->tfm), buf[0], buf[1]);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#107: FILE: crypto/cipher.c:75:
+^Istruct ecb_process_priv priv = { $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#114: FILE: crypto/cipher.c:82:
+^Iscatterwalk_info_init(ecb_info+0, dst, bsize, (char[bsize]){}, $

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#114: FILE: crypto/cipher.c:82:
+	scatterwalk_info_init(ecb_info+0, dst, bsize, (char[bsize]){}, 
 	                              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open brace '{'
#114: FILE: crypto/cipher.c:82:
+	scatterwalk_info_init(ecb_info+0, dst, bsize, (char[bsize]){}, 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#116: FILE: crypto/cipher.c:84:
+^Iscatterwalk_info_init(ecb_info+1, src, bsize, (char[bsize]){}, $

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#116: FILE: crypto/cipher.c:84:
+	scatterwalk_info_init(ecb_info+1, src, bsize, (char[bsize]){}, 
 	                              ^

ERROR:SPACING: space required before the open brace '{'
#116: FILE: crypto/cipher.c:84:
+	scatterwalk_info_init(ecb_info+1, src, bsize, (char[bsize]){}, 

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#118: FILE: crypto/cipher.c:86:
+	scatterwalk_info_endtag(ecb_info+2);
 	                                ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#155: FILE: crypto/cipher.c:95:
+	return scatterwalk_walk(ecb_process_gw, &priv, nbytes/bsize, ecb_info);
 	                                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#165: FILE: crypto/cipher.c:103:
+	return ecb_template(tfm,dst,src,nbytes,tfm->__crt_alg->cra_cipher.cia_encrypt);
 	                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#165: FILE: crypto/cipher.c:103:
+	return ecb_template(tfm,dst,src,nbytes,tfm->__crt_alg->cra_cipher.cia_encrypt);
 	                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#165: FILE: crypto/cipher.c:103:
+	return ecb_template(tfm,dst,src,nbytes,tfm->__crt_alg->cra_cipher.cia_encrypt);
 	                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#165: FILE: crypto/cipher.c:103:
+	return ecb_template(tfm,dst,src,nbytes,tfm->__crt_alg->cra_cipher.cia_encrypt);
 	                                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#176: FILE: crypto/cipher.c:111:
+	return ecb_template(tfm,dst,src,nbytes,tfm->__crt_alg->cra_cipher.cia_decrypt);
 	                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#176: FILE: crypto/cipher.c:111:
+	return ecb_template(tfm,dst,src,nbytes,tfm->__crt_alg->cra_cipher.cia_decrypt);
 	                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#176: FILE: crypto/cipher.c:111:
+	return ecb_template(tfm,dst,src,nbytes,tfm->__crt_alg->cra_cipher.cia_decrypt);
 	                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#176: FILE: crypto/cipher.c:111:
+	return ecb_template(tfm,dst,src,nbytes,tfm->__crt_alg->cra_cipher.cia_decrypt);
 	                                      ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#189: FILE: crypto/cipher.c:124:
+static int cbc_process_gw(void *priv, int nsg, void **buf) $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#225: FILE: crypto/cipher.c:147:
+		memcpy(cbc_priv->next_iv,src,bsize);
 		                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#225: FILE: crypto/cipher.c:147:
+		memcpy(cbc_priv->next_iv,src,bsize);
 		                            ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#281: FILE: crypto/cipher.c:180:
+^Iscatterwalk_info_init(cbc_info+0, dst, bsize, (char[bsize]){}, $

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#281: FILE: crypto/cipher.c:180:
+	scatterwalk_info_init(cbc_info+0, dst, bsize, (char[bsize]){}, 
 	                              ^

ERROR:SPACING: space required before the open brace '{'
#281: FILE: crypto/cipher.c:180:
+	scatterwalk_info_init(cbc_info+0, dst, bsize, (char[bsize]){}, 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#283: FILE: crypto/cipher.c:182:
+^Iscatterwalk_info_init(cbc_info+1, src, bsize, (char[bsize]){}, $

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#283: FILE: crypto/cipher.c:182:
+	scatterwalk_info_init(cbc_info+1, src, bsize, (char[bsize]){}, 
 	                              ^

ERROR:SPACING: space required before the open brace '{'
#283: FILE: crypto/cipher.c:182:
+	scatterwalk_info_init(cbc_info+1, src, bsize, (char[bsize]){}, 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#284: FILE: crypto/cipher.c:183:
+^I^I^I      SCATTERWALK_IO_INPUT); $

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#285: FILE: crypto/cipher.c:184:
+	scatterwalk_info_endtag(cbc_info+2);
 	                                ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#295: FILE: crypto/cipher.c:186:
+	return scatterwalk_walk(cbc_process_gw, &priv, nbytes/bsize, cbc_info);
 	                                                     ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#315: FILE: crypto/cipher.c:197:
+^Ichar scratch1[bsize]; $

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#341: FILE: crypto/cipher.c:215:
+	scatterwalk_info_init(cbc_info+0, dst, bsize, (char[bsize]){}, SCATTERWALK_IO_OUTPUT);
 	                              ^

ERROR:SPACING: space required before the open brace '{'
#341: FILE: crypto/cipher.c:215:
+	scatterwalk_info_init(cbc_info+0, dst, bsize, (char[bsize]){}, SCATTERWALK_IO_OUTPUT);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#342: FILE: crypto/cipher.c:216:
+	scatterwalk_info_init(cbc_info+1, src, bsize, (char[bsize]){}, SCATTERWALK_IO_INPUT);
 	                              ^

ERROR:SPACING: space required before the open brace '{'
#342: FILE: crypto/cipher.c:216:
+	scatterwalk_info_init(cbc_info+1, src, bsize, (char[bsize]){}, SCATTERWALK_IO_INPUT);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#343: FILE: crypto/cipher.c:217:
+	scatterwalk_info_endtag(cbc_info+2);
 	                                ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#345: FILE: crypto/cipher.c:219:
+	r = scatterwalk_walk(cbc_process_gw, &priv, nbytes/bsize, cbc_info);
 	                                                  ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#347: FILE: crypto/cipher.c:221:
+^Iif (priv.curr_iv != iv) $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#348: FILE: crypto/cipher.c:222:
+		memcpy(iv,priv.curr_iv,bsize);
 		         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#348: FILE: crypto/cipher.c:222:
+		memcpy(iv,priv.curr_iv,bsize);
 		                      ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#423: FILE: crypto/cipher.c:308:
+^I^I$

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#423: FILE: crypto/cipher.c:308:
 	if (ops->cit_mode == CRYPTO_TFM_MODE_CBC) {
+		

ERROR:TRAILING_WHITESPACE: trailing whitespace
#428: FILE: crypto/cipher.c:313:
+^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#432: FILE: crypto/cipher.c:317:
+^I^I^I$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#434: FILE: crypto/cipher.c:319:
+			printk(KERN_WARNING "%s: block size %u not supported\n",

ERROR:TRAILING_WHITESPACE: trailing whitespace
#440: FILE: crypto/cipher.c:325:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#496: FILE: crypto/scatterwalk.h:50:
+/* If the following functions are ever going to be exported symbols, I $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#497: FILE: crypto/scatterwalk.h:51:
+ * request them to be GPL-only symbols. Thanks, -- clemens@endorphin.org */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct walk_info *' should also have an identifier name
#501: FILE: crypto/scatterwalk.h:55:
+void scatterwalk_info_endtag(struct walk_info *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#503: FILE: crypto/scatterwalk.h:57:
+void scatterwalk_info_init(struct walk_info *winfo, struct scatterlist *sg, int stepsize, void *buf, int io);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:TRAILING_WHITESPACE: trailing whitespace
#546: FILE: crypto/scatterwalk.c:40:
+static inline int scatterwalk_needscratch(struct scatter_walk *walk, int nbytes) $

WARNING:TYPO_SPELLING: 'initialzes' may be misspelled - perhaps 'initializes'?
#561: FILE: crypto/scatterwalk.c:60:
+ * The scatterwalk_info_init function initialzes a walk_info struct 
                                       ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#561: FILE: crypto/scatterwalk.c:60:
+ * The scatterwalk_info_init function initialzes a walk_info struct $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#562: FILE: crypto/scatterwalk.c:61:
+ * sg       .. pointer to the scatterlist to be processed $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#568: FILE: crypto/scatterwalk.c:67:
+void scatterwalk_info_init(struct walk_info *winfo, struct scatterlist *sg, $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#584: FILE: crypto/scatterwalk.c:81:
+#define scatterwalk_map(walk,out) \
                             ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#584: FILE: crypto/scatterwalk.c:81:
+#define scatterwalk_map(walk,out) \
+	(walk)->data = crypto_kmap((walk)->page, (out)) + (walk)->offset; 

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'walk' - possible side-effects?
#584: FILE: crypto/scatterwalk.c:81:
+#define scatterwalk_map(walk,out) \
+	(walk)->data = crypto_kmap((walk)->page, (out)) + (walk)->offset; 

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#584: FILE: crypto/scatterwalk.c:81:
+#define scatterwalk_map(walk,out) \
+	(walk)->data = crypto_kmap((walk)->page, (out)) + (walk)->offset; 

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#585: FILE: crypto/scatterwalk.c:82:
+^I(walk)->data = crypto_kmap((walk)->page, (out)) + (walk)->offset; $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#588: FILE: crypto/scatterwalk.c:85:
+static inline void scatterwalk_pagedone(struct scatter_walk *walk, int out,
 				 unsigned int more)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#609: FILE: crypto/scatterwalk.c:109:
+static inline void scatterwalk_copychunks(void *buf, struct scatter_walk *walk,
+			    size_t nbytes, int out)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#624: FILE: crypto/scatterwalk.c:119:
+^I^I^Iscatterwalk_pagedone(walk, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#625: FILE: crypto/scatterwalk.c:120:
+^I^I^I^I^I     out, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#640: FILE: crypto/scatterwalk.c:132:
+/*  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#644: FILE: crypto/scatterwalk.c:136:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#646: FILE: crypto/scatterwalk.c:138:
+ * an arbitrary number of scatterlist data as it's arguments. The scatterlist data $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#649: FILE: crypto/scatterwalk.c:141:
+ * to a scratch buffer, if the scatterlist data is fragmented over a $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#656: FILE: crypto/scatterwalk.c:148:
+ * this walk_info struct, such as step size or if the scatterlist is used as $

WARNING:TYPO_SPELLING: 'auxillary' may be misspelled - perhaps 'auxiliary'?
#659: FILE: crypto/scatterwalk.c:151:
+ * The information about all scatterlists and their auxillary
                                                     ^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#666: FILE: crypto/scatterwalk.c:158:
+ * scatterwalk_walk can be called multiple times after an initialization, $

WARNING:TYPO_SPELLING: 'quitted' may be misspelled - perhaps 'quit'?
#667: FILE: crypto/scatterwalk.c:159:
+ * then the processing will pick up, where the previous one quitted.
                                                             ^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#677: FILE: crypto/scatterwalk.c:169:
+^I^I     struct walk_info *walk_infos) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#680: FILE: crypto/scatterwalk.c:172:
+^I$

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#694: FILE: crypto/scatterwalk.c:186:
+	dispatch_list = (void *[nsl]){}; /* This alien thing is a C99 compound literal */
 	                      ^

ERROR:SPACING: space required before the open brace '{'
#694: FILE: crypto/scatterwalk.c:186:
+	dispatch_list = (void *[nsl]){}; /* This alien thing is a C99 compound literal */

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#698: FILE: crypto/scatterwalk.c:190:
+			*cbuf = scatterwalk_needscratch(&csg->sw,csg->stepsize)?csg->sw.data:csg->buf;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#698: FILE: crypto/scatterwalk.c:190:
+			*cbuf = scatterwalk_needscratch(&csg->sw,csg->stepsize)?csg->sw.data:csg->buf;
 			                                        ^

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#698: FILE: crypto/scatterwalk.c:190:
+			*cbuf = scatterwalk_needscratch(&csg->sw,csg->stepsize)?csg->sw.data:csg->buf;
 			                                                       ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#698: FILE: crypto/scatterwalk.c:190:
+			*cbuf = scatterwalk_needscratch(&csg->sw,csg->stepsize)?csg->sw.data:csg->buf;
 			                                                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#701: FILE: crypto/scatterwalk.c:193:
+				scatterwalk_copychunks(*cbuf,&csg->sw,csg->stepsize,0);
 				                            ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#701: FILE: crypto/scatterwalk.c:193:
+				scatterwalk_copychunks(*cbuf,&csg->sw,csg->stepsize,0);
 				                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#701: FILE: crypto/scatterwalk.c:193:
+				scatterwalk_copychunks(*cbuf,&csg->sw,csg->stepsize,0);
 				                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#701: FILE: crypto/scatterwalk.c:193:
+				scatterwalk_copychunks(*cbuf,&csg->sw,csg->stepsize,0);
 				                                                   ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#708: FILE: crypto/scatterwalk.c:200:
+^I^Ifor (csg = walk_infos, cbuf = dispatch_list; csg->sw.sg; csg++, cbuf++) {^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#709: FILE: crypto/scatterwalk.c:201:
+^I^I^Iif (csg->ioflag == 1) $

ERROR:SPACING: space required after that ',' (ctx:VxO)
#710: FILE: crypto/scatterwalk.c:202:
+				scatterwalk_copychunks(*cbuf,&csg->sw,csg->stepsize,1);
 				                            ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#710: FILE: crypto/scatterwalk.c:202:
+				scatterwalk_copychunks(*cbuf,&csg->sw,csg->stepsize,1);
 				                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#710: FILE: crypto/scatterwalk.c:202:
+				scatterwalk_copychunks(*cbuf,&csg->sw,csg->stepsize,1);
 				                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#710: FILE: crypto/scatterwalk.c:202:
+				scatterwalk_copychunks(*cbuf,&csg->sw,csg->stepsize,1);
 				                                                   ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000208272.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 64 errors, 10 warnings, 20 checks, 659 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000208272.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
