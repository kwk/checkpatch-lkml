WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#35: FILE: drivers/infiniband/hw/ipath/ipath_uc.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#142: FILE: drivers/infiniband/hw/ipath/ipath_uc.c:108:
+	if (qp->s_hdrwords != 0) {
[...]
+			if (ipath_verbs_send(dev->dd, qp->s_hdrwords,

CHECK:SPACING: No space is necessary after a cast
#149: FILE: drivers/infiniband/hw/ipath/ipath_uc.c:115:
+					     (u32 *) &qp->s_hdr,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#192: FILE: drivers/infiniband/hw/ipath/ipath_uc.c:158:
+		qp->s_psn = wqe->psn = qp->s_next_psn;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#196: FILE: drivers/infiniband/hw/ipath/ipath_uc.c:162:
+		qp->s_len = len = wqe->length;

CHECK:BRACES: braces {} should be used on all arms of this statement
#205: FILE: drivers/infiniband/hw/ipath/ipath_uc.c:171:
+			if (wqe->wr.opcode == IB_WR_SEND)
[...]
+			else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#207: FILE: drivers/infiniband/hw/ipath/ipath_uc.c:173:
+			else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#231: FILE: drivers/infiniband/hw/ipath/ipath_uc.c:197:
+			if (wqe->wr.opcode == IB_WR_RDMA_WRITE)
[...]
+			else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#233: FILE: drivers/infiniband/hw/ipath/ipath_uc.c:199:
+			else {

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#253: FILE: drivers/infiniband/hw/ipath/ipath_uc.c:219:
+		/* FALLTHROUGH */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

CHECK:BRACES: braces {} should be used on all arms of this statement
#260: FILE: drivers/infiniband/hw/ipath/ipath_uc.c:226:
+		if (wqe->wr.opcode == IB_WR_SEND)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#262: FILE: drivers/infiniband/hw/ipath/ipath_uc.c:228:
+		else {

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#274: FILE: drivers/infiniband/hw/ipath/ipath_uc.c:240:
+		/* FALLTHROUGH */

CHECK:BRACES: braces {} should be used on all arms of this statement
#281: FILE: drivers/infiniband/hw/ipath/ipath_uc.c:247:
+		if (wqe->wr.opcode == IB_WR_RDMA_WRITE)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#283: FILE: drivers/infiniband/hw/ipath/ipath_uc.c:249:
+		else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#395: FILE: drivers/infiniband/hw/ipath/ipath_uc.c:361:
+		if (header_in_data) {
[...]
+		} else
[...]

CHECK:SPACING: No space is necessary after a cast
#396: FILE: drivers/infiniband/hw/ipath/ipath_uc.c:362:
+			psn = be32_to_cpu(((u32 *) data)[0]);

CHECK:BRACES: Unbalanced braces around else statement
#398: FILE: drivers/infiniband/hw/ipath/ipath_uc.c:364:
+		} else

WARNING:INDENTED_LABEL: labels should not be indented
#419: FILE: drivers/infiniband/hw/ipath/ipath_uc.c:385:
+	inv:

WARNING:INDENTED_LABEL: labels should not be indented
#472: FILE: drivers/infiniband/hw/ipath/ipath_uc.c:438:
+	send_first:

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#487: FILE: drivers/infiniband/hw/ipath/ipath_uc.c:453:
+		/* FALLTHROUGH */

WARNING:INDENTED_LABEL: labels should not be indented
#505: FILE: drivers/infiniband/hw/ipath/ipath_uc.c:471:
+	send_last_imm:

CHECK:SPACING: No space is necessary after a cast
#507: FILE: drivers/infiniband/hw/ipath/ipath_uc.c:473:
+			wc.imm_data = *(u32 *) data;

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#515: FILE: drivers/infiniband/hw/ipath/ipath_uc.c:481:
+		/* FALLTHROUGH */

WARNING:INDENTED_LABEL: labels should not be indented
#517: FILE: drivers/infiniband/hw/ipath/ipath_uc.c:483:
+	send_last:

WARNING:INDENTED_LABEL: labels should not be indented
#536: FILE: drivers/infiniband/hw/ipath/ipath_uc.c:502:
+	last_imm:

WARNING:CONSTANT_CONVERSION: __constant_cpu_to_be32 should be cpu_to_be32
#552: FILE: drivers/infiniband/hw/ipath/ipath_uc.c:518:
+			       __constant_cpu_to_be32(1 << 23));

Use of __constant_<foo> form is discouraged for the following functions::

  __constant_cpu_to_be[x]
  __constant_cpu_to_le[x]
  __constant_be[x]_to_cpu
  __constant_le[x]_to_cpu
  __constant_htons
  __constant_ntohs

Using any of these outside of include/uapi/ is not preferred as using the
function without __constant_ is identical when the argument is a
constant.

In big endian systems, the macros like __constant_cpu_to_be32(x) and
cpu_to_be32(x) expand to the same expression::

  #define __constant_cpu_to_be32(x) ((__force __be32)(__u32)(x))
  #define __cpu_to_be32(x)          ((__force __be32)(__u32)(x))

In little endian systems, the macros __constant_cpu_to_be32(x) and
cpu_to_be32(x) expand to __constant_swab32 and __swab32.  __swab32
has a __builtin_constant_p check::

  #define __swab32(x)				\
    (__builtin_constant_p((__u32)(x)) ?	\
    ___constant_swab32(x) :			\
    __fswab32(x))

So ultimately they have a special case for constants.
Similar is the case with all of the macros in the list.  Thus
using the __constant_... forms are unnecessarily verbose and
not preferred outside of include/uapi.

See: https://lore.kernel.org/lkml/1400106425.12666.6.camel@joe-AO725/

WARNING:INDENTED_LABEL: labels should not be indented
#558: FILE: drivers/infiniband/hw/ipath/ipath_uc.c:524:
+	rdma_first:

CHECK:BRACES: braces {} should be used on all arms of this statement
#560: FILE: drivers/infiniband/hw/ipath/ipath_uc.c:526:
+		if (!header_in_data)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#562: FILE: drivers/infiniband/hw/ipath/ipath_uc.c:528:
+		else {

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#574: FILE: drivers/infiniband/hw/ipath/ipath_uc.c:540:
+			if (unlikely(!ipath_rkey_ok(

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#598: FILE: drivers/infiniband/hw/ipath/ipath_uc.c:564:
+		/* FALLTHROUGH */

WARNING:INDENTED_LABEL: labels should not be indented
#614: FILE: drivers/infiniband/hw/ipath/ipath_uc.c:580:
+	rdma_last_imm:

CHECK:SPACING: No space is necessary after a cast
#636: FILE: drivers/infiniband/hw/ipath/ipath_uc.c:602:
+			wc.imm_data = *(u32 *) data;

WARNING:INDENTED_LABEL: labels should not be indented
#648: FILE: drivers/infiniband/hw/ipath/ipath_uc.c:614:
+	rdma_last:

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#684: FILE: drivers/infiniband/hw/ipath/ipath_ud.c:1:
+/*

CHECK:SPACING: No space is necessary after a cast
#755: FILE: drivers/infiniband/hw/ipath/ipath_ud.c:72:
+		     ((int) wr->wr.ud.remote_qkey < 0

WARNING:TYPO_SPELLING: 'preceed' may be misspelled - perhaps 'precede'?
#764: FILE: drivers/infiniband/hw/ipath/ipath_ud.c:81:
+	 * A GRH is expected to preceed the data even if not
 	                        ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:BRACES: braces {} should be used on all arms of this statement
#808: FILE: drivers/infiniband/hw/ipath/ipath_ud.c:125:
+	if (srq && srq->ibsrq.event_handler) {
[...]
+	} else
[...]

CHECK:BRACES: braces {} should be used on all arms of this statement
#815: FILE: drivers/infiniband/hw/ipath/ipath_ud.c:132:
+		if (n < srq->limit) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#825: FILE: drivers/infiniband/hw/ipath/ipath_ud.c:142:
+		} else

CHECK:BRACES: Unbalanced braces around else statement
#827: FILE: drivers/infiniband/hw/ipath/ipath_ud.c:144:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#830: FILE: drivers/infiniband/hw/ipath/ipath_ud.c:147:
+	if (ah_attr->ah_flags & IB_AH_GRH) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#833: FILE: drivers/infiniband/hw/ipath/ipath_ud.c:150:
+	} else

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#841: FILE: drivers/infiniband/hw/ipath/ipath_ud.c:158:
+		BUG_ON(len == 0);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sge->mr"
#849: FILE: drivers/infiniband/hw/ipath/ipath_ud.c:166:
+		} else if (sge->length == 0 && sge->mr != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:BRACES: braces {} should be used on all arms of this statement
#922: FILE: drivers/infiniband/hw/ipath/ipath_ud.c:239:
+	if (wr->num_sge > 1) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#929: FILE: drivers/infiniband/hw/ipath/ipath_ud.c:246:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#1036: FILE: drivers/infiniband/hw/ipath/ipath_ud.c:353:
+	if (lid) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1040: FILE: drivers/infiniband/hw/ipath/ipath_ud.c:357:
+	} else

WARNING:CONSTANT_CONVERSION: __constant_cpu_to_be32 should be cpu_to_be32
#1053: FILE: drivers/infiniband/hw/ipath/ipath_ud.c:370:
+		__constant_cpu_to_be32(IPS_MULTICAST_QPN) :

CHECK:SPACING: No space is necessary after a cast
#1064: FILE: drivers/infiniband/hw/ipath/ipath_ud.c:381:
+	if (ipath_verbs_send(dev->dd, hwords, (u32 *) &qp->s_hdr,

CHECK:SPACING: No space is necessary after a cast
#1139: FILE: drivers/infiniband/hw/ipath/ipath_ud.c:456:
+			qkey = be32_to_cpu(((u32 *) data)[1]);

CHECK:SPACING: No space is necessary after a cast
#1140: FILE: drivers/infiniband/hw/ipath/ipath_ud.c:457:
+			src_qp = be32_to_cpu(((u32 *) data)[2]);

CHECK:SPACING: No space is necessary after a cast
#1167: FILE: drivers/infiniband/hw/ipath/ipath_ud.c:484:
+		struct ib_smp *smp = (struct ib_smp *) data;

WARNING:TYPO_SPELLING: 'preceed' may be misspelled - perhaps 'precede'?
#1196: FILE: drivers/infiniband/hw/ipath/ipath_ud.c:513:
+	 * A GRH is expected to preceed the data even if not
 	                        ^^^^^^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#1208: FILE: drivers/infiniband/hw/ipath/ipath_ud.c:525:
+		if (header_in_data) {
[...]
+		} else
[...]

CHECK:SPACING: No space is necessary after a cast
#1209: FILE: drivers/infiniband/hw/ipath/ipath_ud.c:526:
+			wc.imm_data = *(u32 *) data;

CHECK:BRACES: Unbalanced braces around else statement
#1211: FILE: drivers/infiniband/hw/ipath/ipath_ud.c:528:
+		} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#1254: FILE: drivers/infiniband/hw/ipath/ipath_ud.c:571:
+	if (srq && srq->ibsrq.event_handler) {
[...]
+	} else
[...]

CHECK:BRACES: braces {} should be used on all arms of this statement
#1261: FILE: drivers/infiniband/hw/ipath/ipath_ud.c:578:
+		if (n < srq->limit) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1271: FILE: drivers/infiniband/hw/ipath/ipath_ud.c:588:
+		} else

CHECK:BRACES: Unbalanced braces around else statement
#1273: FILE: drivers/infiniband/hw/ipath/ipath_ud.c:590:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#1275: FILE: drivers/infiniband/hw/ipath/ipath_ud.c:592:
+	if (has_grh) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1279: FILE: drivers/infiniband/hw/ipath/ipath_ud.c:596:
+	} else

WARNING:CONSTANT_CONVERSION: __constant_cpu_to_be32 should be cpu_to_be32
#1300: FILE: drivers/infiniband/hw/ipath/ipath_ud.c:617:
+		       ohdr->bth[0] & __constant_cpu_to_be32(1 << 23));

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000091076.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 0 errors, 22 warnings, 44 checks, 1265 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000091076.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
