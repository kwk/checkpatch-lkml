CHECK:LINE_SPACING: Please don't use multiple blank lines
#61: FILE: modprobe.c:1294:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#63: FILE: modprobe.c:1296:
+struct blacklist
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#70: FILE: modprobe.c:1303:
+add_blacklist (const char *modname, struct blacklist *blacklist)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#82: FILE: modprobe.c:1315:
+read_blacklist_file (const char *filename, struct blacklist **blacklist)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!modname"
#97: FILE: modprobe.c:1330:
+		if (modname == NULL || modname[0] == '#' || modname[0] == '\0')

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#109: FILE: modprobe.c:1342:
+read_blacklist (const char *filename, struct blacklist **blacklist)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#120: FILE: modprobe.c:1353:
+			if (!streq(i->d_name,".") && !streq(i->d_name,"..")) {
 			                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#120: FILE: modprobe.c:1353:
+			if (!streq(i->d_name,".") && !streq(i->d_name,"..")) {
 			                                             ^

WARNING:SPLIT_STRING: quoted string split across lines
#127: FILE: modprobe.c:1360:
+					warn("Failed to open"
+					      " blacklist file %s: %s\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#138: FILE: modprobe.c:1371:
+static const char *default_blacklists[] = $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:STATIC_CONST_CHAR_ARRAY: static const char * array should probably be static const char * const
#138: FILE: modprobe.c:1371:
+static const char *default_blacklists[] = 

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#139: FILE: modprobe.c:1372:
+static const char *default_blacklists[] = 
+{

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#160: FILE: modprobe.c:1393:
+			warn("Failed to open blacklist file %s: %s\n",
+			      filename, strerror(errno));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#164: FILE: modprobe.c:1397:
+static int is_blacklisted (struct blacklist *blacklist, char *modulename)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#167: FILE: modprobe.c:1400:
+^I$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#169: FILE: modprobe.c:1402:
+		if (strcmp (blacklist->module, modulename) == 0) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#194: FILE: modprobe.c:1597:
+	read_toplevel_blacklist (NULL, &blacklist);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#204: FILE: modprobe.c:1611:
+		if (is_blacklisted (blacklist, modulearg) && !remove) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#204: FILE: modprobe.c:1611:
+		if (is_blacklisted (blacklist, modulearg) && !remove) {
+			continue;
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000184529.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 6 errors, 10 warnings, 3 checks, 150 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000184529.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
