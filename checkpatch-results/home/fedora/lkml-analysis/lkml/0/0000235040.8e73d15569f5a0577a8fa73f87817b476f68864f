WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#60: FILE: drivers/char/drm/base.c:1:
+/* This (racy) hack exists because the DRM coders are taking

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#81: FILE: drivers/char/drm/base.c:22:
+}
+void drm_stub_unset(void)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#96: FILE: drivers/char/drm/base.c:37:
+}
+void drm_stub_put(void)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#101: FILE: drivers/char/drm/base.c:42:
+EXPORT_SYMBOL(drm_stub_unset);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#102: FILE: drivers/char/drm/base.c:43:
+EXPORT_SYMBOL(drm_stub_get);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#103: FILE: drivers/char/drm/base.c:44:
+EXPORT_SYMBOL(drm_stub_put);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#127: FILE: drivers/char/drm/drmP.h:729:
+extern void drm_stub_set(struct drm_stub_info *, struct module *owner);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct drm_stub_info *' should also have an identifier name
#127: FILE: drivers/char/drm/drmP.h:729:
+extern void drm_stub_set(struct drm_stub_info *, struct module *owner);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#128: FILE: drivers/char/drm/drmP.h:730:
+extern void drm_stub_unset(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#129: FILE: drivers/char/drm/drmP.h:731:
+extern struct drm_stub_info *drm_stub_get(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#130: FILE: drivers/char/drm/drmP.h:732:
+extern void drm_stub_put(void);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#132: FILE: drivers/char/drm/drmP.h:734:
+
+

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#251: FILE: drivers/char/drm/drm_agpsupport.h:45:
+static const drm_agp_t *drm_agp_p = NULL;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#281: FILE: drivers/char/drm/drm_agpsupport.h:111:
+	if ((retcode = drm_agp_p->acquire()))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000235040.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 2 errors, 5 warnings, 7 checks, 325 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000235040.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
