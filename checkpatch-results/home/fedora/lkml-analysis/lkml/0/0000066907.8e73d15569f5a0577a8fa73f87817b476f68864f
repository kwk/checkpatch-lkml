CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#219: FILE: include/linux/timex.h:309:
+extern u64 current_tick_length(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'sign' - possible side-effects?
#323: FILE: kernel/timer.c:1034:
+#define clocksource_adjustcheck(sign, error, interval, offset) ({	\
+	int adj = sign;							\
+	error >>= 2;							\
+	if (unlikely(sign > 0 ? error > interval : error < interval)) {	\
+		adj = clocksource_bigadjust(sign, error,		\
+					    interval, offset);		\
+		interval <<= adj;					\
+		offset <<= adj;						\
+		adj = sign << adj;					\
+	}								\
+	adj;								\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'error' - possible side-effects?
#323: FILE: kernel/timer.c:1034:
+#define clocksource_adjustcheck(sign, error, interval, offset) ({	\
+	int adj = sign;							\
+	error >>= 2;							\
+	if (unlikely(sign > 0 ? error > interval : error < interval)) {	\
+		adj = clocksource_bigadjust(sign, error,		\
+					    interval, offset);		\
+		interval <<= adj;					\
+		offset <<= adj;						\
+		adj = sign << adj;					\
+	}								\
+	adj;								\
+})

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'error' may be better as '(error)' to avoid precedence issues
#323: FILE: kernel/timer.c:1034:
+#define clocksource_adjustcheck(sign, error, interval, offset) ({	\
+	int adj = sign;							\
+	error >>= 2;							\
+	if (unlikely(sign > 0 ? error > interval : error < interval)) {	\
+		adj = clocksource_bigadjust(sign, error,		\
+					    interval, offset);		\
+		interval <<= adj;					\
+		offset <<= adj;						\
+		adj = sign << adj;					\
+	}								\
+	adj;								\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'interval' - possible side-effects?
#323: FILE: kernel/timer.c:1034:
+#define clocksource_adjustcheck(sign, error, interval, offset) ({	\
+	int adj = sign;							\
+	error >>= 2;							\
+	if (unlikely(sign > 0 ? error > interval : error < interval)) {	\
+		adj = clocksource_bigadjust(sign, error,		\
+					    interval, offset);		\
+		interval <<= adj;					\
+		offset <<= adj;						\
+		adj = sign << adj;					\
+	}								\
+	adj;								\
+})

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'interval' may be better as '(interval)' to avoid precedence issues
#323: FILE: kernel/timer.c:1034:
+#define clocksource_adjustcheck(sign, error, interval, offset) ({	\
+	int adj = sign;							\
+	error >>= 2;							\
+	if (unlikely(sign > 0 ? error > interval : error < interval)) {	\
+		adj = clocksource_bigadjust(sign, error,		\
+					    interval, offset);		\
+		interval <<= adj;					\
+		offset <<= adj;						\
+		adj = sign << adj;					\
+	}								\
+	adj;								\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'offset' - possible side-effects?
#323: FILE: kernel/timer.c:1034:
+#define clocksource_adjustcheck(sign, error, interval, offset) ({	\
+	int adj = sign;							\
+	error >>= 2;							\
+	if (unlikely(sign > 0 ? error > interval : error < interval)) {	\
+		adj = clocksource_bigadjust(sign, error,		\
+					    interval, offset);		\
+		interval <<= adj;					\
+		offset <<= adj;						\
+		adj = sign << adj;					\
+	}								\
+	adj;								\
+})

CHECK:BRACES: braces {} should be used on all arms of this statement
#347: FILE: kernel/timer.c:1058:
+	if (error > interval) {
[...]
+	} else if (error < -interval) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#353: FILE: kernel/timer.c:1064:
+	} else

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000066907.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 0 errors, 0 warnings, 9 checks, 374 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000066907.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
