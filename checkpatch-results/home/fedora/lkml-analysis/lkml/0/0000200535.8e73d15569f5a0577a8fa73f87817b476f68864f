CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#79: FILE: arch/um/include/registers.h:12:
+extern int save_fp_registers(int pid, unsigned long *fp_regs);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#80: FILE: arch/um/include/registers.h:13:
+extern int restore_fp_registers(int pid, unsigned long *fp_regs);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#111: FILE: arch/um/include/sysdep-i386/ptrace.h:33:
+extern void update_debugregs(int seq);

ERROR:SPACING: space required before the open parenthesis '('
#394: FILE: arch/um/kernel/tt/ptproxy/ptrace.c:149:
+		if(arg1 == PTRACE_POKEUSR) ptrace_pokeuser(arg3, arg4);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#394: FILE: arch/um/kernel/tt/ptproxy/ptrace.c:149:
+		if(arg1 == PTRACE_POKEUSR) ptrace_pokeuser(arg3, arg4);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#425: FILE: arch/um/kernel/tt/ptproxy/sysdep.c:27:
+	return(ptrace(PTRACE_PEEKUSR, pid, PT_SYSCALL_NR_OFFSET, 0));

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#431: FILE: arch/um/kernel/tt/ptproxy/sysdep.c:32:
+^Iif((ptrace(PTRACE_POKEUSR, pid, PT_SYSCALL_NR_OFFSET, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#431: FILE: arch/um/kernel/tt/ptproxy/sysdep.c:32:
+	if((ptrace(PTRACE_POKEUSR, pid, PT_SYSCALL_NR_OFFSET, 

ERROR:SPACING: space required before the open brace '{'
#454: FILE: arch/um/kernel/tt/ptproxy/sysdep.c:54:
+	if(ptrace(PTRACE_POKEUSR, pid, PT_SYSCALL_NR_OFFSET, __NR_pause) < 0){

ERROR:SPACING: space required before the open parenthesis '('
#454: FILE: arch/um/kernel/tt/ptproxy/sysdep.c:54:
+	if(ptrace(PTRACE_POKEUSR, pid, PT_SYSCALL_NR_OFFSET, __NR_pause) < 0){

ERROR:SPACING: space required before the open parenthesis '('
#487: FILE: arch/um/kernel/tt/ptproxy/wait.c:64:
+	if(ptrace(PTRACE_POKEUSR, pid, PT_IP_OFFSET, ip) < 0)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#508: FILE: arch/um/kernel/tt/syscall_user.c:75:
+^Iif(ptrace(PTRACE_POKEUSR, pid, PT_SYSCALL_NR_OFFSET, $

ERROR:SPACING: space required before the open parenthesis '('
#508: FILE: arch/um/kernel/tt/syscall_user.c:75:
+	if(ptrace(PTRACE_POKEUSR, pid, PT_SYSCALL_NR_OFFSET, 

ERROR:SPACING: space required before the open parenthesis '('
#590: FILE: arch/um/os-Linux/sys-i386/registers.c:35:
+	if(ptrace(PTRACE_GETFPREGS, pid, 0, fp_regs) < 0)

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#592: FILE: arch/um/os-Linux/sys-i386/registers.c:37:
+	return(0);

ERROR:SPACING: space required before the open parenthesis '('
#597: FILE: arch/um/os-Linux/sys-i386/registers.c:42:
+	if(ptrace(PTRACE_SETFPREGS, pid, 0, fp_regs) < 0)

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#599: FILE: arch/um/os-Linux/sys-i386/registers.c:44:
+	return(0);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#624: FILE: arch/um/os-Linux/util/Makefile:1:
+hostprogs-y^I^I:= mk_user_constants $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#633: FILE: arch/um/os-Linux/util/mk_user_constants.c:1:
+#include <stdio.h>

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/user.h> instead of <asm/user.h>
#640: FILE: arch/um/os-Linux/util/mk_user_constants.c:8:
+#include <asm/user.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#644: FILE: arch/um/os-Linux/util/mk_user_constants.c:12:
+  printf("/*\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#645: FILE: arch/um/os-Linux/util/mk_user_constants.c:13:
+  printf(" * Generated by mk_user_constants\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#646: FILE: arch/um/os-Linux/util/mk_user_constants.c:14:
+  printf(" */\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#647: FILE: arch/um/os-Linux/util/mk_user_constants.c:15:
+  printf("\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#648: FILE: arch/um/os-Linux/util/mk_user_constants.c:16:
+  printf("#ifndef __UM_USER_CONSTANTS_H\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#649: FILE: arch/um/os-Linux/util/mk_user_constants.c:17:
+  printf("#define __UM_USER_CONSTANTS_H\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#650: FILE: arch/um/os-Linux/util/mk_user_constants.c:18:
+  printf("\n");$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#651: FILE: arch/um/os-Linux/util/mk_user_constants.c:19:
+  /* I'd like to use FRAME_SIZE from ptrace.h here, but that's wrong on $

CHECK:SPACING: No space is necessary after a cast
#655: FILE: arch/um/os-Linux/util/mk_user_constants.c:23:
+  printf("#define UM_FRAME_SIZE %d\n", (int) sizeof(struct user_regs_struct));

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#655: FILE: arch/um/os-Linux/util/mk_user_constants.c:23:
+  printf("#define UM_FRAME_SIZE %d\n", (int) sizeof(struct user_regs_struct));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#657: FILE: arch/um/os-Linux/util/mk_user_constants.c:25:
+  printf("\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#658: FILE: arch/um/os-Linux/util/mk_user_constants.c:26:
+  printf("#endif\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#660: FILE: arch/um/os-Linux/util/mk_user_constants.c:28:
+  return(0);$

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#660: FILE: arch/um/os-Linux/util/mk_user_constants.c:28:
+  return(0);

ERROR:SPACING: space required before the open parenthesis '('
#695: FILE: arch/um/sys-i386/ptrace_user.c:55:
+		if(ptrace(PTRACE_POKEUSR, pid, &dummy->u_debugreg[i],

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#754: FILE: arch/um/sys-ppc/ptrace_user.c:10:
+	regs_out->regs[i] = ptrace(PTRACE_PEEKUSR, pid, i*4, 0);
 	                                                 ^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#761: FILE: arch/um/sys-ppc/ptrace_user.c:22:
 	if (i != 34 /* FIXME: PT_ORIG_R3 */ && i <= PT_MQ) {
+	    if (ptrace(PTRACE_POKEUSR, pid, i*4, regs_in->regs[i]) < 0) {

WARNING:TABSTOP: Statements should start on a tabstop
#763: FILE: arch/um/sys-ppc/ptrace_user.c:23:
+	    if (ptrace(PTRACE_POKEUSR, pid, i*4, regs_in->regs[i]) < 0) {

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#763: FILE: arch/um/sys-ppc/ptrace_user.c:23:
+	    if (ptrace(PTRACE_POKEUSR, pid, i*4, regs_in->regs[i]) < 0) {
 	                                     ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#763: FILE: arch/um/sys-ppc/ptrace_user.c:23:
+	    if (ptrace(PTRACE_POKEUSR, pid, i*4, regs_in->regs[i]) < 0) {
 		return -errno;
 	    }

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#787: FILE: arch/um/sys-x86_64/ptrace_user.c:43:
+        if(ptrace(PTRACE_POKEUSR, pid, CS, UM_USER_CS) < 0)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#787: FILE: arch/um/sys-x86_64/ptrace_user.c:43:
+        if(ptrace(PTRACE_POKEUSR, pid, CS, UM_USER_CS) < 0)$

ERROR:SPACING: space required before the open parenthesis '('
#787: FILE: arch/um/sys-x86_64/ptrace_user.c:43:
+        if(ptrace(PTRACE_POKEUSR, pid, CS, UM_USER_CS) < 0)

ERROR:CODE_INDENT: code indent should use tabs where possible
#792: FILE: arch/um/sys-x86_64/ptrace_user.c:47:
+        if(ptrace(PTRACE_POKEUSR, pid, DS, __USER_DS) < 0)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#792: FILE: arch/um/sys-x86_64/ptrace_user.c:47:
+        if(ptrace(PTRACE_POKEUSR, pid, DS, __USER_DS) < 0)$

ERROR:SPACING: space required before the open parenthesis '('
#792: FILE: arch/um/sys-x86_64/ptrace_user.c:47:
+        if(ptrace(PTRACE_POKEUSR, pid, DS, __USER_DS) < 0)

ERROR:CODE_INDENT: code indent should use tabs where possible
#795: FILE: arch/um/sys-x86_64/ptrace_user.c:49:
+        if(ptrace(PTRACE_POKEUSR, pid, ES, __USER_DS) < 0)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#795: FILE: arch/um/sys-x86_64/ptrace_user.c:49:
+        if(ptrace(PTRACE_POKEUSR, pid, ES, __USER_DS) < 0)$

ERROR:SPACING: space required before the open parenthesis '('
#795: FILE: arch/um/sys-x86_64/ptrace_user.c:49:
+        if(ptrace(PTRACE_POKEUSR, pid, ES, __USER_DS) < 0)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000200535.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 24 errors, 18 warnings, 7 checks, 579 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000200535.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
