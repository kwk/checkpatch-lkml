WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#45: FILE: fs/unionfs/dirfops.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#69: FILE: fs/unionfs/dirfops.c:25:
+	BUG_ON(rdstate->uds_offset >= DIREOF);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#70: FILE: fs/unionfs/dirfops.c:26:
+	BUG_ON(rdstate->uds_cookie >= MAXRDCOOKIE);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'namelen > UNIONFS_WHLEN'
#95: FILE: fs/unionfs/dirfops.c:51:
+	if ((namelen > UNIONFS_WHLEN) && !strncmp(name, UNIONFS_WHPFX, UNIONFS_WHLEN)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#124: FILE: fs/unionfs/dirfops.c:80:
+	if ((err = add_filldir_node(buf->rdstate, name, namelen,

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#142: FILE: fs/unionfs/dirfops.c:98:
+	if ((err = unionfs_file_revalidate(file, 0)))

WARNING:BRACES: braces {} are not necessary for single statement blocks
#201: FILE: fs/unionfs/dirfops.c:157:
+		if (err < 0) {
+			goto out;
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BRACES: braces {} are not necessary for single statement blocks
#205: FILE: fs/unionfs/dirfops.c:161:
+		if (buf.filldir_error) {
+			break;
+		}

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#245: FILE: fs/unionfs/dirfops.c:201:
+	if ((err = unionfs_file_revalidate(file, 0)))

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#273: FILE: fs/unionfs/dirfops.c:229:
+				if (offset == rdstate2offset(rdstate)) {
[...]
+				} else if (file->f_pos == DIREOF) {
[...]
+				} else {
[...]

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#281: FILE: fs/unionfs/dirfops.c:237:
+				if ((rdstate = find_rdstate(file->f_dentry->d_inode,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#282: FILE: fs/unionfs/dirfops.c:238:
+				if ((rdstate = find_rdstate(file->f_dentry->d_inode,
+							offset))) {

WARNING:CONST_STRUCT: struct file_operations should normally be const
#305: FILE: fs/unionfs/dirfops.c:261:
+struct file_operations unionfs_dir_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000042090.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 4 errors, 7 warnings, 2 checks, 270 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000042090.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
