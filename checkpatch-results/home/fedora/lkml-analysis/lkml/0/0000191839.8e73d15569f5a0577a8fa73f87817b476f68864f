WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#58: FILE: drivers/base/soc-device.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#59: FILE: drivers/base/soc-device.c:2:
+/*
+* Driver/bus support for the system on chip (SOC)

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#86: FILE: drivers/base/soc-device.c:29:
+static int soc_bus_match(struct device * dev, struct device_driver *drv)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#93: FILE: drivers/base/soc-device.c:36:
+	soc_device_id drv_device_id;
+	while (drv_device_id = *device_ids++, drv_device_id.id != 0) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#100: FILE: drivers/base/soc-device.c:43:
+static int soc_bus_hotplug (struct device *dev, char **envp, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#100: FILE: drivers/base/soc-device.c:43:
+static int soc_bus_hotplug (struct device *dev, char **envp, 

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#107: FILE: drivers/base/soc-device.c:50:
+	if (add_hotplug_env_var (envp, num_envp, &i,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#117: FILE: drivers/base/soc-device.c:60:
+static int soc_bus_suspend(struct device * dev, u32 state)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#119: FILE: drivers/base/soc-device.c:62:
+	struct device_driver * drv = dev->driver;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#133: FILE: drivers/base/soc-device.c:76:
+static int soc_bus_resume(struct device * dev)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#135: FILE: drivers/base/soc-device.c:78:
+	struct device_driver * drv = dev->driver;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#157: FILE: drivers/base/soc-device.c:100:
+extern int soc_driver_register(struct soc_device_driver * drv)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#164: FILE: drivers/base/soc-device.c:107:
+extern void soc_driver_unregister(struct soc_device_driver * drv)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#170: FILE: drivers/base/soc-device.c:113:
+extern int soc_device_register(struct soc_device * dev)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#173: FILE: drivers/base/soc-device.c:116:
+	struct platform_device *pdev = to_platform_device (dev->device.parent);

CHECK:BRACES: braces {} should be used on all arms of this statement
#179: FILE: drivers/base/soc-device.c:122:
+	if (dev->num_resources) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#180: FILE: drivers/base/soc-device.c:123:
+		dev->parent_resource = kmalloc (dev->num_resources * sizeof (struct resource *), GFP_KERNEL);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#180: FILE: drivers/base/soc-device.c:123:
+		dev->parent_resource = kmalloc (dev->num_resources * sizeof (struct resource *), GFP_KERNEL);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#180: FILE: drivers/base/soc-device.c:123:
+		dev->parent_resource = kmalloc (dev->num_resources * sizeof (struct resource *), GFP_KERNEL);

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#180: FILE: drivers/base/soc-device.c:123:
+		dev->parent_resource = kmalloc (dev->num_resources * sizeof (struct resource *), GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

CHECK:BRACES: Unbalanced braces around else statement
#183: FILE: drivers/base/soc-device.c:126:
+	} else

WARNING:LINE_SPACING: Missing a blank line after declarations
#201: FILE: drivers/base/soc-device.c:144:
+			struct resource *r = &pdev->resource[j];
+			if (res->start && !(res->start >= r->start && res->end <= r->end))

WARNING:LINE_SPACING: Missing a blank line after declarations
#214: FILE: drivers/base/soc-device.c:157:
+			struct resource *r = &pdev->resource[best];
+			if ((rc = request_resource (r, res))) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#214: FILE: drivers/base/soc-device.c:157:
+			if ((rc = request_resource (r, res))) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#214: FILE: drivers/base/soc-device.c:157:
+			if ((rc = request_resource (r, res))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#215: FILE: drivers/base/soc-device.c:158:
+				printk(KERN_ERR "%s: failed to claim resource %d (at %08lx-%08lx)\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#222: FILE: drivers/base/soc-device.c:165:
+				printk (KERN_ERR "%s: cannot find resource %d in platform resources\n",

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#222: FILE: drivers/base/soc-device.c:165:
+				printk (KERN_ERR "%s: cannot find resource %d in platform resources\n",

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#230: FILE: drivers/base/soc-device.c:173:
+	if (!(rc = device_register(&dev->device)))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#236: FILE: drivers/base/soc-device.c:179:
+^I^Irelease_resource (r); $

WARNING:LINE_SPACING: Missing a blank line after declarations
#236: FILE: drivers/base/soc-device.c:179:
+		struct resource *r = dev->parent_resource[i];
+		release_resource (r); 

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#236: FILE: drivers/base/soc-device.c:179:
+		release_resource (r); 

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#239: FILE: drivers/base/soc-device.c:182:
+		kfree (dev->parent_resource);

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#239: FILE: drivers/base/soc-device.c:182:
+	if (dev->parent_resource)
+		kfree (dev->parent_resource);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#244: FILE: drivers/base/soc-device.c:187:
+extern void soc_device_unregister(struct soc_device * dev)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#250: FILE: drivers/base/soc-device.c:193:
+^I^Irelease_resource (r); $

WARNING:LINE_SPACING: Missing a blank line after declarations
#250: FILE: drivers/base/soc-device.c:193:
+		struct resource *r = dev->parent_resource[i];
+		release_resource (r); 

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#250: FILE: drivers/base/soc-device.c:193:
+		release_resource (r); 

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#254: FILE: drivers/base/soc-device.c:197:
+		kfree (dev->parent_resource);

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#254: FILE: drivers/base/soc-device.c:197:
+	if (dev->parent_resource)
+		kfree (dev->parent_resource);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#268: FILE: drivers/base/soc-device.c:211:
+^Iif (tmp)        $

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#287: FILE: drivers/base/soc-device.c:230:
+	bus_unregister (&soc_bus_type);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#300: FILE: include/linux/soc-device.h:1:
+/*

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#301: FILE: include/linux/soc-device.h:2:
+/*
+* Driver/bus support for the system on chip (SOC)

WARNING:NEW_TYPEDEFS: do not add new typedefs
#327: FILE: include/linux/soc-device.h:28:
+typedef struct soc_device_id {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#338: FILE: include/linux/soc-device.h:39:
+extern int soc_driver_register(struct soc_device_driver * drv);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#338: FILE: include/linux/soc-device.h:39:
+extern int soc_driver_register(struct soc_device_driver * drv);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#339: FILE: include/linux/soc-device.h:40:
+extern void soc_driver_unregister(struct soc_device_driver * drv);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#339: FILE: include/linux/soc-device.h:40:
+extern void soc_driver_unregister(struct soc_device_driver * drv);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#341: FILE: include/linux/soc-device.h:42:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#354: FILE: include/linux/soc-device.h:55:
+extern int soc_device_register(struct soc_device * dev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#354: FILE: include/linux/soc-device.h:55:
+extern int soc_device_register(struct soc_device * dev);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#355: FILE: include/linux/soc-device.h:56:
+extern void soc_device_unregister(struct soc_device * dev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#355: FILE: include/linux/soc-device.h:56:
+extern void soc_device_unregister(struct soc_device * dev);

WARNING:TYPO_SPELLING: 'becomming' may be misspelled - perhaps 'becoming'?
#413: FILE: Documentation/soc.txt:11:
+Particularly in embedded platforms, it is now becomming common to find that
                                               ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'doesnt' may be misspelled - perhaps 'doesn't'?
#421: FILE: Documentation/soc.txt:19:
+The SoC bus doesnt directly address issues relating to the above, but it does
             ^^^^^^

WARNING:TYPO_SPELLING: 'wether' may be misspelled - perhaps 'weather'?
#436: FILE: Documentation/soc.txt:34:
+is not specified wether the base driver is to handle mapping of any IO
                  ^^^^^^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000191839.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 19 errors, 31 warnings, 7 checks, 406 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000191839.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
