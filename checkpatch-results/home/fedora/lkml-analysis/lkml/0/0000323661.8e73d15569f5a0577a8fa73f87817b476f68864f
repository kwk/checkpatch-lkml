WARNING:TYPO_SPELLING: 'nonexistant' may be misspelled - perhaps 'nonexistent'?
#34: 
 o fixes sys_mq_unlink OOPs for nonexistant filename
                                ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#53: 
diff -ura 4.00/arch/x86_64/ia32/ia32entry.S new/arch/x86_64/ia32/ia32entry.S

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#81: FILE: include/asm-x86_64/ia32_unistd.h:282:
+#define __NR_ia32_mq_open ^I^I274$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#82: FILE: include/asm-x86_64/ia32_unistd.h:283:
+#define __NR_ia32_mq_unlink		(__NR_ia32_mqopen+1)
                            		                 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#83: FILE: include/asm-x86_64/ia32_unistd.h:284:
+#define __NR_ia32_mq_timedsend		(__NR_ia32_mqopen+2)
                               		                 ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#84: FILE: include/asm-x86_64/ia32_unistd.h:285:
+#define __NR_ia32_mq_timedreceive	(__NR_ia32_mqopen+3)
                                  	                 ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#85: FILE: include/asm-x86_64/ia32_unistd.h:286:
+#define __NR_ia32_mq_notify		(__NR_ia32_mqopen+4)
                            		                 ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#86: FILE: include/asm-x86_64/ia32_unistd.h:287:
+#define __NR_ia32_mq_getattr		(__NR_ia32_mqopen+5)
                             		                 ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#87: FILE: include/asm-x86_64/ia32_unistd.h:288:
+#define __NR_ia32_mq_setattr		(__NR_ia32_mqopen+6)
                             		                 ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#89: FILE: include/asm-x86_64/ia32_unistd.h:290:
+#define IA32_NR_syscalls 281^I/* must be > than biggest syscall! */^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#129: FILE: include/linux/compat.h:47:
+extern int get_compat_timespec(struct timespec *, const struct compat_timespec *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct timespec *' should also have an identifier name
#129: FILE: include/linux/compat.h:47:
+extern int get_compat_timespec(struct timespec *, const struct compat_timespec *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct compat_timespec *' should also have an identifier name
#129: FILE: include/linux/compat.h:47:
+extern int get_compat_timespec(struct timespec *, const struct compat_timespec *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#130: FILE: include/linux/compat.h:48:
+extern int put_compat_timespec(struct timespec *, const struct compat_timespec *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct timespec *' should also have an identifier name
#130: FILE: include/linux/compat.h:48:
+extern int put_compat_timespec(struct timespec *, const struct compat_timespec *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct compat_timespec *' should also have an identifier name
#130: FILE: include/linux/compat.h:48:
+extern int put_compat_timespec(struct timespec *, const struct compat_timespec *);

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#145: FILE: include/linux/mqueue.h:25:
+asmlinkage long sys_mq_open(const char __user *name, int oflag, mode_t mode, struct mq_attr __user *attr);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE: line length of 152 exceeds 100 columns
#147: FILE: include/linux/mqueue.h:27:
+asmlinkage long mq_timedsend(mqd_t mqdes, const char __user *msg_ptr, size_t msg_len, unsigned int msg_prio, const struct timespec __user *abs_timeout);

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#154: FILE: include/linux/mqueue.h:31:
+asmlinkage long mq_setattr(mqd_t mqdes, const struct mq_attr __user *mqstat, struct mq_attr __user *omqstat);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#177: FILE: ipc/mqueue.c:742:
+asmlinkage long sys_mq_open(const char __user *u_name, int oflag, mode_t mode,
 	struct mq_attr __user *attr)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#208: FILE: ipc/mqueue.c:840:
+static asmlinkage long do_mq_timedsend(mqd_t mqdes, const char __user *u_msg_ptr, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#233: FILE: ipc/mqueue.c:950:
+asmlinkage long sys_mq_timedsend(mqd_t mqdes, const char __user *u_msg_ptr, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#234: FILE: ipc/mqueue.c:951:
+asmlinkage long sys_mq_timedsend(mqd_t mqdes, const char __user *u_msg_ptr, 
+	size_t msg_len, unsigned int msg_prio, const struct timespec __user *u_abs_timeout)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#238: FILE: ipc/mqueue.c:955:
+	if ((timeout = prepare_timeout(u_abs_timeout)) < 0)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#243: FILE: ipc/mqueue.c:960:
+static asmlinkage ssize_t do_mq_timedreceive(mqd_t mqdes, char __user *u_msg_ptr, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#263: FILE: ipc/mqueue.c:1052:
+asmlinkage ssize_t sys_mq_timedreceive(mqd_t mqdes, char __user *u_msg_ptr, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#264: FILE: ipc/mqueue.c:1053:
+asmlinkage ssize_t sys_mq_timedreceive(mqd_t mqdes, char __user *u_msg_ptr, 
+	size_t msg_len, unsigned int __user *u_msg_prio,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#268: FILE: ipc/mqueue.c:1057:
+^I$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#269: FILE: ipc/mqueue.c:1058:
+	if ((timeout = prepare_timeout(u_abs_timeout)) < 0)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#270: FILE: ipc/mqueue.c:1059:
+^I^Ireturn timeout;^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#299: FILE: ipc/mqueue.c:1167:
+asmlinkage long sys_mq_setattr(mqd_t mqdes, const struct mq_attr __user *u_mqstat,
 	struct mq_attr __user *u_omqstat)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#322: FILE: ipc/mqueue.c:1231:
+	if (copy_from_user(&compat_attr, compat_attrp_user, sizeof(compat_attr))) {
+		return -EFAULT;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BRACES: braces {} are not necessary for single statement blocks
#342: FILE: ipc/mqueue.c:1251:
+	if (copy_to_user(compat_attrp_user, &compat_attr, sizeof(compat_attr))) {
+		return -EFAULT;
+	}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#349: FILE: ipc/mqueue.c:1258:
+asmlinkage long compat_sys_mq_open(const char __user *name_user, int oflag, mode_t mode,
+		struct compat_mq_attr __user *compat_attrp_user)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#363: FILE: ipc/mqueue.c:1272:
+		if (IS_ERR(name)) {
+			return PTR_ERR(name);
+		}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#383: FILE: ipc/mqueue.c:1292:
+	if (compat_attrp_user) {
+		attrp = &attr;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#391: FILE: ipc/mqueue.c:1300:
+	if (!stat && compat_attrp_user) {
+		stat = store_mq_attr(compat_attrp_user, attrp);
+	}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#398: FILE: ipc/mqueue.c:1307:
+asmlinkage long compat_sys_mq_setattr(mqd_t mqdes,
+		const struct compat_mq_attr __user *compat_attrp_user,

WARNING:BRACES: braces {} are not necessary for single statement blocks
#412: FILE: ipc/mqueue.c:1321:
+	if (compat_oattrp_user) {
+		oattrp = &oattr;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#420: FILE: ipc/mqueue.c:1329:
+	if (!stat && compat_oattrp_user) {
+		stat = store_mq_attr(compat_oattrp_user, oattrp);
+	}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#426: FILE: ipc/mqueue.c:1335:
+asmlinkage long compat_sys_mq_timedsend(mqd_t mqdes, char __user *msgp_user, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#427: FILE: ipc/mqueue.c:1336:
+asmlinkage long compat_sys_mq_timedsend(mqd_t mqdes, char __user *msgp_user, 
+		size_t msg_len, unsigned int msg_prio,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#451: FILE: ipc/mqueue.c:1360:
+asmlinkage ssize_t compat_sys_mq_timedreceive(mqd_t mqdes, char __user *msgp_user, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#452: FILE: ipc/mqueue.c:1361:
+asmlinkage ssize_t compat_sys_mq_timedreceive(mqd_t mqdes, char __user *msgp_user, 
+		size_t msg_len, unsigned int __user *msg_priop_user,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#488: FILE: ipc/mqueue.c:1397:
+	if (copy_from_user(&compat_sigevent_partial, compat_sigevent_partialp_user,
+			sizeof(compat_sigevent_partial))) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#499: FILE: ipc/mqueue.c:1408:
+asmlinkage long compat_sys_mq_notify(mqd_t mqdes,
+		const struct compat_sigevent_partial __user *notifyp_user)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000323661.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 11 errors, 17 warnings, 18 checks, 452 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000323661.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
