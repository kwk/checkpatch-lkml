WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#39: FILE: fs/proc/proc_misc.c:236:
+extern struct seq_operations cart_op;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#39: FILE: fs/proc/proc_misc.c:236:
+extern struct seq_operations cart_op;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#42: FILE: fs/proc/proc_misc.c:239:
+       (void)inode;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#43: FILE: fs/proc/proc_misc.c:240:
+       return seq_open(file, &cart_op);$

WARNING:CONST_STRUCT: struct file_operations should normally be const
#46: FILE: fs/proc/proc_misc.c:243:
+static struct file_operations cart_file_operations = {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#47: FILE: fs/proc/proc_misc.c:244:
+       .open           = cart_open,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#48: FILE: fs/proc/proc_misc.c:245:
+       .read           = seq_read,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#49: FILE: fs/proc/proc_misc.c:246:
+       .llseek         = seq_lseek,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#50: FILE: fs/proc/proc_misc.c:247:
+       .release        = seq_release,$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#60: FILE: fs/proc/proc_misc.c:633:
+	create_seq_entry("cart",S_IRUGO, &cart_file_operations);
 	                       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#60: FILE: fs/proc/proc_misc.c:633:
+	create_seq_entry("cart",S_IRUGO, &cart_file_operations);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:LINE_SPACING: Missing a blank line after declarations
#99: FILE: mm/cart.c:705:
+	struct zone *zone;
+	for_each_zone(zone) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#102: FILE: mm/cart.c:708:
+		seq_printf(m, "struct zone values:\n");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#117: FILE: mm/cart.c:723:
+		seq_printf(m, "\n");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#118: FILE: mm/cart.c:724:
+		seq_printf(m, "implicit values:\n");

CHECK:CAMELCASE: Avoid CamelCase: <nr_Nl>
#119: FILE: mm/cart.c:725:
+		seq_printf(m, "  zone->nr_longterm: %lu\n", nr_Nl);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#123: FILE: mm/cart.c:729:
+		seq_printf(m, "\n");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#124: FILE: mm/cart.c:730:
+		seq_printf(m, "counted values:\n");

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#130: FILE: mm/cart.c:736:
+			unsigned long a1=0,i1=0,a2=0,i2=0;
 			                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#130: FILE: mm/cart.c:736:
+			unsigned long a1=0,i1=0,a2=0,i2=0;
 			                  ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#130: FILE: mm/cart.c:736:
+			unsigned long a1=0,i1=0,a2=0,i2=0;
 			                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#130: FILE: mm/cart.c:736:
+			unsigned long a1=0,i1=0,a2=0,i2=0;
 			                       ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#130: FILE: mm/cart.c:736:
+			unsigned long a1=0,i1=0,a2=0,i2=0;
 			                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#130: FILE: mm/cart.c:736:
+			unsigned long a1=0,i1=0,a2=0,i2=0;
 			                            ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#130: FILE: mm/cart.c:736:
+			unsigned long a1=0,i1=0,a2=0,i2=0;
 			                               ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#131: FILE: mm/cart.c:737:
+			unsigned long a1=0,i1=0,a2=0,i2=0;
+			list_for_each_entry(page, &zone->active_list, lru) {

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#133: FILE: mm/cart.c:739:
+				if (PageLongTerm(page)) ++l1;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#134: FILE: mm/cart.c:740:
+				else ++s1;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#135: FILE: mm/cart.c:741:
+				if (PageActive(page)) ++a1;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#136: FILE: mm/cart.c:742:
+				else ++i1;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#140: FILE: mm/cart.c:746:
+				if (PageLongTerm(page)) ++l2;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#141: FILE: mm/cart.c:747:
+				else ++s2;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#142: FILE: mm/cart.c:748:
+				if (PageActive(page)) ++a2;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#143: FILE: mm/cart.c:749:
+				else ++i2;

WARNING:LONG_LINE: line length of 111 exceeds 100 columns
#145: FILE: mm/cart.c:751:
+			seq_printf(m, "  zone->nr_active: %lu (%lu, %lu)(%lu, %lu)\n", active, s1, l1, a1, i1);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE: line length of 115 exceeds 100 columns
#146: FILE: mm/cart.c:752:
+			seq_printf(m, "  zone->nr_inactive: %lu (%lu, %lu)(%lu, %lu)\n", inactive, s2, l2, a2, i2);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#147: FILE: mm/cart.c:753:
+			seq_printf(m, "  zone->nr_shortterm: %lu\n", s1+s2);
 			                                               ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#148: FILE: mm/cart.c:754:
+			seq_printf(m, "  zone->nr_longterm: %lu\n", l1+l2);
 			                                              ^

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#157: FILE: mm/cart.c:763:
+struct seq_operations cart_op = {

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000147182.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 16 errors, 20 warnings, 3 checks, 123 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000147182.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
