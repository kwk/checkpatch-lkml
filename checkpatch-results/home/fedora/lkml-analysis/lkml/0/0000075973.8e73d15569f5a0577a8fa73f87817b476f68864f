WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#78: FILE: fs/ufs/dir.c:51:
+static int ufs_commit_chunk(struct page *page, unsigned from, unsigned to)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#78: FILE: fs/ufs/dir.c:51:
+static int ufs_commit_chunk(struct page *page, unsigned from, unsigned to)

WARNING:LINE_SPACING: Missing a blank line after declarations
#197: FILE: fs/ufs/dir.c:55:
+	int err = 0;
+	dir->i_version++;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#239: FILE: fs/ufs/dir.c:72:
+	return (inode->i_size+PAGE_CACHE_SIZE-1)>>PAGE_CACHE_SHIFT;
 	                     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#239: FILE: fs/ufs/dir.c:72:
+	return (inode->i_size+PAGE_CACHE_SIZE-1)>>PAGE_CACHE_SHIFT;
 	                                     ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#239: FILE: fs/ufs/dir.c:72:
+	return (inode->i_size+PAGE_CACHE_SIZE-1)>>PAGE_CACHE_SHIFT;
 	                                        ^

CHECK:SPACING: No space is necessary after a cast
#343: FILE: fs/ufs/dir.c:94:
+	unsigned from = (char *) de - (char *) page_address(page);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#343: FILE: fs/ufs/dir.c:94:
+	unsigned from = (char *) de - (char *) page_address(page);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#344: FILE: fs/ufs/dir.c:95:
+	unsigned to = from + fs16_to_cpu(dir->i_sb, de->d_reclen);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#353: FILE: fs/ufs/dir.c:100:
+	BUG_ON(err);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#358: FILE: fs/ufs/dir.c:105:
+	dir->i_mtime = dir->i_ctime = CURRENT_TIME_SEC;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#366: FILE: fs/ufs/dir.c:109:
 
+

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#395: FILE: fs/ufs/dir.c:115:
+	unsigned offs, rec_len;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#396: FILE: fs/ufs/dir.c:116:
+	unsigned limit = PAGE_CACHE_SIZE;

CHECK:CAMELCASE: Avoid CamelCase: <Ebadsize>
#403: FILE: fs/ufs/dir.c:123:
+			goto Ebadsize;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Eshort>
#412: FILE: fs/ufs/dir.c:132:
+			goto Eshort;

CHECK:CAMELCASE: Avoid CamelCase: <Ealign>
#414: FILE: fs/ufs/dir.c:134:
+			goto Ealign;

CHECK:CAMELCASE: Avoid CamelCase: <Enamelen>
#416: FILE: fs/ufs/dir.c:136:
+			goto Enamelen;

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#417: FILE: fs/ufs/dir.c:137:
+		if (((offs + rec_len - 1) ^ offs) & ~(UFS_SECTOR_SIZE-1))
 		                                                     ^

CHECK:CAMELCASE: Avoid CamelCase: <Espan>
#418: FILE: fs/ufs/dir.c:138:
+			goto Espan;

CHECK:CAMELCASE: Avoid CamelCase: <Einumber>
#421: FILE: fs/ufs/dir.c:141:
+			goto Einumber;

CHECK:CAMELCASE: Avoid CamelCase: <Eend>
#424: FILE: fs/ufs/dir.c:144:
+		goto Eend;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#452: FILE: fs/ufs/dir.c:172:
+	ufs_error (sb, "ufs_check_page", "bad entry in directory #%lu: %s - "

WARNING:SPLIT_STRING: quoted string split across lines
#453: FILE: fs/ufs/dir.c:173:
+	ufs_error (sb, "ufs_check_page", "bad entry in directory #%lu: %s - "
+		   "offset=%lu, rec_len=%d, name_len=%d",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#454: FILE: fs/ufs/dir.c:174:
+		   dir->i_ino, error, (page->index<<PAGE_CACHE_SHIFT)+offs,
 		                                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#454: FILE: fs/ufs/dir.c:174:
+		   dir->i_ino, error, (page->index<<PAGE_CACHE_SHIFT)+offs,
 		                                                     ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#459: FILE: fs/ufs/dir.c:179:
+	ufs_error (sb, "ext2_check_page",

WARNING:SPLIT_STRING: quoted string split across lines
#461: FILE: fs/ufs/dir.c:181:
+		   "entry in directory #%lu spans the page boundary"
+		   "offset=%lu",

WARNING:MISSING_SPACE: break quoted strings at a space character
#461: FILE: fs/ufs/dir.c:181:
+		   "entry in directory #%lu spans the page boundary"
+		   "offset=%lu",

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#462: FILE: fs/ufs/dir.c:182:
+		   dir->i_ino, (page->index<<PAGE_CACHE_SHIFT)+offs);
 		                           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#462: FILE: fs/ufs/dir.c:182:
+		   dir->i_ino, (page->index<<PAGE_CACHE_SHIFT)+offs);
 		                                              ^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#472: FILE: fs/ufs/dir.c:192:
+				(filler_t*)mapping->a_ops->readpage, NULL);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#501: FILE: fs/ufs/dir.c:217:
+	unsigned last_byte = inode->i_size;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#523: FILE: fs/ufs/dir.c:228:
+^Ireturn (struct ufs_dir_entry *)((char *)p + $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#537: FILE: fs/ufs/dir.c:238:
+^I^Ide = ufs_next_entry(dir->i_sb, $

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#567: FILE: fs/ufs/dir.c:259:
+	unsigned reclen = UFS_DIR_REC_LEN(namelen);

WARNING:LINE_SPACING: Missing a blank line after declarations
#588: FILE: fs/ufs/dir.c:280:
+		char *kaddr;
+		page = ufs_get_page(dir, n);

CHECK:SPACING: No space is necessary after a cast
#591: FILE: fs/ufs/dir.c:283:
+			de = (struct ufs_dir_entry *) kaddr;

CHECK:SPACING: No space is necessary after a cast
#593: FILE: fs/ufs/dir.c:285:
+			while ((char *) de <= kaddr) {

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#595: FILE: fs/ufs/dir.c:287:
+					ufs_error(dir->i_sb, __FUNCTION__,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#638: FILE: fs/ufs/dir.c:319:
+	unsigned reclen = UFS_DIR_REC_LEN(namelen);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#645: FILE: fs/ufs/dir.c:326:
+	unsigned from, to;

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#732: FILE: fs/ufs/dir.c:358:
+				ufs_error(dir->i_sb, __FUNCTION__,

CHECK:SPACING: No space is necessary after a cast
#746: FILE: fs/ufs/dir.c:372:
+			de = (struct ufs_dir_entry *) ((char *) de + rec_len);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#751: FILE: fs/ufs/dir.c:377:
+	BUG();

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#755: FILE: fs/ufs/dir.c:381:
+	from = (char*)de - (char*)page_address(page);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#755: FILE: fs/ufs/dir.c:381:
+	from = (char*)de - (char*)page_address(page);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#768: FILE: fs/ufs/dir.c:387:
+^I^Istruct ufs_dir_entry *de1 = $

CHECK:SPACING: No space is necessary after a cast
#769: FILE: fs/ufs/dir.c:388:
+			(struct ufs_dir_entry *) ((char *) de + name_len);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#790: FILE: fs/ufs/dir.c:402:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#802: FILE: fs/ufs/dir.c:414:
+static inline unsigned $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#803: FILE: fs/ufs/dir.c:415:
+ufs_validate_entry(struct super_block *sb, char *base, $

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#804: FILE: fs/ufs/dir.c:416:
+		   unsigned offset, unsigned mask)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#804: FILE: fs/ufs/dir.c:416:
+		   unsigned offset, unsigned mask)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#806: FILE: fs/ufs/dir.c:418:
+	struct ufs_dir_entry *de = (struct ufs_dir_entry*)(base + offset);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#807: FILE: fs/ufs/dir.c:419:
+	struct ufs_dir_entry *p = (struct ufs_dir_entry*)(base + (offset&mask));

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#807: FILE: fs/ufs/dir.c:419:
+	struct ufs_dir_entry *p = (struct ufs_dir_entry*)(base + (offset&mask));
 	                                                                ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#808: FILE: fs/ufs/dir.c:420:
+	struct ufs_dir_entry *p = (struct ufs_dir_entry*)(base + (offset&mask));
+	while ((char*)p < (char*)de) {

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#808: FILE: fs/ufs/dir.c:420:
+	while ((char*)p < (char*)de) {

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#808: FILE: fs/ufs/dir.c:420:
+	while ((char*)p < (char*)de) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#816: FILE: fs/ufs/dir.c:428:
+
+

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#821: FILE: fs/ufs/dir.c:433:
+ufs_readdir(struct file *filp, void *dirent, filldir_t filldir)
                          ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#829: FILE: fs/ufs/dir.c:441:
+	unsigned chunk_mask = ~(UFS_SECTOR_SIZE - 1);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#831: FILE: fs/ufs/dir.c:443:
+	unsigned flags = UFS_SB(sb)->s_flags;

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#846: FILE: fs/ufs/dir.c:457:
+			ufs_error(sb, __FUNCTION__,

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#856: FILE: fs/ufs/dir.c:467:
+				filp->f_pos = (n<<PAGE_CACHE_SHIFT) + offset;
 				                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#861: FILE: fs/ufs/dir.c:472:
+		de = (struct ufs_dir_entry *)(kaddr+offset);
 		                                   ^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#863: FILE: fs/ufs/dir.c:474:
+		for ( ;(char*)de <= limit; de = ufs_next_entry(sb, de)) {

ERROR:SPACING: space required after that ';' (ctx:WxV)
#863: FILE: fs/ufs/dir.c:474:
+		for ( ;(char*)de <= limit; de = ufs_next_entry(sb, de)) {
 		      ^

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#865: FILE: fs/ufs/dir.c:476:
+				ufs_error(sb, __FUNCTION__,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#866: FILE: fs/ufs/dir.c:477:
+				ufs_error(sb, __FUNCTION__,
+					"zero-length directory entry");

ERROR:CODE_INDENT: code indent should use tabs where possible
#881: FILE: fs/ufs/dir.c:492:
+                                        d_type = de->d_u.d_44.d_type;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#881: FILE: fs/ufs/dir.c:492:
+                                        d_type = de->d_u.d_44.d_type;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#883: FILE: fs/ufs/dir.c:494:
+^I^I^I^Iover = filldir(dirent, de->d_name, $

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#885: FILE: fs/ufs/dir.c:496:
+						(n<<PAGE_CACHE_SHIFT) | offset,
 						  ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#899: FILE: fs/ufs/dir.c:510:
 
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#908: FILE: fs/ufs/dir.c:516:
+		     struct page * page)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#916: FILE: fs/ufs/dir.c:519:
+^Istruct address_space *mapping = page->mapping;^I$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#918: FILE: fs/ufs/dir.c:521:
+	unsigned from = ((char*)dir - kaddr) & ~(UFS_SECTOR_SIZE - 1);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#918: FILE: fs/ufs/dir.c:521:
+	unsigned from = ((char*)dir - kaddr) & ~(UFS_SECTOR_SIZE - 1);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#919: FILE: fs/ufs/dir.c:522:
+	unsigned to = ((char*)dir - kaddr) + fs16_to_cpu(sb, dir->d_reclen);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#919: FILE: fs/ufs/dir.c:522:
+	unsigned to = ((char*)dir - kaddr) + fs16_to_cpu(sb, dir->d_reclen);

CHECK:SPACING: No space is necessary after a cast
#921: FILE: fs/ufs/dir.c:524:
+	struct ufs_dir_entry *de = (struct ufs_dir_entry *) (kaddr + from);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#971: FILE: fs/ufs/dir.c:534:
+	while ((char*)de < (char*)dir) {

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#971: FILE: fs/ufs/dir.c:534:
+	while ((char*)de < (char*)dir) {

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#973: FILE: fs/ufs/dir.c:536:
+			ufs_error(inode->i_sb, __FUNCTION__,

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#982: FILE: fs/ufs/dir.c:545:
+		from = (char*)pde - (char*)page_address(page);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#982: FILE: fs/ufs/dir.c:545:
+		from = (char*)pde - (char*)page_address(page);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#985: FILE: fs/ufs/dir.c:548:
+	BUG_ON(err);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#987: FILE: fs/ufs/dir.c:550:
+		pde->d_reclen = cpu_to_fs16(sb, to-from);
 		                                  ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#990: FILE: fs/ufs/dir.c:553:
+^Iinode->i_ctime = inode->i_mtime = CURRENT_TIME_SEC;^I$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#990: FILE: fs/ufs/dir.c:553:
+	inode->i_ctime = inode->i_mtime = CURRENT_TIME_SEC;	

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1020: FILE: fs/ufs/dir.c:579:
+
+

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1021: FILE: fs/ufs/dir.c:580:
+	base = (char*)page_address(page);

CHECK:SPACING: No space is necessary after a cast
#1024: FILE: fs/ufs/dir.c:583:
+	de = (struct ufs_dir_entry *) base;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1039: FILE: fs/ufs/dir.c:597:
+^I$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1042: FILE: fs/ufs/dir.c:600:
+       kunmap(page);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1043: FILE: fs/ufs/dir.c:601:
+       page_cache_release(page);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1044: FILE: fs/ufs/dir.c:602:
+       return err;$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1051: FILE: fs/ufs/dir.c:608:
+int ufs_empty_dir(struct inode * inode)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1067: FILE: fs/ufs/dir.c:617:
+		struct ufs_dir_entry *de;
+		page = ufs_get_page(inode, i);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1108: FILE: fs/ufs/dir.c:628:
+				ufs_error(inode->i_sb, __FUNCTION__,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1109: FILE: fs/ufs/dir.c:629:
+				ufs_error(inode->i_sb, __FUNCTION__,
+					"zero-length directory entry: "

WARNING:SPLIT_STRING: quoted string split across lines
#1110: FILE: fs/ufs/dir.c:630:
+					"zero-length directory entry: "
+					"kaddr=%p, de=%p\n", kaddr, de);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1123: FILE: fs/ufs/dir.c:634:
+				u16 namelen=ufs_get_de_namlen(sb, de);
 				           ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#1129: FILE: fs/ufs/dir.c:640:
+				if (namelen < 2) {
[...]
+				} else if (de->d_name[1] != '.')
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1158: FILE: fs/ufs/namei.c:3:
+ * $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1220: FILE: fs/ufs/namei.c:283:
+	struct ufs_dir_entry * dir_de = NULL;

ERROR:CODE_INDENT: code indent should use tabs where possible
#1267: FILE: fs/ufs/namei.c:335:
+ ^I * rename.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1267: FILE: fs/ufs/namei.c:335:
+ ^I * rename.$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1283: FILE: fs/ufs/namei.c:349:
 
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1309: FILE: include/linux/ufs_fs.h:891:
+extern struct ufs_dir_entry *ufs_find_entry(struct inode *, struct dentry *, struct page **);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#1309: FILE: include/linux/ufs_fs.h:891:
+extern struct ufs_dir_entry *ufs_find_entry(struct inode *, struct dentry *, struct page **);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#1309: FILE: include/linux/ufs_fs.h:891:
+extern struct ufs_dir_entry *ufs_find_entry(struct inode *, struct dentry *, struct page **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page **' should also have an identifier name
#1309: FILE: include/linux/ufs_fs.h:891:
+extern struct ufs_dir_entry *ufs_find_entry(struct inode *, struct dentry *, struct page **);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1310: FILE: include/linux/ufs_fs.h:892:
+extern int ufs_delete_entry(struct inode *, struct ufs_dir_entry *, struct page *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#1310: FILE: include/linux/ufs_fs.h:892:
+extern int ufs_delete_entry(struct inode *, struct ufs_dir_entry *, struct page *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ufs_dir_entry *' should also have an identifier name
#1310: FILE: include/linux/ufs_fs.h:892:
+extern int ufs_delete_entry(struct inode *, struct ufs_dir_entry *, struct page *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#1310: FILE: include/linux/ufs_fs.h:892:
+extern int ufs_delete_entry(struct inode *, struct ufs_dir_entry *, struct page *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1314: FILE: include/linux/ufs_fs.h:894:
+extern struct ufs_dir_entry *ufs_dotdot(struct inode *, struct page **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#1314: FILE: include/linux/ufs_fs.h:894:
+extern struct ufs_dir_entry *ufs_dotdot(struct inode *, struct page **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page **' should also have an identifier name
#1314: FILE: include/linux/ufs_fs.h:894:
+extern struct ufs_dir_entry *ufs_dotdot(struct inode *, struct page **);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1315: FILE: include/linux/ufs_fs.h:895:
+extern void ufs_set_link(struct inode *dir, struct ufs_dir_entry *de,

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000075973.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 33 errors, 49 warnings, 41 checks, 1263 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000075973.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
