WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#34: 
diff -uNr test11-pre5/Documentation/filesystems/ramfs.txt test11-pre5-ramfs/Documentation/filesystems/ramfs.txt

ERROR:TRAILING_WHITESPACE: trailing whitespace
#70: FILE: Documentation/filesystems/ramfs.txt:33:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#126: FILE: fs/ramfs/inode.c:61:
+	 * arithmetic, so there's no point */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#130: FILE: fs/ramfs/inode.c:65:
+	/* It is important that at least the free counts below be
+	   signed.  free_XXX may become negative if a limit is changed

ERROR:TRAILING_WHITESPACE: trailing whitespace
#131: FILE: fs/ramfs/inode.c:66:
+^I   downwards (with a remount) below the current usage. */^I  $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#131: FILE: fs/ramfs/inode.c:66:
+	   downwards (with a remount) below the current usage. */	  

ERROR:TRAILING_WHITESPACE: trailing whitespace
#140: FILE: fs/ramfs/inode.c:75:
+^I$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around rsb->ramfs_lock
#160: FILE: fs/ramfs/inode.c:95:
+	spin_lock(&(rsb->ramfs_lock));

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around rsb->ramfs_lock
#165: FILE: fs/ramfs/inode.c:100:
+	spin_unlock(&(rsb->ramfs_lock));

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#169: FILE: fs/ramfs/inode.c:104:
+ * if there are no free inodes */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#181: FILE: fs/ramfs/inode.c:116:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#189: FILE: fs/ramfs/inode.c:124:
+^I$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#196: FILE: fs/ramfs/inode.c:131:
+ * if there are no free dentries */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#208: FILE: fs/ramfs/inode.c:143:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#216: FILE: fs/ramfs/inode.c:151:
+^I$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#225: FILE: fs/ramfs/inode.c:160:
+ * ramfs (ie. PageDirty(page) is true)  */

WARNING:LINE_SPACING: Missing a blank line after declarations
#232: FILE: fs/ramfs/inode.c:167:
+		struct ramfs_sb_info *rsb = RAMFS_SB(inode->i_sb);
+		lock_rsb(rsb);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#233: FILE: fs/ramfs/inode.c:168:
+^I^I$

ERROR:SPACING: space prohibited after that open parenthesis '('
#234: FILE: fs/ramfs/inode.c:169:
+		if ( (rsb->free_pages > 0) &&

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rsb->free_pages > 0'
#234: FILE: fs/ramfs/inode.c:169:
+		if ( (rsb->free_pages > 0) &&
+		     ( !rsb->max_file_pages ||
+		       (inode->i_data.nrpages <= rsb->max_file_pages) ) ) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'inode->i_data.nrpages <= rsb->max_file_pages'
#234: FILE: fs/ramfs/inode.c:169:
+		if ( (rsb->free_pages > 0) &&
+		     ( !rsb->max_file_pages ||
+		       (inode->i_data.nrpages <= rsb->max_file_pages) ) ) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#235: FILE: fs/ramfs/inode.c:170:
+		if ( (rsb->free_pages > 0) &&
+		     ( !rsb->max_file_pages ||

ERROR:SPACING: space prohibited after that open parenthesis '('
#235: FILE: fs/ramfs/inode.c:170:
+		     ( !rsb->max_file_pages ||

ERROR:SPACING: space prohibited before that close parenthesis ')'
#236: FILE: fs/ramfs/inode.c:171:
+		       (inode->i_data.nrpages <= rsb->max_file_pages) ) ) {

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#255: FILE: fs/ramfs/inode.c:190:
+	if (! PageDirty(page))
 	    ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#261: FILE: fs/ramfs/inode.c:196:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#264: FILE: fs/ramfs/inode.c:199:
+^I$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#265: FILE: fs/ramfs/inode.c:200:
+	if (rsb->free_pages > rsb->max_pages) {
+		printk(KERN_ERR "ramfs: Error in page allocation, free_pages (%ld) > max_pages (%ld)\n", rsb->free_pages, rsb->max_pages);
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LONG_LINE: line length of 138 exceeds 100 columns
#266: FILE: fs/ramfs/inode.c:201:
+		printk(KERN_ERR "ramfs: Error in page allocation, free_pages (%ld) > max_pages (%ld)\n", rsb->free_pages, rsb->max_pages);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#266: FILE: fs/ramfs/inode.c:201:
+		printk(KERN_ERR "ramfs: Error in page allocation, free_pages (%ld) > max_pages (%ld)\n", rsb->free_pages, rsb->max_pages);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#272: FILE: fs/ramfs/inode.c:207:
+
+

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#297: FILE: fs/ramfs/inode.c:262:
+	if (! ramfs_alloc_page(inode, page))
 	    ^

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#309: FILE: fs/ramfs/inode.c:273:
+	if (! ramfs_alloc_page(inode, page)) {
 	    ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#309: FILE: fs/ramfs/inode.c:273:
+	if (! ramfs_alloc_page(inode, page)) {
+		return -ENOSPC;
+	}

CHECK:SPACING: No space is necessary after a cast
#313: FILE: fs/ramfs/inode.c:277:
+	addr = (void *) kmap(page);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#338: FILE: fs/ramfs/inode.c:306:
+	struct inode * inode;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#340: FILE: fs/ramfs/inode.c:308:
+	if (! ramfs_alloc_inode(sb))
 	    ^

CHECK:BRACES: Unbalanced braces around else statement
#352: FILE: fs/ramfs/inode.c:343:
+	} else

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#367: FILE: fs/ramfs/inode.c:356:
+	struct inode * inode;

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#370: FILE: fs/ramfs/inode.c:359:
+	if (! ramfs_alloc_dentry(sb))
 	    ^

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#396: FILE: fs/ramfs/inode.c:396:
+	if (! ramfs_alloc_dentry(sb))
 	    ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#460: FILE: fs/ramfs/inode.c:519:
+static int parse_options(char * options, struct ramfs_params *p)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#469: FILE: fs/ramfs/inode.c:528:
+	for (optname = strtok(options,","); optname;
 	                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#470: FILE: fs/ramfs/inode.c:529:
+	     optname = strtok(NULL,",")) {
 	                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#471: FILE: fs/ramfs/inode.c:530:
+		if ((value = strchr(optname,'=')) != NULL) {
 		                           ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#471: FILE: fs/ramfs/inode.c:530:
+		if ((value = strchr(optname,'=')) != NULL) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#478: FILE: fs/ramfs/inode.c:537:
+			p->filepages = simple_strtoul(value, &value, 0)

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#483: FILE: fs/ramfs/inode.c:542:
+			p->pages = simple_strtoul(value, &value, 0)

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#488: FILE: fs/ramfs/inode.c:547:
+			p->inodes = simple_strtoul(value, &value, 0);

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#492: FILE: fs/ramfs/inode.c:551:
+			p->dentries = simple_strtoul(value, &value, 0);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#498: FILE: fs/ramfs/inode.c:557:
+			*(optname-1) = ',';
 			         ^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#501: FILE: fs/ramfs/inode.c:560:
+/*  ^I^Iif (ret == 0) */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#502: FILE: fs/ramfs/inode.c:561:
+/*  ^I^I^Ibreak; */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#515: FILE: fs/ramfs/inode.c:574:
+	/* By default we set the limits to be:
+	       - Allow this ramfs to take up to half of all available RAM

ERROR:CODE_INDENT: code indent should use tabs where possible
#517: FILE: fs/ramfs/inode.c:576:
+^I         the total max size, obviously)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:CODE_INDENT: code indent should use tabs where possible
#520: FILE: fs/ramfs/inode.c:579:
+^I         are never more inodes than dentries).$

WARNING:RETURN_VOID: void function return statements are not generally useful
#544: FILE: fs/ramfs/inode.c:603:
+	return;
+}

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#547: FILE: fs/ramfs/inode.c:606:
+/* reset_limits is called during a remount to change the usage limits.
+

WARNING:TYPO_SPELLING: 'suceed' may be misspelled - perhaps 'succeed'?
#548: FILE: fs/ramfs/inode.c:607:
+   This will suceed, even if the new limits are lower than current
              ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#550: FILE: fs/ramfs/inode.c:609:
+   until usage falls below the new limit */

WARNING:BRACES: braces {} are not necessary for single statement blocks
#562: FILE: fs/ramfs/inode.c:621:
+	if (p->filepages >= 0) {
+		rsb->max_file_pages = p->filepages;
+	}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#565: FILE: fs/ramfs/inode.c:624:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#566: FILE: fs/ramfs/inode.c:625:
+	
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#584: FILE: fs/ramfs/inode.c:643:
+static int ramfs_remount(struct super_block * sb, int * flags, char * data)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#584: FILE: fs/ramfs/inode.c:643:
+static int ramfs_remount(struct super_block * sb, int * flags, char * data)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#584: FILE: fs/ramfs/inode.c:643:
+static int ramfs_remount(struct super_block * sb, int * flags, char * data)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#587: FILE: fs/ramfs/inode.c:646:
+	struct ramfs_sb_info * rsb = RAMFS_SB(sb);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#594: FILE: fs/ramfs/inode.c:653:
+	printk(KERN_DEBUG "ramfs: remount [%s]\n", (char *)data);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#595: FILE: fs/ramfs/inode.c:654:
+	printk(KERN_DEBUG "ramfs: max_file_pages = %ld\n", rsb->max_file_pages);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#596: FILE: fs/ramfs/inode.c:655:
+	printk(KERN_DEBUG "ramfs: max_pages = %ld\n", rsb->max_pages);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#597: FILE: fs/ramfs/inode.c:656:
+	printk(KERN_DEBUG "ramfs: max_inodes = %ld\n", rsb->max_inodes);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#598: FILE: fs/ramfs/inode.c:657:
+	printk(KERN_DEBUG "ramfs: max_dentries = %ld\n", rsb->max_dentries);

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#608: FILE: fs/ramfs/inode.c:666:
+	commit_write:	ramfs_commit_write,
 	            ^

WARNING:INDENTED_LABEL: labels should not be indented
#608: FILE: fs/ramfs/inode.c:666:
+	commit_write:	ramfs_commit_write,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#609: FILE: fs/ramfs/inode.c:667:
+	removepage:     ramfs_removepage,
 	          ^

WARNING:INDENTED_LABEL: labels should not be indented
#609: FILE: fs/ramfs/inode.c:667:
+	removepage:     ramfs_removepage,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#617: FILE: fs/ramfs/inode.c:696:
+	delete_inode:	ramfs_delete_inode,
 	            ^

WARNING:INDENTED_LABEL: labels should not be indented
#617: FILE: fs/ramfs/inode.c:696:
+	delete_inode:	ramfs_delete_inode,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#618: FILE: fs/ramfs/inode.c:697:
+	put_super:      ramfs_put_super,
 	         ^

WARNING:INDENTED_LABEL: labels should not be indented
#618: FILE: fs/ramfs/inode.c:697:
+	put_super:      ramfs_put_super,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#619: FILE: fs/ramfs/inode.c:698:
+	remount_fs:     ramfs_remount,
 	          ^

WARNING:INDENTED_LABEL: labels should not be indented
#619: FILE: fs/ramfs/inode.c:698:
+	remount_fs:     ramfs_remount,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#630: FILE: fs/ramfs/inode.c:709:
+	struct ramfs_sb_info * rsb;

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*sb->u.generic_sbp)...) over kmalloc(sizeof(struct ramfs_sb_info)...)
#638: FILE: fs/ramfs/inode.c:717:
+	sb->u.generic_sbp = kmalloc(sizeof(struct ramfs_sb_info), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#656: FILE: fs/ramfs/inode.c:738:
+	printk(KERN_DEBUG "ramfs: mounted [%s]\n", (char *)data);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#657: FILE: fs/ramfs/inode.c:739:
+	printk(KERN_DEBUG "ramfs: max_file_pages = %ld\n", rsb->max_file_pages);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#658: FILE: fs/ramfs/inode.c:740:
+	printk(KERN_DEBUG "ramfs: max_pages = %ld\n", rsb->max_pages);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#659: FILE: fs/ramfs/inode.c:741:
+	printk(KERN_DEBUG "ramfs: max_inodes = %ld\n", rsb->max_inodes);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#660: FILE: fs/ramfs/inode.c:742:
+	printk(KERN_DEBUG "ramfs: max_dentries = %ld\n", rsb->max_dentries);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#671: FILE: include/linux/fs.h:357:
+	void (*removepage)(struct page *); /* called from __remove_inode_page */

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000565423.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 39 errors, 40 warnings, 11 checks, 627 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000565423.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
