WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#88: 
 include/linux/rmap-locking.h |  109 +++++++++++++++++++++++++++++++++++++++++++

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#160: FILE: include/linux/rmap-locking.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#161: FILE: include/linux/rmap-locking.h:2:
+ * include/linux/rmap-locking.h

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#185: FILE: include/linux/rmap-locking.h:26:
+static inline unsigned rmap_lockno(pgoff_t index)

WARNING:LINE_SPACING: Missing a blank line after declarations
#193: FILE: include/linux/rmap-locking.h:34:
+	pgoff_t index = page->index;
+	while (1) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#195: FILE: include/linux/rmap-locking.h:36:
+		spinlock_t *lock = rmap_locks + rmap_lockno(index);
+		spin_lock(lock);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#199: FILE: include/linux/rmap-locking.h:40:
+^I}^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#216: FILE: include/linux/rmap-locking.h:57:
+	spinlock_t *lock = lock_rmap(page);
+	page->index = index;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#220: FILE: include/linux/rmap-locking.h:61:
+static inline void drop_rmap_lock(spinlock_t **lock, unsigned *last_lockno)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#230: FILE: include/linux/rmap-locking.h:71:
+cached_rmap_lock(struct page *page, spinlock_t **lock, unsigned *last_lockno)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!lock"
#232: FILE: include/linux/rmap-locking.h:73:
+	if (*lock == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:LINE_SPACING: Please don't use multiple blank lines
#244: FILE: include/linux/rmap-locking.h:85:
+
+

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#260: FILE: include/linux/rmap-locking.h:101:
+static inline void drop_rmap_lock(spinlock_t **lock, unsigned *last_lockno)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#265: FILE: include/linux/rmap-locking.h:106:
+cached_rmap_lock(struct page *page, spinlock_t **lock, unsigned *last_lockno)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#275: FILE: include/linux/swap.h:147:
+extern void FASTCALL(__page_add_rmap(struct page *, pte_t *));

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#275: FILE: include/linux/swap.h:147:
+extern void FASTCALL(__page_add_rmap(struct page *, pte_t *));

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'pte_t *' should also have an identifier name
#275: FILE: include/linux/swap.h:147:
+extern void FASTCALL(__page_add_rmap(struct page *, pte_t *));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#277: FILE: include/linux/swap.h:149:
+extern void FASTCALL(__page_remove_rmap(struct page *, pte_t *));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#277: FILE: include/linux/swap.h:149:
+extern void FASTCALL(__page_remove_rmap(struct page *, pte_t *));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'pte_t *' should also have an identifier name
#277: FILE: include/linux/swap.h:149:
+extern void FASTCALL(__page_remove_rmap(struct page *, pte_t *));

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#316: FILE: mm/memory.c:62:
+static unsigned rmap_lock_sequence;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#340: FILE: mm/memory.c:231:
+	unsigned last_lockno = -1;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#352: FILE: mm/memory.c:284:
+			BUG_ON(rmap_lock != NULL);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rmap_lock"
#352: FILE: mm/memory.c:284:
+			BUG_ON(rmap_lock != NULL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#384: FILE: mm/memory.c:329:
+				cached_rmap_lock(ptepage, &rmap_lock,
+						&last_lockno);

ERROR:SPACING: space required after that ',' (ctx:VxO)
#388: FILE: mm/memory.c:333:
+					drop_rmap_lock(&rmap_lock,&last_lockno);
 					                         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before that '&' (ctx:OxV)
#388: FILE: mm/memory.c:333:
+					drop_rmap_lock(&rmap_lock,&last_lockno);
 					                          ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#405: FILE: mm/memory.c:364:
+	unsigned last_lockno = -1;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#442: FILE: mm/memory.c:394:
+		tlb_remove_tlb_entry(tlb, ptep, address+offset);
 		                                       ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#489: FILE: mm/memory.c:1366:
+		struct page * page = alloc_mapped_page(GFP_HIGHUSER);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#499: FILE: mm/rmap.c:55:
+spinlock_t rmap_locks[NUM_RMAP_LOCKS];

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#562: FILE: mm/rmap.c:154:
+		spinlock_t *rmap_lock;

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#605: FILE: mm/rmap.c:224:
+		spinlock_t *rmap_lock;

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#724: FILE: mm/vmscan.c:110:
+		spinlock_t *rmap_lock;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#779: FILE: mm/vmscan.c:386:
+	unsigned last_lockno = -1;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000440374.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 4 errors, 20 warnings, 11 checks, 649 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000440374.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
