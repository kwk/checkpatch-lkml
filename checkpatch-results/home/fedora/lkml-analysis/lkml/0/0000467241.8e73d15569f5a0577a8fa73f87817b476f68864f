WARNING:TYPO_SPELLING: 'Seperates' may be misspelled - perhaps 'Separates'?
#28: 
Seperates ufs_sb_info from struct super_block.
^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:SPACING: No space is necessary after a cast
#141: FILE: fs/ufs/balloc.c:472:
+	ucg = (struct ufs_cylinder_group *) UFS_SB(sb)->s_ucg[cgno]->b_data; \

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#224: FILE: fs/ufs/cylinder.c:40:
+	struct ufs_sb_info * sbi = UFS_SB(sb);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#259: FILE: fs/ufs/cylinder.c:82:
+		brelse (sbi->s_ucg[j]);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#268: FILE: fs/ufs/cylinder.c:93:
+	struct ufs_sb_info * sbi = UFS_SB(sb);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#305: FILE: fs/ufs/cylinder.c:138:
+	struct ufs_sb_info * sbi = UFS_SB(sb);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#359: FILE: fs/ufs/cylinder.c:181:
+	for (i = 0; i < sbi->s_cg_loaded && sbi->s_cgno[i] != cgno; i++);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#366: FILE: fs/ufs/cylinder.c:186:
+			sbi->s_cgno[j] = sbi->s_cgno[j-1];
 			                              ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#367: FILE: fs/ufs/cylinder.c:187:
+			sbi->s_ucpi[j] = sbi->s_ucpi[j-1];
 			                              ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#390: FILE: fs/ufs/cylinder.c:202:
+			sbi->s_cgno[j] = sbi->s_cgno[j-1];
 			                              ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#391: FILE: fs/ufs/cylinder.c:203:
+			sbi->s_ucpi[j] = sbi->s_ucpi[j-1];
 			                              ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#464: FILE: fs/ufs/ialloc.c:148:
+	struct ufs_sb_info * sbi;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#564: FILE: fs/ufs/inode.c:316:
+	struct ufs_sb_private_info * uspi = UFS_SB(sb)->s_uspi;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#636: FILE: fs/ufs/super.c:320:
+	struct ufs_sb_info * sbi = UFS_SB(sb);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#663: FILE: fs/ufs/super.c:357:
+	if (!(sbi->s_ucg = kmalloc (sizeof(struct buffer_head *) * uspi->s_ncg, GFP_KERNEL)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#663: FILE: fs/ufs/super.c:357:
+	if (!(sbi->s_ucg = kmalloc (sizeof(struct buffer_head *) * uspi->s_ncg, GFP_KERNEL)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#677: FILE: fs/ufs/super.c:367:
+		if (!(sbi->s_ucg[i] = sb_bread(sb, ufs_cgcmin(i))))

CHECK:SPACING: No space is necessary after a cast
#680: FILE: fs/ufs/super.c:369:
+		if (!ufs_cg_chkmagic (sb, (struct ufs_cylinder_group *) sbi->s_ucg[i]->b_data))

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#680: FILE: fs/ufs/super.c:369:
+		if (!ufs_cg_chkmagic (sb, (struct ufs_cylinder_group *) sbi->s_ucg[i]->b_data))

CHECK:SPACING: No space is necessary after a cast
#684: FILE: fs/ufs/super.c:372:
+		ufs_print_cylinder_stuff(sb, (struct ufs_cylinder_group *) sbi->s_ucg[i]->b_data);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#689: FILE: fs/ufs/super.c:376:
+		if (!(sbi->s_ucpi[i] = kmalloc (sizeof(struct ufs_cg_private_info), GFP_KERNEL)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#689: FILE: fs/ufs/super.c:376:
+		if (!(sbi->s_ucpi[i] = kmalloc (sizeof(struct ufs_cg_private_info), GFP_KERNEL)))

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*sbi->s_ucpi[i])...) over kmalloc(sizeof(struct ufs_cg_private_info)...)
#689: FILE: fs/ufs/super.c:376:
+		if (!(sbi->s_ucpi[i] = kmalloc (sizeof(struct ufs_cg_private_info), GFP_KERNEL)))

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#706: FILE: fs/ufs/super.c:388:
+			if (sbi->s_ucg[i]) brelse (sbi->s_ucg[i]);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#706: FILE: fs/ufs/super.c:388:
+			if (sbi->s_ucg[i]) brelse (sbi->s_ucg[i]);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#707: FILE: fs/ufs/super.c:389:
+		kfree (sbi->s_ucg);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#710: FILE: fs/ufs/super.c:391:
+			if (sbi->s_ucpi[i]) kfree (sbi->s_ucpi[i]);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#710: FILE: fs/ufs/super.c:391:
+			if (sbi->s_ucpi[i]) kfree (sbi->s_ucpi[i]);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#718: FILE: fs/ufs/super.c:402:
+	struct ufs_sb_info * sbi = UFS_SB(sb);

CHECK:SPACING: No space is necessary after a cast
#732: FILE: fs/ufs/super.c:414:
+	base = space = (char*) sbi->s_csp[0];

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#732: FILE: fs/ufs/super.c:414:
+	base = space = (char*) sbi->s_csp[0];

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#732: FILE: fs/ufs/super.c:414:
+	base = space = (char*) sbi->s_csp[0];

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#744: FILE: fs/ufs/super.c:428:
+		kfree (sbi->s_ucpi[i]);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#748: FILE: fs/ufs/super.c:431:
+		kfree (sbi->s_ucpi[i]);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#752: FILE: fs/ufs/super.c:433:
+		brelse (sbi->s_ucg[i]);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#753: FILE: fs/ufs/super.c:434:
+	kfree (sbi->s_ucg);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#760: FILE: fs/ufs/super.c:441:
+	struct ufs_sb_info * sbi;

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*sbi)...) over kmalloc(sizeof(struct ufs_sb_info)...)
#768: FILE: fs/ufs/super.c:457:
+	sbi = kmalloc(sizeof(struct ufs_sb_info), GFP_KERNEL);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#785: FILE: fs/ufs/super.c:477:
+	ufs_set_opt (sbi->s_mount_opt, ONERROR_LOCK);

CHECK:SPACING: No space is necessary after a cast
#786: FILE: fs/ufs/super.c:478:
+	if (!ufs_parse_options ((char *) data, &sbi->s_mount_opt)) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#786: FILE: fs/ufs/super.c:478:
+	if (!ufs_parse_options ((char *) data, &sbi->s_mount_opt)) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#798: FILE: fs/ufs/super.c:488:
+		ufs_set_opt (sbi->s_mount_opt, UFSTYPE_OLD);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#802: FILE: fs/ufs/super.c:491:
+	sbi->s_uspi = uspi =

ERROR:TRAILING_WHITESPACE: trailing whitespace
#836: FILE: fs/ufs/super.c:641:
+^Iif ((((sbi->s_mount_opt & UFS_MOUNT_UFSTYPE) == UFS_MOUNT_UFSTYPE_NEXTSTEP) $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#837: FILE: fs/ufs/super.c:642:
+^I  || ((sbi->s_mount_opt & UFS_MOUNT_UFSTYPE) == UFS_MOUNT_UFSTYPE_NEXTSTEP_CD) $

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#837: FILE: fs/ufs/super.c:642:
+	if ((((sbi->s_mount_opt & UFS_MOUNT_UFSTYPE) == UFS_MOUNT_UFSTYPE_NEXTSTEP) 
+	  || ((sbi->s_mount_opt & UFS_MOUNT_UFSTYPE) == UFS_MOUNT_UFSTYPE_NEXTSTEP_CD) 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#838: FILE: fs/ufs/super.c:643:
+^I  || ((sbi->s_mount_opt & UFS_MOUNT_UFSTYPE) == UFS_MOUNT_UFSTYPE_OPENSTEP)) $

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#838: FILE: fs/ufs/super.c:643:
+	  || ((sbi->s_mount_opt & UFS_MOUNT_UFSTYPE) == UFS_MOUNT_UFSTYPE_NEXTSTEP_CD) 
+	  || ((sbi->s_mount_opt & UFS_MOUNT_UFSTYPE) == UFS_MOUNT_UFSTYPE_OPENSTEP)) 

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#861: FILE: fs/ufs/super.c:825:
+	if (sbi) kfree(sbi);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#888: FILE: fs/ufs/super.c:861:
+	struct ufs_sb_info * sbi = UFS_SB(sb);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#899: FILE: fs/ufs/super.c:868:
+	ubh_brelse_uspi (sbi->s_uspi);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#900: FILE: fs/ufs/super.c:869:
+	kfree (sbi->s_uspi);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#901: FILE: fs/ufs/super.c:870:
+	kfree (sbi);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000467241.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 20 errors, 18 warnings, 15 checks, 1106 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000467241.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
