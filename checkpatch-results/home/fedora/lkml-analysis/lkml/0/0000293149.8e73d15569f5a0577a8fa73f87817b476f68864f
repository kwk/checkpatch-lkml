WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#39: 
diff -Nru 2.6.4.ref/arch/ia64/kernel/acpi.c 2.6.4.mig4/arch/ia64/kernel/acpi.c

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#81: FILE: arch/ia64/mm/migrate.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:LINE_SPACING: Please don't use multiple blank lines
#95: FILE: arch/ia64/mm/migrate.c:15:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:MALFORMED_INCLUDE: malformed #include filename
#106: FILE: arch/ia64/mm/migrate.c:26:
+#include <linux/delay.h>		// For "ia64_get_itc()"

The #include statement has a malformed path.  This has happened
because the author has included a double slash "//" in the pathname
accidentally.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#113: FILE: arch/ia64/mm/migrate.c:33:
+
+

WARNING:NEW_TYPEDEFS: do not add new typedefs
#117: FILE: arch/ia64/mm/migrate.c:37:
+typedef	unsigned long	vaddr_t;	// Pointers converted to this type

CHECK:LINE_SPACING: Please don't use multiple blank lines
#119: FILE: arch/ia64/mm/migrate.c:39:
+
+

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#133: FILE: arch/ia64/mm/migrate.c:53:
+#define PRINT(args...)	do { if (_pr_flag_) printk(args); } while (0)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#135: FILE: arch/ia64/mm/migrate.c:55:
+			do { if (_pr_flag_ & PRINT_errors) printk(args); } while (0)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#137: FILE: arch/ia64/mm/migrate.c:57:
+			do { if (_pr_flag_ & PRINT_etc) printk(args); } while (0)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#139: FILE: arch/ia64/mm/migrate.c:59:
+			do { if (_pr_flag_ & PRINT_pgd) printk(args); } while (0)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#144: FILE: arch/ia64/mm/migrate.c:64:
+static const char^Iinv_n_addresses[] = ^I"Invalid number of addresses";$

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#149: FILE: arch/ia64/mm/migrate.c:69:
+void		dump_mm(const struct mm_struct * const);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct mm_struct * const' should also have an identifier name
#149: FILE: arch/ia64/mm/migrate.c:69:
+void		dump_mm(const struct mm_struct * const);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#150: FILE: arch/ia64/mm/migrate.c:70:
+void		dump_vma(const struct vm_area_struct * const);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct vm_area_struct * const' should also have an identifier name
#150: FILE: arch/ia64/mm/migrate.c:70:
+void		dump_vma(const struct vm_area_struct * const);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#151: FILE: arch/ia64/mm/migrate.c:71:
+void		dump_page(const char * const, const struct page * const);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char * const' should also have an identifier name
#151: FILE: arch/ia64/mm/migrate.c:71:
+void		dump_page(const char * const, const struct page * const);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct page * const' should also have an identifier name
#151: FILE: arch/ia64/mm/migrate.c:71:
+void		dump_page(const char * const, const struct page * const);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#152: FILE: arch/ia64/mm/migrate.c:72:
+void		dump_pte_stuff(const pte_t * const);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const pte_t * const' should also have an identifier name
#152: FILE: arch/ia64/mm/migrate.c:72:
+void		dump_pte_stuff(const pte_t * const);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#153: FILE: arch/ia64/mm/migrate.c:73:
+phaddr_t	gimme_an_address(const caddr_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const caddr_t' should also have an identifier name
#153: FILE: arch/ia64/mm/migrate.c:73:
+phaddr_t	gimme_an_address(const caddr_t);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#175: FILE: arch/ia64/mm/migrate.c:95:
+
+

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#179: FILE: arch/ia64/mm/migrate.c:99:
+STATIC INLINE long long

WARNING:FUNCTION_ARGUMENTS: function definition argument 'vaddr_t' should also have an identifier name
#179: FILE: arch/ia64/mm/migrate.c:99:
+STATIC INLINE long long

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const vaddr_t' should also have an identifier name
#179: FILE: arch/ia64/mm/migrate.c:99:
+STATIC INLINE long long

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const int' should also have an identifier name
#179: FILE: arch/ia64/mm/migrate.c:99:
+STATIC INLINE long long

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mm_struct * const' should also have an identifier name
#179: FILE: arch/ia64/mm/migrate.c:99:
+STATIC INLINE long long

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#182: FILE: arch/ia64/mm/migrate.c:102:
+STATIC INLINE int

WARNING:FUNCTION_ARGUMENTS: function definition argument 'pte_t * const' should also have an identifier name
#182: FILE: arch/ia64/mm/migrate.c:102:
+STATIC INLINE int

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const int' should also have an identifier name
#182: FILE: arch/ia64/mm/migrate.c:102:
+STATIC INLINE int

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mm_struct * const' should also have an identifier name
#182: FILE: arch/ia64/mm/migrate.c:102:
+STATIC INLINE int

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#185: FILE: arch/ia64/mm/migrate.c:105:
+STATIC INLINE long long

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const caddr_t' should also have an identifier name
#185: FILE: arch/ia64/mm/migrate.c:105:
+STATIC INLINE long long

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#185: FILE: arch/ia64/mm/migrate.c:105:
+STATIC INLINE long long

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const int' should also have an identifier name
#185: FILE: arch/ia64/mm/migrate.c:105:
+STATIC INLINE long long

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const pid_t' should also have an identifier name
#185: FILE: arch/ia64/mm/migrate.c:105:
+STATIC INLINE long long

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#188: FILE: arch/ia64/mm/migrate.c:108:
+STATIC struct mm_struct	*

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const pid_t' should also have an identifier name
#188: FILE: arch/ia64/mm/migrate.c:108:
+STATIC struct mm_struct	*

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#191: FILE: arch/ia64/mm/migrate.c:111:
+int

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page * const' should also have an identifier name
#191: FILE: arch/ia64/mm/migrate.c:111:
+int

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page * const' should also have an identifier name
#191: FILE: arch/ia64/mm/migrate.c:111:
+int

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mm_struct * const' should also have an identifier name
#191: FILE: arch/ia64/mm/migrate.c:111:
+int

WARNING:FUNCTION_ARGUMENTS: function definition argument 'pte_t * const' should also have an identifier name
#191: FILE: arch/ia64/mm/migrate.c:111:
+int

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#193: FILE: arch/ia64/mm/migrate.c:113:
+check_migr_1_page_part_2(struct page * const, struct page * const,
+						struct mm_struct * const, pte_t * const);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#195: FILE: arch/ia64/mm/migrate.c:115:
+int

WARNING:FUNCTION_ARGUMENTS: function definition argument 'phaddr_t * const' should also have an identifier name
#195: FILE: arch/ia64/mm/migrate.c:115:
+int

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#195: FILE: arch/ia64/mm/migrate.c:115:
+int

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#198: FILE: arch/ia64/mm/migrate.c:118:
+STATIC INLINE int

WARNING:FUNCTION_ARGUMENTS: function definition argument 'phaddr_t * const' should also have an identifier name
#198: FILE: arch/ia64/mm/migrate.c:118:
+STATIC INLINE int

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const size_t' should also have an identifier name
#198: FILE: arch/ia64/mm/migrate.c:118:
+STATIC INLINE int

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct mm_struct * const' should also have an identifier name
#198: FILE: arch/ia64/mm/migrate.c:118:
+STATIC INLINE int

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#201: FILE: arch/ia64/mm/migrate.c:121:
+STATIC INLINE int

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const phaddr_t' should also have an identifier name
#201: FILE: arch/ia64/mm/migrate.c:121:
+STATIC INLINE int

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const int' should also have an identifier name
#201: FILE: arch/ia64/mm/migrate.c:121:
+STATIC INLINE int

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mm_struct * const' should also have an identifier name
#201: FILE: arch/ia64/mm/migrate.c:121:
+STATIC INLINE int

CHECK:LINE_SPACING: Please don't use multiple blank lines
#204: FILE: arch/ia64/mm/migrate.c:124:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#210: FILE: arch/ia64/mm/migrate.c:130:
+
+

WARNING:SIZEOF_PARENTHESIS: sizeof _statistics should be sizeof(_statistics)
#217: FILE: arch/ia64/mm/migrate.c:137:
+STATIC struct _statistics_size_	_statistics_sizes = {sizeof _statistics, MAX_NUMNODES};

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#220: FILE: arch/ia64/mm/migrate.c:140:
+#define	SAVE_ITC(var)			var = ia64_get_itc()

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#221: FILE: arch/ia64/mm/migrate.c:141:
+#define	STORE_DELAY(var, destination)	_statistics.t.destination += ia64_get_itc() - var

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'var' may be better as '(var)' to avoid precedence issues
#221: FILE: arch/ia64/mm/migrate.c:141:
+#define	STORE_DELAY(var, destination)	_statistics.t.destination += ia64_get_itc() - var

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'destination' may be better as '(destination)' to avoid precedence issues
#221: FILE: arch/ia64/mm/migrate.c:141:
+#define	STORE_DELAY(var, destination)	_statistics.t.destination += ia64_get_itc() - var

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#222: FILE: arch/ia64/mm/migrate.c:142:
+#define	COUNT(what)			_statistics.c.what++

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'what' may be better as '(what)' to avoid precedence issues
#222: FILE: arch/ia64/mm/migrate.c:142:
+#define	COUNT(what)			_statistics.c.what++

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#223: FILE: arch/ia64/mm/migrate.c:143:
+#define	ERROR_CNT(what)			_statistics.e.what++

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'what' may be better as '(what)' to avoid precedence issues
#223: FILE: arch/ia64/mm/migrate.c:143:
+#define	ERROR_CNT(what)			_statistics.e.what++

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#224: FILE: arch/ia64/mm/migrate.c:144:
+#define	ERROR_CNT_ADD(var, delta)	_statistics.e.var += delta

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'var' may be better as '(var)' to avoid precedence issues
#224: FILE: arch/ia64/mm/migrate.c:144:
+#define	ERROR_CNT_ADD(var, delta)	_statistics.e.var += delta

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#226: FILE: arch/ia64/mm/migrate.c:146:
+STATIC INLINE int	page_migrate_statistics(const caddr_t, const int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const caddr_t' should also have an identifier name
#226: FILE: arch/ia64/mm/migrate.c:146:
+STATIC INLINE int	page_migrate_statistics(const caddr_t, const int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const int' should also have an identifier name
#226: FILE: arch/ia64/mm/migrate.c:146:
+STATIC INLINE int	page_migrate_statistics(const caddr_t, const int);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#239: FILE: arch/ia64/mm/migrate.c:159:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#248: FILE: arch/ia64/mm/migrate.c:168:
+sys_page_migrate(const int cmd, const caddr_t address, const size_t length,
+							const int node, const pid_t pid)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#255: FILE: arch/ia64/mm/migrate.c:175:
+	PRINT("\nsys_page_migrate(%d, 0x%p, 0x%lx, %d, %d): pid = %d\n",
+					cmd, address, length, node, pid, current->pid);

ERROR:SPACING: space required before the open brace '{'
#256: FILE: arch/ia64/mm/migrate.c:176:
+	switch (cmd){

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open brace '{'
#261: FILE: arch/ia64/mm/migrate.c:181:
+		if (!node_online(node)){

ERROR:SPACING: space required before the open brace '{'
#267: FILE: arch/ia64/mm/migrate.c:187:
+		if (length > PAGE_SIZE / sizeof(phaddr_t)){

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#274: FILE: arch/ia64/mm/migrate.c:194:
+		rc = batch_migrate(/* user buffer */ address, /* buffer */ length,
+									node, pid);

ERROR:SPACING: space required before the open brace '{'
#280: FILE: arch/ia64/mm/migrate.c:200:
+		if (!node_online(node)){

CHECK:SPACING: No space is necessary after a cast
#293: FILE: arch/ia64/mm/migrate.c:213:
+		if (__IS_VA_ALIAS((vaddr_t) address, length)){

ERROR:SPACING: space required before the open brace '{'
#293: FILE: arch/ia64/mm/migrate.c:213:
+		if (__IS_VA_ALIAS((vaddr_t) address, length)){

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#300: FILE: arch/ia64/mm/migrate.c:220:
+		rc = migr_virt_addr_range(/* user virtual */ address,
+						/* address range */ length, node, pid);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#306: FILE: arch/ia64/mm/migrate.c:226:
+		rc = page_migrate_statistics(/* user buffer */ address,
+						/* ? clear statistics ? */ length != 0);

CHECK:SPACING: No space is necessary after a cast
#309: FILE: arch/ia64/mm/migrate.c:229:
+		rc =  *(long long *) &_statistics_sizes;	// Yeh, I know...

CHECK:SPACING: No space is necessary after a cast
#314: FILE: arch/ia64/mm/migrate.c:234:
+		rc = (long long) gimme_an_address(/* user vistual */ address);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#326: FILE: arch/ia64/mm/migrate.c:246:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#341: FILE: arch/ia64/mm/migrate.c:261:
+migr_virt_addr_range(const caddr_t address, const size_t length, const int node,
+									const pid_t pid)

CHECK:SPACING: No space is necessary after a cast
#343: FILE: arch/ia64/mm/migrate.c:263:
+	const vaddr_t		ulimit = (vaddr_t) address + length;

ERROR:SPACING: space required before the open brace '{'
#352: FILE: arch/ia64/mm/migrate.c:272:
+	if (pid != 0 && pid != current->pid){

ERROR:SPACING: space required before the open brace '{'
#356: FILE: arch/ia64/mm/migrate.c:276:
+		if ((mm = look_up_mm(pid)) == NULL){

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#356: FILE: arch/ia64/mm/migrate.c:276:
+		if ((mm = look_up_mm(pid)) == NULL){

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:TYPO_SPELLING: 'wont' may be misspelled - perhaps 'won't'?
#368: FILE: arch/ia64/mm/migrate.c:288:
+		// Actually, there is no need to grab "mm" because it is ours, wont go
 		                                                               ^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:SPACING: No space is necessary after a cast
#383: FILE: arch/ia64/mm/migrate.c:303:
+	beg_vma = find_vma(mm, (vaddr_t) address);	// Look up the first VMA for

CHECK:SPACING: No space is necessary after a cast
#386: FILE: arch/ia64/mm/migrate.c:306:
+	if (beg_vma == NULL || beg_vma->vm_start > (vaddr_t) address){

ERROR:SPACING: space required before the open brace '{'
#386: FILE: arch/ia64/mm/migrate.c:306:
+	if (beg_vma == NULL || beg_vma->vm_start > (vaddr_t) address){

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!beg_vma"
#386: FILE: arch/ia64/mm/migrate.c:306:
+	if (beg_vma == NULL || beg_vma->vm_start > (vaddr_t) address){

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "beg_vma"
#387: FILE: arch/ia64/mm/migrate.c:307:
+		if (beg_vma != NULL)

CHECK:SPACING: No space is necessary after a cast
#391: FILE: arch/ia64/mm/migrate.c:311:
+		PRINT_ERR(no_vma, (vaddr_t) address);

CHECK:SPACING: No space is necessary after a cast
#409: FILE: arch/ia64/mm/migrate.c:329:
+	rc = migr_vaddr_range_2((vaddr_t) address & PAGE_MASK,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#410: FILE: arch/ia64/mm/migrate.c:330:
+	rc = migr_vaddr_range_2((vaddr_t) address & PAGE_MASK,
+					/* round up */ PAGE_ALIGN(ulimit), node, mm);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#423: FILE: arch/ia64/mm/migrate.c:343:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#442: FILE: arch/ia64/mm/migrate.c:362:
+migr_vaddr_range_2(vaddr_t address, const vaddr_t ulimit, const int node,
+							struct mm_struct * const mm)

WARNING:TYPO_SPELLING: 'cheked' may be misspelled - perhaps 'checked'?
#453: FILE: arch/ia64/mm/migrate.c:373:
+	// We've already cheked that it is safe to start walking the PGD, the PMD and the
 	                 ^^^^^^

ERROR:SPACING: space required before the open brace '{'
#476: FILE: arch/ia64/mm/migrate.c:396:
+		if (pgd_none(*pgd) || pgd_bad(*pgd)){

ERROR:SPACING: space required before the open brace '{'
#491: FILE: arch/ia64/mm/migrate.c:411:
+			if (pmd_none(*pmd) || pmd_bad(*pmd)){

ERROR:SPACING: space required before the open brace '{'
#513: FILE: arch/ia64/mm/migrate.c:433:
+				if ((rc = migr_1_page_by_pte(pte, node, mm)) < 0){

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#513: FILE: arch/ia64/mm/migrate.c:433:
+				if ((rc = migr_1_page_by_pte(pte, node, mm)) < 0){

CHECK:SPACING: No space is necessary after a cast
#527: FILE: arch/ia64/mm/migrate.c:447:
+	return *(long long *) &count;		// Yeh, I know...

CHECK:LINE_SPACING: Please don't use multiple blank lines
#530: FILE: arch/ia64/mm/migrate.c:450:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#550: FILE: arch/ia64/mm/migrate.c:470:
+common_check_migrate_1_page(const int src_node, struct page * const old_p,
+			const int node, struct mm_struct * const mm, pte_t * const pte)

ERROR:SPACING: space required before the open brace '{'
#571: FILE: arch/ia64/mm/migrate.c:491:
+	if (new_p == NULL){

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!new_p"
#571: FILE: arch/ia64/mm/migrate.c:491:
+	if (new_p == NULL){

ERROR:SPACING: space required before the open brace '{'
#590: FILE: arch/ia64/mm/migrate.c:510:
+	if (rc == 0){

ERROR:SPACING: space required before the open brace '{'
#598: FILE: arch/ia64/mm/migrate.c:518:
+	} else{

CHECK:LINE_SPACING: Please don't use multiple blank lines
#613: FILE: arch/ia64/mm/migrate.c:533:
+
+

ERROR:SPACING: space required before the open brace '{'
#635: FILE: arch/ia64/mm/migrate.c:555:
+	if (node == src_node){

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#637: FILE: arch/ia64/mm/migrate.c:557:
+		PRINT_ETC("Old ph adr:\t0x%016llx old node: %d new node: %d\n",
+							old_addr, src_node, node);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#656: FILE: arch/ia64/mm/migrate.c:576:
+
+

ERROR:SPACING: space required before the open brace '{'
#685: FILE: arch/ia64/mm/migrate.c:605:
+	if (pid != 0 && pid != current->pid){

ERROR:SPACING: space required before the open brace '{'
#689: FILE: arch/ia64/mm/migrate.c:609:
+		if ((mm = look_up_mm(pid)) == NULL){

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#689: FILE: arch/ia64/mm/migrate.c:609:
+		if ((mm = look_up_mm(pid)) == NULL){

WARNING:TYPO_SPELLING: 'wont' may be misspelled - perhaps 'won't'?
#701: FILE: arch/ia64/mm/migrate.c:621:
+		// Actually, there is no need to grab "mm" because it is ours, wont go
 		                                                               ^^^^

ERROR:SPACING: space required before the open brace '{'
#714: FILE: arch/ia64/mm/migrate.c:634:
+	if (bp == NULL){

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bp"
#714: FILE: arch/ia64/mm/migrate.c:634:
+	if (bp == NULL){

ERROR:SPACING: space required before the open brace '{'
#720: FILE: arch/ia64/mm/migrate.c:640:
+	if (copy_from_user(bp, table, n * sizeof(phaddr_t)) != 0){

ERROR:SPACING: space required before the open brace '{'
#746: FILE: arch/ia64/mm/migrate.c:666:
+	if (rc >= 0){

ERROR:SPACING: space required before the open brace '{'
#751: FILE: arch/ia64/mm/migrate.c:671:
+		for (n = rc, p = bp; n > 0; p++){

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#762: FILE: arch/ia64/mm/migrate.c:682:
+			if ((rc = check_migrate_1_page(*p, node, mm)) < 0)

CHECK:BRACES: braces {} should be used on all arms of this statement
#762: FILE: arch/ia64/mm/migrate.c:682:
+			if ((rc = check_migrate_1_page(*p, node, mm)) < 0)
[...]
+			else if (rc > 0){
[...]
+			} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required before the open brace '{'
#764: FILE: arch/ia64/mm/migrate.c:684:
+			else if (rc > 0){

CHECK:BRACES: Unbalanced braces around else statement
#767: FILE: arch/ia64/mm/migrate.c:687:
+			} else

CHECK:SPACING: No space is necessary after a cast
#771: FILE: arch/ia64/mm/migrate.c:691:
+			rc = *(long long *) &count;	// Yeh, I know...

CHECK:LINE_SPACING: Please don't use multiple blank lines
#787: FILE: arch/ia64/mm/migrate.c:707:
+
+

ERROR:SPACING: space required before the open brace '{'
#822: FILE: arch/ia64/mm/migrate.c:742:
+	if (node == src_node){

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#824: FILE: arch/ia64/mm/migrate.c:744:
+		PRINT_ETC("Old ph adr:\t0x%016llx old node: %d new node: %d\n",
+								address, src_node, node);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#831: FILE: arch/ia64/mm/migrate.c:751:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#849: FILE: arch/ia64/mm/migrate.c:769:
+page_migrate_2(struct page * const old, struct page * const new,
+					struct mm_struct * const mm, pte_t *pte_p)

ERROR:SPACING: space required before the open brace '{'
#861: FILE: arch/ia64/mm/migrate.c:781:
+	if (!PageDirect(old)){

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pte_p"
#866: FILE: arch/ia64/mm/migrate.c:786:
+	if (pte_p == NULL)			// Architecture independent code :-)

CHECK:SPACING: No space is necessary after a cast
#876: FILE: arch/ia64/mm/migrate.c:796:
+	if (mm != (struct mm_struct *) pte_page->mapping)

CHECK:SPACING: No space is necessary after a cast
#884: FILE: arch/ia64/mm/migrate.c:804:
+	vaddress = pte_page->index + ((unsigned long) pte_p & ~PAGE_MASK) * PTRS_PER_PTE;

ERROR:SPACING: space required before the open brace '{'
#892: FILE: arch/ia64/mm/migrate.c:812:
+	if (vma == NULL || vma->vm_start > vaddress){

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!vma"
#892: FILE: arch/ia64/mm/migrate.c:812:
+	if (vma == NULL || vma->vm_start > vaddress){

WARNING:TYPO_SPELLING: 'beacause' may be misspelled - perhaps 'because'?
#909: FILE: arch/ia64/mm/migrate.c:829:
+	// try to, they would observe page faults. They pass easily "mmap_sem" beacause
 	                                                                       ^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#942: FILE: arch/ia64/mm/migrate.c:862:
+	PRINT("New ph addr:\t0x%016lx\nNew PTE:\t0x%016lx\n\n",
+							page_to_phys(new), pte_val(pte));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#951: FILE: arch/ia64/mm/migrate.c:871:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#967: FILE: arch/ia64/mm/migrate.c:887:
+check_migr_1_page_part_2(struct page * const old, struct page * const new,
+					struct mm_struct * const mm, pte_t * const pte)

ERROR:SPACING: space required before the open brace '{'
#973: FILE: arch/ia64/mm/migrate.c:893:
+	if (PageReserved(old)){

ERROR:SPACING: space required before the open brace '{'
#978: FILE: arch/ia64/mm/migrate.c:898:
+	if (PageError(old)){

ERROR:SPACING: space required before the open brace '{'
#983: FILE: arch/ia64/mm/migrate.c:903:
+	if (!PageUptodate(old)){

ERROR:SPACING: space required before the open brace '{'
#987: FILE: arch/ia64/mm/migrate.c:907:
+	if (PageCompound(old)){

ERROR:SPACING: space required before the open brace '{'
#992: FILE: arch/ia64/mm/migrate.c:912:
+	if (old->mapping != NULL){

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "old->mapping"
#992: FILE: arch/ia64/mm/migrate.c:912:
+	if (old->mapping != NULL){

ERROR:SPACING: space required before the open brace '{'
#997: FILE: arch/ia64/mm/migrate.c:917:
+	if (PageSwapCache(old)){

ERROR:SPACING: space required before the open brace '{'
#1002: FILE: arch/ia64/mm/migrate.c:922:
+	if (PageHighMem(page)){

ERROR:SPACING: space required before the open brace '{'
#1010: FILE: arch/ia64/mm/migrate.c:930:
+	if (!page_mapped(old)){			// Actually means "r-mapped"

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1038: FILE: arch/ia64/mm/migrate.c:958:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1054: FILE: arch/ia64/mm/migrate.c:974:
+check_pages_if_in_pgd(phaddr_t * const phaddresses, const size_t n,
+						const struct mm_struct * const mm)

ERROR:SPACING: space required before the open brace '{'
#1079: FILE: arch/ia64/mm/migrate.c:999:
+		for (m = 0, pmd = pmd_offset(pgd, 0); m < PTRS_PER_PMD; m++, pmd++){

ERROR:SPACING: space required before the open brace '{'
#1093: FILE: arch/ia64/mm/migrate.c:1013:
+			for (e = 0, pte = pte0; e < PTRS_PER_PTE; e++, pte++){

ERROR:SPACING: space required before the open brace '{'
#1099: FILE: arch/ia64/mm/migrate.c:1019:
+				for (i = 0, p = phaddresses; i < n; i++, p++){

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1105: FILE: arch/ia64/mm/migrate.c:1025:
+					PRINT("Virtual addr:\t0x%016lx\n",
+									__VA(g, m, e));

ERROR:SPACING: space required before the open brace '{'
#1111: FILE: arch/ia64/mm/migrate.c:1031:
+					if (++found == n){

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1128: FILE: arch/ia64/mm/migrate.c:1048:
+
+

ERROR:SPACING: space required before the open brace '{'
#1148: FILE: arch/ia64/mm/migrate.c:1068:
+	if ((p = find_task_by_pid(pid)) == NULL){

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1148: FILE: arch/ia64/mm/migrate.c:1068:
+	if ((p = find_task_by_pid(pid)) == NULL){

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1167: FILE: arch/ia64/mm/migrate.c:1087:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1170: FILE: arch/ia64/mm/migrate.c:1090:
+
+

WARNING:SIZEOF_PARENTHESIS: sizeof _statistics should be sizeof(_statistics)
#1183: FILE: arch/ia64/mm/migrate.c:1103:
+	if (copy_to_user(vaddress, &_statistics, sizeof _statistics) != 0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1186: FILE: arch/ia64/mm/migrate.c:1106:
+		memset(&_statistics, 0,sizeof _statistics);
 		                      ^

WARNING:SIZEOF_PARENTHESIS: sizeof _statistics should be sizeof(_statistics)
#1186: FILE: arch/ia64/mm/migrate.c:1106:
+		memset(&_statistics, 0,sizeof _statistics);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1190: FILE: arch/ia64/mm/migrate.c:1110:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1193: FILE: arch/ia64/mm/migrate.c:1113:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1196: FILE: arch/ia64/mm/migrate.c:1116:
+
+

ERROR:SPACING: space required before the open brace '{'
#1200: FILE: arch/ia64/mm/migrate.c:1120:
+	if (_pr_flag_ & PRINT_mm){

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1204: FILE: arch/ia64/mm/migrate.c:1124:
+		PRINT("mmap_cache: 0x%p free_area_cache: 0x%lx\n", mm->mmap_cache,
+								mm->free_area_cache);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1206: FILE: arch/ia64/mm/migrate.c:1126:
+		PRINT("pgd: 0x%p mm_users: %d mm_count: %d map_count: %d\n",
+					mm->pgd, atomic_read(&mm->mm_users),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1209: FILE: arch/ia64/mm/migrate.c:1129:
+		PRINT("mmap_sem.count: %d mmap_sem.wait_lock: %d\n", mm->mmap_sem.count,
+							mm->mmap_sem.wait_lock.lock);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1211: FILE: arch/ia64/mm/migrate.c:1131:
+		PRINT("&mmap_sem.wait_list: 0x%p next: 0x%p prev: 0x%p\n",
+				&mm->mmap_sem.wait_list, mm->mmap_sem.wait_list.next,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1215: FILE: arch/ia64/mm/migrate.c:1135:
+		PRINT("&mmlist: 0x%p next: 0x%p prev: 0x%p\n", &mm->mmlist,
+						mm->mmlist.next, mm->mmlist.prev);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1217: FILE: arch/ia64/mm/migrate.c:1137:
+		PRINT("start_code: 0x%lx end_code: 0x%lx\n", mm->start_code,
+									mm->end_code);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1219: FILE: arch/ia64/mm/migrate.c:1139:
+		PRINT("start_data: 0x%lx end_data: 0x%lx\n", mm->start_data,
+									mm->end_data);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1221: FILE: arch/ia64/mm/migrate.c:1141:
+		PRINT("start_brk: 0x%lx brk: 0x%lx start_stack: 0x%lx\n", mm->start_brk,
+							mm->brk, mm->start_stack);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1225: FILE: arch/ia64/mm/migrate.c:1145:
+		PRINT("rss: 0x%lx total_vm: 0x%lx locked_vm: 0x%lx\n", mm->rss,
+							mm->total_vm, mm->locked_vm);

ERROR:PRINTF_0XDECIMAL: Prefixing 0x with decimal output is defective
#1226: FILE: arch/ia64/mm/migrate.c:1146:
+		PRINT("def_flags: 0x%lu cpu_vm_mask: 0x%lx\n", mm->def_flags,

Prefixing 0x with decimal output is defective and should be corrected.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1227: FILE: arch/ia64/mm/migrate.c:1147:
+		PRINT("def_flags: 0x%lu cpu_vm_mask: 0x%lx\n", mm->def_flags,
+								mm->cpu_vm_mask);

ERROR:PRINTF_0XDECIMAL: Prefixing 0x with decimal output is defective
#1231: FILE: arch/ia64/mm/migrate.c:1151:
+		PRINT("used_hugetlb: 0x%d ", mm->used_hugetlb);

ERROR:PRINTF_0XDECIMAL: Prefixing 0x with decimal output is defective
#1233: FILE: arch/ia64/mm/migrate.c:1153:
+		PRINT("context: 0x%lu core_waiters: %d\n", mm->context,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1234: FILE: arch/ia64/mm/migrate.c:1154:
+		PRINT("context: 0x%lu core_waiters: %d\n", mm->context,
+								mm->core_waiters);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1239: FILE: arch/ia64/mm/migrate.c:1159:
+		PRINT("&core_done.wait.task_list: 0x%p next: 0x%p prev: 0x%p\n",
+		&mm->core_done.wait.task_list, mm->core_done.wait.task_list.next,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1242: FILE: arch/ia64/mm/migrate.c:1162:
+		PRINT("ioctx_list_lock.read_counter: %d ",
+						mm->ioctx_list_lock.read_counter);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1244: FILE: arch/ia64/mm/migrate.c:1164:
+		PRINT("ioctx_list_lock.write_lock: %d\n",
+						mm->ioctx_list_lock.write_lock);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1246: FILE: arch/ia64/mm/migrate.c:1166:
+		PRINT("ioctx_list: 0x%p &default_kioctx: 0x%p\n\n", mm->ioctx_list,
+								&mm->default_kioctx);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1250: FILE: arch/ia64/mm/migrate.c:1170:
+
+

ERROR:SPACING: space required before the open brace '{'
#1254: FILE: arch/ia64/mm/migrate.c:1174:
+	if (_pr_flag_ & PRINT_vma){

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1260: FILE: arch/ia64/mm/migrate.c:1180:
+		PRINT("prot: 0x%lx flags: 0x%lx\n", pgprot_val(vma->vm_page_prot),
+									vma->vm_flags);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1262: FILE: arch/ia64/mm/migrate.c:1182:
+		PRINT("&shared: 0x%p next: 0x%p prev: 0x%p\n", &vma->shared,
+						vma->shared.next, vma->shared.prev);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1268: FILE: arch/ia64/mm/migrate.c:1188:
+
+

ERROR:SPACING: space required before the open brace '{'
#1272: FILE: arch/ia64/mm/migrate.c:1192:
+	if (_pr_flag_ & PRINT_page){

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1276: FILE: arch/ia64/mm/migrate.c:1196:
+		PRINT("&list: 0x%p next: 0x%p prev: 0x%p\n", &p->list,
+							p->list.next, p->list.prev);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1279: FILE: arch/ia64/mm/migrate.c:1199:
+		PRINT("&lru: 0x%p next: 0x%p prev: 0x%p\n", &p->lru,
+							p->lru.next, p->lru.prev);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1292: FILE: arch/ia64/mm/migrate.c:1212:
+
+

ERROR:SPACING: space required before the open brace '{'
#1296: FILE: arch/ia64/mm/migrate.c:1216:
+	if (_pr_flag_ & PRINT_pte){

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1305: FILE: arch/ia64/mm/migrate.c:1225:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1308: FILE: arch/ia64/mm/migrate.c:1228:
+
+

CHECK:SPACING: No space is necessary after a cast
#1322: FILE: arch/ia64/mm/migrate.c:1242:
+	if (vaddress == (caddr_t) -1)

CHECK:SPACING: No space is necessary after a cast
#1323: FILE: arch/ia64/mm/migrate.c:1243:
+		vaddress = (caddr_t) _DATA_;

CHECK:SPACING: No space is necessary after a cast
#1324: FILE: arch/ia64/mm/migrate.c:1244:
+	PRINT("Virtual addr:\t0x%016lx\n", (vaddr_t) vaddress);

CHECK:SPACING: No space is necessary after a cast
#1326: FILE: arch/ia64/mm/migrate.c:1246:
+	vma = find_vma(current->mm, (vaddr_t) vaddress);

CHECK:SPACING: No space is necessary after a cast
#1327: FILE: arch/ia64/mm/migrate.c:1247:
+	if (vma == NULL || vma->vm_start > (vaddr_t) vaddress){

ERROR:SPACING: space required before the open brace '{'
#1327: FILE: arch/ia64/mm/migrate.c:1247:
+	if (vma == NULL || vma->vm_start > (vaddr_t) vaddress){

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!vma"
#1327: FILE: arch/ia64/mm/migrate.c:1247:
+	if (vma == NULL || vma->vm_start > (vaddr_t) vaddress){

CHECK:SPACING: No space is necessary after a cast
#1333: FILE: arch/ia64/mm/migrate.c:1253:
+		pgd = pgd_offset(current->mm, (vaddr_t) vaddress);

CHECK:SPACING: No space is necessary after a cast
#1336: FILE: arch/ia64/mm/migrate.c:1256:
+		pmd = pmd_offset(pgd, (vaddr_t) vaddress);

CHECK:SPACING: No space is necessary after a cast
#1339: FILE: arch/ia64/mm/migrate.c:1259:
+		pte = pte_offset_map(pmd, (vaddr_t) vaddress);

ERROR:SPACING: space required before the open brace '{'
#1340: FILE: arch/ia64/mm/migrate.c:1260:
+		if (!pte_present(*pte)){

CHECK:SPACING: No space is necessary after a cast
#1349: FILE: arch/ia64/mm/migrate.c:1269:
+	PRINT("Physical addr:\t0x%016llx\n", (long long) phaddress);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1353: FILE: arch/ia64/mm/migrate.c:1273:
+
+

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1371: FILE: include/asm-generic/rmap.h:99:
+#define NRPTE ((L1_CACHE_BYTES - sizeof(unsigned long))/sizeof(pte_addr_t))
                                                        ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1408: FILE: include/asm-ia64/page_migrate.h:1:
+#define	_TEST_

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1411: FILE: include/asm-ia64/page_migrate.h:4:
+
+

WARNING:TYPO_SPELLING: 'Sytem' may be misspelled - perhaps 'System'?
#1422: FILE: include/asm-ia64/page_migrate.h:15:
+ * Sytem call syntax:
    ^^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1480: FILE: include/asm-ia64/page_migrate.h:73:
+
+

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1485: FILE: include/asm-ia64/page_migrate.h:78:
+typedef	long long	phaddr_t;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1487: FILE: include/asm-ia64/page_migrate.h:80:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1493: FILE: include/asm-ia64/page_migrate.h:86:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1499: FILE: include/asm-ia64/page_migrate.h:92:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1552: FILE: include/asm-ia64/page_migrate.h:145:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1555: FILE: include/asm-ia64/page_migrate.h:148:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1563: FILE: include/asm-ia64/page_migrate.h:156:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1569: FILE: include/asm-ia64/page_migrate.h:162:
+migrate_ph_pages(const phaddr_t * const table, const size_t length, const int node,
+				struct _un_success_count_ * const p, const pid_t pid)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1577: FILE: include/asm-ia64/page_migrate.h:170:
+	u.ll = syscall(__NR_page_migrate, _PHADDR_BATCH_MIGRATE_,
+							table, length, node, pid);

ERROR:SPACING: space required before the open brace '{'
#1580: FILE: include/asm-ia64/page_migrate.h:173:
+	if (p != NULL){

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "p"
#1580: FILE: include/asm-ia64/page_migrate.h:173:
+	if (p != NULL){

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1584: FILE: include/asm-ia64/page_migrate.h:177:
+^Ireturn 0; $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1587: FILE: include/asm-ia64/page_migrate.h:180:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1593: FILE: include/asm-ia64/page_migrate.h:186:
+migrate_virt_addr_range(const caddr_t address, const size_t length, const int node,
+				struct _un_success_count_ * const p, const pid_t pid)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1601: FILE: include/asm-ia64/page_migrate.h:194:
+	u.ll = syscall(__NR_page_migrate, _VA_RANGE_MIGRATE_,
+							address, length, node, pid);

ERROR:SPACING: space required before the open brace '{'
#1604: FILE: include/asm-ia64/page_migrate.h:197:
+	if (p != NULL){

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "p"
#1604: FILE: include/asm-ia64/page_migrate.h:197:
+	if (p != NULL){

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1608: FILE: include/asm-ia64/page_migrate.h:201:
+^Ireturn 0; $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1611: FILE: include/asm-ia64/page_migrate.h:204:
+
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "p"
#1626: FILE: include/asm-ia64/page_migrate.h:219:
+	if (p != NULL)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1628: FILE: include/asm-ia64/page_migrate.h:221:
+^Ireturn 0; $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1631: FILE: include/asm-ia64/page_migrate.h:224:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1641: FILE: include/asm-ia64/page_migrate.h:234:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1651: FILE: include/asm-ia64/page_migrate.h:244:
+
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'address' - possible side-effects?
#1670: FILE: include/asm-ia64/pgtable.h:125:
+#define	__IS_VA_ALIAS(address, length)							\
+				((~__VA_ALIAS_MASK & (address)) !=			\
+					(~__VA_ALIAS_MASK & ((address) + (length) - 1)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pgdi' - possible side-effects?
#1677: FILE: include/asm-ia64/pgtable.h:132:
+#define	__VA(pgdi, pmdi, ptei)	(((pgdi) >> (PAGE_SHIFT - 6)) << 61 |			\
+				((pgdi) & ((PTRS_PER_PGD >> 3) - 1)) << PGDIR_SHIFT |	\
+				(pmdi) << PMD_SHIFT | (ptei) << PAGE_SHIFT)

CHECK:SPACING: No space is necessary after a cast
#1694: FILE: include/asm-ia64/pgtable.h:353:
+	((pmd_t *) pgd_page(*(dir)) + pmd_index(addr))

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1702: FILE: include/asm-ia64/rmap-locking.h:1:
+/*

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'page' may be better as '(page)' to avoid precedence issues
#1714: FILE: include/asm-ia64/rmap-locking.h:13:
+#define pte_chain_lock(page)	bit_spin_lock(PG_chainlock, &page->flags)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'page' may be better as '(page)' to avoid precedence issues
#1715: FILE: include/asm-ia64/rmap-locking.h:14:
+#define pte_chain_trylock(page)	bit_spin_trylock(PG_chainlock, &page->flags)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'page' may be better as '(page)' to avoid precedence issues
#1716: FILE: include/asm-ia64/rmap-locking.h:15:
+#define pte_chain_unlock(page)	bit_spin_unlock(PG_chainlock, &page->flags)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'page' may be better as '(page)' to avoid precedence issues
#1734: FILE: include/linux/rmap-locking.h:14:
+#define pte_chain_trylock(page)	bit_spin_trylock(PG_chainlock, &page->flags)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1786: FILE: test/migstat.c:1:
+/*

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1792: FILE: test/migstat.c:7:
+
+

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1798: FILE: test/migstat.c:13:
+#define	CONV(x)		x, (x * mult + div / 2) / div, (x * mult + div / 2) / div / 1000

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#1798: FILE: test/migstat.c:13:
+#define	CONV(x)		x, (x * mult + div / 2) / div, (x * mult + div / 2) / div / 1000

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1800: FILE: test/migstat.c:15:
+extern int		errno;

CHECK:BRACES: braces {} should be used on all arms of this statement
#1814: FILE: test/migstat.c:29:
+	if (argc == 2 && strcmp(argv[1], "-c") == 0)
[...]
+	else if (argc != 1){
[...]

ERROR:SPACING: space required before the open brace '{'
#1816: FILE: test/migstat.c:31:
+	else if (argc != 1){

ERROR:SPACING: space required before the open brace '{'
#1820: FILE: test/migstat.c:35:
+	if (get_stat_sizes(&ss) < 0){

ERROR:SPACING: space required before the open brace '{'
#1824: FILE: test/migstat.c:39:
+	if ((sp = malloc(ss.sizeof_statistics)) == NULL){

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1824: FILE: test/migstat.c:39:
+	if ((sp = malloc(ss.sizeof_statistics)) == NULL){

ERROR:SPACING: space required before the open brace '{'
#1828: FILE: test/migstat.c:43:
+	if (get_staistics(sp, clear_flag) < 0){

ERROR:SPACING: space required before the open brace '{'
#1856: FILE: test/migstat.c:71:
+	for (from = 0; from < ss.max_nodes; from++){

ERROR:SPACING: space required before the open brace '{'
#1858: FILE: test/migstat.c:73:
+		for (to = 0; to < ss.max_nodes; p++, to++){

ERROR:SPACING: space required before the open brace '{'
#1899: FILE: test/migstat.c:114:
+	if (sp->c.pgd_scan != 0){

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1902: FILE: test/migstat.c:117:
+		printf("mm_hit:\t\t\t%11ld\nmiss:\t\t\t%11ld\n", sp->c.mm_hit,
+					sp->e.non_existent_addr + ok - sp->c.mm_hit);

ERROR:SPACING: space required before the open brace '{'
#1905: FILE: test/migstat.c:120:
+	if (sp->c.perfbullctl != 0){

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1920: FILE: test/ph.c:1:
+/*

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1924: FILE: test/ph.c:5:
+
+

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1938: FILE: test/ph.c:19:
+extern int			errno;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1942: FILE: test/ph.c:23:
+
+

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1944: FILE: test/ph.c:25:
+fill(volatile void *p)

ERROR:SPACING: space required before the open brace '{'
#1949: FILE: test/ph.c:30:
+	for (i = 0; i < count; i++, p += PAGE_SIZE){

CHECK:SPACING: No space is necessary after a cast
#1950: FILE: test/ph.c:31:
+		* (unsigned long *) p = 0xdeadbeefL;

ERROR:SPACING: space prohibited after that '*' (ctx:ExW)
#1950: FILE: test/ph.c:31:
+		* (unsigned long *) p = 0xdeadbeefL;
 		^

CHECK:SPACING: No space is necessary after a cast
#1951: FILE: test/ph.c:32:
+		if ((address = gimme_a_ph_address((void *) p)) < 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1951: FILE: test/ph.c:32:
+		if ((address = gimme_a_ph_address((void *) p)) < 0)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1959: FILE: test/ph.c:40:
+
+

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1960: FILE: test/ph.c:41:
+mig(volatile void *p, int node)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1968: FILE: test/ph.c:49:
+	printf("\nmig(..., %d): rc = %ld errno = %d *p: 0x%lx\n", node, rc, errno,
+								* (unsigned long *) p);

CHECK:SPACING: No space is necessary after a cast
#1968: FILE: test/ph.c:49:
+								* (unsigned long *) p);

ERROR:SPACING: space prohibited after that '*' (ctx:ExW)
#1968: FILE: test/ph.c:49:
+								* (unsigned long *) p);
 								^

ERROR:SPACING: space required before the open brace '{'
#1970: FILE: test/ph.c:51:
+	if (rc < 0){

CHECK:SPACING: No space is necessary after a cast
#1974: FILE: test/ph.c:55:
+	address = gimme_a_ph_address((void *) p);

ERROR:SPACING: space required before the open brace '{'
#1976: FILE: test/ph.c:57:
+	if (address < 0){

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1982: FILE: test/ph.c:63:
+
+

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1985: FILE: test/ph.c:66:
+	volatile void	*p;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1988: FILE: test/ph.c:69:
+	p = mmap(NULL, MMAPSIZE, PROT_READ | PROT_WRITE,
+					MAP_PRIVATE | MAP_ANONYMOUS, -1, 0);

ERROR:SPACING: space required before the open brace '{'
#1989: FILE: test/ph.c:70:
+	if (p == MAP_FAILED){

CHECK:SPACING: No space is necessary after a cast
#1997: FILE: test/ph.c:78:
+	* (unsigned long *) p = 0xdeadbeef03L;

ERROR:SPACING: space prohibited after that '*' (ctx:ExW)
#1997: FILE: test/ph.c:78:
+	* (unsigned long *) p = 0xdeadbeef03L;
 	^

CHECK:SPACING: No space is necessary after a cast
#2001: FILE: test/ph.c:82:
+	address = gimme_a_ph_address((void *) p);

ERROR:SPACING: space required before the open brace '{'
#2003: FILE: test/ph.c:84:
+	if (address < 0){

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2018: FILE: test/v.c:1:
+/*

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2022: FILE: test/v.c:5:
+
+

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#2032: FILE: test/v.c:15:
+extern int	errno;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2036: FILE: test/v.c:19:
+
+

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#2037: FILE: test/v.c:20:
+mig(volatile void *p, int node)

CHECK:SPACING: No space is necessary after a cast
#2041: FILE: test/v.c:24:
+	rc = migrate_virt_addr_range((caddr_t) p, MMAPSIZE, node, &u_s, 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2043: FILE: test/v.c:26:
+	printf("\nmig(..., %d): rc = %ld errno = %d *p: 0x%lx\n", node, rc, errno,
+								* (unsigned long *) p);

CHECK:SPACING: No space is necessary after a cast
#2043: FILE: test/v.c:26:
+								* (unsigned long *) p);

ERROR:SPACING: space prohibited after that '*' (ctx:ExW)
#2043: FILE: test/v.c:26:
+								* (unsigned long *) p);
 								^

ERROR:SPACING: space required before the open brace '{'
#2045: FILE: test/v.c:28:
+	if (rc < 0){

CHECK:SPACING: No space is necessary after a cast
#2049: FILE: test/v.c:32:
+	address = gimme_a_ph_address((void *) p);

ERROR:SPACING: space required before the open brace '{'
#2051: FILE: test/v.c:34:
+	if (address < 0){

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2057: FILE: test/v.c:40:
+
+

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#2060: FILE: test/v.c:43:
+	volatile void	*p0, *p;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2062: FILE: test/v.c:45:
+	p0 = p = mmap(NULL, MMAPSIZE, PROT_READ | PROT_WRITE,

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:SPACING: space required before the open brace '{'
#2064: FILE: test/v.c:47:
+	if (p == MAP_FAILED){

CHECK:SPACING: No space is necessary after a cast
#2071: FILE: test/v.c:54:
+	* (unsigned long *) p = 0xdeadbeef01L;

ERROR:SPACING: space prohibited after that '*' (ctx:ExW)
#2071: FILE: test/v.c:54:
+	* (unsigned long *) p = 0xdeadbeef01L;
 	^

CHECK:SPACING: No space is necessary after a cast
#2073: FILE: test/v.c:56:
+	* (unsigned long *) p = 0xdeadbeef02L;

ERROR:SPACING: space prohibited after that '*' (ctx:ExW)
#2073: FILE: test/v.c:56:
+	* (unsigned long *) p = 0xdeadbeef02L;
 	^

CHECK:SPACING: No space is necessary after a cast
#2074: FILE: test/v.c:57:
+	address = gimme_a_ph_address((void *) p);

CHECK:SPACING: No space is necessary after a cast
#2080: FILE: test/v.c:63:
+	* (unsigned long *) p = 0xdeadbeef03L;

ERROR:SPACING: space prohibited after that '*' (ctx:ExW)
#2080: FILE: test/v.c:63:
+	* (unsigned long *) p = 0xdeadbeef03L;
 	^

CHECK:SPACING: No space is necessary after a cast
#2084: FILE: test/v.c:67:
+	address = gimme_a_ph_address((void *) p);

ERROR:SPACING: space required before the open brace '{'
#2086: FILE: test/v.c:69:
+	if (address < 0){

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2100: FILE: test/victim.c:1:
+/*

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2104: FILE: test/victim.c:5:
+
+

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2111: FILE: test/victim.c:12:
+#define	N		MMAPSIZE / sizeof(long)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2113: FILE: test/victim.c:14:
+
+

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#2117: FILE: test/victim.c:18:
+	volatile long	*p0, *p;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2121: FILE: test/victim.c:22:
+	p0 = p = mmap(NULL, MMAPSIZE, PROT_READ | PROT_WRITE,

ERROR:SPACING: space required before the open brace '{'
#2123: FILE: test/victim.c:24:
+	if (p == MAP_FAILED){

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2140: FILE: test/vmig.c:1:
+/*

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2144: FILE: test/vmig.c:5:
+
+

ERROR:SPACING: space required before the open brace '{'
#2163: FILE: test/vmig.c:24:
+	if (argc != 3){

CHECK:SPACING: No space is necessary after a cast
#2169: FILE: test/vmig.c:30:
+	rc = migrate_virt_addr_range((caddr_t) SH_ADDRESS, SH_SIZE, node, &u_s, pid);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000293149.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 94 errors, 79 warnings, 162 checks, 2076 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000293149.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
