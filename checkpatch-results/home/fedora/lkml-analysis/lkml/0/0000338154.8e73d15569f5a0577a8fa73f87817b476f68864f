WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#39: 
 l-mpm/net/core/netpoll.c        |  582 ++++++++++++++++++++++++++++++++++++++++

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#46: FILE: net/core/netpoll.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#65: FILE: net/core/netpoll.c:20:
+/*
+ * We maintain a small pool of fully-sized skbs, to make sure the

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#84: FILE: net/core/netpoll.c:39:
+static int checksum_udp(struct sk_buff *skb, struct udphdr *uh,
+			     unsigned short ulen, u32 saddr, u32 daddr)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#90: FILE: net/core/netpoll.c:45:
+		return csum_tcpudp_magic(

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "clist"
#136: FILE: net/core/netpoll.c:91:
+		while (clist != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:LINE_SPACING: Missing a blank line after declarations
#138: FILE: net/core/netpoll.c:93:
+			struct sk_buff *skb = clist;
+			clist = clist->next;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#146: FILE: net/core/netpoll.c:101:
+static struct sk_buff * find_skb(struct netpoll *np, int len, int reserve)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#169: FILE: net/core/netpoll.c:124:
+	if(!skb) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'count == 1000000'
#171: FILE: net/core/netpoll.c:126:
+		if (once && (count == 1000000)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#172: FILE: net/core/netpoll.c:127:
+			printk("out of netpoll skbs!\n");

ERROR:SPACING: space required before the open parenthesis '('
#189: FILE: net/core/netpoll.c:144:
+	if(!np || !np->dev || !(np->dev->flags & IFF_UP)) {

ERROR:SPACING: space required before the open parenthesis '('
#211: FILE: net/core/netpoll.c:166:
+	if(status)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#224: FILE: net/core/netpoll.c:179:
+	ip_len = eth_len = udp_len + sizeof(*iph);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:SPACING: No space is necessary after a cast
#234: FILE: net/core/netpoll.c:189:
+	udph = (struct udphdr *) skb_push(skb, sizeof(*udph));

CHECK:SPACING: No space is necessary after a cast
#255: FILE: net/core/netpoll.c:210:
+	eth = (struct ethhdr *) skb_push(skb, ETH_HLEN);

CHECK:SPACING: No space is necessary after a cast
#266: FILE: net/core/netpoll.c:221:
+	struct in_device *in_dev = (struct in_device *) np->dev->ip_ptr;

WARNING:TYPO_SPELLING: 'tha' may be misspelled - perhaps 'than'?
#268: FILE: net/core/netpoll.c:223:
+	unsigned char *arp_ptr, *sha, *tha;
 	                               ^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#282: FILE: net/core/netpoll.c:237:
+	skb->h.raw = skb->nh.raw = skb->data;

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#291: FILE: net/core/netpoll.c:246:
+	arp_ptr= (unsigned char *)(arp+1);
 	       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#291: FILE: net/core/netpoll.c:246:
+	arp_ptr= (unsigned char *)(arp+1);
 	                              ^

WARNING:TYPO_SPELLING: 'tha' may be misspelled - perhaps 'than'?
#296: FILE: net/core/netpoll.c:251:
+	tha = arp_ptr;
 	^^^

CHECK:SPACING: No space is necessary after a cast
#314: FILE: net/core/netpoll.c:269:
+	arp = (struct arphdr *) skb_put(send_skb, size);

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#329: FILE: net/core/netpoll.c:284:
+	/*
+	 * Fill out the arp protocol part.

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#341: FILE: net/core/netpoll.c:296:
+	arp_ptr=(unsigned char *)(arp + 1);
 	       ^

WARNING:CONSTANT_CONVERSION: __constant_htons should be htons
#365: FILE: net/core/netpoll.c:320:
+	if (skb->protocol == __constant_htons(ETH_P_ARP)) {

Use of __constant_<foo> form is discouraged for the following functions::

  __constant_cpu_to_be[x]
  __constant_cpu_to_le[x]
  __constant_be[x]_to_cpu
  __constant_le[x]_to_cpu
  __constant_htons
  __constant_ntohs

Using any of these outside of include/uapi/ is not preferred as using the
function without __constant_ is identical when the argument is a
constant.

In big endian systems, the macros like __constant_cpu_to_be32(x) and
cpu_to_be32(x) expand to the same expression::

  #define __constant_cpu_to_be32(x) ((__force __be32)(__u32)(x))
  #define __cpu_to_be32(x)          ((__force __be32)(__u32)(x))

In little endian systems, the macros __constant_cpu_to_be32(x) and
cpu_to_be32(x) expand to __constant_swab32 and __swab32.  __swab32
has a __builtin_constant_p check::

  #define __swab32(x)				\
    (__builtin_constant_p((__u32)(x)) ?	\
    ___constant_swab32(x) :			\
    __fswab32(x))

So ultimately they have a special case for constants.
Similar is the case with all of the macros in the list.  Thus
using the __constant_... forms are unnecessarily verbose and
not preferred outside of include/uapi.

See: https://lore.kernel.org/lkml/1400106425.12666.6.camel@joe-AO725/

ERROR:SPACING: space prohibited after that open parenthesis '('
#367: FILE: net/core/netpoll.c:322:
+			if ( np->need_arp && np->dev == skb->dev ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#367: FILE: net/core/netpoll.c:322:
+			if ( np->need_arp && np->dev == skb->dev ) {

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#387: FILE: net/core/netpoll.c:342:
+	if (!pskb_may_pull(skb, iph->ihl*4))
 	                                ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#393: FILE: net/core/netpoll.c:348:
+	if (skb->len < len || len < iph->ihl*4)
 	                                    ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#399: FILE: net/core/netpoll.c:354:
+	len -= iph->ihl*4;
 	               ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#400: FILE: net/core/netpoll.c:355:
+	uh = (struct udphdr *)(((char *)iph) + iph->ihl*4);
 	                                               ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#424: FILE: net/core/netpoll.c:379:
+				    (char *)(uh+1), ulen-sizeof(uh)-4);
 				               ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#424: FILE: net/core/netpoll.c:379:
+				    (char *)(uh+1), ulen-sizeof(uh)-4);
 				                        ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#424: FILE: net/core/netpoll.c:379:
+				    (char *)(uh+1), ulen-sizeof(uh)-4);
 				                                   ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#437: FILE: net/core/netpoll.c:392:
+	char *cur=opt, *delim;
 	         ^

ERROR:SPACING: space required before the open parenthesis '('
#439: FILE: net/core/netpoll.c:394:
+	if(*cur != '@') {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#440: FILE: net/core/netpoll.c:395:
+		if ((delim = strchr(cur, '@')) == NULL)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#442: FILE: net/core/netpoll.c:397:
+		*delim=0;
 		      ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#443: FILE: net/core/netpoll.c:398:
+		np->local_port=simple_strtol(cur, 0, 10);
 		              ^

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#443: FILE: net/core/netpoll.c:398:
+		np->local_port=simple_strtol(cur, 0, 10);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#444: FILE: net/core/netpoll.c:399:
+		cur=delim;
 		   ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#447: FILE: net/core/netpoll.c:402:
+	printk(KERN_INFO "%s: local port %d\n", np->name, np->local_port);

ERROR:SPACING: space required before the open parenthesis '('
#449: FILE: net/core/netpoll.c:404:
+	if(*cur != '/') {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#450: FILE: net/core/netpoll.c:405:
+		if ((delim = strchr(cur, '/')) == NULL)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#452: FILE: net/core/netpoll.c:407:
+		*delim=0;
 		      ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#453: FILE: net/core/netpoll.c:408:
+		np->local_ip=ntohl(in_aton(cur));
 		            ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#454: FILE: net/core/netpoll.c:409:
+		cur=delim;
 		   ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#456: FILE: net/core/netpoll.c:411:
+		printk(KERN_INFO "%s: local IP %d.%d.%d.%d\n",

ERROR:SPACING: space prohibited after that open parenthesis '('
#461: FILE: net/core/netpoll.c:416:
+	if ( *cur != ',') {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#463: FILE: net/core/netpoll.c:418:
+		if ((delim = strchr(cur, ',')) == NULL)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#465: FILE: net/core/netpoll.c:420:
+		*delim=0;
 		      ^

WARNING:STRLCPY: Prefer strscpy over strlcpy - see: https://lore.kernel.org/r/CAHk-=wgfRnXz0W3D37d01q3JFkr_i_uTL=V6A6G1oUZcprmknw@mail.gmail.com/
#466: FILE: net/core/netpoll.c:421:
+		strlcpy(np->dev_name, cur, sizeof(np->dev_name));

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#467: FILE: net/core/netpoll.c:422:
+		cur=delim;
 		   ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#471: FILE: net/core/netpoll.c:426:
+	printk(KERN_INFO "%s: interface %s\n", np->name, np->dev_name);

ERROR:SPACING: space prohibited after that open parenthesis '('
#473: FILE: net/core/netpoll.c:428:
+	if ( *cur != '@' ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#473: FILE: net/core/netpoll.c:428:
+	if ( *cur != '@' ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#475: FILE: net/core/netpoll.c:430:
+		if ((delim = strchr(cur, '@')) == NULL)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#477: FILE: net/core/netpoll.c:432:
+		*delim=0;
 		      ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#478: FILE: net/core/netpoll.c:433:
+		np->remote_port=simple_strtol(cur, 0, 10);
 		               ^

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#478: FILE: net/core/netpoll.c:433:
+		np->remote_port=simple_strtol(cur, 0, 10);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#479: FILE: net/core/netpoll.c:434:
+		cur=delim;
 		   ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#482: FILE: net/core/netpoll.c:437:
+	printk(KERN_INFO "%s: remote port %d\n", np->name, np->remote_port);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#485: FILE: net/core/netpoll.c:440:
+	if ((delim = strchr(cur, '/')) == NULL)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#487: FILE: net/core/netpoll.c:442:
+	*delim=0;
 	      ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#488: FILE: net/core/netpoll.c:443:
+	np->remote_ip=ntohl(in_aton(cur));
 	             ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#489: FILE: net/core/netpoll.c:444:
+	cur=delim+1;
 	   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#489: FILE: net/core/netpoll.c:444:
+	cur=delim+1;
 	         ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#491: FILE: net/core/netpoll.c:446:
+	printk(KERN_INFO "%s: remote IP %d.%d.%d.%d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#492: FILE: net/core/netpoll.c:447:
+	printk(KERN_INFO "%s: remote IP %d.%d.%d.%d\n",
+		       np->name, HIPQUAD(np->remote_ip));

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#494: FILE: net/core/netpoll.c:449:
+	if( *cur != 0 )
+	{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space prohibited after that open parenthesis '('
#494: FILE: net/core/netpoll.c:449:
+	if( *cur != 0 )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#494: FILE: net/core/netpoll.c:449:
+	if( *cur != 0 )

ERROR:SPACING: space required before the open parenthesis '('
#494: FILE: net/core/netpoll.c:449:
+	if( *cur != 0 )

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#497: FILE: net/core/netpoll.c:452:
+		if ((delim = strchr(cur, ':')) == NULL)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#499: FILE: net/core/netpoll.c:454:
+		*delim=0;
 		      ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#500: FILE: net/core/netpoll.c:455:
+		np->remote_mac[0]=simple_strtol(cur, 0, 16);
 		                 ^

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#500: FILE: net/core/netpoll.c:455:
+		np->remote_mac[0]=simple_strtol(cur, 0, 16);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#501: FILE: net/core/netpoll.c:456:
+		cur=delim+1;
 		   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#501: FILE: net/core/netpoll.c:456:
+		cur=delim+1;
 		         ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#502: FILE: net/core/netpoll.c:457:
+		if ((delim = strchr(cur, ':')) == NULL)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#504: FILE: net/core/netpoll.c:459:
+		*delim=0;
 		      ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#505: FILE: net/core/netpoll.c:460:
+		np->remote_mac[1]=simple_strtol(cur, 0, 16);
 		                 ^

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#505: FILE: net/core/netpoll.c:460:
+		np->remote_mac[1]=simple_strtol(cur, 0, 16);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#506: FILE: net/core/netpoll.c:461:
+		cur=delim+1;
 		   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#506: FILE: net/core/netpoll.c:461:
+		cur=delim+1;
 		         ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#507: FILE: net/core/netpoll.c:462:
+		if ((delim = strchr(cur, ':')) == NULL)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#509: FILE: net/core/netpoll.c:464:
+		*delim=0;
 		      ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#510: FILE: net/core/netpoll.c:465:
+		np->remote_mac[2]=simple_strtol(cur, 0, 16);
 		                 ^

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#510: FILE: net/core/netpoll.c:465:
+		np->remote_mac[2]=simple_strtol(cur, 0, 16);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#511: FILE: net/core/netpoll.c:466:
+		cur=delim+1;
 		   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#511: FILE: net/core/netpoll.c:466:
+		cur=delim+1;
 		         ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#512: FILE: net/core/netpoll.c:467:
+		if ((delim = strchr(cur, ':')) == NULL)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#514: FILE: net/core/netpoll.c:469:
+		*delim=0;
 		      ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#515: FILE: net/core/netpoll.c:470:
+		np->remote_mac[3]=simple_strtol(cur, 0, 16);
 		                 ^

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#515: FILE: net/core/netpoll.c:470:
+		np->remote_mac[3]=simple_strtol(cur, 0, 16);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#516: FILE: net/core/netpoll.c:471:
+		cur=delim+1;
 		   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#516: FILE: net/core/netpoll.c:471:
+		cur=delim+1;
 		         ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#517: FILE: net/core/netpoll.c:472:
+		if ((delim = strchr(cur, ':')) == NULL)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#519: FILE: net/core/netpoll.c:474:
+		*delim=0;
 		      ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#520: FILE: net/core/netpoll.c:475:
+		np->remote_mac[4]=simple_strtol(cur, 0, 16);
 		                 ^

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#520: FILE: net/core/netpoll.c:475:
+		np->remote_mac[4]=simple_strtol(cur, 0, 16);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#521: FILE: net/core/netpoll.c:476:
+		cur=delim+1;
 		   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#521: FILE: net/core/netpoll.c:476:
+		cur=delim+1;
 		         ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#522: FILE: net/core/netpoll.c:477:
+		np->remote_mac[5]=simple_strtol(cur, 0, 16);
 		                 ^

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#522: FILE: net/core/netpoll.c:477:
+		np->remote_mac[5]=simple_strtol(cur, 0, 16);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#525: FILE: net/core/netpoll.c:480:
+	printk(KERN_INFO "%s: remote ethernet address "

WARNING:SPLIT_STRING: quoted string split across lines
#526: FILE: net/core/netpoll.c:481:
+	printk(KERN_INFO "%s: remote ethernet address "
+	       "%02x:%02x:%02x:%02x:%02x:%02x\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#538: FILE: net/core/netpoll.c:493:
+	printk(KERN_INFO "%s: couldn't parse config at %s!\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#552: FILE: net/core/netpoll.c:507:
+		printk(KERN_ERR "%s: %s doesn't exist, aborting.\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#561: FILE: net/core/netpoll.c:516:
+		printk(KERN_ERR "%s: device %s not up yet, forcing it\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#568: FILE: net/core/netpoll.c:523:
+			printk(KERN_ERR "netconsole: failed to open %s\n",

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#576: FILE: net/core/netpoll.c:531:
+		jiff = jiffies + 2*HZ;
 		                  ^

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#581: FILE: net/core/netpoll.c:536:
+	if(!np->local_ip)
+	{

ERROR:SPACING: space required before the open parenthesis '('
#581: FILE: net/core/netpoll.c:536:
+	if(!np->local_ip)

ERROR:SPACING: space required before the open parenthesis '('
#585: FILE: net/core/netpoll.c:540:
+		if(!in_dev) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#586: FILE: net/core/netpoll.c:541:
+			printk(KERN_ERR "%s: no IP address for %s, aborting\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#593: FILE: net/core/netpoll.c:548:
+		printk(KERN_INFO "%s: local IP %d.%d.%d.%d\n",

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#598: FILE: net/core/netpoll.c:553:
+	for(a=irq_desc[ndev->irq].action; a; a=a->next) {
 	     ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#598: FILE: net/core/netpoll.c:553:
+	for(a=irq_desc[ndev->irq].action; a; a=a->next) {
 	                                      ^

ERROR:SPACING: space required before the open parenthesis '('
#598: FILE: net/core/netpoll.c:553:
+	for(a=irq_desc[ndev->irq].action; a; a=a->next) {

ERROR:SPACING: space required before the open parenthesis '('
#599: FILE: net/core/netpoll.c:554:
+		if(a->dev_id == ndev) {

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#606: FILE: net/core/netpoll.c:561:
+	if(!np->irqfunc)
+	{

ERROR:SPACING: space required before the open parenthesis '('
#606: FILE: net/core/netpoll.c:561:
+	if(!np->irqfunc)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#608: FILE: net/core/netpoll.c:563:
+		printk(KERN_ERR "%s: couldn't find irq handler for %s, "

WARNING:SPLIT_STRING: quoted string split across lines
#609: FILE: net/core/netpoll.c:564:
+		printk(KERN_ERR "%s: couldn't find irq handler for %s, "
+		       "aborting\n", np->name, np->dev_name);

ERROR:SPACING: space required before the open parenthesis '('
#615: FILE: net/core/netpoll.c:570:
+	if(np->rx_hook) {

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#632: FILE: include/linux/netpoll.h:1:
+/*

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#649: FILE: include/linux/netpoll.h:18:
+	irqreturn_t (*irqfunc)(int, void *, struct pt_regs *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#649: FILE: include/linux/netpoll.h:18:
+	irqreturn_t (*irqfunc)(int, void *, struct pt_regs *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#649: FILE: include/linux/netpoll.h:18:
+	irqreturn_t (*irqfunc)(int, void *, struct pt_regs *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct netpoll *' should also have an identifier name
#650: FILE: include/linux/netpoll.h:19:
+	void (*rx_hook)(struct netpoll *, int, char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#650: FILE: include/linux/netpoll.h:19:
+	void (*rx_hook)(struct netpoll *, int, char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#650: FILE: include/linux/netpoll.h:19:
+	void (*rx_hook)(struct netpoll *, int, char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#650: FILE: include/linux/netpoll.h:19:
+	void (*rx_hook)(struct netpoll *, int, char *, int);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000338154.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 68 errors, 41 warnings, 26 checks, 653 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000338154.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
