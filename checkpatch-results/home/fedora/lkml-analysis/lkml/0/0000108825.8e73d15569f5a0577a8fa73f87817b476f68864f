WARNING:TYPO_SPELLING: 'initailly' may be misspelled - perhaps 'initially'?
#33: 
This work is initailly done by Zack Brown to add support for
             ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'initailly' may be misspelled - perhaps 'initially'?
#55: 
This work is initailly done by Zack Brown to add support for
             ^^^^^^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#93: FILE: fs/aio.c:1311:
+	BUG_ON(ret <= 0);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:MINMAX: min() should probably be min_t(size_t, iov->iov_len, ret)
#96: FILE: fs/aio.c:1314:
+		ssize_t this = min(iov->iov_len, (size_t)ret);

WARNING:LINE_SPACING: Missing a blank line after declarations
#97: FILE: fs/aio.c:1315:
+		ssize_t this = min(iov->iov_len, (size_t)ret);
+		iov->iov_base += this;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#108: FILE: fs/aio.c:1326:
+	 * the remaining iovecs */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#109: FILE: fs/aio.c:1327:
+	BUG_ON(ret > 0 && iocb->ki_left == 0);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kiocb *' should also have an identifier name
#117: FILE: fs/aio.c:1335:
+	ssize_t (*rw_op)(struct kiocb *, const struct iovec *,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct iovec *' should also have an identifier name
#117: FILE: fs/aio.c:1335:
+	ssize_t (*rw_op)(struct kiocb *, const struct iovec *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#117: FILE: fs/aio.c:1335:
+	ssize_t (*rw_op)(struct kiocb *, const struct iovec *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t' should also have an identifier name
#117: FILE: fs/aio.c:1335:
+	ssize_t (*rw_op)(struct kiocb *, const struct iovec *,

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#134: FILE: fs/aio.c:1352:
+	 * regular file. */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ret == 0'
#141: FILE: fs/aio.c:1359:
+	if ((ret == 0) || (iocb->ki_left == 0))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'iocb->ki_left == 0'
#141: FILE: fs/aio.c:1359:
+	if ((ret == 0) || (iocb->ki_left == 0))

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#242: FILE: fs/read_write.c:514:
+ssize_t rw_copy_check_uvector(const struct iovec __user * uvector,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#242: FILE: fs/read_write.c:514:
+ssize_t rw_copy_check_uvector(const struct iovec __user * uvector,
+			      unsigned long nr_segs, unsigned long fast_segs,
+			      struct iovec *fast_pointer,
+			      struct iovec **ret_pointer)
+  {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#246: FILE: fs/read_write.c:518:
+  {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#248: FILE: fs/read_write.c:520:
+  ^Issize_t ret;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#248: FILE: fs/read_write.c:520:
+  ^Issize_t ret;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#248: FILE: fs/read_write.c:520:
+  ^Issize_t ret;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#251: FILE: fs/read_write.c:523:
+  ^I/*$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#251: FILE: fs/read_write.c:523:
+  ^I/*$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#251: FILE: fs/read_write.c:523:
+  ^I/*$

ERROR:CODE_INDENT: code indent should use tabs where possible
#252: FILE: fs/read_write.c:524:
+  ^I * SuS says "The readv() function *may* fail if the iovcnt argument$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#252: FILE: fs/read_write.c:524:
+  ^I * SuS says "The readv() function *may* fail if the iovcnt argument$

ERROR:CODE_INDENT: code indent should use tabs where possible
#253: FILE: fs/read_write.c:525:
+  ^I * was less than or equal to 0, or greater than {IOV_MAX}.  Linux has$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#253: FILE: fs/read_write.c:525:
+  ^I * was less than or equal to 0, or greater than {IOV_MAX}.  Linux has$

ERROR:CODE_INDENT: code indent should use tabs where possible
#254: FILE: fs/read_write.c:526:
+  ^I * traditionally returned zero for zero segments, so...$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#254: FILE: fs/read_write.c:526:
+  ^I * traditionally returned zero for zero segments, so...$

ERROR:CODE_INDENT: code indent should use tabs where possible
#255: FILE: fs/read_write.c:527:
+  ^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#255: FILE: fs/read_write.c:527:
+  ^I */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#258: FILE: fs/read_write.c:530:
+  ^I^Igoto out;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#258: FILE: fs/read_write.c:530:
+  ^I^Igoto out;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#258: FILE: fs/read_write.c:530:
+  ^I^Igoto out;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#261: FILE: fs/read_write.c:533:
+  ^I/*$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#261: FILE: fs/read_write.c:533:
+  ^I/*$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#261: FILE: fs/read_write.c:533:
+  ^I/*$

ERROR:CODE_INDENT: code indent should use tabs where possible
#262: FILE: fs/read_write.c:534:
+  ^I * First get the "struct iovec" from user memory and$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#262: FILE: fs/read_write.c:534:
+  ^I * First get the "struct iovec" from user memory and$

ERROR:CODE_INDENT: code indent should use tabs where possible
#263: FILE: fs/read_write.c:535:
+  ^I * verify all the pointers$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#263: FILE: fs/read_write.c:535:
+  ^I * verify all the pointers$

ERROR:CODE_INDENT: code indent should use tabs where possible
#264: FILE: fs/read_write.c:536:
+  ^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#264: FILE: fs/read_write.c:536:
+  ^I */$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'nr_segs > UIO_MAXIOV'
#265: FILE: fs/read_write.c:537:
+	if ((nr_segs > UIO_MAXIOV) || (nr_segs <= 0)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'nr_segs <= 0'
#265: FILE: fs/read_write.c:537:
+	if ((nr_segs > UIO_MAXIOV) || (nr_segs <= 0)) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#267: FILE: fs/read_write.c:539:
+  ^I^Igoto out;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#267: FILE: fs/read_write.c:539:
+  ^I^Igoto out;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#267: FILE: fs/read_write.c:539:
+  ^I^Igoto out;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#270: FILE: fs/read_write.c:542:
+  ^I^Iiov = kmalloc(nr_segs*sizeof(struct iovec), GFP_KERNEL);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#270: FILE: fs/read_write.c:542:
+  ^I^Iiov = kmalloc(nr_segs*sizeof(struct iovec), GFP_KERNEL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#270: FILE: fs/read_write.c:542:
+  ^I^Iiov = kmalloc(nr_segs*sizeof(struct iovec), GFP_KERNEL);$

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#270: FILE: fs/read_write.c:542:
+  		iov = kmalloc(nr_segs*sizeof(struct iovec), GFP_KERNEL);
   		                     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#270: FILE: fs/read_write.c:542:
+  		iov = kmalloc(nr_segs*sizeof(struct iovec), GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!iov"
#271: FILE: fs/read_write.c:543:
+		if (iov == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:CODE_INDENT: code indent should use tabs where possible
#273: FILE: fs/read_write.c:545:
+  ^I^I^Igoto out;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#273: FILE: fs/read_write.c:545:
+  ^I^I^Igoto out;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#273: FILE: fs/read_write.c:545:
+  ^I^I^Igoto out;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#275: FILE: fs/read_write.c:547:
+  ^I}$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#275: FILE: fs/read_write.c:547:
+  ^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#275: FILE: fs/read_write.c:547:
+  ^I}$

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#276: FILE: fs/read_write.c:548:
+	if (copy_from_user(iov, uvector, nr_segs*sizeof(*uvector))) {
 	                                        ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#278: FILE: fs/read_write.c:550:
+  ^I^Igoto out;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#278: FILE: fs/read_write.c:550:
+  ^I^Igoto out;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#278: FILE: fs/read_write.c:550:
+  ^I^Igoto out;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#281: FILE: fs/read_write.c:553:
+  ^I/*$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#281: FILE: fs/read_write.c:553:
+  ^I/*$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#281: FILE: fs/read_write.c:553:
+  ^I/*$

ERROR:CODE_INDENT: code indent should use tabs where possible
#286: FILE: fs/read_write.c:558:
+  ^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#286: FILE: fs/read_write.c:558:
+  ^I */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#288: FILE: fs/read_write.c:560:
+  ^Ifor (seg = 0; seg < nr_segs; seg++) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#288: FILE: fs/read_write.c:560:
+  ^Ifor (seg = 0; seg < nr_segs; seg++) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#288: FILE: fs/read_write.c:560:
+  ^Ifor (seg = 0; seg < nr_segs; seg++) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#289: FILE: fs/read_write.c:561:
+  ^I^Ivoid __user *buf = iov[seg].iov_base;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#289: FILE: fs/read_write.c:561:
+  ^I^Ivoid __user *buf = iov[seg].iov_base;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#289: FILE: fs/read_write.c:561:
+  ^I^Ivoid __user *buf = iov[seg].iov_base;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#290: FILE: fs/read_write.c:562:
+  ^I^Issize_t len = (ssize_t)iov[seg].iov_len;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#290: FILE: fs/read_write.c:562:
+  ^I^Issize_t len = (ssize_t)iov[seg].iov_len;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#290: FILE: fs/read_write.c:562:
+  ^I^Issize_t len = (ssize_t)iov[seg].iov_len;$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#293: FILE: fs/read_write.c:565:
+		 * it's about to overflow ssize_t */

ERROR:CODE_INDENT: code indent should use tabs where possible
#296: FILE: fs/read_write.c:568:
+  ^I^I^Igoto out;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#296: FILE: fs/read_write.c:568:
+  ^I^I^Igoto out;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#296: FILE: fs/read_write.c:568:
+  ^I^I^Igoto out;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#300: FILE: fs/read_write.c:572:
+  ^I^I^Igoto out;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#300: FILE: fs/read_write.c:572:
+  ^I^I^Igoto out;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#300: FILE: fs/read_write.c:572:
+  ^I^I^Igoto out;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#304: FILE: fs/read_write.c:576:
+  ^I}$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#304: FILE: fs/read_write.c:576:
+  ^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#304: FILE: fs/read_write.c:576:
+  ^I}$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#356: FILE: fs/read_write.c:602:
+	ret = rw_copy_check_uvector(uvector, nr_segs, ARRAY_SIZE(iovstack),
+			iovstack, &iov);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#410: FILE: include/linux/fs.h:1051:
+ssize_t rw_copy_check_uvector(const struct iovec __user * uvector,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#411: FILE: include/linux/fs.h:1052:
+ssize_t rw_copy_check_uvector(const struct iovec __user * uvector,
+				unsigned long nr_segs, unsigned long fast_segs,

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000108825.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 27 errors, 55 warnings, 9 checks, 323 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000108825.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
