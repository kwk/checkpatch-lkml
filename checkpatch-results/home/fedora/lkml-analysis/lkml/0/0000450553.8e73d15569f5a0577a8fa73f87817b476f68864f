WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#40: 
diff -Naur -X dontdiff linux-2.4.14-gold/Documentation/Configure.help linux/Documentation/Configure.help

ERROR:TRAILING_WHITESPACE: trailing whitespace
#50: FILE: Documentation/Configure.help:18516:
+  to the console much earlier in the boot process than printk.  This $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#51: FILE: Documentation/Configure.help:18517:
+  is useful when debugging fatal problems early in the boot sequence $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#53: FILE: Documentation/Configure.help:18519:
+  $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#82: FILE: arch/i386/kernel/debug.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:LINE_SPACING: Please don't use multiple blank lines
#100: FILE: arch/i386/kernel/debug.c:19:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#102: FILE: arch/i386/kernel/debug.c:21:
+                                 Early printk$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#102: FILE: arch/i386/kernel/debug.c:21:
+/* --------------------------------------------------------------------------
+                                 Early printk

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#103: FILE: arch/i386/kernel/debug.c:22:
+   -------------------------------------------------------------------------- */

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#107: FILE: arch/i386/kernel/debug.c:26:
+int early_printk_disable = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#110: FILE: arch/i386/kernel/debug.c:29:
+#define vmem ((char *)(PAGE_OFFSET+0xb8000))
                                   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'row' - possible side-effects?
#115: FILE: arch/i386/kernel/debug.c:34:
+#define early_putc(c, row, line, color) \
+		{ vmem[2*(row)+(line)]=(c); vmem[2*(row)+(line)+1]=(color); }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'line' - possible side-effects?
#115: FILE: arch/i386/kernel/debug.c:34:
+#define early_putc(c, row, line, color) \
+		{ vmem[2*(row)+(line)]=(c); vmem[2*(row)+(line)+1]=(color); }

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#116: FILE: arch/i386/kernel/debug.c:35:
+		{ vmem[2*(row)+(line)]=(c); vmem[2*(row)+(line)+1]=(color); }
 		        ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#116: FILE: arch/i386/kernel/debug.c:35:
+		{ vmem[2*(row)+(line)]=(c); vmem[2*(row)+(line)+1]=(color); }
 		              ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#116: FILE: arch/i386/kernel/debug.c:35:
+		{ vmem[2*(row)+(line)]=(c); vmem[2*(row)+(line)+1]=(color); }
 		                      ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#116: FILE: arch/i386/kernel/debug.c:35:
+		{ vmem[2*(row)+(line)]=(c); vmem[2*(row)+(line)+1]=(color); }
 		                                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#116: FILE: arch/i386/kernel/debug.c:35:
+		{ vmem[2*(row)+(line)]=(c); vmem[2*(row)+(line)+1]=(color); }
 		                                        ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#116: FILE: arch/i386/kernel/debug.c:35:
+		{ vmem[2*(row)+(line)]=(c); vmem[2*(row)+(line)+1]=(color); }
 		                                               ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#116: FILE: arch/i386/kernel/debug.c:35:
+		{ vmem[2*(row)+(line)]=(c); vmem[2*(row)+(line)+1]=(color); }
 		                                                  ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#118: FILE: arch/i386/kernel/debug.c:37:
+void __early_printk(char * str)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#120: FILE: arch/i386/kernel/debug.c:39:
+	char num [16];

Whitespace before opening bracket '[' is prohibited.
There are some exceptions:

1. With a type on the left::

    int [] a;

2. At the beginning of a line for slice initialisers::

    [0...10] = 5,

3. Inside a curly brace::

    = { [0...10] = 5 }

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#122: FILE: arch/i386/kernel/debug.c:41:
+	static int x = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#123: FILE: arch/i386/kernel/debug.c:42:
+	static int y = 0;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#124: FILE: arch/i386/kernel/debug.c:43:
+	static int line = 0;

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#140: FILE: arch/i386/kernel/debug.c:59:
+			y += 2*NCOLS;
 			      ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#142: FILE: arch/i386/kernel/debug.c:61:
+			if (y >= NROWS*2*NCOLS)
 			              ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#142: FILE: arch/i386/kernel/debug.c:61:
+			if (y >= NROWS*2*NCOLS)
 			                ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#174: FILE: arch/i386/kernel/setup.c:949:
+#endif $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#192: FILE: arch/i386/kernel/setup.c:1042:
+#endif $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#200: FILE: include/asm-i386/debug.h:1:
+/*

CHECK:LINE_SPACING: Please don't use multiple blank lines
#209: FILE: include/asm-i386/debug.h:10:
+
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#211: FILE: include/asm-i386/debug.h:12:
+                                 Early printk$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#211: FILE: include/asm-i386/debug.h:12:
+/* --------------------------------------------------------------------------
+                                 Early printk

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#212: FILE: include/asm-i386/debug.h:13:
+   -------------------------------------------------------------------------- */

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#220: FILE: include/asm-i386/debug.h:21:
+extern void __early_printk(char * str);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#220: FILE: include/asm-i386/debug.h:21:
+extern void __early_printk(char * str);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#222: FILE: include/asm-i386/debug.h:23:
+static inline void early_printk(char * v, ...) $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#222: FILE: include/asm-i386/debug.h:23:
+static inline void early_printk(char * v, ...) 

WARNING:LINE_SPACING: Missing a blank line after declarations
#226: FILE: include/asm-i386/debug.h:27:
+		unsigned int len = sprintf(printk_buffer, v);
+		printk_buffer[len] = 0;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#229: FILE: include/asm-i386/debug.h:30:
+	printk(v);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#234: FILE: include/asm-i386/debug.h:35:
+#define early_printk(v...) do { printk(v); } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#234: FILE: include/asm-i386/debug.h:35:
+#define early_printk(v...) do { printk(v); } while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000450553.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 18 errors, 11 warnings, 14 checks, 174 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000450553.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
