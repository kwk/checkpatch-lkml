WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#36: 
diff -u --recursive --new-file linux-2.5.73-04-lookupintent/fs/affs/namei.c linux-2.5.73-05-createintent/fs/affs/namei.c

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#44: FILE: fs/affs/namei.c:259:
+affs_create(struct inode *dir, struct dentry *dentry, int mode, struct nameidata *nd)
                                                                                   ^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#56: FILE: fs/bfs/dir.c:81:
+static int bfs_create(struct inode * dir, struct dentry * dentry, int mode,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#56: FILE: fs/bfs/dir.c:81:
+static int bfs_create(struct inode * dir, struct dentry * dentry, int mode,

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#57: FILE: fs/bfs/dir.c:82:
+		struct nameidata *nd)
 		                  ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#57: FILE: fs/bfs/dir.c:82:
+static int bfs_create(struct inode * dir, struct dentry * dentry, int mode,
+		struct nameidata *nd)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#69: FILE: fs/cifs/cifsfs.h:49:
+extern int cifs_create(struct inode *, struct dentry *, int, struct nameidata *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#69: FILE: fs/cifs/cifsfs.h:49:
+extern int cifs_create(struct inode *, struct dentry *, int, struct nameidata *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#69: FILE: fs/cifs/cifsfs.h:49:
+extern int cifs_create(struct inode *, struct dentry *, int, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#69: FILE: fs/cifs/cifsfs.h:49:
+extern int cifs_create(struct inode *, struct dentry *, int, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nameidata *' should also have an identifier name
#69: FILE: fs/cifs/cifsfs.h:49:
+extern int cifs_create(struct inode *, struct dentry *, int, struct nameidata *);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#82: FILE: fs/cifs/dir.c:123:
+		struct nameidata *nd)
 		                  ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#82: FILE: fs/cifs/dir.c:123:
+cifs_create(struct inode *inode, struct dentry *direntry, int mode,
+		struct nameidata *nd)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#94: FILE: fs/coda/dir.c:31:
+static int coda_create(struct inode *dir, struct dentry *new, int mode, struct nameidata *nd);
                                                                                           ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#103: FILE: fs/coda/dir.c:193:
+static int coda_create(struct inode *dir, struct dentry *de, int mode, struct nameidata *nd)
                                                                                          ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#115: FILE: fs/ext2/namei.c:123:
+static int ext2_create (struct inode * dir, struct dentry * dentry, int mode, struct nameidata *nd)
                                                                                                 ^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#115: FILE: fs/ext2/namei.c:123:
+static int ext2_create (struct inode * dir, struct dentry * dentry, int mode, struct nameidata *nd)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#115: FILE: fs/ext2/namei.c:123:
+static int ext2_create (struct inode * dir, struct dentry * dentry, int mode, struct nameidata *nd)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#115: FILE: fs/ext2/namei.c:123:
+static int ext2_create (struct inode * dir, struct dentry * dentry, int mode, struct nameidata *nd)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#127: FILE: fs/ext3/namei.c:1626:
+static int ext3_create (struct inode * dir, struct dentry * dentry, int mode,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#127: FILE: fs/ext3/namei.c:1626:
+static int ext3_create (struct inode * dir, struct dentry * dentry, int mode,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#127: FILE: fs/ext3/namei.c:1626:
+static int ext3_create (struct inode * dir, struct dentry * dentry, int mode,

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#128: FILE: fs/ext3/namei.c:1627:
+		struct nameidata *nd)
 		                  ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#128: FILE: fs/ext3/namei.c:1627:
+static int ext3_create (struct inode * dir, struct dentry * dentry, int mode,
+		struct nameidata *nd)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#140: FILE: fs/hfs/dir.c:166:
+int hfs_create(struct inode * dir, struct dentry *dentry, int mode, struct nameidata *nd)
                                                                                       ^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#140: FILE: fs/hfs/dir.c:166:
+int hfs_create(struct inode * dir, struct dentry *dentry, int mode, struct nameidata *nd)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#161: FILE: fs/hfs/dir_dbl.c:275:
+		      int mode, struct nameidata *nd)
 		                                  ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#170: FILE: fs/hfs/dir_dbl.c:283:
+		error = hfs_create(dir, dentry, mode, nd);
 		                                      ^^

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#182: FILE: fs/hpfs/hpfs_fn.h:288:
+int hpfs_create(struct inode *, struct dentry *, int, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#182: FILE: fs/hpfs/hpfs_fn.h:288:
+int hpfs_create(struct inode *, struct dentry *, int, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#182: FILE: fs/hpfs/hpfs_fn.h:288:
+int hpfs_create(struct inode *, struct dentry *, int, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nameidata *' should also have an identifier name
#182: FILE: fs/hpfs/hpfs_fn.h:288:
+int hpfs_create(struct inode *, struct dentry *, int, struct nameidata *);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#194: FILE: fs/hpfs/namei.c:109:
+int hpfs_create(struct inode *dir, struct dentry *dentry, int mode, struct nameidata *nd)
                                                                                       ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#206: FILE: fs/hugetlbfs/inode.c:465:
+static int hugetlbfs_create(struct inode *dir, struct dentry *dentry, int mode, struct nameidata *nd)
                                                                                                   ^^

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#206: FILE: fs/hugetlbfs/inode.c:465:
+static int hugetlbfs_create(struct inode *dir, struct dentry *dentry, int mode, struct nameidata *nd)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#218: FILE: fs/intermezzo/dir.c:415:
+static int presto_create(struct inode * dir, struct dentry * dentry, int mode,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#218: FILE: fs/intermezzo/dir.c:415:
+static int presto_create(struct inode * dir, struct dentry * dentry, int mode,

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#219: FILE: fs/intermezzo/dir.c:416:
+                struct nameidata *nd)
                                   ^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#219: FILE: fs/intermezzo/dir.c:416:
+                struct nameidata *nd)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#219: FILE: fs/intermezzo/dir.c:416:
+static int presto_create(struct inode * dir, struct dentry * dentry, int mode,
+                struct nameidata *nd)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#219: FILE: fs/intermezzo/dir.c:416:
+                struct nameidata *nd)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#231: FILE: fs/intermezzo/vfs.c:601:
+        error = iops->create(dir->d_inode, dentry, mode, NULL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#231: FILE: fs/intermezzo/vfs.c:601:
+        error = iops->create(dir->d_inode, dentry, mode, NULL);$

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#244: FILE: fs/jffs/inode-v23.c:1277:
+		struct nameidata *nd)
 		                  ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#244: FILE: fs/jffs/inode-v23.c:1277:
+jffs_create(struct inode *dir, struct dentry *dentry, int mode,
+		struct nameidata *nd)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#256: FILE: fs/jffs2/dir.c:35:
+static int jffs2_create (struct inode *,struct dentry *,int, struct nameidata *);

ERROR:SPACING: space required after that ',' (ctx:OxV)
#256: FILE: fs/jffs2/dir.c:35:
+static int jffs2_create (struct inode *,struct dentry *,int, struct nameidata *);
                                        ^

ERROR:SPACING: space required after that ',' (ctx:OxV)
#256: FILE: fs/jffs2/dir.c:35:
+static int jffs2_create (struct inode *,struct dentry *,int, struct nameidata *);
                                                        ^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#266: FILE: fs/jffs2/dir.c:179:
+		struct nameidata *nd)
 		                  ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#266: FILE: fs/jffs2/dir.c:179:
+static int jffs2_create(struct inode *dir_i, struct dentry *dentry, int mode,
+		struct nameidata *nd)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#277: FILE: fs/jfs/namei.c:57:
+ *		nd- nd struct
   		    ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#284: FILE: fs/jfs/namei.c:63:
+		struct nameidata *nd)
 		                  ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#284: FILE: fs/jfs/namei.c:63:
+int jfs_create(struct inode *dip, struct dentry *dentry, int mode,
+		struct nameidata *nd)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#296: FILE: fs/minix/namei.c:92:
+static int minix_create(struct inode * dir, struct dentry *dentry, int mode,

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#297: FILE: fs/minix/namei.c:93:
+		struct nameidata *nd)
 		                  ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#297: FILE: fs/minix/namei.c:93:
+static int minix_create(struct inode * dir, struct dentry *dentry, int mode,
+		struct nameidata *nd)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#309: FILE: fs/msdos/namei.c:264:
+int msdos_create(struct inode *dir,struct dentry *dentry,int mode,
                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#309: FILE: fs/msdos/namei.c:264:
+int msdos_create(struct inode *dir,struct dentry *dentry,int mode,
                                                         ^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#310: FILE: fs/msdos/namei.c:265:
+		struct nameidata *nd)
 		                  ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#310: FILE: fs/msdos/namei.c:265:
+int msdos_create(struct inode *dir,struct dentry *dentry,int mode,
+		struct nameidata *nd)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#323: FILE: fs/namei.c:1109:
+		struct nameidata *nd)
 		                  ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#323: FILE: fs/namei.c:1109:
+int vfs_create(struct inode *dir, struct dentry *dentry, int mode,
+		struct nameidata *nd)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#332: FILE: fs/namei.c:1124:
+	error = dir->i_op->create(dir, dentry, mode, nd);
 	                                             ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#341: FILE: fs/namei.c:1281:
+		error = vfs_create(dir->d_inode, dentry, mode, nd);
 		                                               ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#350: FILE: fs/namei.c:1449:
+			error = vfs_create(nd.dentry->d_inode,dentry,mode,&nd);
 			                   ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#350: FILE: fs/namei.c:1449:
+			error = vfs_create(nd.dentry->d_inode,dentry,mode,&nd);
 			                                                   ^^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#350: FILE: fs/namei.c:1449:
+			error = vfs_create(nd.dentry->d_inode,dentry,mode,&nd);
 			                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#350: FILE: fs/namei.c:1449:
+			error = vfs_create(nd.dentry->d_inode,dentry,mode,&nd);
 			                                            ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#350: FILE: fs/namei.c:1449:
+			error = vfs_create(nd.dentry->d_inode,dentry,mode,&nd);
 			                                                 ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#350: FILE: fs/namei.c:1449:
+			error = vfs_create(nd.dentry->d_inode,dentry,mode,&nd);
 			                                                  ^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#372: FILE: fs/ncpfs/dir.c:946:
+		struct nameidata *nd)
 		                  ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#372: FILE: fs/ncpfs/dir.c:946:
+static int ncp_create(struct inode *dir, struct dentry *dentry, int mode,
+		struct nameidata *nd)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#394: FILE: fs/nfs/dir.c:791:
+		struct nameidata *nd)
 		                  ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#394: FILE: fs/nfs/dir.c:791:
+static int nfs_create(struct inode *dir, struct dentry *dentry, int mode,
+		struct nameidata *nd)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#427: FILE: fs/openpromfs/inode.c:62:
+static int openpromfs_create (struct inode *, struct dentry *, int, struct nameidata *);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#436: FILE: fs/openpromfs/inode.c:857:
+static int openpromfs_create (struct inode *dir, struct dentry *dentry, int mode,

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#437: FILE: fs/openpromfs/inode.c:858:
+		struct nameidata *nd)
 		                  ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#437: FILE: fs/openpromfs/inode.c:858:
+static int openpromfs_create (struct inode *dir, struct dentry *dentry, int mode,
+		struct nameidata *nd)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#450: FILE: fs/qnx4/namei.c:146:
+		struct nameidata *nd)
 		                  ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#462: FILE: fs/ramfs/inode.c:114:
+static int ramfs_create(struct inode *dir, struct dentry *dentry, int mode, struct nameidata *nd)
                                                                                               ^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#474: FILE: fs/reiserfs/namei.c:561:
+static int reiserfs_create (struct inode * dir, struct dentry *dentry, int mode,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#474: FILE: fs/reiserfs/namei.c:561:
+static int reiserfs_create (struct inode * dir, struct dentry *dentry, int mode,

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#475: FILE: fs/reiserfs/namei.c:562:
+		struct nameidata *nd)
 		                  ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#475: FILE: fs/reiserfs/namei.c:562:
+static int reiserfs_create (struct inode * dir, struct dentry *dentry, int mode,
+		struct nameidata *nd)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#497: FILE: fs/smbfs/dir.c:514:
+		struct nameidata *nd)
 		                  ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#497: FILE: fs/smbfs/dir.c:514:
+smb_create(struct inode *dir, struct dentry *dentry, int mode,
+		struct nameidata *nd)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#509: FILE: fs/sysv/namei.c:99:
+static int sysv_create(struct inode * dir, struct dentry * dentry, int mode, struct nameidata *nd)
                                                                                                ^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#509: FILE: fs/sysv/namei.c:99:
+static int sysv_create(struct inode * dir, struct dentry * dentry, int mode, struct nameidata *nd)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#509: FILE: fs/sysv/namei.c:99:
+static int sysv_create(struct inode * dir, struct dentry * dentry, int mode, struct nameidata *nd)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#521: FILE: fs/udf/namei.c:624:
+static int udf_create(struct inode *dir, struct dentry *dentry, int mode, struct nameidata *nd)
                                                                                             ^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#533: FILE: fs/ufs/namei.c:95:
+static int ufs_create (struct inode * dir, struct dentry * dentry, int mode,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#533: FILE: fs/ufs/namei.c:95:
+static int ufs_create (struct inode * dir, struct dentry * dentry, int mode,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#533: FILE: fs/ufs/namei.c:95:
+static int ufs_create (struct inode * dir, struct dentry * dentry, int mode,

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#534: FILE: fs/ufs/namei.c:96:
+		struct nameidata *nd)
 		                  ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#534: FILE: fs/ufs/namei.c:96:
+static int ufs_create (struct inode * dir, struct dentry * dentry, int mode,
+		struct nameidata *nd)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#558: FILE: fs/umsdos/namei.c:277:
+	ret = msdos_create (dir, fake, S_IFREG | 0777, NULL);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#567: FILE: fs/umsdos/namei.c:314:
+int UMSDOS_create (struct inode *dir, struct dentry *dentry, int mode, struct nameidata *nd)
                                                                                          ^^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#567: FILE: fs/umsdos/namei.c:314:
+int UMSDOS_create (struct inode *dir, struct dentry *dentry, int mode, struct nameidata *nd)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#579: FILE: fs/vfat/namei.c:915:
+int vfat_create(struct inode *dir,struct dentry* dentry,int mode,

ERROR:SPACING: space required after that ',' (ctx:VxV)
#579: FILE: fs/vfat/namei.c:915:
+int vfat_create(struct inode *dir,struct dentry* dentry,int mode,
                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#579: FILE: fs/vfat/namei.c:915:
+int vfat_create(struct inode *dir,struct dentry* dentry,int mode,
                                                        ^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#580: FILE: fs/vfat/namei.c:916:
+		struct nameidata *nd)
 		                  ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#593: FILE: fs/xfs/linux/xfs_iops.c:179:
+	struct nameidata *nd)
 	                  ^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#605: FILE: include/linux/affs_fs.h:46:
+extern int	affs_create(struct inode *dir, struct dentry *dentry, int mode, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nameidata *' should also have an identifier name
#605: FILE: include/linux/affs_fs.h:46:
+extern int	affs_create(struct inode *dir, struct dentry *dentry, int mode, struct nameidata *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#617: FILE: include/linux/fs.h:642:
+extern int vfs_create(struct inode *, struct dentry *, int, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#617: FILE: include/linux/fs.h:642:
+extern int vfs_create(struct inode *, struct dentry *, int, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#617: FILE: include/linux/fs.h:642:
+extern int vfs_create(struct inode *, struct dentry *, int, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#617: FILE: include/linux/fs.h:642:
+extern int vfs_create(struct inode *, struct dentry *, int, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nameidata *' should also have an identifier name
#617: FILE: include/linux/fs.h:642:
+extern int vfs_create(struct inode *, struct dentry *, int, struct nameidata *);

WARNING:SPACING: Unnecessary space before function pointer arguments
#626: FILE: include/linux/fs.h:733:
+	int (*create) (struct inode *,struct dentry *,int, struct nameidata *);

ERROR:SPACING: space required after that ',' (ctx:OxV)
#626: FILE: include/linux/fs.h:733:
+	int (*create) (struct inode *,struct dentry *,int, struct nameidata *);
 	                             ^

ERROR:SPACING: space required after that ',' (ctx:OxV)
#626: FILE: include/linux/fs.h:733:
+	int (*create) (struct inode *,struct dentry *,int, struct nameidata *);
 	                                             ^

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#626: FILE: include/linux/fs.h:733:
+	int (*create) (struct inode *,struct dentry *,int, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#626: FILE: include/linux/fs.h:733:
+	int (*create) (struct inode *,struct dentry *,int, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#626: FILE: include/linux/fs.h:733:
+	int (*create) (struct inode *,struct dentry *,int, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nameidata *' should also have an identifier name
#626: FILE: include/linux/fs.h:733:
+	int (*create) (struct inode *,struct dentry *,int, struct nameidata *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#638: FILE: include/linux/hfs_fs.h:237:
+extern int hfs_create(struct inode *, struct dentry *, int, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#638: FILE: include/linux/hfs_fs.h:237:
+extern int hfs_create(struct inode *, struct dentry *, int, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#638: FILE: include/linux/hfs_fs.h:237:
+extern int hfs_create(struct inode *, struct dentry *, int, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#638: FILE: include/linux/hfs_fs.h:237:
+extern int hfs_create(struct inode *, struct dentry *, int, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nameidata *' should also have an identifier name
#638: FILE: include/linux/hfs_fs.h:237:
+extern int hfs_create(struct inode *, struct dentry *, int, struct nameidata *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#650: FILE: include/linux/msdos_fs.h:311:
+extern int msdos_create(struct inode *dir, struct dentry *dentry, int mode, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nameidata *' should also have an identifier name
#650: FILE: include/linux/msdos_fs.h:311:
+extern int msdos_create(struct inode *dir, struct dentry *dentry, int mode, struct nameidata *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#659: FILE: include/linux/msdos_fs.h:321:
+extern int vfat_create(struct inode *dir, struct dentry *dentry, int mode, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nameidata *' should also have an identifier name
#659: FILE: include/linux/msdos_fs.h:321:
+extern int vfat_create(struct inode *dir, struct dentry *dentry, int mode, struct nameidata *);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#678: FILE: include/linux/qnx4_fs.h:126:
+extern int qnx4_create(struct inode *inode, struct dentry *dentry, int mode, struct nameidata *nd);
                                                                                                ^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#678: FILE: include/linux/qnx4_fs.h:126:
+extern int qnx4_create(struct inode *inode, struct dentry *dentry, int mode, struct nameidata *nd);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#691: FILE: mm/shmem.c:1401:
+		struct nameidata *nd)
 		                  ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#691: FILE: mm/shmem.c:1401:
+static int shmem_create(struct inode *dir, struct dentry *dentry, int mode,
+		struct nameidata *nd)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000358594.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 30 errors, 76 warnings, 24 checks, 480 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000358594.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
