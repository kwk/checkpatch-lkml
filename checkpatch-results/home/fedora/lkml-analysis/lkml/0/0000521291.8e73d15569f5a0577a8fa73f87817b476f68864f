WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#59: FILE: fs/badfs/inode.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#65: FILE: fs/badfs/inode.c:7:
+ *  ^IManfred Spraul <manfred@colorfullife.com>, for useful comments.$

ERROR:SPACING: space required after that ',' (ctx:OxV)
#84: FILE: fs/badfs/inode.c:26:
+static struct super_block *badfs_read_super(struct super_block *,void *,int);
                                                                 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:OxV)
#84: FILE: fs/badfs/inode.c:26:
+static struct super_block *badfs_read_super(struct super_block *,void *,int);
                                                                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#87: FILE: fs/badfs/inode.c:29:
+static DECLARE_FSTYPE(badfs_fs_type,"badfs",badfs_read_super,FS_FLAGS_BADFS);
                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#87: FILE: fs/badfs/inode.c:29:
+static DECLARE_FSTYPE(badfs_fs_type,"badfs",badfs_read_super,FS_FLAGS_BADFS);
                                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#87: FILE: fs/badfs/inode.c:29:
+static DECLARE_FSTYPE(badfs_fs_type,"badfs",badfs_read_super,FS_FLAGS_BADFS);
                                                             ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#129: FILE: fs/badfs/inode.c:71:
+static struct super_block *badfs_read_super(struct super_block * sb, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#129: FILE: fs/badfs/inode.c:71:
+static struct super_block *badfs_read_super(struct super_block * sb, 

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#130: FILE: fs/badfs/inode.c:72:
+static struct super_block *badfs_read_super(struct super_block * sb, 
+		void * data, int silent)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#130: FILE: fs/badfs/inode.c:72:
+		void * data, int silent)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#133: FILE: fs/badfs/inode.c:75:
+	struct inode * root = badfs_get_inode(sb, S_IFDIR|S_IRUSR|S_IWUSR);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#133: FILE: fs/badfs/inode.c:75:
+	struct inode * root = badfs_get_inode(sb, S_IFDIR|S_IRUSR|S_IWUSR);
 	                                                 ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#133: FILE: fs/badfs/inode.c:75:
+	struct inode * root = badfs_get_inode(sb, S_IFDIR|S_IRUSR|S_IWUSR);
 	                                                         ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR|S_IWUSR' are not preferred. Consider using octal permissions '0600'.
#133: FILE: fs/badfs/inode.c:75:
+	struct inode * root = badfs_get_inode(sb, S_IFDIR|S_IRUSR|S_IWUSR);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#141: FILE: fs/badfs/inode.c:83:
+^Ibadfs_root = sb->s_root = d_alloc(NULL, $

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#141: FILE: fs/badfs/inode.c:83:
+	badfs_root = sb->s_root = d_alloc(NULL, 

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#144: FILE: fs/badfs/inode.c:86:
+		iput(root);
 		^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#158: FILE: fs/badfs/inode.c:100:
+	inode = badfs_get_inode(badfs_sb, S_IFDIR|0755);
 	                                         ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#160: FILE: fs/badfs/inode.c:102:
+		printk(KERN_ERR "disable_pwd(): can't allocate inode\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'disable_pwd', this function's name, in a string
#160: FILE: fs/badfs/inode.c:102:
+		printk(KERN_ERR "disable_pwd(): can't allocate inode\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#165: FILE: fs/badfs/inode.c:107:
+		iput(inode);
 		^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#166: FILE: fs/badfs/inode.c:108:
+		printk(KERN_ERR "disable_pwd(): can't allocate dentry\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'disable_pwd', this function's name, in a string
#166: FILE: fs/badfs/inode.c:108:
+		printk(KERN_ERR "disable_pwd(): can't allocate dentry\n");

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#179: FILE: fs/badfs/inode.c:121:
+	inode = badfs_get_inode(badfs_sb, S_IFDIR|0755);
 	                                         ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#181: FILE: fs/badfs/inode.c:123:
+		printk(KERN_ERR "disable_root(): can't allocate inode\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'disable_root', this function's name, in a string
#181: FILE: fs/badfs/inode.c:123:
+		printk(KERN_ERR "disable_root(): can't allocate inode\n");

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#186: FILE: fs/badfs/inode.c:128:
+		iput(inode);
 		^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#187: FILE: fs/badfs/inode.c:129:
+		printk(KERN_ERR "disable_root(): can't allocate dentry\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'disable_root', this function's name, in a string
#187: FILE: fs/badfs/inode.c:129:
+		printk(KERN_ERR "disable_root(): can't allocate dentry\n");

WARNING:TYPO_SPELLING: 'mmaped' may be misspelled - perhaps 'mapped'?
#205: FILE: fs/badfs/inode.c:147:
+	 *   3. p->mm, i.e. mmaped files (we simply do_munmap them)
 	                    ^^^^^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#217: FILE: fs/badfs/inode.c:159:
+		if (!fs) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#220: FILE: fs/badfs/inode.c:162:
+		} else

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#271: FILE: fs/badfs/inode.c:213:
+						if (inode && (file->f_vfsmnt==mnt)) {

Indentation with 6 or more tabs usually indicate overly indented
code.

It is suggested to refactor excessive indentation of
if/else/for/do/while/switch statements.

See: https://lore.kernel.org/lkml/1328311239.21255.24.camel@joe2Laptop/

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#271: FILE: fs/badfs/inode.c:213:
+						if (inode && (file->f_vfsmnt==mnt)) {
 						                            ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'file->f_vfsmnt==mnt'
#271: FILE: fs/badfs/inode.c:213:
+						if (inode && (file->f_vfsmnt==mnt)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:TRAILING_WHITESPACE: trailing whitespace
#272: FILE: fs/badfs/inode.c:214:
+^I^I^I^I^I^I^Ifiles->fd[fd] = NULL;^I$

CHECK:BRACES: braces {} should be used on all arms of this statement
#301: FILE: fs/badfs/inode.c:243:
+		if (!mm) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#304: FILE: fs/badfs/inode.c:246:
+		} else

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#310: FILE: fs/badfs/inode.c:252:
+		for (vma = mm->mmap; vma; vma=vma->vm_next) {
 		                             ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#321: FILE: fs/badfs/inode.c:263:
+^I^I^I^Ido_munmap(mm, vma->vm_start, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#322: FILE: fs/badfs/inode.c:264:
+				do_munmap(mm, vma->vm_start, 
+					vma->vm_end - vma->vm_start);

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#340: FILE: fs/super.c:1112:
+	if (flags&MNT_FORCE)
 	         ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#354: FILE: include/linux/fs.h:1378:
+extern void quiesce_filesystem(struct vfsmount *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfsmount *' should also have an identifier name
#354: FILE: include/linux/fs.h:1378:
+extern void quiesce_filesystem(struct vfsmount *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000521291.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 14 errors, 17 warnings, 14 checks, 306 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000521291.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
