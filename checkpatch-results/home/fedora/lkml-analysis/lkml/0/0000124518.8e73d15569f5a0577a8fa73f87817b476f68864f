WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#38: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#43: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:CVS_KEYWORD: CVS style keyword markers, these will _not_ be updated
#78: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:36:
+ * $Id: ipath_verbs.c 4491 2005-12-15 22:20:31Z rjwalsh $

Since linux moved to git, the CVS markers are no longer used.
So, CVS style keywords ($Id$, $Revision$, $Log$) should not be
added.

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#90: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:48:
+#include <asm/uaccess.h>

CHECK:SPACING: No space is necessary after a cast
#104: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:62:
+	return (((int) a) - ((int) b)) << 8;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#111: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:69:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:STATIC_CONST_CHAR_ARRAY: const array should probably be static const
#113: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:71:
+const char ipath_verbs_version[] = "ipath_verbs " _IPATH_IDSTR;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#128: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:86:
+
+

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#279: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:237:
+static uint32_t number_of_devices;

CHECK:BRACES: braces {} should be used on all arms of this statement
#368: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:326:
+		if (ret < 0)
[...]
+		else if (ret > 0)
[...]
+		else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#372: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:330:
+		else {

WARNING:USE_NEGATIVE_ERRNO: return of an errno should typically be negative (ie: return -ESRCH)
#422: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:380:
+				return ESRCH;

WARNING:USE_NEGATIVE_ERRNO: return of an errno should typically be negative (ie: return -EEXIST)
#427: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:385:
+		return EEXIST;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mcast"
#453: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:411:
+	if (mcast == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mqp"
#456: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:414:
+	if (mqp == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!n"
#492: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:450:
+		if (n == NULL) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#554: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:512:
+		BUG_ON(len == 0);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sge->mr"
#564: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:522:
+		} else if (sge->length == 0 && sge->mr != NULL) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#592: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:550:
+		BUG_ON(len == 0);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sge->mr"
#601: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:559:
+		} else if (sge->length == 0 && sge->mr != NULL) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#703: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:661:
+	if (type == IB_QPT_SMI)
[...]
+	else if (type == IB_QPT_GSI)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#707: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:665:
+	else {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#710: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:668:
+		if (qpn == 0) {
+			return -ENOMEM;
+		}

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#828: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:786:
+	r = n = rkt->next;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rkt->table[r]"
#830: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:788:
+		if (rkt->table[r] == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mr"
#895: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:853:
+	if (unlikely(mr == NULL || mr->lkey != sge->lkey))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mr"
#961: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:919:
+	if (unlikely(mr == NULL || mr->lkey != rkey))

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#1003: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:961:
+	if (next != cq->tail)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1005: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:963:
+	else {

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1321: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:1279:
+	qp->s_cur = qp->s_tail = qp->s_head;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1367: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:1325:
+	qp->s_cur = qp->s_tail = qp->s_head;

CHECK:BRACES: braces {} should be used on all arms of this statement
#1402: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:1360:
+	if (attr_mask & IB_QP_STATE) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1406: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:1364:
+	} else

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1421: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:1379:
+
+	}

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1463: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:1421:
+		qp->s_retry = qp->s_retry_cnt = attr->retry_cnt;

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#1542: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:1500:
+				break;
+			else

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1550: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:1508:
+
+

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#1615: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:1573:
+	if (qp->s_hdrwords != 0) {
[...]
+			if (ipath_verbs_send(dev->ib_unit, qp->s_hdrwords,

CHECK:SPACING: No space is necessary after a cast
#1622: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:1580:
+					     (uint32_t *) &qp->s_hdr,

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1679: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:1637:
+		qp->s_psn = wqe->psn = qp->s_next_psn;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1683: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:1641:
+		qp->s_len = len = wqe->length;

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#1740: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:1698:
+		/* FALLTHROUGH */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

CHECK:BRACES: braces {} should be used on all arms of this statement
#1747: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:1705:
+		if (wqe->wr.opcode == IB_WR_SEND)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1749: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:1707:
+		else {

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#1761: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:1719:
+		/* FALLTHROUGH */

CHECK:BRACES: braces {} should be used on all arms of this statement
#1768: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:1726:
+		if (wqe->wr.opcode == IB_WR_RDMA_WRITE)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1770: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:1728:
+		else {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#1876: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:1834:
+	if (qp->s_hdrwords != 0) {
[...]
+			if (ipath_verbs_send(dev->ib_unit, qp->s_hdrwords,

CHECK:SPACING: No space is necessary after a cast
#1883: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:1841:
+					     (uint32_t *) &qp->s_hdr,

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#1931: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:1889:
+			/* FALLTHROUGH */

WARNING:INDENTED_LABEL: labels should not be indented
#1987: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:1945:
+	      send_req:

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2008: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:1966:
+				qp->s_psn = wqe->psn = qp->s_next_psn;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2019: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:1977:
+			qp->s_len = len = wqe->length;

CHECK:SPACING: No space is necessary after a cast
#2026: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:1984:
+				if (qp->s_lsn != (u32) -1 &&

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#2056: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:2014:
+				/* FALLTHROUGH */

CHECK:SPACING: No space is necessary after a cast
#2059: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:2017:
+				if (qp->s_lsn != (u32) -1 &&

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'wqe->wr.send_flags'
#2087: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:2045:
+					if (wqe->wr.
+					    send_flags & IB_SEND_SOLICITED)

A single dereferencing identifier spanned on multiple lines like::

  struct_identifier->member[index].
  member = <foo>;

is generally hard to follow. It can easily lead to typos and so makes
the code vulnerable to bugs.

If fixing the multiple line dereferencing leads to an 80 column
violation, then either rewrite the code in a more simple way or if the
starting part of the dereferencing identifier is the same and used at
multiple places then store it in a temporary variable, and use that
temporary variable only at all the places. For example, if there are
two dereferencing identifiers::

  member1->member2->member3.foo1;
  member1->member2->member3.foo2;

then store the member1->member2->member3 part in a temporary variable.
It not only helps to avoid the 80 column violation but also reduces
the program size by removing the unnecessary dereferences.

But if none of the above methods work then ignore the 80 column
violation because it is much easier to read a dereferencing identifier
on a single line.

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'dev->pending_index'
#2159: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:2117:
+					      &dev->pending[dev->
+							    pending_index]);

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#2170: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:2128:
+			/* FALLTHROUGH */

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#2173: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:2131:
+			/* FALLTHROUGH */

CHECK:BRACES: braces {} should be used on all arms of this statement
#2190: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:2148:
+			if (wqe->wr.opcode == IB_WR_SEND)
[...]
+			else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2192: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:2150:
+			else {

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#2212: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:2170:
+			/* FALLTHROUGH */

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#2215: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:2173:
+			/* FALLTHROUGH */

CHECK:BRACES: braces {} should be used on all arms of this statement
#2232: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:2190:
+			if (wqe->wr.opcode == IB_WR_RDMA_WRITE)
[...]
+			else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2234: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:2192:
+			else {

CHECK:SPACING: No space is necessary after a cast
#2391: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:2349:
+	if (ipath_verbs_send(dev->ib_unit, hwords, (uint32_t *) &qp->s_hdr,

CHECK:BRACES: braces {} should be used on all arms of this statement
#2523: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:2481:
+	if (qp->ibqp.qp_type == IB_QPT_UC) {
[...]
+	} else if ((unsigned) wr->opcode > IB_WR_ATOMIC_FETCH_AND_ADD)
[...]
+	else if (wr->opcode >= IB_WR_ATOMIC_CMP_AND_SWP &&
[...]

CHECK:SPACING: No space is necessary after a cast
#2524: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:2482:
+		if ((unsigned) wr->opcode >= IB_WR_RDMA_READ)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2524: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:2482:
+		if ((unsigned) wr->opcode >= IB_WR_RDMA_READ)

CHECK:SPACING: No space is necessary after a cast
#2526: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:2484:
+	} else if ((unsigned) wr->opcode > IB_WR_ATOMIC_FETCH_AND_ADD)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2526: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:2484:
+	} else if ((unsigned) wr->opcode > IB_WR_ATOMIC_FETCH_AND_ADD)

CHECK:SPACING: No space is necessary after a cast
#2581: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:2539:
+			do_uc_send((unsigned long) qp);

CHECK:SPACING: No space is necessary after a cast
#2583: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:2541:
+			do_rc_send((unsigned long) qp);

CHECK:BRACES: braces {} should be used on all arms of this statement
#2617: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:2575:
+	if (wr->num_sge > 1) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2622: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:2580:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#2690: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:2648:
+	if (wr->opcode == IB_WR_SEND_WITH_IMM) {
[...]
+	} else if (wr->opcode == IB_WR_SEND) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2698: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:2656:
+	} else

CHECK:SPACING: No space is necessary after a cast
#2724: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:2682:
+	if (ipath_verbs_send(dev->ib_unit, hwords, (uint32_t *) &qp->s_hdr,

WARNING:TYPO_SPELLING: 'incomming' may be misspelled - perhaps 'incoming'?
#2921: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:2879:
+ * This is called from ipath_qp_rcv() to process an incomming UD packet
                                                     ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:SPACING: No space is necessary after a cast
#2955: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:2913:
+		qkey = be32_to_cpu(((u32 *) data)[1]);

CHECK:SPACING: No space is necessary after a cast
#2956: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:2914:
+		src_qp = be32_to_cpu(((u32 *) data)[2]);

WARNING:TYPO_SPELLING: 'preceed' may be misspelled - perhaps 'precede'?
#2978: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:2936:
+	 * A GRH is expected to preceed the data even if not
 	                        ^^^^^^^

CHECK:SPACING: No space is necessary after a cast
#2987: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:2945:
+	opcode = *(u8 *) (&ohdr->bth[0]);

CHECK:BRACES: braces {} should be used on all arms of this statement
#2989: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:2947:
+		if (has_grh) {
[...]
+		} else
[...]

CHECK:SPACING: No space is necessary after a cast
#2990: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:2948:
+			wc.imm_data = *(u32 *) data;

CHECK:BRACES: Unbalanced braces around else statement
#2992: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:2950:
+		} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#3035: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:2993:
+	if (srq && srq->ibsrq.event_handler) {
[...]
+	} else
[...]

CHECK:BRACES: braces {} should be used on all arms of this statement
#3042: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3000:
+		if (n < srq->limit) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#3051: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3009:
+		} else

CHECK:BRACES: Unbalanced braces around else statement
#3053: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3011:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#3055: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3013:
+	if (has_grh) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#3058: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3016:
+	} else

WARNING:CONSTANT_CONVERSION: __constant_cpu_to_be32 should be cpu_to_be32
#3073: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3031:
+		       ohdr->bth[0] & __constant_cpu_to_be32(1 << 23));

Use of __constant_<foo> form is discouraged for the following functions::

  __constant_cpu_to_be[x]
  __constant_cpu_to_le[x]
  __constant_be[x]_to_cpu
  __constant_le[x]_to_cpu
  __constant_htons
  __constant_ntohs

Using any of these outside of include/uapi/ is not preferred as using the
function without __constant_ is identical when the argument is a
constant.

In big endian systems, the macros like __constant_cpu_to_be32(x) and
cpu_to_be32(x) expand to the same expression::

  #define __constant_cpu_to_be32(x) ((__force __be32)(__u32)(x))
  #define __cpu_to_be32(x)          ((__force __be32)(__u32)(x))

In little endian systems, the macros __constant_cpu_to_be32(x) and
cpu_to_be32(x) expand to __constant_swab32 and __swab32.  __swab32
has a __builtin_constant_p check::

  #define __swab32(x)				\
    (__builtin_constant_p((__u32)(x)) ?	\
    ___constant_swab32(x) :			\
    __fswab32(x))

So ultimately they have a special case for constants.
Similar is the case with all of the macros in the list.  Thus
using the __constant_... forms are unnecessarily verbose and
not preferred outside of include/uapi.

See: https://lore.kernel.org/lkml/1400106425.12666.6.camel@joe-AO725/

WARNING:TYPO_SPELLING: 'preceed' may be misspelled - perhaps 'precede'?
#3107: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3065:
+	 * A GRH is expected to preceed the data even if not
 	                        ^^^^^^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#3151: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3109:
+	if (srq && srq->ibsrq.event_handler) {
[...]
+	} else
[...]

CHECK:BRACES: braces {} should be used on all arms of this statement
#3158: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3116:
+		if (n < srq->limit) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#3167: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3125:
+		} else

CHECK:BRACES: Unbalanced braces around else statement
#3169: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3127:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#3172: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3130:
+	if (ah_attr->ah_flags & IB_AH_GRH) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#3175: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3133:
+	} else

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3183: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3141:
+		BUG_ON(len == 0);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sge->mr"
#3191: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3149:
+		} else if (sge->length == 0 && sge->mr != NULL) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#3266: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3224:
+	if (srq->ibsrq.event_handler) {
[...]
+	} else
[...]

CHECK:BRACES: braces {} should be used on all arms of this statement
#3274: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3232:
+		if (n < srq->limit) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#3281: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3239:
+		} else

CHECK:BRACES: Unbalanced braces around else statement
#3283: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3241:
+	} else

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000124518.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 0 errors, 32 warnings, 75 checks, 3244 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000124518.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
