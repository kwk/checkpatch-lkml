WARNING:TYPO_SPELLING: 'beeing' may be misspelled - perhaps 'being'?
#63: 
demonstrated by running the following command in a directory beeing
                                                             ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'beeing' may be misspelled - perhaps 'being'?
#79: 
because they generate fireworks of events when a file is beeing written.
                                                         ^^^^^^

WARNING:TYPO_SPELLING: 'recieved' may be misspelled - perhaps 'received'?
#81: 
-) GUI applications can hardly ever respond to all the events recieved
                                                              ^^^^^^^^

WARNING:TYPO_SPELLING: 'mulitple' may be misspelled - perhaps 'multiple'?
#154: 
mulitple references (via hardlinks). I think dnotify has the same
^^^^^^^^

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#195: 
#include <stdio.h>

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#196: 
#include <unistd.h>

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#197: 
#include <string.h>

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#198: 
#include <time.h>

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#199: 
#include <sys/types.h>

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#200: 
#include <sys/stat.h>

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#201: 
#include <fcntl.h>

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#202: 
#include <sys/ioctl.h>

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#203: 
#include <linux/nonotify.h> // don't forget to copy nonotify.h to /usr/include/linux !!

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#203: 
#include <linux/nonotify.h> // don't forget to copy nonotify.h to /usr/include/linux !!

WARNING:USE_RELATIVE_PATH: use relative pathname instead of absolute in changelog text
#261: 
--- /brenn/tmp/src/linux-2.6.8-0.rc1.2mdk/fs/attr.c	2004-08-16 02:54:45.000000000 +0200

WARNING:BRACES: braces {} are not necessary for single statement blocks
#276: FILE: usr/src/linux/fs/attr.c:189:
+		if (dn_mask) {
 			dnotify_parent(dentry, dn_mask);
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LONG_LINE_COMMENT: line length of 176 exceeds 100 columns
#290: FILE: usr/src/linux/fs/inode.c:170:
+		/* Nonotify: Initially set dcontents_mtime to the current time. Why? When the inode object gets lost and reallocated, "clients" should reread the directory.  */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:TRAILING_WHITESPACE: trailing whitespace
#291: FILE: usr/src/linux/fs/inode.c:171:
+^I^Iinode->i_dcontents_mtime = current_kernel_time(); $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'type == READ'
#333: FILE: usr/src/linux/fs/read_write.c:478:
+	if ((ret + (type == READ)) > 0) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#336: FILE: usr/src/linux/fs/read_write.c:481:
+		if (DN_MODIFY) nonotify_parent(file->f_dentry);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:LONG_LINE_COMMENT: line length of 166 exceeds 100 columns
#357: FILE: usr/src/linux/include/linux/fs.h:457:
+	struct timespec		i_dcontents_mtime;  /* Nonotify: Time of last modification of a file in this directory or time this inode object has been allocated */

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#375: FILE: usr/src/linux/include/linux/nonotify.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#377: FILE: usr/src/linux/include/linux/nonotify.h:3:
+ *   $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#379: FILE: usr/src/linux/include/linux/nonotify.h:5:
+ */     $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#388: FILE: usr/src/linux/include/linux/nonotify.h:14:
+// data structure for ioctl $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#408: FILE: usr/src/linux/fs/nonotify.c:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#410: FILE: usr/src/linux/fs/nonotify.c:3:
+ *   $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#417: FILE: usr/src/linux/fs/nonotify.c:10:
+ *  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#422: FILE: usr/src/linux/fs/nonotify.c:15:
+ */     $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#425: FILE: usr/src/linux/fs/nonotify.c:18:
+#include <linux/nonotify.h> $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#441: FILE: usr/src/linux/fs/nonotify.c:34:
+/* $

WARNING:LINE_SPACING: Missing a blank line after declarations
#449: FILE: usr/src/linux/fs/nonotify.c:42:
+	struct dentry *parent;
+	spin_lock(&dentry->d_lock);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#459: FILE: usr/src/linux/fs/nonotify.c:52:
+EXPORT_SYMBOL_GPL(nonotify_parent);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#462: FILE: usr/src/linux/fs/nonotify.c:55:
+/**
+*

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#466: FILE: usr/src/linux/fs/nonotify.c:59:
+int nonotify_stat_it(struct nonotify_stat * data) {

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#466: FILE: usr/src/linux/fs/nonotify.c:59:
+int nonotify_stat_it(struct nonotify_stat * data) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#467: FILE: usr/src/linux/fs/nonotify.c:60:
+^I^I$

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#467: FILE: usr/src/linux/fs/nonotify.c:60:
+int nonotify_stat_it(struct nonotify_stat * data) {
+		

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#472: FILE: usr/src/linux/fs/nonotify.c:65:
+	if (!error) {
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#473: FILE: usr/src/linux/fs/nonotify.c:66:
+^I^Iif (copy_to_user(&data->atime,&(stat.atime),sizeof(struct timespec))) $

ERROR:SPACING: space required after that ',' (ctx:VxO)
#473: FILE: usr/src/linux/fs/nonotify.c:66:
+		if (copy_to_user(&data->atime,&(stat.atime),sizeof(struct timespec))) 
 		                             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before that '&' (ctx:OxV)
#473: FILE: usr/src/linux/fs/nonotify.c:66:
+		if (copy_to_user(&data->atime,&(stat.atime),sizeof(struct timespec))) 
 		                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#473: FILE: usr/src/linux/fs/nonotify.c:66:
+		if (copy_to_user(&data->atime,&(stat.atime),sizeof(struct timespec))) 
 		                                           ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around stat.atime
#473: FILE: usr/src/linux/fs/nonotify.c:66:
+		if (copy_to_user(&data->atime,&(stat.atime),sizeof(struct timespec))) 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#475: FILE: usr/src/linux/fs/nonotify.c:68:
+^I^Iif (copy_to_user(&data->mtime,&(stat.mtime),sizeof(struct timespec))) $

ERROR:SPACING: space required after that ',' (ctx:VxO)
#475: FILE: usr/src/linux/fs/nonotify.c:68:
+		if (copy_to_user(&data->mtime,&(stat.mtime),sizeof(struct timespec))) 
 		                             ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#475: FILE: usr/src/linux/fs/nonotify.c:68:
+		if (copy_to_user(&data->mtime,&(stat.mtime),sizeof(struct timespec))) 
 		                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#475: FILE: usr/src/linux/fs/nonotify.c:68:
+		if (copy_to_user(&data->mtime,&(stat.mtime),sizeof(struct timespec))) 
 		                                           ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around stat.mtime
#475: FILE: usr/src/linux/fs/nonotify.c:68:
+		if (copy_to_user(&data->mtime,&(stat.mtime),sizeof(struct timespec))) 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#477: FILE: usr/src/linux/fs/nonotify.c:70:
+^I^Iif (copy_to_user(&data->ctime,&(stat.ctime),sizeof(struct timespec))) $

ERROR:SPACING: space required after that ',' (ctx:VxO)
#477: FILE: usr/src/linux/fs/nonotify.c:70:
+		if (copy_to_user(&data->ctime,&(stat.ctime),sizeof(struct timespec))) 
 		                             ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#477: FILE: usr/src/linux/fs/nonotify.c:70:
+		if (copy_to_user(&data->ctime,&(stat.ctime),sizeof(struct timespec))) 
 		                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#477: FILE: usr/src/linux/fs/nonotify.c:70:
+		if (copy_to_user(&data->ctime,&(stat.ctime),sizeof(struct timespec))) 
 		                                           ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around stat.ctime
#477: FILE: usr/src/linux/fs/nonotify.c:70:
+		if (copy_to_user(&data->ctime,&(stat.ctime),sizeof(struct timespec))) 

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#479: FILE: usr/src/linux/fs/nonotify.c:72:
+		if (copy_to_user(&data->contents_mtime,&(stat.contents_mtime),sizeof(struct timespec)))

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:SPACING: space required after that ',' (ctx:VxO)
#479: FILE: usr/src/linux/fs/nonotify.c:72:
+		if (copy_to_user(&data->contents_mtime,&(stat.contents_mtime),sizeof(struct timespec)))
 		                                      ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#479: FILE: usr/src/linux/fs/nonotify.c:72:
+		if (copy_to_user(&data->contents_mtime,&(stat.contents_mtime),sizeof(struct timespec)))
 		                                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#479: FILE: usr/src/linux/fs/nonotify.c:72:
+		if (copy_to_user(&data->contents_mtime,&(stat.contents_mtime),sizeof(struct timespec)))
 		                                                             ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around stat.contents_mtime
#479: FILE: usr/src/linux/fs/nonotify.c:72:
+		if (copy_to_user(&data->contents_mtime,&(stat.contents_mtime),sizeof(struct timespec)))

ERROR:CODE_INDENT: code indent should use tabs where possible
#480: FILE: usr/src/linux/fs/nonotify.c:73:
+ ^I^I^Ireturn -1;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#480: FILE: usr/src/linux/fs/nonotify.c:73:
+ ^I^I^Ireturn -1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#480: FILE: usr/src/linux/fs/nonotify.c:73:
+ ^I^I^Ireturn -1;$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#486: FILE: usr/src/linux/fs/nonotify.c:79:
+/**
+*

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#490: FILE: usr/src/linux/fs/nonotify.c:83:
+static int nonotify_ioctl(struct inode *ip, struct file *fp,
+		unsigned int cmd, unsigned long arg) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#491: FILE: usr/src/linux/fs/nonotify.c:84:
+static int nonotify_ioctl(struct inode *ip, struct file *fp,
+		unsigned int cmd, unsigned long arg) {

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#494: FILE: usr/src/linux/fs/nonotify.c:87:
+	if (_IOC_TYPE(cmd) != NONOTIFY_IOCTL_MAGIC) return -EINVAL;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#495: FILE: usr/src/linux/fs/nonotify.c:88:
+	if (_IOC_NR(cmd) > NONOTIFY_IOCTL_MAXNR) return -EINVAL;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#502: FILE: usr/src/linux/fs/nonotify.c:95:
+	if (err) {
+		return -EFAULT;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#509: FILE: usr/src/linux/fs/nonotify.c:102:
+	if (err) {
+		return -EFAULT;
+	}

ERROR:CODE_INDENT: code indent should use tabs where possible
#515: FILE: usr/src/linux/fs/nonotify.c:108:
+ ^Iswitch (cmd) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#515: FILE: usr/src/linux/fs/nonotify.c:108:
+ ^Iswitch (cmd) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#515: FILE: usr/src/linux/fs/nonotify.c:108:
+ ^Iswitch (cmd) {$

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#515: FILE: usr/src/linux/fs/nonotify.c:108:
+ 	switch (cmd) {
+		case NONOTIFY_STAT:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:SPACING: No space is necessary after a cast
#517: FILE: usr/src/linux/fs/nonotify.c:110:
+			err = nonotify_stat_it((struct nonotify_stat *) arg);

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#524: FILE: usr/src/linux/fs/nonotify.c:117:
+/*
+*

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#528: FILE: usr/src/linux/fs/nonotify.c:121:
+static int nonotify_open(struct inode *inode, struct file *file) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#529: FILE: usr/src/linux/fs/nonotify.c:122:
+static int nonotify_open(struct inode *inode, struct file *file) {
+

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#530: FILE: usr/src/linux/fs/nonotify.c:123:
+ printk(KERN_ALERT "nonotify device opened\n");$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#530: FILE: usr/src/linux/fs/nonotify.c:123:
+ printk(KERN_ALERT "nonotify device opened\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#532: FILE: usr/src/linux/fs/nonotify.c:125:
+ return 0;$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#536: FILE: usr/src/linux/fs/nonotify.c:129:
+/*
+*

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#542: FILE: usr/src/linux/fs/nonotify.c:135:
+{
+

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#543: FILE: usr/src/linux/fs/nonotify.c:136:
+ printk(KERN_ALERT "inotify device released\n");$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#543: FILE: usr/src/linux/fs/nonotify.c:136:
+ printk(KERN_ALERT "inotify device released\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#545: FILE: usr/src/linux/fs/nonotify.c:138:
+ return 0;$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#549: FILE: usr/src/linux/fs/nonotify.c:142:
+/**
+*

WARNING:CONST_STRUCT: struct file_operations should normally be const
#553: FILE: usr/src/linux/fs/nonotify.c:146:
+static struct file_operations nonotify_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#554: FILE: usr/src/linux/fs/nonotify.c:147:
+ .owner  = THIS_MODULE,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#555: FILE: usr/src/linux/fs/nonotify.c:148:
+ .open  = nonotify_open,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#556: FILE: usr/src/linux/fs/nonotify.c:149:
+ .release = nonotify_release,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#557: FILE: usr/src/linux/fs/nonotify.c:150:
+ .ioctl  = nonotify_ioctl,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#561: FILE: usr/src/linux/fs/nonotify.c:154:
+ .minor  = MISC_DYNAMIC_MINOR, // auto$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#562: FILE: usr/src/linux/fs/nonotify.c:155:
+ .name = "nonotify",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#563: FILE: usr/src/linux/fs/nonotify.c:156:
+ .fops = &nonotify_fops,$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#567: FILE: usr/src/linux/fs/nonotify.c:160:
+/**
+*

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#571: FILE: usr/src/linux/fs/nonotify.c:164:
+static int __init nonotify_init (void)

WARNING:LINE_SPACING: Missing a blank line after declarations
#574: FILE: usr/src/linux/fs/nonotify.c:167:
+	int ret;
+	ret = misc_register(&nonotify_device);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#575: FILE: usr/src/linux/fs/nonotify.c:168:
+	if (ret) {
+		goto out;
+	}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#578: FILE: usr/src/linux/fs/nonotify.c:171:
+	printk(KERN_ALERT "nonotify 0.3.2 minor=%d\n", nonotify_device.minor);

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#584: FILE: usr/src/linux/fs/nonotify.c:177:
+/**
+*

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#588: FILE: usr/src/linux/fs/nonotify.c:181:
+static void nonotify_exit (void)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#590: FILE: usr/src/linux/fs/nonotify.c:183:
+ printk(KERN_ALERT "nonotify shutdown\n");$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#590: FILE: usr/src/linux/fs/nonotify.c:183:
+ printk(KERN_ALERT "nonotify shutdown\n");

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#594: FILE: usr/src/linux/fs/nonotify.c:187:
+/**
+*

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#602: FILE: usr/src/linux/fs/nonotify.c:195:
+module_init (nonotify_init);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#603: FILE: usr/src/linux/fs/nonotify.c:196:
+module_exit (nonotify_exit);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000258085.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 35 errors, 60 warnings, 11 checks, 314 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000258085.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
