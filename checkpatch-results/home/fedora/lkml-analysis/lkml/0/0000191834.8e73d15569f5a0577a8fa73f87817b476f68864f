WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#35: 
Here is an attempt to provide multiple handlers feature as an addon patch over

CHECK:LINE_SPACING: Please don't use multiple blank lines
#105: FILE: kernel/kprobes.c:123:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#134: FILE: kernel/kprobes.c:152:
+void comm_post_handler(struct kprobe *p, struct pt_regs *regs,
+						unsigned long flags)

WARNING:RETURN_VOID: void function return statements are not generally useful
#151: FILE: kernel/kprobes.c:169:
+	return;
+}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!temp"
#196: FILE: kernel/kprobes.c:214:
+	if (temp == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*ap)...) over kmalloc(sizeof(struct active_probe)...)
#197: FILE: kernel/kprobes.c:215:
+		ap = kmalloc(sizeof(struct active_probe), GFP_ATOMIC);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#208: FILE: kernel/kprobes.c:226:
+		if ((ret = register_kprobe(&ap->comm_probe)) != 0) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:TYPO_SPELLING: 'registerd' may be misspelled - perhaps 'registered'?
#233: FILE: kernel/kprobes.c:251:
+ * registerd, it just deletes the multiprobe structure from the list.
    ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'temp == NULL'
#246: FILE: kernel/kprobes.c:264:
+	if ((temp == NULL) || (temp->pre_handler != comm_pre_handler)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'temp->pre_handler != comm_pre_handler'
#246: FILE: kernel/kprobes.c:264:
+	if ((temp == NULL) || (temp->pre_handler != comm_pre_handler)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!temp"
#246: FILE: kernel/kprobes.c:264:
+	if ((temp == NULL) || (temp->pre_handler != comm_pre_handler)) {

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#271: FILE: kernel/kprobes.c:321:
+EXPORT_SYMBOL_GPL(unregister_multiprobe);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#315: FILE: include/linux/kprobes.h:157:
 }
+static inline int register_multiprobe(struct multiprobe *p)

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#317: FILE: include/linux/kprobes.h:159:
+	return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#319: FILE: include/linux/kprobes.h:161:
+}
+static inline int unregister_multiprobe(struct multiprobe *p)

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#321: FILE: include/linux/kprobes.h:163:
+	return -ENOSYS;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000191834.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 6 warnings, 9 checks, 232 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000191834.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
