WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#33: 
(The latter half is likely irrelevant, and came from chasing a different bug)

WARNING:INCLUDE_LINUX: Use #include <linux/bug.h> instead of <asm/bug.h>
#53: FILE: include/linux/list.h:10:
+#include <asm/bug.h>

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#62: FILE: include/linux/list.h:56:
+		printk("List corruption. next->prev should be %p, but was %p\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#63: FILE: include/linux/list.h:57:
+		printk("List corruption. next->prev should be %p, but was %p\n",
+				prev, next->prev);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#64: FILE: include/linux/list.h:58:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#67: FILE: include/linux/list.h:61:
+		printk("List corruption. prev->next should be %p, but was %p\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#68: FILE: include/linux/list.h:62:
+		printk("List corruption. prev->next should be %p, but was %p\n",
+				next, prev->next);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#69: FILE: include/linux/list.h:63:
+		BUG();

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#79: FILE: include/linux/list.h:166:
+		printk("List corruption. prev->next should be %p, but was %p\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#80: FILE: include/linux/list.h:167:
+		printk("List corruption. prev->next should be %p, but was %p\n",
+				entry, entry->prev->next);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#81: FILE: include/linux/list.h:168:
+		BUG();

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#84: FILE: include/linux/list.h:171:
+		printk("List corruption. next->prev should be %p, but was %p\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#85: FILE: include/linux/list.h:172:
+		printk("List corruption. next->prev should be %p, but was %p\n",
+				entry, entry->next->prev);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#86: FILE: include/linux/list.h:173:
+		BUG();

ERROR:SPACING: space required after that ',' (ctx:VxO)
#118: FILE: fs/select.c:69:
+	if (remove_wait_queue(entry->wait_address,&entry->wait) < 0)
 	                                         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before that '&' (ctx:OxV)
#118: FILE: fs/select.c:69:
+	if (remove_wait_queue(entry->wait_address,&entry->wait) < 0)
 	                                          ^

CHECK:SPACING: No space is necessary after a cast
#119: FILE: fs/select.c:70:
+		print_symbol("bad poll-entry for %s", (unsigned long) entry->filp->f_op->poll);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#132: FILE: include/linux/wait.h:118:
+extern int FASTCALL(remove_wait_queue(wait_queue_head_t *q, wait_queue_t * wait));

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#132: FILE: include/linux/wait.h:118:
+extern int FASTCALL(remove_wait_queue(wait_queue_head_t *q, wait_queue_t * wait));

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:LINE_SPACING: Missing a blank line after declarations
#159: FILE: kernel/wait.c:49:
+		struct list_head *next;
+		if (list == &wait->task_list)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000057283.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 3 errors, 11 warnings, 6 checks, 102 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000057283.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
