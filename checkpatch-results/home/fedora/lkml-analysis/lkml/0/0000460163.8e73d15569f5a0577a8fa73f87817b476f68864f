WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#31: 
Nuke /proc/ide. For explanations why, please see the frustrated comments in the

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#118: FILE: drivers/ide/amd74xx.c:97:
+#if 0 && defined(CONFIG_PROC_FS)

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#127: FILE: drivers/ide/amd74xx.c:387:
+#if 0 && defined(CONFIG_PROC_FS)

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#918: FILE: drivers/ide/piix.c:113:
+#if 0 && defined(CONFIG_PROC_FS)

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#927: FILE: drivers/ide/piix.c:523:
+#if 0 && defined(CONFIG_PROC_FS)

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#942: FILE: drivers/ide/serverworks.c:99:
+static u8 svwks_revision = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#973: FILE: drivers/ide/via82cxxx.c:139:
+#if 0 && defined(CONFIG_PROC_FS)

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#982: FILE: drivers/ide/via82cxxx.c:500:
+#if 0 && defined(CONFIG_PROC_FS)

WARNING:TYPO_SPELLING: 'entires' may be misspelled - perhaps 'entries'?
#1006: FILE: include/linux/ide.h:382:
+	struct ide_settings_s *settings;    /* ioctl entires */
 	                                             ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1051: FILE: include/linux/ide.h:614:
+#define PROC_IDE_READ_RETURN(page,start,off,count,eof,len) return 0;
                                  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1051: FILE: include/linux/ide.h:614:
+#define PROC_IDE_READ_RETURN(page,start,off,count,eof,len) return 0;
                                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1051: FILE: include/linux/ide.h:614:
+#define PROC_IDE_READ_RETURN(page,start,off,count,eof,len) return 0;
                                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1051: FILE: include/linux/ide.h:614:
+#define PROC_IDE_READ_RETURN(page,start,off,count,eof,len) return 0;
                                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1051: FILE: include/linux/ide.h:614:
+#define PROC_IDE_READ_RETURN(page,start,off,count,eof,len) return 0;
                                                      ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#1051: FILE: include/linux/ide.h:614:
+#define PROC_IDE_READ_RETURN(page,start,off,count,eof,len) return 0;

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#1051: FILE: include/linux/ide.h:614:
+#define PROC_IDE_READ_RETURN(page,start,off,count,eof,len) return 0;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#1051: FILE: include/linux/ide.h:614:
+#define PROC_IDE_READ_RETURN(page,start,off,count,eof,len) return 0;

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000460163.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 7 errors, 10 warnings, 0 checks, 425 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000460163.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
