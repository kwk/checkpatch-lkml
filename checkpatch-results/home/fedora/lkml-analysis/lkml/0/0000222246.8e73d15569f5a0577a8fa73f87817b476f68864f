WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#28: 
This new version reduces the number of changes required by users of the agpgart

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#47: 
# This is a BitKeeper generated diff -Nru style patch.

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#48: 
#

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#49: 
#   Allow multiple backends to be initialized

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#50: 
#

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#52: 
--- a/drivers/char/agp/agp.h	2004-12-17 10:36:04 -08:00

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#132: FILE: drivers/char/agp/backend.c:71:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#149: FILE: drivers/char/agp/backend.c:90:
 {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#200: FILE: drivers/char/agp/backend.c:249:
+        kfree(bridge);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#200: FILE: drivers/char/agp/backend.c:249:
+        kfree(bridge);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#202: FILE: drivers/char/agp/backend.c:251:
+        if (list_empty(&agp_bridges))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#202: FILE: drivers/char/agp/backend.c:251:
+        if (list_empty(&agp_bridges))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#203: FILE: drivers/char/agp/backend.c:252:
+                agp_bridge = NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#203: FILE: drivers/char/agp/backend.c:252:
+                agp_bridge = NULL;$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#240: FILE: drivers/char/agp/backend.c:284:
+			printk (KERN_INFO PFX "agp_frontend_initialize() failed.\n");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#240: FILE: drivers/char/agp/backend.c:284:
+			printk (KERN_INFO PFX "agp_frontend_initialize() failed.\n");

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#249: FILE: drivers/char/agp/backend.c:291:
+		printk(KERN_INFO PFX "AGP aperture is %dM @ 0x%lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#250: FILE: drivers/char/agp/backend.c:292:
+		printk(KERN_INFO PFX "AGP aperture is %dM @ 0x%lx\n",
+			bridge->driver->fetch_size(), bridge->gart_bus_addr);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#252: FILE: drivers/char/agp/backend.c:294:
+
+	}

ERROR:SPACING: space required before the open parenthesis '('
#366: FILE: drivers/char/agp/frontend.c:791:
+	if(!agp_bridge)

ERROR:CODE_INDENT: code indent should use tabs where possible
#369: FILE: drivers/char/agp/frontend.c:794:
+        if (atomic_read(&agp_bridge->agp_in_use))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#369: FILE: drivers/char/agp/frontend.c:794:
+        if (atomic_read(&agp_bridge->agp_in_use))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#370: FILE: drivers/char/agp/frontend.c:795:
+                return -EBUSY;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#370: FILE: drivers/char/agp/frontend.c:795:
+                return -EBUSY;$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!curr"
#411: FILE: drivers/char/agp/generic.c:120:
+	if (curr == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!curr"
#515: FILE: drivers/char/agp/generic.c:326:
+	if (curr == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!curr"
#537: FILE: drivers/char/agp/generic.c:361:
+	if (curr == NULL)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#565: FILE: drivers/char/agp/generic.c:960:
+/* When we remove the global variable agp_bridge from all drivers $

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pci_dev *' should also have an identifier name
#615: FILE: include/linux/agp_backend.h:96:
+extern struct agp_bridge_data *(*agp_find_bridge)(struct pci_dev *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#620: FILE: include/linux/agp_backend.h:99:
+extern struct agp_memory *agp_allocate_memory(struct agp_bridge_data *, size_t, u32);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct agp_bridge_data *' should also have an identifier name
#620: FILE: include/linux/agp_backend.h:99:
+extern struct agp_memory *agp_allocate_memory(struct agp_bridge_data *, size_t, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#620: FILE: include/linux/agp_backend.h:99:
+extern struct agp_memory *agp_allocate_memory(struct agp_bridge_data *, size_t, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#620: FILE: include/linux/agp_backend.h:99:
+extern struct agp_memory *agp_allocate_memory(struct agp_bridge_data *, size_t, u32);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#621: FILE: include/linux/agp_backend.h:100:
+extern int agp_copy_info(struct agp_bridge_data *, struct agp_kern_info *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct agp_bridge_data *' should also have an identifier name
#621: FILE: include/linux/agp_backend.h:100:
+extern int agp_copy_info(struct agp_bridge_data *, struct agp_kern_info *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct agp_kern_info *' should also have an identifier name
#621: FILE: include/linux/agp_backend.h:100:
+extern int agp_copy_info(struct agp_bridge_data *, struct agp_kern_info *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#627: FILE: include/linux/agp_backend.h:103:
+extern void agp_enable(struct agp_bridge_data *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct agp_bridge_data *' should also have an identifier name
#627: FILE: include/linux/agp_backend.h:103:
+extern void agp_enable(struct agp_bridge_data *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#627: FILE: include/linux/agp_backend.h:103:
+extern void agp_enable(struct agp_bridge_data *, u32);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#628: FILE: include/linux/agp_backend.h:104:
+extern struct agp_bridge_data *agp_backend_acquire(struct pci_dev *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pci_dev *' should also have an identifier name
#628: FILE: include/linux/agp_backend.h:104:
+extern struct agp_bridge_data *agp_backend_acquire(struct pci_dev *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#629: FILE: include/linux/agp_backend.h:105:
+extern void agp_backend_release(struct agp_bridge_data *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct agp_bridge_data *' should also have an identifier name
#629: FILE: include/linux/agp_backend.h:105:
+extern void agp_backend_release(struct agp_bridge_data *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct agp_bridge_data *' should also have an identifier name
#638: FILE: include/linux/agp_backend.h:114:
+	struct agp_memory *	(*allocate_memory)(struct agp_bridge_data *, size_t, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#638: FILE: include/linux/agp_backend.h:114:
+	struct agp_memory *	(*allocate_memory)(struct agp_bridge_data *, size_t, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#638: FILE: include/linux/agp_backend.h:114:
+	struct agp_memory *	(*allocate_memory)(struct agp_bridge_data *, size_t, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct agp_bridge_data *' should also have an identifier name
#645: FILE: include/linux/agp_backend.h:117:
+	void			(*enable)(struct agp_bridge_data *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#645: FILE: include/linux/agp_backend.h:117:
+	void			(*enable)(struct agp_bridge_data *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pci_dev *' should also have an identifier name
#646: FILE: include/linux/agp_backend.h:118:
+	struct agp_bridge_data *(*acquire)(struct pci_dev *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct agp_bridge_data *' should also have an identifier name
#647: FILE: include/linux/agp_backend.h:119:
+	void			(*release)(struct agp_bridge_data *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct agp_bridge_data *' should also have an identifier name
#648: FILE: include/linux/agp_backend.h:120:
+	int			(*copy_info)(struct agp_bridge_data *, struct agp_kern_info *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct agp_kern_info *' should also have an identifier name
#648: FILE: include/linux/agp_backend.h:120:
+	int			(*copy_info)(struct agp_bridge_data *, struct agp_kern_info *);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000222246.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 9 errors, 32 warnings, 11 checks, 550 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000222246.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
