WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#34: 
                                                                               

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#64: 
--- a/Documentation/rttReleaseNotes	1970-01-01 03:00:00.000000000 +0300

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#76: FILE: Documentation/rttReleaseNotes:10:
+technology enhancements to further reduce interrupt latency $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#83: FILE: Documentation/rttReleaseNotes:17:
+kernel project to: ext-rt-dev@mvista.com $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#88: FILE: Documentation/rttReleaseNotes:22:
+The kernel is available via rsync at source.mvista.com::LinuxRT $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#93: FILE: Documentation/rttReleaseNotes:27:
+- IRQ Handlers executing in process context $

WARNING:TYPO_SPELLING: 'Interiting' may be misspelled - perhaps 'Inheriting'?
#94: FILE: Documentation/rttReleaseNotes:28:
+- Priority Interiting Kernel Mutex substituting spinlocks in critical regions.
            ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#103: FILE: Documentation/rttReleaseNotes:37:
+This kernel is a research kernel, and as such, is known to be unstable at $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#104: FILE: Documentation/rttReleaseNotes:38:
+this time. Do not use this kernel on a production system or a system that $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#113: FILE: Documentation/rttReleaseNotes:47:
+Based on Linux 2.6.7 from kernel.org. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#116: FILE: Documentation/rttReleaseNotes:50:
+The kernel is fairly stable, failing under high loads $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#117: FILE: Documentation/rttReleaseNotes:51:
+in low memory conditions. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#148: FILE: Documentation/rttReleaseNotes:82:
+  - at wake-up time blocked threads must verify that they are the owner $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#236: FILE: Documentation/rttReleaseNotes:170:
+contributed by Ingo Molnar, Scott Wood, and the Universitaet $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#247: FILE: Documentation/rttReleaseNotes:181:
+ $

WARNING:TYPO_SPELLING: 'Exisiting' may be misspelled - perhaps 'Existing'?
#259: FILE: Documentation/rttReleaseNotes:193:
+  Exisiting Implementations
   ^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#272: FILE: Documentation/rttReleaseNotes:206:
+    that thread must not be activated as a result of the same IRQ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#291: FILE: Documentation/rttReleaseNotes:225:
+  determine which one of the implementations has the best characteristics $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#301: FILE: Documentation/rttReleaseNotes:235:
+  - Simple header declarations / minimal include files in order to reduce $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#304: FILE: Documentation/rttReleaseNotes:238:
+  - A thread blocked on a mutex must only be woken up if it has acquired $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#305: FILE: Documentation/rttReleaseNotes:239:
+    ownership of the mutex. If the thread is woken while blocked on a mutex, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#306: FILE: Documentation/rttReleaseNotes:240:
+    it is up to the robustness of the mutex to prevent the thread from $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#328: FILE: Documentation/rttReleaseNotes:262:
+                o trap locking mutex in IRQ context $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#351: FILE: Documentation/rttReleaseNotes:285:
+  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#352: FILE: Documentation/rttReleaseNotes:286:
+  $

WARNING:TYPO_SPELLING: 'subtituting' may be misspelled - perhaps 'substituting'?
#358: FILE: Documentation/rttReleaseNotes:292:
+  to running the kernel with mutexes subtituting for spinlocks.
                                      ^^^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#362: FILE: Documentation/rttReleaseNotes:296:
+  Interrupts in threads eliminate the need for locking interrupts in $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#363: FILE: Documentation/rttReleaseNotes:297:
+  spinlock-protected regions. The spinlock_irq{save}/_irqrestore functions $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#367: FILE: Documentation/rttReleaseNotes:301:
+  mutexes, because blocking on a mutex in interrupt context is not a defined $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#368: FILE: Documentation/rttReleaseNotes:302:
+  operation in the Linux kernel.  If a hardware IRQ handler attempts to lock $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#376: FILE: Documentation/rttReleaseNotes:310:
+  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#377: FILE: Documentation/rttReleaseNotes:311:
+^I $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#383: FILE: Documentation/rttReleaseNotes:317:
+    and proper recovery action must prevent the thread from running $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#397: FILE: Documentation/rttReleaseNotes:331:
+We have enabled most of the configuration options to get broad coverage $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#398: FILE: Documentation/rttReleaseNotes:332:
+when compiling (and even running the code). $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#399: FILE: Documentation/rttReleaseNotes:333:
+We suggest that you test and build a known good configuration for $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#409: FILE: Documentation/rttReleaseNotes:343:
+a mutex abstraction that uses the P-mutex from the Bundeswehr $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#414: FILE: Documentation/rttReleaseNotes:348:
+The old spinlock definitions have been temporarily moved into a $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#415: FILE: Documentation/rttReleaseNotes:349:
+file called old_spinlock.h, and a new spinlock.h file invokes $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#425: FILE: Documentation/rttReleaseNotes:359:
+A partitioning between critical sections protected by spinlocks $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#434: FILE: Documentation/rttReleaseNotes:368:
+interactive tasks on UP only by grace of the interactive scheduler. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#442: FILE: Documentation/rttReleaseNotes:376:
+sections inside of spinlock-protected critical sections. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#443: FILE: Documentation/rttReleaseNotes:377:
+Only a minimal set (teens) of the spinlocks will remain. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#444: FILE: Documentation/rttReleaseNotes:378:
+This set will be composed of spinlocks necessary to protect $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#445: FILE: Documentation/rttReleaseNotes:379:
+immediate hardware, as well as minimal critical sections that $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#449: FILE: Documentation/rttReleaseNotes:383:
+the aggregate or worst-case IRQ-disable plus longest possible $

WARNING:TYPO_SPELLING: 'futher' may be misspelled - perhaps 'further'?
#552: FILE: Documentation/rttReleaseNotes:486:
+          for futher reduction of scheduling latency.
               ^^^^^^

WARNING:TYPO_SPELLING: 'futher' may be misspelled - perhaps 'further'?
#570: FILE: Documentation/rttReleaseNotes:504:
+          converted into sleeping mutexes, for futher reduction of
                                                ^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#579: FILE: Documentation/rttReleaseNotes:513:
+This patch is a hybrid of several IRQ threads implementations, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#581: FILE: Documentation/rttReleaseNotes:515:
+We have made some modifications to adapt wake-up to handle $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#582: FILE: Documentation/rttReleaseNotes:516:
+the scenario where an IRQ thread could be blocked on a mutex $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#584: FILE: Documentation/rttReleaseNotes:518:
+ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#585: FILE: Documentation/rttReleaseNotes:519:
+We expect to revise this IRQ thread code after moving to $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#586: FILE: Documentation/rttReleaseNotes:520:
+the mm kernel series, and while incorporating the voluntary $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#589: FILE: Documentation/rttReleaseNotes:523:
+This patch adds options to the 'General setup' section of $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#590: FILE: Documentation/rttReleaseNotes:524:
+the kernel configuration. Running irqs in threads is $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#591: FILE: Documentation/rttReleaseNotes:525:
+prerequisite for the subsequent patches. We have provided $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#592: FILE: Documentation/rttReleaseNotes:526:
+defaults for running softirqs in threads, and have selected $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#593: FILE: Documentation/rttReleaseNotes:527:
+Ingo Molnar's IRQ thread implementation as default. $

WARNING:TYPO_SPELLING: 'superceded' may be misspelled - perhaps 'superseded'?
#608: FILE: Documentation/rttReleaseNotes:542:
+  This appears to have been superceded by Ingo Molnar's changes.
                             ^^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#611: FILE: Documentation/rttReleaseNotes:545:
+In addition, this patch includes a port of Ingo Molnar's $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#612: FILE: Documentation/rttReleaseNotes:546:
+proposed substitution of the BKL into the kernel semaphore. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#619: FILE: Documentation/rttReleaseNotes:553:
+This patch includes the (modified) PMutex from $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#628: FILE: Documentation/rttReleaseNotes:562:
+project, and the Linux system semaphore. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#630: FILE: Documentation/rttReleaseNotes:564:
+This patch alone does not provide any real-time $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#631: FILE: Documentation/rttReleaseNotes:565:
+functionality, until the subsequent spinlock $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#635: FILE: Documentation/rttReleaseNotes:569:
+for addition to the kernel's Documentation directory. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#637: FILE: Documentation/rttReleaseNotes:571:
+requirements and issues related to the RT kernel $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#661: FILE: Documentation/rttReleaseNotes:595:
+CONFIG_KMUTEX $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#703: FILE: Documentation/rttReleaseNotes:637:
+We hope that this will help and inspire those who hope to $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#704: FILE: Documentation/rttReleaseNotes:638:
+eventually be able to provision reliably timed multimedia $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#723: FILE: include/linux/kmutex.h:1:
+#ifndef __LINUX_KMUTEX_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#727: FILE: include/linux/kmutex.h:5:
+ * include/linux/kmutex.h - generic locking declarations

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#737: FILE: include/linux/kmutex.h:15:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#748: FILE: include/linux/kmutex.h:26:
+# if defined CONFIG_PMUTEX $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#753: FILE: include/linux/kmutex.h:31:
+#   define _KMUTEX_INIT ^I^IPMUTEX_PARTIAL_INIT$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#757: FILE: include/linux/kmutex.h:35:
+/* $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#758: FILE: include/linux/kmutex.h:36:
+ * Generic Mutex definitions */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#760: FILE: include/linux/kmutex.h:38:
+  struct kmutex_stat {$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#762: FILE: include/linux/kmutex.h:40:
+^Iunsigned long long sleep_end; $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#767: FILE: include/linux/kmutex.h:45:
+  };$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#769: FILE: include/linux/kmutex.h:47:
+  struct kmutex {$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#772: FILE: include/linux/kmutex.h:50:
+^Iunsigned long magic;^I $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#777: FILE: include/linux/kmutex.h:55:
+  };$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#779: FILE: include/linux/kmutex.h:57:
+  typedef struct kmutex kmutex_t;$

WARNING:NEW_TYPEDEFS: do not add new typedefs
#779: FILE: include/linux/kmutex.h:57:
+  typedef struct kmutex kmutex_t;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#781: FILE: include/linux/kmutex.h:59:
+  extern void kmutex_init^I(struct kmutex * lock);$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#781: FILE: include/linux/kmutex.h:59:
+  extern void kmutex_init	(struct kmutex * lock);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#781: FILE: include/linux/kmutex.h:59:
+  extern void kmutex_init	(struct kmutex * lock);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#781: FILE: include/linux/kmutex.h:59:
+  extern void kmutex_init	(struct kmutex * lock);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#782: FILE: include/linux/kmutex.h:60:
+  extern void kmutex_lock^I(struct kmutex * lock);$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#782: FILE: include/linux/kmutex.h:60:
+  extern void kmutex_lock	(struct kmutex * lock);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#782: FILE: include/linux/kmutex.h:60:
+  extern void kmutex_lock	(struct kmutex * lock);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#782: FILE: include/linux/kmutex.h:60:
+  extern void kmutex_lock	(struct kmutex * lock);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#783: FILE: include/linux/kmutex.h:61:
+  extern void kmutex_unlock^I(struct kmutex * lock);$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#783: FILE: include/linux/kmutex.h:61:
+  extern void kmutex_unlock	(struct kmutex * lock);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#783: FILE: include/linux/kmutex.h:61:
+  extern void kmutex_unlock	(struct kmutex * lock);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#783: FILE: include/linux/kmutex.h:61:
+  extern void kmutex_unlock	(struct kmutex * lock);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#784: FILE: include/linux/kmutex.h:62:
+  extern void kmutex_unlock_wait(struct kmutex * lock);$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#784: FILE: include/linux/kmutex.h:62:
+  extern void kmutex_unlock_wait(struct kmutex * lock);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#784: FILE: include/linux/kmutex.h:62:
+  extern void kmutex_unlock_wait(struct kmutex * lock);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#785: FILE: include/linux/kmutex.h:63:
+  extern int  kmutex_trylock^I(struct kmutex * lock);$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#785: FILE: include/linux/kmutex.h:63:
+  extern int  kmutex_trylock	(struct kmutex * lock);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#785: FILE: include/linux/kmutex.h:63:
+  extern int  kmutex_trylock	(struct kmutex * lock);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#785: FILE: include/linux/kmutex.h:63:
+  extern int  kmutex_trylock	(struct kmutex * lock);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#786: FILE: include/linux/kmutex.h:64:
+  extern int  kmutex_is_locked^I(struct kmutex * lock);$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#786: FILE: include/linux/kmutex.h:64:
+  extern int  kmutex_is_locked	(struct kmutex * lock);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#786: FILE: include/linux/kmutex.h:64:
+  extern int  kmutex_is_locked	(struct kmutex * lock);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#786: FILE: include/linux/kmutex.h:64:
+  extern int  kmutex_is_locked	(struct kmutex * lock);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#790: FILE: include/linux/kmutex.h:68:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#793: FILE: include/linux/kmutex.h:71:
+#  define KMUTEX_MAGIC_INIT ,  KMUTEX_MAGIC
                             ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#793: FILE: include/linux/kmutex.h:71:
+#  define KMUTEX_MAGIC_INIT ,  KMUTEX_MAGIC

ERROR:TRAILING_WHITESPACE: trailing whitespace
#795: FILE: include/linux/kmutex.h:73:
+#  define KMUTEX_MAGIC_INIT $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#798: FILE: include/linux/kmutex.h:76:
+# if defined CONFIG_KMUTEX_STATS $

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#800: FILE: include/linux/kmutex.h:78:
+#   define KMUTEX_STAT_INIT  , KMUTEX_STAT_ZERO
                              ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#800: FILE: include/linux/kmutex.h:78:
+#   define KMUTEX_STAT_INIT  , KMUTEX_STAT_ZERO

ERROR:TRAILING_WHITESPACE: trailing whitespace
#802: FILE: include/linux/kmutex.h:80:
+#   define KMUTEX_STAT_INIT $

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#805: FILE: include/linux/kmutex.h:83:
+#   define KMUTEX_INIT (kmutex_t) { _KMUTEX_INIT KMUTEX_MAGIC_INIT \
+					KMUTEX_STAT_INIT }

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#811: FILE: include/linux/kmutex.h:89:
+/* write-lock: lock mutex, check read count.
+	- if 0, mutex is locked for writing: return

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#816: FILE: include/linux/kmutex.h:94:
+  struct krw_lock {$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#825: FILE: include/linux/kmutex.h:103:
+^I// number of times readers blocked $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#827: FILE: include/linux/kmutex.h:105:
+  };$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#829: FILE: include/linux/kmutex.h:107:
+  typedef struct krw_lock krw_lock_t;$

WARNING:NEW_TYPEDEFS: do not add new typedefs
#829: FILE: include/linux/kmutex.h:107:
+  typedef struct krw_lock krw_lock_t;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#831: FILE: include/linux/kmutex.h:109:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#831: FILE: include/linux/kmutex.h:109:
+
+	

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#832: FILE: include/linux/kmutex.h:110:
+# define KRW_LOCK_INIT   (struct krw_lock)  {_KMUTEX_INIT, 0, { NULL, NULL } }

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#834: FILE: include/linux/kmutex.h:112:
+  extern void krwlock_init  (struct krw_lock *lock);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#834: FILE: include/linux/kmutex.h:112:
+  extern void krwlock_init  (struct krw_lock *lock);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#834: FILE: include/linux/kmutex.h:112:
+  extern void krwlock_init  (struct krw_lock *lock);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#835: FILE: include/linux/kmutex.h:113:
+  extern void kread_lock    (struct krw_lock *lock);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#835: FILE: include/linux/kmutex.h:113:
+  extern void kread_lock    (struct krw_lock *lock);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#835: FILE: include/linux/kmutex.h:113:
+  extern void kread_lock    (struct krw_lock *lock);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#836: FILE: include/linux/kmutex.h:114:
+  extern void kread_unlock  (struct krw_lock *lock);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#836: FILE: include/linux/kmutex.h:114:
+  extern void kread_unlock  (struct krw_lock *lock);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#836: FILE: include/linux/kmutex.h:114:
+  extern void kread_unlock  (struct krw_lock *lock);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#837: FILE: include/linux/kmutex.h:115:
+  extern void kwrite_lock   (struct krw_lock *lock);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#837: FILE: include/linux/kmutex.h:115:
+  extern void kwrite_lock   (struct krw_lock *lock);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#837: FILE: include/linux/kmutex.h:115:
+  extern void kwrite_lock   (struct krw_lock *lock);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#838: FILE: include/linux/kmutex.h:116:
+  extern void kwrite_unlock (struct krw_lock *lock);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#838: FILE: include/linux/kmutex.h:116:
+  extern void kwrite_unlock (struct krw_lock *lock);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#838: FILE: include/linux/kmutex.h:116:
+  extern void kwrite_unlock (struct krw_lock *lock);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#839: FILE: include/linux/kmutex.h:117:
+  extern int  krw_is_locked (struct krw_lock *lock);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#839: FILE: include/linux/kmutex.h:117:
+  extern int  krw_is_locked (struct krw_lock *lock);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#839: FILE: include/linux/kmutex.h:117:
+  extern int  krw_is_locked (struct krw_lock *lock);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#841: FILE: include/linux/kmutex.h:119:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#846: FILE: include/linux/kmutex.h:124:
+  * kernel mutexes. They depend upon definitions set $

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#846: FILE: include/linux/kmutex.h:124:
+ * These mappings actually substitute spinlocks for
+  * kernel mutexes. They depend upon definitions set 

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#847: FILE: include/linux/kmutex.h:125:
+  * in the mutex-specific sections above */

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#849: FILE: include/linux/kmutex.h:127:
+#   define rwlock_t            ^Istruct krw_lock$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#850: FILE: include/linux/kmutex.h:128:
+#   define rwlock_init ^I^Ikrwlock_init$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#851: FILE: include/linux/kmutex.h:129:
+#   define RW_LOCK_UNLOCKED ^IKRW_LOCK_INIT$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#861: FILE: include/linux/pmutex.h:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#881: FILE: include/linux/pmutex.h:21:
+ *      along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#882: FILE: include/linux/pmutex.h:22:
+ *      Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#890: FILE: include/linux/pmutex.h:30:
+#include <asm/atomic.h>

WARNING:NEW_TYPEDEFS: do not add new typedefs
#903: FILE: include/linux/pmutex.h:43:
+typedef struct p_sleeper_list p_sleeper_list_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#914: FILE: include/linux/pmutex.h:54:
+typedef struct p_mutex p_mutex_t;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#916: FILE: include/linux/pmutex.h:56:
+extern int atomic_dec_and_pmutex_lock(atomic_t *atomic, p_mutex_t *mtx);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#921: FILE: include/linux/pmutex.h:61:
+#define DECLARE_P_MUTEX(x) \
+p_mutex_t (x) = { 1, 0, SPIN_LOCK_UNLOCKED, LIST_HEAD_INIT((x).m_sleepers) \
+			, 0, MAX_PRIORI}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#927: FILE: include/linux/pmutex.h:67:
+#define DECLARE_P_MUTEX(x) \
+p_mutex_t (x) = { 1, 0, SPIN_LOCK_UNLOCKED, LIST_HEAD_INIT((x).m_sleepers)}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#932: FILE: include/linux/pmutex.h:72:
+
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#940: FILE: include/linux/pmutex.h:80:
+#define p_mutex_is_locked(x)     (((x)->m_lock != PMUTEX_LOCK_UNLOCKED) && \
+                                  ((x)->m_missed != PMUTEX_MISSED_SET))

ERROR:CODE_INDENT: code indent should use tabs where possible
#941: FILE: include/linux/pmutex.h:81:
+                                  ((x)->m_missed != PMUTEX_MISSED_SET))$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#941: FILE: include/linux/pmutex.h:81:
+                                  ((x)->m_missed != PMUTEX_MISSED_SET))$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#943: FILE: include/linux/pmutex.h:83:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#945: FILE: include/linux/pmutex.h:85:
+{^I$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#955: FILE: include/linux/pmutex.h:95:
+extern void __p_mutex_down(p_mutex_t *mtx);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#956: FILE: include/linux/pmutex.h:96:
+extern void __p_mutex_up(p_mutex_t *mtx);

ERROR:CODE_INDENT: code indent should use tabs where possible
#966: FILE: include/linux/pmutex.h:106:
+         * for statically declared spinlocks that use$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#968: FILE: include/linux/pmutex.h:108:
+^I * cannot emulate. A priority list with insertion $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#970: FILE: include/linux/pmutex.h:110:
+	 * static initialization */

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#971: FILE: include/linux/pmutex.h:111:
+	if (mtx->m_missed < 0)
+        {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#972: FILE: include/linux/pmutex.h:112:
+        {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#972: FILE: include/linux/pmutex.h:112:
+        {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#973: FILE: include/linux/pmutex.h:113:
+                INIT_LIST_HEAD(&mtx->m_sleepers);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#973: FILE: include/linux/pmutex.h:113:
+                INIT_LIST_HEAD(&mtx->m_sleepers);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#974: FILE: include/linux/pmutex.h:114:
+                mtx->m_missed= 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#974: FILE: include/linux/pmutex.h:114:
+                mtx->m_missed= 0;$

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#974: FILE: include/linux/pmutex.h:114:
+                mtx->m_missed= 0;
                              ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#975: FILE: include/linux/pmutex.h:115:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#975: FILE: include/linux/pmutex.h:115:
+        }$

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#977: FILE: include/linux/pmutex.h:117:
+	__asm__ __volatile__ (

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#999: FILE: include/linux/pmutex.h:139:
+		:"=m" (mtx->m_lock)
 		^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#1001: FILE: include/linux/pmutex.h:141:
+		:"c" (mtx)
 		^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#1002: FILE: include/linux/pmutex.h:142:
+		:"memory");
 		^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1005: FILE: include/linux/pmutex.h:145:
+
+

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1008: FILE: include/linux/pmutex.h:148:
+	if (mtx->m_missed < 0)
+        {

ERROR:CODE_INDENT: code indent should use tabs where possible
#1009: FILE: include/linux/pmutex.h:149:
+        {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1009: FILE: include/linux/pmutex.h:149:
+        {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1010: FILE: include/linux/pmutex.h:150:
+                BUG();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1010: FILE: include/linux/pmutex.h:150:
+                BUG();$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1010: FILE: include/linux/pmutex.h:150:
+                BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:CODE_INDENT: code indent should use tabs where possible
#1011: FILE: include/linux/pmutex.h:151:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1011: FILE: include/linux/pmutex.h:151:
+        }$

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1013: FILE: include/linux/pmutex.h:153:
+	__asm__ __volatile__ (

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#1028: FILE: include/linux/pmutex.h:168:
+		:"=m" (mtx->m_lock)
 		^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#1029: FILE: include/linux/pmutex.h:169:
+		:"c" (mtx)
 		^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#1030: FILE: include/linux/pmutex.h:170:
+		:"memory");
 		^

WARNING:TYPO_SPELLING: 'immediatly' may be misspelled - perhaps 'immediately'?
#1034: FILE: include/linux/pmutex.h:174:
+ *     Attempts to obtain the given mutex. Returns immediatly if the
                                                    ^^^^^^^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1044: FILE: include/linux/pmutex.h:184:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1053: FILE: include/linux/spin_undefs.h:1:
+

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#1055: FILE: include/linux/spin_undefs.h:3:
+ * include/linux/spin_undefs.h - spinlock un-substitution

WARNING:REPEATED_WORD: Possible repeated word: 'dirty'
#1073: FILE: include/linux/spin_undefs.h:21:
+ * This is a dirty dirty hack, but it helps to compress the

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1076: FILE: include/linux/spin_undefs.h:24:
+ * $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1080: FILE: include/linux/spin_undefs.h:28:
+/* use this include only in C files where all spinlock calls
+   are replaced with _spin... */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1080: FILE: include/linux/spin_undefs.h:28:
+   are replaced with _spin... */

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1092: FILE: include/linux/spin_undefs.h:40:
+# define spin_lock_bh   ^I_spin_lock_bh$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1095: FILE: include/linux/spin_undefs.h:43:
+# define spin_unlock_bh ^I_spin_unlock_bh$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1098: FILE: include/linux/spin_undefs.h:46:
+# define spin_lock_irq   ^I_spin_lock_irq$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1101: FILE: include/linux/spin_undefs.h:49:
+# define spin_unlock_irq ^I_spin_unlock_irq$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1112: FILE: include/linux/spin_undefs.h:60:
+
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#1127: FILE: init/Kconfig:227:
+config KMUTEX
+        bool "Kernel mutexes replace spinlocks"
+        depends on (PREEMPT && (IRQ_THREADS || INGO_IRQ_THREADS))
+        default y
+        ---help---
+          Substituting spinlocks with mutexes reduces the average preemption
+	  latency
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#1135: FILE: init/Kconfig:235:
+config KMUTEX_STATS
+        bool "Keep kmutex performance stats"
+        depends on (PMUTEX || FMUTEX)
+        default y
+        ---help---
+          Log min, max, average locking times for each kmutex.
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#1142: FILE: init/Kconfig:242:
+config KMUTEX_DEBUG
+        bool "Enable KMUTEX debugging output"
+        depends on (PMUTEX || FMUTEX)
+        default y
+        ---help---
+          Reports status, state changes and possible error conditions.
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#1149: FILE: init/Kconfig:249:
+config KMUTEX_ATOMIC_DEBUG
+        bool "Report KMUTEX access while atomic"
+        depends on (KMUTEX_DEBUG)
+        default n 
+        ---help---
+          Reports when a kmutex is locked while the process is atomic.
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1152: FILE: init/Kconfig:252:
+        default n $

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#1163: FILE: init/Kconfig:281:
+config KRCU_LOCKS
+        bool "Use rcu lock workaround"
+        depends on KMUTEX
+        default n
+	---help---
+	  Emulates rw-locks using mutex-based subsystem.
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#1170: FILE: init/Kconfig:288:
+config FMUTEX
+        bool "Use Robust Mutexes (unsupported)"
+        default n
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#1174: FILE: init/Kconfig:292:
+config PMUTEX
+        bool "Use Dirk Grambow's PMutexes"
+        default y
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#1178: FILE: init/Kconfig:296:
+config PMUTEX_DEADLOCK_DETECTION
+        bool "PMutex Deadlock detection mechanism"
+        depends on (PMUTEX)
+        default n
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#1183: FILE: init/Kconfig:301:
+config PMUTEX_PI
+        bool "PMutex with simple priority inheritance"
+        depends on (PMUTEX)
+        default y
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#1188: FILE: init/Kconfig:306:
+config PMUTEX_PI_DEBUG
+        bool "Enable PMUTEX priority inheritance debugging output"
+        depends on (PMUTEX_PI)
+        default y
+        ---help---
+          Reports PI events. 
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1193: FILE: init/Kconfig:311:
+          Reports PI events. $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1202: FILE: kernel/kmutex.c:1:
+

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#1204: FILE: kernel/kmutex.c:3:
+ * kernel/kmutex.c - generic locking functions to replace spinlocks

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1215: FILE: kernel/kmutex.c:14:
+ * $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1220: FILE: kernel/kmutex.c:19:
+
+

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1228: FILE: kernel/kmutex.c:27:
+#   define _kmutex_init(lock)           p_mutex_init    (lock)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1228: FILE: kernel/kmutex.c:27:
+#   define _kmutex_init(lock)           p_mutex_init    (lock)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1229: FILE: kernel/kmutex.c:28:
+#   define _kmutex_lock(lock)           p_mutex_down    (lock)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1229: FILE: kernel/kmutex.c:28:
+#   define _kmutex_lock(lock)           p_mutex_down    (lock)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1230: FILE: kernel/kmutex.c:29:
+#   define _kmutex_unlock(lock)         p_mutex_up      (lock)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1230: FILE: kernel/kmutex.c:29:
+#   define _kmutex_unlock(lock)         p_mutex_up      (lock)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1232: FILE: kernel/kmutex.c:31:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1234: FILE: kernel/kmutex.c:33:
+{ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1235: FILE: kernel/kmutex.c:34:
+^Ireturn atomic_dec_and_pmutex_lock(atomic, &(lock->kmtx)); $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around lock->kmtx
#1235: FILE: kernel/kmutex.c:34:
+	return atomic_dec_and_pmutex_lock(atomic, &(lock->kmtx)); 

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1238: FILE: kernel/kmutex.c:37:
+
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#1241: FILE: kernel/kmutex.c:40:
+        return p_mutex_trylock(&(lock->kmtx));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1241: FILE: kernel/kmutex.c:40:
+        return p_mutex_trylock(&(lock->kmtx));$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around lock->kmtx
#1241: FILE: kernel/kmutex.c:40:
+        return p_mutex_trylock(&(lock->kmtx));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1244: FILE: kernel/kmutex.c:43:
+
+

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around lock->kmtx
#1247: FILE: kernel/kmutex.c:46:
+	return p_mutex_is_locked(&(lock->kmtx));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1251: FILE: kernel/kmutex.c:50:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1253: FILE: kernel/kmutex.c:52:
+void kmutex_init(struct kmutex * lock)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1254: FILE: kernel/kmutex.c:53:
+{ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1255: FILE: kernel/kmutex.c:54:
+                _kmutex_init(&(lock->kmtx));                             $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1255: FILE: kernel/kmutex.c:54:
+                _kmutex_init(&(lock->kmtx));                             $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1255: FILE: kernel/kmutex.c:54:
+                _kmutex_init(&(lock->kmtx));                             $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around lock->kmtx
#1255: FILE: kernel/kmutex.c:54:
+                _kmutex_init(&(lock->kmtx));                             

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1257: FILE: kernel/kmutex.c:56:
+                lock->magic = KMUTEX_MAGIC;      $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1257: FILE: kernel/kmutex.c:56:
+                lock->magic = KMUTEX_MAGIC;      $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1257: FILE: kernel/kmutex.c:56:
+                lock->magic = KMUTEX_MAGIC;      $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1260: FILE: kernel/kmutex.c:59:
+                lock->mstat = (struct kmutex_stat) KMUTEX_STAT_ZERO;  $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1260: FILE: kernel/kmutex.c:59:
+                lock->mstat = (struct kmutex_stat) KMUTEX_STAT_ZERO;  $

CHECK:SPACING: No space is necessary after a cast
#1260: FILE: kernel/kmutex.c:59:
+                lock->mstat = (struct kmutex_stat) KMUTEX_STAT_ZERO;  

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1260: FILE: kernel/kmutex.c:59:
+                lock->mstat = (struct kmutex_stat) KMUTEX_STAT_ZERO;  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1262: FILE: kernel/kmutex.c:61:
+} $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1264: FILE: kernel/kmutex.c:63:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1269: FILE: kernel/kmutex.c:68:
+void kmutex_lock(struct kmutex * lock) $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1269: FILE: kernel/kmutex.c:68:
+void kmutex_lock(struct kmutex * lock) 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1270: FILE: kernel/kmutex.c:69:
+{ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1272: FILE: kernel/kmutex.c:71:
+                if (lock->magic != KMUTEX_MAGIC) BUG(); $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1272: FILE: kernel/kmutex.c:71:
+                if (lock->magic != KMUTEX_MAGIC) BUG(); $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1272: FILE: kernel/kmutex.c:71:
+                if (lock->magic != KMUTEX_MAGIC) BUG(); $

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1272: FILE: kernel/kmutex.c:71:
+                if (lock->magic != KMUTEX_MAGIC) BUG(); 

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1272: FILE: kernel/kmutex.c:71:
+                if (lock->magic != KMUTEX_MAGIC) BUG(); 

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:CODE_INDENT: code indent should use tabs where possible
#1274: FILE: kernel/kmutex.c:73:
+                if (preempt_count()) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1274: FILE: kernel/kmutex.c:73:
+                if (preempt_count()) {$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1275: FILE: kernel/kmutex.c:74:
+                        printk("kmutex_lock: call at %s:%d " $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1275: FILE: kernel/kmutex.c:74:
+                        printk("kmutex_lock: call at %s:%d " $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1275: FILE: kernel/kmutex.c:74:
+                        printk("kmutex_lock: call at %s:%d " $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1275: FILE: kernel/kmutex.c:74:
+                        printk("kmutex_lock: call at %s:%d " 

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'kmutex_lock', this function's name, in a string
#1275: FILE: kernel/kmutex.c:74:
+                        printk("kmutex_lock: call at %s:%d " 

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1276: FILE: kernel/kmutex.c:75:
+                               "while preempt_count is %d\n",  $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1276: FILE: kernel/kmutex.c:75:
+                               "while preempt_count is %d\n",  $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1276: FILE: kernel/kmutex.c:75:
+                               "while preempt_count is %d\n",  $

WARNING:SPLIT_STRING: quoted string split across lines
#1276: FILE: kernel/kmutex.c:75:
+                        printk("kmutex_lock: call at %s:%d " 
+                               "while preempt_count is %d\n",  

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1277: FILE: kernel/kmutex.c:76:
+                        __FILE__, __LINE__, $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1277: FILE: kernel/kmutex.c:76:
+                        __FILE__, __LINE__, $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1277: FILE: kernel/kmutex.c:76:
+                        __FILE__, __LINE__, $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1278: FILE: kernel/kmutex.c:77:
+                        preempt_count());$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1278: FILE: kernel/kmutex.c:77:
+                        preempt_count());$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1279: FILE: kernel/kmutex.c:78:
+                        dump_stack(); $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1279: FILE: kernel/kmutex.c:78:
+                        dump_stack(); $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1279: FILE: kernel/kmutex.c:78:
+                        dump_stack(); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1280: FILE: kernel/kmutex.c:79:
+                } $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1280: FILE: kernel/kmutex.c:79:
+                } $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1280: FILE: kernel/kmutex.c:79:
+                } $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1284: FILE: kernel/kmutex.c:83:
+                lock->mstat.sleep_start = sched_clock(); $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1284: FILE: kernel/kmutex.c:83:
+                lock->mstat.sleep_start = sched_clock(); $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1284: FILE: kernel/kmutex.c:83:
+                lock->mstat.sleep_start = sched_clock(); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1286: FILE: kernel/kmutex.c:85:
+                _kmutex_lock(&(lock->kmtx));                                $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1286: FILE: kernel/kmutex.c:85:
+                _kmutex_lock(&(lock->kmtx));                                $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1286: FILE: kernel/kmutex.c:85:
+                _kmutex_lock(&(lock->kmtx));                                $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around lock->kmtx
#1286: FILE: kernel/kmutex.c:85:
+                _kmutex_lock(&(lock->kmtx));                                

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1288: FILE: kernel/kmutex.c:87:
+                lock->mstat.sleep_end = sched_clock();   $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1288: FILE: kernel/kmutex.c:87:
+                lock->mstat.sleep_end = sched_clock();   $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1288: FILE: kernel/kmutex.c:87:
+                lock->mstat.sleep_end = sched_clock();   $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1290: FILE: kernel/kmutex.c:89:
+} $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1292: FILE: kernel/kmutex.c:91:
+void kmutex_unlock(struct kmutex *lock) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1293: FILE: kernel/kmutex.c:92:
+{ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1295: FILE: kernel/kmutex.c:94:
+                if (lock->magic != KMUTEX_MAGIC) BUG();  $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1295: FILE: kernel/kmutex.c:94:
+                if (lock->magic != KMUTEX_MAGIC) BUG();  $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1295: FILE: kernel/kmutex.c:94:
+                if (lock->magic != KMUTEX_MAGIC) BUG();  $

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1295: FILE: kernel/kmutex.c:94:
+                if (lock->magic != KMUTEX_MAGIC) BUG();  

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1295: FILE: kernel/kmutex.c:94:
+                if (lock->magic != KMUTEX_MAGIC) BUG();  

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1298: FILE: kernel/kmutex.c:97:
+                lock->mstat.sleep_start = sched_clock();  $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1298: FILE: kernel/kmutex.c:97:
+                lock->mstat.sleep_start = sched_clock();  $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1298: FILE: kernel/kmutex.c:97:
+                lock->mstat.sleep_start = sched_clock();  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1300: FILE: kernel/kmutex.c:99:
+                _kmutex_unlock(&(lock->kmtx));                               $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1300: FILE: kernel/kmutex.c:99:
+                _kmutex_unlock(&(lock->kmtx));                               $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1300: FILE: kernel/kmutex.c:99:
+                _kmutex_unlock(&(lock->kmtx));                               $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around lock->kmtx
#1300: FILE: kernel/kmutex.c:99:
+                _kmutex_unlock(&(lock->kmtx));                               

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1302: FILE: kernel/kmutex.c:101:
+                lock->mstat.sleep_end = sched_clock();    $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1302: FILE: kernel/kmutex.c:101:
+                lock->mstat.sleep_end = sched_clock();    $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1302: FILE: kernel/kmutex.c:101:
+                lock->mstat.sleep_end = sched_clock();    $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1306: FILE: kernel/kmutex.c:105:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1307: FILE: kernel/kmutex.c:106:
+void kmutex_unlock_wait(struct kmutex * lock)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1308: FILE: kernel/kmutex.c:107:
+{ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1309: FILE: kernel/kmutex.c:108:
+                if (kmutex_is_locked(lock)) {  $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1309: FILE: kernel/kmutex.c:108:
+                if (kmutex_is_locked(lock)) {  $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1309: FILE: kernel/kmutex.c:108:
+                if (kmutex_is_locked(lock)) {  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1310: FILE: kernel/kmutex.c:109:
+                        kmutex_lock(lock); $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1310: FILE: kernel/kmutex.c:109:
+                        kmutex_lock(lock); $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1310: FILE: kernel/kmutex.c:109:
+                        kmutex_lock(lock); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1311: FILE: kernel/kmutex.c:110:
+                        kmutex_unlock(lock); $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1311: FILE: kernel/kmutex.c:110:
+                        kmutex_unlock(lock); $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1311: FILE: kernel/kmutex.c:110:
+                        kmutex_unlock(lock); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1312: FILE: kernel/kmutex.c:111:
+                }  $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1312: FILE: kernel/kmutex.c:111:
+                }  $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1312: FILE: kernel/kmutex.c:111:
+                }  $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1315: FILE: kernel/kmutex.c:114:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1332: FILE: kernel/pmutex.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1352: FILE: kernel/pmutex.c:21:
+ *      along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1353: FILE: kernel/pmutex.c:22:
+ *      Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1381: FILE: kernel/pmutex.c:50:
+
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#1384: FILE: kernel/pmutex.c:53:
+        p_mutex_down(mtx);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1384: FILE: kernel/pmutex.c:53:
+        p_mutex_down(mtx);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1385: FILE: kernel/pmutex.c:54:
+        if (atomic_dec_and_test(atomic))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1385: FILE: kernel/pmutex.c:54:
+        if (atomic_dec_and_test(atomic))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1386: FILE: kernel/pmutex.c:55:
+                return 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1386: FILE: kernel/pmutex.c:55:
+                return 1;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1387: FILE: kernel/pmutex.c:56:
+        p_mutex_up(mtx);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1387: FILE: kernel/pmutex.c:56:
+        p_mutex_up(mtx);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1388: FILE: kernel/pmutex.c:57:
+        return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1388: FILE: kernel/pmutex.c:57:
+        return 0;$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1391: FILE: kernel/pmutex.c:60:
+
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#1396: FILE: kernel/pmutex.c:65:
+        struct list_head *pos;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1396: FILE: kernel/pmutex.c:65:
+        struct list_head *pos;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1398: FILE: kernel/pmutex.c:67:
+        list_for_each(pos, &mtx->m_sleepers) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1398: FILE: kernel/pmutex.c:67:
+        list_for_each(pos, &mtx->m_sleepers) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1399: FILE: kernel/pmutex.c:68:
+                if (current == (list_entry(pos, p_sleeper_list_t, list)->task))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1399: FILE: kernel/pmutex.c:68:
+                if (current == (list_entry(pos, p_sleeper_list_t, list)->task))$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1412: FILE: kernel/pmutex.c:81:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1413: FILE: kernel/pmutex.c:82:
+^IINIT_LIST_HEAD(&new.list);^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1416: FILE: kernel/pmutex.c:85:
+^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1421: FILE: kernel/pmutex.c:90:
+                mtx->owner = (task_t **)current_thread_info();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1421: FILE: kernel/pmutex.c:90:
+                mtx->owner = (task_t **)current_thread_info();$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1424: FILE: kernel/pmutex.c:93:
+		printk("__p_mutex_down: Mtx %08x task [%d] missed task!!!\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using '__p_mutex_down', this function's name, in a string
#1424: FILE: kernel/pmutex.c:93:
+		printk("__p_mutex_down: Mtx %08x task [%d] missed task!!!\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1425: FILE: kernel/pmutex.c:94:
+		printk("__p_mutex_down: Mtx %08x task [%d] missed task!!!\n",
+				(int) mtx, current->pid);

CHECK:SPACING: No space is necessary after a cast
#1425: FILE: kernel/pmutex.c:94:
+				(int) mtx, current->pid);

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1431: FILE: kernel/pmutex.c:100:
+	if (check_current_on_waiters_list(mtx) == 1)
+	{

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1433: FILE: kernel/pmutex.c:102:
+		printk("__p_mutex_down: mtx 0x%x; process 0x%x already in "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using '__p_mutex_down', this function's name, in a string
#1433: FILE: kernel/pmutex.c:102:
+		printk("__p_mutex_down: mtx 0x%x; process 0x%x already in "

CHECK:SPACING: No space is necessary after a cast
#1434: FILE: kernel/pmutex.c:103:
+			"waiters list!\n", (int) mtx, (int) current);

WARNING:SPLIT_STRING: quoted string split across lines
#1434: FILE: kernel/pmutex.c:103:
+		printk("__p_mutex_down: mtx 0x%x; process 0x%x already in "
+			"waiters list!\n", (int) mtx, (int) current);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1435: FILE: kernel/pmutex.c:104:
+		BUG();

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1445: FILE: kernel/pmutex.c:114:
+^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1446: FILE: kernel/pmutex.c:115:
+        owner = *(mtx->owner);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1446: FILE: kernel/pmutex.c:115:
+        owner = *(mtx->owner);$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around mtx->owner
#1446: FILE: kernel/pmutex.c:115:
+        owner = *(mtx->owner);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1456: FILE: kernel/pmutex.c:125:
+		printk("Mtx: %08x [%d] pri (%lu) inherit from [%d] "

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1457: FILE: kernel/pmutex.c:126:
+^I^I^I^I"pri(%lu)\n", $

WARNING:SPLIT_STRING: quoted string split across lines
#1457: FILE: kernel/pmutex.c:126:
+		printk("Mtx: %08x [%d] pri (%lu) inherit from [%d] "
+				"pri(%lu)\n", 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1458: FILE: kernel/pmutex.c:127:
+^I^I^Imtx, owner->pid, owner->rt_priority, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1461: FILE: kernel/pmutex.c:130:
+^I^Isetscheduler_pi(owner, owner->rt_priority ? -1 : SCHED_FIFO, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1462: FILE: kernel/pmutex.c:131:
+^I^I^I^I^Icurrent->rt_priority);^I^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1462: FILE: kernel/pmutex.c:131:
+		setscheduler_pi(owner, owner->rt_priority ? -1 : SCHED_FIFO, 
+					current->rt_priority);		

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1464: FILE: kernel/pmutex.c:133:
+#endif^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1466: FILE: kernel/pmutex.c:135:
+^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1470: FILE: kernel/pmutex.c:139:
+        mtx->owner = (struct task_struct**)current_thread_info();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1470: FILE: kernel/pmutex.c:139:
+        mtx->owner = (struct task_struct**)current_thread_info();$

ERROR:POINTER_LOCATION: "(foo**)" should be "(foo **)"
#1470: FILE: kernel/pmutex.c:139:
+        mtx->owner = (struct task_struct**)current_thread_info();

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1471: FILE: kernel/pmutex.c:140:
+^I$

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1472: FILE: kernel/pmutex.c:141:
+	
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1474: FILE: kernel/pmutex.c:143:
+ __attribute__((regparm(0)))$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1477: FILE: kernel/pmutex.c:146:
+^Istruct list_head *first;^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1481: FILE: kernel/pmutex.c:150:
+^I$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1486: FILE: kernel/pmutex.c:155:
+		printk("__p_mutex_up: Mtx %08x task [%d] list is empty\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using '__p_mutex_up', this function's name, in a string
#1486: FILE: kernel/pmutex.c:155:
+		printk("__p_mutex_up: Mtx %08x task [%d] list is empty\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1487: FILE: kernel/pmutex.c:156:
+		printk("__p_mutex_up: Mtx %08x task [%d] list is empty\n",
+				(int) mtx, current->pid);

CHECK:SPACING: No space is necessary after a cast
#1487: FILE: kernel/pmutex.c:156:
+				(int) mtx, current->pid);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around mtx->owner
#1494: FILE: kernel/pmutex.c:163:
+	owner = *(mtx->owner);

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1495: FILE: kernel/pmutex.c:164:
+	if (!(*(mtx->owner)))
+		{

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around mtx->owner
#1495: FILE: kernel/pmutex.c:164:
+	if (!(*(mtx->owner)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'mtx->owner'
#1495: FILE: kernel/pmutex.c:164:
+	if (!(*(mtx->owner)))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1497: FILE: kernel/pmutex.c:166:
+                printk("*** MUTEX (0x%x), thread %s[%d] on up() no owner ", $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1497: FILE: kernel/pmutex.c:166:
+                printk("*** MUTEX (0x%x), thread %s[%d] on up() no owner ", $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1497: FILE: kernel/pmutex.c:166:
+                printk("*** MUTEX (0x%x), thread %s[%d] on up() no owner ", $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1497: FILE: kernel/pmutex.c:166:
+                printk("*** MUTEX (0x%x), thread %s[%d] on up() no owner ", 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1498: FILE: kernel/pmutex.c:167:
+                printk("*** MUTEX (0x%x), thread %s[%d] on up() no owner ", 
+			(int) mtx, current->comm, current->pid);

CHECK:SPACING: No space is necessary after a cast
#1498: FILE: kernel/pmutex.c:167:
+			(int) mtx, current->comm, current->pid);

CHECK:BRACES: Unbalanced braces around else statement
#1501: FILE: kernel/pmutex.c:170:
+	else {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1502: FILE: kernel/pmutex.c:171:
+	else {
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#1504: FILE: kernel/pmutex.c:173:
+        ^I        printk("*** MUTEX (0x%x), thread %s[%d] on up() "$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1504: FILE: kernel/pmutex.c:173:
+        ^I        printk("*** MUTEX (0x%x), thread %s[%d] on up() "$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1504: FILE: kernel/pmutex.c:173:
+        ^I        printk("*** MUTEX (0x%x), thread %s[%d] on up() "$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1504: FILE: kernel/pmutex.c:173:
+        	        printk("*** MUTEX (0x%x), thread %s[%d] on up() "

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1505: FILE: kernel/pmutex.c:174:
+^I^I^I^I"owner (0x%x) is %s[%d]\n", (int) mtx, $

CHECK:SPACING: No space is necessary after a cast
#1505: FILE: kernel/pmutex.c:174:
+				"owner (0x%x) is %s[%d]\n", (int) mtx, 

WARNING:SPLIT_STRING: quoted string split across lines
#1505: FILE: kernel/pmutex.c:174:
+        	        printk("*** MUTEX (0x%x), thread %s[%d] on up() "
+				"owner (0x%x) is %s[%d]\n", (int) mtx, 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1506: FILE: kernel/pmutex.c:175:
+^I^I^I^Icurrent->comm, current->pid, (int) owner, $

CHECK:SPACING: No space is necessary after a cast
#1506: FILE: kernel/pmutex.c:175:
+				current->comm, current->pid, (int) owner, 

ERROR:CODE_INDENT: code indent should use tabs where possible
#1515: FILE: kernel/pmutex.c:184:
+        mtx->owner = &(list_entry(first, p_sleeper_list_t, list)->task);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1515: FILE: kernel/pmutex.c:184:
+        mtx->owner = &(list_entry(first, p_sleeper_list_t, list)->task);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1522: FILE: kernel/pmutex.c:191:
+                        owner = *(mtx->owner);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1522: FILE: kernel/pmutex.c:191:
+                        owner = *(mtx->owner);$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around mtx->owner
#1522: FILE: kernel/pmutex.c:191:
+                        owner = *(mtx->owner);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1524: FILE: kernel/pmutex.c:193:
+			printk("Mtx %08x task [%d] pri (%lu) restored "

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1525: FILE: kernel/pmutex.c:194:
+^I^I^I^I"pri(%lu). Next owner [%d] pri (%lu)\n", ^I$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1525: FILE: kernel/pmutex.c:194:
+^I^I^I^I"pri(%lu). Next owner [%d] pri (%lu)\n", ^I$

WARNING:SPLIT_STRING: quoted string split across lines
#1525: FILE: kernel/pmutex.c:194:
+			printk("Mtx %08x task [%d] pri (%lu) restored "
+				"pri(%lu). Next owner [%d] pri (%lu)\n", 	

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1528: FILE: kernel/pmutex.c:197:
+^I^I^I^I owner->rt_priority); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1530: FILE: kernel/pmutex.c:199:
+^I^I^Isetscheduler_pi(current, mtx->initial_prio ? -1 : SCHED_NORMAL, mtx->initial_prio);^I^I^I^I^I$

WARNING:LONG_LINE: line length of 144 exceeds 100 columns
#1530: FILE: kernel/pmutex.c:199:
+			setscheduler_pi(current, mtx->initial_prio ? -1 : SCHED_NORMAL, mtx->initial_prio);					

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1538: FILE: kernel/pmutex.c:207:
+^I^I$

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1544: FILE: kernel/pmutex.c:213:
+{
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#1545: FILE: kernel/pmutex.c:214:
+        if (mtx->m_missed < 0) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1545: FILE: kernel/pmutex.c:214:
+        if (mtx->m_missed < 0) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1546: FILE: kernel/pmutex.c:215:
+                INIT_LIST_HEAD(&mtx->m_sleepers);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1546: FILE: kernel/pmutex.c:215:
+                INIT_LIST_HEAD(&mtx->m_sleepers);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1547: FILE: kernel/pmutex.c:216:
+                mtx->m_missed= 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1547: FILE: kernel/pmutex.c:216:
+                mtx->m_missed= 0;$

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#1547: FILE: kernel/pmutex.c:216:
+                mtx->m_missed= 0;
                              ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1548: FILE: kernel/pmutex.c:217:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1548: FILE: kernel/pmutex.c:217:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1550: FILE: kernel/pmutex.c:219:
+        if (cmpxchg(&mtx->m_lock, 1, 0) == 1) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1550: FILE: kernel/pmutex.c:219:
+        if (cmpxchg(&mtx->m_lock, 1, 0) == 1) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1551: FILE: kernel/pmutex.c:220:
+                mtx->owner = (task_t **)current_thread_info();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1551: FILE: kernel/pmutex.c:220:
+                mtx->owner = (task_t **)current_thread_info();$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1552: FILE: kernel/pmutex.c:221:
+                return 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1552: FILE: kernel/pmutex.c:221:
+                return 1;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1553: FILE: kernel/pmutex.c:222:
+        } else {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1553: FILE: kernel/pmutex.c:222:
+        } else {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1554: FILE: kernel/pmutex.c:223:
+                return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1554: FILE: kernel/pmutex.c:223:
+                return 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1555: FILE: kernel/pmutex.c:224:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1555: FILE: kernel/pmutex.c:224:
+        }$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1558: FILE: kernel/pmutex.c:227:
+
+

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1559: FILE: kernel/pmutex.c:228:
+EXPORT_SYMBOL(__p_mutex_down);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1560: FILE: kernel/pmutex.c:229:
+EXPORT_SYMBOL(__p_mutex_up);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1575: FILE: kernel/sched.c:3449:
+       int oldprio;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1576: FILE: kernel/sched.c:3450:
+       prio_array_t *array;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1577: FILE: kernel/sched.c:3451:
+       unsigned long flags;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1578: FILE: kernel/sched.c:3452:
+       runqueue_t *rq;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1579: FILE: kernel/sched.c:3453:
+                                                                                                                    $

WARNING:LONG_LINE: line length of 116 exceeds 100 columns
#1579: FILE: kernel/sched.c:3453:
+                                                                                                                    

ERROR:CODE_INDENT: code indent should use tabs where possible
#1579: FILE: kernel/sched.c:3453:
+                                                                                                                    $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1579: FILE: kernel/sched.c:3453:
+                                                                                                                    $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1581: FILE: kernel/sched.c:3455:
+        * We play safe to avoid deadlocks.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1582: FILE: kernel/sched.c:3456:
+        */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1583: FILE: kernel/sched.c:3457:
+       read_lock_irq(&tasklist_lock);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1584: FILE: kernel/sched.c:3458:
+                                                                                                                    $

WARNING:LONG_LINE: line length of 116 exceeds 100 columns
#1584: FILE: kernel/sched.c:3458:
+                                                                                                                    

ERROR:CODE_INDENT: code indent should use tabs where possible
#1584: FILE: kernel/sched.c:3458:
+                                                                                                                    $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1584: FILE: kernel/sched.c:3458:
+                                                                                                                    $

WARNING:TYPO_SPELLING: 'apropriate' may be misspelled - perhaps 'appropriate'?
#1586: FILE: kernel/sched.c:3460:
+        * To be able to change p->policy safely, the apropriate
                                                      ^^^^^^^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1586: FILE: kernel/sched.c:3460:
+        * To be able to change p->policy safely, the apropriate$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1587: FILE: kernel/sched.c:3461:
+        * runqueue lock must be held.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1588: FILE: kernel/sched.c:3462:
+        */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1589: FILE: kernel/sched.c:3463:
+       rq = task_rq_lock(p, &flags);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1590: FILE: kernel/sched.c:3464:
+                                                                                                                    $

WARNING:LONG_LINE: line length of 116 exceeds 100 columns
#1590: FILE: kernel/sched.c:3464:
+                                                                                                                    

ERROR:CODE_INDENT: code indent should use tabs where possible
#1590: FILE: kernel/sched.c:3464:
+                                                                                                                    $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1590: FILE: kernel/sched.c:3464:
+                                                                                                                    $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1591: FILE: kernel/sched.c:3465:
+       if (policy < 0)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#1591: FILE: kernel/sched.c:3465:
+       if (policy < 0)
+               policy = p->policy;

ERROR:CODE_INDENT: code indent should use tabs where possible
#1592: FILE: kernel/sched.c:3466:
+               policy = p->policy;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1592: FILE: kernel/sched.c:3466:
+               policy = p->policy;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1593: FILE: kernel/sched.c:3467:
+                                                                                                                    $

WARNING:LONG_LINE: line length of 116 exceeds 100 columns
#1593: FILE: kernel/sched.c:3467:
+                                                                                                                    

ERROR:CODE_INDENT: code indent should use tabs where possible
#1593: FILE: kernel/sched.c:3467:
+                                                                                                                    $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1593: FILE: kernel/sched.c:3467:
+                                                                                                                    $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1594: FILE: kernel/sched.c:3468:
+       array = p->array;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1595: FILE: kernel/sched.c:3469:
+       if (array)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#1595: FILE: kernel/sched.c:3469:
+       if (array)
+               deactivate_task(p, task_rq(p));

ERROR:CODE_INDENT: code indent should use tabs where possible
#1596: FILE: kernel/sched.c:3470:
+               deactivate_task(p, task_rq(p));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1596: FILE: kernel/sched.c:3470:
+               deactivate_task(p, task_rq(p));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1597: FILE: kernel/sched.c:3471:
+       oldprio = p->prio;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1598: FILE: kernel/sched.c:3472:
+       __setscheduler(p, policy, prio);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1599: FILE: kernel/sched.c:3473:
+                                                                                                                    $

WARNING:LONG_LINE: line length of 116 exceeds 100 columns
#1599: FILE: kernel/sched.c:3473:
+                                                                                                                    

ERROR:CODE_INDENT: code indent should use tabs where possible
#1599: FILE: kernel/sched.c:3473:
+                                                                                                                    $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1599: FILE: kernel/sched.c:3473:
+                                                                                                                    $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1600: FILE: kernel/sched.c:3474:
+       if (array) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#1600: FILE: kernel/sched.c:3474:
+       if (array) {
+               __activate_task(p, task_rq(p));

ERROR:CODE_INDENT: code indent should use tabs where possible
#1601: FILE: kernel/sched.c:3475:
+               __activate_task(p, task_rq(p));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1601: FILE: kernel/sched.c:3475:
+               __activate_task(p, task_rq(p));$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1602: FILE: kernel/sched.c:3476:
+               /*$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1603: FILE: kernel/sched.c:3477:
+                * Reschedule if we are currently running on this runqueue and$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1604: FILE: kernel/sched.c:3478:
+                * our priority decreased, or if we are not currently running on$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1605: FILE: kernel/sched.c:3479:
+                * this runqueue and our priority is higher than the current's$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1606: FILE: kernel/sched.c:3480:
+                */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1607: FILE: kernel/sched.c:3481:
+               if (rq->curr == p) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1607: FILE: kernel/sched.c:3481:
+               if (rq->curr == p) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#1607: FILE: kernel/sched.c:3481:
+               if (rq->curr == p) {
+                       if (p->prio > oldprio)

CHECK:BRACES: braces {} should be used on all arms of this statement
#1607: FILE: kernel/sched.c:3481:
+               if (rq->curr == p) {
[...]
+               } else if (p->prio < rq->curr->prio)
[...]

ERROR:CODE_INDENT: code indent should use tabs where possible
#1608: FILE: kernel/sched.c:3482:
+                       if (p->prio > oldprio)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1608: FILE: kernel/sched.c:3482:
+                       if (p->prio > oldprio)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (23, 31)
#1608: FILE: kernel/sched.c:3482:
+                       if (p->prio > oldprio)
+                               resched_task(rq->curr);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1609: FILE: kernel/sched.c:3483:
+                               resched_task(rq->curr);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1609: FILE: kernel/sched.c:3483:
+                               resched_task(rq->curr);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1610: FILE: kernel/sched.c:3484:
+               } else if (p->prio < rq->curr->prio)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1610: FILE: kernel/sched.c:3484:
+               } else if (p->prio < rq->curr->prio)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#1610: FILE: kernel/sched.c:3484:
+               } else if (p->prio < rq->curr->prio)
+                       resched_task(rq->curr);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1611: FILE: kernel/sched.c:3485:
+                       resched_task(rq->curr);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1611: FILE: kernel/sched.c:3485:
+                       resched_task(rq->curr);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1612: FILE: kernel/sched.c:3486:
+       }$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1613: FILE: kernel/sched.c:3487:
+                                                                                                                    $

WARNING:LONG_LINE: line length of 116 exceeds 100 columns
#1613: FILE: kernel/sched.c:3487:
+                                                                                                                    

ERROR:CODE_INDENT: code indent should use tabs where possible
#1613: FILE: kernel/sched.c:3487:
+                                                                                                                    $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1613: FILE: kernel/sched.c:3487:
+                                                                                                                    $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1614: FILE: kernel/sched.c:3488:
+       task_rq_unlock(rq, &flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1615: FILE: kernel/sched.c:3489:
+       read_unlock_irq(&tasklist_lock);$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000242977.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 255 errors, 206 warnings, 66 checks, 1537 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000242977.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
