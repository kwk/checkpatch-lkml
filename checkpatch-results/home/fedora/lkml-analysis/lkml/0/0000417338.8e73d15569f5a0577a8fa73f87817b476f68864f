ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#48: 
--- a/fs/ext3/ialloc.c	Sat Nov  2 01:32:18 2002

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#67: FILE: fs/ext3/ialloc.c:207:
+	struct ext3_super_block * es = EXT3_SB(sb)->s_es;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#75: FILE: fs/ext3/ialloc.c:215:
+		desc = ext3_get_group_desc (sb, group, &bh);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#80: FILE: fs/ext3/ialloc.c:220:
+^I^Iif (!best_desc || $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#98: FILE: fs/ext3/ialloc.c:238:
+/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#99: FILE: fs/ext3/ialloc.c:239:
+ * Orlov's allocator for directories. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#100: FILE: fs/ext3/ialloc.c:240:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#103: FILE: fs/ext3/ialloc.c:243:
+ * If there are blockgroups with both free inodes and free blocks counts $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#104: FILE: fs/ext3/ialloc.c:244:
+ * not worse than average we return one with smallest directory count. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#105: FILE: fs/ext3/ialloc.c:245:
+ * Otherwise we simply return a random group. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#106: FILE: fs/ext3/ialloc.c:246:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#107: FILE: fs/ext3/ialloc.c:247:
+ * For the rest rules look so: $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#108: FILE: fs/ext3/ialloc.c:248:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#109: FILE: fs/ext3/ialloc.c:249:
+ * It's OK to put directory into a group unless $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#110: FILE: fs/ext3/ialloc.c:250:
+ * it has too many directories already (max_dirs) or $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#111: FILE: fs/ext3/ialloc.c:251:
+ * it has too few free inodes left (min_inodes) or $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#112: FILE: fs/ext3/ialloc.c:252:
+ * it has too few free blocks left (min_blocks) or $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#113: FILE: fs/ext3/ialloc.c:253:
+ * it's already running too large debt (max_debt). $

WARNING:TYPO_SPELLING: 'prefered' may be misspelled - perhaps 'preferred'?
#114: FILE: fs/ext3/ialloc.c:254:
+ * Parent's group is prefered, if it doesn't satisfy these 
                      ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#114: FILE: fs/ext3/ialloc.c:254:
+ * Parent's group is prefered, if it doesn't satisfy these $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#115: FILE: fs/ext3/ialloc.c:255:
+ * conditions we search cyclically through the rest. If none $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#116: FILE: fs/ext3/ialloc.c:256:
+ * of the groups look good we just look for a group with more $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#117: FILE: fs/ext3/ialloc.c:257:
+ * free inodes than average (starting at parent's group). $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#118: FILE: fs/ext3/ialloc.c:258:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#119: FILE: fs/ext3/ialloc.c:259:
+ * Debt is incremented each time we allocate a directory and decremented $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#120: FILE: fs/ext3/ialloc.c:260:
+ * when we allocate an inode, within 0--255. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#121: FILE: fs/ext3/ialloc.c:261:
+ */ $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'parent == sb->s_root->d_inode'
#142: FILE: fs/ext3/ialloc.c:282:
+	if ((parent == sb->s_root->d_inode) ||
+	    (parent->i_flags & EXT3_TOPDIR_FL)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#150: FILE: fs/ext3/ialloc.c:290:
+		parent_group = (unsigned)group % ngroups;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#153: FILE: fs/ext3/ialloc.c:293:
+			desc = ext3_get_group_desc (sb, group, &bh);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#193: FILE: fs/ext3/ialloc.c:333:
+		desc = ext3_get_group_desc (sb, group, &bh);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#210: FILE: fs/ext3/ialloc.c:350:
+		desc = ext3_get_group_desc (sb, group, &bh);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#241: FILE: fs/ext3/ialloc.c:381:
+	desc = ext3_get_group_desc (sb, group, &bh);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#253: FILE: fs/ext3/ialloc.c:393:
+		desc = ext3_get_group_desc (sb, group, &bh);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#265: FILE: fs/ext3/ialloc.c:405:
+		desc = ext3_get_group_desc (sb, group, &bh);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#337: FILE: fs/ext3/ialloc.c:457:
+		if (test_opt (sb, OLDALLOC))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#375: FILE: fs/ext3/ialloc.c:461:
+^I} else $

CHECK:BRACES: Unbalanced braces around else statement
#375: FILE: fs/ext3/ialloc.c:461:
+	} else 

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#389: FILE: fs/ext3/ialloc.c:473:
+	gdp = ext3_get_group_desc (sb, group, &bh2);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#392: FILE: fs/ext3/ialloc.c:475:
+	if ((ino = ext3_find_first_zero_bit((unsigned long *)bitmap_bh->b_data,

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#393: FILE: fs/ext3/ialloc.c:476:
+	if ((ino = ext3_find_first_zero_bit((unsigned long *)bitmap_bh->b_data,
 				      EXT3_INODES_PER_GROUP(sb))) <

WARNING:SPLIT_STRING: quoted string split across lines
#427: FILE: fs/ext3/ialloc.c:514:
 			    "reserved inode or inode > inodes count - "
+			    "block_group = %d, inode=%lu", group, ino);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#456: FILE: fs/ext3/ialloc.c:733:
+unsigned long ext3_count_dirs (struct super_block * sb)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#456: FILE: fs/ext3/ialloc.c:733:
+unsigned long ext3_count_dirs (struct super_block * sb)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#462: FILE: fs/ext3/ialloc.c:739:
+		struct ext3_group_desc *gdp = ext3_get_group_desc (sb, i, NULL);

WARNING:LINE_SPACING: Missing a blank line after declarations
#463: FILE: fs/ext3/ialloc.c:740:
+		struct ext3_group_desc *gdp = ext3_get_group_desc (sb, i, NULL);
+		if (!gdp)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#487: FILE: fs/ext3/super.c:1226:
+	sbi->s_debts = kmalloc(sbi->s_groups_count * sizeof(*sbi->s_debts),
+			GFP_KERNEL);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#489: FILE: fs/ext3/super.c:1228:
+		printk ("EXT3-fs: not enough memory\n");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#489: FILE: fs/ext3/super.c:1228:
+		printk ("EXT3-fs: not enough memory\n");

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#489: FILE: fs/ext3/super.c:1228:
+	if (!sbi->s_debts) {
+		printk ("EXT3-fs: not enough memory\n");

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#509: FILE: fs/ext3/super.c:1352:
+	if (sbi->s_debts)
+		kfree(sbi->s_debts);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#542: FILE: include/linux/ext3_fs.h:709:
+extern unsigned long ext3_count_dirs (struct super_block *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#542: FILE: include/linux/ext3_fs.h:709:
+extern unsigned long ext3_count_dirs (struct super_block *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#542: FILE: include/linux/ext3_fs.h:709:
+extern unsigned long ext3_count_dirs (struct super_block *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000417338.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 28 errors, 21 warnings, 5 checks, 482 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000417338.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
