WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#29: 
> We may as well kill anything under MMTIMER_INTERRUPT_SUPPORT.  IIRC, people

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#77: FILE: drivers/char/Kconfig:984:
+config MMTIMER
+	tristate "MMTIMER Memory mapped RTC for SGI Altix"
+	depends on IA64_GENERIC || IA64_SGI_SN2
+	default y
+	help
+	  The mmtimer device allows direct userspace access to the
+	  Altix system timer.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#104: FILE: drivers/char/mmtimer.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#130: FILE: drivers/char/mmtimer.c:27:
+#include <asm/uaccess.h>

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#140: FILE: drivers/char/mmtimer.c:37:
+static int mmtimer_ioctl(struct inode *inode, struct file *file, unsigned int cmd, unsigned long arg);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#146: FILE: drivers/char/mmtimer.c:43:
+static unsigned long mmtimer_femtoperiod = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:CONST_STRUCT: struct file_operations should normally be const
#148: FILE: drivers/char/mmtimer.c:45:
+static struct file_operations mmtimer_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

ERROR:SPACING: space required before the open parenthesis '('
#190: FILE: drivers/char/mmtimer.c:87:
+		if(PAGE_SIZE <= (1 << 16))

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#191: FILE: drivers/char/mmtimer.c:88:
+			ret = (((long)RTC_COUNTER_ADDR) & (PAGE_SIZE-1)) / 8;
 			                                            ^

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#193: FILE: drivers/char/mmtimer.c:90:
+			ret = -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

ERROR:SPACING: space required before the open parenthesis '('
#197: FILE: drivers/char/mmtimer.c:94:
+		if(copy_to_user((unsigned long *)arg, &mmtimer_femtoperiod, sizeof(unsigned long)))

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#202: FILE: drivers/char/mmtimer.c:99:
+		if(copy_to_user((unsigned long *)arg, &sn_rtc_cycles_per_second, sizeof(unsigned long)))

ERROR:SPACING: space required before the open parenthesis '('
#202: FILE: drivers/char/mmtimer.c:99:
+		if(copy_to_user((unsigned long *)arg, &sn_rtc_cycles_per_second, sizeof(unsigned long)))

ERROR:SPACING: space required before the open parenthesis '('
#216: FILE: drivers/char/mmtimer.c:113:
+		if(copy_to_user((unsigned long *)arg, RTC_COUNTER_ADDR, sizeof(unsigned long)))

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#220: FILE: drivers/char/mmtimer.c:117:
+		ret = -ENOSYS;

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#247: FILE: drivers/char/mmtimer.c:144:
+		return -ENOSYS;

ERROR:SPACING: space prohibited before that close parenthesis ')'
#249: FILE: drivers/char/mmtimer.c:146:
+	vma->vm_flags |= (VM_IO | VM_SHM | VM_LOCKED );

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#257: FILE: drivers/char/mmtimer.c:154:
+		printk(KERN_ERR "remap_page_range failed in mmtimer.c\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#282: FILE: drivers/char/mmtimer.c:179:
+		printk(KERN_ERR "%s: unable to determine clock frequency\n", MMTIMER_NAME);

WARNING:TYPECAST_INT_CONSTANT: Unnecessary typecast of c90 int constant - '(unsigned long)1E15' could be '1E15UL'
#286: FILE: drivers/char/mmtimer.c:183:
+	mmtimer_femtoperiod = ((unsigned long)1E15 + sn_rtc_cycles_per_second / 2) /

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#291: FILE: drivers/char/mmtimer.c:188:
+		printk(KERN_ERR "%s: failed to register device\n", MMTIMER_NAME);

WARNING:LONG_LINE: line length of 123 exceeds 100 columns
#295: FILE: drivers/char/mmtimer.c:192:
+	printk(KERN_INFO "%s: v%s, %ld MHz\n", MMTIMER_DESC, MMTIMER_VERSION, sn_rtc_cycles_per_second/(unsigned long)1E6);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#295: FILE: drivers/char/mmtimer.c:192:
+	printk(KERN_INFO "%s: v%s, %ld MHz\n", MMTIMER_DESC, MMTIMER_VERSION, sn_rtc_cycles_per_second/(unsigned long)1E6);

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#295: FILE: drivers/char/mmtimer.c:192:
+	printk(KERN_INFO "%s: v%s, %ld MHz\n", MMTIMER_DESC, MMTIMER_VERSION, sn_rtc_cycles_per_second/(unsigned long)1E6);
 	                                                                                              ^

WARNING:TYPECAST_INT_CONSTANT: Unnecessary typecast of c90 int constant - '(unsigned long)1E6' could be '1E6UL'
#295: FILE: drivers/char/mmtimer.c:192:
+	printk(KERN_INFO "%s: v%s, %ld MHz\n", MMTIMER_DESC, MMTIMER_VERSION, sn_rtc_cycles_per_second/(unsigned long)1E6);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#319: FILE: include/linux/mmtimer.h:1:
+/*

ERROR:SPACING: space required before the open parenthesis '('
#402: FILE: include/linux/mmtimer.h:84:
+	if((fd = open("/dev/"MMTIMER_NAME, O_RDONLY)) == -1) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#402: FILE: include/linux/mmtimer.h:84:
+	if((fd = open("/dev/"MMTIMER_NAME, O_RDONLY)) == -1) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#402: FILE: include/linux/mmtimer.h:84:
+	if((fd = open("/dev/"MMTIMER_NAME, O_RDONLY)) == -1) {

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

ERROR:CODE_INDENT: code indent should use tabs where possible
#407: FILE: include/linux/mmtimer.h:89:
+        /*$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:CODE_INDENT: code indent should use tabs where possible
#408: FILE: include/linux/mmtimer.h:90:
+         * Can we mmap in the counter?$

ERROR:CODE_INDENT: code indent should use tabs where possible
#409: FILE: include/linux/mmtimer.h:91:
+         */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#410: FILE: include/linux/mmtimer.h:92:
+        if((result = ioctl(fd, MMTIMER_MMAPAVAIL, 0)) == 1) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#410: FILE: include/linux/mmtimer.h:92:
+        if((result = ioctl(fd, MMTIMER_MMAPAVAIL, 0)) == 1) {$

ERROR:SPACING: space required before the open parenthesis '('
#410: FILE: include/linux/mmtimer.h:92:
+        if((result = ioctl(fd, MMTIMER_MMAPAVAIL, 0)) == 1) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#410: FILE: include/linux/mmtimer.h:92:
+        if((result = ioctl(fd, MMTIMER_MMAPAVAIL, 0)) == 1) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#410: FILE: include/linux/mmtimer.h:92:
+        if((result = ioctl(fd, MMTIMER_MMAPAVAIL, 0)) == 1) {
[...]
+        else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#411: FILE: include/linux/mmtimer.h:93:
+                printf("mmap available\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#411: FILE: include/linux/mmtimer.h:93:
+                printf("mmap available\n");$

ERROR:CODE_INDENT: code indent should use tabs where possible
#412: FILE: include/linux/mmtimer.h:94:
+^I        /* ... so try getting the offset for each clock */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#413: FILE: include/linux/mmtimer.h:95:
+^I        if((result = ioctl(fd, MMTIMER_GETOFFSET, 0)) != -ENOSYS)$

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#413: FILE: include/linux/mmtimer.h:95:
+	        if((result = ioctl(fd, MMTIMER_GETOFFSET, 0)) != -ENOSYS)

ERROR:SPACING: space required before the open parenthesis '('
#413: FILE: include/linux/mmtimer.h:95:
+	        if((result = ioctl(fd, MMTIMER_GETOFFSET, 0)) != -ENOSYS)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#413: FILE: include/linux/mmtimer.h:95:
+	        if((result = ioctl(fd, MMTIMER_GETOFFSET, 0)) != -ENOSYS)

ERROR:CODE_INDENT: code indent should use tabs where possible
#414: FILE: include/linux/mmtimer.h:96:
+^I                printf("offset: %d\n", result);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#415: FILE: include/linux/mmtimer.h:97:
+^I        else$

ERROR:CODE_INDENT: code indent should use tabs where possible
#416: FILE: include/linux/mmtimer.h:98:
+^I                printf("WARNING: offset unavailable for clock\n");$

ERROR:CODE_INDENT: code indent should use tabs where possible
#418: FILE: include/linux/mmtimer.h:100:
+        else$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#418: FILE: include/linux/mmtimer.h:100:
+        else$

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#418: FILE: include/linux/mmtimer.h:100:
+	}
+        else

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#419: FILE: include/linux/mmtimer.h:101:
+                printf("WARNING: mmap unavailable\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#419: FILE: include/linux/mmtimer.h:101:
+                printf("WARNING: mmap unavailable\n");$

ERROR:CODE_INDENT: code indent should use tabs where possible
#424: FILE: include/linux/mmtimer.h:106:
+        if((result = ioctl(fd, MMTIMER_GETRES, &val)) != -ENOSYS)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#424: FILE: include/linux/mmtimer.h:106:
+        if((result = ioctl(fd, MMTIMER_GETRES, &val)) != -ENOSYS)$

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#424: FILE: include/linux/mmtimer.h:106:
+        if((result = ioctl(fd, MMTIMER_GETRES, &val)) != -ENOSYS)

ERROR:SPACING: space required before the open parenthesis '('
#424: FILE: include/linux/mmtimer.h:106:
+        if((result = ioctl(fd, MMTIMER_GETRES, &val)) != -ENOSYS)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#424: FILE: include/linux/mmtimer.h:106:
+        if((result = ioctl(fd, MMTIMER_GETRES, &val)) != -ENOSYS)

ERROR:CODE_INDENT: code indent should use tabs where possible
#425: FILE: include/linux/mmtimer.h:107:
+                printf("resolution: %ld femtoseconds\n", val);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#425: FILE: include/linux/mmtimer.h:107:
+                printf("resolution: %ld femtoseconds\n", val);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#426: FILE: include/linux/mmtimer.h:108:
+        else$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#426: FILE: include/linux/mmtimer.h:108:
+        else$

ERROR:CODE_INDENT: code indent should use tabs where possible
#427: FILE: include/linux/mmtimer.h:109:
+                printf("ERROR: failed to get resolution\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#427: FILE: include/linux/mmtimer.h:109:
+                printf("ERROR: failed to get resolution\n");$

ERROR:CODE_INDENT: code indent should use tabs where possible
#432: FILE: include/linux/mmtimer.h:114:
+        if((result = ioctl(fd, MMTIMER_GETFREQ, &val)) != -ENOSYS)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#432: FILE: include/linux/mmtimer.h:114:
+        if((result = ioctl(fd, MMTIMER_GETFREQ, &val)) != -ENOSYS)$

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#432: FILE: include/linux/mmtimer.h:114:
+        if((result = ioctl(fd, MMTIMER_GETFREQ, &val)) != -ENOSYS)

ERROR:SPACING: space required before the open parenthesis '('
#432: FILE: include/linux/mmtimer.h:114:
+        if((result = ioctl(fd, MMTIMER_GETFREQ, &val)) != -ENOSYS)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#432: FILE: include/linux/mmtimer.h:114:
+        if((result = ioctl(fd, MMTIMER_GETFREQ, &val)) != -ENOSYS)

ERROR:SPACING: space required before the open parenthesis '('
#433: FILE: include/linux/mmtimer.h:115:
+		if(val < 10000000) /* less than 10 MHz? */

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#434: FILE: include/linux/mmtimer.h:116:
+			printf("ERROR: frequency only %ld MHz, should be >= 10 MHz\n", val/1000000);
 			                                                                  ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#436: FILE: include/linux/mmtimer.h:118:
+			printf("frequency: %ld MHz\n", val/1000000);
 			                                  ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#437: FILE: include/linux/mmtimer.h:119:
+        else$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#437: FILE: include/linux/mmtimer.h:119:
+        else$

ERROR:CODE_INDENT: code indent should use tabs where possible
#438: FILE: include/linux/mmtimer.h:120:
+                printf("ERROR: failed to get frequency\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#438: FILE: include/linux/mmtimer.h:120:
+                printf("ERROR: failed to get frequency\n");$

ERROR:CODE_INDENT: code indent should use tabs where possible
#443: FILE: include/linux/mmtimer.h:125:
+        if((result = ioctl(fd, MMTIMER_GETBITS, 0)) != -ENOSYS)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#443: FILE: include/linux/mmtimer.h:125:
+        if((result = ioctl(fd, MMTIMER_GETBITS, 0)) != -ENOSYS)$

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#443: FILE: include/linux/mmtimer.h:125:
+        if((result = ioctl(fd, MMTIMER_GETBITS, 0)) != -ENOSYS)

ERROR:SPACING: space required before the open parenthesis '('
#443: FILE: include/linux/mmtimer.h:125:
+        if((result = ioctl(fd, MMTIMER_GETBITS, 0)) != -ENOSYS)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#443: FILE: include/linux/mmtimer.h:125:
+        if((result = ioctl(fd, MMTIMER_GETBITS, 0)) != -ENOSYS)

ERROR:CODE_INDENT: code indent should use tabs where possible
#444: FILE: include/linux/mmtimer.h:126:
+                printf("bits in counter: %d\n", result);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#444: FILE: include/linux/mmtimer.h:126:
+                printf("bits in counter: %d\n", result);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#445: FILE: include/linux/mmtimer.h:127:
+        else$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#445: FILE: include/linux/mmtimer.h:127:
+        else$

ERROR:CODE_INDENT: code indent should use tabs where possible
#446: FILE: include/linux/mmtimer.h:128:
+                printf("ERROR: can't get number of bits in counter\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#446: FILE: include/linux/mmtimer.h:128:
+                printf("ERROR: can't get number of bits in counter\n");$

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#448: FILE: include/linux/mmtimer.h:130:
+	if((result = ioctl(fd, MMTIMER_GETCOUNTER, &val)) != -ENOSYS)

ERROR:SPACING: space required before the open parenthesis '('
#448: FILE: include/linux/mmtimer.h:130:
+	if((result = ioctl(fd, MMTIMER_GETCOUNTER, &val)) != -ENOSYS)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#448: FILE: include/linux/mmtimer.h:130:
+	if((result = ioctl(fd, MMTIMER_GETCOUNTER, &val)) != -ENOSYS)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000251120.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 45 errors, 38 warnings, 6 checks, 373 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000251120.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
