WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#44: 
kgdb can be told to wait for the system via kgdbwait, or you can just connect

WARNING:TYPO_SPELLING: 'arguement' may be misspelled - perhaps 'argument'?
#195: FILE: Documentation/DocBook/kgdb.tmpl:114:
+    <constant>kgdbwait</constant> after this arguement.
                                              ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'Iinclude' may be misspelled - perhaps 'Include'?
#245: FILE: Documentation/DocBook/kgdb.tmpl:164:
+!Iinclude/linux/kgdb.h
  ^^^^^^^^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#273: FILE: include/linux/debugger.h:1:
+#ifndef _DEBUGGER_H_

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:CAMELCASE: Avoid CamelCase: <exVector>
#287: FILE: include/linux/debugger.h:15:
+typedef int gdb_debug_hook(int exVector, int signo, int err_code,

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

ERROR:SPACING: space required after that ',' (ctx:VxV)
#290: FILE: include/linux/debugger.h:18:
+#define CHK_DEBUGGER(trapnr,signr,error_code,regs,after)			\
                            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#290: FILE: include/linux/debugger.h:18:
+#define CHK_DEBUGGER(trapnr,signr,error_code,regs,after)			\
                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#290: FILE: include/linux/debugger.h:18:
+#define CHK_DEBUGGER(trapnr,signr,error_code,regs,after)			\
                                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#290: FILE: include/linux/debugger.h:18:
+#define CHK_DEBUGGER(trapnr,signr,error_code,regs,after)			\
                                                  ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'regs' - possible side-effects?
#290: FILE: include/linux/debugger.h:18:
+#define CHK_DEBUGGER(trapnr,signr,error_code,regs,after)			\
+    {									\
+	if (linux_debug_hook != (gdb_debug_hook *) NULL && !user_mode(regs)) \
+	{								\
+		(*linux_debug_hook)(trapnr, signr, error_code, regs) ;	\
+		after;							\
+	}								\
+    }

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#291: FILE: include/linux/debugger.h:19:
+    {^I^I^I^I^I^I^I^I^I\$

CHECK:SPACING: No space is necessary after a cast
#292: FILE: include/linux/debugger.h:20:
+	if (linux_debug_hook != (gdb_debug_hook *) NULL && !user_mode(regs)) \

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#292: FILE: include/linux/debugger.h:20:
+	if (linux_debug_hook != (gdb_debug_hook *) NULL && !user_mode(regs)) \
+	{								\

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#297: FILE: include/linux/debugger.h:25:
+    }$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#313: FILE: include/linux/debugger.h:41:
+#define CHK_DEBUGGER(trapnr,signr,error_code,regs,after)	\
                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#313: FILE: include/linux/debugger.h:41:
+#define CHK_DEBUGGER(trapnr,signr,error_code,regs,after)	\
                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#313: FILE: include/linux/debugger.h:41:
+#define CHK_DEBUGGER(trapnr,signr,error_code,regs,after)	\
                                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#313: FILE: include/linux/debugger.h:41:
+#define CHK_DEBUGGER(trapnr,signr,error_code,regs,after)	\
                                                  ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#336: FILE: include/linux/kgdb.h:1:
+#ifndef _KGDB_H_

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#346: FILE: include/linux/kgdb.h:11:
+#include <asm/atomic.h>

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#361: FILE: include/linux/kgdb.h:26:
+extern void breakpoint(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#362: FILE: include/linux/kgdb.h:27:
+extern void kgdb_schedule_breakpoint(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#363: FILE: include/linux/kgdb.h:28:
+extern void kgdb_process_breakpoint(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#409: FILE: include/linux/kgdb.h:74:
+extern void regs_to_gdb_regs(unsigned long *gdb_regs, struct pt_regs *regs);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#423: FILE: include/linux/kgdb.h:88:
+extern void sleeping_thread_to_gdb_regs(unsigned long *gdb_regs,

WARNING:TYPO_SPELLING: 'recieved' may be misspelled - perhaps 'received'?
#428: FILE: include/linux/kgdb.h:93:
+ *	@gdb_regs: A pointer to hold the registers we've recieved from GDB.
   	                                                 ^^^^^^^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#434: FILE: include/linux/kgdb.h:99:
+extern void gdb_regs_to_regs(unsigned long *gdb_regs, struct pt_regs *regs);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#452: FILE: include/linux/kgdb.h:117:
+extern int kgdb_arch_handle_exception(int vector, int signo, int err_code,

CHECK:CAMELCASE: Avoid CamelCase: <InBuffer>
#453: FILE: include/linux/kgdb.h:118:
+				      char *InBuffer, char *outBuffer,

CHECK:CAMELCASE: Avoid CamelCase: <outBuffer>
#453: FILE: include/linux/kgdb.h:118:
+				      char *InBuffer, char *outBuffer,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#457: FILE: include/linux/kgdb.h:122:
+extern int kgdb_arch_init(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#458: FILE: include/linux/kgdb.h:123:
+extern void kgdb_disable_hw_debug(struct pt_regs *regs);

CHECK:CAMELCASE: Avoid CamelCase: <eVector>
#459: FILE: include/linux/kgdb.h:124:
+extern void kgdb_post_master_code(struct pt_regs *regs, int eVector,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#459: FILE: include/linux/kgdb.h:124:
+extern void kgdb_post_master_code(struct pt_regs *regs, int eVector,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#461: FILE: include/linux/kgdb.h:126:
+extern int kgdb_set_hw_break(unsigned long addr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#462: FILE: include/linux/kgdb.h:127:
+extern int kgdb_remove_hw_break(unsigned long addr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#463: FILE: include/linux/kgdb.h:128:
+extern void kgdb_remove_all_hw_break(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#464: FILE: include/linux/kgdb.h:129:
+extern void kgdb_correct_hw_break(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#465: FILE: include/linux/kgdb.h:130:
+extern void kgdb_shadowinfo(struct pt_regs *regs, char *buffer,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#466: FILE: include/linux/kgdb.h:131:
+			    unsigned threadid);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#467: FILE: include/linux/kgdb.h:132:
+extern struct task_struct *kgdb_get_shadow_thread(struct pt_regs *regs,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#469: FILE: include/linux/kgdb.h:134:
+extern struct pt_regs *kgdb_shadow_regs(struct pt_regs *regs, int threadid);

WARNING:TYPO_SPELLING: 'Desribe' may be misspelled - perhaps 'Describe'?
#472: FILE: include/linux/kgdb.h:137:
+ * struct kgdb_arch - Desribe architecture specific values.
                       ^^^^^^^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#492: FILE: include/linux/kgdb.h:157:
+	unsigned shadowth;

WARNING:SPACING: Unnecessary space before function pointer arguments
#493: FILE: include/linux/kgdb.h:158:
+	int (*set_breakpoint) (unsigned long, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#493: FILE: include/linux/kgdb.h:158:
+	int (*set_breakpoint) (unsigned long, char *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#493: FILE: include/linux/kgdb.h:158:
+	int (*set_breakpoint) (unsigned long, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#494: FILE: include/linux/kgdb.h:159:
+	int (*remove_breakpoint)(unsigned long, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#494: FILE: include/linux/kgdb.h:159:
+	int (*remove_breakpoint)(unsigned long, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#495: FILE: include/linux/kgdb.h:160:
+	int (*set_hw_breakpoint)(unsigned long, int, enum kgdb_bptype);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#495: FILE: include/linux/kgdb.h:160:
+	int (*set_hw_breakpoint)(unsigned long, int, enum kgdb_bptype);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#496: FILE: include/linux/kgdb.h:161:
+	int (*remove_hw_breakpoint)(unsigned long, int, enum kgdb_bptype);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#496: FILE: include/linux/kgdb.h:161:
+	int (*remove_hw_breakpoint)(unsigned long, int, enum kgdb_bptype);

WARNING:NEW_TYPEDEFS: do not add new typedefs
#500: FILE: include/linux/kgdb.h:165:
+typedef unsigned char threadref[8];

WARNING:TYPO_SPELLING: 'Desribe' may be misspelled - perhaps 'Describe'?
#503: FILE: include/linux/kgdb.h:168:
+ * struct kgdb_io - Desribe the interface for an I/O driver to talk with KGDB.
                     ^^^^^^^

WARNING:SPACING: Unnecessary space before function pointer arguments
#522: FILE: include/linux/kgdb.h:187:
+	int (*read_char) (void);

WARNING:SPACING: Unnecessary space before function pointer arguments
#523: FILE: include/linux/kgdb.h:188:
+	void (*write_char) (int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#523: FILE: include/linux/kgdb.h:188:
+	void (*write_char) (int);

WARNING:SPACING: Unnecessary space before function pointer arguments
#524: FILE: include/linux/kgdb.h:189:
+	void (*flush) (void);

WARNING:SPACING: Unnecessary space before function pointer arguments
#525: FILE: include/linux/kgdb.h:190:
+	int (*init) (void);

WARNING:SPACING: Unnecessary space before function pointer arguments
#526: FILE: include/linux/kgdb.h:191:
+	void (*late_init) (void);

WARNING:CONST_STRUCT: struct kgdb_io should normally be const
#529: FILE: include/linux/kgdb.h:194:
+extern struct kgdb_io kgdb_io_ops;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct kgdb_arch should normally be const
#530: FILE: include/linux/kgdb.h:195:
+extern struct kgdb_arch arch_kgdb_ops;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#535: FILE: include/linux/kgdb.h:200:
+extern void kgdb8250_add_port(int i, struct uart_port *serial_req);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#536: FILE: include/linux/kgdb.h:201:
+extern int init_kgdboe(void);

CHECK:CAMELCASE: Avoid CamelCase: <longValue>
#538: FILE: include/linux/kgdb.h:203:
+int kgdb_hex2long(char **ptr, long *longValue);

ERROR:SPACING: space required before the open parenthesis '('
#545: FILE: include/linux/kgdb.h:210:
+#define kgdb_process_breakpoint()      do {} while(0)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#563: FILE: kernel/kgdb.c:1:
+/*

WARNING:TYPO_SPELLING: 'Origianl' may be misspelled - perhaps 'Original'?
#595: FILE: kernel/kgdb.c:33:
+ * Origianl kgdb, compatibility with 2.1.xx kernel by David Grothe <dave@gcom.com>
    ^^^^^^^^

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#609: FILE: kernel/kgdb.c:47:
+#include <asm/uaccess.h>

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#611: FILE: kernel/kgdb.c:49:
+#include <asm/atomic.h>

WARNING:INCLUDE_LINUX: Use #include <linux/cacheflush.h> instead of <asm/cacheflush.h>
#614: FILE: kernel/kgdb.c:52:
+#include <asm/cacheflush.h>

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#619: FILE: kernel/kgdb.c:57:
+extern int pidhash_init_done;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#629: FILE: kernel/kgdb.c:67:
+int kgdb_initialized = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

WARNING:CONST_STRUCT: struct kgdb_arch should normally be const
#639: FILE: kernel/kgdb.c:77:
+struct kgdb_arch *kgdb_ops = &arch_kgdb_ops;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#644: FILE: kernel/kgdb.c:82:
+static volatile int procindebug[NR_CPUS];

WARNING:SPACING: missing space after struct definition
#662: FILE: kernel/kgdb.c:100:
+struct debuggerinfo_struct{

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#665: FILE: kernel/kgdb.c:103:
+} kgdb_info[NR_CPUS];

WARNING:TYPO_SPELLING: 'initalization' may be misspelled - perhaps 'initialization'?
#671: FILE: kernel/kgdb.c:109:
+ *	kgdb_arch_init - Perform any architecture specific initalization.
   	                                                   ^^^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'initalization' may be misspelled - perhaps 'initialization'?
#676: FILE: kernel/kgdb.c:114:
+ *	This function will handle the initalization of any architecture
   	                              ^^^^^^^^^^^^^

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#679: FILE: kernel/kgdb.c:117:
+int __attribute__ ((weak))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#680: FILE: kernel/kgdb.c:118:
+    kgdb_arch_init(void)$

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#693: FILE: kernel/kgdb.c:131:
+void __attribute__ ((weak))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#694: FILE: kernel/kgdb.c:132:
+    kgdb_disable_hw_debug(struct pt_regs *regs)$

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#702: FILE: kernel/kgdb.c:140:
+int __attribute__ ((weak))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#703: FILE: kernel/kgdb.c:141:
+    kgdb_set_hw_break(unsigned long addr)$

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#712: FILE: kernel/kgdb.c:150:
+int __attribute__ ((weak))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#713: FILE: kernel/kgdb.c:151:
+    kgdb_remove_hw_break(unsigned long addr)$

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#721: FILE: kernel/kgdb.c:159:
+void __attribute__ ((weak))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#722: FILE: kernel/kgdb.c:160:
+     kgdb_remove_all_hw_break(void)$

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#740: FILE: kernel/kgdb.c:178:
+void __attribute__ ((weak))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#741: FILE: kernel/kgdb.c:179:
+    kgdb_correct_hw_break(void)$

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#756: FILE: kernel/kgdb.c:194:
+void __attribute__ ((weak))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#757: FILE: kernel/kgdb.c:195:
+    kgdb_post_master_code(struct pt_regs *regs, int eVector, int err_code)$

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#767: FILE: kernel/kgdb.c:205:
+void __attribute__ ((weak))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#768: FILE: kernel/kgdb.c:206:
+    kgdb_shadowinfo(struct pt_regs *regs, char *buffer, unsigned threadid)$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#768: FILE: kernel/kgdb.c:206:
+    kgdb_shadowinfo(struct pt_regs *regs, char *buffer, unsigned threadid)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#781: FILE: kernel/kgdb.c:219:
+struct task_struct __attribute__ ((weak))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#782: FILE: kernel/kgdb.c:220:
+    * kgdb_get_shadow_thread(struct pt_regs *regs, int threadid)$

ERROR:SPACING: space prohibited after that '*' (ctx:ExW)
#782: FILE: kernel/kgdb.c:220:
+    * kgdb_get_shadow_thread(struct pt_regs *regs, int threadid)
     ^

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#795: FILE: kernel/kgdb.c:233:
+struct pt_regs __attribute__ ((weak))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#796: FILE: kernel/kgdb.c:234:
+    * kgdb_shadow_regs(struct pt_regs *regs, int threadid)$

ERROR:SPACING: space prohibited after that '*' (ctx:ExW)
#796: FILE: kernel/kgdb.c:234:
+    * kgdb_shadow_regs(struct pt_regs *regs, int threadid)
     ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#822: FILE: kernel/kgdb.c:260:
+		 * characters */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#897: FILE: kernel/kgdb.c:335:
+		 * packet. */

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#924: FILE: kernel/kgdb.c:362:
+	return (buf);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

CHECK:CAMELCASE: Avoid CamelCase: <numChars>
#971: FILE: kernel/kgdb.c:409:
+	int numChars = 0;

CHECK:CAMELCASE: Avoid CamelCase: <hexValue>
#972: FILE: kernel/kgdb.c:410:
+	int hexValue;

CHECK:BRACES: braces {} should be used on all arms of this statement
#978: FILE: kernel/kgdb.c:416:
+		if (hexValue >= 0) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#981: FILE: kernel/kgdb.c:419:
+		} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#997: FILE: kernel/kgdb.c:435:
+	if (kgdb_hex2long(&ptr, &addr) > 0 && *(ptr++) == ',' &&
+			kgdb_hex2long(&ptr, &length) > 0 && *(ptr++) == ':') {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1027: FILE: kernel/kgdb.c:465:
+static char *pack_threadid(char *pkt, threadref * id)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1040: FILE: kernel/kgdb.c:478:
+void int_to_threadref(threadref * id, int value)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1047: FILE: kernel/kgdb.c:485:
+		int i = 4;
+		while (i--)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1100: FILE: kernel/kgdb.c:538:
+	 * FIXME: this looks racy */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'kgdb_break[i].state == bp_enabled'
#1155: FILE: kernel/kgdb.c:593:
+		if ((kgdb_break[i].state == bp_enabled) &&
+		    (kgdb_break[i].bpt_addr == addr)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'kgdb_break[i].bpt_addr == addr'
#1155: FILE: kernel/kgdb.c:593:
+		if ((kgdb_break[i].state == bp_enabled) &&
+		    (kgdb_break[i].bpt_addr == addr)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'kgdb_break[i].bpt_addr == addr'
#1161: FILE: kernel/kgdb.c:599:
+			if ((breakno == -1) || (kgdb_break[i].bpt_addr == addr))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1169: FILE: kernel/kgdb.c:607:
+		if ((error = kgdb_ops->set_breakpoint(addr, kgdb_break[breakno].saved_instr)) < 0)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1172: FILE: kernel/kgdb.c:610:
+		if ((error = kgdb_get_mem((char *)addr, kgdb_break[breakno].saved_instr,

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1176: FILE: kernel/kgdb.c:614:
+		if ((error = kgdb_set_mem((char *)addr, kgdb_ops->gdb_bpt_instr,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1177: FILE: kernel/kgdb.c:615:
+		if ((error = kgdb_set_mem((char *)addr, kgdb_ops->gdb_bpt_instr,
+				     BREAK_INSTR_SIZE)) < 0)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'kgdb_break[i].state == bp_enabled'
#1198: FILE: kernel/kgdb.c:636:
+		if ((kgdb_break[i].state == bp_enabled) &&
+		    (kgdb_break[i].bpt_addr == addr)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'kgdb_break[i].bpt_addr == addr'
#1198: FILE: kernel/kgdb.c:636:
+		if ((kgdb_break[i].state == bp_enabled) &&
+		    (kgdb_break[i].bpt_addr == addr)) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1201: FILE: kernel/kgdb.c:639:
+				if ((error = kgdb_ops->remove_breakpoint(addr,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1202: FILE: kernel/kgdb.c:640:
+				if ((error = kgdb_ops->remove_breakpoint(addr,
+					kgdb_break[i].saved_instr)) < 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1204: FILE: kernel/kgdb.c:642:
+			} else if ((error =

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1206: FILE: kernel/kgdb.c:644:
+			     kgdb_set_mem((char *)addr,
+				     kgdb_break[i].saved_instr,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1211: FILE: kernel/kgdb.c:649:
+				flush_cache_range(current->mm->mmap_cache, addr,
+					addr + BREAK_INSTR_SIZE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1214: FILE: kernel/kgdb.c:652:
+				flush_icache_range(addr,
+					addr + BREAK_INSTR_SIZE);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1231: FILE: kernel/kgdb.c:669:
+			unsigned long addr = kgdb_break[i].bpt_addr;
+			if ((error =

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1231: FILE: kernel/kgdb.c:669:
+			if ((error =

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1233: FILE: kernel/kgdb.c:671:
+			     kgdb_set_mem((char *)addr,
+				     kgdb_break[i].saved_instr,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1238: FILE: kernel/kgdb.c:676:
+				flush_cache_range(current->mm->mmap_cache, addr,
+					addr + BREAK_INSTR_SIZE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1241: FILE: kernel/kgdb.c:679:
+				flush_icache_range(addr,
+					addr + BREAK_INSTR_SIZE);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1254: FILE: kernel/kgdb.c:692:
+	if (realpid) {
+		return realpid;
+	}

ERROR:SPACING: space required before the open parenthesis '('
#1257: FILE: kernel/kgdb.c:695:
+	if(!pidhash_init_done)

WARNING:TYPO_SPELLING: 'procesing' may be misspelled - perhaps 'processing'?
#1263: FILE: kernel/kgdb.c:701:
+ * This function does all command procesing for interfacing to gdb.
                                   ^^^^^^^^^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1280: FILE: kernel/kgdb.c:718:
+	unsigned procid;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1286: FILE: kernel/kgdb.c:724:
+	void * local_debuggerinfo;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1289: FILE: kernel/kgdb.c:727:
+	if (atomic_read(&debugger_active) == smp_processor_id() + 1) {
+		return 0;
+	}

ERROR:CODE_INDENT: code indent should use tabs where possible
#1309: FILE: kernel/kgdb.c:747:
+        /*$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:CODE_INDENT: code indent should use tabs where possible
#1310: FILE: kernel/kgdb.c:748:
+         * Don't enter if the last instance of the exception handler wanted to$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1311: FILE: kernel/kgdb.c:749:
+         * come into the debugger again.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1312: FILE: kernel/kgdb.c:750:
+         */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1313: FILE: kernel/kgdb.c:751:
+        if (atomic_read(&cpu_doing_single_step) != -1 &&$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1313: FILE: kernel/kgdb.c:751:
+        if (atomic_read(&cpu_doing_single_step) != -1 &&$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1314: FILE: kernel/kgdb.c:752:
+                atomic_read(&cpu_doing_single_step) != procid) {$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1314: FILE: kernel/kgdb.c:752:
+        if (atomic_read(&cpu_doing_single_step) != -1 &&
+                atomic_read(&cpu_doing_single_step) != procid) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1314: FILE: kernel/kgdb.c:752:
+                atomic_read(&cpu_doing_single_step) != procid) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1315: FILE: kernel/kgdb.c:753:
+                atomic_set(&debugger_active, 0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1315: FILE: kernel/kgdb.c:753:
+                atomic_set(&debugger_active, 0);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1316: FILE: kernel/kgdb.c:754:
+                goto acquirelock;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1316: FILE: kernel/kgdb.c:754:
+                goto acquirelock;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1317: FILE: kernel/kgdb.c:755:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1317: FILE: kernel/kgdb.c:755:
+        }$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 15)
#1324: FILE: kernel/kgdb.c:762:
+	if(!debugger_step || !kgdb_contthread ){
+               for (i = 0; i < num_online_cpus(); i++) {

ERROR:SPACING: space required before the open brace '{'
#1324: FILE: kernel/kgdb.c:762:
+	if(!debugger_step || !kgdb_contthread ){

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1324: FILE: kernel/kgdb.c:762:
+	if(!debugger_step || !kgdb_contthread ){

ERROR:SPACING: space required before the open parenthesis '('
#1324: FILE: kernel/kgdb.c:762:
+	if(!debugger_step || !kgdb_contthread ){

ERROR:CODE_INDENT: code indent should use tabs where possible
#1325: FILE: kernel/kgdb.c:763:
+               for (i = 0; i < num_online_cpus(); i++) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1325: FILE: kernel/kgdb.c:763:
+               for (i = 0; i < num_online_cpus(); i++) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#1325: FILE: kernel/kgdb.c:763:
+               for (i = 0; i < num_online_cpus(); i++) {
+                       spin_lock(&slavecpulocks[i]);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1325: FILE: kernel/kgdb.c:763:
+               for (i = 0; i < num_online_cpus(); i++) {
+                       spin_lock(&slavecpulocks[i]);
+               }

ERROR:CODE_INDENT: code indent should use tabs where possible
#1326: FILE: kernel/kgdb.c:764:
+                       spin_lock(&slavecpulocks[i]);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1326: FILE: kernel/kgdb.c:764:
+                       spin_lock(&slavecpulocks[i]);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1327: FILE: kernel/kgdb.c:765:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1327: FILE: kernel/kgdb.c:765:
+               }$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1331: FILE: kernel/kgdb.c:769:
+	 * need one here */

ERROR:CODE_INDENT: code indent should use tabs where possible
#1341: FILE: kernel/kgdb.c:779:
+        kgdb_contthread = NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1341: FILE: kernel/kgdb.c:779:
+        kgdb_contthread = NULL;$

WARNING:LINE_SPACING: Missing a blank line after declarations
#1362: FILE: kernel/kgdb.c:800:
+		char *bpt_type;
+		error = 0;

WARNING:TYPO_SPELLING: 'incase' may be misspelled - perhaps 'in case'?
#1373: FILE: kernel/kgdb.c:811:
+			 * we clear out our breakpoints now incase
 			                                    ^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1374: FILE: kernel/kgdb.c:812:
+			 * GDB is reconnecting. */

ERROR:SPACING: space required before the open brace '{'
#1384: FILE: kernel/kgdb.c:822:
+			if (!thread){

ERROR:SPACING: space required before the open brace '{'
#1388: FILE: kernel/kgdb.c:826:
+			else{

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1388: FILE: kernel/kgdb.c:826:
+			}
+			else{

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#1388: FILE: kernel/kgdb.c:826:
+			else{

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1390: FILE: kernel/kgdb.c:828:
+				for_each_online_cpu (i) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1403: FILE: kernel/kgdb.c:841:
+			/* All threads that don't have debuggerinfo should be
+			   in __schedule() sleeping, since all other CPUs

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1404: FILE: kernel/kgdb.c:842:
+			   are in kgdb_wait, and thus have debuggerinfo. */

CHECK:BRACES: braces {} should be used on all arms of this statement
#1406: FILE: kernel/kgdb.c:844:
+			if (kgdb_usethreadid >= pid_max + num_online_cpus()) {
[...]
+			} else if (local_debuggerinfo)
[...]
+			else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1420: FILE: kernel/kgdb.c:858:
+			else {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1424: FILE: kernel/kgdb.c:862:
+				 * This should be enough for a stack trace. */

CHECK:BRACES: braces {} should be used on all arms of this statement
#1435: FILE: kernel/kgdb.c:873:
+			if (kgdb_usethread && kgdb_usethread != current)
[...]
+			else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1437: FILE: kernel/kgdb.c:875:
+			else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#1447: FILE: kernel/kgdb.c:885:
+			if (kgdb_hex2long(&ptr, &addr) > 0 && *ptr++ == ',' &&
[...]
+			} else
[...]

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1449: FILE: kernel/kgdb.c:887:
+				if (IS_ERR(ptr = kgdb_mem2hex((char *)addr,

CHECK:BRACES: Unbalanced braces around else statement
#1454: FILE: kernel/kgdb.c:892:
+			} else

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1460: FILE: kernel/kgdb.c:898:
+			if (IS_ERR(ptr = write_mem_msg(0)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1467: FILE: kernel/kgdb.c:905:
+			if (IS_ERR(ptr = write_mem_msg(1)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1477: FILE: kernel/kgdb.c:915:
+			if ((error = remove_all_break()) < 0) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1503: FILE: kernel/kgdb.c:941:
+				if (remcom_in_buffer[1] == 'f') {
+					threadid = 1;
+				}

WARNING:LINE_SPACING: Missing a blank line after declarations
#1560: FILE: kernel/kgdb.c:998:
+					static char tmpstr[23 + BUF_THREAD_ID_SIZE];
+					sprintf(tmpstr, "Shadow task %d"

WARNING:SPLIT_STRING: quoted string split across lines
#1561: FILE: kernel/kgdb.c:999:
+					sprintf(tmpstr, "Shadow task %d"
+						" for pid 0",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1626: FILE: kernel/kgdb.c:1064:
+
+

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1632: FILE: kernel/kgdb.c:1070:
+			}
+			else if (*bpt_type != '0' && *bpt_type != '1')

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1636: FILE: kernel/kgdb.c:1074:
+			 * if we support it. */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1638: FILE: kernel/kgdb.c:1076:
+			if ((*bpt_type == '1' ||
+				(*bpt_type >= '1' && kgdb_ops->set_hw_breakpoint)) &&

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1647: FILE: kernel/kgdb.c:1085:
+			}
+			else if (kgdb_hex2long(&ptr, &addr)) {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1653: FILE: kernel/kgdb.c:1091:
+			}
+			else {

CHECK:BRACES: Unbalanced braces around else statement
#1653: FILE: kernel/kgdb.c:1091:
+			else {

CHECK:SPACING: No space is necessary after a cast
#1668: FILE: kernel/kgdb.c:1106:
+					(int) length, *bpt_type);

CHECK:SPACING: No space is necessary after a cast
#1671: FILE: kernel/kgdb.c:1109:
+					(int) length, *bpt_type);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1680: FILE: kernel/kgdb.c:1118:
+                case 'c':$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1680: FILE: kernel/kgdb.c:1118:
+                case 'c':$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1681: FILE: kernel/kgdb.c:1119:
+                case 's':$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1681: FILE: kernel/kgdb.c:1119:
+                case 's':$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1682: FILE: kernel/kgdb.c:1120:
+                        if (kgdb_contthread && kgdb_contthread != current) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1682: FILE: kernel/kgdb.c:1120:
+                        if (kgdb_contthread && kgdb_contthread != current) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1683: FILE: kernel/kgdb.c:1121:
+                                /* Can't switch threads in kgdb */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1684: FILE: kernel/kgdb.c:1122:
+                                error_packet(remcom_out_buffer, -EINVAL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1684: FILE: kernel/kgdb.c:1122:
+                                error_packet(remcom_out_buffer, -EINVAL);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1685: FILE: kernel/kgdb.c:1123:
+                                break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1685: FILE: kernel/kgdb.c:1123:
+                                break;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1686: FILE: kernel/kgdb.c:1124:
+                        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1686: FILE: kernel/kgdb.c:1124:
+                        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1688: FILE: kernel/kgdb.c:1126:
+                        /* Followthrough to default processing */$

WARNING:INDENTED_LABEL: labels should not be indented
#1691: FILE: kernel/kgdb.c:1129:
+		      default_handle:

WARNING:INDENTED_LABEL: labels should not be indented
#1708: FILE: kernel/kgdb.c:1146:
+      kgdb_exit:

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 15)
#1713: FILE: kernel/kgdb.c:1151:
+	if(!debugger_step || !kgdb_contthread){
+               for (i = 0; i < num_online_cpus(); i++) {

ERROR:SPACING: space required before the open brace '{'
#1713: FILE: kernel/kgdb.c:1151:
+	if(!debugger_step || !kgdb_contthread){

ERROR:SPACING: space required before the open parenthesis '('
#1713: FILE: kernel/kgdb.c:1151:
+	if(!debugger_step || !kgdb_contthread){

ERROR:CODE_INDENT: code indent should use tabs where possible
#1714: FILE: kernel/kgdb.c:1152:
+               for (i = 0; i < num_online_cpus(); i++) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1714: FILE: kernel/kgdb.c:1152:
+               for (i = 0; i < num_online_cpus(); i++) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#1714: FILE: kernel/kgdb.c:1152:
+               for (i = 0; i < num_online_cpus(); i++) {
+                       spin_unlock(&slavecpulocks[i]);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1714: FILE: kernel/kgdb.c:1152:
+               for (i = 0; i < num_online_cpus(); i++) {
+                       spin_unlock(&slavecpulocks[i]);
+               }

ERROR:CODE_INDENT: code indent should use tabs where possible
#1715: FILE: kernel/kgdb.c:1153:
+                       spin_unlock(&slavecpulocks[i]);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1715: FILE: kernel/kgdb.c:1153:
+                       spin_unlock(&slavecpulocks[i]);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1716: FILE: kernel/kgdb.c:1154:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1716: FILE: kernel/kgdb.c:1154:
+               }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1717: FILE: kernel/kgdb.c:1155:
+               /* Wait till all the processors have quit$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1718: FILE: kernel/kgdb.c:1156:
+                * from the debugger$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1719: FILE: kernel/kgdb.c:1157:
+               */$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1719: FILE: kernel/kgdb.c:1157:
+                * from the debugger
+               */

ERROR:CODE_INDENT: code indent should use tabs where possible
#1720: FILE: kernel/kgdb.c:1158:
+               for_each_online_cpu (i) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1720: FILE: kernel/kgdb.c:1158:
+               for_each_online_cpu (i) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#1720: FILE: kernel/kgdb.c:1158:
+               for_each_online_cpu (i) {
+                       while (procindebug[i]) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1720: FILE: kernel/kgdb.c:1158:
+               for_each_online_cpu (i) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#1721: FILE: kernel/kgdb.c:1159:
+                       while (procindebug[i]) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1721: FILE: kernel/kgdb.c:1159:
+                       while (procindebug[i]) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (23, 31)
#1721: FILE: kernel/kgdb.c:1159:
+                       while (procindebug[i]) {
+                               int j = 10;     /* an arbitrary number */

ERROR:CODE_INDENT: code indent should use tabs where possible
#1722: FILE: kernel/kgdb.c:1160:
+                               int j = 10;     /* an arbitrary number */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1722: FILE: kernel/kgdb.c:1160:
+                               int j = 10;     /* an arbitrary number */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1724: FILE: kernel/kgdb.c:1162:
+                               while (--j)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1724: FILE: kernel/kgdb.c:1162:
+                               while (--j)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (31, 39)
#1724: FILE: kernel/kgdb.c:1162:
+                               while (--j)
+                                       cpu_relax();

ERROR:CODE_INDENT: code indent should use tabs where possible
#1725: FILE: kernel/kgdb.c:1163:
+                                       cpu_relax();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1725: FILE: kernel/kgdb.c:1163:
+                                       cpu_relax();$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1726: FILE: kernel/kgdb.c:1164:
+                               barrier();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1726: FILE: kernel/kgdb.c:1164:
+                               barrier();$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1727: FILE: kernel/kgdb.c:1165:
+                       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1727: FILE: kernel/kgdb.c:1165:
+                       }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1728: FILE: kernel/kgdb.c:1166:
+                }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1728: FILE: kernel/kgdb.c:1166:
+                }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1729: FILE: kernel/kgdb.c:1167:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1729: FILE: kernel/kgdb.c:1167:
+        }$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1779: FILE: kernel/kgdb.c:1217:
+	if (!procindebug[cpu] && atomic_read(&debugger_active) != (cpu + 1)) {
+		kgdb_wait((struct pt_regs *)regs);
+	}

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1793: FILE: kernel/kgdb.c:1231:
+	for (i = 0; i < NR_CPUS; i++)

ERROR:SPACING: space required before the open parenthesis '('
#1826: FILE: kernel/kgdb.c:1264:
+	if(!CHECK_EXCEPTION_STACK()) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#1834: FILE: kernel/kgdb.c:1272:
+        atomic_set(&cpu_doing_single_step,-1);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1834: FILE: kernel/kgdb.c:1272:
+        atomic_set(&cpu_doing_single_step,-1);$

ERROR:SPACING: space required after that ',' (ctx:VxO)
#1834: FILE: kernel/kgdb.c:1272:
+        atomic_set(&cpu_doing_single_step,-1);
                                          ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#1834: FILE: kernel/kgdb.c:1272:
+        atomic_set(&cpu_doing_single_step,-1);
                                           ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1838: FILE: kernel/kgdb.c:1276:
+	printk("Got back %d\n", ret);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1842: FILE: kernel/kgdb.c:1280:
+		printk("Going away\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1873: FILE: kernel/kgdb.c:1311:
+			printk(KERN_ERR "Could not setup I/O for KGDB.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#1884: FILE: kernel/kgdb.c:1322:
+		printk(KERN_CRIT "Waiting for connection from remote gdb...\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#1903: FILE: kernel/kgdb.c:1341:
+			printk(KERN_CRIT "Waiting for connection from remote "

WARNING:SPLIT_STRING: quoted string split across lines
#1904: FILE: kernel/kgdb.c:1342:
+			printk(KERN_CRIT "Waiting for connection from remote "
+					"gdb...\n");

CHECK:BRACES: Unbalanced braces around else statement
#1905: FILE: kernel/kgdb.c:1343:
+		else {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#1906: FILE: kernel/kgdb.c:1344:
+			printk(KERN_CRIT "KGDB cannot initialize I/O yet.\n");

WARNING:MEMORY_BARRIER: memory barrier without comment
#1912: FILE: kernel/kgdb.c:1350:
+	wmb();

WARNING:MEMORY_BARRIER: memory barrier without comment
#1914: FILE: kernel/kgdb.c:1352:
+	wmb();

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1923: FILE: kernel/kgdb.c:1361:
+	printk("Entering GDB stub\n");

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1926: FILE: kernel/kgdb.c:1364:
+}
+static struct sysrq_key_op sysrq_gdb_op = {

ERROR:CODE_INDENT: code indent should use tabs where possible
#1927: FILE: kernel/kgdb.c:1365:
+        .handler        = sysrq_handle_gdb,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1927: FILE: kernel/kgdb.c:1365:
+        .handler        = sysrq_handle_gdb,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1928: FILE: kernel/kgdb.c:1366:
+        .help_msg       = "Gdb",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1928: FILE: kernel/kgdb.c:1366:
+        .help_msg       = "Gdb",$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1929: FILE: kernel/kgdb.c:1367:
+        .action_msg     = "GDB",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1929: FILE: kernel/kgdb.c:1367:
+        .action_msg     = "GDB",$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1934: FILE: kernel/kgdb.c:1372:
+	printk("Registering GDB sysrq handler\n");

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1952: FILE: kernel/kgdb.c:1390:
+}
+early_param("kgdbwait", opt_kgdb_enter);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000235826.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 82 errors, 142 warnings, 60 checks, 1931 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000235826.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
