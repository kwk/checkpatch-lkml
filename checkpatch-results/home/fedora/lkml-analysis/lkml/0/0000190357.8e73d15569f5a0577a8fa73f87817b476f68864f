WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#27: 
introduces.  Remove one old race workaround in NMI watchdog setup that is not

CHECK:LINE_SPACING: Please don't use multiple blank lines
#101: FILE: arch/x86_64/kernel/smpboot.c:39:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#110: FILE: arch/x86_64/kernel/smpboot.c:61:
+/* Change for real CPU hotplug. Note other files need to be fixed
+   first too. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#110: FILE: arch/x86_64/kernel/smpboot.c:61:
+   first too. */

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#126: FILE: arch/x86_64/kernel/smpboot.c:76:
+EXPORT_SYMBOL(cpu_online_map);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#154: FILE: arch/x86_64/kernel/smpboot.c:101:
+extern unsigned char trampoline_data[];

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#155: FILE: arch/x86_64/kernel/smpboot.c:102:
+extern unsigned char trampoline_end[];

WARNING:MISPLACED_INIT: __cpuinitdata should be placed after tsc_flag
#195: FILE: arch/x86_64/kernel/smpboot.c:138:
+static atomic_t __cpuinitdata tsc_flag;

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

CHECK:CAMELCASE: Avoid CamelCase: <Dprintk>
#305: FILE: arch/x86_64/kernel/smpboot.c:160:
+	Dprintk("AP %d syncing TSC\n", smp_processor_id());

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:MEMORY_BARRIER: memory barrier without comment
#314: FILE: arch/x86_64/kernel/smpboot.c:165:
+	mb();

WARNING:MEMORY_BARRIER: memory barrier without comment
#319: FILE: arch/x86_64/kernel/smpboot.c:170:
+	mb();

WARNING:MEMORY_BARRIER: memory barrier without comment
#321: FILE: arch/x86_64/kernel/smpboot.c:172:
+	mb();

WARNING:LINE_SPACING: Missing a blank line after declarations
#376: FILE: arch/x86_64/kernel/smpboot.c:210:
+	int i;
+	for (i = 0; i < NR_LOOPS - 1; i++) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#381: FILE: arch/x86_64/kernel/smpboot.c:215:
+	printk(KERN_INFO "Synced TSC of CPU %d difference %Ld\n",

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#381: FILE: arch/x86_64/kernel/smpboot.c:215:
+	printk(KERN_INFO "Synced TSC of CPU %d difference %Ld\n",

WARNING:TYPO_SPELLING: 'comming' may be misspelled - perhaps 'coming'?
#433: FILE: arch/x86_64/kernel/smpboot.c:306:
+ * Setup code on secondary processor (after comming out of the trampoline)
                                             ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:MEMORY_BARRIER: memory barrier without comment
#482: FILE: arch/x86_64/kernel/smpboot.c:344:
+	mb();

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#488: FILE: arch/x86_64/kernel/smpboot.c:349:
+extern volatile unsigned long init_rsp;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#534: FILE: arch/x86_64/kernel/smpboot.c:531:
+		printk("failed fork for CPU %d\n", cpu);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#550: FILE: arch/x86_64/kernel/smpboot.c:545:
+	printk(KERN_INFO "Booting processor %d/%d rip %lx rsp %lx\n", cpu, apicid,

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#609: FILE: arch/x86_64/kernel/smpboot.c:644:
+	for (cpu = 0; cpu < NR_CPUS; cpu++) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#614: FILE: arch/x86_64/kernel/smpboot.c:649:
+	for_each_online_cpu (cpu) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#618: FILE: arch/x86_64/kernel/smpboot.c:653:
+		int i;
+		if (smp_num_siblings > 1) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#619: FILE: arch/x86_64/kernel/smpboot.c:654:
+			for_each_online_cpu (i) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#631: FILE: arch/x86_64/kernel/smpboot.c:666:
+			printk(KERN_WARNING

CHECK:BRACES: braces {} should be used on all arms of this statement
#636: FILE: arch/x86_64/kernel/smpboot.c:671:
+		if (c->x86_num_cores > 1) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#641: FILE: arch/x86_64/kernel/smpboot.c:676:
+		} else

CHECK:SPACING: No space is necessary after a cast
#665: FILE: arch/x86_64/kernel/smpboot.c:695:
+	*((volatile int *) phys_to_virt(0x467)) = 0;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#665: FILE: arch/x86_64/kernel/smpboot.c:695:
+	*((volatile int *) phys_to_virt(0x467)) = 0;

CHECK:SPACING: No space is necessary after a cast
#680: FILE: arch/x86_64/kernel/smpboot.c:704:
+	free_page((unsigned long) __va(PAGE_SIZE));

CHECK:SPACING: No space is necessary after a cast
#681: FILE: arch/x86_64/kernel/smpboot.c:705:
+	free_page((unsigned long) __va(SMP_TRAMPOLINE_BASE));

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#705: FILE: arch/x86_64/kernel/smpboot.c:729:
+static __cpuinit void enforce_max_cpus(unsigned max_cpus)

WARNING:LINE_SPACING: Missing a blank line after declarations
#708: FILE: arch/x86_64/kernel/smpboot.c:732:
+	int i, k;
+	k = 0;

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#709: FILE: arch/x86_64/kernel/smpboot.c:733:
+	for (i = 0; i < NR_CPUS; i++) {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#722: FILE: arch/x86_64/kernel/smpboot.c:746:
+static int __cpuinit smp_sanity_check(unsigned max_cpus)

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#840: FILE: arch/x86_64/kernel/smpboot.c:817:
+	for (i = 0; i < NR_CPUS; i++) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#842: FILE: arch/x86_64/kernel/smpboot.c:819:
+		int apicid = cpu_present_to_apicid(i);
+		if (physid_isset(apicid, phys_cpu_present_map)) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#845: FILE: arch/x86_64/kernel/smpboot.c:822:
+			/* possible map would be different if we supported real
+			   CPU hotplug. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#845: FILE: arch/x86_64/kernel/smpboot.c:822:
+			   CPU hotplug. */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#868: FILE: arch/x86_64/kernel/smpboot.c:828:
+		printk(KERN_INFO "SMP disabled\n");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#873: FILE: arch/x86_64/kernel/smpboot.c:833:
 
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#966: FILE: arch/x86_64/kernel/smpboot.c:868:
+	int me = smp_processor_id();
+	cpu_set(me, cpu_online_map);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#997: FILE: arch/x86_64/kernel/smpboot.c:889:
+		printk("__cpu_up: bad cpu %d\n", cpu);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using '__cpu_up', this function's name, in a string
#997: FILE: arch/x86_64/kernel/smpboot.c:889:
+		printk("__cpu_up: bad cpu %d\n", cpu);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1072: FILE: arch/x86_64/kernel/smp.c:429:
+	for (i = 0; i < NR_CPUS; ++i) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1078: FILE: arch/x86_64/kernel/smp.c:435:
+	 * or called too early.  Either way, we must be CPU 0. */

ERROR:CODE_INDENT: code indent should use tabs where possible
#1079: FILE: arch/x86_64/kernel/smp.c:436:
+      ^Iif (x86_cpu_to_apicid[0] == BAD_APICID)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1079: FILE: arch/x86_64/kernel/smp.c:436:
+      ^Iif (x86_cpu_to_apicid[0] == BAD_APICID)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1079: FILE: arch/x86_64/kernel/smp.c:436:
+      ^Iif (x86_cpu_to_apicid[0] == BAD_APICID)$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1124: FILE: include/asm-x86_64/proto.h:32:
+extern void time_init_gtod(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1173: FILE: include/asm-x86_64/smp.h:79:
+extern int safe_smp_processor_id(void);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000190357.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 40 warnings, 10 checks, 1088 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000190357.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
