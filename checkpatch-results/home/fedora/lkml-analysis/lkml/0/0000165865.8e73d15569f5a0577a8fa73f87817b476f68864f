CHECK:CAMELCASE: Avoid CamelCase: <HvEsidsToMap>
#54: FILE: include/asm-ppc64/iSeries/LparMap.h:52:
+#define HvEsidsToMap	2

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <HvRangesToMap>
#55: FILE: include/asm-ppc64/iSeries/LparMap.h:53:
+#define HvRangesToMap	1

CHECK:CAMELCASE: Avoid CamelCase: <xNumberEsids>
#64: FILE: include/asm-ppc64/iSeries/LparMap.h:59:
+	u64	xNumberEsids;	// Number of ESID/VSID pairs

CHECK:CAMELCASE: Avoid CamelCase: <xNumberRanges>
#65: FILE: include/asm-ppc64/iSeries/LparMap.h:60:
+	u64	xNumberRanges;	// Number of VA ranges to map

CHECK:CAMELCASE: Avoid CamelCase: <xSegmentTableOffs>
#66: FILE: include/asm-ppc64/iSeries/LparMap.h:61:
+	u64	xSegmentTableOffs; // Page number within load area of seg table

CHECK:CAMELCASE: Avoid CamelCase: <xKernelEsid>
#74: FILE: include/asm-ppc64/iSeries/LparMap.h:64:
+		u64	xKernelEsid;	// Esid used to map kernel load

CHECK:CAMELCASE: Avoid CamelCase: <xKernelVsid>
#75: FILE: include/asm-ppc64/iSeries/LparMap.h:65:
+		u64	xKernelVsid;	// Vsid used to map kernel load

CHECK:CAMELCASE: Avoid CamelCase: <xEsids>
#76: FILE: include/asm-ppc64/iSeries/LparMap.h:66:
+	} xEsids[HvEsidsToMap];

CHECK:CAMELCASE: Avoid CamelCase: <xPages>
#78: FILE: include/asm-ppc64/iSeries/LparMap.h:68:
+		u64	xPages;		// Number of pages to be mapped

CHECK:CAMELCASE: Avoid CamelCase: <xOffset>
#79: FILE: include/asm-ppc64/iSeries/LparMap.h:69:
+		u64	xOffset;	// Offset from start of load area

CHECK:CAMELCASE: Avoid CamelCase: <xVPN>
#80: FILE: include/asm-ppc64/iSeries/LparMap.h:70:
+		u64	xVPN;		// Virtual Page Number

CHECK:CAMELCASE: Avoid CamelCase: <xRanges>
#81: FILE: include/asm-ppc64/iSeries/LparMap.h:71:
+	} xRanges[HvRangesToMap];

CHECK:CAMELCASE: Avoid CamelCase: <xFlags>
#110: FILE: include/asm-ppc64/iSeries/HvReleaseData.h:54:
+	u16	xFlags;

WARNING:TYPO_SPELLING: 'contraints' may be misspelled - perhaps 'constraints'?
#135: FILE: arch/ppc64/kernel/LparData.c:49:
+ * file scope asms don't allow contraints.  We want to use the "i"
                                ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#140: FILE: arch/ppc64/kernel/LparData.c:54:
+#if 0

CHECK:CAMELCASE: Avoid CamelCase: <xMsNucDataOffset>
#152: FILE: arch/ppc64/kernel/LparData.c:60:
+	.xMsNucDataOffset = (u32)((unsigned long)&xLparMap - KERNELBASE),

CHECK:CAMELCASE: Avoid CamelCase: <xLparMap>
#152: FILE: arch/ppc64/kernel/LparData.c:60:
+	.xMsNucDataOffset = (u32)((unsigned long)&xLparMap - KERNELBASE),

CHECK:LINE_SPACING: Please don't use multiple blank lines
#167: FILE: arch/ppc64/kernel/LparData.c:75:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <HvReleaseData>
#168: FILE: arch/ppc64/kernel/LparData.c:76:
+extern struct HvReleaseData hvReleaseData;

CHECK:CAMELCASE: Avoid CamelCase: <hvReleaseData>
#168: FILE: arch/ppc64/kernel/LparData.c:76:
+extern struct HvReleaseData hvReleaseData;

CHECK:CAMELCASE: Avoid CamelCase: <hvReleaseData_wrapper>
#170: FILE: arch/ppc64/kernel/LparData.c:78:
+static void __attribute_used__ hvReleaseData_wrapper(void)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#173: FILE: arch/ppc64/kernel/LparData.c:81:
+	asm volatile (

CHECK:CAMELCASE: Avoid CamelCase: <xItVpdAreas>
#195: FILE: arch/ppc64/kernel/LparData.c:103:
+		"i"(offsetof(struct naca_struct, xItVpdAreas)),

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#203: FILE: arch/ppc64/kernel/LparData.c:111:
+struct LparMap __attribute__((aligned (16))) xLparMap = {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <LparMap>
#203: FILE: arch/ppc64/kernel/LparData.c:111:
+struct LparMap __attribute__((aligned (16))) xLparMap = {

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(16) over __attribute__((aligned(16)))
#203: FILE: arch/ppc64/kernel/LparData.c:111:
+struct LparMap __attribute__((aligned (16))) xLparMap = {

CHECK:CAMELCASE: Avoid CamelCase: <HvPagesToMap>
#216: FILE: arch/ppc64/kernel/LparData.c:124:
+		{ .xPages = HvPagesToMap,

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000165865.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 0 errors, 4 warnings, 23 checks, 210 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000165865.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
