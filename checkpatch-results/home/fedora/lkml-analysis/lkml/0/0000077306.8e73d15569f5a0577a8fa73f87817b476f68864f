WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#25: 
operations are separated to a common module. This module handles effect type

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#56: FILE: drivers/input/ff-effects.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#74: FILE: drivers/input/ff-effects.c:19:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#75: FILE: drivers/input/ff-effects.c:20:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#89: FILE: drivers/input/ff-effects.c:34:
+#define debug(format, arg...) printk(KERN_DEBUG "ff-effects: " format "\n" , ## arg)

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#89: FILE: drivers/input/ff-effects.c:34:
+#define debug(format, arg...) printk(KERN_DEBUG "ff-effects: " format "\n" , ## arg)
                                                                            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#104: FILE: drivers/input/ff-effects.c:49:
+EXPORT_SYMBOL(input_ff_allocate);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#105: FILE: drivers/input/ff-effects.c:50:
+EXPORT_SYMBOL(input_ff_register);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#106: FILE: drivers/input/ff-effects.c:51:
+EXPORT_SYMBOL(input_ff_upload);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#107: FILE: drivers/input/ff-effects.c:52:
+EXPORT_SYMBOL(input_ff_erase);

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_ff' - possible side-effects?
#109: FILE: drivers/input/ff-effects.c:54:
+#define spin_ff_cond_lock(_ff, _flags)					  \
+	do {								  \
+		if (!_ff->driver->playback)				  \
+			spin_lock_irqsave(&_ff->atomiclock, _flags);	  \
+	} while (0);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument '_ff' may be better as '(_ff)' to avoid precedence issues
#109: FILE: drivers/input/ff-effects.c:54:
+#define spin_ff_cond_lock(_ff, _flags)					  \
+	do {								  \
+		if (!_ff->driver->playback)				  \
+			spin_lock_irqsave(&_ff->atomiclock, _flags);	  \
+	} while (0);

WARNING:DO_WHILE_MACRO_WITH_TRAILING_SEMICOLON: do {} while (0) macros should not be semicolon terminated
#109: FILE: drivers/input/ff-effects.c:54:
+#define spin_ff_cond_lock(_ff, _flags)					  \
+	do {								  \
+		if (!_ff->driver->playback)				  \
+			spin_lock_irqsave(&_ff->atomiclock, _flags);	  \
+	} while (0);

do {} while(0) macros should not have a trailing semicolon.

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_ff' - possible side-effects?
#115: FILE: drivers/input/ff-effects.c:60:
+#define spin_ff_cond_unlock(_ff, _flags)					  \
+	do {								  \
+		if (!_ff->driver->playback)				  \
+			spin_unlock_irqrestore(&_ff->atomiclock, _flags); \
+	} while (0);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument '_ff' may be better as '(_ff)' to avoid precedence issues
#115: FILE: drivers/input/ff-effects.c:60:
+#define spin_ff_cond_unlock(_ff, _flags)					  \
+	do {								  \
+		if (!_ff->driver->playback)				  \
+			spin_unlock_irqrestore(&_ff->atomiclock, _flags); \
+	} while (0);

WARNING:DO_WHILE_MACRO_WITH_TRAILING_SEMICOLON: do {} while (0) macros should not be semicolon terminated
#115: FILE: drivers/input/ff-effects.c:60:
+#define spin_ff_cond_unlock(_ff, _flags)					  \
+	do {								  \
+		if (!_ff->driver->playback)				  \
+			spin_unlock_irqrestore(&_ff->atomiclock, _flags); \
+	} while (0);

WARNING:LINE_SPACING: Missing a blank line after declarations
#124: FILE: drivers/input/ff-effects.c:69:
+	struct ff_device *ff = dev->ff;
+	if (id < dev->ff_effects_max && id >= 0 && test_bit(FF_EFFECT_USED, ff->effects[id].flags))

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LONG_LINE: line length of 123 exceeds 100 columns
#133: FILE: drivers/input/ff-effects.c:78:
+static int input_ff_envelope_time(struct ff_effect_status *effect, struct ff_envelope *envelope, unsigned long *event_time)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LINE_SPACING: Missing a blank line after declarations
#136: FILE: drivers/input/ff-effects.c:81:
+	unsigned long fade_start;
+	if (!envelope)

WARNING:LONG_LINE: line length of 129 exceeds 100 columns
#139: FILE: drivers/input/ff-effects.c:84:
+	if (envelope->attack_length && time_after(effect->play_at + msecs_to_jiffies(envelope->attack_length), effect->adj_at)) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#166: FILE: drivers/input/ff-effects.c:111:
+	unsigned long next_time = 0;
+	debug("calculating next timer");

CHECK:BRACES: braces {} should be used on all arms of this statement
#173: FILE: drivers/input/ff-effects.c:118:
+			if (test_bit(FF_EFFECT_PLAYING, ff->effects[i].flags)) {
[...]
+			} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#174: FILE: drivers/input/ff-effects.c:119:
+				event_time = ff->effects[i].stop_at = jiffies;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:BRACES: Unbalanced braces around else statement
#176: FILE: drivers/input/ff-effects.c:121:
+			} else

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#188: FILE: drivers/input/ff-effects.c:133:
+				event_set = input_ff_envelope_time(&ff->effects[i], envelope, &event_time);

CHECK:BRACES: braces {} should be used on all arms of this statement
#204: FILE: drivers/input/ff-effects.c:149:
+		if (events == 1)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#206: FILE: drivers/input/ff-effects.c:151:
+		else {

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#228: FILE: drivers/input/ff-effects.c:173:
+static int input_ff_envelope(struct ff_effect_status *effect, int value, struct ff_envelope *envelope)

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#236: FILE: drivers/input/ff-effects.c:181:
+	if (envelope->attack_length && time_after(effect->play_at + msecs_to_jiffies(envelope->attack_length),

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#243: FILE: drivers/input/ff-effects.c:188:
+			  time_after(current_time, effect->stop_at - msecs_to_jiffies(envelope->fade_length)) &&

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#270: FILE: drivers/input/ff-effects.c:215:
+static int input_ff_emu_effect_type(struct input_dev *dev, int effect_type) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#271: FILE: drivers/input/ff-effects.c:216:
+static int input_ff_emu_effect_type(struct input_dev *dev, int effect_type) {
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#278: FILE: drivers/input/ff-effects.c:223:
+	printk(KERN_ERR "ff-effects: invalid type in input_ff_emu_effect_type()\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'input_ff_emu_effect_type', this function's name, in a string
#278: FILE: drivers/input/ff-effects.c:223:
+	printk(KERN_ERR "ff-effects: invalid type in input_ff_emu_effect_type()\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#282: FILE: drivers/input/ff-effects.c:227:
+static int input_ff_safe_sum(int a, int b, int limit) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#284: FILE: drivers/input/ff-effects.c:229:
+	int c;
+	if (!a)

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#292: FILE: drivers/input/ff-effects.c:237:
+static s8 input_ff_s8_sum(int a, int b) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#294: FILE: drivers/input/ff-effects.c:239:
+	int c;
+	c = input_ff_safe_sum(a, b, 0x7f);

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#314: FILE: drivers/input/ff-effects.c:259:
+		effect->u.periodic.magnitude = input_ff_safe_sum(strong_magnitude, weak_magnitude, 0x7fff);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#324: FILE: drivers/input/ff-effects.c:269:
+
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#325: FILE: drivers/input/ff-effects.c:270:
+	printk(KERN_ERR "ff-effects: invalid effect type in convert_effect()\n");

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#328: FILE: drivers/input/ff-effects.c:273:
+static void input_ff_sum_effect(struct ff_effect *effect, struct ff_effect_status *new, unsigned int gain)

WARNING:LINE_SPACING: Missing a blank line after declarations
#333: FILE: drivers/input/ff-effects.c:278:
+	fixp_t level;
+	switch (new->effect.type) {

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#333: FILE: drivers/input/ff-effects.c:278:
+	switch (new->effect.type) {
+		case FF_CONSTANT:
[...]
+		case FF_RUMBLE:
[...]
+		case FF_PERIODIC:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#339: FILE: drivers/input/ff-effects.c:284:
+			level = fixp_new16(input_ff_envelope(new, new->effect.u.constant.level,
+					   &new->effect.u.constant.envelope));

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#344: FILE: drivers/input/ff-effects.c:289:
+			/* If in future any driver wants something else than
+			x and y in s8, this should be changed to something more generic */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#344: FILE: drivers/input/ff-effects.c:289:
+			x and y in s8, this should be changed to something more generic */

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#345: FILE: drivers/input/ff-effects.c:290:
+			effect->u.ramp.start_level = input_ff_s8_sum(effect->u.rumble.strong_magnitude, x);

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#346: FILE: drivers/input/ff-effects.c:291:
+			effect->u.ramp.end_level = input_ff_s8_sum(effect->u.rumble.weak_magnitude, y);

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#354: FILE: drivers/input/ff-effects.c:299:
+					input_ff_safe_sum(effect->u.rumble.strong_magnitude, strong, 0xffff);

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#356: FILE: drivers/input/ff-effects.c:301:
+					input_ff_safe_sum(effect->u.rumble.weak_magnitude, weak, 0xffff);

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#368: FILE: drivers/input/ff-effects.c:313:
+					input_ff_safe_sum(effect->u.rumble.strong_magnitude, i, 0xffff);

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#370: FILE: drivers/input/ff-effects.c:315:
+					input_ff_safe_sum(effect->u.rumble.weak_magnitude, i, 0xffff);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#374: FILE: drivers/input/ff-effects.c:319:
+	printk(KERN_ERR "ff-effects: invalid type in input_ff_sum_effect()\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'input_ff_sum_effect', this function's name, in a string
#374: FILE: drivers/input/ff-effects.c:319:
+	printk(KERN_ERR "ff-effects: invalid type in input_ff_sum_effect()\n");

CHECK:SPACING: No space is necessary after a cast
#379: FILE: drivers/input/ff-effects.c:324:
+	struct input_dev *dev = (struct input_dev *) timer_data;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#399: FILE: drivers/input/ff-effects.c:344:
+			printk(KERN_ERR "ff-effects: update aborted to avoid deadlock\n");

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#405: FILE: drivers/input/ff-effects.c:350:
+		for (i = 0; i < dev->ff_effects_max; i++) {
+

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#413: FILE: drivers/input/ff-effects.c:358:
+					effect.type = input_ff_emu_effect_type(dev, ff->effects[i].effect.type);

WARNING:LONG_LINE: line length of 111 exceeds 100 columns
#418: FILE: drivers/input/ff-effects.c:363:
+				if (effect.type == input_ff_emu_effect_type(dev, ff->effects[i].effect.type)) {

WARNING:LONG_LINE: line length of 116 exceeds 100 columns
#444: FILE: drivers/input/ff-effects.c:389:
+			if (ff->effects[i].effect.replay.length && time_after_eq(jiffies, ff->effects[i].stop_at)) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#445: FILE: drivers/input/ff-effects.c:390:
+			if (ff->effects[i].effect.replay.length && time_after_eq(jiffies, ff->effects[i].stop_at)) {
+

WARNING:LONG_LINE: line length of 119 exceeds 100 columns
#454: FILE: drivers/input/ff-effects.c:399:
+							jiffies + msecs_to_jiffies(ff->effects[i].effect.replay.delay);

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#457: FILE: drivers/input/ff-effects.c:402:
+							msecs_to_jiffies(ff->effects[i].effect.replay.length);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#476: FILE: drivers/input/ff-effects.c:421:
+
+}

WARNING:LINE_SPACING: Missing a blank line after declarations
#481: FILE: drivers/input/ff-effects.c:426:
+	int ret = input_ff_effect_access(dev, id, override);
+	if (ret)

WARNING:LINE_SPACING: Missing a blank line after declarations
#501: FILE: drivers/input/ff-effects.c:446:
+	int ret;
+	if (!test_bit(EV_FF, dev->evbit))

WARNING:LINE_SPACING: Missing a blank line after declarations
#522: FILE: drivers/input/ff-effects.c:467:
+	int i;
+	debug("flushing now");

WARNING:BRACES: braces {} are not necessary for single statement blocks
#530: FILE: drivers/input/ff-effects.c:475:
+	for (i = 0; i < dev->ff_effects_max; i++) {
+		_input_ff_erase(dev, i, 0);
+	}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#538: FILE: drivers/input/ff-effects.c:483:
+
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#541: FILE: drivers/input/ff-effects.c:486:
+{
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#545: FILE: drivers/input/ff-effects.c:490:
+	unsigned long flags = 0;
+	if (value < 0)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#548: FILE: drivers/input/ff-effects.c:493:
+	/* Mutex is already locked in input.c as input_ff_event address is
+	   stored in ff_device struct */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#548: FILE: drivers/input/ff-effects.c:493:
+	   stored in ff_device struct */

WARNING:LINE_SPACING: Missing a blank line after declarations
#553: FILE: drivers/input/ff-effects.c:498:
+		int i;
+		if (!test_bit(FF_GAIN, dev->ffbit) || value > 0xffff || value < 0) {

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#563: FILE: drivers/input/ff-effects.c:508:
+			ret = -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#576: FILE: drivers/input/ff-effects.c:521:
+			ret = -ENOSYS;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#582: FILE: drivers/input/ff-effects.c:527:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#623: FILE: drivers/input/ff-effects.c:568:
+	if (effect->type == FF_PERIODIC &&
+		   (effect->u.periodic.waveform < VALID_WFORM_MIN ||

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#636: FILE: drivers/input/ff-effects.c:581:
+	if (!test_bit(EV_FF, dev->evbit) || input_ff_validate_effect(effect) ||
+		    !test_bit(effect->type, dev->ffbit) ||

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#652: FILE: drivers/input/ff-effects.c:597:
+		for (id = 0; id < dev->ff_effects_max && test_bit(FF_EFFECT_USED, ff->effects[id].flags); id++);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#652: FILE: drivers/input/ff-effects.c:597:
+		for (id = 0; id < dev->ff_effects_max && test_bit(FF_EFFECT_USED, ff->effects[id].flags); id++);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#687: FILE: drivers/input/ff-effects.c:632:
+		if (effect->type != ff->effects[id].effect.type ||
+				  (effect->type == FF_PERIODIC && effect->u.periodic.waveform !=

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#705: FILE: drivers/input/ff-effects.c:650:
+
+	}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#717: FILE: drivers/input/ff-effects.c:662:
+		printk(KERN_ERR "ff-effects: allocating to non-NULL pointer\n");

CHECK:SPACING: No space is necessary after a cast
#726: FILE: drivers/input/ff-effects.c:671:
+	dev->ff->timer.data = (unsigned long) dev;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#737: FILE: drivers/input/ff-effects.c:682:
+		printk(KERN_ERR "ff-effects: tried to register before allocate\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#741: FILE: drivers/input/ff-effects.c:686:
+		printk(KERN_ERR "ff-effects: cannot register a device with 0 effects\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#801: FILE: drivers/input/ff-effects.c:746:
+ ^Iset_bit(EV_FF, dev->evbit);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#801: FILE: drivers/input/ff-effects.c:746:
+ ^Iset_bit(EV_FF, dev->evbit);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#801: FILE: drivers/input/ff-effects.c:746:
+ ^Iset_bit(EV_FF, dev->evbit);$

CHECK:UNCOMMENTED_DEFINITION: struct mutex definition without comment
#856: FILE: include/linux/input.h:870:
+	struct mutex ff_lock;

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#892: FILE: include/linux/input.h:1034:
+	spinlock_t atomiclock;

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#904: FILE: include/linux/input.h:1046:
+static inline int input_ff_allocate(struct input_dev *dev) { return -ENOSYS; }

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#905: FILE: include/linux/input.h:1047:
+static inline int input_ff_register(struct input_dev *dev, struct ff_driver *driver) { return -ENOSYS; }

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#905: FILE: include/linux/input.h:1047:
+static inline int input_ff_register(struct input_dev *dev, struct ff_driver *driver) { return -ENOSYS; }

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#906: FILE: include/linux/input.h:1048:
+static inline int input_ff_upload(struct input_dev *dev, struct ff_effect *effect) { return -EINVAL; }

CHECK:LINE_SPACING: Please don't use multiple blank lines
#910: FILE: include/linux/input.h:1052:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#936: FILE: drivers/input/input.c:741:
+		struct ff_device *ff = dev->ff;
+		clear_bit(EV_FF, dev->evbit);

CHECK:SPACING: No space is necessary after a cast
#985: FILE: drivers/input/evdev.c:474:
+			return input_ff_erase(dev, (int)(unsigned long) p);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000077306.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 9 errors, 63 warnings, 28 checks, 904 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000077306.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
