ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#49: 
--- a/include/linux/sched.h	Fri Oct 11 17:44:26 2002

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#63: FILE: include/linux/sched.h:466:
+extern void set_task_node(task_t *p, int node);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:SPACING: space required after that ',' (ctx:VxV)
#64: FILE: include/linux/sched.h:467:
+# define homenode_inc(rq,node) (rq)->nr_homenode[node]++
                         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#64: FILE: include/linux/sched.h:467:
+# define homenode_inc(rq,node) (rq)->nr_homenode[node]++

ERROR:SPACING: space required after that ',' (ctx:VxV)
#65: FILE: include/linux/sched.h:468:
+# define homenode_dec(rq,node) (rq)->nr_homenode[node]--
                         ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#65: FILE: include/linux/sched.h:468:
+# define homenode_dec(rq,node) (rq)->nr_homenode[node]--

ERROR:SPACING: space required after that ',' (ctx:VxV)
#68: FILE: include/linux/sched.h:471:
+#define set_task_node(p,n) {}
                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#69: FILE: include/linux/sched.h:472:
+# define homenode_inc(rq,node) {}
                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#70: FILE: include/linux/sched.h:473:
+# define homenode_dec(rq,node) {}
                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#95: FILE: kernel/sched.c:211:
+#define pool_weight(a,b) ((a)==(b)?MAX_CACHE_WEIGHT:0)
                      ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#95: FILE: kernel/sched.c:211:
+#define pool_weight(a,b) ((a)==(b)?MAX_CACHE_WEIGHT:0)
                              ^

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#95: FILE: kernel/sched.c:211:
+#define pool_weight(a,b) ((a)==(b)?MAX_CACHE_WEIGHT:0)
                                   ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#95: FILE: kernel/sched.c:211:
+#define pool_weight(a,b) ((a)==(b)?MAX_CACHE_WEIGHT:0)
                                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#115: FILE: kernel/sched.c:273:
+#define pool_weight(a,b) (0)
                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#123: FILE: kernel/sched.c:396:
+	homenode_inc(rq,p->node);
 	               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#131: FILE: kernel/sched.c:404:
+	homenode_dec(rq,p->node);
 	               ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#166: FILE: kernel/sched.c:947:
+		if (weight >= MAX_CACHE_WEIGHT) weight=MAX_CACHE_WEIGHT-1;
 		                                      ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#166: FILE: kernel/sched.c:947:
+		if (weight >= MAX_CACHE_WEIGHT) weight=MAX_CACHE_WEIGHT-1;
 		                                                       ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#166: FILE: kernel/sched.c:947:
+		if (weight >= MAX_CACHE_WEIGHT) weight=MAX_CACHE_WEIGHT-1;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#168: FILE: kernel/sched.c:949:
+		weight += pool_weight(this_pool,tmp->node);
 		                               ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#185: FILE: kernel/sched.c:993:
+	runqueue_t *rq;
+	static int sched_push_task(task_t *p, int cpu_dest);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'nr_running != 1'
#187: FILE: kernel/sched.c:995:
+	if ((nr_running != 1) || (current->active_mm == &init_mm))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'current->active_mm == &init_mm'
#187: FILE: kernel/sched.c:995:
+	if ((nr_running != 1) || (current->active_mm == &init_mm))

WARNING:LINE_SPACING: Missing a blank line after declarations
#194: FILE: kernel/sched.c:1002:
+		unsigned long load = 0, tot_load = 0, mask;
+		mask = p->cpus_allowed & pool_mask[tgt_pool] & cpu_online_map;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#195: FILE: kernel/sched.c:1003:
+		loop_over_node(i,cpu,tgt_pool) {
 		                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#195: FILE: kernel/sched.c:1003:
+		loop_over_node(i,cpu,tgt_pool) {
 		                    ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#199: FILE: kernel/sched.c:1007:
+				mask &= ~(1UL<<cpu);
 				             ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#232: FILE: kernel/sched.c:2226:
+	if (node < 0 || node >= numpools) return;

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#276: FILE: kernel/sched.c:2327:
+		return -1;
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#276: FILE: kernel/sched.c:2327:
+	else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000423731.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 19 errors, 3 warnings, 8 checks, 238 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000423731.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
