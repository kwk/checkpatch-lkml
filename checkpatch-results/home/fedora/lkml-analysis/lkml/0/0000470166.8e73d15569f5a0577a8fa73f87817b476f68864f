WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#24: 
http://bugs.gnu.org/cgi-bin/gnatsweb.pl?cmd=view%20audit-trail&database=default&pr=1427

WARNING:TYPO_SPELLING: 'transparantly' may be misspelled - perhaps 'transparently'?
#40: 
transparantly call setitimer before calling the user's
^^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#53: FILE: linuxthreads/pthread.c:640:
*/

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#54: FILE: linuxthreads/pthread.c:641:
+/* profiling support: struct used to tell child thread how to call setitimer
+typedef struct pthread_create_wrapper_s {

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#66: FILE: linuxthreads/pthread.c:652:
+/* profiling support: wrapper around child thread start routine to call
+static void *pthread_create_start_wrapper(void *data)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#69: FILE: linuxthreads/pthread.c:655:
+  void *(*start_routine) (void *) = ((pthread_create_wrapper_t *)$

WARNING:SPACING: Unnecessary space before function pointer arguments
#69: FILE: linuxthreads/pthread.c:655:
+  void *(*start_routine) (void *) = ((pthread_create_wrapper_t *)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#71: FILE: linuxthreads/pthread.c:656:
+  void *arg = ((pthread_create_wrapper_t *) data)->arg;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#71: FILE: linuxthreads/pthread.c:656:
+  void *arg = ((pthread_create_wrapper_t *) data)->arg;$

CHECK:SPACING: No space is necessary after a cast
#74: FILE: linuxthreads/pthread.c:659:
+  setitimer(ITIMER_PROF, &((pthread_create_wrapper_t *) data)->itimer, NULL);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#74: FILE: linuxthreads/pthread.c:659:
+  setitimer(ITIMER_PROF, &((pthread_create_wrapper_t *) data)->itimer, NULL);$

CHECK:SPACING: No space is necessary after a cast
#77: FILE: linuxthreads/pthread.c:662:
+  __pthread_mutex_lock(&((pthread_create_wrapper_t *) data)->lock);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#77: FILE: linuxthreads/pthread.c:662:
+  __pthread_mutex_lock(&((pthread_create_wrapper_t *) data)->lock);$

CHECK:SPACING: No space is necessary after a cast
#78: FILE: linuxthreads/pthread.c:663:
+  __pthread_cond_signal(&((pthread_create_wrapper_t *) data)->wait);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#78: FILE: linuxthreads/pthread.c:663:
+  __pthread_cond_signal(&((pthread_create_wrapper_t *) data)->wait);$

CHECK:SPACING: No space is necessary after a cast
#79: FILE: linuxthreads/pthread.c:664:
+  __pthread_mutex_unlock(&((pthread_create_wrapper_t *) data)->lock);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#79: FILE: linuxthreads/pthread.c:664:
+  __pthread_mutex_unlock(&((pthread_create_wrapper_t *) data)->lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#82: FILE: linuxthreads/pthread.c:667:
+  return start_routine(arg);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#88: FILE: linuxthreads/pthread.c:673:
+  pthread_create_wrapper_t wrapper_data;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#89: FILE: linuxthreads/pthread.c:674:
+  struct sigaction oact;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#90: FILE: linuxthreads/pthread.c:675:
+  int profiling;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#104: FILE: linuxthreads/pthread.c:689:
+  profiling = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#105: FILE: linuxthreads/pthread.c:690:
+  if (0 == sigaction(SIGPROF, 0, &oact)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#105: FILE: linuxthreads/pthread.c:690:
+  if (0 == sigaction(SIGPROF, 0, &oact)
[...]
+    profiling = 1;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'oact.sa_sigaction != SIG_IGN'
#105: FILE: linuxthreads/pthread.c:690:
+  if (0 == sigaction(SIGPROF, 0, &oact)
+  &&  (oact.sa_sigaction != SIG_IGN)
+  &&  (oact.sa_sigaction != SIG_DFL)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'oact.sa_sigaction != SIG_DFL'
#105: FILE: linuxthreads/pthread.c:690:
+  if (0 == sigaction(SIGPROF, 0, &oact)
+  &&  (oact.sa_sigaction != SIG_IGN)
+  &&  (oact.sa_sigaction != SIG_DFL)) {

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#105: FILE: linuxthreads/pthread.c:690:
+  if (0 == sigaction(SIGPROF, 0, &oact)

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#106: FILE: linuxthreads/pthread.c:691:
+  if (0 == sigaction(SIGPROF, 0, &oact)
+  &&  (oact.sa_sigaction != SIG_IGN)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#106: FILE: linuxthreads/pthread.c:691:
+  &&  (oact.sa_sigaction != SIG_IGN)$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#107: FILE: linuxthreads/pthread.c:692:
+  &&  (oact.sa_sigaction != SIG_IGN)
+  &&  (oact.sa_sigaction != SIG_DFL)) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#107: FILE: linuxthreads/pthread.c:692:
+  &&  (oact.sa_sigaction != SIG_DFL)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#108: FILE: linuxthreads/pthread.c:693:
+    profiling = 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#113: FILE: linuxthreads/pthread.c:698:
+    wrapper_data.start_routine = start_routine;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#114: FILE: linuxthreads/pthread.c:699:
+    start_routine = pthread_create_start_wrapper;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#115: FILE: linuxthreads/pthread.c:700:
+    wrapper_data.arg = arg;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#116: FILE: linuxthreads/pthread.c:701:
+    getitimer(ITIMER_PROF, &wrapper_data.itimer);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#117: FILE: linuxthreads/pthread.c:702:
+    __pthread_cond_init(&wrapper_data.wait, NULL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#118: FILE: linuxthreads/pthread.c:703:
+    __pthread_mutex_init(&wrapper_data.lock, NULL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#119: FILE: linuxthreads/pthread.c:704:
+    __pthread_mutex_lock(&wrapper_data.lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#120: FILE: linuxthreads/pthread.c:705:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#133: FILE: linuxthreads/pthread.c:723:
+  if (profiling) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#133: FILE: linuxthreads/pthread.c:723:
+  if (profiling) {
+    if (retval == 0)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#134: FILE: linuxthreads/pthread.c:724:
+    if (retval == 0)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 6)
#134: FILE: linuxthreads/pthread.c:724:
+    if (retval == 0)
+      __pthread_cond_wait(&wrapper_data.wait, &wrapper_data.lock);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#135: FILE: linuxthreads/pthread.c:725:
+      __pthread_cond_wait(&wrapper_data.wait, &wrapper_data.lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#136: FILE: linuxthreads/pthread.c:726:
+    __pthread_mutex_unlock(&wrapper_data.lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#137: FILE: linuxthreads/pthread.c:727:
+    __pthread_mutex_destroy(&wrapper_data.lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#138: FILE: linuxthreads/pthread.c:728:
+    __pthread_cond_destroy(&wrapper_data.wait);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#139: FILE: linuxthreads/pthread.c:729:
+  }$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000470166.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 39 warnings, 9 checks, 93 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000470166.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
