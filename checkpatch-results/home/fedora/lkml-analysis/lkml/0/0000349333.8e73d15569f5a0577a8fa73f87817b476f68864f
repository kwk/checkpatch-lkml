ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#100: FILE: ipc/shm.c:109:
+	unsigned int id=simple_strtoul(kobj->name,NULL,10)%SEQ_MULTIPLIER;
 	               ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#100: FILE: ipc/shm.c:109:
+	unsigned int id=simple_strtoul(kobj->name,NULL,10)%SEQ_MULTIPLIER;
 	                                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#100: FILE: ipc/shm.c:109:
+	unsigned int id=simple_strtoul(kobj->name,NULL,10)%SEQ_MULTIPLIER;
 	                                              ^

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#100: FILE: ipc/shm.c:109:
+	unsigned int id=simple_strtoul(kobj->name,NULL,10)%SEQ_MULTIPLIER;
 	                                                  ^

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#100: FILE: ipc/shm.c:109:
+	unsigned int id=simple_strtoul(kobj->name,NULL,10)%SEQ_MULTIPLIER;

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:LINE_SPACING: Missing a blank line after declarations
#102: FILE: ipc/shm.c:111:
+	struct shmid_kernel *shp;
+	down (&shm_ids.sem);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#102: FILE: ipc/shm.c:111:
+	down (&shm_ids.sem);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#103: FILE: ipc/shm.c:112:
+	shp=shm_lock(id);
 	   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#104: FILE: ipc/shm.c:113:
+	if(!strcmp(attr->name,"key"))
 	                     ^

ERROR:SPACING: space required before the open parenthesis '('
#104: FILE: ipc/shm.c:113:
+	if(!strcmp(attr->name,"key"))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#105: FILE: ipc/shm.c:114:
+		snprintf(buf, PAGE_SIZE,"%ld\n", (long)shp->shm_perm.key);
 		                       ^

ERROR:SPACING: space required before the open parenthesis '('
#106: FILE: ipc/shm.c:115:
+	else if(!strcmp(attr->name, "owner"))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#108: FILE: ipc/shm.c:117:
+	else if(!strcmp(attr->name,"perms"))
 	                          ^

ERROR:SPACING: space required before the open parenthesis '('
#108: FILE: ipc/shm.c:117:
+	else if(!strcmp(attr->name,"perms"))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#110: FILE: ipc/shm.c:119:
+^Ielse if(!strcmp(attr->name,"bytes"))^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#110: FILE: ipc/shm.c:119:
+	else if(!strcmp(attr->name,"bytes"))	
 	                          ^

ERROR:SPACING: space required before the open parenthesis '('
#110: FILE: ipc/shm.c:119:
+	else if(!strcmp(attr->name,"bytes"))	

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#113: FILE: ipc/shm.c:122:
+		snprintf(buf, PAGE_SIZE, "%ld\n", \

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#115: FILE: ipc/shm.c:124:
+		(file_count(shp->shm_file)-1):shp->shm_nattch);
 		                          ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#115: FILE: ipc/shm.c:124:
+		(file_count(shp->shm_file)-1):shp->shm_nattch);
 		                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#116: FILE: ipc/shm.c:125:
+	else if (!strcmp(attr->name,"cpid"))
 	                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#117: FILE: ipc/shm.c:126:
+		snprintf(buf,PAGE_SIZE, "%d\n", shp->shm_cprid);
 		            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#118: FILE: ipc/shm.c:127:
+	else if (!strcmp(attr->name,"lpid"))
 	                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#119: FILE: ipc/shm.c:128:
+		snprintf(buf,PAGE_SIZE, "%d\n",shp->shm_lprid);
 		            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#119: FILE: ipc/shm.c:128:
+		snprintf(buf,PAGE_SIZE, "%d\n",shp->shm_lprid);
 		                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#120: FILE: ipc/shm.c:129:
+	else if (!strcmp(attr->name,"gid"))
 	                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#121: FILE: ipc/shm.c:130:
+		snprintf(buf,PAGE_SIZE, "%d\n", shp->shm_perm.gid);
 		            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#122: FILE: ipc/shm.c:131:
+	else if (!strcmp(attr->name,"cuid"))
 	                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#123: FILE: ipc/shm.c:132:
+		snprintf(buf,PAGE_SIZE, "%d\n", shp->shm_perm.cuid);
 		            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#124: FILE: ipc/shm.c:133:
+	else if (!strcmp(attr->name,"cgid"))
 	                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#125: FILE: ipc/shm.c:134:
+		snprintf(buf,PAGE_SIZE, "%d\n", shp->shm_perm.cgid);
 		            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#126: FILE: ipc/shm.c:135:
+	else if (!strcmp(attr->name,"atime"))
 	                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#127: FILE: ipc/shm.c:136:
+		snprintf(buf,PAGE_SIZE, "%ld\n", (long)shp->shm_atim);
 		            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#128: FILE: ipc/shm.c:137:
+	else if (!strcmp(attr->name,"dtime"))
 	                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#129: FILE: ipc/shm.c:138:
+		snprintf(buf,PAGE_SIZE, "%ld\n", (long)shp->shm_dtim);
 		            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#130: FILE: ipc/shm.c:139:
+	else if (!strcmp(attr->name,"ctime"))
 	                           ^

CHECK:SPACING: No space is necessary after a cast
#131: FILE: ipc/shm.c:140:
+		snprintf(buf,PAGE_SIZE, "%ld\n", (long) shp->shm_ctim);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#131: FILE: ipc/shm.c:140:
+		snprintf(buf,PAGE_SIZE, "%ld\n", (long) shp->shm_ctim);
 		            ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#133: FILE: ipc/shm.c:142:
+	up (&shm_ids.sem);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#137: FILE: ipc/shm.c:146:
+#define SHM_ATTR(_name) \
+static struct attribute shm_attr_##_name={ \
+	.name=__stringify(_name), \
+	.mode=0444, \
+}; \
+sysfs_create_file(&shm_ids.entries[id].kobj, &shm_attr_##_name );

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#138: FILE: ipc/shm.c:147:
+static struct attribute shm_attr_##_name={ \
                                         ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#139: FILE: ipc/shm.c:148:
+	.name=__stringify(_name), \
 	     ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#140: FILE: ipc/shm.c:149:
+	.mode=0444, \
 	     ^

ERROR:SPACING: space prohibited before that close parenthesis ')'
#142: FILE: ipc/shm.c:151:
+sysfs_create_file(&shm_ids.entries[id].kobj, &shm_attr_##_name );

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#144: FILE: ipc/shm.c:153:
+void shm_release (struct kobject *kobj)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#145: FILE: ipc/shm.c:154:
+{^I$

WARNING:LINE_SPACING: Missing a blank line after declarations
#148: FILE: ipc/shm.c:157:
+	int id;
+	id=(int)simple_strtoul(kobj->name, NULL, 10);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#148: FILE: ipc/shm.c:157:
+	id=(int)simple_strtoul(kobj->name, NULL, 10);
 	  ^

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#148: FILE: ipc/shm.c:157:
+	id=(int)simple_strtoul(kobj->name, NULL, 10);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#151: FILE: ipc/shm.c:160:
+	shm_rmid (id);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#155: FILE: ipc/shm.c:164:
+	fput (shp->shm_file);

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#160: FILE: ipc/shm.c:169:
+static struct sysfs_ops shm_sysfs_ops ={
                                       ^

WARNING:CONST_STRUCT: struct sysfs_ops should normally be const
#160: FILE: ipc/shm.c:169:
+static struct sysfs_ops shm_sysfs_ops ={

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#164: FILE: ipc/shm.c:173:
+static struct kobj_type ktype_shm ={
                                   ^

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#184: FILE: ipc/shm.c:195:
+	kobject_unregister(&shm_ids.entries[shp->id%SEQ_MULTIPLIER].kobj);
 	                                           ^

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#201: FILE: ipc/shm.c:303:
+	sprintf(shm_ids.entries[id].kobj.name, "%ld", \

ERROR:SPACING: space required after that ',' (ctx:VxV)
#202: FILE: ipc/shm.c:304:
+	       (long)shm_buildid(id,shp->shm_perm.seq));
 	                           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#203: FILE: ipc/shm.c:305:
+	shm_ids.entries[id].kobj.parent=kobject_get(&shm_ids.kobj);
 	                               ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#204: FILE: ipc/shm.c:306:
+	shm_ids.entries[id].kobj.kset=NULL;
 	                             ^

ERROR:SPACING: spaces required around that '=' (ctx:VxO)
#205: FILE: ipc/shm.c:307:
+	shm_ids.entries[id].kobj.ktype=&ktype_shm;
 	                              ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#205: FILE: ipc/shm.c:307:
+	shm_ids.entries[id].kobj.ktype=&ktype_shm;
 	                               ^

ERROR:SPACING: space required before the open brace '{'
#207: FILE: ipc/shm.c:309:
+	if(!kobject_register(&(shm_ids.entries[id].kobj))){

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around shm_ids.entries[id].kobj
#207: FILE: ipc/shm.c:309:
+	if(!kobject_register(&(shm_ids.entries[id].kobj))){

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:SPACING: space required before the open parenthesis '('
#207: FILE: ipc/shm.c:309:
+	if(!kobject_register(&(shm_ids.entries[id].kobj))){

ERROR:SPACING: space required before the open brace '{'
#221: FILE: ipc/shm.c:323:
+	}else{

ERROR:SPACING: space required after that close brace '}'
#221: FILE: ipc/shm.c:323:
+	}else{

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000349333.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 47 errors, 13 warnings, 6 checks, 178 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000349333.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
