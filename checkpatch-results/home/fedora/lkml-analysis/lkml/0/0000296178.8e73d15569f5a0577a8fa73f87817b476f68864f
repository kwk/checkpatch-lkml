CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#37: 
; (C) 2003-2004 Herbert Pötzl <herbert@13thfloor.at>
                         ^

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#61: 
diff -NurpP --minimal linux-2.4.25/drivers/char/random.c linux-2.4.25-bme0.04/drivers/char/random.c

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#171: FILE: fs/inode.c:1357:
+void update_atime (struct inode *inode, struct vfsmount *mnt)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#180: FILE: fs/inode.c:1364:
+	if (S_ISDIR(inode->i_mode) &&
+		(IS_NODIRATIME(inode) || MNT_IS_NODIRATIME(mnt)))

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#215: FILE: fs/namei.c:938:
+static inline int mnt_may_create(struct vfsmount *mnt, struct inode *dir, struct dentry *child) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#225: FILE: fs/namei.c:948:
+static inline int mnt_may_unlink(struct vfsmount *mnt, struct inode *dir, struct dentry *child) {

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#303: FILE: fs/namei.c:1486:
+		error = mnt_may_unlink(nd.mnt, nd.dentry->d_inode, dentry);
 		                       ^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#303: FILE: fs/namei.c:1486:
+		error = mnt_may_unlink(nd.mnt, nd.dentry->d_inode, dentry);
 		                               ^^

WARNING:INDENTED_LABEL: labels should not be indented
#307: FILE: fs/namei.c:1490:
+	exit2:

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#316: FILE: fs/namei.c:1552:
+		error = mnt_may_unlink(nd.mnt, nd.dentry->d_inode, dentry);
 		                       ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#316: FILE: fs/namei.c:1552:
+		error = mnt_may_unlink(nd.mnt, nd.dentry->d_inode, dentry);
 		                               ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#318: FILE: fs/namei.c:1554:
+			error = vfs_unlink(nd.dentry->d_inode, dentry);
 			                   ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#349: FILE: fs/namespace.c:487:
+static int do_loopback(struct nameidata *nd, char *old_name, unsigned long flags, int mnt_flags)
                                          ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#391: FILE: fs/namespace.c:748:
+		retval = do_loopback(&nd, dev_name, flags, mnt_flags);
 		                      ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#415: FILE: fs/open.c:147:
+	if (IS_RDONLY(inode) || MNT_IS_RDONLY(nd.mnt))
 	                                      ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#424: FILE: fs/open.c:271:
+	if (IS_RDONLY(inode) || MNT_IS_RDONLY(nd.mnt))
 	                                      ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#433: FILE: fs/open.c:322:
+	if (IS_RDONLY(inode) || MNT_IS_RDONLY(nd.mnt))
 	                                      ^^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWOTH' are not preferred. Consider using octal permissions '0002'.
#443: FILE: fs/open.c:386:
+		if (!res && (mode & S_IWOTH)

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#444: FILE: fs/open.c:387:
+		   && !special_file(nd.dentry->d_inode->i_mode)
 		                    ^^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#444: FILE: fs/open.c:387:
+		if (!res && (mode & S_IWOTH)
+		   && !special_file(nd.dentry->d_inode->i_mode)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#445: FILE: fs/open.c:388:
+		   && (IS_RDONLY(nd.dentry->d_inode) || MNT_IS_RDONLY(nd.mnt)))
 		                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#445: FILE: fs/open.c:388:
+		   && (IS_RDONLY(nd.dentry->d_inode) || MNT_IS_RDONLY(nd.mnt)))
 		                                                      ^^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#445: FILE: fs/open.c:388:
+		   && !special_file(nd.dentry->d_inode->i_mode)
+		   && (IS_RDONLY(nd.dentry->d_inode) || MNT_IS_RDONLY(nd.mnt)))

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#463: FILE: fs/open.c:524:
+	if (IS_RDONLY(inode) || MNT_IS_RDONLY(nd.mnt))
 	                                      ^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#472: FILE: fs/open.c:543:
+static int chown_common(struct vfsmount *mnt, struct dentry * dentry, uid_t user, gid_t group)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#490: FILE: fs/open.c:610:
+		error = chown_common(nd.mnt, nd.dentry, user, group);
 		                     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#490: FILE: fs/open.c:610:
+		error = chown_common(nd.mnt, nd.dentry, user, group);
 		                             ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#499: FILE: fs/open.c:623:
+		error = chown_common(nd.mnt, nd.dentry, user, group);
 		                     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#499: FILE: fs/open.c:623:
+		error = chown_common(nd.mnt, nd.dentry, user, group);
 		                             ^^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#556: FILE: fs/reiserfs/dir.c:184:
+    UPDATE_ATIME(inode, filp->f_vfsmnt);$

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#589: FILE: fs/stat.c:263:
+			UPDATE_ATIME(inode, nd.mnt);
 			                    ^^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#649: FILE: include/linux/fs.h:203:
+extern void update_atime (struct inode *, struct vfsmount *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#649: FILE: include/linux/fs.h:203:
+extern void update_atime (struct inode *, struct vfsmount *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#652: FILE: include/linux/fs.h:205:
+#define UPDATE_ATIME(inode, mnt) update_atime (inode, mnt)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#652: FILE: include/linux/fs.h:205:
+#define UPDATE_ATIME(inode, mnt) update_atime (inode, mnt)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'm' - possible side-effects?
#680: FILE: include/linux/mount.h:38:
+#define	MNT_IS_RDONLY(m)	((m) && ((m)->mnt_flags & MNT_RDONLY))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'm' - possible side-effects?
#681: FILE: include/linux/mount.h:39:
+#define	MNT_IS_NOATIME(m)	((m) && ((m)->mnt_flags & MNT_NOATIME))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'm' - possible side-effects?
#682: FILE: include/linux/mount.h:40:
+#define	MNT_IS_NODIRATIME(m)	((m) && ((m)->mnt_flags & MNT_NODIRATIME))

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#758: FILE: net/unix/af_unix.c:610:
+			UPDATE_ATIME(nd.dentry->d_inode, nd.mnt);
 			             ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#758: FILE: net/unix/af_unix.c:610:
+			UPDATE_ATIME(nd.dentry->d_inode, nd.mnt);
 			                                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#767: FILE: net/unix/af_unix.c:626:
+				UPDATE_ATIME(dentry->d_inode, nd.mnt);
 				                              ^^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000296178.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 4 errors, 29 warnings, 8 checks, 564 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000296178.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
