WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#44: 
Phones: +7(812)428-43-84(work) +7(812)184-52-58(home) +7(812)956-42-86(mobile)

WARNING:PATCH_PREFIX: patch prefix 'drivers' exists, appears to be a -p0 patch

ERROR:TRAILING_WHITESPACE: trailing whitespace
#62: FILE: net/r8169.c:40:
+^I- Insert cpu_to_le/le_to_cpu where it is necessary. $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <OWNbit>
#96: FILE: net/r8169.c:253:
+	OWNbit = __constant_cpu_to_le32(0x80000000),

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:CONSTANT_CONVERSION: __constant_cpu_to_le32 should be cpu_to_le32
#96: FILE: net/r8169.c:253:
+	OWNbit = __constant_cpu_to_le32(0x80000000),

Use of __constant_<foo> form is discouraged for the following functions::

  __constant_cpu_to_be[x]
  __constant_cpu_to_le[x]
  __constant_be[x]_to_cpu
  __constant_le[x]_to_cpu
  __constant_htons
  __constant_ntohs

Using any of these outside of include/uapi/ is not preferred as using the
function without __constant_ is identical when the argument is a
constant.

In big endian systems, the macros like __constant_cpu_to_be32(x) and
cpu_to_be32(x) expand to the same expression::

  #define __constant_cpu_to_be32(x) ((__force __be32)(__u32)(x))
  #define __cpu_to_be32(x)          ((__force __be32)(__u32)(x))

In little endian systems, the macros __constant_cpu_to_be32(x) and
cpu_to_be32(x) expand to __constant_swab32 and __swab32.  __swab32
has a __builtin_constant_p check::

  #define __swab32(x)				\
    (__builtin_constant_p((__u32)(x)) ?	\
    ___constant_swab32(x) :			\
    __fswab32(x))

So ultimately they have a special case for constants.
Similar is the case with all of the macros in the list.  Thus
using the __constant_... forms are unnecessarily verbose and
not preferred outside of include/uapi.

See: https://lore.kernel.org/lkml/1400106425.12666.6.camel@joe-AO725/

CHECK:CAMELCASE: Avoid CamelCase: <EORbit>
#97: FILE: net/r8169.c:254:
+	EORbit = __constant_cpu_to_le32(0x40000000),

WARNING:CONSTANT_CONVERSION: __constant_cpu_to_le32 should be cpu_to_le32
#97: FILE: net/r8169.c:254:
+	EORbit = __constant_cpu_to_le32(0x40000000),

CHECK:CAMELCASE: Avoid CamelCase: <FSbit>
#98: FILE: net/r8169.c:255:
+	FSbit = __constant_cpu_to_le32(0x20000000),

WARNING:CONSTANT_CONVERSION: __constant_cpu_to_le32 should be cpu_to_le32
#98: FILE: net/r8169.c:255:
+	FSbit = __constant_cpu_to_le32(0x20000000),

CHECK:CAMELCASE: Avoid CamelCase: <LSbit>
#99: FILE: net/r8169.c:256:
+	LSbit = __constant_cpu_to_le32(0x10000000),

WARNING:CONSTANT_CONVERSION: __constant_cpu_to_le32 should be cpu_to_le32
#99: FILE: net/r8169.c:256:
+	LSbit = __constant_cpu_to_le32(0x10000000),

CHECK:CAMELCASE: Avoid CamelCase: <RxRES>
#102: FILE: net/r8169.c:259:
+	RxRES = __constant_cpu_to_le32(0x00200000),

WARNING:CONSTANT_CONVERSION: __constant_cpu_to_le32 should be cpu_to_le32
#102: FILE: net/r8169.c:259:
+	RxRES = __constant_cpu_to_le32(0x00200000),

CHECK:CAMELCASE: Avoid CamelCase: <RxCRC>
#103: FILE: net/r8169.c:260:
+	RxCRC = __constant_cpu_to_le32(0x00080000),

WARNING:CONSTANT_CONVERSION: __constant_cpu_to_le32 should be cpu_to_le32
#103: FILE: net/r8169.c:260:
+	RxCRC = __constant_cpu_to_le32(0x00080000),

CHECK:CAMELCASE: Avoid CamelCase: <RxRUNT>
#104: FILE: net/r8169.c:261:
+	RxRUNT = __constant_cpu_to_le32(0x00100000),

WARNING:CONSTANT_CONVERSION: __constant_cpu_to_le32 should be cpu_to_le32
#104: FILE: net/r8169.c:261:
+	RxRUNT = __constant_cpu_to_le32(0x00100000),

CHECK:CAMELCASE: Avoid CamelCase: <RxRWT>
#105: FILE: net/r8169.c:262:
+	RxRWT = __constant_cpu_to_le32(0x00400000),

WARNING:CONSTANT_CONVERSION: __constant_cpu_to_le32 should be cpu_to_le32
#105: FILE: net/r8169.c:262:
+	RxRWT = __constant_cpu_to_le32(0x00400000),

CHECK:CAMELCASE: Avoid CamelCase: <TxDescDmaAddr>
#117: FILE: net/r8169.c:290:
+	dma_addr_t     TxDescDmaAddr;	/* DMA address of TxDescArray */

CHECK:CAMELCASE: Avoid CamelCase: <RxDescDmaAddr>
#118: FILE: net/r8169.c:291:
+	dma_addr_t     RxDescDmaAddr;	/* DMA address of RxDescArray */

CHECK:CAMELCASE: Avoid CamelCase: <RxBufferDmas>
#121: FILE: net/r8169.c:294:
+	dma_addr_t     RxBufferDmas;	/* DMA address of RxBufferRings */

CHECK:CAMELCASE: Avoid CamelCase: <RxBufferDma>
#122: FILE: net/r8169.c:295:
+	dma_addr_t     RxBufferDma[NUM_RX_DESC];	/* DMA addresses of RxBufferRing */

CHECK:CAMELCASE: Avoid CamelCase: <TxDescArray>
#160: FILE: net/r8169.c:672:
+	tp->TxDescArray = (struct TxDesc *)

CHECK:CAMELCASE: Avoid CamelCase: <TxDesc>
#160: FILE: net/r8169.c:672:
+	tp->TxDescArray = (struct TxDesc *)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#162: FILE: net/r8169.c:674:
+^I^I^I^I NUM_TX_DESC * sizeof (struct TxDesc) + 256, $

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#162: FILE: net/r8169.c:674:
+				 NUM_TX_DESC * sizeof (struct TxDesc) + 256, 

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <RxDescArray>
#165: FILE: net/r8169.c:677:
+	tp->RxDescArray = (struct RxDesc *)

CHECK:CAMELCASE: Avoid CamelCase: <RxDesc>
#165: FILE: net/r8169.c:677:
+	tp->RxDescArray = (struct RxDesc *)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#167: FILE: net/r8169.c:679:
+^I^I^I^I NUM_RX_DESC * sizeof (struct RxDesc) + 256, $

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#167: FILE: net/r8169.c:679:
+				 NUM_RX_DESC * sizeof (struct RxDesc) + 256, 

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tp->TxDescArray"
#171: FILE: net/r8169.c:682:
+	if (tp->TxDescArray == NULL || tp->RxDescArray == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tp->RxDescArray"
#171: FILE: net/r8169.c:682:
+	if (tp->TxDescArray == NULL || tp->RxDescArray == NULL) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#180: FILE: net/r8169.c:687:
+^I^I^Ipci_free_consistent(tp->pci_dev, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#181: FILE: net/r8169.c:688:
+			pci_free_consistent(tp->pci_dev, 
+				NUM_TX_DESC * sizeof (struct TxDesc) + 256,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#181: FILE: net/r8169.c:688:
+				NUM_TX_DESC * sizeof (struct TxDesc) + 256,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#184: FILE: net/r8169.c:691:
+^I^I^Ipci_free_consistent(tp->pci_dev, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#185: FILE: net/r8169.c:692:
+			pci_free_consistent(tp->pci_dev, 
+				NUM_RX_DESC * sizeof (struct RxDesc) + 256,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#185: FILE: net/r8169.c:692:
+				NUM_RX_DESC * sizeof (struct RxDesc) + 256,

ERROR:CODE_INDENT: code indent should use tabs where possible
#190: FILE: net/r8169.c:696:
+        tp->RxBufferRings = kmalloc(RX_BUF_SIZE * NUM_RX_DESC, GFP_KERNEL);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#190: FILE: net/r8169.c:696:
+        tp->RxBufferRings = kmalloc(RX_BUF_SIZE * NUM_RX_DESC, GFP_KERNEL);$

CHECK:CAMELCASE: Avoid CamelCase: <RxBufferRings>
#190: FILE: net/r8169.c:696:
+        tp->RxBufferRings = kmalloc(RX_BUF_SIZE * NUM_RX_DESC, GFP_KERNEL);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#195: FILE: net/r8169.c:701:
+^I^I^I^I^I  RX_BUF_SIZE * NUM_RX_DESC, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#206: FILE: net/r8169.c:743:
+^I^I(TX_DMA_BURST << TxDMAShift) | $

CHECK:CAMELCASE: Avoid CamelCase: <TxDMAShift>
#206: FILE: net/r8169.c:743:
+		(TX_DMA_BURST << TxDMAShift) | 

CHECK:CAMELCASE: Avoid CamelCase: <InterFrameGap>
#207: FILE: net/r8169.c:744:
+			    (InterFrameGap << TxInterFrameGapShift));

CHECK:CAMELCASE: Avoid CamelCase: <TxInterFrameGapShift>
#207: FILE: net/r8169.c:744:
+			    (InterFrameGap << TxInterFrameGapShift));

CHECK:CAMELCASE: Avoid CamelCase: <TxDescStartAddr>
#213: FILE: net/r8169.c:748:
+	RTL_W32(TxDescStartAddr, tp->TxDescDmaAddr);

CHECK:CAMELCASE: Avoid CamelCase: <RxDescStartAddr>
#214: FILE: net/r8169.c:749:
+	RTL_W32(RxDescStartAddr, tp->RxDescDmaAddr);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#223: FILE: net/r8169.c:785:
+^I^I^I    (OWNbit | EORbit) | $

WARNING:CONSTANT_CONVERSION: __constant_cpu_to_le32 should be cpu_to_le32
#224: FILE: net/r8169.c:786:
+			    __constant_cpu_to_le32(RX_BUF_SIZE);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#227: FILE: net/r8169.c:788:
+^I^I^Itp->RxDescArray[i].status = OWNbit | $

WARNING:CONSTANT_CONVERSION: __constant_cpu_to_le32 should be cpu_to_le32
#228: FILE: net/r8169.c:789:
+				__constant_cpu_to_le32(RX_BUF_SIZE);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#232: FILE: net/r8169.c:792:
+^I^Itp->RxBufferDma[i] = $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#233: FILE: net/r8169.c:793:
+^I^I^I(dma_addr_t)((unsigned int)tp->RxBufferDmas + $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#244: FILE: net/r8169.c:857:
+^I^Itp->TxDescArray[entry].buf_addr = $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#251: FILE: net/r8169.c:862:
+^I^I^I    (OWNbit | FSbit | LSbit) | $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#258: FILE: net/r8169.c:868:
+^I^I^I    cpu_to_le32(((skb->len > ETH_ZLEN) ? $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#269: FILE: net/r8169.c:903:
+^I^I^Istruct sk_buff *skb = $

CHECK:CAMELCASE: Avoid CamelCase: <Tx_skbuff>
#270: FILE: net/r8169.c:904:
+				tp->Tx_skbuff[dirty_tx % NUM_TX_DESC];

ERROR:TRAILING_WHITESPACE: trailing whitespace
#272: FILE: net/r8169.c:906:
+^I^I^Ipci_unmap_single(tp->pci_dev, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#274: FILE: net/r8169.c:908:
+^I^I^I^I^I^I     buf_addr), $

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'tp->TxDescArray[entry].buf_addr'
#274: FILE: net/r8169.c:908:
+					 le32_to_cpu(tp->TxDescArray[entry].
+						     buf_addr), 

A single dereferencing identifier spanned on multiple lines like::

  struct_identifier->member[index].
  member = <foo>;

is generally hard to follow. It can easily lead to typos and so makes
the code vulnerable to bugs.

If fixing the multiple line dereferencing leads to an 80 column
violation, then either rewrite the code in a more simple way or if the
starting part of the dereferencing identifier is the same and used at
multiple places then store it in a temporary variable, and use that
temporary variable only at all the places. For example, if there are
two dereferencing identifiers::

  member1->member2->member3.foo1;
  member1->member2->member3.foo2;

then store the member1->member2->member3 part in a temporary variable.
It not only helps to avoid the 80 column violation but also reduces
the program size by removing the unnecessary dereferences.

But if none of the above methods work then ignore the 80 column
violation because it is much easier to read a dereferencing identifier
on a single line.

CHECK:SPACING: No space is necessary after a cast
#286: FILE: net/r8169.c:951:
+			    (int) (le32_to_cpu(tp->RxDescArray[cur_rx].

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'tp->RxDescArray[cur_rx].status'
#287: FILE: net/r8169.c:952:
+			    (int) (le32_to_cpu(tp->RxDescArray[cur_rx].
+				   status) & 0x00001FFF) - 4;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#292: FILE: net/r8169.c:957:
+                                pci_dma_sync_single(tp->pci_dev, $

ERROR:CODE_INDENT: code indent should use tabs where possible
#292: FILE: net/r8169.c:957:
+                                pci_dma_sync_single(tp->pci_dev, $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#292: FILE: net/r8169.c:957:
+                                pci_dma_sync_single(tp->pci_dev, $

ERROR:CODE_INDENT: code indent should use tabs where possible
#293: FILE: net/r8169.c:958:
+                                                    tp->RxBufferDmas,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#293: FILE: net/r8169.c:958:
+                                                    tp->RxBufferDmas,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#294: FILE: net/r8169.c:959:
+                                                    RX_BUF_SIZE * NUM_RX_DESC,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#294: FILE: net/r8169.c:959:
+                                                    RX_BUF_SIZE * NUM_RX_DESC,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#295: FILE: net/r8169.c:960:
+                                                    PCI_DMA_FROMDEVICE);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#295: FILE: net/r8169.c:960:
+                                                    PCI_DMA_FROMDEVICE);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#304: FILE: net/r8169.c:969:
+^I^I^I^I^I    (OWNbit | EORbit) | $

WARNING:CONSTANT_CONVERSION: __constant_cpu_to_le32 should be cpu_to_le32
#305: FILE: net/r8169.c:970:
+					    __constant_cpu_to_le32(RX_BUF_SIZE);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#309: FILE: net/r8169.c:973:
+^I^I^I^I^I    OWNbit | $

WARNING:CONSTANT_CONVERSION: __constant_cpu_to_le32 should be cpu_to_le32
#310: FILE: net/r8169.c:974:
+					    __constant_cpu_to_le32(RX_BUF_SIZE);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#326: FILE: net/r8169.c:1076:
+^Ipci_free_consistent(tp->pci_dev, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#327: FILE: net/r8169.c:1077:
+	pci_free_consistent(tp->pci_dev, 
+		NUM_TX_DESC * sizeof (struct TxDesc) + 256,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#327: FILE: net/r8169.c:1077:
+		NUM_TX_DESC * sizeof (struct TxDesc) + 256,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#329: FILE: net/r8169.c:1079:
+^Ipci_free_consistent(tp->pci_dev, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#330: FILE: net/r8169.c:1080:
+	pci_free_consistent(tp->pci_dev, 
+		NUM_RX_DESC * sizeof (struct RxDesc) + 256,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#330: FILE: net/r8169.c:1080:
+		NUM_RX_DESC * sizeof (struct RxDesc) + 256,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#334: FILE: net/r8169.c:1084:
+^Ipci_unmap_single(tp->pci_dev, tp->RxBufferDmas, $

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000326031.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 28 errors, 27 warnings, 30 checks, 271 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000326031.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
