WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#30: 
 (1) If a process has a lot of threads, and a debugger like strace is running

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#83: FILE: fs/binfmt_elf.c:1097:
+	psinfo.pr_ppid = prstatus.pr_ppid = current->parent->pid;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#116: FILE: fs/proc/base.c:339:
+(p==current||(p->parent==current&&(p->ptrace & PT_PTRACED)&&p->state==TASK_STOPPED))
   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '||' (ctx:VxV)
#116: FILE: fs/proc/base.c:339:
+(p==current||(p->parent==current&&(p->ptrace & PT_PTRACED)&&p->state==TASK_STOPPED))
            ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#116: FILE: fs/proc/base.c:339:
+(p==current||(p->parent==current&&(p->ptrace & PT_PTRACED)&&p->state==TASK_STOPPED))
                        ^

ERROR:SPACING: spaces required around that '&&' (ctx:VxV)
#116: FILE: fs/proc/base.c:339:
+(p==current||(p->parent==current&&(p->ptrace & PT_PTRACED)&&p->state==TASK_STOPPED))
                                 ^

ERROR:SPACING: spaces required around that '&&' (ctx:VxV)
#116: FILE: fs/proc/base.c:339:
+(p==current||(p->parent==current&&(p->ptrace & PT_PTRACED)&&p->state==TASK_STOPPED))
                                                           ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#116: FILE: fs/proc/base.c:339:
+(p==current||(p->parent==current&&(p->ptrace & PT_PTRACED)&&p->state==TASK_STOPPED))
                                                                     ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#129: FILE: include/linux/init_task.h:58:
+    real_parent:	&tsk,						\
                ^

WARNING:INDENTED_LABEL: labels should not be indented
#129: FILE: include/linux/init_task.h:58:
+    real_parent:	&tsk,						\

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#130: FILE: include/linux/init_task.h:59:
+    parent:		&tsk,						\
           ^

WARNING:INDENTED_LABEL: labels should not be indented
#130: FILE: include/linux/init_task.h:59:
+    parent:		&tsk,						\

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#131: FILE: include/linux/init_task.h:60:
+    children:		LIST_HEAD_INIT(tsk.children),			\
             ^

WARNING:INDENTED_LABEL: labels should not be indented
#131: FILE: include/linux/init_task.h:60:
+    children:		LIST_HEAD_INIT(tsk.children),			\

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#132: FILE: include/linux/init_task.h:61:
+    sibling:		LIST_HEAD_INIT(tsk.sibling),			\
            ^

WARNING:INDENTED_LABEL: labels should not be indented
#132: FILE: include/linux/init_task.h:61:
+    sibling:		LIST_HEAD_INIT(tsk.sibling),			\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#167: FILE: include/linux/sched.h:721:
+#define REMOVE_LINKS(p) do {				\
+	(p)->next_task->prev_task = (p)->prev_task;	\
+	(p)->prev_task->next_task = (p)->next_task;	\
+	list_del_init(&(p)->sibling);			\
 	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#182: FILE: include/linux/sched.h:727:
+#define SET_LINKS(p) do {					\
+	(p)->next_task = &init_task;				\
+	(p)->prev_task = init_task.prev_task;			\
+	init_task.prev_task->next_task = (p);			\
+	init_task.prev_task = (p);				\
+	list_add_tail(&(p)->sibling,&(p)->parent->children);	\
 	} while (0)

ERROR:SPACING: space required after that ',' (ctx:VxO)
#187: FILE: include/linux/sched.h:732:
+	list_add_tail(&(p)->sibling,&(p)->parent->children);	\
 	                           ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#187: FILE: include/linux/sched.h:732:
+	list_add_tail(&(p)->sibling,&(p)->parent->children);	\
 	                            ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#192: FILE: include/linux/sched.h:737:
+	if (list_empty(&p->children)) return NULL;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#193: FILE: include/linux/sched.h:738:
+	return list_entry(p->children.next,struct task_struct,sibling);
 	                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#193: FILE: include/linux/sched.h:738:
+	return list_entry(p->children.next,struct task_struct,sibling);
 	                                                     ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#198: FILE: include/linux/sched.h:743:
+	if (list_empty(&p->children)) return NULL;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#199: FILE: include/linux/sched.h:744:
+	return list_entry(p->children.prev,struct task_struct,sibling);
 	                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#199: FILE: include/linux/sched.h:744:
+	return list_entry(p->children.prev,struct task_struct,sibling);
 	                                                     ^

ERROR:SPACING: spaces required around that '==' (ctx:VxO)
#204: FILE: include/linux/sched.h:749:
+	if (p->sibling.prev==&p->parent->children) return NULL;
 	                   ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#204: FILE: include/linux/sched.h:749:
+	if (p->sibling.prev==&p->parent->children) return NULL;
 	                     ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#204: FILE: include/linux/sched.h:749:
+	if (p->sibling.prev==&p->parent->children) return NULL;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#205: FILE: include/linux/sched.h:750:
+	return list_entry(p->sibling.prev,struct task_struct,sibling);
 	                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#205: FILE: include/linux/sched.h:750:
+	return list_entry(p->sibling.prev,struct task_struct,sibling);
 	                                                    ^

ERROR:SPACING: spaces required around that '==' (ctx:VxO)
#210: FILE: include/linux/sched.h:755:
+	if (p->sibling.next==&p->parent->children) return NULL;
 	                   ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#210: FILE: include/linux/sched.h:755:
+	if (p->sibling.next==&p->parent->children) return NULL;
 	                     ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#210: FILE: include/linux/sched.h:755:
+	if (p->sibling.next==&p->parent->children) return NULL;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#211: FILE: include/linux/sched.h:756:
+	return list_entry(p->sibling.next,struct task_struct,sibling);
 	                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#211: FILE: include/linux/sched.h:756:
+	return list_entry(p->sibling.next,struct task_struct,sibling);
 	                                                    ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'p->parent->pgrp != pgrp'
#229: FILE: kernel/exit.c:96:
+		if ((p->parent->pgrp != pgrp) &&
+		    (p->parent->session == p->session)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'p->parent->session == p->session'
#229: FILE: kernel/exit.c:96:
+		if ((p->parent->pgrp != pgrp) &&
+		    (p->parent->session == p->session)) {

ERROR:SPACING: space required after that ',' (ctx:VxO)
#292: FILE: kernel/exit.c:453:
+		list_add_tail(&p->sibling,&p->parent->children);
 		                         ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#292: FILE: kernel/exit.c:453:
+		list_add_tail(&p->sibling,&p->parent->children);
 		                          ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#302: FILE: kernel/exit.c:567:
+		struct list_head *_p;
+		list_for_each(_p,&tsk->children) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxO)
#302: FILE: kernel/exit.c:567:
+		list_for_each(_p,&tsk->children) {
 		                ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#302: FILE: kernel/exit.c:567:
+		list_for_each(_p,&tsk->children) {
 		                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#303: FILE: kernel/exit.c:568:
+			p = list_entry(_p,struct task_struct,sibling);
 			                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#303: FILE: kernel/exit.c:568:
+			p = list_entry(_p,struct task_struct,sibling);
 			                                    ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#401: FILE: kernel/sched.c:1341:
+	printk("%5lu %5d %6d ", free, p->pid, p->parent->pid);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#402: FILE: kernel/sched.c:1342:
+	if ((relative = eldest_child(p)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#403: FILE: kernel/sched.c:1343:
+		printk("%5d ", relative->pid);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#408: FILE: kernel/sched.c:1346:
+	if ((relative = younger_sibling(p)))

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#409: FILE: kernel/sched.c:1347:
+		printk("%7d", relative->pid);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#414: FILE: kernel/sched.c:1350:
+	if ((relative = older_sibling(p)))

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#415: FILE: kernel/sched.c:1351:
+		printk(" %5d", relative->pid);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000469654.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 37 errors, 10 warnings, 5 checks, 348 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000469654.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
