ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#89: 
--- a/fs/sysv/balloc.c	Mon Apr 29 13:12:01 2002

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#115: FILE: fs/sysv/balloc.c:43:
+	struct sysv_sb_info * sbi = SYSV_SB(sb);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#121: FILE: fs/sysv/balloc.c:47:
+	unsigned block = fs32_to_cpu(sbi, nr);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#163: FILE: fs/sysv/balloc.c:83:
+		*(u16*)bh->b_data = cpu_to_fs16(sbi, count);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#226: FILE: fs/sysv/balloc.c:135:
+		count = fs16_to_cpu(sbi, *(u16*)bh->b_data);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#236: FILE: fs/sysv/balloc.c:143:
+		memcpy(sbi->s_bcache, get_chunk(sb, bh),
 				count * sizeof(sysv_zone_t));

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#249: FILE: fs/sysv/balloc.c:159:
+	struct sysv_sb_info * sbi = SYSV_SB(sb);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#298: FILE: fs/sysv/balloc.c:204:
+		n = fs16_to_cpu(sbi, *(u16*)bh->b_data);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#363: FILE: fs/sysv/dir.c:325:
+				if (de->inode == cpu_to_fs16(SYSV_SB(sb),
+							inode->i_ino))

CHECK:BRACES: braces {} should be used on all arms of this statement
#423: FILE: fs/sysv/ialloc.c:41:
+	if (sbi->s_bh1 == sbi->s_bh2)
[...]
 	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#430: FILE: fs/sysv/ialloc.c:47:
+			return (sysv_ino_t*)(sbi->s_sbd1 + offset);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#433: FILE: fs/sysv/ialloc.c:49:
+			return (sysv_ino_t*)(sbi->s_sbd2 + offset);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#446: FILE: fs/sysv/ialloc.c:60:
+	block += (ino-1) >> sbi->s_inodes_per_block_bits;
 	             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#453: FILE: fs/sysv/ialloc.c:65:
+	return res + ((ino-1) & sbi->s_inodes_per_block_1);
 	                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#471: FILE: fs/sysv/ialloc.c:81:
+			*sv_sb_fic_inode(sb,i++) = cpu_to_fs16(SYSV_SB(sb), ino);
 			                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#509: FILE: fs/sysv/ialloc.c:123:
+		*sv_sb_fic_inode(sb,count++) = cpu_to_fs16(sbi, ino);
 		                   ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#697: FILE: fs/sysv/inode.c:95:
+static inline void read3byte(struct sysv_sb_info *sbi,
 	unsigned char * from, unsigned char * to)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#716: FILE: fs/sysv/inode.c:116:
+static inline void write3byte(struct sysv_sb_info *sbi,
 	unsigned char * from, unsigned char * to)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#732: FILE: fs/sysv/inode.c:161:
+	struct sysv_sb_info * sbi = SYSV_SB(sb);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#771: FILE: fs/sysv/inode.c:193:
+		read3byte(sbi, &raw_inode->i_data[3*block],
 		                                   ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#772: FILE: fs/sysv/inode.c:194:
+		read3byte(sbi, &raw_inode->i_data[3*block],
+				(u8 *)&si->i_data[block]);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#784: FILE: fs/sysv/inode.c:210:
+	struct sysv_sb_info * sbi = SYSV_SB(sb);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#825: FILE: fs/sysv/inode.c:242:
+		write3byte(sbi, (u8 *)&si->i_data[block],
+			&raw_inode->i_data[3*block]);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#825: FILE: fs/sysv/inode.c:242:
+			&raw_inode->i_data[3*block]);
 			                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#914: FILE: fs/sysv/itree.c:145:
+		parent = block_to_cpu(SYSV_SB(inode->i_sb), branch[n-1].key);
 		                                                    ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#956: FILE: fs/sysv/itree.c:222:
+		map_bh(bh_result, sb, block_to_cpu(SYSV_SB(sb),
+					chain[depth-1].key));

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#956: FILE: fs/sysv/itree.c:222:
+					chain[depth-1].key));
 					           ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1055: FILE: fs/sysv/namei.c:155:
+^Iif (dir->i_nlink >= SYSV_SB(dir->i_sb)->s_link_max) $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#1343: FILE: fs/sysv/super.c:206:
+ ^Iif (fs16_to_cpu(sbi, sbd->s_nfree) == 0xffff) {$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1343: FILE: fs/sysv/super.c:206:
+ ^Iif (fs16_to_cpu(sbi, sbd->s_nfree) == 0xffff) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1343: FILE: fs/sysv/super.c:206:
+ ^Iif (fs16_to_cpu(sbi, sbd->s_nfree) == 0xffff) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1344: FILE: fs/sysv/super.c:207:
+ ^I^Isbi->s_type = FSTYPE_AFS;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1344: FILE: fs/sysv/super.c:207:
+ ^I^Isbi->s_type = FSTYPE_AFS;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1344: FILE: fs/sysv/super.c:207:
+ ^I^Isbi->s_type = FSTYPE_AFS;$

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sysv_sb_info *' should also have an identifier name
#1399: FILE: fs/sysv/super.c:265:
+	int (*test)(struct sysv_sb_info *, struct buffer_head *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct buffer_head *' should also have an identifier name
#1399: FILE: fs/sysv/super.c:265:
+	int (*test)(struct sysv_sb_info *, struct buffer_head *);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1442: FILE: fs/sysv/super.c:309:
+	sbi->s_inodes_per_block_1 = (bsize >> 6)-1;
 	                                        ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1443: FILE: fs/sysv/super.c:310:
+	sbi->s_inodes_per_block_bits = n_bits-6;
 	                                     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1445: FILE: fs/sysv/super.c:312:
+	sbi->s_ind_per_block_2 = bsize_4*bsize_4;
 	                                ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1447: FILE: fs/sysv/super.c:314:
+	sbi->s_ind_per_block_bits = n_bits-2;
 	                                  ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1491: FILE: fs/sysv/super.c:353:
+	if (512 != sizeof (struct sysv4_super_block))

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#1491: FILE: fs/sysv/super.c:353:
+	if (512 != sizeof (struct sysv4_super_block))

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1493: FILE: fs/sysv/super.c:355:
+	if (512 != sizeof (struct sysv2_super_block))

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#1493: FILE: fs/sysv/super.c:355:
+	if (512 != sizeof (struct sysv2_super_block))

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*sbi)...) over kmalloc(sizeof(struct sysv_sb_info)...)
#1502: FILE: fs/sysv/super.c:362:
+	sbi = kmalloc(sizeof(struct sysv_sb_info), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1510: FILE: fs/sysv/super.c:370:
+^I$

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*sbi)...) over kmalloc(sizeof(struct sysv_sb_info)...)
#1558: FILE: fs/sysv/super.c:446:
+	sbi = kmalloc(sizeof(struct sysv_sb_info), GFP_KERNEL);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1568: FILE: fs/sysv/super.c:456:
+^I$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1629: FILE: fs/sysv/sysv.h:1:
+#ifndef _SYSV_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1666: FILE: fs/sysv/sysv.h:38:
+	/* These are pointers into the disk buffer, to compensate for
+	   different superblock layout. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1666: FILE: fs/sysv/sysv.h:38:
+	   different superblock layout. */

ERROR:POINTER_LOCATION: "foo *         bar" should be "foo *bar"
#1667: FILE: fs/sysv/sysv.h:39:
+	char *         s_sbd1;		/* entire superblock data, for part 1 */

ERROR:POINTER_LOCATION: "foo *         bar" should be "foo *bar"
#1668: FILE: fs/sysv/sysv.h:40:
+	char *         s_sbd2;		/* entire superblock data, for part 2 */

ERROR:CODE_INDENT: code indent should use tabs where possible
#1670: FILE: fs/sysv/sysv.h:42:
+        u16            *s_sb_fic_inodes; /* pointer to s_sbd->s_inode */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1670: FILE: fs/sysv/sysv.h:42:
+        u16            *s_sb_fic_inodes; /* pointer to s_sbd->s_inode */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1678: FILE: fs/sysv/sysv.h:50:
+	/* We keep those superblock entities that don't change here;
+	   this saves us an indirection and perhaps a conversion. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1678: FILE: fs/sysv/sysv.h:50:
+	   this saves us an indirection and perhaps a conversion. */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1696: FILE: fs/sysv/sysv.h:68:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1707: FILE: fs/sysv/sysv.h:79:
+
+

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1722: FILE: fs/sysv/sysv.h:94:
+#define XENIX_SUPER_MAGIC	(SYSV_MAGIC_BASE+FSTYPE_XENIX)
                          	                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1723: FILE: fs/sysv/sysv.h:95:
+#define SYSV4_SUPER_MAGIC	(SYSV_MAGIC_BASE+FSTYPE_SYSV4)
                          	                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1724: FILE: fs/sysv/sysv.h:96:
+#define SYSV2_SUPER_MAGIC	(SYSV_MAGIC_BASE+FSTYPE_SYSV2)
                          	                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1725: FILE: fs/sysv/sysv.h:97:
+#define COH_SUPER_MAGIC		(SYSV_MAGIC_BASE+FSTYPE_COH)
                        		                ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1727: FILE: fs/sysv/sysv.h:99:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1736: FILE: fs/sysv/sysv.h:108:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1747: FILE: fs/sysv/sysv.h:119:
+
+

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1749: FILE: fs/sysv/sysv.h:121:
+extern struct sysv_inode *sysv_raw_inode(struct super_block *, unsigned,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1749: FILE: fs/sysv/sysv.h:121:
+extern struct sysv_inode *sysv_raw_inode(struct super_block *, unsigned,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1750: FILE: fs/sysv/sysv.h:122:
+extern struct sysv_inode *sysv_raw_inode(struct super_block *, unsigned,
+			struct buffer_head **);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1751: FILE: fs/sysv/sysv.h:123:
+extern struct inode * sysv_new_inode(const struct inode *, mode_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1751: FILE: fs/sysv/sysv.h:123:
+extern struct inode * sysv_new_inode(const struct inode *, mode_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct inode *' should also have an identifier name
#1751: FILE: fs/sysv/sysv.h:123:
+extern struct inode * sysv_new_inode(const struct inode *, mode_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'mode_t' should also have an identifier name
#1751: FILE: fs/sysv/sysv.h:123:
+extern struct inode * sysv_new_inode(const struct inode *, mode_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1752: FILE: fs/sysv/sysv.h:124:
+extern void sysv_free_inode(struct inode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#1752: FILE: fs/sysv/sysv.h:124:
+extern void sysv_free_inode(struct inode *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1753: FILE: fs/sysv/sysv.h:125:
+extern unsigned long sysv_count_free_inodes(struct super_block *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#1753: FILE: fs/sysv/sysv.h:125:
+extern unsigned long sysv_count_free_inodes(struct super_block *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1756: FILE: fs/sysv/sysv.h:128:
+extern u32 sysv_new_block(struct super_block *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#1756: FILE: fs/sysv/sysv.h:128:
+extern u32 sysv_new_block(struct super_block *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1757: FILE: fs/sysv/sysv.h:129:
+extern void sysv_free_block(struct super_block *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#1757: FILE: fs/sysv/sysv.h:129:
+extern void sysv_free_block(struct super_block *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#1757: FILE: fs/sysv/sysv.h:129:
+extern void sysv_free_block(struct super_block *, u32);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1758: FILE: fs/sysv/sysv.h:130:
+extern unsigned long sysv_count_free_blocks(struct super_block *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#1758: FILE: fs/sysv/sysv.h:130:
+extern unsigned long sysv_count_free_blocks(struct super_block *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1761: FILE: fs/sysv/sysv.h:133:
+extern void sysv_truncate(struct inode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#1761: FILE: fs/sysv/sysv.h:133:
+extern void sysv_truncate(struct inode *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1764: FILE: fs/sysv/sysv.h:136:
+extern void sysv_write_inode(struct inode *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#1764: FILE: fs/sysv/sysv.h:136:
+extern void sysv_write_inode(struct inode *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1764: FILE: fs/sysv/sysv.h:136:
+extern void sysv_write_inode(struct inode *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1765: FILE: fs/sysv/sysv.h:137:
+extern int sysv_sync_inode(struct inode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#1765: FILE: fs/sysv/sysv.h:137:
+extern int sysv_sync_inode(struct inode *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1766: FILE: fs/sysv/sysv.h:138:
+extern int sysv_sync_file(struct file *, struct dentry *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#1766: FILE: fs/sysv/sysv.h:138:
+extern int sysv_sync_file(struct file *, struct dentry *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#1766: FILE: fs/sysv/sysv.h:138:
+extern int sysv_sync_file(struct file *, struct dentry *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1766: FILE: fs/sysv/sysv.h:138:
+extern int sysv_sync_file(struct file *, struct dentry *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1767: FILE: fs/sysv/sysv.h:139:
+extern void sysv_set_inode(struct inode *, dev_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#1767: FILE: fs/sysv/sysv.h:139:
+extern void sysv_set_inode(struct inode *, dev_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'dev_t' should also have an identifier name
#1767: FILE: fs/sysv/sysv.h:139:
+extern void sysv_set_inode(struct inode *, dev_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1770: FILE: fs/sysv/sysv.h:142:
+extern struct sysv_dir_entry *sysv_find_entry(struct dentry *, struct page **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#1770: FILE: fs/sysv/sysv.h:142:
+extern struct sysv_dir_entry *sysv_find_entry(struct dentry *, struct page **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page **' should also have an identifier name
#1770: FILE: fs/sysv/sysv.h:142:
+extern struct sysv_dir_entry *sysv_find_entry(struct dentry *, struct page **);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1771: FILE: fs/sysv/sysv.h:143:
+extern int sysv_add_link(struct dentry *, struct inode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#1771: FILE: fs/sysv/sysv.h:143:
+extern int sysv_add_link(struct dentry *, struct inode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#1771: FILE: fs/sysv/sysv.h:143:
+extern int sysv_add_link(struct dentry *, struct inode *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1772: FILE: fs/sysv/sysv.h:144:
+extern int sysv_delete_entry(struct sysv_dir_entry *, struct page *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sysv_dir_entry *' should also have an identifier name
#1772: FILE: fs/sysv/sysv.h:144:
+extern int sysv_delete_entry(struct sysv_dir_entry *, struct page *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#1772: FILE: fs/sysv/sysv.h:144:
+extern int sysv_delete_entry(struct sysv_dir_entry *, struct page *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1773: FILE: fs/sysv/sysv.h:145:
+extern int sysv_make_empty(struct inode *, struct inode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#1773: FILE: fs/sysv/sysv.h:145:
+extern int sysv_make_empty(struct inode *, struct inode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#1773: FILE: fs/sysv/sysv.h:145:
+extern int sysv_make_empty(struct inode *, struct inode *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1774: FILE: fs/sysv/sysv.h:146:
+extern int sysv_empty_dir(struct inode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#1774: FILE: fs/sysv/sysv.h:146:
+extern int sysv_empty_dir(struct inode *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1775: FILE: fs/sysv/sysv.h:147:
+extern void sysv_set_link(struct sysv_dir_entry *, struct page *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sysv_dir_entry *' should also have an identifier name
#1775: FILE: fs/sysv/sysv.h:147:
+extern void sysv_set_link(struct sysv_dir_entry *, struct page *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#1775: FILE: fs/sysv/sysv.h:147:
+extern void sysv_set_link(struct sysv_dir_entry *, struct page *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#1775: FILE: fs/sysv/sysv.h:147:
+extern void sysv_set_link(struct sysv_dir_entry *, struct page *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1776: FILE: fs/sysv/sysv.h:148:
+extern void sysv_set_link(struct sysv_dir_entry *, struct page *,
+			struct inode *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1777: FILE: fs/sysv/sysv.h:149:
+extern struct sysv_dir_entry *sysv_dotdot(struct inode *, struct page **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#1777: FILE: fs/sysv/sysv.h:149:
+extern struct sysv_dir_entry *sysv_dotdot(struct inode *, struct page **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page **' should also have an identifier name
#1777: FILE: fs/sysv/sysv.h:149:
+extern struct sysv_dir_entry *sysv_dotdot(struct inode *, struct page **);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1778: FILE: fs/sysv/sysv.h:150:
+extern ino_t sysv_inode_by_name(struct dentry *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#1778: FILE: fs/sysv/sysv.h:150:
+extern ino_t sysv_inode_by_name(struct dentry *);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1780: FILE: fs/sysv/sysv.h:152:
+
+

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#1781: FILE: fs/sysv/sysv.h:153:
+extern struct inode_operations sysv_file_inode_operations;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#1782: FILE: fs/sysv/sysv.h:154:
+extern struct inode_operations sysv_dir_inode_operations;

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#1783: FILE: fs/sysv/sysv.h:155:
+extern struct inode_operations sysv_fast_symlink_inode_operations;

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1784: FILE: fs/sysv/sysv.h:156:
+extern struct file_operations sysv_file_operations;

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1785: FILE: fs/sysv/sysv.h:157:
+extern struct file_operations sysv_dir_operations;

WARNING:CONST_STRUCT: struct address_space_operations should normally be const
#1786: FILE: fs/sysv/sysv.h:158:
+extern struct address_space_operations sysv_aops;

WARNING:CONST_STRUCT: struct dentry_operations should normally be const
#1788: FILE: fs/sysv/sysv.h:160:
+extern struct dentry_operations sysv_dentry_operations;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1790: FILE: fs/sysv/sysv.h:162:
+
+

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1833: FILE: fs/sysv/sysv.h:205:
+		return *n = PDP_swab(PDP_swab(*n)+d);
 		                                 ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1835: FILE: fs/sysv/sysv.h:207:
+		return *n = cpu_to_le32(le32_to_cpu(*n)+d);
 		                                       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1837: FILE: fs/sysv/sysv.h:209:
+		return *n = cpu_to_be32(be32_to_cpu(*n)+d);
 		                                       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1859: FILE: fs/sysv/sysv.h:231:
+		return *n = cpu_to_le16(le16_to_cpu(*n)+d);
 		                                       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1861: FILE: fs/sysv/sysv.h:233:
+		return *n = cpu_to_be16(be16_to_cpu(*n)+d);
 		                                       ^

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1904: FILE: include/linux/sysv_fs.h:5:
+# define __packed2__	__attribute__((packed, aligned(2)))

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(2) over __attribute__((aligned(2)))
#1904: FILE: include/linux/sysv_fs.h:5:
+# define __packed2__	__attribute__((packed, aligned(2)))

ERROR:SPACING: space required before that '!' (ctx:VxW)
#1907: FILE: include/linux/sysv_fs.h:7:
+>> I want to scream! <<
                    ^

ERROR:SPACING: space prohibited after that '!' (ctx:VxW)
#1907: FILE: include/linux/sysv_fs.h:7:
+>> I want to scream! <<
                    ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1949: FILE: include/linux/sysv_fs.h:16:
+   significant 16 bits come last. */

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1997: FILE: include/linux/sysv_fs.h:185:
+	u8  i_data[3*(10+1+1+1)];
 	            ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1997: FILE: include/linux/sysv_fs.h:185:
+	u8  i_data[3*(10+1+1+1)];
 	                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1997: FILE: include/linux/sysv_fs.h:185:
+	u8  i_data[3*(10+1+1+1)];
 	                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1997: FILE: include/linux/sysv_fs.h:185:
+	u8  i_data[3*(10+1+1+1)];
 	                    ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000461643.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 23 errors, 60 warnings, 62 checks, 1958 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000461643.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
