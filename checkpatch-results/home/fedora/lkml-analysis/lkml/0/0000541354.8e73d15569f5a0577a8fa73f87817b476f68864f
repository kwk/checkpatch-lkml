WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#30: 
Here's a patch that fixes RW semaphores on the i386 architecture. It is very

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#82: FILE: arch/i386/kernel/semaphore.c:240:
+	popl	%ecx
 	    	^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#104: FILE: arch/i386/kernel/semaphore.c:254:
+	popl	%ecx
 	    	^

ERROR:SPACING: spaces required around that ':' (ctx:VxE)
#122: FILE: arch/i386/kernel/semaphore.c:264:
+__rwsem_wake:
             ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#123: FILE: arch/i386/kernel/semaphore.c:265:
+	pushl	%edx
 	     	^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#124: FILE: arch/i386/kernel/semaphore.c:266:
+	pushl	%ecx
 	     	^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#126: FILE: arch/i386/kernel/semaphore.c:268:
+	popl	%ecx
 	    	^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#127: FILE: arch/i386/kernel/semaphore.c:269:
+	popl	%edx
 	    	^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#159: FILE: arch/i386/kernel/semaphore.c:284:
+		LOCK_PREFIX "xadd %0,%2"
 		                  ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#159: FILE: arch/i386/kernel/semaphore.c:284:
+		LOCK_PREFIX "xadd %0,%2"
 		                    ^

CHECK:SPACING: spaces preferred around that '%' (ctx:OxV)
#159: FILE: arch/i386/kernel/semaphore.c:284:
+		LOCK_PREFIX "xadd %0,%2"
 		                     ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#160: FILE: arch/i386/kernel/semaphore.c:285:
+		: "=r"(oldmem)
 		   ^

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#161: FILE: arch/i386/kernel/semaphore.c:286:
+		: "r0"(delta), "m"(*__xg(v))

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#209: FILE: arch/i386/kernel/semaphore.c:308:
+ * wait for the read lock to be granted$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#210: FILE: arch/i386/kernel/semaphore.c:309:
+ * - need to repeal the increment made inline by the caller$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#211: FILE: arch/i386/kernel/semaphore.c:310:
+ * - need to throw a write-lock style spanner into the works (sub 0x00010000 from count)$

CHECK:SPACING: spaces preferred around that '%' (ctx:BxV)
#221: FILE: arch/i386/kernel/semaphore.c:318:
+	rwsemdebug("[%d] Entering down_read_failed(%08x)\n",current->pid,atomic_read(&sem->count));
 	             ^

CHECK:SPACING: spaces preferred around that '%' (ctx:BxV)
#221: FILE: arch/i386/kernel/semaphore.c:318:
+	rwsemdebug("[%d] Entering down_read_failed(%08x)\n",current->pid,atomic_read(&sem->count));
 	                                           ^

CHECK:CAMELCASE: Avoid CamelCase: <Entering>
#221: FILE: arch/i386/kernel/semaphore.c:318:
+	rwsemdebug("[%d] Entering down_read_failed(%08x)\n",current->pid,atomic_read(&sem->count));

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:SPACING: spaces preferred around that '%' (ctx:BxV)
#232: FILE: arch/i386/kernel/semaphore.c:327:
+	rwsemdebug("X(%08x)\n",count);
 	              ^

CHECK:SPACING: spaces preferred around that '%' (ctx:BxV)
#253: FILE: arch/i386/kernel/semaphore.c:346:
+	rwsemdebug("[%d] Leaving down_read_failed(%08x)\n",current->pid,atomic_read(&sem->count));
 	             ^

CHECK:SPACING: spaces preferred around that '%' (ctx:BxV)
#253: FILE: arch/i386/kernel/semaphore.c:346:
+	rwsemdebug("[%d] Leaving down_read_failed(%08x)\n",current->pid,atomic_read(&sem->count));
 	                                          ^

CHECK:CAMELCASE: Avoid CamelCase: <Leaving>
#253: FILE: arch/i386/kernel/semaphore.c:346:
+	rwsemdebug("[%d] Leaving down_read_failed(%08x)\n",current->pid,atomic_read(&sem->count));

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#261: FILE: arch/i386/kernel/semaphore.c:352:
+ * wait for the write lock to be granted$

CHECK:SPACING: spaces preferred around that '%' (ctx:BxV)
#271: FILE: arch/i386/kernel/semaphore.c:360:
+	rwsemdebug("[%d] Entering down_write_failed(%08x)\n",
 	             ^

CHECK:SPACING: spaces preferred around that '%' (ctx:BxV)
#271: FILE: arch/i386/kernel/semaphore.c:360:
+	rwsemdebug("[%d] Entering down_write_failed(%08x)\n",
 	                                            ^

CHECK:SPACING: spaces preferred around that '%' (ctx:BxV)
#283: FILE: arch/i386/kernel/semaphore.c:370:
+	rwsemdebug("A(%08x)\n",count);
 	              ^

CHECK:SPACING: spaces preferred around that '%' (ctx:BxV)
#305: FILE: arch/i386/kernel/semaphore.c:389:
+	rwsemdebug("[%d] Leaving down_write_failed(%08x)\n",current->pid,atomic_read(&sem->count));
 	             ^

CHECK:SPACING: spaces preferred around that '%' (ctx:BxV)
#305: FILE: arch/i386/kernel/semaphore.c:389:
+	rwsemdebug("[%d] Leaving down_write_failed(%08x)\n",current->pid,atomic_read(&sem->count));
 	                                           ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#322: FILE: arch/i386/kernel/semaphore.c:395:
+ * handle the lock being released whilst there are processes blocked on it that can now run$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#323: FILE: arch/i386/kernel/semaphore.c:396:
+ * - if we come here, then:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#324: FILE: arch/i386/kernel/semaphore.c:397:
+ *   - the 'active part' of the count (&0x0000ffff) reached zero (but may no longer be zero)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#325: FILE: arch/i386/kernel/semaphore.c:398:
+ *   - the 'waiting part' of the count (&0xffff0000) is negative (and will still be so)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#326: FILE: arch/i386/kernel/semaphore.c:399:
+ */$

CHECK:SPACING: spaces preferred around that '%' (ctx:BxV)
#332: FILE: arch/i386/kernel/semaphore.c:404:
+	rwsemdebug("[%d] Entering rwsem_wake(%08x)\n",current->pid,atomic_read(&sem->count));
 	             ^

CHECK:SPACING: spaces preferred around that '%' (ctx:BxV)
#332: FILE: arch/i386/kernel/semaphore.c:404:
+	rwsemdebug("[%d] Entering rwsem_wake(%08x)\n",current->pid,atomic_read(&sem->count));
 	                                     ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#390: FILE: arch/i386/kernel/semaphore.c:443:
+ out:$

CHECK:SPACING: spaces preferred around that '%' (ctx:BxV)
#391: FILE: arch/i386/kernel/semaphore.c:444:
+	rwsemdebug("[%d] Leaving rwsem_wake(%08x)\n",current->pid,atomic_read(&sem->count));
 	             ^

CHECK:SPACING: spaces preferred around that '%' (ctx:BxV)
#391: FILE: arch/i386/kernel/semaphore.c:444:
+	rwsemdebug("[%d] Leaving rwsem_wake(%08x)\n",current->pid,atomic_read(&sem->count));
 	                                    ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#396: FILE: arch/i386/kernel/semaphore.c:449:
+ * rw spinlock fallbacks$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#397: FILE: arch/i386/kernel/semaphore.c:450:
+ */$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#476: FILE: include/asm-i386/semaphore.h:254:
+#define rwsemdebug(FMT,...)
                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#510: FILE: include/asm-i386/semaphore.h:296:
+	rwsemdebug("Entering down_read(count=%08x)\n",atomic_read(&sem->count));
 	                                             ^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#511: FILE: include/asm-i386/semaphore.h:297:
+	__asm__ __volatile__(

WARNING:SPLIT_STRING: quoted string split across lines
#521: FILE: include/asm-i386/semaphore.h:307:
+		".previous"
+		"# ending down_read\n\t"

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:SPACING: space required after that ',' (ctx:VxV)
#526: FILE: include/asm-i386/semaphore.h:312:
+	rwsemdebug("Leaving down_read(count=%08x)\n",atomic_read(&sem->count));
 	                                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#541: FILE: include/asm-i386/semaphore.h:330:
+	rwsemdebug("Entering down_write(count=%08x)\n",atomic_read(&sem->count));
 	                                              ^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#543: FILE: include/asm-i386/semaphore.h:332:
+	__asm__ __volatile__(

ERROR:SPACING: space required after that ',' (ctx:VxV)
#559: FILE: include/asm-i386/semaphore.h:348:
+	rwsemdebug("Leaving down_write(count=%08x)\n",atomic_read(&sem->count));
 	                                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#570: FILE: include/asm-i386/semaphore.h:371:
+	rwsemdebug("Entering up_read(count=%08x)\n",atomic_read(&sem->count));
 	                                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#600: FILE: include/asm-i386/semaphore.h:391:
+	rwsemdebug("Leaving up_read(count=%08x)\n",atomic_read(&sem->count));
 	                                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#610: FILE: include/asm-i386/semaphore.h:401:
+	rwsemdebug("Entering __up_write(count=%08x)\n",atomic_read(&sem->count));
 	                                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#637: FILE: include/asm-i386/semaphore.h:418:
+	rwsemdebug("Leaving __up_write(count=%08x)\n",atomic_read(&sem->count));
 	                                             ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#648: FILE: include/linux/sched.h:551:
+extern int FASTCALL(__wake_up_ctx(wait_queue_head_t *q, unsigned int mode, int count, int bit));

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#649: FILE: include/linux/sched.h:552:
+extern int FASTCALL(__wake_up_sync_ctx(wait_queue_head_t *q, unsigned int mode, int count, int bit));

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#649: FILE: include/linux/sched.h:552:
+extern int FASTCALL(__wake_up_sync_ctx(wait_queue_head_t *q, unsigned int mode, int count, int bit));

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#657: FILE: include/linux/sched.h:571:
+#define wake_up_ctx(x,count,bit)	__wake_up_ctx((x),TASK_UNINTERRUPTIBLE | TASK_INTERRUPTIBLE,count,bit)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#657: FILE: include/linux/sched.h:571:
+#define wake_up_ctx(x,count,bit)	__wake_up_ctx((x),TASK_UNINTERRUPTIBLE | TASK_INTERRUPTIBLE,count,bit)
                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#657: FILE: include/linux/sched.h:571:
+#define wake_up_ctx(x,count,bit)	__wake_up_ctx((x),TASK_UNINTERRUPTIBLE | TASK_INTERRUPTIBLE,count,bit)
                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#657: FILE: include/linux/sched.h:571:
+#define wake_up_ctx(x,count,bit)	__wake_up_ctx((x),TASK_UNINTERRUPTIBLE | TASK_INTERRUPTIBLE,count,bit)
                                 	                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#657: FILE: include/linux/sched.h:571:
+#define wake_up_ctx(x,count,bit)	__wake_up_ctx((x),TASK_UNINTERRUPTIBLE | TASK_INTERRUPTIBLE,count,bit)
                                 	                                                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#657: FILE: include/linux/sched.h:571:
+#define wake_up_ctx(x,count,bit)	__wake_up_ctx((x),TASK_UNINTERRUPTIBLE | TASK_INTERRUPTIBLE,count,bit)
                                 	                                                                 ^

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#658: FILE: include/linux/sched.h:572:
+#define wake_up_sync_ctx(x,count,bit)	__wake_up_ctx((x),TASK_UNINTERRUPTIBLE | TASK_INTERRUPTIBLE,count,bit)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#658: FILE: include/linux/sched.h:572:
+#define wake_up_sync_ctx(x,count,bit)	__wake_up_ctx((x),TASK_UNINTERRUPTIBLE | TASK_INTERRUPTIBLE,count,bit)
                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#658: FILE: include/linux/sched.h:572:
+#define wake_up_sync_ctx(x,count,bit)	__wake_up_ctx((x),TASK_UNINTERRUPTIBLE | TASK_INTERRUPTIBLE,count,bit)
                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#658: FILE: include/linux/sched.h:572:
+#define wake_up_sync_ctx(x,count,bit)	__wake_up_ctx((x),TASK_UNINTERRUPTIBLE | TASK_INTERRUPTIBLE,count,bit)
                                      	                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#658: FILE: include/linux/sched.h:572:
+#define wake_up_sync_ctx(x,count,bit)	__wake_up_ctx((x),TASK_UNINTERRUPTIBLE | TASK_INTERRUPTIBLE,count,bit)
                                      	                                                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#658: FILE: include/linux/sched.h:572:
+#define wake_up_sync_ctx(x,count,bit)	__wake_up_ctx((x),TASK_UNINTERRUPTIBLE | TASK_INTERRUPTIBLE,count,bit)
                                      	                                                                 ^

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#709: FILE: kernel/sched.c:742:
+			if (try_to_wake_up(p, sync) && (curr->flags&WQ_FLAG_EXCLUSIVE) && !--nr_exclusive)

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#709: FILE: kernel/sched.c:742:
+			if (try_to_wake_up(p, sync) && (curr->flags&WQ_FLAG_EXCLUSIVE) && !--nr_exclusive)
 			                                           ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#726: FILE: kernel/sched.c:775:
+static inline int __wake_up_ctx_common (wait_queue_head_t *q, unsigned int mode,

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#734: FILE: kernel/sched.c:783:
+	stop = bit<0;
 	          ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#735: FILE: kernel/sched.c:784:
+	if (bit<0) bit = -bit;
 	       ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#735: FILE: kernel/sched.c:784:
+	if (bit<0) bit = -bit;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:CODE_INDENT: code indent should use tabs where possible
#743: FILE: kernel/sched.c:792:
+                wait_queue_t *curr = list_entry(tmp, wait_queue_t, task_list);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#743: FILE: kernel/sched.c:792:
+                wait_queue_t *curr = list_entry(tmp, wait_queue_t, task_list);$

ERROR:SPACING: space required after that ',' (ctx:VxO)
#750: FILE: kernel/sched.c:799:
+			if (!test_and_clear_bit(bit,&curr->flags)) {
 			                           ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#750: FILE: kernel/sched.c:799:
+			if (!test_and_clear_bit(bit,&curr->flags)) {
 			                            ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#757: FILE: kernel/sched.c:806:
+			if (!try_to_wake_up(p, sync) || !(curr->flags&WQ_FLAG_EXCLUSIVE))
 			                                             ^

ERROR:SPACING: spaces required around that '>=' (ctx:VxV)
#761: FILE: kernel/sched.c:810:
+			if (woken>=count)
 			         ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#772: FILE: kernel/sched.c:821:
+	int woken = 0;
+	if (q && count) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#774: FILE: kernel/sched.c:823:
+		unsigned long flags;
+		wq_read_lock_irqsave(&q->lock, flags);

WARNING:LINE_SPACING: Missing a blank line after declarations
#784: FILE: kernel/sched.c:833:
+	int woken = 0;
+	if (q && count) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#786: FILE: kernel/sched.c:835:
+		unsigned long flags;
+		wq_read_lock_irqsave(&q->lock, flags);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000541354.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 29 errors, 24 warnings, 31 checks, 695 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000541354.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
