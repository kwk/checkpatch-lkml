WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#71: FILE: drivers/dlm/lockspace.c:43:
+	int n = simple_strtol(buf, NULL, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#88: FILE: drivers/dlm/lockspace.c:60:
+	ls->ls_uevent_result = simple_strtol(buf, NULL, 0);

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#101: FILE: drivers/dlm/lockspace.c:73:
+	ls->ls_global_id = simple_strtoul(buf, NULL, 0);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dlm_ls *' should also have an identifier name
#107: FILE: drivers/dlm/lockspace.c:79:
+	ssize_t (*show)(struct dlm_ls *, char *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#107: FILE: drivers/dlm/lockspace.c:79:
+	ssize_t (*show)(struct dlm_ls *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dlm_ls *' should also have an identifier name
#108: FILE: drivers/dlm/lockspace.c:80:
+	ssize_t (*store)(struct dlm_ls *, const char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#108: FILE: drivers/dlm/lockspace.c:80:
+	ssize_t (*store)(struct dlm_ls *, const char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#108: FILE: drivers/dlm/lockspace.c:80:
+	ssize_t (*store)(struct dlm_ls *, const char *, size_t);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR' are not preferred. Consider using octal permissions '0200'.
#112: FILE: drivers/dlm/lockspace.c:84:
+	.attr  = {.name = "control", .mode = S_IWUSR},

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR' are not preferred. Consider using octal permissions '0200'.
#117: FILE: drivers/dlm/lockspace.c:89:
+	.attr  = {.name = "event_done", .mode = S_IWUSR},

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#122: FILE: drivers/dlm/lockspace.c:94:
+	.attr  = {.name = "id", .mode = S_IRUGO | S_IWUSR},

WARNING:LINE_SPACING: Missing a blank line after declarations
#139: FILE: drivers/dlm/lockspace.c:111:
+	struct dlm_attr *a = container_of(attr, struct dlm_attr, attr);
+	return a->show ? a->show(ls, buf) : 0;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#147: FILE: drivers/dlm/lockspace.c:119:
+	struct dlm_attr *a = container_of(attr, struct dlm_attr, attr);
+	return a->store ? a->store(ls, buf, len) : len;

WARNING:CONST_STRUCT: struct sysfs_ops should normally be const
#150: FILE: drivers/dlm/lockspace.c:122:
+static struct sysfs_ops dlm_attr_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#193: FILE: drivers/dlm/lockspace.c:165:
+	error = wait_event_interruptible(ls->ls_uevent_wait,
+			test_and_clear_bit(LSFL_UEVENT_WAIT, &ls->ls_flags));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#202: FILE: drivers/dlm/lockspace.c:174:
+
+

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#215: FILE: drivers/dlm/lockspace.c:186:
+		printk("dlm_lockspace_init: cannot register kset %d\n", error);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000158874.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 0 errors, 15 warnings, 2 checks, 256 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000158874.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
