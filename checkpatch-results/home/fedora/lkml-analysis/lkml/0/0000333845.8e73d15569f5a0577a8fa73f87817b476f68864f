WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#59: 
diff -urpN --exclude TAGS -X /home/rusty/devel/kernel/kernel-patches/current-dontdiff --minimal .12070-2.6.0-test6-more_groups_refcount.pre/arch/ia64/ia32/sys_ia32.c .12070-2.6.0-test6-more_groups_refcount/arch/ia64/ia32/sys_ia32.c

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#70: FILE: arch/ia64/ia32/sys_ia32.c:2438:
+	gl = kmalloc(sizeof(gl[0]) * current->ngroups, GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

CHECK:SPACING: No space is necessary after a cast
#100: FILE: arch/ia64/ia32/sys_ia32.c:2465:
+	if ((unsigned) gidsetsize > max_groups)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#100: FILE: arch/ia64/ia32/sys_ia32.c:2465:
+	if ((unsigned) gidsetsize > max_groups)

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#102: FILE: arch/ia64/ia32/sys_ia32.c:2467:
+	gl = kmalloc(sizeof(gl[0]) * gidsetsize, GFP_KERNEL);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#138: FILE: arch/s390/kernel/compat_linux.c:192:
+extern asmlinkage long sys_getgroups (int gidsetsize, gid_t *grouplist);

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#161: FILE: arch/s390/kernel/compat_linux.c:201:
+	gl = kmalloc(sizeof(gl[0]) * current->ngroups, GFP_KERNEL);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#180: FILE: arch/s390/kernel/compat_linux.c:219:
+extern asmlinkage long sys_setgroups (int gidsetsize, gid_t *grouplist);

CHECK:SPACING: No space is necessary after a cast
#194: FILE: arch/s390/kernel/compat_linux.c:228:
+	if ((unsigned) gidsetsize > max_groups)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#194: FILE: arch/s390/kernel/compat_linux.c:228:
+	if ((unsigned) gidsetsize > max_groups)

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#202: FILE: arch/s390/kernel/compat_linux.c:230:
+	gl = kmalloc(sizeof(gl[0]) * gidsetsize, GFP_KERNEL);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#238: FILE: arch/sparc64/kernel/sys_sparc32.c:209:
+extern asmlinkage long sys_getgroups (int gidsetsize, gid_t *grouplist);

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#261: FILE: arch/sparc64/kernel/sys_sparc32.c:218:
+	gl = kmalloc(sizeof(gl[0]) * current->ngroups, GFP_KERNEL);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#280: FILE: arch/sparc64/kernel/sys_sparc32.c:236:
+extern asmlinkage long sys_setgroups (int gidsetsize, gid_t *grouplist);

CHECK:SPACING: No space is necessary after a cast
#294: FILE: arch/sparc64/kernel/sys_sparc32.c:245:
+	if ((unsigned) gidsetsize > max_groups)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#294: FILE: arch/sparc64/kernel/sys_sparc32.c:245:
+	if ((unsigned) gidsetsize > max_groups)

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#302: FILE: arch/sparc64/kernel/sys_sparc32.c:247:
+	gl = kmalloc(sizeof(gl[0]) * gidsetsize, GFP_KERNEL);

ERROR:SPACING: space required before the open parenthesis '('
#361: FILE: fs/nfsd/nfs4state.c:247:
+	for(i = 0; i < SVC_CREDS_NGROUPS; i++)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#373: FILE: fs/nfsd/nfssvc.c:186:
+		printk("Unable to start nfsd thread: can't set groups\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'nfsd', this function's name, in a string
#373: FILE: fs/nfsd/nfssvc.c:186:
+		printk("Unable to start nfsd thread: can't set groups\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#689: FILE: include/linux/sched.h:333:
+struct task_groups
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const void *' should also have an identifier name
#691: FILE: include/linux/sched.h:335:
+	void (*free)(const void *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#727: FILE: include/linux/sched.h:698:
+extern int cow_current_groups(unsigned int ngroups);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#728: FILE: include/linux/sched.h:699:
+extern void release_groups(gid_t *groups);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#757: FILE: include/linux/sysctl.h:130:
+	KERN_MAX_GROUPS=60,	/* int: setgroups limit */
 	               ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#820: FILE: kernel/sys.c:1086:
+ * current->ngroups and changes group array if everything else goes ok. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#828: FILE: kernel/sys.c:1094:
+	size = sizeof(*tgrp) + sizeof(tgrp->groups[0])*ngroups;
 	                                              ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#829: FILE: kernel/sys.c:1095:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#830: FILE: kernel/sys.c:1096:
+	if (!(tgrp = kmalloc(size, GFP_KERNEL))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#830: FILE: kernel/sys.c:1096:
+	if (!(tgrp = kmalloc(size, GFP_KERNEL))) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#831: FILE: kernel/sys.c:1097:
+		if (!(tgrp = vmalloc(size)))

CHECK:BRACES: Unbalanced braces around else statement
#834: FILE: kernel/sys.c:1100:
+	} else

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#847: FILE: kernel/sys.c:1113:
+ * 0 or -err. */

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#853: FILE: kernel/sys.c:1119:
+	printk("cow to %u groups\n", ngroups);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#856: FILE: kernel/sys.c:1122:
+	if (atomic_read(&task_groups(current->groups)->usage) > 1
+	    || ngroups > current->ngroups)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#880: FILE: kernel/sys.c:1162:
+	printk("sys_setgroups %u groups\n", gidsetsize);

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#890: FILE: kernel/sys.c:1168:
+	groups = kmalloc(sizeof(groups[0]) * gidsetsize, GFP_KERNEL);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#914: FILE: kernel/sys.c:1502:
+EXPORT_SYMBOL(cow_current_groups);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#954: FILE: kernel/uid16.c:120:
+		if (!access_ok(VERIFY_WRITE, grouplist, sizeof(old_gid_t)*i))
 		                                                         ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#956: FILE: kernel/uid16.c:122:
+		for(j=0;j<i;j++) {
 		     ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#956: FILE: kernel/uid16.c:122:
+		for(j=0;j<i;j++) {
 		       ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#956: FILE: kernel/uid16.c:122:
+		for(j=0;j<i;j++) {
 		         ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#956: FILE: kernel/uid16.c:122:
+		for(j=0;j<i;j++) {
 		           ^

ERROR:SPACING: space required before the open parenthesis '('
#956: FILE: kernel/uid16.c:122:
+		for(j=0;j<i;j++) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#958: FILE: kernel/uid16.c:124:
+			old_gid_t group;
+			group = current->groups[j];

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#959: FILE: kernel/uid16.c:125:
+			if (copy_to_user(grouplist+j, &group, sizeof(group)))
 			                          ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#980: FILE: kernel/uid16.c:141:
+	if ((ret = cow_current_groups(gidsetsize)) < 0)

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#983: FILE: kernel/uid16.c:144:
+	groups = kmalloc(sizeof(groups[0]) * gidsetsize, GFP_KERNEL);

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#984: FILE: kernel/uid16.c:145:
+	new_groups = kmalloc(sizeof(new_groups[0]) * gidsetsize, GFP_KERNEL);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000333845.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 12 errors, 26 warnings, 11 checks, 800 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000333845.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
