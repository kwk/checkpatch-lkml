WARNING:PATCH_PREFIX: patch prefix 'drivers' exists, appears to be a -p0 patch

ERROR:SPACING: space required after that ',' (ctx:VxV)
#103: FILE: sound/maestro.c:261:
+MODULE_PARM(debug,"i");
                  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#105: FILE: sound/maestro.c:263:
+MODULE_PARM(dsps_order,"i");
                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#106: FILE: sound/maestro.c:264:
+MODULE_PARM(use_pm,"i");
                   ^

WARNING:HOTPLUG_SECTION: Using __devinitdata is unnecessary
#119: FILE: sound/maestro.c:350:
+static char version[] __devinitdata =

ERROR:DATE_TIME: Use of the '__TIME__' macro makes the build non-deterministic
#120: FILE: sound/maestro.c:351:
+KERN_INFO "maestro: version " DRIVER_VERSION " time " __TIME__ " " __DATE__ "\n";

It is generally desirable that building the same source code with
the same set of tools is reproducible, i.e. the output is always
exactly the same.

The kernel does *not* use the ``__DATE__`` and ``__TIME__`` macros,
and enables warnings if they are used as they can lead to
non-deterministic builds.

See: https://www.kernel.org/doc/html/latest/kbuild/reproducible-builds.html#timestamps

ERROR:DATE_TIME: Use of the '__DATE__' macro makes the build non-deterministic
#120: FILE: sound/maestro.c:351:
+KERN_INFO "maestro: version " DRIVER_VERSION " time " __TIME__ " " __DATE__ "\n";

CHECK:LINE_SPACING: Please don't use multiple blank lines
#122: FILE: sound/maestro.c:353:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#153: FILE: sound/maestro.c:2140:
+		drvr = pci_dev_driver (pdev);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#155: FILE: sound/maestro.c:2142:
+			card = (struct ess_card*)pci_get_drvdata (pdev);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#155: FILE: sound/maestro.c:2142:
+			card = (struct ess_card*)pci_get_drvdata (pdev);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#206: FILE: sound/maestro.c:2988:
+		drvr = pci_dev_driver (pdev);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#211: FILE: sound/maestro.c:2993:
+			c = (struct ess_card*)pci_get_drvdata (pdev);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#211: FILE: sound/maestro.c:2993:
+			c = (struct ess_card*)pci_get_drvdata (pdev);

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#215: FILE: sound/maestro.c:2996:
+			for(i=0;i<NR_DSPS;i++)
+			{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#215: FILE: sound/maestro.c:2996:
+			for(i=0;i<NR_DSPS;i++)
 			     ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#215: FILE: sound/maestro.c:2996:
+			for(i=0;i<NR_DSPS;i++)
 			       ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#215: FILE: sound/maestro.c:2996:
+			for(i=0;i<NR_DSPS;i++)
 			         ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#215: FILE: sound/maestro.c:2996:
+			for(i=0;i<NR_DSPS;i++)
 			                 ^

ERROR:SPACING: space required before the open parenthesis '('
#215: FILE: sound/maestro.c:2996:
+			for(i=0;i<NR_DSPS;i++)

ERROR:SPACING: spaces required around that '=' (ctx:VxO)
#217: FILE: sound/maestro.c:2998:
+				sp=&c->channels[i];
 				  ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#217: FILE: sound/maestro.c:2998:
+				sp=&c->channels[i];
 				   ^

ERROR:SPACING: space required before the open parenthesis '('
#218: FILE: sound/maestro.c:2999:
+				if(sp->dev_audio < 0)

ERROR:SPACING: space required before the open parenthesis '('
#220: FILE: sound/maestro.c:3001:
+				if((sp->dev_audio ^ minor) & ~0xf)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#222: FILE: sound/maestro.c:3003:
+				s=sp;
 				 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#240: FILE: sound/maestro.c:3385:
+maestro_probe(struct pci_dev *pcidev,const struct pci_device_id *pdid)
                                     ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#255: FILE: sound/maestro.c:3399:
+	static int printed_version;
+	if (!printed_version++)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#256: FILE: sound/maestro.c:3400:
+		printk(version);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#264: FILE: sound/maestro.c:3407:
+
+

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#265: FILE: sound/maestro.c:3408:
+	if ((ret=pci_enable_device(pcidev)))
 	        ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#265: FILE: sound/maestro.c:3408:
+	if ((ret=pci_enable_device(pcidev)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#269: FILE: sound/maestro.c:3411:
+	iobase = pci_resource_start(pcidev,0);
 	                                  ^

ERROR:SPACING: space prohibited before that close parenthesis ')'
#270: FILE: sound/maestro.c:3412:
+	if (!iobase || !(pci_resource_flags(pcidev, 0 ) & IORESOURCE_IO))

ERROR:SPACING: space required before the open parenthesis '('
#273: FILE: sound/maestro.c:3415:
+	if(pcidev->irq == 0)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#353: FILE: sound/maestro.c:3542:
+	if((ret=request_irq(card->irq, ess_interrupt, SA_SHIRQ, card_names[card_type], card)))
 	       ^

ERROR:SPACING: space required before the open parenthesis '('
#353: FILE: sound/maestro.c:3542:
+	if((ret=request_irq(card->irq, ess_interrupt, SA_SHIRQ, card_names[card_type], card)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#353: FILE: sound/maestro.c:3542:
+	if((ret=request_irq(card->irq, ess_interrupt, SA_SHIRQ, card_names[card_type], card)))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#364: FILE: sound/maestro.c:3557:
+	pci_set_drvdata(pcidev,card);
 	                      ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#370: FILE: sound/maestro.c:3562:
+^Ireturn 0; $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#377: FILE: sound/maestro.c:3565:
+static void maestro_remove(struct pci_dev *pcidev) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#380: FILE: sound/maestro.c:3568:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#381: FILE: sound/maestro.c:3569:
+^I/* XXX maybe should force stop bob, but should be all $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#382: FILE: sound/maestro.c:3570:
+	/* XXX maybe should force stop bob, but should be all 
+		stopped by _release by now */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#382: FILE: sound/maestro.c:3570:
+		stopped by _release by now */

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#385: FILE: sound/maestro.c:3573:
+	for(i=0;i<NR_DSPS;i++)
+	{

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#385: FILE: sound/maestro.c:3573:
+	for(i=0;i<NR_DSPS;i++)
 	     ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#385: FILE: sound/maestro.c:3573:
+	for(i=0;i<NR_DSPS;i++)
 	       ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#385: FILE: sound/maestro.c:3573:
+	for(i=0;i<NR_DSPS;i++)
 	         ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#385: FILE: sound/maestro.c:3573:
+	for(i=0;i<NR_DSPS;i++)
 	                 ^

ERROR:SPACING: space required before the open parenthesis '('
#385: FILE: sound/maestro.c:3573:
+	for(i=0;i<NR_DSPS;i++)

WARNING:LINE_SPACING: Missing a blank line after declarations
#388: FILE: sound/maestro.c:3576:
+		struct ess_state *ess = &card->channels[i];
+		if(ess->dev_audio != -1)

ERROR:SPACING: space required before the open parenthesis '('
#388: FILE: sound/maestro.c:3576:
+		if(ess->dev_audio != -1)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#392: FILE: sound/maestro.c:3580:
+	maestro_power(card,ACPI_D3);
 	                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#395: FILE: sound/maestro.c:3583:
+	pci_set_drvdata(pcidev,NULL);
 	                      ^

WARNING:HOTPLUG_SECTION: Using __devinitdata is unnecessary
#398: FILE: sound/maestro.c:3586:
+static struct pci_device_id maestro_pci_tbl[] __devinitdata = {

WARNING:INDENTED_LABEL: labels should not be indented
#410: FILE: sound/maestro.c:3595:
+	name:"maestro",

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#411: FILE: sound/maestro.c:3596:
+	id_table:maestro_pci_tbl,
 	        ^

WARNING:INDENTED_LABEL: labels should not be indented
#411: FILE: sound/maestro.c:3596:
+	id_table:maestro_pci_tbl,

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#412: FILE: sound/maestro.c:3597:
+	probe:maestro_probe,
 	     ^

WARNING:INDENTED_LABEL: labels should not be indented
#412: FILE: sound/maestro.c:3597:
+	probe:maestro_probe,

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#413: FILE: sound/maestro.c:3598:
+	remove:maestro_remove,
 	      ^

WARNING:INDENTED_LABEL: labels should not be indented
#413: FILE: sound/maestro.c:3598:
+	remove:maestro_remove,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#422: FILE: sound/maestro.c:3606:
+		printk(KERN_WARNING "maestro: reboot notifier registration failed; may not reboot properly.\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#424: FILE: sound/maestro.c:3608:
+	printk(version);

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#521: FILE: sound/maestro.c:3634:
+void cleanup_maestro(void) {

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000533291.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 42 errors, 18 warnings, 5 checks, 474 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000533291.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
