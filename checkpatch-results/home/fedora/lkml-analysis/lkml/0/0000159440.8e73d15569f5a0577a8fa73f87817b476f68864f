WARNING:TYPO_SPELLING: 'calles' may be misspelled - perhaps 'calls'?
#45: 
filemap_copy_from_user() calles __copy_from_user_inatomic_nocache()
                         ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'cashe' may be misspelled - perhaps 'cache'?
#46: 
instead of __copy_from_user_inatomic() and reduced cashe miss.
                                                   ^^^^^

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#54: 
Counted BSQ_CACHE_REFERENCE events (cache references seen by the bus unit) with a unit mask of 0x3f (multiple flags) count 3000

WARNING:TYPO_SPELLING: 'EXTRAVERSION' may be misspelled - perhaps 'EXTROVERSION'?
#86: FILE: Makefile:4:
+EXTRAVERSION = .4.nocache
 ^^^^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#108: FILE: arch/i386/lib/usercopy.c:518:
+static unsigned long $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#111: FILE: arch/i386/lib/usercopy.c:521:
+        /* Note! gcc doesn't seem to align stack variables properly, so we$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:CODE_INDENT: code indent should use tabs where possible
#112: FILE: arch/i386/lib/usercopy.c:522:
+         * need to make use of unaligned loads and stores.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#113: FILE: arch/i386/lib/usercopy.c:523:
+         */$

ERROR:SPACING: space required before the open brace '{'
#117: FILE: arch/i386/lib/usercopy.c:527:
+	if (unlikely(in_interrupt())){

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#118: FILE: arch/i386/lib/usercopy.c:528:
+^I        __copy_user_zeroing(to, from, len);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#125: FILE: arch/i386/lib/usercopy.c:535:
+        kernel_fpu_begin();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#125: FILE: arch/i386/lib/usercopy.c:535:
+        kernel_fpu_begin();$

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#127: FILE: arch/i386/lib/usercopy.c:537:
+	__asm__ __volatile__ (

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#133: FILE: arch/i386/lib/usercopy.c:543:
+		"2:  \n"

ERROR:SPACING: space prohibited before that close parenthesis ')'
#142: FILE: arch/i386/lib/usercopy.c:552:
+		: : "r" (from) );

ERROR:TRAILING_WHITESPACE: trailing whitespace
#143: FILE: arch/i386/lib/usercopy.c:553:
+^I^I$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#144: FILE: arch/i386/lib/usercopy.c:554:
+	for(; i>5; i--)
+	{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#144: FILE: arch/i386/lib/usercopy.c:554:
+	for(; i>5; i--)
 	       ^

ERROR:SPACING: space required before the open parenthesis '('
#144: FILE: arch/i386/lib/usercopy.c:554:
+	for(; i>5; i--)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#146: FILE: arch/i386/lib/usercopy.c:556:
+		__asm__ __volatile__ (

ERROR:SPACING: spaces required around that '+=' (ctx:VxV)
#173: FILE: arch/i386/lib/usercopy.c:583:
+		from+=64;
 		    ^

ERROR:SPACING: spaces required around that '+=' (ctx:VxV)
#174: FILE: arch/i386/lib/usercopy.c:584:
+		to+=64;
 		  ^

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#177: FILE: arch/i386/lib/usercopy.c:587:
+	for(; i>0; i--)
+	{

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#177: FILE: arch/i386/lib/usercopy.c:587:
+	for(; i>0; i--)
 	       ^

ERROR:SPACING: space required before the open parenthesis '('
#177: FILE: arch/i386/lib/usercopy.c:587:
+	for(; i>0; i--)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#179: FILE: arch/i386/lib/usercopy.c:589:
+		__asm__ __volatile__ (

ERROR:SPACING: spaces required around that '+=' (ctx:VxV)
#197: FILE: arch/i386/lib/usercopy.c:607:
+		from+=64;
 		    ^

ERROR:SPACING: spaces required around that '+=' (ctx:VxV)
#198: FILE: arch/i386/lib/usercopy.c:608:
+		to+=64;
 		  ^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#204: FILE: arch/i386/lib/usercopy.c:614:
+	if(i=(len&63))
+	  __copy_user_zeroing(to, from, i);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#204: FILE: arch/i386/lib/usercopy.c:614:
+	if(i=(len&63))
 	    ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#204: FILE: arch/i386/lib/usercopy.c:614:
+	if(i=(len&63))
 	         ^

ERROR:SPACING: space required before the open parenthesis '('
#204: FILE: arch/i386/lib/usercopy.c:614:
+	if(i=(len&63))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#204: FILE: arch/i386/lib/usercopy.c:614:
+	if(i=(len&63))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#219: FILE: arch/i386/lib/usercopy.c:693:
+	BUG_ON((long)n < 0);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:CODE_INDENT: code indent should use tabs where possible
#220: FILE: arch/i386/lib/usercopy.c:694:
+        if (n < 512) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#220: FILE: arch/i386/lib/usercopy.c:694:
+        if (n < 512) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#220: FILE: arch/i386/lib/usercopy.c:694:
+        if (n < 512) {
+          if (movsl_is_ok(to, from, n))

CHECK:BRACES: braces {} should be used on all arms of this statement
#220: FILE: arch/i386/lib/usercopy.c:694:
+        if (n < 512) {
[...]
+        else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#221: FILE: arch/i386/lib/usercopy.c:695:
+          if (movsl_is_ok(to, from, n))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#221: FILE: arch/i386/lib/usercopy.c:695:
+          if (movsl_is_ok(to, from, n))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#222: FILE: arch/i386/lib/usercopy.c:696:
+                __copy_user_zeroing(to, from, n);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#222: FILE: arch/i386/lib/usercopy.c:696:
+                __copy_user_zeroing(to, from, n);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#223: FILE: arch/i386/lib/usercopy.c:697:
+          else$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#223: FILE: arch/i386/lib/usercopy.c:697:
+          else$

ERROR:CODE_INDENT: code indent should use tabs where possible
#224: FILE: arch/i386/lib/usercopy.c:698:
+                n = __copy_user_zeroing_intel(to, from, n);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#224: FILE: arch/i386/lib/usercopy.c:698:
+                n = __copy_user_zeroing_intel(to, from, n);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#225: FILE: arch/i386/lib/usercopy.c:699:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#225: FILE: arch/i386/lib/usercopy.c:699:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#226: FILE: arch/i386/lib/usercopy.c:700:
+        else$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#226: FILE: arch/i386/lib/usercopy.c:700:
+        else$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#226: FILE: arch/i386/lib/usercopy.c:700:
+        else
+          n = __copy_user_zeroing_nocache(to, from, n);

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#226: FILE: arch/i386/lib/usercopy.c:700:
+        }
+        else

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#227: FILE: arch/i386/lib/usercopy.c:701:
+          n = __copy_user_zeroing_nocache(to, from, n);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#227: FILE: arch/i386/lib/usercopy.c:701:
+          n = __copy_user_zeroing_nocache(to, from, n);$

ERROR:MODIFIED_INCLUDE_ASM: do not modify files in include/asm, change architecture specific files in include/asm-<architecture>
#236: +++ linux-2.6.12.4.nocache/include/asm/uaccess.h	2005-08-16 10:44:05.000000000 +0900

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#242: FILE: include/asm/uaccess.h:417:
+unsigned long __must_check __copy_from_user_ll_nocache(void *to,
+				const void __user *from, unsigned long n);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#276: FILE: include/asm/uaccess.h:533:
 }
+static inline unsigned long

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#279: FILE: include/asm/uaccess.h:536:
+       might_sleep();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#280: FILE: include/asm/uaccess.h:537:
+       return __copy_from_user_inatomic_nocache(to, from, n);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#293: FILE: include/asm-i386/uaccess.h:417:
+unsigned long __must_check __copy_from_user_ll_nocache(void *to,
+				const void __user *from, unsigned long n);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#327: FILE: include/asm-i386/uaccess.h:533:
 }
+static inline unsigned long

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#330: FILE: include/asm-i386/uaccess.h:536:
+       might_sleep();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#331: FILE: include/asm-i386/uaccess.h:537:
+       return __copy_from_user_inatomic_nocache(to, from, n);$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000159440.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 32 errors, 22 warnings, 9 checks, 270 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000159440.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
