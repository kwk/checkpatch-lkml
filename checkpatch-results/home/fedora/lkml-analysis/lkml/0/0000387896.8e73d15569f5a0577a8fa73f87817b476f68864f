WARNING:TYPO_SPELLING: 'noone' may be misspelled - perhaps 'no one'?
#34: 
ensure that noone is currently doing the "if (!slow_mode)
            ^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#55: 
diff -urNp --exclude TAGS -X /home/rusty/current-dontdiff --minimal linux-2.5.42/include/linux/bigref.h working-2.5.42-bigrefs/include/linux/bigref.h

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#59: FILE: include/linux/bigref.h:1:
+#ifndef _LINUX_BIGREF_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#66: FILE: include/linux/bigref.h:8:
+#include <asm/atomic.h>

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#73: FILE: include/linux/bigref.h:15:
+struct bigref_percpu
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#79: FILE: include/linux/bigref.h:21:
+struct bigref
+{

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#87: FILE: include/linux/bigref.h:29:
+extern void bigref_init_slow(struct bigref *ref, int value);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#90: FILE: include/linux/bigref.h:32:
+extern void bigref_start_fast(struct bigref *ref);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#93: FILE: include/linux/bigref.h:35:
+extern int bigref_val(struct bigref *ref);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#96: FILE: include/linux/bigref.h:38:
+extern int bigref_wait_for_zero(struct bigref *ref, long task_state);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#102: FILE: include/linux/bigref.h:44:
+	/* Could use any cpu's, but this is cache-friendly if we're
+	   about to frob the counter */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#102: FILE: include/linux/bigref.h:44:
+	   about to frob the counter */

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#106: FILE: include/linux/bigref.h:48:
+extern void __bigref_inc(struct bigref *ref);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#107: FILE: include/linux/bigref.h:49:
+extern void __bigref_dec(struct bigref *ref);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#139: FILE: include/linux/bigref.h:81:
+#endif /* _LINUX_BIGREF_H */ $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#147: FILE: include/linux/sched.h:452:
+extern void synchronize_kernel(void);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#176: FILE: kernel/bigref.c:1:
+/* Big reference counts for Linux.

CHECK:BIT_MACRO: Prefer using the BIT macro
#184: FILE: kernel/bigref.c:9:
+#define BIGREF_BIAS (1 << 23)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

ERROR:CODE_INDENT: code indent should use tabs where possible
#189: FILE: kernel/bigref.c:14:
+           count, which is not guaranteed on all architectures. */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#189: FILE: kernel/bigref.c:14:
+	/* They *must* have read slow_mode before they touch slow
+           count, which is not guaranteed on all architectures. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#189: FILE: kernel/bigref.c:14:
+           count, which is not guaranteed on all architectures. */

ERROR:CODE_INDENT: code indent should use tabs where possible
#197: FILE: kernel/bigref.c:22:
+           count, which is not guaranteed on all architectures. */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#197: FILE: kernel/bigref.c:22:
+	/* They *must* have read slow_mode before they touch slow
+           count, which is not guaranteed on all architectures. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#197: FILE: kernel/bigref.c:22:
+           count, which is not guaranteed on all architectures. */

WARNING:TYPO_SPELLING: 'noone' may be misspelled - perhaps 'no one'?
#207: FILE: kernel/bigref.c:32:
+	/* Bias by 1 so it doesn't fall to zero with noone waiting. */
 	                                             ^^^^^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#208: FILE: kernel/bigref.c:33:
+	atomic_set(&ref->slow_count, value+1);
 	                                  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#209: FILE: kernel/bigref.c:34:
+	for (i = 0; i < NR_CPUS; i++) {

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#223: FILE: kernel/bigref.c:48:
+	for (i = 0; i < NR_CPUS; i++)

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#234: FILE: kernel/bigref.c:59:
+	for (i = 0; i < NR_CPUS; i++)

WARNING:TYPO_SPELLING: 'noone' may be misspelled - perhaps 'no one'?
#245: FILE: kernel/bigref.c:70:
+	/* Boost it high so noone drops it to zero. */
 	                    ^^^^^

WARNING:MEMORY_BARRIER: memory barrier without comment
#247: FILE: kernel/bigref.c:72:
+	wmb();

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#248: FILE: kernel/bigref.c:73:
+	for (i = 0; i < NR_CPUS; i++)

WARNING:MEMORY_BARRIER: memory barrier without comment
#250: FILE: kernel/bigref.c:75:
+	wmb();

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#257: FILE: kernel/bigref.c:82:
+	for (i = 0; i < NR_CPUS; i++)

ERROR:CODE_INDENT: code indent should use tabs where possible
#261: FILE: kernel/bigref.c:86:
+           away the bias again.  Leave one refcount for us. */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#261: FILE: kernel/bigref.c:86:
+	/* Now we move those counters into the slow counter, and take
+           away the bias again.  Leave one refcount for us. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#261: FILE: kernel/bigref.c:86:
+           away the bias again.  Leave one refcount for us. */

WARNING:MEMORY_BARRIER: memory barrier without comment
#267: FILE: kernel/bigref.c:92:
+	wmb();

ERROR:CODE_INDENT: code indent should use tabs where possible
#278: FILE: kernel/bigref.c:103:
+           it won't increase again, so code is safe) */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#278: FILE: kernel/bigref.c:103:
+	/* Revert the bigref to fast mode (assumes once it hits zero
+           it won't increase again, so code is safe) */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#278: FILE: kernel/bigref.c:103:
+           it won't increase again, so code is safe) */

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#279: FILE: kernel/bigref.c:104:
+	for (i = 0; i < NR_CPUS; i++) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#281: FILE: kernel/bigref.c:106:
+		/* We already included previous per-cpu counters into
+		   total, so reset them */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#281: FILE: kernel/bigref.c:106:
+		   total, so reset them */

WARNING:MEMORY_BARRIER: memory barrier without comment
#283: FILE: kernel/bigref.c:108:
+		wmb();

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#294: FILE: kernel/bigref.c:119:
+EXPORT_SYMBOL(__bigref_inc);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#295: FILE: kernel/bigref.c:120:
+EXPORT_SYMBOL(__bigref_dec);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#296: FILE: kernel/bigref.c:121:
+EXPORT_SYMBOL(bigref_val);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#297: FILE: kernel/bigref.c:122:
+EXPORT_SYMBOL(bigref_wait_for_zero);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#306: FILE: kernel/sched.c:1914:
+/* This scales quite well (eg. 64 processors, average time to wait for
+   first schedule = jiffie/64.  Total time for all processors =

WARNING:TYPO_SPELLING: 'noone' may be misspelled - perhaps 'no one'?
#309: FILE: kernel/sched.c:1917:
+   At 1024 cpus, this is about 7.5 jiffies.  And that assumes noone
                                                               ^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#310: FILE: kernel/sched.c:1918:
+   schedules early. --RR */

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#314: FILE: kernel/sched.c:1922:
+	struct sched_param param = { .sched_priority = MAX_RT_PRIO-1 };
 	                                                          ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#328: FILE: kernel/sched.c:1936:
+	/* Make us schedulable on all other online CPUs: if we get
+	   preempted here it doesn't really matter, since it means we

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#330: FILE: kernel/sched.c:1938:
+	   is all we care about. */

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#332: FILE: kernel/sched.c:1940:
+	for (i = 0; i < NR_CPUS; i++)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000387896.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 7 errors, 39 warnings, 10 checks, 277 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000387896.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
