WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#62: FILE: drivers/powerop/Kconfig:1:
+config POWEROP_SYSFS
+	bool "  Enable PowerOP sysfs interface"
+	depends on POWEROP && SYSFS
+	help

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#77: FILE: drivers/powerop/powerop_sysfs.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#102: FILE: drivers/powerop/powerop_sysfs.c:26:
+int powerop_select_point(const char *id);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:SPACING: space required after that ',' (ctx:VxV)
#112: FILE: drivers/powerop/powerop_sysfs.c:36:
+	struct namedop,kobj)
 	              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#142: FILE: drivers/powerop/powerop_sysfs.c:66:
+	struct powerop_param_attribute,attr)
 	                              ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#144: FILE: drivers/powerop/powerop_sysfs.c:68:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:RETURN_VOID: void function return statements are not generally useful
#155: FILE: drivers/powerop/powerop_sysfs.c:79:
+	return;
+}

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#162: FILE: drivers/powerop/powerop_sysfs.c:86:
+	if ((op = kmalloc(sizeof(struct sysfsop), GFP_KERNEL)) == NULL)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*op)...) over kmalloc(sizeof(struct sysfsop)...)
#162: FILE: drivers/powerop/powerop_sysfs.c:86:
+	if ((op = kmalloc(sizeof(struct sysfsop), GFP_KERNEL)) == NULL)

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#174: FILE: drivers/powerop/powerop_sysfs.c:98:
+powerop_param_attr_show(struct kobject * kobj, struct attribute * attr,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#174: FILE: drivers/powerop/powerop_sysfs.c:98:
+powerop_param_attr_show(struct kobject * kobj, struct attribute * attr,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#175: FILE: drivers/powerop/powerop_sysfs.c:99:
+			char * buf)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#177: FILE: drivers/powerop/powerop_sysfs.c:101:
+	struct powerop_param_attribute * param_attr =

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#179: FILE: drivers/powerop/powerop_sysfs.c:103:
+	struct namedop * namedop = to_namedop(kobj);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#186: FILE: drivers/powerop/powerop_sysfs.c:110:
+		ret = param_attr->show(namedop->point,buf);
 		                                     ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#192: FILE: drivers/powerop/powerop_sysfs.c:116:
+powerop_param_attr_store(struct kobject * kobj, struct attribute * attr,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#192: FILE: drivers/powerop/powerop_sysfs.c:116:
+powerop_param_attr_store(struct kobject * kobj, struct attribute * attr,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#193: FILE: drivers/powerop/powerop_sysfs.c:117:
+			 const char * buf, size_t count)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#195: FILE: drivers/powerop/powerop_sysfs.c:119:
+	struct powerop_param_attribute * param_attr =

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#197: FILE: drivers/powerop/powerop_sysfs.c:121:
+	struct namedop * namedop = to_namedop(kobj);

ERROR:CODE_INDENT: code indent should use tabs where possible
#203: FILE: drivers/powerop/powerop_sysfs.c:127:
+        if (param_attr->store)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#203: FILE: drivers/powerop/powerop_sysfs.c:127:
+        if (param_attr->store)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#204: FILE: drivers/powerop/powerop_sysfs.c:128:
+                ret = param_attr->store(namedop->point,buf,count);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#204: FILE: drivers/powerop/powerop_sysfs.c:128:
+                ret = param_attr->store(namedop->point,buf,count);$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#204: FILE: drivers/powerop/powerop_sysfs.c:128:
+                ret = param_attr->store(namedop->point,buf,count);
                                                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#204: FILE: drivers/powerop/powerop_sysfs.c:128:
+                ret = param_attr->store(namedop->point,buf,count);
                                                           ^

WARNING:CONST_STRUCT: struct sysfs_ops should normally be const
#212: FILE: drivers/powerop/powerop_sysfs.c:136:
+static struct sysfs_ops namedop_sysfs_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#222: FILE: drivers/powerop/powerop_sysfs.c:146:
+static ssize_t new_show(struct subsystem * subsys, char * buf)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#222: FILE: drivers/powerop/powerop_sysfs.c:146:
+static ssize_t new_show(struct subsystem * subsys, char * buf)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#227: FILE: drivers/powerop/powerop_sysfs.c:151:
+static ssize_t new_store(struct subsystem * subsys, const char * buf,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#227: FILE: drivers/powerop/powerop_sysfs.c:151:
+static ssize_t new_store(struct subsystem * subsys, const char * buf,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#235: FILE: drivers/powerop/powerop_sysfs.c:159:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#238: FILE: drivers/powerop/powerop_sysfs.c:162:
+static ssize_t active_show(struct subsystem * subsys, char * buf)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#238: FILE: drivers/powerop/powerop_sysfs.c:162:
+static ssize_t active_show(struct subsystem * subsys, char * buf)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#250: FILE: drivers/powerop/powerop_sysfs.c:174:
+static ssize_t active_store(struct subsystem * subsys, const char * buf,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#250: FILE: drivers/powerop/powerop_sysfs.c:174:
+static ssize_t active_store(struct subsystem * subsys, const char * buf,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#260: FILE: drivers/powerop/powerop_sysfs.c:184:
+static struct attribute * g[] = {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#270: FILE: drivers/powerop/powerop_sysfs.c:194:
+
+

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#277: FILE: drivers/powerop/powerop_sysfs.c:201:
+		if ((error = sysfs_create_group(&op->kobj,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#279: FILE: drivers/powerop/powerop_sysfs.c:203:
+			printk(KERN_ERR

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#296: FILE: drivers/powerop/powerop_sysfs.c:220:
+	if ((op = kmalloc(sizeof(struct namedop), GFP_KERNEL)) == NULL)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*op)...) over kmalloc(sizeof(struct namedop)...)
#296: FILE: drivers/powerop/powerop_sysfs.c:220:
+	if ((op = kmalloc(sizeof(struct namedop), GFP_KERNEL)) == NULL)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#307: FILE: drivers/powerop/powerop_sysfs.c:231:
+	if ((error = kobject_register(&op->kobj))) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#308: FILE: drivers/powerop/powerop_sysfs.c:232:
+		printk(KERN_ERR

CHECK:LINE_SPACING: Please don't use multiple blank lines
#322: FILE: drivers/powerop/powerop_sysfs.c:246:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#355: FILE: drivers/powerop/powerop_sysfs.c:279:
+	int ret;
+	down(&namedop_list_mutex);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!selectedop"
#364: FILE: drivers/powerop/powerop_sysfs.c:288:
+	ret = (selectedop == NULL) ?

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#374: FILE: drivers/powerop/powerop_sysfs.c:298:
+EXPORT_SYMBOL_GPL(powerop_register_point);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#375: FILE: drivers/powerop/powerop_sysfs.c:299:
+EXPORT_SYMBOL_GPL(powerop_unregister_point);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#376: FILE: drivers/powerop/powerop_sysfs.c:300:
+EXPORT_SYMBOL_GPL(powerop_select_point);

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#387: FILE: drivers/powerop/powerop_sysfs.c:311:
+	if (! sysfs_init)
 	    ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#393: FILE: drivers/powerop/powerop_sysfs.c:317:
+        up(&namedop_list_mutex);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#393: FILE: drivers/powerop/powerop_sysfs.c:317:
+        up(&namedop_list_mutex);$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'param_attr_group.attrs != param_attrs'
#401: FILE: drivers/powerop/powerop_sysfs.c:325:
+	if ((param_attr_group.attrs != param_attrs) || !sysfs_init)

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:CODE_INDENT: code indent should use tabs where possible
#407: FILE: drivers/powerop/powerop_sysfs.c:331:
+        up(&namedop_list_mutex);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#407: FILE: drivers/powerop/powerop_sysfs.c:331:
+        up(&namedop_list_mutex);$

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#412: FILE: drivers/powerop/powerop_sysfs.c:336:
+EXPORT_SYMBOL_GPL(powerop_sysfs_register);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#413: FILE: drivers/powerop/powerop_sysfs.c:337:
+EXPORT_SYMBOL_GPL(powerop_sysfs_unregister);

ERROR:CODE_INDENT: code indent should use tabs where possible
#418: FILE: drivers/powerop/powerop_sysfs.c:342:
+        int error;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#418: FILE: drivers/powerop/powerop_sysfs.c:342:
+        int error;$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#420: FILE: drivers/powerop/powerop_sysfs.c:344:
+	if ((error = subsystem_register(&powerop_subsys))) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#421: FILE: drivers/powerop/powerop_sysfs.c:345:
+		printk(KERN_ERR

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#428: FILE: drivers/powerop/powerop_sysfs.c:352:
+	if ((error =

ERROR:SPACING: space required after that ',' (ctx:VxO)
#429: FILE: drivers/powerop/powerop_sysfs.c:353:
+	     sysfs_create_group(&powerop_subsys.kset.kobj,&attr_group))) {
 	                                                 ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#429: FILE: drivers/powerop/powerop_sysfs.c:353:
+	     sysfs_create_group(&powerop_subsys.kset.kobj,&attr_group))) {
 	                                                  ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#430: FILE: drivers/powerop/powerop_sysfs.c:354:
+		printk(KERN_ERR

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#438: FILE: drivers/powerop/powerop_sysfs.c:362:
+	if (! IS_ERR(sysfsop = sysfsop_create("hw")))
 	    ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#438: FILE: drivers/powerop/powerop_sysfs.c:362:
+	if (! IS_ERR(sysfsop = sysfsop_create("hw")))

ERROR:CODE_INDENT: code indent should use tabs where possible
#442: FILE: drivers/powerop/powerop_sysfs.c:366:
+        return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#442: FILE: drivers/powerop/powerop_sysfs.c:366:
+        return 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#455: FILE: drivers/powerop/powerop_sysfs.c:379:
+        up(&namedop_list_mutex);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#455: FILE: drivers/powerop/powerop_sysfs.c:379:
+        up(&namedop_list_mutex);$

ERROR:SPACING: space required after that ',' (ctx:VxO)
#465: FILE: drivers/powerop/powerop_sysfs.c:389:
+		sysfs_remove_group(&powerop_subsys.kset.kobj,&attr_group);
 		                                            ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#465: FILE: drivers/powerop/powerop_sysfs.c:389:
+		sysfs_remove_group(&powerop_subsys.kset.kobj,&attr_group);
 		                                             ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#489: FILE: include/linux/powerop_sysfs.h:1:
+/*

ERROR:CODE_INDENT: code indent should use tabs where possible
#508: FILE: include/linux/powerop_sysfs.h:20:
+        struct attribute        attr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#508: FILE: include/linux/powerop_sysfs.h:20:
+        struct attribute        attr;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#509: FILE: include/linux/powerop_sysfs.h:21:
+        ssize_t (*show)(struct powerop_point *op, char * buf);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#509: FILE: include/linux/powerop_sysfs.h:21:
+        ssize_t (*show)(struct powerop_point *op, char * buf);$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#509: FILE: include/linux/powerop_sysfs.h:21:
+        ssize_t (*show)(struct powerop_point *op, char * buf);

ERROR:CODE_INDENT: code indent should use tabs where possible
#510: FILE: include/linux/powerop_sysfs.h:22:
+        ssize_t (*store)(struct powerop_point *op, const char * buf, size_t count);};$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#510: FILE: include/linux/powerop_sysfs.h:22:
+        ssize_t (*store)(struct powerop_point *op, const char * buf, size_t count);};$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#510: FILE: include/linux/powerop_sysfs.h:22:
+        ssize_t (*store)(struct powerop_point *op, const char * buf, size_t count);};

ERROR:SPACING: space required after that ';' (ctx:VxV)
#510: FILE: include/linux/powerop_sysfs.h:22:
+        ssize_t (*store)(struct powerop_point *op, const char * buf, size_t count);};
                                                                                   ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000157320.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 50 errors, 26 warnings, 8 checks, 448 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000157320.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
