WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#36: 
D:   smp_prepare_cpus(maxcpus): probe for cpus and set up cpu_possible(cpu).

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#74: FILE: include/linux/smp.h:37:
+extern void smp_prepare_cpus(unsigned int max_cpus);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#81: FILE: include/linux/smp.h:42:
+extern int __cpu_up(unsigned int cpunum);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#88: FILE: include/linux/smp.h:47:
+extern void smp_cpus_done(unsigned int max_cpus);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#99: FILE: include/linux/smp.h:77:
+extern int register_cpu_notifier(struct notifier_block *nb);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#100: FILE: include/linux/smp.h:78:
+extern void unregister_cpu_notifier(struct notifier_block *nb);

ERROR:SPACING: space required before the open parenthesis '('
#113: FILE: include/linux/smp.h:105:
+#define unregister_cpu_notifier(nb) do { } while(0)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#143: FILE: init/main.c:117:
+__setup("nosmp", nosmp);

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#151: FILE: init/main.c:125:
+__setup("maxcpus=", maxcpus);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#171: FILE: init/main.c:341:
+	for (i = 0; i < NR_CPUS; i++) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#175: FILE: init/main.c:345:
+			printk("Bringing up %i\n", i);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#181: FILE: init/main.c:351:
+	printk("CPUS done %u\n", max_cpus);

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#183: FILE: init/main.c:353:
+#if 0

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#248: FILE: kernel/cpu.c:1:
+/* CPU control.

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#263: FILE: kernel/cpu.c:16:
+static struct notifier_block *cpu_chain = NULL;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:SPACING: space required after that ',' (ctx:VxV)
#273: FILE: kernel/cpu.c:26:
+	notifier_chain_unregister(&cpu_chain,nb);
 	                                    ^

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#276: FILE: kernel/cpu.c:29:
+int __devinit cpu_up(unsigned int cpu)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#280: FILE: kernel/cpu.c:33:
+^Iif ((ret = down_interruptible(&cpucontrol)) != 0) $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#280: FILE: kernel/cpu.c:33:
+	if ((ret = down_interruptible(&cpucontrol)) != 0) 

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#290: FILE: kernel/cpu.c:43:
+	if (ret != 0) goto out;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#292: FILE: kernel/cpu.c:45:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#295: FILE: kernel/cpu.c:48:
+	printk("CPU %u IS NOW UP!\n", cpu);

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#318: FILE: kernel/sched.c:1792:
+#if 0 /* FIXME: Grab cpu_lock, return error on this case. --RR */

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#374: FILE: kernel/sched.c:1903:
+		printk("Starting migration thread for cpu %li\n",

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#401: FILE: kernel/sched.c:1923:
+__initcall(migration_init);

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#419: FILE: kernel/softirq.c:401:
+static int __devinit cpu_callback(struct notifier_block *nfb,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#439: FILE: kernel/softirq.c:410:
+			printk("ksoftirqd for %i failed\n", hotcpu);

WARNING:YIELD: Using yield() is generally wrong. See yield() kernel-doc (sched/core.c)
#444: FILE: kernel/softirq.c:415:
+			yield();

ERROR:CODE_INDENT: code indent should use tabs where possible
#446: FILE: kernel/softirq.c:417:
+ ^I}$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#446: FILE: kernel/softirq.c:417:
+ ^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#446: FILE: kernel/softirq.c:417:
+ ^I}$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#529: FILE: arch/i386/kernel/apm.c:1590:
+	if ((num_possible_cpus() == 1) &&

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#581: FILE: arch/i386/kernel/mtrr.c:1058:
+    atomic_set (&undone_count, num_booting_cpus() - 1);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#581: FILE: arch/i386/kernel/mtrr.c:1058:
+    atomic_set (&undone_count, num_booting_cpus() - 1);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#590: FILE: arch/i386/kernel/mtrr.c:1067:
+    atomic_set (&undone_count, num_booting_cpus() - 1);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#590: FILE: arch/i386/kernel/mtrr.c:1067:
+    atomic_set (&undone_count, num_booting_cpus() - 1);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#598: FILE: arch/i386/kernel/mtrr.c:1074:
+    atomic_set (&undone_count, num_booting_cpus() - 1);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#598: FILE: arch/i386/kernel/mtrr.c:1074:
+    atomic_set (&undone_count, num_booting_cpus() - 1);

ERROR:CODE_INDENT: code indent should use tabs where possible
#610: FILE: arch/i386/kernel/nmi.c:85:
+           as they come up. */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#610: FILE: arch/i386/kernel/nmi.c:85:
+	/* FIXME: Only boot CPU is online at this stage.  Check CPUs
+           as they come up. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#610: FILE: arch/i386/kernel/nmi.c:85:
+           as they come up. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#622: FILE: arch/i386/kernel/smpboot.c:34:
+*		Rusty Russell	:	Hacked into shape for new "hotplug" boot process. */

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#641: FILE: arch/i386/kernel/smpboot.c:64:
+volatile unsigned long cpu_callout_map;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#724: FILE: arch/i386/kernel/smpboot.c:219:
+	printk("checking TSC synchronization across %u CPUs: ", num_booting_cpus());

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#733: FILE: arch/i386/kernel/smpboot.c:240:
+		while (atomic_read(&tsc_count_start) != num_booting_cpus()-1)
 		                                                          ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#742: FILE: arch/i386/kernel/smpboot.c:259:
+		while (atomic_read(&tsc_count_stop) != num_booting_cpus()-1)
 		                                                         ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#789: FILE: arch/i386/kernel/smpboot.c:326:
+		while (atomic_read(&tsc_count_stop) != num_booting_cpus()) mb();

WARNING:MEMORY_BARRIER: memory barrier without comment
#789: FILE: arch/i386/kernel/smpboot.c:326:
+		while (atomic_read(&tsc_count_stop) != num_booting_cpus()) mb();

WARNING:MEMORY_BARRIER: memory barrier without comment
#818: FILE: arch/i386/kernel/smpboot.c:462:
+	wmb();

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#888: FILE: arch/i386/kernel/smpboot.c:1143:
+			if (cpu_callout_map & (1<<cpu))
 			                        ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#897: FILE: arch/i386/kernel/smpboot.c:1166:
+			if (!test_bit(cpu, &cpu_callout_map)) continue;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#924: FILE: arch/i386/kernel/smpboot.c:1203:
+/* These are wrappers to interface to the new boot process.  Someone
+   who understands all this stuff should rewrite it properly. --RR 15/Jul/02 */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#924: FILE: arch/i386/kernel/smpboot.c:1203:
+   who understands all this stuff should rewrite it properly. --RR 15/Jul/02 */

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#930: FILE: arch/i386/kernel/smpboot.c:1209:
+int __devinit __cpu_up(unsigned int cpu)

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#934: FILE: arch/i386/kernel/smpboot.c:1213:
+		return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

WARNING:MEMORY_BARRIER: memory barrier without comment
#943: FILE: arch/i386/kernel/smpboot.c:1222:
+		mb();

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#959: FILE: include/asm-i386/apic.h:79:
+extern void setup_boot_APIC_clock (void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#959: FILE: include/asm-i386/apic.h:79:
+extern void setup_boot_APIC_clock (void);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#960: FILE: include/asm-i386/apic.h:80:
+extern void setup_secondary_APIC_clock (void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#960: FILE: include/asm-i386/apic.h:80:
+extern void setup_secondary_APIC_clock (void);

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#984: FILE: include/asm-i386/smp.h:88:
+#define cpu_possible(cpu) (phys_cpu_present_map & (1<<(cpu)))
                                                     ^

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#994: FILE: include/asm-i386/smp.h:116:
+extern volatile unsigned long cpu_callout_map;

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1019: FILE: arch/ppc/kernel/open_pic.c:606:
+void __devinit do_openpic_setup_cpu(void)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1035: FILE: arch/ppc/kernel/smp.c:51:
+unsigned int prof_multiplier[NR_CPUS] = { [1 ... NR_CPUS-1] = 1 };
                                                         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1036: FILE: arch/ppc/kernel/smp.c:52:
+unsigned int prof_counter[NR_CPUS] = { [1 ... NR_CPUS-1] = 1 };
                                                      ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1037: FILE: arch/ppc/kernel/smp.c:53:
+unsigned long cache_decay_ticks = HZ/100;
                                     ^

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#1065: FILE: arch/ppc/kernel/smp.c:292:
+#if 0 /* Old boot code. */

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#1076: FILE: arch/ppc/kernel/smp.c:558:
+static unsigned int timebase_upper = 0, timebase_lower = 0;

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1078: FILE: arch/ppc/kernel/smp.c:560:
+void __devinit

WARNING:MEMORY_BARRIER: memory barrier without comment
#1089: FILE: arch/ppc/kernel/smp.c:571:
+		rmb();

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1092: FILE: arch/ppc/kernel/smp.c:574:
+void __devinit

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1109: FILE: arch/ppc/kernel/smp.c:591:
+static void __devinit smp_store_cpu_info(int id)

ERROR:CODE_INDENT: code indent should use tabs where possible
#1111: FILE: arch/ppc/kernel/smp.c:593:
+        struct cpuinfo_PPC *c = &cpu_data[id];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1111: FILE: arch/ppc/kernel/smp.c:593:
+        struct cpuinfo_PPC *c = &cpu_data[id];$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1114: FILE: arch/ppc/kernel/smp.c:596:
+        c->loops_per_jiffy = loops_per_jiffy;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1114: FILE: arch/ppc/kernel/smp.c:596:
+        c->loops_per_jiffy = loops_per_jiffy;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1115: FILE: arch/ppc/kernel/smp.c:597:
+        c->pvr = mfspr(PVR);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1115: FILE: arch/ppc/kernel/smp.c:597:
+        c->pvr = mfspr(PVR);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1123: FILE: arch/ppc/kernel/smp.c:605:
+        smp_store_cpu_info(smp_processor_id());$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1123: FILE: arch/ppc/kernel/smp.c:605:
+        smp_store_cpu_info(smp_processor_id());$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!smp_ops"
#1127: FILE: arch/ppc/kernel/smp.c:609:
+	if (smp_ops == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1128: FILE: arch/ppc/kernel/smp.c:610:
+		printk("SMP not supported on this machine.\n");

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1134: FILE: arch/ppc/kernel/smp.c:616:
+	cpu_possible_map = (1 << num_cpus)-1;
 	                                  ^

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1146: FILE: arch/ppc/kernel/smp.c:628:
+int __devinit start_secondary(void *unused)

ERROR:CODE_INDENT: code indent should use tabs where possible
#1154: FILE: arch/ppc/kernel/smp.c:636:
+        smp_store_cpu_info(cpu);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1154: FILE: arch/ppc/kernel/smp.c:636:
+        smp_store_cpu_info(cpu);$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1158: FILE: arch/ppc/kernel/smp.c:640:
+	printk("CPU %i done callin...\n", cpu);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1160: FILE: arch/ppc/kernel/smp.c:642:
+	printk("CPU %i done setup...\n", cpu);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1162: FILE: arch/ppc/kernel/smp.c:644:
+	printk("CPU %i done timebase take...\n", cpu);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1177: FILE: arch/ppc/kernel/smp.c:659:
+	p = do_fork(CLONE_VM|CLONE_IDLETASK, 0, &regs, 0);
 	                    ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1196: FILE: arch/ppc/kernel/smp.c:678:
+^I^I$

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#1203: FILE: arch/ppc/kernel/smp.c:685:
+		udelay(100);

usleep_range() should be preferred over udelay(). The proper way of
using usleep_range() is mentioned in the kernel docs.

See: https://www.kernel.org/doc/html/latest/timers/timers-howto.html#delays-information-on-the-various-kernel-delay-sleep-mechanisms

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1207: FILE: arch/ppc/kernel/smp.c:689:
+		if (ppc_md.progress) ppc_md.progress(buf, 0x360+cpu);
 		                                               ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1207: FILE: arch/ppc/kernel/smp.c:689:
+		if (ppc_md.progress) ppc_md.progress(buf, 0x360+cpu);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1208: FILE: arch/ppc/kernel/smp.c:690:
+		printk("Processor %u is stuck.\n", cpu);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1213: FILE: arch/ppc/kernel/smp.c:695:
+	if (ppc_md.progress) ppc_md.progress(buf, 0x350+cpu);
 	                                               ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1213: FILE: arch/ppc/kernel/smp.c:695:
+	if (ppc_md.progress) ppc_md.progress(buf, 0x350+cpu);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1214: FILE: arch/ppc/kernel/smp.c:696:
+	printk("Processor %d found.\n", cpu);

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1234: FILE: arch/ppc/platforms/chrp_smp.c:53:
+static void __devinit

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1242: FILE: arch/ppc/platforms/chrp_smp.c:60:
+static void __devinit

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#1285: FILE: arch/ppc/platforms/chrp_smp.c:68:
+static unsigned int timebase_upper = 0, timebase_lower = 0;

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1287: FILE: arch/ppc/platforms/chrp_smp.c:70:
+void __devinit

WARNING:MEMORY_BARRIER: memory barrier without comment
#1297: FILE: arch/ppc/platforms/chrp_smp.c:80:
+		rmb();

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1301: FILE: arch/ppc/platforms/chrp_smp.c:84:
+void __devinit

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1316: FILE: arch/ppc/platforms/chrp_smp.c:99:
+	printk("CPU %i taken timebase\n", smp_processor_id());

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1352: FILE: arch/ppc/platforms/iSeries_smp.c:120:
+static void smp_iSeries_space_timers(unsigned nr)

CHECK:CAMELCASE: Avoid CamelCase: <smp_iSeries_space_timers>
#1352: FILE: arch/ppc/platforms/iSeries_smp.c:120:
+static void smp_iSeries_space_timers(unsigned nr)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1361: FILE: arch/ppc/platforms/iSeries_smp.c:134:
+   smp_iSeries_setup_cpu,$

CHECK:CAMELCASE: Avoid CamelCase: <smp_iSeries_setup_cpu>
#1361: FILE: arch/ppc/platforms/iSeries_smp.c:134:
+   smp_iSeries_setup_cpu,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1362: FILE: arch/ppc/platforms/iSeries_smp.c:135:
+   smp_iSeries_space_timers,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1363: FILE: arch/ppc/platforms/iSeries_smp.c:136:
+   .give_timebase = smp_generic_give_timebase,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1364: FILE: arch/ppc/platforms/iSeries_smp.c:137:
+   .take_timebase = smp_generic_take_timebase,$

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1431: FILE: include/asm-ppc/machdep.h:145:
+extern void __devinit smp_generic_give_timebase(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1431: FILE: include/asm-ppc/machdep.h:145:
+extern void __devinit smp_generic_give_timebase(void);

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1432: FILE: include/asm-ppc/machdep.h:146:
+extern void __devinit smp_generic_take_timebase(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1432: FILE: include/asm-ppc/machdep.h:146:
+extern void __devinit smp_generic_take_timebase(void);

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1464: FILE: include/asm-ppc/smp.h:52:
+#define cpu_possible(cpu) (cpu_possible_map & (1<<(cpu)))
                                                 ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1473: FILE: include/asm-ppc/smp.h:67:
+extern int __cpu_up(unsigned int cpu);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000444359.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 21 errors, 69 warnings, 28 checks, 1265 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000444359.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
