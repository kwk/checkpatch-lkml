WARNING:TYPO_SPELLING: 'comparisions' may be misspelled - perhaps 'comparisons'?
#26: 
We already posted performance comparisions numbers earlier on 2.5.35.
                              ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#37: 
diff -Naur -X dontdiff linux-2.5.37/drivers/char/raw.c linux-2.5.37-aio/drivers/char/raw.c

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#45: FILE: drivers/char/raw.c:204:
+rw_raw_aio_dev(int rw, struct kiocb *iocb, const struct iovec *iov, unsigned long nr_segs, loff_t *offp)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#47: FILE: drivers/char/raw.c:206:
+	struct file *filp = iocb->ki_filp;
 	             ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#63: FILE: drivers/char/raw.c:233:
+rw_raw_dev(int rw, struct file *filp, const struct iovec *iov, unsigned long nr_segs, loff_t *offp)
                                 ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#68: FILE: drivers/char/raw.c:238:
+	init_sync_kiocb(&kiocb, filp);
 	                        ^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#70: FILE: drivers/char/raw.c:240:
+^Iif (-EIOCBQUEUED == ret) $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#105: FILE: drivers/char/raw.c:293:
+	.aio_read=	raw_aio_read,
 	         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#107: FILE: drivers/char/raw.c:295:
+	.aio_write=	raw_aio_write,
 	          ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#160: FILE: fs/block_dev.c:119:
+blkdev_direct_IO(int rw, struct kiocb *iocb, struct inode * inode, $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#160: FILE: fs/block_dev.c:119:
+blkdev_direct_IO(int rw, struct kiocb *iocb, struct inode * inode, 

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#161: FILE: fs/block_dev.c:120:
+blkdev_direct_IO(int rw, struct kiocb *iocb, struct inode * inode, 
+		const struct iovec *iov, loff_t offset, unsigned long nr_segs)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#219: FILE: fs/direct-io.c:158:
+ * The BIO completion handler $

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#226: FILE: fs/direct-io.c:163:
+	const int uptodate = test_bit(BIO_UPTODATE, &bio->bi_flags);
 	          ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#246: FILE: fs/direct-io.c:177:
+	if (!uptodate) 
 	     ^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#246: FILE: fs/direct-io.c:177:
+^Iif (!uptodate) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#382: FILE: fs/direct-io.c:450:
+direct_io_worker(int rw, struct kiocb *iocb, struct inode * inode, $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#382: FILE: fs/direct-io.c:450:
+direct_io_worker(int rw, struct kiocb *iocb, struct inode * inode, 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#383: FILE: fs/direct-io.c:451:
+^Iconst struct iovec *iov, loff_t offset, unsigned long nr_segs, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#383: FILE: fs/direct-io.c:451:
+direct_io_worker(int rw, struct kiocb *iocb, struct inode * inode, 
+	const struct iovec *iov, loff_t offset, unsigned long nr_segs, 

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#410: FILE: fs/direct-io.c:460:
+	dio = (struct dio *)kmalloc(sizeof(struct dio), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*dio)...) over kmalloc(sizeof(struct dio)...)
#410: FILE: fs/direct-io.c:460:
+	dio = (struct dio *)kmalloc(sizeof(struct dio), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

ERROR:CODE_INDENT: code indent should use tabs where possible
#492: FILE: fs/direct-io.c:518:
+                dio_bio_submit(dio);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#492: FILE: fs/direct-io.c:518:
+                dio_bio_submit(dio);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#511: FILE: fs/direct-io.c:535:
+generic_direct_IO(int rw, struct kiocb *iocb, struct inode *inode, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#512: FILE: fs/direct-io.c:536:
+^Iconst struct iovec *iov, loff_t offset, unsigned long nr_segs, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#512: FILE: fs/direct-io.c:536:
+generic_direct_IO(int rw, struct kiocb *iocb, struct inode *inode, 
+	const struct iovec *iov, loff_t offset, unsigned long nr_segs, 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#522: FILE: fs/direct-io.c:566:
+^Iretval = direct_io_worker(rw, iocb, inode, iov, offset, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#523: FILE: fs/direct-io.c:567:
+	retval = direct_io_worker(rw, iocb, inode, iov, offset, 
+				nr_segs, get_blocks);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#531: FILE: fs/direct-io.c:573:
+generic_file_direct_IO(int rw, struct  kiocb *iocb, struct inode *inode, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#532: FILE: fs/direct-io.c:574:
+generic_file_direct_IO(int rw, struct  kiocb *iocb, struct inode *inode, 
+	const struct iovec *iov, loff_t offset, unsigned long nr_segs)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#538: FILE: fs/direct-io.c:579:
+^Iretval = mapping->a_ops->direct_IO(rw, iocb, inode, iov, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#552: FILE: fs/ext2/inode.c:622:
+ext2_direct_IO(int rw, struct kiocb *iocb, struct inode *inode, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#553: FILE: fs/ext2/inode.c:623:
+ext2_direct_IO(int rw, struct kiocb *iocb, struct inode *inode, 
+		const struct iovec *iov,loff_t offset, unsigned long nr_segs)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#553: FILE: fs/ext2/inode.c:623:
+		const struct iovec *iov,loff_t offset, unsigned long nr_segs)
 		                       ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#568: FILE: fs/ext3/inode.c:1402:
+static int ext3_direct_IO(int rw, struct kiocb *iocb, struct inode * inode,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#569: FILE: fs/ext3/inode.c:1403:
+static int ext3_direct_IO(int rw, struct kiocb *iocb, struct inode * inode,
 			const struct iovec *iov, loff_t offset,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#590: FILE: fs/jfs/inode.c:313:
+static int jfs_direct_IO(int rw, struct kiocb *iocb, struct inode *inode, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#591: FILE: fs/jfs/inode.c:314:
+^I^I^Iconst struct iovec *iov, loff_t offset, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#591: FILE: fs/jfs/inode.c:314:
+static int jfs_direct_IO(int rw, struct kiocb *iocb, struct inode *inode, 
+			const struct iovec *iov, loff_t offset, 

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#607: FILE: include/linux/aio.h:28:
+	volatile int		ki_users;

WARNING:LONG_LINE: line length of 125 exceeds 100 columns
#635: FILE: include/linux/fs.h:313:
+	int (*direct_IO)(int, struct kiocb *, struct inode *, const struct iovec *iov, loff_t offset, unsigned long nr_segs);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#635: FILE: include/linux/fs.h:313:
+	int (*direct_IO)(int, struct kiocb *, struct inode *, const struct iovec *iov, loff_t offset, unsigned long nr_segs);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kiocb *' should also have an identifier name
#635: FILE: include/linux/fs.h:313:
+	int (*direct_IO)(int, struct kiocb *, struct inode *, const struct iovec *iov, loff_t offset, unsigned long nr_segs);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#635: FILE: include/linux/fs.h:313:
+	int (*direct_IO)(int, struct kiocb *, struct inode *, const struct iovec *iov, loff_t offset, unsigned long nr_segs);

WARNING:LONG_LINE: line length of 159 exceeds 100 columns
#655: FILE: include/linux/fs.h:1251:
+extern ssize_t generic_file_direct_IO(int rw, struct kiocb *iocb, struct inode *	 inode,	const struct iovec *iov, loff_t offset, unsigned long nr_segs);

ERROR:POINTER_LOCATION: "foo *	 bar" should be "foo *bar"
#655: FILE: include/linux/fs.h:1251:
+extern ssize_t generic_file_direct_IO(int rw, struct kiocb *iocb, struct inode *	 inode,	const struct iovec *iov, loff_t offset, unsigned long nr_segs);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#655: FILE: include/linux/fs.h:1251:
+extern ssize_t generic_file_direct_IO(int rw, struct kiocb *iocb, struct inode *	 inode,	const struct iovec *iov, loff_t offset, unsigned long nr_segs);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#656: FILE: include/linux/fs.h:1252:
+extern int generic_direct_IO(int rw, struct kiocb *iocb, struct inode * inode, $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#656: FILE: include/linux/fs.h:1252:
+extern int generic_direct_IO(int rw, struct kiocb *iocb, struct inode * inode, 

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#656: FILE: include/linux/fs.h:1252:
+extern int generic_direct_IO(int rw, struct kiocb *iocb, struct inode * inode, 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#657: FILE: include/linux/fs.h:1253:
+^Iconst struct iovec *iov, loff_t offset, unsigned long nr_segs, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#657: FILE: include/linux/fs.h:1253:
+extern int generic_direct_IO(int rw, struct kiocb *iocb, struct inode * inode, 
+	const struct iovec *iov, loff_t offset, unsigned long nr_segs, 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#670: FILE: mm/filemap.c:1176:
+^I^I^Iretval = generic_file_direct_IO(READ, iocb, inode, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#671: FILE: mm/filemap.c:1177:
+			retval = generic_file_direct_IO(READ, iocb, inode, 
 					iov, pos, nr_segs);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#679: FILE: mm/filemap.c:1228:
+^I/* FIXME: Need to update f_pos and ATIME. But do_generic_file_read() $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ret > 0'
#683: FILE: mm/filemap.c:1232:
+	if ((filp->f_flags & O_DIRECT) && (ret > 0)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:TRAILING_WHITESPACE: trailing whitespace
#697: FILE: mm/filemap.c:1745:
+^Iinit_sync_kiocb(&kiocb, file);^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#706: FILE: mm/filemap.c:1868:
+^I^Iwritten = generic_file_direct_IO(WRITE, &kiocb, inode, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#707: FILE: mm/filemap.c:1869:
+		written = generic_file_direct_IO(WRITE, &kiocb, inode, 
 					iov, pos, nr_segs);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#713: FILE: mm/filemap.c:1875:
+^I^I$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000431090.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 30 errors, 16 warnings, 15 checks, 617 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000431090.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
