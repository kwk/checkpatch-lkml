WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#64: 
diff -urN -I \$.*\$ --exclude TAGS -X /home/rusty/current-dontdiff --minimal linux-2.4.13-uml/include/linux/simpleproc.h working-2.4.13-uml-proc/include/linux/simpleproc.h

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#68: FILE: include/linux/simpleproc.h:1:
+/* Dynamic proc filesystem that doesn't suck.  (C) 2001 Rusty Russell. */

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#77: FILE: include/linux/simpleproc.h:10:
+/* Commit the contents of this (NUL-terminated) buffer if possible.
+   -errno indicates error. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#77: FILE: include/linux/simpleproc.h:10:
+   -errno indicates error. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#84: FILE: include/linux/simpleproc.h:17:
+/* Fetch the contents into buffer: return size used (or needed), or
+   -errno. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#84: FILE: include/linux/simpleproc.h:17:
+   -errno. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#92: FILE: include/linux/simpleproc.h:25:
+/* If we're a dynamic directory, this routine gets dir contents:
+   returns size used (or needed), or -errno. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#92: FILE: include/linux/simpleproc.h:25:
+   returns size used (or needed), or -errno. */

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'var' may be better as '(var)' to avoid precedence issues
#101: FILE: include/linux/simpleproc.h:34:
+#define proc(dir, fname, var, type, perms)				 \
+	__proc(dir, fname, S_IFREG|(perms),				 \
+	       __new_proc(&var,						 \
+			  ((perms)&S_IRUGO) ? proc_fetch_##type : NULL,	 \
+			  ((perms)&S_IWUGO) ? proc_commit_##type : NULL, \
+			  NULL))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'perms' - possible side-effects?
#101: FILE: include/linux/simpleproc.h:34:
+#define proc(dir, fname, var, type, perms)				 \
+	__proc(dir, fname, S_IFREG|(perms),				 \
+	       __new_proc(&var,						 \
+			  ((perms)&S_IRUGO) ? proc_fetch_##type : NULL,	 \
+			  ((perms)&S_IWUGO) ? proc_commit_##type : NULL, \
+			  NULL))

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#102: FILE: include/linux/simpleproc.h:35:
+	__proc(dir, fname, S_IFREG|(perms),				 \
 	                          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#104: FILE: include/linux/simpleproc.h:37:
+			  ((perms)&S_IRUGO) ? proc_fetch_##type : NULL,	 \
 			          ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#104: FILE: include/linux/simpleproc.h:37:
+			  ((perms)&S_IRUGO) ? proc_fetch_##type : NULL,	 \

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#105: FILE: include/linux/simpleproc.h:38:
+			  ((perms)&S_IWUGO) ? proc_commit_##type : NULL, \
 			          ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUGO' are not preferred. Consider using octal permissions '0222'.
#105: FILE: include/linux/simpleproc.h:38:
+			  ((perms)&S_IWUGO) ? proc_commit_##type : NULL, \

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'var' may be better as '(var)' to avoid precedence issues
#109: FILE: include/linux/simpleproc.h:42:
+#define proc_spinlock(dir, fname, var, type, lock, p)			   \
+	__proc(dir, fname, S_IFREG|(p),					   \
+	       __new_proc_lock(&var, lock,				   \
+			       ((p)&S_IRUGO) ? proc_fetch_##type : NULL,   \
+			       ((p)&S_IWUGO) ? proc_commit_##type : NULL))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#109: FILE: include/linux/simpleproc.h:42:
+#define proc_spinlock(dir, fname, var, type, lock, p)			   \
+	__proc(dir, fname, S_IFREG|(p),					   \
+	       __new_proc_lock(&var, lock,				   \
+			       ((p)&S_IRUGO) ? proc_fetch_##type : NULL,   \
+			       ((p)&S_IWUGO) ? proc_commit_##type : NULL))

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#110: FILE: include/linux/simpleproc.h:43:
+	__proc(dir, fname, S_IFREG|(p),					   \
 	                          ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#112: FILE: include/linux/simpleproc.h:45:
+			       ((p)&S_IRUGO) ? proc_fetch_##type : NULL,   \
 			           ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#112: FILE: include/linux/simpleproc.h:45:
+			       ((p)&S_IRUGO) ? proc_fetch_##type : NULL,   \

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#113: FILE: include/linux/simpleproc.h:46:
+			       ((p)&S_IWUGO) ? proc_commit_##type : NULL))
 			           ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUGO' are not preferred. Consider using octal permissions '0222'.
#113: FILE: include/linux/simpleproc.h:46:
+			       ((p)&S_IWUGO) ? proc_commit_##type : NULL))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'var' may be better as '(var)' to avoid precedence issues
#116: FILE: include/linux/simpleproc.h:49:
+#define proc_sem(dir, fname, var, type, sem, p)				  \
+	__proc(dir, fname, S_IFREG|(p),					  \
+	       __new_proc_sem(&var, sem,				  \
+			      ((p)&S_IRUGO) ? proc_fetch_##type : NULL,	  \
+			      ((p)&S_IWUGO) ? proc_commit_##type : NULL))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#116: FILE: include/linux/simpleproc.h:49:
+#define proc_sem(dir, fname, var, type, sem, p)				  \
+	__proc(dir, fname, S_IFREG|(p),					  \
+	       __new_proc_sem(&var, sem,				  \
+			      ((p)&S_IRUGO) ? proc_fetch_##type : NULL,	  \
+			      ((p)&S_IWUGO) ? proc_commit_##type : NULL))

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#117: FILE: include/linux/simpleproc.h:50:
+	__proc(dir, fname, S_IFREG|(p),					  \
 	                          ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#119: FILE: include/linux/simpleproc.h:52:
+			      ((p)&S_IRUGO) ? proc_fetch_##type : NULL,	  \
 			          ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#119: FILE: include/linux/simpleproc.h:52:
+			      ((p)&S_IRUGO) ? proc_fetch_##type : NULL,	  \

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#120: FILE: include/linux/simpleproc.h:53:
+			      ((p)&S_IWUGO) ? proc_commit_##type : NULL))
 			          ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUGO' are not preferred. Consider using octal permissions '0222'.
#120: FILE: include/linux/simpleproc.h:53:
+			      ((p)&S_IWUGO) ? proc_commit_##type : NULL))

WARNING:FUNCTION_ARGUMENTS: function definition argument 'proc_fetchfn_t *' should also have an identifier name
#130: FILE: include/linux/simpleproc.h:63:
+struct proc_data *__new_proc(void *arg, proc_fetchfn_t *, proc_commitfn_t *,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'proc_commitfn_t *' should also have an identifier name
#130: FILE: include/linux/simpleproc.h:63:
+struct proc_data *__new_proc(void *arg, proc_fetchfn_t *, proc_commitfn_t *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'proc_dirfn_t *' should also have an identifier name
#130: FILE: include/linux/simpleproc.h:63:
+struct proc_data *__new_proc(void *arg, proc_fetchfn_t *, proc_commitfn_t *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'proc_fetchfn_t *' should also have an identifier name
#132: FILE: include/linux/simpleproc.h:65:
+struct proc_data *__new_proc_lock(void *arg, spinlock_t *lock,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'proc_commitfn_t *' should also have an identifier name
#132: FILE: include/linux/simpleproc.h:65:
+struct proc_data *__new_proc_lock(void *arg, spinlock_t *lock,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'proc_fetchfn_t *' should also have an identifier name
#134: FILE: include/linux/simpleproc.h:67:
+struct proc_data *__new_proc_sem(void *arg, struct semaphore *sem,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'proc_commitfn_t *' should also have an identifier name
#134: FILE: include/linux/simpleproc.h:67:
+struct proc_data *__new_proc_sem(void *arg, struct semaphore *sem,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#141: FILE: include/linux/simpleproc.h:74:
+^Ireturn __proc(dir, dirname, S_IFDIR|0555, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#141: FILE: include/linux/simpleproc.h:74:
+	return __proc(dir, dirname, S_IFDIR|0555, 
 	                                   ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#179: FILE: include/linux/simpleproc.h:112:
+}
+struct proc_data *__new_proc_lock(void *arg, spinlock_t *lock,

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#185: FILE: include/linux/simpleproc.h:118:
+}
+struct proc_data *__new_proc_sem(void *arg, struct semaphore *sem,

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#212: FILE: include/linux/simpleproc.h:145:
+struct proc_dircontents
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#265: FILE: include/linux/simpleproc.h:198:
+struct proc_data
+{

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#304: FILE: fs/proc/simple_proc.c:1:
+/* Those of you who read this, give quiet thanks that you did not

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#305: FILE: fs/proc/simple_proc.c:2:
+/* Those of you who read this, give quiet thanks that you did not
+   suffer the endless frustration of dealing with the old /proc

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#321: FILE: fs/proc/simple_proc.c:18:
+    along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#322: FILE: fs/proc/simple_proc.c:19:
+    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#322: FILE: fs/proc/simple_proc.c:19:
+    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA */

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#325: FILE: fs/proc/simple_proc.c:22:
+#include <asm/uaccess.h>

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#331: FILE: fs/proc/simple_proc.c:28:
+/* FIXME: Use reference counts and "dead" marker to return -ENOENT if
+   unregistered while open -RR */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#331: FILE: fs/proc/simple_proc.c:28:
+   unregistered while open -RR */

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#333: FILE: fs/proc/simple_proc.c:30:
+struct proc_data
+{

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#335: FILE: fs/proc/simple_proc.c:32:
+	int (*get)(void *, char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#335: FILE: fs/proc/simple_proc.c:32:
+	int (*get)(void *, char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#335: FILE: fs/proc/simple_proc.c:32:
+	int (*get)(void *, char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#336: FILE: fs/proc/simple_proc.c:33:
+	int (*set)(void *, const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#336: FILE: fs/proc/simple_proc.c:33:
+	int (*set)(void *, const char *);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#344: FILE: fs/proc/simple_proc.c:41:
+static int fill_buffer(char **buffer,
+			int *maxlen,

CHECK:BRACES: braces {} should be used on all arms of this statement
#352: FILE: fs/proc/simple_proc.c:49:
+		if (len > *maxlen) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#354: FILE: fs/proc/simple_proc.c:51:
+			/* We need some restriction here, to avoid
+			   DoS.  fs/proc/generic.c wants this, but we

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#355: FILE: fs/proc/simple_proc.c:52:
+			   should make one or two pages eventually. */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#357: FILE: fs/proc/simple_proc.c:54:
+				BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#360: FILE: fs/proc/simple_proc.c:57:
+			if (!*buffer) return -ENOMEM;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:BRACES: Unbalanced braces around else statement
#362: FILE: fs/proc/simple_proc.c:59:
+		} else

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#368: FILE: fs/proc/simple_proc.c:65:
+/* FIXME: Get the struct file, and we can use ->private_data to store
+   this per file descriptor, rather than per file --RR */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#368: FILE: fs/proc/simple_proc.c:65:
+   this per file descriptor, rather than per file --RR */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#369: FILE: fs/proc/simple_proc.c:66:
+static int simple_read(char *page, char **start, off_t off, int count, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#427: FILE: fs/proc/simple_proc.c:124:
+^I^I^Iunsigned long count, $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#433: FILE: fs/proc/simple_proc.c:130:
+	/* FIXME: commit the write(s) on close or seek.  We don't have
+	   that control under the current proc system, so simply

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#434: FILE: fs/proc/simple_proc.c:131:
+	   terminate on \n. --RR */

ERROR:CODE_INDENT: code indent should use tabs where possible
#440: FILE: fs/proc/simple_proc.c:137:
+                   fs/proc/generic.c */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#440: FILE: fs/proc/simple_proc.c:137:
+		/* As in read, we need some limit, and this is from
+                   fs/proc/generic.c */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#440: FILE: fs/proc/simple_proc.c:137:
+                   fs/proc/generic.c */

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#464: FILE: fs/proc/simple_proc.c:161:
+	if (copy_from_user(pdata->writedata+file->f_pos, userbuffer, count)
 	                                   ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#473: FILE: fs/proc/simple_proc.c:170:
+	if (file->f_pos > 0 && pdata->writedata[file->f_pos-1] == '\n') {
 	                                                   ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#475: FILE: fs/proc/simple_proc.c:172:
+		int set;
+		pdata->writedata[file->f_pos-1] = '\0';

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#475: FILE: fs/proc/simple_proc.c:172:
+		pdata->writedata[file->f_pos-1] = '\0';
 		                            ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#498: FILE: fs/proc/simple_proc.c:195:
+	if (!entry) return -EINVAL; /* -ERANDOM */

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#504: FILE: fs/proc/simple_proc.c:201:
+	if (pdata->set) entry->read_proc = &simple_read;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#505: FILE: fs/proc/simple_proc.c:202:
+	if (pdata->get) entry->write_proc = &simple_write;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#522: FILE: fs/proc/simple_proc.c:219:
+^I$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#526: FILE: fs/proc/simple_proc.c:223:
+	pdata->writelen = pdata->readlen = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#527: FILE: fs/proc/simple_proc.c:224:
+	pdata->readdata = pdata->writedata = NULL;

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#537: FILE: fs/proc/simple_proc.c:234:
+struct pdata_wrapper
+{

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#539: FILE: fs/proc/simple_proc.c:236:
+	int (*get)(void *, char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#539: FILE: fs/proc/simple_proc.c:236:
+	int (*get)(void *, char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#539: FILE: fs/proc/simple_proc.c:236:
+	int (*get)(void *, char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#540: FILE: fs/proc/simple_proc.c:237:
+	int (*set)(void *, const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#540: FILE: fs/proc/simple_proc.c:237:
+	int (*set)(void *, const char *);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#558: FILE: fs/proc/simple_proc.c:255:
+		pwrap->pdata.writelen = pwrap->pdata.readlen = 0;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#559: FILE: fs/proc/simple_proc.c:256:
+		pwrap->pdata.readdata = pwrap->pdata.writedata = NULL;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#702: FILE: fs/proc/simple_proc.c:399:
+^I$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#746: FILE: fs/proc/simple_proc.c:443:
+	if (sscanf(inbuf, "%hi", (short *)shortp) != 1) return -EINVAL;

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#746: FILE: fs/proc/simple_proc.c:443:
+	if (sscanf(inbuf, "%hi", (short *)shortp) != 1) return -EINVAL;

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#757: FILE: fs/proc/simple_proc.c:454:
+	if (sscanf(inbuf, "%hu", (unsigned short *)ushortp) != 1)
+		return -EINVAL;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#769: FILE: fs/proc/simple_proc.c:466:
+	if (sscanf(inbuf, "%i", (int *)intp) != 1) return -EINVAL;

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#769: FILE: fs/proc/simple_proc.c:466:
+	if (sscanf(inbuf, "%i", (int *)intp) != 1) return -EINVAL;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#780: FILE: fs/proc/simple_proc.c:477:
+	if (sscanf(inbuf, "%u", (unsigned int *)uintp) != 1) return -EINVAL;

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#780: FILE: fs/proc/simple_proc.c:477:
+	if (sscanf(inbuf, "%u", (unsigned int *)uintp) != 1) return -EINVAL;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#791: FILE: fs/proc/simple_proc.c:488:
+	if (sscanf(inbuf, "%li", (long *)longp) != 1) return -EINVAL;

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#791: FILE: fs/proc/simple_proc.c:488:
+	if (sscanf(inbuf, "%li", (long *)longp) != 1) return -EINVAL;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#802: FILE: fs/proc/simple_proc.c:499:
+	if (sscanf(inbuf, "%lu", (unsigned long *)ulongp) != 1) return -EINVAL;

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#802: FILE: fs/proc/simple_proc.c:499:
+	if (sscanf(inbuf, "%lu", (unsigned long *)ulongp) != 1) return -EINVAL;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#808: FILE: fs/proc/simple_proc.c:505:
+	if (*(int *)boolp) return snprintf(outbuf, len, "y");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#809: FILE: fs/proc/simple_proc.c:506:
+	else return snprintf(outbuf, len, "n");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#818: FILE: fs/proc/simple_proc.c:515:
+	else return __proc_write_int(boolp, inbuf);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#843: FILE: fs/simpleproc/helper.c:1:
+/* Those of you who read this, give quiet thanks that you did not

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#844: FILE: fs/simpleproc/helper.c:2:
+/* Those of you who read this, give quiet thanks that you did not
+   suffer the endless frustration of dealing with the old /proc

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#860: FILE: fs/simpleproc/helper.c:18:
+    along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#861: FILE: fs/simpleproc/helper.c:19:
+    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#861: FILE: fs/simpleproc/helper.c:19:
+    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA */

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#870: FILE: fs/simpleproc/helper.c:28:
+struct pdata_wrapper
+{

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#978: FILE: fs/simpleproc/helper.c:136:
+	if (sscanf(inbuf, "%hi", (short *)shortp) != 1) return -EINVAL;

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#978: FILE: fs/simpleproc/helper.c:136:
+	if (sscanf(inbuf, "%hi", (short *)shortp) != 1) return -EINVAL;

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#991: FILE: fs/simpleproc/helper.c:149:
+	if (sscanf(inbuf, "%hu", (unsigned short *)ushortp) != 1)
+		return -EINVAL;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#997: FILE: fs/simpleproc/helper.c:155:
+int proc_fetch_int(const char *dir, const char *fname,
+		    char *outbuf, unsigned int size, void *intp)

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1005: FILE: fs/simpleproc/helper.c:163:
+	if (sscanf(inbuf, "%i", (int *)intp) != 1) return -EINVAL;

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#1005: FILE: fs/simpleproc/helper.c:163:
+	if (sscanf(inbuf, "%i", (int *)intp) != 1) return -EINVAL;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1018: FILE: fs/simpleproc/helper.c:176:
+	if (sscanf(inbuf, "%u", (unsigned int *)uintp) != 1) return -EINVAL;

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#1018: FILE: fs/simpleproc/helper.c:176:
+	if (sscanf(inbuf, "%u", (unsigned int *)uintp) != 1) return -EINVAL;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1031: FILE: fs/simpleproc/helper.c:189:
+	if (sscanf(inbuf, "%li", (long *)longp) != 1) return -EINVAL;

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#1031: FILE: fs/simpleproc/helper.c:189:
+	if (sscanf(inbuf, "%li", (long *)longp) != 1) return -EINVAL;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1044: FILE: fs/simpleproc/helper.c:202:
+	if (sscanf(inbuf, "%lu", (unsigned long *)ulongp) != 1) return -EINVAL;

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#1044: FILE: fs/simpleproc/helper.c:202:
+	if (sscanf(inbuf, "%lu", (unsigned long *)ulongp) != 1) return -EINVAL;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1051: FILE: fs/simpleproc/helper.c:209:
+	if (*(int *)boolp) return snprintf(outbuf, size, "y\n");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1052: FILE: fs/simpleproc/helper.c:210:
+	else return snprintf(outbuf, size, "n\n");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1062: FILE: fs/simpleproc/helper.c:220:
+	else return proc_commit_int(dir, fname, inbuf, size, boolp);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1092: FILE: fs/simpleproc/helper.c:250:
+					    S_IFREG|0400, testfetch,
 					           ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1097: FILE: fs/simpleproc/helper.c:255:
+				    S_IFDIR|0555, NULL, NULL, dirfunc, NULL,
 				           ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1105: FILE: fs/simpleproc/helper.c:263:
+	int ret;
+	ret = proc("testdir", "number", number, int, 0644);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1107: FILE: fs/simpleproc/helper.c:265:
+		printk("Proc registration failed: %i\n", ret);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1124: FILE: fs/simpleproc/inode.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1145: FILE: fs/simpleproc/inode.c:22:
+ *  along with this program; if not, write to the Free Software$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1146: FILE: fs/simpleproc/inode.c:23:
+ *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA $

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1146: FILE: fs/simpleproc/inode.c:23:
+ *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA $

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#1158: FILE: fs/simpleproc/inode.c:35:
+#include <asm/uaccess.h>

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#1176: FILE: fs/simpleproc/inode.c:53:
+static struct inode_operations proc_punt_inodeops;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1177: FILE: fs/simpleproc/inode.c:54:
+static struct file_operations proc_helper_fileops;

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1178: FILE: fs/simpleproc/inode.c:55:
+static struct file_operations proc_helper_dirops;

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1179: FILE: fs/simpleproc/inode.c:56:
+static struct file_operations proc_punt_dirops;

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#1180: FILE: fs/simpleproc/inode.c:57:
+static struct inode_operations proc_helper_inodeops;

WARNING:CONST_STRUCT: struct dentry_operations should normally be const
#1182: FILE: fs/simpleproc/inode.c:59:
+static struct dentry_operations proc_dentry_ops;

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#1185: FILE: fs/simpleproc/inode.c:62:
+struct proc_buffer
+{

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1213: FILE: fs/simpleproc/inode.c:90:
+	buf->f_bsize = PAGE_SIZE/sizeof(long);
 	                        ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1225: FILE: fs/simpleproc/inode.c:102:
+	struct inode * inode = new_inode(sb);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1237: FILE: fs/simpleproc/inode.c:114:
+	inode->i_atime = inode->i_mtime = inode->i_ctime = CURRENT_TIME;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1252: FILE: fs/simpleproc/inode.c:129:
+		BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1277: FILE: fs/simpleproc/inode.c:154:
+		BUG();

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1294: FILE: fs/simpleproc/inode.c:171:
+		iput(inode);
 		^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'neccessary' may be misspelled - perhaps 'necessary'?
#1306: FILE: fs/simpleproc/inode.c:183:
+/* Create (static) proc directory if neccessary. */
                                      ^^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1321: FILE: fs/simpleproc/inode.c:198:
+^I^I/* Ignore multiple slashes */ $

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1322: FILE: fs/simpleproc/inode.c:199:
+		while (*delim == '/') delim++;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1325: FILE: fs/simpleproc/inode.c:202:
+		if (!delim) delim = qstr.name + strlen(qstr.name);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1326: FILE: fs/simpleproc/inode.c:203:
+		qstr.len = delim-(char *)qstr.name;
 		                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1334: FILE: fs/simpleproc/inode.c:211:
+			char fname[qstr.len+1];
 			                   ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1340: FILE: fs/simpleproc/inode.c:217:
+			ret = make_proc_entry(dentry, fname, S_IFDIR|0555,
 			                                            ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1341: FILE: fs/simpleproc/inode.c:218:
+			ret = make_proc_entry(dentry, fname, S_IFDIR|0555,
+					       NULL, 0);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1408: FILE: fs/simpleproc/inode.c:285:
+^I^I/* Ignore multiple slashes */ $

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1409: FILE: fs/simpleproc/inode.c:286:
+		while (*delim == '/') delim++;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1412: FILE: fs/simpleproc/inode.c:289:
+		if (!delim) delim = qstr.name + strlen(qstr.name);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1413: FILE: fs/simpleproc/inode.c:290:
+		qstr.len = delim-(char *)qstr.name;
 		                ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1421: FILE: fs/simpleproc/inode.c:298:
+			BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1430: FILE: fs/simpleproc/inode.c:307:
+		BUG();

ERROR:CODE_INDENT: code indent should use tabs where possible
#1434: FILE: fs/simpleproc/inode.c:311:
+           enter the caller any more. */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1434: FILE: fs/simpleproc/inode.c:311:
+	/* We have the dentry: change the private area so it doesn't
+           enter the caller any more. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1434: FILE: fs/simpleproc/inode.c:311:
+           enter the caller any more. */

ERROR:CODE_INDENT: code indent should use tabs where possible
#1441: FILE: fs/simpleproc/inode.c:318:
+           too bad. */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1441: FILE: fs/simpleproc/inode.c:318:
+	/* This will probably free the dentry immediately, but if not,
+           too bad. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1441: FILE: fs/simpleproc/inode.c:318:
+           too bad. */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1453: FILE: fs/simpleproc/inode.c:330:
+static struct dentry *proc_lookup(struct inode *dir,
+					 struct dentry *dentry)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1456: FILE: fs/simpleproc/inode.c:333:
+	/* Since we place new staticn entries in the dcache, if we get
+	   here, we know the entry does not exist.  Create a negative

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1457: FILE: fs/simpleproc/inode.c:334:
+	   dentry, and return NULL */

WARNING:LINE_SPACING: Missing a blank line after declarations
#1473: FILE: fs/simpleproc/inode.c:350:
+		int used;
+		used = pdata->dir(dirname, filename, ret, size, pdata->arg);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1515: FILE: fs/simpleproc/inode.c:392:
+/* Since there are no hard links in this filesystem, we can simply map
+   inodes to dentries.  This is not possibly in general! */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1515: FILE: fs/simpleproc/inode.c:392:
+   inodes to dentries.  This is not possibly in general! */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1519: FILE: fs/simpleproc/inode.c:396:
+		BUG();

ERROR:CODE_INDENT: code indent should use tabs where possible
#1534: FILE: fs/simpleproc/inode.c:411:
+           inode in the dentry alias list, so mapping inode -> dentry$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1534: FILE: fs/simpleproc/inode.c:411:
+	/* Since we know the inode is a directory, there is only one
+           inode in the dentry alias list, so mapping inode -> dentry

ERROR:CODE_INDENT: code indent should use tabs where possible
#1535: FILE: fs/simpleproc/inode.c:412:
+           is easy */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1535: FILE: fs/simpleproc/inode.c:412:
+           is easy */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1543: FILE: fs/simpleproc/inode.c:420:
+^I/* Looks through callback-supplied list for this dentry */ $

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1556: FILE: fs/simpleproc/inode.c:433:
+		iput(inode);
 		^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1569: FILE: fs/simpleproc/inode.c:446:
+static int proc_file_snapshot(struct inode *inode, struct file *filp)
                                                                 ^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1593: FILE: fs/simpleproc/inode.c:470:
+           when seek resets snapshot/commit, we should allow this. */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1593: FILE: fs/simpleproc/inode.c:470:
+	/* For the moment, you can't open for read & write.  Later,
+           when seek resets snapshot/commit, we should allow this. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1593: FILE: fs/simpleproc/inode.c:470:
+           when seek resets snapshot/commit, we should allow this. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1602: FILE: fs/simpleproc/inode.c:479:
+	/* FIXME: This is not right: the callbacks don't care what the
+	   process's idea of root is, it only wants path after proc/. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1602: FILE: fs/simpleproc/inode.c:479:
+	   process's idea of root is, it only wants path after proc/. */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1606: FILE: fs/simpleproc/inode.c:483:
+		BUG();

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1609: FILE: fs/simpleproc/inode.c:486:
+	buf = kmalloc(sizeof(*buf)+size, GFP_KERNEL);
 	                          ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1612: FILE: fs/simpleproc/inode.c:489:
+		int used;
+		used = pdata->fetch(dirname, filp->f_dentry->d_name.name,

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1635: FILE: fs/simpleproc/inode.c:512:
+		buf = kmalloc(sizeof(*buf)+size, GFP_KERNEL);
 		                          ^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1642: FILE: fs/simpleproc/inode.c:519:
+static int proc_file_commit(struct inode *inode, struct file *filp)
                                                               ^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1663: FILE: fs/simpleproc/inode.c:540:
+	/* FIXME: This is not right: the callbacks don't care what the
+	   process's idea of root is, it only wants path after proc/. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1663: FILE: fs/simpleproc/inode.c:540:
+	   process's idea of root is, it only wants path after proc/. */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1667: FILE: fs/simpleproc/inode.c:544:
+		BUG();

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1674: FILE: fs/simpleproc/inode.c:551:
+^I$

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1681: FILE: fs/simpleproc/inode.c:558:
+static ssize_t proc_file_read(struct file *filp, char *ubuf, size_t size,
                                            ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1708: FILE: fs/simpleproc/inode.c:585:
+static ssize_t proc_file_write(struct file *filp,
                                             ^^^^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1741: FILE: fs/simpleproc/inode.c:618:
+		filp->private_data = buf = newbuffer;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1757: FILE: fs/simpleproc/inode.c:634:
+/* Call the user's callback to get contents of this directory.
+   Generate . and .. automagically. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1757: FILE: fs/simpleproc/inode.c:634:
+   Generate . and .. automagically. */

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1758: FILE: fs/simpleproc/inode.c:635:
+static int proc_dynamic_readdir(struct file *filp,
                                              ^^^^

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#1779: FILE: fs/simpleproc/inode.c:656:
+		/* fallthrough */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1789: FILE: fs/simpleproc/inode.c:666:
+	if (!page) return -ENOMEM;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1792: FILE: fs/simpleproc/inode.c:669:
+	/* FIXME: This is not right: the callbacks don't care what the
+	   process's idea of root is, it only wants path after proc/. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1792: FILE: fs/simpleproc/inode.c:669:
+	   process's idea of root is, it only wants path after proc/. */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1796: FILE: fs/simpleproc/inode.c:673:
+		BUG();

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1808: FILE: fs/simpleproc/inode.c:685:
+	for (dp = dcontents, i -= 2; dp->mode && i; dp = next_dcont(dp), i++);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1831: FILE: fs/simpleproc/inode.c:708:
+^I^I^I^I^I   void *data, $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1834: FILE: fs/simpleproc/inode.c:711:
+	struct inode * root_inode;

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1841: FILE: fs/simpleproc/inode.c:718:
+	root_inode = new_proc_inode(s, S_IFDIR|0555, 0);
 	                                      ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1842: FILE: fs/simpleproc/inode.c:719:
+	if (!root_inode) return NULL;

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1849: FILE: fs/simpleproc/inode.c:726:
+		iput(root_inode);
 		^^^^

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1858: FILE: fs/simpleproc/inode.c:735:
+static struct file_operations proc_helper_fileops = {

WARNING:INDENTED_LABEL: labels should not be indented
#1859: FILE: fs/simpleproc/inode.c:736:
+	open:		proc_file_snapshot,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1860: FILE: fs/simpleproc/inode.c:737:
+	release:	proc_file_commit,
 	       ^

WARNING:INDENTED_LABEL: labels should not be indented
#1860: FILE: fs/simpleproc/inode.c:737:
+	release:	proc_file_commit,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1861: FILE: fs/simpleproc/inode.c:738:
+	read:		proc_file_read,
 	    ^

WARNING:INDENTED_LABEL: labels should not be indented
#1861: FILE: fs/simpleproc/inode.c:738:
+	read:		proc_file_read,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1862: FILE: fs/simpleproc/inode.c:739:
+	write:		proc_file_write,
 	     ^

WARNING:INDENTED_LABEL: labels should not be indented
#1862: FILE: fs/simpleproc/inode.c:739:
+	write:		proc_file_write,

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1866: FILE: fs/simpleproc/inode.c:743:
+/* Directories which use normal registration mechanism, which sit in
+   the dcache */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1866: FILE: fs/simpleproc/inode.c:743:
+   the dcache */

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1867: FILE: fs/simpleproc/inode.c:744:
+static struct file_operations proc_helper_dirops = {

WARNING:INDENTED_LABEL: labels should not be indented
#1868: FILE: fs/simpleproc/inode.c:745:
+	read:		generic_read_dir,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1869: FILE: fs/simpleproc/inode.c:746:
+	readdir:	dcache_readdir,
 	       ^

WARNING:INDENTED_LABEL: labels should not be indented
#1869: FILE: fs/simpleproc/inode.c:746:
+	readdir:	dcache_readdir,

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1873: FILE: fs/simpleproc/inode.c:750:
+static struct file_operations proc_punt_dirops = {

WARNING:INDENTED_LABEL: labels should not be indented
#1874: FILE: fs/simpleproc/inode.c:751:
+	read:		generic_read_dir,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1875: FILE: fs/simpleproc/inode.c:752:
+	readdir:	proc_dynamic_readdir,
 	       ^

WARNING:INDENTED_LABEL: labels should not be indented
#1875: FILE: fs/simpleproc/inode.c:752:
+	readdir:	proc_dynamic_readdir,

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#1879: FILE: fs/simpleproc/inode.c:756:
+static struct inode_operations proc_punt_inodeops = {

WARNING:INDENTED_LABEL: labels should not be indented
#1880: FILE: fs/simpleproc/inode.c:757:
+	lookup:		proc_punt_lookup,

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#1884: FILE: fs/simpleproc/inode.c:761:
+static struct inode_operations proc_helper_inodeops = {

WARNING:INDENTED_LABEL: labels should not be indented
#1885: FILE: fs/simpleproc/inode.c:762:
+	lookup:		proc_lookup,

WARNING:INDENTED_LABEL: labels should not be indented
#1889: FILE: fs/simpleproc/inode.c:766:
+	statfs:		proc_statfs,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1890: FILE: fs/simpleproc/inode.c:767:
+	put_inode:	force_delete,
 	         ^

WARNING:INDENTED_LABEL: labels should not be indented
#1890: FILE: fs/simpleproc/inode.c:767:
+	put_inode:	force_delete,

WARNING:CONST_STRUCT: struct dentry_operations should normally be const
#1893: FILE: fs/simpleproc/inode.c:770:
+static struct dentry_operations proc_dentry_ops = {

WARNING:INDENTED_LABEL: labels should not be indented
#1894: FILE: fs/simpleproc/inode.c:771:
+	d_release:	proc_release,

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000503039.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 64 errors, 133 warnings, 43 checks, 1822 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000503039.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
