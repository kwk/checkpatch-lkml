WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#56: FILE: include/linux/sched.h:1003:
+int set_cpu_rate_hard_cap(struct task_struct *, unsigned int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#56: FILE: include/linux/sched.h:1003:
+int set_cpu_rate_hard_cap(struct task_struct *, unsigned int);

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#80: FILE: kernel/Kconfig.caps:15:
+config CPU_RATE_HARD_CAPS
+	bool "Support CPU rate hard caps"
+	depends on CPU_RATE_CAPS
+	default n
+	---help---
+	  Say y here if you wish to be able to put a hard upper limit on
+	  the rate of CPU usage by individual tasks.  A task which has been
+	  allocated a hard CPU rate cap will be limited to that rate of CPU
+	  usage regardless of whether there is spare CPU resources available.

Kconfig symbols should have a help text which fully describes
it.

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#99: FILE: kernel/sched.c:206:
+#define min_cpu_rate_cap(p) min((p)->cpu_rate_cap, (p)->cpu_rate_hard_cap)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#101: FILE: kernel/sched.c:208:
+#define min_cpu_rate_cap(p) (p)->cpu_rate_cap

CHECK:SPACING: No space is necessary after a cast
#118: FILE: kernel/sched.c:224:
+	p->sinbin_timer.data = (unsigned long) p;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#153: FILE: kernel/sched.c:283:
+	p->sinbin_timer.data = (unsigned long) p;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#171: FILE: kernel/sched.c:1241:
+	struct task_struct *p = (struct task_struct*)arg;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#253: FILE: kernel/sched.c:4630:
+EXPORT_SYMBOL(get_cpu_rate_hard_cap);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'current->euid != p->uid'
#279: FILE: kernel/sched.c:4656:
+		if (((current->euid != p->uid) && (current->uid != p->uid)) || (delta > 0)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'current->uid != p->uid'
#279: FILE: kernel/sched.c:4656:
+		if (((current->euid != p->uid) && (current->uid != p->uid)) || (delta > 0)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'delta > 0'
#279: FILE: kernel/sched.c:4656:
+		if (((current->euid != p->uid) && (current->uid != p->uid)) || (delta > 0)) {

WARNING:TYPO_SPELLING: 'wont' may be misspelled - perhaps 'won't'?
#286: FILE: kernel/sched.c:4663:
+	 * set - but as expected it wont have any effect on scheduling until
 	                            ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#305: FILE: kernel/sched.c:4682:
+EXPORT_SYMBOL(set_cpu_rate_hard_cap);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000074314.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 2 errors, 6 warnings, 6 checks, 253 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000074314.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
