WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#34: 
diff -urN -I \$.*\$ --exclude TAGS -X /home/rusty/current-dontdiff --minimal linux-2.4.16-uml/fs/sys/test.c working-2.4.16-uml-proc/fs/sys/test.c

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#38: FILE: fs/sys/test.c:1:
+/* Test stuff for new sys */

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#54: FILE: fs/sys/test.c:17:
+	if (size < sizeof("REMOVE")-1)
 	                           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#56: FILE: fs/sys/test.c:19:
+	if (strncmp("REMOVE", buffer, sizeof("REMOVE")-1) == 0) {
 	                                              ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#77: FILE: fs/sys/test.c:40:
+	if (sys("test", "a", a, uint, S_IWUSR|S_IRUGO) != 0)
 	                                     ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR|S_IRUGO' are not preferred. Consider using octal permissions '0644'.
#77: FILE: fs/sys/test.c:40:
+	if (sys("test", "a", a, uint, S_IWUSR|S_IRUGO) != 0)

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#78: FILE: fs/sys/test.c:41:
+		printk("Failed: a");

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#79: FILE: fs/sys/test.c:42:
+	if (sys_spinlock("test", "b", b, uint, &test_lock, S_IWUSR|S_IRUGO)
 	                                                          ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR|S_IRUGO' are not preferred. Consider using octal permissions '0644'.
#79: FILE: fs/sys/test.c:42:
+	if (sys_spinlock("test", "b", b, uint, &test_lock, S_IWUSR|S_IRUGO)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#81: FILE: fs/sys/test.c:44:
+		printk("Failed: b");

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#82: FILE: fs/sys/test.c:45:
+	if (sys_sem("test", "c", c, uint, &test_sem, S_IWUSR|S_IRUGO) != 0)
 	                                                    ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR|S_IRUGO' are not preferred. Consider using octal permissions '0644'.
#82: FILE: fs/sys/test.c:45:
+	if (sys_sem("test", "c", c, uint, &test_sem, S_IWUSR|S_IRUGO) != 0)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#83: FILE: fs/sys/test.c:46:
+		printk("Failed: c");

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#84: FILE: fs/sys/test.c:47:
+	if (sys_callfn("test", "off", get_off, set_off, NULL, S_IWUSR|S_IRUGO)
 	                                                             ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR|S_IRUGO' are not preferred. Consider using octal permissions '0644'.
#84: FILE: fs/sys/test.c:47:
+	if (sys_callfn("test", "off", get_off, set_off, NULL, S_IWUSR|S_IRUGO)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#86: FILE: fs/sys/test.c:49:
+		printk("Failed: off");

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#96: FILE: include/linux/sys_fs.h:1:
+#ifndef _LINUX_SYS_FS_H

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#99: FILE: include/linux/sys_fs.h:4:
+/* Kernel presentation interface.  Just be grateful I didn't call it
+   systables... */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#99: FILE: include/linux/sys_fs.h:4:
+   systables... */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#109: FILE: include/linux/sys_fs.h:14:
+/* Commit the contents of this (NUL-terminated) buffer if possible.
+   -errno indicates error. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#109: FILE: include/linux/sys_fs.h:14:
+   -errno indicates error. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#116: FILE: include/linux/sys_fs.h:21:
+/* Fetch the contents into buffer: return size used (or needed), or
+   -errno. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#116: FILE: include/linux/sys_fs.h:21:
+   -errno. */

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'var' may be better as '(var)' to avoid precedence issues
#124: FILE: include/linux/sys_fs.h:29:
+#define sys(dir, fname, var, type, perms)				 \
+	__sys(dir, fname, S_IFREG|(perms),				 \
+	       __new_sys(&var,						 \
+			  ((perms)&S_IRUGO) ? sys_fetch_##type : NULL,	 \
+			  ((perms)&S_IWUGO) ? sys_commit_##type : NULL))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'perms' - possible side-effects?
#124: FILE: include/linux/sys_fs.h:29:
+#define sys(dir, fname, var, type, perms)				 \
+	__sys(dir, fname, S_IFREG|(perms),				 \
+	       __new_sys(&var,						 \
+			  ((perms)&S_IRUGO) ? sys_fetch_##type : NULL,	 \
+			  ((perms)&S_IWUGO) ? sys_commit_##type : NULL))

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#125: FILE: include/linux/sys_fs.h:30:
+	__sys(dir, fname, S_IFREG|(perms),				 \
 	                         ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#127: FILE: include/linux/sys_fs.h:32:
+			  ((perms)&S_IRUGO) ? sys_fetch_##type : NULL,	 \
 			          ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#127: FILE: include/linux/sys_fs.h:32:
+			  ((perms)&S_IRUGO) ? sys_fetch_##type : NULL,	 \

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#128: FILE: include/linux/sys_fs.h:33:
+			  ((perms)&S_IWUGO) ? sys_commit_##type : NULL))
 			          ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUGO' are not preferred. Consider using octal permissions '0222'.
#128: FILE: include/linux/sys_fs.h:33:
+			  ((perms)&S_IWUGO) ? sys_commit_##type : NULL))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'var' may be better as '(var)' to avoid precedence issues
#131: FILE: include/linux/sys_fs.h:36:
+#define sys_spinlock(dir, fname, var, type, lock, p)			   \
+	__sys(dir, fname, S_IFREG|(p),					   \
+	       __new_sys_lock(&var, lock,				   \
+			       ((p)&S_IRUGO) ? sys_fetch_##type : NULL,   \
+			       ((p)&S_IWUGO) ? sys_commit_##type : NULL))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#131: FILE: include/linux/sys_fs.h:36:
+#define sys_spinlock(dir, fname, var, type, lock, p)			   \
+	__sys(dir, fname, S_IFREG|(p),					   \
+	       __new_sys_lock(&var, lock,				   \
+			       ((p)&S_IRUGO) ? sys_fetch_##type : NULL,   \
+			       ((p)&S_IWUGO) ? sys_commit_##type : NULL))

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#132: FILE: include/linux/sys_fs.h:37:
+	__sys(dir, fname, S_IFREG|(p),					   \
 	                         ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#134: FILE: include/linux/sys_fs.h:39:
+			       ((p)&S_IRUGO) ? sys_fetch_##type : NULL,   \
 			           ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#134: FILE: include/linux/sys_fs.h:39:
+			       ((p)&S_IRUGO) ? sys_fetch_##type : NULL,   \

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#135: FILE: include/linux/sys_fs.h:40:
+			       ((p)&S_IWUGO) ? sys_commit_##type : NULL))
 			           ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUGO' are not preferred. Consider using octal permissions '0222'.
#135: FILE: include/linux/sys_fs.h:40:
+			       ((p)&S_IWUGO) ? sys_commit_##type : NULL))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'var' may be better as '(var)' to avoid precedence issues
#138: FILE: include/linux/sys_fs.h:43:
+#define sys_sem(dir, fname, var, type, sem, p)				  \
+	__sys(dir, fname, S_IFREG|(p),					  \
+	       __new_sys_sem(&var, sem,					  \
+			      ((p)&S_IRUGO) ? sys_fetch_##type : NULL,	  \
+			      ((p)&S_IWUGO) ? sys_commit_##type : NULL))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#138: FILE: include/linux/sys_fs.h:43:
+#define sys_sem(dir, fname, var, type, sem, p)				  \
+	__sys(dir, fname, S_IFREG|(p),					  \
+	       __new_sys_sem(&var, sem,					  \
+			      ((p)&S_IRUGO) ? sys_fetch_##type : NULL,	  \
+			      ((p)&S_IWUGO) ? sys_commit_##type : NULL))

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#139: FILE: include/linux/sys_fs.h:44:
+	__sys(dir, fname, S_IFREG|(p),					  \
 	                         ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#141: FILE: include/linux/sys_fs.h:46:
+			      ((p)&S_IRUGO) ? sys_fetch_##type : NULL,	  \
 			          ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#141: FILE: include/linux/sys_fs.h:46:
+			      ((p)&S_IRUGO) ? sys_fetch_##type : NULL,	  \

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#142: FILE: include/linux/sys_fs.h:47:
+			      ((p)&S_IWUGO) ? sys_commit_##type : NULL))
 			          ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUGO' are not preferred. Consider using octal permissions '0222'.
#142: FILE: include/linux/sys_fs.h:47:
+			      ((p)&S_IWUGO) ? sys_commit_##type : NULL))

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#146: FILE: include/linux/sys_fs.h:51:
+	__sys(dir, fname, S_IFREG|(perms), __new_sys(datap, fetch, commit))
 	                         ^

WARNING:FUNCTION_ARGUMENTS: function definition argument 'sys_fetchfn_t *' should also have an identifier name
#156: FILE: include/linux/sys_fs.h:61:
+struct sys_data *__new_sys(void *arg, sys_fetchfn_t *, sys_commitfn_t *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'sys_commitfn_t *' should also have an identifier name
#156: FILE: include/linux/sys_fs.h:61:
+struct sys_data *__new_sys(void *arg, sys_fetchfn_t *, sys_commitfn_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'sys_fetchfn_t *' should also have an identifier name
#157: FILE: include/linux/sys_fs.h:62:
+struct sys_data *__new_sys_lock(void *arg, spinlock_t *lock,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'sys_commitfn_t *' should also have an identifier name
#157: FILE: include/linux/sys_fs.h:62:
+struct sys_data *__new_sys_lock(void *arg, spinlock_t *lock,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'sys_fetchfn_t *' should also have an identifier name
#159: FILE: include/linux/sys_fs.h:64:
+struct sys_data *__new_sys_sem(void *arg, struct semaphore *sem,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'sys_commitfn_t *' should also have an identifier name
#159: FILE: include/linux/sys_fs.h:64:
+struct sys_data *__new_sys_sem(void *arg, struct semaphore *sem,

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#182: FILE: include/linux/sys_fs.h:87:
+}
+static inline struct sys_data *__new_sys_lock(void *arg, spinlock_t *lock,

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#188: FILE: include/linux/sys_fs.h:93:
+}
+static inline struct sys_data *__new_sys_sem(void *arg, struct semaphore *sem,

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#215: FILE: include/linux/sys_fs.h:120:
+struct sys_data
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#263: FILE: fs/sys/helper.c:1:
+/* Copyright (C) 2001 Rusty Russell.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#264: FILE: fs/sys/helper.c:2:
+/* Copyright (C) 2001 Rusty Russell.
+

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#276: FILE: fs/sys/helper.c:14:
+    along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#277: FILE: fs/sys/helper.c:15:
+    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#277: FILE: fs/sys/helper.c:15:
+    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA */

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#287: FILE: fs/sys/helper.c:25:
+struct sdata_wrapper
+{

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#394: FILE: fs/sys/helper.c:132:
+	if (sscanf(inbuf, "%hi", (short *)shortp) != 1) return -EINVAL;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#394: FILE: fs/sys/helper.c:132:
+	if (sscanf(inbuf, "%hi", (short *)shortp) != 1) return -EINVAL;

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#407: FILE: fs/sys/helper.c:145:
+	if (sscanf(inbuf, "%hu", (unsigned short *)ushortp) != 1)
+		return -EINVAL;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#421: FILE: fs/sys/helper.c:159:
+	if (sscanf(inbuf, "%i", (int *)intp) != 1) return -EINVAL;

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#421: FILE: fs/sys/helper.c:159:
+	if (sscanf(inbuf, "%i", (int *)intp) != 1) return -EINVAL;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#434: FILE: fs/sys/helper.c:172:
+	if (sscanf(inbuf, "%u", (unsigned int *)uintp) != 1) return -EINVAL;

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#434: FILE: fs/sys/helper.c:172:
+	if (sscanf(inbuf, "%u", (unsigned int *)uintp) != 1) return -EINVAL;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#447: FILE: fs/sys/helper.c:185:
+	if (sscanf(inbuf, "%li", (long *)longp) != 1) return -EINVAL;

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#447: FILE: fs/sys/helper.c:185:
+	if (sscanf(inbuf, "%li", (long *)longp) != 1) return -EINVAL;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#460: FILE: fs/sys/helper.c:198:
+	if (sscanf(inbuf, "%lu", (unsigned long *)ulongp) != 1) return -EINVAL;

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#460: FILE: fs/sys/helper.c:198:
+	if (sscanf(inbuf, "%lu", (unsigned long *)ulongp) != 1) return -EINVAL;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#467: FILE: fs/sys/helper.c:205:
+	if (*(int *)boolp) return snprintf(outbuf, size, "y\n");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#468: FILE: fs/sys/helper.c:206:
+	else return snprintf(outbuf, size, "n\n");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#478: FILE: fs/sys/helper.c:216:
+	else return sys_commit_int(dir, fname, inbuf, size, boolp);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#482: FILE: fs/sys/helper.c:220:
+EXPORT_SYMBOL_GPL(sys_fetch_short);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#483: FILE: fs/sys/helper.c:221:
+EXPORT_SYMBOL_GPL(sys_commit_short);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#484: FILE: fs/sys/helper.c:222:
+EXPORT_SYMBOL_GPL(sys_fetch_ushort);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#485: FILE: fs/sys/helper.c:223:
+EXPORT_SYMBOL_GPL(sys_commit_ushort);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#486: FILE: fs/sys/helper.c:224:
+EXPORT_SYMBOL_GPL(sys_fetch_int);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#487: FILE: fs/sys/helper.c:225:
+EXPORT_SYMBOL_GPL(sys_commit_int);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#488: FILE: fs/sys/helper.c:226:
+EXPORT_SYMBOL_GPL(sys_fetch_uint);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#489: FILE: fs/sys/helper.c:227:
+EXPORT_SYMBOL_GPL(sys_commit_uint);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#490: FILE: fs/sys/helper.c:228:
+EXPORT_SYMBOL_GPL(sys_fetch_long);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#491: FILE: fs/sys/helper.c:229:
+EXPORT_SYMBOL_GPL(sys_commit_long);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#492: FILE: fs/sys/helper.c:230:
+EXPORT_SYMBOL_GPL(sys_fetch_ulong);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#493: FILE: fs/sys/helper.c:231:
+EXPORT_SYMBOL_GPL(sys_commit_ulong);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#494: FILE: fs/sys/helper.c:232:
+EXPORT_SYMBOL_GPL(sys_fetch_bool);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#495: FILE: fs/sys/helper.c:233:
+EXPORT_SYMBOL_GPL(sys_commit_bool);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#500: FILE: fs/sys/sys_core.c:1:
+/* Copyright (C) 2001 Rusty Russell.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#501: FILE: fs/sys/sys_core.c:2:
+/* Copyright (C) 2001 Rusty Russell.
+

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#513: FILE: fs/sys/sys_core.c:14:
+    along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#514: FILE: fs/sys/sys_core.c:15:
+    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#514: FILE: fs/sys/sys_core.c:15:
+    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA */

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#524: FILE: fs/sys/sys_core.c:25:
+#include <asm/uaccess.h>

WARNING:CONST_STRUCT: struct dentry_operations should normally be const
#538: FILE: fs/sys/sys_core.c:39:
+static struct dentry_operations sys_dentry_ops;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct file_operations should normally be const
#539: FILE: fs/sys/sys_core.c:40:
+static struct file_operations sys_dirops, sys_fileops;

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#540: FILE: fs/sys/sys_core.c:41:
+static struct inode_operations sys_inodeops;

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#544: FILE: fs/sys/sys_core.c:45:
+struct sys_buffer
+{

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#551: FILE: fs/sys/sys_core.c:52:
+struct sys_dirinfo
+{

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#576: FILE: fs/sys/sys_core.c:77:
+	      struct inode_operations *op,

WARNING:CONST_STRUCT: struct file_operations should normally be const
#577: FILE: fs/sys/sys_core.c:78:
+	      struct file_operations *fop)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#591: FILE: fs/sys/sys_core.c:92:
+	inode->i_atime = inode->i_mtime = inode->i_ctime = CURRENT_TIME;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#601: FILE: fs/sys/sys_core.c:102:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#613: FILE: fs/sys/sys_core.c:114:
+			  struct inode_operations *op,

WARNING:CONST_STRUCT: struct file_operations should normally be const
#614: FILE: fs/sys/sys_core.c:115:
+			  struct file_operations *fop)

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#644: FILE: fs/sys/sys_core.c:145:
+		iput(inode);
 		^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'neccessary' may be misspelled - perhaps 'necessary'?
#658: FILE: fs/sys/sys_core.c:159:
+/* Create (static) sys directory if neccessary. */
                                     ^^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#673: FILE: fs/sys/sys_core.c:174:
+^I^I/* Ignore multiple slashes */ $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#674: FILE: fs/sys/sys_core.c:175:
+		while (*delim == '/') delim++;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#677: FILE: fs/sys/sys_core.c:178:
+		if (!delim) delim = qstr.name + strlen(qstr.name);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#678: FILE: fs/sys/sys_core.c:179:
+		qstr.len = delim-(char *)qstr.name;
 		                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#687: FILE: fs/sys/sys_core.c:188:
+			char fname[qstr.len+1];
 			                   ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#701: FILE: fs/sys/sys_core.c:202:
+			ret = make_sys_entry(dentry, fname, S_IFDIR|0555,
 			                                           ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#702: FILE: fs/sys/sys_core.c:203:
+					     dinfo, &sys_inodeops,&sys_dirops);
 					                         ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#702: FILE: fs/sys/sys_core.c:203:
+					     dinfo, &sys_inodeops,&sys_dirops);
 					                          ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#709: FILE: fs/sys/sys_core.c:210:
+				BUG();

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#749: FILE: fs/sys/sys_core.c:250:
+	/* Since we place new static entries in the dcache, if we get
+	   here, we know the entry does not exist.  Create a negative

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#750: FILE: fs/sys/sys_core.c:251:
+	   dentry, and return NULL */

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#756: FILE: fs/sys/sys_core.c:257:
+static int sys_file_snapshot(struct inode *inode, struct file *filp)
                                                                ^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#786: FILE: fs/sys/sys_core.c:287:
+		BUG();

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#794: FILE: fs/sys/sys_core.c:295:
+static int sys_file_commit(struct inode *inode, struct file *filp)
                                                              ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#818: FILE: fs/sys/sys_core.c:319:
+static ssize_t sys_file_read(struct file *filp,
                                           ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#844: FILE: fs/sys/sys_core.c:345:
+static ssize_t sys_file_write(struct file *filp,
                                            ^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#901: FILE: fs/sys/sys_core.c:402:
+^I^I/* Ignore multiple slashes */ $

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#902: FILE: fs/sys/sys_core.c:403:
+		while (*delim == '/') delim++;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#905: FILE: fs/sys/sys_core.c:406:
+		if (!delim) delim = qstr.name + strlen(qstr.name);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#906: FILE: fs/sys/sys_core.c:407:
+		qstr.len = delim-(char *)qstr.name;
 		                ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#914: FILE: fs/sys/sys_core.c:415:
+			BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#923: FILE: fs/sys/sys_core.c:424:
+		BUG();

ERROR:CODE_INDENT: code indent should use tabs where possible
#927: FILE: fs/sys/sys_core.c:428:
+           enter the caller any more. */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#927: FILE: fs/sys/sys_core.c:428:
+	/* We have the dentry: change the private area so it doesn't
+           enter the caller any more. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#927: FILE: fs/sys/sys_core.c:428:
+           enter the caller any more. */

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#958: FILE: fs/sys/sys_core.c:459:
+	buf->f_bsize = PAGE_SIZE/sizeof(long);
 	                        ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#967: FILE: fs/sys/sys_core.c:468:
+^I^I^I^I^I  void *data, $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#970: FILE: fs/sys/sys_core.c:471:
+	struct inode * root_inode;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#977: FILE: fs/sys/sys_core.c:478:
+	root_inode = new_sys_inode(s, S_IFDIR|0555, &sys_inodeops,&sys_dirops);
 	                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#977: FILE: fs/sys/sys_core.c:478:
+	root_inode = new_sys_inode(s, S_IFDIR|0555, &sys_inodeops,&sys_dirops);
 	                                                         ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#977: FILE: fs/sys/sys_core.c:478:
+	root_inode = new_sys_inode(s, S_IFDIR|0555, &sys_inodeops,&sys_dirops);
 	                                                          ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#978: FILE: fs/sys/sys_core.c:479:
+	if (!root_inode) return NULL;

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#985: FILE: fs/sys/sys_core.c:486:
+		iput(root_inode);
 		^^^^

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#999: FILE: fs/sys/sys_core.c:500:
+static struct inode_operations sys_inodeops = {

WARNING:INDENTED_LABEL: labels should not be indented
#1000: FILE: fs/sys/sys_core.c:501:
+	lookup:		sys_lookup,

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1003: FILE: fs/sys/sys_core.c:504:
+static struct file_operations sys_dirops = {

WARNING:INDENTED_LABEL: labels should not be indented
#1004: FILE: fs/sys/sys_core.c:505:
+	read:		generic_read_dir,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1005: FILE: fs/sys/sys_core.c:506:
+	readdir:	dcache_readdir,
 	       ^

WARNING:INDENTED_LABEL: labels should not be indented
#1005: FILE: fs/sys/sys_core.c:506:
+	readdir:	dcache_readdir,

WARNING:CONST_STRUCT: struct dentry_operations should normally be const
#1008: FILE: fs/sys/sys_core.c:509:
+static struct dentry_operations sys_dentry_ops = {

WARNING:INDENTED_LABEL: labels should not be indented
#1009: FILE: fs/sys/sys_core.c:510:
+	d_release:	sys_release,

WARNING:INDENTED_LABEL: labels should not be indented
#1013: FILE: fs/sys/sys_core.c:514:
+	statfs:		sys_statfs,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1014: FILE: fs/sys/sys_core.c:515:
+	put_inode:	force_delete,
 	         ^

WARNING:INDENTED_LABEL: labels should not be indented
#1014: FILE: fs/sys/sys_core.c:515:
+	put_inode:	force_delete,

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1017: FILE: fs/sys/sys_core.c:518:
+static struct file_operations sys_fileops = {

WARNING:INDENTED_LABEL: labels should not be indented
#1018: FILE: fs/sys/sys_core.c:519:
+	open:		sys_file_snapshot,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1019: FILE: fs/sys/sys_core.c:520:
+	release:	sys_file_commit,
 	       ^

WARNING:INDENTED_LABEL: labels should not be indented
#1019: FILE: fs/sys/sys_core.c:520:
+	release:	sys_file_commit,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1020: FILE: fs/sys/sys_core.c:521:
+	read:		sys_file_read,
 	    ^

WARNING:INDENTED_LABEL: labels should not be indented
#1020: FILE: fs/sys/sys_core.c:521:
+	read:		sys_file_read,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1021: FILE: fs/sys/sys_core.c:522:
+	write:		sys_file_write,
 	     ^

WARNING:INDENTED_LABEL: labels should not be indented
#1021: FILE: fs/sys/sys_core.c:522:
+	write:		sys_file_write,

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1047: FILE: fs/sys/sys_core.c:548:
+EXPORT_SYMBOL(__sys);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1048: FILE: fs/sys/sys_core.c:549:
+EXPORT_SYMBOL(__new_sys);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1049: FILE: fs/sys/sys_core.c:550:
+EXPORT_SYMBOL(unsys);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1054: FILE: include/linux/sysctl.h:1:
+/* Obsolete: use sys_fs.h -- Rusty Russell. */

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1062: FILE: include/linux/typecheck.h:1:
+#ifndef _LINUX_TYPECHECK_H

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1065: FILE: include/linux/typecheck.h:4:
+/* Simple macros to do compile-time type checking.  IIRC, Jakub
+   Jelinek came up with this idea for the 2.4 module init code. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1065: FILE: include/linux/typecheck.h:4:
+   Jelinek came up with this idea for the 2.4 module init code. */

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000491006.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 35 errors, 100 warnings, 31 checks, 1021 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000491006.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
