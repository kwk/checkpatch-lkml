WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#53: 
diff -u --recursive --new-file linux-2.5.32/arch/s390x/kernel/linux32.c linux-2.5.32-vfscred/arch/s390x/kernel/linux32.c

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'current->vfscred->uid != inode->i_uid'
#184: FILE: fs/attr.c:45:
+		if ((current->vfscred->uid != inode->i_uid) && !capable(CAP_FOWNER))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:CODE_INDENT: code indent should use tabs where possible
#219: FILE: fs/coda/coda_linux.c:69:
+        cred->cr_fsuid = (vuid_t) current->vfscred->uid;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:SPACING: No space is necessary after a cast
#219: FILE: fs/coda/coda_linux.c:69:
+        cred->cr_fsuid = (vuid_t) current->vfscred->uid;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#219: FILE: fs/coda/coda_linux.c:69:
+        cred->cr_fsuid = (vuid_t) current->vfscred->uid;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#225: FILE: fs/coda/coda_linux.c:74:
+        cred->cr_fsgid = (vgid_t) current->vfscred->gid;$

CHECK:SPACING: No space is necessary after a cast
#225: FILE: fs/coda/coda_linux.c:74:
+        cred->cr_fsgid = (vgid_t) current->vfscred->gid;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#225: FILE: fs/coda/coda_linux.c:74:
+        cred->cr_fsgid = (vgid_t) current->vfscred->gid;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#284: FILE: fs/exec.c:773:
+        current->suid = current->euid = bprm->e_uid;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#284: FILE: fs/exec.c:773:
+        current->suid = current->euid = bprm->e_uid;$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#284: FILE: fs/exec.c:773:
+        current->suid = current->euid = bprm->e_uid;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:CODE_INDENT: code indent should use tabs where possible
#286: FILE: fs/exec.c:775:
+        current->sgid = current->egid = bprm->e_gid;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#286: FILE: fs/exec.c:775:
+        current->sgid = current->egid = bprm->e_gid;$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#286: FILE: fs/exec.c:775:
+        current->sgid = current->egid = bprm->e_gid;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'current->vfscred->uid != inode->i_uid'
#332: FILE: fs/ext2/ioctl.c:33:
+		if ((current->vfscred->uid != inode->i_uid) && !capable(CAP_FOWNER))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'current->vfscred->uid != inode->i_uid'
#341: FILE: fs/ext2/ioctl.c:82:
+		if ((current->vfscred->uid != inode->i_uid) && !capable(CAP_FOWNER))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'current->vfscred->uid != inode->i_uid'
#386: FILE: fs/ext3/ioctl.c:40:
+		if ((current->vfscred->uid != inode->i_uid) && !capable(CAP_FOWNER))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'current->vfscred->uid != inode->i_uid'
#395: FILE: fs/ext3/ioctl.c:126:
+		if ((current->vfscred->uid != inode->i_uid) && !capable(CAP_FOWNER))

ERROR:CODE_INDENT: code indent should use tabs where possible
#500: FILE: fs/intermezzo/file.c:152:
+                fdata->fd_fsuid = cred->uid;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#500: FILE: fs/intermezzo/file.c:152:
+                fdata->fd_fsuid = cred->uid;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#501: FILE: fs/intermezzo/file.c:153:
+                fdata->fd_fsgid = cred->gid;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#501: FILE: fs/intermezzo/file.c:153:
+                fdata->fd_fsgid = cred->gid;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#506: FILE: fs/intermezzo/file.c:155:
+                fdata->fd_ngroups = cred->ngroups;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#506: FILE: fs/intermezzo/file.c:155:
+                fdata->fd_ngroups = cred->ngroups;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#507: FILE: fs/intermezzo/file.c:156:
+                for (i=0 ; i<cred->ngroups ; i++)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#507: FILE: fs/intermezzo/file.c:156:
+                for (i=0 ; i<cred->ngroups ; i++)$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#507: FILE: fs/intermezzo/file.c:156:
+                for (i=0 ; i<cred->ngroups ; i++)
                       ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#507: FILE: fs/intermezzo/file.c:156:
+                for (i=0 ; i<cred->ngroups ; i++)
                             ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#508: FILE: fs/intermezzo/file.c:157:
+                        fdata->fd_groups[i] = cred->groups[i]; $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#508: FILE: fs/intermezzo/file.c:157:
+                        fdata->fd_groups[i] = cred->groups[i]; $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#508: FILE: fs/intermezzo/file.c:157:
+                        fdata->fd_groups[i] = cred->groups[i]; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#530: FILE: fs/intermezzo/journal.c:263:
+^Ifor (i=0; i<cred->ngroups; i++) $

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#530: FILE: fs/intermezzo/journal.c:263:
+	for (i=0; i<cred->ngroups; i++) 
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#530: FILE: fs/intermezzo/journal.c:263:
+	for (i=0; i<cred->ngroups; i++) 
 	           ^

CHECK:SPACING: No space is necessary after a cast
#531: FILE: fs/intermezzo/journal.c:264:
+		groups[i] = (__u32) cred->groups[i];

ERROR:CODE_INDENT: code indent should use tabs where possible
#535: FILE: fs/intermezzo/journal.c:266:
+        i =  journal_log_prefix_with_groups_and_ids(buf, opcode, rec,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#535: FILE: fs/intermezzo/journal.c:266:
+        i =  journal_log_prefix_with_groups_and_ids(buf, opcode, rec,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#536: FILE: fs/intermezzo/journal.c:267:
+                                                      (__u32)cred->ngroups,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#536: FILE: fs/intermezzo/journal.c:267:
+        i =  journal_log_prefix_with_groups_and_ids(buf, opcode, rec,
+                                                      (__u32)cred->ngroups,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#536: FILE: fs/intermezzo/journal.c:267:
+                                                      (__u32)cred->ngroups,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#540: FILE: fs/intermezzo/journal.c:269:
+                                                      (__u32)cred->uid,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#540: FILE: fs/intermezzo/journal.c:269:
+                                                      (__u32)cred->uid,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#541: FILE: fs/intermezzo/journal.c:270:
+                                                      (__u32)cred->gid);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#541: FILE: fs/intermezzo/journal.c:270:
+                                                      (__u32)cred->gid);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#553: FILE: fs/intermezzo/journal.c:281:
+                                                      (__u32)current->vfscred->uid,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#553: FILE: fs/intermezzo/journal.c:281:
+                                                      (__u32)current->vfscred->uid,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#554: FILE: fs/intermezzo/journal.c:282:
+                                                      (__u32)current->vfscred->gid);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#554: FILE: fs/intermezzo/journal.c:282:
+                                                      (__u32)current->vfscred->gid);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#563: FILE: fs/intermezzo/journal.c:904:
+        size =  sizeof(__u32) * current->vfscred->ngroups + $

ERROR:CODE_INDENT: code indent should use tabs where possible
#563: FILE: fs/intermezzo/journal.c:904:
+        size =  sizeof(__u32) * current->vfscred->ngroups + $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#563: FILE: fs/intermezzo/journal.c:904:
+        size =  sizeof(__u32) * current->vfscred->ngroups + $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#572: FILE: fs/intermezzo/journal.c:1146:
+        size =  sizeof(__u32) * current->vfscred->ngroups + $

ERROR:CODE_INDENT: code indent should use tabs where possible
#572: FILE: fs/intermezzo/journal.c:1146:
+        size =  sizeof(__u32) * current->vfscred->ngroups + $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#572: FILE: fs/intermezzo/journal.c:1146:
+        size =  sizeof(__u32) * current->vfscred->ngroups + $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#581: FILE: fs/intermezzo/journal.c:1227:
+        size =  sizeof(__u32) * current->vfscred->ngroups + $

ERROR:CODE_INDENT: code indent should use tabs where possible
#581: FILE: fs/intermezzo/journal.c:1227:
+        size =  sizeof(__u32) * current->vfscred->ngroups + $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#581: FILE: fs/intermezzo/journal.c:1227:
+        size =  sizeof(__u32) * current->vfscred->ngroups + $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#590: FILE: fs/intermezzo/journal.c:1289:
+        size =  sizeof(__u32) * current->vfscred->ngroups + $

ERROR:CODE_INDENT: code indent should use tabs where possible
#590: FILE: fs/intermezzo/journal.c:1289:
+        size =  sizeof(__u32) * current->vfscred->ngroups + $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#590: FILE: fs/intermezzo/journal.c:1289:
+        size =  sizeof(__u32) * current->vfscred->ngroups + $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#599: FILE: fs/intermezzo/journal.c:1352:
+        size = sizeof(__u32) * current->vfscred->ngroups + $

ERROR:CODE_INDENT: code indent should use tabs where possible
#599: FILE: fs/intermezzo/journal.c:1352:
+        size = sizeof(__u32) * current->vfscred->ngroups + $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#599: FILE: fs/intermezzo/journal.c:1352:
+        size = sizeof(__u32) * current->vfscred->ngroups + $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#608: FILE: fs/intermezzo/journal.c:1412:
+        size =  sizeof(__u32) * current->vfscred->ngroups + $

ERROR:CODE_INDENT: code indent should use tabs where possible
#608: FILE: fs/intermezzo/journal.c:1412:
+        size =  sizeof(__u32) * current->vfscred->ngroups + $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#608: FILE: fs/intermezzo/journal.c:1412:
+        size =  sizeof(__u32) * current->vfscred->ngroups + $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#617: FILE: fs/intermezzo/journal.c:1479:
+        size = sizeof(__u32) * current->vfscred->ngroups + $

ERROR:CODE_INDENT: code indent should use tabs where possible
#617: FILE: fs/intermezzo/journal.c:1479:
+        size = sizeof(__u32) * current->vfscred->ngroups + $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#617: FILE: fs/intermezzo/journal.c:1479:
+        size = sizeof(__u32) * current->vfscred->ngroups + $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#626: FILE: fs/intermezzo/journal.c:1544:
+        size =  sizeof(__u32) * current->vfscred->ngroups + $

ERROR:CODE_INDENT: code indent should use tabs where possible
#626: FILE: fs/intermezzo/journal.c:1544:
+        size =  sizeof(__u32) * current->vfscred->ngroups + $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#626: FILE: fs/intermezzo/journal.c:1544:
+        size =  sizeof(__u32) * current->vfscred->ngroups + $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#635: FILE: fs/intermezzo/journal.c:1607:
+        size =  sizeof(__u32) * current->vfscred->ngroups + $

ERROR:CODE_INDENT: code indent should use tabs where possible
#635: FILE: fs/intermezzo/journal.c:1607:
+        size =  sizeof(__u32) * current->vfscred->ngroups + $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#635: FILE: fs/intermezzo/journal.c:1607:
+        size =  sizeof(__u32) * current->vfscred->ngroups + $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#644: FILE: fs/intermezzo/journal.c:1668:
+        size =  sizeof(__u32) * current->vfscred->ngroups + $

ERROR:CODE_INDENT: code indent should use tabs where possible
#644: FILE: fs/intermezzo/journal.c:1668:
+        size =  sizeof(__u32) * current->vfscred->ngroups + $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#644: FILE: fs/intermezzo/journal.c:1668:
+        size =  sizeof(__u32) * current->vfscred->ngroups + $

ERROR:CODE_INDENT: code indent should use tabs where possible
#656: FILE: fs/intermezzo/journal.c:1749:
+                open_ngroups = cred->ngroups;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#656: FILE: fs/intermezzo/journal.c:1749:
+                open_ngroups = cred->ngroups;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#657: FILE: fs/intermezzo/journal.c:1750:
+                for (i=0; i<cred->ngroups; i++)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#657: FILE: fs/intermezzo/journal.c:1750:
+                for (i=0; i<cred->ngroups; i++)$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#657: FILE: fs/intermezzo/journal.c:1750:
+                for (i=0; i<cred->ngroups; i++)
                       ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#657: FILE: fs/intermezzo/journal.c:1750:
+                for (i=0; i<cred->ngroups; i++)
                            ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#658: FILE: fs/intermezzo/journal.c:1751:
+^I^I^Iopen_groups[i] =  (__u32) cred->groups[i]; $

CHECK:SPACING: No space is necessary after a cast
#658: FILE: fs/intermezzo/journal.c:1751:
+			open_groups[i] =  (__u32) cred->groups[i]; 

ERROR:CODE_INDENT: code indent should use tabs where possible
#664: FILE: fs/intermezzo/journal.c:1755:
+                open_fsuid = cred->uid;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#664: FILE: fs/intermezzo/journal.c:1755:
+                open_fsuid = cred->uid;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#665: FILE: fs/intermezzo/journal.c:1756:
+                open_fsgid = cred->gid;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#665: FILE: fs/intermezzo/journal.c:1756:
+                open_fsgid = cred->gid;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#675: FILE: fs/intermezzo/journal.c:2020:
+        size =  sizeof(__u32) * current->vfscred->ngroups + $

ERROR:CODE_INDENT: code indent should use tabs where possible
#675: FILE: fs/intermezzo/journal.c:2020:
+        size =  sizeof(__u32) * current->vfscred->ngroups + $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#675: FILE: fs/intermezzo/journal.c:2020:
+        size =  sizeof(__u32) * current->vfscred->ngroups + $

ERROR:CODE_INDENT: code indent should use tabs where possible
#687: FILE: fs/intermezzo/kml_reint.c:30:
+        if (current->vfscred->uid != current->uid)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#687: FILE: fs/intermezzo/kml_reint.c:30:
+        if (current->vfscred->uid != current->uid)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#690: FILE: fs/intermezzo/kml_reint.c:32:
+        if (current->vfscred->gid != current->gid)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#690: FILE: fs/intermezzo/kml_reint.c:32:
+        if (current->vfscred->gid != current->gid)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#694: FILE: fs/intermezzo/kml_reint.c:34:
+        setfsuid(rec->rec_head.uid);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#694: FILE: fs/intermezzo/kml_reint.c:34:
+        setfsuid(rec->rec_head.uid);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#695: FILE: fs/intermezzo/kml_reint.c:35:
+        setfsgid(rec->rec_head.fsgid);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#695: FILE: fs/intermezzo/kml_reint.c:35:
+        setfsgid(rec->rec_head.fsgid);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#702: FILE: fs/intermezzo/kml_reint.c:40:
+        setfsuid(current->uid); $

ERROR:CODE_INDENT: code indent should use tabs where possible
#702: FILE: fs/intermezzo/kml_reint.c:40:
+        setfsuid(current->uid); $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#702: FILE: fs/intermezzo/kml_reint.c:40:
+        setfsuid(current->uid); $

ERROR:CODE_INDENT: code indent should use tabs where possible
#703: FILE: fs/intermezzo/kml_reint.c:41:
+        setfsgid(current->gid);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#703: FILE: fs/intermezzo/kml_reint.c:41:
+        setfsgid(current->gid);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#715: FILE: fs/intermezzo/upcall.c:66:
+        inp->uh.uid = current->vfscred->uid;\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#715: FILE: fs/intermezzo/upcall.c:66:
+        inp->uh.uid = current->vfscred->uid;\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#727: FILE: fs/intermezzo/vfs.c:73:
+        if (inode->i_uid == current->vfscred->uid)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#727: FILE: fs/intermezzo/vfs.c:73:
+        if (inode->i_uid == current->vfscred->uid)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#730: FILE: fs/intermezzo/vfs.c:75:
+        if (dir->i_uid == current->vfscred->uid)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#730: FILE: fs/intermezzo/vfs.c:75:
+        if (dir->i_uid == current->vfscred->uid)$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'current->vfscred->uid != inode->i_uid'
#876: FILE: fs/locks.c:1205:
+	if ((current->vfscred->uid != inode->i_uid) && !capable(CAP_LEASE))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#985: FILE: fs/open.c:262:
+		if (current->vfscred->uid != inode->i_uid &&

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#994: FILE: fs/open.c:309:
+		if (current->vfscred->uid != inode->i_uid &&

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1130: FILE: fs/reiserfs/namei.c:548:
+    inode->i_uid = current->vfscred->uid;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1139: FILE: fs/reiserfs/namei.c:556:
+        inode->i_gid = current->vfscred->gid;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1139: FILE: fs/reiserfs/namei.c:556:
+        inode->i_gid = current->vfscred->gid;$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1239: FILE: include/linux/cred.h:1:
+#ifndef _LINUX_CRED_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#1246: FILE: include/linux/cred.h:8:
+#include <asm/atomic.h>

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1285: FILE: include/linux/cred.h:47:
+extern void credentials_init(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1287: FILE: include/linux/cred.h:49:
+extern void put_vfscred(struct vfs_cred *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfs_cred *' should also have an identifier name
#1287: FILE: include/linux/cred.h:49:
+extern void put_vfscred(struct vfs_cred *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1288: FILE: include/linux/cred.h:50:
+extern struct vfs_cred *vfscred_create(uid_t, gid_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'uid_t' should also have an identifier name
#1288: FILE: include/linux/cred.h:50:
+extern struct vfs_cred *vfscred_create(uid_t, gid_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'gid_t' should also have an identifier name
#1288: FILE: include/linux/cred.h:50:
+extern struct vfs_cred *vfscred_create(uid_t, gid_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1289: FILE: include/linux/cred.h:51:
+extern struct vfs_cred *vfscred_clone(struct vfs_cred *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfs_cred *' should also have an identifier name
#1289: FILE: include/linux/cred.h:51:
+extern struct vfs_cred *vfscred_clone(struct vfs_cred *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1290: FILE: include/linux/cred.h:52:
+extern int vfscred_getgroups(struct vfs_cred *, int, gid_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfs_cred *' should also have an identifier name
#1290: FILE: include/linux/cred.h:52:
+extern int vfscred_getgroups(struct vfs_cred *, int, gid_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1290: FILE: include/linux/cred.h:52:
+extern int vfscred_getgroups(struct vfs_cred *, int, gid_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'gid_t *' should also have an identifier name
#1290: FILE: include/linux/cred.h:52:
+extern int vfscred_getgroups(struct vfs_cred *, int, gid_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1291: FILE: include/linux/cred.h:53:
+extern int vfscred_setgroups(struct vfs_cred *, int, gid_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfs_cred *' should also have an identifier name
#1291: FILE: include/linux/cred.h:53:
+extern int vfscred_setgroups(struct vfs_cred *, int, gid_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1291: FILE: include/linux/cred.h:53:
+extern int vfscred_setgroups(struct vfs_cred *, int, gid_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'gid_t *' should also have an identifier name
#1291: FILE: include/linux/cred.h:53:
+extern int vfscred_setgroups(struct vfs_cred *, int, gid_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1292: FILE: include/linux/cred.h:54:
+extern int vfscred_match_group(struct vfs_cred *, gid_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfs_cred *' should also have an identifier name
#1292: FILE: include/linux/cred.h:54:
+extern int vfscred_match_group(struct vfs_cred *, gid_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'gid_t' should also have an identifier name
#1292: FILE: include/linux/cred.h:54:
+extern int vfscred_match_group(struct vfs_cred *, gid_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1307: FILE: include/linux/cred.h:69:
+extern struct vfs_cred *clone_current_vfscred(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1308: FILE: include/linux/cred.h:70:
+extern void set_current_vfscred(struct vfs_cred *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfs_cred *' should also have an identifier name
#1308: FILE: include/linux/cred.h:70:
+extern void set_current_vfscred(struct vfs_cred *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1309: FILE: include/linux/cred.h:71:
+extern int setfsuid(uid_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'uid_t' should also have an identifier name
#1309: FILE: include/linux/cred.h:71:
+extern int setfsuid(uid_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1310: FILE: include/linux/cred.h:72:
+extern int setfsgid(gid_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'gid_t' should also have an identifier name
#1310: FILE: include/linux/cred.h:72:
+extern int setfsgid(gid_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1311: FILE: include/linux/cred.h:73:
+extern int setgroups(int, gid_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1311: FILE: include/linux/cred.h:73:
+extern int setgroups(int, gid_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'gid_t *' should also have an identifier name
#1311: FILE: include/linux/cred.h:73:
+extern int setgroups(int, gid_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1312: FILE: include/linux/cred.h:74:
+extern int getgroups(int, gid_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1312: FILE: include/linux/cred.h:74:
+extern int getgroups(int, gid_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'gid_t *' should also have an identifier name
#1312: FILE: include/linux/cred.h:74:
+extern int getgroups(int, gid_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1314: FILE: include/linux/cred.h:76:
+extern struct vfs_cred *get_task_vfscred(struct task_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#1314: FILE: include/linux/cred.h:76:
+extern struct vfs_cred *get_task_vfscred(struct task_struct *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1315: FILE: include/linux/cred.h:77:
+extern void set_task_vfscred(struct task_struct *, struct vfs_cred *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#1315: FILE: include/linux/cred.h:77:
+extern void set_task_vfscred(struct task_struct *, struct vfs_cred *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfs_cred *' should also have an identifier name
#1315: FILE: include/linux/cred.h:77:
+extern void set_task_vfscred(struct task_struct *, struct vfs_cred *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1318: FILE: include/linux/cred.h:80:
+extern int task_setfsuid(struct task_struct *, uid_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#1318: FILE: include/linux/cred.h:80:
+extern int task_setfsuid(struct task_struct *, uid_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'uid_t' should also have an identifier name
#1318: FILE: include/linux/cred.h:80:
+extern int task_setfsuid(struct task_struct *, uid_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1321: FILE: include/linux/cred.h:83:
+extern int setgroups16(int, gid16_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1322: FILE: include/linux/cred.h:84:
+extern int getgroups16(int, gid16_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1322: FILE: include/linux/cred.h:84:
+extern int getgroups16(int, gid16_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'gid16_t *' should also have an identifier name
#1322: FILE: include/linux/cred.h:84:
+extern int getgroups16(int, gid16_t *);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1357: FILE: include/linux/sched.h:331:
+	uid_t uid,euid,suid;
 	         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1357: FILE: include/linux/sched.h:331:
+	uid_t uid,euid,suid;
 	              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1358: FILE: include/linux/sched.h:332:
+	gid_t gid,egid,sgid;
 	         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1358: FILE: include/linux/sched.h:332:
+	gid_t gid,egid,sgid;
 	              ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1397: FILE: kernel/cred.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#1398: FILE: kernel/cred.c:2:
+ * linux/kernel/cred.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1418: FILE: kernel/cred.c:22:
+struct vfs_cred init_vfscred = { $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1433: FILE: kernel/cred.c:37:
+	vfscred_cache = kmem_cache_create("vfs_cred",
+				       sizeof(struct vfs_cred),

WARNING:LINE_SPACING: Missing a blank line after declarations
#1444: FILE: kernel/cred.c:48:
+	struct vfs_cred *cred;
+	cred = (struct vfs_cred *)kmem_cache_alloc(vfscred_cache, gfp);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#1467: FILE: kernel/cred.c:71:
+	buf = (gid_t *)kmalloc(ngrp * sizeof(gid_t), GFP_KERNEL);

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#1467: FILE: kernel/cred.c:71:
+	buf = (gid_t *)kmalloc(ngrp * sizeof(gid_t), GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1499: FILE: kernel/cred.c:103:
+	if (!(cred = vfscred_alloc(SLAB_KERNEL)))

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1594: FILE: kernel/cred.c:198:
+ * ^I grabbing a reference while the task itself is changing$

WARNING:LINE_SPACING: Missing a blank line after declarations
#1667: FILE: kernel/cred.c:271:
+		struct vfs_cred *new;
+		new = vfscred_clone(cred);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1812: FILE: kernel/cred.c:416:
+	int i;
+	if (ngrp > cred->ngroups)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1858: FILE: kernel/cred.c:462:
+EXPORT_SYMBOL(put_vfscred);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1859: FILE: kernel/cred.c:463:
+EXPORT_SYMBOL(vfscred_getgroups);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1860: FILE: kernel/cred.c:464:
+EXPORT_SYMBOL(setfsuid);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1861: FILE: kernel/cred.c:465:
+EXPORT_SYMBOL(setfsgid);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1862: FILE: kernel/cred.c:466:
+EXPORT_SYMBOL(setgroups);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1863: FILE: kernel/cred.c:467:
+EXPORT_SYMBOL(getgroups);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1864: FILE: kernel/cred.c:468:
+EXPORT_SYMBOL(set_current_vfscred);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1897: FILE: kernel/fork.c:509:
+static int copy_cred(unsigned long clone_flags, struct task_struct * tsk)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#1900: FILE: kernel/fork.c:512:
+	struct vfs_cred *cred;
+	cred = clone_current_vfscred();

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1953: FILE: kernel/sys.c:498:
+		current->gid = current->egid = current->sgid = gid;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2018: FILE: kernel/sys.c:775:
+^I    uid == current->suid || uid == current->vfscred->uid || $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2039: FILE: kernel/sys.c:807:
+^I    gid == current->sgid || gid == current->vfscred->gid || $

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2070: FILE: kernel/sys.c:1000:
+		if (copy_to_user(grouplist, groups, sizeof(gid_t)*i))
 		                                                 ^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2232: FILE: net/sunrpc/auth_unix.c:138:
+		return (cred->uc_uid == 0 && cred->uc_fsuid == 0
+		     && cred->uc_gid == 0 && cred->uc_fsgid == 0

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2233: FILE: net/sunrpc/auth_unix.c:139:
+		     && cred->uc_gid == 0 && cred->uc_fsgid == 0
+		     && cred->uc_gids[0] == (gid_t) NOGROUP);

CHECK:SPACING: No space is necessary after a cast
#2233: FILE: net/sunrpc/auth_unix.c:139:
+		     && cred->uc_gids[0] == (gid_t) NOGROUP);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2251: FILE: net/sunrpc/auth_unix.c:144:
+	if (cred->uc_uid != current->uid
+	 || cred->uc_gid != current->gid

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2252: FILE: net/sunrpc/auth_unix.c:145:
+	 || cred->uc_gid != current->gid
+	 || cred->uc_fsuid != vfscred->uid

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2253: FILE: net/sunrpc/auth_unix.c:146:
+	 || cred->uc_fsuid != vfscred->uid
+	 || cred->uc_fsgid != vfscred->gid) {

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2264: FILE: net/sunrpc/auth_unix.c:154:
+	if (memcmp(cred->uc_gids, vfscred->groups, groups*sizeof(gid_t)))
 	                                                 ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2311: FILE: security/dummy.c:56:
+	if (cap_is_fs_cap (cap) ? tsk->vfscred->uid == 0 : tsk->euid == 0)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000436015.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 72 errors, 87 warnings, 41 checks, 1958 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000436015.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
