WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#34: 
- just added new member to task struct instead of modifing already used list

WARNING:TYPO_SPELLING: 'modifing' may be misspelled - perhaps 'modifying'?
#34: 
- just added new member to task struct instead of modifing already used list
                                                  ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'sytem' may be misspelled - perhaps 'system'?
#41: 
tested on i386/SMP sytem. fork()/kill()/ps tight loop works well for 2 hours.
                   ^^^^^

WARNING:TYPO_SPELLING: 'scannning' may be misspelled - perhaps 'scanning'?
#44: 
Eric's simple pidmap scannning. but implementing this was fun ;)
                     ^^^^^^^^^

WARNING:TYPO_SPELLING: 'exisiting' may be misspelled - perhaps 'existing'?
#49: 
- of course, we can catch all exisiting processes.
                              ^^^^^^^^^

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#96: 
Signed-Off-By: KAMEZAWA Hiroyuki <kamezawa.hiroyu@jp.fujitsu.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#108: FILE: include/linux/watch_head.h:1:
+#ifndef __LINUX_WATCH_HEAD_H__

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'wl' - possible side-effects?
#130: FILE: include/linux/watch_head.h:23:
+#define WATCH_HEAD_INIT(wl)	\
+	{LIST_HEAD_INIT((wl).list), SPIN_LOCK_UNLOCKED, &(wl)}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'wh' - possible side-effects?
#134: FILE: include/linux/watch_head.h:27:
+#define is_target(wh)	((wh) == (wh)->target)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'wh' - possible side-effects?
#135: FILE: include/linux/watch_head.h:28:
+#define make_watch_ready(wh)	((wh)->target = (wh))

CHECK:SPACING: No space is necessary after a cast
#139: FILE: include/linux/watch_head.h:32:
+#define WATCH_TARGET_INVAL	((struct watch_head *) -1)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxO)
#165: FILE: include/linux/watch_head.h:58:
+	struct watch_head *ent,*tmp;
 	                      ^

ERROR:SPACING: space required before that '*' (ctx:OxV)
#165: FILE: include/linux/watch_head.h:58:
+	struct watch_head *ent,*tmp;
 	                       ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#166: FILE: include/linux/watch_head.h:59:
+	struct watch_head *ent,*tmp;
+	BUG_ON(!is_target(old));

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#166: FILE: include/linux/watch_head.h:59:
+	BUG_ON(!is_target(old));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#167: FILE: include/linux/watch_head.h:60:
+	BUG_ON(!is_target(new));

WARNING:RETURN_VOID: void function return statements are not generally useful
#187: FILE: include/linux/watch_head.h:80:
+	return;
+}

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#203: FILE: include/linux/watch_head.h:96:
+	return (new->target)? 1 : 0;
 	                    ^

WARNING:TYPO_SPELLING: 'poiter' may be misspelled - perhaps 'pointer'?
#234: FILE: include/linux/watch_head.h:127:
+ * returns NULL if poiter target is lost. must be called under read lock.
                    ^^^^^^

WARNING:TYPO_SPELLING: 'taget' may be misspelled - perhaps 'target'?
#235: FILE: include/linux/watch_head.h:128:
+ * read_lock will guarantee taget object is now freed while this access.
                             ^^^^^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'wh == ent->target'
#249: FILE: include/linux/watch_head.h:142:
+		if (is_target(wh) && (wh == ent->target)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:BRACES: braces {} should be used on all arms of this statement
#249: FILE: include/linux/watch_head.h:142:
+		if (is_target(wh) && (wh == ent->target)) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#252: FILE: include/linux/watch_head.h:145:
+		} else

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#262: FILE: include/linux/watch_head.h:155:
+}
+#define wh_get_pointer(wh, type, memmer) ({\

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#265: FILE: include/linux/watch_head.h:158:
+	((__ret)? container_of(__ret, type, member) : NULL);})
 	        ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#265: FILE: include/linux/watch_head.h:158:
+	((__ret)? container_of(__ret, type, member) : NULL);})
 	                                                   ^

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#270: FILE: include/linux/watch_head.h:163:
+	((__ret)? container_of(__ret, type, member) : NULL);})
 	        ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#270: FILE: include/linux/watch_head.h:163:
+	((__ret)? container_of(__ret, type, member) : NULL);})
 	                                                   ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#272: FILE: include/linux/watch_head.h:165:
+
+

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000044509.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 7 errors, 13 warnings, 9 checks, 167 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000044509.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
