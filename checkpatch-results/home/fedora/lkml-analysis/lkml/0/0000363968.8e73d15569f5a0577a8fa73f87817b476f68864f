WARNING:TYPO_SPELLING: 'indentified' may be misspelled - perhaps 'identified'?
#34: 
correct cache can be indentified at compile time.
                     ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:REPEATED_WORD: Possible repeated word: 'use'
#38: 
Just FYI: The function that forced me to use use switch/case instead of 

WARNING:TYPO_SPELLING: 'EXTRAVERSION' may be misspelled - perhaps 'EXTROVERSION'?
#56: 
//  EXTRAVERSION = -mm4
    ^^^^^^^^^^^^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#70: FILE: include/linux/slab.h:71:
+};
+extern struct cache_sizes malloc_sizes[];

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#71: FILE: include/linux/slab.h:72:
+extern void *__kmalloc(size_t, int);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#71: FILE: include/linux/slab.h:72:
+extern void *__kmalloc(size_t, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#71: FILE: include/linux/slab.h:72:
+extern void *__kmalloc(size_t, int);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#78: FILE: include/linux/slab.h:79:
+static inline void * kmalloc(size_t size, int flags)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 0)
#80: FILE: include/linux/slab.h:81:
+	if (__builtin_constant_p(size)) {
+extern void __you_cannot_kmalloc_that_much(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#81: FILE: include/linux/slab.h:82:
+extern void __you_cannot_kmalloc_that_much(void);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#82: FILE: include/linux/slab.h:83:
+		unsigned int i,j;
 		              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#83: FILE: include/linux/slab.h:84:
+		unsigned int i,j;
+		j = 0;

ERROR:SPACING: space required before the open parenthesis '('
#84: FILE: include/linux/slab.h:85:
+		switch(size) {

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#86: FILE: include/linux/slab.h:87:
+#define CACHE(x) \
+			(x): j++; \
+		case (x+1) ...

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#86: FILE: include/linux/slab.h:87:
+#define CACHE(x) \
+			(x): j++; \
+		case (x+1) ...

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#88: FILE: include/linux/slab.h:89:
+		case (x+1) ...
 		       ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#89: FILE: include/linux/slab.h:90:
+#define LCACHE(x) \
+			(x): j++; break;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#89: FILE: include/linux/slab.h:90:
+#define LCACHE(x) \
+			(x): j++; break;

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:SPACING: spaces required around that ':' (ctx:VxE)
#94: FILE: include/linux/slab.h:95:
+		default:
 		       ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#98: FILE: include/linux/slab.h:99:
+#define CACHE(x) \
+		i++;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#98: FILE: include/linux/slab.h:99:
+#define CACHE(x) \
+		i++;

ERROR:SPACING: spaces required around that '?' (ctx:VxE)
#102: FILE: include/linux/slab.h:103:
+		return kmem_cache_alloc( (flags & GFP_DMA)?
 		                                          ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#102: FILE: include/linux/slab.h:103:
+		return kmem_cache_alloc( (flags & GFP_DMA)?

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#103: FILE: include/linux/slab.h:104:
+					malloc_sizes[i-j].cs_dmacachep
 					              ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#104: FILE: include/linux/slab.h:105:
+					: malloc_sizes[i-j].cs_cachep,
 					                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#107: FILE: include/linux/slab.h:108:
+	return __kmalloc(size,flags);
 	                     ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#133: FILE: mm/slab.c:2038:
+void * __kmalloc (size_t size, int flags)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#133: FILE: mm/slab.c:2038:
+void * __kmalloc (size_t size, int flags)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#145: FILE: kernel/ksyms.c:99:
+EXPORT_SYMBOL(__kmalloc);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#152: FILE: include/linux/kmalloc_sizes.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000363968.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 11 errors, 12 warnings, 7 checks, 124 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000363968.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
