WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#35: 
diff -urN -X exclude linux-2.5.39-orig/fs/smbfs/ChangeLog linux-2.5.39-smbfs/fs/smbfs/ChangeLog

ERROR:SPACING: space required after that ',' (ctx:OxV)
#78: FILE: fs/smbfs/dir.c:33:
+static int smb_make_node(struct inode *,struct dentry *,int,int);
                                        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:OxV)
#78: FILE: fs/smbfs/dir.c:33:
+static int smb_make_node(struct inode *,struct dentry *,int,int);
                                                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#78: FILE: fs/smbfs/dir.c:33:
+static int smb_make_node(struct inode *,struct dentry *,int,int);
                                                            ^

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#87: FILE: fs/smbfs/dir.c:56:
+struct inode_operations smb_dir_inode_operations_unix =

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#88: FILE: fs/smbfs/dir.c:57:
+struct inode_operations smb_dir_inode_operations_unix =
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BRACES: braces {} are not necessary for single statement blocks
#172: FILE: fs/smbfs/dir.c:655:
+	if (!error) {
+		error = smb_instantiate(dentry, 0, 0);
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'smb_link', this function's name, in a string
#187: FILE: fs/smbfs/dir.c:670:
+	DEBUG1("smb_link old=%s/%s new=%s/%s\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#273: FILE: fs/smbfs/proc.c:75:
+int

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:LINE_SPACING: Missing a blank line after declarations
#336: FILE: fs/smbfs/proc.c:953:
+		struct inode *inode;
+		VERBOSE("Using UNIX CIFS extensions\n");

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'server->opt.protocol >= SMB_PROTOCOL_LANMAN2'
#363: FILE: fs/smbfs/proc.c:1250:
+		if ((server->opt.capabilities & SMB_CAP_UNIX) == 0 &&
+		    (server->opt.protocol >= SMB_PROTOCOL_LANMAN2) &&
 		    !(ei->access == SMB_O_RDONLY))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:CAMELCASE: Avoid CamelCase: <aDIR>
#393: FILE: fs/smbfs/proc.c:1829:
+	if (fattr->attr & aDIR) {

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

ERROR:TRAILING_WHITESPACE: trailing whitespace
#426: FILE: fs/smbfs/proc.c:2091:
+^Ifattr->f_uid = LVAL(p, 40); $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#427: FILE: fs/smbfs/proc.c:2092:
+^Ifattr->f_gid = LVAL(p, 48); $

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#508: FILE: fs/smbfs/proc.c:2731:
+	if (! (req = smb_alloc_request(server, PAGE_SIZE)))
 	    ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#508: FILE: fs/smbfs/proc.c:2731:
+	if (! (req = smb_alloc_request(server, PAGE_SIZE)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#541: FILE: fs/smbfs/proc.c:2975:
+ * ATTR_FORCE     0x200^I$

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#558: FILE: fs/smbfs/proc.c:2992:
+	if (! (req = smb_alloc_request(server, PAGE_SIZE)))
 	    ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#558: FILE: fs/smbfs/proc.c:2992:
+	if (! (req = smb_alloc_request(server, PAGE_SIZE)))

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#566: FILE: fs/smbfs/proc.c:3000:
+	result = smb_encode_path(server, param+6, SMB_MAXPATHLEN+1, d, NULL);
 	                                      ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#566: FILE: fs/smbfs/proc.c:3000:
+	result = smb_encode_path(server, param+6, SMB_MAXPATHLEN+1, d, NULL);
 	                                                        ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#618: FILE: fs/smbfs/proc.c:3052:
+^I$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#619: FILE: fs/smbfs/proc.c:3053:
+	if (attr->ia_valid & ATTR_UID) {
+		LSET(data, 40, attr->ia_uid);
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#622: FILE: fs/smbfs/proc.c:3056:
+	if (attr->ia_valid & ATTR_GID) {
+		LSET(data, 48, attr->ia_gid); 
+	}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#623: FILE: fs/smbfs/proc.c:3057:
+^I^ILSET(data, 48, attr->ia_gid); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#625: FILE: fs/smbfs/proc.c:3059:
+^I$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#626: FILE: fs/smbfs/proc.c:3060:
+	if (attr->ia_valid & ATTR_MODE) {
+		LSET(data, 84, attr->ia_mode);
+	}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#644: FILE: fs/smbfs/proc.c:3078:
+
+

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#664: FILE: fs/smbfs/proc.c:3173:
+	if (! (req = smb_alloc_request(server, PAGE_SIZE)))
 	    ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#664: FILE: fs/smbfs/proc.c:3173:
+	if (! (req = smb_alloc_request(server, PAGE_SIZE)))

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#670: FILE: fs/smbfs/proc.c:3179:
+	result = smb_encode_path(server, param+6, SMB_MAXPATHLEN+1, d, NULL);
 	                                      ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#670: FILE: fs/smbfs/proc.c:3179:
+	result = smb_encode_path(server, param+6, SMB_MAXPATHLEN+1, d, NULL);
 	                                                        ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#685: FILE: fs/smbfs/proc.c:3194:
+	DEBUG1("for %s: result=%d, rcls=%d, err=%d\n",
+		&param[6], result, server->rcls, server->err);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#699: FILE: fs/smbfs/proc.c:3208:
+
+

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#713: FILE: fs/smbfs/proc.c:3222:
+	if (! (req = smb_alloc_request(server, PAGE_SIZE)))
 	    ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#713: FILE: fs/smbfs/proc.c:3222:
+	if (! (req = smb_alloc_request(server, PAGE_SIZE)))

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#719: FILE: fs/smbfs/proc.c:3228:
+	result = smb_encode_path(server, param + 6, SMB_MAXPATHLEN+1, d, NULL);
 	                                                          ^

CHECK:SPACING: No space is necessary after a cast
#726: FILE: fs/smbfs/proc.c:3235:
+	req->rq_data  = (char *) oldpath;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#735: FILE: fs/smbfs/proc.c:3244:
+	DEBUG1("for %s: result=%d, rcls=%d, err=%d\n",
+		&param[6], result, server->rcls, server->err);

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#756: FILE: fs/smbfs/proc.c:3265:
+	if (! (req = smb_alloc_request(server, PAGE_SIZE)))
 	    ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#756: FILE: fs/smbfs/proc.c:3265:
+	if (! (req = smb_alloc_request(server, PAGE_SIZE)))

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#762: FILE: fs/smbfs/proc.c:3271:
+	result = smb_encode_path(server, param + 6, SMB_MAXPATHLEN+1,
 	                                                          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#770: FILE: fs/smbfs/proc.c:3279:
+	req->rq_ldata = smb_encode_path(server, p, SMB_MAXPATHLEN+1,
 	                                                         ^

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#801: FILE: fs/smbfs/proc.c:3310:
+	if (! (req = smb_alloc_request(server, 100)))
 	    ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#801: FILE: fs/smbfs/proc.c:3310:
+	if (! (req = smb_alloc_request(server, 100)))

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#846: FILE: fs/smbfs/proc.c:3394:
+static struct smb_ops smb_ops_unix =
+{

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#869: FILE: fs/smbfs/proto.h:25:
+extern void smb_decode_unix_basic(struct smb_fattr *fattr, char *p);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#872: FILE: fs/smbfs/proto.h:28:
+extern int smb_proc_setattr_unix(struct dentry *d, struct iattr *attr, int major, int minor);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#875: FILE: fs/smbfs/proto.h:31:
+extern int smb_proc_read_link(struct smb_sb_info *server, struct dentry *d, char *buffer, int len);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#876: FILE: fs/smbfs/proto.h:32:
+extern int smb_proc_symlink(struct smb_sb_info *server, struct dentry *d, const char *oldpath);

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#877: FILE: fs/smbfs/proto.h:33:
+extern int smb_proc_link(struct smb_sb_info *server, struct dentry *dentry, struct dentry *new_dentry);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#877: FILE: fs/smbfs/proto.h:33:
+extern int smb_proc_link(struct smb_sb_info *server, struct dentry *dentry, struct dentry *new_dentry);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#878: FILE: fs/smbfs/proto.h:34:
+extern int smb_proc_query_cifsunix(struct smb_sb_info *server);

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#882: FILE: fs/smbfs/proto.h:38:
+extern struct inode_operations smb_dir_inode_operations_unix;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#891: FILE: fs/smbfs/proto.h:87:
+extern int smb_read_link(struct dentry *dentry, char *buffer, int len);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#892: FILE: fs/smbfs/proto.h:88:
+extern int smb_symlink(struct inode *inode, struct dentry *dentry, const char *oldname);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#893: FILE: fs/smbfs/proto.h:89:
+extern int smb_follow_link(struct dentry *dentry, struct nameidata *nd);
                                                                     ^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#893: FILE: fs/smbfs/proto.h:89:
+extern int smb_follow_link(struct dentry *dentry, struct nameidata *nd);

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#894: FILE: fs/smbfs/proto.h:90:
+extern struct inode_operations smb_link_inode_operations;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#899: FILE: fs/smbfs/symlink.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#917: FILE: fs/smbfs/symlink.c:19:
+#include <asm/uaccess.h>

WARNING:LINE_SPACING: Missing a blank line after declarations
#930: FILE: fs/smbfs/symlink.c:32:
+	int r;
+	DEBUG1("read link buffer len = %d\n", len);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#946: FILE: fs/smbfs/symlink.c:48:
+int smb_follow_link(struct dentry *dentry, struct nameidata *nd)
                                                              ^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#950: FILE: fs/smbfs/symlink.c:52:
+	int len;
+	DEBUG1("followlink of %s/%s\n", DENTRY_PATH(dentry));

ERROR:SPACING: space required before the open parenthesis '('
#954: FILE: fs/smbfs/symlink.c:56:
+	if(len < 0)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#958: FILE: fs/smbfs/symlink.c:60:
+	return vfs_follow_link(nd, link);
 	                       ^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#961: FILE: fs/smbfs/symlink.c:63:
+
+

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#962: FILE: fs/smbfs/symlink.c:64:
+struct inode_operations smb_link_inode_operations =

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#963: FILE: fs/smbfs/symlink.c:65:
+struct inode_operations smb_link_inode_operations =
+{

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1037: FILE: include/linux/smbno.h:331:
 
+

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000428693.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 25 errors, 20 warnings, 25 checks, 968 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000428693.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
