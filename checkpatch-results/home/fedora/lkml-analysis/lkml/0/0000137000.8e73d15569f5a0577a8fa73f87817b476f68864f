WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#25: 
An unmount of a mount creates a umount event on the parent. If the parent is

ERROR:BAD_SIGN_OFF: Unrecognized email address: 'Ram Pai (linuxram@us.ibm.com)'
#28: 
Signed-off-by: Ram Pai (linuxram@us.ibm.com)

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:LINE_SPACING: Missing a blank line after declarations
#86: FILE: fs/namespace.c:120:
+	struct vfsmount *child_mnt;
+	spin_lock(&vfsmount_lock);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#87: FILE: fs/namespace.c:121:
+	if ((child_mnt = __lookup_mnt(mnt, dentry, 1)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#104: FILE: fs/namespace.c:421:
+	int ret = 0;
+	spin_lock(&vfsmount_lock);

WARNING:LINE_SPACING: Missing a blank line after declarations
#214: FILE: fs/pnode.c:115:
+	int mycount = atomic_read(&mnt->mnt_count);
+	return (mycount > count);

ERROR:CODE_INDENT: code indent should use tabs where possible
#243: FILE: fs/pnode.c:144:
+^I     ^I^Im = propagation_next(m, parent)) {$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#243: FILE: fs/pnode.c:144:
+^I     ^I^Im = propagation_next(m, parent)) {$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#245: FILE: fs/pnode.c:146:
+		if (child && list_empty(&child->mnt_mounts) &&

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#261: FILE: fs/pnode.c:162:
+	BUG_ON(parent == mnt);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#265: FILE: fs/pnode.c:166:
+			m = propagation_next(m, parent)) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct list_head *' should also have an identifier name
#299: FILE: fs/pnode.h:32:
+int propagate_umount(struct list_head *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfsmount *' should also have an identifier name
#300: FILE: fs/pnode.h:33:
+int propagate_mount_busy(struct vfsmount *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#300: FILE: fs/pnode.h:33:
+int propagate_mount_busy(struct vfsmount *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#309: FILE: include/linux/dcache.h:332:
+extern struct vfsmount *__lookup_mnt(struct vfsmount *, struct dentry *, int);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfsmount *' should also have an identifier name
#309: FILE: include/linux/dcache.h:332:
+extern struct vfsmount *__lookup_mnt(struct vfsmount *, struct dentry *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#309: FILE: include/linux/dcache.h:332:
+extern struct vfsmount *__lookup_mnt(struct vfsmount *, struct dentry *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#309: FILE: include/linux/dcache.h:332:
+extern struct vfsmount *__lookup_mnt(struct vfsmount *, struct dentry *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#321: FILE: include/linux/fs.h:1254:
+extern void umount_tree(struct vfsmount *, int, struct list_head *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfsmount *' should also have an identifier name
#321: FILE: include/linux/fs.h:1254:
+extern void umount_tree(struct vfsmount *, int, struct list_head *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#321: FILE: include/linux/fs.h:1254:
+extern void umount_tree(struct vfsmount *, int, struct list_head *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct list_head *' should also have an identifier name
#321: FILE: include/linux/fs.h:1254:
+extern void umount_tree(struct vfsmount *, int, struct list_head *);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000137000.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 4 errors, 15 warnings, 3 checks, 255 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000137000.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
