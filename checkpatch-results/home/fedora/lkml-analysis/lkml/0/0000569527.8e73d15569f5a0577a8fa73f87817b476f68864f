WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#61: 
locks_wake_up_blocks() calls waiter->fl_notify(), which is really nlmsvc_notify_blocked()

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#117: FILE: fs/locks.c:129:
+#define acquire_fl_lock()	spin_lock(&file_lock_lock);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#118: FILE: fs/locks.c:130:
+#define release_fl_lock()	spin_unlock(&file_lock_lock);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#127: FILE: fs/locks.c:354:
+static struct file_lock *lease_alloc(struct file *filp, int type)
                                                   ^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "fl"
#135: FILE: fs/locks.c:357:
+	if (fl != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#144: FILE: fs/locks.c:361:
+		fl->fl_file = filp;
 		              ^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!new_fl"
#328: FILE: fs/locks.c:1044:
+	if (new_fl == NULL) {

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#402: FILE: fs/locks.c:1217:
+	new_fl = lease_alloc(filp, arg);
 	                     ^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!new_fl"
#403: FILE: fs/locks.c:1218:
+	if (new_fl == NULL) {

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#599: FILE: include/linux/fs.h:567:
+extern void __posix_unblock_lock(struct file_lock *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file_lock *' should also have an identifier name
#599: FILE: include/linux/fs.h:567:
+extern void __posix_unblock_lock(struct file_lock *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000569527.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 0 errors, 7 warnings, 4 checks, 509 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000569527.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
