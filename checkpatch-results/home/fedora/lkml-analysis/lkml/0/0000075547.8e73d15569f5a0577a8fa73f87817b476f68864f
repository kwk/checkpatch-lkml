WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#32: 
their own files instead of being buried (almost hidden) in readme/txt files.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#53: FILE: Documentation/jprobe-example.c:1:
+/*jprobe-example.c */

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#74: FILE: Documentation/jprobe-example.c:22:
+	      int __user * parent_tidptr, int __user * child_tidptr)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#74: FILE: Documentation/jprobe-example.c:22:
+	      int __user * parent_tidptr, int __user * child_tidptr)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#76: FILE: Documentation/jprobe-example.c:24:
+	printk("jprobe: clone_flags=0x%lx, stack_size=0x%lx, regs=0x%p\n",

CHECK:SPACING: No space is necessary after a cast
#85: FILE: Documentation/jprobe-example.c:33:
+	.entry = (kprobe_opcode_t *) jdo_fork

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#91: FILE: Documentation/jprobe-example.c:39:
+	my_jprobe.kp.addr = (kprobe_opcode_t *) kallsyms_lookup_name("do_fork");

WARNING:LINE_SPACING: Missing a blank line after declarations
#91: FILE: Documentation/jprobe-example.c:39:
+	int ret;
+	my_jprobe.kp.addr = (kprobe_opcode_t *) kallsyms_lookup_name("do_fork");

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#93: FILE: Documentation/jprobe-example.c:41:
+		printk("Couldn't find %s to plant jprobe\n", "do_fork");

ERROR:SPACING: spaces required around that '<' (ctx:WxV)
#97: FILE: Documentation/jprobe-example.c:45:
+	if ((ret = register_jprobe(&my_jprobe)) <0) {
 	                                        ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#97: FILE: Documentation/jprobe-example.c:45:
+	if ((ret = register_jprobe(&my_jprobe)) <0) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#98: FILE: Documentation/jprobe-example.c:46:
+		printk("register_jprobe failed, returned %d\n", ret);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#101: FILE: Documentation/jprobe-example.c:49:
+	printk("Planted jprobe at %p, handler addr %p\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#109: FILE: Documentation/jprobe-example.c:57:
+	printk("jprobe unregistered\n");

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#116: FILE: Documentation/kprobe-example.c:1:
+/*kprobe-example.c*/

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#133: FILE: Documentation/kprobe-example.c:18:
+	printk("pre_handler: p->addr=0x%p, eip=%lx, eflags=0x%lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#134: FILE: Documentation/kprobe-example.c:19:
+	printk("pre_handler: p->addr=0x%p, eip=%lx, eflags=0x%lx\n",
+		p->addr, regs->eip, regs->eflags);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#142: FILE: Documentation/kprobe-example.c:27:
+	printk("post_handler: p->addr=0x%p, eflags=0x%lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#143: FILE: Documentation/kprobe-example.c:28:
+	printk("post_handler: p->addr=0x%p, eflags=0x%lx\n",
+		p->addr, regs->eflags);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#152: FILE: Documentation/kprobe-example.c:37:
+	printk("fault_handler: p->addr=0x%p, trap #%dn",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#153: FILE: Documentation/kprobe-example.c:38:
+	printk("fault_handler: p->addr=0x%p, trap #%dn",
+		p->addr, trapnr);

WARNING:LINE_SPACING: Missing a blank line after declarations
#161: FILE: Documentation/kprobe-example.c:46:
+	int ret;
+	kp.pre_handler = handler_pre;

CHECK:SPACING: No space is necessary after a cast
#164: FILE: Documentation/kprobe-example.c:49:
+	kp.addr = (kprobe_opcode_t*) kallsyms_lookup_name("do_fork");

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#164: FILE: Documentation/kprobe-example.c:49:
+	kp.addr = (kprobe_opcode_t*) kallsyms_lookup_name("do_fork");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#167: FILE: Documentation/kprobe-example.c:52:
+		printk("Couldn't find %s to plant kprobe\n", "do_fork");

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#170: FILE: Documentation/kprobe-example.c:55:
+	if ((ret = register_kprobe(&kp) < 0)) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#171: FILE: Documentation/kprobe-example.c:56:
+		printk("register_kprobe failed, returned %d\n", ret);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#174: FILE: Documentation/kprobe-example.c:59:
+	printk("kprobe registered\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#181: FILE: Documentation/kprobe-example.c:66:
+	printk("kprobe unregistered\n");

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#394: FILE: Documentation/kretprobe-example.c:1:
+/*kretprobe-example.c*/

CHECK:SPACING: No space is necessary after a cast
#411: FILE: Documentation/kretprobe-example.c:18:
+	int retval = (int) regs->eax;

WARNING:LINE_SPACING: Missing a blank line after declarations
#412: FILE: Documentation/kretprobe-example.c:19:
+	int retval = (int) regs->eax;
+	if (retval < 0) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#412: FILE: Documentation/kretprobe-example.c:19:
+	if (retval < 0) {
+		printk("%s returns %d\n", probed_func, retval);
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#413: FILE: Documentation/kretprobe-example.c:20:
+		printk("%s returns %d\n", probed_func, retval);

WARNING:LINE_SPACING: Missing a blank line after declarations
#427: FILE: Documentation/kretprobe-example.c:34:
+	int ret;
+	my_kretprobe.kp.addr =

CHECK:SPACING: No space is necessary after a cast
#428: FILE: Documentation/kretprobe-example.c:35:
+		(kprobe_opcode_t *) kallsyms_lookup_name(probed_func);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#430: FILE: Documentation/kretprobe-example.c:37:
+		printk("Couldn't find %s to plant return probe\n", probed_func);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#433: FILE: Documentation/kretprobe-example.c:40:
+	if ((ret = register_kretprobe(&my_kretprobe)) < 0) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#434: FILE: Documentation/kretprobe-example.c:41:
+		printk("register_kretprobe failed, returned %d\n", ret);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#437: FILE: Documentation/kretprobe-example.c:44:
+	printk("Planted return probe at %p\n", my_kretprobe.kp.addr);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#444: FILE: Documentation/kretprobe-example.c:51:
+	printk("kretprobe unregistered\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#446: FILE: Documentation/kretprobe-example.c:53:
+	printk("Missed probing %d instances of %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#447: FILE: Documentation/kretprobe-example.c:54:
+	printk("Missed probing %d instances of %s\n",
+		my_kretprobe.nmissed, probed_func);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000075547.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 7 errors, 27 warnings, 9 checks, 387 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000075547.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
