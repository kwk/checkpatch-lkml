CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pgd' - possible side-effects?
#87: FILE: include/asm-generic/pgtable.h:176:
+#define pgd_none_or_clear_bad(pgd) ({ \
+	int ret__ = 0;			\
+	if (pgd_none(*pgd))		\
+		ret__ = 1;		\
+	else if (unlikely(pgd_bad(*pgd))) {	\
+		pgd_ERROR(*pgd);		\
+		pgd_clear(pgd);		\
+		ret__ = 1;		\
+	}				\
+	ret__;				\
+})

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'pgd' may be better as '(pgd)' to avoid precedence issues
#87: FILE: include/asm-generic/pgtable.h:176:
+#define pgd_none_or_clear_bad(pgd) ({ \
+	int ret__ = 0;			\
+	if (pgd_none(*pgd))		\
+		ret__ = 1;		\
+	else if (unlikely(pgd_bad(*pgd))) {	\
+		pgd_ERROR(*pgd);		\
+		pgd_clear(pgd);		\
+		ret__ = 1;		\
+	}				\
+	ret__;				\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pud' - possible side-effects?
#99: FILE: include/asm-generic/pgtable.h:188:
+#define pud_none_or_clear_bad(pud) ({ \
+	int ret__ = 0;			\
+	if (pud_none(*pud))		\
+		ret__ = 1;		\
+	else if (unlikely(pud_bad(*pud))) {	\
+		pud_ERROR(*pud);		\
+		pud_clear(pud);		\
+		ret__ = 1;		\
+	}				\
+	ret__;				\
+})

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'pud' may be better as '(pud)' to avoid precedence issues
#99: FILE: include/asm-generic/pgtable.h:188:
+#define pud_none_or_clear_bad(pud) ({ \
+	int ret__ = 0;			\
+	if (pud_none(*pud))		\
+		ret__ = 1;		\
+	else if (unlikely(pud_bad(*pud))) {	\
+		pud_ERROR(*pud);		\
+		pud_clear(pud);		\
+		ret__ = 1;		\
+	}				\
+	ret__;				\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pmd' - possible side-effects?
#111: FILE: include/asm-generic/pgtable.h:200:
+#define pmd_none_or_clear_bad(pmd) ({ \
+	int ret__ = 0;			\
+	if (pmd_none(*pmd))		\
+		ret__ = 1;		\
+	else if (unlikely(pmd_bad(*pmd))) {	\
+		pmd_ERROR(*pmd);		\
+		pmd_clear(pmd);		\
+		ret__ = 1;		\
+	}				\
+	ret__;				\
+})

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'pmd' may be better as '(pmd)' to avoid precedence issues
#111: FILE: include/asm-generic/pgtable.h:200:
+#define pmd_none_or_clear_bad(pmd) ({ \
+	int ret__ = 0;			\
+	if (pmd_none(*pmd))		\
+		ret__ = 1;		\
+	else if (unlikely(pmd_bad(*pmd))) {	\
+		pmd_ERROR(*pmd);		\
+		pmd_clear(pmd);		\
+		ret__ = 1;		\
+	}				\
+	ret__;				\
+})

CHECK:LINE_SPACING: Please don't use multiple blank lines
#123: FILE: include/asm-generic/pgtable.h:212:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000152756.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 0 errors, 0 warnings, 7 checks, 113 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000152756.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
