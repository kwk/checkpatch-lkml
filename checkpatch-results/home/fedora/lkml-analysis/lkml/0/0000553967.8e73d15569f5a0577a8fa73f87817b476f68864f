WARNING:TYPO_SPELLING: 'upto' may be misspelled - perhaps 'up to'?
#51: 
   upto 32 (configurable) POSIX timers at the same time in your process.
   ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#56: 
There have been no changes to the code for almost half a year now. The code 

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#207: FILE: arch/ia64/kernel/signal.c:182:
 		switch (from->si_code >> 16) {
+		      case __SI_TIMER >> 16:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:TABSTOP: Statements should start on a tabstop
#208: FILE: arch/ia64/kernel/signal.c:183:
+		      case __SI_TIMER >> 16:

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#392: FILE: arch/sparc/kernel/systbls.S:55:
+/*170*/	.long sys_timer_settime, sys_timer_gettime, sys_timer_getoverrun, sys_timer_delete, sys_getdents

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:CODE_INDENT: code indent should use tabs where possible
#422: FILE: arch/sparc64/kernel/sys_sparc32.c:4222:
+        struct  timespec32 it_value;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#422: FILE: arch/sparc64/kernel/sys_sparc32.c:4222:
+        struct  timespec32 it_value;$

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#425: FILE: arch/sparc64/kernel/sys_sparc32.c:4225:
+int good_timespec(const struct timespec *ts);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#426: FILE: arch/sparc64/kernel/sys_sparc32.c:4226:
+extern struct k_itimer* lock_timer(struct task_struct *tsk, timer_t timer_id);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#426: FILE: arch/sparc64/kernel/sys_sparc32.c:4226:
+extern struct k_itimer* lock_timer(struct task_struct *tsk, timer_t timer_id);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#431: FILE: arch/sparc64/kernel/sys_sparc32.c:4231:
+}
+extern void do_timer_gettime(struct k_itimer *timr, struct itimerspec *cur_setting);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#431: FILE: arch/sparc64/kernel/sys_sparc32.c:4231:
+extern void do_timer_gettime(struct k_itimer *timr, struct itimerspec *cur_setting);

WARNING:LONG_LINE: line length of 127 exceeds 100 columns
#432: FILE: arch/sparc64/kernel/sys_sparc32.c:4232:
+extern void do_timer_settime(struct k_itimer *timr, int flags, struct itimerspec *new_setting, struct itimerspec *old_setting);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#432: FILE: arch/sparc64/kernel/sys_sparc32.c:4232:
+extern void do_timer_settime(struct k_itimer *timr, int flags, struct itimerspec *new_setting, struct itimerspec *old_setting);

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#433: FILE: arch/sparc64/kernel/sys_sparc32.c:4233:
+extern int sys_timer_create(clockid_t which_clock, sigevent_t *timer_event_spec, timer_t *created_timer_id);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#433: FILE: arch/sparc64/kernel/sys_sparc32.c:4233:
+extern int sys_timer_create(clockid_t which_clock, sigevent_t *timer_event_spec, timer_t *created_timer_id);

WARNING:LONG_LINE: line length of 116 exceeds 100 columns
#435: FILE: arch/sparc64/kernel/sys_sparc32.c:4235:
+asmlinkage int sys32_timer_create(clockid_t which_clock, sigevent_t32 *timer_event_spec, timer_t *created_timer_id);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#440: FILE: arch/sparc64/kernel/sys_sparc32.c:4240:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#441: FILE: arch/sparc64/kernel/sys_sparc32.c:4241:
+	if (timer_event_spec) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#442: FILE: arch/sparc64/kernel/sys_sparc32.c:4242:
+		memset (&tes, 0, sizeof(tes));

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#443: FILE: arch/sparc64/kernel/sys_sparc32.c:4243:
+		if (get_user (tes.sigev_value.sival_int, &timer_event_spec->sigev_value.sival_int) ||

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#443: FILE: arch/sparc64/kernel/sys_sparc32.c:4243:
+		if (get_user (tes.sigev_value.sival_int, &timer_event_spec->sigev_value.sival_int) ||

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#444: FILE: arch/sparc64/kernel/sys_sparc32.c:4244:
+		    __get_user (tes.sigev_signo, &timer_event_spec->sigev_signo) ||

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#445: FILE: arch/sparc64/kernel/sys_sparc32.c:4245:
+		    __get_user (tes.sigev_notify, &timer_event_spec->sigev_notify) ||

WARNING:LONG_LINE: line length of 127 exceeds 100 columns
#446: FILE: arch/sparc64/kernel/sys_sparc32.c:4246:
+		    __get_user (tes._sigev_un._sigev_thread._attribute, &timer_event_spec->_sigev_un._sigev_thread._attribute))

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#446: FILE: arch/sparc64/kernel/sys_sparc32.c:4246:
+		    __get_user (tes._sigev_un._sigev_thread._attribute, &timer_event_spec->_sigev_un._sigev_thread._attribute))

WARNING:LONG_LINE_COMMENT: line length of 120 exceeds 100 columns
#448: FILE: arch/sparc64/kernel/sys_sparc32.c:4248:
+		/* As sigev_value is a union of 32bit int and 64bit void *, put the int twice into the ptr, so that when

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE_COMMENT: line length of 112 exceeds 100 columns
#449: FILE: arch/sparc64/kernel/sys_sparc32.c:4249:
+		   actually sending the signal both sival_int and sival_ptr will result in correct operation. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#449: FILE: arch/sparc64/kernel/sys_sparc32.c:4249:
+		/* As sigev_value is a union of 32bit int and 64bit void *, put the int twice into the ptr, so that when
+		   actually sending the signal both sival_int and sival_ptr will result in correct operation. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#449: FILE: arch/sparc64/kernel/sys_sparc32.c:4249:
+		   actually sending the signal both sival_int and sival_ptr will result in correct operation. */

WARNING:LONG_LINE: line length of 118 exceeds 100 columns
#450: FILE: arch/sparc64/kernel/sys_sparc32.c:4250:
+		tes.sigev_value.sival_ptr = (void *)((long)tes.sigev_value.sival_int<<32 | tes.sigev_value.sival_int);

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#450: FILE: arch/sparc64/kernel/sys_sparc32.c:4250:
+		tes.sigev_value.sival_ptr = (void *)((long)tes.sigev_value.sival_int<<32 | tes.sigev_value.sival_int);
 		                                                                    ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#451: FILE: arch/sparc64/kernel/sys_sparc32.c:4251:
+		old_fs = get_fs ();

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#452: FILE: arch/sparc64/kernel/sys_sparc32.c:4252:
+		set_fs (KERNEL_DS);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#453: FILE: arch/sparc64/kernel/sys_sparc32.c:4253:
+		ret = sys_timer_create (which_clock, &tes, &new_timer_id);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#454: FILE: arch/sparc64/kernel/sys_sparc32.c:4254:
+		set_fs (old_fs);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#456: FILE: arch/sparc64/kernel/sys_sparc32.c:4256:
+			if (put_user (new_timer_id, created_timer_id))

CHECK:BRACES: Unbalanced braces around else statement
#460: FILE: arch/sparc64/kernel/sys_sparc32.c:4260:
+	} else

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#461: FILE: arch/sparc64/kernel/sys_sparc32.c:4261:
+		return sys_timer_create (which_clock, NULL, created_timer_id);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#470: FILE: arch/sparc64/kernel/sys_sparc32.c:4270:
+	if (!timr) return -EINVAL;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#475: FILE: arch/sparc64/kernel/sys_sparc32.c:4275:
+^I$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#476: FILE: arch/sparc64/kernel/sys_sparc32.c:4276:
+	if (put_user (cur_setting.it_interval.tv_sec, &setting->it_interval.tv_sec) ||

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#477: FILE: arch/sparc64/kernel/sys_sparc32.c:4277:
+	    __put_user (cur_setting.it_interval.tv_nsec, &setting->it_interval.tv_nsec) ||

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#478: FILE: arch/sparc64/kernel/sys_sparc32.c:4278:
+	    __put_user (cur_setting.it_value.tv_sec, &setting->it_value.tv_sec) ||

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#479: FILE: arch/sparc64/kernel/sys_sparc32.c:4279:
+	    __put_user (cur_setting.it_value.tv_nsec, &setting->it_value.tv_nsec))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#480: FILE: arch/sparc64/kernel/sys_sparc32.c:4280:
+^I^Ireturn -EFAULT;^I^I    $

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#493: FILE: arch/sparc64/kernel/sys_sparc32.c:4293:
+	if (!timr) return -EINVAL;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!new_setting"
#495: FILE: arch/sparc64/kernel/sys_sparc32.c:4295:
+	if (new_setting == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#500: FILE: arch/sparc64/kernel/sys_sparc32.c:4300:
+	if (get_user (new_spec.it_interval.tv_sec, &new_setting->it_interval.tv_sec) ||

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#501: FILE: arch/sparc64/kernel/sys_sparc32.c:4301:
+	    __get_user (new_spec.it_interval.tv_nsec, &new_setting->it_interval.tv_nsec) ||

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#502: FILE: arch/sparc64/kernel/sys_sparc32.c:4302:
+	    __get_user (new_spec.it_value.tv_sec, &new_setting->it_value.tv_sec) ||

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#503: FILE: arch/sparc64/kernel/sys_sparc32.c:4303:
+	    __get_user (new_spec.it_value.tv_nsec, &new_setting->it_value.tv_nsec)) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#518: FILE: arch/sparc64/kernel/sys_sparc32.c:4318:
+		if (put_user (old_spec.it_interval.tv_sec, &old_setting->it_interval.tv_sec) ||

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#519: FILE: arch/sparc64/kernel/sys_sparc32.c:4319:
+		    __put_user (old_spec.it_interval.tv_nsec, &old_setting->it_interval.tv_nsec) ||

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#520: FILE: arch/sparc64/kernel/sys_sparc32.c:4320:
+		    __put_user (old_spec.it_value.tv_sec, &old_setting->it_value.tv_sec) ||

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#521: FILE: arch/sparc64/kernel/sys_sparc32.c:4321:
+		    __put_user (old_spec.it_value.tv_nsec, &old_setting->it_value.tv_nsec))

WARNING:LONG_LINE: line length of 114 exceeds 100 columns
#540: FILE: arch/sparc64/kernel/systbls.S:56:
+/*170*/	.word sys32_timer_settime, sys32_timer_gettime, sys32_timer_getoverrun, sys32_timer_delete, sys32_getdents

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#551: FILE: arch/sparc64/kernel/systbls.S:115:
+/*170*/	.word sys_timer_settime, sys_timer_gettime, sys_timer_getoverrun, sys_timer_delete, sys_getdents

WARNING:NEW_TYPEDEFS: do not add new typedefs
#575: FILE: include/asm-alpha/posix_types.h:26:
+typedef int		__kernel_timer_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#576: FILE: include/asm-alpha/posix_types.h:27:
+typedef int		__kernel_clockid_t;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#609: FILE: include/asm-alpha/siginfo.h:90:
+#define __SI_CODE(T,N)	((T) | ((N) & 0xffff))
                    ^

WARNING:NEW_TYPEDEFS: do not add new typedefs
#637: FILE: include/asm-arm/posix_types.h:37:
+typedef int			__kernel_timer_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#638: FILE: include/asm-arm/posix_types.h:38:
+typedef int			__kernel_clockid_t;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#671: FILE: include/asm-arm/siginfo.h:90:
+#define __SI_CODE(T,N)	((T) | ((N) & 0xffff))
                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#683: FILE: include/asm-arm/unistd.h:227:
+#define __NR_timer_create		(__NR_SYSCALL_BASE+218)
                          		                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#684: FILE: include/asm-arm/unistd.h:228:
+#define __NR_timer_settime		(__NR_SYSCALL_BASE+219)
                           		                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#685: FILE: include/asm-arm/unistd.h:229:
+#define __NR_timer_gettime		(__NR_SYSCALL_BASE+220)
                           		                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#686: FILE: include/asm-arm/unistd.h:230:
+#define __NR_timer_getoverrun		(__NR_SYSCALL_BASE+221)
                              		                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#687: FILE: include/asm-arm/unistd.h:231:
+#define __NR_timer_delete		(__NR_SYSCALL_BASE+222)
                          		                  ^

WARNING:NEW_TYPEDEFS: do not add new typedefs
#699: FILE: include/asm-i386/posix_types.h:25:
+typedef int		__kernel_timer_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#700: FILE: include/asm-i386/posix_types.h:26:
+typedef int		__kernel_clockid_t;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#733: FILE: include/asm-i386/siginfo.h:90:
+#define __SI_CODE(T,N)	((T) | ((N) & 0xffff))
                    ^

WARNING:NEW_TYPEDEFS: do not add new typedefs
#761: FILE: include/asm-ia64/posix_types.h:29:
+typedef int             __kernel_timer_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#762: FILE: include/asm-ia64/posix_types.h:30:
+typedef int             __kernel_clockid_t;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#795: FILE: include/asm-ia64/siginfo.h:103:
+#define __SI_CODE(T,N)	((T) | ((N) & 0xffff))
                    ^

WARNING:NEW_TYPEDEFS: do not add new typedefs
#823: FILE: include/asm-m68k/posix_types.h:25:
+typedef int		__kernel_timer_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#824: FILE: include/asm-m68k/posix_types.h:26:
+typedef int		__kernel_clockid_t;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#857: FILE: include/asm-m68k/siginfo.h:100:
+#define __SI_CODE(T,N)	((T) | ((N) & 0xffff))
                    ^

WARNING:NEW_TYPEDEFS: do not add new typedefs
#885: FILE: include/asm-mips/posix_types.h:35:
+typedef int		__kernel_timer_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#886: FILE: include/asm-mips/posix_types.h:36:
+typedef int		__kernel_clockid_t;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#919: FILE: include/asm-mips/siginfo.h:110:
+#define __SI_CODE(T,N)	((T) | ((N) & 0xffff))
                    ^

CHECK:CAMELCASE: Avoid CamelCase: <__NR_Linux>
#931: FILE: include/asm-mips/unistd.h:1209:
+#define __NR_timer_create		(__NR_Linux + 220)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <__NR_Linux_syscalls>
#941: FILE: include/asm-mips/unistd.h:1218:
+#define __NR_Linux_syscalls		224

ERROR:SPACING: space required after that ',' (ctx:VxV)
#974: FILE: include/asm-mips64/siginfo.h:110:
+#define __SI_CODE(T,N)	((T) | ((N) & 0xffff))
                    ^

WARNING:NEW_TYPEDEFS: do not add new typedefs
#986: FILE: include/asm-ppc/posix_types.h:24:
+typedef int		__kernel_timer_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#987: FILE: include/asm-ppc/posix_types.h:25:
+typedef int		__kernel_clockid_t;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1020: FILE: include/asm-ppc/siginfo.h:88:
+#define __SI_CODE(T,N)	((T) | ((N) & 0xffff))
                    ^

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1089: FILE: include/asm-sh/posix_types.h:27:
+typedef int		__kernel_timer_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1090: FILE: include/asm-sh/posix_types.h:28:
+typedef int		__kernel_clockid_t;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1123: FILE: include/asm-sh/siginfo.h:90:
+#define __SI_CODE(T,N)	((T) | ((N) & 0xffff))
                    ^

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1135: FILE: include/asm-sparc/posix_types.h:16:
+typedef int		       __kernel_timer_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1136: FILE: include/asm-sparc/posix_types.h:17:
+typedef int		       __kernel_clockid_t;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1169: FILE: include/asm-sparc/siginfo.h:94:
+#define __SI_CODE(T,N)	((T) | ((N) & 0xffff))
                    ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1212: FILE: include/asm-sparc/unistd.h:275:
+/* Please don't add syscalls above 255.
+   Contact jj@ultra.linux.cz or davem@redhat.com for number assignment.  */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1212: FILE: include/asm-sparc/unistd.h:275:
+   Contact jj@ultra.linux.cz or davem@redhat.com for number assignment.  */

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1224: FILE: include/asm-sparc64/posix_types.h:15:
+typedef int		       __kernel_timer_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1225: FILE: include/asm-sparc64/posix_types.h:16:
+typedef int		       __kernel_clockid_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1233: FILE: include/asm-sparc64/posix_types.h:72:
+typedef int		       __kernel_timer_t32;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1234: FILE: include/asm-sparc64/posix_types.h:73:
+typedef int		       __kernel_clockid_t32;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1261: FILE: include/asm-sparc64/siginfo.h:94:
+			timer_t32 _tid;			/* timer id */
+			int _pad			/* padding */

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1279: FILE: include/asm-sparc64/siginfo.h:155:
+#define __SI_CODE(T,N)	((T) | ((N) & 0xffff))
                    ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1322: FILE: include/asm-sparc64/unistd.h:277:
+/* Please don't add syscalls above 255.
+   Contact jj@ultra.linux.cz or davem@redhat.com for number assignment.  */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1322: FILE: include/asm-sparc64/unistd.h:277:
+   Contact jj@ultra.linux.cz or davem@redhat.com for number assignment.  */

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#1358: FILE: include/linux/sched.h:280:
+	spinlock_t it_lock;

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#1372: FILE: include/linux/sched.h:294:
+	spinlock_t its_lock;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1373: FILE: include/linux/sched.h:295:
+^Istruct k_itimer *itimer[TIMER_MAX];^I$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1376: FILE: include/linux/sched.h:298:
+extern struct itimer_struct *itimer_struct_new(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1377: FILE: include/linux/sched.h:299:
+extern void itimer_struct_delete(struct itimer_struct *timers);

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1394: FILE: include/linux/sched.h:487:
+    posix_timers:	NULL,						\
                 ^

WARNING:INDENTED_LABEL: labels should not be indented
#1394: FILE: include/linux/sched.h:487:
+    posix_timers:	NULL,						\

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1402: FILE: include/linux/sched.h:766:
+extern void exit_itimers(struct task_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#1402: FILE: include/linux/sched.h:766:
+extern void exit_itimers(struct task_struct *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1463: FILE: include/linux/time.h:144:
+
+

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1485: FILE: include/linux/types.h:23:
+typedef __kernel_timer_t	timer_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1486: FILE: include/linux/types.h:24:
+typedef __kernel_clockid_t	clockid_t;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1532: FILE: kernel/fork.c:546:
 
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1533: FILE: kernel/fork.c:547:
+static inline int copy_itimers(unsigned long clone_flags, struct task_struct * tsk)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tsk->posix_timers"
#1536: FILE: kernel/fork.c:550:
+		if (tsk->posix_timers == NULL) {

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1538: FILE: kernel/fork.c:552:
+			if (tsk->posix_timers == NULL) return -1;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tsk->posix_timers"
#1538: FILE: kernel/fork.c:552:
+			if (tsk->posix_timers == NULL) return -1;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1548: FILE: kernel/fork.c:562:
+
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1611: FILE: kernel/itimer.c:183:
+	if (timr->it_signal.sigev_notify == SIGEV_SIGNAL) {
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1629: FILE: kernel/itimer.c:201:
+			printk(KERN_WARNING "sending signal failed: %d\n", ret);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1635: FILE: kernel/itimer.c:207:
+/* $

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1646: FILE: kernel/itimer.c:218:
+	if ((interval = timr->it_incr) == 0) return;

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1646: FILE: kernel/itimer.c:218:
+	if ((interval = timr->it_incr) == 0) return;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1647: FILE: kernel/itimer.c:219:
+^I^I$

CHECK:SPACING: No space is necessary after a cast
#1648: FILE: kernel/itimer.c:220:
+	if (interval > (unsigned long) LONG_MAX)

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1673: FILE: kernel/itimer.c:245:
+		if (timers->itimer[i] == NULL) return i;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!timers->itimer[i]"
#1673: FILE: kernel/itimer.c:245:
+		if (timers->itimer[i] == NULL) return i;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sigev->sigev_signo <= 0'
#1684: FILE: kernel/itimer.c:256:
+		if ((sigev->sigev_signo <= 0) ||
+		    (sigev->sigev_signo > SIGRTMAX))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sigev->sigev_signo > SIGRTMAX'
#1684: FILE: kernel/itimer.c:256:
+		if ((sigev->sigev_signo <= 0) ||
+		    (sigev->sigev_signo > SIGRTMAX))

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*posix_timers)...) over kmalloc(sizeof(struct itimer_struct)...)
#1698: FILE: kernel/itimer.c:270:
+	posix_timers = kmalloc(sizeof(struct itimer_struct), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1699: FILE: kernel/itimer.c:271:
+	if (posix_timers == NULL) return NULL;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!posix_timers"
#1699: FILE: kernel/itimer.c:271:
+	if (posix_timers == NULL) return NULL;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1723: FILE: kernel/itimer.c:295:
+
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!timers"
#1736: FILE: kernel/itimer.c:308:
+	if (timers == NULL) {

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1737: FILE: kernel/itimer.c:309:
+		timers = current->posix_timers = itimer_struct_new();

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1738: FILE: kernel/itimer.c:310:
+		if (timers == NULL) return -EAGAIN;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!timers"
#1738: FILE: kernel/itimer.c:310:
+		if (timers == NULL) return -EAGAIN;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1742: FILE: kernel/itimer.c:314:
+	if (which_clock != CLOCK_REALTIME) return -EINVAL;

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#1744: FILE: kernel/itimer.c:316:
+	new_timer = (struct k_itimer *)kmalloc(sizeof(*new_timer), GFP_KERNEL);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1745: FILE: kernel/itimer.c:317:
+	if (new_timer == NULL) return -EAGAIN;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!new_timer"
#1745: FILE: kernel/itimer.c:317:
+	if (new_timer == NULL) return -EAGAIN;

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1763: FILE: kernel/itimer.c:335:
+	}
+	else {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#1763: FILE: kernel/itimer.c:335:
+	else {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1786: FILE: kernel/itimer.c:358:
+	if (timer_event_spec == NULL) {
+		new_timer->it_signal.sigev_value.sival_int = new_timer_id;
+	}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!timer_event_spec"
#1786: FILE: kernel/itimer.c:358:
+	if (timer_event_spec == NULL) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1798: FILE: kernel/itimer.c:370:
+	if (error) {
+		kfree(new_timer);
+	}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1804: FILE: kernel/itimer.c:376:
+
+

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1820: FILE: kernel/itimer.c:392:
+	if (ts == NULL) return 0;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ts"
#1820: FILE: kernel/itimer.c:392:
+	if (ts == NULL) return 0;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1821: FILE: kernel/itimer.c:393:
+	if (ts->tv_sec < 0) return 0;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ts->tv_nsec < 0'
#1822: FILE: kernel/itimer.c:394:
+	if ((ts->tv_nsec < 0) || (ts->tv_nsec >= NSEC_PER_SEC)) return 0;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ts->tv_nsec >= NSEC_PER_SEC'
#1822: FILE: kernel/itimer.c:394:
+	if ((ts->tv_nsec < 0) || (ts->tv_nsec >= NSEC_PER_SEC)) return 0;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1822: FILE: kernel/itimer.c:394:
+	if ((ts->tv_nsec < 0) || (ts->tv_nsec >= NSEC_PER_SEC)) return 0;

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1826: FILE: kernel/itimer.c:398:
+inline struct k_itimer* lock_timer(struct task_struct *tsk, timer_t timer_id)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'timer_id < 0'
#1830: FILE: kernel/itimer.c:402:
+	if ((timer_id < 0) || (timer_id >= TIMER_MAX)) return NULL;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'timer_id >= TIMER_MAX'
#1830: FILE: kernel/itimer.c:402:
+	if ((timer_id < 0) || (timer_id >= TIMER_MAX)) return NULL;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1830: FILE: kernel/itimer.c:402:
+	if ((timer_id < 0) || (timer_id >= TIMER_MAX)) return NULL;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1831: FILE: kernel/itimer.c:403:
+	if (tsk->posix_timers == NULL) return NULL;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tsk->posix_timers"
#1831: FILE: kernel/itimer.c:403:
+	if (tsk->posix_timers == NULL) return NULL;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1834: FILE: kernel/itimer.c:406:
+	if (timr) spin_lock(&timr->it_lock);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1850: FILE: kernel/itimer.c:422:
+	if (expires) expires -= jiffies;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1851: FILE: kernel/itimer.c:423:
+^I$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1863: FILE: kernel/itimer.c:435:
+	if (!timr) return -EINVAL;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1868: FILE: kernel/itimer.c:440:
+^I$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1882: FILE: kernel/itimer.c:454:
+	if (!timr) return -EINVAL;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1885: FILE: kernel/itimer.c:457:
+^I$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'val->tv_sec < ts.tv_sec'
#1901: FILE: kernel/itimer.c:473:
+	if ((val->tv_sec < ts.tv_sec) ||
+	    ((val->tv_sec == ts.tv_sec) &&
+	     (val->tv_nsec <= ts.tv_nsec))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'val->tv_sec == ts.tv_sec'
#1901: FILE: kernel/itimer.c:473:
+	if ((val->tv_sec < ts.tv_sec) ||
+	    ((val->tv_sec == ts.tv_sec) &&
+	     (val->tv_nsec <= ts.tv_nsec))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'val->tv_nsec <= ts.tv_nsec'
#1901: FILE: kernel/itimer.c:473:
+	if ((val->tv_sec < ts.tv_sec) ||
+	    ((val->tv_sec == ts.tv_sec) &&
+	     (val->tv_nsec <= ts.tv_nsec))) {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1908: FILE: kernel/itimer.c:480:
+	}
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#1908: FILE: kernel/itimer.c:480:
+	else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1921: FILE: kernel/itimer.c:493:
+static void do_timer_settime(struct k_itimer *timr, int flags,
+		      struct itimerspec *new_setting,

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1927: FILE: kernel/itimer.c:499:
+	if (old_setting) {
+		do_timer_gettime(timr, old_setting);
+	}

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'new_setting->it_value.tv_sec == 0'
#1932: FILE: kernel/itimer.c:504:
+	if ((new_setting->it_value.tv_sec == 0) &&
+	    (new_setting->it_value.tv_nsec == 0)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'new_setting->it_value.tv_nsec == 0'
#1932: FILE: kernel/itimer.c:504:
+	if ((new_setting->it_value.tv_sec == 0) &&
+	    (new_setting->it_value.tv_nsec == 0)) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1945: FILE: kernel/itimer.c:517:
+	if (flags & TIMER_ABSTIME) {
+		timer_value_abs_to_rel(&new_setting->it_value);
+	}

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#1955: FILE: kernel/itimer.c:527:
+	if (timr->it_timer.expires == jiffies) {
[...]
+	else {
[...]

WARNING:JIFFIES_COMPARISON: Comparing jiffies is almost always wrong; prefer time_after, time_before and friends
#1955: FILE: kernel/itimer.c:527:
+	if (timr->it_timer.expires == jiffies) {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1958: FILE: kernel/itimer.c:530:
+	}
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#1958: FILE: kernel/itimer.c:530:
+	else {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1963: FILE: kernel/itimer.c:535:
+
+

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1974: FILE: kernel/itimer.c:546:
+	if (!timr) return -EINVAL;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!new_setting"
#1976: FILE: kernel/itimer.c:548:
+	if (new_setting == NULL) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1996: FILE: kernel/itimer.c:568:
+		if (copy_to_user(old_setting, &old_spec, sizeof(old_spec))) {
+			error = -EFAULT;
+		}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2006: FILE: kernel/itimer.c:578:
+
+

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#2013: FILE: kernel/itimer.c:585:
+	if (!timr) return -EINVAL;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2044: FILE: kernel/signal.c:542:
+^I/* In case of a POSIX timer generated signal you must check $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2045: FILE: kernel/signal.c:543:
+	/* In case of a POSIX timer generated signal you must check 
+	   if a signal from this timer is already in the queue.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2047: FILE: kernel/signal.c:545:
+	   itimer.c:posix_timer_fn(). */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'info->si_code == SI_TIMER'
#2049: FILE: kernel/signal.c:547:
+	if (((unsigned long)info > 1) && (info->si_code == SI_TIMER)) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#2051: FILE: kernel/signal.c:549:
+		struct sigqueue *q;
+		for (q = t->pending.head; q; q = q->next) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'q->info.si_code == SI_TIMER'
#2052: FILE: kernel/signal.c:550:
+			if ((q->info.si_code == SI_TIMER) &&
+			    (q->info.si_tid == info->si_tid)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'q->info.si_tid == info->si_tid'
#2052: FILE: kernel/signal.c:550:
+			if ((q->info.si_code == SI_TIMER) &&
+			    (q->info.si_tid == info->si_tid)) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2055: FILE: kernel/signal.c:553:
+				/* this special value (1) is recognized
+				   only by posix_timer_fn() in itimer.c */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2055: FILE: kernel/signal.c:553:
+				   only by posix_timer_fn() in itimer.c */

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000553967.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 51 errors, 90 warnings, 57 checks, 1623 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000553967.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
