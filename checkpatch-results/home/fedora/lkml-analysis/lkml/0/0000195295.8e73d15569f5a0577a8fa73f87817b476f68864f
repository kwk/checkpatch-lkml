WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#34: 
Content-Disposition: attachment; filename=crashdump-elf-format-dump-file-access.patch

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#84: FILE: fs/Kconfig:782:
+config PROC_VMCORE
+        bool "/proc/vmcore support (EXPERIMENTAL)"
+        depends on PROC_FS && EMBEDDED && EXPERIMENTAL && CRASH_DUMP
+        help
+        Exports the dump image of crashed kernel in ELF format.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR' are not preferred. Consider using octal permissions '0400'.
#118: FILE: fs/proc/proc_misc.c:665:
+	proc_vmcore = create_proc_entry("vmcore", S_IRUSR, NULL);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#129: FILE: fs/proc/vmcore.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#130: FILE: fs/proc/vmcore.c:2:
+ *	fs/proc/vmcore.c Interface for accessing the crash

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#131: FILE: fs/proc/vmcore.c:3:
+ * ^I^I^I^I dump from the system's previous life.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#132: FILE: fs/proc/vmcore.c:4:
+ * ^IHeavily borrowed from fs/proc/kcore.c$

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#151: FILE: fs/proc/vmcore.c:23:
+#include <asm/uaccess.h>

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#152: FILE: fs/proc/vmcore.c:24:
+#include <asm/io.h>

ERROR:GLOBAL_INITIALISERS: do not initialise globals to NULL
#166: FILE: fs/proc/vmcore.c:38:
+struct proc_dir_entry *proc_vmcore = NULL;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#170: FILE: fs/proc/vmcore.c:42:
+static ssize_t read_from_oldmem(char *buf, size_t count,
+			     loff_t *ppos, int userbuf)

WARNING:TYPO_SPELLING: 'memroy' may be misspelled - perhaps 'memory'?
#204: FILE: fs/proc/vmcore.c:76:
+/* Maps vmcore file offset to respective physical address in memroy. */
                                                              ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#206: FILE: fs/proc/vmcore.c:78:
+static u64 map_offset_to_paddr(loff_t offset, struct list_head *vc_list,
+					struct vmcore **m_ptr)

WARNING:LINE_SPACING: Missing a blank line after declarations
#213: FILE: fs/proc/vmcore.c:85:
+		u64 start, end;
+		start = m->offset;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#229: FILE: fs/proc/vmcore.c:101:
+static ssize_t read_vmcore(struct file *file, char __user *buffer,
+				size_t buflen, loff_t *fpos)

ERROR:CODE_INDENT: code indent should use tabs where possible
#262: FILE: fs/proc/vmcore.c:134:
+        ^Ireturn -EINVAL;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#262: FILE: fs/proc/vmcore.c:134:
+        ^Ireturn -EINVAL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#262: FILE: fs/proc/vmcore.c:134:
+        ^Ireturn -EINVAL;$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#263: FILE: fs/proc/vmcore.c:135:
+	if ((tsz = (PAGE_SIZE - (start & ~PAGE_MASK))) > buflen)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#283: FILE: fs/proc/vmcore.c:155:
+			curr_m = list_entry(curr_m->list.next,
+						struct vmcore, list);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#286: FILE: fs/proc/vmcore.c:158:
+		if ((tsz = (PAGE_SIZE - (start & ~PAGE_MASK))) > buflen)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#296: FILE: fs/proc/vmcore.c:168:
+static int open_vmcore(struct inode *inode, struct file *filp)
                                                          ^^^^

WARNING:CONST_STRUCT: struct file_operations should normally be const
#301: FILE: fs/proc/vmcore.c:173:
+struct file_operations proc_vmcore_operations = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

ERROR:POINTER_LOCATION: "foo* __init bar" should be "foo * __init bar"
#306: FILE: fs/proc/vmcore.c:178:
+static struct vmcore* __init get_new_element(void)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <Elf64_Ehdr>
#320: FILE: fs/proc/vmcore.c:192:
+	Elf64_Ehdr *ehdr_ptr;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Elf64_Phdr>
#321: FILE: fs/proc/vmcore.c:193:
+	Elf64_Phdr *phdr_ptr;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#324: FILE: fs/proc/vmcore.c:196:
+	phdr_ptr = (Elf64_Phdr*)(elfptr + sizeof(Elf64_Ehdr));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#335: FILE: fs/proc/vmcore.c:207:
+static int __init merge_note_headers_elf64(char *elfptr, size_t *elfsz,
+						struct list_head *vc_list)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#337: FILE: fs/proc/vmcore.c:209:
+	int i, nr_ptnote=0, rc=0;
 	                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#337: FILE: fs/proc/vmcore.c:209:
+	int i, nr_ptnote=0, rc=0;
 	                      ^

CHECK:CAMELCASE: Avoid CamelCase: <Elf64_Nhdr>
#341: FILE: fs/proc/vmcore.c:213:
+	Elf64_Nhdr *nhdr_ptr;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#345: FILE: fs/proc/vmcore.c:217:
+	phdr_ptr = (Elf64_Phdr*)(elfptr + sizeof(Elf64_Ehdr));

WARNING:LINE_SPACING: Missing a blank line after declarations
#351: FILE: fs/proc/vmcore.c:223:
+		u64 offset, max_sz, sz, real_sz = 0;
+		if (phdr_ptr->p_type != PT_NOTE)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#372: FILE: fs/proc/vmcore.c:244:
+			nhdr_ptr = (Elf64_Nhdr*)((char*)nhdr_ptr + sz);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#372: FILE: fs/proc/vmcore.c:244:
+			nhdr_ptr = (Elf64_Nhdr*)((char*)nhdr_ptr + sz);

CHECK:SPACING: spaces preferred around that '+' (ctx:WxV)
#392: FILE: fs/proc/vmcore.c:264:
+			(ehdr_ptr->e_phnum - nr_ptnote +1) * sizeof(Elf64_Phdr);
 			                               ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#394: FILE: fs/proc/vmcore.c:266:
+	phdr.p_vaddr   = phdr.p_paddr = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#395: FILE: fs/proc/vmcore.c:267:
+	phdr.p_filesz  = phdr.p_memsz = phdr_sz;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#406: FILE: fs/proc/vmcore.c:278:
+	memmove(tmp, tmp+i, ((*elfsz)-sizeof(Elf64_Ehdr)-sizeof(Elf64_Phdr)));
 	                ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#406: FILE: fs/proc/vmcore.c:278:
+	memmove(tmp, tmp+i, ((*elfsz)-sizeof(Elf64_Ehdr)-sizeof(Elf64_Phdr)));
 	                             ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#406: FILE: fs/proc/vmcore.c:278:
+	memmove(tmp, tmp+i, ((*elfsz)-sizeof(Elf64_Ehdr)-sizeof(Elf64_Phdr)));
 	                                                ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#415: FILE: fs/proc/vmcore.c:287:
+ * the new offset fields of exported program headers. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#417: FILE: fs/proc/vmcore.c:289:
+static int __init process_ptload_program_headers_elf64(char *elfptr,
+						size_t elfsz,

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#427: FILE: fs/proc/vmcore.c:299:
+	phdr_ptr = (Elf64_Phdr*)(elfptr + sizeof(Elf64_Ehdr)); /* PT_NOTE hdr */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#455: FILE: fs/proc/vmcore.c:327:
+static void __init set_vmcore_list_offsets_elf64(char *elfptr,
+						struct list_head *vc_list)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#475: FILE: fs/proc/vmcore.c:347:
+	int rc=0;
 	      ^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#482: FILE: fs/proc/vmcore.c:354:
+	rc = read_from_oldmem((char*)&ehdr, sizeof(Elf64_Ehdr), &addr, 0);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ehdr.e_type != ET_CORE'
#487: FILE: fs/proc/vmcore.c:359:
+	if (memcmp(ehdr.e_ident, ELFMAG, SELFMAG) != 0 ||
+		(ehdr.e_type != ET_CORE) ||
+		!elf_check_arch(&ehdr) ||
+		ehdr.e_ident[EI_CLASS] != ELFCLASS64 ||
+		ehdr.e_ident[EI_VERSION] != EV_CURRENT ||
+		ehdr.e_version != EV_CURRENT ||
+		ehdr.e_ehsize != sizeof(Elf64_Ehdr) ||
+		ehdr.e_phentsize != sizeof(Elf64_Phdr) ||
+		ehdr.e_phnum == 0) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#488: FILE: fs/proc/vmcore.c:360:
+	if (memcmp(ehdr.e_ident, ELFMAG, SELFMAG) != 0 ||
+		(ehdr.e_type != ET_CORE) ||

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#496: FILE: fs/proc/vmcore.c:368:
+		printk(KERN_WARNING "Warning: Core image elf header is not"

WARNING:SPLIT_STRING: quoted string split across lines
#497: FILE: fs/proc/vmcore.c:369:
+		printk(KERN_WARNING "Warning: Core image elf header is not"
+					"sane\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:MISSING_SPACE: break quoted strings at a space character
#497: FILE: fs/proc/vmcore.c:369:
+		printk(KERN_WARNING "Warning: Core image elf header is not"
+					"sane\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#520: FILE: fs/proc/vmcore.c:392:
+	rc = process_ptload_program_headers_elf64(elfcorebuf, elfcorebuf_sz,
+							&vmcore_list);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#533: FILE: fs/proc/vmcore.c:405:
+	int rc=0;
 	      ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#540: FILE: fs/proc/vmcore.c:412:
+		printk(KERN_WARNING "Warning: Core image elf header"

WARNING:SPLIT_STRING: quoted string split across lines
#541: FILE: fs/proc/vmcore.c:413:
+		printk(KERN_WARNING "Warning: Core image elf header"
+					" not found\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#553: FILE: fs/proc/vmcore.c:425:
+		printk(KERN_WARNING "Warning: Core image elf header is not"

WARNING:SPLIT_STRING: quoted string split across lines
#554: FILE: fs/proc/vmcore.c:426:
+		printk(KERN_WARNING "Warning: Core image elf header is not"
+					" sane\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#570: FILE: fs/proc/vmcore.c:442:
+		printk(KERN_WARNING "Kdump: vmcore not initialized\n");

WARNING:CONST_STRUCT: struct file_operations should normally be const
#591: FILE: include/linux/crash_dump.h:14:
+extern struct file_operations proc_vmcore_operations;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000195295.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 15 errors, 26 warnings, 19 checks, 519 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000195295.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
