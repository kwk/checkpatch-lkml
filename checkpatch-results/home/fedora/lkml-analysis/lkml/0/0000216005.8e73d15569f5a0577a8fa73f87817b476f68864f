CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'raw_inode' may be better as '(raw_inode)' to avoid precedence issues
#100: FILE: fs/ext3/xattr.c:69:
+#define IHDR(inode, raw_inode) \
+	((struct ext3_xattr_ibody_header *) \
+		((void *)raw_inode + \
+		 EXT3_GOOD_OLD_INODE_SIZE + \
+		 EXT3_I(inode)->i_extra_isize))

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#105: FILE: fs/ext3/xattr.c:74:
+#define IFIRST(hdr) ((struct ext3_xattr_entry *)((hdr)+1))
                                                       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#393: FILE: fs/ext3/xattr.c:648:
+		ea_bdebug(bs->bh, "b_count=%d, refcount=%d",
+			atomic_read(&(bs->bh->b_count)),

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around bs->bh->b_count
#393: FILE: fs/ext3/xattr.c:648:
+			atomic_read(&(bs->bh->b_count)),

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#396: FILE: fs/ext3/xattr.c:651:
+			ext3_error(sb, __FUNCTION__,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#397: FILE: fs/ext3/xattr.c:652:
+			ext3_error(sb, __FUNCTION__,
 				"inode %ld: bad block %d", inode->i_ino,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!s->base"
#515: FILE: fs/ext3/xattr.c:728:
+			if (s->base == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#523: FILE: fs/ext3/xattr.c:731:
+			s->first = ENTRY(header(s->base)+1);
 			                                ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!s->base"
#536: FILE: fs/ext3/xattr.c:741:
+		if (s->base == NULL)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#548: FILE: fs/ext3/xattr.c:747:
+		s->first = ENTRY(header(s->base)+1);
 		                                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#549: FILE: fs/ext3/xattr.c:748:
+		s->here = ENTRY(header(s->base)+1);
 		                               ^

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#639: FILE: fs/ext3/xattr.c:848:
+	ext3_error(inode->i_sb, __FUNCTION__,

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#664: FILE: fs/ext3/xattr.c:873:
+	is->s.base = is->s.first = IFIRST(header);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#690: FILE: fs/ext3/xattr.c:899:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 25)
#841: FILE: fs/ext3/inode.c:2500:
+		if (le32_to_cpu(*magic))
+			 ei->i_state |= EXT3_STATE_XATTR;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000216005.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 3 warnings, 11 checks, 844 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000216005.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
