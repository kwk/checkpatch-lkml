CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#58: FILE: drivers/pcmcia/pcmcia_ioctl.c:73:
+static struct pcmcia_device *get_pcmcia_device(struct pcmcia_socket *s,
+						unsigned int function)

WARNING:TABSTOP: Statements should start on a tabstop
#99: FILE: drivers/pcmcia/pcmcia_ioctl.c:629:
+	    if (buf->status.Function &&

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (12, 20)
#99: FILE: drivers/pcmcia/pcmcia_ioctl.c:629:
+	    if (buf->status.Function &&
[...]
+		    ret = CS_BAD_ARGS;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'buf->status.Function >= s->functions'
#99: FILE: drivers/pcmcia/pcmcia_ioctl.c:629:
+	    if (buf->status.Function &&
+		(buf->status.Function >= s->functions))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:CAMELCASE: Avoid CamelCase: <Function>
#99: FILE: drivers/pcmcia/pcmcia_ioctl.c:629:
+	    if (buf->status.Function &&

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:TABSTOP: Statements should start on a tabstop
#102: FILE: drivers/pcmcia/pcmcia_ioctl.c:632:
+	    else {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (12, 20)
#102: FILE: drivers/pcmcia/pcmcia_ioctl.c:632:
+	    else {
+		    struct pcmcia_device *p_dev = get_pcmcia_device(s, buf->status.Function);

CHECK:BRACES: Unbalanced braces around else statement
#102: FILE: drivers/pcmcia/pcmcia_ioctl.c:632:
+	    else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:TABSTOP: Statements should start on a tabstop
#103: FILE: drivers/pcmcia/pcmcia_ioctl.c:633:
+		    struct pcmcia_device *p_dev = get_pcmcia_device(s, buf->status.Function);

WARNING:LINE_SPACING: Missing a blank line after declarations
#104: FILE: drivers/pcmcia/pcmcia_ioctl.c:634:
+		    struct pcmcia_device *p_dev = get_pcmcia_device(s, buf->status.Function);
+		    ret = pccard_get_status(s, p_dev, &buf->status);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TABSTOP: Statements should start on a tabstop
#106: FILE: drivers/pcmcia/pcmcia_ioctl.c:636:
+	    }

WARNING:TABSTOP: Statements should start on a tabstop
#107: FILE: drivers/pcmcia/pcmcia_ioctl.c:637:
+	    break;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000116702.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 0 errors, 8 warnings, 4 checks, 58 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000116702.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
