ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#27: 
--- a/drivers/base/interface.c    Wed Aug 14 17:09:28 2002

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#33: FILE: drivers/base/interface.c:91:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#34: FILE: drivers/base/interface.c:92:
+static ssize_t device_read_driver(struct device * dev, char * buf, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#34: FILE: drivers/base/interface.c:92:
+static ssize_t device_read_driver(struct device * dev, char * buf, 

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#34: FILE: drivers/base/interface.c:92:
+static ssize_t device_read_driver(struct device * dev, char * buf, 

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#35: FILE: drivers/base/interface.c:92:
size_t count, loff_t off)

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#36: FILE: drivers/base/interface.c:93:
+static ssize_t device_read_driver(struct device * dev, char * buf, 
+{

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#37: FILE: drivers/base/interface.c:94:
+    if (dev->driver)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#38: FILE: drivers/base/interface.c:95:
+        return off ? 0 : sprintf(buf,"%s\n",dev->driver->name);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#38: FILE: drivers/base/interface.c:95:
+        return off ? 0 : sprintf(buf,"%s\n",dev->driver->name);$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#38: FILE: drivers/base/interface.c:95:
+        return off ? 0 : sprintf(buf,"%s\n",dev->driver->name);
                                     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#38: FILE: drivers/base/interface.c:95:
+        return off ? 0 : sprintf(buf,"%s\n",dev->driver->name);
                                            ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#39: FILE: drivers/base/interface.c:96:
+    else$

ERROR:CODE_INDENT: code indent should use tabs where possible
#40: FILE: drivers/base/interface.c:97:
+        return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#40: FILE: drivers/base/interface.c:97:
+        return 0;$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#43: FILE: drivers/base/interface.c:100:
+static DEVICE_ATTR(driver,"driver",S_IRUGO,device_read_driver,NULL);
                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#43: FILE: drivers/base/interface.c:100:
+static DEVICE_ATTR(driver,"driver",S_IRUGO,device_read_driver,NULL);
                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#43: FILE: drivers/base/interface.c:100:
+static DEVICE_ATTR(driver,"driver",S_IRUGO,device_read_driver,NULL);
                                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#43: FILE: drivers/base/interface.c:100:
+static DEVICE_ATTR(driver,"driver",S_IRUGO,device_read_driver,NULL);
                                                              ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#43: FILE: drivers/base/interface.c:100:
+static DEVICE_ATTR(driver,"driver",S_IRUGO,device_read_driver,NULL);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#48: FILE: drivers/base/interface.c:105:
+    &dev_attr_driver,$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#65: FILE: drivers/base/base.h:29:
+extern int do_driver_detach(struct device * dev, struct device_driver * $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#65: FILE: drivers/base/base.h:29:
+extern int do_driver_detach(struct device * dev, struct device_driver * 

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#65: FILE: drivers/base/base.h:29:
+extern int do_driver_detach(struct device * dev, struct device_driver * 

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#67: FILE: drivers/base/base.h:30:
+extern int do_driver_attach(struct device * dev, void * data);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#67: FILE: drivers/base/base.h:30:
+extern int do_driver_attach(struct device * dev, void * data);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#67: FILE: drivers/base/base.h:30:
+extern int do_driver_attach(struct device * dev, void * data);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#76: FILE: drivers/base/core.c:101:
+    struct device_driver * drv;$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#76: FILE: drivers/base/core.c:101:
+    struct device_driver * drv;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#85: FILE: drivers/base/core.c:120:
+int do_driver_attach(struct device * dev, void * data)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#85: FILE: drivers/base/core.c:120:
+int do_driver_attach(struct device * dev, void * data)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#95: FILE: drivers/base/core.c:137:
+int do_driver_detach(struct device * dev, struct device_driver * drv)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#95: FILE: drivers/base/core.c:137:
+int do_driver_detach(struct device * dev, struct device_driver * drv)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#116: FILE: drivers/base/interface.c:101:
+struct device_driver * find_driver_by_name(struct bus_type * bus, char $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#116: FILE: drivers/base/interface.c:101:
+struct device_driver * find_driver_by_name(struct bus_type * bus, char 

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#116: FILE: drivers/base/interface.c:101:
+struct device_driver * find_driver_by_name(struct bus_type * bus, char 

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#119: FILE: drivers/base/interface.c:103:
+    struct list_head * pos;$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#119: FILE: drivers/base/interface.c:103:
+    struct list_head * pos;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#120: FILE: drivers/base/interface.c:104:
+    struct device_driver * drv;$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#120: FILE: drivers/base/interface.c:104:
+    struct device_driver * drv;

WARNING:LINE_SPACING: Missing a blank line after declarations
#121: FILE: drivers/base/interface.c:105:
+    struct device_driver * drv;
+    list_for_each (pos, &bus->drivers)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#121: FILE: drivers/base/interface.c:105:
+    list_for_each (pos, &bus->drivers)$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#121: FILE: drivers/base/interface.c:105:
+    list_for_each (pos, &bus->drivers)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#122: FILE: drivers/base/interface.c:106:
+    {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#123: FILE: drivers/base/interface.c:107:
+        drv = list_entry(pos, struct device_driver, bus_list);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#123: FILE: drivers/base/interface.c:107:
+        drv = list_entry(pos, struct device_driver, bus_list);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#124: FILE: drivers/base/interface.c:108:
+        if (!strncmp(drv->name,name,strlen(name) - 1))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#124: FILE: drivers/base/interface.c:108:
+        if (!strncmp(drv->name,name,strlen(name) - 1))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#124: FILE: drivers/base/interface.c:108:
+        if (!strncmp(drv->name,name,strlen(name) - 1))
+            return drv;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#124: FILE: drivers/base/interface.c:108:
+        if (!strncmp(drv->name,name,strlen(name) - 1))
                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#124: FILE: drivers/base/interface.c:108:
+        if (!strncmp(drv->name,name,strlen(name) - 1))
                                    ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#125: FILE: drivers/base/interface.c:109:
+            return drv;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#125: FILE: drivers/base/interface.c:109:
+            return drv;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#127: FILE: drivers/base/interface.c:111:
+    }$

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#127: FILE: drivers/base/interface.c:111:
+
+    }

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#128: FILE: drivers/base/interface.c:112:
+    return NULL;$

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#130: FILE: drivers/base/interface.c:114:
+
+}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#132: FILE: drivers/base/interface.c:116:
+static ssize_t device_write_driver(struct device * dev, char * buf, $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#132: FILE: drivers/base/interface.c:116:
+static ssize_t device_write_driver(struct device * dev, char * buf, 

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#132: FILE: drivers/base/interface.c:116:
+static ssize_t device_write_driver(struct device * dev, char * buf, 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#134: FILE: drivers/base/interface.c:117:
+static ssize_t device_write_driver(struct device * dev, char * buf, 
+{

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#135: FILE: drivers/base/interface.c:118:
+    struct device_driver * drv = NULL;$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#135: FILE: drivers/base/interface.c:118:
+    struct device_driver * drv = NULL;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#136: FILE: drivers/base/interface.c:119:
+    int error = 0;$

WARNING:LINE_SPACING: Missing a blank line after declarations
#137: FILE: drivers/base/interface.c:120:
+    int error = 0;
+    if (off)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#137: FILE: drivers/base/interface.c:120:
+    if (off)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#138: FILE: drivers/base/interface.c:121:
+        return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#138: FILE: drivers/base/interface.c:121:
+        return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#139: FILE: drivers/base/interface.c:122:
+    if (!dev->bus)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#140: FILE: drivers/base/interface.c:123:
+        return count;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#140: FILE: drivers/base/interface.c:123:
+        return count;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#141: FILE: drivers/base/interface.c:124:
+    if (!dev->driver)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#141: FILE: drivers/base/interface.c:124:
+    if (!dev->driver)
+    {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#142: FILE: drivers/base/interface.c:125:
+    {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#143: FILE: drivers/base/interface.c:126:
+        drv = find_driver_by_name(dev->bus, buf);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#143: FILE: drivers/base/interface.c:126:
+        drv = find_driver_by_name(dev->bus, buf);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#144: FILE: drivers/base/interface.c:127:
+        if (drv)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#144: FILE: drivers/base/interface.c:127:
+        if (drv)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#144: FILE: drivers/base/interface.c:127:
+        if (drv)
+            error = do_driver_attach(dev,drv);

ERROR:CODE_INDENT: code indent should use tabs where possible
#145: FILE: drivers/base/interface.c:128:
+            error = do_driver_attach(dev,drv);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#145: FILE: drivers/base/interface.c:128:
+            error = do_driver_attach(dev,drv);$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#145: FILE: drivers/base/interface.c:128:
+            error = do_driver_attach(dev,drv);
                                         ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#147: FILE: drivers/base/interface.c:130:
+    } else if (!strnicmp(buf,"remove",6))$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#147: FILE: drivers/base/interface.c:130:
+    } else if (!strnicmp(buf,"remove",6))
+    {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#147: FILE: drivers/base/interface.c:130:
+    } else if (!strnicmp(buf,"remove",6))
                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#147: FILE: drivers/base/interface.c:130:
+    } else if (!strnicmp(buf,"remove",6))
                                      ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#148: FILE: drivers/base/interface.c:131:
+    {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#149: FILE: drivers/base/interface.c:132:
+        error = do_driver_detach(dev, dev->driver);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#149: FILE: drivers/base/interface.c:132:
+        error = do_driver_detach(dev, dev->driver);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#150: FILE: drivers/base/interface.c:133:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#151: FILE: drivers/base/interface.c:134:
+    return error < 0 ? error : count;$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#154: FILE: drivers/base/interface.c:137:
+static DEVICE_ATTR(driver,"driver",S_IWUSR | S_IRUGO,
                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#154: FILE: drivers/base/interface.c:137:
+static DEVICE_ATTR(driver,"driver",S_IWUSR | S_IRUGO,
                                   ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR | S_IRUGO' are not preferred. Consider using octal permissions '0644'.
#154: FILE: drivers/base/interface.c:137:
+static DEVICE_ATTR(driver,"driver",S_IWUSR | S_IRUGO,

ERROR:CODE_INDENT: code indent should use tabs where possible
#155: FILE: drivers/base/interface.c:138:
+           device_read_driver,device_write_driver);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#155: FILE: drivers/base/interface.c:138:
+           device_read_driver,device_write_driver);$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#155: FILE: drivers/base/interface.c:138:
+           device_read_driver,device_write_driver);
                              ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000438872.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 51 errors, 39 warnings, 7 checks, 107 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000438872.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
