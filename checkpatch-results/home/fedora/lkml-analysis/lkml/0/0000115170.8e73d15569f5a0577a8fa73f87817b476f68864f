ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#52: FILE: arch/um/include/os.h:260:
+extern long run_syscall_stub(struct mm_id * mm_idp,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#52: FILE: arch/um/include/os.h:260:
+extern long run_syscall_stub(struct mm_id * mm_idp,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#55: FILE: arch/um/include/os.h:263:
+extern long syscall_stub_data(struct mm_id * mm_idp,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#55: FILE: arch/um/include/os.h:263:
+extern long syscall_stub_data(struct mm_id * mm_idp,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#58: FILE: arch/um/include/os.h:266:
+extern int map(struct mm_id * mm_idp, unsigned long virt,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#58: FILE: arch/um/include/os.h:266:
+extern int map(struct mm_id * mm_idp, unsigned long virt,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#61: FILE: arch/um/include/os.h:269:
+extern int unmap(struct mm_id * mm_idp, void *addr, unsigned long len,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#61: FILE: arch/um/include/os.h:269:
+extern int unmap(struct mm_id * mm_idp, void *addr, unsigned long len,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#63: FILE: arch/um/include/os.h:271:
+extern int protect(struct mm_id * mm_idp, unsigned long addr,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#63: FILE: arch/um/include/os.h:271:
+extern int protect(struct mm_id * mm_idp, unsigned long addr,

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#421: FILE: arch/um/os-Linux/skas/mem.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#450: FILE: arch/um/os-Linux/skas/mem.c:30:
+extern void wait_stub_done(int pid, int sig, char * fname);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#450: FILE: arch/um/os-Linux/skas/mem.c:30:
+extern void wait_stub_done(int pid, int sig, char * fname);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#452: FILE: arch/um/os-Linux/skas/mem.c:32:
+static inline unsigned long *check_init_stack(struct mm_id * mm_idp,

ERROR:SPACING: space required before the open parenthesis '('
#455: FILE: arch/um/os-Linux/skas/mem.c:35:
+	if(stack == NULL) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!stack"
#455: FILE: arch/um/os-Linux/skas/mem.c:35:
+	if(stack == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:SPACING: No space is necessary after a cast
#456: FILE: arch/um/os-Linux/skas/mem.c:36:
+		stack = (unsigned long *) mm_idp->stack + 2;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#464: FILE: arch/um/os-Linux/skas/mem.c:44:
+int single_count = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#465: FILE: arch/um/os-Linux/skas/mem.c:45:
+int multi_count = 0;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#466: FILE: arch/um/os-Linux/skas/mem.c:46:
+int multi_op_count = 0;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#468: FILE: arch/um/os-Linux/skas/mem.c:48:
+static inline long do_syscall_stub(struct mm_id * mm_idp, void **addr)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#473: FILE: arch/um/os-Linux/skas/mem.c:53:
+	unsigned long * data;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#474: FILE: arch/um/os-Linux/skas/mem.c:54:
+	unsigned long * syscall;

ERROR:SPACING: space required before the open parenthesis '('
#477: FILE: arch/um/os-Linux/skas/mem.c:57:
+	if(proc_mm)

CHECK:SPACING: No space is necessary after a cast
#485: FILE: arch/um/os-Linux/skas/mem.c:65:
+		((unsigned long) &batch_syscall_stub -

CHECK:SPACING: No space is necessary after a cast
#486: FILE: arch/um/os-Linux/skas/mem.c:66:
+		 (unsigned long) &__syscall_stub_start);

ERROR:SPACING: space required before the open parenthesis '('
#489: FILE: arch/um/os-Linux/skas/mem.c:69:
+	if(n < 0)

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'do_syscall_stub', this function's name, in a string
#490: FILE: arch/um/os-Linux/skas/mem.c:70:
+		panic("do_syscall_stub : PTRACE_SETREGS failed, errno = %d\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:SPACING: No space is necessary after a cast
#500: FILE: arch/um/os-Linux/skas/mem.c:80:
+	ret = *((unsigned long *) mm_idp->stack);

CHECK:SPACING: No space is necessary after a cast
#501: FILE: arch/um/os-Linux/skas/mem.c:81:
+	offset = *((unsigned long *) mm_idp->stack + 1);

CHECK:BRACES: braces {} should be used on all arms of this statement
#502: FILE: arch/um/os-Linux/skas/mem.c:82:
+	if (offset) {
[...]
+	else ret = 0;
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#505: FILE: arch/um/os-Linux/skas/mem.c:85:
+		printk("do_syscall_stub : ret = %d, offset = %d, "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'do_syscall_stub', this function's name, in a string
#505: FILE: arch/um/os-Linux/skas/mem.c:85:
+		printk("do_syscall_stub : ret = %d, offset = %d, "

WARNING:SPLIT_STRING: quoted string split across lines
#506: FILE: arch/um/os-Linux/skas/mem.c:86:
+		printk("do_syscall_stub : ret = %d, offset = %d, "
+		       "data = 0x%x\n", ret, offset, data);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#508: FILE: arch/um/os-Linux/skas/mem.c:88:
+		printk("do_syscall_stub: syscall %ld failed, return value = "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'do_syscall_stub', this function's name, in a string
#508: FILE: arch/um/os-Linux/skas/mem.c:88:
+		printk("do_syscall_stub: syscall %ld failed, return value = "

WARNING:SPLIT_STRING: quoted string split across lines
#509: FILE: arch/um/os-Linux/skas/mem.c:89:
+		printk("do_syscall_stub: syscall %ld failed, return value = "
+		       "0x%lx, expected return value = 0x%lx\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#511: FILE: arch/um/os-Linux/skas/mem.c:91:
+		printk("    syscall parameters: "

WARNING:SPLIT_STRING: quoted string split across lines
#512: FILE: arch/um/os-Linux/skas/mem.c:92:
+		printk("    syscall parameters: "
+		       "0x%lx 0x%lx 0x%lx 0x%lx 0x%lx 0x%lx\n",

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#515: FILE: arch/um/os-Linux/skas/mem.c:95:
+		for(n = 1; n < data[0]/sizeof(long); n++) {
 		                      ^

ERROR:SPACING: space required before the open parenthesis '('
#515: FILE: arch/um/os-Linux/skas/mem.c:95:
+		for(n = 1; n < data[0]/sizeof(long); n++) {

ERROR:SPACING: space required before the open parenthesis '('
#516: FILE: arch/um/os-Linux/skas/mem.c:96:
+			if(n == 1)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#517: FILE: arch/um/os-Linux/skas/mem.c:97:
+				printk("    additional syscall data:");

ERROR:SPACING: space required before the open parenthesis '('
#518: FILE: arch/um/os-Linux/skas/mem.c:98:
+			if(n % 4 == 1)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#519: FILE: arch/um/os-Linux/skas/mem.c:99:
+				printk("\n      ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#520: FILE: arch/um/os-Linux/skas/mem.c:100:
+			printk("  0x%lx", data[n]);

ERROR:SPACING: space required before the open parenthesis '('
#522: FILE: arch/um/os-Linux/skas/mem.c:102:
+		if(n > 1)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#523: FILE: arch/um/os-Linux/skas/mem.c:103:
+			printk("\n");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#525: FILE: arch/um/os-Linux/skas/mem.c:105:
+	else ret = 0;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#525: FILE: arch/um/os-Linux/skas/mem.c:105:
+	}
+	else ret = 0;

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#532: FILE: arch/um/os-Linux/skas/mem.c:112:
+long run_syscall_stub(struct mm_id * mm_idp, int syscall,

ERROR:SPACING: space required before the open parenthesis '('
#538: FILE: arch/um/os-Linux/skas/mem.c:118:
+	if(done && *addr == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!addr"
#538: FILE: arch/um/os-Linux/skas/mem.c:118:
+	if(done && *addr == NULL)

CHECK:SPACING: No space is necessary after a cast
#555: FILE: arch/um/os-Linux/skas/mem.c:135:
+	if(!done && ((((unsigned long) stack) & ~PAGE_MASK) <

ERROR:SPACING: space required before the open parenthesis '('
#555: FILE: arch/um/os-Linux/skas/mem.c:135:
+	if(!done && ((((unsigned long) stack) & ~PAGE_MASK) <

ERROR:SPACING: space required before the open brace '{'
#556: FILE: arch/um/os-Linux/skas/mem.c:136:
+		     PAGE_SIZE - 10 * sizeof(long))){

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#564: FILE: arch/um/os-Linux/skas/mem.c:144:
+long syscall_stub_data(struct mm_id * mm_idp,

CHECK:SPACING: No space is necessary after a cast
#574: FILE: arch/um/os-Linux/skas/mem.c:154:
+	if((((unsigned long) *addr) & ~PAGE_MASK) >=

ERROR:SPACING: space required before the open parenthesis '('
#574: FILE: arch/um/os-Linux/skas/mem.c:154:
+	if((((unsigned long) *addr) & ~PAGE_MASK) >=

ERROR:SPACING: space required before the open parenthesis '('
#578: FILE: arch/um/os-Linux/skas/mem.c:158:
+		if(ret)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#595: FILE: arch/um/os-Linux/skas/mem.c:175:
+int map(struct mm_id * mm_idp, unsigned long virt, unsigned long len,

ERROR:SPACING: space required before the open brace '{'
#604: FILE: arch/um/os-Linux/skas/mem.c:184:
+	if(proc_mm){

ERROR:SPACING: space required before the open parenthesis '('
#604: FILE: arch/um/os-Linux/skas/mem.c:184:
+	if(proc_mm){

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#610: FILE: arch/um/os-Linux/skas/mem.c:190:
+				       .u		=
+				       { .mmap	=

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#611: FILE: arch/um/os-Linux/skas/mem.c:191:
+				       { .mmap	=
+					 { .addr	= virt,

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#617: FILE: arch/um/os-Linux/skas/mem.c:197:
+					   .offset= offset
 					          ^

ERROR:SPACING: space prohibited before that close parenthesis ')'
#618: FILE: arch/um/os-Linux/skas/mem.c:198:
+					 } } } );

ERROR:SPACING: space required before the open parenthesis '('
#620: FILE: arch/um/os-Linux/skas/mem.c:200:
+		if(ret != sizeof(map))

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#621: FILE: arch/um/os-Linux/skas/mem.c:201:
+			printk("map : /proc/mm map failed, err = %d\n", -ret);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'map', this function's name, in a string
#621: FILE: arch/um/os-Linux/skas/mem.c:201:
+			printk("map : /proc/mm map failed, err = %d\n", -ret);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#622: FILE: arch/um/os-Linux/skas/mem.c:202:
+		else ret = 0;

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#624: FILE: arch/um/os-Linux/skas/mem.c:204:
+	}
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#624: FILE: arch/um/os-Linux/skas/mem.c:204:
+	else {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#636: FILE: arch/um/os-Linux/skas/mem.c:216:
+int unmap(struct mm_id * mm_idp, void *addr, unsigned long len, int done,

ERROR:SPACING: space required before the open brace '{'
#641: FILE: arch/um/os-Linux/skas/mem.c:221:
+	if(proc_mm){

ERROR:SPACING: space required before the open parenthesis '('
#641: FILE: arch/um/os-Linux/skas/mem.c:221:
+	if(proc_mm){

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#647: FILE: arch/um/os-Linux/skas/mem.c:227:
+					 .u	=
+					 { .munmap	=

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#648: FILE: arch/um/os-Linux/skas/mem.c:228:
+					 { .munmap	=
+					   { .addr	=

CHECK:SPACING: No space is necessary after a cast
#649: FILE: arch/um/os-Linux/skas/mem.c:229:
+					     (unsigned long) addr,

ERROR:SPACING: space prohibited before that close parenthesis ')'
#650: FILE: arch/um/os-Linux/skas/mem.c:230:
+					     .len		= len } } } );

ERROR:SPACING: space required before the open parenthesis '('
#652: FILE: arch/um/os-Linux/skas/mem.c:232:
+		if(ret != sizeof(unmap))

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#653: FILE: arch/um/os-Linux/skas/mem.c:233:
+			printk("unmap - proc_mm write returned %d\n", ret);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'unmap', this function's name, in a string
#653: FILE: arch/um/os-Linux/skas/mem.c:233:
+			printk("unmap - proc_mm write returned %d\n", ret);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#654: FILE: arch/um/os-Linux/skas/mem.c:234:
+		else ret = 0;

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#656: FILE: arch/um/os-Linux/skas/mem.c:236:
+	}
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#656: FILE: arch/um/os-Linux/skas/mem.c:236:
+	else {

CHECK:SPACING: No space is necessary after a cast
#657: FILE: arch/um/os-Linux/skas/mem.c:237:
+		unsigned long args[] = { (unsigned long) addr, len, 0, 0, 0,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#667: FILE: arch/um/os-Linux/skas/mem.c:247:
+int protect(struct mm_id * mm_idp, unsigned long addr, unsigned long len,

ERROR:SPACING: space required before the open brace '{'
#675: FILE: arch/um/os-Linux/skas/mem.c:255:
+	if(proc_mm){

ERROR:SPACING: space required before the open parenthesis '('
#675: FILE: arch/um/os-Linux/skas/mem.c:255:
+	if(proc_mm){

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#680: FILE: arch/um/os-Linux/skas/mem.c:260:
+					   .u	=
+					   { .mprotect	=

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#681: FILE: arch/um/os-Linux/skas/mem.c:261:
+					   { .mprotect	=
+					     { .addr	=

CHECK:SPACING: No space is necessary after a cast
#682: FILE: arch/um/os-Linux/skas/mem.c:262:
+					       (unsigned long) addr,

ERROR:SPACING: space prohibited before that close parenthesis ')'
#684: FILE: arch/um/os-Linux/skas/mem.c:264:
+					       .prot	= prot } } } );

ERROR:SPACING: space required before the open parenthesis '('
#687: FILE: arch/um/os-Linux/skas/mem.c:267:
+		if(ret != sizeof(protect))

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#688: FILE: arch/um/os-Linux/skas/mem.c:268:
+			printk("protect failed, err = %d", -ret);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'protect', this function's name, in a string
#688: FILE: arch/um/os-Linux/skas/mem.c:268:
+			printk("protect failed, err = %d", -ret);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#689: FILE: arch/um/os-Linux/skas/mem.c:269:
+		else ret = 0;

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#691: FILE: arch/um/os-Linux/skas/mem.c:271:
+	}
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#691: FILE: arch/um/os-Linux/skas/mem.c:271:
+	else {

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000115170.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 57 errors, 21 warnings, 22 checks, 356 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000115170.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
