WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#27: 
# This is a BitKeeper generated patch for the following project:

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#28: 
# Project Name: Linux kernel tree

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#29: 
# This patch format is intended for GNU patch command version 2.5 or higher.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#29: 
# This patch format is intended for GNU patch command version 2.5 or higher.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#30: 
# This patch includes the following deltas:

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#31: 
#	           ChangeSet	1.683.1.1 -> 1.683.1.2

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#32: 
#	arch/s390/kernel/smp.c	1.12    -> 1.13   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#33: 
#	include/asm-s390x/smp.h	1.4     -> 1.5    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#34: 
#	include/asm-s390/smp.h	1.5     -> 1.6    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#35: 
#	arch/s390/kernel/irq.c	1.8     -> 1.9    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#36: 
#	arch/s390x/kernel/smp.c	1.11    -> 1.12   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#37: 
#	include/asm-s390x/tlbflush.h	1.1     -> 1.2    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#38: 
#	include/asm-s390x/bitops.h	1.3     -> 1.4    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#39: 
#	include/asm-s390/tlbflush.h	1.1     -> 1.2    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#40: 
#	arch/s390x/kernel/irq.c	1.6     -> 1.7    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#41: 
#

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#42: 
# The following is the BitKeeper ChangeSet Log

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#43: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#44: 
# 02/07/23	arnd@bergmann-dalldorf.de	1.683.1.2

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#45: 
# smp_num_cpus adaptions

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#46: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#47: 
#

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#49: 
--- a/arch/s390/kernel/irq.c	Tue Jul 23 18:53:43 2002

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#57: FILE: arch/s390/kernel/irq.c:69:
+	for (j=0; j<NR_CPUS; j++)
 	      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#57: FILE: arch/s390/kernel/irq.c:69:
+	for (j=0; j<NR_CPUS; j++)
 	           ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#57: FILE: arch/s390/kernel/irq.c:69:
+	for (j=0; j<NR_CPUS; j++)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#59: FILE: arch/s390/kernel/irq.c:71:
+			seq_printf(p, "CPU%d       ",j);
 			                            ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#79: FILE: arch/s390/kernel/smp.c:152:
+	int cpus = num_online_cpus()-1;
 	                            ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#89: FILE: arch/s390/kernel/smp.c:187:
+        for (i =  0; i < NR_CPUS; i++) {$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#89: FILE: arch/s390/kernel/smp.c:187:
+        for (i =  0; i < NR_CPUS; i++) {$

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#89: FILE: arch/s390/kernel/smp.c:187:
+        for (i =  0; i < NR_CPUS; i++) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#90: FILE: arch/s390/kernel/smp.c:188:
+                if (!cpu_online(i) || smp_processor_id() == i)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#90: FILE: arch/s390/kernel/smp.c:188:
+                if (!cpu_online(i) || smp_processor_id() == i)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#100: FILE: arch/s390/kernel/smp.c:203:
+        for (i =  0; i < NR_CPUS; i++) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#100: FILE: arch/s390/kernel/smp.c:203:
+        for (i =  0; i < NR_CPUS; i++) {$

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#100: FILE: arch/s390/kernel/smp.c:203:
+        for (i =  0; i < NR_CPUS; i++) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#101: FILE: arch/s390/kernel/smp.c:204:
+                if (!cpu_online(i) || smp_processor_id() == i)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#101: FILE: arch/s390/kernel/smp.c:204:
+                if (!cpu_online(i) || smp_processor_id() == i)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#111: FILE: arch/s390/kernel/smp.c:349:
+        for (i = 0; i < NR_CPUS; i++) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#111: FILE: arch/s390/kernel/smp.c:349:
+        for (i = 0; i < NR_CPUS; i++) {$

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#111: FILE: arch/s390/kernel/smp.c:349:
+        for (i = 0; i < NR_CPUS; i++) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#112: FILE: arch/s390/kernel/smp.c:350:
+                if (!cpu_online(i) || smp_processor_id() == i)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#112: FILE: arch/s390/kernel/smp.c:350:
+                if (!cpu_online(i) || smp_processor_id() == i)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#121: FILE: arch/s390/kernel/smp.c:461:
+        int curr_cpu, num_cpus;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#121: FILE: arch/s390/kernel/smp.c:461:
+        int curr_cpu, num_cpus;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#125: FILE: arch/s390/kernel/smp.c:464:
+        num_cpus = 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#125: FILE: arch/s390/kernel/smp.c:464:
+        num_cpus = 1;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#130: FILE: arch/s390/kernel/smp.c:468:
+             curr_cpu <= 65535 && num_cpus < max_cpus; curr_cpu++) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#130: FILE: arch/s390/kernel/smp.c:468:
+             curr_cpu <= 65535 && num_cpus < max_cpus; curr_cpu++) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#135: FILE: arch/s390/kernel/smp.c:471:
+                __cpu_logical_map[num_cpus] = (__u16) curr_cpu;$

CHECK:SPACING: No space is necessary after a cast
#135: FILE: arch/s390/kernel/smp.c:471:
+                __cpu_logical_map[num_cpus] = (__u16) curr_cpu;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#135: FILE: arch/s390/kernel/smp.c:471:
+                __cpu_logical_map[num_cpus] = (__u16) curr_cpu;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#136: FILE: arch/s390/kernel/smp.c:472:
+                if (signal_processor(num_cpus, sigp_sense) ==$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#136: FILE: arch/s390/kernel/smp.c:472:
+                if (signal_processor(num_cpus, sigp_sense) ==$

ERROR:CODE_INDENT: code indent should use tabs where possible
#142: FILE: arch/s390/kernel/smp.c:476:
+                num_cpus++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#142: FILE: arch/s390/kernel/smp.c:476:
+                num_cpus++;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#145: FILE: arch/s390/kernel/smp.c:478:
+        printk("Detected %d CPU's\n",(int) num_cpus);$

CHECK:SPACING: No space is necessary after a cast
#145: FILE: arch/s390/kernel/smp.c:478:
+        printk("Detected %d CPU's\n",(int) num_cpus);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#145: FILE: arch/s390/kernel/smp.c:478:
+        printk("Detected %d CPU's\n",(int) num_cpus);$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#145: FILE: arch/s390/kernel/smp.c:478:
+        printk("Detected %d CPU's\n",(int) num_cpus);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#145: FILE: arch/s390/kernel/smp.c:478:
+        printk("Detected %d CPU's\n",(int) num_cpus);
                                     ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#154: FILE: arch/s390/kernel/smp.c:593:
+        for(i = 0; i < NR_CPUS; i++) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#154: FILE: arch/s390/kernel/smp.c:593:
+        for(i = 0; i < NR_CPUS; i++) {$

ERROR:SPACING: space required before the open parenthesis '('
#154: FILE: arch/s390/kernel/smp.c:593:
+        for(i = 0; i < NR_CPUS; i++) {

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#154: FILE: arch/s390/kernel/smp.c:593:
+        for(i = 0; i < NR_CPUS; i++) {

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#175: FILE: arch/s390x/kernel/irq.c:69:
+	for (j=0; j<NR_CPUS; j++)
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#175: FILE: arch/s390x/kernel/irq.c:69:
+	for (j=0; j<NR_CPUS; j++)
 	           ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#175: FILE: arch/s390x/kernel/irq.c:69:
+	for (j=0; j<NR_CPUS; j++)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#177: FILE: arch/s390x/kernel/irq.c:71:
+			seq_printf(p, "CPU%d       ",j);
 			                            ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#197: FILE: arch/s390x/kernel/smp.c:151:
+	int cpus = num_online_cpus()-1;
 	                            ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#207: FILE: arch/s390x/kernel/smp.c:186:
+        for (i =  0; i < NR_CPUS; i++) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#207: FILE: arch/s390x/kernel/smp.c:186:
+        for (i =  0; i < NR_CPUS; i++) {$

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#207: FILE: arch/s390x/kernel/smp.c:186:
+        for (i =  0; i < NR_CPUS; i++) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#208: FILE: arch/s390x/kernel/smp.c:187:
+                if (!cpu_online(i) || smp_processor_id() == i)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#208: FILE: arch/s390x/kernel/smp.c:187:
+                if (!cpu_online(i) || smp_processor_id() == i)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#218: FILE: arch/s390x/kernel/smp.c:202:
+        for (i =  0; i < NR_CPUS; i++) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#218: FILE: arch/s390x/kernel/smp.c:202:
+        for (i =  0; i < NR_CPUS; i++) {$

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#218: FILE: arch/s390x/kernel/smp.c:202:
+        for (i =  0; i < NR_CPUS; i++) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#219: FILE: arch/s390x/kernel/smp.c:203:
+                if (!cpu_online(i) || smp_processor_id() == i) $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#219: FILE: arch/s390x/kernel/smp.c:203:
+                if (!cpu_online(i) || smp_processor_id() == i) $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#219: FILE: arch/s390x/kernel/smp.c:203:
+                if (!cpu_online(i) || smp_processor_id() == i) $

ERROR:CODE_INDENT: code indent should use tabs where possible
#229: FILE: arch/s390x/kernel/smp.c:344:
+        for (i = 0; i < NR_CPUS; i++) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#229: FILE: arch/s390x/kernel/smp.c:344:
+        for (i = 0; i < NR_CPUS; i++) {$

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#229: FILE: arch/s390x/kernel/smp.c:344:
+        for (i = 0; i < NR_CPUS; i++) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#230: FILE: arch/s390x/kernel/smp.c:345:
+                if (!cpu_online(i) || smp_processor_id() == i)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#230: FILE: arch/s390x/kernel/smp.c:345:
+                if (!cpu_online(i) || smp_processor_id() == i)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#239: FILE: arch/s390x/kernel/smp.c:442:
+        int curr_cpu, num_cpus;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#239: FILE: arch/s390x/kernel/smp.c:442:
+        int curr_cpu, num_cpus;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#243: FILE: arch/s390x/kernel/smp.c:445:
+        num_cpus = 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#243: FILE: arch/s390x/kernel/smp.c:445:
+        num_cpus = 1;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#248: FILE: arch/s390x/kernel/smp.c:449:
+             curr_cpu <= 65535 && num_cpus < max_cpus; curr_cpu++) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#248: FILE: arch/s390x/kernel/smp.c:449:
+             curr_cpu <= 65535 && num_cpus < max_cpus; curr_cpu++) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#253: FILE: arch/s390x/kernel/smp.c:452:
+                __cpu_logical_map[num_cpus] = (__u16) curr_cpu;$

CHECK:SPACING: No space is necessary after a cast
#253: FILE: arch/s390x/kernel/smp.c:452:
+                __cpu_logical_map[num_cpus] = (__u16) curr_cpu;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#253: FILE: arch/s390x/kernel/smp.c:452:
+                __cpu_logical_map[num_cpus] = (__u16) curr_cpu;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#254: FILE: arch/s390x/kernel/smp.c:453:
+                if (signal_processor(num_cpus, sigp_sense) ==$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#254: FILE: arch/s390x/kernel/smp.c:453:
+                if (signal_processor(num_cpus, sigp_sense) ==$

ERROR:CODE_INDENT: code indent should use tabs where possible
#260: FILE: arch/s390x/kernel/smp.c:457:
+                num_cpus++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#260: FILE: arch/s390x/kernel/smp.c:457:
+                num_cpus++;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#263: FILE: arch/s390x/kernel/smp.c:459:
+        printk("Detected %d CPU's\n",(int) num_cpus);$

CHECK:SPACING: No space is necessary after a cast
#263: FILE: arch/s390x/kernel/smp.c:459:
+        printk("Detected %d CPU's\n",(int) num_cpus);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#263: FILE: arch/s390x/kernel/smp.c:459:
+        printk("Detected %d CPU's\n",(int) num_cpus);$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#263: FILE: arch/s390x/kernel/smp.c:459:
+        printk("Detected %d CPU's\n",(int) num_cpus);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#263: FILE: arch/s390x/kernel/smp.c:459:
+        printk("Detected %d CPU's\n",(int) num_cpus);
                                     ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#272: FILE: arch/s390x/kernel/smp.c:573:
+        for(i = 0; i < NR_CPUS; i++) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#272: FILE: arch/s390x/kernel/smp.c:573:
+        for(i = 0; i < NR_CPUS; i++) {$

ERROR:SPACING: space required before the open parenthesis '('
#272: FILE: arch/s390x/kernel/smp.c:573:
+        for(i = 0; i < NR_CPUS; i++) {

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#272: FILE: arch/s390x/kernel/smp.c:573:
+        for(i = 0; i < NR_CPUS; i++) {

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#292: FILE: include/asm-s390/smp.h:49:
+#define cpu_online(cpu) (cpu_online_map & (1<<(cpu)))
                                             ^

CHECK:SPACING: No space is necessary after a cast
#336: FILE: include/asm-s390x/bitops.h:818:
+	__w = generic_hweight32((unsigned int) __x);		\

CHECK:SPACING: No space is necessary after a cast
#337: FILE: include/asm-s390x/bitops.h:819:
+	__w += generic_hweight32((unsigned int) (__x>>32));	\

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#337: FILE: include/asm-s390x/bitops.h:819:
+	__w += generic_hweight32((unsigned int) (__x>>32));	\
 	                                            ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#351: FILE: include/asm-s390x/smp.h:49:
+#define cpu_online(cpu) (cpu_online_map & (1<<(cpu)))
                                             ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000445147.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 40 errors, 62 warnings, 11 checks, 284 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000445147.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
