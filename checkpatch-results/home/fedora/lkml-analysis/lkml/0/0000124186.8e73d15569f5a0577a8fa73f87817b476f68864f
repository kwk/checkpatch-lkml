CHECK:UNCOMMENTED_DEFINITION: struct mutex definition without comment
#69: FILE: include/linux/mutex.h:107:
+	struct mutex lock;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'mutexname' - possible side-effects?
#72: FILE: include/linux/mutex.h:110:
+#define DEFINE_MUTEX_DEBUG(mutexname) \
+	struct mutex_debug mutexname = \
+		{ .lock = __MUTEX_INITIALIZER(mutexname.lock) }

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#76: FILE: include/linux/mutex.h:114:
+extern void FASTCALL(mutex_debug_down(struct mutex_debug *lock));

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#77: FILE: include/linux/mutex.h:115:
+extern int FASTCALL(mutex_debug_down_interruptible(struct mutex_debug *lock));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#78: FILE: include/linux/mutex.h:116:
+extern int FASTCALL(mutex_debug_down_trylock(struct mutex_debug *lock));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#79: FILE: include/linux/mutex.h:117:
+extern void FASTCALL(mutex_debug_up(struct mutex_debug *lock));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#80: FILE: include/linux/mutex.h:118:
+extern int FASTCALL(mutex_debug_sem_is_locked(struct mutex_debug *lock));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#86: FILE: include/linux/mutex.h:124:
+extern int __bad_mutex_debug_func_type(void);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'type1' - possible side-effects?
#92: FILE: include/linux/mutex.h:130:
+#define PICK_FUNC_1ARG(type1, type2, func1, func2, arg)			\
+do {									\
+	if (TYPE_EQUAL((arg), type1))					\
+		func1((type1 *)(arg));					\
+	else if (TYPE_EQUAL((arg), type2))				\
+		func2((type2 *)(arg));					\
+	else __bad_mutex_debug_func_type();				\
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'type2' - possible side-effects?
#92: FILE: include/linux/mutex.h:130:
+#define PICK_FUNC_1ARG(type1, type2, func1, func2, arg)			\
+do {									\
+	if (TYPE_EQUAL((arg), type1))					\
+		func1((type1 *)(arg));					\
+	else if (TYPE_EQUAL((arg), type2))				\
+		func2((type2 *)(arg));					\
+	else __bad_mutex_debug_func_type();				\
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg' - possible side-effects?
#92: FILE: include/linux/mutex.h:130:
+#define PICK_FUNC_1ARG(type1, type2, func1, func2, arg)			\
+do {									\
+	if (TYPE_EQUAL((arg), type1))					\
+		func1((type1 *)(arg));					\
+	else if (TYPE_EQUAL((arg), type2))				\
+		func2((type2 *)(arg));					\
+	else __bad_mutex_debug_func_type();				\
+} while (0)

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#98: FILE: include/linux/mutex.h:136:
+	else __bad_mutex_debug_func_type();				\

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'type1' - possible side-effects?
#101: FILE: include/linux/mutex.h:139:
+#define PICK_FUNC_1ARG_RET(type1, type2, func1, func2, arg)		\
+({									\
+	unsigned long __ret;						\
+									\
+	if (TYPE_EQUAL((arg), type1))					\
+		__ret = func1((type1 *)(arg));				\
+	else if (TYPE_EQUAL((arg), type2))				\
+		__ret = func2((type2 *)(arg));				\
+	else __ret = __bad_mutex_debug_func_type();			\
+									\
+	__ret;								\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'type2' - possible side-effects?
#101: FILE: include/linux/mutex.h:139:
+#define PICK_FUNC_1ARG_RET(type1, type2, func1, func2, arg)		\
+({									\
+	unsigned long __ret;						\
+									\
+	if (TYPE_EQUAL((arg), type1))					\
+		__ret = func1((type1 *)(arg));				\
+	else if (TYPE_EQUAL((arg), type2))				\
+		__ret = func2((type2 *)(arg));				\
+	else __ret = __bad_mutex_debug_func_type();			\
+									\
+	__ret;								\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg' - possible side-effects?
#101: FILE: include/linux/mutex.h:139:
+#define PICK_FUNC_1ARG_RET(type1, type2, func1, func2, arg)		\
+({									\
+	unsigned long __ret;						\
+									\
+	if (TYPE_EQUAL((arg), type1))					\
+		__ret = func1((type1 *)(arg));				\
+	else if (TYPE_EQUAL((arg), type2))				\
+		__ret = func2((type2 *)(arg));				\
+	else __ret = __bad_mutex_debug_func_type();			\
+									\
+	__ret;								\
+})

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#109: FILE: include/linux/mutex.h:147:
+	else __ret = __bad_mutex_debug_func_type();			\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'type1' - possible side-effects?
#114: FILE: include/linux/mutex.h:152:
+#define PICK_FUNC_2ARG(type1, type2, func1, func2, arg0, arg1)		\
+do {									\
+	if (TYPE_EQUAL((arg0), type1))					\
+		func1((type1 *)(arg0), arg1);				\
+	else if (TYPE_EQUAL((arg0), type2))				\
+		func2((type2 *)(arg0), arg1);				\
+	else __bad_mutex_debug_func_type();				\
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'type2' - possible side-effects?
#114: FILE: include/linux/mutex.h:152:
+#define PICK_FUNC_2ARG(type1, type2, func1, func2, arg0, arg1)		\
+do {									\
+	if (TYPE_EQUAL((arg0), type1))					\
+		func1((type1 *)(arg0), arg1);				\
+	else if (TYPE_EQUAL((arg0), type2))				\
+		func2((type2 *)(arg0), arg1);				\
+	else __bad_mutex_debug_func_type();				\
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg0' - possible side-effects?
#114: FILE: include/linux/mutex.h:152:
+#define PICK_FUNC_2ARG(type1, type2, func1, func2, arg0, arg1)		\
+do {									\
+	if (TYPE_EQUAL((arg0), type1))					\
+		func1((type1 *)(arg0), arg1);				\
+	else if (TYPE_EQUAL((arg0), type2))				\
+		func2((type2 *)(arg0), arg1);				\
+	else __bad_mutex_debug_func_type();				\
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg1' - possible side-effects?
#114: FILE: include/linux/mutex.h:152:
+#define PICK_FUNC_2ARG(type1, type2, func1, func2, arg0, arg1)		\
+do {									\
+	if (TYPE_EQUAL((arg0), type1))					\
+		func1((type1 *)(arg0), arg1);				\
+	else if (TYPE_EQUAL((arg0), type2))				\
+		func2((type2 *)(arg0), arg1);				\
+	else __bad_mutex_debug_func_type();				\
+} while (0)

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#120: FILE: include/linux/mutex.h:158:
+	else __bad_mutex_debug_func_type();				\

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#160: FILE: include/linux/mutex.h:198:
+  extern FASTCALL(void __mutex_debug_sema_init(struct mutex_debug *lock,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#165: FILE: include/linux/mutex.h:203:
+  extern FASTCALL(void __mutex_debug_sema_init(struct mutex_debug *lock, int val));$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#175: FILE: include/linux/mutex.h:213:
+extern void there_is_no_init_MUTEX_LOCKED_for_mutexes(void);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#186: FILE: include/linux/semaphore.h:1:
+#ifndef _LINUX_SEMAPHORE_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#201: FILE: include/linux/semaphore.h:16:
+#if 0

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#213: FILE: include/linux/semaphore.h:28:
+}
+static inline void init_MUTEX(struct arch_semaphore *sem)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#217: FILE: include/linux/semaphore.h:32:
+}
+static inline void init_MUTEX_LOCKED(struct arch_semaphore *sem)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#221: FILE: include/linux/semaphore.h:36:
+}
+static inline void down(struct arch_semaphore *sem)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#225: FILE: include/linux/semaphore.h:40:
+}
+static inline int down_interruptible(struct arch_semaphore *sem)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#229: FILE: include/linux/semaphore.h:44:
+}
+static inline int down_trylock(struct arch_semaphore *sem)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#233: FILE: include/linux/semaphore.h:48:
+}
+static inline void up(struct arch_semaphore *sem)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#237: FILE: include/linux/semaphore.h:52:
+}
+static inline int sem_is_locked(struct arch_semaphore *sem)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#241: FILE: include/linux/semaphore.h:56:
+}
+static inline int sema_count(struct arch_semaphore *sem)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#285: FILE: kernel/mutex.c:592:
+EXPORT_SYMBOL(__mutex_debug_sema_init);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#344: FILE: lib/Kconfig.debug:103:
+choice
+	prompt "Mutex Debugging Mode"
+	default DEBUG_NONE
+	depends on ARCH_SEMAPHORES
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#349: FILE: lib/Kconfig.debug:108:
+config DEBUG_MUTEX_NONE
+	bool "Off"
+	help
+	  No runtime checking of semaphores. Fastest mode.
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#354: FILE: lib/Kconfig.debug:113:
+config DEBUG_MUTEX_PARTIAL
+	bool "Partial"
+	help
+	  Check mutexes that have been marked as mutexes explicitly.
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#359: FILE: lib/Kconfig.debug:118:
+config DEBUG_MUTEX_FULL
+	bool "Full"
+	help
+	  Check all mutexes and semaphores. (except the handful of
+	  semaphores that have been explicitly marked as non-debug)
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#393: FILE: lib/semaphore-sleepers.c:58:
+fastcall void __sched __down(struct arch_semaphore * sem)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#402: FILE: lib/semaphore-sleepers.c:95:
+fastcall int __sched __down_interruptible(struct arch_semaphore * sem)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#411: FILE: lib/semaphore-sleepers.c:158:
+fastcall int __down_trylock(struct arch_semaphore * sem)

CHECK:SPACING: No space is necessary after a cast
#422: FILE: lib/semaphore-sleepers.c:182:
+	return (int) atomic_read(&sem->count) < 0;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#425: FILE: lib/semaphore-sleepers.c:185:
+EXPORT_SYMBOL(arch_sem_is_locked);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000124186.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 6 errors, 10 warnings, 28 checks, 341 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000124186.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
