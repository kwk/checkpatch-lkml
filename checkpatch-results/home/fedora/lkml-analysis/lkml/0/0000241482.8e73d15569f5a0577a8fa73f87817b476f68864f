WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#74: FILE: include/asm-ppc64/spinlock_types.h:1:
+#ifndef __ASM_PPC64_SPINLOCK_TYPES_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:NEW_TYPEDEFS: do not add new typedefs
#79: FILE: include/asm-ppc64/spinlock_types.h:6:
+typedef struct {

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#80: FILE: include/asm-ppc64/spinlock_types.h:7:
+	volatile unsigned int lock;

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#83: FILE: include/asm-ppc64/spinlock_types.h:10:
+#define SPIN_LOCK_UNLOCKED	(spinlock_t) { 0 }

ERROR:SPACING: space required before the open parenthesis '('
#85: FILE: include/asm-ppc64/spinlock_types.h:12:
+#define spin_lock_init(x)	do { *(x) = SPIN_LOCK_UNLOCKED; } while(0)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#85: FILE: include/asm-ppc64/spinlock_types.h:12:
+#define spin_lock_init(x)	do { *(x) = SPIN_LOCK_UNLOCKED; } while(0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:NEW_TYPEDEFS: do not add new typedefs
#87: FILE: include/asm-ppc64/spinlock_types.h:14:
+typedef struct {

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#88: FILE: include/asm-ppc64/spinlock_types.h:15:
+	volatile signed int lock;

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#91: FILE: include/asm-ppc64/spinlock_types.h:18:
+#define RW_LOCK_UNLOCKED (rwlock_t) { 0 }

ERROR:SPACING: space required before the open parenthesis '('
#93: FILE: include/asm-ppc64/spinlock_types.h:20:
+#define rwlock_init(x)		do { *(x) = RW_LOCK_UNLOCKED; } while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#93: FILE: include/asm-ppc64/spinlock_types.h:20:
+#define rwlock_init(x)		do { *(x) = RW_LOCK_UNLOCKED; } while(0)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#103: FILE: include/asm-mips/spinlock_types.h:1:
+#ifndef __ASM_MIPS_SPINLOCK_TYPES_H

WARNING:NEW_TYPEDEFS: do not add new typedefs
#108: FILE: include/asm-mips/spinlock_types.h:6:
+typedef struct {

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#109: FILE: include/asm-mips/spinlock_types.h:7:
+	volatile unsigned int lock;

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#112: FILE: include/asm-mips/spinlock_types.h:10:
+#define SPIN_LOCK_UNLOCKED (spinlock_t) { 0 }

ERROR:SPACING: space required before the open parenthesis '('
#114: FILE: include/asm-mips/spinlock_types.h:12:
+#define spin_lock_init(x)	do { (x)->lock = 0; } while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#114: FILE: include/asm-mips/spinlock_types.h:12:
+#define spin_lock_init(x)	do { (x)->lock = 0; } while(0)

WARNING:NEW_TYPEDEFS: do not add new typedefs
#116: FILE: include/asm-mips/spinlock_types.h:14:
+typedef struct {

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#117: FILE: include/asm-mips/spinlock_types.h:15:
+	volatile unsigned int lock;

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#120: FILE: include/asm-mips/spinlock_types.h:18:
+#define RW_LOCK_UNLOCKED (rwlock_t) { 0 }

ERROR:SPACING: space required before the open parenthesis '('
#122: FILE: include/asm-mips/spinlock_types.h:20:
+#define rwlock_init(x)  do { *(x) = RW_LOCK_UNLOCKED; } while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#122: FILE: include/asm-mips/spinlock_types.h:20:
+#define rwlock_init(x)  do { *(x) = RW_LOCK_UNLOCKED; } while(0)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#132: FILE: include/asm-s390/spinlock_types.h:1:
+#ifndef __ASM_S390_SPINLOCK_TYPES_H

WARNING:NEW_TYPEDEFS: do not add new typedefs
#137: FILE: include/asm-s390/spinlock_types.h:6:
+typedef struct {

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#138: FILE: include/asm-s390/spinlock_types.h:7:
+	volatile unsigned int lock;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#139: FILE: include/asm-s390/spinlock_types.h:8:
+} __attribute__ ((aligned (4))) spinlock_t;

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(4) over __attribute__((aligned(4)))
#139: FILE: include/asm-s390/spinlock_types.h:8:
+} __attribute__ ((aligned (4))) spinlock_t;

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#141: FILE: include/asm-s390/spinlock_types.h:10:
+#define SPIN_LOCK_UNLOCKED (spinlock_t) { 0 }

ERROR:SPACING: space required before the open parenthesis '('
#142: FILE: include/asm-s390/spinlock_types.h:11:
+#define spin_lock_init(lp) do { (lp)->lock = 0; } while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#142: FILE: include/asm-s390/spinlock_types.h:11:
+#define spin_lock_init(lp) do { (lp)->lock = 0; } while(0)

WARNING:NEW_TYPEDEFS: do not add new typedefs
#144: FILE: include/asm-s390/spinlock_types.h:13:
+typedef struct {

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#145: FILE: include/asm-s390/spinlock_types.h:14:
+	volatile unsigned long lock;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#146: FILE: include/asm-s390/spinlock_types.h:15:
+	volatile unsigned long owner_pc;

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#149: FILE: include/asm-s390/spinlock_types.h:18:
+#define RW_LOCK_UNLOCKED (rwlock_t) { 0, 0 }

ERROR:SPACING: space required before the open parenthesis '('
#151: FILE: include/asm-s390/spinlock_types.h:20:
+#define rwlock_init(x)	do { *(x) = RW_LOCK_UNLOCKED; } while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#151: FILE: include/asm-s390/spinlock_types.h:20:
+#define rwlock_init(x)	do { *(x) = RW_LOCK_UNLOCKED; } while(0)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#161: FILE: include/asm-i386/spinlock_types.h:1:
+#ifndef __ASM_I386_SPINLOCK_TYPES_H

WARNING:NEW_TYPEDEFS: do not add new typedefs
#166: FILE: include/asm-i386/spinlock_types.h:6:
+typedef struct {

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#167: FILE: include/asm-i386/spinlock_types.h:7:
+	volatile unsigned int lock;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#169: FILE: include/asm-i386/spinlock_types.h:9:
+	unsigned magic;

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#176: FILE: include/asm-i386/spinlock_types.h:16:
+#define SPINLOCK_MAGIC_INIT	, SPINLOCK_MAGIC
                            	^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#176: FILE: include/asm-i386/spinlock_types.h:16:
+#define SPINLOCK_MAGIC_INIT	, SPINLOCK_MAGIC

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#181: FILE: include/asm-i386/spinlock_types.h:21:
+#define SPIN_LOCK_UNLOCKED (spinlock_t) { 1 SPINLOCK_MAGIC_INIT }

WARNING:NEW_TYPEDEFS: do not add new typedefs
#188: FILE: include/asm-i386/spinlock_types.h:28:
+typedef struct {

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#189: FILE: include/asm-i386/spinlock_types.h:29:
+	volatile unsigned int lock;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#191: FILE: include/asm-i386/spinlock_types.h:31:
+	unsigned magic;

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#201: FILE: include/asm-i386/spinlock_types.h:41:
+#define RWLOCK_MAGIC_INIT	, RWLOCK_MAGIC
                          	^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#201: FILE: include/asm-i386/spinlock_types.h:41:
+#define RWLOCK_MAGIC_INIT	, RWLOCK_MAGIC

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#206: FILE: include/asm-i386/spinlock_types.h:46:
+#define RW_LOCK_UNLOCKED (rwlock_t) { RW_LOCK_BIAS RWLOCK_MAGIC_INIT }

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#221: FILE: include/asm-h8300/spinlock_types.h:1:
+#ifndef __ASM_H8300_SPINLOCK_TYPES_H

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#230: FILE: include/asm-alpha/spinlock_types.h:1:
+#ifndef __ASM_ALPHA_SPINLOCK_TYPES_H

WARNING:NEW_TYPEDEFS: do not add new typedefs
#235: FILE: include/asm-alpha/spinlock_types.h:6:
+typedef struct {

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#236: FILE: include/asm-alpha/spinlock_types.h:7:
+	volatile unsigned int lock /*__attribute__((aligned(32))) */;

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(32) over __attribute__((aligned(32)))
#236: FILE: include/asm-alpha/spinlock_types.h:7:
+	volatile unsigned int lock /*__attribute__((aligned(32))) */;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#241: FILE: include/asm-alpha/spinlock_types.h:12:
+	struct task_struct * task;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#247: FILE: include/asm-alpha/spinlock_types.h:18:
+#define SPIN_LOCK_UNLOCKED (spinlock_t) {0, -1, 0, NULL, NULL, NULL}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#248: FILE: include/asm-alpha/spinlock_types.h:19:
+#define spin_lock_init(x)						\
+	((x)->lock = 0, (x)->on_cpu = -1, (x)->previous = NULL, (x)->task = NULL)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#251: FILE: include/asm-alpha/spinlock_types.h:22:
+#define SPIN_LOCK_UNLOCKED	(spinlock_t) { 0 }

WARNING:NEW_TYPEDEFS: do not add new typedefs
#255: FILE: include/asm-alpha/spinlock_types.h:26:
+typedef struct {

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#256: FILE: include/asm-alpha/spinlock_types.h:27:
+	volatile int write_lock:1, read_counter:31;

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(32) over __attribute__((aligned(32)))
#257: FILE: include/asm-alpha/spinlock_types.h:28:
+} /*__attribute__((aligned(32)))*/ rwlock_t;

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#259: FILE: include/asm-alpha/spinlock_types.h:30:
+#define RW_LOCK_UNLOCKED (rwlock_t) { 0, 0 }

ERROR:SPACING: space required before the open parenthesis '('
#261: FILE: include/asm-alpha/spinlock_types.h:32:
+#define rwlock_init(x)	do { *(x) = RW_LOCK_UNLOCKED; } while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#261: FILE: include/asm-alpha/spinlock_types.h:32:
+#define rwlock_init(x)	do { *(x) = RW_LOCK_UNLOCKED; } while(0)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#271: FILE: include/asm-sparc/spinlock_types.h:1:
+#ifndef __ASM_SPARC_SPINLOCK_TYPES_H

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#282: FILE: include/asm-sparc/spinlock_types.h:12:
+};
+typedef struct _spinlock_debug spinlock_t;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:NEW_TYPEDEFS: do not add new typedefs
#282: FILE: include/asm-sparc/spinlock_types.h:12:
+typedef struct _spinlock_debug spinlock_t;

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#284: FILE: include/asm-sparc/spinlock_types.h:14:
+#define SPIN_LOCK_UNLOCKED	(spinlock_t) { 0, 0 }

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#285: FILE: include/asm-sparc/spinlock_types.h:15:
+#define spin_lock_init(lp)	do { *(lp)= SPIN_LOCK_UNLOCKED; } while(0)
                           	          ^

ERROR:SPACING: space required before the open parenthesis '('
#285: FILE: include/asm-sparc/spinlock_types.h:15:
+#define spin_lock_init(lp)	do { *(lp)= SPIN_LOCK_UNLOCKED; } while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#285: FILE: include/asm-sparc/spinlock_types.h:15:
+#define spin_lock_init(lp)	do { *(lp)= SPIN_LOCK_UNLOCKED; } while(0)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#288: FILE: include/asm-sparc/spinlock_types.h:18:
+	volatile unsigned int lock;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#292: FILE: include/asm-sparc/spinlock_types.h:22:
+};
+typedef struct _rwlock_debug rwlock_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#292: FILE: include/asm-sparc/spinlock_types.h:22:
+typedef struct _rwlock_debug rwlock_t;

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#294: FILE: include/asm-sparc/spinlock_types.h:24:
+#define RW_LOCK_UNLOCKED (rwlock_t) { 0, 0, {0} }

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#296: FILE: include/asm-sparc/spinlock_types.h:26:
+#define rwlock_init(lp)	do { *(lp)= RW_LOCK_UNLOCKED; } while(0)
                        	          ^

ERROR:SPACING: space required before the open parenthesis '('
#296: FILE: include/asm-sparc/spinlock_types.h:26:
+#define rwlock_init(lp)	do { *(lp)= RW_LOCK_UNLOCKED; } while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#296: FILE: include/asm-sparc/spinlock_types.h:26:
+#define rwlock_init(lp)	do { *(lp)= RW_LOCK_UNLOCKED; } while(0)

WARNING:NEW_TYPEDEFS: do not add new typedefs
#300: FILE: include/asm-sparc/spinlock_types.h:30:
+typedef unsigned char spinlock_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#305: FILE: include/asm-sparc/spinlock_types.h:35:
+typedef struct { volatile unsigned int lock; } rwlock_t;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#305: FILE: include/asm-sparc/spinlock_types.h:35:
+typedef struct { volatile unsigned int lock; } rwlock_t;

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#307: FILE: include/asm-sparc/spinlock_types.h:37:
+#define RW_LOCK_UNLOCKED (rwlock_t) { 0 }

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#309: FILE: include/asm-sparc/spinlock_types.h:39:
+#define rwlock_init(lp)	do { *(lp)= RW_LOCK_UNLOCKED; } while(0)
                        	          ^

ERROR:SPACING: space required before the open parenthesis '('
#309: FILE: include/asm-sparc/spinlock_types.h:39:
+#define rwlock_init(lp)	do { *(lp)= RW_LOCK_UNLOCKED; } while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#309: FILE: include/asm-sparc/spinlock_types.h:39:
+#define rwlock_init(lp)	do { *(lp)= RW_LOCK_UNLOCKED; } while(0)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#321: FILE: include/linux/spinlock_types.h:1:
+#ifndef __LINUX_SPINLOCK_TYPES_H

WARNING:NEW_TYPEDEFS: do not add new typedefs
#331: FILE: include/linux/spinlock_types.h:11:
+typedef struct {

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#333: FILE: include/linux/spinlock_types.h:13:
+	volatile unsigned long lock;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#334: FILE: include/linux/spinlock_types.h:14:
+	volatile unsigned int babble;

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#339: FILE: include/linux/spinlock_types.h:19:
+#define SPIN_LOCK_UNLOCKED (spinlock_t) { SPINLOCK_MAGIC, 0, 10, __FILE__ , NULL, 0}
                                                                           ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#339: FILE: include/linux/spinlock_types.h:19:
+#define SPIN_LOCK_UNLOCKED (spinlock_t) { SPINLOCK_MAGIC, 0, 10, __FILE__ , NULL, 0}

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#350: FILE: include/linux/spinlock_types.h:30:
+}
+#define spin_lock_init(lock) __spin_lock_init(lock, __FILE__)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#358: FILE: include/linux/spinlock_types.h:38:
+  typedef struct { } spinlock_t;$

WARNING:NEW_TYPEDEFS: do not add new typedefs
#358: FILE: include/linux/spinlock_types.h:38:
+  typedef struct { } spinlock_t;

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#359: FILE: include/linux/spinlock_types.h:39:
+  #define SPIN_LOCK_UNLOCKED (spinlock_t) { }

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#361: FILE: include/linux/spinlock_types.h:41:
+  typedef struct { int gcc_is_buggy; } spinlock_t;$

WARNING:NEW_TYPEDEFS: do not add new typedefs
#361: FILE: include/linux/spinlock_types.h:41:
+  typedef struct { int gcc_is_buggy; } spinlock_t;

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#362: FILE: include/linux/spinlock_types.h:42:
+  #define SPIN_LOCK_UNLOCKED (spinlock_t) { 0 }

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#374: FILE: include/linux/spinlock_types.h:54:
+  typedef struct { } rwlock_t;$

WARNING:NEW_TYPEDEFS: do not add new typedefs
#374: FILE: include/linux/spinlock_types.h:54:
+  typedef struct { } rwlock_t;

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#375: FILE: include/linux/spinlock_types.h:55:
+  #define RW_LOCK_UNLOCKED (rwlock_t) { }

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#377: FILE: include/linux/spinlock_types.h:57:
+  typedef struct { int gcc_is_buggy; } rwlock_t;$

WARNING:NEW_TYPEDEFS: do not add new typedefs
#377: FILE: include/linux/spinlock_types.h:57:
+  typedef struct { int gcc_is_buggy; } rwlock_t;

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#378: FILE: include/linux/spinlock_types.h:58:
+  #define RW_LOCK_UNLOCKED (rwlock_t) { 0 }

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#393: FILE: include/asm-v850/spinlock_types.h:1:
+#ifndef __ASM_V850_SPINLOCK_TYPES_H

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#402: FILE: include/asm-sparc64/spinlock_types.h:1:
+#ifndef __ASM_SPARC64_SPINLOCK_TYPES_H

WARNING:NEW_TYPEDEFS: do not add new typedefs
#409: FILE: include/asm-sparc64/spinlock_types.h:8:
+typedef unsigned char spinlock_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#414: FILE: include/asm-sparc64/spinlock_types.h:13:
+typedef unsigned int rwlock_t;

ERROR:SPACING: space required before the open parenthesis '('
#416: FILE: include/asm-sparc64/spinlock_types.h:15:
+#define rwlock_init(lp) do { *(lp) = RW_LOCK_UNLOCKED; } while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#416: FILE: include/asm-sparc64/spinlock_types.h:15:
+#define rwlock_init(lp) do { *(lp) = RW_LOCK_UNLOCKED; } while(0)

WARNING:NEW_TYPEDEFS: do not add new typedefs
#420: FILE: include/asm-sparc64/spinlock_types.h:19:
+typedef struct {

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#424: FILE: include/asm-sparc64/spinlock_types.h:23:
+#define SPIN_LOCK_UNLOCKED (spinlock_t) { 0, 0, 0xff }

CHECK:MACRO_ARG_REUSE: Macro argument reuse '__lock' - possible side-effects?
#425: FILE: include/asm-sparc64/spinlock_types.h:24:
+#define spin_lock_init(__lock)	\
+do {	(__lock)->lock = 0; \
+	(__lock)->owner_pc = 0; \
+	(__lock)->owner_cpu = 0xff; \
+} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#429: FILE: include/asm-sparc64/spinlock_types.h:28:
+} while(0)

WARNING:NEW_TYPEDEFS: do not add new typedefs
#431: FILE: include/asm-sparc64/spinlock_types.h:30:
+typedef struct {

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#436: FILE: include/asm-sparc64/spinlock_types.h:35:
+#define RW_LOCK_UNLOCKED	(rwlock_t) { 0, 0, 0xff, { } }

ERROR:SPACING: space required before the open parenthesis '('
#437: FILE: include/asm-sparc64/spinlock_types.h:36:
+#define rwlock_init(lp) do { *(lp) = RW_LOCK_UNLOCKED; } while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#437: FILE: include/asm-sparc64/spinlock_types.h:36:
+#define rwlock_init(lp) do { *(lp) = RW_LOCK_UNLOCKED; } while(0)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#449: FILE: include/asm-um/spinlock_types.h:1:
+#ifndef __ASM_UM_SPINLOCK_TYPES_H

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#460: FILE: include/asm-sh/spinlock_types.h:1:
+#ifndef __ASM_SH_SPINLOCK_TYPES_H

WARNING:NEW_TYPEDEFS: do not add new typedefs
#465: FILE: include/asm-sh/spinlock_types.h:6:
+typedef struct {

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#466: FILE: include/asm-sh/spinlock_types.h:7:
+	volatile unsigned long lock;

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#469: FILE: include/asm-sh/spinlock_types.h:10:
+#define SPIN_LOCK_UNLOCKED	(spinlock_t) { 0 }

ERROR:SPACING: space required before the open parenthesis '('
#471: FILE: include/asm-sh/spinlock_types.h:12:
+#define spin_lock_init(x)	do { *(x) = SPIN_LOCK_UNLOCKED; } while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#471: FILE: include/asm-sh/spinlock_types.h:12:
+#define spin_lock_init(x)	do { *(x) = SPIN_LOCK_UNLOCKED; } while(0)

WARNING:NEW_TYPEDEFS: do not add new typedefs
#473: FILE: include/asm-sh/spinlock_types.h:14:
+typedef struct {

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#474: FILE: include/asm-sh/spinlock_types.h:15:
+	spinlock_t lock;

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#479: FILE: include/asm-sh/spinlock_types.h:20:
+#define RW_LOCK_UNLOCKED	(rwlock_t) { { 0 }, { RW_LOCK_BIAS } }

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#480: FILE: include/asm-sh/spinlock_types.h:21:
+#define rwlock_init(x)		do { *(x) = RW_LOCK_UNLOCKED; } while (0)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#490: FILE: include/asm-m68knommu/spinlock_types.h:1:
+#ifndef __ASM_M68KNOMMU_SPINLOCK_TYPES_H

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#501: FILE: include/asm-m68k/spinlock_types.h:1:
+#ifndef __ASM_M68K_SPINLOCK_TYPES_H

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#510: FILE: include/asm-ia64/spinlock_types.h:1:
+#ifndef __ASM_IA64_SPINLOCK_TYPES_H

WARNING:NEW_TYPEDEFS: do not add new typedefs
#515: FILE: include/asm-ia64/spinlock_types.h:6:
+typedef struct {

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#516: FILE: include/asm-ia64/spinlock_types.h:7:
+	volatile unsigned int lock;

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#519: FILE: include/asm-ia64/spinlock_types.h:10:
+#define SPIN_LOCK_UNLOCKED			(spinlock_t) { 0 }

WARNING:NEW_TYPEDEFS: do not add new typedefs
#522: FILE: include/asm-ia64/spinlock_types.h:13:
+typedef struct {

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#523: FILE: include/asm-ia64/spinlock_types.h:14:
+	volatile int read_counter	: 31;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#524: FILE: include/asm-ia64/spinlock_types.h:15:
+	volatile int write_lock		:  1;

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#526: FILE: include/asm-ia64/spinlock_types.h:17:
+#define RW_LOCK_UNLOCKED (rwlock_t) { 0, 0 }

ERROR:SPACING: space required before the open parenthesis '('
#528: FILE: include/asm-ia64/spinlock_types.h:19:
+#define rwlock_init(x)		do { *(x) = RW_LOCK_UNLOCKED; } while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#528: FILE: include/asm-ia64/spinlock_types.h:19:
+#define rwlock_init(x)		do { *(x) = RW_LOCK_UNLOCKED; } while(0)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#538: FILE: include/asm-cris/spinlock_types.h:1:
+#ifndef __ASM_CRIS_SPINLOCK_TYPES_H

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#627: FILE: include/asm-sh64/spinlock_types.h:1:
+#ifndef __ASM_SH64_SPINLOCK_TYPES_H

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#670: FILE: include/asm-arm26/spinlock_types.h:1:
+#ifndef __ASM_ARM26_SPINLOCK_TYPES_H

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#735: FILE: include/asm-x86_64/spinlock_types.h:1:
+#ifndef __ASM_X86_64_SPINLOCK_TYPES_H

WARNING:NEW_TYPEDEFS: do not add new typedefs
#740: FILE: include/asm-x86_64/spinlock_types.h:6:
+typedef struct {

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#741: FILE: include/asm-x86_64/spinlock_types.h:7:
+	volatile unsigned int lock;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#743: FILE: include/asm-x86_64/spinlock_types.h:9:
+	unsigned magic;

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#750: FILE: include/asm-x86_64/spinlock_types.h:16:
+#define SPINLOCK_MAGIC_INIT	, SPINLOCK_MAGIC
                            	^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#750: FILE: include/asm-x86_64/spinlock_types.h:16:
+#define SPINLOCK_MAGIC_INIT	, SPINLOCK_MAGIC

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#755: FILE: include/asm-x86_64/spinlock_types.h:21:
+#define SPIN_LOCK_UNLOCKED (spinlock_t) { 1 SPINLOCK_MAGIC_INIT }

ERROR:SPACING: space required before the open parenthesis '('
#757: FILE: include/asm-x86_64/spinlock_types.h:23:
+#define spin_lock_init(x)	do { *(x) = SPIN_LOCK_UNLOCKED; } while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#757: FILE: include/asm-x86_64/spinlock_types.h:23:
+#define spin_lock_init(x)	do { *(x) = SPIN_LOCK_UNLOCKED; } while(0)

WARNING:NEW_TYPEDEFS: do not add new typedefs
#759: FILE: include/asm-x86_64/spinlock_types.h:25:
+typedef struct {

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#760: FILE: include/asm-x86_64/spinlock_types.h:26:
+	volatile unsigned int lock;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#762: FILE: include/asm-x86_64/spinlock_types.h:28:
+	unsigned magic;

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#769: FILE: include/asm-x86_64/spinlock_types.h:35:
+#define RWLOCK_MAGIC_INIT	, RWLOCK_MAGIC
                          	^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#769: FILE: include/asm-x86_64/spinlock_types.h:35:
+#define RWLOCK_MAGIC_INIT	, RWLOCK_MAGIC

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#777: FILE: include/asm-x86_64/spinlock_types.h:43:
+#define RW_LOCK_UNLOCKED (rwlock_t) { RW_LOCK_BIAS RWLOCK_MAGIC_INIT }

ERROR:SPACING: space required before the open parenthesis '('
#779: FILE: include/asm-x86_64/spinlock_types.h:45:
+#define rwlock_init(x)	do { *(x) = RW_LOCK_UNLOCKED; } while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#779: FILE: include/asm-x86_64/spinlock_types.h:45:
+#define rwlock_init(x)	do { *(x) = RW_LOCK_UNLOCKED; } while(0)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#789: FILE: include/asm-ppc/spinlock_types.h:1:
+#ifndef __ASM_PPC_SPINLOCK_TYPES_H

WARNING:NEW_TYPEDEFS: do not add new typedefs
#794: FILE: include/asm-ppc/spinlock_types.h:6:
+typedef struct {

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#795: FILE: include/asm-ppc/spinlock_types.h:7:
+	volatile unsigned long lock;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#797: FILE: include/asm-ppc/spinlock_types.h:9:
+	volatile unsigned long owner_pc;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#798: FILE: include/asm-ppc/spinlock_types.h:10:
+	volatile unsigned long owner_cpu;

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#804: FILE: include/asm-ppc/spinlock_types.h:16:
+#define SPINLOCK_DEBUG_INIT     , 0, 0
                                 ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#804: FILE: include/asm-ppc/spinlock_types.h:16:
+#define SPINLOCK_DEBUG_INIT     , 0, 0

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#809: FILE: include/asm-ppc/spinlock_types.h:21:
+#define SPIN_LOCK_UNLOCKED	(spinlock_t) { 0 SPINLOCK_DEBUG_INIT }

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#811: FILE: include/asm-ppc/spinlock_types.h:23:
+#define spin_lock_init(x) ^Ido { *(x) = SPIN_LOCK_UNLOCKED; } while(0)$

ERROR:SPACING: space required before the open parenthesis '('
#811: FILE: include/asm-ppc/spinlock_types.h:23:
+#define spin_lock_init(x) 	do { *(x) = SPIN_LOCK_UNLOCKED; } while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#811: FILE: include/asm-ppc/spinlock_types.h:23:
+#define spin_lock_init(x) 	do { *(x) = SPIN_LOCK_UNLOCKED; } while(0)

WARNING:NEW_TYPEDEFS: do not add new typedefs
#813: FILE: include/asm-ppc/spinlock_types.h:25:
+typedef struct {

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#814: FILE: include/asm-ppc/spinlock_types.h:26:
+	volatile unsigned long lock;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#816: FILE: include/asm-ppc/spinlock_types.h:28:
+	volatile unsigned long owner_pc;

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#821: FILE: include/asm-ppc/spinlock_types.h:33:
+#define RWLOCK_DEBUG_INIT     , 0
                               ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#821: FILE: include/asm-ppc/spinlock_types.h:33:
+#define RWLOCK_DEBUG_INIT     , 0

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#826: FILE: include/asm-ppc/spinlock_types.h:38:
+#define RW_LOCK_UNLOCKED (rwlock_t) { 0 RWLOCK_DEBUG_INIT }

ERROR:SPACING: space required before the open parenthesis '('
#827: FILE: include/asm-ppc/spinlock_types.h:39:
+#define rwlock_init(lp) do { *(lp) = RW_LOCK_UNLOCKED; } while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#827: FILE: include/asm-ppc/spinlock_types.h:39:
+#define rwlock_init(lp) do { *(lp) = RW_LOCK_UNLOCKED; } while(0)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#837: FILE: include/asm-parisc/spinlock_types.h:1:
+#ifndef __ASM_PARISC_SPINLOCK_TYPES_H

WARNING:NEW_TYPEDEFS: do not add new typedefs
#846: FILE: include/asm-parisc/spinlock_types.h:10:
+typedef struct {

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#847: FILE: include/asm-parisc/spinlock_types.h:11:
+	volatile unsigned int lock[4];

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#850: FILE: include/asm-parisc/spinlock_types.h:14:
+	volatile unsigned int babble;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#856: FILE: include/asm-parisc/spinlock_types.h:20:
+	struct task_struct * task;

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".data.lock_aligned") over __attribute__((__section__(".data.lock_aligned")))
#860: FILE: include/asm-parisc/spinlock_types.h:24:
+#define __lock_aligned __attribute__((__section__(".data.lock_aligned")))

CHECK:SPACING: No space is necessary after a cast
#866: FILE: include/asm-parisc/spinlock_types.h:30:
+#define SPIN_LOCK_UNLOCKED (spinlock_t) __SPIN_LOCK_UNLOCKED

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#866: FILE: include/asm-parisc/spinlock_types.h:30:
+#define SPIN_LOCK_UNLOCKED (spinlock_t) __SPIN_LOCK_UNLOCKED

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#872: FILE: include/asm-parisc/spinlock_types.h:36:
+#define __SPIN_LOCK_UNLOCKED	{ { 1, 1, 1, 1 }, SPINLOCK_MAGIC, 10, __FILE__ , NULL, 0, -1, NULL, NULL }

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#872: FILE: include/asm-parisc/spinlock_types.h:36:
+#define __SPIN_LOCK_UNLOCKED	{ { 1, 1, 1, 1 }, SPINLOCK_MAGIC, 10, __FILE__ , NULL, 0, -1, NULL, NULL }
                             	                                               ^

CHECK:SPACING: No space is necessary after a cast
#874: FILE: include/asm-parisc/spinlock_types.h:38:
+#define SPIN_LOCK_UNLOCKED (spinlock_t) __SPIN_LOCK_UNLOCKED

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#874: FILE: include/asm-parisc/spinlock_types.h:38:
+#define SPIN_LOCK_UNLOCKED (spinlock_t) __SPIN_LOCK_UNLOCKED

ERROR:SPACING: space required before the open parenthesis '('
#878: FILE: include/asm-parisc/spinlock_types.h:42:
+#define spin_lock_init(x)	do { *(x) = SPIN_LOCK_UNLOCKED; } while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#878: FILE: include/asm-parisc/spinlock_types.h:42:
+#define spin_lock_init(x)	do { *(x) = SPIN_LOCK_UNLOCKED; } while(0)

WARNING:NEW_TYPEDEFS: do not add new typedefs
#880: FILE: include/asm-parisc/spinlock_types.h:44:
+typedef struct {

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#881: FILE: include/asm-parisc/spinlock_types.h:45:
+	spinlock_t lock;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#882: FILE: include/asm-parisc/spinlock_types.h:46:
+	volatile int counter;

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#885: FILE: include/asm-parisc/spinlock_types.h:49:
+#define RW_LOCK_UNLOCKED (rwlock_t) { __SPIN_LOCK_UNLOCKED, 0 }

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#887: FILE: include/asm-parisc/spinlock_types.h:51:
+#define rwlock_init(lp)	do { *(lp) = RW_LOCK_UNLOCKED; } while (0)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#897: FILE: include/asm-arm/spinlock_types.h:1:
+#ifndef __ASM_ARM_SPINLOCK_TYPES_H

WARNING:NEW_TYPEDEFS: do not add new typedefs
#902: FILE: include/asm-arm/spinlock_types.h:6:
+typedef struct {

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#903: FILE: include/asm-arm/spinlock_types.h:7:
+	volatile unsigned int lock;

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#906: FILE: include/asm-arm/spinlock_types.h:10:
+#define SPIN_LOCK_UNLOCKED	(spinlock_t) { 0 }

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#908: FILE: include/asm-arm/spinlock_types.h:12:
+#define spin_lock_init(x)	do { *(x) = SPIN_LOCK_UNLOCKED; } while (0)

WARNING:NEW_TYPEDEFS: do not add new typedefs
#910: FILE: include/asm-arm/spinlock_types.h:14:
+typedef struct {

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#911: FILE: include/asm-arm/spinlock_types.h:15:
+	volatile unsigned int lock;

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#914: FILE: include/asm-arm/spinlock_types.h:18:
+#define RW_LOCK_UNLOCKED	(rwlock_t) { 0 }

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#915: FILE: include/asm-arm/spinlock_types.h:19:
+#define rwlock_init(x)		do { *(x) + RW_LOCK_UNLOCKED; } while (0)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000241482.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 73 errors, 126 warnings, 9 checks, 1177 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000241482.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
