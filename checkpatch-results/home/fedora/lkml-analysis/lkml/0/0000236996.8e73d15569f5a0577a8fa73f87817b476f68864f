WARNING:TYPO_SPELLING: 'seperate' may be misspelled - perhaps 'separate'?
#41: 
Requests arriving after the first drain will get stuck in a seperate
                                                            ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#86: FILE: drivers/block/elevator.c:173:
+	printk(KERN_INFO "elevator: using %s as default io scheduler\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#87: FILE: drivers/block/elevator.c:174:
+	printk(KERN_INFO "elevator: using %s as default io scheduler\n",
+							chosen_elevator);

CHECK:BRACES: Unbalanced braces around else statement
#146: FILE: drivers/block/elevator.c:304:
+	} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#161: FILE: drivers/block/elevator.c:364:
+			printk(KERN_ERR "%s: bad return=%d\n", __FUNCTION__,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#161: FILE: drivers/block/elevator.c:364:
+			printk(KERN_ERR "%s: bad return=%d\n", __FUNCTION__,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#162: FILE: drivers/block/elevator.c:365:
+			printk(KERN_ERR "%s: bad return=%d\n", __FUNCTION__,
+								ret);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#171: FILE: drivers/block/elevator.c:518:
+	printk(KERN_INFO "io scheduler %s registered\n", e->elevator_name);

ERROR:CODE_INDENT: code indent should use tabs where possible
#211: FILE: drivers/block/elevator.c:562:
+ ^I * next step, switch to noop since it uses no private rq structures$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#211: FILE: drivers/block/elevator.c:562:
+ ^I * next step, switch to noop since it uses no private rq structures$

ERROR:CODE_INDENT: code indent should use tabs where possible
#214: FILE: drivers/block/elevator.c:565:
+ ^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#214: FILE: drivers/block/elevator.c:565:
+ ^I */$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#243: FILE: drivers/block/elevator.c:604:
+	printk(KERN_ERR "elevator: switch to %s failed\n",new_e->elevator_name);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#243: FILE: drivers/block/elevator.c:604:
+	printk(KERN_ERR "elevator: switch to %s failed\n",new_e->elevator_name);
 	                                                 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#255: FILE: drivers/block/elevator.c:620:
+		printk(KERN_ERR "elevator: type %s not found\n", elevator_name);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#350: FILE: include/linux/blkdev.h:609:
+extern void blk_wait_queue_drained(request_queue_t *, int);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'request_queue_t *' should also have an identifier name
#350: FILE: include/linux/blkdev.h:609:
+extern void blk_wait_queue_drained(request_queue_t *, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#350: FILE: include/linux/blkdev.h:609:
+extern void blk_wait_queue_drained(request_queue_t *, int);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000236996.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 3 errors, 11 warnings, 4 checks, 282 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000236996.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
