CHECK:LINE_SPACING: Please don't use multiple blank lines
#54: FILE: drivers/input/input.c:309:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#77: FILE: drivers/input/input.c:441:
+	int state = input_devices_state;
+	poll_wait(file, &input_devices_poll_wait, wait);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'bit' - possible side-effects?
#83: FILE: drivers/input/input.c:447:
+#define SPRINTF_BIT_B(bit, name, max) \
+	do { \
+		len += sprintf(buf + len, "B: %s", name); \
+		for (i = NBITS(max) - 1; i >= 0; i--) \
+			if (dev->bit[i]) break; \
+		for (; i >= 0; i--) \
+			len += sprintf(buf + len, "%lx ", dev->bit[i]); \
+		len += sprintf(buf + len, "\n"); \
+	} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'bit' may be better as '(bit)' to avoid precedence issues
#83: FILE: drivers/input/input.c:447:
+#define SPRINTF_BIT_B(bit, name, max) \
+	do { \
+		len += sprintf(buf + len, "B: %s", name); \
+		for (i = NBITS(max) - 1; i >= 0; i--) \
+			if (dev->bit[i]) break; \
+		for (; i >= 0; i--) \
+			len += sprintf(buf + len, "%lx ", dev->bit[i]); \
+		len += sprintf(buf + len, "\n"); \
+	} while (0)

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#87: FILE: drivers/input/input.c:451:
+			if (dev->bit[i]) break; \

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#108: FILE: drivers/input/input.c:472:
+	list_for_each_entry(dev, &input_dev_list, node) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#110: FILE: drivers/input/input.c:474:
+		len = sprintf(buf, "I: Bus=%04x Vendor=%04x Product=%04x Version=%04x\n",
+			dev->id.bustype, dev->id.vendor, dev->id.product, dev->id.version);

CHECK:BRACES: braces {} should be used on all arms of this statement
#135: FILE: drivers/input/input.c:499:
+			if (!*start) {
[...]
+			} else  cnt += len;
[...]

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#138: FILE: drivers/input/input.c:502:
+			} else  cnt += len;

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#160: FILE: drivers/input/input.c:524:
+	list_for_each_entry(handler, &input_handler_list, node) {
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#163: FILE: drivers/input/input.c:527:
+			len = sprintf(buf, "N: Number=%d Name=%s Minor=%d\n",
+				i++, handler->name, handler->minor);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#166: FILE: drivers/input/input.c:530:
+			len = sprintf(buf, "N: Number=%d Name=%s\n",
+				i++, handler->name);

CHECK:BRACES: braces {} should be used on all arms of this statement
#171: FILE: drivers/input/input.c:535:
+			if (!*start) {
[...]
+			} else  cnt += len;
[...]

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#174: FILE: drivers/input/input.c:538:
+			} else  cnt += len;

WARNING:CONST_STRUCT: struct file_operations should normally be const
#186: FILE: drivers/input/input.c:550:
+static struct file_operations input_fileops;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#207: FILE: drivers/input/input.c:571:
+	entry = create_proc_read_entry("handlers", 0, proc_bus_input_dir, input_handlers_read, NULL);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#365: FILE: drivers/input/input.c:747:
+		printk(KERN_ERR "input: unable to register input class\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#408: FILE: drivers/input/input.c:757:
+		printk(KERN_ERR "input: unable to register char major %d", INPUT_MAJOR);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000165849.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 3 errors, 5 warnings, 10 checks, 452 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000165849.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
