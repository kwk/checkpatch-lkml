ERROR:TRAILING_WHITESPACE: trailing whitespace
#71: FILE: drivers/md/dm.c:143:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#440: FILE: fs/bio.c:77:
+static inline struct bio_vec *bvec_alloc_bs(int gfp_mask, int nr, unsigned long *idx, struct bio_set *bs)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:LINE_SPACING: Please don't use multiple blank lines
#554: FILE: fs/bio.c:932:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#571: FILE: fs/bio.c:949:
+		*bvp = mempool_create(pool_entries, mempool_alloc_slab,
+					mempool_free_slab, bp->slab);

WARNING:NEEDLESS_IF: mempool_destroy(NULL) is safe and this check is probably not required
#586: FILE: fs/bio.c:964:
+		if (bvp)
+			mempool_destroy(bvp);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#588: FILE: fs/bio.c:966:
+^I$

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#589: FILE: fs/bio.c:967:
+	
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:NEEDLESS_IF: mempool_destroy(NULL) is safe and this check is probably not required
#594: FILE: fs/bio.c:972:
+	if (bs->bio_pool)
+		mempool_destroy(bs->bio_pool);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#611: FILE: fs/bio.c:988:
+	bs->bio_pool = mempool_create(bio_pool_size, mempool_alloc_slab,
+			mempool_free_slab, bio_slab);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#613: FILE: fs/bio.c:990:
+^Iif (!bs->bio_pool) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#615: FILE: fs/bio.c:992:
+^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#634: FILE: fs/bio.c:1011:
+                                SLAB_HWCACHE_ALIGN|SLAB_PANIC, NULL, NULL);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#634: FILE: fs/bio.c:1011:
+		bvs->slab = kmem_cache_create(bvs->name, size, 0,
+                                SLAB_HWCACHE_ALIGN|SLAB_PANIC, NULL, NULL);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#634: FILE: fs/bio.c:1011:
+                                SLAB_HWCACHE_ALIGN|SLAB_PANIC, NULL, NULL);$

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#634: FILE: fs/bio.c:1011:
+                                SLAB_HWCACHE_ALIGN|SLAB_PANIC, NULL, NULL);
                                                   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#644: FILE: fs/bio.c:1021:
+	bio_slab = kmem_cache_create("bio", sizeof(struct bio), 0,
+				SLAB_HWCACHE_ALIGN|SLAB_PANIC, NULL, NULL);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#644: FILE: fs/bio.c:1021:
+				SLAB_HWCACHE_ALIGN|SLAB_PANIC, NULL, NULL);
 				                  ^

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#702: FILE: fs/bio.c:1080:
+EXPORT_SYMBOL(bioset_free);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#703: FILE: fs/bio.c:1081:
+EXPORT_SYMBOL(bio_alloc_bioset);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#727: FILE: include/linux/bio.h:263:
+extern struct bio_set *bioset_create(int, int, int);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#727: FILE: include/linux/bio.h:263:
+extern struct bio_set *bioset_create(int, int, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#727: FILE: include/linux/bio.h:263:
+extern struct bio_set *bioset_create(int, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#727: FILE: include/linux/bio.h:263:
+extern struct bio_set *bioset_create(int, int, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#728: FILE: include/linux/bio.h:264:
+extern void bioset_free(struct bio_set *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct bio_set *' should also have an identifier name
#728: FILE: include/linux/bio.h:264:
+extern void bioset_free(struct bio_set *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#731: FILE: include/linux/bio.h:267:
+extern struct bio *bio_alloc_bioset(int, int, struct bio_set *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#731: FILE: include/linux/bio.h:267:
+extern struct bio *bio_alloc_bioset(int, int, struct bio_set *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#731: FILE: include/linux/bio.h:267:
+extern struct bio *bio_alloc_bioset(int, int, struct bio_set *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct bio_set *' should also have an identifier name
#731: FILE: include/linux/bio.h:267:
+extern struct bio *bio_alloc_bioset(int, int, struct bio_set *);

WARNING:LINE_SPACING: Missing a blank line after declarations
#748: FILE: include/linux/bio.h:346:
+		char *data = bvec_kmap_irq(bv, &flags);
+		memset(data, 0, bv->bv_len);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000210040.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 5 errors, 14 warnings, 11 checks, 669 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000210040.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
