WARNING:SPACING: Unnecessary space before function pointer arguments
#40: FILE: include/linux/fs.h:1015:
+	int (*statfs) (struct dentry *, struct kstatfs *);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#40: FILE: include/linux/fs.h:1015:
+	int (*statfs) (struct dentry *, struct kstatfs *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kstatfs *' should also have an identifier name
#40: FILE: include/linux/fs.h:1015:
+	int (*statfs) (struct dentry *, struct kstatfs *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#50: FILE: include/linux/fs.h:1262:
+extern int vfs_dentry_statfs(struct dentry *, struct kstatfs *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#50: FILE: include/linux/fs.h:1262:
+extern int vfs_dentry_statfs(struct dentry *, struct kstatfs *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kstatfs *' should also have an identifier name
#50: FILE: include/linux/fs.h:1262:
+extern int vfs_dentry_statfs(struct dentry *, struct kstatfs *);

CHECK:BRACES: braces {} should be used on all arms of this statement
#68: FILE: fs/open.c:57:
+	if (inode->i_op && inode->i_op->statfs) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#78: FILE: fs/open.c:67:
+	} else

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#84: FILE: fs/open.c:73:
+EXPORT_SYMBOL(vfs_dentry_statfs);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#116: FILE: fs/open.c:153:
+		error = vfs_statfs_native(nd.dentry, &tmp);
 		                          ^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#125: FILE: fs/open.c:172:
+		error = vfs_statfs64(nd.dentry, &tmp);
 		                     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#182: FILE: fs/compat.c:170:
+		error = vfs_dentry_statfs(nd.dentry, &tmp);
 		                          ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#200: FILE: fs/compat.c:238:
+		error = vfs_dentry_statfs(nd.dentry, &tmp);
 		                          ^^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000141643.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 0 errors, 10 warnings, 3 checks, 155 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000141643.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
