WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#49: FILE: drivers/char/eqnx/sst_tty.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#50: FILE: drivers/char/eqnx/sst_tty.c:2:
+/*
+

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#53: FILE: drivers/char/eqnx/sst_tty.c:4:
don't need config.h (autoconf.h is automatically #included)

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#64: FILE: drivers/char/eqnx/sst_tty.c:14:
+int eqnx_write_wakeup_deferred = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#74: FILE: drivers/char/eqnx/sst_tty.c:22:
+extern struct mpdev eqnx_dev[MAXSSP];

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#75: FILE: drivers/char/eqnx/sst_tty.c:23:
+extern struct mpchan *eqnx_chan;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#76: FILE: drivers/char/eqnx/sst_tty.c:24:
+extern struct datascope eqnx_dscope[2];

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#77: FILE: drivers/char/eqnx/sst_tty.c:25:
+extern char *eqnx_tmpwritebuf;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#78: FILE: drivers/char/eqnx/sst_tty.c:26:
+extern struct semaphore eqnx_tmpwritesem;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#80: FILE: drivers/char/eqnx/sst_tty.c:28:
+extern void eqnx_megaparam(int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#80: FILE: drivers/char/eqnx/sst_tty.c:28:
+extern void eqnx_megaparam(int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#81: FILE: drivers/char/eqnx/sst_tty.c:29:
+extern int eqnx_modem(int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#81: FILE: drivers/char/eqnx/sst_tty.c:29:
+extern int eqnx_modem(int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#81: FILE: drivers/char/eqnx/sst_tty.c:29:
+extern int eqnx_modem(int, int);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#82: FILE: drivers/char/eqnx/sst_tty.c:30:
+extern void eqnx_frame_wait(struct mpchan *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mpchan *' should also have an identifier name
#82: FILE: drivers/char/eqnx/sst_tty.c:30:
+extern void eqnx_frame_wait(struct mpchan *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#82: FILE: drivers/char/eqnx/sst_tty.c:30:
+extern void eqnx_frame_wait(struct mpchan *, int);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#83: FILE: drivers/char/eqnx/sst_tty.c:31:
+extern void eqnx_chnl_sync(struct mpchan *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mpchan *' should also have an identifier name
#83: FILE: drivers/char/eqnx/sst_tty.c:31:
+extern void eqnx_chnl_sync(struct mpchan *);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#84: FILE: drivers/char/eqnx/sst_tty.c:32:
+extern int SSTMINOR(unsigned int, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#84: FILE: drivers/char/eqnx/sst_tty.c:32:
+extern int SSTMINOR(unsigned int, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#84: FILE: drivers/char/eqnx/sst_tty.c:32:
+extern int SSTMINOR(unsigned int, unsigned int);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#85: FILE: drivers/char/eqnx/sst_tty.c:33:
+extern u32 eqnx_get_modem_info(struct mpchan *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mpchan *' should also have an identifier name
#85: FILE: drivers/char/eqnx/sst_tty.c:33:
+extern u32 eqnx_get_modem_info(struct mpchan *);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#86: FILE: drivers/char/eqnx/sst_tty.c:34:
+extern void eqnx_set_modem_info(struct mpchan *, unsigned int, unsigned

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mpchan *' should also have an identifier name
#86: FILE: drivers/char/eqnx/sst_tty.c:34:
+extern void eqnx_set_modem_info(struct mpchan *, unsigned int, unsigned

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#86: FILE: drivers/char/eqnx/sst_tty.c:34:
+extern void eqnx_set_modem_info(struct mpchan *, unsigned int, unsigned

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct tty_struct *' should also have an identifier name
#86: FILE: drivers/char/eqnx/sst_tty.c:34:
+extern void eqnx_set_modem_info(struct mpchan *, unsigned int, unsigned

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#91: FILE: drivers/char/eqnx/sst_tty.c:38:
+ * eqnx_open(tty, filp)
                   ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#96: FILE: drivers/char/eqnx/sst_tty.c:43:
+ * filp	= file structure.
    ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#103: FILE: drivers/char/eqnx/sst_tty.c:47:
+int eqnx_open(struct tty_struct *tty, struct file *filp)
                                                    ^^^^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'eqnx_nssps == 0'
#109: FILE: drivers/char/eqnx/sst_tty.c:52:
+	if ((d > (eqnx_nssps * MAXCHNL_BRD)) || (eqnx_nssps == 0) || (d
< 0))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'd
< 0'
#109: FILE: drivers/char/eqnx/sst_tty.c:52:
+	if ((d > (eqnx_nssps * MAXCHNL_BRD)) || (eqnx_nssps == 0) || (d
< 0))

WARNING:BRACES: braces {} are not necessary for single statement blocks
#115: FILE: drivers/char/eqnx/sst_tty.c:56:
+	if (tty->termios == NULL) {
+		*tty->termios = *mpc->normaltermios;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tty->termios"
#115: FILE: drivers/char/eqnx/sst_tty.c:56:
+	if (tty->termios == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#121: FILE: drivers/char/eqnx/sst_tty.c:61:
+void eqnx_close(struct tty_struct *tty, struct file *filp)
                                                      ^^^^

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#126: FILE: drivers/char/eqnx/sst_tty.c:65:
+{
+

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 1)
#128: FILE: drivers/char/eqnx/sst_tty.c:67:
+	if (tty == (struct tty_struct *)NULL)


ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#143: FILE: drivers/char/eqnx/sst_tty.c:80:
+	if ((mpd = mpc->mpc_mpd) == (struct mpdev *)NULL)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'mpd >= &eqnx_dev[eqnx_nssps]'
#150: FILE: drivers/char/eqnx/sst_tty.c:85:
+	if ((mpd >= &eqnx_dev[eqnx_nssps]) || (!(mpd->mpd_alive)) ||
+	    (nchan >= (int)mpd->mpd_nchan))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'nchan >= (int)mpd->mpd_nchan'
#150: FILE: drivers/char/eqnx/sst_tty.c:85:
+	if ((mpd >= &eqnx_dev[eqnx_nssps]) || (!(mpd->mpd_alive)) ||
+	    (nchan >= (int)mpd->mpd_nchan))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!eqnx_txcooktty"
#162: FILE: drivers/char/eqnx/sst_tty.c:96:
+	if (eqnx_txcooktty == NULL)

CHECK:BRACES: Unbalanced braces around else statement
#167: FILE: drivers/char/eqnx/sst_tty.c:100:
+	else {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#168: FILE: drivers/char/eqnx/sst_tty.c:101:
+	else {
+

WARNING:USE_LOCKDEP: Where possible, use lockdep_assert_held instead of assertions based on spin_is_locked
#170: FILE: drivers/char/eqnx/sst_tty.c:103:
+		if (!(spin_is_locked(&mpd->mpd_lock)))

lockdep_assert_held() annotations should be preferred over
assertions based on spin_is_locked()

See: https://www.kernel.org/doc/html/latest/locking/lockdep-design.html#annotations

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#184: FILE: drivers/char/eqnx/sst_tty.c:116:
+			dev_dbg(mpd->dev, "eqnx_flush_chars_locked: "
 			                                          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#191: FILE: drivers/char/eqnx/sst_tty.c:123:
+			dev_dbg(mpd->dev, "eqnx_flush_chars_locked: "
 			                                          ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#215: FILE: drivers/char/eqnx/sst_tty.c:145:
+			dev_dbg(mpd->dev, "eqnx_flush_chars: mpd lock "
 			                                   ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#255: FILE: drivers/char/eqnx/sst_tty.c:181:
+	dev_dbg(mpd->dev, "eqnx_throttle: device %d\n",
 	                                ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#255: FILE: drivers/char/eqnx/sst_tty.c:181:
+	dev_dbg(mpd->dev, "eqnx_throttle: device %d\n",
 	                                         ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#285: FILE: drivers/char/eqnx/sst_tty.c:205:
+		dev_dbg(mpd->dev, "eqnx_flush_buffer_locked: mpd lock not "
 		                                           ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#293: FILE: drivers/char/eqnx/sst_tty.c:213:
+	dev_dbg(mpd->dev, "eqnx_flush_buffer_locked: device = %d\n", d);
 	                                           ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#293: FILE: drivers/char/eqnx/sst_tty.c:213:
+	dev_dbg(mpd->dev, "eqnx_flush_buffer_locked: device = %d\n", d);
 	                                                      ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#413: FILE: drivers/char/eqnx/sst_tty.c:330:
+		dev_warn(mpc->mpc_mpd->dev, "chanoff: cpu_req ack failed.\n");
 		                                    ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#418: FILE: drivers/char/eqnx/sst_tty.c:334:
+ * delay_jiffies(len)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#419: FILE: drivers/char/eqnx/sst_tty.c:335:
+ *$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#420: FILE: drivers/char/eqnx/sst_tty.c:336:
+ * Delay by the specified number of jiffies.$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#421: FILE: drivers/char/eqnx/sst_tty.c:337:
+ *$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#422: FILE: drivers/char/eqnx/sst_tty.c:338:
+ * len^I= jiffies to delay.$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#423: FILE: drivers/char/eqnx/sst_tty.c:339:
+ */$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000061139.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 10 errors, 39 warnings, 11 checks, 388 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000061139.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
