WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#43: 
Content-Disposition: attachment; filename=preempt-kernel-ppc-rml-2.4.19-pre9-1.patch

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#54: FILE: arch/ppc/config.in:109:
S

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#118: FILE: arch/ppc/kernel/irq.c:570:
 }
+#ifdef CONFIG_PREEMPT

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#126: FILE: arch/ppc/kernel/irq.c:578:
+	switch(regs->trap) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#128: FILE: arch/ppc/kernel/irq.c:580:
+		ret =3D do_IRQ(regs);
 		    ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#135: FILE: arch/ppc/kernel/irq.c:587:
+		ret =3D timer_interrupt(regs);
 		    ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#138: FILE: arch/ppc/kernel/irq.c:590:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#179: FILE: arch/ppc/kernel/setup.c:511:
+		extern int preempt_intercept(struct pt_regs *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#179: FILE: arch/ppc/kernel/setup.c:511:
+		extern int preempt_intercept(struct pt_regs *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#180: FILE: arch/ppc/kernel/setup.c:512:
+=09
 ^

CHECK:SPACING: No space is necessary after a cast
#181: FILE: arch/ppc/kernel/setup.c:513:
+		do_IRQ_intercept =3D (unsigned long) &preempt_intercept;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#181: FILE: arch/ppc/kernel/setup.c:513:
+		do_IRQ_intercept =3D (unsigned long) &preempt_intercept;

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#181: FILE: arch/ppc/kernel/setup.c:513:
+		do_IRQ_intercept =3D (unsigned long) &preempt_intercept;
 		                 ^

CHECK:SPACING: spaces preferred around that '&' (ctx:WxV)
#181: FILE: arch/ppc/kernel/setup.c:513:
+		do_IRQ_intercept =3D (unsigned long) &preempt_intercept;
 		                                     ^

CHECK:SPACING: No space is necessary after a cast
#182: FILE: arch/ppc/kernel/setup.c:514:
+		timer_interrupt_intercept =3D (unsigned long) &preempt_intercept;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#182: FILE: arch/ppc/kernel/setup.c:514:
+		timer_interrupt_intercept =3D (unsigned long) &preempt_intercept;

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#182: FILE: arch/ppc/kernel/setup.c:514:
+		timer_interrupt_intercept =3D (unsigned long) &preempt_intercept;
 		                          ^

CHECK:SPACING: spaces preferred around that '&' (ctx:WxV)
#182: FILE: arch/ppc/kernel/setup.c:514:
+		timer_interrupt_intercept =3D (unsigned long) &preempt_intercept;
 		                                              ^

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#184: FILE: arch/ppc/kernel/setup.c:516:
+
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#271: FILE: include/asm-ppc/mmu_context.h:162:
+	if (preempt_get_count() =3D=3D 0)
 	                        ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#271: FILE: include/asm-ppc/mmu_context.h:162:
+	if (preempt_get_count() =3D=3D 0)
 	                           ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#271: FILE: include/asm-ppc/mmu_context.h:162:
+	if (preempt_get_count() =3D=3D 0)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#272: FILE: include/asm-ppc/mmu_context.h:163:
+		BUG();

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#358: FILE: include/asm-ppc/smplock.h:59:
+	if (current->lock_depth =3D=3D -1)
 	                        ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#358: FILE: include/asm-ppc/smplock.h:59:
+	if (current->lock_depth =3D=3D -1)
 	                           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#358: FILE: include/asm-ppc/smplock.h:59:
+	if (current->lock_depth =3D=3D -1)
 	                               ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#358: FILE: include/asm-ppc/smplock.h:59:
+	if (current->lock_depth =3D=3D -1)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000455417.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 13 errors, 7 warnings, 7 checks, 310 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000455417.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
