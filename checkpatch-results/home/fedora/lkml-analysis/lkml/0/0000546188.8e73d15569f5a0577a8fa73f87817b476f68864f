WARNING:TYPO_SPELLING: 'implememented' may be misspelled - perhaps 'implemented'?
#29: 
> > implememented by copying into the kernel and then copying out. 
    ^^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'EXTRAVERSION' may be misspelled - perhaps 'EXTROVERSION'?
#78: 
//  EXTRAVERSION =
    ^^^^^^^^^^^^

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#110: FILE: fs/pipe.c:49:
+pio_copy_to_user(struct kiobuf* iobuf, int offset, char* ubuf, int chars)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#110: FILE: fs/pipe.c:49:
+pio_copy_to_user(struct kiobuf* iobuf, int offset, char* ubuf, int chars)

WARNING:LINE_SPACING: Missing a blank line after declarations
#113: FILE: fs/pipe.c:52:
+	int page_nr;
+	offset += iobuf->offset;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#114: FILE: fs/pipe.c:53:
+	page_nr = offset/PAGE_SIZE;
 	                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#116: FILE: fs/pipe.c:55:
+	while(chars) {

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#117: FILE: fs/pipe.c:56:
+		int pcount = PAGE_SIZE-offset;
 		                      ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#119: FILE: fs/pipe.c:58:
+		void *kaddr;
+		if (pcount > chars)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#122: FILE: fs/pipe.c:61:
+		if (copy_to_user(ubuf, kaddr+offset, pcount))
 		                            ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#166: FILE: fs/pipe.c:92:
+		int chars = PIPE_LEN(*inode);
+		if (chars) {

ERROR:SPACING: space required before the open parenthesis '('
#173: FILE: fs/pipe.c:99:
+			if(PIPE_IS_PIO(*inode)) {

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#174: FILE: fs/pipe.c:100:
+				struct pipe_pio* pio = ((struct pipe_pio*)pipebuf);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#174: FILE: fs/pipe.c:100:
+				struct pipe_pio* pio = ((struct pipe_pio*)pipebuf);

WARNING:LINE_SPACING: Missing a blank line after declarations
#175: FILE: fs/pipe.c:101:
+				struct pipe_pio* pio = ((struct pipe_pio*)pipebuf);
+				if(pio_copy_to_user(&pio->iobuf, offset, buf, chars))

ERROR:SPACING: space required before the open parenthesis '('
#175: FILE: fs/pipe.c:101:
+				if(pio_copy_to_user(&pio->iobuf, offset, buf, chars))

ERROR:SPACING: space required before the open parenthesis '('
#179: FILE: fs/pipe.c:105:
+				if(!PIPE_LEN(*inode)) {

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#188: FILE: fs/pipe.c:114:
+				if (chars > PIPE_SIZE-offset)
 				                     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#189: FILE: fs/pipe.c:115:
+					chars = PIPE_SIZE-offset;
 					                 ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#190: FILE: fs/pipe.c:116:
+				if (copy_to_user(buf, pipebuf+offset, chars))
 				                             ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#208: FILE: fs/pipe.c:134:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#217: FILE: fs/pipe.c:143:
+		 * for writing */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:SPACING: space required before the open parenthesis '('
#352: FILE: fs/pipe.c:214:
+	for(;;) {

ERROR:SPACING: space required before the open parenthesis '('
#393: FILE: fs/pipe.c:220:
+		if(!PIPE_IS_PIO(*inode)) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#397: FILE: fs/pipe.c:224:
+^I^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#411: FILE: fs/pipe.c:238:
+			if (count > PIPE_BUF && chars == PIPE_SIZE &&
+				    (!(filp->f_flags & O_NONBLOCK))) {

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#412: FILE: fs/pipe.c:239:
+				struct pipe_pio* pio = (struct pipe_pio*)PIPE_BASE(*inode);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#412: FILE: fs/pipe.c:239:
+				struct pipe_pio* pio = (struct pipe_pio*)PIPE_BASE(*inode);

WARNING:LINE_SPACING: Missing a blank line after declarations
#413: FILE: fs/pipe.c:240:
+				struct pipe_pio* pio = (struct pipe_pio*)PIPE_BASE(*inode);
+				chars = KIO_MAX_ATOMIC_BYTES;

ERROR:SPACING: space required before the open parenthesis '('
#417: FILE: fs/pipe.c:244:
+				if(map_user_kiobuf(READ, &pio->iobuf, (unsigned long)buf, chars))

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#435: FILE: fs/pipe.c:262:
+				if (chars > PIPE_SIZE-offset)
 				                     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#436: FILE: fs/pipe.c:263:
+					chars = PIPE_SIZE-offset;
 					                 ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#437: FILE: fs/pipe.c:264:
+				if (copy_from_user(PIPE_BASE(*inode)+offset, buf, chars))
 				                                    ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#445: FILE: fs/pipe.c:272:
+^I^I^I^I$

ERROR:SPACING: space required before the open parenthesis '('
#446: FILE: fs/pipe.c:273:
+				if(!count)

ERROR:SPACING: space required before the open parenthesis '('
#450: FILE: fs/pipe.c:277:
+				if(PIPE_LEN(*inode) != PIPE_SIZE) {

ERROR:SPACING: space required before the open parenthesis '('
#466: FILE: fs/pipe.c:291:
+		if(do_wakeup) {

ERROR:SPACING: space required before the open parenthesis '('
#508: FILE: fs/pipe.c:312:
+	if(!pio_done) {

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#509: FILE: fs/pipe.c:313:
+		struct pipe_pio* pio = (struct pipe_pio*)PIPE_BASE(*inode);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#509: FILE: fs/pipe.c:313:
+		struct pipe_pio* pio = (struct pipe_pio*)PIPE_BASE(*inode);

WARNING:LINE_SPACING: Missing a blank line after declarations
#510: FILE: fs/pipe.c:314:
+		struct pipe_pio* pio = (struct pipe_pio*)PIPE_BASE(*inode);
+		PIPE_IS_PIO(*inode) = 0;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#517: FILE: fs/pipe.c:321:
+		inode->i_ctime = inode->i_mtime = CURRENT_TIME;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:SPACING: space required before the open parenthesis '('
#529: FILE: fs/pipe.c:328:
+	if(do_wakeup)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000546188.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 23 errors, 9 warnings, 11 checks, 498 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000546188.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
