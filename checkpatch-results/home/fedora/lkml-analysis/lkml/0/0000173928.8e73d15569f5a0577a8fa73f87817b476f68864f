WARNING:TYPO_SPELLING: 'fo' may be misspelled - perhaps 'of'?
#49: 
I've lightly tested against multi-port versions fo the sym53c8xx_2
                                                ^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

WARNING:TYPO_SPELLING: 'fof' may be misspelled - perhaps 'for'?
#69: FILE: linux/pci.h:665:
+ *  a set fof callbacks in struct pci_error_handlers, then that device driver
           ^^^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#80: FILE: linux/pci.h:676:
+	PCIERR_RESULT_NONE=0,        /* no result/none/not supported in device driver */
 	                  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#81: FILE: linux/pci.h:677:
+	PCIERR_RESULT_CAN_RECOVER=1, /* Device driver can recover without slot reset */
 	                         ^

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#89: FILE: linux/pci.h:685:
+struct pci_error_handlers
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#124: FILE: linux/pci.h:720:
+int peh_send_failure_event (struct pci_dev *dev,

ERROR:CODE_INDENT: code indent should use tabs where possible
#125: FILE: linux/pci.h:721:
+                            enum pci_channel_state state,$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#125: FILE: linux/pci.h:721:
+                            enum pci_channel_state state,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#126: FILE: linux/pci.h:722:
+                            int time_unavail);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#126: FILE: linux/pci.h:722:
+                            int time_unavail);$

WARNING:PATCH_PREFIX: patch prefix 'Documentation' exists, appears to be a -p0 patch

ERROR:TRAILING_WHITESPACE: trailing whitespace
#164: FILE: pci-error-recovery.txt:9:
+well as SERR and PERR errors.  These chipsets are then able to disable $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#165: FILE: pci-error-recovery.txt:10:
+I/O to/from the affected device, so that, for example, a bad DMA $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#168: FILE: pci-error-recovery.txt:13:
+working condition.  This document describes a generic API form $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#173: FILE: pci-error-recovery.txt:18:
+so that the pci card can be made operational again, possibly after $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#175: FILE: pci-error-recovery.txt:20:
+provides a generic API for device drivers to be notified of PCI $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#178: FILE: pci-error-recovery.txt:23:
+Preliminary sketch of API, cut-n-pasted-n-modified email from $

WARNING:TYPO_SPELLING: 'dependant' may be misspelled - perhaps 'dependent'?
#184: FILE: pci-error-recovery.txt:29:
+"non-aware" driver, behaviour on these is platform dependant. 
                                                    ^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#184: FILE: pci-error-recovery.txt:29:
+"non-aware" driver, behaviour on these is platform dependant. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#203: FILE: pci-error-recovery.txt:48:
+A driver doesn't have to implement all of these callbacks. The $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#204: FILE: pci-error-recovery.txt:49:
+only mandatory one is error_detected(). If a callback is not $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#205: FILE: pci-error-recovery.txt:50:
+implemented, the corresponding feature is considered unsupported. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#206: FILE: pci-error-recovery.txt:51:
+For example, if mmio_enabled() and resume() aren't there, then the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#207: FILE: pci-error-recovery.txt:52:
+driver is assumed as not doing any direct recovery and requires $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#209: FILE: pci-error-recovery.txt:54:
+not caring about link resets, in which case, if recover is supported, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#210: FILE: pci-error-recovery.txt:55:
+the core can try recover (but not slot_reset() unless it really did $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#211: FILE: pci-error-recovery.txt:56:
+reset the slot). If slot_reset() is not supported, link_reset() can $

WARNING:TYPO_SPELLING: 'informations' may be misspelled - perhaps 'information'?
#233: FILE: pci-error-recovery.txt:78:
+		  a chance to extract some diagnostic informations (see
 		                                      ^^^^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#252: FILE: pci-error-recovery.txt:97:
+>>> Current ppc64 implementation assumes that a device driver will $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#254: FILE: pci-error-recovery.txt:99:
+>>> implementation uses one kernel thread to notify all devices; $

WARNING:REPEATED_WORD: Possible repeated word: 'the'
#266: FILE: pci-error-recovery.txt:111:
+>>> it will panic the the kernel.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#276: FILE: pci-error-recovery.txt:121:
+agree that they can try to recover and no automatic link reset was $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#277: FILE: pci-error-recovery.txt:122:
+performed by the HW. If the platform can't just re-enable IOs without $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#278: FILE: pci-error-recovery.txt:123:
+a slot reset or a link reset, it doesn't call this callback and goes $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#279: FILE: pci-error-recovery.txt:124:
+directly to 3) or 4). All IOs should be done _synchronously_ from $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#280: FILE: pci-error-recovery.txt:125:
+within this callback, errors triggered by them will be returned via $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#281: FILE: pci-error-recovery.txt:126:
+the normal pci_check_whatever() api, no new error_detected() callback $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#282: FILE: pci-error-recovery.txt:127:
+will be issued due to an error happening here. However, such an error $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#284: FILE: pci-error-recovery.txt:129:
+invalidate the recovery that other devices on the same segment might $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#285: FILE: pci-error-recovery.txt:130:
+have done, forcing the whole segment into one of the next states, $

WARNING:TYPO_SPELLING: 'functionnal' may be misspelled - perhaps 'functional'?
#291: FILE: pci-error-recovery.txt:136:
+		  functionnal and thinks it is ready to start
 		  ^^^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#311: FILE: pci-error-recovery.txt:156:
+^IThis is called after the link has been reset. This is typically $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#312: FILE: pci-error-recovery.txt:157:
+a PCI Express specific state at this point and is done whenever a $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#313: FILE: pci-error-recovery.txt:158:
+non-fatal error has been detected that can be "solved" by resetting $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#314: FILE: pci-error-recovery.txt:159:
+the link. This call informs the driver of the reset and the driver $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#315: FILE: pci-error-recovery.txt:160:
+should check if the device appears to be in working condition. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#318: FILE: pci-error-recovery.txt:163:
+Instead, it should just "probe" the device to check it's recoverability $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#319: FILE: pci-error-recovery.txt:164:
+status. If all is right, then the core will call resume() once all $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#329: FILE: pci-error-recovery.txt:174:
+^IThis is called after the slot has been soft or hard reset by the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#330: FILE: pci-error-recovery.txt:175:
+platform.  A soft reset consists of asserting the adapter #RST line $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#331: FILE: pci-error-recovery.txt:176:
+and then restoring the PCI BARs and PCI configuration header. If the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#333: FILE: pci-error-recovery.txt:178:
+reset by toggling power on the slot off/on. This call gives drivers $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#334: FILE: pci-error-recovery.txt:179:
+the chance to re-initialize the hardware (re-download firmware, etc.), $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#335: FILE: pci-error-recovery.txt:180:
+but drivers shouldn't restart normal I/O processing operations at $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#336: FILE: pci-error-recovery.txt:181:
+this point.  (See note about interrupts; interrupts aren't guaranteed $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#337: FILE: pci-error-recovery.txt:182:
+to be delivered until the resume() callback has been called). If all $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#338: FILE: pci-error-recovery.txt:183:
+device drivers report success on this callback, the patform will call $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#339: FILE: pci-error-recovery.txt:184:
+resume() to complete the error handling and let the driver restart $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#342: FILE: pci-error-recovery.txt:187:
+A driver can still return a critical failure for this function if $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#346: FILE: pci-error-recovery.txt:191:
+be recovered, there is nothing more that can be done;  the platform $

WARNING:TYPO_SPELLING: 'prevous' may be misspelled - perhaps 'previous'?
#360: FILE: pci-error-recovery.txt:205:
+PCIERR_RESULT_RECOVERED from one of the 3 prevous callbacks. 
                                           ^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#360: FILE: pci-error-recovery.txt:205:
+PCIERR_RESULT_RECOVERED from one of the 3 prevous callbacks. $

WARNING:TYPO_SPELLING: 'tht' may be misspelled - perhaps 'the'?
#361: FILE: pci-error-recovery.txt:206:
+That basically tells the driver to restart activity, tht everything 
                                                      ^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#361: FILE: pci-error-recovery.txt:206:
+That basically tells the driver to restart activity, tht everything $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#362: FILE: pci-error-recovery.txt:207:
+is back and running. No result code is taken into account here. If $

WARNING:TYPO_SPELLING: 'taht' may be misspelled - perhaps 'that'?
#387: FILE: pci-error-recovery.txt:232:
+return IRQ_NOTHANDLED. It's up to the platform to deal with taht
                                                             ^^^^

WARNING:PATCH_PREFIX: patch prefix 'drivers' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'drivers' exists, appears to be a -p0 patch

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#412: FILE: pci/pci-error.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#426: FILE: pci/pci-error.c:15:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#427: FILE: pci/pci-error.c:16:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!event"
#491: FILE: pci/pci-error.c:80:
+		if (event == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#494: FILE: pci/pci-error.c:83:
+		printk(KERN_INFO "PEH: Detected PCI bus error on device "

WARNING:SPLIT_STRING: quoted string split across lines
#495: FILE: pci/pci-error.c:84:
+		printk(KERN_INFO "PEH: Detected PCI bus error on device "
+		       "%s %s\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#498: FILE: pci/pci-error.c:87:
+		notifier_call_chain (&peh_notifier_chain,

ERROR:CODE_INDENT: code indent should use tabs where possible
#499: FILE: pci/pci-error.c:88:
+^I^I           PEH_NOTIFY_ERROR, event);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#499: FILE: pci/pci-error.c:88:
+		notifier_call_chain (&peh_notifier_chain,
+		           PEH_NOTIFY_ERROR, event);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#506: FILE: pci/pci-error.c:95:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#518: FILE: pci/pci-error.c:107:
+int peh_send_failure_event (struct pci_dev *dev,

ERROR:CODE_INDENT: code indent should use tabs where possible
#519: FILE: pci/pci-error.c:108:
+                            enum pci_channel_state state,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#519: FILE: pci/pci-error.c:108:
+                            enum pci_channel_state state,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#520: FILE: pci/pci-error.c:109:
+                            int time_unavail)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#520: FILE: pci/pci-error.c:109:
+                            int time_unavail)$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!event"
#526: FILE: pci/pci-error.c:115:
+	if (event == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#527: FILE: pci/pci-error.c:116:
+		printk (KERN_ERR "PEH: out of memory, event not handled\n");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#527: FILE: pci/pci-error.c:116:
+		printk (KERN_ERR "PEH: out of memory, event not handled\n");

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#527: FILE: pci/pci-error.c:116:
+	if (event == NULL) {
+		printk (KERN_ERR "PEH: out of memory, event not handled\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#529: FILE: pci/pci-error.c:118:
+ ^I}$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#529: FILE: pci/pci-error.c:118:
+ ^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#529: FILE: pci/pci-error.c:118:
+ ^I}$

WARNING:PATCH_PREFIX: patch prefix 'drivers' exists, appears to be a -p0 patch

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#588: FILE: scsi/ipr.c:5347:
+static void ipr_eeh_frozen (struct pci_dev *pdev)

WARNING:REPEATED_WORD: Possible repeated word: 'recovery'
#600: FILE: scsi/ipr.c:5359:
+ * This routine is called by the pci error recovery recovery

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#604: FILE: scsi/ipr.c:5363:
+static int ipr_eeh_slot_reset (struct pci_dev *pdev)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#611: FILE: scsi/ipr.c:5370:
+	enable_irq (pdev->irq);

ERROR:CODE_INDENT: code indent should use tabs where possible
#614: FILE: scsi/ipr.c:5373:
+^I                                 IPR_SHUTDOWN_NONE);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#614: FILE: scsi/ipr.c:5373:
+	_ipr_initiate_ioa_reset(ioa_cfg, ipr_reset_restore_cfg_space,
+	                                 IPR_SHUTDOWN_NONE);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#625: FILE: scsi/ipr.c:5384:
+static void ipr_eeh_perm_failure (struct pci_dev *pdev)

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#627: FILE: scsi/ipr.c:5386:
+#if 0  // XXXXXXXXXXXXXXXXXXXXXXX

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#633: FILE: scsi/ipr.c:5392:
+static int ipr_eeh_error_detected (struct pci_dev *pdev,

ERROR:CODE_INDENT: code indent should use tabs where possible
#634: FILE: scsi/ipr.c:5393:
+                                enum pci_channel_state state)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#634: FILE: scsi/ipr.c:5393:
+static int ipr_eeh_error_detected (struct pci_dev *pdev,
+                                enum pci_channel_state state)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#634: FILE: scsi/ipr.c:5393:
+                                enum pci_channel_state state)$

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#636: FILE: scsi/ipr.c:5395:
+	switch (state) {
+		case pci_channel_io_frozen:
[...]
+		case pci_channel_io_perm_failure:
[...]
+		default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#638: FILE: scsi/ipr.c:5397:
+			ipr_eeh_frozen (pdev);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#642: FILE: scsi/ipr.c:5401:
+			ipr_eeh_perm_failure (pdev);

WARNING:UNNECESSARY_BREAK: break is not useful after a return
#644: FILE: scsi/ipr.c:5403:
+			return PCIERR_RESULT_DISCONNECT;
+			break;

WARNING:PATCH_PREFIX: patch prefix 'drivers' exists, appears to be a -p0 patch

CHECK:SPACING: No space is necessary after a cast
#686: FILE: scsi/sym53c8xx_2/sym_glue.c:769:
+	struct sym_eh_wait *ep = (struct sym_eh_wait *) p;

WARNING:LINE_SPACING: Missing a blank line after declarations
#687: FILE: scsi/sym53c8xx_2/sym_glue.c:770:
+	struct sym_eh_wait *ep = (struct sym_eh_wait *) p;
+	if (!ep)

WARNING:LINE_SPACING: Missing a blank line after declarations
#722: FILE: scsi/sym53c8xx_2/sym_glue.c:838:
+		struct sym_eh_wait eeh, *eep = &eeh;
+		np->s.io_reset_wait = eep;

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#726: FILE: scsi/sym53c8xx_2/sym_glue.c:842:
+		eep->timer.expires = jiffies + (WAIT_FOR_PCI_RECOVERY*HZ);
 		                                                     ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#735: FILE: scsi/sym53c8xx_2/sym_glue.c:851:
+			printk (KERN_ERR "%s: Timed out waiting for PCI reset\n",

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#735: FILE: scsi/sym53c8xx_2/sym_glue.c:851:
+			printk (KERN_ERR "%s: Timed out waiting for PCI reset\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#736: FILE: scsi/sym53c8xx_2/sym_glue.c:852:
+			printk (KERN_ERR "%s: Timed out waiting for PCI reset\n",
+			       sym_name(np));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#762: FILE: scsi/sym53c8xx_2/sym_glue.c:1981:
+static int sym2_io_error_detected (struct pci_dev *pdev, enum pci_channel_state state)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#767: FILE: scsi/sym53c8xx_2/sym_glue.c:1986:
+^I// XXX If slot is permanently frozen, then what? $

WARNING:REPEATED_WORD: Possible repeated word: 'slot'
#770: FILE: scsi/sym53c8xx_2/sym_glue.c:1989:
+	/* Request a slot slot reset. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#775: FILE: scsi/sym53c8xx_2/sym_glue.c:1994:
+ *  Restart the card from scratch. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#776: FILE: scsi/sym53c8xx_2/sym_glue.c:1995:
+static int sym2_io_slot_reset (struct pci_dev *pdev)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#780: FILE: scsi/sym53c8xx_2/sym_glue.c:1999:
+	printk (KERN_INFO "%s: recovering from a PCI slot reset\n",

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#780: FILE: scsi/sym53c8xx_2/sym_glue.c:1999:
+	printk (KERN_INFO "%s: recovering from a PCI slot reset\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#781: FILE: scsi/sym53c8xx_2/sym_glue.c:2000:
+	printk (KERN_INFO "%s: recovering from a PCI slot reset\n",
+	    sym_name(np));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#784: FILE: scsi/sym53c8xx_2/sym_glue.c:2003:
+		printk (KERN_ERR "%s: device setup failed most egregiously\n",

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#784: FILE: scsi/sym53c8xx_2/sym_glue.c:2003:
+		printk (KERN_ERR "%s: device setup failed most egregiously\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#785: FILE: scsi/sym53c8xx_2/sym_glue.c:2004:
+		printk (KERN_ERR "%s: device setup failed most egregiously\n",
+			    sym_name(np));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#788: FILE: scsi/sym53c8xx_2/sym_glue.c:2007:
+	enable_irq (pdev->irq);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#791: FILE: scsi/sym53c8xx_2/sym_glue.c:2010:
+	if (0 == PCI_FUNC (pdev->devfn))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pdev->devfn'
#791: FILE: scsi/sym53c8xx_2/sym_glue.c:2010:
+	if (0 == PCI_FUNC (pdev->devfn))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#791: FILE: scsi/sym53c8xx_2/sym_glue.c:2010:
+	if (0 == PCI_FUNC (pdev->devfn))

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#800: FILE: scsi/sym53c8xx_2/sym_glue.c:2019:
+static void sym2_io_resume (struct pci_dev *pdev)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#805: FILE: scsi/sym53c8xx_2/sym_glue.c:2024:
+	if (0 == PCI_FUNC (pdev->devfn))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pdev->devfn'
#805: FILE: scsi/sym53c8xx_2/sym_glue.c:2024:
+	if (0 == PCI_FUNC (pdev->devfn))

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#805: FILE: scsi/sym53c8xx_2/sym_glue.c:2024:
+	if (0 == PCI_FUNC (pdev->devfn))

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#806: FILE: scsi/sym53c8xx_2/sym_glue.c:2025:
+		sym_start_up (np, 1);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#809: FILE: scsi/sym53c8xx_2/sym_glue.c:2028:
+	sym_eeh_done (np->s.io_reset_wait);

WARNING:PATCH_PREFIX: patch prefix 'drivers' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'drivers' exists, appears to be a -p0 patch

ERROR:SPACING: space prohibited before that '++' (ctx:WxO)
#867: FILE: scsi/sym53c8xx_2/sym_hipd.c:2861:
+		icnt ++;
 		     ^

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#868: FILE: scsi/sym53c8xx_2/sym_hipd.c:2862:
+		if (100 < icnt) {

WARNING:PATCH_PREFIX: patch prefix 'drivers' exists, appears to be a -p0 patch

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#882: FILE: scsi/Kconfig:1043:
+config SCSI_SYM53C8XX_EEH_RECOVERY
+	bool "Enable PCI bus error recovery"
+	depends on SCSI_SYM53C8XX_2 && PPC_PSERIES
+	help
+		If you say Y here, the driver will be able to recover from
+		PCI bus errors on many PowerPC platforms. IBM pSeries users
+		should answer Y.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#897: FILE: scsi/Kconfig:1076:
+config SCSI_IPR_EEH_RECOVERY
+	bool "Enable PCI bus error recovery"
+	depends on SCSI_IPR && PPC_PSERIES
+	help
+		If you say Y here, the driver will be able to recover from
+		PCI bus errors on many PowerPC platforms. IBM pSeries users
+		should answer Y.
+

WARNING:PATCH_PREFIX: patch prefix 'drivers' exists, appears to be a -p0 patch

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#917: FILE: net/e100.c:2458:
+static int e100_io_error_detected (struct pci_dev *pdev, enum pci_channel_state state)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#922: FILE: net/e100.c:2463:
+	mod_timer(&nic->watchdog, jiffies + 30*HZ);
 	                                      ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#930: FILE: net/e100.c:2471:
+ *  Restart the card from scratch. */

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#931: FILE: net/e100.c:2472:
+static int e100_io_slot_reset (struct pci_dev *pdev)

ERROR:SPACING: space required before the open parenthesis '('
#936: FILE: net/e100.c:2477:
+	if(pci_enable_device(pdev)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#937: FILE: net/e100.c:2478:
+		printk(KERN_ERR "e100: Cannot re-enable PCI device after reset.\n");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#943: FILE: net/e100.c:2484:
+	if (0 != PCI_FUNC (pdev->devfn))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pdev->devfn'
#943: FILE: net/e100.c:2484:
+	if (0 != PCI_FUNC (pdev->devfn))

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#943: FILE: net/e100.c:2484:
+	if (0 != PCI_FUNC (pdev->devfn))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#945: FILE: net/e100.c:2486:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#948: FILE: net/e100.c:2489:
+^I$

ERROR:SPACING: space required before the open parenthesis '('
#949: FILE: net/e100.c:2490:
+	if(e100_hw_init(nic)) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#960: FILE: net/e100.c:2501:
+static void e100_io_resume (struct pci_dev *pdev)

ERROR:SPACING: space required before the open parenthesis '('
#969: FILE: net/e100.c:2510:
+	if(netif_running(netdev))

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#970: FILE: net/e100.c:2511:
+		e100_open (netdev);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#971: FILE: net/e100.c:2512:
+^I$

WARNING:PATCH_PREFIX: patch prefix 'drivers' exists, appears to be a -p0 patch

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#999: FILE: net/e1000/e1000_main.c:175:
+static int e1000_io_error_detected (struct pci_dev *pdev, enum pci_channel_state state);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1000: FILE: net/e1000/e1000_main.c:176:
+static int e1000_io_slot_reset (struct pci_dev *pdev);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1001: FILE: net/e1000/e1000_main.c:177:
+static void e1000_io_resume (struct pci_dev *pdev);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1038: FILE: net/e1000/e1000_main.c:3814:
+static int e1000_io_error_detected (struct pci_dev *pdev, enum pci_channel_state state)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1042: FILE: net/e1000/e1000_main.c:3818:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1044: FILE: net/e1000/e1000_main.c:3820:
+^Iif(netif_running(netdev)) $

ERROR:SPACING: space required before the open parenthesis '('
#1044: FILE: net/e1000/e1000_main.c:3820:
+	if(netif_running(netdev)) 

WARNING:REPEATED_WORD: Possible repeated word: 'slot'
#1047: FILE: net/e1000/e1000_main.c:3823:
+	/* Request a slot slot reset. */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1052: FILE: net/e1000/e1000_main.c:3828:
+ *  Restart the card from scratch. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1053: FILE: net/e1000/e1000_main.c:3829:
+ *  Implementation resembles the first-half of the $

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1056: FILE: net/e1000/e1000_main.c:3832:
+static int e1000_io_slot_reset (struct pci_dev *pdev)

ERROR:SPACING: space required before the open parenthesis '('
#1061: FILE: net/e1000/e1000_main.c:3837:
+	if(pci_enable_device(pdev)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1062: FILE: net/e1000/e1000_main.c:3838:
+		printk(KERN_ERR "e1000: Cannot re-enable PCI device after reset.\n");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1071: FILE: net/e1000/e1000_main.c:3847:
+	if (0 != PCI_FUNC (pdev->devfn))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pdev->devfn'
#1071: FILE: net/e1000/e1000_main.c:3847:
+	if (0 != PCI_FUNC (pdev->devfn))

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#1071: FILE: net/e1000/e1000_main.c:3847:
+	if (0 != PCI_FUNC (pdev->devfn))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1073: FILE: net/e1000/e1000_main.c:3849:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1082: FILE: net/e1000/e1000_main.c:3858:
+ *  Implementation resembles the second-half of the $

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1085: FILE: net/e1000/e1000_main.c:3861:
+static void e1000_io_resume (struct pci_dev *pdev)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1089: FILE: net/e1000/e1000_main.c:3865:
+	uint32_t manc, swsm;

ERROR:SPACING: space required before the open parenthesis '('
#1091: FILE: net/e1000/e1000_main.c:3867:
+	if(netif_running(netdev)) {

ERROR:SPACING: space required before the open parenthesis '('
#1092: FILE: net/e1000/e1000_main.c:3868:
+		if(e1000_up(adapter)) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1093: FILE: net/e1000/e1000_main.c:3869:
+			printk ("e1000: can't bring device back up after reset\n");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1093: FILE: net/e1000/e1000_main.c:3869:
+			printk ("e1000: can't bring device back up after reset\n");

ERROR:SPACING: space required before the open parenthesis '('
#1100: FILE: net/e1000/e1000_main.c:3876:
+	if(adapter->hw.mac_type >= e1000_82540 &&

ERROR:SPACING: space required before the open parenthesis '('
#1107: FILE: net/e1000/e1000_main.c:3883:
+	switch(adapter->hw.mac_type) {

WARNING:PATCH_PREFIX: patch prefix 'drivers' exists, appears to be a -p0 patch

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#1129: FILE: net/Kconfig:1395:
+config E100_EEH_RECOVERY
+	bool "Enable PCI bus error recovery"
+	depends on E100 && PPC_PSERIES
+   help
+      If you say Y here, the driver will be able to recover from
+      PCI bus errors on many PowerPC platforms. IBM pSeries users
+      should answer Y.
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#1144: FILE: net/Kconfig:1850:
+config E1000_EEH_RECOVERY
+	bool "Enable PCI bus error recovery"
+	depends on E1000 && PPC_PSERIES
+   help
+      If you say Y here, the driver will be able to recover from
+      PCI bus errors on many PowerPC platforms. IBM pSeries users
+      should answer Y.
+

WARNING:PATCH_PREFIX: patch prefix 'arch' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1189: FILE: asm-ppc64/eeh.h:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1206: FILE: asm-ppc64/eeh.h:16:
  * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1207: FILE: asm-ppc64/eeh.h:17:
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA$

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1220: FILE: asm-ppc64/eeh.h:40:
+#define EEH_MODE_RECOVERING	(1<<3)
                            	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1220: FILE: asm-ppc64/eeh.h:40:
+#define EEH_MODE_RECOVERING	(1<<3)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1223: FILE: asm-ppc64/eeh.h:43:
+ * to be permanently disabled. */

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1249: FILE: asm-ppc64/eeh.h:79:
+int eeh_slot_is_isolated (struct pci_dev *dev);

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1257: FILE: asm-ppc64/eeh.h:85:
+int eeh_ioaddr_is_isolated(const volatile void __iomem *token);

WARNING:REPEATED_WORD: Possible repeated word: 'the'
#1277: FILE: asm-ppc64/eeh.h:91:
+ * Obtains the the EEH error details from the RTAS subsystem,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1280: FILE: asm-ppc64/eeh.h:94:
+void eeh_slot_error_detail (struct device_node *dn, int severity);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1290: FILE: asm-ppc64/eeh.h:104:
+void rtas_set_slot_reset (struct device_node *dn);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct device_node *' should also have an identifier name
#1319: FILE: asm-ppc64/eeh.h:133:
+void eeh_restore_bars(struct device_node *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1420: FILE: asm-ppc64/rtas.h:243:
+extern int rtas_write_config(struct device_node *dn, int where, int size, u32 val);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:PATCH_PREFIX: patch prefix 'arch' exists, appears to be a -p0 patch

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1445: FILE: ppc64/kernel/eeh.c:17:
  * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1446: FILE: ppc64/kernel/eeh.c:18:
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA$

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#1461: FILE: ppc64/kernel/eeh.c:31:
+#include <asm/atomic.h>

WARNING:TYPO_SPELLING: 'alo' may be misspelled - perhaps 'also'?
#1519: FILE: ppc64/kernel/eeh.c:227:
+		} else if (alo > piar->addr_hi) {
 		           ^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1528: FILE: ppc64/kernel/eeh.c:247:
+	printk (KERN_DEBUG "PIAR: insert range=[%lx:%lx] dev=%s\n",

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1528: FILE: ppc64/kernel/eeh.c:247:
+	printk (KERN_DEBUG "PIAR: insert range=[%lx:%lx] dev=%s\n",

WARNING:TYPO_SPELLING: 'alo' may be misspelled - perhaps 'also'?
#1529: FILE: ppc64/kernel/eeh.c:248:
+	               alo, ahi, pci_name (dev));
 	               ^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1529: FILE: ppc64/kernel/eeh.c:248:
+^I               alo, ahi, pci_name (dev));$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1529: FILE: ppc64/kernel/eeh.c:248:
+	printk (KERN_DEBUG "PIAR: insert range=[%lx:%lx] dev=%s\n",
+	               alo, ahi, pci_name (dev));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1529: FILE: ppc64/kernel/eeh.c:248:
+	               alo, ahi, pci_name (dev));

WARNING:IF_1: Consider removing the #if 1 and its #endif
#1543: FILE: ppc64/kernel/eeh.c:274:
+#if 1

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1544: FILE: ppc64/kernel/eeh.c:275:
+		printk(KERN_INFO "PCI: skip building address cache for=%s %s %s\n",

WARNING:LINE_SPACING: Missing a blank line after declarations
#1571: FILE: ppc64/kernel/eeh.c:394:
+			int i;
+			for (i = 0; i < 16; i++)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1589: FILE: ppc64/kernel/eeh.c:411:
+void eeh_slot_error_detail (struct device_node *dn, int severity)

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1603: FILE: ppc64/kernel/eeh.c:416:
+	if (!dn) return;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:CODE_INDENT: code indent should use tabs where possible
#1610: FILE: ppc64/kernel/eeh.c:423:
+^I               8, 1, NULL, dn->eeh_config_addr,$

WARNING:TYPO_SPELLING: 'buid' may be misspelled - perhaps 'build'?
#1611: FILE: ppc64/kernel/eeh.c:424:
+	               BUID_HI(dn->phb->buid),
 	                                ^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1611: FILE: ppc64/kernel/eeh.c:424:
+^I               BUID_HI(dn->phb->buid),$

WARNING:TYPO_SPELLING: 'buid' may be misspelled - perhaps 'build'?
#1612: FILE: ppc64/kernel/eeh.c:425:
+	               BUID_LO(dn->phb->buid), NULL, 0,
 	                                ^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1612: FILE: ppc64/kernel/eeh.c:425:
+^I               BUID_LO(dn->phb->buid), NULL, 0,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1613: FILE: ppc64/kernel/eeh.c:426:
+^I               virt_to_phys(slot_errbuf),$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1614: FILE: ppc64/kernel/eeh.c:427:
+^I               eeh_error_buf_size,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1615: FILE: ppc64/kernel/eeh.c:428:
+^I               severity);$

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1622: FILE: ppc64/kernel/eeh.c:435:
+EXPORT_SYMBOL(eeh_slot_error_detail);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1717: FILE: ppc64/kernel/eeh.c:476:
 
+

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1720: FILE: ppc64/kernel/eeh.c:479:
+static inline void eeh_mark_slot (struct device_node *dn)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1725: FILE: ppc64/kernel/eeh.c:484:
+			eeh_mark_slot (dn->child);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1730: FILE: ppc64/kernel/eeh.c:489:
+static inline void eeh_clear_slot (struct device_node *dn)

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1733: FILE: ppc64/kernel/eeh.c:492:
+		dn->eeh_mode &= ~(EEH_MODE_RECOVERING|EEH_MODE_ISOLATED);
 		                                     ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1735: FILE: ppc64/kernel/eeh.c:494:
+			eeh_clear_slot (dn->child);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1740: FILE: ppc64/kernel/eeh.c:499:
+static inline struct pci_dev * eeh_find_pci_dev(struct device_node *dn)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#1743: FILE: ppc64/kernel/eeh.c:502:
+	struct pci_dev *dev = NULL;
+	for_each_pci_dev(dev) {

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1757: FILE: ppc64/kernel/eeh.c:524:
+extern void disable_irq_nosync(unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#1757: FILE: ppc64/kernel/eeh.c:524:
+extern void disable_irq_nosync(unsigned int);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1784: FILE: ppc64/kernel/eeh.c:547:
+		printk ("EEH:ignored check for %s %s\n",

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1784: FILE: ppc64/kernel/eeh.c:547:
+		printk ("EEH:ignored check for %s %s\n",

ERROR:CODE_INDENT: code indent should use tabs where possible
#1785: FILE: ppc64/kernel/eeh.c:548:
+^I^I           pci_pretty_name (dev), dn->full_name);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1785: FILE: ppc64/kernel/eeh.c:548:
+		printk ("EEH:ignored check for %s %s\n",
+		           pci_pretty_name (dev), dn->full_name);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1785: FILE: ppc64/kernel/eeh.c:548:
+		           pci_pretty_name (dev), dn->full_name);

ERROR:SPACING: space prohibited before that '++' (ctx:WxO)
#1801: FILE: ppc64/kernel/eeh.c:563:
+		dn->eeh_check_count ++;
 		                    ^

WARNING:TYPO_SPELLING: 'panicing' may be misspelled - perhaps 'panicking'?
#1803: FILE: ppc64/kernel/eeh.c:565:
+			printk (KERN_ERR "EEH: Device driver ignored %d bad reads, panicing\n",
 			                                                           ^^^^^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1803: FILE: ppc64/kernel/eeh.c:565:
+			printk (KERN_ERR "EEH: Device driver ignored %d bad reads, panicing\n",

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1803: FILE: ppc64/kernel/eeh.c:565:
+			printk (KERN_ERR "EEH: Device driver ignored %d bad reads, panicing\n",

ERROR:CODE_INDENT: code indent should use tabs where possible
#1804: FILE: ppc64/kernel/eeh.c:566:
+^I^I^I        dn->eeh_check_count);$

CHECK:SPACING: No space is necessary after a cast
#1811: FILE: ppc64/kernel/eeh.c:572:
+*((long *) 0x0) = 42;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1814: FILE: ppc64/kernel/eeh.c:575:
+			panic("EEH: MMIO halt (%d) on device:%s %s\n", rets[0],
+		      pci_name(dev), pci_pretty_name(dev));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rets[0] == 5'
#1823: FILE: ppc64/kernel/eeh.c:588:
+	if (!(ret == 0 && ((rets[1] == 1 && (rets[0] == 2 || rets[0] >= 4))
+	                   || (rets[0] == 5)))) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#1824: FILE: ppc64/kernel/eeh.c:589:
+^I                   || (rets[0] == 5)))) {$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1824: FILE: ppc64/kernel/eeh.c:589:
+	if (!(ret == 0 && ((rets[1] == 1 && (rets[0] == 2 || rets[0] >= 4))
+	                   || (rets[0] == 5)))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rets[0] == 5'
#1834: FILE: ppc64/kernel/eeh.c:595:
+	if ((rets[0] == 5) && (dn->child == NULL)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dn->child == NULL'
#1834: FILE: ppc64/kernel/eeh.c:595:
+	if ((rets[0] == 5) && (dn->child == NULL)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dn->child"
#1834: FILE: ppc64/kernel/eeh.c:595:
+	if ((rets[0] == 5) && (dn->child == NULL)) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1842: FILE: ppc64/kernel/eeh.c:601:
+^I * with other functions on this device, and functions under $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1843: FILE: ppc64/kernel/eeh.c:602:
+	 * bridges. */

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1844: FILE: ppc64/kernel/eeh.c:603:
+	eeh_mark_slot (dn->parent->child);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1855: FILE: ppc64/kernel/eeh.c:607:
+		dev = eeh_find_pci_dev (dn);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1862: FILE: ppc64/kernel/eeh.c:611:
+		disable_irq_nosync (dev->irq);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rets[0] == 2'
#1865: FILE: ppc64/kernel/eeh.c:614:
+	if ((rets[0] == 2) || (rets[0] == 4))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rets[0] == 4'
#1865: FILE: ppc64/kernel/eeh.c:614:
+	if ((rets[0] == 2) || (rets[0] == 4))

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1886: FILE: ppc64/kernel/eeh.c:619:
+	peh_send_failure_event (dev, state, rets[2]);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1893: FILE: ppc64/kernel/eeh.c:624:
+	if (rets[0] != 5) dump_stack();

WARNING:LINE_SPACING: Missing a blank line after declarations
#1936: FILE: ppc64/kernel/eeh.c:674:
+	struct device_node *dn;
+	dn = pci_device_to_OF_node(dev);

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1942: FILE: ppc64/kernel/eeh.c:680:
+eeh_ioaddr_is_isolated(const volatile void __iomem *token)

CHECK:SPACING: No space is necessary after a cast
#1948: FILE: ppc64/kernel/eeh.c:686:
+	addr = eeh_token_to_phys((unsigned long __force) token);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1964: FILE: ppc64/kernel/eeh.c:702:
+	struct device_node *dn = pci_device_to_OF_node(dev);
+	rtas_pci_slot_reset (dn, state);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1964: FILE: ppc64/kernel/eeh.c:702:
+	rtas_pci_slot_reset (dn, state);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1979: FILE: ppc64/kernel/eeh.c:717:
+	if (rc) return rc;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1981: FILE: ppc64/kernel/eeh.c:719:
+	if (rets[1] == 0) return -1;  /* EEH is not supported */

WARNING:TYPO_SPELLING: 'Oll' may be misspelled - perhaps 'All'?
#1982: FILE: ppc64/kernel/eeh.c:720:
+	if (rets[0] == 0)  return 0;  /* Oll Korrect */
 	                                 ^^^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1982: FILE: ppc64/kernel/eeh.c:720:
+	if (rets[0] == 0)  return 0;  /* Oll Korrect */

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1984: FILE: ppc64/kernel/eeh.c:722:
+		if (rets[2] == 0) return -1; /* permanently unavailable */

WARNING:LINE_SPACING: Missing a blank line after declarations
#1994: FILE: ppc64/kernel/eeh.c:732:
+	struct device_node *dn = pci_device_to_OF_node(dev);
+	if (!dn) return -1;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1994: FILE: ppc64/kernel/eeh.c:732:
+	if (!dn) return -1;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1996: FILE: ppc64/kernel/eeh.c:734:
+	BUG_ON (dn->phb==NULL);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1996: FILE: ppc64/kernel/eeh.c:734:
+	BUG_ON (dn->phb==NULL);

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#1996: FILE: ppc64/kernel/eeh.c:734:
+	BUG_ON (dn->phb==NULL);
 	               ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dn->phb"
#1996: FILE: ppc64/kernel/eeh.c:734:
+	BUG_ON (dn->phb==NULL);

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#1997: FILE: ppc64/kernel/eeh.c:735:
+	if (dn->phb==NULL) {
 	           ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dn->phb"
#1997: FILE: ppc64/kernel/eeh.c:735:
+	if (dn->phb==NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1998: FILE: ppc64/kernel/eeh.c:736:
+		printk (KERN_ERR "EEH, checking on slot with no phb dn=%s dev=%s:%s\n",

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1998: FILE: ppc64/kernel/eeh.c:736:
+		printk (KERN_ERR "EEH, checking on slot with no phb dn=%s dev=%s:%s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1999: FILE: ppc64/kernel/eeh.c:737:
+		printk (KERN_ERR "EEH, checking on slot with no phb dn=%s dev=%s:%s\n",
+		       dn->full_name, pci_name(dev), pci_pretty_name (dev));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1999: FILE: ppc64/kernel/eeh.c:737:
+		       dn->full_name, pci_name(dev), pci_pretty_name (dev));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2002: FILE: ppc64/kernel/eeh.c:740:
+	return eeh_slot_availability (dn);

WARNING:LONG_LINE: line length of 122 exceeds 100 columns
#2013: FILE: ppc64/kernel/eeh.c:751:
+		printk (KERN_WARNING "EEH: in slot reset, device node %s has no phb\n",                    dn->full_name);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#2013: FILE: ppc64/kernel/eeh.c:751:
+		printk (KERN_WARNING "EEH: in slot reset, device node %s has no phb\n",                    dn->full_name);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2013: FILE: ppc64/kernel/eeh.c:751:
+		printk (KERN_WARNING "EEH: in slot reset, device node %s has no phb\n",                    dn->full_name);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2018: FILE: ppc64/kernel/eeh.c:756:
+	rc = rtas_call(ibm_set_slot_reset,4,1, NULL,
 	                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2018: FILE: ppc64/kernel/eeh.c:756:
+	rc = rtas_call(ibm_set_slot_reset,4,1, NULL,
 	                                   ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#2019: FILE: ppc64/kernel/eeh.c:757:
+^I               dn->eeh_config_addr,$

WARNING:TYPO_SPELLING: 'buid' may be misspelled - perhaps 'build'?
#2020: FILE: ppc64/kernel/eeh.c:758:
+	               BUID_HI(dn->phb->buid),
 	                                ^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#2020: FILE: ppc64/kernel/eeh.c:758:
+^I               BUID_HI(dn->phb->buid),$

WARNING:TYPO_SPELLING: 'buid' may be misspelled - perhaps 'build'?
#2021: FILE: ppc64/kernel/eeh.c:759:
+	               BUID_LO(dn->phb->buid),
 	                                ^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#2021: FILE: ppc64/kernel/eeh.c:759:
+^I               BUID_LO(dn->phb->buid),$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2022: FILE: ppc64/kernel/eeh.c:760:
+^I               state);$

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#2024: FILE: ppc64/kernel/eeh.c:762:
+		printk (KERN_WARNING "EEH: Unable to reset the failed slot, (%d) #RST=%d\n", rc, state);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#2024: FILE: ppc64/kernel/eeh.c:762:
+		printk (KERN_WARNING "EEH: Unable to reset the failed slot, (%d) #RST=%d\n", rc, state);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2024: FILE: ppc64/kernel/eeh.c:762:
+		printk (KERN_WARNING "EEH: Unable to reset the failed slot, (%d) #RST=%d\n", rc, state);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2029: FILE: ppc64/kernel/eeh.c:767:
+		eeh_clear_slot (dn->parent->child);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2041: FILE: ppc64/kernel/eeh.c:779:
+	rtas_pci_slot_reset (dn, 1);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2044: FILE: ppc64/kernel/eeh.c:782:
+	 * a 100 milliseconds. We wait a bit longer 'just in case'.  */

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2047: FILE: ppc64/kernel/eeh.c:785:
+	msleep (PCI_BUS_RST_HOLD_TIME_MSEC);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2048: FILE: ppc64/kernel/eeh.c:786:
+	rtas_pci_slot_reset (dn, 0);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2052: FILE: ppc64/kernel/eeh.c:790:
+	 * up traffic. */

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2054: FILE: ppc64/kernel/eeh.c:792:
+	msleep (PCI_BUS_SETTLE_TIME_MSEC);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2057: FILE: ppc64/kernel/eeh.c:795:
+	 * ready to be used; if not, wait for recovery. */

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2058: FILE: ppc64/kernel/eeh.c:796:
+	for (i=0; i<10; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#2058: FILE: ppc64/kernel/eeh.c:796:
+	for (i=0; i<10; i++) {
 	           ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2059: FILE: ppc64/kernel/eeh.c:797:
+		rc = eeh_slot_availability (dn);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#2060: FILE: ppc64/kernel/eeh.c:798:
+		if (rc <= 0) break;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2062: FILE: ppc64/kernel/eeh.c:800:
+		msleep (rc+100);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2062: FILE: ppc64/kernel/eeh.c:800:
+		msleep (rc+100);
 		          ^

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2066: FILE: ppc64/kernel/eeh.c:804:
+EXPORT_SYMBOL(rtas_set_slot_reset);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2071: FILE: ppc64/kernel/eeh.c:809:
+	int token = rtas_token ("ibm,configure-bridge");

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2076: FILE: ppc64/kernel/eeh.c:814:
+	rc = rtas_call(token,3,1, NULL,
 	                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2076: FILE: ppc64/kernel/eeh.c:814:
+	rc = rtas_call(token,3,1, NULL,
 	                      ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#2077: FILE: ppc64/kernel/eeh.c:815:
+^I               dn->eeh_config_addr,$

WARNING:TYPO_SPELLING: 'buid' may be misspelled - perhaps 'build'?
#2078: FILE: ppc64/kernel/eeh.c:816:
+	               BUID_HI(dn->phb->buid),
 	                                ^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#2078: FILE: ppc64/kernel/eeh.c:816:
+^I               BUID_HI(dn->phb->buid),$

WARNING:TYPO_SPELLING: 'buid' may be misspelled - perhaps 'build'?
#2079: FILE: ppc64/kernel/eeh.c:817:
+	               BUID_LO(dn->phb->buid));
 	                                ^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#2079: FILE: ppc64/kernel/eeh.c:817:
+^I               BUID_LO(dn->phb->buid));$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#2081: FILE: ppc64/kernel/eeh.c:819:
+		printk (KERN_WARNING "EEH: Unable to configure device bridge (%d) for %s\n",

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2081: FILE: ppc64/kernel/eeh.c:819:
+		printk (KERN_WARNING "EEH: Unable to configure device bridge (%d) for %s\n",

ERROR:CODE_INDENT: code indent should use tabs where possible
#2082: FILE: ppc64/kernel/eeh.c:820:
+^I^I        rc, dn->full_name);$

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2086: FILE: ppc64/kernel/eeh.c:824:
+EXPORT_SYMBOL(rtas_configure_bridge);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2106: FILE: ppc64/kernel/eeh.c:844:
+static inline void __restore_bars (struct device_node *dn)

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#2110: FILE: ppc64/kernel/eeh.c:848:
+	if (NULL==dn->phb) return;
 	        ^

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#2110: FILE: ppc64/kernel/eeh.c:848:
+	if (NULL==dn->phb) return;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#2110: FILE: ppc64/kernel/eeh.c:848:
+	if (NULL==dn->phb) return;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2111: FILE: ppc64/kernel/eeh.c:849:
+	for (i=4; i<10; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#2111: FILE: ppc64/kernel/eeh.c:849:
+	for (i=4; i<10; i++) {
 	           ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2111: FILE: ppc64/kernel/eeh.c:849:
+	for (i=4; i<10; i++) {
+		rtas_write_config(dn, i*4, 4, dn->config_space[i]);
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2112: FILE: ppc64/kernel/eeh.c:850:
+		rtas_write_config(dn, i*4, 4, dn->config_space[i]);
 		                       ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2116: FILE: ppc64/kernel/eeh.c:854:
+	rtas_write_config(dn, 12*4, 4, dn->config_space[12]);
 	                        ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2118: FILE: ppc64/kernel/eeh.c:856:
+#define BYTE_SWAP(OFF) (8*((OFF)/4)+3-(OFF))
                          ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#2118: FILE: ppc64/kernel/eeh.c:856:
+#define BYTE_SWAP(OFF) (8*((OFF)/4)+3-(OFF))
                                 ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2118: FILE: ppc64/kernel/eeh.c:856:
+#define BYTE_SWAP(OFF) (8*((OFF)/4)+3-(OFF))
                                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2118: FILE: ppc64/kernel/eeh.c:856:
+#define BYTE_SWAP(OFF) (8*((OFF)/4)+3-(OFF))
                                      ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'OFF' - possible side-effects?
#2118: FILE: ppc64/kernel/eeh.c:856:
+#define BYTE_SWAP(OFF) (8*((OFF)/4)+3-(OFF))

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2121: FILE: ppc64/kernel/eeh.c:859:
+	rtas_write_config (dn, PCI_CACHE_LINE_SIZE, 1,

ERROR:CODE_INDENT: code indent should use tabs where possible
#2122: FILE: ppc64/kernel/eeh.c:860:
+^I            SAVED_BYTE(PCI_CACHE_LINE_SIZE));$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2122: FILE: ppc64/kernel/eeh.c:860:
+	rtas_write_config (dn, PCI_CACHE_LINE_SIZE, 1,
+	            SAVED_BYTE(PCI_CACHE_LINE_SIZE));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2124: FILE: ppc64/kernel/eeh.c:862:
+	rtas_write_config (dn, PCI_LATENCY_TIMER, 1,

ERROR:CODE_INDENT: code indent should use tabs where possible
#2125: FILE: ppc64/kernel/eeh.c:863:
+^I            SAVED_BYTE(PCI_LATENCY_TIMER));$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2125: FILE: ppc64/kernel/eeh.c:863:
+	rtas_write_config (dn, PCI_LATENCY_TIMER, 1,
+	            SAVED_BYTE(PCI_LATENCY_TIMER));

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2128: FILE: ppc64/kernel/eeh.c:866:
+	rtas_write_config(dn, 15*4, 4, dn->config_space[15]);
 	                        ^

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#2136: FILE: ppc64/kernel/eeh.c:874:
+	if (! dn->eeh_is_bridge)
 	    ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2137: FILE: ppc64/kernel/eeh.c:875:
+		__restore_bars (dn);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2140: FILE: ppc64/kernel/eeh.c:878:
+		eeh_restore_bars (dn->child);

WARNING:LINE_SPACING: Missing a blank line after declarations
#2146: FILE: ppc64/kernel/eeh.c:884:
+	struct device_node *dn = pci_device_to_OF_node(dev);
+	eeh_restore_bars (dn);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2146: FILE: ppc64/kernel/eeh.c:884:
+	eeh_restore_bars (dn);

WARNING:TYPO_SPELLING: 'buid' may be misspelled - perhaps 'build'?
#2183: FILE: ppc64/kernel/eeh.c:1061:
+		printk(KERN_WARNING "EEH: Expected buid but found none for %s\n",
 		                                   ^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#2183: FILE: ppc64/kernel/eeh.c:1061:
+		printk(KERN_WARNING "EEH: Expected buid but found none for %s\n",

ERROR:CODE_INDENT: code indent should use tabs where possible
#2184: FILE: ppc64/kernel/eeh.c:1062:
+^I^I        dn->full_name);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2184: FILE: ppc64/kernel/eeh.c:1062:
+		printk(KERN_WARNING "EEH: Expected buid but found none for %s\n",
+		        dn->full_name);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2238: FILE: ppc64/kernel/eeh.c:1150:
+		seq_printf(m,
+				"no device=%ld\n"

WARNING:PATCH_PREFIX: patch prefix 'arch' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'drivers' exists, appears to be a -p0 patch

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2282: FILE: pci/hotplug/rpaphp.h:116:
+extern void init_eeh_handler (void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2283: FILE: pci/hotplug/rpaphp.h:117:
+extern void exit_eeh_handler (void);

WARNING:PATCH_PREFIX: patch prefix 'drivers' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'drivers' exists, appears to be a -p0 patch

WARNING:LINE_SPACING: Missing a blank line after declarations
#2333: FILE: pci/hotplug/rpaphp_pci.c:196:
+	struct pci_dev *dev;
+	list_for_each_entry(dev, &bus->devices, bus_list) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#2337: FILE: pci/hotplug/rpaphp_pci.c:200:
+			struct pci_bus *subbus = dev->subordinate;
+			if (bus)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2338: FILE: pci/hotplug/rpaphp_pci.c:201:
+				rpaphp_eeh_add_bus_device (subbus);

WARNING:PATCH_PREFIX: patch prefix 'drivers' exists, appears to be a -p0 patch

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2424: FILE: pci/hotplug/rpaphp_eeh.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#2442: FILE: pci/hotplug/rpaphp_eeh.c:19:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#2443: FILE: pci/hotplug/rpaphp_eeh.c:20:
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2467: FILE: pci/hotplug/rpaphp_eeh.c:44:
+static int pci_search_bus_for_dev (struct pci_bus *bus, struct pci_dev *dev)

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#2471: FILE: pci/hotplug/rpaphp_eeh.c:48:
+	if (!bus) return 0;

WARNING:LINE_SPACING: Missing a blank line after declarations
#2475: FILE: pci/hotplug/rpaphp_eeh.c:52:
+		struct pci_dev *pdev = pci_dev_b(ln);
+		if (pdev == dev)

WARNING:LINE_SPACING: Missing a blank line after declarations
#2479: FILE: pci/hotplug/rpaphp_eeh.c:56:
+			int rc;
+			rc = pci_search_bus_for_dev (pdev->subordinate, dev);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2479: FILE: pci/hotplug/rpaphp_eeh.c:56:
+			rc = pci_search_bus_for_dev (pdev->subordinate, dev);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2499: FILE: pci/hotplug/rpaphp_eeh.c:76:
+pci_walk_bus (struct pci_dev *top, pci_buswalk_cb cb, void *userdata)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 11)
#2504: FILE: pci/hotplug/rpaphp_eeh.c:81:
+	list_for_each_entry_safe (dev, tmp, &top->bus->devices, bus_list) {
+	   pci_dev_get(dev);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2504: FILE: pci/hotplug/rpaphp_eeh.c:81:
+	list_for_each_entry_safe (dev, tmp, &top->bus->devices, bus_list) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2509: FILE: pci/hotplug/rpaphp_eeh.c:86:
+		cb (dev, userdata);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2510: FILE: pci/hotplug/rpaphp_eeh.c:87:
+		if (dev->subordinate) {
+			pci_walk_bus (pci_dev_b(&dev->subordinate->devices), cb, userdata);
+		}

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2511: FILE: pci/hotplug/rpaphp_eeh.c:88:
+			pci_walk_bus (pci_dev_b(&dev->subordinate->devices), cb, userdata);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!slot->bridge"
#2534: FILE: pci/hotplug/rpaphp_eeh.c:111:
+		if (slot->bridge == NULL)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#2543: FILE: pci/hotplug/rpaphp_eeh.c:120:
+			printk (KERN_WARNING "PCI bridge is missing bus: %s %s\n",

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2543: FILE: pci/hotplug/rpaphp_eeh.c:120:
+			printk (KERN_WARNING "PCI bridge is missing bus: %s %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2544: FILE: pci/hotplug/rpaphp_eeh.c:121:
+			printk (KERN_WARNING "PCI bridge is missing bus: %s %s\n",
+			    pci_name (slot->bridge), pci_pretty_name (slot->bridge));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2544: FILE: pci/hotplug/rpaphp_eeh.c:121:
+			    pci_name (slot->bridge), pci_pretty_name (slot->bridge));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2544: FILE: pci/hotplug/rpaphp_eeh.c:121:
+			    pci_name (slot->bridge), pci_pretty_name (slot->bridge));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2548: FILE: pci/hotplug/rpaphp_eeh.c:125:
+		if (pci_search_bus_for_dev (bus, dev))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2564: FILE: pci/hotplug/rpaphp_eeh.c:141:
+^Iif (!driver) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2568: FILE: pci/hotplug/rpaphp_eeh.c:145:
+^I$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2569: FILE: pci/hotplug/rpaphp_eeh.c:146:
+	rc = driver->err_handler.error_detected (dev, pci_channel_io_frozen);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#2570: FILE: pci/hotplug/rpaphp_eeh.c:147:
+	if (*res == PCIERR_RESULT_NONE) *res = rc;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#2571: FILE: pci/hotplug/rpaphp_eeh.c:148:
+	if (*res == PCIERR_RESULT_NEED_RESET) return;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#2572: FILE: pci/hotplug/rpaphp_eeh.c:149:
+	if (*res == PCIERR_RESULT_DISCONNECT &&
+	     rc == PCIERR_RESULT_NEED_RESET) *res = rc;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2573: FILE: pci/hotplug/rpaphp_eeh.c:150:
+	if (*res == PCIERR_RESULT_DISCONNECT &&
+	     rc == PCIERR_RESULT_NEED_RESET) *res = rc;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2584: FILE: pci/hotplug/rpaphp_eeh.c:161:
+^Iif (!driver) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2588: FILE: pci/hotplug/rpaphp_eeh.c:165:
+^I$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2589: FILE: pci/hotplug/rpaphp_eeh.c:166:
+	driver->err_handler.slot_reset (dev);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2596: FILE: pci/hotplug/rpaphp_eeh.c:173:
+^Iif (!driver) $

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2601: FILE: pci/hotplug/rpaphp_eeh.c:178:
+	driver->err_handler.resume (dev);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2608: FILE: pci/hotplug/rpaphp_eeh.c:185:
+^Iif (!driver) $

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2613: FILE: pci/hotplug/rpaphp_eeh.c:190:
+	driver->err_handler.error_detected (dev, pci_channel_io_perm_failure);

WARNING:TYPO_SPELLING: 'occuring' may be misspelled - perhaps 'occurring'?
#2622: FILE: pci/hotplug/rpaphp_eeh.c:199:
+ * occuring to wild addresses (which usually happen due to
    ^^^^^^^^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2635: FILE: pci/hotplug/rpaphp_eeh.c:212:
+int eeh_reset_device (struct pci_dev *dev, struct device_node *dn, int reconfig)

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#2637: FILE: pci/hotplug/rpaphp_eeh.c:214:
+	struct slot *frozen_slot= NULL;
 	                        ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2645: FILE: pci/hotplug/rpaphp_eeh.c:222:
+	if (reconfig && frozen_slot) rpaphp_unconfig_pci_adapter (frozen_slot);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#2645: FILE: pci/hotplug/rpaphp_eeh.c:222:
+	if (reconfig && frozen_slot) rpaphp_unconfig_pci_adapter (frozen_slot);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2648: FILE: pci/hotplug/rpaphp_eeh.c:225:
+	 * Reconfigure bridges and devices */

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2649: FILE: pci/hotplug/rpaphp_eeh.c:226:
+	rtas_set_slot_reset (dn->child);

WARNING:LINE_SPACING: Missing a blank line after declarations
#2653: FILE: pci/hotplug/rpaphp_eeh.c:230:
+	struct device_node *peer = dn->child;
+	while (peer) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2664: FILE: pci/hotplug/rpaphp_eeh.c:241:
+		ssleep (5);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2665: FILE: pci/hotplug/rpaphp_eeh.c:242:
+		rpaphp_enable_pci_slot (frozen_slot);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2675: FILE: pci/hotplug/rpaphp_eeh.c:252:
+int handle_eeh_events (struct notifier_block *self,

ERROR:CODE_INDENT: code indent should use tabs where possible
#2676: FILE: pci/hotplug/rpaphp_eeh.c:253:
+                       unsigned long reason, void *ev)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2676: FILE: pci/hotplug/rpaphp_eeh.c:253:
+                       unsigned long reason, void *ev)$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2678: FILE: pci/hotplug/rpaphp_eeh.c:255:
+	int freeze_count=0;
 	                ^

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#2684: FILE: pci/hotplug/rpaphp_eeh.c:261:
+	if (!dev)
+	{

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2686: FILE: pci/hotplug/rpaphp_eeh.c:263:
+		printk ("EEH: EEH error caught, but no PCI device specified!\n");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2686: FILE: pci/hotplug/rpaphp_eeh.c:263:
+		printk ("EEH: EEH error caught, but no PCI device specified!\n");

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#2691: FILE: pci/hotplug/rpaphp_eeh.c:268:
+	if (!frozen_device)
+	{

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2693: FILE: pci/hotplug/rpaphp_eeh.c:270:
+		printk (KERN_ERR "EEH: Cannot find PCI controller for %s %s\n",

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2693: FILE: pci/hotplug/rpaphp_eeh.c:270:
+		printk (KERN_ERR "EEH: Cannot find PCI controller for %s %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2694: FILE: pci/hotplug/rpaphp_eeh.c:271:
+		printk (KERN_ERR "EEH: Cannot find PCI controller for %s %s\n",
+				pci_name(dev), pci_pretty_name (dev));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2694: FILE: pci/hotplug/rpaphp_eeh.c:271:
+				pci_name(dev), pci_pretty_name (dev));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2698: FILE: pci/hotplug/rpaphp_eeh.c:275:
+	BUG_ON (frozen_device->phb==NULL);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2698: FILE: pci/hotplug/rpaphp_eeh.c:275:
+	BUG_ON (frozen_device->phb==NULL);

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#2698: FILE: pci/hotplug/rpaphp_eeh.c:275:
+	BUG_ON (frozen_device->phb==NULL);
 	                          ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!frozen_device->phb"
#2698: FILE: pci/hotplug/rpaphp_eeh.c:275:
+	BUG_ON (frozen_device->phb==NULL);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2701: FILE: pci/hotplug/rpaphp_eeh.c:278:
+	 * These are false alarms. Empty slots have no child dn. */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'event->state == pci_channel_io_perm_failure'
#2702: FILE: pci/hotplug/rpaphp_eeh.c:279:
+	if ((event->state == pci_channel_io_perm_failure) && (frozen_device == NULL))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'frozen_device == NULL'
#2702: FILE: pci/hotplug/rpaphp_eeh.c:279:
+	if ((event->state == pci_channel_io_perm_failure) && (frozen_device == NULL))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!frozen_device"
#2702: FILE: pci/hotplug/rpaphp_eeh.c:279:
+	if ((event->state == pci_channel_io_perm_failure) && (frozen_device == NULL))

ERROR:SPACING: space prohibited before that '++' (ctx:WxO)
#2707: FILE: pci/hotplug/rpaphp_eeh.c:284:
+	freeze_count ++;
 	             ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'event->state == pci_channel_io_perm_failure'
#2714: FILE: pci/hotplug/rpaphp_eeh.c:291:
+	if ((event->state == pci_channel_io_perm_failure) &&
+	    ((event->time_unavail <= 0) ||
+	     (event->time_unavail > MAX_WAIT_FOR_RECOVERY*1000)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'event->time_unavail <= 0'
#2714: FILE: pci/hotplug/rpaphp_eeh.c:291:
+	if ((event->state == pci_channel_io_perm_failure) &&
+	    ((event->time_unavail <= 0) ||
+	     (event->time_unavail > MAX_WAIT_FOR_RECOVERY*1000)))

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2716: FILE: pci/hotplug/rpaphp_eeh.c:293:
+	     (event->time_unavail > MAX_WAIT_FOR_RECOVERY*1000)))
 	                                                 ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2726: FILE: pci/hotplug/rpaphp_eeh.c:303:
+		printk (KERN_ERR

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2726: FILE: pci/hotplug/rpaphp_eeh.c:303:
+		printk (KERN_ERR

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#2727: FILE: pci/hotplug/rpaphp_eeh.c:304:
+		   "EEH: device %s:%s has failed %d times \n"

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2730: FILE: pci/hotplug/rpaphp_eeh.c:307:
+			pci_name (dev),

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2731: FILE: pci/hotplug/rpaphp_eeh.c:308:
+			pci_pretty_name (dev),

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2734: FILE: pci/hotplug/rpaphp_eeh.c:311:
+		eeh_slot_error_detail (frozen_device, 2 /* Permanent Error */);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2737: FILE: pci/hotplug/rpaphp_eeh.c:314:
+		pci_walk_bus (dev, eeh_report_failure, 0);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2741: FILE: pci/hotplug/rpaphp_eeh.c:318:
+		struct slot * frozen_slot = rpaphp_find_slot(dev);

WARNING:LINE_SPACING: Missing a blank line after declarations
#2742: FILE: pci/hotplug/rpaphp_eeh.c:319:
+		struct slot * frozen_slot = rpaphp_find_slot(dev);
+		if (frozen_slot)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2743: FILE: pci/hotplug/rpaphp_eeh.c:320:
+			rpaphp_unconfig_pci_adapter (frozen_slot);

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#2745: FILE: pci/hotplug/rpaphp_eeh.c:322:
+		return 1;
+	} else {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2746: FILE: pci/hotplug/rpaphp_eeh.c:323:
+		eeh_slot_error_detail (frozen_device, 1 /* Temporary Error */);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#2749: FILE: pci/hotplug/rpaphp_eeh.c:326:
+	printk (KERN_WARNING

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2749: FILE: pci/hotplug/rpaphp_eeh.c:326:
+	printk (KERN_WARNING

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2752: FILE: pci/hotplug/rpaphp_eeh.c:329:
+		pci_name (dev),

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2753: FILE: pci/hotplug/rpaphp_eeh.c:330:
+		pci_pretty_name (dev));

WARNING:LINE_SPACING: Missing a blank line after declarations
#2759: FILE: pci/hotplug/rpaphp_eeh.c:336:
+	enum pcierr_result result = PCIERR_RESULT_NONE;
+	pci_walk_bus (dev, eeh_report_error, &result);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2759: FILE: pci/hotplug/rpaphp_eeh.c:336:
+	pci_walk_bus (dev, eeh_report_error, &result);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2762: FILE: pci/hotplug/rpaphp_eeh.c:339:
+	 * the device, and hope that clears the error. */

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2763: FILE: pci/hotplug/rpaphp_eeh.c:340:
+	if (result == PCIERR_RESULT_NONE) {
+		eeh_reset_device (dev, frozen_device, 1);
+	}

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2764: FILE: pci/hotplug/rpaphp_eeh.c:341:
+		eeh_reset_device (dev, frozen_device, 1);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2769: FILE: pci/hotplug/rpaphp_eeh.c:346:
+		eeh_reset_device (dev, frozen_device, 0);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2770: FILE: pci/hotplug/rpaphp_eeh.c:347:
+		pci_walk_bus (dev, eeh_report_reset, 0);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2776: FILE: pci/hotplug/rpaphp_eeh.c:353:
+		eeh_reset_device (dev, frozen_device, 0);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2777: FILE: pci/hotplug/rpaphp_eeh.c:354:
+		pci_walk_bus (dev, eeh_report_reset, 0);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2781: FILE: pci/hotplug/rpaphp_eeh.c:358:
+	pci_walk_bus (dev, eeh_report_resume, 0);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2796: FILE: pci/hotplug/rpaphp_eeh.c:373:
+	peh_register_notifier (&eeh_block);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2801: FILE: pci/hotplug/rpaphp_eeh.c:378:
+	peh_unregister_notifier (&eeh_block);

WARNING:PATCH_PREFIX: patch prefix 'drivers' exists, appears to be a -p0 patch

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000173928.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 152 errors, 258 warnings, 63 checks, 2592 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000173928.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
