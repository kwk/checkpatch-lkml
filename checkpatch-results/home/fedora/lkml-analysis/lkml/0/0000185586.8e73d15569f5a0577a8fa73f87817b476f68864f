WARNING:TYPO_SPELLING: 'becuase' may be misspelled - perhaps 'because'?
#36: 
The iscsi_host class is removed becuase the open-iscsi/linux-iscsi 
                                ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'usersapce' may be misspelled - perhaps 'userspace'?
#37: 
netlink framework pushes login to usersapce so there is no need to store 
                                  ^^^^^^^^^

WARNING:TYPO_SPELLING: 'becuase' may be misspelled - perhaps 'because'?
#40: 
/sys/class/iscsi_transport was necessary becuase the session and 
                                         ^^^^^^^

WARNING:TYPO_SPELLING: 'userpace' may be misspelled - perhaps 'userspace'?
#45: 
events and their userpace handlers.
                 ^^^^^^^^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#109: FILE: drivers/scsi/scsi_transport_iscsi.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#119: FILE: drivers/scsi/scsi_transport_iscsi.c:19:
  * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#146: FILE: drivers/scsi/scsi_transport_iscsi.c:43:
+	uint32_t param_mask;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#213: FILE: drivers/scsi/scsi_transport_iscsi.c:75:
+	volatile int allocated;

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#218: FILE: drivers/scsi/scsi_transport_iscsi.c:80:
+	spinlock_t freelock;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#256: FILE: drivers/scsi/scsi_transport_iscsi.c:103:
+	volatile int active;

CHECK:CAMELCASE: Avoid CamelCase: <Scsi_Host>
#257: FILE: drivers/scsi/scsi_transport_iscsi.c:104:
+	struct Scsi_Host *host;		/* originated shost */

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:MACRO_ARG_PRECEDENCE: Macro argument '_cdev' may be better as '(_cdev)' to avoid precedence issues
#268: FILE: drivers/scsi/scsi_transport_iscsi.c:115:
+#define iscsi_cdev_to_if_cnx(_cdev) \
+	iscsi_dev_to_if_cnx(_cdev->dev)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument '_cdev' may be better as '(_cdev)' to avoid precedence issues
#285: FILE: drivers/scsi/scsi_transport_iscsi.c:132:
+#define iscsi_cdev_to_if_snx(_cdev) \
+	iscsi_dev_to_if_snx(_cdev->dev)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument '_snx' may be better as '(_snx)' to avoid precedence issues
#288: FILE: drivers/scsi/scsi_transport_iscsi.c:135:
+#define iscsi_if_snx_to_shost(_snx) \
+	dev_to_shost(_snx->dev.parent)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#297: FILE: drivers/scsi/scsi_transport_iscsi.c:144:
+iscsi_if_find_cnx(uint64_t key, int type)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#392: FILE: drivers/scsi/scsi_transport_iscsi.c:214:
+			list_del((void*)&skb->cb);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#395: FILE: drivers/scsi/scsi_transport_iscsi.c:217:
+			BUG_ON(zone->allocated < 0);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#401: FILE: drivers/scsi/scsi_transport_iscsi.c:223:
+static int zone_init(struct mempool_zone *zp, unsigned max,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#402: FILE: drivers/scsi/scsi_transport_iscsi.c:224:
+		     unsigned size, unsigned hiwat)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#402: FILE: drivers/scsi/scsi_transport_iscsi.c:224:
+		     unsigned size, unsigned hiwat)

CHECK:BRACES: braces {} should be used on all arms of this statement
#435: FILE: drivers/scsi/scsi_transport_iscsi.c:248:
+	if (zone->allocated < zone->max) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#437: FILE: drivers/scsi/scsi_transport_iscsi.c:250:
+		BUG_ON(!skb);

CHECK:BRACES: Unbalanced braces around else statement
#439: FILE: drivers/scsi/scsi_transport_iscsi.c:252:
+	} else

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#464: FILE: drivers/scsi/scsi_transport_iscsi.c:268:
+		printk("iscsi: can not unicast skb (%d)\n", rc);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#469: FILE: drivers/scsi/scsi_transport_iscsi.c:273:
+	list_add((void*)&skb->cb, &zone->freequeue);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#486: FILE: drivers/scsi/scsi_transport_iscsi.c:280:
+int iscsi_recv_pdu(iscsi_cnx_t cnxh, struct iscsi_hdr *hdr,
+				char *data, uint32_t data_size)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#500: FILE: drivers/scsi/scsi_transport_iscsi.c:291:
+	BUG_ON(!cnx);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#507: FILE: drivers/scsi/scsi_transport_iscsi.c:298:
+		printk("iscsi%d: can not deliver control PDU: OOM\n",

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#522: FILE: drivers/scsi/scsi_transport_iscsi.c:311:
+	pdu = (char*)ev + sizeof(*ev);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#563: FILE: drivers/scsi/scsi_transport_iscsi.c:328:
+	BUG_ON(!cnx);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#569: FILE: drivers/scsi/scsi_transport_iscsi.c:334:
+		printk("iscsi%d: gracefully ignored cnx error (%d)\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#585: FILE: drivers/scsi/scsi_transport_iscsi.c:350:
+	printk("iscsi%d: detected cnx error (%d)\n", cnx->host->host_no, error);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#594: FILE: drivers/scsi/scsi_transport_iscsi.c:356:
+iscsi_if_send_reply(int pid, int seq, int type, int done, int multi,
+		      void *payload, int size)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#611: FILE: drivers/scsi/scsi_transport_iscsi.c:371:
+	BUG_ON(!skb);

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_t' - possible side-effects?
#632: FILE: drivers/scsi/scsi_transport_iscsi.c:391:
+#define hostdata_privsize(_t)	(sizeof(unsigned long) + _t->hostdata_size + \
+				 _t->hostdata_size % sizeof(unsigned long) + \
+				 sizeof(struct iscsi_if_snx))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument '_t' may be better as '(_t)' to avoid precedence issues
#632: FILE: drivers/scsi/scsi_transport_iscsi.c:391:
+#define hostdata_privsize(_t)	(sizeof(unsigned long) + _t->hostdata_size + \
+				 _t->hostdata_size % sizeof(unsigned long) + \
+				 sizeof(struct iscsi_if_snx))

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#636: FILE: drivers/scsi/scsi_transport_iscsi.c:395:
+#define hostdata_snx(_hostdata)	((void*)_hostdata + sizeof(unsigned long) + \

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_hostdata' - possible side-effects?
#636: FILE: drivers/scsi/scsi_transport_iscsi.c:395:
+#define hostdata_snx(_hostdata)	((void*)_hostdata + sizeof(unsigned long) + \
+			((struct iscsi_transport *) \
+			 iscsi_ptr(*(uint64_t *)_hostdata))->hostdata_size)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument '_hostdata' may be better as '(_hostdata)' to avoid precedence issues
#636: FILE: drivers/scsi/scsi_transport_iscsi.c:395:
+#define hostdata_snx(_hostdata)	((void*)_hostdata + sizeof(unsigned long) + \
+			((struct iscsi_transport *) \
+			 iscsi_ptr(*(uint64_t *)_hostdata))->hostdata_size)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#676: FILE: drivers/scsi/scsi_transport_iscsi.c:435:
+		printk("iscsi: can not allocate SCSI host for session\n");

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#687: FILE: drivers/scsi/scsi_transport_iscsi.c:446:
+	*(uint64_t*)shost->hostdata = ev->transport_handle;

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#689: FILE: drivers/scsi/scsi_transport_iscsi.c:448:
+	ev->r.c_session_ret.session_handle = transport->create_session(

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#716: FILE: drivers/scsi/scsi_transport_iscsi.c:475:
+		printk(KERN_ERR "iscsi: could not register session%d's dev\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#759: FILE: drivers/scsi/scsi_transport_iscsi.c:518:
+			printk("iscsi%d: can not destroy session: "

WARNING:SPLIT_STRING: quoted string split across lines
#760: FILE: drivers/scsi/scsi_transport_iscsi.c:519:
+			printk("iscsi%d: can not destroy session: "
+			       "has active connection (%p)\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*cnx)...) over kmalloc(sizeof(struct iscsi_if_cnx)...)
#805: FILE: drivers/scsi/scsi_transport_iscsi.c:564:
+	cnx = kmalloc(sizeof(struct iscsi_if_cnx), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#814: FILE: drivers/scsi/scsi_transport_iscsi.c:573:
+		printk("iscsi%d: can not allocate pdu zone for new cnx\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#821: FILE: drivers/scsi/scsi_transport_iscsi.c:580:
+		printk("iscsi%d: can not allocate error zone for new cnx\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#844: FILE: drivers/scsi/scsi_transport_iscsi.c:603:
+		printk(KERN_ERR "iscsi%d: could not register connections%u "

WARNING:SPLIT_STRING: quoted string split across lines
#845: FILE: drivers/scsi/scsi_transport_iscsi.c:604:
+		printk(KERN_ERR "iscsi%d: could not register connections%u "
+		       "dev\n", shost->host_no, ev->u.c_cnx.cid);

CHECK:BRACES: Unbalanced braces around else statement
#915: FILE: drivers/scsi/scsi_transport_iscsi.c:674:
+			} else

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#935: FILE: drivers/scsi/scsi_transport_iscsi.c:694:
+		ev->r.retcode = transport->bind_cnx(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#945: FILE: drivers/scsi/scsi_transport_iscsi.c:704:
+		ev->r.retcode = transport->set_param(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#953: FILE: drivers/scsi/scsi_transport_iscsi.c:712:
+		ev->r.retcode = transport->start_cnx(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#966: FILE: drivers/scsi/scsi_transport_iscsi.c:725:
+		ev->r.retcode = transport->send_pdu(

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#968: FILE: drivers/scsi/scsi_transport_iscsi.c:727:
+		       (struct iscsi_hdr*)((char*)ev + sizeof(*ev)),

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#968: FILE: drivers/scsi/scsi_transport_iscsi.c:727:
+		       (struct iscsi_hdr*)((char*)ev + sizeof(*ev)),

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#969: FILE: drivers/scsi/scsi_transport_iscsi.c:728:
+		       (char*)ev + sizeof(*ev) + ev->u.send_pdu.hdr_size,

ERROR:CODE_INDENT: code indent should use tabs where possible
#980: FILE: drivers/scsi/scsi_transport_iscsi.c:739:
+                                sizeof(struct iscsi_stats_custom) *$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#980: FILE: drivers/scsi/scsi_transport_iscsi.c:739:
+                                sizeof(struct iscsi_stats_custom) *$

ERROR:CODE_INDENT: code indent should use tabs where possible
#981: FILE: drivers/scsi/scsi_transport_iscsi.c:740:
+                                                ISCSI_STATS_CUSTOM_MAX);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#981: FILE: drivers/scsi/scsi_transport_iscsi.c:740:
+                                                ISCSI_STATS_CUSTOM_MAX);$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#994: FILE: drivers/scsi/scsi_transport_iscsi.c:753:
+				printk("iscsi%d: can not deliver stats: OOM\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1000: FILE: drivers/scsi/scsi_transport_iscsi.c:759:
+			nlhstat = __nlmsg_put(skbstat, daemon_pid, 0, 0,
+						(len - sizeof(*nlhstat)));

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1010: FILE: drivers/scsi/scsi_transport_iscsi.c:769:
+					((char*)evstat + sizeof(*evstat));

ERROR:CODE_INDENT: code indent should use tabs where possible
#1016: FILE: drivers/scsi/scsi_transport_iscsi.c:775:
+                                ^Isizeof(struct iscsi_stats_custom) *$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1016: FILE: drivers/scsi/scsi_transport_iscsi.c:775:
+                                ^Isizeof(struct iscsi_stats_custom) *$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1016: FILE: drivers/scsi/scsi_transport_iscsi.c:775:
+                                ^Isizeof(struct iscsi_stats_custom) *$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1036: FILE: drivers/scsi/scsi_transport_iscsi.c:795:
+ * discarded silently.  */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1046: FILE: drivers/scsi/scsi_transport_iscsi.c:805:
+			uint32_t rlen;

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#1069: FILE: drivers/scsi/scsi_transport_iscsi.c:828:
+				 * on error - fall through.

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1073: FILE: drivers/scsi/scsi_transport_iscsi.c:832:
+				err = iscsi_if_send_reply(

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'param' - possible side-effects?
#1094: FILE: drivers/scsi/scsi_transport_iscsi.c:848:
+#define iscsi_cnx_int_attr_show(param, format)				\
 static ssize_t								\
+show_cnx_int_param_##param(struct class_device *cdev, char *buf)	\
 {									\
+	uint32_t value = 0;						\
+	struct iscsi_if_cnx *cnx = iscsi_cdev_to_if_cnx(cdev);		\
+	struct iscsi_internal *priv;					\
 									\
+	priv = to_iscsi_internal(cnx->host->transportt);		\
+	if (priv->param_mask & (1 << param))				\
+		priv->tt->get_param(cnx->cnxh, param, &value);		\
+	return snprintf(buf, 20, format"\n", value);			\
 }

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'param' may be better as '(param)' to avoid precedence issues
#1094: FILE: drivers/scsi/scsi_transport_iscsi.c:848:
+#define iscsi_cnx_int_attr_show(param, format)				\
 static ssize_t								\
+show_cnx_int_param_##param(struct class_device *cdev, char *buf)	\
 {									\
+	uint32_t value = 0;						\
+	struct iscsi_if_cnx *cnx = iscsi_cdev_to_if_cnx(cdev);		\
+	struct iscsi_internal *priv;					\
 									\
+	priv = to_iscsi_internal(cnx->host->transportt);		\
+	if (priv->param_mask & (1 << param))				\
+		priv->tt->get_param(cnx->cnxh, param, &value);		\
+	return snprintf(buf, 20, format"\n", value);			\
 }

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1102: FILE: drivers/scsi/scsi_transport_iscsi.c:852:
+	uint32_t value = 0;						\

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#1112: FILE: drivers/scsi/scsi_transport_iscsi.c:859:
+	return snprintf(buf, 20, format"\n", value);			\

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#1118: FILE: drivers/scsi/scsi_transport_iscsi.c:862:
+#define iscsi_cnx_int_attr(field, param, format)			\
+	iscsi_cnx_int_attr_show(param, format)				\
+static CLASS_DEVICE_ATTR(field, S_IRUGO, show_cnx_int_param_##param, NULL);

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#1118: FILE: drivers/scsi/scsi_transport_iscsi.c:862:
+#define iscsi_cnx_int_attr(field, param, format)			\
+	iscsi_cnx_int_attr_show(param, format)				\
+static CLASS_DEVICE_ATTR(field, S_IRUGO, show_cnx_int_param_##param, NULL);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#1120: FILE: drivers/scsi/scsi_transport_iscsi.c:864:
+static CLASS_DEVICE_ATTR(field, S_IRUGO, show_cnx_int_param_##param, NULL);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'param' - possible side-effects?
#1134: FILE: drivers/scsi/scsi_transport_iscsi.c:876:
+#define iscsi_snx_int_attr_show(param, format)				\
+static ssize_t								\
+show_snx_int_param_##param(struct class_device *cdev, char *buf)	\
+{									\
+	uint32_t value = 0;						\
+	struct iscsi_if_snx *snx = iscsi_cdev_to_if_snx(cdev);		\
+	struct Scsi_Host *shost = iscsi_if_snx_to_shost(snx);		\
+	struct iscsi_internal *priv = to_iscsi_internal(		\
+						shost->transportt);	\
+	struct iscsi_if_cnx *cnx = iscsi_if_find_cnx(			\
+				     iscsi_handle(shost), H_TYPE_HOST);	\
+	if (cnx)							\
+		if (priv->param_mask & (1 << param))			\
+			priv->tt->get_param(cnx->cnxh, param, &value);	\
+	return snprintf(buf, 20, format"\n", value);			\
+}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'param' may be better as '(param)' to avoid precedence issues
#1134: FILE: drivers/scsi/scsi_transport_iscsi.c:876:
+#define iscsi_snx_int_attr_show(param, format)				\
+static ssize_t								\
+show_snx_int_param_##param(struct class_device *cdev, char *buf)	\
+{									\
+	uint32_t value = 0;						\
+	struct iscsi_if_snx *snx = iscsi_cdev_to_if_snx(cdev);		\
+	struct Scsi_Host *shost = iscsi_if_snx_to_shost(snx);		\
+	struct iscsi_internal *priv = to_iscsi_internal(		\
+						shost->transportt);	\
+	struct iscsi_if_cnx *cnx = iscsi_if_find_cnx(			\
+				     iscsi_handle(shost), H_TYPE_HOST);	\
+	if (cnx)							\
+		if (priv->param_mask & (1 << param))			\
+			priv->tt->get_param(cnx->cnxh, param, &value);	\
+	return snprintf(buf, 20, format"\n", value);			\
+}

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1138: FILE: drivers/scsi/scsi_transport_iscsi.c:880:
+	uint32_t value = 0;						\

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#1148: FILE: drivers/scsi/scsi_transport_iscsi.c:890:
+	return snprintf(buf, 20, format"\n", value);			\

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#1154: FILE: drivers/scsi/scsi_transport_iscsi.c:893:
+#define iscsi_snx_int_attr(field, param, format)			\
+	iscsi_snx_int_attr_show(param, format)				\
+static CLASS_DEVICE_ATTR(field, S_IRUGO, show_snx_int_param_##param, NULL);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#1154: FILE: drivers/scsi/scsi_transport_iscsi.c:893:
+#define iscsi_snx_int_attr(field, param, format)			\
+	iscsi_snx_int_attr_show(param, format)				\
+static CLASS_DEVICE_ATTR(field, S_IRUGO, show_snx_int_param_##param, NULL);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#1156: FILE: drivers/scsi/scsi_transport_iscsi.c:895:
+static CLASS_DEVICE_ATTR(field, S_IRUGO, show_snx_int_param_##param, NULL);

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#1167: FILE: drivers/scsi/scsi_transport_iscsi.c:906:
+#define SETUP_SESSION_RD_ATTR(field, param)				\
+	if (priv->param_mask & (1 << param)) {				\
+		priv->session_attrs[count] = &class_device_attr_##field;\
 		count++;						\
 	}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'param' may be better as '(param)' to avoid precedence issues
#1167: FILE: drivers/scsi/scsi_transport_iscsi.c:906:
+#define SETUP_SESSION_RD_ATTR(field, param)				\
+	if (priv->param_mask & (1 << param)) {				\
+		priv->session_attrs[count] = &class_device_attr_##field;\
 		count++;						\
 	}

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#1176: FILE: drivers/scsi/scsi_transport_iscsi.c:912:
+#define SETUP_CONN_RD_ATTR(field, param)				\
+	if (priv->param_mask & (1 << param)) {				\
+		priv->connection_attrs[count] = &class_device_attr_##field;\
 		count++;						\
 	}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'param' may be better as '(param)' to avoid precedence issues
#1176: FILE: drivers/scsi/scsi_transport_iscsi.c:912:
+#define SETUP_CONN_RD_ATTR(field, param)				\
+	if (priv->param_mask & (1 << param)) {				\
+		priv->connection_attrs[count] = &class_device_attr_##field;\
 		count++;						\
 	}

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1268: FILE: drivers/scsi/scsi_transport_iscsi.c:977:
+	BUG_ON(!tt);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*priv)...) over kmalloc(sizeof(struct iscsi_internal)...)
#1282: FILE: drivers/scsi/scsi_transport_iscsi.c:989:
+	priv = kmalloc(sizeof(struct iscsi_internal), GFP_KERNEL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1337: FILE: drivers/scsi/scsi_transport_iscsi.c:1018:
+	BUG_ON(count > ISCSI_CONN_ATTRS);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1353: FILE: drivers/scsi/scsi_transport_iscsi.c:1034:
+	SETUP_SESSION_RD_ATTR(data_seq_in_order,ISCSI_PARAM_DATASEQ_INORDER_EN)
 	                                       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1367: FILE: drivers/scsi/scsi_transport_iscsi.c:1042:
+	printk("iscsi: registered transport (%d - %s)\n", id, tt->name);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1382: FILE: drivers/scsi/scsi_transport_iscsi.c:1052:
+	BUG_ON(!tt);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1392: FILE: drivers/scsi/scsi_transport_iscsi.c:1060:
+	BUG_ON (id < 0);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1392: FILE: drivers/scsi/scsi_transport_iscsi.c:1060:
+	BUG_ON (id < 0);

WARNING:SPLIT_STRING: quoted string split across lines
#1487: FILE: drivers/scsi/scsi_transport_iscsi.c:1141:
+MODULE_AUTHOR("Mike Christie <michaelc@cs.wisc.edu>, "
+	      "Dmitry Yusupov <dmitry_yus@yahoo.com>, "

WARNING:SPLIT_STRING: quoted string split across lines
#1488: FILE: drivers/scsi/scsi_transport_iscsi.c:1142:
+	      "Dmitry Yusupov <dmitry_yus@yahoo.com>, "
+	      "Alex Aizman <itn780@yahoo.com>");

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1496: FILE: include/scsi/scsi_transport_iscsi.h:1:
+/*

WARNING:SPACING: Unnecessary space before function pointer arguments
#1566: FILE: include/scsi/scsi_transport_iscsi.h:53:
+	iscsi_snx_t (*create_session) (uint32_t initial_cmdsn,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1566: FILE: include/scsi/scsi_transport_iscsi.h:53:
+	iscsi_snx_t (*create_session) (uint32_t initial_cmdsn,

WARNING:SPACING: Unnecessary space before function pointer arguments
#1568: FILE: include/scsi/scsi_transport_iscsi.h:55:
+	void (*destroy_session) (iscsi_snx_t snx);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1569: FILE: include/scsi/scsi_transport_iscsi.h:56:
+	iscsi_cnx_t (*create_cnx) (iscsi_snx_t snx, uint32_t cid);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1570: FILE: include/scsi/scsi_transport_iscsi.h:57:
+	int (*bind_cnx) (iscsi_snx_t snx, iscsi_cnx_t cnx,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1571: FILE: include/scsi/scsi_transport_iscsi.h:58:
+	int (*bind_cnx) (iscsi_snx_t snx, iscsi_cnx_t cnx,
+			uint32_t transport_fd, int is_leading);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1571: FILE: include/scsi/scsi_transport_iscsi.h:58:
+			uint32_t transport_fd, int is_leading);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1572: FILE: include/scsi/scsi_transport_iscsi.h:59:
+	int (*start_cnx) (iscsi_cnx_t cnx);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1573: FILE: include/scsi/scsi_transport_iscsi.h:60:
+	void (*stop_cnx) (iscsi_cnx_t cnx, int flag);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1574: FILE: include/scsi/scsi_transport_iscsi.h:61:
+	void (*destroy_cnx) (iscsi_cnx_t cnx);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1575: FILE: include/scsi/scsi_transport_iscsi.h:62:
+	int (*set_param) (iscsi_cnx_t cnx, enum iscsi_param param,

WARNING:SPACING: Unnecessary space before function pointer arguments
#1577: FILE: include/scsi/scsi_transport_iscsi.h:64:
+	int (*get_param) (iscsi_cnx_t cnx, enum iscsi_param param,

WARNING:SPACING: Unnecessary space before function pointer arguments
#1579: FILE: include/scsi/scsi_transport_iscsi.h:66:
+	int (*send_pdu) (iscsi_cnx_t cnx, struct iscsi_hdr *hdr,

WARNING:SPACING: Unnecessary space before function pointer arguments
#1581: FILE: include/scsi/scsi_transport_iscsi.h:68:
+	void (*get_stats) (iscsi_cnx_t cnx, struct iscsi_stats *stats);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1632: FILE: include/scsi/scsi_transport_iscsi.h:78:
+extern int iscsi_register_transport(struct iscsi_transport *tt);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1633: FILE: include/scsi/scsi_transport_iscsi.h:79:
+extern int iscsi_unregister_transport(struct iscsi_transport *tt);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1714: FILE: include/scsi/scsi_transport_iscsi.h:84:
+extern void iscsi_cnx_error(iscsi_cnx_t cnx, enum iscsi_err error);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1715: FILE: include/scsi/scsi_transport_iscsi.h:85:
+extern int iscsi_recv_pdu(iscsi_cnx_t cnx, struct iscsi_hdr *hdr,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1716: FILE: include/scsi/scsi_transport_iscsi.h:86:
+extern int iscsi_recv_pdu(iscsi_cnx_t cnx, struct iscsi_hdr *hdr,
+				char *data, uint32_t data_size);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000185586.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 18 errors, 58 warnings, 44 checks, 1605 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000185586.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
