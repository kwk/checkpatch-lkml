WARNING:TYPO_SPELLING: 'mesured' may be misspelled - perhaps 'measured'?
#36: 
To measure performance I've used the latest lmbench and I have mesured the
                                                               ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#37: 
kernel compile times on a dual pentium III box runing at 1GHz with an 133MHz

WARNING:TYPO_SPELLING: 'runing' may be misspelled - perhaps 'running'?
#37: 
kernel compile times on a dual pentium III box runing at 1GHz with an 133MHz
                                               ^^^^^^

WARNING:TYPO_SPELLING: 'performace' may be misspelled - perhaps 'performance'?
#40: 
Results (attached) show that there is no measurable difference in performace
                                                                  ^^^^^^^^^^

WARNING:TYPO_SPELLING: 'processess' may be misspelled - perhaps 'processes'?
#54: 
(> 20%) in the heavy load case (70-80 runnable processess on a load of about
                                               ^^^^^^^^^^

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#96: FILE: sched.c:108:
+} aligned_data [NR_CPUS] __cacheline_aligned = { {{&init_task,0,

Whitespace before opening bracket '[' is prohibited.
There are some exceptions:

1. With a type on the left::

    int [] a;

2. At the beginning of a line for slice initialisers::

    [0...10] = 5,

3. Inside a curly brace::

    = { [0...10] = 5 }

ERROR:SPACING: space required after that ',' (ctx:VxV)
#96: FILE: sched.c:108:
+} aligned_data [NR_CPUS] __cacheline_aligned = { {{&init_task,0,
                                                              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#96: FILE: sched.c:108:
+} aligned_data [NR_CPUS] __cacheline_aligned = { {{&init_task,0,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#109: FILE: sched.c:207:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#110: FILE: sched.c:208:
+static inline int other_goodness(struct task_struct * p, int this_cpu, struct mm_struct *this_mm)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#118: FILE: sched.c:216:
+^I * $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#128: FILE: sched.c:226:
+^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#143: FILE: sched.c:301:
+^I^I^I^I/* $

ERROR:SPACING: space required before the open brace '{'
#155: FILE: sched.c:317:
+			if (p->policy == SCHED_OTHER){

WARNING:BRACES: braces {} are not necessary for single statement blocks
#155: FILE: sched.c:317:
+			if (p->policy == SCHED_OTHER){
+				hop_queues(p, tsk->processor);
+			}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required before the open brace '{'
#166: FILE: sched.c:349:
+	if (p->policy == SCHED_OTHER){

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#166: FILE: sched.c:349:
+	if (p->policy == SCHED_OTHER){
[...]
+	} else  list_add(&p->run_list, &rt_queue_head);
[...]

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#168: FILE: sched.c:351:
+	} else  list_add(&p->run_list, &rt_queue_head);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#173: FILE: sched.c:355:
+static inline void move_last_rt_queue(struct task_struct * p)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#179: FILE: sched.c:361:
+static inline void move_first_rt_queue(struct task_struct * p)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#187: FILE: sched.c:367:
+static inline void hop_queues(struct task_struct * p, int this_cpu)

ERROR:CODE_INDENT: code indent should use tabs where possible
#199: FILE: sched.c:394:
+ ^I/* LATER : make an effort to choose rq before add ? */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#199: FILE: sched.c:394:
+ ^I/* LATER : make an effort to choose rq before add ? */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#199: FILE: sched.c:394:
+ ^I/* LATER : make an effort to choose rq before add ? */$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#220: FILE: sched.c:644:
+^I/* $

WARNING:REPEATED_WORD: Possible repeated word: 'then'
#222: FILE: sched.c:646:
+	 * checks, first the real time and then then policy OTHER for own

WARNING:LINE_SPACING: Missing a blank line after declarations
#243: FILE: sched.c:665:
+			int weight = other_goodness(p, this_cpu, prev->active_mm);
+			if (weight > c)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#252: FILE: sched.c:674:
+^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#253: FILE: sched.c:675:
+^I * try to steal from another CPU's queue.  since we don't have to $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#259: FILE: sched.c:681:
+^I^Iif (cpu == this_cpu) $

WARNING:LINE_SPACING: Missing a blank line after declarations
#259: FILE: sched.c:681:
+		int cpu = cpu_logical_map(i);
+		if (cpu == this_cpu) 

ERROR:CODE_INDENT: code indent should use tabs where possible
#263: FILE: sched.c:685:
+                ^Ip = list_entry(tmp, struct task_struct, run_list);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#263: FILE: sched.c:685:
+                ^Ip = list_entry(tmp, struct task_struct, run_list);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#263: FILE: sched.c:685:
+                ^Ip = list_entry(tmp, struct task_struct, run_list);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#264: FILE: sched.c:686:
+                ^Iif (can_schedule(p, this_cpu) && !(p->policy & SCHED_YIELD)) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#264: FILE: sched.c:686:
+                ^Iif (can_schedule(p, this_cpu) && !(p->policy & SCHED_YIELD)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#264: FILE: sched.c:686:
+                ^Iif (can_schedule(p, this_cpu) && !(p->policy & SCHED_YIELD)) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#265: FILE: sched.c:687:
+                        ^Iint weight = other_goodness(p, cpu, prev->active_mm);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#265: FILE: sched.c:687:
+                        ^Iint weight = other_goodness(p, cpu, prev->active_mm);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#265: FILE: sched.c:687:
+                        ^Iint weight = other_goodness(p, cpu, prev->active_mm);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#266: FILE: sched.c:688:
+                        ^Iif (weight > c)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#266: FILE: sched.c:688:
+                        ^Iif (weight > c)$

WARNING:LINE_SPACING: Missing a blank line after declarations
#266: FILE: sched.c:688:
+                        	int weight = other_goodness(p, cpu, prev->active_mm);
+                        	if (weight > c)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#266: FILE: sched.c:688:
+                        ^Iif (weight > c)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#267: FILE: sched.c:689:
+                                ^Ic = weight, next = p;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#267: FILE: sched.c:689:
+                                ^Ic = weight, next = p;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#267: FILE: sched.c:689:
+                                ^Ic = weight, next = p;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#268: FILE: sched.c:690:
+                ^I}$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#268: FILE: sched.c:690:
+                ^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#268: FILE: sched.c:690:
+                ^I}$

ERROR:CODE_INDENT: code indent should use tabs where possible
#269: FILE: sched.c:691:
+        ^I}$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#269: FILE: sched.c:691:
+        ^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#269: FILE: sched.c:691:
+        ^I}$

ERROR:SPACING: space required before the open brace '{'
#297: FILE: sched.c:1035:
+	if (task_on_runqueue(p)){

CHECK:BRACES: braces {} should be used on all arms of this statement
#298: FILE: sched.c:1036:
+		if (policy != SCHED_OTHER)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#300: FILE: sched.c:1038:
+		else {

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#316: FILE: sched.c:1357:
+	for (i=1; i<NR_CPUS; i++){
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#316: FILE: sched.c:1357:
+	for (i=1; i<NR_CPUS; i++){
 	           ^

ERROR:SPACING: space required before the open brace '{'
#316: FILE: sched.c:1357:
+	for (i=1; i<NR_CPUS; i++){

WARNING:BRACES: braces {} are not necessary for single statement blocks
#316: FILE: sched.c:1357:
+	for (i=1; i<NR_CPUS; i++){
+		INIT_LIST_HEAD(&cpu_rq(i));
+	}

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#316: FILE: sched.c:1357:
+	for (i=1; i<NR_CPUS; i++){

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000542318.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 28 errors, 30 warnings, 3 checks, 239 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000542318.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
