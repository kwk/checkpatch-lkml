CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#38: 
Jörn
 ^

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#46: 
--- linux-2.5.70-bk11/lib/zlib_inflate/inflate.c~zlib_cleanup_Z_NULL	2003-06-06 20:14:10.000000000 +0200

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#53: FILE: lib/zlib_inflate/inflate.c:21:
+  if (z == NULL || z->state == NULL || z->workspace == NULL)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#53: FILE: lib/zlib_inflate/inflate.c:21:
+  if (z == NULL || z->state == NULL || z->workspace == NULL)
     return Z_STREAM_ERROR;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!z"
#53: FILE: lib/zlib_inflate/inflate.c:21:
+  if (z == NULL || z->state == NULL || z->workspace == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!z->state"
#53: FILE: lib/zlib_inflate/inflate.c:21:
+  if (z == NULL || z->state == NULL || z->workspace == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!z->workspace"
#53: FILE: lib/zlib_inflate/inflate.c:21:
+  if (z == NULL || z->state == NULL || z->workspace == NULL)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#57: FILE: lib/zlib_inflate/inflate.c:24:
+  z->msg = NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#60: FILE: lib/zlib_inflate/inflate.c:26:
+  zlib_inflate_blocks_reset(z->state->blocks, z, NULL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#69: FILE: lib/zlib_inflate/inflate.c:35:
+  if (z == NULL || z->state == NULL || z->workspace == NULL)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#69: FILE: lib/zlib_inflate/inflate.c:35:
+  if (z == NULL || z->state == NULL || z->workspace == NULL)
     return Z_STREAM_ERROR;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!z"
#69: FILE: lib/zlib_inflate/inflate.c:35:
+  if (z == NULL || z->state == NULL || z->workspace == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!z->state"
#69: FILE: lib/zlib_inflate/inflate.c:35:
+  if (z == NULL || z->state == NULL || z->workspace == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!z->workspace"
#69: FILE: lib/zlib_inflate/inflate.c:35:
+  if (z == NULL || z->state == NULL || z->workspace == NULL)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#72: FILE: lib/zlib_inflate/inflate.c:37:
+  if (z->state->blocks != NULL)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#72: FILE: lib/zlib_inflate/inflate.c:37:
+  if (z->state->blocks != NULL)
     zlib_inflate_blocks_free(z->state->blocks, z);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "z->state->blocks"
#72: FILE: lib/zlib_inflate/inflate.c:37:
+  if (z->state->blocks != NULL)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#75: FILE: lib/zlib_inflate/inflate.c:39:
+  z->state = NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#85: FILE: lib/zlib_inflate/inflate.c:51:
+  if (version == NULL || version[0] != ZLIB_VERSION[0] ||$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#85: FILE: lib/zlib_inflate/inflate.c:51:
+  if (version == NULL || version[0] != ZLIB_VERSION[0] ||
[...]
       return Z_VERSION_ERROR;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!version"
#85: FILE: lib/zlib_inflate/inflate.c:51:
+  if (version == NULL || version[0] != ZLIB_VERSION[0] ||

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#86: FILE: lib/zlib_inflate/inflate.c:52:
+      stream_size != sizeof(z_stream) || z->workspace == NULL)$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!z->workspace"
#86: FILE: lib/zlib_inflate/inflate.c:52:
+      stream_size != sizeof(z_stream) || z->workspace == NULL)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#91: FILE: lib/zlib_inflate/inflate.c:56:
+  if (z == NULL)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#91: FILE: lib/zlib_inflate/inflate.c:56:
+  if (z == NULL)
     return Z_STREAM_ERROR;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!z"
#91: FILE: lib/zlib_inflate/inflate.c:56:
+  if (z == NULL)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#94: FILE: lib/zlib_inflate/inflate.c:58:
+  z->msg = NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#97: FILE: lib/zlib_inflate/inflate.c:60:
+  z->state->blocks = NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#107: FILE: lib/zlib_inflate/inflate.c:80:
+      zlib_inflate_blocks_new(z, z->state->nowrap ? NULL : zlib_adler32, (uInt)1 << w))$

CHECK:CAMELCASE: Avoid CamelCase: <uInt>
#107: FILE: lib/zlib_inflate/inflate.c:80:
+      zlib_inflate_blocks_new(z, z->state->nowrap ? NULL : zlib_adler32, (uInt)1 << w))

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#108: FILE: lib/zlib_inflate/inflate.c:81:
+      == NULL)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#117: FILE: lib/zlib_inflate/inflate.c:128:
+  if (z == NULL || z->state == NULL || z->next_in == NULL)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#117: FILE: lib/zlib_inflate/inflate.c:128:
+  if (z == NULL || z->state == NULL || z->next_in == NULL)
     return Z_STREAM_ERROR;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!z"
#117: FILE: lib/zlib_inflate/inflate.c:128:
+  if (z == NULL || z->state == NULL || z->next_in == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!z->state"
#117: FILE: lib/zlib_inflate/inflate.c:128:
+  if (z == NULL || z->state == NULL || z->next_in == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!z->next_in"
#117: FILE: lib/zlib_inflate/inflate.c:128:
+  if (z == NULL || z->state == NULL || z->next_in == NULL)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#126: FILE: lib/zlib_inflate/inflate.c:263:
+  if (z == NULL || z->state == NULL)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#126: FILE: lib/zlib_inflate/inflate.c:263:
+  if (z == NULL || z->state == NULL)
     return Z_STREAM_ERROR;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!z"
#126: FILE: lib/zlib_inflate/inflate.c:263:
+  if (z == NULL || z->state == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!z->state"
#126: FILE: lib/zlib_inflate/inflate.c:263:
+  if (z == NULL || z->state == NULL)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#135: FILE: lib/zlib_inflate/inflate.c:316:
+  if (z == NULL || z->state == NULL || z->state->blocks == NULL)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#135: FILE: lib/zlib_inflate/inflate.c:316:
+  if (z == NULL || z->state == NULL || z->state->blocks == NULL)
     return Z_STREAM_ERROR;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!z"
#135: FILE: lib/zlib_inflate/inflate.c:316:
+  if (z == NULL || z->state == NULL || z->state->blocks == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!z->state"
#135: FILE: lib/zlib_inflate/inflate.c:316:
+  if (z == NULL || z->state == NULL || z->state->blocks == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!z->state->blocks"
#135: FILE: lib/zlib_inflate/inflate.c:316:
+  if (z == NULL || z->state == NULL || z->state->blocks == NULL)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#144: FILE: lib/zlib_inflate/inflate.c:355:
+	if (s->checkfn != NULL)
 	    s->check = (*s->checkfn)(s->check, q, t);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "s->checkfn"
#144: FILE: lib/zlib_inflate/inflate.c:355:
+	if (s->checkfn != NULL)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#155: FILE: lib/zlib_deflate/deflate.c:202:
+    if (version == NULL || version[0] != my_version[0] ||$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!version"
#155: FILE: lib/zlib_deflate/deflate.c:202:
+    if (version == NULL || version[0] != my_version[0] ||

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#160: FILE: lib/zlib_deflate/deflate.c:206:
+    if (strm == NULL) return Z_STREAM_ERROR;$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#160: FILE: lib/zlib_deflate/deflate.c:206:
+    if (strm == NULL) return Z_STREAM_ERROR;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!strm"
#160: FILE: lib/zlib_deflate/deflate.c:206:
+    if (strm == NULL) return Z_STREAM_ERROR;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#163: FILE: lib/zlib_deflate/deflate.c:208:
+    strm->msg = NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#172: FILE: lib/zlib_deflate/deflate.c:269:
+    if (strm == NULL || strm->state == NULL || dictionary == NULL)$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!strm"
#172: FILE: lib/zlib_deflate/deflate.c:269:
+    if (strm == NULL || strm->state == NULL || dictionary == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!strm->state"
#172: FILE: lib/zlib_deflate/deflate.c:269:
+    if (strm == NULL || strm->state == NULL || dictionary == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dictionary"
#172: FILE: lib/zlib_deflate/deflate.c:269:
+    if (strm == NULL || strm->state == NULL || dictionary == NULL)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#181: FILE: lib/zlib_deflate/deflate.c:308:
+    if (strm == NULL || strm->state == NULL)$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!strm"
#181: FILE: lib/zlib_deflate/deflate.c:308:
+    if (strm == NULL || strm->state == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!strm->state"
#181: FILE: lib/zlib_deflate/deflate.c:308:
+    if (strm == NULL || strm->state == NULL)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#186: FILE: lib/zlib_deflate/deflate.c:312:
+    strm->msg = NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#195: FILE: lib/zlib_deflate/deflate.c:343:
+    if (strm == NULL || strm->state == NULL) return Z_STREAM_ERROR;$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#195: FILE: lib/zlib_deflate/deflate.c:343:
+    if (strm == NULL || strm->state == NULL) return Z_STREAM_ERROR;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!strm"
#195: FILE: lib/zlib_deflate/deflate.c:343:
+    if (strm == NULL || strm->state == NULL) return Z_STREAM_ERROR;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!strm->state"
#195: FILE: lib/zlib_deflate/deflate.c:343:
+    if (strm == NULL || strm->state == NULL) return Z_STREAM_ERROR;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#204: FILE: lib/zlib_deflate/deflate.c:397:
+    if (strm->next_out != NULL) {$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "strm->next_out"
#204: FILE: lib/zlib_deflate/deflate.c:397:
+    if (strm->next_out != NULL) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#213: FILE: lib/zlib_deflate/deflate.c:419:
+    if (strm == NULL || strm->state == NULL ||$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!strm"
#213: FILE: lib/zlib_deflate/deflate.c:419:
+    if (strm == NULL || strm->state == NULL ||

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!strm->state"
#213: FILE: lib/zlib_deflate/deflate.c:419:
+    if (strm == NULL || strm->state == NULL ||

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#220: FILE: lib/zlib_deflate/deflate.c:425:
+    if ((strm->next_in == NULL && strm->avail_in != 0) ||$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!strm->next_in"
#220: FILE: lib/zlib_deflate/deflate.c:425:
+    if ((strm->next_in == NULL && strm->avail_in != 0) ||

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#229: FILE: lib/zlib_deflate/deflate.c:556:
+    if (strm == NULL || strm->state == NULL) return Z_STREAM_ERROR;$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#229: FILE: lib/zlib_deflate/deflate.c:556:
+    if (strm == NULL || strm->state == NULL) return Z_STREAM_ERROR;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!strm"
#229: FILE: lib/zlib_deflate/deflate.c:556:
+    if (strm == NULL || strm->state == NULL) return Z_STREAM_ERROR;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!strm->state"
#229: FILE: lib/zlib_deflate/deflate.c:556:
+    if (strm == NULL || strm->state == NULL) return Z_STREAM_ERROR;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#238: FILE: lib/zlib_deflate/deflate.c:565:
+    strm->state = NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#247: FILE: lib/zlib_deflate/deflate.c:587:
+    if (source == NULL || dest == NULL || source->state == NULL) {$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#247: FILE: lib/zlib_deflate/deflate.c:587:
+    if (source == NULL || dest == NULL || source->state == NULL) {
         return Z_STREAM_ERROR;
     }

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!source"
#247: FILE: lib/zlib_deflate/deflate.c:587:
+    if (source == NULL || dest == NULL || source->state == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dest"
#247: FILE: lib/zlib_deflate/deflate.c:587:
+    if (source == NULL || dest == NULL || source->state == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!source->state"
#247: FILE: lib/zlib_deflate/deflate.c:587:
+    if (source == NULL || dest == NULL || source->state == NULL) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#256: FILE: lib/zlib_deflate/deflate.c:965:
+                   (char *)NULL), \$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#256: FILE: lib/zlib_deflate/deflate.c:965:
+                   (char *)NULL), \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#267: FILE: lib/zlib_inflate/infblock.c:74:
+  if (c != NULL)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#267: FILE: lib/zlib_inflate/infblock.c:74:
+  if (c != NULL)
     *c = s->check;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "c"
#267: FILE: lib/zlib_inflate/infblock.c:74:
+  if (c != NULL)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#277: FILE: lib/zlib_inflate/infblock.c:82:
+  if (s->checkfn != NULL)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#277: FILE: lib/zlib_inflate/infblock.c:82:
+  if (s->checkfn != NULL)
+    z->adler = s->check = (*s->checkfn)(0L, (const Byte *)NULL, 0);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "s->checkfn"
#277: FILE: lib/zlib_inflate/infblock.c:82:
+  if (s->checkfn != NULL)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#278: FILE: lib/zlib_inflate/infblock.c:83:
+    z->adler = s->check = (*s->checkfn)(0L, (const Byte *)NULL, 0);$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#278: FILE: lib/zlib_inflate/infblock.c:83:
+    z->adler = s->check = (*s->checkfn)(0L, (const Byte *)NULL, 0);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:CAMELCASE: Avoid CamelCase: <Byte>
#278: FILE: lib/zlib_inflate/infblock.c:83:
+    z->adler = s->check = (*s->checkfn)(0L, (const Byte *)NULL, 0);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#287: FILE: lib/zlib_inflate/infblock.c:100:
+  zlib_inflate_blocks_reset(s, z, NULL);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#296: FILE: lib/zlib_inflate/infblock.c:144:
+            if (s->sub.decode.codes == NULL)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#296: FILE: lib/zlib_inflate/infblock.c:144:
+            if (s->sub.decode.codes == NULL)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (12, 14)
#296: FILE: lib/zlib_inflate/infblock.c:144:
+            if (s->sub.decode.codes == NULL)
             {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!s->sub.decode.codes"
#296: FILE: lib/zlib_inflate/infblock.c:144:
+            if (s->sub.decode.codes == NULL)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#305: FILE: lib/zlib_inflate/infblock.c:273:
+      s->sub.trees.tb = NULL;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#314: FILE: lib/zlib_inflate/infblock.c:292:
+        if ((c = zlib_inflate_codes_new(bl, bd, tl, td, z)) == NULL)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#314: FILE: lib/zlib_inflate/infblock.c:292:
+        if ((c = zlib_inflate_codes_new(bl, bd, tl, td, z)) == NULL)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#314: FILE: lib/zlib_inflate/infblock.c:292:
+        if ((c = zlib_inflate_codes_new(bl, bd, tl, td, z)) == NULL)
         {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#314: FILE: lib/zlib_inflate/infblock.c:292:
+        if ((c = zlib_inflate_codes_new(bl, bd, tl, td, z)) == NULL)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#323: FILE: lib/zlib_inflate/infblock.c:336:
+  zlib_inflate_blocks_reset(s, z, NULL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#343: FILE: lib/zlib_inflate/inftrees.c:142:
+    *t = (inflate_huft *)NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#353: FILE: lib/zlib_inflate/inftrees.c:196:
+  u[0] = (inflate_huft *)NULL;        /* just to keep compilers happy */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#354: FILE: lib/zlib_inflate/inftrees.c:197:
+  q = (inflate_huft *)NULL;     /* ditto */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#363: FILE: lib/zlib_inflate/inftrees.c:305:
+  r = huft_build(c, 19, 19, (uInt*)NULL, (uInt*)NULL,$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#363: FILE: lib/zlib_inflate/inftrees.c:305:
+  r = huft_build(c, 19, 19, (uInt*)NULL, (uInt*)NULL,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#363: FILE: lib/zlib_inflate/inftrees.c:305:
+  r = huft_build(c, 19, 19, (uInt*)NULL, (uInt*)NULL,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#374: FILE: lib/zlib_inflate/infutil.c:47:
+  if (s->checkfn != NULL)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#374: FILE: lib/zlib_inflate/infutil.c:47:
+  if (s->checkfn != NULL)
     z->adler = s->check = (*s->checkfn)(s->check, q, n);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "s->checkfn"
#374: FILE: lib/zlib_inflate/infutil.c:47:
+  if (s->checkfn != NULL)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#383: FILE: lib/zlib_inflate/infutil.c:73:
+    if (s->checkfn != NULL)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 6)
#383: FILE: lib/zlib_inflate/infutil.c:73:
+    if (s->checkfn != NULL)
       z->adler = s->check = (*s->checkfn)(s->check, q, n);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "s->checkfn"
#383: FILE: lib/zlib_inflate/infutil.c:73:
+    if (s->checkfn != NULL)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#394: FILE: include/linux/zlib.h:94:
+   zalloc must return NULL if there is not enough memory for the object.$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#412: FILE: include/linux/zlib.h:177:
+   If zalloc and zfree are set to NULL, deflateInit updates them to$

CHECK:CAMELCASE: Avoid CamelCase: <If>
#412: FILE: include/linux/zlib.h:177:
+   If zalloc and zfree are set to NULL, deflateInit updates them to

CHECK:CAMELCASE: Avoid CamelCase: <deflateInit>
#412: FILE: include/linux/zlib.h:177:
+   If zalloc and zfree are set to NULL, deflateInit updates them to

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#421: FILE: include/linux/zlib.h:299:
+   the caller. If next_in is not NULL and avail_in is large enough (the exact$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#421: FILE: include/linux/zlib.h:299:
+   the caller. If next_in is not NULL and avail_in is large enough (the exact

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#426: FILE: include/linux/zlib.h:303:
+   inflate.  If zalloc and zfree are set to NULL, inflateInit updates them to$

CHECK:CAMELCASE: Avoid CamelCase: <inflateInit>
#426: FILE: include/linux/zlib.h:303:
+   inflate.  If zalloc and zfree are set to NULL, inflateInit updates them to

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#437: FILE: include/linux/zutil.h:84:
+     uLong adler = adler32(0L, NULL, 0);$

CHECK:CAMELCASE: Avoid CamelCase: <uLong>
#437: FILE: include/linux/zutil.h:84:
+     uLong adler = adler32(0L, NULL, 0);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#446: FILE: include/linux/zutil.h:99:
+    if (buf == NULL) return 1L;$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#446: FILE: include/linux/zutil.h:99:
+    if (buf == NULL) return 1L;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!buf"
#446: FILE: include/linux/zutil.h:99:
+    if (buf == NULL) return 1L;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000364514.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 10 errors, 68 warnings, 51 checks, 353 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000364514.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
