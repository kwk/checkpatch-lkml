CHECK:CAMELCASE: Avoid CamelCase: <PcCommand>
#41: FILE: drivers/char/rio/cmdpkt.h:121:
+				u8 PcCommand;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <PcPhbNum>
#46: FILE: drivers/char/rio/cmdpkt.h:123:
+					u8 PcPhbNum;

CHECK:CAMELCASE: Avoid CamelCase: <PcLinkNum>
#47: FILE: drivers/char/rio/cmdpkt.h:124:
+					u8 PcLinkNum;

CHECK:CAMELCASE: Avoid CamelCase: <PcIDNum>
#48: FILE: drivers/char/rio/cmdpkt.h:125:
+					u8 PcIDNum;

CHECK:CAMELCASE: Avoid CamelCase: <NumPackets>
#55: FILE: drivers/char/rio/cmdpkt.h:129:
+				u16 NumPackets;

CHECK:CAMELCASE: Avoid CamelCase: <LoadBase>
#56: FILE: drivers/char/rio/cmdpkt.h:130:
+				u16 LoadBase;

CHECK:CAMELCASE: Avoid CamelCase: <CodeSize>
#57: FILE: drivers/char/rio/cmdpkt.h:131:
+				u16 CodeSize;

CHECK:CAMELCASE: Avoid CamelCase: <PcSequence>
#63: FILE: drivers/char/rio/cmdpkt.h:135:
+			u16 PcSequence;

CHECK:CAMELCASE: Avoid CamelCase: <PcBootData>
#64: FILE: drivers/char/rio/cmdpkt.h:136:
+			u8 PcBootData[RTA_BOOT_DATA_SIZE];

CHECK:CAMELCASE: Avoid CamelCase: <PcUniqNum>
#71: FILE: drivers/char/rio/cmdpkt.h:140:
+			u8 PcUniqNum[4];	/* this is really a uint. */

CHECK:CAMELCASE: Avoid CamelCase: <PcModuleTypes>
#72: FILE: drivers/char/rio/cmdpkt.h:141:
+			u8 PcModuleTypes;	/* what modules are fitted */

CHECK:CAMELCASE: Avoid CamelCase: <PcModemStatus>
#84: FILE: drivers/char/rio/cmdpkt.h:146:
+			u8 PcModemStatus;

CHECK:CAMELCASE: Avoid CamelCase: <PcPortStatus>
#85: FILE: drivers/char/rio/cmdpkt.h:147:
+			u8 PcPortStatus;

CHECK:CAMELCASE: Avoid CamelCase: <PcSubCommand>
#86: FILE: drivers/char/rio/cmdpkt.h:148:
+			u8 PcSubCommand;

CHECK:CAMELCASE: Avoid CamelCase: <PcSubAddr>
#87: FILE: drivers/char/rio/cmdpkt.h:149:
+			u16 PcSubAddr;

CHECK:CAMELCASE: Avoid CamelCase: <PcSubData>
#88: FILE: drivers/char/rio/cmdpkt.h:150:
+			u8 PcSubData[64];

CHECK:CAMELCASE: Avoid CamelCase: <PcCommandText>
#96: FILE: drivers/char/rio/cmdpkt.h:154:
+			u8 PcCommandText[1];

CHECK:CAMELCASE: Avoid CamelCase: <PcIDNum2>
#98: FILE: drivers/char/rio/cmdpkt.h:156:
+			u8 PcIDNum2;	/* Tacked on end */

CHECK:CAMELCASE: Avoid CamelCase: <Error>
#116: FILE: drivers/char/rio/daemon.h:48:
+	unsigned int Error;

CHECK:CAMELCASE: Avoid CamelCase: <Entry>
#117: FILE: drivers/char/rio/daemon.h:49:
+	unsigned int Entry;

CHECK:CAMELCASE: Avoid CamelCase: <Other>
#118: FILE: drivers/char/rio/daemon.h:50:
+	unsigned int Other;

CHECK:CAMELCASE: Avoid CamelCase: <Count>
#125: FILE: drivers/char/rio/daemon.h:55:
+	unsigned int Count;

CHECK:CAMELCASE: Avoid CamelCase: <ProductCode>
#126: FILE: drivers/char/rio/daemon.h:56:
+	unsigned int ProductCode;

CHECK:CAMELCASE: Avoid CamelCase: <From>
#137: FILE: drivers/char/rio/daemon.h:71:
+	unsigned int From;		/* Set/Clear XP & IXANY Control from this port.... */

CHECK:CAMELCASE: Avoid CamelCase: <To>
#138: FILE: drivers/char/rio/daemon.h:72:
+	unsigned int To;		/* .... to this port */

CHECK:CAMELCASE: Avoid CamelCase: <XpCps>
#139: FILE: drivers/char/rio/daemon.h:73:
+	unsigned int XpCps;		/* at this speed */

CHECK:CAMELCASE: Avoid CamelCase: <IxAny>
#147: FILE: drivers/char/rio/daemon.h:76:
+	u8 IxAny;			/* enable/disable IXANY */

CHECK:CAMELCASE: Avoid CamelCase: <IxOn>
#148: FILE: drivers/char/rio/daemon.h:77:
+	u8 IxOn;			/* enable/disable IXON */

CHECK:CAMELCASE: Avoid CamelCase: <Lock>
#149: FILE: drivers/char/rio/daemon.h:78:
+	u8 Lock;			/* lock port params */

CHECK:CAMELCASE: Avoid CamelCase: <Store>
#150: FILE: drivers/char/rio/daemon.h:79:
+	u8 Store;			/* store params across closes */

CHECK:CAMELCASE: Avoid CamelCase: <Drain>
#151: FILE: drivers/char/rio/daemon.h:80:
+	u8 Drain;			/* close only when drained */

CHECK:CAMELCASE: Avoid CamelCase: <Host>
#157: FILE: drivers/char/rio/daemon.h:84:
+	unsigned int Host;

CHECK:CAMELCASE: Avoid CamelCase: <Link>
#158: FILE: drivers/char/rio/daemon.h:85:
+	unsigned int Link;

CHECK:CAMELCASE: Avoid CamelCase: <HostNum>
#165: FILE: drivers/char/rio/daemon.h:90:
+	unsigned int HostNum;

CHECK:CAMELCASE: Avoid CamelCase: <RupNum>
#166: FILE: drivers/char/rio/daemon.h:91:
+	unsigned int RupNum;

CHECK:CAMELCASE: Avoid CamelCase: <SysPort>
#172: FILE: drivers/char/rio/daemon.h:96:
+	unsigned int SysPort;

CHECK:CAMELCASE: Avoid CamelCase: <Debug>
#205: FILE: drivers/char/rio/daemon.h:118:
+	unsigned int Debug;

CHECK:CAMELCASE: Avoid CamelCase: <Wait>
#206: FILE: drivers/char/rio/daemon.h:119:
+	unsigned int Wait;

CHECK:CAMELCASE: Avoid CamelCase: <FirstPort>
#212: FILE: drivers/char/rio/daemon.h:123:
+	unsigned int FirstPort;		/* 8 ports, starting from this (tty) number */

CHECK:CAMELCASE: Avoid CamelCase: <RtaUnique>
#213: FILE: drivers/char/rio/daemon.h:124:
+	unsigned int RtaUnique;		/* reside on this RTA (unique number) */

CHECK:CAMELCASE: Avoid CamelCase: <NumEntries>
#218: FILE: drivers/char/rio/daemon.h:128:
+	unsigned int NumEntries;	/* How many port sets are we mapping? */

CHECK:CAMELCASE: Avoid CamelCase: <UniqueNum>
#235: FILE: drivers/char/rio/daemon.h:150:
+	unsigned long UniqueNum;

CHECK:CAMELCASE: Avoid CamelCase: <Type>
#254: FILE: drivers/char/rio/host.h:53:
+	unsigned char Type;		/* RIO_EISA, RIO_MCA, ... */

CHECK:CAMELCASE: Avoid CamelCase: <Ivec>
#255: FILE: drivers/char/rio/host.h:54:
+	unsigned char Ivec;		/* POLLED or ivec number */

CHECK:CAMELCASE: Avoid CamelCase: <Mode>
#256: FILE: drivers/char/rio/host.h:55:
+	unsigned char Mode;		/* Control stuff */

CHECK:CAMELCASE: Avoid CamelCase: <Slot>
#257: FILE: drivers/char/rio/host.h:56:
+	unsigned char Slot;		/* Slot */

CHECK:CAMELCASE: Avoid CamelCase: <Caddr>
#258: FILE: drivers/char/rio/host.h:57:
+	caddr_t Caddr;			/* KV address of DPRAM */

CHECK:CAMELCASE: Avoid CamelCase: <DpRam>
#259: FILE: drivers/char/rio/host.h:58:
+	struct DpRam *CardP;		/* KV address of DPRAM, with overlay */

CHECK:CAMELCASE: Avoid CamelCase: <CardP>
#259: FILE: drivers/char/rio/host.h:58:
+	struct DpRam *CardP;		/* KV address of DPRAM, with overlay */

CHECK:CAMELCASE: Avoid CamelCase: <PaddrP>
#260: FILE: drivers/char/rio/host.h:59:
+	paddr_t PaddrP;			/* Phys. address of DPRAM */

CHECK:CAMELCASE: Avoid CamelCase: <WorkToBeDone>
#271: FILE: drivers/char/rio/host.h:63:
+	unsigned int WorkToBeDone;	/* set to true each interrupt */

CHECK:CAMELCASE: Avoid CamelCase: <InIntr>
#272: FILE: drivers/char/rio/host.h:64:
+	unsigned int InIntr;		/* Being serviced? */

CHECK:CAMELCASE: Avoid CamelCase: <IntSrvDone>
#273: FILE: drivers/char/rio/host.h:65:
+	unsigned int IntSrvDone;	/* host's interrupt has been serviced */

WARNING:SPACING: Unnecessary space before function pointer arguments
#274: FILE: drivers/char/rio/host.h:66:
+	void (*Copy) (void *, void *, int);	/* copy func */

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <Copy>
#274: FILE: drivers/char/rio/host.h:66:
+	void (*Copy) (void *, void *, int);	/* copy func */

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#274: FILE: drivers/char/rio/host.h:66:
+	void (*Copy) (void *, void *, int);	/* copy func */

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#274: FILE: drivers/char/rio/host.h:66:
+	void (*Copy) (void *, void *, int);	/* copy func */

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#274: FILE: drivers/char/rio/host.h:66:
+	void (*Copy) (void *, void *, int);	/* copy func */

CHECK:CAMELCASE: Avoid CamelCase: <Flags>
#283: FILE: drivers/char/rio/host.h:75:
+	unsigned long Flags;			/* Whats going down */

CHECK:CAMELCASE: Avoid CamelCase: <Map>
#307: FILE: drivers/char/rio/host.h:94:
+	struct Map Mapping[MAX_RUP];		/* Mappings for host */

CHECK:CAMELCASE: Avoid CamelCase: <Mapping>
#307: FILE: drivers/char/rio/host.h:94:
+	struct Map Mapping[MAX_RUP];		/* Mappings for host */

CHECK:CAMELCASE: Avoid CamelCase: <PhbP>
#308: FILE: drivers/char/rio/host.h:95:
+	struct PHB *PhbP;			/* Pointer to the PHB array */

CHECK:CAMELCASE: Avoid CamelCase: <PhbNumP>
#309: FILE: drivers/char/rio/host.h:96:
+	unsigned short *PhbNumP;		/* Ptr to Number of PHB's */

CHECK:CAMELCASE: Avoid CamelCase: <LinkStrP>
#310: FILE: drivers/char/rio/host.h:97:
+	struct LPB *LinkStrP;			/* Link Structure Array */

CHECK:CAMELCASE: Avoid CamelCase: <RupP>
#311: FILE: drivers/char/rio/host.h:98:
+	struct RUP *RupP;			/* Sixteen real rups here */

CHECK:CAMELCASE: Avoid CamelCase: <ParmMapP>
#312: FILE: drivers/char/rio/host.h:99:
+	struct PARM_MAP *ParmMapP;		/* points to the parmmap */

CHECK:CAMELCASE: Avoid CamelCase: <ExtraUnits>
#313: FILE: drivers/char/rio/host.h:100:
+	unsigned int ExtraUnits[MAX_EXTRA_UNITS];	/* unknown things */

CHECK:CAMELCASE: Avoid CamelCase: <NumExtraBooted>
#314: FILE: drivers/char/rio/host.h:101:
+	unsigned int NumExtraBooted;		/* how many of the above */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#408: FILE: drivers/char/rio/linux_compat.h:54:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <RIOReadCheck>
#442: FILE: drivers/char/rio/riodrvr.h:75:
+	unsigned int RIOReadCheck;	/* Rio read check */

CHECK:CAMELCASE: Avoid CamelCase: <RIONoMessage>
#443: FILE: drivers/char/rio/riodrvr.h:76:
+	unsigned int RIONoMessage;	/* To display message or not */

CHECK:CAMELCASE: Avoid CamelCase: <RIONumBootPkts>
#444: FILE: drivers/char/rio/riodrvr.h:77:
+	unsigned int RIONumBootPkts;	/* how many packets for an RTA */

CHECK:CAMELCASE: Avoid CamelCase: <RIOBootCount>
#445: FILE: drivers/char/rio/riodrvr.h:78:
+	unsigned int RIOBootCount;	/* size of RTA code */

CHECK:CAMELCASE: Avoid CamelCase: <RIOBooting>
#446: FILE: drivers/char/rio/riodrvr.h:79:
+	unsigned int RIOBooting;	/* count of outstanding boots */

CHECK:CAMELCASE: Avoid CamelCase: <RIOSystemUp>
#447: FILE: drivers/char/rio/riodrvr.h:80:
+	unsigned int RIOSystemUp;	/* Booted ?? */

CHECK:CAMELCASE: Avoid CamelCase: <RIOCounting>
#448: FILE: drivers/char/rio/riodrvr.h:81:
+	unsigned int RIOCounting;	/* for counting interrupts */

CHECK:CAMELCASE: Avoid CamelCase: <RIOIntCount>
#449: FILE: drivers/char/rio/riodrvr.h:82:
+	unsigned int RIOIntCount;	/* # of intr since last check */

CHECK:CAMELCASE: Avoid CamelCase: <RIOTxCount>
#450: FILE: drivers/char/rio/riodrvr.h:83:
+	unsigned int RIOTxCount;	/* number of xmit intrs  */

CHECK:CAMELCASE: Avoid CamelCase: <RIORxCount>
#451: FILE: drivers/char/rio/riodrvr.h:84:
+	unsigned int RIORxCount;	/* number of rx intrs */

CHECK:CAMELCASE: Avoid CamelCase: <RIORupCount>
#452: FILE: drivers/char/rio/riodrvr.h:85:
+	unsigned int RIORupCount;	/* number of rup intrs */

CHECK:CAMELCASE: Avoid CamelCase: <RIOLastPortsMapped>
#461: FILE: drivers/char/rio/riodrvr.h:92:
+	unsigned int RIOLastPortsMapped;	/* highest port number known */

CHECK:CAMELCASE: Avoid CamelCase: <RIOFirstPortsMapped>
#462: FILE: drivers/char/rio/riodrvr.h:93:
+	unsigned int RIOFirstPortsMapped;	/* lowest port number known */

CHECK:CAMELCASE: Avoid CamelCase: <RIOLastPortsBooted>
#466: FILE: drivers/char/rio/riodrvr.h:95:
+	unsigned int RIOLastPortsBooted;	/* highest port number running */

CHECK:CAMELCASE: Avoid CamelCase: <RIOFirstPortsBooted>
#467: FILE: drivers/char/rio/riodrvr.h:96:
+	unsigned int RIOFirstPortsBooted;	/* lowest port number running */

CHECK:CAMELCASE: Avoid CamelCase: <RIOLastPortsOpened>
#471: FILE: drivers/char/rio/riodrvr.h:98:
+	unsigned int RIOLastPortsOpened;	/* highest port number running */

CHECK:CAMELCASE: Avoid CamelCase: <RIOFirstPortsOpened>
#472: FILE: drivers/char/rio/riodrvr.h:99:
+	unsigned int RIOFirstPortsOpened;	/* lowest port number running */

CHECK:CAMELCASE: Avoid CamelCase: <RIOQuickCheck>
#477: FILE: drivers/char/rio/riodrvr.h:102:
+	unsigned int RIOQuickCheck;

CHECK:CAMELCASE: Avoid CamelCase: <CdRegister>
#478: FILE: drivers/char/rio/riodrvr.h:103:
+	unsigned int CdRegister;	/* ??? */

CHECK:CAMELCASE: Avoid CamelCase: <_RIO_Polled>
#486: FILE: drivers/char/rio/riodrvr.h:109:
+	unsigned int _RIO_Polled;	/* Counter for polling */

CHECK:CAMELCASE: Avoid CamelCase: <_RIO_Interrupted>
#487: FILE: drivers/char/rio/riodrvr.h:110:
+	unsigned int _RIO_Interrupted;	/* Counter for interrupt */

CHECK:CAMELCASE: Avoid CamelCase: <RIOBindTab>
#496: FILE: drivers/char/rio/riodrvr.h:124:
+	unsigned long RIOBindTab[MAX_RTA_BINDINGS];

CHECK:CAMELCASE: Avoid CamelCase: <RIOMemDump>
#499: FILE: drivers/char/rio/riodrvr.h:126:
+	unsigned char RIOMemDump[MEMDUMP_SIZE];

CHECK:CAMELCASE: Avoid CamelCase: <Unit>
#534: FILE: drivers/char/rio/top.h:44:
+	u8 Unit;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#563: FILE: drivers/char/rio/typdef.h:60:
+typedef unsigned long paddr_t;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000094621.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 0 errors, 5 warnings, 89 checks, 486 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000094621.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
