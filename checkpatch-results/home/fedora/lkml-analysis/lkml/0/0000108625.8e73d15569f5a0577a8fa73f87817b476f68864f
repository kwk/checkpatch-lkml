ERROR:TRAILING_WHITESPACE: trailing whitespace
#79: FILE: Documentation/pci-error-recovery.txt:11:
+PCI errors on the bus, such as parity errors on the data and address $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#81: FILE: Documentation/pci-error-recovery.txt:13:
+chipsets are able to deal with these errors; these include PCI-E chipsets, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#83: FILE: Documentation/pci-error-recovery.txt:15:
+boxes. A typical action taken is to disconnect the affected device, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#85: FILE: Documentation/pci-error-recovery.txt:17:
+corruption; for example, to halt system memory corruption due to DMA's $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#88: FILE: Documentation/pci-error-recovery.txt:20:
+into working condition. The reset phase requires coordination $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#97: FILE: Documentation/pci-error-recovery.txt:29:
+including multiple instances of a device driver on multi-function $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#100: FILE: Documentation/pci-error-recovery.txt:32:
+It also gives the drivers a chance to defer incoming I/O as $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#101: FILE: Documentation/pci-error-recovery.txt:33:
+needed. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#107: FILE: Documentation/pci-error-recovery.txt:39:
+of reset it desires, the choices being a simple re-enabling of I/O $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#109: FILE: Documentation/pci-error-recovery.txt:41:
+If any driver requests a full reset, that is what will be done. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#112: FILE: Documentation/pci-error-recovery.txt:44:
+again notified, so that they may then perform any device setup/config $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#113: FILE: Documentation/pci-error-recovery.txt:45:
+that may be required.  After these have all completed, a final $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#116: FILE: Documentation/pci-error-recovery.txt:48:
+The biggest reason for choosing a kernel-based implementation rather $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#117: FILE: Documentation/pci-error-recovery.txt:49:
+than a user-space implementation was the need to deal with bus $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#118: FILE: Documentation/pci-error-recovery.txt:50:
+disconnects of PCI devices attached to storage media, and, in particular, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#119: FILE: Documentation/pci-error-recovery.txt:51:
+disconnects from devices holding the root file system.  If the root $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#120: FILE: Documentation/pci-error-recovery.txt:52:
+file system is disconnected, a user-space mechanism would have to go $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#121: FILE: Documentation/pci-error-recovery.txt:53:
+through a large number of contortions to complete recovery. Almost all $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#122: FILE: Documentation/pci-error-recovery.txt:54:
+of the current Linux file systems are not tolerant of disconnection $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#123: FILE: Documentation/pci-error-recovery.txt:55:
+from/reconnection to their underlying block device. By contrast, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#126: FILE: Documentation/pci-error-recovery.txt:58:
+for example, the SCSI-generic layer already provides significant $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#146: FILE: Documentation/pci-error-recovery.txt:70:
+and the actual recovery steps taken are platform dependent.  The $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#184: FILE: Documentation/pci-error-recovery.txt:100:
+if it implements any, it must implement error_detected(). If a callback $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#210: FILE: Documentation/pci-error-recovery.txt:109:
+event will be platform-dependent, but will follow the general $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#215: FILE: Documentation/pci-error-recovery.txt:114:
+PCI bus error is detect by the PCI hardware.  On powerpc, the slot $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#216: FILE: Documentation/pci-error-recovery.txt:115:
+is isolated, in that all I/O is blocked: all reads return 0xffffffff, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#222: FILE: Documentation/pci-error-recovery.txt:121:
+Platform calls the error_detected() callback on every instance of $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#225: FILE: Documentation/pci-error-recovery.txt:124:
+At this point, the device might not be accessible anymore, depending on $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#226: FILE: Documentation/pci-error-recovery.txt:125:
+the platform (the slot will be isolated on powerpc). The driver may $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#227: FILE: Documentation/pci-error-recovery.txt:126:
+already have "noticed" the error because of a failing I/O, but this $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#228: FILE: Documentation/pci-error-recovery.txt:127:
+is the proper "synchronization point", that is, it gives the driver $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#229: FILE: Documentation/pci-error-recovery.txt:128:
+a chance to cleanup, waiting for pending stuff (timers, whatever, etc...) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#230: FILE: Documentation/pci-error-recovery.txt:129:
+to complete; it can take semaphores, schedule, etc... everything but $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#269: FILE: Documentation/pci-error-recovery.txt:147:
+The next step taken will depend on the result codes returned by the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#270: FILE: Documentation/pci-error-recovery.txt:148:
+drivers. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#272: FILE: Documentation/pci-error-recovery.txt:150:
+If all drivers on the segment/slot return PCI_ERS_RESULT_CAN_RECOVER, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#274: FILE: Documentation/pci-error-recovery.txt:152:
+particular, if the platform doesn't isolate slots), and recovery $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#277: FILE: Documentation/pci-error-recovery.txt:155:
+If any driver requested a slot reset (by returning PCI_ERS_RESULT_NEED_RESET), $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#280: FILE: Documentation/pci-error-recovery.txt:158:
+If the platform is unable to recover the slot, the next step $

WARNING:REPEATED_WORD: Possible repeated word: 'the'
#303: FILE: Documentation/pci-error-recovery.txt:175:
+>>> it will panic the the kernel. There doesn't seem to be any other

ERROR:TRAILING_WHITESPACE: trailing whitespace
#309: FILE: Documentation/pci-error-recovery.txt:180:
+The platform re-enables MMIO to the device (but typically not the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#310: FILE: Documentation/pci-error-recovery.txt:181:
+DMA), and then calls the mmio_enabled() callback on all affected $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#331: FILE: Documentation/pci-error-recovery.txt:189:
+but not restart operations. This is callback is made if all drivers on $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#332: FILE: Documentation/pci-error-recovery.txt:190:
+a segment agree that they can try to recover and if no automatic link reset $

WARNING:TYPO_SPELLING: 'wont' may be misspelled - perhaps 'won't'?
#334: FILE: Documentation/pci-error-recovery.txt:192:
+a slot reset or a link reset, it wont call this callback, and instead
                                  ^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#338: FILE: Documentation/pci-error-recovery.txt:196:
+>>> Proposal: All I/O's should be done _synchronously_ from within $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#340: FILE: Documentation/pci-error-recovery.txt:198:
+>>> the normal pci_check_whatever() API, no new error_detected() $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#341: FILE: Documentation/pci-error-recovery.txt:199:
+>>> callback will be issued due to an error happening here. However, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#342: FILE: Documentation/pci-error-recovery.txt:200:
+>>> such an error might cause IOs to be re-blocked for the whole $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#343: FILE: Documentation/pci-error-recovery.txt:201:
+>>> segment, and thus invalidate the recovery that other devices $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#344: FILE: Documentation/pci-error-recovery.txt:202:
+>>> on the same segment might have done, forcing the whole segment $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#398: FILE: Documentation/pci-error-recovery.txt:237:
+on all affected device drivers.  This is a PCI-Express specific state $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#399: FILE: Documentation/pci-error-recovery.txt:238:
+and is done whenever a non-fatal error has been detected that can be $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#400: FILE: Documentation/pci-error-recovery.txt:239:
+"solved" by resetting the link. This call informs the driver of the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#401: FILE: Documentation/pci-error-recovery.txt:240:
+reset and the driver should check to see if the device appears to be $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#404: FILE: Documentation/pci-error-recovery.txt:243:
+The driver is not supposed to restart normal driver I/O operations $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#405: FILE: Documentation/pci-error-recovery.txt:244:
+at this point.  It should limit itself to "probing" the device to $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#438: FILE: Documentation/pci-error-recovery.txt:262:
+A soft reset consists of asserting the adapter #RST line and then $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#440: FILE: Documentation/pci-error-recovery.txt:264:
+that is equivalent to what it would be after a fresh system $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#442: FILE: Documentation/pci-error-recovery.txt:266:
+If the platform supports PCI hotplug, then the reset might be $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#443: FILE: Documentation/pci-error-recovery.txt:267:
+performed by toggling the slot electrical power off/on. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#451: FILE: Documentation/pci-error-recovery.txt:275:
+This call gives drivers the chance to re-initialize the hardware $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#456: FILE: Documentation/pci-error-recovery.txt:280:
+Drivers should not yet restart normal I/O processing operations $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#457: FILE: Documentation/pci-error-recovery.txt:281:
+at this point.  If all device drivers report success on this $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#472: FILE: Documentation/pci-error-recovery.txt:295:
+or global device initialization. For example, the Symbios sym53cxx2 $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#487: FILE: Documentation/pci-error-recovery.txt:305:
+Platform proceeds either to STEP 5 (Resume Operations) or STEP 6 (Permanent $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#499: FILE: Documentation/pci-error-recovery.txt:308:
+>>> The current powerpc implementation does not currently try a $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#500: FILE: Documentation/pci-error-recovery.txt:309:
+>>> power-cycle reset if the driver returned PCI_ERS_RESULT_DISCONNECT. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#506: FILE: Documentation/pci-error-recovery.txt:315:
+The platform will call the resume() callback on all affected device $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#509: FILE: Documentation/pci-error-recovery.txt:318:
+The goal of this callback is to tell the driver to restart activity, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#513: FILE: Documentation/pci-error-recovery.txt:322:
+At this point, if a new error happens, the platform will restart $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#519: FILE: Documentation/pci-error-recovery.txt:328:
+the device.  The platform will call error_detected() with a $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#520: FILE: Documentation/pci-error-recovery.txt:329:
+pci_channel_state value of pci_channel_io_perm_failure. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#523: FILE: Documentation/pci-error-recovery.txt:332:
+cancel all pending I/O, refuse all new I/O, returning -EIO to $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#524: FILE: Documentation/pci-error-recovery.txt:333:
+higher layers. The device driver should then clean up all of its $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#528: FILE: Documentation/pci-error-recovery.txt:337:
+The platform will typically notify the system operator of the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#532: FILE: Documentation/pci-error-recovery.txt:341:
+caused by over-heating, some by a poorly seated card. Many $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#533: FILE: Documentation/pci-error-recovery.txt:342:
+PCI error events are caused by software bugs, e.g. DMA's to $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#534: FILE: Documentation/pci-error-recovery.txt:343:
+wild addresses or bogus split transactions due to programming $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#536: FILE: Documentation/pci-error-recovery.txt:345:
+for additional detail on real-life experience of the causes of $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#542: FILE: Documentation/pci-error-recovery.txt:351:
+The way those callbacks are called is platform policy. A platform with $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#566: FILE: Documentation/pci-error-recovery.txt:367:
+ - There is no guarantee that interrupt delivery is stopped, that is, $

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000108625.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 80 errors, 2 warnings, 0 checks, 552 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000108625.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
