WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#83: 
       __attribute__((__section__(".data.percpu_type"))) PERCPU_TYPE per_cpu_type__##name; \

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#96: 
#define per_cpu(var, cpu)			\

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:NEW_TYPEDEFS: do not add new typedefs
#188: FILE: include/asm-generic/percpu.h:10:
+typedef struct { int module; } *percpu_module_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#189: FILE: include/asm-generic/percpu.h:11:
+typedef struct { int kernel; } *percpu_kernel_t;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#199: FILE: include/asm-generic/percpu.h:21:
+    __attribute__((__section__(".data.percpu_type"))) PERCPU_TYPE per_cpu_type__##name; \$

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".data.percpu_type") over __attribute__((__section__(".data.percpu_type")))
#199: FILE: include/asm-generic/percpu.h:21:
+    __attribute__((__section__(".data.percpu_type"))) PERCPU_TYPE per_cpu_type__##name; \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#203: FILE: include/asm-generic/percpu.h:25:
+    __attribute__((__section__(".data.percpu_type"))) PERCPU_TYPE per_cpu_type__##name; \$

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".data.percpu_type") over __attribute__((__section__(".data.percpu_type")))
#203: FILE: include/asm-generic/percpu.h:25:
+    __attribute__((__section__(".data.percpu_type"))) PERCPU_TYPE per_cpu_type__##name; \

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#214: FILE: include/asm-generic/percpu.h:36:
+#define per_cpu(var, cpu)			\
+	__builtin_choose_expr ( \
+		PERCPU_TYPE_EQUAL(per_cpu_type__##var, percpu_kernel_t),	\
+			per_cpu_kernel(var, cpu), \
+	__builtin_choose_expr ( \
+		PERCPU_TYPE_EQUAL(per_cpu_type__##var, percpu_kernel_t[]),	\
+			per_cpu_kernel(var, cpu), \
+	__builtin_choose_expr( \
+		PERCPU_TYPE_EQUAL(per_cpu_type__##var, percpu_module_t),	\
+			per_cpu_module(var, cpu),				\
+	__builtin_choose_expr( \
+		PERCPU_TYPE_EQUAL(per_cpu_type__##var, percpu_module_t[]),	\
+			per_cpu_module(var, cpu),				\
+		(void)0))))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'var' - possible side-effects?
#214: FILE: include/asm-generic/percpu.h:36:
+#define per_cpu(var, cpu)			\
+	__builtin_choose_expr ( \
+		PERCPU_TYPE_EQUAL(per_cpu_type__##var, percpu_kernel_t),	\
+			per_cpu_kernel(var, cpu), \
+	__builtin_choose_expr ( \
+		PERCPU_TYPE_EQUAL(per_cpu_type__##var, percpu_kernel_t[]),	\
+			per_cpu_kernel(var, cpu), \
+	__builtin_choose_expr( \
+		PERCPU_TYPE_EQUAL(per_cpu_type__##var, percpu_module_t),	\
+			per_cpu_module(var, cpu),				\
+	__builtin_choose_expr( \
+		PERCPU_TYPE_EQUAL(per_cpu_type__##var, percpu_module_t[]),	\
+			per_cpu_module(var, cpu),				\
+		(void)0))))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cpu' - possible side-effects?
#214: FILE: include/asm-generic/percpu.h:36:
+#define per_cpu(var, cpu)			\
+	__builtin_choose_expr ( \
+		PERCPU_TYPE_EQUAL(per_cpu_type__##var, percpu_kernel_t),	\
+			per_cpu_kernel(var, cpu), \
+	__builtin_choose_expr ( \
+		PERCPU_TYPE_EQUAL(per_cpu_type__##var, percpu_kernel_t[]),	\
+			per_cpu_kernel(var, cpu), \
+	__builtin_choose_expr( \
+		PERCPU_TYPE_EQUAL(per_cpu_type__##var, percpu_module_t),	\
+			per_cpu_module(var, cpu),				\
+	__builtin_choose_expr( \
+		PERCPU_TYPE_EQUAL(per_cpu_type__##var, percpu_module_t[]),	\
+			per_cpu_module(var, cpu),				\
+		(void)0))))

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#215: FILE: include/asm-generic/percpu.h:37:
+	__builtin_choose_expr ( \

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#218: FILE: include/asm-generic/percpu.h:40:
+	__builtin_choose_expr ( \

CHECK:LINE_SPACING: Please don't use multiple blank lines
#231: FILE: include/asm-generic/percpu.h:53:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#251: FILE: include/asm-generic/percpu.h:67:
+#define DECLARE_PER_CPU(type, name)			\
+	extern __typeof__(type) per_cpu__##name;	\
+	extern PERCPU_TYPE per_cpu_type__##name

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#259: FILE: include/asm-generic/percpu.h:75:
+# define EXPORT_PER_CPU_SYMBOL(var) EXPORT_SYMBOL(per_cpu__##var); EXPORT_SYMBOL(per_cpu_type__##var)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#259: FILE: include/asm-generic/percpu.h:75:
+# define EXPORT_PER_CPU_SYMBOL(var) EXPORT_SYMBOL(per_cpu__##var); EXPORT_SYMBOL(per_cpu_type__##var)

EXPORT_SYMBOL should immediately follow the symbol to be exported.

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#259: FILE: include/asm-generic/percpu.h:75:
+# define EXPORT_PER_CPU_SYMBOL(var) EXPORT_SYMBOL(per_cpu__##var); EXPORT_SYMBOL(per_cpu_type__##var)

WARNING:LONG_LINE: line length of 113 exceeds 100 columns
#260: FILE: include/asm-generic/percpu.h:76:
+# define EXPORT_PER_CPU_SYMBOL_GPL(var) EXPORT_SYMBOL_GPL(per_cpu__##var); EXPORT_SYMBOL_GPL(per_cpu_type__##var)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#260: FILE: include/asm-generic/percpu.h:76:
+# define EXPORT_PER_CPU_SYMBOL_GPL(var) EXPORT_SYMBOL_GPL(per_cpu__##var); EXPORT_SYMBOL_GPL(per_cpu_type__##var)

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#260: FILE: include/asm-generic/percpu.h:76:
+# define EXPORT_PER_CPU_SYMBOL_GPL(var) EXPORT_SYMBOL_GPL(per_cpu__##var); EXPORT_SYMBOL_GPL(per_cpu_type__##var)

WARNING:LONG_LINE: line length of 162 exceeds 100 columns
#261: FILE: include/asm-generic/percpu.h:77:
+# define EXPORT_PER_CPU_LOCKED_SYMBOL(var) EXPORT_SYMBOL(per_cpu_lock__##var##_locked); EXPORT_SYMBOL(per_cpu__##var##_locked); EXPORT_SYMBOL(per_cpu_type__##var)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#261: FILE: include/asm-generic/percpu.h:77:
+# define EXPORT_PER_CPU_LOCKED_SYMBOL(var) EXPORT_SYMBOL(per_cpu_lock__##var##_locked); EXPORT_SYMBOL(per_cpu__##var##_locked); EXPORT_SYMBOL(per_cpu_type__##var)

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#261: FILE: include/asm-generic/percpu.h:77:
+# define EXPORT_PER_CPU_LOCKED_SYMBOL(var) EXPORT_SYMBOL(per_cpu_lock__##var##_locked); EXPORT_SYMBOL(per_cpu__##var##_locked); EXPORT_SYMBOL(per_cpu_type__##var)

WARNING:LONG_LINE: line length of 178 exceeds 100 columns
#262: FILE: include/asm-generic/percpu.h:78:
+# define EXPORT_PER_CPU_LOCKED_SYMBOL_GPL(var) EXPORT_SYMBOL_GPL(per_cpu_lock__##var##_locked); EXPORT_SYMBOL_GPL(per_cpu__##var##_locked); EXPORT_SYMBOL_GPL(per_cpu_type__##var)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#262: FILE: include/asm-generic/percpu.h:78:
+# define EXPORT_PER_CPU_LOCKED_SYMBOL_GPL(var) EXPORT_SYMBOL_GPL(per_cpu_lock__##var##_locked); EXPORT_SYMBOL_GPL(per_cpu__##var##_locked); EXPORT_SYMBOL_GPL(per_cpu_type__##var)

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#262: FILE: include/asm-generic/percpu.h:78:
+# define EXPORT_PER_CPU_LOCKED_SYMBOL_GPL(var) EXPORT_SYMBOL_GPL(per_cpu_lock__##var##_locked); EXPORT_SYMBOL_GPL(per_cpu__##var##_locked); EXPORT_SYMBOL_GPL(per_cpu_type__##var)

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#449: FILE: kernel/module.c:268:
+	ptr = kmalloc(size * NR_CPUS, GFP_KERNEL);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#451: FILE: kernel/module.c:270:
+		printk(KERN_WARNING "Could not allocate %lu bytes percpu data\n",

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#451: FILE: kernel/module.c:270:
+	if (!ptr)
+		printk(KERN_WARNING "Could not allocate %lu bytes percpu data\n",

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#462: FILE: kernel/module.c:281:
+#if 0

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#467: FILE: kernel/module.c:286:
+	for (__i = 0; __i < NR_CPUS; __i++)			\

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#469: FILE: kernel/module.c:288:
+			memcpy((pcpudst)+__per_cpu_offset[__i],	\
 			                ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#505: FILE: kernel/module.c:302:
+	for (i=0; i < NR_CPUS; i++) {
 	      ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#505: FILE: kernel/module.c:302:
+	for (i=0; i < NR_CPUS; i++) {

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#553: FILE: kernel/module.c:323:
+	per_cpu_offset = kmalloc(sizeof(unsigned long) * NR_CPUS, GFP_KERNEL);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#558: FILE: kernel/module.c:328:
+	for (i = 0; i < NR_CPUS; i++, pptr += var_size)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#566: FILE: kernel/module.c:336:
+	for (i=0; i < sect_size; i++, ptr++)
 	      ^

CHECK:CAMELCASE: Avoid CamelCase: <Elf_Ehdr>
#577: FILE: kernel/module.c:349:
+static unsigned int find_pcputypesec(Elf_Ehdr *hdr,

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Elf_Shdr>
#578: FILE: kernel/module.c:350:
+				     Elf_Shdr *sechdrs,

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#605: FILE: kernel/module.c:398:
 }
+static inline unsigned int find_pcputypesec(Elf_Ehdr *hdr,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#655: FILE: kernel/module.c:1722:
+		BUG_ON(!pcputypeindex);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:LINE_SPACING: Missing a blank line after declarations
#669: FILE: kernel/module.c:1774:
+				unsigned long *ret;
+				BUG_ON(!pcpuindex);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#669: FILE: kernel/module.c:1774:
+				BUG_ON(!pcpuindex);

CHECK:BRACES: Unbalanced braces around else statement
#676: FILE: kernel/module.c:1781:
+			} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000085905.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 8 errors, 29 warnings, 8 checks, 472 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000085905.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
