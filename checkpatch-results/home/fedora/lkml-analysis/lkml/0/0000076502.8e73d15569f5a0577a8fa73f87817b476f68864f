WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#49: FILE: include/linux/statistic.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#50: FILE: include/linux/statistic.h:2:
+ * include/linux/statistic.h

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#69: FILE: include/linux/statistic.h:21:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#70: FILE: include/linux/statistic.h:22:
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#127: FILE: include/linux/statistic.h:79:
+	int			(*pull)(void*);	/* optional */

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void*' should also have an identifier name
#127: FILE: include/linux/statistic.h:79:
+	int			(*pull)(void*);	/* optional */

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#146: FILE: include/linux/statistic.h:98:
+	spinlock_t lock;

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct statistic *' should also have an identifier name
#151: FILE: include/linux/statistic.h:103:
+	int (*parse)(struct statistic *, struct statistic_info *, int, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct statistic_info *' should also have an identifier name
#151: FILE: include/linux/statistic.h:103:
+	int (*parse)(struct statistic *, struct statistic_info *, int, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#151: FILE: include/linux/statistic.h:103:
+	int (*parse)(struct statistic *, struct statistic_info *, int, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#151: FILE: include/linux/statistic.h:103:
+	int (*parse)(struct statistic *, struct statistic_info *, int, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct statistic *' should also have an identifier name
#152: FILE: include/linux/statistic.h:104:
+	void* (*alloc)(struct statistic *, size_t, gfp_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#152: FILE: include/linux/statistic.h:104:
+	void* (*alloc)(struct statistic *, size_t, gfp_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'gfp_t' should also have an identifier name
#152: FILE: include/linux/statistic.h:104:
+	void* (*alloc)(struct statistic *, size_t, gfp_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#152: FILE: include/linux/statistic.h:104:
+	void* (*alloc)(struct statistic *, size_t, gfp_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct statistic *' should also have an identifier name
#153: FILE: include/linux/statistic.h:105:
+	void (*free)(struct statistic *, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#153: FILE: include/linux/statistic.h:105:
+	void (*free)(struct statistic *, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct statistic *' should also have an identifier name
#154: FILE: include/linux/statistic.h:106:
+	void (*reset)(struct statistic *, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#154: FILE: include/linux/statistic.h:106:
+	void (*reset)(struct statistic *, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct statistic *' should also have an identifier name
#155: FILE: include/linux/statistic.h:107:
+	void (*merge)(struct statistic *, void *, void*);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#155: FILE: include/linux/statistic.h:107:
+	void (*merge)(struct statistic *, void *, void*);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void*' should also have an identifier name
#155: FILE: include/linux/statistic.h:107:
+	void (*merge)(struct statistic *, void *, void*);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct statistic *' should also have an identifier name
#156: FILE: include/linux/statistic.h:108:
+	int (*fdata)(struct statistic *, const char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#156: FILE: include/linux/statistic.h:108:
+	int (*fdata)(struct statistic *, const char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct statistic_file_private *' should also have an identifier name
#156: FILE: include/linux/statistic.h:108:
+	int (*fdata)(struct statistic *, const char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#156: FILE: include/linux/statistic.h:108:
+	int (*fdata)(struct statistic *, const char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct statistic *' should also have an identifier name
#158: FILE: include/linux/statistic.h:110:
+	int (*fdef)(struct statistic *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#158: FILE: include/linux/statistic.h:110:
+	int (*fdef)(struct statistic *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct statistic *' should also have an identifier name
#159: FILE: include/linux/statistic.h:111:
+	void (*add)(struct statistic *, int, s64, u64);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#159: FILE: include/linux/statistic.h:111:
+	void (*add)(struct statistic *, int, s64, u64);

WARNING:FUNCTION_ARGUMENTS: function definition argument 's64' should also have an identifier name
#159: FILE: include/linux/statistic.h:111:
+	void (*add)(struct statistic *, int, s64, u64);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u64' should also have an identifier name
#159: FILE: include/linux/statistic.h:111:
+	void (*add)(struct statistic *, int, s64, u64);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct statistic *' should also have an identifier name
#160: FILE: include/linux/statistic.h:112:
+	void (*set)(struct statistic *, s64, u64);

WARNING:FUNCTION_ARGUMENTS: function definition argument 's64' should also have an identifier name
#160: FILE: include/linux/statistic.h:112:
+	void (*set)(struct statistic *, s64, u64);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u64' should also have an identifier name
#160: FILE: include/linux/statistic.h:112:
+	void (*set)(struct statistic *, s64, u64);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct statistic *' should also have an identifier name
#190: FILE: include/linux/statistic.h:142:
+	void			(*add)(struct statistic *, int, s64, u64);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#190: FILE: include/linux/statistic.h:142:
+	void			(*add)(struct statistic *, int, s64, u64);

WARNING:FUNCTION_ARGUMENTS: function definition argument 's64' should also have an identifier name
#190: FILE: include/linux/statistic.h:142:
+	void			(*add)(struct statistic *, int, s64, u64);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u64' should also have an identifier name
#190: FILE: include/linux/statistic.h:142:
+	void			(*add)(struct statistic *, int, s64, u64);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#208: FILE: include/linux/statistic.h:160:
+extern int statistic_create(struct statistic_interface *, const char *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#209: FILE: include/linux/statistic.h:161:
+extern int statistic_remove(struct statistic_interface *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct statistic_interface *' should also have an identifier name
#209: FILE: include/linux/statistic.h:161:
+extern int statistic_remove(struct statistic_interface *);

WARNING:LINE_SPACING: Missing a blank line after declarations
#228: FILE: include/linux/statistic.h:180:
+	unsigned long flags;
+	if (stat[i].state == STATISTIC_STATE_ON) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#270: FILE: include/linux/statistic.h:222:
+	unsigned long flags;
+	if (stat[i].state == STATISTIC_STATE_ON) {

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#296: FILE: include/linux/statistic.h:248:
+extern void statistic_set(struct statistic *, int, s64, u64);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#298: FILE: include/linux/statistic.h:250:
+/* There is no other statistic_set() flavour needed. statistic_set() may only
+   be called when we pull statistic updates from exploiters. The statistics

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#302: FILE: include/linux/statistic.h:254:
+   required for statistics fed through statistic_set().*/

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#312: FILE: include/linux/statistic.h:264:
+static inline int statistic_remove(

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#349: FILE: lib/statistic.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#350: FILE: lib/statistic.c:2:
+ *  lib/statistic.c

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#370: FILE: lib/statistic.c:22:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#371: FILE: lib/statistic.c:23:
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

WARNING:TYPO_SPELLING: 'occurences' may be misspelled - perhaps 'occurrences'?
#391: FILE: lib/statistic.c:43:
+ *	  (e.g. a matrix of occurences for latencies of requests of
   	                    ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:INCLUDE_LINUX: Use #include <linux/bug.h> instead of <asm/bug.h>
#410: FILE: lib/statistic.c:62:
+#include <asm/bug.h>

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#411: FILE: lib/statistic.c:63:
+#include <asm/uaccess.h>

WARNING:LINE_SPACING: Missing a blank line after declarations
#439: FILE: lib/statistic.c:91:
+	struct statistic_discipline *disc = &statistic_discs[stat->type];
+	if (ptr)

WARNING:LINE_SPACING: Missing a blank line after declarations
#447: FILE: lib/statistic.c:99:
+	unsigned long flags;
+	local_irq_save(flags);

WARNING:LINE_SPACING: Missing a blank line after declarations
#455: FILE: lib/statistic.c:107:
+	struct statistic_discipline *disc = &statistic_discs[stat->type];
+	if (ptr) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#465: FILE: lib/statistic.c:117:
+	int cpu;
+	stat->state = STATISTIC_STATE_RELEASED;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#480: FILE: lib/statistic.c:132:
+static void * statistic_alloc_generic(struct statistic *stat, size_t size,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#486: FILE: lib/statistic.c:138:
+static void * statistic_alloc_ptr(struct statistic *stat, gfp_t flags, int node)

WARNING:LINE_SPACING: Missing a blank line after declarations
#490: FILE: lib/statistic.c:142:
+	void *buf = disc->alloc(stat, disc->size, flags, node);
+	if (likely(buf))

WARNING:LINE_SPACING: Missing a blank line after declarations
#499: FILE: lib/statistic.c:151:
+	int cpu;
+	stat->age = sched_clock();

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*stat->pdata)...) over kzalloc(sizeof(struct percpu_data)...)
#507: FILE: lib/statistic.c:159:
+	stat->pdata = kzalloc(sizeof(struct percpu_data), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

ERROR:SPACING: space prohibited before that ':' (ctx:WxE)
#552: FILE: lib/statistic.c:204:
+		case STATISTIC_STATE_INVALID :
 		                             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited after that open parenthesis '('
#553: FILE: lib/statistic.c:205:
+			retval = ( z ? -EINVAL : statistic_initialise(stat) );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#553: FILE: lib/statistic.c:205:
+			retval = ( z ? -EINVAL : statistic_initialise(stat) );

ERROR:SPACING: space prohibited before that ':' (ctx:WxE)
#555: FILE: lib/statistic.c:207:
+		case STATISTIC_STATE_UNCONFIGURED :
 		                                  ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#556: FILE: lib/statistic.c:208:
+			retval = ( z ? statistic_uninitialise(stat)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#557: FILE: lib/statistic.c:209:
+				     : statistic_define(stat) );

ERROR:SPACING: space prohibited before that ':' (ctx:WxE)
#559: FILE: lib/statistic.c:211:
+		case STATISTIC_STATE_RELEASED :
 		                              ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#560: FILE: lib/statistic.c:212:
+			retval = ( z ? statistic_initialise(stat)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#561: FILE: lib/statistic.c:213:
+				     : statistic_alloc(stat, info) );

ERROR:SPACING: space prohibited before that ':' (ctx:WxE)
#563: FILE: lib/statistic.c:215:
+		case STATISTIC_STATE_OFF :
 		                         ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#564: FILE: lib/statistic.c:216:
+			retval = ( z ? statistic_free(stat, info)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#565: FILE: lib/statistic.c:217:
+				     : statistic_start(stat) );

ERROR:SPACING: space prohibited before that ':' (ctx:WxE)
#567: FILE: lib/statistic.c:219:
+		case STATISTIC_STATE_ON :
 		                        ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#568: FILE: lib/statistic.c:220:
+			retval = ( z ? statistic_stop(stat) : -EINVAL );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#568: FILE: lib/statistic.c:220:
+			retval = ( z ? statistic_stop(stat) : -EINVAL );

WARNING:LINE_SPACING: Missing a blank line after declarations
#600: FILE: lib/statistic.c:252:
+	struct statistic_discipline *disc = &statistic_discs[stat->type];
+	spin_lock(&mpriv->lock);

WARNING:LINE_SPACING: Missing a blank line after declarations
#620: FILE: lib/statistic.c:272:
+	struct statistic_discipline *disc = &statistic_discs[stat[i].type];
+	if (stat[i].state == STATISTIC_STATE_ON)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#624: FILE: lib/statistic.c:276:
+static struct sgrb_seg * sgrb_seg_find(struct list_head *lh, int size)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*seg)...) over kzalloc(sizeof(struct sgrb_seg)...)
#634: FILE: lib/statistic.c:286:
+	seg = kzalloc(sizeof(struct sgrb_seg), GFP_KERNEL);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#638: FILE: lib/statistic.c:290:
+	seg->address = (void*)__get_free_page(GFP_KERNEL);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#658: FILE: lib/statistic.c:310:
+static char * statistic_state_strings[] = {

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#759: FILE: lib/statistic.c:411:
+static int __devinit statistic_hotcpu(struct notifier_block *notifier,

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#774: FILE: lib/statistic.c:426:
+static struct notifier_block statistic_hotcpu_notifier =
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#809: FILE: lib/statistic.c:461:
+	if (disc->parse) {
[...]
+	} else if (type != stat->type)
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#841: FILE: lib/statistic.c:493:
+	twisted = copy = kstrdup(def, GFP_KERNEL);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#887: FILE: lib/statistic.c:539:
+	twisted = copy = kstrdup(def, GFP_KERNEL);

ERROR:SPACING: space prohibited before that ':' (ctx:WxE)
#896: FILE: lib/statistic.c:548:
+		case STATISTIC_STATE_UNCONFIGURED :
 		                                  ^

ERROR:SPACING: space prohibited before that ':' (ctx:WxE)
#897: FILE: lib/statistic.c:549:
+		case STATISTIC_STATE_RELEASED :
 		                              ^

ERROR:SPACING: space prohibited before that ':' (ctx:WxE)
#898: FILE: lib/statistic.c:550:
+		case STATISTIC_STATE_OFF :
 		                         ^

ERROR:SPACING: space prohibited before that ':' (ctx:WxE)
#899: FILE: lib/statistic.c:551:
+		case STATISTIC_STATE_ON :
 		                        ^

ERROR:SPACING: space prohibited before that ':' (ctx:WxE)
#902: FILE: lib/statistic.c:554:
+		case 1001 :
 		          ^

ERROR:SPACING: space prohibited before that ':' (ctx:WxE)
#906: FILE: lib/statistic.c:558:
+		case 1002 :
 		          ^

ERROR:SPACING: space prohibited before that ':' (ctx:WxE)
#909: FILE: lib/statistic.c:561:
+		case 1003 :
 		          ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#957: FILE: lib/statistic.c:609:
+static int statistic_generic_open(struct inode *inode,
+		struct file *file, struct statistic_interface **interface,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#961: FILE: lib/statistic.c:613:
+	BUG_ON(!interface);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*private)...) over kzalloc(sizeof(struct statistic_file_private)...)
#962: FILE: lib/statistic.c:614:
+	*private = kzalloc(sizeof(struct statistic_file_private), GFP_KERNEL);

WARNING:LINE_SPACING: Missing a blank line after declarations
#974: FILE: lib/statistic.c:626:
+	struct statistic_file_private *private = file->private_data;
+	BUG_ON(!private);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#974: FILE: lib/statistic.c:626:
+	BUG_ON(!private);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#982: FILE: lib/statistic.c:634:
+static ssize_t statistic_generic_read(struct file *file,
+				char __user *buf, size_t len, loff_t *offset)

WARNING:TYPO_SPELLING: 'transfered' may be misspelled - perhaps 'transferred'?
#987: FILE: lib/statistic.c:639:
+	size_t transfered = 0;
 	       ^^^^^^^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#990: FILE: lib/statistic.c:642:
+	BUG_ON(!private);

CHECK:BRACES: braces {} should be used on all arms of this statement
#994: FILE: lib/statistic.c:646:
+		if (*offset >= pos && *offset <= (pos + seg->offset)) {
[...]
+		} else
[...]

WARNING:TYPO_SPELLING: 'transfered' may be misspelled - perhaps 'transferred'?
#998: FILE: lib/statistic.c:650:
+			if (unlikely(copy_to_user(buf + transfered,
 			                                ^^^^^^^^^^

WARNING:TYPO_SPELLING: 'transfered' may be misspelled - perhaps 'transferred'?
#1002: FILE: lib/statistic.c:654:
+			transfered += seg_transfer;
 			^^^^^^^^^^

CHECK:BRACES: Unbalanced braces around else statement
#1006: FILE: lib/statistic.c:658:
+		} else

WARNING:TYPO_SPELLING: 'transfered' may be misspelled - perhaps 'transferred'?
#1009: FILE: lib/statistic.c:661:
+	return transfered;
 	       ^^^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1013: FILE: lib/statistic.c:665:
+static ssize_t statistic_generic_write(struct file *file,
+			const char __user *buf, size_t len, loff_t *offset)

WARNING:TYPO_SPELLING: 'transfered' may be misspelled - perhaps 'transferred'?
#1018: FILE: lib/statistic.c:670:
+	size_t transfered = 0;
 	       ^^^^^^^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1020: FILE: lib/statistic.c:672:
+	BUG_ON(!private);

WARNING:TYPO_SPELLING: 'transfered' may be misspelled - perhaps 'transferred'?
#1030: FILE: lib/statistic.c:682:
+					    buf + transfered, seg_transfer)))
 					          ^^^^^^^^^^

WARNING:TYPO_SPELLING: 'transfered' may be misspelled - perhaps 'transferred'?
#1034: FILE: lib/statistic.c:686:
+		transfered += seg_transfer;
 		^^^^^^^^^^

WARNING:TYPO_SPELLING: 'transfered' may be misspelled - perhaps 'transferred'?
#1038: FILE: lib/statistic.c:690:
+	return transfered;
 	       ^^^^^^^^^^

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*seg_nl)...) over kmalloc(sizeof(struct sgrb_seg)...)
#1054: FILE: lib/statistic.c:706:
+			seg_nl = kmalloc(sizeof(struct sgrb_seg), GFP_KERNEL);

CHECK:BRACES: braces {} should be used on all arms of this statement
#1065: FILE: lib/statistic.c:717:
+			if (nl) {
[...]
+			} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1069: FILE: lib/statistic.c:721:
+			} else

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1127: FILE: lib/statistic.c:779:
+static struct file_operations statistic_def_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1135: FILE: lib/statistic.c:787:
+static struct file_operations statistic_data_fops = {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1165: FILE: lib/statistic.c:817:
+	BUG_ON(!stat || !info || !interface->number);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1172: FILE: lib/statistic.c:824:
+	interface->data_file = debugfs_create_file(

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR' are not preferred. Consider using octal permissions '0400'.
#1173: FILE: lib/statistic.c:825:
+		STATISTIC_FILENAME_DATA, S_IFREG | S_IRUSR,

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1174: FILE: lib/statistic.c:826:
+		interface->debugfs_dir, (void*)interface, &statistic_data_fops);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1180: FILE: lib/statistic.c:832:
+	interface->def_file = debugfs_create_file(

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IWUSR' are not preferred. Consider using octal permissions '0600'.
#1181: FILE: lib/statistic.c:833:
+		STATISTIC_FILENAME_DEF, S_IFREG | S_IRUSR | S_IWUSR,

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1182: FILE: lib/statistic.c:834:
+		interface->debugfs_dir, (void*)interface, &statistic_def_fops);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1238: FILE: lib/statistic.c:890:
+	*(u64*)ptr = 0;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1242: FILE: lib/statistic.c:894:
+static void statistic_add_counter_inc(struct statistic *stat, int cpu,
+				     s64 value, u64 incr)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1244: FILE: lib/statistic.c:896:
+	*(u64*)stat->pdata->ptrs[cpu] += incr;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1252: FILE: lib/statistic.c:904:
+	*(u64*)stat->pdata->ptrs[cpu] += value * incr;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1258: FILE: lib/statistic.c:910:
+	*(u64*)stat->pdata = total;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1266: FILE: lib/statistic.c:918:
+	*(u64*)stat->pdata = value * total;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1272: FILE: lib/statistic.c:924:
+	*(u64*)dst += *(u64*)src;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1272: FILE: lib/statistic.c:924:
+	*(u64*)dst += *(u64*)src;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1280: FILE: lib/statistic.c:932:
+	struct sgrb_seg *seg;
+	seg = sgrb_seg_find(&fpriv->read_seg_lh, 128);

WARNING:PRINTF_L: %Lu is non-standard C, use %llu
#1283: FILE: lib/statistic.c:935:
+	seg->offset += sprintf(seg->address + seg->offset, "%s %Lu\n",

WARNING:LINE_SPACING: Missing a blank line after declarations
#1293: FILE: lib/statistic.c:945:
+	struct statistic_entry_util *util = ptr;
+	util->num = 0;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1303: FILE: lib/statistic.c:955:
+	struct statistic_entry_util *util = stat->pdata->ptrs[cpu];
+	util->num += incr;

CHECK:SPACING: No space is necessary after a cast
#1314: FILE: lib/statistic.c:966:
+	util = (struct statistic_entry_util *) stat->pdata;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1314: FILE: lib/statistic.c:966:
+	struct statistic_entry_util *util;
+	util = (struct statistic_entry_util *) stat->pdata;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1326: FILE: lib/statistic.c:978:
+	struct statistic_entry_util *dst = _dst, *src = _src;
+	dst->num += src->num;

WARNING:PRINTF_L: %Lu is non-standard C, use %llu
#1364: FILE: lib/statistic.c:1016:
+			       "%s %Lu %Ld %Ld.%03lld %Ld\n", name,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1373: FILE: lib/statistic.c:1025:
+static void * statistic_alloc_histogram(struct statistic *stat, size_t size,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1403: FILE: lib/statistic.c:1055:
+static inline int statistic_histogram_calc_index_lin(struct statistic *stat,
+						 s64 value)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1406: FILE: lib/statistic.c:1058:
+	unsigned long long i = value - stat->u.histogram.range_min;
+	do_div(i, stat->u.histogram.base_interval);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1414: FILE: lib/statistic.c:1066:
+	unsigned long long i;
+	for (i = 0;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1414: FILE: lib/statistic.c:1066:
+	for (i = 0;
[...]
+	     i++);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1439: FILE: lib/statistic.c:1091:
+	((u64*)stat->pdata->ptrs[cpu])[i] += incr;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1446: FILE: lib/statistic.c:1098:
+	((u64*)stat->pdata->ptrs[cpu])[i] += incr;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1453: FILE: lib/statistic.c:1105:
+	((u64*)stat->pdata)[i] = total;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1460: FILE: lib/statistic.c:1112:
+	((u64*)stat->pdata)[i] = total;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1468: FILE: lib/statistic.c:1120:
+	int i;
+	for (i = 0; i <= stat->u.histogram.last_index; i++)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1473: FILE: lib/statistic.c:1125:
+static inline int statistic_fdata_histogram_line(const char *name,
+					struct statistic_file_private *private,

WARNING:LINE_SPACING: Missing a blank line after declarations
#1477: FILE: lib/statistic.c:1129:
+	struct sgrb_seg *seg;
+	seg = sgrb_seg_find(&private->read_seg_lh, 256);

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#1480: FILE: lib/statistic.c:1132:
+	seg->offset += sprintf(seg->address + seg->offset, "%s %s%Ld %Lu\n",

WARNING:LINE_SPACING: Missing a blank line after declarations
#1492: FILE: lib/statistic.c:1144:
+	s64 bound = 0;
+	for (i = 0; i < (stat->u.histogram.last_index); i++) {

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1495: FILE: lib/statistic.c:1147:
+							bound, ((u64*)data)[i]);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1500: FILE: lib/statistic.c:1152:
+					      bound, ((u64*)data)[i]);

WARNING:PRINTF_L: %Li is non-standard C, use %lli
#1505: FILE: lib/statistic.c:1157:
+	return sprintf(line, " range_min=%Li entries=%Li base_interval=%Lu",

ERROR:SPACING: space prohibited before that ':' (ctx:WxE)
#1533: FILE: lib/statistic.c:1185:
+		case 1 :
 		       ^

ERROR:SPACING: space prohibited before that ':' (ctx:WxE)
#1537: FILE: lib/statistic.c:1189:
+		case 2 :
 		       ^

ERROR:SPACING: space prohibited before that ':' (ctx:WxE)
#1541: FILE: lib/statistic.c:1193:
+		case 3 :
 		       ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1562: FILE: lib/statistic.c:1214:
+static void * statistic_alloc_sparse(struct statistic *stat, size_t size,

WARNING:LINE_SPACING: Missing a blank line after declarations
#1566: FILE: lib/statistic.c:1218:
+	struct statistic_sparse_list *slist = kmalloc_node(size, flags, node);
+	INIT_LIST_HEAD(&slist->entry_lh);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1575: FILE: lib/statistic.c:1227:
+	struct statistic_sparse_list *slist = ptr;
+	list_for_each_entry_safe(entry, tmp, &slist->entry_lh, list) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1584: FILE: lib/statistic.c:1236:
+static inline void statistic_add_sparse_sort(struct list_head *head,
+					struct statistic_entry_sparse *entry)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*entry)...) over kmalloc(sizeof(struct statistic_entry_sparse)...)
#1604: FILE: lib/statistic.c:1256:
+	entry = kmalloc(sizeof(struct statistic_entry_sparse), GFP_ATOMIC);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1635: FILE: lib/statistic.c:1287:
+	struct statistic_sparse_list *slist = stat->pdata->ptrs[cpu];
+	_statistic_add_sparse(slist, value, incr);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1661: FILE: lib/statistic.c:1313:
+	struct statistic_entry_sparse *entry;
+	dst->hits_missed += src->hits_missed;

WARNING:PRINTF_L: %Lu is non-standard C, use %llu
#1677: FILE: lib/statistic.c:1329:
+	seg->offset += sprintf(seg->address + seg->offset, "%s missed 0x%Lu\n",

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#1684: FILE: lib/statistic.c:1336:
+				       "%s 0x%Lx %Lu\n", name,

WARNING:MAINTAINERS_STYLE: Misordered MAINTAINERS entry - list 'M:' before 'P:'
#1873: FILE: MAINTAINERS:2613:
+P:	Martin Peschke
+M:	mpeschke@de.ibm.com

WARNING:MAINTAINERS_STYLE: Misordered MAINTAINERS entry - list 'S:' before 'W:'
#1876: FILE: MAINTAINERS:2616:
+W:	http://www.ibm.com/developerworks/linux/linux390/
+S:	Supported

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000076502.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 54 errors, 94 warnings, 27 checks, 1805 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000076502.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
