WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#32: 
Signed-Off-By: Chandra Seetharaman <sekharan@us.ibm.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#33: 
Signed-Off-By: Hubertus Franke <frankeh@us.ibm.com>

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#34: 
Signed-Off-By: Shailabh Nagar <nagar@watson.ibm.com>

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#35: 
Signed-Off-By: Gerrit Huizenga <gh@us.ibm.com>

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#36: 
Signed-Off-By: Matt Helsley <matthltc@us.ibm.com>

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#52: FILE: include/linux/res_group.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#79: FILE: include/linux/res_group.h:28:
+#define SHARE_UNCHANGED	(-1)	/* implicitly specified by userspace,
+					 * never stored in a resource group'

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#80: FILE: include/linux/res_group.h:29:
+					 * shares struct; never displayed */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#86: FILE: include/linux/res_group.h:35:
+					 * structure */

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#89: FILE: include/linux/res_group.h:38:
+#define SHARE_DEFAULT_DIVISOR ^I(100)$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#105: FILE: include/linux/res_group.h:54:
+ * resource group need to be locked.
+*/

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#120: FILE: include/linux/res_group.h:69:
+				 * grabbing resource specific lock */

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#132: FILE: include/linux/res_group_rc.h:1:
+/*

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct resource_group *' should also have an identifier name
#175: FILE: include/linux/res_group_rc.h:44:
+	struct res_shares *(*alloc_shares_struct)(struct resource_group *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct res_shares *' should also have an identifier name
#177: FILE: include/linux/res_group_rc.h:46:
+	void (*free_shares_struct)(struct res_shares *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct res_shares *' should also have an identifier name
#180: FILE: include/linux/res_group_rc.h:49:
+	void (*shares_changed)(struct res_shares *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct res_shares *' should also have an identifier name
#183: FILE: include/linux/res_group_rc.h:52:
+	ssize_t (*show_stats)(struct res_shares *, char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#183: FILE: include/linux/res_group_rc.h:52:
+	ssize_t (*show_stats)(struct res_shares *, char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#183: FILE: include/linux/res_group_rc.h:52:
+	ssize_t (*show_stats)(struct res_shares *, char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct res_shares *' should also have an identifier name
#184: FILE: include/linux/res_group_rc.h:53:
+	int (*reset_stats)(struct res_shares *, const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#184: FILE: include/linux/res_group_rc.h:53:
+	int (*reset_stats)(struct res_shares *, const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#193: FILE: include/linux/res_group_rc.h:62:
+	void (*move_task)(struct task_struct *, struct res_shares *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct res_shares *' should also have an identifier name
#193: FILE: include/linux/res_group_rc.h:62:
+	void (*move_task)(struct task_struct *, struct res_shares *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct res_shares *' should also have an identifier name
#193: FILE: include/linux/res_group_rc.h:62:
+	void (*move_task)(struct task_struct *, struct res_shares *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#194: FILE: include/linux/res_group_rc.h:63:
+	void (*move_task)(struct task_struct *, struct res_shares *,
+				struct res_shares *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#197: FILE: include/linux/res_group_rc.h:66:
+extern int register_controller(struct res_controller *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct res_controller *' should also have an identifier name
#197: FILE: include/linux/res_group_rc.h:66:
+extern int register_controller(struct res_controller *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#198: FILE: include/linux/res_group_rc.h:67:
+extern int unregister_controller(struct res_controller *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct res_controller *' should also have an identifier name
#198: FILE: include/linux/res_group_rc.h:67:
+extern int unregister_controller(struct res_controller *);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#205: FILE: kernel/res_group/res_group.c:1:
+/* res_group.c - Resource Groups: Resource management through grouping of

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#240: FILE: kernel/res_group/res_group.c:36:
+	return ((ctlr_id < MAX_RES_CTLRS) &&
+			(res_controllers[ctlr_id] != NULL));

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "res_controllers[ctlr_id]"
#240: FILE: kernel/res_group/res_group.c:36:
+			(res_controllers[ctlr_id] != NULL));

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#292: FILE: kernel/res_group/res_group.c:88:
+static void do_alloc_shares_struct(struct resource_group *rgroup,
+					struct res_controller *ctlr)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rgroup->shares[ctlr->ctlr_id]"
#301: FILE: kernel/res_group/res_group.c:97:
+	if (rgroup->shares[ctlr->ctlr_id] != NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#307: FILE: kernel/res_group/res_group.c:103:
+static void do_free_shares_struct(struct resource_group *rgroup,
+						struct res_controller *ctlr)

WARNING:TYPO_SPELLING: 'alloced' may be misspelled - perhaps 'allocated'?
#311: FILE: kernel/res_group/res_group.c:107:
+	/* No shares alloced previously */
 	             ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!shares"
#312: FILE: kernel/res_group/res_group.c:108:
+	if (shares == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!res_controllers[ctlr_id]"
#328: FILE: kernel/res_group/res_group.c:124:
+		if (res_controllers[ctlr_id] == NULL) {

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#414: FILE: kernel/res_group/res_group.c:210:
+EXPORT_SYMBOL_GPL(register_controller);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#415: FILE: kernel/res_group/res_group.c:211:
+EXPORT_SYMBOL_GPL(unregister_controller);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#416: FILE: kernel/res_group/res_group.c:212:
+EXPORT_SYMBOL_GPL(get_controller_by_name);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#417: FILE: kernel/res_group/res_group.c:213:
+EXPORT_SYMBOL_GPL(get_controller_by_id);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#418: FILE: kernel/res_group/res_group.c:214:
+EXPORT_SYMBOL_GPL(put_controller);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#467: FILE: kernel/res_group/local.h:1:
+/*

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#474: FILE: kernel/res_group/local.h:8:
+extern struct res_controller *get_controller_by_name(const char *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#475: FILE: kernel/res_group/local.h:9:
+extern struct res_controller *get_controller_by_id(unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#475: FILE: kernel/res_group/local.h:9:
+extern struct res_controller *get_controller_by_id(unsigned int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#476: FILE: kernel/res_group/local.h:10:
+extern void put_controller(struct res_controller *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct res_controller *' should also have an identifier name
#476: FILE: kernel/res_group/local.h:10:
+extern void put_controller(struct res_controller *);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000081757.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 0 errors, 36 warnings, 13 checks, 395 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000081757.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
