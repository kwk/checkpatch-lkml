WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#29: 
diff -Nur linux-2.6.7.org/arch/i386/kernel/nmi.c linux-2.6.7/arch/i386/kernel/nmi.c

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#82: FILE: arch/i386/kernel/traps.c:309:
+		/* allow recursive die to fall through */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#127: FILE: arch/ia64/kernel/ia64_ksyms.c:127:
+extern void ia64_do_copy_regs (struct unw_frame_info *info, void *arg);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#127: FILE: arch/ia64/kernel/ia64_ksyms.c:127:
+extern void ia64_do_copy_regs (struct unw_frame_info *info, void *arg);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#129: FILE: arch/ia64/kernel/ia64_ksyms.c:129:
+extern void ia64_freeze_cpu (struct unw_frame_info *info, void *arg);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#129: FILE: arch/ia64/kernel/ia64_ksyms.c:129:
+extern void ia64_freeze_cpu (struct unw_frame_info *info, void *arg);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#132: FILE: arch/ia64/kernel/ia64_ksyms.c:132:
+extern int page_is_ram (unsigned long pagenr);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#132: FILE: arch/ia64/kernel/ia64_ksyms.c:132:
+extern int page_is_ram (unsigned long pagenr);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#143: FILE: arch/ia64/kernel/process.c:546:
+ia64_do_copy_regs (struct unw_frame_info *info, void *arg)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#171: FILE: arch/ia64/kernel/process.c:772:
+ia64_freeze_cpu (struct unw_frame_info *info, void *arg)

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#174: FILE: arch/ia64/kernel/process.c:775:
+	for (;;) local_irq_disable();

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#178: FILE: arch/ia64/kernel/process.c:779:
+ia64_start_dump (struct unw_frame_info *info, void *arg)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#236: FILE: arch/ia64/mm/init.c:265:
+verify_physaddr (unsigned long start, unsigned long end, void *arg)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cr->requested >= start'
#243: FILE: arch/ia64/mm/init.c:272:
+	if ((cr->requested >= start) && (cr->requested + PAGE_SIZE) <= end) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#256: FILE: arch/ia64/mm/init.c:285:
+page_is_ram (unsigned long pagenr)

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#281: FILE: drivers/block/Kconfig:350:
+config DISKDUMP
+	tristate "Disk dump support"
+	---help---
+	  Disk dump support.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#301: FILE: drivers/block/diskdump.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#302: FILE: drivers/block/diskdump.c:2:
+ *  linux/drivers/block/diskdump.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#323: FILE: drivers/block/diskdump.c:23:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#324: FILE: drivers/block/diskdump.c:24:
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

CHECK:CAMELCASE: Avoid CamelCase: <Dbg>
#348: FILE: drivers/block/diskdump.c:48:
+#define Dbg(x, ...)	pr_debug("disk_dump: " x "\n", ## __VA_ARGS__)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#349: FILE: drivers/block/diskdump.c:49:
+#define Err(x, ...)	pr_err  ("disk_dump: " x "\n", ## __VA_ARGS__)

CHECK:CAMELCASE: Avoid CamelCase: <Err>
#349: FILE: drivers/block/diskdump.c:49:
+#define Err(x, ...)	pr_err  ("disk_dump: " x "\n", ## __VA_ARGS__)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#349: FILE: drivers/block/diskdump.c:49:
+#define Err(x, ...)	pr_err  ("disk_dump: " x "\n", ## __VA_ARGS__)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#350: FILE: drivers/block/diskdump.c:50:
+#define Warn(x, ...)	pr_warn ("disk_dump: " x "\n", ## __VA_ARGS__)

CHECK:CAMELCASE: Avoid CamelCase: <Warn>
#350: FILE: drivers/block/diskdump.c:50:
+#define Warn(x, ...)	pr_warn ("disk_dump: " x "\n", ## __VA_ARGS__)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#350: FILE: drivers/block/diskdump.c:50:
+#define Warn(x, ...)	pr_warn ("disk_dump: " x "\n", ## __VA_ARGS__)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#351: FILE: drivers/block/diskdump.c:51:
+#define Info(x, ...)	pr_info ("disk_dump: " x "\n", ## __VA_ARGS__)

CHECK:CAMELCASE: Avoid CamelCase: <Info>
#351: FILE: drivers/block/diskdump.c:51:
+#define Info(x, ...)	pr_info ("disk_dump: " x "\n", ## __VA_ARGS__)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#351: FILE: drivers/block/diskdump.c:51:
+#define Info(x, ...)	pr_info ("disk_dump: " x "\n", ## __VA_ARGS__)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#353: FILE: drivers/block/diskdump.c:53:
+#define ROUNDUP(x, y)	(((x) + ((y)-1))/(y))
                      	            ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#353: FILE: drivers/block/diskdump.c:53:
+#define ROUNDUP(x, y)	(((x) + ((y)-1))/(y))
                      	                ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'y' - possible side-effects?
#353: FILE: drivers/block/diskdump.c:53:
+#define ROUNDUP(x, y)	(((x) + ((y)-1))/(y))

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#368: FILE: drivers/block/diskdump.c:68:
+static uint32_t module_crc;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#389: FILE: drivers/block/diskdump.c:89:
+unsigned long volatile diskdump_base_jiffies;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#391: FILE: drivers/block/diskdump.c:91:
+extern int panic_timeout;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#392: FILE: drivers/block/diskdump.c:92:
+extern unsigned long max_pfn;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#405: FILE: drivers/block/diskdump.c:105:
+static int lapse = 0;		/* 200msec unit */

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#419: FILE: drivers/block/diskdump.c:119:
+	static unsigned long long prev_timestamp = 0;

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#424: FILE: drivers/block/diskdump.c:124:
+	if (timestamp - prev_timestamp > (timestamp_1sec/5)) {
 	                                                ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#427: FILE: drivers/block/diskdump.c:127:
+		printk("%u/%u    %lu ETA %c          \r",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#428: FILE: drivers/block/diskdump.c:128:
+		printk("%u/%u    %lu ETA %c          \r",
+			nr, maxnr, eta(nr, maxnr) / 5, spinner[lapse & 3]);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#434: FILE: drivers/block/diskdump.c:134:
+	printk("                                       \r");

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#488: FILE: drivers/block/diskdump.c:188:
+static int write_blocks(struct disk_dump_partition *dump_part, unsigned int offs, char *buf, int len)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 17)
#536: FILE: drivers/block/diskdump.c:236:
+	if (dump_part->device->max_blocks)
+		 chunk_blks = min(chunk_blks, dump_part->device->max_blocks);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#545: FILE: drivers/block/diskdump.c:245:
+		if ((ret = read_blocks(dump_part, blk, scratch, len)) < 0)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:LONG_LINE: line length of 118 exceeds 100 columns
#567: FILE: drivers/block/diskdump.c:267:
+static int write_bitmap(struct disk_dump_partition *dump_part, unsigned int bitmap_offset, unsigned int bitmap_blocks)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#582: FILE: drivers/block/diskdump.c:282:
+		if ((ret = write_blocks(dump_part, bitmap_offset + nr, scratch, 1)) < 0) {

WARNING:TYPO_SPELLING: 'writen' may be misspelled - perhaps 'written'?
#592: FILE: drivers/block/diskdump.c:292:
+ * Return value is the number of writen blocks.
                                  ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:LONG_LINE: line length of 137 exceeds 100 columns
#594: FILE: drivers/block/diskdump.c:294:
+static int write_memory(struct disk_dump_partition *dump_part, int offset, unsigned int max_blocks_written, unsigned int *blocks_written)

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#610: FILE: drivers/block/diskdump.c:310:
+			Warn("dump device is too small. %lu pages were not saved", max_pfn - blocks);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 32)
#672: FILE: drivers/block/diskdump.c:372:
+		list_for_each_entry(dump_part, &dump_device->partitions, list)
+				return dump_part;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#718: FILE: drivers/block/diskdump.c:418:
+	printk("CPU frozen: ");

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#719: FILE: drivers/block/diskdump.c:419:
+	for (i = 0; i < NR_CPUS; i++) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "dump_header.tasks[i]"
#720: FILE: drivers/block/diskdump.c:420:
+		if (dump_header.tasks[i] != NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#721: FILE: drivers/block/diskdump.c:421:
+			printk("#%d", i);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#723: FILE: drivers/block/diskdump.c:423:
+
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#724: FILE: drivers/block/diskdump.c:424:
+	printk("\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#725: FILE: drivers/block/diskdump.c:425:
+	printk("CPU#%d is executing diskdump.\n", smp_processor_id());

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#749: FILE: drivers/block/diskdump.c:449:
+	printk("start dumping\n");

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#751: FILE: drivers/block/diskdump.c:451:
+	if (!(dump_part = select_dump_partition())) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#763: FILE: drivers/block/diskdump.c:463:
+		if ((ret = dump_device->ops.quiesce(dump_device)) < 0) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#774: FILE: drivers/block/diskdump.c:474:
+	printk("check dump partition...\n");

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#803: FILE: drivers/block/diskdump.c:503:
+	if ((ret = write_sub_header()) < 0) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#809: FILE: drivers/block/diskdump.c:509:
+	if ((ret = write_bitmap(dump_part, header_blocks, bitmap_blocks)) < 0)

WARNING:LONG_LINE_STRING: line length of 121 exceeds 100 columns
#814: FILE: drivers/block/diskdump.c:514:
+		Warn("dump partition is too small. actual blocks %u. expected blocks %u. whole memory will not be saved",

A string starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#815: FILE: drivers/block/diskdump.c:515:
+		Warn("dump partition is too small. actual blocks %u. expected blocks %u. whole memory will not be saved",
+				dump_header.device_blocks, total_blocks);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#823: FILE: drivers/block/diskdump.c:523:
+	printk("dumping memory..\n");

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#824: FILE: drivers/block/diskdump.c:524:
+	if ((ret = write_memory(dump_part, header_blocks + bitmap_blocks,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#860: FILE: drivers/block/diskdump.c:560:
+		printk(KERN_EMERG "Rebooting in %d second%s..",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#861: FILE: drivers/block/diskdump.c:561:
+		printk(KERN_EMERG "Rebooting in %d second%s..",
+			panic_timeout, "s" + (panic_timeout == 1));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#866: FILE: drivers/block/diskdump.c:566:
+		printk("\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#869: FILE: drivers/block/diskdump.c:569:
+	printk(KERN_EMERG "halt\n");

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#905: FILE: drivers/block/diskdump.c:605:
+		if ((real_device = dump_type->probe(dev)) != NULL) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#921: FILE: drivers/block/diskdump.c:621:
+	if (!(dump_part = kmalloc(sizeof(*dump_part), GFP_KERNEL)))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#934: FILE: drivers/block/diskdump.c:634:
+		Warn("%s is too small to save whole system memory\n",
+			bdevname(bdev, buffer));

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#952: FILE: drivers/block/diskdump.c:652:
+	if ((ret = blkdev_get(bdev, FMODE_READ, 0)) < 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#962: FILE: drivers/block/diskdump.c:662:
+	if (!(real_device = find_real_device(dev, &dump_type))) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dump_device"
#969: FILE: drivers/block/diskdump.c:669:
+	if (dump_device == NULL) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#971: FILE: drivers/block/diskdump.c:671:
+		if (!(dump_device = kmalloc(sizeof(*dump_device), GFP_KERNEL))) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#981: FILE: drivers/block/diskdump.c:681:
+		if ((ret = dump_type->add_device(dump_device)) < 0) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1014: FILE: drivers/block/diskdump.c:714:
+	if (!(dump_part = find_dump_partition(bdev))) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "find_dump_partition"
#1064: FILE: drivers/block/diskdump.c:764:
+	ret = (find_dump_partition(bdev) != NULL);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1080: FILE: drivers/block/diskdump.c:780:
+EXPORT_SYMBOL(register_disk_dump_type);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1092: FILE: drivers/block/diskdump.c:792:
+EXPORT_SYMBOL(unregister_disk_dump_type);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1130: FILE: drivers/block/diskdump.c:830:
+	Info("total blocks required: %u (header %u + bitmap %u + memory %u)",
+		total_blocks, header_blocks, bitmap_blocks, total_ram_blocks);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "page"
#1153: FILE: drivers/block/diskdump.c:853:
+		if (page != NULL)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1205: FILE: drivers/char/sysrq.c:112:
+^I^I^I      struct tty_struct *tty) $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1205: FILE: drivers/char/sysrq.c:112:
+static void sysrq_handle_crash(int key, struct pt_regs *pt_regs,
+			      struct tty_struct *tty) 

CHECK:SPACING: No space is necessary after a cast
#1207: FILE: drivers/char/sysrq.c:114:
+	*( (char *) 0) = 0;

ERROR:SPACING: space prohibited after that open parenthesis '('
#1207: FILE: drivers/char/sysrq.c:114:
+	*( (char *) 0) = 0;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1232: FILE: include/asm-i386/diskdump.h:1:
+#ifndef _ASM_I386_DISKDUMP_H

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#1236: FILE: include/asm-i386/diskdump.h:5:
+ * linux/include/asm-i386/diskdump.h

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1253: FILE: include/asm-i386/diskdump.h:22:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1254: FILE: include/asm-i386/diskdump.h:23:
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1262: FILE: include/asm-i386/diskdump.h:31:
+extern int page_is_ram(unsigned long);

WARNING:STATIC_CONST: Move const after static - use 'static const int '
#1263: FILE: include/asm-i386/diskdump.h:32:
+const static int platform_supports_diskdump = 1;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1267: FILE: include/asm-i386/diskdump.h:36:
+       unsigned long esp;                                              \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1268: FILE: include/asm-i386/diskdump.h:37:
+       unsigned short ss;                                              \$

CHECK:SPACING: No space is necessary after a cast
#1269: FILE: include/asm-i386/diskdump.h:38:
+       esp = (unsigned long) ((char *)regs + sizeof (struct pt_regs)); \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1269: FILE: include/asm-i386/diskdump.h:38:
+       esp = (unsigned long) ((char *)regs + sizeof (struct pt_regs)); \$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1269: FILE: include/asm-i386/diskdump.h:38:
+       esp = (unsigned long) ((char *)regs + sizeof (struct pt_regs)); \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1270: FILE: include/asm-i386/diskdump.h:39:
+       ss = __KERNEL_DS;                                               \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1271: FILE: include/asm-i386/diskdump.h:40:
+       if (regs->xcs & 3) {                                            \$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#1271: FILE: include/asm-i386/diskdump.h:40:
+       if (regs->xcs & 3) {                                            \
+               esp = regs->esp;                                        \

ERROR:CODE_INDENT: code indent should use tabs where possible
#1272: FILE: include/asm-i386/diskdump.h:41:
+               esp = regs->esp;                                        \$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1272: FILE: include/asm-i386/diskdump.h:41:
+               esp = regs->esp;                                        \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1273: FILE: include/asm-i386/diskdump.h:42:
+               ss = regs->xss & 0xffff;                                \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1273: FILE: include/asm-i386/diskdump.h:42:
+               ss = regs->xss & 0xffff;                                \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1274: FILE: include/asm-i386/diskdump.h:43:
+       }                                                               \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1275: FILE: include/asm-i386/diskdump.h:44:
+       myregs = *regs;                                                 \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1276: FILE: include/asm-i386/diskdump.h:45:
+       myregs.esp = esp;                                               \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1277: FILE: include/asm-i386/diskdump.h:46:
+       myregs.xss = (myregs.xss & 0xffff0000) | ss;                    \$

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#1286: FILE: include/asm-i386/diskdump.h:55:
+#define size_of_sub_header()	((sizeof(struct disk_dump_sub_header) + PAGE_SIZE - 1) / DUMP_BLOCK_SIZE)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1288: FILE: include/asm-i386/diskdump.h:57:
+#define write_sub_header() ^I^I^I^I^I^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1290: FILE: include/asm-i386/diskdump.h:59:
+ ^Iint ret;^I^I^I^I^I^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1290: FILE: include/asm-i386/diskdump.h:59:
+ ^Iint ret;^I^I^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1290: FILE: include/asm-i386/diskdump.h:59:
+ ^Iint ret;^I^I^I^I^I^I^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1295: FILE: include/asm-i386/diskdump.h:64:
+ ^I^I^I^I^I^I^I^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1295: FILE: include/asm-i386/diskdump.h:64:
+ ^I^I^I^I^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1295: FILE: include/asm-i386/diskdump.h:64:
+ ^I^I^I^I^I^I^I^I^I\$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1296: FILE: include/asm-i386/diskdump.h:65:
+	if ((ret = write_blocks(dump_part, 2, scratch, 1)) >= 0)	\

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1303: FILE: include/asm-i386/diskdump.h:72:
+	for (;;) local_irq_disable();				\

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1331: FILE: include/asm-ia64/diskdump.h:1:
+#ifndef _ASM_IA64_DISKDUMP_H

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#1335: FILE: include/asm-ia64/diskdump.h:5:
+ * linux/include/asm-ia64/diskdump.h

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1351: FILE: include/asm-ia64/diskdump.h:21:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1352: FILE: include/asm-ia64/diskdump.h:22:
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1361: FILE: include/asm-ia64/diskdump.h:31:
+extern void ia64_do_copy_regs(struct unw_frame_info *, void *arg);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct unw_frame_info *' should also have an identifier name
#1361: FILE: include/asm-ia64/diskdump.h:31:
+extern void ia64_do_copy_regs(struct unw_frame_info *, void *arg);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1362: FILE: include/asm-ia64/diskdump.h:32:
+extern void ia64_freeze_cpu(struct unw_frame_info *, void *arg);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct unw_frame_info *' should also have an identifier name
#1362: FILE: include/asm-ia64/diskdump.h:32:
+extern void ia64_freeze_cpu(struct unw_frame_info *, void *arg);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1363: FILE: include/asm-ia64/diskdump.h:33:
+extern void ia64_start_dump(struct unw_frame_info *, void *arg);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct unw_frame_info *' should also have an identifier name
#1363: FILE: include/asm-ia64/diskdump.h:33:
+extern void ia64_start_dump(struct unw_frame_info *, void *arg);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1364: FILE: include/asm-ia64/diskdump.h:34:
+extern int page_is_ram(unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#1364: FILE: include/asm-ia64/diskdump.h:34:
+extern int page_is_ram(unsigned long);

WARNING:STATIC_CONST: Move const after static - use 'static const int '
#1366: FILE: include/asm-ia64/diskdump.h:36:
+const static int platform_supports_diskdump = 1;

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#1382: FILE: include/asm-ia64/diskdump.h:52:
+#define size_of_sub_header()	((sizeof(struct disk_dump_sub_header) + PAGE_SIZE - 1) / DUMP_BLOCK_SIZE)

ERROR:CODE_INDENT: code indent should use tabs where possible
#1386: FILE: include/asm-ia64/diskdump.h:56:
+ ^Iint ret;^I^I^I^I^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1386: FILE: include/asm-ia64/diskdump.h:56:
+ ^Iint ret;^I^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1386: FILE: include/asm-ia64/diskdump.h:56:
+ ^Iint ret;^I^I^I^I^I^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1392: FILE: include/asm-ia64/diskdump.h:62:
+ ^I^I^I^I^I^I^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1392: FILE: include/asm-ia64/diskdump.h:62:
+ ^I^I^I^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1392: FILE: include/asm-ia64/diskdump.h:62:
+ ^I^I^I^I^I^I^I^I\$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1393: FILE: include/asm-ia64/diskdump.h:63:
+	if ((ret = write_blocks(dump_part, 2, scratch, 1)) >= 0)\

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1398: FILE: include/asm-ia64/diskdump.h:68:
+#define platform_freeze_cpu() ^I^I^I^I^I\$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'func' - possible side-effects?
#1403: FILE: include/asm-ia64/diskdump.h:73:
+#define platform_start_diskdump(func, regs)			\
+{								\
+	struct dump_call_param param;				\
+								\
+	param.func = func;					\
+	param.regs = regs;					\
+	unw_init_running(ia64_start_dump, &param);		\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'regs' - possible side-effects?
#1403: FILE: include/asm-ia64/diskdump.h:73:
+#define platform_start_diskdump(func, regs)			\
+{								\
+	struct dump_call_param param;				\
+								\
+	param.func = func;					\
+	param.regs = regs;					\
+	unw_init_running(ia64_start_dump, &param);		\
+}

WARNING:TYPO_SPELLING: 'hander' may be misspelled - perhaps 'handler'?
#1422: FILE: include/asm-ia64/ptrace.h:298:
+/* Container to hold dump hander information */
                           ^^^^^^

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#1424: FILE: include/asm-ia64/ptrace.h:300:
+	void (*func)(struct pt_regs *, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#1424: FILE: include/asm-ia64/ptrace.h:300:
+	void (*func)(struct pt_regs *, void *);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1435: FILE: include/linux/diskdump.h:1:
+#ifndef _LINUX_DISKDUMP_H

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#1439: FILE: include/linux/diskdump.h:5:
+ * linux/include/linux/diskdump.h

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1454: FILE: include/linux/diskdump.h:20:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1455: FILE: include/linux/diskdump.h:21:
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct device *' should also have an identifier name
#1475: FILE: include/linux/diskdump.h:41:
+	int (*add_dump)(struct device *, struct block_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct block_device *' should also have an identifier name
#1475: FILE: include/linux/diskdump.h:41:
+	int (*add_dump)(struct device *, struct block_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct block_device *' should also have an identifier name
#1476: FILE: include/linux/diskdump.h:42:
+	int (*remove_dump)(struct block_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct block_device *' should also have an identifier name
#1477: FILE: include/linux/diskdump.h:43:
+	int (*find_dump)(struct block_device *);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1480: FILE: include/linux/diskdump.h:46:
+int diskdump_register_ops(struct disk_dump_ops* op);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1483: FILE: include/linux/diskdump.h:49:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct device *' should also have an identifier name
#1492: FILE: include/linux/diskdump.h:58:
+	void *(*probe)(struct device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct disk_dump_device *' should also have an identifier name
#1493: FILE: include/linux/diskdump.h:59:
+	int (*add_device)(struct disk_dump_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct disk_dump_device *' should also have an identifier name
#1494: FILE: include/linux/diskdump.h:60:
+	void (*remove_device)(struct disk_dump_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct disk_dump_device *' should also have an identifier name
#1500: FILE: include/linux/diskdump.h:66:
+	int (*sanity_check)(struct disk_dump_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct disk_dump_device *' should also have an identifier name
#1501: FILE: include/linux/diskdump.h:67:
+	int (*quiesce)(struct disk_dump_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct disk_dump_device *' should also have an identifier name
#1502: FILE: include/linux/diskdump.h:68:
+	int (*shutdown)(struct disk_dump_device *);

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#1503: FILE: include/linux/diskdump.h:69:
+	int (*rw_block)(struct disk_dump_partition *, int rw, unsigned long block_nr, void *buf, int len);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct disk_dump_partition *' should also have an identifier name
#1503: FILE: include/linux/diskdump.h:69:
+	int (*rw_block)(struct disk_dump_partition *, int rw, unsigned long block_nr, void *buf, int len);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct disk_dump_type *' should also have an identifier name
#1525: FILE: include/linux/diskdump.h:91:
+int register_disk_dump_type(struct disk_dump_type *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct disk_dump_type *' should also have an identifier name
#1526: FILE: include/linux/diskdump.h:92:
+int unregister_disk_dump_type(struct disk_dump_type *);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1528: FILE: include/linux/diskdump.h:94:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1535: FILE: include/linux/diskdump.h:101:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1560: FILE: include/linux/diskdump.h:126:
+	int			sub_hdr_size;	/* Size of arch dependent
+						   header in blocks */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1560: FILE: include/linux/diskdump.h:126:
+						   header in blocks */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1562: FILE: include/linux/diskdump.h:128:
+	unsigned int		bitmap_blocks;	/* Size of Memory bitmap in
+						   block */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1562: FILE: include/linux/diskdump.h:128:
+						   block */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1566: FILE: include/linux/diskdump.h:132:
+						 * the dump device */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1598: FILE: include/linux/diskdump.h:164:
+	uint32_t orig_crc, cur_crc;					\

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1606: FILE: include/linux/diskdump.h:172:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1615: FILE: include/linux/interrupt.h:249:
 
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1616: FILE: include/linux/interrupt.h:250:
+extern void dump_clear_tasklet(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1617: FILE: include/linux/interrupt.h:251:
+extern void dump_run_tasklet(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1628: FILE: include/linux/kernel.h:115:
+extern void try_crashdump(struct pt_regs *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#1628: FILE: include/linux/kernel.h:115:
+extern void try_crashdump(struct pt_regs *);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1629: FILE: include/linux/kernel.h:116:
+extern void (*diskdump_func) (struct pt_regs *regs, void *platform_arg);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1639: FILE: include/linux/kernel.h:147:
+#define pr_err(fmt,arg...) \
                   ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1640: FILE: include/linux/kernel.h:148:
+	printk(KERN_ERR fmt,##arg)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1640: FILE: include/linux/kernel.h:148:
+	printk(KERN_ERR fmt,##arg)
 	                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1642: FILE: include/linux/kernel.h:150:
+#define pr_warn(fmt,arg...) \
                    ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1643: FILE: include/linux/kernel.h:151:
+	printk(KERN_WARNING fmt,##arg)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1643: FILE: include/linux/kernel.h:151:
+	printk(KERN_WARNING fmt,##arg)
 	                       ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1655: FILE: include/linux/timer.h:102:
+extern void dump_clear_timers(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1656: FILE: include/linux/timer.h:103:
+extern void dump_run_timers(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1666: FILE: include/linux/workqueue.h:87:
+extern void dump_clear_workqueue(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1667: FILE: include/linux/workqueue.h:88:
+extern void dump_run_workqueue(void);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1686: FILE: kernel/dump.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#1687: FILE: kernel/dump.c:2:
+ *  linux/kernel/dump.c

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1705: FILE: kernel/dump.c:20:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1706: FILE: kernel/dump.c:21:
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

ERROR:GLOBAL_INITIALISERS: do not initialise globals to NULL
#1721: FILE: kernel/dump.c:36:
+struct disk_dump_ops* dump_ops = NULL;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1721: FILE: kernel/dump.c:36:
+struct disk_dump_ops* dump_ops = NULL;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#1723: FILE: kernel/dump.c:38:
+int diskdump_mode = 0;

WARNING:SPACING: Unnecessary space before function pointer arguments
#1726: FILE: kernel/dump.c:41:
+void (*diskdump_func) (struct pt_regs *regs, void *platform_arg) = NULL;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1732: FILE: kernel/dump.c:47:
+
+

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1736: FILE: kernel/dump.c:51:
+int diskdump_register_ops(struct disk_dump_ops* op)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1749: FILE: kernel/dump.c:64:
+EXPORT_SYMBOL_GPL(diskdump_register_ops);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1758: FILE: kernel/dump.c:73:
+EXPORT_SYMBOL_GPL(diskdump_unregister_ops);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1760: FILE: kernel/dump.c:75:
+
+

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1790: FILE: kernel/dump.c:105:
+	sscanf (buf, "%d\n", &part);

WARNING:NAKED_SSCANF: unchecked sscanf return value
#1790: FILE: kernel/dump.c:105:
+	sscanf (buf, "%d\n", &part);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1797: FILE: kernel/dump.c:112:
+	if (!(disk = device_to_gendisk(dev)) ||

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1812: FILE: kernel/dump.c:127:
+EXPORT_SYMBOL_GPL(diskdump_sysfs_store);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1819: FILE: kernel/dump.c:134:
+^Ichar* p = buf; $

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1819: FILE: kernel/dump.c:134:
+	char* p = buf; 

ERROR:SPACING: space required before the open parenthesis '('
#1840: FILE: kernel/dump.c:155:
+		if(len >= maxlen)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1848: FILE: kernel/dump.c:163:
+EXPORT_SYMBOL_GPL(diskdump_sysfs_show);

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1858: FILE: kernel/dump.c:173:
+	udelay(1000000/HZ);
 	              ^

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1864: FILE: kernel/dump.c:179:
+EXPORT_SYMBOL_GPL(diskdump_setup_timestamp);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1885: FILE: kernel/dump.c:200:
+EXPORT_SYMBOL_GPL(diskdump_update);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1887: FILE: kernel/dump.c:202:
+
+

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1901: FILE: kernel/dump.c:216:
+EXPORT_SYMBOL_GPL(diskdump_register_hook);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1908: FILE: kernel/dump.c:223:
+EXPORT_SYMBOL_GPL(diskdump_unregister_hook);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1910: FILE: kernel/dump.c:225:
+
+

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#1919: FILE: kernel/dump.c:234:
+	void (*func)(struct pt_regs *, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#1919: FILE: kernel/dump.c:234:
+	void (*func)(struct pt_regs *, void *);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1938: FILE: kernel/panic.c:64:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1957: FILE: kernel/softirq.c:325:
+EXPORT_SYMBOL(dump_clear_tasklet);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1968: FILE: kernel/softirq.c:336:
+		struct tasklet_struct *t = list;
+		list = list->next;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 32)
#1970: FILE: kernel/softirq.c:338:
+		if (!atomic_read(&t->count) &&
[...]
+				t->func(t->data);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1979: FILE: kernel/softirq.c:347:
+EXPORT_SYMBOL(dump_run_tasklet);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2059: FILE: kernel/timer.c:1348:
+EXPORT_SYMBOL(dump_clear_timers);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2068: FILE: kernel/timer.c:1357:
+EXPORT_SYMBOL(dump_run_timers);

WARNING:SPACING: Unnecessary space before function pointer arguments
#2102: FILE: kernel/workqueue.c:449:
+		void (*f) (void *) = work->func;

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2118: FILE: kernel/workqueue.c:541:
+EXPORT_SYMBOL(dump_clear_workqueue);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2119: FILE: kernel/workqueue.c:542:
+EXPORT_SYMBOL(dump_run_workqueue);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000266451.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 54 errors, 133 warnings, 48 checks, 1975 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000266451.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
