WARNING:COMMIT_MESSAGE: Missing commit description - Add an appropriate one

The patch is missing a commit description.  A brief
description of the changes made by the patch should be added.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

CHECK:CAMELCASE: Avoid CamelCase: <RIOBootCodeRTA>
#51: FILE: drivers/char/rio/rioboot.c:110:
+RIOBootCodeRTA(struct rio_info *p, struct DownLoad *rbp)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <DownLoad>
#51: FILE: drivers/char/rio/rioboot.c:110:
+RIOBootCodeRTA(struct rio_info *p, struct DownLoad *rbp)

CHECK:CAMELCASE: Avoid CamelCase: <RIOBootCodeHOST>
#62: FILE: drivers/char/rio/rioboot.c:241:
+RIOBootCodeHOST(struct rio_info *p, register struct DownLoad *rbp)

CHECK:CAMELCASE: Avoid CamelCase: <RIOBootRup>
#75: FILE: drivers/char/rio/rioboot.c:653:
+RIOBootRup(struct rio_info *p, uint Rup, struct Host *HostP, struct PKT *PacketP)

CHECK:CAMELCASE: Avoid CamelCase: <Rup>
#75: FILE: drivers/char/rio/rioboot.c:653:
+RIOBootRup(struct rio_info *p, uint Rup, struct Host *HostP, struct PKT *PacketP)

CHECK:CAMELCASE: Avoid CamelCase: <Host>
#75: FILE: drivers/char/rio/rioboot.c:653:
+RIOBootRup(struct rio_info *p, uint Rup, struct Host *HostP, struct PKT *PacketP)

CHECK:CAMELCASE: Avoid CamelCase: <HostP>
#75: FILE: drivers/char/rio/rioboot.c:653:
+RIOBootRup(struct rio_info *p, uint Rup, struct Host *HostP, struct PKT *PacketP)

CHECK:CAMELCASE: Avoid CamelCase: <PacketP>
#75: FILE: drivers/char/rio/rioboot.c:653:
+RIOBootRup(struct rio_info *p, uint Rup, struct Host *HostP, struct PKT *PacketP)

CHECK:CAMELCASE: Avoid CamelCase: <RIOBootOk>
#87: FILE: drivers/char/rio/rioboot.c:1234:
+RIOBootOk(struct rio_info *p, struct Host *HostP, ulong RtaUniq)

CHECK:CAMELCASE: Avoid CamelCase: <RtaUniq>
#87: FILE: drivers/char/rio/rioboot.c:1234:
+RIOBootOk(struct rio_info *p, struct Host *HostP, ulong RtaUniq)

CHECK:CAMELCASE: Avoid CamelCase: <FillSlot>
#100: FILE: drivers/char/rio/rioboot.c:1260:
+FillSlot(int entry, int entry2, uint RtaUniq, struct Host *HostP)

CHECK:CAMELCASE: Avoid CamelCase: <RIOPreemptiveCmd>
#129: FILE: drivers/char/rio/rioctrl.c:1752:
+RIOPreemptiveCmd(struct rio_info *p, struct Port *PortP, uchar Cmd)

CHECK:CAMELCASE: Avoid CamelCase: <Port>
#129: FILE: drivers/char/rio/rioctrl.c:1752:
+RIOPreemptiveCmd(struct rio_info *p, struct Port *PortP, uchar Cmd)

CHECK:CAMELCASE: Avoid CamelCase: <PortP>
#129: FILE: drivers/char/rio/rioctrl.c:1752:
+RIOPreemptiveCmd(struct rio_info *p, struct Port *PortP, uchar Cmd)

CHECK:CAMELCASE: Avoid CamelCase: <Cmd>
#129: FILE: drivers/char/rio/rioctrl.c:1752:
+RIOPreemptiveCmd(struct rio_info *p, struct Port *PortP, uchar Cmd)

CHECK:CAMELCASE: Avoid CamelCase: <RIOAssignAT>
#145: FILE: drivers/char/rio/rioinit.c:317:
+RIOAssignAT(struct rio_info *p, int Base, caddr_t virtAddr, int mode)

CHECK:CAMELCASE: Avoid CamelCase: <Base>
#145: FILE: drivers/char/rio/rioinit.c:317:
+RIOAssignAT(struct rio_info *p, int Base, caddr_t virtAddr, int mode)

CHECK:CAMELCASE: Avoid CamelCase: <virtAddr>
#145: FILE: drivers/char/rio/rioinit.c:317:
+RIOAssignAT(struct rio_info *p, int Base, caddr_t virtAddr, int mode)

CHECK:CAMELCASE: Avoid CamelCase: <RIOBoardTest>
#158: FILE: drivers/char/rio/rioinit.c:1042:
+RIOBoardTest(paddr_t paddr, caddr_t caddr, uchar type, int slot)

CHECK:CAMELCASE: Avoid CamelCase: <RIOScrub>
#170: FILE: drivers/char/rio/rioinit.c:1119:
+RIOScrub(int op, BYTE *ram, int size)

CHECK:CAMELCASE: Avoid CamelCase: <RIODefaultName>
#182: FILE: drivers/char/rio/rioinit.c:1450:
+RIODefaultName(struct rio_info *p, struct Host *HostP, uint UnitId)

CHECK:CAMELCASE: Avoid CamelCase: <UnitId>
#182: FILE: drivers/char/rio/rioinit.c:1450:
+RIODefaultName(struct rio_info *p, struct Host *HostP, uint UnitId)

CHECK:CAMELCASE: Avoid CamelCase: <RIOHostReset>
#194: FILE: drivers/char/rio/rioinit.c:1534:
+RIOHostReset(uint Type, volatile struct DpRam *DpRamP, uint Slot)

CHECK:CAMELCASE: Avoid CamelCase: <Type>
#194: FILE: drivers/char/rio/rioinit.c:1534:
+RIOHostReset(uint Type, volatile struct DpRam *DpRamP, uint Slot)

CHECK:CAMELCASE: Avoid CamelCase: <DpRam>
#194: FILE: drivers/char/rio/rioinit.c:1534:
+RIOHostReset(uint Type, volatile struct DpRam *DpRamP, uint Slot)

CHECK:CAMELCASE: Avoid CamelCase: <DpRamP>
#194: FILE: drivers/char/rio/rioinit.c:1534:
+RIOHostReset(uint Type, volatile struct DpRam *DpRamP, uint Slot)

CHECK:CAMELCASE: Avoid CamelCase: <Slot>
#194: FILE: drivers/char/rio/rioinit.c:1534:
+RIOHostReset(uint Type, volatile struct DpRam *DpRamP, uint Slot)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#194: FILE: drivers/char/rio/rioinit.c:1534:
+RIOHostReset(uint Type, volatile struct DpRam *DpRamP, uint Slot)

CHECK:CAMELCASE: Avoid CamelCase: <RIOTxEnable>
#207: FILE: drivers/char/rio/riointr.c:104:
+RIOTxEnable(char *en)

CHECK:CAMELCASE: Avoid CamelCase: <RIOServiceHost>
#219: FILE: drivers/char/rio/riointr.c:194:
+RIOServiceHost(struct rio_info *p, struct Host *HostP, int From)

CHECK:CAMELCASE: Avoid CamelCase: <From>
#219: FILE: drivers/char/rio/riointr.c:194:
+RIOServiceHost(struct rio_info *p, struct Host *HostP, int From)

CHECK:CAMELCASE: Avoid CamelCase: <RIOReceive>
#230: FILE: drivers/char/rio/riointr.c:550:
+RIOReceive(struct rio_info *p, struct Port *PortP)

CHECK:CAMELCASE: Avoid CamelCase: <RIOParam>
#246: FILE: drivers/char/rio/rioparam.c:161:
+RIOParam(struct Port *PortP, int cmd, int Modem, int SleepFlag)

CHECK:CAMELCASE: Avoid CamelCase: <Modem>
#246: FILE: drivers/char/rio/rioparam.c:161:
+RIOParam(struct Port *PortP, int cmd, int Modem, int SleepFlag)

CHECK:CAMELCASE: Avoid CamelCase: <SleepFlag>
#246: FILE: drivers/char/rio/rioparam.c:161:
+RIOParam(struct Port *PortP, int cmd, int Modem, int SleepFlag)

CHECK:CAMELCASE: Avoid CamelCase: <PktP>
#257: FILE: drivers/char/rio/rioparam.c:638:
+can_add_transmit(PKT **PktP, struct Port *PortP)

CHECK:CAMELCASE: Avoid CamelCase: <RIOFixPhbs>
#314: FILE: drivers/char/rio/rioroute.c:625:
+RIOFixPhbs(struct rio_info *p, struct Host *HostP, uint unit)

CHECK:CAMELCASE: Avoid CamelCase: <RIOCheckIsolated>
#326: FILE: drivers/char/rio/rioroute.c:724:
+RIOCheckIsolated(struct rio_info *p, struct Host *HostP, uint UnitId)

CHECK:CAMELCASE: Avoid CamelCase: <RIOIsolate>
#338: FILE: drivers/char/rio/rioroute.c:751:
+RIOIsolate(struct rio_info *p, struct Host *HostP, uint UnitId)

CHECK:CAMELCASE: Avoid CamelCase: <RIOCheck>
#349: FILE: drivers/char/rio/rioroute.c:783:
+RIOCheck(struct Host *HostP, uint UnitId)

CHECK:CAMELCASE: Avoid CamelCase: <GetUnitType>
#359: FILE: drivers/char/rio/rioroute.c:842:
+GetUnitType(uint Uniq)

CHECK:CAMELCASE: Avoid CamelCase: <Uniq>
#359: FILE: drivers/char/rio/rioroute.c:842:
+GetUnitType(uint Uniq)

CHECK:CAMELCASE: Avoid CamelCase: <RIOSetChange>
#369: FILE: drivers/char/rio/rioroute.c:865:
+RIOSetChange(struct rio_info *p)

WARNING:LONG_LINE: line length of 113 exceeds 100 columns
#385: FILE: drivers/char/rio/rioroute.c:880:
+RIOConCon(struct rio_info *p, struct Host *HostP, uint FromId, uint FromLink, uint ToId, uint ToLink, int Change)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:CAMELCASE: Avoid CamelCase: <RIOConCon>
#385: FILE: drivers/char/rio/rioroute.c:880:
+RIOConCon(struct rio_info *p, struct Host *HostP, uint FromId, uint FromLink, uint ToId, uint ToLink, int Change)

CHECK:CAMELCASE: Avoid CamelCase: <FromId>
#385: FILE: drivers/char/rio/rioroute.c:880:
+RIOConCon(struct rio_info *p, struct Host *HostP, uint FromId, uint FromLink, uint ToId, uint ToLink, int Change)

CHECK:CAMELCASE: Avoid CamelCase: <FromLink>
#385: FILE: drivers/char/rio/rioroute.c:880:
+RIOConCon(struct rio_info *p, struct Host *HostP, uint FromId, uint FromLink, uint ToId, uint ToLink, int Change)

CHECK:CAMELCASE: Avoid CamelCase: <ToId>
#385: FILE: drivers/char/rio/rioroute.c:880:
+RIOConCon(struct rio_info *p, struct Host *HostP, uint FromId, uint FromLink, uint ToId, uint ToLink, int Change)

CHECK:CAMELCASE: Avoid CamelCase: <ToLink>
#385: FILE: drivers/char/rio/rioroute.c:880:
+RIOConCon(struct rio_info *p, struct Host *HostP, uint FromId, uint FromLink, uint ToId, uint ToLink, int Change)

CHECK:CAMELCASE: Avoid CamelCase: <Change>
#385: FILE: drivers/char/rio/rioroute.c:880:
+RIOConCon(struct rio_info *p, struct Host *HostP, uint FromId, uint FromLink, uint ToId, uint ToLink, int Change)

CHECK:CAMELCASE: Avoid CamelCase: <RIONewTable>
#398: FILE: drivers/char/rio/riotable.c:95:
+RIONewTable(struct rio_info *p)

CHECK:CAMELCASE: Avoid CamelCase: <RIOApel>
#408: FILE: drivers/char/rio/riotable.c:437:
+RIOApel(struct rio_info *p)

WARNING:TYPO_SPELLING: 'MapP' may be misspelled - perhaps 'Map'?
#419: FILE: drivers/char/rio/riotable.c:491:
+RIODeleteRta(struct rio_info *p, struct Map *MapP)
                                              ^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:CAMELCASE: Avoid CamelCase: <RIODeleteRta>
#419: FILE: drivers/char/rio/riotable.c:491:
+RIODeleteRta(struct rio_info *p, struct Map *MapP)

CHECK:CAMELCASE: Avoid CamelCase: <Map>
#419: FILE: drivers/char/rio/riotable.c:491:
+RIODeleteRta(struct rio_info *p, struct Map *MapP)

CHECK:CAMELCASE: Avoid CamelCase: <MapP>
#419: FILE: drivers/char/rio/riotable.c:491:
+RIODeleteRta(struct rio_info *p, struct Map *MapP)

CHECK:CAMELCASE: Avoid CamelCase: <RIOReMapPorts>
#431: FILE: drivers/char/rio/riotable.c:805:
+RIOReMapPorts(struct rio_info *p, struct Host *HostP, struct Map *HostMapP)

CHECK:CAMELCASE: Avoid CamelCase: <HostMapP>
#431: FILE: drivers/char/rio/riotable.c:805:
+RIOReMapPorts(struct rio_info *p, struct Host *HostP, struct Map *HostMapP)

WARNING:TYPO_SPELLING: 'MapP' may be misspelled - perhaps 'Map'?
#442: FILE: drivers/char/rio/riotable.c:983:
+RIOChangeName(struct rio_info *p, struct Map *MapP)
                                               ^^^^

CHECK:CAMELCASE: Avoid CamelCase: <RIOChangeName>
#442: FILE: drivers/char/rio/riotable.c:983:
+RIOChangeName(struct rio_info *p, struct Map *MapP)

CHECK:CAMELCASE: Avoid CamelCase: <RIOClearUp>
#455: FILE: drivers/char/rio/riotty.c:765:
+RIOClearUp(struct Port *PortP)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000147262.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 0 errors, 5 warnings, 57 checks, 360 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000147262.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
