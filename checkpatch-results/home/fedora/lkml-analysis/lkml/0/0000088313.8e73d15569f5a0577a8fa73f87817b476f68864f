WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#45: 
Here are two patches (I know it's bad form to send two patches as attachments 

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#118: FILE: kernel/staircase.c:26:
+	qup->staircase.cache_ticks = qup->staircase.preempted = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#129: FILE: kernel/staircase.c:46:
+	sp->slice = sp->time_slice = t;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#189: FILE: kernel/staircase.c:125:
+static void fastcall requeue_task(struct task_struct *p,
+	struct staircase_runqueue_queue *rqq, const int prio)

CHECK:BRACES: braces {} should be used on all arms of this statement
#300: FILE: kernel/staircase.c:318:
+	if (total_run >= sp->slice || p->prio == MIN_USER_PRIO)
[...]
-	} else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#304: FILE: kernel/staircase.c:320:
+	else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#550: FILE: kernel/staircase.c:714:
+	if (rqq->preempted &&
+		rqq->cache_ticks >= CACHE_DELAY) {

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#579: FILE: kernel/staircase.c:829:
+		rqq->preempted = rqq->cache_ticks = 0;

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#834: FILE: include/linux/sched_spa.h:114:
+void spa_system_tick(struct task_struct *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000088313.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 0 errors, 2 warnings, 7 checks, 637 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000088313.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
