WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#38: 
diff -Nru linux-2.6.0-test2/arch/h8300/kernel/asm-offsets.c linux-2.6.0-test2-h8300/arch/h8300/kernel/asm-offsets.c

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#67: FILE: arch/h8300/kernel/gpio.c:20:
+#define _(addr) (volatile unsigned char *)(addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#67: FILE: arch/h8300/kernel/gpio.c:20:
+#define _(addr) (volatile unsigned char *)(addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#92: FILE: arch/h8300/kernel/gpio.c:23:
+static volatile unsigned char *ddrs[] = {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#93: FILE: arch/h8300/kernel/gpio.c:24:
+	_(P1DDR),_(P2DDR),_(P3DDR),_(P4DDR),_(P5DDR),_(P6DDR),
 	        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#93: FILE: arch/h8300/kernel/gpio.c:24:
+	_(P1DDR),_(P2DDR),_(P3DDR),_(P4DDR),_(P5DDR),_(P6DDR),
 	                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#93: FILE: arch/h8300/kernel/gpio.c:24:
+	_(P1DDR),_(P2DDR),_(P3DDR),_(P4DDR),_(P5DDR),_(P6DDR),
 	                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#93: FILE: arch/h8300/kernel/gpio.c:24:
+	_(P1DDR),_(P2DDR),_(P3DDR),_(P4DDR),_(P5DDR),_(P6DDR),
 	                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#93: FILE: arch/h8300/kernel/gpio.c:24:
+	_(P1DDR),_(P2DDR),_(P3DDR),_(P4DDR),_(P5DDR),_(P6DDR),
 	                                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#94: FILE: arch/h8300/kernel/gpio.c:25:
+	NULL,    _(P8DDR),_(P9DDR),_(PADDR),_(PBDDR),
 	                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#94: FILE: arch/h8300/kernel/gpio.c:25:
+	NULL,    _(P8DDR),_(P9DDR),_(PADDR),_(PBDDR),
 	                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#94: FILE: arch/h8300/kernel/gpio.c:25:
+	NULL,    _(P8DDR),_(P9DDR),_(PADDR),_(PBDDR),
 	                                   ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#96: FILE: arch/h8300/kernel/gpio.c:27:
+};
+#define MAX_PORT 11

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#104: FILE: arch/h8300/kernel/gpio.c:33:
+static volatile unsigned char *ddrs[] = {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#105: FILE: arch/h8300/kernel/gpio.c:34:
+	_(P1DDR),_(P2DDR),_(P3DDR),_(P4DDR),_(P5DDR),_(P6DDR),
 	        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#105: FILE: arch/h8300/kernel/gpio.c:34:
+	_(P1DDR),_(P2DDR),_(P3DDR),_(P4DDR),_(P5DDR),_(P6DDR),
 	                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#105: FILE: arch/h8300/kernel/gpio.c:34:
+	_(P1DDR),_(P2DDR),_(P3DDR),_(P4DDR),_(P5DDR),_(P6DDR),
 	                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#105: FILE: arch/h8300/kernel/gpio.c:34:
+	_(P1DDR),_(P2DDR),_(P3DDR),_(P4DDR),_(P5DDR),_(P6DDR),
 	                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#105: FILE: arch/h8300/kernel/gpio.c:34:
+	_(P1DDR),_(P2DDR),_(P3DDR),_(P4DDR),_(P5DDR),_(P6DDR),
 	                                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#106: FILE: arch/h8300/kernel/gpio.c:35:
+	NULL,    _(P8DDR),_(P9DDR),_(PADDR),_(PBDDR),
 	                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#106: FILE: arch/h8300/kernel/gpio.c:35:
+	NULL,    _(P8DDR),_(P9DDR),_(PADDR),_(PBDDR),
 	                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#106: FILE: arch/h8300/kernel/gpio.c:35:
+	NULL,    _(P8DDR),_(P9DDR),_(PADDR),_(PBDDR),
 	                                   ^

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#113: FILE: arch/h8300/kernel/gpio.c:42:
+static volatile unsigned char *ddrs[] = {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#114: FILE: arch/h8300/kernel/gpio.c:43:
+	_(P1DDR),_(P2DDR),_(P3DDR),NULL    ,_(P5DDR),_(P6DDR),
 	        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#114: FILE: arch/h8300/kernel/gpio.c:43:
+	_(P1DDR),_(P2DDR),_(P3DDR),NULL    ,_(P5DDR),_(P6DDR),
 	                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#114: FILE: arch/h8300/kernel/gpio.c:43:
+	_(P1DDR),_(P2DDR),_(P3DDR),NULL    ,_(P5DDR),_(P6DDR),
 	                          ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxV)
#114: FILE: arch/h8300/kernel/gpio.c:43:
+	_(P1DDR),_(P2DDR),_(P3DDR),NULL    ,_(P5DDR),_(P6DDR),
 	                                   ^

ERROR:SPACING: space required after that ',' (ctx:WxV)
#114: FILE: arch/h8300/kernel/gpio.c:43:
+	_(P1DDR),_(P2DDR),_(P3DDR),NULL    ,_(P5DDR),_(P6DDR),
 	                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#114: FILE: arch/h8300/kernel/gpio.c:43:
+	_(P1DDR),_(P2DDR),_(P3DDR),NULL    ,_(P5DDR),_(P6DDR),
 	                                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#115: FILE: arch/h8300/kernel/gpio.c:44:
+	_(P7DDR),_(P8DDR),NULL,    _(PADDR),_(PBDDR),_(PCDDR),
 	        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#115: FILE: arch/h8300/kernel/gpio.c:44:
+	_(P7DDR),_(P8DDR),NULL,    _(PADDR),_(PBDDR),_(PCDDR),
 	                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#115: FILE: arch/h8300/kernel/gpio.c:44:
+	_(P7DDR),_(P8DDR),NULL,    _(PADDR),_(PBDDR),_(PCDDR),
 	                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#115: FILE: arch/h8300/kernel/gpio.c:44:
+	_(P7DDR),_(P8DDR),NULL,    _(PADDR),_(PBDDR),_(PCDDR),
 	                                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#116: FILE: arch/h8300/kernel/gpio.c:45:
+	_(PDDDR),_(PEDDR),_(PFDDR),_(PGDDR),_(PHDDR),
 	        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#116: FILE: arch/h8300/kernel/gpio.c:45:
+	_(PDDDR),_(PEDDR),_(PFDDR),_(PGDDR),_(PHDDR),
 	                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#116: FILE: arch/h8300/kernel/gpio.c:45:
+	_(PDDDR),_(PEDDR),_(PFDDR),_(PGDDR),_(PHDDR),
 	                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#116: FILE: arch/h8300/kernel/gpio.c:45:
+	_(PDDDR),_(PEDDR),_(PFDDR),_(PGDDR),_(PHDDR),
 	                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#117: FILE: arch/h8300/kernel/gpio.c:46:
+	_(PADDR),_(PBDDR),_(PCDDR),_(PDDDR),_(PEDDR),_(PFDDR),
 	        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#117: FILE: arch/h8300/kernel/gpio.c:46:
+	_(PADDR),_(PBDDR),_(PCDDR),_(PDDDR),_(PEDDR),_(PFDDR),
 	                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#117: FILE: arch/h8300/kernel/gpio.c:46:
+	_(PADDR),_(PBDDR),_(PCDDR),_(PDDDR),_(PEDDR),_(PFDDR),
 	                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#117: FILE: arch/h8300/kernel/gpio.c:46:
+	_(PADDR),_(PBDDR),_(PCDDR),_(PDDDR),_(PEDDR),_(PFDDR),
 	                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#117: FILE: arch/h8300/kernel/gpio.c:46:
+	_(PADDR),_(PBDDR),_(PCDDR),_(PDDDR),_(PEDDR),_(PFDDR),
 	                                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#118: FILE: arch/h8300/kernel/gpio.c:47:
+	_(PGDDR),_(PHDDR)
 	        ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#120: FILE: arch/h8300/kernel/gpio.c:49:
+};
+#define MAX_PORT 17

ERROR:TRAILING_WHITESPACE: trailing whitespace
#123: FILE: arch/h8300/kernel/gpio.c:52:
+ $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#123: FILE: arch/h8300/kernel/gpio.c:52:
+ $

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#189: FILE: arch/h8300/kernel/gpio.c:115:
+	if (gpio_regs[port].used & bit) {
[...]
 	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#199: FILE: arch/h8300/kernel/gpio.c:142:
+static int gpio_proc_read(char *buf, char **start, off_t offset, $

ERROR:CODE_INDENT: code indent should use tabs where possible
#200: FILE: arch/h8300/kernel/gpio.c:143:
+                          int len, int *unused_i, void *unused_v)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#200: FILE: arch/h8300/kernel/gpio.c:143:
+                          int len, int *unused_i, void *unused_v)$

WARNING:STATIC_CONST_CHAR_ARRAY: static char array declaration should probably be static const char
#204: FILE: arch/h8300/kernel/gpio.c:146:
+	const static char port_name[]="123456789ABCDEFGH";

WARNING:STATIC_CONST: Move const after static - use 'static const char '
#204: FILE: arch/h8300/kernel/gpio.c:146:
+	const static char port_name[]="123456789ABCDEFGH";

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#204: FILE: arch/h8300/kernel/gpio.c:146:
+	const static char port_name[]="123456789ABCDEFGH";
 	                             ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#219: FILE: arch/h8300/kernel/gpio.c:162:
+	proc_gpio = create_proc_entry("gpio", S_IRUGO, NULL);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#220: FILE: arch/h8300/kernel/gpio.c:163:
+^Iif (proc_gpio) $

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "proc_gpio"
#222: FILE: arch/h8300/kernel/gpio.c:165:
+	return proc_gpio != NULL;

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#225: FILE: arch/h8300/kernel/gpio.c:168:
+__initcall(register_proc);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#290: FILE: arch/h8300/kernel/process.c:113:
+	printk("ER2: %08lx ER3: %08lx ER4: %08lx ER5: %08lx\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#292: FILE: arch/h8300/kernel/process.c:115:
+	printk("ER6' %08lx ",regs->er6);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#292: FILE: arch/h8300/kernel/process.c:115:
+	printk("ER6' %08lx ",regs->er6);
 	                    ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#296: FILE: arch/h8300/kernel/process.c:119:
+		printk("\n");

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#347: FILE: arch/h8300/kernel/process.c:148:
+		:"=r"(retval)
 		^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#348: FILE: arch/h8300/kernel/process.c:149:
+		:"i"(__NR_clone),"g"(clone_arg),"g"(fn),"g"(arg),"i"(__NR_exit)
 		^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#348: FILE: arch/h8300/kernel/process.c:149:
+		:"i"(__NR_clone),"g"(clone_arg),"g"(fn),"g"(arg),"i"(__NR_exit)
 		                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#348: FILE: arch/h8300/kernel/process.c:149:
+		:"i"(__NR_clone),"g"(clone_arg),"g"(fn),"g"(arg),"i"(__NR_exit)
 		                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#348: FILE: arch/h8300/kernel/process.c:149:
+		:"i"(__NR_clone),"g"(clone_arg),"g"(fn),"g"(arg),"i"(__NR_exit)
 		                                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#348: FILE: arch/h8300/kernel/process.c:149:
+		:"i"(__NR_clone),"g"(clone_arg),"g"(fn),"g"(arg),"i"(__NR_exit)
 		                                                ^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#349: FILE: arch/h8300/kernel/process.c:150:
+		:"er0","er1","er2","er3");
 		^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#349: FILE: arch/h8300/kernel/process.c:150:
+		:"er0","er1","er2","er3");
 		      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#349: FILE: arch/h8300/kernel/process.c:150:
+		:"er0","er1","er2","er3");
 		            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#349: FILE: arch/h8300/kernel/process.c:150:
+		:"er0","er1","er2","er3");
 		                  ^

CHECK:SPACING: No space is necessary after a cast
#397: FILE: arch/h8300/kernel/process.c:199:
+	childregs->retpc = (unsigned long) ret_from_fork;

CHECK:SPACING: No space is necessary after a cast
#440: FILE: arch/h8300/kernel/process.c:243:
+	struct pt_regs *regs = (struct pt_regs *) ((unsigned char *)&dummy-4);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#440: FILE: arch/h8300/kernel/process.c:243:
+	struct pt_regs *regs = (struct pt_regs *) ((unsigned char *)&dummy-4);
 	                                                                  ^

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#495: FILE: arch/h8300/kernel/setup.c:2:
+ *  linux/arch/h8300/kernel/setup.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#527: FILE: arch/h8300/kernel/setup.c:55:
+#define STUBSIZE 0xc000;

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#536: FILE: arch/h8300/kernel/setup.c:69:
+extern void h8300_gpio_init(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#540: FILE: arch/h8300/kernel/setup.c:72:
+#if (defined(CONFIG_H8300H_SIM) || defined(CONFIG_H8S_SIM)) \
+    && defined(CONFIG_GDB_MAGICPRINT)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#540: FILE: arch/h8300/kernel/setup.c:72:
+    && defined(CONFIG_GDB_MAGICPRINT)$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#543: FILE: arch/h8300/kernel/setup.c:74:
+static void gdb_console_output(struct console *c, const char *msg, unsigned len)

WARNING:INDENTED_LABEL: labels should not be indented
#552: FILE: arch/h8300/kernel/setup.c:94:
+	name:		"gdb_con",

CHECK:SPACING: No space is necessary after a cast
#567: FILE: arch/h8300/kernel/setup.c:107:
+	memory_start = (unsigned long) &_ramstart;

CHECK:SPACING: No space is necessary after a cast
#573: FILE: arch/h8300/kernel/setup.c:113:
+		initrd_end = memory_start += be32_to_cpu(((unsigned long *) (memory_start))[2]);

CHECK:SPACING: No space is necessary after a cast
#576: FILE: arch/h8300/kernel/setup.c:116:
+		memory_start += be32_to_cpu(((unsigned long *) memory_start)[2]);

CHECK:SPACING: No space is necessary after a cast
#581: FILE: arch/h8300/kernel/setup.c:121:
+	memory_end = (unsigned long) &_ramend; /* by now the stack is part of the init task */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#586: FILE: arch/h8300/kernel/setup.c:126:
+^Iif ((memory_end < CONFIG_BLKDEV_RESERVE_ADDRESS) && $

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#586: FILE: arch/h8300/kernel/setup.c:126:
+	if ((memory_end < CONFIG_BLKDEV_RESERVE_ADDRESS) && 

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#586: FILE: arch/h8300/kernel/setup.c:126:
+	if ((memory_end < CONFIG_BLKDEV_RESERVE_ADDRESS) && 
[...]
 	init_mm.start_code = (unsigned long) &_stext;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#589: FILE: arch/h8300/kernel/setup.c:129:
+^I    memory_end = CONFIG_BLKDEV_RESERVE_ADDRESS; $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#603: FILE: arch/h8300/kernel/setup.c:141:
+	printk("\r\n\nuClinux " CPU "\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#607: FILE: arch/h8300/kernel/setup.c:144:
+	printk("H8/300 series support by Yoshinori Sato <ysato@users.sourceforge.jp>\n");

ERROR:SPACING: space required after that ',' (ctx:VxV)
#650: FILE: arch/h8300/kernel/signal.c:164:
+} __attribute__((aligned(2),packed));
                            ^

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(2) over __attribute__((aligned(2)))
#650: FILE: arch/h8300/kernel/signal.c:164:
+} __attribute__((aligned(2),packed));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#650: FILE: arch/h8300/kernel/signal.c:164:
+} __attribute__((aligned(2),packed));

ERROR:SPACING: space required after that ',' (ctx:VxV)
#669: FILE: arch/h8300/kernel/signal.c:177:
+} __attribute__((aligned(2),packed));
                            ^

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(2) over __attribute__((aligned(2)))
#669: FILE: arch/h8300/kernel/signal.c:177:
+} __attribute__((aligned(2),packed));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#669: FILE: arch/h8300/kernel/signal.c:177:
+} __attribute__((aligned(2),packed));

CHECK:SPACING: No space is necessary after a cast
#702: FILE: arch/h8300/kernel/signal.c:244:
+	struct pt_regs *regs = (struct pt_regs *) &__unused;

CHECK:SPACING: No space is necessary after a cast
#712: FILE: arch/h8300/kernel/signal.c:275:
+	struct pt_regs *regs = (struct pt_regs *) &__unused;

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#778: FILE: arch/h8300/kernel/signal.c:381:
+	regs->er0 = (current_thread_info()->exec_domain
+			   && current_thread_info()->exec_domain->signal_invmap

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#779: FILE: arch/h8300/kernel/signal.c:382:
+			   && current_thread_info()->exec_domain->signal_invmap
+			   && sig < 32

ERROR:CODE_INDENT: code indent should use tabs where possible
#781: FILE: arch/h8300/kernel/signal.c:384:
+^I^I          : sig);$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around frame->sc
#782: FILE: arch/h8300/kernel/signal.c:385:
+	regs->er1 = (unsigned long)&(frame->sc);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:SPACING: No space is necessary after a cast
#806: FILE: arch/h8300/kernel/signal.c:430:
+	regs->pc  = (unsigned long) ka->sa.sa_handler;

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#808: FILE: arch/h8300/kernel/signal.c:432:
+	regs->er0 = (current_thread_info()->exec_domain
+		     && current_thread_info()->exec_domain->signal_invmap

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#809: FILE: arch/h8300/kernel/signal.c:433:
+		     && current_thread_info()->exec_domain->signal_invmap
+		     && sig < 32

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around frame->info
#812: FILE: arch/h8300/kernel/signal.c:436:
+	regs->er1 = (unsigned long)&(frame->info);

CHECK:SPACING: No space is necessary after a cast
#828: FILE: arch/h8300/kernel/sys_h8300.c:284:
+	struct pt_regs *regs = (struct pt_regs *) ((unsigned char *)&dummy-4);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#828: FILE: arch/h8300/kernel/sys_h8300.c:284:
+	struct pt_regs *regs = (struct pt_regs *) ((unsigned char *)&dummy-4);
 	                                                                  ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#829: FILE: arch/h8300/kernel/sys_h8300.c:285:
+	struct pt_regs *regs = (struct pt_regs *) ((unsigned char *)&dummy-4);
+	printk("call %06lx:%ld 1:%08lx,2:%08lx,3:%08lx,ret:%08lx\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#829: FILE: arch/h8300/kernel/sys_h8300.c:285:
+	printk("call %06lx:%ld 1:%08lx,2:%08lx,3:%08lx,ret:%08lx\n",

ERROR:CODE_INDENT: code indent should use tabs where possible
#830: FILE: arch/h8300/kernel/sys_h8300.c:286:
+               ((regs->pc)&0xffffff)-2,regs->orig_er0,regs->er1,regs->er2,regs->er3,regs->er0);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#830: FILE: arch/h8300/kernel/sys_h8300.c:286:
+	printk("call %06lx:%ld 1:%08lx,2:%08lx,3:%08lx,ret:%08lx\n",
+               ((regs->pc)&0xffffff)-2,regs->orig_er0,regs->er1,regs->er2,regs->er3,regs->er0);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#830: FILE: arch/h8300/kernel/sys_h8300.c:286:
+               ((regs->pc)&0xffffff)-2,regs->orig_er0,regs->er1,regs->er2,regs->er3,regs->er0);$

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#830: FILE: arch/h8300/kernel/sys_h8300.c:286:
+               ((regs->pc)&0xffffff)-2,regs->orig_er0,regs->er1,regs->er2,regs->er3,regs->er0);
                           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#830: FILE: arch/h8300/kernel/sys_h8300.c:286:
+               ((regs->pc)&0xffffff)-2,regs->orig_er0,regs->er1,regs->er2,regs->er3,regs->er0);
                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#830: FILE: arch/h8300/kernel/sys_h8300.c:286:
+               ((regs->pc)&0xffffff)-2,regs->orig_er0,regs->er1,regs->er2,regs->er3,regs->er0);
                                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#830: FILE: arch/h8300/kernel/sys_h8300.c:286:
+               ((regs->pc)&0xffffff)-2,regs->orig_er0,regs->er1,regs->er2,regs->er3,regs->er0);
                                                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#830: FILE: arch/h8300/kernel/sys_h8300.c:286:
+               ((regs->pc)&0xffffff)-2,regs->orig_er0,regs->er1,regs->er2,regs->er3,regs->er0);
                                                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#830: FILE: arch/h8300/kernel/sys_h8300.c:286:
+               ((regs->pc)&0xffffff)-2,regs->orig_er0,regs->er1,regs->er2,regs->er3,regs->er0);
                                                                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#830: FILE: arch/h8300/kernel/sys_h8300.c:286:
+               ((regs->pc)&0xffffff)-2,regs->orig_er0,regs->er1,regs->er2,regs->er3,regs->er0);
                                                                                    ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#890: FILE: arch/h8300/kernel/traps.c:75:
+		printk("USER-STACK=%08x  KERNEL-STACK=%08lx\n\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#891: FILE: arch/h8300/kernel/traps.c:76:
+		printk("USER-STACK=%08x  KERNEL-STACK=%08lx\n\n",
 			(int) current->mm->start_stack,

CHECK:SPACING: No space is necessary after a cast
#897: FILE: arch/h8300/kernel/traps.c:81:
+	printk("CCR: %02x   SP: %08lx\n", fp->ccr, (long) fp);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#897: FILE: arch/h8300/kernel/traps.c:81:
+	printk("CCR: %02x   SP: %08lx\n", fp->ccr, (long) fp);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#900: FILE: arch/h8300/kernel/traps.c:84:
+	printk("ER4: %08lx  ER5: %08lx   ER6: %08lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#901: FILE: arch/h8300/kernel/traps.c:85:
+	printk("ER4: %08lx  ER5: %08lx   ER6: %08lx\n",
+		fp->er4, fp->er5, fp->er6);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'addr' - possible side-effects?
#911: FILE: arch/h8300/kernel/traps.c:129:
+#define check_kernel_text(addr) \
+        ((addr >= (unsigned long)(&_start)) && \
+         (addr <  (unsigned long)(&_etext))) 

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'addr' may be better as '(addr)' to avoid precedence issues
#911: FILE: arch/h8300/kernel/traps.c:129:
+#define check_kernel_text(addr) \
+        ((addr >= (unsigned long)(&_start)) && \
+         (addr <  (unsigned long)(&_etext))) 

ERROR:CODE_INDENT: code indent should use tabs where possible
#912: FILE: arch/h8300/kernel/traps.c:130:
+        ((addr >= (unsigned long)(&_start)) && \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#912: FILE: arch/h8300/kernel/traps.c:130:
+        ((addr >= (unsigned long)(&_start)) && \$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#913: FILE: arch/h8300/kernel/traps.c:131:
+         (addr <  (unsigned long)(&_etext))) $

ERROR:CODE_INDENT: code indent should use tabs where possible
#913: FILE: arch/h8300/kernel/traps.c:131:
+         (addr <  (unsigned long)(&_etext))) $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#913: FILE: arch/h8300/kernel/traps.c:131:
+         (addr <  (unsigned long)(&_etext))) $

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!esp"
#922: FILE: arch/h8300/kernel/traps.c:140:
+	if (esp == NULL)

CHECK:SPACING: No space is necessary after a cast
#923: FILE: arch/h8300/kernel/traps.c:141:
+		esp = (unsigned long *) &esp;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#927: FILE: arch/h8300/kernel/traps.c:145:
+	printk("Stack from %08lx:", (unsigned long)stack);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#932: FILE: arch/h8300/kernel/traps.c:150:
+			printk("\n       ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#933: FILE: arch/h8300/kernel/traps.c:151:
+		printk(" %08lx", *stack++);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#936: FILE: arch/h8300/kernel/traps.c:154:
+	printk("\nCall Trace:");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#951: FILE: arch/h8300/kernel/traps.c:169:
+				printk("\n       ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#952: FILE: arch/h8300/kernel/traps.c:170:
+			printk(" [<%08lx>]", addr);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#956: FILE: arch/h8300/kernel/traps.c:174:
+	printk("\n");

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000350693.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 69 errors, 42 warnings, 32 checks, 840 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000350693.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
