WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#61: 
#define PATH_MOUNT "/usr/bin/mount"

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#62: 
#define PATH_UMOUNT "/usr/bin/umount"

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#63: 
#define PATH_E2FSCK "/usr/bin/fsck.ext2"

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#64: 
#define PATH_E3FSCK "/usr/bin/fsck.ext3"

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#78: 
diff -urpN autofs-4.1.3.orig/daemon/spawn.c autofs-4.1.3_1.exec/daemon/spawn.c

CHECK:SPACING: No space is necessary after a cast
#86: FILE: daemon/spawn.c:172:
+		execvp(prog, (char *const *) argv);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#148: FILE: daemon/automount.c:1296:
+^I   our pgrp see the raw filesystem behind the magic.  So if we are a $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#157: FILE: daemon/automount.c:1317:
+	if (nullfd > 2) close(nullfd);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#175: FILE: daemon/automount.c:1378:
+		/* "	-g --ghost	\n" */

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#176: FILE: daemon/automount.c:1379:
+		/* "	--submount	\n" */

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#227: FILE: daemon/automount.c:43:
+#define assert(x)	do { if (!(x)) { crit(__FILE__ ":%d: assertion failed: " #x, __LINE__); } } while(0)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:SPACING: space required before the open parenthesis '('
#227: FILE: daemon/automount.c:43:
+#define assert(x)	do { if (!(x)) { crit(__FILE__ ":%d: assertion failed: " #x, __LINE__); } } while(0)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#227: FILE: daemon/automount.c:43:
+#define assert(x)	do { if (!(x)) { crit(__FILE__ ":%d: assertion failed: " #x, __LINE__); } } while(0)

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'get_pkt', this function's name, in a string
#324: FILE: daemon/automount.c:963:
+			error("get_pkt: poll failed: %s", strerror(errno));

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:SPACING: space required before the open parenthesis '('
#344: FILE: daemon/automount.c:1290:
+	if(!log_stderr) {

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#344: FILE: daemon/automount.c:1290:
+	if(!log_stderr) {
[...]
+	} else {
[...]

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#428: FILE: daemon/spawn.c:133:
+int spawnv(logger* log, const char *lockf, const char *prog, const char *const *argv)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#464: FILE: daemon/spawn.c:237:
+int spawnl(logger* log, const char *lockf, const char *prog, ...)

CHECK:SPACING: No space is necessary after a cast
#473: FILE: daemon/spawn.c:255:
+	return spawnv(log, lockf, prog, (const char **) argv);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#487: FILE: include/automount.h:121:
+typedef void logger(const char* msg, ...);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#489: FILE: include/automount.h:123:
+extern void (*info)(const char* msg, ...);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#490: FILE: include/automount.h:124:
+extern void (*notice)(const char* msg, ...);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#491: FILE: include/automount.h:125:
+extern void (*warn)(const char* msg, ...);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#492: FILE: include/automount.h:126:
+extern void (*error)(const char* msg, ...);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#493: FILE: include/automount.h:127:
+extern void (*crit)(const char* msg, ...);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#494: FILE: include/automount.h:128:
+extern void (*debug)(const char* msg, ...);

ERROR:FUNCTION_WITHOUT_ARGS: Bad function definition - void log_to_syslog() should probably be void log_to_syslog(void)
#496: FILE: include/automount.h:130:
+void log_to_syslog();

Function declarations without arguments like::

  int foo()

should be::

  int foo(void)

ERROR:FUNCTION_WITHOUT_ARGS: Bad function definition - void log_to_stderr() should probably be void log_to_stderr(void)
#497: FILE: include/automount.h:131:
+void log_to_stderr();

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#504: FILE: include/automount.h:136:
+int spawnl(logger* log, const char *lockf, const char *prog, ...);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#505: FILE: include/automount.h:137:
+int spawnv(logger* log, const char *lockf, const char *prog, const char *const *argv);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#561: FILE: lib/log.c:1:
+#include <stdarg.h>

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#574: FILE: lib/log.c:14:
+void (*info)(const char* msg, ...) = null;

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#575: FILE: lib/log.c:15:
+void (*notice)(const char* msg, ...) = null;

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#576: FILE: lib/log.c:16:
+void (*warn)(const char* msg, ...) = null;

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#577: FILE: lib/log.c:17:
+void (*error)(const char* msg, ...) = null;

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#578: FILE: lib/log.c:18:
+void (*crit)(const char* msg, ...) = null;

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#579: FILE: lib/log.c:19:
+void (*debug)(const char* msg, ...) = null;

WARNING:LINE_SPACING: Missing a blank line after declarations
#584: FILE: lib/log.c:24:
+	va_list ap;
+	va_start(ap, msg);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#592: FILE: lib/log.c:32:
+	va_list ap;
+	va_start(ap, msg);

WARNING:LINE_SPACING: Missing a blank line after declarations
#600: FILE: lib/log.c:40:
+	va_list ap;
+	va_start(ap, msg);

WARNING:LINE_SPACING: Missing a blank line after declarations
#608: FILE: lib/log.c:48:
+	va_list ap;
+	va_start(ap, msg);

WARNING:LINE_SPACING: Missing a blank line after declarations
#616: FILE: lib/log.c:56:
+	va_list ap;
+	va_start(ap, msg);

WARNING:LINE_SPACING: Missing a blank line after declarations
#624: FILE: lib/log.c:64:
+	va_list ap;
+	va_start(ap, msg);

WARNING:LINE_SPACING: Missing a blank line after declarations
#632: FILE: lib/log.c:72:
+	va_list ap;
+	va_start(ap, msg);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#634: FILE: lib/log.c:74:
+	fputc('\n',stderr);
 	          ^

ERROR:FUNCTION_WITHOUT_ARGS: Bad function definition - void log_to_syslog() should probably be void log_to_syslog(void)
#638: FILE: lib/log.c:78:
+void log_to_syslog()

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#643: FILE: lib/log.c:83:
+	if (do_debug) debug = syslog_debug;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#663: FILE: lib/log.c:103:
+	if (nullfd > 2) close(nullfd);

ERROR:FUNCTION_WITHOUT_ARGS: Bad function definition - void log_to_stderr() should probably be void log_to_stderr(void)
#666: FILE: lib/log.c:106:
+void log_to_stderr()

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#668: FILE: lib/log.c:108:
+	if (do_debug) debug = to_stderr;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#686: FILE: modules/mount_bind.c:65:
+	err = spawnl(debug, MOUNTED_LOCK,
 	    	     PATH_MOUNT, PATH_MOUNT, "-n", "--bind", tmp1, tmp2, NULL);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000243558.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 29 errors, 19 warnings, 3 checks, 621 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000243558.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
