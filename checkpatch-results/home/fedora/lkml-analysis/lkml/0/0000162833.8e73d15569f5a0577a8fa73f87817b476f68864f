WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#31: 
> > Calls to security_get_value() etc. can then be very fast and simple for 

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#133: FILE: include/linux/security.h:50:
+#if 0

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#134: FILE: include/linux/security.h:51:
+	printk(KERN_NOTICE "__get_value: %s (%d): head %lx p %lx idx %d returning %lx at %lx\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using '__get_value', this function's name, in a string
#134: FILE: include/linux/security.h:51:
+	printk(KERN_NOTICE "__get_value: %s (%d): head %lx p %lx idx %d returning %lx at %lx\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#135: FILE: include/linux/security.h:52:
+	printk(KERN_NOTICE "__get_value: %s (%d): head %lx p %lx idx %d returning %lx at %lx\n",
+		__FUNCTION__, __LINE__, (long)head, (long)p, idx, (long)p[idx], (long)&p[idx]);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#135: FILE: include/linux/security.h:52:
+		__FUNCTION__, __LINE__, (long)head, (long)p, idx, (long)p[idx], (long)&p[idx]);

WARNING:LINE_SPACING: Missing a blank line after declarations
#143: FILE: include/linux/security.h:60:
+	void **p = head + sizeof(struct hlist_head);
+	p[idx] = v;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#144: FILE: include/linux/security.h:61:
+#if 0

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#145: FILE: include/linux/security.h:62:
+	printk(KERN_NOTICE "%s (%d): hd %lx, p %lx, idx %d,"

WARNING:SPLIT_STRING: quoted string split across lines
#146: FILE: include/linux/security.h:63:
+	printk(KERN_NOTICE "%s (%d): hd %lx, p %lx, idx %d,"
+		"v %lx, p[idx] %lx at %lx\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:SPACING: No space is necessary after a cast
#147: FILE: include/linux/security.h:64:
+		__FUNCTION__, __LINE__, (long) (head),

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#147: FILE: include/linux/security.h:64:
+		__FUNCTION__, __LINE__, (long) (head),

CHECK:SPACING: No space is necessary after a cast
#148: FILE: include/linux/security.h:65:
+		(long) p, idx, (long) (v),

ERROR:SPACING: spaces required around that '>=' (ctx:VxV)
#171: FILE: include/linux/security.h:74:
+#define security_get_value_type(head, id, type, idx) (idx>=0) ? \
                                                          ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#171: FILE: include/linux/security.h:74:
+#define security_get_value_type(head, id, type, idx) (idx>=0) ? \
+		(type *)__get_value((head), idx) \
+	: ({ \
+		struct security_list *v = security_get_value((head), id); \
+		v ? hlist_entry(v, type, lsm_list) : NULL; \
+	})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'head' - possible side-effects?
#171: FILE: include/linux/security.h:74:
+#define security_get_value_type(head, id, type, idx) (idx>=0) ? \
+		(type *)__get_value((head), idx) \
+	: ({ \
+		struct security_list *v = security_get_value((head), id); \
+		v ? hlist_entry(v, type, lsm_list) : NULL; \
+	})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'idx' - possible side-effects?
#171: FILE: include/linux/security.h:74:
+#define security_get_value_type(head, id, type, idx) (idx>=0) ? \
+		(type *)__get_value((head), idx) \
+	: ({ \
+		struct security_list *v = security_get_value((head), id); \
+		v ? hlist_entry(v, type, lsm_list) : NULL; \
+	})

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'idx' may be better as '(idx)' to avoid precedence issues
#171: FILE: include/linux/security.h:74:
+#define security_get_value_type(head, id, type, idx) (idx>=0) ? \
+		(type *)__get_value((head), idx) \
+	: ({ \
+		struct security_list *v = security_get_value((head), id); \
+		v ? hlist_entry(v, type, lsm_list) : NULL; \
+	})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'head' - possible side-effects?
#178: FILE: include/linux/security.h:81:
+#define security_set_value_type(head, id, value, idx) \
+	do { \
+		if (idx>=0) { \
+			__set_value((head), idx, (value)); \
+		} else { \
+			security_set_value((head), id, &(value)->lsm_list); \
+		} \
+	} while (0);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'value' - possible side-effects?
#178: FILE: include/linux/security.h:81:
+#define security_set_value_type(head, id, value, idx) \
+	do { \
+		if (idx>=0) { \
+			__set_value((head), idx, (value)); \
+		} else { \
+			security_set_value((head), id, &(value)->lsm_list); \
+		} \
+	} while (0);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'idx' - possible side-effects?
#178: FILE: include/linux/security.h:81:
+#define security_set_value_type(head, id, value, idx) \
+	do { \
+		if (idx>=0) { \
+			__set_value((head), idx, (value)); \
+		} else { \
+			security_set_value((head), id, &(value)->lsm_list); \
+		} \
+	} while (0);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'idx' may be better as '(idx)' to avoid precedence issues
#178: FILE: include/linux/security.h:81:
+#define security_set_value_type(head, id, value, idx) \
+	do { \
+		if (idx>=0) { \
+			__set_value((head), idx, (value)); \
+		} else { \
+			security_set_value((head), id, &(value)->lsm_list); \
+		} \
+	} while (0);

WARNING:DO_WHILE_MACRO_WITH_TRAILING_SEMICOLON: do {} while (0) macros should not be semicolon terminated
#178: FILE: include/linux/security.h:81:
+#define security_set_value_type(head, id, value, idx) \
+	do { \
+		if (idx>=0) { \
+			__set_value((head), idx, (value)); \
+		} else { \
+			security_set_value((head), id, &(value)->lsm_list); \
+		} \
+	} while (0);

do {} while(0) macros should not have a trailing semicolon.

ERROR:SPACING: spaces required around that '>=' (ctx:VxV)
#180: FILE: include/linux/security.h:83:
+		if (idx>=0) { \
 		       ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'head' - possible side-effects?
#187: FILE: include/linux/security.h:90:
+#define security_add_value_type(head, id, value, idx) \
+	do { \
+		if (idx>=0) { \
+			__set_value((head), idx, (value)); \
+		} else { \
+			security_add_value((head), id, &(value)->lsm_list); \
+		} \
+	} while (0);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'value' - possible side-effects?
#187: FILE: include/linux/security.h:90:
+#define security_add_value_type(head, id, value, idx) \
+	do { \
+		if (idx>=0) { \
+			__set_value((head), idx, (value)); \
+		} else { \
+			security_add_value((head), id, &(value)->lsm_list); \
+		} \
+	} while (0);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'idx' - possible side-effects?
#187: FILE: include/linux/security.h:90:
+#define security_add_value_type(head, id, value, idx) \
+	do { \
+		if (idx>=0) { \
+			__set_value((head), idx, (value)); \
+		} else { \
+			security_add_value((head), id, &(value)->lsm_list); \
+		} \
+	} while (0);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'idx' may be better as '(idx)' to avoid precedence issues
#187: FILE: include/linux/security.h:90:
+#define security_add_value_type(head, id, value, idx) \
+	do { \
+		if (idx>=0) { \
+			__set_value((head), idx, (value)); \
+		} else { \
+			security_add_value((head), id, &(value)->lsm_list); \
+		} \
+	} while (0);

WARNING:DO_WHILE_MACRO_WITH_TRAILING_SEMICOLON: do {} while (0) macros should not be semicolon terminated
#187: FILE: include/linux/security.h:90:
+#define security_add_value_type(head, id, value, idx) \
+	do { \
+		if (idx>=0) { \
+			__set_value((head), idx, (value)); \
+		} else { \
+			security_add_value((head), id, &(value)->lsm_list); \
+		} \
+	} while (0);

ERROR:SPACING: spaces required around that '>=' (ctx:VxV)
#189: FILE: include/linux/security.h:92:
+		if (idx>=0) { \
 		       ^

ERROR:SPACING: spaces required around that '>=' (ctx:VxV)
#196: FILE: include/linux/security.h:99:
+#define security_del_value_type(head, id, type, idx) (idx>=0) ? \
                                                          ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#196: FILE: include/linux/security.h:99:
+#define security_del_value_type(head, id, type, idx) (idx>=0) ? \
+		(type *)__get_value((head), idx) \
+	: ( { \
+		struct security_list *v; \
+		v = security_del_value((head), id); \
+		v ? hlist_entry(v, type, lsm_list) : NULL; \
+	} )

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'head' - possible side-effects?
#196: FILE: include/linux/security.h:99:
+#define security_del_value_type(head, id, type, idx) (idx>=0) ? \
+		(type *)__get_value((head), idx) \
+	: ( { \
+		struct security_list *v; \
+		v = security_del_value((head), id); \
+		v ? hlist_entry(v, type, lsm_list) : NULL; \
+	} )

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'idx' - possible side-effects?
#196: FILE: include/linux/security.h:99:
+#define security_del_value_type(head, id, type, idx) (idx>=0) ? \
+		(type *)__get_value((head), idx) \
+	: ( { \
+		struct security_list *v; \
+		v = security_del_value((head), id); \
+		v ? hlist_entry(v, type, lsm_list) : NULL; \
+	} )

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'idx' may be better as '(idx)' to avoid precedence issues
#196: FILE: include/linux/security.h:99:
+#define security_del_value_type(head, id, type, idx) (idx>=0) ? \
+		(type *)__get_value((head), idx) \
+	: ( { \
+		struct security_list *v; \
+		v = security_del_value((head), id); \
+		v ? hlist_entry(v, type, lsm_list) : NULL; \
+	} )

ERROR:SPACING: space prohibited after that open parenthesis '('
#198: FILE: include/linux/security.h:101:
+	: ( { \

ERROR:SPACING: space prohibited before that close parenthesis ')'
#202: FILE: include/linux/security.h:105:
+	} )

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#211: FILE: include/linux/security.h:2066:
+extern int register_security	(struct security_operations *ops, int *idx);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#211: FILE: include/linux/security.h:2066:
+extern int register_security	(struct security_operations *ops, int *idx);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#214: FILE: include/linux/security.h:2068:
+extern int mod_reg_security	(const char *name,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#214: FILE: include/linux/security.h:2068:
+extern int mod_reg_security	(const char *name,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#215: FILE: include/linux/security.h:2069:
+extern int mod_reg_security	(const char *name,
+			struct security_operations *ops, int *idx);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#250: FILE: fs/inode.c:138:
+		memset(&inode->i_security_p, 0,
+			CONFIG_SECURITY_STACKER_NUMFIELDS*sizeof(void *));

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#250: FILE: fs/inode.c:138:
+			CONFIG_SECURITY_STACKER_NUMFIELDS*sizeof(void *));
 			                                 ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#262: FILE: include/linux/binfmts.h:33:
+	void * security_p[CONFIG_SECURITY_STACKER_NUMFIELDS];

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#282: FILE: include/linux/fs.h:564:
+	void * security_p[CONFIG_SECURITY_STACKER_NUMFIELDS];

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#290: FILE: include/linux/fs.h:602:
+^Ivoid ^I^I^I*f_security_p[CONFIG_SECURITY_STACKER_NUMFIELDS];$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#322: FILE: include/linux/msg.h:74:
+	void * security_p[CONFIG_SECURITY_STACKER_NUMFIELDS];

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#359: FILE: ipc/msg.c:104:
+	memset(&msq->q_perm.security_p, 0,
+			CONFIG_SECURITY_STACKER_NUMFIELDS*sizeof(void *));

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#359: FILE: ipc/msg.c:104:
+			CONFIG_SECURITY_STACKER_NUMFIELDS*sizeof(void *));
 			                                 ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#372: FILE: ipc/msgutil.c:46:
+	memset(&msg->security_p, 0,
+		CONFIG_SECURITY_STACKER_NUMFIELDS*sizeof(void *));

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#372: FILE: ipc/msgutil.c:46:
+		CONFIG_SECURITY_STACKER_NUMFIELDS*sizeof(void *));
 		                                 ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#385: FILE: ipc/sem.c:183:
+	memset(&sma->sem_perm.security_p, 0,
+		CONFIG_SECURITY_STACKER_NUMFIELDS*sizeof(void *));

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#385: FILE: ipc/sem.c:183:
+		CONFIG_SECURITY_STACKER_NUMFIELDS*sizeof(void *));
 		                                 ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#398: FILE: ipc/shm.c:204:
+	memset(&shp->shm_perm.security_p, 0,
+		CONFIG_SECURITY_STACKER_NUMFIELDS*sizeof(void *));

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#398: FILE: ipc/shm.c:204:
+		CONFIG_SECURITY_STACKER_NUMFIELDS*sizeof(void *));
 		                                 ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#411: FILE: kernel/fork.c:946:
+	memset(&p->security_p, 0,
+		CONFIG_SECURITY_STACKER_NUMFIELDS*sizeof(void *));

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#411: FILE: kernel/fork.c:946:
+		CONFIG_SECURITY_STACKER_NUMFIELDS*sizeof(void *));
 		                                 ^

ERROR:SPACING: spaces required around that '>=' (ctx:VxV)
#460: FILE: security/security.c:95:
+	if (idx>=0)
 	       ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#484: FILE: security/security.c:248:
+		for (i=0; i<CONFIG_SECURITY_STACKER_NUMFIELDS; i++) {
 		      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#484: FILE: security/security.c:248:
+		for (i=0; i<CONFIG_SECURITY_STACKER_NUMFIELDS; i++) {
 		           ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!security_field_owners[i]"
#485: FILE: security/security.c:249:
+			if (security_field_owners[i] == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#511: FILE: security/security.c:288:
+	for (i=0; i<CONFIG_SECURITY_STACKER_NUMFIELDS; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#511: FILE: security/security.c:288:
+	for (i=0; i<CONFIG_SECURITY_STACKER_NUMFIELDS; i++) {
 	           ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#528: FILE: security/security.c:312:
+int mod_reg_security(const char *name, struct security_operations *ops,
+			int *idx)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#550: FILE: security/security.c:338:
+		for (i=0; i<CONFIG_SECURITY_STACKER_NUMFIELDS; i++) {
 		      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#550: FILE: security/security.c:338:
+		for (i=0; i<CONFIG_SECURITY_STACKER_NUMFIELDS; i++) {
 		           ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!security_field_owners[i]"
#551: FILE: security/security.c:339:
+			if (security_field_owners[i] == NULL) {

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#578: FILE: security/security.c:376:
+	for (i=0; i<CONFIG_SECURITY_STACKER_NUMFIELDS; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#578: FILE: security/security.c:376:
+	for (i=0; i<CONFIG_SECURITY_STACKER_NUMFIELDS; i++) {
 	           ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#608: FILE: security/selinux/hooks.c:129:
+	security_set_value_type(&task->security, SELINUX_LSM_ID, tsec,
+		selinux_secidx);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#638: FILE: security/selinux/hooks.c:168:
+	security_set_value_type(&inode->i_security, SELINUX_LSM_ID, isec,
+		selinux_secidx);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#675: FILE: security/selinux/hooks.c:218:
+	security_set_value_type(&file->f_security, SELINUX_LSM_ID, fsec,
+		selinux_secidx);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#695: FILE: security/selinux/hooks.c:251:
+	security_set_value_type(&sb->s_security, SELINUX_LSM_ID, sbsec,
+		selinux_secidx);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#714: FILE: security/selinux/hooks.c:289:
+	security_set_value_type(&sk->sk_security, SELINUX_LSM_ID, ssec,
+		selinux_secidx);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#978: FILE: security/selinux/hooks.c:1588:
+	security_set_value_type(&bprm->security, SELINUX_LSM_ID, bsec,
+		selinux_secidx);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1019: FILE: security/selinux/hooks.c:1694:
+ ^I^I^Istruct bprm_security_struct, selinux_secidx);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1019: FILE: security/selinux/hooks.c:1694:
+ ^I^I^Istruct bprm_security_struct, selinux_secidx);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1019: FILE: security/selinux/hooks.c:1694:
+ ^I^I^Istruct bprm_security_struct, selinux_secidx);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1195: FILE: security/selinux/hooks.c:2961:
+	isec = security_get_value_type(&SOCK_INODE(sock)->i_security,
+		SELINUX_LSM_ID, struct inode_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1384: FILE: security/selinux/hooks.c:3681:
+	security_set_value_type(&perm->security, SELINUX_LSM_ID, isec,
+		selinux_secidx);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1403: FILE: security/selinux/hooks.c:3708:
+	security_set_value_type(&msg->security, SELINUX_LSM_ID, msec,
+		selinux_secidx);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1585: FILE: security/selinux/hooks.c:4489:
+	if (register_security (&selinux_ops, &selinux_secidx)) {

ERROR:SPACING: space prohibited after that open parenthesis '('
#1586: FILE: security/selinux/hooks.c:4490:
+		if (mod_reg_security( MY_NAME, &selinux_ops, &selinux_secidx)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#1594: FILE: security/selinux/hooks.c:4500:
+	printk(KERN_NOTICE "got selinux_secidx %d\n", selinux_secidx);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#1718: FILE: security/seclvl.c:803:
+	printk(KERN_NOTICE "got seclvl_secidx %d\n", seclvl_secidx);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1740: FILE: security/capability.c:69:
+	if (register_security (&capability_ops, NULL)) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1743: FILE: security/capability.c:71:
+		if (mod_reg_security (MY_NAME, &capability_ops, NULL)) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1756: FILE: security/root_plug.c:107:
+	if (register_security (&rootplug_security_ops, NULL)) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1761: FILE: security/root_plug.c:111:
+		if (mod_reg_security (MY_NAME, &rootplug_security_ops, NULL)) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1774: FILE: security/cap_stack.c:65:
+	if (register_security (&capability_ops, NULL)) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1777: FILE: security/cap_stack.c:67:
+		if (mod_reg_security (MY_NAME, &capability_ops, NULL)) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1790: FILE: security/stacker.c:1632:
+	if (register_security (&stacker_ops, NULL)) {

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1803: FILE: include/linux/security-stack.h:22:
+extern int security_unlink_value(struct hlist_node *n, int idx);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000162833.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 22 errors, 27 warnings, 45 checks, 1467 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000162833.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
