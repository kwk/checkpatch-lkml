WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#363: FILE: drivers/i2c/chips/m41txx.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#427: FILE: drivers/i2c/chips/m41txx.c:65:
+};
+static struct m41txx_chip_info *m41txx_chip;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#438: FILE: drivers/i2c/chips/m41txx.c:76:
+	sec = min = hour = day = mon = year = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#439: FILE: drivers/i2c/chips/m41txx.c:77:
+	sec1 = min1 = hour1 = day1 = mon1 = year1 = 0;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#446: FILE: drivers/i2c/chips/m41txx.c:84:
+			if (((sec = i2c_smbus_read_byte_data(save_client,

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#447: FILE: drivers/i2c/chips/m41txx.c:85:
+			if (((sec = i2c_smbus_read_byte_data(save_client,
+						m41txx_chip->sec)) >= 0)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#448: FILE: drivers/i2c/chips/m41txx.c:86:
+						m41txx_chip->sec)) >= 0)
+				&& ((min = i2c_smbus_read_byte_data(save_client,

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#450: FILE: drivers/i2c/chips/m41txx.c:88:
+						m41txx_chip->min)) >= 0)
+				&& ((hour= i2c_smbus_read_byte_data(save_client,

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#450: FILE: drivers/i2c/chips/m41txx.c:88:
+				&& ((hour= i2c_smbus_read_byte_data(save_client,
 				         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#452: FILE: drivers/i2c/chips/m41txx.c:90:
+						m41txx_chip->hour)) >= 0)
+				&& ((day = i2c_smbus_read_byte_data(save_client,

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#454: FILE: drivers/i2c/chips/m41txx.c:92:
+						m41txx_chip->day)) >= 0)
+				&& ((mon = i2c_smbus_read_byte_data(save_client,

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#456: FILE: drivers/i2c/chips/m41txx.c:94:
+						m41txx_chip->mon)) >= 0)
+				&& ((year= i2c_smbus_read_byte_data(save_client,

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#456: FILE: drivers/i2c/chips/m41txx.c:94:
+				&& ((year= i2c_smbus_read_byte_data(save_client,
 				         ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'retries == 0'
#461: FILE: drivers/i2c/chips/m41txx.c:99:
+		if ((retries == 0) || ((sec == sec1) && (min == min1)
+				&& (hour == hour1) && (day == day1)
+				&& (mon == mon1) && (year == year1)))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sec == sec1'
#461: FILE: drivers/i2c/chips/m41txx.c:99:
+		if ((retries == 0) || ((sec == sec1) && (min == min1)
+				&& (hour == hour1) && (day == day1)
+				&& (mon == mon1) && (year == year1)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'min == min1'
#461: FILE: drivers/i2c/chips/m41txx.c:99:
+		if ((retries == 0) || ((sec == sec1) && (min == min1)
+				&& (hour == hour1) && (day == day1)
+				&& (mon == mon1) && (year == year1)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'hour == hour1'
#461: FILE: drivers/i2c/chips/m41txx.c:99:
+		if ((retries == 0) || ((sec == sec1) && (min == min1)
+				&& (hour == hour1) && (day == day1)
+				&& (mon == mon1) && (year == year1)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'day == day1'
#461: FILE: drivers/i2c/chips/m41txx.c:99:
+		if ((retries == 0) || ((sec == sec1) && (min == min1)
+				&& (hour == hour1) && (day == day1)
+				&& (mon == mon1) && (year == year1)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'mon == mon1'
#461: FILE: drivers/i2c/chips/m41txx.c:99:
+		if ((retries == 0) || ((sec == sec1) && (min == min1)
+				&& (hour == hour1) && (day == day1)
+				&& (mon == mon1) && (year == year1)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'year == year1'
#461: FILE: drivers/i2c/chips/m41txx.c:99:
+		if ((retries == 0) || ((sec == sec1) && (min == min1)
+				&& (hour == hour1) && (day == day1)
+				&& (mon == mon1) && (year == year1)))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#462: FILE: drivers/i2c/chips/m41txx.c:100:
+		if ((retries == 0) || ((sec == sec1) && (min == min1)
+				&& (hour == hour1) && (day == day1)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#463: FILE: drivers/i2c/chips/m41txx.c:101:
+				&& (hour == hour1) && (day == day1)
+				&& (mon == mon1) && (year == year1)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'limit == 0'
#475: FILE: drivers/i2c/chips/m41txx.c:113:
+	if ((limit == 0) || (retries == 0)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'retries == 0'
#475: FILE: drivers/i2c/chips/m41txx.c:113:
+	if ((limit == 0) || (retries == 0)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#478: FILE: drivers/i2c/chips/m41txx.c:116:
+			dev_warn(&save_client->dev,
+				"m41txx: can't read rtc chip\n");

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#479: FILE: drivers/i2c/chips/m41txx.c:117:
+		sec = min = hour = day = mon = year = 0;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#524: FILE: drivers/i2c/chips/m41txx.c:162:
+		if ((i2c_smbus_write_byte_data(save_client,
+				m41txx_chip->sec, tm.tm_sec   & 0x7f) == 0)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#525: FILE: drivers/i2c/chips/m41txx.c:163:
+				m41txx_chip->sec, tm.tm_sec   & 0x7f) == 0)
+			&& (i2c_smbus_write_byte_data(save_client,

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#527: FILE: drivers/i2c/chips/m41txx.c:165:
+				m41txx_chip->min, tm.tm_min   & 0x7f) == 0)
+			&& (i2c_smbus_write_byte_data(save_client,

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#529: FILE: drivers/i2c/chips/m41txx.c:167:
+				m41txx_chip->hour, tm.tm_hour & 0x3f) == 0)
+			&& (i2c_smbus_write_byte_data(save_client,

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#531: FILE: drivers/i2c/chips/m41txx.c:169:
+				m41txx_chip->day, tm.tm_mday  & 0x3f) == 0)
+			&& (i2c_smbus_write_byte_data(save_client,

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#533: FILE: drivers/i2c/chips/m41txx.c:171:
+				m41txx_chip->mon, tm.tm_mon   & 0x1f) == 0)
+			&& (i2c_smbus_write_byte_data(save_client,

ERROR:SPACING: space required after that ',' (ctx:VxV)
#539: FILE: drivers/i2c/chips/m41txx.c:177:
+		dev_warn(&save_client->dev,"m41txx: can't write to rtc chip\n");
 		                          ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#571: FILE: drivers/i2c/chips/m41txx.c:209:
+	if (pdev && (pdata = pdev->dev.platform_data)) {

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#574: FILE: drivers/i2c/chips/m41txx.c:212:
+		for (i=0; i<ARRAY_SIZE(m41txx_chip_info_tbl); i++)
 		      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#574: FILE: drivers/i2c/chips/m41txx.c:212:
+		for (i=0; i<ARRAY_SIZE(m41txx_chip_info_tbl); i++)
 		           ^

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*client)...) over kzalloc(sizeof(struct i2c_client)...)
#612: FILE: drivers/i2c/chips/m41txx.c:250:
+	client = kzalloc(sizeof(struct i2c_client), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:STRLCPY: Prefer strscpy over strlcpy - see: https://lore.kernel.org/r/CAHk-=wgfRnXz0W3D37d01q3JFkr_i_uTL=V6A6G1oUZcprmknw@mail.gmail.com/
#616: FILE: drivers/i2c/chips/m41txx.c:254:
+	strlcpy(client->name, m41txx_driver.driver.name, I2C_NAME_SIZE);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#621: FILE: drivers/i2c/chips/m41txx.c:259:
+	if ((rc = i2c_attach_client(client)) != 0)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'm41txx_chip->type != M41TXX_TYPE_M41T00'
#625: FILE: drivers/i2c/chips/m41txx.c:263:
+	if ((m41txx_chip->type != M41TXX_TYPE_M41T00) && m41txx_chip->sqw_freq
+			&& ((rc = i2c_smbus_read_byte_data(client,
+				m41txx_chip->alarm_mon)) >= 0)
+			&& !(rc & 0x40) && !(i2c_smbus_write_byte_data(
+				client,m41txx_chip->sqw,m41txx_chip->sqw_freq)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#625: FILE: drivers/i2c/chips/m41txx.c:263:
+	if ((m41txx_chip->type != M41TXX_TYPE_M41T00) && m41txx_chip->sqw_freq

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#626: FILE: drivers/i2c/chips/m41txx.c:264:
+	if ((m41txx_chip->type != M41TXX_TYPE_M41T00) && m41txx_chip->sqw_freq
+			&& ((rc = i2c_smbus_read_byte_data(client,

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#628: FILE: drivers/i2c/chips/m41txx.c:266:
+				m41txx_chip->alarm_mon)) >= 0)
+			&& !(rc & 0x40) && !(i2c_smbus_write_byte_data(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#628: FILE: drivers/i2c/chips/m41txx.c:266:
+			&& !(rc & 0x40) && !(i2c_smbus_write_byte_data(

ERROR:SPACING: space required after that ',' (ctx:VxV)
#629: FILE: drivers/i2c/chips/m41txx.c:267:
+				client,m41txx_chip->sqw,m41txx_chip->sqw_freq)))
 				      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#629: FILE: drivers/i2c/chips/m41txx.c:267:
+				client,m41txx_chip->sqw,m41txx_chip->sqw_freq)))
 				                       ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#631: FILE: drivers/i2c/chips/m41txx.c:269:
+		i2c_smbus_write_byte_data(client, m41txx_chip->alarm_mon,
+			rc | 0x40);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#634: FILE: drivers/i2c/chips/m41txx.c:272:
+	if (((rc = i2c_smbus_read_byte_data(client, m41txx_chip->sec)) < 0)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#635: FILE: drivers/i2c/chips/m41txx.c:273:
+	if (((rc = i2c_smbus_read_byte_data(client, m41txx_chip->sec)) < 0)
+			|| ((rc & 0x80) && ((rc = i2c_smbus_write_byte_data(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#635: FILE: drivers/i2c/chips/m41txx.c:273:
+			|| ((rc & 0x80) && ((rc = i2c_smbus_write_byte_data(

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#659: FILE: drivers/i2c/chips/m41txx.c:297:
+	if ((rc = i2c_detach_client(client)) == 0) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#681: FILE: drivers/i2c/chips/m41txx.c:319:
+	if (!(rc = platform_driver_register(&m41txx_platform_driver)))

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#734: FILE: include/linux/m41txx.h:1:
+/*

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000123995.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 14 errors, 3 warnings, 36 checks, 415 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000123995.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
