WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#26: 
--- linux-2.6.17-rc6.orig/lib/carta_random32.c	1969-12-31 16:00:00.000000000 -0800

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#29: FILE: lib/carta_random32.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#43: FILE: lib/carta_random32.c:15:
+u64 carta_random32 (u64 seed)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#46: FILE: lib/carta_random32.c:18:
+#       define M ((u32) 1 << 31)

ERROR:CODE_INDENT: code indent should use tabs where possible
#47: FILE: lib/carta_random32.c:19:
+        u64 s, prod = A * seed, p, q;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#47: FILE: lib/carta_random32.c:19:
+        u64 s, prod = A * seed, p, q;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#49: FILE: lib/carta_random32.c:21:
+        p = (prod >> 31) & (M - 1);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#49: FILE: lib/carta_random32.c:21:
+        p = (prod >> 31) & (M - 1);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#50: FILE: lib/carta_random32.c:22:
+        q = (prod >>  0) & (M - 1);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#50: FILE: lib/carta_random32.c:22:
+        q = (prod >>  0) & (M - 1);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#51: FILE: lib/carta_random32.c:23:
+        s = p + q;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#51: FILE: lib/carta_random32.c:23:
+        s = p + q;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#52: FILE: lib/carta_random32.c:24:
+        if (s >= M)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#52: FILE: lib/carta_random32.c:24:
+        if (s >= M)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#53: FILE: lib/carta_random32.c:25:
+                s -= M - 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#53: FILE: lib/carta_random32.c:25:
+                s -= M - 1;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#54: FILE: lib/carta_random32.c:26:
+        return s;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#54: FILE: lib/carta_random32.c:26:
+        return s;$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#71: FILE: perfmon/perfmon.c:1:
+/*

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#92: FILE: perfmon/perfmon.c:22:
+ * ^Ihttp://www.hpl.hp.com/research/linux/perfmon$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#110: FILE: perfmon/perfmon.c:40:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#132: FILE: perfmon/perfmon.c:62:
+int pfm_ovfl_notify_user(struct pfm_context *ctx,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#136: FILE: perfmon/perfmon.c:66:
+
+

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#141: FILE: perfmon/perfmon.c:71:
+	next = (ctx->msgq_tail+1) % PFM_MAX_MSGS;
 	                      ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#155: FILE: perfmon/perfmon.c:85:
+	return ctx->msgq+idx;
 	                ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#160: FILE: perfmon/perfmon.c:90:
+	ctx->msgq_head = ctx->msgq_tail = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#190: FILE: perfmon/perfmon.c:120:
+^I * ^I- PMU description table$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#191: FILE: perfmon/perfmon.c:121:
+^I * ^I- sampling format$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#201: FILE: perfmon/perfmon.c:131:
+static int pfm_setup_smpl_fmt(struct pfm_smpl_fmt *fmt, void *fmt_arg,
+				struct pfm_context *ctx, u32 ctx_flags,

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#202: FILE: perfmon/perfmon.c:132:
+				int mode, struct file *filp)
 				                       ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#234: FILE: perfmon/perfmon.c:164:
+			ret = pfm_smpl_buffer_alloc_old(ctx, size, filp);
 			                                           ^^^^

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#243: FILE: perfmon/perfmon.c:173:
+
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#358: FILE: perfmon/perfmon.c:288:
+			__FUNCTION__,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#366: FILE: perfmon/perfmon.c:296:
+			__FUNCTION__,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#386: FILE: perfmon/perfmon.c:316:
+			__FUNCTION__, ret);

WARNING:TYPO_SPELLING: 'detroyed' may be misspelled - perhaps 'destroyed'?
#401: FILE: perfmon/perfmon.c:331:
+	 * grab a cpu, it is detroyed by __pfm_unload_context()
 	                     ^^^^^^^^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#433: FILE: perfmon/perfmon.c:363:
+		memset(ctx, 0, sizeof(*ctx)+PFM_ARCH_CTX_SIZE);
 		                           ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#458: FILE: perfmon/perfmon.c:388:
+		if (ret) return ret;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!addr"
#462: FILE: perfmon/perfmon.c:392:
+	if (addr == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#483: FILE: perfmon/perfmon.c:413:
+static inline u64 pfm_new_pmd_value (struct pfm_pmd *reg, int reset_mode)

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#517: FILE: perfmon/perfmon.c:447:
+	if (bitmap_empty(ulp(reset_pmds), max_pmd)) return;

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#531: FILE: perfmon/perfmon.c:461:
+	for (i = 0; i < max_pmd; i++) {
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#533: FILE: perfmon/perfmon.c:463:
+		if (pfm_bv_isset(reset_pmds, i)) {
+

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#537: FILE: perfmon/perfmon.c:467:
+			set->view->set_pmds[i]= val;
 			                      ^

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#540: FILE: perfmon/perfmon.c:470:
+				if (pfm_bv_isset(cnt_mask, i)) {
[...]
+				} else {
[...]

CHECK:LINE_SPACING: Please don't use multiple blank lines
#568: FILE: perfmon/perfmon.c:498:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#570: FILE: perfmon/perfmon.c:500:
+
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#598: FILE: perfmon/perfmon.c:528:
+^I^I^I^I^I  ^I  &rst_ctrl, hdr);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#598: FILE: perfmon/perfmon.c:528:
+^I^I^I^I^I  ^I  &rst_ctrl, hdr);$

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#600: FILE: perfmon/perfmon.c:530:
+		rst_ctrl= PFM_OVFL_CTRL_RESET;
 		        ^

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#622: FILE: perfmon/perfmon.c:552:
+		if ((rst_ctrl & PFM_OVFL_CTRL_MASK) == 0) {
[...]
+		} else {
[...]

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#690: FILE: perfmon/perfmon.c:620:
+		if (set->npend_ovfls == 0) continue;

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#707: FILE: perfmon/perfmon.c:637:
+		for (i = first_cnt_pmd; num_ovfls; i++) {
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#709: FILE: perfmon/perfmon.c:639:
+			if (pfm_bv_isset(set->used_pmds, i)) {
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#739: FILE: perfmon/perfmon.c:669:
+	BUG_ON(ctx->flags.system);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#749: FILE: perfmon/perfmon.c:679:
+	switch(ctx->state) {
+		case PFM_CTX_LOADED:
+		case PFM_CTX_MASKED:
[...]
+		case PFM_CTX_ZOMBIE:
[...]
+		default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:SPACING: space required before the open parenthesis '('
#749: FILE: perfmon/perfmon.c:679:
+	switch(ctx->state) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#760: FILE: perfmon/perfmon.c:690:
+			BUG_ON(ctx->state != PFM_CTX_LOADED);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#773: FILE: perfmon/perfmon.c:703:
+struct pfm_context * pfm_get_ctx(int fd)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#775: FILE: perfmon/perfmon.c:705:
+	struct file *filp;
 	             ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#778: FILE: perfmon/perfmon.c:708:
+	filp = fget(fd);
 	^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#779: FILE: perfmon/perfmon.c:709:
+	if (unlikely(filp == NULL)) {
 	             ^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!filp"
#779: FILE: perfmon/perfmon.c:709:
+	if (unlikely(filp == NULL)) {

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#784: FILE: perfmon/perfmon.c:714:
+	if (unlikely(pfm_is_fd(filp) == 0)) {
 	                       ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#786: FILE: perfmon/perfmon.c:716:
+		fput(filp);
 		     ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#794: FILE: perfmon/perfmon.c:724:
+	if (filp != ctx->filp && ctx->filp) {
 	    ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#794: FILE: perfmon/perfmon.c:724:
+	if (filp != ctx->filp && ctx->filp) {
 	                 ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#794: FILE: perfmon/perfmon.c:724:
+	if (filp != ctx->filp && ctx->filp) {
 	                              ^^^^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#794: FILE: perfmon/perfmon.c:724:
+	if (filp != ctx->filp && ctx->filp) {
+		PFM_DBG("filp is different");
+	}

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#795: FILE: perfmon/perfmon.c:725:
+		PFM_DBG("filp is different");
 		         ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#799: FILE: perfmon/perfmon.c:729:
+	 * update filp
 	          ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#801: FILE: perfmon/perfmon.c:731:
+	ctx->filp = filp;
 	     ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#801: FILE: perfmon/perfmon.c:731:
+	ctx->filp = filp;
 	            ^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#805: FILE: perfmon/perfmon.c:735:
+
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ctx"
#823: FILE: perfmon/perfmon.c:753:
+	if (ctx == NULL) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#828: FILE: perfmon/perfmon.c:758:
+	BUG_ON(ctx->flags.system);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#948: FILE: perfmon/perfmon.c:878:
+	kill_fasync (&ctx->async_queue, SIGIO, POLL_IN);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#954: FILE: perfmon/perfmon.c:884:
+int pfm_ovfl_notify_user(struct pfm_context *ctx,
+			struct pfm_event_set *set,

ERROR:CODE_INDENT: code indent should use tabs where possible
#955: FILE: perfmon/perfmon.c:885:
+^I     ^I^Iunsigned long ip)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#955: FILE: perfmon/perfmon.c:885:
+^I     ^I^Iunsigned long ip)$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!msg"
#965: FILE: perfmon/perfmon.c:895:
+		if (msg == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!msg"
#1003: FILE: perfmon/perfmon.c:933:
+	if (msg == NULL) {

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1004: FILE: perfmon/perfmon.c:934:
+		PFM_ERR("%s no more msgs", __FUNCTION__);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1023: FILE: perfmon/perfmon.c:953:
+void __cpuinit pfm_init_percpu (void *dummy)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1038: FILE: perfmon/perfmon.c:968:
+	pfm_ctx_cachep = kmem_cache_create("pfm_context",
+				   sizeof(struct pfm_context)+PFM_ARCH_CTX_SIZE,

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1038: FILE: perfmon/perfmon.c:968:
+				   sizeof(struct pfm_context)+PFM_ARCH_CTX_SIZE,
 				                             ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pfm_ctx_cachep"
#1040: FILE: perfmon/perfmon.c:970:
+	if (pfm_ctx_cachep == NULL) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1048: FILE: perfmon/perfmon.c:978:
+
+

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#1069: FILE: perfmon/perfmon.c:999:
+__initcall(pfm_init);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1071: FILE: perfmon/perfmon.c:1001:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1084: FILE: perfmon/perfmon.c:1014:
+
+

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1105: FILE: perfmon/perfmon.c:1035:
+	old_set = new_set = ctx->active_set;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!task"
#1112: FILE: perfmon/perfmon.c:1042:
+	if (task == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!new_set"
#1122: FILE: perfmon/perfmon.c:1052:
+		if (new_set == NULL) {

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1173: FILE: perfmon/perfmon.c:1103:
+^I * ^I- stopped if we switched set (self-monitoring)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1174: FILE: perfmon/perfmon.c:1104:
+^I * ^I- stopped if never started$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1175: FILE: perfmon/perfmon.c:1105:
+^I * ^I- started if calling pfm_start() in sequence$

WARNING:TYPO_SPELLING: 'overriden' may be misspelled - perhaps 'overridden'?
#1208: FILE: perfmon/perfmon.c:1138:
+	 * will be overriden in pfm_unmask_monitoring()
 	           ^^^^^^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1213: FILE: perfmon/perfmon.c:1143:
+
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!task"
#1245: FILE: perfmon/perfmon.c:1175:
+	if (task == NULL)

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#1277: FILE: perfmon/perfmon.c:1207:
+	switch(state) {
+		case PFM_CTX_MASKED:
[...]
+		case PFM_CTX_LOADED:
[...]
+		case PFM_CTX_UNLOADED:
+		case PFM_CTX_ZOMBIE:
[...]
+		default:

ERROR:SPACING: space required before the open parenthesis '('
#1277: FILE: perfmon/perfmon.c:1207:
+	switch(state) {

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#1283: FILE: perfmon/perfmon.c:1213:
+			/* fall through */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

WARNING:TYPO_SPELLING: 'explicitely' may be misspelled - perhaps 'explicitly'?
#1334: FILE: perfmon/perfmon.c:1264:
+	 * We cannot explicitely reset another task, it MUST always
 	             ^^^^^^^^^^^

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1404: FILE: perfmon/perfmon.c:1334:
+	for (i = 0; i < count; i++, req++) {
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!set"
#1418: FILE: perfmon/perfmon.c:1348:
+			if (set == NULL) {

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1427: FILE: perfmon/perfmon.c:1357:
+^I^I * ^I- explicitly written via pfm_write_pmds()$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1428: FILE: perfmon/perfmon.c:1358:
+^I^I * ^I- provided as a reg_smpl_pmds[] to another PMD during$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1429: FILE: perfmon/perfmon.c:1359:
+^I^I * ^I  pfm_write_pmds()$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1432: FILE: perfmon/perfmon.c:1362:
+^I^I * ^I- on context switch restore, we can restore only what we$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1433: FILE: perfmon/perfmon.c:1363:
+^I^I * ^I  use (except when regs directly readable at user level,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1434: FILE: perfmon/perfmon.c:1364:
+^I^I * ^I  e.g., IA-64 self-monitoring, I386 RDTSC).$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1435: FILE: perfmon/perfmon.c:1365:
+^I^I * ^I- do not need to maintain PMC -> PMD dependencies$

WARNING:SPLIT_STRING: quoted string split across lines
#1439: FILE: perfmon/perfmon.c:1369:
+			PFM_DBG("pmd%u cannot be read, because never "
+				"requested", cnum);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:TYPO_SPELLING: 'explicitely' may be misspelled - perhaps 'explicitly'?
#1445: FILE: perfmon/perfmon.c:1375:
+		 * explicitely been written by the application. In this case
 		   ^^^^^^^^^^^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxE)
#1493: FILE: perfmon/perfmon.c:1423:
+				 PFM_REGFL_OVFL_NOTIFY| \
 				                      ^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1524: FILE: perfmon/perfmon.c:1454:
+		can_access_pmu = __get_cpu_var(pmu_owner) == ctx->task
+			       || is_system;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "wr_func"
#1529: FILE: perfmon/perfmon.c:1459:
+	has_wr_check = wr_func != NULL && (pfm_controls.expert_mode == 0);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1532: FILE: perfmon/perfmon.c:1462:
+	for (i = 0; i < count; i++, req++) {
+

WARNING:SPLIT_STRING: quoted string split across lines
#1571: FILE: perfmon/perfmon.c:1501:
+					PFM_DBG("invalid smpl_pmds=0x%llx "
+						"for pmd%u",

WARNING:SPLIT_STRING: quoted string split across lines
#1583: FILE: perfmon/perfmon.c:1513:
+					PFM_DBG("invalid reset_pmds=0x%llx "
+						"for pmd%u",

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!set"
#1596: FILE: perfmon/perfmon.c:1526:
+			if (set == NULL) {

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1612: FILE: perfmon/perfmon.c:1542:
+
+		}

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1613: FILE: perfmon/perfmon.c:1543:
+		hw_val = value = req->reg_value;

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1622: FILE: perfmon/perfmon.c:1552:
+			if (likely(compat == 0)) {
+

WARNING:SPLIT_STRING: quoted string split across lines
#1719: FILE: perfmon/perfmon.c:1649:
+		PFM_DBG("set%u pmd%u=0x%llx flags=0x%x a_pmu=%d "
+			"hw_pmd=0x%llx ctx_pmd=0x%llx s_reset=0x%llx "

WARNING:SPLIT_STRING: quoted string split across lines
#1720: FILE: perfmon/perfmon.c:1650:
+			"hw_pmd=0x%llx ctx_pmd=0x%llx s_reset=0x%llx "
+			"l_reset=0x%llx u_pmds=0x%llx nu_pmds=%u "

WARNING:SPLIT_STRING: quoted string split across lines
#1721: FILE: perfmon/perfmon.c:1651:
+			"l_reset=0x%llx u_pmds=0x%llx nu_pmds=%u "
+			"s_pmds=0x%llx r_pmds=0x%llx o_pmds=0x%llx "

WARNING:SPLIT_STRING: quoted string split across lines
#1722: FILE: perfmon/perfmon.c:1652:
+			"s_pmds=0x%llx r_pmds=0x%llx o_pmds=0x%llx "
+			"o_thres=%llu compat=%d eventid=%llx",

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1760: FILE: perfmon/perfmon.c:1690:
+#define PFM_REGFL_PMC_ALL	(PFM_REGFL_NO_EMUL64|PFM_REG_RETFL_MASK)
                          	                    ^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1788: FILE: perfmon/perfmon.c:1718:
+		can_access_pmu = __get_cpu_var(pmu_owner) == ctx->task
+			      || is_system;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "wr_func"
#1792: FILE: perfmon/perfmon.c:1722:
+	has_wr_check = wr_func != NULL && (pfm_controls.expert_mode == 0);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1795: FILE: perfmon/perfmon.c:1725:
+	for (i = 0; i < count; i++, req++) {
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!set"
#1829: FILE: perfmon/perfmon.c:1759:
+			if (set == NULL) {

WARNING:SPLIT_STRING: quoted string split across lines
#1845: FILE: perfmon/perfmon.c:1775:
+				PFM_DBG("pmc%u no support "
+					"PFM_REGFL_NO_EMUL64", cnum);

WARNING:SPLIT_STRING: quoted string split across lines
#1895: FILE: perfmon/perfmon.c:1825:
+		PFM_DBG("set%u pmc%u=0x%llx a_pmu=%d "
+			"u_pmcs=0x%llx nu_pmcs=%u",

WARNING:SPLIT_STRING: quoted string split across lines
#1924: FILE: perfmon/perfmon.c:1854:
+	PFM_DBG("cur: euid=%d uid=%d gid=%d task: euid=%d "
+		"suid=%d uid=%d egid=%d cap:%d sgid=%d",

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1935: FILE: perfmon/perfmon.c:1865:
+	return ((current->uid != task->euid)
+	    || (current->uid != task->suid)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1936: FILE: perfmon/perfmon.c:1866:
+	    || (current->uid != task->suid)
+	    || (current->uid != task->uid)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1937: FILE: perfmon/perfmon.c:1867:
+	    || (current->uid != task->uid)
+	    || (current->gid != task->egid)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1938: FILE: perfmon/perfmon.c:1868:
+	    || (current->gid != task->egid)
+	    || (current->gid != task->sgid)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1939: FILE: perfmon/perfmon.c:1869:
+	    || (current->gid != task->sgid)
+	    || (current->gid != task->gid)) && !capable(CAP_SYS_PTRACE);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1942: FILE: perfmon/perfmon.c:1872:
+
+

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1945: FILE: perfmon/perfmon.c:1875:
+ * ^I- kernel task$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1946: FILE: perfmon/perfmon.c:1876:
+ * ^I- task not owned by caller$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1947: FILE: perfmon/perfmon.c:1877:
+ * ^I- task incompatible with context mode$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!task->mm"
#1955: FILE: perfmon/perfmon.c:1885:
+	if (task->mm == NULL) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'task->state != TASK_STOPPED'
#1985: FILE: perfmon/perfmon.c:1915:
+	if ((task->state != TASK_STOPPED) && (task->state != TASK_TRACED)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'task->state != TASK_TRACED'
#1985: FILE: perfmon/perfmon.c:1915:
+	if ((task->state != TASK_STOPPED) && (task->state != TASK_TRACED)) {

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2003: FILE: perfmon/perfmon.c:1933:
+}
+static int pfm_get_task(struct pfm_context *ctx, pid_t pid,

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#2014: FILE: perfmon/perfmon.c:1944:
+	if (pid != current->pid) {
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!p"
#2025: FILE: perfmon/perfmon.c:1955:
+		if (p == NULL)

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#2030: FILE: perfmon/perfmon.c:1960:
+	if (ret == 0) {
[...]
+	} else if (p != current) {
[...]

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2045: FILE: perfmon/perfmon.c:1975:
+	do_each_thread (g, t) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2050: FILE: perfmon/perfmon.c:1980:
+	} while_each_thread (g, t);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2059: FILE: perfmon/perfmon.c:1989:
+
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "old"
#2116: FILE: perfmon/perfmon.c:2046:
+	if (old != NULL) {

WARNING:SPLIT_STRING: quoted string split across lines
#2118: FILE: perfmon/perfmon.c:2048:
+		PFM_DBG("load_pid [%d] has already a context "
+			"old=%p new=%p cur=%p",

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#2188: FILE: perfmon/perfmon.c:2118:
+	} else {
+

WARNING:TYPO_SPELLING: 'registes' may be misspelled - perhaps 'registers'?
#2265: FILE: perfmon/perfmon.c:2195:
+	 * load all registes from ctx to PMU
 	            ^^^^^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!set"
#2298: FILE: perfmon/perfmon.c:2228:
+	if (set == NULL) {

ERROR:SPACING: space prohibited after that open parenthesis '('
#2431: FILE: perfmon/perfmon.c:2361:
+	if (  (ctx_flags & PFM_FL_SYSTEM_WIDE)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2432: FILE: perfmon/perfmon.c:2362:
+	if (  (ctx_flags & PFM_FL_SYSTEM_WIDE)
+	   && pfm_controls.sys_group != PFM_GROUP_PERM_ANY

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2433: FILE: perfmon/perfmon.c:2363:
+	   && pfm_controls.sys_group != PFM_GROUP_PERM_ANY
+	   && in_group_p(pfm_controls.sys_group)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2437: FILE: perfmon/perfmon.c:2367:
+	} else if (pfm_controls.task_group != PFM_GROUP_PERM_ANY
+		   && in_group_p(pfm_controls.task_group)) {

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#2453: FILE: perfmon/perfmon.c:2383:
+	struct file *filp = NULL;
 	             ^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!c"
#2459: FILE: perfmon/perfmon.c:2389:
+	if (mode == PFM_KAPI && c == NULL)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#2488: FILE: perfmon/perfmon.c:2418:
+		fd = pfm_alloc_fd(&filp);
 		                   ^^^^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#2503: FILE: perfmon/perfmon.c:2433:
+	ctx->flags.system = (ctx_flags & PFM_FL_SYSTEM_WIDE) ? 1: 0;
 	                                                        ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#2504: FILE: perfmon/perfmon.c:2434:
+	ctx->flags.no_msg = (ctx_flags & PFM_FL_OVFL_NO_MSG) ? 1: 0;
 	                                                        ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#2505: FILE: perfmon/perfmon.c:2435:
+	ctx->flags.mapset = (ctx_flags & PFM_FL_MAP_SETS) ? 1: 0;
 	                                                     ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pfm_find_set"
#2524: FILE: perfmon/perfmon.c:2454:
+	if (pfm_find_set(ctx, 0, 1) == NULL)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#2536: FILE: perfmon/perfmon.c:2466:
+					 mode, filp);
 					       ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#2546: FILE: perfmon/perfmon.c:2476:
+	if (filp)
 	    ^^^^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2561: FILE: perfmon/perfmon.c:2491:
+	ctx->msgq_head = ctx->msgq_tail = 0;

WARNING:SPLIT_STRING: quoted string split across lines
#2566: FILE: perfmon/perfmon.c:2496:
+	PFM_DBG("ctx=%p flags=0x%x system=%d notify_block=%d no_msg=%d"
+		" use_fmt=%d remap=%d ctx_fd=%d mode=%d",

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "fmt"
#2572: FILE: perfmon/perfmon.c:2502:
+		fmt != NULL,

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#2584: FILE: perfmon/perfmon.c:2514:
+		fd_install(fd, filp);
 		               ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#2592: FILE: perfmon/perfmon.c:2522:
+		put_filp(filp);
 		         ^^^^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2645: FILE: perfmon/perfmon_ctxsw.c:1:
+/*

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2666: FILE: perfmon/perfmon_ctxsw.c:22:
+ * ^Ihttp://www.hpl.hp.com/research/linux/perfmon$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2681: FILE: perfmon/perfmon_ctxsw.c:37:
+	BUG_ON(task->pid == 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2682: FILE: perfmon/perfmon_ctxsw.c:38:
+	BUG_ON(__get_cpu_var(pmu_owner));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2684: FILE: perfmon/perfmon_ctxsw.c:40:
+	BUG_ON(task->pfm_context != ctx);

WARNING:TYPO_SPELLING: 'fo' may be misspelled - perhaps 'of'?
#2689: FILE: perfmon/perfmon_ctxsw.c:45:
+	 * in case fo zombie, we do not complete ctswin of the
 	           ^^

ERROR:SPACING: spaces required around that '=' (ctx:VxO)
#2712: FILE: perfmon/perfmon_ctxsw.c:68:
+ctx->last_cpu=-1;
              ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#2712: FILE: perfmon/perfmon_ctxsw.c:68:
+ctx->last_cpu=-1;
               ^

WARNING:TYPO_SPELLING: 'loosing' may be misspelled - perhaps 'losing'?
#2736: FILE: perfmon/perfmon_ctxsw.c:92:
+	 * the interrupt to avoid loosing some important performance data.
 	                          ^^^^^^^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2771: FILE: perfmon/perfmon_ctxsw.c:127:
+	if (set->flags & PFM_SETFL_TIME_SWITCH) {
+		__get_cpu_var(pfm_syst_info) = PFM_CPUINFO_TIME_SWITCH;
+	}

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2786: FILE: perfmon/perfmon_ctxsw.c:142:
+^I * ^I- pmu owner != task$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2787: FILE: perfmon/perfmon_ctxsw.c:143:
+^I * ^I- PMDs were modified$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2788: FILE: perfmon/perfmon_ctxsw.c:144:
+^I * ^I- PMCs were modified$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2789: FILE: perfmon/perfmon_ctxsw.c:145:
+^I * ^I- arch modifies PMC to stop monitoring$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2790: FILE: perfmon/perfmon_ctxsw.c:146:
+^I * ^I- there was an in-flight interrupt at pfm_ctxswout_thread()$

ERROR:SPACING: space prohibited before that ',' (ctx:WxV)
#2843: FILE: perfmon/perfmon_ctxsw.c:199:
+		pfm_arch_stop(task ,ctx, set);
 		                   ^

ERROR:SPACING: space required after that ',' (ctx:WxV)
#2843: FILE: perfmon/perfmon_ctxsw.c:199:
+		pfm_arch_stop(task ,ctx, set);
 		                   ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ctxp"
#2863: FILE: perfmon/perfmon_ctxsw.c:219:
+	if (ctxp == NULL && ctx == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ctx"
#2863: FILE: perfmon/perfmon_ctxsw.c:219:
+	if (ctxp == NULL && ctx == NULL)

CHECK:BRACES: braces {} should be used on all arms of this statement
#2878: FILE: perfmon/perfmon_ctxsw.c:234:
+	if (ctxp && ctxp->flags.system)
[...]
+	else if (ctx) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2885: FILE: perfmon/perfmon_ctxsw.c:241:
+	} else

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2920: FILE: perfmon/perfmon_ctxsw.c:276:
+	BUG_ON(task->pfm_context != ctx);

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#2973: FILE: perfmon/perfmon_ctxsw.c:329:
+	if (task->pid == 0 && (set->flags & PFM_SETFL_EXCL_IDLE) != 0) {
[...]
+	} else {
[...]

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ctx"
#2990: FILE: perfmon/perfmon_ctxsw.c:346:
+	if (ctx == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!task->pfm_context"
#3008: FILE: perfmon/perfmon_ctxsw.c:364:
+		if (task->pfm_context == NULL)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3029: FILE: perfmon/perfmon_pmu.c:1:
+/*

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3050: FILE: perfmon/perfmon_pmu.c:22:
+ * ^Ihttp://www.hpl.hp.com/research/linux/perfmon$

WARNING:TYPO_SPELLING: 'acces' may be misspelled - perhaps 'access'?
#3069: FILE: perfmon/perfmon_pmu.c:41:
+ * perfmon core must acces PMU information ONLY through pfm_pmu_conf
                      ^^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3075: FILE: perfmon/perfmon_pmu.c:47:
+
+

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#3089: FILE: perfmon/perfmon_pmu.c:61:
+	memset(&_pfm_pmu_conf, 0 , sizeof(_pfm_pmu_conf));
 	                         ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#3098: FILE: perfmon/perfmon_pmu.c:70:
+	max1 = max2 = -1;

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#3100: FILE: perfmon/perfmon_pmu.c:72:
+	for (i = 0; i < cfg->num_pmc_entries;  i++) {
+

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#3124: FILE: perfmon/perfmon_pmu.c:96:
+	n = n_counters = 0;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#3125: FILE: perfmon/perfmon_pmu.c:97:
+	max1 = max2 = max3 = first_cnt = first_i = -1;

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#3127: FILE: perfmon/perfmon_pmu.c:99:
+	for (i = 0; i < cfg->num_pmd_entries;  i++) {
+

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#3185: FILE: perfmon/perfmon_pmu.c:157:
+	_pfm_pmu_conf.ovfl_mask = (PFM_ONE_64 << cfg->counter_width) -1;
 	                                                             ^

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#3188: FILE: perfmon/perfmon_pmu.c:160:
+	PFM_DBG("max_rw_pmd=%u impl_rw=0x%llx", _pfm_pmu_conf.max_rw_pmd, _pfm_pmu_conf.impl_rw_pmds[0]);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#3207: FILE: perfmon/perfmon_pmu.c:179:
+	nspec = nspec_ro = num_pmds = num_pmcs = 0;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cfg"
#3210: FILE: perfmon/perfmon_pmu.c:182:
+	if (cfg == NULL || cfg->pmu_name == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cfg->pmu_name"
#3210: FILE: perfmon/perfmon_pmu.c:182:
+	if (cfg == NULL || cfg->pmu_name == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cfg->owner"
#3215: FILE: perfmon/perfmon_pmu.c:187:
+	if ((cfg->flags & PFM_PMUFL_IS_BUILTIN) == 0 && cfg->owner == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cfg->probe_pmu"
#3236: FILE: perfmon/perfmon_pmu.c:208:
+	if (cfg->probe_pmu == NULL) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#3245: FILE: perfmon/perfmon_pmu.c:217:
+	for (i = 0; i < cfg->num_pmc_entries;  i++) {
+

WARNING:SPLIT_STRING: quoted string split across lines
#3256: FILE: perfmon/perfmon_pmu.c:228:
+			PFM_INFO("PFM_REG_V is not supported on "
+				 "PMCs (PMC%d)", i);

WARNING:SPLIT_STRING: quoted string split across lines
#3261: FILE: perfmon/perfmon_pmu.c:233:
+			PFM_INFO("PFM_REG_RO meaningless on "
+				 "PMCs (PMC%u)", i);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cfg->pmc_write_check"
#3266: FILE: perfmon/perfmon_pmu.c:238:
+	if (num_wc && cfg->pmc_write_check == NULL) {

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#3274: FILE: perfmon/perfmon_pmu.c:246:
+	num_wc= 0;
 	      ^

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#3276: FILE: perfmon/perfmon_pmu.c:248:
+	for (i = 0; i < cfg->num_pmd_entries;  i++) {
+

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#3288: FILE: perfmon/perfmon_pmu.c:260:
+		if ((type & (PFM_REG_V|PFM_REG_RO)) == (PFM_REG_V|PFM_REG_RO))
 		                      ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#3288: FILE: perfmon/perfmon_pmu.c:260:
+		if ((type & (PFM_REG_V|PFM_REG_RO)) == (PFM_REG_V|PFM_REG_RO))
 		                                                 ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cfg->pmd_write_check"
#3292: FILE: perfmon/perfmon_pmu.c:264:
+	if (num_wc && cfg->pmd_write_check == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cfg->pmd_sread"
#3297: FILE: perfmon/perfmon_pmu.c:269:
+	if (nspec_ro && cfg->pmd_sread == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cfg->pmd_swrite"
#3303: FILE: perfmon/perfmon_pmu.c:275:
+	if (nspec && cfg->pmd_swrite == NULL) {

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#3329: FILE: perfmon/perfmon_pmu.c:301:
+	if (pfm_pmu_conf && (pmu_is_module(pfm_pmu_conf) == 0 || module_refcount(pfm_pmu_conf->owner))) {

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#3329: FILE: perfmon/perfmon_pmu.c:301:
+	if (pfm_pmu_conf && (pmu_is_module(pfm_pmu_conf) == 0 || module_refcount(pfm_pmu_conf->owner))) {
[...]
+	} else {
[...]

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cfg"
#3362: FILE: perfmon/perfmon_pmu.c:334:
+	if (cfg == NULL)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3367: FILE: perfmon/perfmon_pmu.c:339:
+	BUG_ON(module_refcount(pfm_pmu_conf->owner));

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mod_name"
#3384: FILE: perfmon/perfmon_pmu.c:356:
+	if (mod_name == NULL)

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#3385: FILE: perfmon/perfmon_pmu.c:357:
+		return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3395: FILE: perfmon/perfmon_pmu.c:367:
+ * ^I0     : do not try to autoload the PMu description module$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3396: FILE: perfmon/perfmon_pmu.c:368:
+ * ^Inot 0 : try to autoload the PMu description module$

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#3405: FILE: perfmon/perfmon_pmu.c:377:
+		ret = -ENOSYS;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#3408: FILE: perfmon/perfmon_pmu.c:380:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pfm_pmu_conf"
#3409: FILE: perfmon/perfmon_pmu.c:381:
+	if (autoload && pfm_pmu_conf == NULL) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#3410: FILE: perfmon/perfmon_pmu.c:382:
+	if (autoload && pfm_pmu_conf == NULL) {
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#3426: FILE: perfmon/perfmon_pmu.c:398:
+^I} $

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#3428: FILE: perfmon/perfmon_pmu.c:400:
+	ret = pfm_pmu_conf == NULL ? -ENOSYS : 0;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pfm_pmu_conf"
#3428: FILE: perfmon/perfmon_pmu.c:400:
+	ret = pfm_pmu_conf == NULL ? -ENOSYS : 0;

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#3431: FILE: perfmon/perfmon_pmu.c:403:
+	if (ret == 0 && pmu_is_module(pfm_pmu_conf)
+	    && !try_module_get(pfm_pmu_conf->owner))

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#3432: FILE: perfmon/perfmon_pmu.c:404:
+		ret = -ENOSYS;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pfm_pmu_conf"
#3441: FILE: perfmon/perfmon_pmu.c:413:
+	if (pfm_pmu_conf == NULL || pmu_is_module(pfm_pmu_conf) == 0)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3451: FILE: perfmon/perfmon_res.c:1:
+/*

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3472: FILE: perfmon/perfmon_res.c:22:
+ * ^Ihttp://www.hpl.hp.com/research/linux/perfmon$

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#3533: FILE: perfmon/perfmon_res.c:83:
+	if (locked > current->signal->rlim[RLIMIT_MEMLOCK].rlim_cur) {
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3584: FILE: perfmon/perfmon_res.c:134:
+
+

WARNING:SPLIT_STRING: quoted string split across lines
#3612: FILE: perfmon/perfmon_res.c:162:
+			PFM_DBG("system wide imppossible, %u conflicting"
+				"task_sessions\n",

WARNING:MISSING_SPACE: break quoted strings at a space character
#3612: FILE: perfmon/perfmon_res.c:162:
+			PFM_DBG("system wide imppossible, %u conflicting"
+				"task_sessions\n",

ERROR:CODE_INDENT: code indent should use tabs where possible
#3613: FILE: perfmon/perfmon_res.c:163:
+^I^I^I  ^Ipfm_sessions.pfs_task_sessions);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3613: FILE: perfmon/perfmon_res.c:163:
+^I^I^I  ^Ipfm_sessions.pfs_task_sessions);$

WARNING:SPLIT_STRING: quoted string split across lines
#3619: FILE: perfmon/perfmon_res.c:169:
+			PFM_DBG("syswide not possible, conflicting session "
+				"on CPU%u\n", cpu);

WARNING:SPLIT_STRING: quoted string split across lines
#3624: FILE: perfmon/perfmon_res.c:174:
+		PFM_DBG("reserving syswide session on CPU%u currently "
+			"on CPU%u\n",

WARNING:SPACING: space prohibited before semicolon
#3630: FILE: perfmon/perfmon_res.c:180:
+		pfm_sessions.pfs_sys_sessions++ ;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#3695: FILE: perfmon/perfmon_res.c:245:
+static struct _pfm_pmu_config empty_config={
                                           ^

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#3712: FILE: perfmon/perfmon_res.c:262:
+	switch(what) {
+		case 0: ret = snprintf(buf, sz, "%s\n", p->pmu_name);
[...]
+		case 1: ret = snprintf(buf, sz, "%d\n", p->counter_width);
[...]
+		case 2: ret = snprintf(buf, sz, "%u\n", pfm_sessions.pfs_task_sessions);
[...]
+		case 3: ret = snprintf(buf, sz, "%u\n", pfm_sessions.pfs_sys_sessions);
[...]
+		case 4: ret = snprintf(buf, sz, "%zu\n", pfm_sessions.pfs_cur_smpl_buf_mem);

ERROR:SPACING: space required before the open parenthesis '('
#3712: FILE: perfmon/perfmon_res.c:262:
+	switch(what) {

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#3713: FILE: perfmon/perfmon_res.c:263:
+		case 0: ret = snprintf(buf, sz, "%s\n", p->pmu_name);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#3715: FILE: perfmon/perfmon_res.c:265:
+		case 1: ret = snprintf(buf, sz, "%d\n", p->counter_width);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#3717: FILE: perfmon/perfmon_res.c:267:
+		case 2: ret = snprintf(buf, sz, "%u\n", pfm_sessions.pfs_task_sessions);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#3719: FILE: perfmon/perfmon_res.c:269:
+		case 3: ret = snprintf(buf, sz, "%u\n", pfm_sessions.pfs_sys_sessions);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#3721: FILE: perfmon/perfmon_res.c:271:
+		case 4: ret = snprintf(buf, sz, "%zu\n", pfm_sessions.pfs_cur_smpl_buf_mem);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000068820.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 40 errors, 123 warnings, 106 checks, 3685 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000068820.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
