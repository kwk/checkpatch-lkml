WARNING:REPEATED_WORD: Possible repeated word: 'they'
#38: 
holes in the old tty_mutex code but they they look hard to hit.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#154: FILE: drivers/char/tty_io.c:1543:
+			driver->other->ttys[idx] = tty_get(o_tty,
+							__FILE__, __LINE__);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#205: FILE: drivers/char/tty_io.c:1671:
+			tty_put(&o_tty->driver->ttys[idx], 0,
+						__FILE__, __LINE__);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#222: FILE: drivers/char/tty_io.c:1695:
+		tty_put(&tty->driver->ttys[idx], 0,
+					 __FILE__, __LINE__);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#261: FILE: drivers/char/tty_io.c:1897:
+	tty_put((struct tty_struct **)(&filp->private_data),
+					0, __FILE__, __LINE__);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#292: FILE: drivers/char/tty_io.c:2036:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#396: FILE: drivers/char/tty_io.c:2917:
+        printk("TTY ref count alloc: %p count %d\n",$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#396: FILE: drivers/char/tty_io.c:2917:
+        printk("TTY ref count alloc: %p count %d\n",$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#396: FILE: drivers/char/tty_io.c:2917:
+        printk("TTY ref count alloc: %p count %d\n",

ERROR:CODE_INDENT: code indent should use tabs where possible
#397: FILE: drivers/char/tty_io.c:2918:
+        ^I^Itty, atomic_read(&tty->ref_count));$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#397: FILE: drivers/char/tty_io.c:2918:
+        ^I^Itty, atomic_read(&tty->ref_count));$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#397: FILE: drivers/char/tty_io.c:2918:
+        printk("TTY ref count alloc: %p count %d\n",
+        		tty, atomic_read(&tty->ref_count));

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#397: FILE: drivers/char/tty_io.c:2918:
+        ^I^Itty, atomic_read(&tty->ref_count));$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#398: FILE: drivers/char/tty_io.c:2919:
+#endif^I^I$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#419: FILE: drivers/char/vc_screen.c:484:
 }
+void vcs_remove_sysfs(struct tty_struct *tty)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#433: FILE: drivers/char/vt.c:131:
+extern void vcs_make_sysfs(struct tty_struct *tty);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#434: FILE: drivers/char/vt.c:132:
+extern void vcs_remove_sysfs(struct tty_struct *tty);

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#457: FILE: drivers/char/vt.c:2510:
via init_dev

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tty->count == 1'
#468: FILE: drivers/char/vt.c:2517:
+	if (tty && (tty->count == 1)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#581: FILE: fs/devpts/inode.c:216:
+			tty_put((struct tty_struct **)(&inode->u.generic_ip),
+						 0, __FILE__, __LINE__);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#613: FILE: include/linux/tty.h:273:
+tty_get(struct tty_struct * tty, char *file, int line)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#615: FILE: include/linux/tty.h:275:
+        if (tty) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#615: FILE: include/linux/tty.h:275:
+        if (tty) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#616: FILE: include/linux/tty.h:276:
+                WARN_ON(!atomic_read(&tty->ref_count));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#616: FILE: include/linux/tty.h:276:
+                WARN_ON(!atomic_read(&tty->ref_count));$

ERROR:CODE_INDENT: code indent should use tabs where possible
#617: FILE: include/linux/tty.h:277:
+                atomic_inc(&tty->ref_count);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#617: FILE: include/linux/tty.h:277:
+                atomic_inc(&tty->ref_count);$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#619: FILE: include/linux/tty.h:279:
+		printk("TTY ref count get: %s:%d %s %p count %d\n", file,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#620: FILE: include/linux/tty.h:280:
+		printk("TTY ref count get: %s:%d %s %p count %d\n", file,
+			line, tty->name, tty, atomic_read(&tty->ref_count));

ERROR:CODE_INDENT: code indent should use tabs where possible
#622: FILE: include/linux/tty.h:282:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#622: FILE: include/linux/tty.h:282:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#623: FILE: include/linux/tty.h:283:
+        return tty;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#623: FILE: include/linux/tty.h:283:
+        return tty;$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#626: FILE: include/linux/tty.h:286:
+extern void free_tty_struct(struct tty_struct *tty);

ERROR:POINTER_LOCATION: "foo ** bar" should be "foo **bar"
#628: FILE: include/linux/tty.h:288:
+tty_put(struct tty_struct ** tty, int free_me, char *file, int line)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#631: FILE: include/linux/tty.h:291:
+^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#632: FILE: include/linux/tty.h:292:
+        if (*tty) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#632: FILE: include/linux/tty.h:292:
+        if (*tty) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#633: FILE: include/linux/tty.h:293:
+        ^Icount = atomic_dec_return(&(*tty)->ref_count);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#633: FILE: include/linux/tty.h:293:
+        ^Icount = atomic_dec_return(&(*tty)->ref_count);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#633: FILE: include/linux/tty.h:293:
+        ^Icount = atomic_dec_return(&(*tty)->ref_count);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#634: FILE: include/linux/tty.h:294:
+        ^Iif (count == 0) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#634: FILE: include/linux/tty.h:294:
+        ^Iif (count == 0) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#634: FILE: include/linux/tty.h:294:
+        ^Iif (count == 0) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#635: FILE: include/linux/tty.h:295:
+                ^IWARN_ON(!free_me);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#635: FILE: include/linux/tty.h:295:
+                ^IWARN_ON(!free_me);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#635: FILE: include/linux/tty.h:295:
+                ^IWARN_ON(!free_me);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#636: FILE: include/linux/tty.h:296:
+^I                free_tty_struct(*tty);$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#638: FILE: include/linux/tty.h:298:
+			printk("TTY ref count put freed: %s:%d %s %p\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#639: FILE: include/linux/tty.h:299:
+			printk("TTY ref count put freed: %s:%d %s %p\n",
+				file, line, (*tty)->name, *tty);

ERROR:CODE_INDENT: code indent should use tabs where possible
#640: FILE: include/linux/tty.h:300:
+^I        } else {$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#641: FILE: include/linux/tty.h:301:
+			printk("TTY ref count put: %s:%d %s %p count %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#642: FILE: include/linux/tty.h:302:
+			printk("TTY ref count put: %s:%d %s %p count %d\n",
+				file, line, (*tty)->name, *tty, count);

ERROR:CODE_INDENT: code indent should use tabs where possible
#644: FILE: include/linux/tty.h:304:
+        ^I}$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#644: FILE: include/linux/tty.h:304:
+        ^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#644: FILE: include/linux/tty.h:304:
+        ^I}$

ERROR:CODE_INDENT: code indent should use tabs where possible
#645: FILE: include/linux/tty.h:305:
+        ^I*tty = NULL;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#645: FILE: include/linux/tty.h:305:
+        ^I*tty = NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#645: FILE: include/linux/tty.h:305:
+        ^I*tty = NULL;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#646: FILE: include/linux/tty.h:306:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#646: FILE: include/linux/tty.h:306:
+        }$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#718: FILE: kernel/fork.c:1234:
+			p->signal->tty = tty_get(current->signal->tty,
+						__FILE__, __LINE__);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#758: FILE: security/selinux/hooks.c:1642:
+				tty_put(&current->signal->tty, 0,
+						__FILE__, __LINE__);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000059630.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 22 errors, 27 warnings, 14 checks, 606 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000059630.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
