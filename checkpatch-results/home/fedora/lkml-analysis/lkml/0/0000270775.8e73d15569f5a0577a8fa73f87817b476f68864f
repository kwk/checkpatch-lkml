WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#147: FILE: drivers/block/pktcdvd.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#198: FILE: drivers/block/pktcdvd.c:52:
+#include <asm/uaccess.h>

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pd' - possible side-effects?
#202: FILE: drivers/block/pktcdvd.c:56:
+#define ZONE(sector, pd) (((sector) + (pd)->offset) & ~((pd)->settings.size - 1))

WARNING:LINE_SPACING: Missing a blank line after declarations
#227: FILE: drivers/block/pktcdvd.c:81:
+	struct pktcdvd_device *pd = pkt_find_dev(q);
+	BUG_ON(!pd);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#227: FILE: drivers/block/pktcdvd.c:81:
+	BUG_ON(!pd);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:LINE_SPACING: Missing a blank line after declarations
#241: FILE: drivers/block/pktcdvd.c:95:
+	struct pktcdvd_device *pd = pkt_find_dev(q);
+	BUG_ON(!pd);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#241: FILE: drivers/block/pktcdvd.c:95:
+	BUG_ON(!pd);

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#253: FILE: drivers/block/pktcdvd.c:107:
+static int pkt_lowlevel_merge_requests_fn(request_queue_t *q, struct request *rq, struct request *next)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LINE_SPACING: Missing a blank line after declarations
#256: FILE: drivers/block/pktcdvd.c:110:
+	struct pktcdvd_device *pd = pkt_find_dev(q);
+	BUG_ON(!pd);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#256: FILE: drivers/block/pktcdvd.c:110:
+	BUG_ON(!pd);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*bio)...) over kmalloc(sizeof(struct bio)...)
#291: FILE: drivers/block/pktcdvd.c:145:
+	bio = kmalloc(sizeof(struct bio), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#296: FILE: drivers/block/pktcdvd.c:150:
+	bvl = kmalloc(nr_iovecs * sizeof(struct bio_vec), GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*pkt)...) over kmalloc(sizeof(struct packet_data)...)
#321: FILE: drivers/block/pktcdvd.c:175:
+	pkt = kmalloc(sizeof(struct packet_data), GFP_KERNEL);

WARNING:LINE_SPACING: Missing a blank line after declarations
#342: FILE: drivers/block/pktcdvd.c:196:
+		struct bio *bio = pkt_bio_alloc(1);
+		if (!bio)

WARNING:LINE_SPACING: Missing a blank line after declarations
#352: FILE: drivers/block/pktcdvd.c:206:
+		struct bio *bio = pkt->r_bios[i];
+		if (bio)

WARNING:LINE_SPACING: Missing a blank line after declarations
#376: FILE: drivers/block/pktcdvd.c:230:
+		struct bio *bio = pkt->r_bios[i];
+		if (bio)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#389: FILE: drivers/block/pktcdvd.c:243:
+	BUG_ON(!list_empty(&pd->cdrw.pkt_active_list));

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#420: FILE: drivers/block/pktcdvd.c:274:
+static inline void pkt_add_list_last(struct bio *bio, struct bio **list_head, struct bio **list_tail)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#424: FILE: drivers/block/pktcdvd.c:278:
+		BUG_ON((*list_head) == NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#428: FILE: drivers/block/pktcdvd.c:282:
+		BUG_ON((*list_head) != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!list_head"
#442: FILE: drivers/block/pktcdvd.c:296:
+	if (*list_head == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!list_head"
#447: FILE: drivers/block/pktcdvd.c:301:
+	if (*list_head == NULL)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#467: FILE: drivers/block/pktcdvd.c:321:
+		printk("pkt_generic_packet: no bdev\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'pkt_generic_packet', this function's name, in a string
#467: FILE: drivers/block/pktcdvd.c:321:
+		printk("pkt_generic_packet: no bdev\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#479: FILE: drivers/block/pktcdvd.c:333:
+	rq->timeout = 60*HZ;
 	                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#518: FILE: drivers/block/pktcdvd.c:372:
+	printk("pktcdvd:");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#520: FILE: drivers/block/pktcdvd.c:374:
+		printk(" %02x", cgc->cmd[i]);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#521: FILE: drivers/block/pktcdvd.c:375:
+	printk(" - ");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sense"
#523: FILE: drivers/block/pktcdvd.c:377:
+	if (sense == NULL) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#524: FILE: drivers/block/pktcdvd.c:378:
+		printk("no sense\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#528: FILE: drivers/block/pktcdvd.c:382:
+	printk("sense %02x.%02x.%02x", sense->sense_key, sense->asc, sense->ascq);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#531: FILE: drivers/block/pktcdvd.c:385:
+		printk(" (INVALID)\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#535: FILE: drivers/block/pktcdvd.c:389:
+	printk(" (%s)\n", info[sense->sense_key]);

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#553: FILE: drivers/block/pktcdvd.c:407:
+#if 0

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#562: FILE: drivers/block/pktcdvd.c:416:
+static int pkt_set_speed(struct pktcdvd_device *pd, unsigned write_speed, unsigned read_speed)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#562: FILE: drivers/block/pktcdvd.c:416:
+static int pkt_set_speed(struct pktcdvd_device *pd, unsigned write_speed, unsigned read_speed)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#569: FILE: drivers/block/pktcdvd.c:423:
+	write_speed = min_t(unsigned, write_speed, 0xffff);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#571: FILE: drivers/block/pktcdvd.c:425:
+	read_speed = min_t(unsigned, read_speed, 0xffff);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#581: FILE: drivers/block/pktcdvd.c:435:
+	if ((ret = pkt_generic_packet(pd, &cgc)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "pd->iosched.read_queue"
#641: FILE: drivers/block/pktcdvd.c:495:
+		reads_queued = (pd->iosched.read_queue != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "pd->iosched.write_queue"
#642: FILE: drivers/block/pktcdvd.c:496:
+		writes_queued = (pd->iosched.write_queue != NULL);

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#722: FILE: drivers/block/pktcdvd.c:576:
+		return 0;
+	} else {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#723: FILE: drivers/block/pktcdvd.c:577:
+		printk("pktcdvd: cdrom max_phys_segments too small\n");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#743: FILE: drivers/block/pktcdvd.c:597:
+		BUG_ON(len < 0);

WARNING:LINE_SPACING: Missing a blank line after declarations
#772: FILE: drivers/block/pktcdvd.c:626:
+			void *vto = page_address(pkt->pages[p]) + offs;
+			memcpy(vto, vfrom, CD_FRAMESIZE);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#777: FILE: drivers/block/pktcdvd.c:631:
+			BUG_ON(offsets[f] != offs);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#781: FILE: drivers/block/pktcdvd.c:635:
+			BUG_ON(offs > PAGE_SIZE);

WARNING:LINE_SPACING: Missing a blank line after declarations
#792: FILE: drivers/block/pktcdvd.c:646:
+	struct pktcdvd_device *pd = pkt->pd;
+	BUG_ON(!pd);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#792: FILE: drivers/block/pktcdvd.c:646:
+	BUG_ON(!pd);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'pkt_end_io_read', this function's name, in a string
#797: FILE: drivers/block/pktcdvd.c:651:
+	VPRINTK("pkt_end_io_read: bio=%p sec0=%llx sec=%llx err=%d\n", bio,

WARNING:LINE_SPACING: Missing a blank line after declarations
#814: FILE: drivers/block/pktcdvd.c:668:
+	struct pktcdvd_device *pd = pkt->pd;
+	BUG_ON(!pd);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#814: FILE: drivers/block/pktcdvd.c:668:
+	BUG_ON(!pd);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'pkt_end_io_packet_write', this function's name, in a string
#819: FILE: drivers/block/pktcdvd.c:673:
+	VPRINTK("pkt_end_io_packet_write: id=%d, err=%d\n", pkt->id, err);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#839: FILE: drivers/block/pktcdvd.c:693:
+	BUG_ON(!pkt->orig_bios);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'pkt_gather_data', this function's name, in a string
#845: FILE: drivers/block/pktcdvd.c:699:
+		VPRINTK("pkt_gather_data: zone %llx cached\n",

WARNING:LINE_SPACING: Missing a blank line after declarations
#858: FILE: drivers/block/pktcdvd.c:712:
+		int num_frames = bio->bi_size / CD_FRAMESIZE;
+		BUG_ON(first_frame < 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#858: FILE: drivers/block/pktcdvd.c:712:
+		BUG_ON(first_frame < 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#859: FILE: drivers/block/pktcdvd.c:713:
+		BUG_ON(first_frame + num_frames > pkt->frames);

WARNING:LINE_SPACING: Missing a blank line after declarations
#870: FILE: drivers/block/pktcdvd.c:724:
+		int p, offset;
+		if (written[f])

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'pkt_gather_data', this function's name, in a string
#882: FILE: drivers/block/pktcdvd.c:736:
+		VPRINTK("pkt_gather_data: Adding frame %d, page:%p offs:%d\n",

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#885: FILE: drivers/block/pktcdvd.c:739:
+			BUG();

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'pkt_gather_data', this function's name, in a string
#894: FILE: drivers/block/pktcdvd.c:748:
+	VPRINTK("pkt_gather_data: need %d frames for zone %llx\n",

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#922: FILE: drivers/block/pktcdvd.c:776:
+	if (pkt->cache_valid) {
[...]
+	} else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#942: FILE: drivers/block/pktcdvd.c:796:
+#if 0

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#974: FILE: drivers/block/pktcdvd.c:828:
+	BUG_ON(pkt->bio->bi_rw != (1 << BIO_RW));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#975: FILE: drivers/block/pktcdvd.c:829:
+	BUG_ON(pkt->bio->bi_vcnt != pkt->frames);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#976: FILE: drivers/block/pktcdvd.c:830:
+	BUG_ON(pkt->bio->bi_size != pkt->frames * CD_FRAMESIZE);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#977: FILE: drivers/block/pktcdvd.c:831:
+	BUG_ON(pkt->bio->bi_end_io != pkt_end_io_packet_write);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#978: FILE: drivers/block/pktcdvd.c:832:
+	BUG_ON(pkt->bio->bi_private != pkt);

WARNING:STATIC_CONST_CHAR_ARRAY: static const char * array should probably be static const char * const
#992: FILE: drivers/block/pktcdvd.c:846:
+	static const char *state_name[] = {

WARNING:LINE_SPACING: Missing a blank line after declarations
#996: FILE: drivers/block/pktcdvd.c:850:
+	enum packet_data_state old_state = pkt->state;
+	VPRINTK("pkt %2d : s=%6llx %s -> %s\n", pkt->id, (unsigned long long)pkt->sector,

WARNING:SPACING: space prohibited before semicolon
#1032: FILE: drivers/block/pktcdvd.c:886:
+try_next_bio: ;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1041: FILE: drivers/block/pktcdvd.c:895:
+	BUG_ON(!pkt);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1045: FILE: drivers/block/pktcdvd.c:899:
+	BUG_ON(pkt->frames > PACKET_MAX_SIZE);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'pkt_handle_queue', this function's name, in a string
#1054: FILE: drivers/block/pktcdvd.c:908:
+	VPRINTK("pkt_handle_queue: looking for zone %llx\n", (unsigned long long)zone);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'pkt_handle_queue', this function's name, in a string
#1057: FILE: drivers/block/pktcdvd.c:911:
+		VPRINTK("pkt_handle_queue: found zone=%llx\n",

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#1060: FILE: drivers/block/pktcdvd.c:914:
+			if (prev) {
[...]
+			} else {
[...]

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'pkt_handle_queue', this function's name, in a string
#1073: FILE: drivers/block/pktcdvd.c:927:
+				VPRINTK("pkt_handle_queue: pkt is full\n");

WARNING:LINE_SPACING: Missing a blank line after declarations
#1123: FILE: drivers/block/pktcdvd.c:977:
+		int num_frames = bio->bi_size / CD_FRAMESIZE;
+		BUG_ON(first_frame < 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1123: FILE: drivers/block/pktcdvd.c:977:
+		BUG_ON(first_frame < 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1124: FILE: drivers/block/pktcdvd.c:978:
+		BUG_ON(first_frame + num_frames > pkt->frames);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1131: FILE: drivers/block/pktcdvd.c:985:
+				BUG_ON(segment >= bio->bi_vcnt);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'pkt_start_write', this function's name, in a string
#1149: FILE: drivers/block/pktcdvd.c:1003:
+	VPRINTK("pkt_start_write: Writing %d frames for zone %llx\n",

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1151: FILE: drivers/block/pktcdvd.c:1005:
+	BUG_ON(frames_write != pkt->write_size);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pkt->write_size < pkt->frames'
#1153: FILE: drivers/block/pktcdvd.c:1007:
+	if (test_bit(PACKET_MERGE_SEGS, &pd->flags) || (pkt->write_size < pkt->frames)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pages[f + 1] == pages[f]'
#1168: FILE: drivers/block/pktcdvd.c:1022:
+		if ((f + 1 < pkt->frames) && (pages[f + 1] == pages[f]) &&
+		    (offsets[f + 1] = offsets[f] + CD_FRAMESIZE)) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1168: FILE: drivers/block/pktcdvd.c:1022:
+		if ((f + 1 < pkt->frames) && (pages[f + 1] == pages[f]) &&

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1171: FILE: drivers/block/pktcdvd.c:1025:
+				BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1175: FILE: drivers/block/pktcdvd.c:1029:
+				BUG();

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1185: FILE: drivers/block/pktcdvd.c:1039:
+static void pkt_finish_packet(struct packet_data *pkt, int uptodate)
                                                            ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1189: FILE: drivers/block/pktcdvd.c:1043:
+	if (!uptodate)
 	     ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1197: FILE: drivers/block/pktcdvd.c:1051:
+		bio_endio(bio, bio->bi_size, uptodate ? 0 : -EIO);
 		                             ^^^^^^^^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1200: FILE: drivers/block/pktcdvd.c:1054:
+	pkt->orig_bios = pkt->orig_bios_tail = NULL;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1205: FILE: drivers/block/pktcdvd.c:1059:
+	int uptodate;
 	    ^^^^^^^^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pkt->write_size < pkt->frames'
#1212: FILE: drivers/block/pktcdvd.c:1066:
+			if ((pkt->write_size < pkt->frames) && (pkt->sleep_time > 0))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pkt->sleep_time > 0'
#1212: FILE: drivers/block/pktcdvd.c:1066:
+			if ((pkt->write_size < pkt->frames) && (pkt->sleep_time > 0))

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#1224: FILE: drivers/block/pktcdvd.c:1078:
+			if (atomic_read(&pkt->io_errors) > 0) {
[...]
+			} else {
[...]

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#1235: FILE: drivers/block/pktcdvd.c:1089:
+			if (test_bit(BIO_UPTODATE, &pkt->w_bio->bi_flags)) {
[...]
+			} else {
[...]

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1252: FILE: drivers/block/pktcdvd.c:1106:
+			uptodate = test_bit(BIO_UPTODATE, &pkt->w_bio->bi_flags);
 			^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1253: FILE: drivers/block/pktcdvd.c:1107:
+			pkt_finish_packet(pkt, uptodate);
 			                       ^^^^^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1257: FILE: drivers/block/pktcdvd.c:1111:
+			BUG();

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'pkt_handle_packets', this function's name, in a string
#1267: FILE: drivers/block/pktcdvd.c:1121:
+	VPRINTK("pkt_handle_packets\n");

WARNING:LINE_SPACING: Missing a blank line after declarations
#1358: FILE: drivers/block/pktcdvd.c:1212:
+				int states[PACKET_NUM_STATES];
+				pkt_count_states(pd, states);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'kcdrwd', this function's name, in a string
#1359: FILE: drivers/block/pktcdvd.c:1213:
+				VPRINTK("kcdrwd: i:%d ow:%d rw:%d ww:%d rec:%d fin:%d\n",

WARNING:LINE_SPACING: Missing a blank line after declarations
#1372: FILE: drivers/block/pktcdvd.c:1226:
+				request_queue_t *q;
+				q = bdev_get_queue(pd->bdev);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'kcdrwd', this function's name, in a string
#1376: FILE: drivers/block/pktcdvd.c:1230:
+			VPRINTK("kcdrwd: sleeping\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'kcdrwd', this function's name, in a string
#1378: FILE: drivers/block/pktcdvd.c:1232:
+			VPRINTK("kcdrwd: wake up\n");

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1394: FILE: drivers/block/pktcdvd.c:1248:
+			if (signal_pending(current)) {
+				flush_signals(current);
+			}

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1431: FILE: drivers/block/pktcdvd.c:1285:
+	printk("pktcdvd: %s packets, ", pd->settings.fp ? "Fixed" : "Variable");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1432: FILE: drivers/block/pktcdvd.c:1286:
+	printk("%u blocks, ", pd->settings.size >> 2);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1433: FILE: drivers/block/pktcdvd.c:1287:
+	printk("Mode-%c disc\n", pd->settings.block_mode == 8 ? '1' : '2');

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1469: FILE: drivers/block/pktcdvd.c:1323:
+	cgc.cmd[8] = cgc.buflen = 2;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1472: FILE: drivers/block/pktcdvd.c:1326:
+	if ((ret = pkt_generic_packet(pd, &cgc)))

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#1488: FILE: drivers/block/pktcdvd.c:1342:
+static int pkt_get_track_info(struct pktcdvd_device *pd, __u16 track, __u8 type, track_information *ti)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1501: FILE: drivers/block/pktcdvd.c:1355:
+	if ((ret = pkt_generic_packet(pd, &cgc)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1521: FILE: drivers/block/pktcdvd.c:1375:
+	if ((ret = pkt_get_disc_info(pd, &di)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1525: FILE: drivers/block/pktcdvd.c:1379:
+	if ((ret = pkt_get_track_info(pd, last_track, 1, &ti)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1531: FILE: drivers/block/pktcdvd.c:1385:
+		if ((ret = pkt_get_track_info(pd, last_track, 1, &ti)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1562: FILE: drivers/block/pktcdvd.c:1416:
+	if ((ret = pkt_mode_sense(pd, &cgc, GPMODE_WRITE_PARMS_PAGE, 0))) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1577: FILE: drivers/block/pktcdvd.c:1431:
+	if ((ret = pkt_mode_sense(pd, &cgc, GPMODE_WRITE_PARMS_PAGE, 0))) {

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#1605: FILE: drivers/block/pktcdvd.c:1459:
+#if 0

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1613: FILE: drivers/block/pktcdvd.c:1467:
+		printk("pktcdvd: write mode wrong %d\n", wp->data_block_type);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1618: FILE: drivers/block/pktcdvd.c:1472:
+	cgc.buflen = cgc.cmd[8] = size;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1619: FILE: drivers/block/pktcdvd.c:1473:
+	if ((ret = pkt_mode_select(pd, &cgc))) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1655: FILE: drivers/block/pktcdvd.c:1509:
+	printk("pktcdvd: bad state %d-%d-%d\n", ti->rt, ti->blank, ti->packet);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1669: FILE: drivers/block/pktcdvd.c:1523:
+		printk("pktcdvd: Unknown disc. No track?\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1674: FILE: drivers/block/pktcdvd.c:1528:
+		printk("pktcdvd: Wrong disc type (%x)\n", di->disc_type);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1679: FILE: drivers/block/pktcdvd.c:1533:
+		printk("pktcdvd: Disc not erasable\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1684: FILE: drivers/block/pktcdvd.c:1538:
+		printk("pktcdvd: Can't write to last track (reserved)\n");

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1700: FILE: drivers/block/pktcdvd.c:1554:
+	if ((ret = pkt_get_disc_info(pd, &di))) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1701: FILE: drivers/block/pktcdvd.c:1555:
+		printk("failed get_disc\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1708: FILE: drivers/block/pktcdvd.c:1562:
+	printk("pktcdvd: inserted media is CD-R%s\n", di.erasable ? "W" : "");

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1712: FILE: drivers/block/pktcdvd.c:1566:
+	if ((ret = pkt_get_track_info(pd, track, 1, &ti))) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1713: FILE: drivers/block/pktcdvd.c:1567:
+		printk("pktcdvd: failed get_track\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1718: FILE: drivers/block/pktcdvd.c:1572:
+		printk("pktcdvd: can't write to this track\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1728: FILE: drivers/block/pktcdvd.c:1582:
+		printk("pktcdvd: detected zero packet size!\n");

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#1762: FILE: drivers/block/pktcdvd.c:1616:
+	switch (ti.data_mode) {
+		case PACKET_MODE1:
[...]
+		case PACKET_MODE2:
[...]
+		default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1770: FILE: drivers/block/pktcdvd.c:1624:
+			printk("pktcdvd: unknown data mode\n");

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1796: FILE: drivers/block/pktcdvd.c:1650:
+	if ((ret = pkt_mode_sense(pd, &cgc, GPMODE_WCACHING_PAGE, 0)))

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1801: FILE: drivers/block/pktcdvd.c:1655:
+	cgc.buflen = cgc.cmd[8] = 2 + ((buf[0] << 8) | (buf[1] & 0xff));

CHECK:BRACES: braces {} should be used on all arms of this statement
#1803: FILE: drivers/block/pktcdvd.c:1657:
+	if (ret) {
[...]
+	} else if (!ret && set)
[...]

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1804: FILE: drivers/block/pktcdvd.c:1658:
+		printk("pktcdvd: write caching control failed\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1807: FILE: drivers/block/pktcdvd.c:1661:
+		printk("pktcdvd: enabled write caching on %s\n", pd->name);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#1824: FILE: drivers/block/pktcdvd.c:1678:
+static int pkt_get_max_speed(struct pktcdvd_device *pd, unsigned *write_speed)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1828: FILE: drivers/block/pktcdvd.c:1682:
+	unsigned char buf[256+18];
 	                     ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1857: FILE: drivers/block/pktcdvd.c:1711:
+		int num_spdb = (cap_buf[30] << 8) + cap_buf[31];
+		if (num_spdb > 0)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1871: FILE: drivers/block/pktcdvd.c:1725:
+};
+/* high speed CD-RW (-10x) */

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1876: FILE: drivers/block/pktcdvd.c:1730:
+};
+/* ultra high speed CD-RW */

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1879: FILE: drivers/block/pktcdvd.c:1733:
+	   0, 2, 4, 8, 0, 0,16, 0,24,32,40,48, 0, 0, 0, 0
 	                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1879: FILE: drivers/block/pktcdvd.c:1733:
+	   0, 2, 4, 8, 0, 0,16, 0,24,32,40,48, 0, 0, 0, 0
 	                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1879: FILE: drivers/block/pktcdvd.c:1733:
+	   0, 2, 4, 8, 0, 0,16, 0,24,32,40,48, 0, 0, 0, 0
 	                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1879: FILE: drivers/block/pktcdvd.c:1733:
+	   0, 2, 4, 8, 0, 0,16, 0,24,32,40,48, 0, 0, 0, 0
 	                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1879: FILE: drivers/block/pktcdvd.c:1733:
+	   0, 2, 4, 8, 0, 0,16, 0,24,32,40,48, 0, 0, 0, 0
 	                                  ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#1885: FILE: drivers/block/pktcdvd.c:1739:
+static int pkt_media_speed(struct pktcdvd_device *pd, unsigned *speed)

CHECK:SPACING: No space is necessary after a cast
#1904: FILE: drivers/block/pktcdvd.c:1758:
+	size = ((unsigned int) buf[0]<<8) + buf[1] + 2;

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1904: FILE: drivers/block/pktcdvd.c:1758:
+	size = ((unsigned int) buf[0]<<8) + buf[1] + 2;
 	                             ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1921: FILE: drivers/block/pktcdvd.c:1775:
+		printk("pktcdvd: Disc type is not CD-RW\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1925: FILE: drivers/block/pktcdvd.c:1779:
+		printk("pktcdvd: A1 values on media are not valid, maybe not CDRW?\n");

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#1934: FILE: drivers/block/pktcdvd.c:1788:
+	switch (st) {
+		case 0: /* standard speed */
[...]
+		case 1: /* high speed */
[...]
+		case 2: /* ultra high speed */
[...]
+		default:

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1945: FILE: drivers/block/pktcdvd.c:1799:
+			printk("pktcdvd: Unknown disc sub-type %d\n",st);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1945: FILE: drivers/block/pktcdvd.c:1799:
+			printk("pktcdvd: Unknown disc sub-type %d\n",st);
 			                                            ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1949: FILE: drivers/block/pktcdvd.c:1803:
+		printk("pktcdvd: Max. media speed: %d\n",*speed);

ERROR:SPACING: space required after that ',' (ctx:VxO)
#1949: FILE: drivers/block/pktcdvd.c:1803:
+		printk("pktcdvd: Max. media speed: %d\n",*speed);
 		                                        ^

ERROR:SPACING: space required before that '*' (ctx:OxV)
#1949: FILE: drivers/block/pktcdvd.c:1803:
+		printk("pktcdvd: Max. media speed: %d\n",*speed);
 		                                         ^

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#1951: FILE: drivers/block/pktcdvd.c:1805:
+		return 0;
+	} else {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1952: FILE: drivers/block/pktcdvd.c:1806:
+		printk("pktcdvd: Unknown speed %d for sub-type %d\n",sp,st);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1952: FILE: drivers/block/pktcdvd.c:1806:
+		printk("pktcdvd: Unknown speed %d for sub-type %d\n",sp,st);
 		                                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1952: FILE: drivers/block/pktcdvd.c:1806:
+		printk("pktcdvd: Unknown speed %d for sub-type %d\n",sp,st);
 		                                                       ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1967: FILE: drivers/block/pktcdvd.c:1821:
+	cgc.timeout = 60*HZ;
 	                ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1970: FILE: drivers/block/pktcdvd.c:1824:
+	if ((ret = pkt_generic_packet(pd, &cgc)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1980: FILE: drivers/block/pktcdvd.c:1834:
+	if ((ret = pkt_probe_settings(pd))) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1985: FILE: drivers/block/pktcdvd.c:1839:
+	if ((ret = pkt_set_write_settings(pd))) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1992: FILE: drivers/block/pktcdvd.c:1846:
+	if ((ret = pkt_get_max_speed(pd, &write_speed)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1994: FILE: drivers/block/pktcdvd.c:1848:
+	if ((ret = pkt_media_speed(pd, &media_write_speed)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1999: FILE: drivers/block/pktcdvd.c:1853:
+	if ((ret = pkt_set_speed(pd, write_speed, read_speed))) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2007: FILE: drivers/block/pktcdvd.c:1861:
+	if ((ret = pkt_perform_opc(pd))) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2007: FILE: drivers/block/pktcdvd.c:1861:
+	if ((ret = pkt_perform_opc(pd))) {
+		DPRINTK("pktcdvd: %s Optimum Power Calibration failed\n", pd->name);
+	}

WARNING:LINE_SPACING: Missing a blank line after declarations
#2017: FILE: drivers/block/pktcdvd.c:1871:
+	int minor;
+	for (minor = 0; minor < MAX_WRITERS; minor++)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2020: FILE: drivers/block/pktcdvd.c:1874:
+	BUG_ON(minor == MAX_WRITERS);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2040: FILE: drivers/block/pktcdvd.c:1894:
+		printk("pktcdvd: can't find cdrom block device\n");

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2044: FILE: drivers/block/pktcdvd.c:1898:
+	if ((ret = blkdev_get(pd->bdev, FMODE_READ, 0))) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2049: FILE: drivers/block/pktcdvd.c:1903:
+	if ((ret = pkt_get_last_written(pd, &lba))) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2050: FILE: drivers/block/pktcdvd.c:1904:
+		printk("pktcdvd: pkt_get_last_written failed\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2067: FILE: drivers/block/pktcdvd.c:1921:
+			printk("pktcdvd: %s request queue busy\n", bdevname(pd->bdev, b));

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2081: FILE: drivers/block/pktcdvd.c:1935:
+		if ((ret = pkt_open_write(pd)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2089: FILE: drivers/block/pktcdvd.c:1943:
+	if ((ret = pkt_set_segment_merging(pd, q)))

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2093: FILE: drivers/block/pktcdvd.c:1947:
+		printk("pktcdvd: %lukB available on disc\n", lba << 1);

WARNING:LINE_SPACING: Missing a blank line after declarations
#2129: FILE: drivers/block/pktcdvd.c:1983:
+		request_queue_t *q = bdev_get_queue(pd->bdev);
+		pkt_set_speed(pd, 0xffff, 0xffff);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2149: FILE: drivers/block/pktcdvd.c:2003:
+		printk("pktcdvd: max %d writers supported\n", MAX_WRITERS);

WARNING:LINE_SPACING: Missing a blank line after declarations
#2217: FILE: drivers/block/pktcdvd.c:2071:
+		int flush = test_bit(PACKET_WRITABLE, &pd->flags);
+		pkt_release_dev(pd, flush);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2233: FILE: drivers/block/pktcdvd.c:2087:
+		printk("pktcdvd: %s incorrect request queue\n", bdevname(bio->bi_bdev, b));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2238: FILE: drivers/block/pktcdvd.c:2092:
+		printk("pktcdvd: request received for non-active pd\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2253: FILE: drivers/block/pktcdvd.c:2107:
+		printk("pktcdvd: WRITE for ro device %s (%llu)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2254: FILE: drivers/block/pktcdvd.c:2108:
+		printk("pktcdvd: WRITE for ro device %s (%llu)\n",
+			pd->name, (unsigned long long)bio->bi_sector);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2259: FILE: drivers/block/pktcdvd.c:2113:
+		printk("pktcdvd: wrong bio size\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'pkt_make_request', this function's name, in a string
#2266: FILE: drivers/block/pktcdvd.c:2120:
+	VPRINTK("pkt_make_request: start = %6llx stop = %6llx\n",

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2278: FILE: drivers/block/pktcdvd.c:2132:
+			BUG_ON(last_zone != zone + pd->settings.size);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2281: FILE: drivers/block/pktcdvd.c:2135:
+			BUG_ON(!bp);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pkt->state == PACKET_WAITING_STATE'
#2298: FILE: drivers/block/pktcdvd.c:2152:
+			if ((pkt->state == PACKET_WAITING_STATE) ||
+			    (pkt->state == PACKET_READ_WAIT_STATE)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pkt->state == PACKET_READ_WAIT_STATE'
#2298: FILE: drivers/block/pktcdvd.c:2152:
+			if ((pkt->state == PACKET_WAITING_STATE) ||
+			    (pkt->state == PACKET_READ_WAIT_STATE)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pkt->write_size >= pkt->frames'
#2303: FILE: drivers/block/pktcdvd.c:2157:
+				if ((pkt->write_size >= pkt->frames) &&
+				    (pkt->state == PACKET_WAITING_STATE)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pkt->state == PACKET_WAITING_STATE'
#2303: FILE: drivers/block/pktcdvd.c:2157:
+				if ((pkt->write_size >= pkt->frames) &&
+				    (pkt->state == PACKET_WAITING_STATE)) {

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#2311: FILE: drivers/block/pktcdvd.c:2165:
+				return 0;
+			} else {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pd->bio_queue"
#2323: FILE: drivers/block/pktcdvd.c:2177:
+	if (pd->bio_queue == NULL) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#2340: FILE: drivers/block/pktcdvd.c:2194:
+				int d2;
+				z = ZONE(bio2->bi_sector, pd);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2377: FILE: drivers/block/pktcdvd.c:2231:
+
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2394: FILE: drivers/block/pktcdvd.c:2248:
+	BUG_ON(remaining < 0);

WARNING:CONST_STRUCT: struct block_device_operations should normally be const
#2487: FILE: drivers/block/pktcdvd.c:2341:
+extern struct block_device_operations pktcdvd_ops;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2498: FILE: drivers/block/pktcdvd.c:2352:
+			printk("pktcdvd: %s already setup\n", bdevname(bdev, b));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2513: FILE: drivers/block/pktcdvd.c:2367:
+		printk("pktcdvd: not enough memory for buffers\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2532: FILE: drivers/block/pktcdvd.c:2386:
+		printk("pktcdvd: can't start kernel thread\n");

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2559: FILE: drivers/block/pktcdvd.c:2413:
+	if ((file = fget(arg)) == NULL) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2560: FILE: drivers/block/pktcdvd.c:2414:
+		printk("pktcdvd: bad file descriptor passed\n");

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2565: FILE: drivers/block/pktcdvd.c:2419:
+	if ((inode = file->f_dentry->d_inode) == NULL) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2566: FILE: drivers/block/pktcdvd.c:2420:
+		printk("pktcdvd: huh? file descriptor contains no inode?\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2571: FILE: drivers/block/pktcdvd.c:2425:
+		printk("pktcdvd: device is not a block device (duh)\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2576: FILE: drivers/block/pktcdvd.c:2430:
+		printk("pktcdvd: Can't write to read-only dev\n");

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2579: FILE: drivers/block/pktcdvd.c:2433:
+	if ((ret = pkt_new_dev(pd, inode->i_bdev)))

WARNING:MEMORY_BARRIER: memory barrier without comment
#2596: FILE: drivers/block/pktcdvd.c:2450:
+		wmb();

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2599: FILE: drivers/block/pktcdvd.c:2453:
+			printk("pkt_remove_dev: can't kill kernel thread\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'pkt_remove_dev', this function's name, in a string
#2599: FILE: drivers/block/pktcdvd.c:2453:
+			printk("pkt_remove_dev: can't kill kernel thread\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'pkt_ioctl', this function's name, in a string
#2643: FILE: drivers/block/pktcdvd.c:2497:
+	VPRINTK("pkt_ioctl: cmd %x, dev %d:%d\n", cmd, imajor(inode), iminor(inode));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cmd != PACKET_SETUP_DEV'
#2645: FILE: drivers/block/pktcdvd.c:2499:
+	if ((cmd != PACKET_SETUP_DEV) && !pd->dev) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2658: FILE: drivers/block/pktcdvd.c:2512:
+			printk("pktcdvd: dev already setup\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2705: FILE: drivers/block/pktcdvd.c:2559:
+		printk("pktcdvd: Unknown ioctl for %s (%x)\n", pd->name, cmd);

WARNING:CONST_STRUCT: struct block_device_operations should normally be const
#2712: FILE: drivers/block/pktcdvd.c:2566:
+static struct block_device_operations pktcdvd_ops = {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2726: FILE: drivers/block/pktcdvd.c:2580:
+		printk("unable to register pktcdvd device\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pkt_devs"
#2731: FILE: drivers/block/pktcdvd.c:2585:
+	if (pkt_devs == NULL)

WARNING:LINE_SPACING: Missing a blank line after declarations
#2744: FILE: drivers/block/pktcdvd.c:2598:
+		struct gendisk *disk = disks[i];
+		disk->major = PACKET_MAJOR;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2771: FILE: drivers/block/pktcdvd.c:2625:
+	printk("pktcdvd: out of memory\n");

WARNING:LINE_SPACING: Missing a blank line after declarations
#2780: FILE: drivers/block/pktcdvd.c:2634:
+	int i;
+	for (i = 0; i < MAX_WRITERS; i++) {

WARNING:LONG_LINE: line length of 135 exceeds 100 columns
#2820: FILE: drivers/ide/ide-cd.c:2006:
+		if ((rq_data_dir(rq) == READ) && IDE_LARGE_SEEK(info->last_block, block, IDECD_SEEK_THRESHOLD) && drive->dsc_overlap) {

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2880: FILE: include/linux/pktcdvd.h:1:
+/*

WARNING:TYPO_SPELLING: 'sucessfully' may be misspelled - perhaps 'successfully'?
#2908: FILE: include/linux/pktcdvd.h:29:
+ * able to sucessfully recover with this option (drive will return good
            ^^^^^^^^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#2923: FILE: include/linux/pktcdvd.h:44:
+#define DPRINTK(fmt, args...) printk(KERN_NOTICE fmt, ##args)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#2929: FILE: include/linux/pktcdvd.h:50:
+#define VPRINTK(fmt, args...) printk(KERN_NOTICE fmt, ##args)

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#2983: FILE: include/linux/pktcdvd.h:104:
+struct packet_stats
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#3005: FILE: include/linux/pktcdvd.h:126:
+struct packet_settings
+{

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3009: FILE: include/linux/pktcdvd.h:130:
+						 * as per Mt Fuji */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#3016: FILE: include/linux/pktcdvd.h:137:
+struct packet_cdrw
+{

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#3035: FILE: include/linux/pktcdvd.h:156:
+struct packet_iosched
+{

WARNING:LONG_LINE_COMMENT: line length of 101 exceeds 100 columns
#3036: FILE: include/linux/pktcdvd.h:157:
+	atomic_t		attention;	/* Set to non-zero when queue processing is needed */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#3073: FILE: include/linux/pktcdvd.h:194:
+struct packet_data
+{

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#3111: FILE: include/linux/pktcdvd.h:232:
+struct pktcdvd_device
+{

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000270775.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 45 errors, 166 warnings, 33 checks, 3044 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000270775.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
