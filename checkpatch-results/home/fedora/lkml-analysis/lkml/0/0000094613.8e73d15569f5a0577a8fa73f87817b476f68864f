ERROR:BAD_SIGN_OFF: Unrecognized email address: 'Takashi Sato sho@tnes.nec.co.jp'
#73: 
Signed-off-by: Takashi Sato sho@tnes.nec.co.jp

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#121: FILE: fs/ext2/balloc.c:144:
+static unsigned int group_reserve_blocks(struct ext2_sb_info *sbi, int group_no,
+	struct ext2_group_desc *desc, struct buffer_head *bh, unsigned int count)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#140: FILE: fs/ext2/balloc.c:328:
+unsigned int ext2_new_block(struct inode *inode, unsigned long goal,
 			u32 *prealloc_count, u32 *prealloc_block, int *err)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#176: FILE: fs/ext2/balloc.c:506:
+	ext2_debug ("allocating block %u. ", block);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#188: FILE: fs/ext2/ext2.h:94:
+extern unsigned int ext2_new_block (struct inode *, unsigned long,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#188: FILE: fs/ext2/ext2.h:94:
+extern unsigned int ext2_new_block (struct inode *, unsigned long,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#188: FILE: fs/ext2/ext2.h:94:
+extern unsigned int ext2_new_block (struct inode *, unsigned long,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#188: FILE: fs/ext2/ext2.h:94:
+extern unsigned int ext2_new_block (struct inode *, unsigned long,

WARNING:FUNCTION_ARGUMENTS: function definition argument '__u32 *' should also have an identifier name
#188: FILE: fs/ext2/ext2.h:94:
+extern unsigned int ext2_new_block (struct inode *, unsigned long,

WARNING:FUNCTION_ARGUMENTS: function definition argument '__u32 *' should also have an identifier name
#188: FILE: fs/ext2/ext2.h:94:
+extern unsigned int ext2_new_block (struct inode *, unsigned long,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int *' should also have an identifier name
#188: FILE: fs/ext2/ext2.h:94:
+extern unsigned int ext2_new_block (struct inode *, unsigned long,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#189: FILE: fs/ext2/ext2.h:95:
+extern unsigned int ext2_new_block (struct inode *, unsigned long,
 			   __u32 *, __u32 *, int *);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#269: FILE: fs/ext2/inode.c:110:
+static unsigned int ext2_alloc_block (struct inode * inode, unsigned int goal, int *err)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#269: FILE: fs/ext2/inode.c:110:
+static unsigned int ext2_alloc_block (struct inode * inode, unsigned int goal, int *err)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#280: FILE: fs/ext2/inode.c:197:
+static int ext2_block_to_path(struct inode *inode, unsigned long i_block,
+				unsigned int offsets[4], int *boundary)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#412: FILE: fs/ext2/super.c:892:
+	percpu_llcounter_mod(&sbi->s_freeblocks_counter,
 				ext2_count_free_blocks(sb));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#415: FILE: fs/ext2/super.c:894:
+	percpu_llcounter_mod(&sbi->s_freeinodes_counter,
 				ext2_count_free_inodes(sb));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#418: FILE: fs/ext2/super.c:896:
+	percpu_llcounter_mod(&sbi->s_dirs_counter,
 				ext2_count_dirs(sb));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#429: FILE: fs/ext2/xattr.c:74:
+		printk(KERN_DEBUG "inode %s:%lu: ", \

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#443: FILE: fs/ext2/xattr.c:175:
 	if (HDR(bh)->h_magic != cpu_to_le32(EXT2_XATTR_MAGIC) ||
[...]
+			"inode %lu: bad block %u", inode->i_ino,

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#461: FILE: fs/ext2/xattr.c:275:
 	if (HDR(bh)->h_magic != cpu_to_le32(EXT2_XATTR_MAGIC) ||
[...]
+			"inode %lu: bad block %u", inode->i_ino,

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 32)
#470: FILE: fs/ext2/xattr.c:411:
 		if (header->h_magic != cpu_to_le32(EXT2_XATTR_MAGIC) ||
[...]
+				"inode %lu: bad block %u", inode->i_ino,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#584: FILE: fs/ext3/balloc.c:1158:
+unsigned int ext3_new_block(handle_t *handle, struct inode *inode,
 			unsigned long goal, int *errp)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#615: FILE: fs/ext3/balloc.c:1248:
+		group_block = ext3_try_to_allocate_with_rsv(sb, handle, group_no,
+					bitmap_bh, group_block, my_rsv, &fatal);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#632: FILE: fs/ext3/balloc.c:1287:
+		group_block = ext3_try_to_allocate_with_rsv(sb, handle, group_no,
 					bitmap_bh, -1, my_rsv, &fatal);

WARNING:SPLIT_STRING: quoted string split across lines
#659: FILE: fs/ext3/balloc.c:1366:
+			    "block(%u) >= blocks count(%u) - "
+			    "block_group = %u, es == %p ", ret_block,

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#669: FILE: fs/ext3/balloc.c:1377:
+	ext3_debug("allocating block %u. Goal hits %d of %d.\n",
 			ret_block, goal_hits, goal_attempts);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#768: FILE: fs/ext3/inode.c:238:
+static unsigned int ext3_alloc_block (handle_t *handle,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#769: FILE: fs/ext3/inode.c:239:
+static unsigned int ext3_alloc_block (handle_t *handle,
+			struct inode * inode, unsigned int goal, int *err)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#769: FILE: fs/ext3/inode.c:239:
+			struct inode * inode, unsigned int goal, int *err)

CHECK:CAMELCASE: Avoid CamelCase: <Indirect>
#790: FILE: fs/ext3/inode.c:366:
+static Indirect *ext3_get_branch(struct inode *inode, int depth, unsigned int *offsets,

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#800: FILE: fs/ext3/inode.c:464:
+static unsigned long ext3_find_goal(struct inode *inode, unsigned long block,
 		Indirect chain[4], Indirect *partial)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#851: FILE: fs/ext3/inode.c:855:
+				unsigned long block, int create, int * errp)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#918: FILE: fs/ext3/namei.c:1916:
+	jbd_debug(4, "orphan inode %lu will point to %d\n",
 			inode->i_ino, NEXT_ORPHAN(inode));

WARNING:SPLIT_STRING: quoted string split across lines
#938: FILE: fs/ext3/resize.c:48:
 		printk(KERN_DEBUG "EXT3-fs: adding %s group %u: %u blocks "
+		       "(%lld free, %u reserved)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#984: FILE: fs/ext3/resize.c:873:
+	percpu_llcounter_mod(&sbi->s_freeblocks_counter,
 			   input->free_blocks_count);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#987: FILE: fs/ext3/resize.c:875:
+	percpu_llcounter_mod(&sbi->s_freeinodes_counter,
 			   EXT3_INODES_PER_GROUP(sb));

WARNING:SPLIT_STRING: quoted string split across lines
#1011: FILE: fs/ext3/super.c:380:
 		printk(KERN_ERR "  "
+		       "inode %s:%lu at %p: mode %o, nlink %d, next %d\n",

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#1033: FILE: fs/ext3/super.c:1256:
+				"%s: truncating inode %lu to %Ld bytes\n",

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#1036: FILE: fs/ext3/super.c:1258:
+			jbd_debug(2, "truncating inode %lu to %Ld bytes\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1069: FILE: fs/ext3/super.c:1732:
+	percpu_llcounter_mod(&sbi->s_freeblocks_counter,
 		ext3_count_free_blocks(sb));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1072: FILE: fs/ext3/super.c:1734:
+	percpu_llcounter_mod(&sbi->s_freeinodes_counter,
 		ext3_count_free_inodes(sb));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1075: FILE: fs/ext3/super.c:1736:
+	percpu_llcounter_mod(&sbi->s_dirs_counter,
 		ext3_count_dirs(sb));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1086: FILE: fs/ext3/xattr.c:78:
+		printk(KERN_DEBUG "inode %s:%lu: ", \

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 27)
#1101: FILE: fs/ext3/xattr.c:234:
 	if (ext3_xattr_check_block(bh)) {
[...]
+			   "inode %lu: bad block %u", inode->i_ino,

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1140: FILE: fs/ext3/xattr.c:795:
+			unsigned int goal = le32_to_cpu(

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#1201: FILE: fs/jbd/journal.c:764:
+		  "journal %p: inode %s/%u, size %Ld, bits %d, blksize %ld\n",

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1240: FILE: include/linux/ext3_fs.h:734:
+extern unsigned int ext3_new_block (handle_t *, struct inode *, unsigned long, int *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1240: FILE: include/linux/ext3_fs.h:734:
+extern unsigned int ext3_new_block (handle_t *, struct inode *, unsigned long, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'handle_t *' should also have an identifier name
#1240: FILE: include/linux/ext3_fs.h:734:
+extern unsigned int ext3_new_block (handle_t *, struct inode *, unsigned long, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#1240: FILE: include/linux/ext3_fs.h:734:
+extern unsigned int ext3_new_block (handle_t *, struct inode *, unsigned long, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#1240: FILE: include/linux/ext3_fs.h:734:
+extern unsigned int ext3_new_block (handle_t *, struct inode *, unsigned long, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int *' should also have an identifier name
#1240: FILE: include/linux/ext3_fs.h:734:
+extern unsigned int ext3_new_block (handle_t *, struct inode *, unsigned long, int *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1259: FILE: include/linux/ext3_fs.h:774:
+extern int ext3_forget(handle_t *, int, struct inode *, struct buffer_head *, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'handle_t *' should also have an identifier name
#1259: FILE: include/linux/ext3_fs.h:774:
+extern int ext3_forget(handle_t *, int, struct inode *, struct buffer_head *, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1259: FILE: include/linux/ext3_fs.h:774:
+extern int ext3_forget(handle_t *, int, struct inode *, struct buffer_head *, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#1259: FILE: include/linux/ext3_fs.h:774:
+extern int ext3_forget(handle_t *, int, struct inode *, struct buffer_head *, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct buffer_head *' should also have an identifier name
#1259: FILE: include/linux/ext3_fs.h:774:
+extern int ext3_forget(handle_t *, int, struct inode *, struct buffer_head *, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#1259: FILE: include/linux/ext3_fs.h:774:
+extern int ext3_forget(handle_t *, int, struct inode *, struct buffer_head *, unsigned int);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1260: FILE: include/linux/ext3_fs.h:775:
+extern struct buffer_head * ext3_getblk (handle_t *, struct inode *, unsigned long, int, int *);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1260: FILE: include/linux/ext3_fs.h:775:
+extern struct buffer_head * ext3_getblk (handle_t *, struct inode *, unsigned long, int, int *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1260: FILE: include/linux/ext3_fs.h:775:
+extern struct buffer_head * ext3_getblk (handle_t *, struct inode *, unsigned long, int, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'handle_t *' should also have an identifier name
#1260: FILE: include/linux/ext3_fs.h:775:
+extern struct buffer_head * ext3_getblk (handle_t *, struct inode *, unsigned long, int, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#1260: FILE: include/linux/ext3_fs.h:775:
+extern struct buffer_head * ext3_getblk (handle_t *, struct inode *, unsigned long, int, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#1260: FILE: include/linux/ext3_fs.h:775:
+extern struct buffer_head * ext3_getblk (handle_t *, struct inode *, unsigned long, int, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1260: FILE: include/linux/ext3_fs.h:775:
+extern struct buffer_head * ext3_getblk (handle_t *, struct inode *, unsigned long, int, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int *' should also have an identifier name
#1260: FILE: include/linux/ext3_fs.h:775:
+extern struct buffer_head * ext3_getblk (handle_t *, struct inode *, unsigned long, int, int *);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1261: FILE: include/linux/ext3_fs.h:776:
+extern struct buffer_head * ext3_bread (handle_t *, struct inode *, unsigned int, int, int *);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1261: FILE: include/linux/ext3_fs.h:776:
+extern struct buffer_head * ext3_bread (handle_t *, struct inode *, unsigned int, int, int *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1261: FILE: include/linux/ext3_fs.h:776:
+extern struct buffer_head * ext3_bread (handle_t *, struct inode *, unsigned int, int, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'handle_t *' should also have an identifier name
#1261: FILE: include/linux/ext3_fs.h:776:
+extern struct buffer_head * ext3_bread (handle_t *, struct inode *, unsigned int, int, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#1261: FILE: include/linux/ext3_fs.h:776:
+extern struct buffer_head * ext3_bread (handle_t *, struct inode *, unsigned int, int, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#1261: FILE: include/linux/ext3_fs.h:776:
+extern struct buffer_head * ext3_bread (handle_t *, struct inode *, unsigned int, int, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1261: FILE: include/linux/ext3_fs.h:776:
+extern struct buffer_head * ext3_bread (handle_t *, struct inode *, unsigned int, int, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int *' should also have an identifier name
#1261: FILE: include/linux/ext3_fs.h:776:
+extern struct buffer_head * ext3_bread (handle_t *, struct inode *, unsigned int, int, int *);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1296: FILE: include/linux/percpu_llcounter.h:1:
+#ifndef _LINUX_LLPERCPU_COUNTER_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#1313: FILE: include/linux/percpu_llcounter.h:18:
+	spinlock_t lock;

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1319: FILE: include/linux/percpu_llcounter.h:24:
+#define FBC_BATCH	(NR_CPUS*2)
                  	        ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1321: FILE: include/linux/percpu_llcounter.h:26:
+#define FBC_BATCH	(NR_CPUS*4)
                  	        ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1444: FILE: mm/swap.c:522:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#1466: FILE: mm/swap.c:556:
+		long long *pcount = per_cpu_ptr(fbc->counters, cpu);
+		ret += *pcount;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000094613.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 6 errors, 45 warnings, 30 checks, 1236 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000094613.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
