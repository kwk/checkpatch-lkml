CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#104: FILE: fs/spufs/file.c:382:
+long spufs_run_spu(struct file *file, struct spu_context *ctx,
 		u32 *npc, u32 *status)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#118: FILE: fs/spufs/spufs.h:59:
+long spufs_create_thread(struct nameidata *nd, const char *name,
                                            ^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#172: FILE: include/linux/syscalls.h:513:
+asmlinkage long sys_spu_run(int fd, __u32 __user *unpc,
+				 __u32 __user *ustatus);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#203: FILE: arch/ppc64/kernel/spu_syscalls.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#221: FILE: arch/ppc64/kernel/spu_syscalls.c:19:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#222: FILE: arch/ppc64/kernel/spu_syscalls.c:20:
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#236: FILE: arch/ppc64/kernel/spu_syscalls.c:34:
+ * this file is not used and the syscalls directly enter the fs code */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#239: FILE: arch/ppc64/kernel/spu_syscalls.c:37:
+asmlinkage long sys_spu_create_thread(const char __user *name,
+		unsigned int flags, mode_t mode)

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#243: FILE: arch/ppc64/kernel/spu_syscalls.c:41:
+	ret = -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#254: FILE: arch/ppc64/kernel/spu_syscalls.c:52:
+	struct file *filp;
 	             ^^^^

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#257: FILE: arch/ppc64/kernel/spu_syscalls.c:55:
+	ret = -ENOSYS;

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#260: FILE: arch/ppc64/kernel/spu_syscalls.c:58:
+		filp = fget_light(fd, &fput_needed);
 		^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#261: FILE: arch/ppc64/kernel/spu_syscalls.c:59:
+		if (filp) {
 		    ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#262: FILE: arch/ppc64/kernel/spu_syscalls.c:60:
+			ret = spufs_calls.spu_run(filp, unpc, ustatus);
 			                          ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#263: FILE: arch/ppc64/kernel/spu_syscalls.c:61:
+			fput_light(filp, fput_needed);
 			           ^^^^

WARNING:MEMORY_BARRIER: memory barrier without comment
#277: FILE: arch/ppc64/kernel/spu_syscalls.c:75:
+	smp_mb();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#285: FILE: arch/ppc64/kernel/spu_syscalls.c:83:
+	BUG_ON(spufs_calls.owner != calls->owner);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#310: FILE: fs/spufs/inode.c:20:
  * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

WARNING:CONST_STRUCT: struct file_operations should normally be const
#372: FILE: fs/spufs/inode.c:260:
+struct file_operations spufs_autodelete_dir_operations = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#391: FILE: fs/spufs/inode.c:310:
+spufs_create_thread(struct nameidata *nd, const char *name,
                                       ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#392: FILE: fs/spufs/inode.c:311:
+spufs_create_thread(struct nameidata *nd, const char *name,
+			unsigned int flags, mode_t mode)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#396: FILE: fs/spufs/inode.c:314:
+	struct file *filp;
 	             ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#420: FILE: fs/spufs/inode.c:320:
+	if (nd->dentry->d_sb->s_magic != SPUFS_MAGIC ||
+		nd->dentry != nd->dentry->d_sb->s_root)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#423: FILE: fs/spufs/inode.c:323:
+	dentry = lookup_create(nd, 1);
 	                       ^^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXUGO' are not preferred. Consider using octal permissions '0777'.
#433: FILE: fs/spufs/inode.c:333:
+	ret = spufs_mkdir(nd->dentry->d_inode, dentry, mode & S_IRWXUGO);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#443: FILE: fs/spufs/inode.c:343:
+	filp = filp_open(name, O_RDONLY, mode);
 	^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#444: FILE: fs/spufs/inode.c:344:
+	if (IS_ERR(filp)) {
 	           ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#447: FILE: fs/spufs/inode.c:347:
+		ret = PTR_ERR(filp);
 		              ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#450: FILE: fs/spufs/inode.c:350:
+		fd_install(ret, filp);
 		                ^^^^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#500: FILE: fs/spufs/syscalls.c:1:
+#include <linux/file.h>

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#506: FILE: fs/spufs/syscalls.c:7:
+#include <asm/uaccess.h>

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#531: FILE: fs/spufs/syscalls.c:32:
+long do_spu_run(struct file *filp, __u32 __user *unpc, __u32 __user *ustatus)
                              ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#546: FILE: fs/spufs/syscalls.c:47:
+	ret = spufs_run_spu(filp, i->i_ctx, &npc, &status);
 	                    ^^^^

ERROR:SPACING: spaces required around that '==' (ctx:WxO)
#548: FILE: fs/spufs/syscalls.c:49:
+	if (ret ==-EAGAIN || ret == -EIO)
 	        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before that '-' (ctx:OxV)
#548: FILE: fs/spufs/syscalls.c:49:
+	if (ret ==-EAGAIN || ret == -EIO)
 	          ^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#564: FILE: fs/spufs/syscalls.c:65:
+	struct file *filp;
 	             ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#568: FILE: fs/spufs/syscalls.c:69:
+	filp = fget_light(fd, &fput_needed);
 	^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#569: FILE: fs/spufs/syscalls.c:70:
+	if (filp) {
 	    ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#570: FILE: fs/spufs/syscalls.c:71:
+		ret = do_spu_run(filp, unpc, ustatus);
 		                 ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#571: FILE: fs/spufs/syscalls.c:72:
+		fput_light(filp, fput_needed);
 		           ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#579: FILE: fs/spufs/syscalls.c:80:
+asmlinkage long sys_spu_create_thread(const char __user *pathname,
+					unsigned int flags, mode_t mode)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#587: FILE: fs/spufs/syscalls.c:88:
+		struct nameidata nd;
 		                 ^^

CHECK:SPACING: space preferred before that '|' (ctx:VxE)
#589: FILE: fs/spufs/syscalls.c:90:
+		ret = path_lookup(tmp, LOOKUP_PARENT|
 		                                    ^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#590: FILE: fs/spufs/syscalls.c:91:
+				LOOKUP_OPEN|LOOKUP_CREATE, &nd);
 				                            ^^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#590: FILE: fs/spufs/syscalls.c:91:
+				LOOKUP_OPEN|LOOKUP_CREATE, &nd);
 				           ^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#592: FILE: fs/spufs/syscalls.c:93:
+			ret = spufs_create_thread(&nd, pathname, flags, mode);
 			                           ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#593: FILE: fs/spufs/syscalls.c:94:
+			path_release(&nd);
 			              ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#624: FILE: include/asm-ppc64/spu.h:146:
+	asmlinkage long (*create_thread)(const char __user *name,
+					unsigned int flags, mode_t mode);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#625: FILE: include/asm-ppc64/spu.h:147:
+	asmlinkage long (*spu_run)(struct file *filp, __u32 __user *unpc,
 	                                        ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#626: FILE: include/asm-ppc64/spu.h:148:
+	asmlinkage long (*spu_run)(struct file *filp, __u32 __user *unpc,
+						__u32 __user *ustatus);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#638: FILE: include/asm-ppc64/spu.h:160:
+}
+static inline void unregister_spu_syscalls(struct spufs_calls *calls)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#643: FILE: include/asm-ppc64/spu.h:165:
+
+

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000150655.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 5 errors, 35 warnings, 12 checks, 508 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000150655.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
