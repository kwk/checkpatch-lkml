WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#28: 
Here is an x86 implementation of down_read_trylock() and down_write_trylock()

ERROR:TRAILING_WHITESPACE: trailing whitespace
#72: FILE: arch/i386/kernel/semaphore.c:389:
+ * This routine does have the unfortunate side-effect that we could $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#73: FILE: arch/i386/kernel/semaphore.c:390:
+ * spin for awhile if there's a lot of contention for this lock. If $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#74: FILE: arch/i386/kernel/semaphore.c:391:
+ * that's the case, however, then it's less likely that we would hold $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#89: FILE: arch/i386/kernel/semaphore.c:406:
+^I^Iif (cmpxchg((volatile int *)&sem->count, count, newcount) $

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#89: FILE: arch/i386/kernel/semaphore.c:406:
+		if (cmpxchg((volatile int *)&sem->count, count, newcount) 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#95: FILE: arch/i386/kernel/semaphore.c:412:
+^I^I^I * FIXME: This has the same potential stampede problem $

WARNING:INLINE: plain inline is preferred over __inline__
#116: FILE: include/asm-i386/atomic.h:58:
+static __inline__ int atomic_sub_sign_and_carry(int i, atomic_t *v)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#120: FILE: include/asm-i386/atomic.h:62:
+	__asm__ __volatile__(

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#122: FILE: include/asm-i386/atomic.h:64:
+		:"=m" (v->counter), "=qm" (s), "=qm" (c)
 		^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#123: FILE: include/asm-i386/atomic.h:65:
+		:"ir" (i), "m" (v->counter) : "memory");
 		^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#124: FILE: include/asm-i386/atomic.h:66:
+	return s | c<<1;
 	            ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#139: FILE: include/asm-i386/semaphore.h:385:
+extern void __up_biased(int val, struct rw_semaphore *sem);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#146: FILE: include/asm-i386/semaphore.h:392:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#160: FILE: include/asm-i386/semaphore.h:406:
+	}
+	else {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#160: FILE: include/asm-i386/semaphore.h:406:
+	else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#164: FILE: include/asm-i386/semaphore.h:410:
+			BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#166: FILE: include/asm-i386/semaphore.h:412:
+			BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#178: FILE: include/asm-i386/semaphore.h:424:
+		BUG();

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#192: FILE: include/asm-i386/semaphore.h:438:
+	}
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#192: FILE: include/asm-i386/semaphore.h:438:
+	else {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#196: FILE: include/asm-i386/semaphore.h:442:
+			BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#198: FILE: include/asm-i386/semaphore.h:444:
+			BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#200: FILE: include/asm-i386/semaphore.h:446:
+			BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#202: FILE: include/asm-i386/semaphore.h:448:
+			BUG();

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000548981.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 9 errors, 11 warnings, 5 checks, 138 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000548981.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
