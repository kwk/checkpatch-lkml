WARNING:TYPO_SPELLING: 'explaination' may be misspelled - perhaps 'explanation'?
#36: 
Here is some explaination for the more unintuitive ones:
             ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:REPEATED_WORD: Possible repeated word: 'it'
#47: 
- If the processor doesn't support it it will be replaced by a call to a

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#132: 
diff --exclude-from=/home/ldb/src/linux-exclude -urNdp linux-2.5.32_base/arch/i386/kernel/apic.c linux-2.5.32_final/arch/i386/kernel/apic.c

ERROR:TRAILING_WHITESPACE: trailing whitespace
#161: FILE: arch/i386/kernel/cpu/amd.c:47:
+^I^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#184: FILE: arch/i386/kernel/cpu/amd.c:156:
+^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#210: FILE: arch/i386/kernel/cpu/centaur.c:296:
+^I^I^I^Iset_bit(X86_FEATURE_NEEDS_SFENCE, c->x86_capability);^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#211: FILE: arch/i386/kernel/cpu/centaur.c:297:
+^I^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#222: FILE: arch/i386/kernel/cpu/centaur.c:327:
+^I^I^I^Iset_bit(X86_FEATURE_NEEDS_SFENCE, c->x86_capability);^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#223: FILE: arch/i386/kernel/cpu/centaur.c:328:
+^I^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#234: FILE: arch/i386/kernel/cpu/centaur.c:348:
+^I^I^I^Iset_bit(X86_FEATURE_NEEDS_SFENCE, c->x86_capability);^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#235: FILE: arch/i386/kernel/cpu/centaur.c:349:
+^I^I^I^I$

ERROR:SPACING: space required before the open parenthesis '('
#268: FILE: arch/i386/kernel/cpu/common.c:299:
+	if(c->x86 >= 5)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#271: FILE: arch/i386/kernel/cpu/common.c:302:
+	if(c->x86 >= 6)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#273: FILE: arch/i386/kernel/cpu/common.c:304:
+^I$

ERROR:SPACING: space required before the open parenthesis '('
#275: FILE: arch/i386/kernel/cpu/common.c:306:
+	if(test_bit(X86_FEATURE_XMM, c->x86_capability))

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#278: FILE: arch/i386/kernel/cpu/common.c:309:
+	if(test_bit(X86_FEATURE_MMXEXT, c->x86_capability) || test_bit(X86_FEATURE_3DNOW, c->x86_capability))

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:SPACING: space required before the open parenthesis '('
#278: FILE: arch/i386/kernel/cpu/common.c:309:
+	if(test_bit(X86_FEATURE_MMXEXT, c->x86_capability) || test_bit(X86_FEATURE_3DNOW, c->x86_capability))

ERROR:SPACING: space required before the open parenthesis '('
#281: FILE: arch/i386/kernel/cpu/common.c:312:
+	if(test_bit(X86_FEATURE_3DNOW, c->x86_capability))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#283: FILE: arch/i386/kernel/cpu/common.c:314:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#323: FILE: arch/i386/kernel/cpu/intel.c:150:
+^I^Iset_bit(X86_FEATURE_F00F_BUG, c->x86_capability);^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#324: FILE: arch/i386/kernel/cpu/intel.c:151:
+^I^I$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#335: FILE: arch/i386/kernel/cpu/intel.c:226:
+	if ( c->x86 == 6 && c->x86_model < 3 )
+	{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space prohibited after that open parenthesis '('
#335: FILE: arch/i386/kernel/cpu/intel.c:226:
+	if ( c->x86 == 6 && c->x86_model < 3 )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#335: FILE: arch/i386/kernel/cpu/intel.c:226:
+	if ( c->x86 == 6 && c->x86_model < 3 )

ERROR:TRAILING_WHITESPACE: trailing whitespace
#337: FILE: arch/i386/kernel/cpu/intel.c:228:
+^I^I/* SEP CPUID bug: Pentium Pro reports SEP but doesn't have it */^I^I$

ERROR:SPACING: space required before the open parenthesis '('
#338: FILE: arch/i386/kernel/cpu/intel.c:229:
+		if(c->x86_mask < 3)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'c->x86 >= 6'
#344: FILE: arch/i386/kernel/cpu/intel.c:235:
+	if((c->x86 >= 6) || __cpu_has_mmx)

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:SPACING: space required before the open parenthesis '('
#344: FILE: arch/i386/kernel/cpu/intel.c:235:
+	if((c->x86 >= 6) || __cpu_has_mmx)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#409: FILE: arch/i386/kernel/time.c:96:
+	__rdtsc(eax,edx);
 	           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#435: FILE: arch/i386/kernel/time.c:624:
+		__rdtsc(startlow,starthigh);
 		                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#441: FILE: arch/i386/kernel/time.c:629:
+		__rdtsc(endlow,endhigh);
 		              ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#466: FILE: arch/i386/lib/checksum.S:31:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#479: FILE: arch/i386/lib/checksum.S:42:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#481: FILE: arch/i386/lib/checksum.S:44:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#516: FILE: arch/i386/lib/checksum.S:219:
+^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#530: FILE: arch/i386/lib/checksum.S:249:
+^I$

ERROR:SPACING: space required before the open parenthesis '('
#621: FILE: arch/i386/lib/memcpy.c:9:
+	if(cpu_has_3dnow)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#854: FILE: arch/x86_64/kernel/time.c:91:
+	__rdtsc(eax,edx);
 	           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#872: FILE: arch/x86_64/kernel/time.c:438:
+		__rdtsc(startlow,starthigh);
 		                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#878: FILE: arch/x86_64/kernel/time.c:443:
+		__rdtsc(endlow,endhigh);
 		              ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#919: FILE: drivers/input/joystick/analog.c:140:
+#define GET_TIME(x)	do { if (cpu_has_tsc) __rdtscl(x); else x = get_time_pit(); } while (0)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#975: FILE: include/asm-i386/apic.h:50:
+/* The dummy "i" operand serves to generate an informative compiler
+   warning if the memory address happens to be non-constant */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#975: FILE: include/asm-i386/apic.h:50:
+   warning if the memory address happens to be non-constant */

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'reg' - possible side-effects?
#976: FILE: include/asm-i386/apic.h:51:
+# define apic_write_around(reg, v)  \
+do { \
+	unsigned long __eax; \
+	asm volatile(dynamic_fixup_int3 asm_byte(DYNAMIC_FIXUP_INT3_APIC_WRITE) ".long %1" : "=a" (__eax), "=m" (*(volatile u32*)(__fix_to_virt(FIX_APIC_BASE)+(reg))) : "0" (v), "i" (__fix_to_virt(FIX_APIC_BASE)+(reg))); \
+} while(0)

WARNING:LONG_LINE: line length of 222 exceeds 100 columns
#979: FILE: include/asm-i386/apic.h:54:
+	asm volatile(dynamic_fixup_int3 asm_byte(DYNAMIC_FIXUP_INT3_APIC_WRITE) ".long %1" : "=a" (__eax), "=m" (*(volatile u32*)(__fix_to_virt(FIX_APIC_BASE)+(reg))) : "0" (v), "i" (__fix_to_virt(FIX_APIC_BASE)+(reg))); \

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#979: FILE: include/asm-i386/apic.h:54:
+	asm volatile(dynamic_fixup_int3 asm_byte(DYNAMIC_FIXUP_INT3_APIC_WRITE) ".long %1" : "=a" (__eax), "=m" (*(volatile u32*)(__fix_to_virt(FIX_APIC_BASE)+(reg))) : "0" (v), "i" (__fix_to_virt(FIX_APIC_BASE)+(reg))); \

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#979: FILE: include/asm-i386/apic.h:54:
+	asm volatile(dynamic_fixup_int3 asm_byte(DYNAMIC_FIXUP_INT3_APIC_WRITE) ".long %1" : "=a" (__eax), "=m" (*(volatile u32*)(__fix_to_virt(FIX_APIC_BASE)+(reg))) : "0" (v), "i" (__fix_to_virt(FIX_APIC_BASE)+(reg))); \
 	                                                                                                                                                      ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#979: FILE: include/asm-i386/apic.h:54:
+	asm volatile(dynamic_fixup_int3 asm_byte(DYNAMIC_FIXUP_INT3_APIC_WRITE) ".long %1" : "=a" (__eax), "=m" (*(volatile u32*)(__fix_to_virt(FIX_APIC_BASE)+(reg))) : "0" (v), "i" (__fix_to_virt(FIX_APIC_BASE)+(reg))); \
 	                                                                                                                                                                                                           ^

ERROR:SPACING: space required before the open parenthesis '('
#980: FILE: include/asm-i386/apic.h:55:
+} while(0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#989: FILE: include/asm-i386/apic.h:64:
+# define apic_write_around(x,y) apic_write((x),(y))
                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#989: FILE: include/asm-i386/apic.h:64:
+# define apic_write_around(x,y) apic_write((x),(y))
                                               ^

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1049: FILE: include/asm-i386/bugs.h:162:
+static inline void cpu_feature_panic(char* str)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1071: FILE: include/asm-i386/bugs.h:182:
+#if !defined(CONFIG_X86_MARCH_386) && !defined(CONFIG_X86_MARCH_486) && !defined(CONFIG_X86_MARCH_586) && defined(CONFIG_X86_MARCH_686) $

WARNING:LONG_LINE: line length of 136 exceeds 100 columns
#1071: FILE: include/asm-i386/bugs.h:182:
+#if !defined(CONFIG_X86_MARCH_386) && !defined(CONFIG_X86_MARCH_486) && !defined(CONFIG_X86_MARCH_586) && defined(CONFIG_X86_MARCH_686) 

ERROR:SPACING: space required before the open parenthesis '('
#1072: FILE: include/asm-i386/bugs.h:183:
+	if(boot_cpu_data.x86 < 6)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1075: FILE: include/asm-i386/bugs.h:186:
+^I$

ERROR:SPACING: space required before the open parenthesis '('
#1105: FILE: include/asm-i386/bugs.h:207:
+	if(boot_cpu_data.x86_vendor == X86_VENDOR_INTEL

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1106: FILE: include/asm-i386/bugs.h:208:
+	if(boot_cpu_data.x86_vendor == X86_VENDOR_INTEL
+	   && boot_cpu_data.x86 == 6

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1107: FILE: include/asm-i386/bugs.h:209:
+	   && boot_cpu_data.x86 == 6
+	   && boot_cpu_data.x86_model <= 1

ERROR:SPACING: space required before the open parenthesis '('
#1113: FILE: include/asm-i386/bugs.h:215:
+	if(!__cpu_has_3dnow)

ERROR:SPACING: space required before the open parenthesis '('
#1118: FILE: include/asm-i386/bugs.h:220:
+	if(!__cpu_has_xmm2)

WARNING:INCLUDE_LINUX: Use #include <linux/cpufeature.h> instead of <asm/cpufeature.h>
#1130: FILE: include/asm-i386/checksum.h:5:
+#include <asm/cpufeature.h>

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1139: FILE: include/asm-i386/checksum.h:19:
+asmlinkage unsigned int csum_partial_686(const unsigned char * buff, int len, unsigned int sum);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1140: FILE: include/asm-i386/checksum.h:20:
+asmlinkage unsigned int csum_partial_non686(const unsigned char * buff, int len, unsigned int sum);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1142: FILE: include/asm-i386/checksum.h:22:
+static inline unsigned int csum_partial(const unsigned char * buff, int len, unsigned int sum)

ERROR:SPACING: space required before the open parenthesis '('
#1144: FILE: include/asm-i386/checksum.h:24:
+	if(cpu_wants_686_checksum)

ERROR:SPACING: space prohibited after that open parenthesis '('
#1157: FILE: include/asm-i386/checksum.h:38:
+asmlinkage unsigned int csum_partial_copy_generic_686( const char *src, char *dst, int len, int sum,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1158: FILE: include/asm-i386/checksum.h:39:
+asmlinkage unsigned int csum_partial_copy_generic_686( const char *src, char *dst, int len, int sum,
+						   int *src_err_ptr, int *dst_err_ptr);

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#1159: FILE: include/asm-i386/checksum.h:40:
+asmlinkage unsigned int csum_partial_copy_generic_non686( const char *src, char *dst, int len, int sum,

ERROR:SPACING: space prohibited after that open parenthesis '('
#1159: FILE: include/asm-i386/checksum.h:40:
+asmlinkage unsigned int csum_partial_copy_generic_non686( const char *src, char *dst, int len, int sum,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1160: FILE: include/asm-i386/checksum.h:41:
+asmlinkage unsigned int csum_partial_copy_generic_non686( const char *src, char *dst, int len, int sum,
 						   int *src_err_ptr, int *dst_err_ptr);

ERROR:SPACING: space prohibited after that open parenthesis '('
#1162: FILE: include/asm-i386/checksum.h:43:
+static inline unsigned int csum_partial_copy_generic( const char *src, char *dst, int len, int sum,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1163: FILE: include/asm-i386/checksum.h:44:
+static inline unsigned int csum_partial_copy_generic( const char *src, char *dst, int len, int sum,
+						   int *src_err_ptr, int *dst_err_ptr)

ERROR:SPACING: space required before the open parenthesis '('
#1165: FILE: include/asm-i386/checksum.h:46:
+	if(cpu_wants_686_checksum)

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#1168: FILE: include/asm-i386/checksum.h:49:
+		return csum_partial_copy_generic_non686(src, dst, len, sum, src_err_ptr, dst_err_ptr);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1182: FILE: include/asm-i386/cpufeature.h:64:
+#define X86_FEATURE_NEEDS_LFENCE (3*32+ 4) /* Pentium or later */
                                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxW)
#1182: FILE: include/asm-i386/cpufeature.h:64:
+#define X86_FEATURE_NEEDS_LFENCE (3*32+ 4) /* Pentium or later */
                                       ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1183: FILE: include/asm-i386/cpufeature.h:65:
+#define X86_FEATURE_NEEDS_SFENCE (3*32+ 5) /* Winchip OOStore or bad PPro */
                                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxW)
#1183: FILE: include/asm-i386/cpufeature.h:65:
+#define X86_FEATURE_NEEDS_SFENCE (3*32+ 5) /* Winchip OOStore or bad PPro */
                                       ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1184: FILE: include/asm-i386/cpufeature.h:66:
+#define X86_FEATURE_OOSTORE	(3*32+ 6) /* Winchip OOStore */
                            	  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxW)
#1184: FILE: include/asm-i386/cpufeature.h:66:
+#define X86_FEATURE_OOSTORE	(3*32+ 6) /* Winchip OOStore */
                            	     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1185: FILE: include/asm-i386/cpufeature.h:67:
+#define X86_FEATURE_WANTS_686_CHECKSUM	(3*32+ 7) /* 686 checksum */
                                       	  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxW)
#1185: FILE: include/asm-i386/cpufeature.h:67:
+#define X86_FEATURE_WANTS_686_CHECKSUM	(3*32+ 7) /* 686 checksum */
                                       	     ^

WARNING:LONG_LINE_COMMENT: line length of 152 exceeds 100 columns
#1186: FILE: include/asm-i386/cpufeature.h:68:
+#define X86_FEATURE_WANTS_PREFETCH	(3*32+ 8) /* prefetch(nta) - doesn't matter which since it's trivially fixed up (use prefetchnta in asm code) */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1186: FILE: include/asm-i386/cpufeature.h:68:
+#define X86_FEATURE_WANTS_PREFETCH	(3*32+ 8) /* prefetch(nta) - doesn't matter which since it's trivially fixed up (use prefetchnta in asm code) */
                                   	  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxW)
#1186: FILE: include/asm-i386/cpufeature.h:68:
+#define X86_FEATURE_WANTS_PREFETCH	(3*32+ 8) /* prefetch(nta) - doesn't matter which since it's trivially fixed up (use prefetchnta in asm code) */
                                   	     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1187: FILE: include/asm-i386/cpufeature.h:69:
+#define X86_FEATURE_WANTS_PREFETCHW	(3*32+ 9) /* write prefetch */
                                    	  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxW)
#1187: FILE: include/asm-i386/cpufeature.h:69:
+#define X86_FEATURE_WANTS_PREFETCHW	(3*32+ 9) /* write prefetch */
                                    	     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1188: FILE: include/asm-i386/cpufeature.h:70:
+#define X86_FEATURE_F00F_BUG	(3*32+ 10) /* Intel P5 lock cmpxchg8b bug */
                             	  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxW)
#1188: FILE: include/asm-i386/cpufeature.h:70:
+#define X86_FEATURE_F00F_BUG	(3*32+ 10) /* Intel P5 lock cmpxchg8b bug */
                             	     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1189: FILE: include/asm-i386/cpufeature.h:71:
+#define X86_FEATURE_GOOD_APIC	(3*32+ 11) /* Pentium or later */
                              	  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxW)
#1189: FILE: include/asm-i386/cpufeature.h:71:
+#define X86_FEATURE_GOOD_APIC	(3*32+ 11) /* Pentium or later */
                              	     ^

ERROR:SPACING: space required before the open parenthesis '('
#1289: FILE: include/asm-i386/io.h:279:
+#define flush_write_buffers() do {} while(0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1293: FILE: include/asm-i386/io.h:283:
+#define dma_cache_inv(_start,_size)		flush_write_buffers()
                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1294: FILE: include/asm-i386/io.h:284:
+#define dma_cache_wback(_start,_size)		flush_write_buffers()
                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1295: FILE: include/asm-i386/io.h:285:
+#define dma_cache_wback_inv(_start,_size)	flush_write_buffers()
                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1309: FILE: include/asm-i386/linkage.h:8:
+#define __ALIGN .align 32,0x90
                          ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1309: FILE: include/asm-i386/linkage.h:8:
+#define __ALIGN .align 32,0x90

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1315: FILE: include/asm-i386/linkage.h:14:
+#define __ALIGN .align 4,0x90
                         ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1315: FILE: include/asm-i386/linkage.h:14:
+#define __ALIGN .align 4,0x90

ERROR:SPACING: space required before the open parenthesis '('
#1338: FILE: include/asm-i386/mmx.h:16:
+#define mmx_clear_page(...) do {} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#1339: FILE: include/asm-i386/mmx.h:17:
+#define mmx_copy_page(...) do {} while(0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1351: FILE: include/asm-i386/msr.h:20:
+#define __rdtsc(low,high) \
                    ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1351: FILE: include/asm-i386/msr.h:20:
+#define __rdtsc(low,high) \
      __asm__ __volatile__("rdtsc" : "=a" (low), "=d" (high))

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1355: FILE: include/asm-i386/msr.h:23:
+#define __rdtscl(low) \
      __asm__ __volatile__("rdtsc" : "=a" (low) : : "edx")

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1359: FILE: include/asm-i386/msr.h:26:
+#define __rdtscll(val) \
      __asm__ __volatile__("rdtsc" : "=A" (val))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1363: FILE: include/asm-i386/msr.h:30:
+#define rdtsc(low,high) \
                  ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1363: FILE: include/asm-i386/msr.h:30:
+#define rdtsc(low,high) \
+     __asm__ __volatile__("rdtsc; .byte 0x86, 0x76, 0" /* nop */ : "=a" (low), "=d" (high))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1364: FILE: include/asm-i386/msr.h:31:
+     __asm__ __volatile__("rdtsc; .byte 0x86, 0x76, 0" /* nop */ : "=a" (low), "=d" (high))$

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1366: FILE: include/asm-i386/msr.h:33:
+#define rdtscl(low) \
+     __asm__ __volatile__("rdtsc; .byte 0x86, 0x76, 0" /* nop */ : "=a" (low) : : "edx")

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1367: FILE: include/asm-i386/msr.h:34:
+     __asm__ __volatile__("rdtsc; .byte 0x86, 0x76, 0" /* nop */ : "=a" (low) : : "edx")$

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1369: FILE: include/asm-i386/msr.h:36:
+#define rdtscll(val) \
+     __asm__ __volatile__("rdtsc; .byte 0x86, 0x76, 0" /* nop */ : "=A" (val))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1370: FILE: include/asm-i386/msr.h:37:
+     __asm__ __volatile__("rdtsc; .byte 0x86, 0x76, 0" /* nop */ : "=A" (val))$

WARNING:LONG_LINE: line length of 138 exceeds 100 columns
#1405: FILE: include/asm-i386/page.h:24:
+#define clear_page(page)	do {if(cpu_has_3dnow) mmx_clear_page((void *)(page)); else memset((void *)(page), 0, PAGE_SIZE);} while(0)

ERROR:SPACING: space required after that ';' (ctx:VxV)
#1405: FILE: include/asm-i386/page.h:24:
+#define clear_page(page)	do {if(cpu_has_3dnow) mmx_clear_page((void *)(page)); else memset((void *)(page), 0, PAGE_SIZE);} while(0)
                         	                                                                                               ^

ERROR:SPACING: space required before the open parenthesis '('
#1405: FILE: include/asm-i386/page.h:24:
+#define clear_page(page)	do {if(cpu_has_3dnow) mmx_clear_page((void *)(page)); else memset((void *)(page), 0, PAGE_SIZE);} while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'page' - possible side-effects?
#1405: FILE: include/asm-i386/page.h:24:
+#define clear_page(page)	do {if(cpu_has_3dnow) mmx_clear_page((void *)(page)); else memset((void *)(page), 0, PAGE_SIZE);} while(0)

WARNING:LONG_LINE: line length of 162 exceeds 100 columns
#1406: FILE: include/asm-i386/page.h:25:
+#define copy_page(to,from)	do {if(cpu_has_3dnow) mmx_copy_page((void *)(to), (void*)(from));  else memcpy((void *)(to), (void *)(from), PAGE_SIZE);} while(0)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1406: FILE: include/asm-i386/page.h:25:
+#define copy_page(to,from)	do {if(cpu_has_3dnow) mmx_copy_page((void *)(to), (void*)(from));  else memcpy((void *)(to), (void *)(from), PAGE_SIZE);} while(0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1406: FILE: include/asm-i386/page.h:25:
+#define copy_page(to,from)	do {if(cpu_has_3dnow) mmx_copy_page((void *)(to), (void*)(from));  else memcpy((void *)(to), (void *)(from), PAGE_SIZE);} while(0)
                     ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#1406: FILE: include/asm-i386/page.h:25:
+#define copy_page(to,from)	do {if(cpu_has_3dnow) mmx_copy_page((void *)(to), (void*)(from));  else memcpy((void *)(to), (void *)(from), PAGE_SIZE);} while(0)
                           	                                                                                                                       ^

ERROR:SPACING: space required before the open parenthesis '('
#1406: FILE: include/asm-i386/page.h:25:
+#define copy_page(to,from)	do {if(cpu_has_3dnow) mmx_copy_page((void *)(to), (void*)(from));  else memcpy((void *)(to), (void *)(from), PAGE_SIZE);} while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'to' - possible side-effects?
#1406: FILE: include/asm-i386/page.h:25:
+#define copy_page(to,from)	do {if(cpu_has_3dnow) mmx_copy_page((void *)(to), (void*)(from));  else memcpy((void *)(to), (void *)(from), PAGE_SIZE);} while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'from' - possible side-effects?
#1406: FILE: include/asm-i386/page.h:25:
+#define copy_page(to,from)	do {if(cpu_has_3dnow) mmx_copy_page((void *)(to), (void*)(from));  else memcpy((void *)(to), (void *)(from), PAGE_SIZE);} while(0)

WARNING:INCLUDE_LINUX: Use #include <linux/bitops.h> instead of <asm/bitops.h>
#1417: FILE: include/asm-i386/processor.h:17:
+#include <asm/bitops.h>

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1434: FILE: include/asm-i386/processor.h:470:
+#ifdef ^ICONFIG_X86_MAY_WANT_PREFETCH$

ERROR:SPACING: exactly one space required after that #ifdef
#1434: FILE: include/asm-i386/processor.h:470:
+#ifdef 	CONFIG_X86_MAY_WANT_PREFETCH

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1446: FILE: include/asm-i386/processor.h:479:
+#ifdef ^ICONFIG_X86_MAY_WANT_PREFETCHW$

ERROR:SPACING: exactly one space required after that #ifdef
#1446: FILE: include/asm-i386/processor.h:479:
+#ifdef 	CONFIG_X86_MAY_WANT_PREFETCHW

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1491: FILE: include/asm-i386/spinlock.h:44:
+#define spin_unlock_wait(x)      ^Ido { barrier(); } while(spin_is_locked(x))$

ERROR:SPACING: space required before the open parenthesis '('
#1491: FILE: include/asm-i386/spinlock.h:44:
+#define spin_unlock_wait(x)      	do { barrier(); } while(spin_is_locked(x))

WARNING:USE_LOCKDEP: Where possible, use lockdep_assert_held instead of assertions based on spin_is_locked
#1491: FILE: include/asm-i386/spinlock.h:44:
+#define spin_unlock_wait(x)      	do { barrier(); } while(spin_is_locked(x))

lockdep_assert_held() annotations should be preferred over
assertions based on spin_is_locked()

See: https://www.kernel.org/doc/html/latest/locking/lockdep-design.html#annotations

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1509: FILE: include/asm-i386/spinlock.h:54:
+#ifdef CONFIG_DEBUG_SPINLOCK^I$

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#1519: FILE: include/asm-i386/spinlock.h:63:
+		"movb $1, %0" \

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#1520: FILE: include/asm-i386/spinlock.h:64:
+		:"=m" (lock->lock) : : "memory"
 		^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1540: FILE: include/asm-i386/spinlock.h:66:
+#else^I$

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#1544: FILE: include/asm-i386/spinlock.h:69:
+		:"=m" (lock->lock) : : "memory", "edx"
 		^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1546: FILE: include/asm-i386/spinlock.h:71:
+#endif^I$

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#1559: FILE: include/asm-i386/spinlock.h:95:
+		"\n1:\t" \

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'len < 512'
#1589: FILE: include/asm-i386/string-486.h:361:
+	if (!cpu_has_3dnow || (len < 512))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'len < 512'
#1597: FILE: include/asm-i386/string-486.h:368:
+	if(!cpu_has_3dnow || (len < 512))

ERROR:SPACING: space required before the open parenthesis '('
#1597: FILE: include/asm-i386/string-486.h:368:
+	if(!cpu_has_3dnow || (len < 512))

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1627: FILE: include/asm-i386/string.h:16:
+/*
+  If you enable this, make sure CONFIG_X86_MAY_WANT_STRING_486 and

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1629: FILE: include/asm-i386/string.h:18:
+*/  $

WARNING:INCLUDE_LINUX: Use #include <linux/processor.h> instead of <asm/processor.h>
#1640: FILE: include/asm-i386/string.h:293:
+#include <asm/processor.h>

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'len < 512'
#1649: FILE: include/asm-i386/string.h:301:
+	if(!cpu_has_3dnow || (len < 512))

ERROR:SPACING: space required before the open parenthesis '('
#1649: FILE: include/asm-i386/string.h:301:
+	if(!cpu_has_3dnow || (len < 512))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'len < 512'
#1659: FILE: include/asm-i386/string.h:309:
+	if(!cpu_has_3dnow || (len < 512))

ERROR:SPACING: space required before the open parenthesis '('
#1659: FILE: include/asm-i386/string.h:309:
+	if(!cpu_has_3dnow || (len < 512))

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1703: FILE: include/asm-i386/system.h:289:
+#define __mb_string asm_nop asm_nop

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#1706: FILE: include/asm-i386/system.h:292:
+#define mb()	__asm__ __volatile__ ("mfence" __mb_string : : :"memory")
             	                                               ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1706: FILE: include/asm-i386/system.h:292:
+#define mb()	__asm__ __volatile__ ("mfence" __mb_string : : :"memory")

WARNING:MEMORY_BARRIER: memory barrier without comment
#1706: FILE: include/asm-i386/system.h:292:
+#define mb()	__asm__ __volatile__ ("mfence" __mb_string : : :"memory")

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#1707: FILE: include/asm-i386/system.h:293:
+#define rmb()	__asm__ __volatile__ ("lfence" __mb_string : : :"memory")
              	                                               ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1707: FILE: include/asm-i386/system.h:293:
+#define rmb()	__asm__ __volatile__ ("lfence" __mb_string : : :"memory")

WARNING:MEMORY_BARRIER: memory barrier without comment
#1707: FILE: include/asm-i386/system.h:293:
+#define rmb()	__asm__ __volatile__ ("lfence" __mb_string : : :"memory")

WARNING:LONG_LINE: line length of 121 exceeds 100 columns
#1710: FILE: include/asm-i386/system.h:296:
+#define wmb() 	__asm__ __volatile__ (dynamic_fixup_int asm_byte(DYNAMIC_FIXUP_INT_SFENCE) asm_nop asm_nop : : :"memory")

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1710: FILE: include/asm-i386/system.h:296:
+#define wmb() ^I__asm__ __volatile__ (dynamic_fixup_int asm_byte(DYNAMIC_FIXUP_INT_SFENCE) asm_nop asm_nop : : :"memory")$

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#1710: FILE: include/asm-i386/system.h:296:
+#define wmb() 	__asm__ __volatile__ (dynamic_fixup_int asm_byte(DYNAMIC_FIXUP_INT_SFENCE) asm_nop asm_nop : : :"memory")
               	                                                                                               ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1710: FILE: include/asm-i386/system.h:296:
+#define wmb() 	__asm__ __volatile__ (dynamic_fixup_int asm_byte(DYNAMIC_FIXUP_INT_SFENCE) asm_nop asm_nop : : :"memory")

WARNING:MEMORY_BARRIER: memory barrier without comment
#1710: FILE: include/asm-i386/system.h:296:
+#define wmb() 	__asm__ __volatile__ (dynamic_fixup_int asm_byte(DYNAMIC_FIXUP_INT_SFENCE) asm_nop asm_nop : : :"memory")

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1726: FILE: include/asm-i386/timex.h:45:
+#ifdef __KERNEL__^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1730: FILE: include/asm-i386/timex.h:49:
+#endif^I$

CHECK:SPACING: No space is necessary after a cast
#1750: FILE: include/asm-i386/tlbflush.h:50:
+	__asm__ __volatile__("invlpg %0": :"m" (*(char *) addr))

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1750: FILE: include/asm-i386/tlbflush.h:50:
+	__asm__ __volatile__("invlpg %0": :"m" (*(char *) addr))
 	                                ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#1750: FILE: include/asm-i386/tlbflush.h:50:
+	__asm__ __volatile__("invlpg %0": :"m" (*(char *) addr))
 	                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1762: FILE: include/asm-x86_64/msr.h:46:
+#define __rdtsc(low,high) \
                    ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1762: FILE: include/asm-x86_64/msr.h:46:
+#define __rdtsc(low,high) \
      __asm__ __volatile__("rdtsc" : "=a" (low), "=d" (high))

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1766: FILE: include/asm-x86_64/msr.h:49:
+#define __rdtscl(low) \
      __asm__ __volatile__ ("rdtsc" : "=a" (low) : : "edx")

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1776: FILE: include/asm-x86_64/msr.h:58:
+#define rdtsc(low,high) __rdtsc(low,high)
                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1776: FILE: include/asm-x86_64/msr.h:58:
+#define rdtsc(low,high) __rdtsc(low,high)
                                    ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000436468.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 106 errors, 31 warnings, 34 checks, 1422 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000436468.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
