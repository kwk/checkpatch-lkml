WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#49: 
diff --minimal -urN -X /usr/share/dontdiff linux-2.5.64.vanilla/kernel/Makefile linux-2.5.64/kernel/Makefile

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#64: FILE: kernel/irq.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#65: FILE: kernel/irq.c:2:
+ *  linux/kernel/irq.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:TYPO_SPELLING: 'apropriate' may be misspelled - perhaps 'appropriate'?
#91: FILE: kernel/irq.c:28:
+ * interrupt source is transparently wired to the apropriate
                                                   ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#113: FILE: kernel/irq.c:50:
+#include <asm/uaccess.h>

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#146: FILE: kernel/irq.c:83:
+	printk(KERN_CRIT "Unexpected IRQ trap at vector %u\n", irq);

ERROR:CODE_INDENT: code indent should use tabs where possible
#193: FILE: kernel/irq.c:130:
+        /* is there anything to synchronize with? */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:TRAILING_WHITESPACE: trailing whitespace
#216: FILE: kernel/irq.c:153:
+^Ielse $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#217: FILE: kernel/irq.c:154:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:TRAILING_WHITESPACE: trailing whitespace
#229: FILE: kernel/irq.c:166:
+^Ielse $

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#230: FILE: kernel/irq.c:167:
+		BUG();

ERROR:TRAILING_WHITESPACE: trailing whitespace
#237: FILE: kernel/irq.c:174:
+ * controller lock. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#239: FILE: kernel/irq.c:176:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#239: FILE: kernel/irq.c:176:
+ $

WARNING:LINE_SPACING: Missing a blank line after declarations
#303: FILE: kernel/irq.c:240:
+		unsigned int status = desc->status & ~IRQ_DISABLED;
+		desc->status = status;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#309: FILE: kernel/irq.c:246:
+		/* fall-through */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#315: FILE: kernel/irq.c:252:
+		printk(KERN_ERR "enable_irq(%u) unbalanced from %p\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'enable_irq', this function's name, in a string
#315: FILE: kernel/irq.c:252:
+		printk(KERN_ERR "enable_irq(%u) unbalanced from %p\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#332: FILE: kernel/irq.c:269:
+ *^Iyour handler function must clear any interrupt the board $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#351: FILE: kernel/irq.c:288:
+int request_irq(unsigned int irq, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#353: FILE: kernel/irq.c:290:
+^I^Iunsigned long irqflags, $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#368: FILE: kernel/irq.c:305:
+			printk(KERN_ERR "Bad boy: %s (at %p) called us " \

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#368: FILE: kernel/irq.c:305:
+			printk(KERN_ERR "Bad boy: %s (at %p) called us " \

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*action)...) over kmalloc(sizeof(struct irqaction)...)
#376: FILE: kernel/irq.c:313:
+	action = kmalloc(sizeof(struct irqaction), GFP_ATOMIC);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#428: FILE: kernel/irq.c:365:
+	if ((old = *p) != NULL) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#469: FILE: kernel/irq.c:406:
+ *^IThis function must not be called from interrupt context. $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#478: FILE: kernel/irq.c:415:
+		printk(KERN_CRIT "Trying to free IRQ%d\n", irq);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#486: FILE: kernel/irq.c:423:
+		struct irqaction * action = *p;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#487: FILE: kernel/irq.c:424:
+		struct irqaction * action = *p;
+		if (action) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#489: FILE: kernel/irq.c:426:
+			struct irqaction **pp = p;
+			p = &action->next;

WARNING:REPEATED_WORD: Possible repeated word: 'free'
#506: FILE: kernel/irq.c:443:
+		printk(KERN_CRIT "Trying to free free IRQ%d\n", irq);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#506: FILE: kernel/irq.c:443:
+		printk(KERN_CRIT "Trying to free free IRQ%d\n", irq);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#540: FILE: kernel/irq.c:477:
+^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#542: FILE: kernel/irq.c:479:
+^I * flush such a longstanding irq before considering it as spurious. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#548: FILE: kernel/irq.c:485:
+^I^Iif (!desc->action) $

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 39)
#554: FILE: kernel/irq.c:491:
+	for (delay = jiffies + HZ/50; time_after(delay, jiffies); )
+		/* about 20ms delay */ barrier();

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#554: FILE: kernel/irq.c:491:
+	for (delay = jiffies + HZ/50; time_after(delay, jiffies); )
 	                         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#562: FILE: kernel/irq.c:499:
+	for (i = NR_IRQS-1; i > 0; i--) {
 	                ^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 40)
#577: FILE: kernel/irq.c:514:
+	for (delay = jiffies + HZ/10; time_after(delay, jiffies); )
+		/* about 100ms delay */ barrier();

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#577: FILE: kernel/irq.c:514:
+	for (delay = jiffies + HZ/10; time_after(delay, jiffies); )
 	                         ^

CHECK:BRACES: Unbalanced braces around else statement
#596: FILE: kernel/irq.c:533:
+			} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#612: FILE: kernel/irq.c:549:
+ *^Ireturned to its previous value. This function can handle only $

WARNING:TYPO_SPELLING: 'shouldnt' may be misspelled - perhaps 'shouldn't'?
#659: FILE: kernel/irq.c:596:
+ *	BUGS: When used in a module (which arguably shouldnt happen)
   	                                            ^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#698: FILE: kernel/irq.c:635:
+unsigned int parse_hex_value(const char *buffer, unsigned long count, $

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#721: FILE: kernel/irq.c:658:
+		switch (c) {
+			case '0' ... '9': c -= '0'; break;
+			case 'a' ... 'f': c -= 'a' - 10; break;
+			case 'A' ... 'F': c -= 'A' - 10; break;

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#722: FILE: kernel/irq.c:659:
+			case '0' ... '9': c -= '0'; break;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#723: FILE: kernel/irq.c:660:
+			case 'a' ... 'f': c -= 'a' - 10; break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#724: FILE: kernel/irq.c:661:
+			case 'A' ... 'F': c -= 'A' - 10; break;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#743: FILE: kernel/irq.c:680:
+unsigned long irq_affinity[NR_IRQS] = { $

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#753: FILE: kernel/irq.c:690:
+	return sprintf (page, "%0" __stringify(ARCH_AFFINITY_WIDTH) "lx\n",

CHECK:SPACING: No space is necessary after a cast
#760: FILE: kernel/irq.c:697:
+	int irq = (long) data, full_count = count, err;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#787: FILE: kernel/irq.c:724:
+	if (!root_irq_dir || (irq_desc(irq)->handler == &no_irq_type) ||
+			irq_dir[irq])

CHECK:SPACING: No space is necessary after a cast
#820: FILE: kernel/irq.c:757:
+	unsigned long *mask = (unsigned long *) data;

WARNING:LINE_SPACING: Missing a blank line after declarations
#821: FILE: kernel/irq.c:758:
+	unsigned long *mask = (unsigned long *) data;
+	if (count < ARCH_AFFINITY_WIDTH + 1)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#823: FILE: kernel/irq.c:760:
+^Ireturn sprintf (page, "%0" __stringify(ARCH_AFFINITY_WIDTH) "lx\n", $

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#823: FILE: kernel/irq.c:760:
+	return sprintf (page, "%0" __stringify(ARCH_AFFINITY_WIDTH) "lx\n", 

CHECK:SPACING: No space is necessary after a cast
#830: FILE: kernel/irq.c:767:
+	unsigned long *mask = (unsigned long *) data, full_count = count, err;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000386192.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 22 errors, 26 warnings, 9 checks, 817 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000386192.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
