WARNING:EMAIL_SUBJECT: A patch subject line should describe the change not the tool that found it
#16: 
Subject: [PATCH][SPARSE] Runtime detection of gcc include paths

Naming the tool that found the issue is not very useful in the
subject line.  A good subject line summarizes the change that
the patch brings.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#42: 
# This is a BitKeeper generated patch for the following project:

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#43: 
# Project Name: TSCT - The Silly C Tokenizer

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#44: 
# This patch format is intended for GNU patch command version 2.5 or higher.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#44: 
# This patch format is intended for GNU patch command version 2.5 or higher.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#45: 
# This patch includes the following deltas:

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#46: 
#	           ChangeSet	1.355   -> 1.356  

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#47: 
#	            Makefile	1.23    -> 1.24   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#48: 
#	       pre-process.c	1.65    -> 1.67   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#49: 
#

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#50: 
# The following is the BitKeeper ChangeSet Log

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#51: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#52: 
# 03/06/08	ryan@mythryan2.(none)	1.356

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#53: 
# Rework the way gcc internal includes are found to be done entirely at run-time.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#54: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#55: 
#

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#57: 
--- a/Makefile	Sun Jun  8 21:04:32 2003

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#64: FILE: Makefile:35:
+pre-process.o: $(LIB_H) $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:REPEATED_WORD: Possible repeated word: 'core'
#77: FILE: Makefile:45:
+	rm -f *.[oasi] core core.[0-9]* $(PROGRAMS)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#95: FILE: pre-process.c:47:
+const char *gcc_includepath[INCLUDEPATHS+1] = {
                                         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:FUNCTION_WITHOUT_ARGS: Bad function definition - int init_gcc_include_path() should probably be int init_gcc_include_path(void)
#104: FILE: pre-process.c:533:
+static int init_gcc_include_path()

Function declarations without arguments like::

  int foo()

should be::

  int foo(void)

WARNING:ONE_SEMICOLON: Statements terminations use 1 semicolon
#109: FILE: pre-process.c:538:
+	char buffer[128];;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#114: FILE: pre-process.c:543:
+		strncpy(cc,s,127);
 		          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#114: FILE: pre-process.c:543:
+		strncpy(cc,s,127);
 		            ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#115: FILE: pre-process.c:544:
+		cc[127]='\0';
 		       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#118: FILE: pre-process.c:547:
+		strcpy(cc,"gcc");
 		         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#121: FILE: pre-process.c:550:
+	snprintf(cmd,256,"%s --print-file-name=include",cc);
 	            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#121: FILE: pre-process.c:550:
+	snprintf(cmd,256,"%s --print-file-name=include",cc);
 	                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#121: FILE: pre-process.c:550:
+	snprintf(cmd,256,"%s --print-file-name=include",cc);
 	                                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#123: FILE: pre-process.c:552:
+	p = popen(cmd,"r");
 	             ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#135: FILE: pre-process.c:564:
+	int includes = 0;
+	do {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#136: FILE: pre-process.c:565:
+		s = fgets(buffer,127,p);
 		                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#136: FILE: pre-process.c:565:
+		s = fgets(buffer,127,p);
 		                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#138: FILE: pre-process.c:567:
+			buffer[strlen(buffer)-1] = '\0';
 			                     ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#139: FILE: pre-process.c:568:
+^I^I^Igcc_includepath[includes] = strdup(buffer); $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#151: FILE: pre-process.c:580:
+
+

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#152: FILE: pre-process.c:581:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#154: FILE: pre-process.c:583:
+
+

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#155: FILE: pre-process.c:584:
+static int do_gcc_include_path(struct token *head, struct token *token, const char *filename, int flen)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#157: FILE: pre-process.c:586:
+	static int initialized = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:LINE_SPACING: Missing a blank line after declarations
#158: FILE: pre-process.c:587:
+	static int initialized = 0;
+	if (!initialized) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#163: FILE: pre-process.c:592:
+	return do_include_path(gcc_includepath,head,token,filename,flen);
 	                                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#163: FILE: pre-process.c:592:
+	return do_include_path(gcc_includepath,head,token,filename,flen);
 	                                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#163: FILE: pre-process.c:592:
+	return do_include_path(gcc_includepath,head,token,filename,flen);
 	                                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#163: FILE: pre-process.c:592:
+	return do_include_path(gcc_includepath,head,token,filename,flen);
 	                                                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#173: FILE: pre-process.c:619:
+	if (do_gcc_include_path(head,token,filename,flen))
 	                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#173: FILE: pre-process.c:619:
+	if (do_gcc_include_path(head,token,filename,flen))
 	                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#173: FILE: pre-process.c:619:
+	if (do_gcc_include_path(head,token,filename,flen))
 	                                           ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000364125.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 22 errors, 21 warnings, 5 checks, 109 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000364125.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
