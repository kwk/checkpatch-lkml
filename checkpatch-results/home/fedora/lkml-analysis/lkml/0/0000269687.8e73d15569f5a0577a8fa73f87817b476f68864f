WARNING:TYPO_SPELLING: 'opertion' may be misspelled - perhaps 'operation'?
#24: 
This patch adds intent opertion and intent release callback to
                       ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#27: 
of use of uninitialized intents.  Initialize intents on usage, fill in correct

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#55: FILE: include/linux/namei.h:11:
+#define IT_CREAT	(1<<1)
                 	  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BIT_MACRO: Prefer using the BIT macro
#55: FILE: include/linux/namei.h:11:
+#define IT_CREAT	(1<<1)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#56: FILE: include/linux/namei.h:12:
+#define IT_READDIR	(1<<2)
                   	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#56: FILE: include/linux/namei.h:12:
+#define IT_READDIR	(1<<2)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#57: FILE: include/linux/namei.h:13:
+#define IT_GETATTR	(1<<3)
                   	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#57: FILE: include/linux/namei.h:13:
+#define IT_GETATTR	(1<<3)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#58: FILE: include/linux/namei.h:14:
+#define IT_LOOKUP	(1<<4)
                  	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#58: FILE: include/linux/namei.h:14:
+#define IT_LOOKUP	(1<<4)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#59: FILE: include/linux/namei.h:15:
+#define IT_UNLINK	(1<<5)
                  	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#59: FILE: include/linux/namei.h:15:
+#define IT_UNLINK	(1<<5)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#60: FILE: include/linux/namei.h:16:
+#define IT_TRUNC	(1<<6)
                 	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#60: FILE: include/linux/namei.h:16:
+#define IT_TRUNC	(1<<6)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#61: FILE: include/linux/namei.h:17:
+#define IT_GETXATTR	(1<<7)
                    	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#61: FILE: include/linux/namei.h:17:
+#define IT_GETXATTR	(1<<7)

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct open_intent *' should also have an identifier name
#68: FILE: include/linux/namei.h:24:
+	void	(*op_release)(struct open_intent *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#90: FILE: include/linux/namei.h:79:
+extern int FASTCALL(__user_walk_it(const char __user *, unsigned, struct nameidata *));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#90: FILE: include/linux/namei.h:79:
+extern int FASTCALL(__user_walk_it(const char __user *, unsigned, struct nameidata *));

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char __user *' should also have an identifier name
#90: FILE: include/linux/namei.h:79:
+extern int FASTCALL(__user_walk_it(const char __user *, unsigned, struct nameidata *));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned' should also have an identifier name
#90: FILE: include/linux/namei.h:79:
+extern int FASTCALL(__user_walk_it(const char __user *, unsigned, struct nameidata *));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nameidata *' should also have an identifier name
#90: FILE: include/linux/namei.h:79:
+extern int FASTCALL(__user_walk_it(const char __user *, unsigned, struct nameidata *));

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#93: FILE: include/linux/namei.h:82:
+#define user_path_walk_it(name,nd) \
                                ^^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#93: FILE: include/linux/namei.h:82:
+#define user_path_walk_it(name,nd) \
                               ^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#94: FILE: include/linux/namei.h:83:
+	__user_walk_it(name, LOOKUP_FOLLOW, nd)
 	                                    ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#97: FILE: include/linux/namei.h:86:
+#define user_path_walk_link_it(name,nd) \
                                     ^^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#97: FILE: include/linux/namei.h:86:
+#define user_path_walk_link_it(name,nd) \
                                    ^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#98: FILE: include/linux/namei.h:87:
+	__user_walk_it(name, 0, nd)
 	                        ^^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#100: FILE: include/linux/namei.h:89:
+extern int FASTCALL(path_lookup_it(const char *, unsigned, struct nameidata *));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#100: FILE: include/linux/namei.h:89:
+extern int FASTCALL(path_lookup_it(const char *, unsigned, struct nameidata *));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#100: FILE: include/linux/namei.h:89:
+extern int FASTCALL(path_lookup_it(const char *, unsigned, struct nameidata *));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned' should also have an identifier name
#100: FILE: include/linux/namei.h:89:
+extern int FASTCALL(path_lookup_it(const char *, unsigned, struct nameidata *));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nameidata *' should also have an identifier name
#100: FILE: include/linux/namei.h:89:
+extern int FASTCALL(path_lookup_it(const char *, unsigned, struct nameidata *));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#102: FILE: include/linux/namei.h:91:
+extern int FASTCALL(path_walk_it(const char *, struct nameidata *));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#102: FILE: include/linux/namei.h:91:
+extern int FASTCALL(path_walk_it(const char *, struct nameidata *));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nameidata *' should also have an identifier name
#102: FILE: include/linux/namei.h:91:
+extern int FASTCALL(path_walk_it(const char *, struct nameidata *));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#105: FILE: include/linux/namei.h:94:
+extern void intent_release(struct open_intent *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct open_intent *' should also have an identifier name
#105: FILE: include/linux/namei.h:94:
+extern void intent_release(struct open_intent *);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#125: FILE: include/linux/fs.h:1205:
+extern struct file * dentry_open_it(struct dentry *, struct vfsmount *, int, struct open_intent *);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#125: FILE: include/linux/fs.h:1205:
+extern struct file * dentry_open_it(struct dentry *, struct vfsmount *, int, struct open_intent *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#125: FILE: include/linux/fs.h:1205:
+extern struct file * dentry_open_it(struct dentry *, struct vfsmount *, int, struct open_intent *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfsmount *' should also have an identifier name
#125: FILE: include/linux/fs.h:1205:
+extern struct file * dentry_open_it(struct dentry *, struct vfsmount *, int, struct open_intent *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#125: FILE: include/linux/fs.h:1205:
+extern struct file * dentry_open_it(struct dentry *, struct vfsmount *, int, struct open_intent *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct open_intent *' should also have an identifier name
#125: FILE: include/linux/fs.h:1205:
+extern struct file * dentry_open_it(struct dentry *, struct vfsmount *, int, struct open_intent *);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#157: FILE: fs/namei.c:804:
+int fastcall path_walk_it(const char * name, struct nameidata *nd)
                                                                ^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#157: FILE: fs/namei.c:804:
+int fastcall path_walk_it(const char * name, struct nameidata *nd)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#160: FILE: fs/namei.c:807:
+	return link_path_walk(name, nd);
 	                            ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#173: FILE: fs/namei.c:820:
+	if (path_walk_it(name, nd))
 	                       ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#193: FILE: fs/namei.c:909:
+int fastcall path_lookup_it(const char *name, unsigned int flags, struct nameidata *nd)
                                                                                     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#201: FILE: fs/namei.c:945:
+int fastcall path_lookup(const char *name, unsigned int flags, struct nameidata *nd)
                                                                                  ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#204: FILE: fs/namei.c:948:
+	return path_lookup_it(name, flags, nd);
 	                                   ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#215: FILE: fs/namei.c:1001:
+struct dentry * lookup_one_len_it(const char * name, struct dentry * base, int len, struct nameidata *nd)
                                                                                                       ^^

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#215: FILE: fs/namei.c:1001:
+struct dentry * lookup_one_len_it(const char * name, struct dentry * base, int len, struct nameidata *nd)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#215: FILE: fs/namei.c:1001:
+struct dentry * lookup_one_len_it(const char * name, struct dentry * base, int len, struct nameidata *nd)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#215: FILE: fs/namei.c:1001:
+struct dentry * lookup_one_len_it(const char * name, struct dentry * base, int len, struct nameidata *nd)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#215: FILE: fs/namei.c:1001:
+struct dentry * lookup_one_len_it(const char * name, struct dentry * base, int len, struct nameidata *nd)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#224: FILE: fs/namei.c:1021:
+	return __lookup_hash(&this, base, nd);
 	                                  ^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#229: FILE: fs/namei.c:1026:
+struct dentry * lookup_one_len(const char * name, struct dentry * base, int len)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#229: FILE: fs/namei.c:1026:
+struct dentry * lookup_one_len(const char * name, struct dentry * base, int len)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#229: FILE: fs/namei.c:1026:
+struct dentry * lookup_one_len(const char * name, struct dentry * base, int len)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#242: FILE: fs/namei.c:1042:
+int fastcall __user_walk_it(const char __user *name, unsigned flags, struct nameidata *nd)
                                                                                        ^^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#242: FILE: fs/namei.c:1042:
+int fastcall __user_walk_it(const char __user *name, unsigned flags, struct nameidata *nd)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#249: FILE: fs/namei.c:1048:
+		err = path_lookup_it(tmp, flags, nd);
 		                                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#255: FILE: fs/namei.c:1054:
+int fastcall __user_walk(const char __user *name, unsigned flags, struct nameidata *nd)
                                                                                     ^^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#255: FILE: fs/namei.c:1054:
+int fastcall __user_walk(const char __user *name, unsigned flags, struct nameidata *nd)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#258: FILE: fs/namei.c:1057:
+	return __user_walk_it(name, flags, nd);
 	                                   ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#269: FILE: fs/namei.c:1344:
+		error = path_lookup_it(pathname, lookup_flags(flag), nd);
 		                                                     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#279: FILE: fs/namei.c:1354:
+	error = path_lookup_it(pathname, LOOKUP_PARENT, nd);
 	                                                ^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#305: FILE: fs/namei.c:2375:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#328: FILE: fs/open.c:219:
+	intent_init(&nd.intent.open, IT_GETATTR);
 	             ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#334: FILE: fs/open.c:224:
+	error = user_path_walk_it(path, &nd);
 	                                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#342: FILE: fs/open.c:479:
+	intent_init(&nd.intent.open, IT_GETATTR);
 	             ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#351: FILE: fs/open.c:503:
+	res = __user_walk_it(filename, LOOKUP_FOLLOW|LOOKUP_ACCESS, &nd);
 	                                                             ^^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#351: FILE: fs/open.c:503:
+	res = __user_walk_it(filename, LOOKUP_FOLLOW|LOOKUP_ACCESS, &nd);
 	                                            ^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#360: FILE: fs/open.c:525:
+	intent_init(&nd.intent.open, IT_GETATTR);
 	             ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#361: FILE: fs/open.c:526:
+	error = __user_walk_it(filename, LOOKUP_FOLLOW|LOOKUP_DIRECTORY, &nd);
 	                                                                  ^^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#361: FILE: fs/open.c:526:
+	error = __user_walk_it(filename, LOOKUP_FOLLOW|LOOKUP_DIRECTORY, &nd);
 	                                              ^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#370: FILE: fs/open.c:577:
+	intent_init(&nd.intent.open, IT_GETATTR);
 	             ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#371: FILE: fs/open.c:578:
+	error = __user_walk_it(filename, LOOKUP_FOLLOW | LOOKUP_DIRECTORY | LOOKUP_NOALT, &nd);
 	                                                                                   ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#379: FILE: fs/open.c:761:
+	intent_init(&nd.intent.open, IT_OPEN);
 	             ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#388: FILE: fs/open.c:771:
+		return dentry_open_it(nd.dentry, nd.mnt, flags, &nd.intent.open);
 		                      ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#388: FILE: fs/open.c:771:
+		return dentry_open_it(nd.dentry, nd.mnt, flags, &nd.intent.open);
 		                                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#388: FILE: fs/open.c:771:
+		return dentry_open_it(nd.dentry, nd.mnt, flags, &nd.intent.open);
 		                                                 ^^

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#396: FILE: fs/open.c:778:
+struct file *dentry_open_it(struct dentry *dentry, struct vfsmount *mnt, int flags, struct open_intent *it)

WARNING:LINE_SPACING: Missing a blank line after declarations
#429: FILE: fs/open.c:844:
+	struct open_intent it;
+	intent_init(&it, IT_LOOKUP);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#452: FILE: fs/stat.c:68:
+	intent_init(&nd.intent.open, IT_GETATTR);
 	             ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#455: FILE: fs/stat.c:70:
+	error = user_path_walk_it(name, &nd);
 	                                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#463: FILE: fs/stat.c:84:
+	intent_init(&nd.intent.open, IT_GETATTR);
 	             ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#466: FILE: fs/stat.c:86:
+	error = user_path_walk_link_it(name, &nd);
 	                                      ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#474: FILE: fs/stat.c:100:
+	struct nameidata nd;
 	                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#475: FILE: fs/stat.c:101:
+	intent_init(&nd.intent.open, IT_GETATTR);
 	             ^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#475: FILE: fs/stat.c:101:
+	struct nameidata nd;
+	intent_init(&nd.intent.open, IT_GETATTR);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#479: FILE: fs/stat.c:105:
+		intent_release(&nd.intent.open);
 		                ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#503: FILE: fs/exec.c:124:
+	intent_init(&nd.intent.open, IT_OPEN);
 	             ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#506: FILE: fs/exec.c:126:
+	error = user_path_walk_it(library, &nd);
 	                                    ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#515: FILE: fs/exec.c:138:
+	file = dentry_open_it(nd.dentry, nd.mnt, O_RDONLY, &nd.intent.open);
 	                      ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#515: FILE: fs/exec.c:138:
+	file = dentry_open_it(nd.dentry, nd.mnt, O_RDONLY, &nd.intent.open);
 	                                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#515: FILE: fs/exec.c:138:
+	file = dentry_open_it(nd.dentry, nd.mnt, O_RDONLY, &nd.intent.open);
 	                                                    ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#523: FILE: fs/exec.c:478:
+	intent_init(&nd.intent.open, IT_OPEN);
 	             ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#526: FILE: fs/exec.c:480:
+	err = path_lookup_it(name, LOOKUP_FOLLOW, &nd);
 	                                           ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#535: FILE: fs/exec.c:493:
+				file = dentry_open_it(nd.dentry, nd.mnt, O_RDONLY, &nd.intent.open);
 				                      ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#535: FILE: fs/exec.c:493:
+				file = dentry_open_it(nd.dentry, nd.mnt, O_RDONLY, &nd.intent.open);
 				                                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#535: FILE: fs/exec.c:493:
+				file = dentry_open_it(nd.dentry, nd.mnt, O_RDONLY, &nd.intent.open);
 				                                                    ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#548: FILE: fs/xattr.c:164:
+	intent_init(&nd.intent.open, IT_GETXATTR);
 	             ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#549: FILE: fs/xattr.c:165:
+	error = user_path_walk_it(path, &nd);
 	                                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#558: FILE: fs/xattr.c:180:
+	intent_init(&nd.intent.open, IT_GETXATTR);
 	             ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#559: FILE: fs/xattr.c:181:
+	error = user_path_walk_link_it(path, &nd);
 	                                      ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#568: FILE: fs/xattr.c:247:
+	intent_init(&nd.intent.open, IT_GETXATTR);
 	             ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#569: FILE: fs/xattr.c:248:
+	error = user_path_walk_it(path, &nd);
 	                                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#578: FILE: fs/xattr.c:262:
+	intent_init(&nd.intent.open, IT_GETXATTR);
 	             ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#579: FILE: fs/xattr.c:263:
+	error = user_path_walk_link_it(path, &nd);
 	                                      ^^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000269687.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 10 errors, 79 warnings, 22 checks, 470 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000269687.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
