WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#35: 
> A 2GB x86-64 desktop system here is currently swapping itself to death after

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#190: FILE: fs/dcache.c:86:
+		BUG_ON(page->d_inuse_count > page->dcount);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#194: FILE: fs/dcache.c:90:
+		BUG_ON(page->d_inuse_count < 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#236: FILE: fs/dcache.c:132:
+	BUG_ON(page->dcount < 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#319: FILE: fs/dcache.c:848:
+	BUG_ON(page->dcount > MAX_DENTRIES_PER_PAGE);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#446: FILE: include/linux/dcache.h:243:
+extern void get_dcache_lru(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:BAD_SIGN_OFF: Duplicate signature
#540: 
Signed-off-by: Bharata B Rao <bharata@in.ibm.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'shrinker' may be better as '(shrinker)' to avoid precedence issues
#651: FILE: include/linux/mm.h:810:
+#define shrinker_stat_add(shrinker, field, addnd)		\
+	do {							\
+		preempt_disable();				\
+		(per_cpu_ptr(shrinker->s_stats,			\
+			smp_processor_id())->field += addnd);	\
+		preempt_enable();				\
+	} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'field' may be better as '(field)' to avoid precedence issues
#651: FILE: include/linux/mm.h:810:
+#define shrinker_stat_add(shrinker, field, addnd)		\
+	do {							\
+		preempt_disable();				\
+		(per_cpu_ptr(shrinker->s_stats,			\
+			smp_processor_id())->field += addnd);	\
+		preempt_enable();				\
+	} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'shrinker' may be better as '(shrinker)' to avoid precedence issues
#659: FILE: include/linux/mm.h:818:
+#define shrinker_stat_read(shrinker, field)				\
+({									\
+	typeof(shrinker->s_stats->field) res = 0;			\
+	int i;								\
+	for (i=0; i < NR_CPUS; i++) {					\
+		if (!cpu_possible(i))					\
+			continue;					\
+		res += per_cpu_ptr(shrinker->s_stats, i)->field;	\
+	}								\
+	res;								\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'field' - possible side-effects?
#659: FILE: include/linux/mm.h:818:
+#define shrinker_stat_read(shrinker, field)				\
+({									\
+	typeof(shrinker->s_stats->field) res = 0;			\
+	int i;								\
+	for (i=0; i < NR_CPUS; i++) {					\
+		if (!cpu_possible(i))					\
+			continue;					\
+		res += per_cpu_ptr(shrinker->s_stats, i)->field;	\
+	}								\
+	res;								\
+})

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'field' may be better as '(field)' to avoid precedence issues
#659: FILE: include/linux/mm.h:818:
+#define shrinker_stat_read(shrinker, field)				\
+({									\
+	typeof(shrinker->s_stats->field) res = 0;			\
+	int i;								\
+	for (i=0; i < NR_CPUS; i++) {					\
+		if (!cpu_possible(i))					\
+			continue;					\
+		res += per_cpu_ptr(shrinker->s_stats, i)->field;	\
+	}								\
+	res;								\
+})

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#663: FILE: include/linux/mm.h:822:
+	for (i=0; i < NR_CPUS; i++) {					\
 	      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#663: FILE: include/linux/mm.h:822:
+	for (i=0; i < NR_CPUS; i++) {					\

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#682: FILE: include/linux/slab.h:191:
+extern void kmem_set_shrinker(kmem_cache_t *cachep, struct shrinker *shrinker);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#715: FILE: mm/slab.c:3809:
+		seq_printf(m, " : shrinker stat %7lu %7lu",
+			shrinker_stat_read(cachep->shrinker, nr_req),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#779: FILE: mm/vmscan.c:213:
+				shrinker_stat_add(shrinker, nr_freed,
+					(nr_before - shrink_ret));

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000090173.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 7 warnings, 9 checks, 536 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000090173.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
