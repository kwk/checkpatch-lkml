WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#28: 
This is done by a per-cpu vxtime structure that stores the last TSC and HPET

CHECK:BRACES: braces {} should be used on all arms of this statement
#79: FILE: arch/x86_64/kernel/process.c:123:
+		if (!need_resched()) {
[...]
-		else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#84: FILE: arch/x86_64/kernel/process.c:127:
+		} else

ERROR:TRAILING_WHITESPACE: trailing whitespace
#93: FILE: arch/x86_64/kernel/process.c:570:
+^Iint apicid, cpu = smp_processor_id();  $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "next_p->mm"
#108: FILE: arch/x86_64/kernel/process.c:674:
+	if (vxtime.pcpu[apicid].need_update == 1 && next_p->mm != NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:TRAILING_WHITESPACE: trailing whitespace
#170: FILE: arch/x86_64/kernel/time.c:645:
+^I^I}^I$

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#192: FILE: arch/x86_64/kernel/time.c:955:
+	for (i = 0; i < NR_CPUS; i++)

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/smp.h> instead of <asm/smp.h>
#247: FILE: arch/x86_64/kernel/vsyscall.c:42:
+#include <asm/smp.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#258: FILE: arch/x86_64/kernel/vsyscall.c:55:
+extern unsigned long hpet_tick;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#260: FILE: arch/x86_64/kernel/vsyscall.c:57:
+extern unsigned long vxtime_hz;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#273: FILE: arch/x86_64/kernel/vsyscall.c:74:
+	__asm __volatile("cpuid" : "=b" (cpu) : "a" (1) : "cx", "dx");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#320: FILE: arch/x86_64/kernel/vsyscall.c:104:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#364: FILE: arch/x86_64/kernel/vsyscall.c:148:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#365: FILE: arch/x86_64/kernel/vsyscall.c:149:
+	
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#377: FILE: arch/x86_64/kernel/vsyscall.c:161:
+		for (i = 0; i < NR_CPUS; i++)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#379: FILE: arch/x86_64/kernel/vsyscall.c:163:
+^I$

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#382: FILE: arch/x86_64/kernel/vsyscall.c:166:
+	return (0);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

ERROR:DEFINE_ARCH_HAS: #define of 'ARCH_HAVE_CLOCK_WAS_SET' is wrong - use Kconfig variables or standard guards instead
#448: FILE: include/asm-x86_64/vsyscall.h:77:
+#define ARCH_HAVE_CLOCK_WAS_SET 1

The ARCH_HAS_xyz and ARCH_HAVE_xyz patterns are wrong.

For big conceptual features use Kconfig symbols instead.  And for
smaller things where we have compatibility fallback functions but
want architectures able to override them with optimized ones, we
should either use weak functions (appropriate for some cases), or
the symbol that protects them should be the same symbol we use.

See: https://lore.kernel.org/lkml/CA+55aFycQ9XJvEOsiM3txHL5bjUc8CeKWJNR_H+MiicaddB42Q@mail.gmail.com/

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000018747.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 7 errors, 6 warnings, 5 checks, 370 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000018747.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
