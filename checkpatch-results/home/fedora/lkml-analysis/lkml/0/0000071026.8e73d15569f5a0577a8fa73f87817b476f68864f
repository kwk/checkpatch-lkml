ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#199: FILE: kernel/audit.h:19:
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#248: FILE: kernel/audit.h:103:
+	return (ino & (AUDIT_INODE_BUCKETS-1));
 	                                  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#251: FILE: kernel/audit.h:106:
+extern int audit_comparator(const u32 left, const u32 op, const u32 right);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#252: FILE: kernel/audit.h:107:
+extern int audit_compare_dname_path(const char *dname, const char *path);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#269: FILE: kernel/audit.h:125:
+extern void audit_free_parent(struct inotify_watch *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inotify_watch *' should also have an identifier name
#269: FILE: kernel/audit.h:125:
+extern void audit_free_parent(struct inotify_watch *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#270: FILE: kernel/audit.h:126:
+extern void audit_handle_ievent(struct inotify_watch *, u32, u32, u32,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inotify_watch *' should also have an identifier name
#270: FILE: kernel/audit.h:126:
+extern void audit_handle_ievent(struct inotify_watch *, u32, u32, u32,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#270: FILE: kernel/audit.h:126:
+extern void audit_handle_ievent(struct inotify_watch *, u32, u32, u32,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#270: FILE: kernel/audit.h:126:
+extern void audit_handle_ievent(struct inotify_watch *, u32, u32, u32,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#270: FILE: kernel/audit.h:126:
+extern void audit_handle_ievent(struct inotify_watch *, u32, u32, u32,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#270: FILE: kernel/audit.h:126:
+extern void audit_handle_ievent(struct inotify_watch *, u32, u32, u32,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#270: FILE: kernel/audit.h:126:
+extern void audit_handle_ievent(struct inotify_watch *, u32, u32, u32,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#273: FILE: kernel/audit.h:129:
+extern enum audit_state audit_filter_inodes(struct task_struct *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#273: FILE: kernel/audit.h:129:
+extern enum audit_state audit_filter_inodes(struct task_struct *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct audit_context *' should also have an identifier name
#273: FILE: kernel/audit.h:129:
+extern enum audit_state audit_filter_inodes(struct task_struct *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#275: FILE: kernel/audit.h:131:
+extern void audit_set_auditable(struct audit_context *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct audit_context *' should also have an identifier name
#275: FILE: kernel/audit.h:131:
+extern void audit_set_auditable(struct audit_context *);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#303: FILE: kernel/auditfilter.c:38:
+ * ^I^ISynchronizes writes and blocking reads of audit's filterlist$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#304: FILE: kernel/auditfilter.c:39:
+ * ^I^Idata.  Rcu is used to traverse the filterlist and access$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#305: FILE: kernel/auditfilter.c:40:
+ * ^I^Icontents of structs audit_entry, audit_watch and opaque$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#306: FILE: kernel/auditfilter.c:41:
+ * ^I^Iselinux rules during filtering.  If modified, these structures$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#307: FILE: kernel/auditfilter.c:42:
+ * ^I^Imust be copied and replace their counterparts in the filterlist.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#308: FILE: kernel/auditfilter.c:43:
+ * ^I^IAn audit_parent struct is not accessed during filtering, so may$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#309: FILE: kernel/auditfilter.c:44:
+ * ^I^Ibe written directly provided audit_filter_mutex is held.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#316: FILE: kernel/auditfilter.c:51:
+ * ^Ievent.  Each audit_watch holds a reference to its associated parent.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#319: FILE: kernel/auditfilter.c:54:
+ * ^Iaudit_remove_watch().  Additionally, an audit_watch may exist$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#320: FILE: kernel/auditfilter.c:55:
+ * ^Itemporarily to assist in searching existing filter data.  Each$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#321: FILE: kernel/auditfilter.c:56:
+ * ^Iaudit_krule holds a reference to its associated watch.$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#328: FILE: kernel/auditfilter.c:63:
+	unsigned		flags;	/* status flags */

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#353: FILE: kernel/auditfilter.c:93:
+extern struct inotify_handle *audit_ih;

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#356: FILE: kernel/auditfilter.c:96:
+#define AUDIT_IN_WATCH IN_MOVE|IN_CREATE|IN_DELETE|IN_DELETE_SELF|IN_MOVE_SELF
                               ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#356: FILE: kernel/auditfilter.c:96:
+#define AUDIT_IN_WATCH IN_MOVE|IN_CREATE|IN_DELETE|IN_DELETE_SELF|IN_MOVE_SELF
                                         ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#356: FILE: kernel/auditfilter.c:96:
+#define AUDIT_IN_WATCH IN_MOVE|IN_CREATE|IN_DELETE|IN_DELETE_SELF|IN_MOVE_SELF
                                                   ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#356: FILE: kernel/auditfilter.c:96:
+#define AUDIT_IN_WATCH IN_MOVE|IN_CREATE|IN_DELETE|IN_DELETE_SELF|IN_MOVE_SELF
                                                                  ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#356: FILE: kernel/auditfilter.c:96:
+#define AUDIT_IN_WATCH IN_MOVE|IN_CREATE|IN_DELETE|IN_DELETE_SELF|IN_MOVE_SELF

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#474: FILE: kernel/auditfilter.c:263:
+	if (path[0] != '/' || path[len-1] == '/' ||
 	                              ^

WARNING:LIKELY_MISUSE: nested (un)?likely() calls, IS_ERR already uses unlikely() internally
#481: FILE: kernel/auditfilter.c:270:
+	if (unlikely(IS_ERR(watch)))

ERROR:SPACING: space required before the open parenthesis '('
#516: FILE: kernel/auditfilter.c:352:
+		switch(f->type) {

ERROR:SPACING: space required before the open parenthesis '('
#538: FILE: kernel/auditfilter.c:383:
+		switch(f->op) {

ERROR:SPACING: space required before the open parenthesis '('
#585: FILE: kernel/auditfilter.c:480:
+		switch(f->op) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#622: FILE: kernel/auditfilter.c:627:
+ * to an empty list and wlist is undefined. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:LIKELY_MISUSE: nested (un)?likely() calls, IS_ERR already uses unlikely() internally
#633: FILE: kernel/auditfilter.c:638:
+	if (unlikely(IS_ERR(new))) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#658: FILE: kernel/auditfilter.c:685:
+ * the initial copy. */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#690: FILE: kernel/auditfilter.c:740:
+				      unsigned long ino, unsigned invalidating)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#703: FILE: kernel/auditfilter.c:753:
+		 * filtering now, so we don't omit records. */

WARNING:LIKELY_MISUSE: nested (un)?likely() calls, IS_ERR already uses unlikely() internally
#709: FILE: kernel/auditfilter.c:759:
+		if (unlikely(IS_ERR(nwatch))) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#718: FILE: kernel/auditfilter.c:768:
+		list_for_each_entry_safe(r, nextr, &owatch->rules, rlist) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#724: FILE: kernel/auditfilter.c:774:
+			if (unlikely(IS_ERR(nentry)))
[...]
+			else {
[...]

WARNING:LIKELY_MISUSE: nested (un)?likely() calls, IS_ERR already uses unlikely() internally
#724: FILE: kernel/auditfilter.c:774:
+			if (unlikely(IS_ERR(nentry)))

CHECK:BRACES: Unbalanced braces around else statement
#726: FILE: kernel/auditfilter.c:776:
+			else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#728: FILE: kernel/auditfilter.c:778:
+				int h = audit_hash_ino((u32)ino);
+				list_add(&nentry->rule.rlist, &nwatch->rules);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:RETURN_VOID: void function return statements are not generally useful
#751: FILE: kernel/auditfilter.c:801:
+	return;
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#770: FILE: kernel/auditfilter.c:820:
+			audit_log(NULL, GFP_KERNEL, AUDIT_CONFIG_CHANGE,
+				 "audit implicitly removed rule from list=%d\n",

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#779: FILE: kernel/auditfilter.c:829:
+ * Generates an IN_IGNORED event. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#842: FILE: kernel/auditfilter.c:892:
+ * Caller must hold audit_filter_mutex. */

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#860: FILE: kernel/auditfilter.c:910:
+		krule->watch = watch = w;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#874: FILE: kernel/auditfilter.c:924:
+ * Caller must hold audit_filter_mutex. */

CHECK:BRACES: braces {} should be used on all arms of this statement
#896: FILE: kernel/auditfilter.c:946:
+	if (inotify_find_watch(audit_ih, ndp->dentry->d_inode, &i_watch) < 0) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#903: FILE: kernel/auditfilter.c:953:
+	} else

ERROR:CODE_INDENT: code indent should use tabs where possible
#979: FILE: kernel/auditfilter.c:1023:
+ ^Ireturn 0;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#979: FILE: kernel/auditfilter.c:1023:
+ ^Ireturn 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#979: FILE: kernel/auditfilter.c:1023:
+ ^Ireturn 0;$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#994: FILE: kernel/auditfilter.c:1034:
+ * Caller must hold audit_filter_mutex. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1026: FILE: kernel/auditfilter.c:1060:
+					 * audit_inotify_unregister(). */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1090: FILE: kernel/auditfilter.c:1123:
+	 * iterator to sync with list writers. */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1106: FILE: kernel/auditfilter.c:1146:
+			skb = audit_make_reply(pid, seq, AUDIT_LIST, 0, 1,
+					 rule, sizeof(*rule));

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1122: FILE: kernel/auditfilter.c:1165:
+	 * iterator to sync with list writers. */

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1137: FILE: kernel/auditfilter.c:1180:
+	for (i=0; i< AUDIT_INODE_BUCKETS; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxW)
#1137: FILE: kernel/auditfilter.c:1180:
+	for (i=0; i< AUDIT_INODE_BUCKETS; i++) {
 	           ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1145: FILE: kernel/auditfilter.c:1188:
+			skb = audit_make_reply(pid, seq, AUDIT_LIST_RULES, 0, 1,
+					 data, sizeof(*data) + data->buflen);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1175: FILE: kernel/auditfilter.c:1340:
+ * return of 0 indicates a match. */

CHECK:BRACES: braces {} should be used on all arms of this statement
#1196: FILE: kernel/auditfilter.c:1361:
+	if (p < path)
[...]
+	else if (p > path) {
[...]

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#1201: FILE: kernel/auditfilter.c:1366:
+			return 1;
+		else

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1265: FILE: kernel/auditfilter.c:1531:
+	if (mask & (IN_CREATE|IN_MOVED_TO) && inode)
 	                     ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1268: FILE: kernel/auditfilter.c:1534:
+	else if (mask & (IN_DELETE|IN_MOVED_FROM))
 	                          ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1271: FILE: kernel/auditfilter.c:1537:
+	else if (mask & (IN_DELETE_SELF|IN_UNMOUNT))
 	                               ^

ERROR:SPACING: space required before the open parenthesis '('
#1274: FILE: kernel/auditfilter.c:1540:
+	else if(mask & IN_MOVE_SELF) {

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000071026.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 9 errors, 44 warnings, 25 checks, 1347 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000071026.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
