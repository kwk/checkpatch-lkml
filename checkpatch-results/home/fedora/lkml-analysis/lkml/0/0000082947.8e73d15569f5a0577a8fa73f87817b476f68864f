WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#54: FILE: mm/mem_init.c:650:
+			printk("start_pfn %lu >= %lu\n", early_node_map[i].start_pfn,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#55: FILE: mm/mem_init.c:651:
+			printk("start_pfn %lu >= %lu\n", early_node_map[i].start_pfn,
+								max_low_pfn);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#61: FILE: mm/mem_init.c:656:
+			printk("end_pfn %lu going back to %lu\n", early_node_map[i].end_pfn,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#62: FILE: mm/mem_init.c:657:
+			printk("end_pfn %lu going back to %lu\n", early_node_map[i].end_pfn,
+									max_low_pfn);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#67: FILE: mm/mem_init.c:662:
+		printk("free_bootmem_node(%d, %lu, %lu) :::: pfn ranges (%d, %lu, %lu)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#68: FILE: mm/mem_init.c:663:
+		printk("free_bootmem_node(%d, %lu, %lu) :::: pfn ranges (%d, %lu, %lu)\n",
+				early_node_map[i].nid,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#81: FILE: mm/mem_init.c:677:
+		printk("memory_present(%d, %lu, %lu)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#82: FILE: mm/mem_init.c:678:
+		printk("memory_present(%d, %lu, %lu)\n",
+			early_node_map[i].nid,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#96: FILE: mm/mem_init.c:742:
+	printk("__absent_pages_in_range(%d, %lu, %lu) = ", nid,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#97: FILE: mm/mem_init.c:743:
+	printk("__absent_pages_in_range(%d, %lu, %lu) = ", nid,
+					range_start_pfn, range_end_pfn);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#105: FILE: mm/mem_init.c:771:
+	printk("%lu\n", hole_pages);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#114: FILE: mm/mem_init.c:935:
+	printk("add_active_range(%d, %lu, %lu): ",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'add_active_range', this function's name, in a string
#114: FILE: mm/mem_init.c:935:
+	printk("add_active_range(%d, %lu, %lu): ",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#115: FILE: mm/mem_init.c:936:
+	printk("add_active_range(%d, %lu, %lu): ",
+			nid, start_pfn, end_pfn);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#126: FILE: mm/mem_init.c:946:
+			printk("Existing\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#133: FILE: mm/mem_init.c:953:
+			printk("Merging forward\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#141: FILE: mm/mem_init.c:961:
+			printk("Merging backwards\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#149: FILE: mm/mem_init.c:973:
+	printk("New\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#157: FILE: mm/mem_init.c:981:
+	printk("remove_all_active_ranges()\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#166: FILE: mm/mem_init.c:1010:
+	printk("Dumping sorted node map\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#168: FILE: mm/mem_init.c:1012:
+		printk("entry %lu: %d  %lu -> %lu\n", num,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#169: FILE: mm/mem_init.c:1013:
+		printk("entry %lu: %d  %lu -> %lu\n", num,
+				early_node_map[num].nid,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#180: FILE: mm/mem_init.c:1033:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#188: FILE: mm/mem_init.c:1047:
+	printk("find_max_pfn_with_active_regions() == %lu\n", max_pfn);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#196: FILE: mm/mem_init.c:1059:
+	printk("free_area_init_nodes(%lu, %lu, %lu, %lu)\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'free_area_init_nodes', this function's name, in a string
#196: FILE: mm/mem_init.c:1059:
+	printk("free_area_init_nodes(%lu, %lu, %lu, %lu)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#197: FILE: mm/mem_init.c:1060:
+	printk("free_area_init_nodes(%lu, %lu, %lu, %lu)\n",
+			arch_max_dma_pfn, arch_max_dma32_pfn,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#207: FILE: mm/mem_init.c:1079:
+	printk("free_area_init_nodes(): find_min_pfn = %lu\n", find_min_pfn_with_active_regions());

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'free_area_init_nodes', this function's name, in a string
#207: FILE: mm/mem_init.c:1079:
+	printk("free_area_init_nodes(): find_min_pfn = %lu\n", find_min_pfn_with_active_regions());

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000082947.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 0 errors, 20 warnings, 9 checks, 157 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000082947.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
