WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#41: 
diff -uNr test11/Documentation/filesystems/ramfs.txt test11-ramfs/Documentation/filesystems/ramfs.txt

ERROR:TRAILING_WHITESPACE: trailing whitespace
#77: FILE: Documentation/filesystems/ramfs.txt:33:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#133: FILE: fs/ramfs/inode.c:61:
+	 * arithmetic, so there's no point */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#137: FILE: fs/ramfs/inode.c:65:
+	/* It is important that at least the free counts below be
+	   signed.  free_XXX may become negative if a limit is changed

ERROR:TRAILING_WHITESPACE: trailing whitespace
#138: FILE: fs/ramfs/inode.c:66:
+^I   downwards (by a remount) below the current usage. */^I  $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#138: FILE: fs/ramfs/inode.c:66:
+	   downwards (by a remount) below the current usage. */	  

ERROR:TRAILING_WHITESPACE: trailing whitespace
#147: FILE: fs/ramfs/inode.c:75:
+^I$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around rsb->ramfs_lock
#167: FILE: fs/ramfs/inode.c:95:
+	spin_lock(&(rsb->ramfs_lock));

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around rsb->ramfs_lock
#172: FILE: fs/ramfs/inode.c:100:
+	spin_unlock(&(rsb->ramfs_lock));

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#176: FILE: fs/ramfs/inode.c:104:
+ * if there are no free inodes */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#188: FILE: fs/ramfs/inode.c:116:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#196: FILE: fs/ramfs/inode.c:124:
+^I$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#203: FILE: fs/ramfs/inode.c:131:
+ * if there are no free dentries */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#215: FILE: fs/ramfs/inode.c:143:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#223: FILE: fs/ramfs/inode.c:151:
+^I$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#232: FILE: fs/ramfs/inode.c:160:
+ * ramfs (ie. PageDirty(page) is true)  */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#242: FILE: fs/ramfs/inode.c:170:
+^I^I$

ERROR:SPACING: space prohibited after that open parenthesis '('
#243: FILE: fs/ramfs/inode.c:171:
+	if ( (rsb->free_pages > 0) &&

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rsb->free_pages > 0'
#243: FILE: fs/ramfs/inode.c:171:
+	if ( (rsb->free_pages > 0) &&
+	     ( !rsb->max_file_pages ||
+	       (inode->i_data.nrpages <= rsb->max_file_pages) ) ) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'inode->i_data.nrpages <= rsb->max_file_pages'
#243: FILE: fs/ramfs/inode.c:171:
+	if ( (rsb->free_pages > 0) &&
+	     ( !rsb->max_file_pages ||
+	       (inode->i_data.nrpages <= rsb->max_file_pages) ) ) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#244: FILE: fs/ramfs/inode.c:172:
+	if ( (rsb->free_pages > 0) &&
+	     ( !rsb->max_file_pages ||

ERROR:SPACING: space prohibited after that open parenthesis '('
#244: FILE: fs/ramfs/inode.c:172:
+	     ( !rsb->max_file_pages ||

ERROR:SPACING: space prohibited before that close parenthesis ')'
#245: FILE: fs/ramfs/inode.c:173:
+	       (inode->i_data.nrpages <= rsb->max_file_pages) ) ) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#253: FILE: fs/ramfs/inode.c:181:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#263: FILE: fs/ramfs/inode.c:191:
+^Iif (! PageDirty(page)) /* The page was never allocated $

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#263: FILE: fs/ramfs/inode.c:191:
+	if (! PageDirty(page)) /* The page was never allocated 
 	    ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#264: FILE: fs/ramfs/inode.c:192:
+	if (! PageDirty(page)) /* The page was never allocated 
+				  this can happen if it was only read */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#264: FILE: fs/ramfs/inode.c:192:
+				  this can happen if it was only read */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#270: FILE: fs/ramfs/inode.c:198:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#273: FILE: fs/ramfs/inode.c:201:
+^I$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#274: FILE: fs/ramfs/inode.c:202:
+	if (rsb->free_pages > rsb->max_pages) {
+		printk(KERN_ERR "ramfs: Error in page allocation, free_pages (%ld) > max_pages (%ld)\n", rsb->free_pages, rsb->max_pages);
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LONG_LINE: line length of 138 exceeds 100 columns
#275: FILE: fs/ramfs/inode.c:203:
+		printk(KERN_ERR "ramfs: Error in page allocation, free_pages (%ld) > max_pages (%ld)\n", rsb->free_pages, rsb->max_pages);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#275: FILE: fs/ramfs/inode.c:203:
+		printk(KERN_ERR "ramfs: Error in page allocation, free_pages (%ld) > max_pages (%ld)\n", rsb->free_pages, rsb->max_pages);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#281: FILE: fs/ramfs/inode.c:209:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#306: FILE: fs/ramfs/inode.c:264:
+	if (! ramfs_alloc_page(inode, page))
 	    ^

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#318: FILE: fs/ramfs/inode.c:275:
+	if (! ramfs_alloc_page(inode, page)) {
 	    ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#318: FILE: fs/ramfs/inode.c:275:
+	if (! ramfs_alloc_page(inode, page)) {
+		return -ENOSPC;
+	}

CHECK:SPACING: No space is necessary after a cast
#322: FILE: fs/ramfs/inode.c:279:
+	addr = (void *) kmap(page);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#346: FILE: fs/ramfs/inode.c:308:
+	struct inode * inode;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#348: FILE: fs/ramfs/inode.c:310:
+	if (! ramfs_alloc_inode(sb))
 	    ^

CHECK:BRACES: Unbalanced braces around else statement
#360: FILE: fs/ramfs/inode.c:339:
+	} else

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#375: FILE: fs/ramfs/inode.c:352:
+	struct inode * inode;

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#378: FILE: fs/ramfs/inode.c:355:
+	if (! ramfs_alloc_dentry(sb))
 	    ^

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#404: FILE: fs/ramfs/inode.c:392:
+	if (! ramfs_alloc_dentry(sb))
 	    ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#468: FILE: fs/ramfs/inode.c:515:
+static int parse_options(char * options, struct ramfs_params *p)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#477: FILE: fs/ramfs/inode.c:524:
+	for (optname = strtok(options,","); optname;
 	                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#478: FILE: fs/ramfs/inode.c:525:
+	     optname = strtok(NULL,",")) {
 	                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#479: FILE: fs/ramfs/inode.c:526:
+		if ((value = strchr(optname,'=')) != NULL) {
 		                           ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#479: FILE: fs/ramfs/inode.c:526:
+		if ((value = strchr(optname,'=')) != NULL) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#486: FILE: fs/ramfs/inode.c:533:
+			p->filepages = simple_strtoul(value, &value, 0)

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#491: FILE: fs/ramfs/inode.c:538:
+			p->pages = simple_strtoul(value, &value, 0)

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#496: FILE: fs/ramfs/inode.c:543:
+			p->inodes = simple_strtoul(value, &value, 0);

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#500: FILE: fs/ramfs/inode.c:547:
+			p->dentries = simple_strtoul(value, &value, 0);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#506: FILE: fs/ramfs/inode.c:553:
+			*(optname-1) = ',';
 			         ^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#509: FILE: fs/ramfs/inode.c:556:
+/*  ^I^Iif (ret == 0) */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#510: FILE: fs/ramfs/inode.c:557:
+/*  ^I^I^Ibreak; */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#523: FILE: fs/ramfs/inode.c:570:
+	/* By default we set the limits to be:
+	       - Allow this ramfs to take up to half of all available RAM

ERROR:CODE_INDENT: code indent should use tabs where possible
#525: FILE: fs/ramfs/inode.c:572:
+^I         the total max size, obviously)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:CODE_INDENT: code indent should use tabs where possible
#528: FILE: fs/ramfs/inode.c:575:
+^I         are never more inodes than dentries).$

WARNING:RETURN_VOID: void function return statements are not generally useful
#552: FILE: fs/ramfs/inode.c:599:
+	return;
+}

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#555: FILE: fs/ramfs/inode.c:602:
+/* reset_limits is called during a remount to change the usage limits.
+

WARNING:TYPO_SPELLING: 'suceed' may be misspelled - perhaps 'succeed'?
#556: FILE: fs/ramfs/inode.c:603:
+   This will suceed, even if the new limits are lower than current
              ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#558: FILE: fs/ramfs/inode.c:605:
+   until usage falls below the new limit */

WARNING:BRACES: braces {} are not necessary for single statement blocks
#570: FILE: fs/ramfs/inode.c:617:
+	if (p->filepages >= 0) {
+		rsb->max_file_pages = p->filepages;
+	}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#573: FILE: fs/ramfs/inode.c:620:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#574: FILE: fs/ramfs/inode.c:621:
+	
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#592: FILE: fs/ramfs/inode.c:639:
+static int ramfs_remount(struct super_block * sb, int * flags, char * data)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#592: FILE: fs/ramfs/inode.c:639:
+static int ramfs_remount(struct super_block * sb, int * flags, char * data)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#592: FILE: fs/ramfs/inode.c:639:
+static int ramfs_remount(struct super_block * sb, int * flags, char * data)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#595: FILE: fs/ramfs/inode.c:642:
+	struct ramfs_sb_info * rsb = RAMFS_SB(sb);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#602: FILE: fs/ramfs/inode.c:649:
+^Iprintk(KERN_DEBUG "ramfs: remounted with options: %s\n", $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#602: FILE: fs/ramfs/inode.c:649:
+	printk(KERN_DEBUG "ramfs: remounted with options: %s\n", 

ERROR:SPACING: space prohibited before that close parenthesis ')'
#603: FILE: fs/ramfs/inode.c:650:
+	       data ? (char *)data : "<defaults>" );

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#604: FILE: fs/ramfs/inode.c:651:
+	printk(KERN_DEBUG "ramfs: max_pages=%ld max_file_pages=%ld \

WARNING:LINE_CONTINUATIONS: Avoid line continuations in quoted strings
#604: FILE: fs/ramfs/inode.c:651:
+	printk(KERN_DEBUG "ramfs: max_pages=%ld max_file_pages=%ld \

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#617: FILE: fs/ramfs/inode.c:663:
+	commit_write:	ramfs_commit_write,
 	            ^

WARNING:INDENTED_LABEL: labels should not be indented
#617: FILE: fs/ramfs/inode.c:663:
+	commit_write:	ramfs_commit_write,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#618: FILE: fs/ramfs/inode.c:664:
+	truncatepage:	ramfs_truncatepage,
 	            ^

WARNING:INDENTED_LABEL: labels should not be indented
#618: FILE: fs/ramfs/inode.c:664:
+	truncatepage:	ramfs_truncatepage,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#626: FILE: fs/ramfs/inode.c:693:
+	delete_inode:	ramfs_delete_inode,
 	            ^

WARNING:INDENTED_LABEL: labels should not be indented
#626: FILE: fs/ramfs/inode.c:693:
+	delete_inode:	ramfs_delete_inode,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#627: FILE: fs/ramfs/inode.c:694:
+	put_super:      ramfs_put_super,
 	         ^

WARNING:INDENTED_LABEL: labels should not be indented
#627: FILE: fs/ramfs/inode.c:694:
+	put_super:      ramfs_put_super,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#628: FILE: fs/ramfs/inode.c:695:
+	remount_fs:     ramfs_remount,
 	          ^

WARNING:INDENTED_LABEL: labels should not be indented
#628: FILE: fs/ramfs/inode.c:695:
+	remount_fs:     ramfs_remount,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#639: FILE: fs/ramfs/inode.c:706:
+	struct ramfs_sb_info * rsb;

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*sb->u.generic_sbp)...) over kmalloc(sizeof(struct ramfs_sb_info)...)
#647: FILE: fs/ramfs/inode.c:714:
+	sb->u.generic_sbp = kmalloc(sizeof(struct ramfs_sb_info), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

ERROR:TRAILING_WHITESPACE: trailing whitespace
#665: FILE: fs/ramfs/inode.c:735:
+^Iprintk(KERN_DEBUG "ramfs: mounted with options: %s\n", $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#665: FILE: fs/ramfs/inode.c:735:
+	printk(KERN_DEBUG "ramfs: mounted with options: %s\n", 

ERROR:SPACING: space prohibited before that close parenthesis ')'
#666: FILE: fs/ramfs/inode.c:736:
+	       data ? (char *)data : "<defaults>" );

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#667: FILE: fs/ramfs/inode.c:737:
+	printk(KERN_DEBUG "ramfs: max_pages=%ld max_file_pages=%ld \

WARNING:LINE_CONTINUATIONS: Avoid line continuations in quoted strings
#667: FILE: fs/ramfs/inode.c:737:
+	printk(KERN_DEBUG "ramfs: max_pages=%ld max_file_pages=%ld \

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#681: FILE: include/linux/fs.h:357:
+	void (*truncatepage)(struct page *); /* called from truncate_complete_page */

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#694: FILE: mm/filemap.c:171:
+^I$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000565223.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 46 errors, 37 warnings, 11 checks, 628 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000565223.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
