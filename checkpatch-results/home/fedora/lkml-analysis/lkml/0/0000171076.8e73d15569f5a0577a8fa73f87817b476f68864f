WARNING:TYPO_SPELLING: 'controling' may be misspelled - perhaps 'controlling'?
#56: 
  by controling event masks, etc.
     ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'truely' may be misspelled - perhaps 'truly'?
#67: 
This patch isn't definitive, it's truely experimental. I've only
                                  ^^^^^^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#87: FILE: include/linux/ltt-core.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#88: FILE: include/linux/ltt-core.h:2:
+ * linux/include/linux/ltt-core.h

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#106: FILE: include/linux/ltt-core.h:20:
+	uint32_t length;

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#110: FILE: include/linux/ltt-core.h:24:
+	struct rchan_buf* rbuf;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#112: FILE: include/linux/ltt-core.h:26:
+	struct ltt_chan_buf* next;

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#115: FILE: include/linux/ltt-core.h:29:
+extern struct ltt_chan_buf* (*ltt_mux)(uint8_t cpuid, uint8_t eid, uint32_t length, char* buf);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#115: FILE: include/linux/ltt-core.h:29:
+extern struct ltt_chan_buf* (*ltt_mux)(uint8_t cpuid, uint8_t eid, uint32_t length, char* buf);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#117: FILE: include/linux/ltt-core.h:31:
+extern struct dentry* ltt_root_dentry; /* Root of the directory tree */

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#119: FILE: include/linux/ltt-core.h:33:
+extern void ltt_log_event(uint8_t eid, uint32_t length, char* buf);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#119: FILE: include/linux/ltt-core.h:33:
+extern void ltt_log_event(uint8_t eid, uint32_t length, char* buf);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#119: FILE: include/linux/ltt-core.h:33:
+extern void ltt_log_event(uint8_t eid, uint32_t length, char* buf);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#146: FILE: init/Kconfig:258:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#155: FILE: kernel/ltt-core.c:1:
+/*

ERROR:GLOBAL_INITIALISERS: do not initialise globals to NULL
#182: FILE: kernel/ltt-core.c:28:
+struct dentry* ltt_root_dentry = NULL;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#182: FILE: kernel/ltt-core.c:28:
+struct dentry* ltt_root_dentry = NULL;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#185: FILE: kernel/ltt-core.c:31:
+/* This is the base function that all event specific functions will use to
+   actually write the log record. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#185: FILE: kernel/ltt-core.c:31:
+   actually write the log record. */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#186: FILE: kernel/ltt-core.c:32:
+void ltt_log_event(uint8_t eid,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#187: FILE: kernel/ltt-core.c:33:
+		   uint32_t length,

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#188: FILE: kernel/ltt-core.c:34:
+		   char* buf)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#190: FILE: kernel/ltt-core.c:36:
+	uint8_t cpu;

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#193: FILE: kernel/ltt-core.c:39:
+	struct ltt_chan_buf* ltt_buf = NULL;

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#194: FILE: kernel/ltt-core.c:40:
+	struct ltt_event_header* header;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#197: FILE: kernel/ltt-core.c:43:
+	/* Can't go further without an active multiplexer, do this ASAP not to
+	   impact performance */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#197: FILE: kernel/ltt-core.c:43:
+	   impact performance */

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#206: FILE: kernel/ltt-core.c:52:
+	if (!(ltt_buf = ltt_mux(cpu, eid, length, buf)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#214: FILE: kernel/ltt-core.c:60:
+		if ((header = relay_reserve(ltt_buf->rbuf->chan,

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#233: FILE: kernel/ltt-core.c:79:
+	if (!(ltt_root_dentry = relayfs_create_dir(LTT_RELAYFS_ROOT, NULL)))

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#238: FILE: kernel/ltt-core.c:84:
+__initcall(ltt_init);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#240: FILE: kernel/ltt-core.c:86:
+EXPORT_SYMBOL(ltt_root_dentry);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#241: FILE: kernel/ltt-core.c:87:
+EXPORT_SYMBOL(ltt_mux);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#242: FILE: kernel/ltt-core.c:88:
+EXPORT_SYMBOL(ltt_log_event);

WARNING:MAINTAINERS_STYLE: MAINTAINERS entries use one tab after TYPE:
#262: FILE: MAINTAINERS:1448:
+P:     Karim Yaghmour

WARNING:MAINTAINERS_STYLE: MAINTAINERS entries use one tab after TYPE:
#263: FILE: MAINTAINERS:1449:
+M:     karim@opersys.com

WARNING:MAINTAINERS_STYLE: Misordered MAINTAINERS entry - list 'M:' before 'P:'
#263: FILE: MAINTAINERS:1449:
+P:     Karim Yaghmour
+M:     karim@opersys.com

WARNING:MAINTAINERS_STYLE: MAINTAINERS entries use one tab after TYPE:
#264: FILE: MAINTAINERS:1450:
+P:     Mathieu Desnoyers

WARNING:MAINTAINERS_STYLE: MAINTAINERS entries use one tab after TYPE:
#265: FILE: MAINTAINERS:1451:
+M:     mathieu.desnoyers@polymtl.ca

WARNING:MAINTAINERS_STYLE: Misordered MAINTAINERS entry - list 'M:' before 'P:'
#265: FILE: MAINTAINERS:1451:
+P:     Mathieu Desnoyers
+M:     mathieu.desnoyers@polymtl.ca

WARNING:MAINTAINERS_STYLE: MAINTAINERS entries use one tab after TYPE:
#266: FILE: MAINTAINERS:1452:
+W:     http://www.opersys.com/LTT

WARNING:MAINTAINERS_STYLE: MAINTAINERS entries use one tab after TYPE:
#267: FILE: MAINTAINERS:1453:
+W:     http://ltt.polymtl.ca

WARNING:MAINTAINERS_STYLE: MAINTAINERS entries use one tab after TYPE:
#268: FILE: MAINTAINERS:1454:
+L:     ltt-dev@listserv.shafik.org

WARNING:MAINTAINERS_STYLE: Misordered MAINTAINERS entry - list 'L:' before 'W:'
#268: FILE: MAINTAINERS:1454:
+W:     http://ltt.polymtl.ca
+L:     ltt-dev@listserv.shafik.org

WARNING:MAINTAINERS_STYLE: MAINTAINERS entries use one tab after TYPE:
#269: FILE: MAINTAINERS:1455:
+S:     Maintained

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000171076.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 14 errors, 24 warnings, 7 checks, 171 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000171076.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
