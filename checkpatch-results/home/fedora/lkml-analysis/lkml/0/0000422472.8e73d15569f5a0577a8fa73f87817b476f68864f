WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#30: 
> > - routine aio.c/io_readv_writev, which borrows heavily from do_readv_writev. 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#80: FILE: include/linux/aio_abi.h:44:
+^IIOCB_CMD_PREADV32 = 7, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#81: FILE: include/linux/aio_abi.h:45:
+^IIOCB_CMD_PREADV64 = 8, $

ERROR:CODE_INDENT: code indent should use tabs where possible
#92: FILE: include/linux/aio_abi.h:93:
+        __u32 iov_base;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#92: FILE: include/linux/aio_abi.h:93:
+        __u32 iov_base;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#93: FILE: include/linux/aio_abi.h:94:
+        __u32 iov_len;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#93: FILE: include/linux/aio_abi.h:94:
+        __u32 iov_len;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#97: FILE: include/linux/aio_abi.h:98:
+        __u64 iov_base;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#97: FILE: include/linux/aio_abi.h:98:
+        __u64 iov_base;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#98: FILE: include/linux/aio_abi.h:99:
+        __u64 iov_len;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#98: FILE: include/linux/aio_abi.h:99:
+        __u64 iov_len;$

WARNING:SPACING: Unnecessary space before function pointer arguments
#110: FILE: include/linux/fs.h:767:
+	ssize_t (*aio_readv) (struct kiocb *, const struct iovec *, unsigned long , loff_t);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#110: FILE: include/linux/fs.h:767:
+	ssize_t (*aio_readv) (struct kiocb *, const struct iovec *, unsigned long , loff_t);
 	                                                                          ^

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kiocb *' should also have an identifier name
#110: FILE: include/linux/fs.h:767:
+	ssize_t (*aio_readv) (struct kiocb *, const struct iovec *, unsigned long , loff_t);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct iovec *' should also have an identifier name
#110: FILE: include/linux/fs.h:767:
+	ssize_t (*aio_readv) (struct kiocb *, const struct iovec *, unsigned long , loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#110: FILE: include/linux/fs.h:767:
+	ssize_t (*aio_readv) (struct kiocb *, const struct iovec *, unsigned long , loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t' should also have an identifier name
#110: FILE: include/linux/fs.h:767:
+	ssize_t (*aio_readv) (struct kiocb *, const struct iovec *, unsigned long , loff_t);

WARNING:SPACING: Unnecessary space before function pointer arguments
#111: FILE: include/linux/fs.h:768:
+	ssize_t (*aio_writev) (struct kiocb *, const struct iovec *, unsigned long, loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kiocb *' should also have an identifier name
#111: FILE: include/linux/fs.h:768:
+	ssize_t (*aio_writev) (struct kiocb *, const struct iovec *, unsigned long, loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct iovec *' should also have an identifier name
#111: FILE: include/linux/fs.h:768:
+	ssize_t (*aio_writev) (struct kiocb *, const struct iovec *, unsigned long, loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#111: FILE: include/linux/fs.h:768:
+	ssize_t (*aio_writev) (struct kiocb *, const struct iovec *, unsigned long, loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t' should also have an identifier name
#111: FILE: include/linux/fs.h:768:
+	ssize_t (*aio_writev) (struct kiocb *, const struct iovec *, unsigned long, loff_t);

ERROR:CODE_INDENT: code indent should use tabs where possible
#121: FILE: include/linux/aio.h:54:
+ ^Istruct iovec^I^I*ki_iov;        /* io vector for readv/writev */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#121: FILE: include/linux/aio.h:54:
+ ^Istruct iovec^I^I*ki_iov;        /* io vector for readv/writev */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#121: FILE: include/linux/aio.h:54:
+ ^Istruct iovec^I^I*ki_iov;        /* io vector for readv/writev */$

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#148: FILE: fs/aio.c:450:
+	if (req->ki_iov)
+		kfree(req->ki_iov);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#157: FILE: fs/aio.c:995:
+#define _32bit_kiov (sizeof(struct iovec) == sizeof(struct iovec32)) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#158: FILE: fs/aio.c:996:
+#define _64bit_kiov (sizeof(struct iovec) == sizeof(struct iovec64)) $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#160: FILE: fs/aio.c:998:
+#define _32bit(cmd) ^I^I\$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cmd' - possible side-effects?
#160: FILE: fs/aio.c:998:
+#define _32bit(cmd) 		\
+	(((cmd) == IOCB_CMD_PREADV32) || ((cmd) == IOCB_CMD_PWRITEV32))

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#162: FILE: fs/aio.c:1000:
+#define _64bit(cmd) ^I^I\$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cmd' - possible side-effects?
#162: FILE: fs/aio.c:1000:
+#define _64bit(cmd) 		\
+	(((cmd) == IOCB_CMD_PREADV64) || ((cmd) == IOCB_CMD_PWRITEV64))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cmd' - possible side-effects?
#165: FILE: fs/aio.c:1003:
+#define is_readv(cmd)		\
+	(((cmd) == IOCB_CMD_PREADV32) || ((cmd) == IOCB_CMD_PREADV64))

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#168: FILE: fs/aio.c:1006:
+#define can_fast_copy(cmd) ^I\$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cmd' - possible side-effects?
#168: FILE: fs/aio.c:1006:
+#define can_fast_copy(cmd) 	\
+	((_32bit(cmd) && _32bit_kiov) || ((_64bit(cmd) && _64bit_kiov)))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#171: FILE: fs/aio.c:1009:
+int resize_user_vec(int cmd, struct kiocb *req, const struct iovec *uiov, $

ERROR:CODE_INDENT: code indent should use tabs where possible
#172: FILE: fs/aio.c:1010:
+^I^I         unsigned long nr_segs)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#172: FILE: fs/aio.c:1010:
+int resize_user_vec(int cmd, struct kiocb *req, const struct iovec *uiov, 
+		         unsigned long nr_segs)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#177: FILE: fs/aio.c:1015:
+^Istruct iovec *kiov = req->ki_iov; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#180: FILE: fs/aio.c:1018:
+^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#181: FILE: fs/aio.c:1019:
+^I * copy 32-bit user iovecs to 64-bit kernel iovecs or vice versa $

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#184: FILE: fs/aio.c:1022:
+		len = nr_segs*sizeof(struct iovec32);
 		             ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#188: FILE: fs/aio.c:1026:
+^I^Iif (copy_from_user(iov32, uiov, len)) $

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#190: FILE: fs/aio.c:1028:
+		else for (seg = 0; seg < nr_segs; seg++) {

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#190: FILE: fs/aio.c:1028:
+		else for (seg = 0; seg < nr_segs; seg++) {

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#197: FILE: fs/aio.c:1035:
+		len = nr_segs*sizeof(struct iovec64);
 		             ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#201: FILE: fs/aio.c:1039:
+^I^Iif (copy_from_user(iov64, uiov, len)) $

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#203: FILE: fs/aio.c:1041:
+		else for (seg = 0; seg < nr_segs; seg++) {

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#203: FILE: fs/aio.c:1041:
+		else for (seg = 0; seg < nr_segs; seg++) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#204: FILE: fs/aio.c:1042:
+^I^I^Ikiov[seg].iov_base = $

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#214: FILE: fs/aio.c:1052:
+#define iov(iocb) (const struct iovec *)(unsigned long)iocb->aio_buf

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'iocb' may be better as '(iocb)' to avoid precedence issues
#214: FILE: fs/aio.c:1052:
+#define iov(iocb) (const struct iovec *)(unsigned long)iocb->aio_buf

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#215: FILE: fs/aio.c:1053:
+#define nr_segs(iocb) (unsigned long)iocb->aio_nbytes

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'iocb' may be better as '(iocb)' to avoid precedence issues
#215: FILE: fs/aio.c:1053:
+#define nr_segs(iocb) (unsigned long)iocb->aio_nbytes

ERROR:TRAILING_WHITESPACE: trailing whitespace
#226: FILE: fs/aio.c:1064:
+^Iif (nr_segs == 0) $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'nr_segs > UIO_MAXIOV'
#229: FILE: fs/aio.c:1067:
+	if ((nr_segs > UIO_MAXIOV) || ((ssize_t)nr_segs < 0)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#234: FILE: fs/aio.c:1072:
+	req->ki_iov = kmalloc(nr_segs*sizeof(struct iovec), GFP_KERNEL);
 	                             ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#241: FILE: fs/aio.c:1079:
+^Iif (can_fast_copy(cmd)) { $

CHECK:BRACES: braces {} should be used on all arms of this statement
#241: FILE: fs/aio.c:1079:
+	if (can_fast_copy(cmd)) { 
[...]
+	} else if (resize_user_vec(cmd, req, uiov, nr_segs)) 
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#243: FILE: fs/aio.c:1081:
+		int len = nr_segs * sizeof(struct iovec);
+		if (copy_from_user(req->ki_iov, uiov, len)) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BRACES: braces {} are not necessary for single statement blocks
#243: FILE: fs/aio.c:1081:
+		if (copy_from_user(req->ki_iov, uiov, len)) {
+			goto out;
+		}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#246: FILE: fs/aio.c:1084:
+^I} else if (resize_user_vec(cmd, req, uiov, nr_segs)) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#251: FILE: fs/aio.c:1089:
+^I * We should -EINVAL if an element length is not >= 0 or if $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#261: FILE: fs/aio.c:1099:
+		void * base = req->ki_iov[seg].iov_base;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#269: FILE: fs/aio.c:1107:
+^I^Iif (unlikely(!access_ok(is_readv(cmd) ?  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#281: FILE: fs/aio.c:1119:
+^I^Iret = file->f_op->aio_readv(req, req->ki_iov, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#283: FILE: fs/aio.c:1121:
+^Ielse $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#284: FILE: fs/aio.c:1122:
+^I^Iret = file->f_op->aio_writev(req, req->ki_iov, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#304: FILE: fs/aio.c:1211:
+^I^I^Iret = io_readv_writev(iocb->aio_lio_opcode, req, iocb); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#313: FILE: fs/aio.c:1220:
+^I^I^Iret = io_readv_writev(iocb->aio_lio_opcode, req, iocb); $

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000422472.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 35 errors, 23 warnings, 12 checks, 227 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000422472.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
