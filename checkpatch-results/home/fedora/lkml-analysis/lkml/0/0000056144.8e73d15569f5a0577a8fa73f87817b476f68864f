CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*grp)...) over kzalloc(sizeof(struct vlan_group)...)
#141: FILE: net/8021q/vlan.c:545:
+		grp = kzalloc(sizeof(struct vlan_group), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*brvcc)...) over kzalloc(sizeof(struct br2684_vcc)...)
#191: FILE: net/atm/br2684.c:511:
+	brvcc = kzalloc(sizeof(struct br2684_vcc), GFP_KERNEL);

ERROR:CODE_INDENT: code indent should use tabs where possible
#225: FILE: net/atm/lec.c:1814:
+        to_return = kzalloc(sizeof(struct lec_arp_table), GFP_ATOMIC);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#225: FILE: net/atm/lec.c:1814:
+        to_return = kzalloc(sizeof(struct lec_arp_table), GFP_ATOMIC);$

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*to_return)...) over kzalloc(sizeof(struct lec_arp_table)...)
#225: FILE: net/atm/lec.c:1814:
+        to_return = kzalloc(sizeof(struct lec_arp_table), GFP_ATOMIC);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#243: FILE: net/atm/mpc.c:261:
+	mpc = kzalloc(sizeof (struct mpoa_client), GFP_KERNEL);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*mpc)...) over kzalloc(sizeof (struct mpoa_client)...)
#243: FILE: net/atm/mpc.c:261:
+	mpc = kzalloc(sizeof (struct mpoa_client), GFP_KERNEL);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#291: FILE: net/ax25/sysctl_net_ax25.c:206:
+	if ((ax25_table = kzalloc(ax25_table_size, GFP_ATOMIC)) == NULL) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#354: FILE: net/decnet/dn_dev.c:1104:
+	if ((dn_db = kzalloc(sizeof(struct dn_dev), GFP_ATOMIC)) == NULL)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*dn_db)...) over kzalloc(sizeof(struct dn_dev)...)
#354: FILE: net/decnet/dn_dev.c:1104:
+	if ((dn_db = kzalloc(sizeof(struct dn_dev), GFP_ATOMIC)) == NULL)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#370: FILE: net/decnet/dn_fib.c:286:
+	fi = kzalloc(sizeof(*fi)+nhs*sizeof(struct dn_fib_nh), GFP_KERNEL);
 	                        ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#370: FILE: net/decnet/dn_fib.c:286:
+	fi = kzalloc(sizeof(*fi)+nhs*sizeof(struct dn_fib_nh), GFP_KERNEL);
 	                            ^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#422: FILE: net/decnet/dn_table.c:161:
+	ht = kcalloc(new_divisor, sizeof(struct dn_fib_node*), GFP_KERNEL);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*dz)...) over kzalloc(sizeof(struct dn_zone)...)
#435: FILE: net/decnet/dn_table.c:185:
+	struct dn_zone *dz = kzalloc(sizeof(struct dn_zone), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*edev)...) over kzalloc(sizeof(struct ec_device)...)
#468: FILE: net/econet/af_econet.c:676:
+			edev = kzalloc(sizeof(struct ec_device), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*new_crypt)...) over kzalloc(sizeof(struct ieee80211_crypt_data)...)
#535: FILE: net/ieee80211/ieee80211_wx.c:372:
+		new_crypt = kzalloc(sizeof(struct ieee80211_crypt_data),

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*fz)...) over kzalloc(sizeof(struct fn_zone)...)
#663: FILE: net/ipv4/fib_hash.c:207:
+	struct fn_zone *fz = kzalloc(sizeof(struct fn_zone), GFP_KERNEL);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#713: FILE: net/ipv4/fib_semantics.c:712:
+	fi = kzalloc(sizeof(*fi)+nhs*sizeof(struct fib_nh), GFP_KERNEL);
 	                        ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#713: FILE: net/ipv4/fib_semantics.c:712:
+	fi = kzalloc(sizeof(*fi)+nhs*sizeof(struct fib_nh), GFP_KERNEL);
 	                            ^

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*dest)...) over kzalloc(sizeof(struct ip_vs_dest)...)
#826: FILE: net/ipv4/ipvs/ip_vs_ctl.c:738:
+	dest = kzalloc(sizeof(struct ip_vs_dest), GFP_ATOMIC);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*svc)...) over kzalloc(sizeof(struct ip_vs_service)...)
#841: FILE: net/ipv4/ipvs/ip_vs_ctl.c:1052:
+	svc = kzalloc(sizeof(struct ip_vs_service), GFP_ATOMIC);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#944: FILE: net/ipv6/ip6_tunnel.c:570:
+	if (!(opt = kzalloc(opt_len, GFP_ATOMIC))) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#944: FILE: net/ipv6/ip6_tunnel.c:570:
+	if (!(opt = kzalloc(opt_len, GFP_ATOMIC))) {
 		return NULL;
 	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*self)...) over kzalloc(sizeof(struct ircomm_cb)...)
#960: FILE: net/irda/ircomm/ircomm_core.c:118:
+	self = kzalloc(sizeof(struct ircomm_cb), GFP_ATOMIC);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*self)...) over kzalloc(sizeof(struct ircomm_tty_cb)...)
#978: FILE: net/irda/ircomm/ircomm_tty.c:382:
+		self = kzalloc(sizeof(struct ircomm_tty_cb), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*obj)...) over kzalloc(sizeof(struct ias_object)...)
#1014: FILE: net/irda/irias_object.c:85:
+	obj = kzalloc(sizeof(struct ias_object), GFP_ATOMIC);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*attrib)...) over kzalloc(sizeof(struct ias_attrib)...)
#1029: FILE: net/irda/irias_object.c:348:
+	attrib = kzalloc(sizeof(struct ias_attrib), GFP_ATOMIC);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*attrib)...) over kzalloc(sizeof(struct ias_attrib)...)
#1044: FILE: net/irda/irias_object.c:383:
+	attrib = kzalloc(sizeof(struct ias_attrib), GFP_ATOMIC);

ERROR:SPACING: space prohibited after that open parenthesis '('
#1059: FILE: net/irda/irias_object.c:416:
+	attrib = kzalloc(sizeof( struct ias_attrib), GFP_ATOMIC);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*attrib)...) over kzalloc(sizeof( struct ias_attrib)...)
#1059: FILE: net/irda/irias_object.c:416:
+	attrib = kzalloc(sizeof( struct ias_attrib), GFP_ATOMIC);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*value)...) over kzalloc(sizeof(struct ias_value)...)
#1074: FILE: net/irda/irias_object.c:442:
+	value = kzalloc(sizeof(struct ias_value), GFP_ATOMIC);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*value)...) over kzalloc(sizeof(struct ias_value)...)
#1088: FILE: net/irda/irias_object.c:467:
+	value = kzalloc(sizeof(struct ias_value), GFP_ATOMIC);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*value)...) over kzalloc(sizeof(struct ias_value)...)
#1102: FILE: net/irda/irias_object.c:492:
+	value = kzalloc(sizeof(struct ias_value), GFP_ATOMIC);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*value)...) over kzalloc(sizeof(struct ias_value)...)
#1116: FILE: net/irda/irias_object.c:518:
+	value = kzalloc(sizeof(struct ias_value), GFP_ATOMIC);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*self)...) over kzalloc(sizeof(struct irlap_cb)...)
#1134: FILE: net/irda/irlap.c:119:
+	self = kzalloc(sizeof(struct irlap_cb), GFP_KERNEL);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1168: FILE: net/irda/irlap_frame.c:425:
+	if ((discovery = kzalloc(sizeof(discovery_t), GFP_ATOMIC)) == NULL) {

ERROR:SPACING: space prohibited after that open parenthesis '('
#1185: FILE: net/irda/irlmp.c:81:
+	irlmp = kzalloc( sizeof(struct irlmp_cb), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*irlmp)...) over kzalloc(sizeof(struct irlmp_cb)...)
#1185: FILE: net/irda/irlmp.c:81:
+	irlmp = kzalloc( sizeof(struct irlmp_cb), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*self)...) over kzalloc(sizeof(struct lsap_cb)...)
#1197: FILE: net/irda/irlmp.c:162:
+	self = kzalloc(sizeof(struct lsap_cb), GFP_ATOMIC);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*lap)...) over kzalloc(sizeof(struct lap_cb)...)
#1211: FILE: net/irda/irlmp.c:289:
+	lap = kzalloc(sizeof(struct lap_cb), GFP_KERNEL);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1229: FILE: net/irda/irnet/irnet_ppp.c:479:
+  ap = kzalloc(sizeof(*ap), GFP_KERNEL);$

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*irttp)...) over kzalloc(sizeof(struct irttp_cb)...)
#1246: FILE: net/irda/irttp.c:88:
+	irttp = kzalloc(sizeof(struct irttp_cb), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*self)...) over kzalloc(sizeof(struct tsap_cb)...)
#1258: FILE: net/irda/irttp.c:391:
+	self = kzalloc(sizeof(struct tsap_cb), GFP_ATOMIC);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*conn)...) over kzalloc(sizeof(struct rxrpc_connection)...)
#1392: FILE: net/rxrpc/connection.c:61:
+	conn = kzalloc(sizeof(struct rxrpc_connection), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*msg)...) over kzalloc(sizeof(struct rxrpc_message)...)
#1407: FILE: net/rxrpc/connection.c:537:
+	msg = kzalloc(sizeof(struct rxrpc_message), alloc_flags);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*peer)...) over kzalloc(sizeof(struct rxrpc_peer)...)
#1426: FILE: net/rxrpc/peer.c:61:
+	peer = kzalloc(sizeof(struct rxrpc_peer), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*trans)...) over kzalloc(sizeof(struct rxrpc_transport)...)
#1445: FILE: net/rxrpc/transport.c:71:
+	trans = kzalloc(sizeof(struct rxrpc_transport), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*msg)...) over kzalloc(sizeof(struct rxrpc_message)...)
#1458: FILE: net/rxrpc/transport.c:314:
+	msg = kzalloc(sizeof(struct rxrpc_message), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*a)...) over kzalloc(sizeof(struct tc_action)...)
#1489: FILE: net/sched/act_api.c:494:
+	a = kzalloc(sizeof(struct tc_action), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*head)...) over kzalloc(sizeof(struct fw_head)...)
#1590: FILE: net/sched/cls_fw.c:270:
+		head = kzalloc(sizeof(struct fw_head), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*f)...) over kzalloc(sizeof(struct fw_filter)...)
#1601: FILE: net/sched/cls_fw.c:279:
+	f = kzalloc(sizeof(struct fw_filter), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*b)...) over kzalloc(sizeof(struct route4_bucket)...)
#1617: FILE: net/sched/cls_route.c:399:
+		b = kzalloc(sizeof(struct route4_bucket), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*head)...) over kzalloc(sizeof(struct route4_head)...)
#1629: FILE: net/sched/cls_route.c:477:
+		head = kzalloc(sizeof(struct route4_head), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*f)...) over kzalloc(sizeof(struct route4_filter)...)
#1640: FILE: net/sched/cls_route.c:486:
+	f = kzalloc(sizeof(struct route4_filter), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*data)...) over kzalloc(sizeof(struct rsvp_head)...)
#1656: FILE: net/sched/cls_rsvp.h:243:
+	data = kzalloc(sizeof(struct rsvp_head), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*f)...) over kzalloc(sizeof(struct rsvp_filter)...)
#1667: FILE: net/sched/cls_rsvp.h:448:
+	f = kzalloc(sizeof(struct rsvp_filter), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*s)...) over kzalloc(sizeof(struct rsvp_session)...)
#1680: FILE: net/sched/cls_rsvp.h:533:
+	s = kzalloc(sizeof(struct rsvp_session), GFP_KERNEL);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1696: FILE: net/sched/cls_tcindex.c:151:
+	p = kzalloc(sizeof(struct tcindex_data),GFP_KERNEL);
 	                                       ^

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*p)...) over kzalloc(sizeof(struct tcindex_data)...)
#1696: FILE: net/sched/cls_tcindex.c:151:
+	p = kzalloc(sizeof(struct tcindex_data),GFP_KERNEL);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1770: FILE: net/sched/cls_u32.c:572:
+		ht = kzalloc(sizeof(*ht) + divisor*sizeof(void*), GFP_KERNEL);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1770: FILE: net/sched/cls_u32.c:572:
+		ht = kzalloc(sizeof(*ht) + divisor*sizeof(void*), GFP_KERNEL);
 		                                  ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1782: FILE: net/sched/cls_u32.c:617:
+	n = kzalloc(sizeof(*n) + s->nkeys*sizeof(struct tc_u32_key), GFP_KERNEL);
 	                                 ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1789: FILE: net/sched/cls_u32.c:622:
+	n->pf = kzalloc(sizeof(struct tc_u32_pcnt) + s->nkeys*sizeof(u64), GFP_KERNEL);
 	                                                     ^

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*n->pf)...) over kzalloc(sizeof(struct tc_u32_pcnt)...)
#1789: FILE: net/sched/cls_u32.c:622:
+	n->pf = kzalloc(sizeof(struct tc_u32_pcnt) + s->nkeys*sizeof(u64), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*cl)...) over kzalloc(sizeof(struct hfsc_class)...)
#1904: FILE: net/sched/sch_hfsc.c:1126:
+	cl = kzalloc(sizeof(struct hfsc_class), GFP_KERNEL);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1920: FILE: net/sched/sch_htb.c:1562:
+		if ((cl = kzalloc(sizeof(*cl), GFP_KERNEL)) == NULL)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1958: FILE: net/sunrpc/auth_gss/auth_gss.c:777:
+	if (!(cred = kzalloc(sizeof(*cred), GFP_KERNEL)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1974: FILE: net/sunrpc/auth_gss/gss_krb5_mech.c:132:
+	if (!(ctx = kzalloc(sizeof(*ctx), GFP_KERNEL)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1989: FILE: net/sunrpc/auth_gss/gss_mech_switch.c:240:
+	if (!(*ctx_id = kzalloc(sizeof(**ctx_id), GFP_KERNEL)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2004: FILE: net/sunrpc/auth_gss/gss_spkm3_mech.c:155:
+	if (!(ctx = kzalloc(sizeof(*ctx), GFP_KERNEL)))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2019: FILE: net/sunrpc/auth_gss/gss_spkm3_token.c:93:
+	if (!(out->data = kzalloc(explen,GFP_KERNEL)))
 	                                ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2019: FILE: net/sunrpc/auth_gss/gss_spkm3_token.c:93:
+	if (!(out->data = kzalloc(explen,GFP_KERNEL)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2070: FILE: net/sunrpc/svc.c:35:
+	if (!(serv = kzalloc(sizeof(*serv), GFP_KERNEL)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2098: FILE: net/sunrpc/svcsock.c:1325:
+	if (!(svsk = kzalloc(sizeof(*svsk), GFP_KERNEL))) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2115: FILE: net/sunrpc/xprt.c:911:
+	if ((xprt = kzalloc(sizeof(struct rpc_xprt), GFP_KERNEL)) == NULL)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*xprt)...) over kzalloc(sizeof(struct rpc_xprt)...)
#2115: FILE: net/sunrpc/xprt.c:911:
+	if ((xprt = kzalloc(sizeof(struct rpc_xprt), GFP_KERNEL)) == NULL)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#2193: FILE: net/tipc/cluster.c:73:
+	c_ptr->nodes = kcalloc(max_nodes + 1, sizeof(void*), GFP_ATOMIC);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*subscriber)...) over kzalloc(sizeof(struct subscriber)...)
#2337: FILE: net/tipc/subscr.c:396:
+	subscriber = kzalloc(sizeof(struct subscriber), GFP_ATOMIC);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2406: FILE: net/wanrouter/af_wanpipe.c:373:
+	if ((mbox_ptr = kzalloc(sizeof(mbox_cmd_t), GFP_ATOMIC)) == NULL) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2420: FILE: net/wanrouter/af_wanpipe.c:509:
+	if ((wan_opt = kzalloc(sizeof(struct wanpipe_opt), GFP_ATOMIC)) == NULL) {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*wan_opt)...) over kzalloc(sizeof(struct wanpipe_opt)...)
#2420: FILE: net/wanrouter/af_wanpipe.c:509:
+	if ((wan_opt = kzalloc(sizeof(struct wanpipe_opt), GFP_ATOMIC)) == NULL) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2433: FILE: net/wanrouter/af_wanpipe.c:2012:
+		if ((mbox_ptr = kzalloc(sizeof(mbox_cmd_t), GFP_ATOMIC)) == NULL)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*pppdev)...) over kzalloc(sizeof(struct ppp_device)...)
#2449: FILE: net/wanrouter/wanmain.c:645:
+		pppdev = kzalloc(sizeof(struct ppp_device), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*pppdev->dev)...) over kzalloc(sizeof(struct net_device)...)
#2455: FILE: net/wanrouter/wanmain.c:649:
+		pppdev->dev = kzalloc(sizeof(struct net_device), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*dev)...) over kzalloc(sizeof(struct net_device)...)
#2470: FILE: net/wanrouter/wanmain.c:664:
+		dev = kzalloc(sizeof(struct net_device), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*policy)...) over kzalloc(sizeof(struct xfrm_policy)...)
#2487: FILE: net/xfrm/xfrm_policy.c:310:
+	policy = kzalloc(sizeof(struct xfrm_policy), gfp);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*x)...) over kzalloc(sizeof(struct xfrm_state)...)
#2503: FILE: net/xfrm/xfrm_state.c:197:
+	x = kzalloc(sizeof(struct xfrm_state), GFP_ATOMIC);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000056144.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 24 errors, 4 warnings, 59 checks, 1849 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000056144.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
