WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#59: FILE: drivers/char/raw.c:132:
+raw_compat_ioctl(struct file *filp, unsigned int command, unsigned long arg)
                               ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#80: FILE: drivers/char/raw.c:259:
+} __attribute__ ((packed));

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#83: FILE: drivers/char/raw.c:262:
+			     struct raw32_config_request __user * user_req)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#99: FILE: drivers/char/raw.c:278:
+			     struct raw32_config_request __user * user_req)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#114: FILE: drivers/char/raw.c:293:
+static long raw_ctl_compat_ioctl(struct file *file, unsigned cmd,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#115: FILE: drivers/char/raw.c:294:
+static long raw_ctl_compat_ioctl(struct file *file, unsigned cmd,
+						unsigned long arg)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#127: FILE: drivers/char/raw.c:306:
+			if ((ret = get_raw32_request(&req, user_req)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#133: FILE: drivers/char/raw.c:312:
+			ret = raw_ctl_ioctl(file->f_dentry->d_inode, file,
+						cmd, (unsigned long) &req);

CHECK:SPACING: No space is necessary after a cast
#133: FILE: drivers/char/raw.c:312:
+						cmd, (unsigned long) &req);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!ret'
#137: FILE: drivers/char/raw.c:316:
+			if ((!ret) && (cmd == RAW_GETBIND)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cmd == RAW_GETBIND'
#137: FILE: drivers/char/raw.c:316:
+			if ((!ret) && (cmd == RAW_GETBIND)) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#137: FILE: drivers/char/raw.c:316:
+			if ((!ret) && (cmd == RAW_GETBIND)) {
+				ret = set_raw32_request(&req, user_req);
+			}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required after that ',' (ctx:OxV)
#279: FILE: include/linux/fs.h:1324:
+extern long compat_blkdev_ioctl(struct inode *,struct file *,
                                               ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#279: FILE: include/linux/fs.h:1324:
+extern long compat_blkdev_ioctl(struct inode *,struct file *,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#279: FILE: include/linux/fs.h:1324:
+extern long compat_blkdev_ioctl(struct inode *,struct file *,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#279: FILE: include/linux/fs.h:1324:
+extern long compat_blkdev_ioctl(struct inode *,struct file *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned' should also have an identifier name
#279: FILE: include/linux/fs.h:1324:
+extern long compat_blkdev_ioctl(struct inode *,struct file *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#279: FILE: include/linux/fs.h:1324:
+extern long compat_blkdev_ioctl(struct inode *,struct file *,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#280: FILE: include/linux/fs.h:1325:
+				unsigned, unsigned long);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#301: FILE: drivers/block/ioctl.c:699:
+long compat_blkdev_ioctl(struct inode *inode, struct file *file, unsigned cmd, unsigned long arg)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#328: FILE: fs/block_dev.c:787:
+static long block_compat_ioctl(struct file *file, unsigned int cmd,
+				unsigned long arg)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000137823.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 4 errors, 10 warnings, 7 checks, 266 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000137823.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
