WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#40: 
(This version of the patch is not depending on atomic pte operations and will

WARNING:TYPO_SPELLING: 'acccess' may be misspelled - perhaps 'access'?
#65: 
(assuming linear acccess by the application). If the prediction turns out to
                 ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'continous' may be misspelled - perhaps 'continuous'?
#73: 
continous allocation the number of faults is reduced by a factor of 8.
^^^^^^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#118: FILE: mm/memory.c:1643:
+ ^Iunsigned long end_addr;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#118: FILE: mm/memory.c:1643:
+ ^Iunsigned long end_addr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#118: FILE: mm/memory.c:1643:
+ ^Iunsigned long end_addr;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#124: FILE: mm/memory.c:1647:
+ ^Iif (likely((vma->vm_flags & VM_RAND_READ)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#124: FILE: mm/memory.c:1647:
+ ^Iif (likely((vma->vm_flags & VM_RAND_READ)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#124: FILE: mm/memory.c:1647:
+ ^Iif (likely((vma->vm_flags & VM_RAND_READ)$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#125: FILE: mm/memory.c:1648:
+ 	if (likely((vma->vm_flags & VM_RAND_READ)
+		|| current->anon_fault_next_addr != addr)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#126: FILE: mm/memory.c:1649:
+		|| current->anon_fault_next_addr != addr)
+		|| current->anon_fault_order >= sysctl_max_prealloc_order) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#132: FILE: mm/memory.c:1655:
+ ^I^Iint order = ++current->anon_fault_order;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#132: FILE: mm/memory.c:1655:
+ ^I^Iint order = ++current->anon_fault_order;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#132: FILE: mm/memory.c:1655:
+ ^I^Iint order = ++current->anon_fault_order;$

CHECK:BRACES: braces {} should be used on all arms of this statement
#134: FILE: mm/memory.c:1657:
+		if ((1 << order) < PAGEVEC_SIZE)
[...]
+		else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#136: FILE: mm/memory.c:1659:
+		else {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#149: FILE: mm/memory.c:1670:
 	if (write_access) {
+

ERROR:SPACING: space required before the open parenthesis '('
#168: FILE: mm/memory.c:1684:
+		for(a = addr; a < end_addr ; a += PAGE_SIZE) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#185: FILE: mm/memory.c:1699:
+		for(i = 0; addr < a; addr += PAGE_SIZE, i++) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#196: FILE: mm/memory.c:1710:
+ ^I^I^Ientry = maybe_mkwrite(pte_mkdirty(mk_pte(p,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#196: FILE: mm/memory.c:1710:
+ ^I^I^Ientry = maybe_mkwrite(pte_mkdirty(mk_pte(p,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#196: FILE: mm/memory.c:1710:
+ ^I^I^Ientry = maybe_mkwrite(pte_mkdirty(mk_pte(p,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#197: FILE: mm/memory.c:1711:
+ ^I^I^I^I^I^I vma->vm_page_prot)),$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#197: FILE: mm/memory.c:1711:
+ ^I^I^I^I^I^I vma->vm_page_prot)),$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#197: FILE: mm/memory.c:1711:
+ 			entry = maybe_mkwrite(pte_mkdirty(mk_pte(p,
+ 						 vma->vm_page_prot)),

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#197: FILE: mm/memory.c:1711:
+ ^I^I^I^I^I^I vma->vm_page_prot)),$

ERROR:CODE_INDENT: code indent should use tabs where possible
#198: FILE: mm/memory.c:1712:
+ ^I^I^I^I^I      vma);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#198: FILE: mm/memory.c:1712:
+ ^I^I^I^I^I      vma);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#198: FILE: mm/memory.c:1712:
+ ^I^I^I^I^I      vma);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#211: FILE: mm/memory.c:1722:
+ ^I^I^I/* No need to invalidate - it was non-present before */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#211: FILE: mm/memory.c:1722:
+ ^I^I^I/* No need to invalidate - it was non-present before */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#211: FILE: mm/memory.c:1722:
+ ^I^I^I/* No need to invalidate - it was non-present before */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#212: FILE: mm/memory.c:1723:
+ ^I^I^Iupdate_mmu_cache(vma, addr, entry);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#212: FILE: mm/memory.c:1723:
+ ^I^I^Iupdate_mmu_cache(vma, addr, entry);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#212: FILE: mm/memory.c:1723:
+ ^I^I^Iupdate_mmu_cache(vma, addr, entry);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#214: FILE: mm/memory.c:1725:
+ ^I} else {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#214: FILE: mm/memory.c:1725:
+ ^I} else {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#214: FILE: mm/memory.c:1725:
+ ^I} else {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#215: FILE: mm/memory.c:1726:
+ ^I^I/* Read */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#215: FILE: mm/memory.c:1726:
+ ^I^I/* Read */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#215: FILE: mm/memory.c:1726:
+ ^I^I/* Read */$

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#258: FILE: kernel/sysctl.c:59:
+extern int sysctl_max_prealloc_order;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:DUPLICATED_SYSCTL_CONST: duplicated sysctl range checking value 'zero', consider using the shared one in include/linux/sysctl.h
#274: FILE: kernel/sysctl.c:838:
+		.extra1		= &zero,

Commit d91bff3011cf ("proc/sysctl: add shared variables for range
check") added some shared const variables to be used instead of a local
copy in each source file.

Consider replacing the sysctl range checking value with the shared
one in include/linux/sysctl.h.  The following conversion scheme may
be used::

  &zero     ->  SYSCTL_ZERO
  &one      ->  SYSCTL_ONE
  &int_max  ->  SYSCTL_INT_MAX

See:

  1. https://lore.kernel.org/lkml/20190430180111.10688-1-mcroce@redhat.com/
  2. https://lore.kernel.org/lkml/20190531131422.14970-1-mcroce@redhat.com/

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#287: FILE: include/linux/sysctl.h:172:
+	VM_MAX_PREFAULT_ORDER=29, /* max prefault order during anonymous page faults */
 	                     ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000218966.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 13 errors, 25 warnings, 6 checks, 189 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000218966.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
