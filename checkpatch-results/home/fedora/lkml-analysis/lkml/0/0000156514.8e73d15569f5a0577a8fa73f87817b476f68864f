WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#60: FILE: arch/ppc/boot/simple/misc-ev64360.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#61: FILE: arch/ppc/boot/simple/misc-ev64360.c:2:
+ * arch/ppc/boot/simple/misc-ev64360.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#78: FILE: arch/ppc/boot/simple/misc-ev64360.c:19:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#79: FILE: arch/ppc/boot/simple/misc-ev64360.c:20:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.$

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/io.h> instead of <asm/io.h>
#84: FILE: arch/ppc/boot/simple/misc-ev64360.c:25:
+#include <asm/io.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#89: FILE: arch/ppc/boot/simple/misc-ev64360.c:30:
+extern u32 mv64x60_mpsc_clk_src;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#90: FILE: arch/ppc/boot/simple/misc-ev64360.c:31:
+extern u32 mv64x60_mpsc_clk_freq;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#94: FILE: arch/ppc/boot/simple/misc-ev64360.c:35:
+#define	min(a,b)	(((a) < (b)) ? (a) : (b))
        	     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'a' - possible side-effects?
#94: FILE: arch/ppc/boot/simple/misc-ev64360.c:35:
+#define	min(a,b)	(((a) < (b)) ? (a) : (b))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'b' - possible side-effects?
#94: FILE: arch/ppc/boot/simple/misc-ev64360.c:35:
+#define	min(a,b)	(((a) < (b)) ? (a) : (b))

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#134: FILE: arch/ppc/Kconfig:716:
+config EV64360
+	bool "Marvell-EV64360BP"
+	help
+	  Select EV64360 if configuring a Marvell EV64360BP Evaluation
+	  platform.

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#158: FILE: arch/ppc/platforms/ev64360.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#159: FILE: arch/ppc/platforms/ev64360.c:2:
+ * arch/ppc/platforms/ev64360.c

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/smp.h> instead of <asm/smp.h>
#190: FILE: arch/ppc/platforms/ev64360.c:33:
+#include <asm/smp.h>

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#272: FILE: arch/ppc/platforms/ev64360.c:115:
+		printk(KERN_WARNING "Bridge initialization failed.\n");

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#301: FILE: arch/ppc/platforms/ev64360.c:144:
+	mv64x60_set_bits(&bh, MV64x60_COMM_ARBITER_CNTL, (1<<10));
 	                                                   ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#304: FILE: arch/ppc/platforms/ev64360.c:147:
+	mv64x60_clr_bits(&bh, MV64x60_PCI0_CMD, (1<<5) | (1<<9));
 	                                          ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#304: FILE: arch/ppc/platforms/ev64360.c:147:
+	mv64x60_clr_bits(&bh, MV64x60_PCI0_CMD, (1<<5) | (1<<9));
 	                                                   ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#305: FILE: arch/ppc/platforms/ev64360.c:148:
+	mv64x60_clr_bits(&bh, MV64x60_PCI1_CMD, (1<<5) | (1<<9));
 	                                          ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#305: FILE: arch/ppc/platforms/ev64360.c:148:
+	mv64x60_clr_bits(&bh, MV64x60_PCI1_CMD, (1<<5) | (1<<9));
 	                                                   ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#318: FILE: arch/ppc/platforms/ev64360.c:161:
+	mv64x60_set_bits(&bh, MV64360_IC_CPU0_INTR_MASK_HI, (1<<25));
 	                                                      ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#328: FILE: arch/ppc/platforms/ev64360.c:171:
+	mv64x60_set_32bit_window(&bh, MV64x60_CPU2BOOT_WIN,
+		 EV64360_BOOT_WINDOW_BASE, EV64360_BOOT_WINDOW_SIZE, 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#333: FILE: arch/ppc/platforms/ev64360.c:176:
+	mv64x60_get_32bit_window(&bh, MV64x60_CPU2BOOT_WIN, &base,
+		&ev64360_flash_size_0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#337: FILE: arch/ppc/platforms/ev64360.c:180:
+	mv64x60_set_32bit_window(&bh, MV64x60_CPU2DEV_1_WIN,
+		 EV64360_RTC_WINDOW_BASE, EV64360_RTC_WINDOW_SIZE, 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#341: FILE: arch/ppc/platforms/ev64360.c:184:
+	mv64x60_set_32bit_window(&bh, MV64x60_CPU2SRAM_WIN,
+		 EV64360_INTERNAL_SRAM_BASE, MV64360_SRAM_SIZE, 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#347: FILE: arch/ppc/platforms/ev64360.c:190:
+	mv64x60_set_32bit_window(&bh, MV64x60_ENET2MEM_4_WIN,
+		EV64360_INTERNAL_SRAM_BASE, MV64360_SRAM_SIZE, 0x2);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ev64360_setup_arch', this function's name, in a string
#380: FILE: arch/ppc/platforms/ev64360.c:223:
+		ppc_md.progress("ev64360_setup_arch: enter", 0);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:CAMELCASE: Avoid CamelCase: <Root_RAM0>
#386: FILE: arch/ppc/platforms/ev64360.c:229:
+		ROOT_DEV = Root_RAM0;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

ERROR:SPACING: exactly one space required after that #ifdef
#389: FILE: arch/ppc/platforms/ev64360.c:232:
+#ifdef   CONFIG_ROOT_NFS

CHECK:CAMELCASE: Avoid CamelCase: <Root_NFS>
#390: FILE: arch/ppc/platforms/ev64360.c:233:
+		ROOT_DEV = Root_NFS;

CHECK:CAMELCASE: Avoid CamelCase: <Root_SDA2>
#392: FILE: arch/ppc/platforms/ev64360.c:235:
+		ROOT_DEV = Root_SDA2;

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ev64360_setup_arch', this function's name, in a string
#401: FILE: arch/ppc/platforms/ev64360.c:244:
+		ppc_md.progress("ev64360_setup_arch: calling setup_bridge", 0);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#407: FILE: arch/ppc/platforms/ev64360.c:250:
+	printk(KERN_INFO "%s %s port (C) 2005 Lee Nicks "

WARNING:SPLIT_STRING: quoted string split across lines
#408: FILE: arch/ppc/platforms/ev64360.c:251:
+	printk(KERN_INFO "%s %s port (C) 2005 Lee Nicks "
+		"(allinux@gmail.com)\n", BOARD_VENDOR, BOARD_MACHINE);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ev64360_setup_arch', this function's name, in a string
#410: FILE: arch/ppc/platforms/ev64360.c:253:
+		ppc_md.progress("ev64360_setup_arch: exit", 0);

WARNING:LINE_SPACING: Missing a blank line after declarations
#458: FILE: arch/ppc/platforms/ev64360.c:301:
+		char	*bus_id;
+		void	((*rtn)(struct platform_device *pdev));

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#474: FILE: arch/ppc/platforms/ev64360.c:317:
+		for (i=0; i<ARRAY_SIZE(dev_map); i++)
 		      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#474: FILE: arch/ppc/platforms/ev64360.c:317:
+		for (i=0; i<ARRAY_SIZE(dev_map); i++)
 		           ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#476: FILE: arch/ppc/platforms/ev64360.c:319:
+			if (!strncmp(dev->bus_id, dev_map[i].bus_id,
+				BUS_ID_SIZE)) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#477: FILE: arch/ppc/platforms/ev64360.c:320:
+				BUS_ID_SIZE)) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#479: FILE: arch/ppc/platforms/ev64360.c:322:
+				pdev = container_of(dev,
+					struct platform_device, dev);

CHECK:BIT_MACRO: Prefer using the BIT macro
#489: FILE: arch/ppc/platforms/ev64360.c:332:
+#define MB	(1 << 20)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#514: FILE: arch/ppc/platforms/ev64360.c:357:
+	if ((ptbl = kmalloc(ptbl_entries * sizeof(struct mtd_partition),

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#515: FILE: arch/ppc/platforms/ev64360.c:358:
+	if ((ptbl = kmalloc(ptbl_entries * sizeof(struct mtd_partition),
+		GFP_KERNEL)) == NULL) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#516: FILE: arch/ppc/platforms/ev64360.c:359:
+		GFP_KERNEL)) == NULL) {
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#517: FILE: arch/ppc/platforms/ev64360.c:360:
+		printk(KERN_WARNING "Can't alloc MTD partition table\n");

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#544: FILE: arch/ppc/platforms/ev64360.c:387:
+	volatile unsigned char * rtc_base = ioremap(EV64360_RTC_WINDOW_BASE,0x4000);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#544: FILE: arch/ppc/platforms/ev64360.c:387:
+	volatile unsigned char * rtc_base = ioremap(EV64360_RTC_WINDOW_BASE,0x4000);
 	                                                                   ^

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#544: FILE: arch/ppc/platforms/ev64360.c:387:
+	volatile unsigned char * rtc_base = ioremap(EV64360_RTC_WINDOW_BASE,0x4000);

WARNING:SPACING: space prohibited before semicolon
#552: FILE: arch/ppc/platforms/ev64360.c:395:
+	while (i-- > 0) ;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#552: FILE: arch/ppc/platforms/ev64360.c:395:
+	while (i-- > 0) ;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:SPACING: space prohibited before semicolon
#559: FILE: arch/ppc/platforms/ev64360.c:402:
+	while (1) ;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#559: FILE: arch/ppc/platforms/ev64360.c:402:
+	while (1) ;

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#573: FILE: arch/ppc/platforms/ev64360.c:416:
+	seq_printf(m, "vendor\t\t: " BOARD_VENDOR "\n");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#574: FILE: arch/ppc/platforms/ev64360.c:417:
+	seq_printf(m, "machine\t\t: " BOARD_MACHINE "\n");

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#575: FILE: arch/ppc/platforms/ev64360.c:418:
+	seq_printf(m, "bus speed\t: %dMHz\n", ev64360_bus_frequency/1000/1000);
 	                                                           ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#575: FILE: arch/ppc/platforms/ev64360.c:418:
+	seq_printf(m, "bus speed\t: %dMHz\n", ev64360_bus_frequency/1000/1000);
 	                                                                ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#587: FILE: arch/ppc/platforms/ev64360.c:430:
+	printk(KERN_INFO "time_init: decrementer frequency = %lu.%.6lu MHz\n",

WARNING:MEMORY_BARRIER: memory barrier without comment
#604: FILE: arch/ppc/platforms/ev64360.c:447:
+	mb();

WARNING:MEMORY_BARRIER: memory barrier without comment
#607: FILE: arch/ppc/platforms/ev64360.c:450:
+	mb();

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#614: FILE: arch/ppc/platforms/ev64360.c:457:
+	io_block_mapping(CONFIG_MV64X60_NEW_BASE, \

WARNING:TYPO_SPELLING: 'preceeding' may be misspelled - perhaps 'preceding'?
#630: FILE: arch/ppc/platforms/ev64360.c:473:
+	 * from birecs as discovered by the preceeding call to
 	                                    ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:SPACING: space required after that ',' (ctx:VxV)
#637: FILE: arch/ppc/platforms/ev64360.c:480:
+		memcpy( (void *)__res,(void *)(r3+KERNELBASE), sizeof(bd_t) );
 		                     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#637: FILE: arch/ppc/platforms/ev64360.c:480:
+		memcpy( (void *)__res,(void *)(r3+KERNELBASE), sizeof(bd_t) );
 		                                 ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#637: FILE: arch/ppc/platforms/ev64360.c:480:
+		memcpy( (void *)__res,(void *)(r3+KERNELBASE), sizeof(bd_t) );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#637: FILE: arch/ppc/platforms/ev64360.c:480:
+		memcpy( (void *)__res,(void *)(r3+KERNELBASE), sizeof(bd_t) );

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#639: FILE: arch/ppc/platforms/ev64360.c:482:
+		*(char *)(r7+KERNELBASE) = 0;
 		            ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#640: FILE: arch/ppc/platforms/ev64360.c:483:
+		strcpy(cmd_line, (char *)(r6+KERNELBASE));
 		                            ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#675: FILE: arch/ppc/platforms/ev64360.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#676: FILE: arch/ppc/platforms/ev64360.h:2:
+ * arch/ppc/platforms/ev64360.h

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#697: FILE: arch/ppc/platforms/ev64360.h:22:
KB and start

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#741: FILE: arch/ppc/platforms/ev64360.h:66:
+#define	EV64360_ETH_PORT_CONFIG_VALUE			\
+	ETH_UNICAST_NORMAL_MODE			|	\
+	ETH_DEFAULT_RX_QUEUE_0			|	\
+	ETH_DEFAULT_RX_ARP_QUEUE_0		|	\
+	ETH_RECEIVE_BC_IF_NOT_IP_OR_ARP		|	\
+	ETH_RECEIVE_BC_IF_IP			|	\
+	ETH_RECEIVE_BC_IF_ARP			|	\
+	ETH_CAPTURE_TCP_FRAMES_DIS		|	\
+	ETH_CAPTURE_UDP_FRAMES_DIS		|	\
+	ETH_DEFAULT_RX_TCP_QUEUE_0		|	\
+	ETH_DEFAULT_RX_UDP_QUEUE_0		|	\
+	ETH_DEFAULT_RX_BPDU_QUEUE_0

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#754: FILE: arch/ppc/platforms/ev64360.h:79:
+#define	EV64360_ETH_PORT_CONFIG_EXTEND_VALUE		\
+	ETH_SPAN_BPDU_PACKETS_AS_NORMAL		|	\
+	ETH_PARTITION_DISABLE

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'value' may be better as '(value)' to avoid precedence issues
#758: FILE: arch/ppc/platforms/ev64360.h:83:
+#define	GT_ETH_IPG_INT_RX(value)			\
+	((value & 0x3fff) << 8)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#761: FILE: arch/ppc/platforms/ev64360.h:86:
+#define	EV64360_ETH_PORT_SDMA_CONFIG_VALUE		\
+	ETH_RX_BURST_SIZE_4_64BIT		|	\
+	GT_ETH_IPG_INT_RX(0)			|	\
+	ETH_TX_BURST_SIZE_4_64BIT

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#766: FILE: arch/ppc/platforms/ev64360.h:91:
+#define	EV64360_ETH_PORT_SERIAL_CONTROL_VALUE		\
+	ETH_FORCE_LINK_PASS			|	\
+	ETH_ENABLE_AUTO_NEG_FOR_DUPLX		|	\
+	ETH_DISABLE_AUTO_NEG_FOR_FLOW_CTRL	|	\
+	ETH_ADV_SYMMETRIC_FLOW_CTRL		|	\
+	ETH_FORCE_FC_MODE_NO_PAUSE_DIS_TX	|	\
+	ETH_FORCE_BP_MODE_NO_JAM		|	\
+	BIT9					|	\
+	ETH_DO_NOT_FORCE_LINK_FAIL		|	\
+	ETH_RETRANSMIT_16_ATTEMPTS		|	\
+	ETH_ENABLE_AUTO_NEG_SPEED_GMII		|	\
+	ETH_DTE_ADV_0				|	\
+	ETH_DISABLE_AUTO_NEG_BYPASS		|	\
+	ETH_AUTO_NEG_NO_CHANGE			|	\
+	ETH_MAX_RX_PACKET_9700BYTE		|	\
+	ETH_CLR_EXT_LOOPBACK			|	\
+	ETH_SET_FULL_DUPLEX_MODE		|	\
+	ETH_ENABLE_FLOW_CTRL_TX_RX_IN_FULL_DUPLEX

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000156514.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 19 errors, 27 warnings, 30 checks, 723 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000156514.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
