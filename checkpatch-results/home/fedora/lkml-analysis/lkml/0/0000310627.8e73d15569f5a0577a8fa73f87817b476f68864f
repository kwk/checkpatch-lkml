WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#56: FILE: arch/i386/lib/memmove.c:1:
+#include <linux/module.h>

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#60: FILE: arch/i386/lib/memmove.c:5:
+/* Normally compiler builtins are used, but sometimes the compiler calls out
+   of line code. Based on asm-i386/string.h.

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#66: FILE: arch/i386/lib/memmove.c:11:
+void *memmove(void * dest,const void *src,size_t count)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#66: FILE: arch/i386/lib/memmove.c:11:
+void *memmove(void * dest,const void *src,size_t count)
                          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#66: FILE: arch/i386/lib/memmove.c:11:
+void *memmove(void * dest,const void *src,size_t count)
                                          ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#68: FILE: arch/i386/lib/memmove.c:13:
+^Iif (dest < src) { $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#69: FILE: arch/i386/lib/memmove.c:14:
+		__inline_memcpy(dest,src,count);
 		                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#69: FILE: arch/i386/lib/memmove.c:14:
+		__inline_memcpy(dest,src,count);
 		                        ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#73: FILE: arch/i386/lib/memmove.c:18:
+		unsigned long d0, d1, d2;
+		__asm__ __volatile__(

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#73: FILE: arch/i386/lib/memmove.c:18:
+		__asm__ __volatile__(

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#79: FILE: arch/i386/lib/memmove.c:24:
+			:"0" (count),
 			^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#80: FILE: arch/i386/lib/memmove.c:25:
+			"1" (count-1+(const char *)src),
 			          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#80: FILE: arch/i386/lib/memmove.c:25:
+			"1" (count-1+(const char *)src),
 			            ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#81: FILE: arch/i386/lib/memmove.c:26:
+			"2" (count-1+(char *)dest)
 			          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#81: FILE: arch/i386/lib/memmove.c:26:
+			"2" (count-1+(char *)dest)
 			            ^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#82: FILE: arch/i386/lib/memmove.c:27:
+			:"memory");
 			^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#85: FILE: arch/i386/lib/memmove.c:30:
+} $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#91: FILE: arch/i386/lib/memcpy.c:1:
+#include <linux/module.h>

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#98: FILE: arch/i386/lib/memcpy.c:6:
+/* These are only called by gcc when it decides that inlining the
+   builtins doesn't make sense. This is the case for big copies

ERROR:TRAILING_WHITESPACE: trailing whitespace
#113: FILE: arch/i386/lib/memcpy.c:13:
+   that seems to do well enough on most CPUs. On modern x86 $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#114: FILE: arch/i386/lib/memcpy.c:14:
+   they are typically quite well optimized in microcode. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#116: FILE: arch/i386/lib/memcpy.c:16:
+   On some other CPUs (K8 before B stepping, K7 XP+, VIA?, TMTA?) more $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#126: FILE: arch/i386/lib/memcpy.c:26:
+   benchmarks they push the target out of cache and cause a heavy $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#127: FILE: arch/i386/lib/memcpy.c:27:
+   performance penalty in the final user of the target who has to $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#130: FILE: arch/i386/lib/memcpy.c:30:
+   Athlon uses special MMX functions in mmx.c for {clear,copy}_page. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#131: FILE: arch/i386/lib/memcpy.c:31:
+   They are not used for memcpy/memset because the kernel rarely $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#137: FILE: arch/i386/lib/memcpy.c:36:
+   is better (needs benchmarking). The same is likely true on $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#140: FILE: arch/i386/lib/memcpy.c:39:
+   -AK(2004/01) */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#142: FILE: arch/i386/lib/memcpy.c:41:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#143: FILE: arch/i386/lib/memcpy.c:42:
+void * __memcpy(void * to, const void * from, size_t n)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#143: FILE: arch/i386/lib/memcpy.c:42:
+void * __memcpy(void * to, const void * from, size_t n)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#143: FILE: arch/i386/lib/memcpy.c:42:
+void * __memcpy(void * to, const void * from, size_t n)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#150: FILE: arch/i386/lib/memcpy.c:48:
+/* Alias for gcc */ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#152: FILE: arch/i386/lib/memcpy.c:50:
+void *memcpy(void * to, const void * from, size_t n) $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#152: FILE: arch/i386/lib/memcpy.c:50:
+void *memcpy(void * to, const void * from, size_t n) 

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#152: FILE: arch/i386/lib/memcpy.c:50:
+void *memcpy(void * to, const void * from, size_t n) 

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __alias("__memcpy") over __attribute__((alias("__memcpy")))
#153: FILE: arch/i386/lib/memcpy.c:51:
+__attribute__((alias("__memcpy")));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#156: FILE: arch/i386/lib/memcpy.c:54:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#161: FILE: arch/i386/lib/memset.c:1:
+#include <linux/module.h>

ERROR:TRAILING_WHITESPACE: trailing whitespace
#164: FILE: arch/i386/lib/memset.c:4:
+/* Please see the introductionary comment in memcpy.c. It applies to $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#165: FILE: arch/i386/lib/memset.c:5:
+/* Please see the introductionary comment in memcpy.c. It applies to 
+   memset too. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#165: FILE: arch/i386/lib/memset.c:5:
+   memset too. */

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#168: FILE: arch/i386/lib/memset.c:8:
+void * memset(void * s, int c, size_t count)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#168: FILE: arch/i386/lib/memset.c:8:
+void * memset(void * s, int c, size_t count)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#170: FILE: arch/i386/lib/memset.c:10:
+^Iunsigned fill = (unsigned)c * 0x01010101; $

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#170: FILE: arch/i386/lib/memset.c:10:
+	unsigned fill = (unsigned)c * 0x01010101; 

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#170: FILE: arch/i386/lib/memset.c:10:
+	unsigned fill = (unsigned)c * 0x01010101; 

WARNING:LINE_SPACING: Missing a blank line after declarations
#172: FILE: arch/i386/lib/memset.c:12:
+	int d0, d1;
+	asm volatile(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#172: FILE: arch/i386/lib/memset.c:12:
+	asm volatile(

CHECK:SPACING: No space is necessary after a cast
#182: FILE: arch/i386/lib/memset.c:22:
+		: "a" (fill), "q" (count), "0" (count/4), "1" ((long) s)

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#182: FILE: arch/i386/lib/memset.c:22:
+		: "a" (fill), "q" (count), "0" (count/4), "1" ((long) s)
 		                                     ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#184: FILE: arch/i386/lib/memset.c:24:
+^Ireturn (s);     $

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#184: FILE: arch/i386/lib/memset.c:24:
+	return (s);     

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#187: FILE: arch/i386/lib/memset.c:27:
+EXPORT_SYMBOL_NOVERS(memset);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#243: FILE: arch/i386/kernel/i386_ksyms.c:137:
+   but gcc sometimes decides not to inline them. */    $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#243: FILE: arch/i386/kernel/i386_ksyms.c:137:
+/* Export string functions. We normally rely on gcc builtin for most of these,
+   but gcc sometimes decides not to inline them. */    

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#243: FILE: arch/i386/kernel/i386_ksyms.c:137:
+   but gcc sometimes decides not to inline them. */    

ERROR:TRAILING_WHITESPACE: trailing whitespace
#249: FILE: arch/i386/kernel/i386_ksyms.c:143:
+#undef strchr^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#250: FILE: arch/i386/kernel/i386_ksyms.c:144:
+#undef strcmp $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#251: FILE: arch/i386/kernel/i386_ksyms.c:145:
+#undef strcpy $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#255: FILE: arch/i386/kernel/i386_ksyms.c:149:
+extern char * strcpy(char * dest,const char *src);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#255: FILE: arch/i386/kernel/i386_ksyms.c:149:
+extern char * strcpy(char * dest,const char *src);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#255: FILE: arch/i386/kernel/i386_ksyms.c:149:
+extern char * strcpy(char * dest,const char *src);
                                 ^

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#255: FILE: arch/i386/kernel/i386_ksyms.c:149:
+extern char * strcpy(char * dest,const char *src);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#256: FILE: arch/i386/kernel/i386_ksyms.c:150:
+extern int strcmp(const char * cs,const char * ct);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#256: FILE: arch/i386/kernel/i386_ksyms.c:150:
+extern int strcmp(const char * cs,const char * ct);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#256: FILE: arch/i386/kernel/i386_ksyms.c:150:
+extern int strcmp(const char * cs,const char * ct);
                                  ^

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#256: FILE: arch/i386/kernel/i386_ksyms.c:150:
+extern int strcmp(const char * cs,const char * ct);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#257: FILE: arch/i386/kernel/i386_ksyms.c:151:
+extern void *memchr(const void *s, int c, size_t n);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#258: FILE: arch/i386/kernel/i386_ksyms.c:152:
+extern char * strcat(char *, const char *);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#258: FILE: arch/i386/kernel/i386_ksyms.c:152:
+extern char * strcat(char *, const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#258: FILE: arch/i386/kernel/i386_ksyms.c:152:
+extern char * strcat(char *, const char *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#258: FILE: arch/i386/kernel/i386_ksyms.c:152:
+extern char * strcat(char *, const char *);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#260: FILE: arch/i386/kernel/i386_ksyms.c:154:
+EXPORT_SYMBOL_NOVERS(strlen);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#261: FILE: arch/i386/kernel/i386_ksyms.c:155:
+EXPORT_SYMBOL_NOVERS(memmove);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#262: FILE: arch/i386/kernel/i386_ksyms.c:156:
+EXPORT_SYMBOL_NOVERS(strcpy);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#263: FILE: arch/i386/kernel/i386_ksyms.c:157:
+EXPORT_SYMBOL_NOVERS(strncmp);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#264: FILE: arch/i386/kernel/i386_ksyms.c:158:
+EXPORT_SYMBOL_NOVERS(strncpy);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#265: FILE: arch/i386/kernel/i386_ksyms.c:159:
+EXPORT_SYMBOL_NOVERS(strchr);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#266: FILE: arch/i386/kernel/i386_ksyms.c:160:
+EXPORT_SYMBOL_NOVERS(strcmp); $

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#266: FILE: arch/i386/kernel/i386_ksyms.c:160:
+EXPORT_SYMBOL_NOVERS(strcmp); 

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#267: FILE: arch/i386/kernel/i386_ksyms.c:161:
+EXPORT_SYMBOL_NOVERS(strcat);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#268: FILE: arch/i386/kernel/i386_ksyms.c:162:
+EXPORT_SYMBOL_NOVERS(strncat);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#269: FILE: arch/i386/kernel/i386_ksyms.c:163:
+EXPORT_SYMBOL_NOVERS(memchr);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#270: FILE: arch/i386/kernel/i386_ksyms.c:164:
+EXPORT_SYMBOL_NOVERS(strrchr);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#271: FILE: arch/i386/kernel/i386_ksyms.c:165:
+EXPORT_SYMBOL_NOVERS(strnlen);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#272: FILE: arch/i386/kernel/i386_ksyms.c:166:
+EXPORT_SYMBOL_NOVERS(memscan);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#333: FILE: include/asm-i386/string.h:6:
+static inline void * __inline_memcpy(void * to, const void * from, size_t n)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#333: FILE: include/asm-i386/string.h:6:
+static inline void * __inline_memcpy(void * to, const void * from, size_t n)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#333: FILE: include/asm-i386/string.h:6:
+static inline void * __inline_memcpy(void * to, const void * from, size_t n)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#541: FILE: include/asm-i386/string.h:25:
+/* Even with __builtin_ the compiler may decide to use the out of line
+   function. The cutoff at 128 bytes has been unscientifically chosen,

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#542: FILE: include/asm-i386/string.h:26:
+   better values may be possibl.e */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#545: FILE: include/asm-i386/string.h:29:
+extern void *__memcpy(void *to, const void *from, size_t len); $

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#545: FILE: include/asm-i386/string.h:29:
+extern void *__memcpy(void *to, const void *from, size_t len); 

ERROR:SPACING: space required after that ',' (ctx:VxV)
#546: FILE: include/asm-i386/string.h:30:
+#define memcpy(dst,src,len) \
                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#546: FILE: include/asm-i386/string.h:30:
+#define memcpy(dst,src,len) \
                       ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'src' - possible side-effects?
#546: FILE: include/asm-i386/string.h:30:
+#define memcpy(dst,src,len) \
+	({ size_t __len = (len);				\
+	   void *__ret;						\
+	   if (__builtin_constant_p(len) && __len >= 128)	\
+		 __ret = __memcpy((dst),(src),__len);		\
+	   else							\
+		 __ret = __builtin_memcpy((dst),(src),__len);	\
+	   __ret; }) 

WARNING:TABSTOP: Statements should start on a tabstop
#548: FILE: include/asm-i386/string.h:32:
+	   void *__ret;						\

WARNING:TABSTOP: Statements should start on a tabstop
#549: FILE: include/asm-i386/string.h:33:
+	   if (__builtin_constant_p(len) && __len >= 128)	\

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (11, 17)
#549: FILE: include/asm-i386/string.h:33:
+	   if (__builtin_constant_p(len) && __len >= 128)	\
+		 __ret = __memcpy((dst),(src),__len);		\

ERROR:SPACING: space required after that ',' (ctx:VxV)
#550: FILE: include/asm-i386/string.h:34:
+		 __ret = __memcpy((dst),(src),__len);		\
 		                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#550: FILE: include/asm-i386/string.h:34:
+		 __ret = __memcpy((dst),(src),__len);		\
 		                             ^

WARNING:TABSTOP: Statements should start on a tabstop
#551: FILE: include/asm-i386/string.h:35:
+	   else							\

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (11, 17)
#551: FILE: include/asm-i386/string.h:35:
+	   else							\
+		 __ret = __builtin_memcpy((dst),(src),__len);	\

ERROR:SPACING: space required after that ',' (ctx:VxV)
#552: FILE: include/asm-i386/string.h:36:
+		 __ret = __builtin_memcpy((dst),(src),__len);	\
 		                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#552: FILE: include/asm-i386/string.h:36:
+		 __ret = __builtin_memcpy((dst),(src),__len);	\
 		                                     ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#553: FILE: include/asm-i386/string.h:37:
+^I   __ret; }) $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#632: FILE: include/asm-i386/string.h:43:
+void * memmove(void * dest,const void *src,size_t count);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#632: FILE: include/asm-i386/string.h:43:
+void * memmove(void * dest,const void *src,size_t count);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#632: FILE: include/asm-i386/string.h:43:
+void * memmove(void * dest,const void *src,size_t count);
                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#632: FILE: include/asm-i386/string.h:43:
+void * memmove(void * dest,const void *src,size_t count);
                                           ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#634: FILE: include/asm-i386/string.h:45:
+/* Use C out of line version for memcmp */ $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#636: FILE: include/asm-i386/string.h:47:
+int memcmp(const void * cs,const void * ct,size_t count);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#636: FILE: include/asm-i386/string.h:47:
+int memcmp(const void * cs,const void * ct,size_t count);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#636: FILE: include/asm-i386/string.h:47:
+int memcmp(const void * cs,const void * ct,size_t count);
                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#636: FILE: include/asm-i386/string.h:47:
+int memcmp(const void * cs,const void * ct,size_t count);
                                           ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#654: FILE: include/asm-i386/string.h:49:
+/* out of line string functions use always C versions */ $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#656: FILE: include/asm-i386/string.h:51:
+size_t strlen(const char * s);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#670: FILE: include/asm-i386/string.h:54:
+char * strcpy(char * dest,const char *src);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#670: FILE: include/asm-i386/string.h:54:
+char * strcpy(char * dest,const char *src);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#670: FILE: include/asm-i386/string.h:54:
+char * strcpy(char * dest,const char *src);
                          ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#675: FILE: include/asm-i386/string.h:57:
+char * strcat(char * dest, const char * src);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#675: FILE: include/asm-i386/string.h:57:
+char * strcat(char * dest, const char * src);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#675: FILE: include/asm-i386/string.h:57:
+char * strcat(char * dest, const char * src);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#802: FILE: include/asm-i386/string.h:60:
+int strcmp(const char * cs,const char * ct);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#802: FILE: include/asm-i386/string.h:60:
+int strcmp(const char * cs,const char * ct);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#802: FILE: include/asm-i386/string.h:60:
+int strcmp(const char * cs,const char * ct);
                           ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000310627.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 73 errors, 42 warnings, 12 checks, 689 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000310627.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
