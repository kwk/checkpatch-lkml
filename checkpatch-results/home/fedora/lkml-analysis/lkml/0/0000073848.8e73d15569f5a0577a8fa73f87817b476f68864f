WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#84: FILE: include/linux/fs.h:651:
+^I^I^I * ^Ii.e. # of distinct read-ahead pages accessed.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#87: FILE: include/linux/fs.h:654:
+^I^I^I * ^IA collection of sequential read-ahead requests.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#89: FILE: include/linux/fs.h:656:
+^I^I^I * ^INormally a seek starts a new sequence.$

WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#115: FILE: include/linux/fs.h:680:
+#define RA_FLAG_MISS	(1UL<<31) /* a cache miss occured against this file */
                     	                          ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#115: FILE: include/linux/fs.h:680:
 };
+#define RA_FLAG_MISS	(1UL<<31) /* a cache miss occured against this file */

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#115: FILE: include/linux/fs.h:680:
+#define RA_FLAG_MISS	(1UL<<31) /* a cache miss occured against this file */
                     	    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BIT_MACRO: Prefer using the BIT macro
#115: FILE: include/linux/fs.h:680:
+#define RA_FLAG_MISS	(1UL<<31) /* a cache miss occured against this file */

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#116: FILE: include/linux/fs.h:681:
+#define RA_FLAG_INCACHE	(1UL<<30) /* file is already in cache */
                        	    ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#116: FILE: include/linux/fs.h:681:
+#define RA_FLAG_INCACHE	(1UL<<30) /* file is already in cache */

WARNING:TYPO_SPELLING: 'mmaped' may be misspelled - perhaps 'mapped'?
#117: FILE: include/linux/fs.h:682:
+#define RA_FLAG_MMAP		(1UL<<29) /* mmaped page access */
                     		             ^^^^^^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#117: FILE: include/linux/fs.h:682:
+#define RA_FLAG_MMAP		(1UL<<29) /* mmaped page access */
                     		    ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#117: FILE: include/linux/fs.h:682:
+#define RA_FLAG_MMAP		(1UL<<29) /* mmaped page access */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#118: FILE: include/linux/fs.h:683:
+#define RA_FLAG_NO_LOOKAHEAD	(1UL<<28) /* disable look-ahead */
                             	    ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#118: FILE: include/linux/fs.h:683:
+#define RA_FLAG_NO_LOOKAHEAD	(1UL<<28) /* disable look-ahead */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#119: FILE: include/linux/fs.h:684:
+#define RA_FLAG_EOF		(1UL<<27) /* readahead hits EOF */
                    		    ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#119: FILE: include/linux/fs.h:684:
+#define RA_FLAG_EOF		(1UL<<27) /* readahead hits EOF */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#193: FILE: mm/readahead.c:884:
+static void ra_set_class(struct file_ra_state *ra,
+				enum ra_class ra_class)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#214: FILE: mm/readahead.c:905:
+^I * ^I- the stateful method continues any existing sequence;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#215: FILE: mm/readahead.c:906:
+^I * ^I- all other methods starts a new one.$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#228: FILE: mm/readahead.c:919:
+static void ra_set_index(struct file_ra_state *ra,
+				pgoff_t la_index, pgoff_t ra_index)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#238: FILE: mm/readahead.c:929:
+static void ra_set_size(struct file_ra_state *ra,
+				unsigned long ra_size, unsigned long la_size)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#248: FILE: mm/readahead.c:939:
+			struct address_space *mapping, struct file *filp)
 			                                            ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#248: FILE: mm/readahead.c:939:
+static int ra_dispatch(struct file_ra_state *ra,
+			struct address_space *mapping, struct file *filp)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#263: FILE: mm/readahead.c:954:
+^I * ^I- crossed the EOF boundary;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#264: FILE: mm/readahead.c:955:
+^I * ^I- is close to EOF(explained below).$

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#274: FILE: mm/readahead.c:965:
+	if (ra->readahead_index + ra_readahead_size(ra)/4 > eof_index) {
 	                                               ^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#290: FILE: mm/readahead.c:981:
+	actual = __do_page_cache_readahead(mapping, filp,
 	                                            ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#291: FILE: mm/readahead.c:982:
+	actual = __do_page_cache_readahead(mapping, filp,
+					ra->ra_index, ra_size, la_size);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#305: FILE: mm/readahead.c:996:
+	dprintk("readahead-%s(ino=%lu, index=%lu, ra=%lu+%lu-%lu) = %d\n",
+			ra_class_name[ra_class_new(ra)],

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000073848.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 0 errors, 11 warnings, 18 checks, 288 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000073848.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
