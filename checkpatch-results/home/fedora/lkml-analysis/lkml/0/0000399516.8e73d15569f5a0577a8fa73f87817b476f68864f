WARNING:TYPO_SPELLING: 'appropiate' may be misspelled - perhaps 'appropriate'?
#29: 
> some other name and add appropiate comments so that this can be catched 
                          ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'catched' may be misspelled - perhaps 'caught'?
#29: 
> some other name and add appropiate comments so that this can be catched 
                                                                  ^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#53: FILE: fs/file_table.c:96:
+ * allocate the security structure, and call the open function (if any).  The $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#58: FILE: fs/file_table.c:100:
+int open_private_file(struct file *filp, struct dentry *dentry, int mode)
                                    ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#72: FILE: fs/file_table.c:111:
+	error = security_file_alloc(filp);
 	                            ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#75: FILE: fs/file_table.c:114:
+			error = filp->f_op->open(dentry->d_inode, filp);
 			                                          ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#77: FILE: fs/file_table.c:116:
+				security_file_free(filp);
 				                   ^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#88: FILE: fs/file_table.c:127:
+	struct inode * inode = file->f_dentry->d_inode;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#126: FILE: fs/nfsd/vfs.c:471:
+	err = open_private_file(filp, dentry, mode);
 	                        ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#136: FILE: fs/nfsd/vfs.c:494:
+	close_private_file(filp);
 	                   ^^^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#149: FILE: include/linux/fs.h:496:
+extern int open_private_file(struct file *, struct dentry *, int);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#149: FILE: include/linux/fs.h:496:
+extern int open_private_file(struct file *, struct dentry *, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#149: FILE: include/linux/fs.h:496:
+extern int open_private_file(struct file *, struct dentry *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#149: FILE: include/linux/fs.h:496:
+extern int open_private_file(struct file *, struct dentry *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#151: FILE: include/linux/fs.h:498:
+extern void close_private_file(struct file *file);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#164: FILE: kernel/ksyms.c:183:
+EXPORT_SYMBOL(close_private_file);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000399516.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 2 errors, 12 warnings, 2 checks, 101 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000399516.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
