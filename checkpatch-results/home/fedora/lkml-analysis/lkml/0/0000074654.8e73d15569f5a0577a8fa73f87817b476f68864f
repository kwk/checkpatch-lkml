ERROR:TRAILING_WHITESPACE: trailing whitespace
#88: FILE: arch/x86_64/Kconfig:413:
+^I  (Double Address Cycle). Calgary also supports bus level $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#89: FILE: arch/x86_64/Kconfig:414:
+^I  isolation, where all DMAs pass through the IOMMU.  This $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#90: FILE: arch/x86_64/Kconfig:415:
+^I  prevents them from going anywhere except their intended $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#93: FILE: arch/x86_64/Kconfig:418:
+^I  properly to set up their DMA buffers.  The IOMMU can be $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#94: FILE: arch/x86_64/Kconfig:419:
+^I  turned off at boot time with the iommu=off parameter.  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#127: FILE: arch/x86_64/kernel/pci-dma.c:291:
+#ifdef CONFIG_CALGARY_IOMMU $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#138: FILE: arch/x86_64/kernel/pci-dma.c:302:
+#ifdef CONFIG_CALGARY_IOMMU $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#161: FILE: arch/x86_64/kernel/pci-calgary.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#178: FILE: arch/x86_64/kernel/pci-calgary.c:18:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#179: FILE: arch/x86_64/kernel/pci-calgary.c:19:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA$

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#271: FILE: arch/x86_64/kernel/pci-calgary.c:111:
+void* tce_table_kva[MAX_NUM_OF_PHBS * MAX_NUMNODES];

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#273: FILE: arch/x86_64/kernel/pci-calgary.c:113:
+static int translate_empty_slots __read_mostly = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#274: FILE: arch/x86_64/kernel/pci-calgary.c:114:
+static int calgary_detected __read_mostly = 0;

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#306: FILE: arch/x86_64/kernel/pci-calgary.c:146:
+static inline int translate_phb(struct pci_dev* dev)

WARNING:LINE_SPACING: Missing a blank line after declarations
#309: FILE: arch/x86_64/kernel/pci-calgary.c:149:
+	int disabled = test_bit(dev->bus->number, translation_disabled);
+	return !disabled;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#313: FILE: arch/x86_64/kernel/pci-calgary.c:153:
+        unsigned long start_addr, unsigned int npages)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#313: FILE: arch/x86_64/kernel/pci-calgary.c:153:
+static void iommu_range_reserve(struct iommu_table *tbl,
+        unsigned long start_addr, unsigned int npages)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#313: FILE: arch/x86_64/kernel/pci-calgary.c:153:
+        unsigned long start_addr, unsigned int npages)$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#330: FILE: arch/x86_64/kernel/pci-calgary.c:170:
+			printk(KERN_ERR "Calgary: entry already allocated at "

WARNING:SPLIT_STRING: quoted string split across lines
#331: FILE: arch/x86_64/kernel/pci-calgary.c:171:
+			printk(KERN_ERR "Calgary: entry already allocated at "
+			       "0x%lx tbl %p dma 0x%lx npages %u\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#339: FILE: arch/x86_64/kernel/pci-calgary.c:179:
+static unsigned long iommu_range_alloc(struct iommu_table *tbl,
+	unsigned int npages)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#343: FILE: arch/x86_64/kernel/pci-calgary.c:183:
+	BUG_ON(npages == 0);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#352: FILE: arch/x86_64/kernel/pci-calgary.c:192:
+			printk(KERN_WARNING "Calgary: IOMMU full.\n");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#362: FILE: arch/x86_64/kernel/pci-calgary.c:202:
+	BUG_ON(tbl->it_hint > tbl->it_size);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#368: FILE: arch/x86_64/kernel/pci-calgary.c:208:
+static dma_addr_t iommu_alloc(struct iommu_table *tbl, void *vaddr,
+	unsigned int npages, int direction)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#393: FILE: arch/x86_64/kernel/pci-calgary.c:233:
+	printk(KERN_WARNING "Calgary: failed to allocate %u pages in "

WARNING:SPLIT_STRING: quoted string split across lines
#394: FILE: arch/x86_64/kernel/pci-calgary.c:234:
+	printk(KERN_WARNING "Calgary: failed to allocate %u pages in "
+	       "iommu %p\n", npages, tbl);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#399: FILE: arch/x86_64/kernel/pci-calgary.c:239:
+static void __iommu_free(struct iommu_table *tbl, dma_addr_t dma_addr,
+	unsigned int npages)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#406: FILE: arch/x86_64/kernel/pci-calgary.c:246:
+	BUG_ON(entry + npages > tbl->it_size);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#412: FILE: arch/x86_64/kernel/pci-calgary.c:252:
+			printk(KERN_ERR "Calgary: bit is off at 0x%lx "

WARNING:SPLIT_STRING: quoted string split across lines
#413: FILE: arch/x86_64/kernel/pci-calgary.c:253:
+			printk(KERN_ERR "Calgary: bit is off at 0x%lx "
+			       "tbl %p dma 0x%Lx entry 0x%lx npages %u\n",

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#413: FILE: arch/x86_64/kernel/pci-calgary.c:253:
+			       "tbl %p dma 0x%Lx entry 0x%lx npages %u\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#423: FILE: arch/x86_64/kernel/pci-calgary.c:263:
+static void iommu_free(struct iommu_table *tbl, dma_addr_t dma_addr,
+	unsigned int npages)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#435: FILE: arch/x86_64/kernel/pci-calgary.c:275:
+static void __calgary_unmap_sg(struct iommu_table *tbl,
+	struct scatterlist *sglist, int nelems, int direction)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#467: FILE: arch/x86_64/kernel/pci-calgary.c:307:
+static int calgary_nontranslate_map_sg(struct device* dev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#468: FILE: arch/x86_64/kernel/pci-calgary.c:308:
+static int calgary_nontranslate_map_sg(struct device* dev,
+	struct scatterlist *sg, int nelems, int direction)

ERROR:CODE_INDENT: code indent should use tabs where possible
#472: FILE: arch/x86_64/kernel/pci-calgary.c:312:
+ ^Ifor (i = 0; i < nelems; i++ ) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#472: FILE: arch/x86_64/kernel/pci-calgary.c:312:
+ ^Ifor (i = 0; i < nelems; i++ ) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#472: FILE: arch/x86_64/kernel/pci-calgary.c:312:
+ ^Ifor (i = 0; i < nelems; i++ ) {$

ERROR:SPACING: space prohibited before that close parenthesis ')'
#472: FILE: arch/x86_64/kernel/pci-calgary.c:312:
+ 	for (i = 0; i < nelems; i++ ) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#474: FILE: arch/x86_64/kernel/pci-calgary.c:314:
+		struct scatterlist *s = &sg[i];
+		BUG_ON(!s->page);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#474: FILE: arch/x86_64/kernel/pci-calgary.c:314:
+		BUG_ON(!s->page);

CHECK:SPACING: spaces preferred around that '+' (ctx:WxV)
#475: FILE: arch/x86_64/kernel/pci-calgary.c:315:
+		s->dma_address = virt_to_bus(page_address(s->page) +s->offset);
 		                                                   ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#482: FILE: arch/x86_64/kernel/pci-calgary.c:322:
+int calgary_map_sg(struct device *dev, struct scatterlist *sg,
+	int nelems, int direction)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#496: FILE: arch/x86_64/kernel/pci-calgary.c:336:
+	for (i = 0; i < nelems; i++ ) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#498: FILE: arch/x86_64/kernel/pci-calgary.c:338:
+		struct scatterlist *s = &sg[i];
+		BUG_ON(!s->page);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#498: FILE: arch/x86_64/kernel/pci-calgary.c:338:
+		BUG_ON(!s->page);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#533: FILE: arch/x86_64/kernel/pci-calgary.c:373:
+dma_addr_t calgary_map_single(struct device *dev, void *vaddr,
+	size_t size, int direction)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#552: FILE: arch/x86_64/kernel/pci-calgary.c:392:
+void calgary_unmap_single(struct device *dev, dma_addr_t dma_handle,
+	size_t size, int direction)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#564: FILE: arch/x86_64/kernel/pci-calgary.c:404:
+void* calgary_alloc_coherent(struct device *dev, size_t size,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#565: FILE: arch/x86_64/kernel/pci-calgary.c:405:
+void* calgary_alloc_coherent(struct device *dev, size_t size,
+	dma_addr_t *dma_handle, gfp_t flag)

CHECK:BRACES: Unbalanced braces around else statement
#591: FILE: arch/x86_64/kernel/pci-calgary.c:431:
+	} else /* non translated slot */

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#637: FILE: arch/x86_64/kernel/pci-calgary.c:477:
+static inline void __iomem* calgary_reg(void __iomem *bar, unsigned long offset)

WARNING:LINE_SPACING: Missing a blank line after declarations
#640: FILE: arch/x86_64/kernel/pci-calgary.c:480:
+	unsigned long target = ((unsigned long)bar) | offset;
+	return (void __iomem*)target;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#640: FILE: arch/x86_64/kernel/pci-calgary.c:480:
+	return (void __iomem*)target;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#667: FILE: arch/x86_64/kernel/pci-calgary.c:507:
+		printk(KERN_WARNING "Calgary: PCI bus not quiesced, "

WARNING:SPLIT_STRING: quoted string split across lines
#668: FILE: arch/x86_64/kernel/pci-calgary.c:508:
+		printk(KERN_WARNING "Calgary: PCI bus not quiesced, "
+		       "continuing anyway\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#681: FILE: arch/x86_64/kernel/pci-calgary.c:521:
+static void __init calgary_reserve_mem_region(struct pci_dev *dev, u64 start,
+	u64 limit)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#803: FILE: arch/x86_64/kernel/pci-calgary.c:643:
+	BUG_ON(specified_table_size > TCE_TABLE_SIZE_8M);

CHECK:SPACING: No space is necessary after a cast
#804: FILE: arch/x86_64/kernel/pci-calgary.c:644:
+	val64 |= (u64) specified_table_size;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#842: FILE: arch/x86_64/kernel/pci-calgary.c:682:
+		printk(KERN_EMERG "calgary_watchdog: DMA error on bus %d, "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'calgary_watchdog', this function's name, in a string
#842: FILE: arch/x86_64/kernel/pci-calgary.c:682:
+		printk(KERN_EMERG "calgary_watchdog: DMA error on bus %d, "

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:SPLIT_STRING: quoted string split across lines
#843: FILE: arch/x86_64/kernel/pci-calgary.c:683:
+		printk(KERN_EMERG "calgary_watchdog: DMA error on bus %d, "
+				  "CSR = %#x\n", dev->bus->number, val32);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#876: FILE: arch/x86_64/kernel/pci-calgary.c:716:
+	printk(KERN_INFO "Calgary: enabling translation on PHB %d\n", busnum);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#877: FILE: arch/x86_64/kernel/pci-calgary.c:717:
+	printk(KERN_INFO "Calgary: errant DMAs will now be prevented on this "

WARNING:SPLIT_STRING: quoted string split across lines
#878: FILE: arch/x86_64/kernel/pci-calgary.c:718:
+	printk(KERN_INFO "Calgary: errant DMAs will now be prevented on this "
+	       "bus.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#906: FILE: arch/x86_64/kernel/pci-calgary.c:746:
+	printk(KERN_INFO "Calgary: disabling translation on PHB %d!\n", busnum);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1053: FILE: arch/x86_64/kernel/pci-calgary.c:893:
+		BUG_ON(bus > MAX_NUMNODES * MAX_PHB_BUS_NUM);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1057: FILE: arch/x86_64/kernel/pci-calgary.c:897:
+			printk(KERN_INFO "Calgary: translation is disabled for "

WARNING:SPLIT_STRING: quoted string split across lines
#1058: FILE: arch/x86_64/kernel/pci-calgary.c:898:
+			printk(KERN_INFO "Calgary: translation is disabled for "
+			       "PHB 0x%x\n", bus);

CHECK:BRACES: braces {} should be used on all arms of this statement
#1069: FILE: arch/x86_64/kernel/pci-calgary.c:909:
+		if (val != 0xffffffff || translate_empty_slots) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1074: FILE: arch/x86_64/kernel/pci-calgary.c:914:
+		} else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1084: FILE: arch/x86_64/kernel/pci-calgary.c:924:
+		printk(KERN_INFO "PCI-DMA: Calgary IOMMU detected. "

WARNING:SPLIT_STRING: quoted string split across lines
#1085: FILE: arch/x86_64/kernel/pci-calgary.c:925:
+		printk(KERN_INFO "PCI-DMA: Calgary IOMMU detected. "
+		       "TCE table spec is %d.\n", specified_table_size);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1106: FILE: arch/x86_64/kernel/pci-calgary.c:946:
+	printk(KERN_INFO "PCI-DMA: Using Calgary IOMMU\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1110: FILE: arch/x86_64/kernel/pci-calgary.c:950:
+		printk(KERN_ERR "PCI-DMA: Calgary init failed %d, "

WARNING:SPLIT_STRING: quoted string split across lines
#1111: FILE: arch/x86_64/kernel/pci-calgary.c:951:
+		printk(KERN_ERR "PCI-DMA: Calgary init failed %d, "
+		       "falling back to no_iommu\n", ret);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1113: FILE: arch/x86_64/kernel/pci-calgary.c:953:
+			printk(KERN_ERR "WARNING more than 4GB of memory, "

WARNING:SPLIT_STRING: quoted string split across lines
#1114: FILE: arch/x86_64/kernel/pci-calgary.c:954:
+			printk(KERN_ERR "WARNING more than 4GB of memory, "
+					"32bit PCI may malfunction.\n");

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1128: FILE: arch/x86_64/kernel/pci-calgary.c:968:
+	char* endp;

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#1159: FILE: arch/x86_64/kernel/pci-calgary.c:999:
+			bridge = simple_strtol(p, &endp, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1164: FILE: arch/x86_64/kernel/pci-calgary.c:1004:
+				printk(KERN_INFO "Calgary: disabling "

WARNING:SPLIT_STRING: quoted string split across lines
#1165: FILE: arch/x86_64/kernel/pci-calgary.c:1005:
+				printk(KERN_INFO "Calgary: disabling "
+				       "translation for PHB 0x%x\n", bridge);

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#1178: FILE: arch/x86_64/kernel/pci-calgary.c:1018:
+__setup("calgary=", calgary_parse_options);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1183: FILE: arch/x86_64/kernel/tce.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1200: FILE: arch/x86_64/kernel/tce.c:18:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1201: FILE: arch/x86_64/kernel/tce.c:19:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA$

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1218: FILE: arch/x86_64/kernel/tce.c:36:
+static inline void flush_tce(void* tceaddr)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1228: FILE: arch/x86_64/kernel/tce.c:46:
+void tce_build(struct iommu_table *tbl, unsigned long index,
+	unsigned int npages, unsigned long uaddr, int direction)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1230: FILE: arch/x86_64/kernel/tce.c:48:
+	u64* tp;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1238: FILE: arch/x86_64/kernel/tce.c:56:
+	tp = ((u64*)tbl->it_base) + index;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1241: FILE: arch/x86_64/kernel/tce.c:59:
+		rpn = (virt_to_bus((void*)uaddr)) >> PAGE_SHIFT;

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1255: FILE: arch/x86_64/kernel/tce.c:73:
+	u64* tp;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1257: FILE: arch/x86_64/kernel/tce.c:75:
+	tp  = ((u64*)tbl->it_base) + index;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1291: FILE: arch/x86_64/kernel/tce.c:109:
+		printk(KERN_ERR "Calgary: iommu_table_setparms: "

WARNING:SPLIT_STRING: quoted string split across lines
#1292: FILE: arch/x86_64/kernel/tce.c:110:
+		printk(KERN_ERR "Calgary: iommu_table_setparms: "
+		       "no table allocated?!\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1304: FILE: arch/x86_64/kernel/tce.c:122:
+		printk(KERN_ERR "Calgary: cannot allocate bitmap\n");

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1309: FILE: arch/x86_64/kernel/tce.c:127:
+	tbl->it_map = (unsigned long*)bmppages;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1329: FILE: arch/x86_64/kernel/tce.c:147:
+		printk(KERN_ERR "Calgary: dev %p has sysdata %p\n",

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1331: FILE: arch/x86_64/kernel/tce.c:149:
+		BUG();

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*tbl)...) over kzalloc(sizeof(struct iommu_table)...)
#1334: FILE: arch/x86_64/kernel/tce.c:152:
+	tbl = kzalloc(sizeof(struct iommu_table), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1336: FILE: arch/x86_64/kernel/tce.c:154:
+		printk(KERN_ERR "Calgary: error allocating iommu_table\n");

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#1336: FILE: arch/x86_64/kernel/tce.c:154:
+	if (!tbl) {
+		printk(KERN_ERR "Calgary: error allocating iommu_table\n");

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1363: FILE: arch/x86_64/kernel/tce.c:181:
+void* alloc_tce_table(void)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1389: FILE: include/asm-x86_64/calgary.h:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1406: FILE: include/asm-x86_64/calgary.h:18:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1407: FILE: include/asm-x86_64/calgary.h:19:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1442: FILE: include/asm-x86_64/calgary.h:54:
+extern int calgary_iommu_init(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1443: FILE: include/asm-x86_64/calgary.h:55:
+extern void detect_calgary(void);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1459: FILE: include/asm-x86_64/tce.h:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1476: FILE: include/asm-x86_64/tce.h:18:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1477: FILE: include/asm-x86_64/tce.h:19:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA$

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1483: FILE: include/asm-x86_64/tce.h:25:
+extern void* tce_table_kva[];

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1498: FILE: include/asm-x86_64/tce.h:40:
+extern void tce_build(struct iommu_table *tbl, unsigned long index,

ERROR:CODE_INDENT: code indent should use tabs where possible
#1499: FILE: include/asm-x86_64/tce.h:41:
+        unsigned int npages, unsigned long uaddr, int direction);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1499: FILE: include/asm-x86_64/tce.h:41:
+extern void tce_build(struct iommu_table *tbl, unsigned long index,
+        unsigned int npages, unsigned long uaddr, int direction);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1499: FILE: include/asm-x86_64/tce.h:41:
+        unsigned int npages, unsigned long uaddr, int direction);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1500: FILE: include/asm-x86_64/tce.h:42:
+extern void tce_free(struct iommu_table *tbl, long index, unsigned int npages);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1501: FILE: include/asm-x86_64/tce.h:43:
+extern void* alloc_tce_table(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1501: FILE: include/asm-x86_64/tce.h:43:
+extern void* alloc_tce_table(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1502: FILE: include/asm-x86_64/tce.h:44:
+extern void free_tce_table(void *tbl);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1503: FILE: include/asm-x86_64/tce.h:45:
+extern int build_tce_table(struct pci_dev *dev, void __iomem *bbar);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000074654.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 39 errors, 55 warnings, 28 checks, 1426 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000074654.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
