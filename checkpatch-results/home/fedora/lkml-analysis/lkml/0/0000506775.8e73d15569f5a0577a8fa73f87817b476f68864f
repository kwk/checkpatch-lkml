WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#36: 
--- 0.41/fs/super.c Thu, 11 Oct 2001 09:27:57 -0400 root (linux/d/45_super.c 1.1.2.1.4.1.2.1 644)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#58: FILE: fs/super.c:334:
+		if (sb->s_op->write_super_lockfs) {
+			sb->s_op->write_super_lockfs(sb);
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#77: FILE: fs/super.c:381:
+	struct super_block * sb;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#91: FILE: fs/super.c:395:
+	struct super_block * sb;

WARNING:SPACING: space prohibited before semicolon
#97: FILE: fs/super.c:401:
+				sb->s_op->unlockfs(sb) ;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited before semicolon
#111: FILE: fs/super.c:629:
+	down(&lockfs_sem) ;

WARNING:SPACING: space prohibited before semicolon
#143: FILE: fs/super.c:680:
+	up(&lockfs_sem) ;

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#173: FILE: fs/buffer.c:365:
+	/* you are not allowed to try locking all the filesystems
+	** on the system, your chances of getting through without

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:SPACING: space prohibited before semicolon
#177: FILE: fs/buffer.c:369:
+		return fsync_dev(dev) ;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#182: FILE: fs/buffer.c:374:
+^I/* note, the FS might need to start transactions to $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#183: FILE: fs/buffer.c:375:
+	/* note, the FS might need to start transactions to 
+	** sync the inodes, or the quota, no locking until

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#189: FILE: fs/buffer.c:381:
+	/* if inodes or quotas could be dirtied during the
+	** sync_supers_lockfs call, the FS is responsible for getting

WARNING:SPACING: space prohibited before semicolon
#192: FILE: fs/buffer.c:384:
+	sync_supers_lockfs(dev) ;

WARNING:SPACING: space prohibited before semicolon
#195: FILE: fs/buffer.c:387:
+	return sync_buffers(dev, 1) ;

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#248: FILE: kernel/ksyms.c:182:
+EXPORT_SYMBOL(unlockfs);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#259: FILE: include/linux/fs.h:1188:
+extern int fsync_dev_lockfs(kdev_t);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kdev_t' should also have an identifier name
#259: FILE: include/linux/fs.h:1188:
+extern int fsync_dev_lockfs(kdev_t);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#267: FILE: include/linux/fs.h:1200:
+extern void sync_supers_lockfs(kdev_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kdev_t' should also have an identifier name
#267: FILE: include/linux/fs.h:1200:
+extern void sync_supers_lockfs(kdev_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#268: FILE: include/linux/fs.h:1201:
+extern void unlockfs(kdev_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kdev_t' should also have an identifier name
#268: FILE: include/linux/fs.h:1201:
+extern void unlockfs(kdev_t);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000506775.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 3 errors, 15 warnings, 3 checks, 206 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000506775.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
