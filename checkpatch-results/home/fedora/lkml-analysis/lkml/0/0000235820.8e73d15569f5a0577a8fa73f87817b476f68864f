WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1586: FILE: arch/mips/kernel/kgdb.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#1587: FILE: arch/mips/kernel/kgdb.c:2:
+ * arch/mips/kernel/kgdb.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/cacheflush.h> instead of <asm/cacheflush.h>
#1625: FILE: arch/mips/kernel/kgdb.c:40:
+#include <asm/cacheflush.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/kdebug.h> instead of <asm/kdebug.h>
#1626: FILE: arch/mips/kernel/kgdb.c:41:
+#include <asm/kdebug.h>

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1646: FILE: arch/mips/kernel/kgdb.c:61:
+extern atomic_t cpu_doing_single_step;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1650: FILE: arch/mips/kernel/kgdb.c:65:
+extern void trap_low(void);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1651: FILE: arch/mips/kernel/kgdb.c:66:
+extern void breakinst(void);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1674: FILE: arch/mips/kernel/kgdb.c:89:
+	if (atomic_read (&kgdb_setting_breakpoint))

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '&kgdb_setting_breakpoint'
#1674: FILE: arch/mips/kernel/kgdb.c:89:
+	if (atomic_read (&kgdb_setting_breakpoint))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:SPACING: space prohibited after that open parenthesis '('
#1675: FILE: arch/mips/kernel/kgdb.c:90:
+		if ( (trap == 9) && (regs->cp0_epc == (unsigned long)breakinst) )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1675: FILE: arch/mips/kernel/kgdb.c:90:
+		if ( (trap == 9) && (regs->cp0_epc == (unsigned long)breakinst) )

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'trap == 9'
#1675: FILE: arch/mips/kernel/kgdb.c:90:
+		if ( (trap == 9) && (regs->cp0_epc == (unsigned long)breakinst) )

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'regs->cp0_epc == (unsigned long)breakinst'
#1675: FILE: arch/mips/kernel/kgdb.c:90:
+		if ( (trap == 9) && (regs->cp0_epc == (unsigned long)breakinst) )

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#1697: FILE: arch/mips/kernel/kgdb.c:112:
+#if 0

WARNING:RETURN_VOID: void function return statements are not generally useful
#1729: FILE: arch/mips/kernel/kgdb.c:144:
+	return;
+}

WARNING:RETURN_VOID: void function return statements are not generally useful
#1747: FILE: arch/mips/kernel/kgdb.c:162:
+	return;
+}

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#1757: FILE: arch/mips/kernel/kgdb.c:172:
+	unsigned long ksp = (unsigned long)ti + THREAD_SIZE -32;
 	                                                    ^

WARNING:RETURN_VOID: void function return statements are not generally useful
#1783: FILE: arch/mips/kernel/kgdb.c:198:
+	return;
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1790: FILE: arch/mips/kernel/kgdb.c:205:
+static int kgdb_mips_notify(struct notifier_block *self, unsigned long cmd,
+			void *ptr)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1817: FILE: arch/mips/kernel/kgdb.c:232:
+int kgdb_arch_handle_exception(int vector, int signo, int err_code,
+				char *InBuffer, char *outBuffer,

CHECK:CAMELCASE: Avoid CamelCase: <InBuffer>
#1817: FILE: arch/mips/kernel/kgdb.c:232:
+				char *InBuffer, char *outBuffer,

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <outBuffer>
#1817: FILE: arch/mips/kernel/kgdb.c:232:
+				char *InBuffer, char *outBuffer,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1822: FILE: arch/mips/kernel/kgdb.c:237:
+	int cpu = smp_processor_id ();

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#1824: FILE: arch/mips/kernel/kgdb.c:239:
+	switch (InBuffer[0]) {
+		case 's':
+		case 'c':

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:SPACING: space required after that ',' (ctx:VxO)
#1837: FILE: arch/mips/kernel/kgdb.c:252:
+			atomic_set(&cpu_doing_single_step,-1);
 			                                 ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#1837: FILE: arch/mips/kernel/kgdb.c:252:
+			atomic_set(&cpu_doing_single_step,-1);
 			                                  ^

WARNING:CONST_STRUCT: struct kgdb_arch should normally be const
#1848: FILE: arch/mips/kernel/kgdb.c:263:
+struct kgdb_arch arch_kgdb_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#1861: FILE: arch/mips/kernel/kgdb.c:276:
+void __attribute__ ((weak)) kgdb_mips_init(void)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1872: FILE: arch/mips/kernel/kgdb.c:287:
+	 * a before/after in kgdb_handle_exception(...) -- Tom */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1882: FILE: arch/mips/kernel/kgdb_handler.S:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#1883: FILE: arch/mips/kernel/kgdb_handler.S:2:
+ * arch/mips/kernel/kgdb_handler.S

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/kdebug.h> instead of <asm/kdebug.h>
#1964: FILE: arch/mips/kernel/traps.c:43:
+#include <asm/kdebug.h>

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#2126: FILE: arch/mips/mips-boards/malta/malta_int.c:43:
+extern int kgdb_early_setup;

CHECK:CAMELCASE: Avoid CamelCase: <mipsIRQ>
#2150: FILE: arch/mips/mips-boards/malta/malta_int.c:198:
+	set_except_vector(0, mipsIRQ);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2329: FILE: arch/mips/sibyte/sb1250/kgdb_sibyte.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#2330: FILE: arch/mips/sibyte/sb1250/kgdb_sibyte.c:2:
+ * arch/mips/sibyte/sb1250/kgdb_sibyte.c

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/io.h> instead of <asm/io.h>
#2353: FILE: arch/mips/sibyte/sb1250/kgdb_sibyte.c:25:
+#include <asm/io.h>

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#2363: FILE: arch/mips/sibyte/sb1250/kgdb_sibyte.c:35:
+extern char sb1250_duart_present[];

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#2364: FILE: arch/mips/sibyte/sb1250/kgdb_sibyte.c:36:
+extern int sb1250_steal_irq(int irq);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#2365: FILE: arch/mips/sibyte/sb1250/kgdb_sibyte.c:37:
+extern int kgdb_early_setup;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2371: FILE: arch/mips/sibyte/sb1250/kgdb_sibyte.c:43:
+#define	duart_out(reg, val)	csr_out32(val, IOADDR(A_DUART_CHANREG(kgdb_port,reg)))
        	                   	                                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2372: FILE: arch/mips/sibyte/sb1250/kgdb_sibyte.c:44:
+#define duart_in(reg)		csr_in32(IOADDR(A_DUART_CHANREG(kgdb_port,reg)))
                      		                                         ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#2376: FILE: arch/mips/sibyte/sb1250/kgdb_sibyte.c:48:
+	while ((duart_in(R_DUART_STATUS) & M_DUART_TX_RDY) == 0);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2389: FILE: arch/mips/sibyte/sb1250/kgdb_sibyte.c:61:
+	while ((status & M_DUART_RX_RDY) == 0) {
+		status = duart_in(R_DUART_STATUS);
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2431: FILE: arch/mips/sibyte/sb1250/kgdb_sibyte.c:103:
+	duart_out(R_DUART_MODE_REG_1,
+			V_DUART_BITS_PER_CHAR_8 | V_DUART_PARITY_MODE_NONE);

WARNING:CONST_STRUCT: struct kgdb_io should normally be const
#2451: FILE: arch/mips/sibyte/sb1250/kgdb_sibyte.c:123:
+struct kgdb_io kgdb_io_ops = {

ERROR:CODE_INDENT: code indent should use tabs where possible
#2482: FILE: arch/mips/sibyte/sb1250/kgdb_sibyte.c:154:
+       ^I             IOADDR(A_IMR_REGISTER(0, R_IMR_INTERRUPT_MAP_BASE) +$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2482: FILE: arch/mips/sibyte/sb1250/kgdb_sibyte.c:154:
+       ^I             IOADDR(A_IMR_REGISTER(0, R_IMR_INTERRUPT_MAP_BASE) +$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2482: FILE: arch/mips/sibyte/sb1250/kgdb_sibyte.c:154:
+	__raw_writeq(IMR_IP6_VAL,
+       	             IOADDR(A_IMR_REGISTER(0, R_IMR_INTERRUPT_MAP_BASE) +

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2482: FILE: arch/mips/sibyte/sb1250/kgdb_sibyte.c:154:
+       ^I             IOADDR(A_IMR_REGISTER(0, R_IMR_INTERRUPT_MAP_BASE) +$

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#2483: FILE: arch/mips/sibyte/sb1250/kgdb_sibyte.c:155:
+			(kgdb_irq<<3)));
 			         ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2578: FILE: include/asm-mips/kdebug.h:1:
+/*

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2618: FILE: include/asm-mips/kdebug.h:41:
+static inline int notify_die(enum die_val val,char *str,struct pt_regs *regs,long err)
                                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2618: FILE: include/asm-mips/kdebug.h:41:
+static inline int notify_die(enum die_val val,char *str,struct pt_regs *regs,long err)
                                                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2618: FILE: include/asm-mips/kdebug.h:41:
+static inline int notify_die(enum die_val val,char *str,struct pt_regs *regs,long err)
                                                                             ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2620: FILE: include/asm-mips/kdebug.h:43:
+	struct die_args args = { .regs=regs, .str=str, .err=err };
 	                              ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2620: FILE: include/asm-mips/kdebug.h:43:
+	struct die_args args = { .regs=regs, .str=str, .err=err };
 	                                         ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2620: FILE: include/asm-mips/kdebug.h:43:
+	struct die_args args = { .regs=regs, .str=str, .err=err };
 	                                                   ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#2621: FILE: include/asm-mips/kdebug.h:44:
+	struct die_args args = { .regs=regs, .str=str, .err=err };
+	return notifier_call_chain(&mips_die_chain, val, &args);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2629: FILE: include/asm-mips/kgdb.h:1:
+#ifndef _ASM_KGDB_H_

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2635: FILE: include/asm-mips/kgdb.h:7:
+#define NUMREGBYTES		(90*sizeof(long))
                    		   ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2638: FILE: include/asm-mips/kgdb.h:10:
+#define BREAKPOINT()		__asm__ __volatile__ (		\
+					".globl breakinst\n\t"	\
+					".set\tnoreorder\n\t"	\
+					"nop\n"			\
+					"breakinst:\tbreak\n\t"	\
+					"nop\n\t"		\
+					".set\treorder")

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2646: FILE: include/asm-mips/kgdb.h:18:
+#define CHECK_EXCEPTION_STACK() ^I1$

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#2673: FILE: lib/Kconfig.debug:144:
+config KGDB_SIBYTE
+	bool "KGDB: On the Broadcom SWARM serial port"
+	depends on MIPS && SIBYTE_SB1xxx_SOC
+

Kconfig symbols should have a help text which fully describes
it.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000235820.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 16 errors, 31 warnings, 17 checks, 995 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000235820.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
