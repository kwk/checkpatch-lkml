WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#44: 
o while sysfs_create_dir() we attach a sysfs_dirent structure to the d_fsdata

WARNING:TYPO_SPELLING: 'direcotry' may be misspelled - perhaps 'directory'?
#45: 
  filed of dentry corresponding to the kobject's direcotry. 
                                                 ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'successfull' may be misspelled - perhaps 'successful'?
#50: 
  field. As after instantiating we can get a successfull lookup for the dentry
                                             ^^^^^^^^^^^

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#70: FILE: fs/sysfs/dir.c:13:
+struct inode_operations sysfs_dir_inode_operations = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct file_operations should normally be const
#74: FILE: fs/sysfs/dir.c:17:
+struct file_operations sysfs_dir_operations = {

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#82: FILE: fs/sysfs/dir.c:25:
+/* dentry iput only for sysfs leaf dentries */
           ^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#83: FILE: fs/sysfs/dir.c:26:
+static void sysfs_d_iput(struct dentry * dentry, struct inode * inode) $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#83: FILE: fs/sysfs/dir.c:26:
+static void sysfs_d_iput(struct dentry * dentry, struct inode * inode) 

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#83: FILE: fs/sysfs/dir.c:26:
+static void sysfs_d_iput(struct dentry * dentry, struct inode * inode) 

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#85: FILE: fs/sysfs/dir.c:28:
+	struct sysfs_dirent * sd = dentry->d_fsdata;

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#89: FILE: fs/sysfs/dir.c:32:
+	iput(inode);
 	^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#92: FILE: fs/sysfs/dir.c:35:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONST_STRUCT: struct dentry_operations should normally be const
#93: FILE: fs/sysfs/dir.c:36:
+static struct dentry_operations sysfs_dentry_ops = {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#97: FILE: fs/sysfs/dir.c:40:
+char * sysfs_get_name(struct sysfs_dirent *sd)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#100: FILE: fs/sysfs/dir.c:43:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#107: FILE: fs/sysfs/dir.c:50:
+static int init_file(struct inode * inode)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#127: FILE: fs/sysfs/dir.c:68:
+/* attaches attribute's sysfs_dirent to the dentry corresponding to the $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#130: FILE: fs/sysfs/dir.c:71:
+int sysfs_attach_attr(struct sysfs_dirent * sd, struct dentry * dentry)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#130: FILE: fs/sysfs/dir.c:71:
+int sysfs_attach_attr(struct sysfs_dirent * sd, struct dentry * dentry)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#132: FILE: fs/sysfs/dir.c:73:
+	struct attribute * attr = NULL;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#133: FILE: fs/sysfs/dir.c:74:
+	struct bin_attribute * bin_attr = NULL;

ERROR:CODE_INDENT: code indent should use tabs where possible
#134: FILE: fs/sysfs/dir.c:75:
+        int (* init) (struct inode *) = NULL;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#134: FILE: fs/sysfs/dir.c:75:
+        int (* init) (struct inode *) = NULL;$

WARNING:SPACING: Unnecessary space before function pointer name
#134: FILE: fs/sysfs/dir.c:75:
+        int (* init) (struct inode *) = NULL;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: Unnecessary space before function pointer arguments
#134: FILE: fs/sysfs/dir.c:75:
+        int (* init) (struct inode *) = NULL;

ERROR:SPACING: space prohibited after that '*' (ctx:BxW)
#134: FILE: fs/sysfs/dir.c:75:
+        int (* init) (struct inode *) = NULL;
              ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#137: FILE: fs/sysfs/dir.c:78:
+        if (sd->s_type & SYSFS_KOBJ_BIN_ATTR) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#137: FILE: fs/sysfs/dir.c:78:
+        if (sd->s_type & SYSFS_KOBJ_BIN_ATTR) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#138: FILE: fs/sysfs/dir.c:79:
+                bin_attr = sd->s_element;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#138: FILE: fs/sysfs/dir.c:79:
+                bin_attr = sd->s_element;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#139: FILE: fs/sysfs/dir.c:80:
+                attr = &bin_attr->attr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#139: FILE: fs/sysfs/dir.c:80:
+                attr = &bin_attr->attr;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#140: FILE: fs/sysfs/dir.c:81:
+        } else {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#140: FILE: fs/sysfs/dir.c:81:
+        } else {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#141: FILE: fs/sysfs/dir.c:82:
+                attr = sd->s_element;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#141: FILE: fs/sysfs/dir.c:82:
+                attr = sd->s_element;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#142: FILE: fs/sysfs/dir.c:83:
+                init = init_file;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#142: FILE: fs/sysfs/dir.c:83:
+                init = init_file;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#143: FILE: fs/sysfs/dir.c:84:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#143: FILE: fs/sysfs/dir.c:84:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#149: FILE: fs/sysfs/dir.c:90:
+        if (bin_attr) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#149: FILE: fs/sysfs/dir.c:90:
+        if (bin_attr) {$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#161: FILE: fs/sysfs/dir.c:102:
+struct dentry * sysfs_lookup(struct inode *dir, struct dentry *dentry, $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#161: FILE: fs/sysfs/dir.c:102:
+struct dentry * sysfs_lookup(struct inode *dir, struct dentry *dentry, 

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#162: FILE: fs/sysfs/dir.c:103:
+				struct nameidata *nd)
 				                  ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#162: FILE: fs/sysfs/dir.c:103:
+struct dentry * sysfs_lookup(struct inode *dir, struct dentry *dentry, 
+				struct nameidata *nd)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#164: FILE: fs/sysfs/dir.c:105:
+	struct sysfs_dirent * parent_sd = dentry->d_parent->d_fsdata;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#165: FILE: fs/sysfs/dir.c:106:
+	struct sysfs_dirent * sd;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#169: FILE: fs/sysfs/dir.c:110:
+^I^Iif ((sd->s_type == SYSFS_KOBJ_ATTR) $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sd->s_type == SYSFS_KOBJ_ATTR'
#169: FILE: fs/sysfs/dir.c:110:
+		if ((sd->s_type == SYSFS_KOBJ_ATTR) 
+			|| (sd->s_type == SYSFS_KOBJ_BIN_ATTR)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sd->s_type == SYSFS_KOBJ_BIN_ATTR'
#169: FILE: fs/sysfs/dir.c:110:
+		if ((sd->s_type == SYSFS_KOBJ_ATTR) 
+			|| (sd->s_type == SYSFS_KOBJ_BIN_ATTR)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#170: FILE: fs/sysfs/dir.c:111:
+		if ((sd->s_type == SYSFS_KOBJ_ATTR) 
+			|| (sd->s_type == SYSFS_KOBJ_BIN_ATTR)) {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#171: FILE: fs/sysfs/dir.c:112:
+			char * name = sysfs_get_name(sd);

WARNING:LINE_SPACING: Missing a blank line after declarations
#172: FILE: fs/sysfs/dir.c:113:
+			char * name = sysfs_get_name(sd);
+			if (strcmp(name, dentry->d_name.name))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#190: FILE: fs/sysfs/dir.c:131:
+^I^Ierror = sysfs_create(*d, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#191: FILE: fs/sysfs/dir.c:132:
+		error = sysfs_create(*d, 
 					 S_IFDIR| S_IRWXU | S_IRUGO | S_IXUGO,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#196: FILE: fs/sysfs/dir.c:135:
+			struct sysfs_dirent * sd, * parent_sd;

ERROR:SPACING: space prohibited after that '*' (ctx:WxW)
#196: FILE: fs/sysfs/dir.c:135:
+			struct sysfs_dirent * sd, * parent_sd;
 			                          ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#197: FILE: fs/sysfs/dir.c:136:
+			struct sysfs_dirent * sd, * parent_sd;
+			parent_sd = p->d_fsdata;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#198: FILE: fs/sysfs/dir.c:137:
+^I^I^Isd = sysfs_new_dirent(parent_sd, k, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#199: FILE: fs/sysfs/dir.c:138:
+^I^I^I^I^I^I(parent_sd->s_element == k) ? $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#199: FILE: fs/sysfs/dir.c:138:
+			sd = sysfs_new_dirent(parent_sd, k, 
+						(parent_sd->s_element == k) ? 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#200: FILE: fs/sysfs/dir.c:139:
+^I^I^I^I^I^ISYSFS_KOBJ_ATTR_GROUP : $

CHECK:BRACES: braces {} should be used on all arms of this statement
#202: FILE: fs/sysfs/dir.c:141:
+			if (sd) {
[...]
+			} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#207: FILE: fs/sysfs/dir.c:146:
+			} else

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#216: FILE: fs/sysfs/dir.c:194:
+	struct sysfs_dirent * sd;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#225: FILE: fs/sysfs/dir.c:202:
+		simple_rmdir(parent->d_inode,d);
 		                            ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#237: FILE: fs/sysfs/dir.c:253:
+				struct sysfs_dirent * sd = d->d_fsdata;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#242: FILE: fs/sysfs/dir.c:258:
+				simple_unlink(dentry->d_inode,d);
 				                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#245: FILE: fs/sysfs/dir.c:261:
+				simple_unlink(dentry->d_inode,d);
 				                             ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#256: FILE: fs/sysfs/dir.c:301:
+static void sysfs_close_attr_files(struct dentry * parent)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#258: FILE: fs/sysfs/dir.c:303:
+	struct sysfs_dirent * parent_sd = parent->d_fsdata;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#259: FILE: fs/sysfs/dir.c:304:
+	struct sysfs_dirent * sd;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#262: FILE: fs/sysfs/dir.c:307:
+^I^Iif ((sd->s_type == SYSFS_KOBJ_ATTR) || $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sd->s_type == SYSFS_KOBJ_ATTR'
#262: FILE: fs/sysfs/dir.c:307:
+		if ((sd->s_type == SYSFS_KOBJ_ATTR) || 
+			(sd->s_type == SYSFS_KOBJ_BIN_ATTR)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sd->s_type == SYSFS_KOBJ_BIN_ATTR'
#262: FILE: fs/sysfs/dir.c:307:
+		if ((sd->s_type == SYSFS_KOBJ_ATTR) || 
+			(sd->s_type == SYSFS_KOBJ_BIN_ATTR)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#263: FILE: fs/sysfs/dir.c:308:
+		if ((sd->s_type == SYSFS_KOBJ_ATTR) || 
+			(sd->s_type == SYSFS_KOBJ_BIN_ATTR)) {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#264: FILE: fs/sysfs/dir.c:309:
+			struct dentry * dentry = sd->s_dentry;

WARNING:LINE_SPACING: Missing a blank line after declarations
#265: FILE: fs/sysfs/dir.c:310:
+			struct dentry * dentry = sd->s_dentry;
+			if (dentry && dentry->d_inode)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#272: FILE: fs/sysfs/dir.c:317:
+static int sysfs_open_attr_files(struct dentry * parent)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#274: FILE: fs/sysfs/dir.c:319:
+	struct sysfs_dirent * parent_sd = parent->d_fsdata;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#275: FILE: fs/sysfs/dir.c:320:
+	struct sysfs_dirent * sd;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#276: FILE: fs/sysfs/dir.c:321:
+	struct dentry * dentry;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#280: FILE: fs/sysfs/dir.c:325:
+^I^Iif ((sd->s_type == SYSFS_KOBJ_ATTR) || $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sd->s_type == SYSFS_KOBJ_ATTR'
#280: FILE: fs/sysfs/dir.c:325:
+		if ((sd->s_type == SYSFS_KOBJ_ATTR) || 
+			(sd->s_type == SYSFS_KOBJ_BIN_ATTR)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sd->s_type == SYSFS_KOBJ_BIN_ATTR'
#280: FILE: fs/sysfs/dir.c:325:
+		if ((sd->s_type == SYSFS_KOBJ_ATTR) || 
+			(sd->s_type == SYSFS_KOBJ_BIN_ATTR)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#281: FILE: fs/sysfs/dir.c:326:
+		if ((sd->s_type == SYSFS_KOBJ_ATTR) || 
+			(sd->s_type == SYSFS_KOBJ_BIN_ATTR)) {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#282: FILE: fs/sysfs/dir.c:327:
+			char * name = sysfs_get_name(sd);

WARNING:LINE_SPACING: Missing a blank line after declarations
#283: FILE: fs/sysfs/dir.c:328:
+			char * name = sysfs_get_name(sd);
+			dentry = sysfs_get_dentry(parent, name);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#286: FILE: fs/sysfs/dir.c:331:
+^I^I^Iif (!dentry->d_inode) $

WARNING:TYPO_SPELLING: 'entires' may be misspelled - perhaps 'entries'?
#293: FILE: fs/sysfs/dir.c:338:
+		/* release all successfully opened entires so far*/
 		                                   ^^^^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#312: FILE: fs/sysfs/dir.c:357:
+int sysfs_readdir(struct file * filp, void * dirent, filldir_t filldir)
                                 ^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#312: FILE: fs/sysfs/dir.c:357:
+int sysfs_readdir(struct file * filp, void * dirent, filldir_t filldir)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#312: FILE: fs/sysfs/dir.c:357:
+int sysfs_readdir(struct file * filp, void * dirent, filldir_t filldir)

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#321: FILE: fs/sysfs/dir.c:366:
+	switch (i) {
+		case 0:
[...]
+		case 1:
[...]
+		default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#328: FILE: fs/sysfs/dir.c:373:
+			/* fallthrough */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#335: FILE: fs/sysfs/dir.c:380:
+			/* fallthrough */

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#337: FILE: fs/sysfs/dir.c:382:
+			if ((err = sysfs_open_attr_files(dentry)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#339: FILE: fs/sysfs/dir.c:384:
+^I$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#345: FILE: fs/sysfs/dir.c:390:
+			for (p=q->next; p != &dentry->d_subdirs; p=p->next) {
 			      ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#345: FILE: fs/sysfs/dir.c:390:
+			for (p=q->next; p != &dentry->d_subdirs; p=p->next) {
 			                                          ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#347: FILE: fs/sysfs/dir.c:392:
+				struct dentry *next;
+				next = list_entry(p, struct dentry, d_child);

WARNING:LONG_LINE: line length of 152 exceeds 100 columns
#352: FILE: fs/sysfs/dir.c:397:
+				if (filldir(dirent, next->d_name.name, next->d_name.len, filp->f_pos, next->d_inode->i_ino, dt_type(next->d_inode)) < 0)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#372: FILE: fs/sysfs/dir.c:417:
+	switch (origin) {
+		case 1:
[...]
+		case 0:
[...]
+		default:

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#389: FILE: fs/sysfs/dir.c:434:
+			if ((err = sysfs_open_attr_files(file->f_dentry))) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#399: FILE: fs/sysfs/dir.c:444:
+				struct dentry *next;
+				next = list_entry(p, struct dentry, d_child);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000315097.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 59 errors, 32 warnings, 15 checks, 344 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000315097.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
