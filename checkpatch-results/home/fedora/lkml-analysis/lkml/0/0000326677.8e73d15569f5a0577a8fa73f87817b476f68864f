WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#44: 
I've noticed that, in the 2.6 (test 9) kernel, the "cmd" field (of type int)

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#205: FILE: drivers/ide/ide-tape.c:2825:
+		IO_trace(IO_IDETAPE_FIFO, tape->pipeline_head, tape->buffer_head, tape->tape_head, tape->minor);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#229: FILE: drivers/ide/ide-tape.c:2836:
+		idetape_create_read_cmd(tape, pc, rq->current_nr_sectors, (struct idetape_bh *)rq->special);

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#262: FILE: drivers/ide/ide-tape.c:2842:
+		IO_trace(IO_IDETAPE_FIFO, tape->pipeline_head, tape->buffer_head, tape->tape_head, tape->minor);

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#288: FILE: drivers/ide/ide-tape.c:2854:
+		idetape_create_write_cmd(tape, pc, rq->current_nr_sectors, (struct idetape_bh *)rq->special);

WARNING:LONG_LINE: line length of 115 exceeds 100 columns
#294: FILE: drivers/ide/ide-tape.c:2860:
+		idetape_create_read_buffer_cmd(tape, pc, rq->current_nr_sectors, (struct idetape_bh *)rq->special);

CHECK:SPACING: No space is necessary after a cast
#298: FILE: drivers/ide/ide-tape.c:2864:
+		pc = (idetape_pc_t *) rq->buffer;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#307: FILE: drivers/ide/ide-tape.c:2873:
+	BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rq"
#317: FILE: drivers/ide/ide-tape.c:3166:
+	if (rq == NULL || !idetape_request(rq)) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#352: FILE: drivers/ide/ide-tape.c:3593:
+		idetape_queue_rw_tail(drive, REQ_IDETAPE_READ_BUFFER, tape->capabilities.ctl, stage->bh);

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#369: FILE: drivers/ide/ide-tape.c:3870:
+			return idetape_queue_rw_tail(drive, REQ_IDETAPE_WRITE, blocks, tape->merge_stage->bh);

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#384: FILE: drivers/ide/ide-tape.c:4063:
+		bytes_read = idetape_queue_rw_tail(drive, REQ_IDETAPE_READ, 0, tape->merge_stage->bh);

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#402: FILE: drivers/ide/ide-tape.c:4212:
+		return idetape_queue_rw_tail(drive, REQ_IDETAPE_READ, blocks, tape->merge_stage->bh);

CHECK:BIT_MACRO: Prefer using the BIT macro
#488: FILE: include/linux/blkdev.h:226:
+#define REQ_IDETAPE_PC1 (1 << __REQ_IDETAPE_PC1)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#489: FILE: include/linux/blkdev.h:227:
+#define REQ_IDETAPE_PC2 (1 << __REQ_IDETAPE_PC2)

CHECK:BIT_MACRO: Prefer using the BIT macro
#490: FILE: include/linux/blkdev.h:228:
+#define REQ_IDETAPE_READ	(1 << __REQ_IDETAPE_READ)

CHECK:BIT_MACRO: Prefer using the BIT macro
#491: FILE: include/linux/blkdev.h:229:
+#define REQ_IDETAPE_WRITE	(1 << __REQ_IDETAPE_WRITE)

CHECK:BIT_MACRO: Prefer using the BIT macro
#492: FILE: include/linux/blkdev.h:230:
+#define REQ_IDETAPE_READ_BUFFER	(1 << __REQ_IDETAPE_READ_BUFFER)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000326677.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 0 errors, 11 warnings, 7 checks, 397 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000326677.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
