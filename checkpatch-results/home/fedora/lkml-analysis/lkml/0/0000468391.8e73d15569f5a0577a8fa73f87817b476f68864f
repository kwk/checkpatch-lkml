WARNING:TYPO_SPELLING: 'charcter' may be misspelled - perhaps 'character'?
#27: 
When close()ing an charcter device one expects the return value of the 
                   ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'charcter' may be misspelled - perhaps 'character'?
#28: 
charcter drivers release() call to be forwarded to the close() called in 
^^^^^^^^

WARNING:TYPO_SPELLING: 'thats' may be misspelled - perhaps 'that's'?
#29: 
userspace. However thats not the case, the kernel swallows the release() 
                   ^^^^^

WARNING:TYPO_SPELLING: 'tha' may be misspelled - perhaps 'than'?
#30: 
value, and always returns 0 to the userspace's close(). (tha char drivers 
                                                         ^^^

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#31: 
release() function is called in fput() as it would have a void return value)

WARNING:TYPO_SPELLING: 'weired' may be misspelled - perhaps 'weird'?
#33: 
It may sound weired at first but there are actually device drivers than can 
             ^^^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#50: FILE: fs/file_table.c:100:
+int fput(struct file * file)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#55: FILE: fs/file_table.c:105:
+       int retval = 0;$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#62: FILE: fs/file_table.c:113:
                if (file->f_op && file->f_op->release)
+                       retval = file->f_op->release(inode, file);

ERROR:CODE_INDENT: code indent should use tabs where possible
#64: FILE: fs/file_table.c:114:
+                       retval = file->f_op->release(inode, file);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#64: FILE: fs/file_table.c:114:
+                       retval = file->f_op->release(inode, file);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#72: FILE: fs/file_table.c:128:
+       return retval;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#84: FILE: fs/open.c:838:
+       if (retval == 0)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#84: FILE: fs/open.c:838:
+       if (retval == 0)
+               retval = fput(filp);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#85: FILE: fs/open.c:839:
+               retval = fput(filp);
                              ^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#85: FILE: fs/open.c:839:
+               retval = fput(filp);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#85: FILE: fs/open.c:839:
+               retval = fput(filp);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#86: FILE: fs/open.c:840:
+       else$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#86: FILE: fs/open.c:840:
+       else
+               fput(filp);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#87: FILE: fs/open.c:841:
+               fput(filp);
                     ^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#87: FILE: fs/open.c:841:
+               fput(filp);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#87: FILE: fs/open.c:841:
+               fput(filp);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#100: FILE: include/linux/file.h:8:
+extern int FASTCALL(fput(struct file *));

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#100: FILE: include/linux/file.h:8:
+extern int FASTCALL(fput(struct file *));

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000468391.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 4 errors, 19 warnings, 1 checks, 47 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000468391.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
