WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

WARNING:TYPO_SPELLING: 'Emtpy' may be misspelled - perhaps 'Empty'?
#54: FILE: linux/init_task.h:70:
+#  define FUQUEUE_INIT_TASK(a) /* Emtpy, nothing to init */
                                   ^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'Emtpy' may be misspelled - perhaps 'Empty'?
#62: FILE: linux/init_task.h:78:
+#    define FULOCK_INIT_TASK(a) /* Emtpy, nothing to init */
                                    ^^^^^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#66: FILE: linux/init_task.h:82:
+	.fulock_olist = plist_INIT (&(task).fulock_olist, BOTTOM_PRIO),	\

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#70: FILE: linux/init_task.h:86:
+#endif /* #ifndef CONFIG_FUSYN
+ */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

CHECK:SPACING: No space is necessary after a cast
#110: FILE: linux/sched.h:179:
+#define	MAX_SCHEDULE_TIMEOUT_EXT ((struct timeout *) ~0)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#111: FILE: linux/sched.h:180:
+extern void FASTCALL(schedule_timeout_ext (const struct timeout *timeout));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#111: FILE: linux/sched.h:180:
+extern void FASTCALL(schedule_timeout_ext (const struct timeout *timeout));

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:TYPO_SPELLING: 'qeueue' may be misspelled - perhaps 'queue'?
#146: FILE: linux/sched.h:504:
+	struct fuqueue *fuqueue_wait;		/* waiting for this qeueue */
 	                             		                    ^^^^^^

WARNING:TYPO_SPELLING: 'qeueue' may be misspelled - perhaps 'queue'?
#147: FILE: linux/sched.h:505:
+	struct fuqueue_waiter *fuqueue_waiter;	/* waiting for this qeueue */
 	                                      	                    ^^^^^^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#162: FILE: linux/sched.h:577:
+extern unsigned __prio_boost (task_t *, int);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#162: FILE: linux/sched.h:577:
+extern unsigned __prio_boost (task_t *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#162: FILE: linux/sched.h:577:
+extern unsigned __prio_boost (task_t *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'task_t *' should also have an identifier name
#162: FILE: linux/sched.h:577:
+extern unsigned __prio_boost (task_t *, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#162: FILE: linux/sched.h:577:
+extern unsigned __prio_boost (task_t *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#171: FILE: linux/sched.h:621:
+extern int try_to_wake_up(struct task_struct *p, unsigned int state, int sync);

WARNING:PATCH_PREFIX: patch prefix 'kernel' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'kernel' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'kernel' exists, appears to be a -p0 patch

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#240: FILE: sched.c:373:
 }
+static int effective_prio(task_t *p)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#243: FILE: sched.c:376:
+	int new_prio;
+	new_prio = rt_task(p)? p->prio : __effective_prio(p);

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#243: FILE: sched.c:376:
+	new_prio = rt_task(p)? p->prio : __effective_prio(p);
 	                     ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#244: FILE: sched.c:377:
+	return min (new_prio, p->boost_prio);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#255: FILE: sched.c:655:
+int try_to_wake_up(task_t * p, unsigned int state, int sync)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#293: FILE: sched.c:1982:
+ * fuqueue_waiter_chprio(). $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#315: FILE: sched.c:2017:
+	p->prio = min (p->prio, p->boost_prio);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#331: FILE: sched.c:2123:
 
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#333: FILE: sched.c:2125:
+ * Boost the priority of a task from a new dynamic priority. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#337: FILE: sched.c:2129:
+ * $

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#346: FILE: sched.c:2138:
+unsigned __prio_boost(task_t *p, int prio)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#351: FILE: sched.c:2143:
+       int old_prio, new_dynamic_prio, newprio;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#355: FILE: sched.c:2147:
+^I$

ERROR:SPACING: spaces required around that '?' (ctx:VxE)
#362: FILE: sched.c:2154:
+	new_dynamic_prio = p->policy != SCHED_NORMAL?
 	                                            ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#365: FILE: sched.c:2157:
+	newprio = min (new_dynamic_prio, p->boost_prio);

CHECK:BRACES: braces {} should be used on all arms of this statement
#369: FILE: sched.c:2161:
+		if (rq->curr == p) {
[...]
+		else if (TASK_PREEMPTS_CURR (p, rq))
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#373: FILE: sched.c:2165:
+		else if (TASK_PREEMPTS_CURR (p, rq))

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#373: FILE: sched.c:2165:
+		}
+		else if (TASK_PREEMPTS_CURR (p, rq))

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#376: FILE: sched.c:2168:
+	task_rq_unlock (rq, &flags);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#380: FILE: sched.c:2172:
+
+

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#391: FILE: sched.c:2182:
+		newprio = MAX_USER_RT_PRIO-1 - p->rt_priority;
 		                          ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#396: FILE: sched.c:2186:
+	p->prio = min (newprio, p->boost_prio);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#401: FILE: sched.c:2191:
+ * $

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#441: FILE: sched.c:2947:
+	unsigned old_prio;

WARNING:PATCH_PREFIX: patch prefix 'kernel' exists, appears to be a -p0 patch

CHECK:LINE_SPACING: Please don't use multiple blank lines
#470: FILE: signal.c:525:
 
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#478: FILE: signal.c:549:
+^I * $

WARNING:BRACES: braces {} are not necessary for single statement blocks
#490: FILE: signal.c:560:
+	if (!wake_up_state(t, mask)) {
 		kick_process(t);
+	}

WARNING:PATCH_PREFIX: patch prefix 'arch' exists, appears to be a -p0 patch

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000266392.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 10 errors, 29 warnings, 10 checks, 424 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000266392.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
