WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#47: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#52: FILE: kernel/power/extent.c:1:
+/* $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#52: FILE: kernel/power/extent.c:1:
+/* 

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#53: FILE: kernel/power/extent.c:2:
+ * kernel/power/extent.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#54: FILE: kernel/power/extent.c:3:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#59: FILE: kernel/power/extent.c:8:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#73: FILE: kernel/power/extent.c:22:
+^I$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#74: FILE: kernel/power/extent.c:23:
+	if (!(result = kmalloc(sizeof(struct extent), GFP_ATOMIC)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*result)...) over kmalloc(sizeof(struct extent)...)
#74: FILE: kernel/power/extent.c:23:
+	if (!(result = kmalloc(sizeof(struct extent), GFP_ATOMIC)))

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#77: FILE: kernel/power/extent.c:26:
+	result->minimum = result->maximum = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:SPACING: space required before the open parenthesis '('
#93: FILE: kernel/power/extent.c:42:
+	while(this) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#95: FILE: kernel/power/extent.c:44:
+		struct extent *next = this->next;
+		kfree(this);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#99: FILE: kernel/power/extent.c:48:
+^I$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#100: FILE: kernel/power/extent.c:49:
+	BUG_ON(chain->num_extents);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#101: FILE: kernel/power/extent.c:50:
+	chain->first = chain->last_touched = NULL;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#105: FILE: kernel/power/extent.c:54:
+/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#110: FILE: kernel/power/extent.c:59:
+int suspend_add_to_extent_chain(struct extent_chain *chain, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#111: FILE: kernel/power/extent.c:60:
+int suspend_add_to_extent_chain(struct extent_chain *chain, 
+		unsigned long minimum, unsigned long maximum)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#116: FILE: kernel/power/extent.c:65:
+^Istart_at = (chain->last_touched && $

WARNING:LINE_SPACING: Missing a blank line after declarations
#133: FILE: kernel/power/extent.c:82:
+			struct extent *to_free = start_at->next;
+			start_at->maximum = start_at->next->maximum;

ERROR:SPACING: spaces required around that '+=' (ctx:VxW)
#140: FILE: kernel/power/extent.c:89:
+		chain->size+= (maximum - minimum + 1);
 		           ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#147: FILE: kernel/power/extent.c:96:
+		printk("Error unable to append a new extent to the chain.\n");

ERROR:SPACING: spaces required around that '+=' (ctx:VxW)
#152: FILE: kernel/power/extent.c:101:
+	chain->size+= (maximum - minimum + 1);
 	           ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#161: FILE: kernel/power/extent.c:110:
+		struct extent *next = start_at->next;
+		start_at->next = new_extent;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#177: FILE: kernel/power/extent.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#178: FILE: kernel/power/extent.h:2:
+ * kernel/power/extent.h

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#206: FILE: kernel/power/extent.h:30:
+#define suspend_extent_for_each(extent_chain, extentpointer, value) \
+if ((extent_chain)->first) \
+	for ((extentpointer) = (extent_chain)->first, (value) = \
+			(extentpointer)->minimum; \
+	     ((extentpointer) && ((extentpointer)->next || (value) <= \
+				 (extentpointer)->maximum)); \
+	     (((value) == (extentpointer)->maximum) ? \
+		((extentpointer) = (extentpointer)->next, (value) = \
+		 ((extentpointer) ? (extentpointer)->minimum : 0)) : \
+			(value)++))

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'extent_chain' - possible side-effects?
#206: FILE: kernel/power/extent.h:30:
+#define suspend_extent_for_each(extent_chain, extentpointer, value) \
+if ((extent_chain)->first) \
+	for ((extentpointer) = (extent_chain)->first, (value) = \
+			(extentpointer)->minimum; \
+	     ((extentpointer) && ((extentpointer)->next || (value) <= \
+				 (extentpointer)->maximum)); \
+	     (((value) == (extentpointer)->maximum) ? \
+		((extentpointer) = (extentpointer)->next, (value) = \
+		 ((extentpointer) ? (extentpointer)->minimum : 0)) : \
+			(value)++))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'extentpointer' - possible side-effects?
#206: FILE: kernel/power/extent.h:30:
+#define suspend_extent_for_each(extent_chain, extentpointer, value) \
+if ((extent_chain)->first) \
+	for ((extentpointer) = (extent_chain)->first, (value) = \
+			(extentpointer)->minimum; \
+	     ((extentpointer) && ((extentpointer)->next || (value) <= \
+				 (extentpointer)->maximum)); \
+	     (((value) == (extentpointer)->maximum) ? \
+		((extentpointer) = (extentpointer)->next, (value) = \
+		 ((extentpointer) ? (extentpointer)->minimum : 0)) : \
+			(value)++))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'value' - possible side-effects?
#206: FILE: kernel/power/extent.h:30:
+#define suspend_extent_for_each(extent_chain, extentpointer, value) \
+if ((extent_chain)->first) \
+	for ((extentpointer) = (extent_chain)->first, (value) = \
+			(extentpointer)->minimum; \
+	     ((extentpointer) && ((extentpointer)->next || (value) <= \
+				 (extentpointer)->maximum)); \
+	     (((value) == (extentpointer)->maximum) ? \
+		((extentpointer) = (extentpointer)->next, (value) = \
+		 ((extentpointer) ? (extentpointer)->minimum : 0)) : \
+			(value)++))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#218: FILE: kernel/power/extent.h:42:
+int suspend_add_to_extent_chain(struct extent_chain *chain, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#219: FILE: kernel/power/extent.h:43:
+int suspend_add_to_extent_chain(struct extent_chain *chain, 
+		unsigned long minimum, unsigned long maximum);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#221: FILE: kernel/power/extent.h:45:
+/* swap_entry_to_extent_val & extent_val_to_swap_entry: $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#223: FILE: kernel/power/extent.h:47:
+ * make consecutive extent values */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#225: FILE: kernel/power/extent.h:49:
+#define extent_val_to_swap_entry(val) (swp_entry_t) { (val) }

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#268: FILE: kernel/power/power.h:124:
+extern unsigned long alloc_swap_page(int swap, struct extent_chain *extents);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#269: FILE: kernel/power/power.h:125:
+extern void free_all_swap_pages(int swap, struct extent_chain *extents);

WARNING:LINE_SPACING: Missing a blank line after declarations
#372: FILE: kernel/power/swsusp.c:79:
+	swp_entry_t entry = get_swap_page_of_type(swap);
+	if (entry.val) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#374: FILE: kernel/power/swsusp.c:81:
+		unsigned long new_value = swap_entry_to_extent_val(entry);
+		suspend_add_to_extent_chain(extents, new_value, new_value);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#401: FILE: kernel/power/swsusp.c:93:
+^I^Isuspend_extent_for_each(extents, extentpointer, $

WARNING:LINE_SPACING: Missing a blank line after declarations
#401: FILE: kernel/power/swsusp.c:93:
+		swp_entry_t entry;
+		suspend_extent_for_each(extents, extentpointer, 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#402: FILE: kernel/power/swsusp.c:94:
+		suspend_extent_for_each(extents, extentpointer, 
+				extentvalue) {

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000025393.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 17 errors, 14 warnings, 11 checks, 446 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000025393.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
