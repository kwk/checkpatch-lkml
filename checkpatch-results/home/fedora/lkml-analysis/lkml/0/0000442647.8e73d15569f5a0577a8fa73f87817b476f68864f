WARNING:TYPO_SPELLING: 'specfic' may be misspelled - perhaps 'specific'?
#35: 
> specfic (like for IA-64 there is seperate region for large_pages whereas
  ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'seperate' may be misspelled - perhaps 'separate'?
#35: 
> specfic (like for IA-64 there is seperate region for large_pages whereas
                                   ^^^^^^^^

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#48: 
>    sys_get_large_pages (unsigned long addr, unsigned long len, int prot, int flags)

WARNING:TYPO_SPELLING: 'systm' may be misspelled - perhaps 'system'?
#55: 
> different procecess is using follwoign two systm calls:
                                             ^^^^^

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#144: FILE: arch/i386/kernel/sys_i386.c:258:
+#define LPAGE_ALIGN(x)	(((unsigned long)x + (LPAGE_SIZE -1)) & LPAGE_MASK)
                       	                                 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#144: FILE: arch/i386/kernel/sys_i386.c:258:
+#define LPAGE_ALIGN(x)	(((unsigned long)x + (LPAGE_SIZE -1)) & LPAGE_MASK)

WARNING:TYPO_SPELLING: 'virtaul' may be misspelled - perhaps 'virtual'?
#147: FILE: arch/i386/kernel/sys_i386.c:261:
+/* get_addr function gets the currently unused virtaul range in 
                                                ^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#147: FILE: arch/i386/kernel/sys_i386.c:261:
+/* get_addr function gets the currently unused virtaul range in $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#148: FILE: arch/i386/kernel/sys_i386.c:262:
+ * current process's address space.  It returns the LARGE_PAGE_SIZE $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#149: FILE: arch/i386/kernel/sys_i386.c:263:
+ * aligned address (in cases of success).  Other kernel generic $

WARNING:TYPO_SPELLING: 'gurantee' may be misspelled - perhaps 'guarantee'?
#150: FILE: arch/i386/kernel/sys_i386.c:264:
+ * routines only could gurantee that allocated address is PAGE_SIZSE aligned.
                        ^^^^^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#156: FILE: arch/i386/kernel/sys_i386.c:270:
+	struct vm_area_struct	*vma;
+	if (addr) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#160: FILE: arch/i386/kernel/sys_i386.c:274:
+		if (((TASK_SIZE - len) >= addr) &&
+		      (!vma || addr + len <= vma->vm_start))

WARNING:TABSTOP: Statements should start on a tabstop
#164: FILE: arch/i386/kernel/sys_i386.c:278:
+	 for (vma = find_vma(current->mm, addr); ; vma = vma->vm_next) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (9, 17)
#164: FILE: arch/i386/kernel/sys_i386.c:278:
+	 for (vma = find_vma(current->mm, addr); ; vma = vma->vm_next) {
+		 if (TASK_SIZE - len < addr)

WARNING:TABSTOP: Statements should start on a tabstop
#165: FILE: arch/i386/kernel/sys_i386.c:279:
+		 if (TASK_SIZE - len < addr)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (17, 25)
#165: FILE: arch/i386/kernel/sys_i386.c:279:
+		 if (TASK_SIZE - len < addr)
+			 return -ENOMEM;

WARNING:TABSTOP: Statements should start on a tabstop
#166: FILE: arch/i386/kernel/sys_i386.c:280:
+			 return -ENOMEM;

WARNING:TABSTOP: Statements should start on a tabstop
#167: FILE: arch/i386/kernel/sys_i386.c:281:
+		 if (!vma || ((addr + len) < vma->vm_start))

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (17, 25)
#167: FILE: arch/i386/kernel/sys_i386.c:281:
+		 if (!vma || ((addr + len) < vma->vm_start))
+			 goto found_addr;

WARNING:TABSTOP: Statements should start on a tabstop
#168: FILE: arch/i386/kernel/sys_i386.c:282:
+			 goto found_addr;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#179: FILE: arch/i386/kernel/sys_i386.c:293:
+	extern int make_lpages_present(unsigned long, unsigned long, int);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#179: FILE: arch/i386/kernel/sys_i386.c:293:
+	extern int make_lpages_present(unsigned long, unsigned long, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#179: FILE: arch/i386/kernel/sys_i386.c:293:
+	extern int make_lpages_present(unsigned long, unsigned long, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#179: FILE: arch/i386/kernel/sys_i386.c:293:
+	extern int make_lpages_present(unsigned long, unsigned long, int);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#184: FILE: arch/i386/kernel/sys_i386.c:298:
+^Iif (len & (LPAGE_SIZE - 1)) $

CHECK:SPACING: spaces preferred around that '|' (ctx:WxV)
#189: FILE: arch/i386/kernel/sys_i386.c:303:
+	temp = MAP_SHARED | MAP_ANONYMOUS |MAP_FIXED;
 	                                  ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#191: FILE: arch/i386/kernel/sys_i386.c:305:
+	printk("Returned addr %x\n", addr);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 17)
#192: FILE: arch/i386/kernel/sys_i386.c:306:
+	if (!(addr & (LPAGE_SIZE -1))) {
+		 if (make_lpages_present(addr, (addr+len), flags) < 0) {

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#192: FILE: arch/i386/kernel/sys_i386.c:306:
+	if (!(addr & (LPAGE_SIZE -1))) {
 	                         ^

WARNING:TABSTOP: Statements should start on a tabstop
#193: FILE: arch/i386/kernel/sys_i386.c:307:
+		 if (make_lpages_present(addr, (addr+len), flags) < 0) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (17, 25)
#193: FILE: arch/i386/kernel/sys_i386.c:307:
+		 if (make_lpages_present(addr, (addr+len), flags) < 0) {
+			 addr = sys_munmap(addr, len);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#193: FILE: arch/i386/kernel/sys_i386.c:307:
+		 if (make_lpages_present(addr, (addr+len), flags) < 0) {
 		                                    ^

WARNING:TABSTOP: Statements should start on a tabstop
#195: FILE: arch/i386/kernel/sys_i386.c:309:
+			 return -ENOMEM;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#201: FILE: arch/i386/kernel/sys_i386.c:315:
+asmlinkage unsigned long $

WARNING:LINE_SPACING: Missing a blank line after declarations
#206: FILE: arch/i386/kernel/sys_i386.c:320:
+	int	retval;
+	extern int set_lp_shm_seg(int, unsigned long *, unsigned long, int, int);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#206: FILE: arch/i386/kernel/sys_i386.c:320:
+	extern int set_lp_shm_seg(int, unsigned long *, unsigned long, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#206: FILE: arch/i386/kernel/sys_i386.c:320:
+	extern int set_lp_shm_seg(int, unsigned long *, unsigned long, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long *' should also have an identifier name
#206: FILE: arch/i386/kernel/sys_i386.c:320:
+	extern int set_lp_shm_seg(int, unsigned long *, unsigned long, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#206: FILE: arch/i386/kernel/sys_i386.c:320:
+	extern int set_lp_shm_seg(int, unsigned long *, unsigned long, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#206: FILE: arch/i386/kernel/sys_i386.c:320:
+	extern int set_lp_shm_seg(int, unsigned long *, unsigned long, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#206: FILE: arch/i386/kernel/sys_i386.c:320:
+	extern int set_lp_shm_seg(int, unsigned long *, unsigned long, int, int);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#209: FILE: arch/i386/kernel/sys_i386.c:323:
+^Iif (key <= 0) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#211: FILE: arch/i386/kernel/sys_i386.c:325:
+^Iif (len & (LPAGE_SIZE - 1)) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#217: FILE: arch/i386/kernel/sys_i386.c:331:
+^Iif (retval < 0) $

CHECK:SPACING: No space is necessary after a cast
#218: FILE: arch/i386/kernel/sys_i386.c:332:
+		return (unsigned long) retval;

WARNING:LINE_SPACING: Missing a blank line after declarations
#226: FILE: arch/i386/kernel/sys_i386.c:340:
+	struct vm_area_struct	*vma;
+	extern int unmap_large_pages(struct vm_area_struct *);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#226: FILE: arch/i386/kernel/sys_i386.c:340:
+	extern int unmap_large_pages(struct vm_area_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vm_area_struct *' should also have an identifier name
#226: FILE: arch/i386/kernel/sys_i386.c:340:
+	extern int unmap_large_pages(struct vm_area_struct *);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#229: FILE: arch/i386/kernel/sys_i386.c:343:
+^Iif ((!vma) || (!(vma->vm_flags & VM_LARGEPAGE)) || $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!vma'
#229: FILE: arch/i386/kernel/sys_i386.c:343:
+	if ((!vma) || (!(vma->vm_flags & VM_LARGEPAGE)) || 
+		(vma->vm_start!=addr)) 

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'vma->vm_start!=addr'
#229: FILE: arch/i386/kernel/sys_i386.c:343:
+	if ((!vma) || (!(vma->vm_flags & VM_LARGEPAGE)) || 
+		(vma->vm_start!=addr)) 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#230: FILE: arch/i386/kernel/sys_i386.c:344:
+^I^I(vma->vm_start!=addr)) $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#230: FILE: arch/i386/kernel/sys_i386.c:344:
+	if ((!vma) || (!(vma->vm_flags & VM_LARGEPAGE)) || 
+		(vma->vm_start!=addr)) 

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#230: FILE: arch/i386/kernel/sys_i386.c:344:
+		(vma->vm_start!=addr)) 
 		              ^

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#245: FILE: arch/i386/kernel/sys_i386.c:359:
+	return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#248: FILE: arch/i386/kernel/sys_i386.c:362:
+asmlinkage unsigned long $

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#251: FILE: arch/i386/kernel/sys_i386.c:365:
+	return -ENOSYS;

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#257: FILE: arch/i386/kernel/sys_i386.c:371:
+	return -ENOSYS;

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#263: FILE: arch/i386/kernel/sys_i386.c:377:
+	return -ENOSYS;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#284: FILE: arch/i386/mm/init.c:451:
+long	lpagemem = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#287: FILE: arch/i386/mm/init.c:454:
+extern struct	list_head lpage_freelist;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#301: FILE: arch/i386/mm/init.c:546:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#303: FILE: arch/i386/mm/init.c:548:
+^Ilpzone_pages = (max_low_pfn >> ((LPAGE_SHIFT - PAGE_SHIFT) + 2)) ; $

WARNING:SPACING: space prohibited before semicolon
#303: FILE: arch/i386/mm/init.c:548:
+	lpzone_pages = (max_low_pfn >> ((LPAGE_SHIFT - PAGE_SHIFT) + 2)) ; 

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#306: FILE: arch/i386/mm/init.c:551:
+	for (i=0; i<lpzone_pages; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#306: FILE: arch/i386/mm/init.c:551:
+	for (i=0; i<lpzone_pages; i++) {
 	           ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!page"
#308: FILE: arch/i386/mm/init.c:553:
+		if (page == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#311: FILE: arch/i386/mm/init.c:556:
+		for (j=0; j<(LPAGE_SIZE/PAGE_SIZE); j++) {
 		      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#311: FILE: arch/i386/mm/init.c:556:
+		for (j=0; j<(LPAGE_SIZE/PAGE_SIZE); j++) {
 		           ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#311: FILE: arch/i386/mm/init.c:556:
+		for (j=0; j<(LPAGE_SIZE/PAGE_SIZE); j++) {
 		                       ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#317: FILE: arch/i386/mm/init.c:562:
+	printk("Total Large_page memory pages allocated %ld\n", i);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#318: FILE: arch/i386/mm/init.c:563:
+	lpzone_pages = lpagemem = i;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#329: FILE: arch/i386/mm/lpage.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:LINE_SPACING: Please don't use multiple blank lines
#335: FILE: arch/i386/mm/lpage.c:7:
+
+

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/uaccess.h> instead of <asm/uaccess.h>
#350: FILE: arch/i386/mm/lpage.c:22:
+#include <asm/uaccess.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

WARNING:CONST_STRUCT: struct vm_operations_struct should normally be const
#353: FILE: arch/i386/mm/lpage.c:25:
+static struct vm_operations_struct	lp_vm_ops;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#354: FILE: arch/i386/mm/lpage.c:26:
+struct list_head ^I^I^Ilpage_freelist;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#356: FILE: arch/i386/mm/lpage.c:28:
+extern^Ilong ^I^I^I^Ilpagemem;$

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#356: FILE: arch/i386/mm/lpage.c:28:
+extern	long 				lpagemem;

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#358: FILE: arch/i386/mm/lpage.c:30:
+#define MAX_ID ^I32$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#369: FILE: arch/i386/mm/lpage.c:41:
+	for (i=0; i<MAX_ID; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#369: FILE: arch/i386/mm/lpage.c:41:
+	for (i=0; i<MAX_ID; i++) {
 	           ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#370: FILE: arch/i386/mm/lpage.c:42:
+^I^Iif (lpk[i].key == key) $

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#375: FILE: arch/i386/mm/lpage.c:47:
+}
+static struct page *

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'page->mapping != NULL'
#402: FILE: arch/i386/mm/lpage.c:74:
+	if ((page->mapping != NULL) && (page_count(page) == 2)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "page->mapping"
#402: FILE: arch/i386/mm/lpage.c:74:
+	if ((page->mapping != NULL) && (page_count(page) == 2)) {

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#404: FILE: arch/i386/mm/lpage.c:76:
+^I^Iint ^Ii;$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#409: FILE: arch/i386/mm/lpage.c:81:
+		if ((inode->i_size -= LPAGE_SIZE) == 0) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#410: FILE: arch/i386/mm/lpage.c:82:
+			for (i=0;i<MAX_ID;i++)
 			      ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#410: FILE: arch/i386/mm/lpage.c:82:
+			for (i=0;i<MAX_ID;i++)
 			        ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#410: FILE: arch/i386/mm/lpage.c:82:
+			for (i=0;i<MAX_ID;i++)
 			          ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#410: FILE: arch/i386/mm/lpage.c:82:
+			for (i=0;i<MAX_ID;i++)
 			                 ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#442: FILE: arch/i386/mm/lpage.c:114:
+^I$

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#443: FILE: arch/i386/mm/lpage.c:115:
+	pgd =pgd_offset(mm, addr);
 	    ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#448: FILE: arch/i386/mm/lpage.c:120:
+#define mk_pte_large(entry) {entry.pte_low |= (_PAGE_PRESENT | _PAGE_PSE);}
                                                                          ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#449: FILE: arch/i386/mm/lpage.c:121:
+^I$

WARNING:LONG_LINE: line length of 116 exceeds 100 columns
#451: FILE: arch/i386/mm/lpage.c:123:
+set_lp_pte(struct mm_struct *mm, struct vm_area_struct *vma, struct page *page, pte_t *page_table, int write_access)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#455: FILE: arch/i386/mm/lpage.c:127:
+	mm->rss += (LPAGE_SIZE/PAGE_SIZE);
 	                      ^

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#456: FILE: arch/i386/mm/lpage.c:128:
+	if (write_access) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#458: FILE: arch/i386/mm/lpage.c:130:
+	} else

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#463: FILE: arch/i386/mm/lpage.c:135:
+	printk("VIRTUAL_ADDRESS_OF_LPAGE IS %p\n", page->virtual);

WARNING:RETURN_VOID: void function return statements are not generally useful
#465: FILE: arch/i386/mm/lpage.c:137:
+	return;
+}

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#468: FILE: arch/i386/mm/lpage.c:140:
+anon_get_lpage(struct mm_struct *mm, struct vm_area_struct *vma, int write_access, pte_t *page_table)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#473: FILE: arch/i386/mm/lpage.c:145:
+^Iif (page == NULL) $

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!page"
#473: FILE: arch/i386/mm/lpage.c:145:
+	if (page == NULL) 

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#484: FILE: arch/i386/mm/lpage.c:156:
+	struct vm_area_struct * vma;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#492: FILE: arch/i386/mm/lpage.c:164:
+	if ((vma->vm_end - vma->vm_start) & (LPAGE_SIZE-1))
 	                                               ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#495: FILE: arch/i386/mm/lpage.c:167:
+^Ido {    $

CHECK:BRACES: braces {} should be used on all arms of this statement
#497: FILE: arch/i386/mm/lpage.c:169:
+		if ((pte) && (pte_none(*pte))) {
[...]
+		} else
[...]

ERROR:TRAILING_WHITESPACE: trailing whitespace
#498: FILE: arch/i386/mm/lpage.c:170:
+^I^I^Iif (anon_get_lpage(mm, vma, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#499: FILE: arch/i386/mm/lpage.c:171:
+			if (anon_get_lpage(mm, vma, 
+				write ? VM_WRITE : VM_READ, pte) == -1)

CHECK:BRACES: Unbalanced braces around else statement
#501: FILE: arch/i386/mm/lpage.c:173:
+		} else

ERROR:TRAILING_WHITESPACE: trailing whitespace
#504: FILE: arch/i386/mm/lpage.c:176:
+^I} while (addr < end); $

ERROR:SPACING: space prohibited before that close parenthesis ')'
#507: FILE: arch/i386/mm/lpage.c:179:
+	if (flags & MAP_PRIVATE )

ERROR:TRAILING_WHITESPACE: trailing whitespace
#512: FILE: arch/i386/mm/lpage.c:184:
+^Iif (addr > vma->vm_start) { $

ERROR:CODE_INDENT: code indent should use tabs where possible
#513: FILE: arch/i386/mm/lpage.c:185:
+^I   ^Ivma->vm_end = addr ;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#513: FILE: arch/i386/mm/lpage.c:185:
+^I   ^Ivma->vm_end = addr ;$

WARNING:SPACING: space prohibited before semicolon
#513: FILE: arch/i386/mm/lpage.c:185:
+	   	vma->vm_end = addr ;

ERROR:CODE_INDENT: code indent should use tabs where possible
#514: FILE: arch/i386/mm/lpage.c:186:
+^I   ^Izap_lp_resources(vma);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#514: FILE: arch/i386/mm/lpage.c:186:
+^I   ^Izap_lp_resources(vma);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#515: FILE: arch/i386/mm/lpage.c:187:
+^I   ^Ivma->vm_end = end;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#515: FILE: arch/i386/mm/lpage.c:187:
+^I   ^Ivma->vm_end = end;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#526: FILE: arch/i386/mm/lpage.c:198:
+^Istruct page ^I*ptepage;$

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#539: FILE: arch/i386/mm/lpage.c:211:
+			dst->rss += (LPAGE_SIZE/PAGE_SIZE);
 			                       ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#540: FILE: arch/i386/mm/lpage.c:212:
+^I^I^Iaddr += LPAGE_SIZE; $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#542: FILE: arch/i386/mm/lpage.c:214:
+    return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#545: FILE: arch/i386/mm/lpage.c:217:
+    return -ENOMEM;$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#547: FILE: arch/i386/mm/lpage.c:219:
+}
+int

WARNING:LONG_LINE: line length of 157 exceeds 100 columns
#548: FILE: arch/i386/mm/lpage.c:220:
+follow_large_page(struct mm_struct *mm, struct vm_area_struct *vma, struct page **pages, struct vm_area_struct **vmas, unsigned long *st, int *length, int i)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'start < vma->vm_end'
#573: FILE: arch/i386/mm/lpage.c:245:
+		if (((start & LPAGE_MASK) == pstart) && len && (start < vma->vm_end))

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#585: FILE: arch/i386/mm/lpage.c:257:
+^Iunsigned long ^Ilen, addr, end;$

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#612: FILE: arch/i386/mm/lpage.c:284:
+	}
+	else {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#612: FILE: arch/i386/mm/lpage.c:284:
+	else {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#613: FILE: arch/i386/mm/lpage.c:285:
+		while (vma->vm_next != mpnt) {
+			vma = vma->vm_next;
+		}

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#642: FILE: arch/i386/mm/lpage.c:314:
+	for (i=0; i<MAX_ID; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#642: FILE: arch/i386/mm/lpage.c:314:
+	for (i=0; i<MAX_ID; i++) {
 	           ^

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*inode)...) over kmalloc(sizeof(struct inode)...)
#648: FILE: arch/i386/mm/lpage.c:320:
+	inode = kmalloc(sizeof(struct inode), GFP_ATOMIC);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!inode"
#649: FILE: arch/i386/mm/lpage.c:321:
+	if (inode == NULL)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#651: FILE: arch/i386/mm/lpage.c:323:
+^I$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#693: FILE: arch/i386/mm/lpage.c:365:
+^Iunsigned long ^I^I^Iaddr = *raddr;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#695: FILE: arch/i386/mm/lpage.c:367:
+^Iint ^Iretval = -ENOMEM;$

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#697: FILE: arch/i386/mm/lpage.c:369:
+	if (len & (LPAGE_SIZE -1))
 	                      ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!inode"
#701: FILE: arch/i386/mm/lpage.c:373:
+	if (inode == NULL) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#705: FILE: arch/i386/mm/lpage.c:377:
+^I^Iif (inode == NULL) $

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!inode"
#705: FILE: arch/i386/mm/lpage.c:377:
+		if (inode == NULL) 

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#708: FILE: arch/i386/mm/lpage.c:380:
+	}
+	else

ERROR:TRAILING_WHITESPACE: trailing whitespace
#713: FILE: arch/i386/mm/lpage.c:385:
+^Iaddr = do_mmap_pgoff(NULL, addr, len, (unsigned long)prot, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#714: FILE: arch/i386/mm/lpage.c:386:
+	addr = do_mmap_pgoff(NULL, addr, len, (unsigned long)prot, 
+			MAP_FIXED|MAP_PRIVATE | MAP_ANONYMOUS, 0);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#714: FILE: arch/i386/mm/lpage.c:386:
+			MAP_FIXED|MAP_PRIVATE | MAP_ANONYMOUS, 0);
 			         ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#715: FILE: arch/i386/mm/lpage.c:387:
+^Iif (IS_ERR((void *)addr)) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#716: FILE: arch/i386/mm/lpage.c:388:
+^I^Ireturn -ENOMEM; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#721: FILE: arch/i386/mm/lpage.c:393:
+^I$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#725: FILE: arch/i386/mm/lpage.c:397:
+		pte_t * pte = lp_pte_alloc(mm, addr);

WARNING:LINE_SPACING: Missing a blank line after declarations
#726: FILE: arch/i386/mm/lpage.c:398:
+		pte_t * pte = lp_pte_alloc(mm, addr);
+		if ((pte) && (pte_none(*pte))) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#726: FILE: arch/i386/mm/lpage.c:398:
+		if ((pte) && (pte_none(*pte))) {
[...]
+		} else 
[...]

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!page"
#729: FILE: arch/i386/mm/lpage.c:401:
+			if (page == NULL) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#730: FILE: arch/i386/mm/lpage.c:402:
+^I^I^I^Ipage = alloc_large_page();^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#731: FILE: arch/i386/mm/lpage.c:403:
+^I^I^I^Iif (page == NULL) $

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!page"
#731: FILE: arch/i386/mm/lpage.c:403:
+				if (page == NULL) 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#732: FILE: arch/i386/mm/lpage.c:404:
+^I^I^I^I^Igoto out;^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#736: FILE: arch/i386/mm/lpage.c:408:
+^I^I} else $

CHECK:BRACES: Unbalanced braces around else statement
#736: FILE: arch/i386/mm/lpage.c:408:
+		} else 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#739: FILE: arch/i386/mm/lpage.c:411:
+^I} while (addr < vma->vm_end); $

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#761: FILE: arch/i386/mm/lpage.c:433:
+	extern long        lpzone_pages;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#762: FILE: arch/i386/mm/lpage.c:434:
+	extern struct list_head lpage_freelist;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!page"
#769: FILE: arch/i386/mm/lpage.c:441:
+			if (page == NULL)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#772: FILE: arch/i386/mm/lpage.c:444:
+			for (j=0; j<(LPAGE_SIZE/PAGE_SIZE); j++) {
 			      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#772: FILE: arch/i386/mm/lpage.c:444:
+			for (j=0; j<(LPAGE_SIZE/PAGE_SIZE); j++) {
 			           ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#772: FILE: arch/i386/mm/lpage.c:444:
+			for (j=0; j<(LPAGE_SIZE/PAGE_SIZE); j++) {
 			                       ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!page"
#787: FILE: arch/i386/mm/lpage.c:459:
+		if (page == NULL)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#793: FILE: arch/i386/mm/lpage.c:465:
+		for (j=0; j<(LPAGE_SIZE/PAGE_SIZE); j++) {
 		      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#793: FILE: arch/i386/mm/lpage.c:465:
+		for (j=0; j<(LPAGE_SIZE/PAGE_SIZE); j++) {
 		           ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#793: FILE: arch/i386/mm/lpage.c:465:
+		for (j=0; j<(LPAGE_SIZE/PAGE_SIZE); j++) {
 		                       ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#801: FILE: arch/i386/mm/lpage.c:473:
+}
+static struct vm_operations_struct	lp_vm_ops = {

WARNING:CONST_STRUCT: struct vm_operations_struct should normally be const
#801: FILE: arch/i386/mm/lpage.c:473:
+static struct vm_operations_struct	lp_vm_ops = {

WARNING:INDENTED_LABEL: labels should not be indented
#802: FILE: arch/i386/mm/lpage.c:474:
+	close: zap_lp_resources,

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#812: FILE: fs/proc/array.c:490:
+				int num_pages = ((vma->vm_end - vma->vm_start)/PAGE_SIZE);
 				                                              ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#813: FILE: fs/proc/array.c:491:
+				int num_pages = ((vma->vm_end - vma->vm_start)/PAGE_SIZE);
+				resident += num_pages;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#834: FILE: fs/proc/proc_misc.c:156:
+		extern  unsigned long lpagemem, lpzone_pages;

WARNING:LINE_SPACING: Missing a blank line after declarations
#835: FILE: fs/proc/proc_misc.c:157:
+		extern  unsigned long lpagemem, lpzone_pages;
+		len += sprintf(page+len,"Total # of LargePages: %8lu\t\tAvailable: %8lu\n"

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#835: FILE: fs/proc/proc_misc.c:157:
+		len += sprintf(page+len,"Total # of LargePages: %8lu\t\tAvailable: %8lu\n"
 		                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#835: FILE: fs/proc/proc_misc.c:157:
+		len += sprintf(page+len,"Total # of LargePages: %8lu\t\tAvailable: %8lu\n"
 		                       ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#837: FILE: fs/proc/proc_misc.c:159:
+		lpzone_pages, lpagemem, LPAGE_SIZE, (LPAGE_SIZE/1024));
 		                                               ^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#861: FILE: include/asm-i386/page.h:55:
+#define LPAGE_SIZE ^I((1UL) << LPAGE_SHIFT)$

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'vma' may be better as '(vma)' to avoid precedence issues
#885: FILE: include/linux/mm.h:430:
+#define is_vm_large_page(vma) (vma->vm_flags & VM_LARGEPAGE)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#886: FILE: include/linux/mm.h:431:
+extern int	copy_large_page(struct mm_struct *, struct mm_struct *, struct vm_area_struct *);

WARNING:LONG_LINE: line length of 150 exceeds 100 columns
#887: FILE: include/linux/mm.h:432:
+extern int	follow_large_page(struct mm_struct *, struct vm_area_struct *, struct page **, struct vm_area_struct **, unsigned long *, int *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#887: FILE: include/linux/mm.h:432:
+extern int	follow_large_page(struct mm_struct *, struct vm_area_struct *, struct page **, struct vm_area_struct **, unsigned long *, int *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mm_struct *' should also have an identifier name
#887: FILE: include/linux/mm.h:432:
+extern int	follow_large_page(struct mm_struct *, struct vm_area_struct *, struct page **, struct vm_area_struct **, unsigned long *, int *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vm_area_struct *' should also have an identifier name
#887: FILE: include/linux/mm.h:432:
+extern int	follow_large_page(struct mm_struct *, struct vm_area_struct *, struct page **, struct vm_area_struct **, unsigned long *, int *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page **' should also have an identifier name
#887: FILE: include/linux/mm.h:432:
+extern int	follow_large_page(struct mm_struct *, struct vm_area_struct *, struct page **, struct vm_area_struct **, unsigned long *, int *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vm_area_struct **' should also have an identifier name
#887: FILE: include/linux/mm.h:432:
+extern int	follow_large_page(struct mm_struct *, struct vm_area_struct *, struct page **, struct vm_area_struct **, unsigned long *, int *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long *' should also have an identifier name
#887: FILE: include/linux/mm.h:432:
+extern int	follow_large_page(struct mm_struct *, struct vm_area_struct *, struct page **, struct vm_area_struct **, unsigned long *, int *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int *' should also have an identifier name
#887: FILE: include/linux/mm.h:432:
+extern int	follow_large_page(struct mm_struct *, struct vm_area_struct *, struct page **, struct vm_area_struct **, unsigned long *, int *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#887: FILE: include/linux/mm.h:432:
+extern int	follow_large_page(struct mm_struct *, struct vm_area_struct *, struct page **, struct vm_area_struct **, unsigned long *, int *, int);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#892: FILE: include/linux/mm.h:437:
+#endif $

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#916: FILE: include/linux/sysctl.h:127:
+	KERN_LARGE_PAGE_MEM=55,	/* Number of large_page pages configured */
 	                   ^

ERROR:SPACING: space prohibited before that close parenthesis ')'
#929: FILE: kernel/sysctl.c:101:
+extern int	change_large_page_mem_size(int );

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#929: FILE: kernel/sysctl.c:101:
+extern int	change_large_page_mem_size(int );

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#929: FILE: kernel/sysctl.c:101:
+extern int	change_large_page_mem_size(int );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#963: FILE: mm/memory.c:182:
+	if (is_vm_large_page(vma) )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#984: FILE: mm/memory.c:1370:
+	if (is_vm_large_page(vma) )

WARNING:TYPO_SPELLING: 'Cann't' may be misspelled - perhaps 'Can't'?
#1010: FILE: mm/mprotect.c:291:
+		return -EINVAL; /* Cann't change protections on large_page mappings. */
 		                   ^^^^^^

WARNING:TYPO_SPELLING: 'Cann't' may be misspelled - perhaps 'Can't'?
#1022: FILE: mm/mremap.c:271:
+		ret = -EINVAL; /* Cann't remap large_page mappings. */
 		                  ^^^^^^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000442647.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 68 errors, 86 warnings, 51 checks, 851 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000442647.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
