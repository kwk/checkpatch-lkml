WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#49: FILE: kernel/compat.c:212:
+extern long do_futex(u32 *, int, int, struct timespec *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32 *' should also have an identifier name
#49: FILE: kernel/compat.c:212:
+extern long do_futex(u32 *, int, int, struct timespec *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#49: FILE: kernel/compat.c:212:
+extern long do_futex(u32 *, int, int, struct timespec *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#49: FILE: kernel/compat.c:212:
+extern long do_futex(u32 *, int, int, struct timespec *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct timespec *' should also have an identifier name
#49: FILE: kernel/compat.c:212:
+extern long do_futex(u32 *, int, int, struct timespec *);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#52: FILE: kernel/compat.c:215:
+asmlinkage long compat_sys_futex(u32 *uaddr, int op, int val,
+		struct compat_timespec *ct)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'op == FUTEX_WAIT'
#57: FILE: kernel/compat.c:220:
+	if ((op == FUTEX_WAIT) && ct) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#72: FILE: kernel/futex.c:321:
+		      struct timespec* ts)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'op == FUTEX_WAIT'
#121: FILE: kernel/futex.c:468:
+	if ((op == FUTEX_WAIT) && utime) {

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000394216.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 5 warnings, 3 checks, 80 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000394216.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
