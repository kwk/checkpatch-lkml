WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#59: FILE: include/linux/mutex-debug.h:1:
+#ifndef __LINUX_MUTEX_DEBUG_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lockname' - possible side-effects?
#66: FILE: include/linux/mutex-debug.h:8:
+#define __DEBUG_MUTEX_INITIALIZER(lockname) \
+	, .held_list = LIST_HEAD_INIT(lockname.held_list), \
+	  .name = #lockname , .magic = &lockname

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#68: FILE: include/linux/mutex-debug.h:10:
+	  .name = #lockname , .magic = &lockname
 	                    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#70: FILE: include/linux/mutex-debug.h:12:
+#define mutex_init(sem)		__mutex_init(sem, __FUNCTION__)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#72: FILE: include/linux/mutex-debug.h:14:
+extern void mutex_debug_show_all_locks(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#73: FILE: include/linux/mutex-debug.h:15:
+extern void mutex_debug_show_held_locks(struct task_struct *filter);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#74: FILE: include/linux/mutex-debug.h:16:
+extern void mutex_debug_check_no_locks_held(struct task_struct *task);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#75: FILE: include/linux/mutex-debug.h:17:
+extern void mutex_debug_check_no_locks_freed(const void *from, const void *to);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#114: FILE: kernel/mutex-debug.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#115: FILE: kernel/mutex-debug.c:2:
+ * kernel/mutex-debug.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#142: FILE: kernel/mutex-debug.c:29:
+#define __IP_DECL__		, unsigned long ip
                    		^

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#143: FILE: kernel/mutex-debug.c:30:
+#define __IP__			, ip
               			^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#143: FILE: kernel/mutex-debug.c:30:
+#define __IP__			, ip

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#144: FILE: kernel/mutex-debug.c:31:
+#define __CALLER_IP__		, (unsigned long)__builtin_return_address(0)
                      		^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#144: FILE: kernel/mutex-debug.c:31:
+#define __CALLER_IP__		, (unsigned long)__builtin_return_address(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lock' - possible side-effects?
#184: FILE: kernel/mutex-debug.c:71:
+#define spin_lock_mutex(lock)				\
+	do {						\
+		struct mutex *l = container_of(lock, struct mutex, wait_lock); \
+							\
+		DEBUG_WARN_ON(in_interrupt());		\
+		debug_spin_lock(&debug_lock);		\
+		spin_lock(lock);			\
+		DEBUG_WARN_ON(l->magic != lock);	\
+	} while (0)

WARNING:USE_LOCKDEP: Where possible, use lockdep_assert_held instead of assertions based on spin_is_locked
#205: FILE: kernel/mutex-debug.c:92:
+		if (spin_is_locked(&debug_lock))	\

lockdep_assert_held() annotations should be preferred over
assertions based on spin_is_locked()

See: https://www.kernel.org/doc/html/latest/locking/lockdep-design.html#annotations

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#206: FILE: kernel/mutex-debug.c:93:
+^I^I^Ispin_unlock(&debug_lock); ^I\$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#214: FILE: kernel/mutex-debug.c:101:
+		BUG();					\

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'c' may be better as '(c)' to avoid precedence issues
#218: FILE: kernel/mutex-debug.c:105:
+#define DEBUG_WARN_ON(c)				\
+do {							\
+	if (unlikely(c && debug_on)) {			\
+		DEBUG_OFF();				\
+		WARN_ON(1);				\
+	}						\
+} while (0)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#243: FILE: kernel/mutex-debug.c:130:
+		printk("%16s:%5d [%p, %3d]", p->comm, p->pid, p, p->prio);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#245: FILE: kernel/mutex-debug.c:132:
+		printk("<none>");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#253: FILE: kernel/mutex-debug.c:140:
+		printk("<none>");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#259: FILE: kernel/mutex-debug.c:146:
+		printk("%s/%d [%p, %3d]", p->comm, p->pid, p, p->prio);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#261: FILE: kernel/mutex-debug.c:148:
+		printk("<none>");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#266: FILE: kernel/mutex-debug.c:153:
+	printk(" [%p] {%s}\n", lock, lock->name);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#269: FILE: kernel/mutex-debug.c:156:
+		printk(".. held by:  ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#271: FILE: kernel/mutex-debug.c:158:
+		printk("\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#274: FILE: kernel/mutex-debug.c:161:
+		printk("... acquired at:               ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#282: FILE: kernel/mutex-debug.c:169:
+	case TASK_RUNNING:		printk("R"); break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#282: FILE: kernel/mutex-debug.c:169:
+	case TASK_RUNNING:		printk("R"); break;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#283: FILE: kernel/mutex-debug.c:170:
+	case TASK_INTERRUPTIBLE:	printk("S"); break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#283: FILE: kernel/mutex-debug.c:170:
+	case TASK_INTERRUPTIBLE:	printk("S"); break;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#284: FILE: kernel/mutex-debug.c:171:
+	case TASK_UNINTERRUPTIBLE:	printk("D"); break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#284: FILE: kernel/mutex-debug.c:171:
+	case TASK_UNINTERRUPTIBLE:	printk("D"); break;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#285: FILE: kernel/mutex-debug.c:172:
+	case TASK_STOPPED:		printk("T"); break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#285: FILE: kernel/mutex-debug.c:172:
+	case TASK_STOPPED:		printk("T"); break;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#286: FILE: kernel/mutex-debug.c:173:
+	case EXIT_ZOMBIE:		printk("Z"); break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#286: FILE: kernel/mutex-debug.c:173:
+	case EXIT_ZOMBIE:		printk("Z"); break;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#287: FILE: kernel/mutex-debug.c:174:
+	case EXIT_DEAD:			printk("X"); break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#287: FILE: kernel/mutex-debug.c:174:
+	case EXIT_DEAD:			printk("X"); break;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#288: FILE: kernel/mutex-debug.c:175:
+	default:			printk("?"); break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#288: FILE: kernel/mutex-debug.c:175:
+	default:			printk("?"); break;

CHECK:BRACES: braces {} should be used on all arms of this statement
#291: FILE: kernel/mutex-debug.c:178:
+	if (p->blocked_on) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#294: FILE: kernel/mutex-debug.c:181:
+		printk(" blocked on mutex:");

CHECK:BRACES: Unbalanced braces around else statement
#296: FILE: kernel/mutex-debug.c:183:
+	} else

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#297: FILE: kernel/mutex-debug.c:184:
+		printk(" (not blocked on mutex)\n");

CHECK:UNCOMMENTED_DEFINITION: struct mutex definition without comment
#303: FILE: kernel/mutex-debug.c:190:
+	struct mutex *lock;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#309: FILE: kernel/mutex-debug.c:196:
+		printk("------------------------------\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#310: FILE: kernel/mutex-debug.c:197:
+		printk("| showing all locks held by: |  (");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#312: FILE: kernel/mutex-debug.c:199:
+		printk("):\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#313: FILE: kernel/mutex-debug.c:200:
+		printk("------------------------------\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#315: FILE: kernel/mutex-debug.c:202:
+		printk("---------------------------\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#316: FILE: kernel/mutex-debug.c:203:
+		printk("| showing all locks held: |\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#317: FILE: kernel/mutex-debug.c:204:
+		printk("---------------------------\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 't != filter->thread_info'
#332: FILE: kernel/mutex-debug.c:219:
+		if (filter && (t != filter->thread_info))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#338: FILE: kernel/mutex-debug.c:225:
+		printk("\n#%03d:            ", count);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#343: FILE: kernel/mutex-debug.c:230:
+	printk("\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#352: FILE: kernel/mutex-debug.c:239:
+	printk("\nShowing all blocking locks in the system:\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#363: FILE: kernel/mutex-debug.c:250:
+			printk("hm, tasklist_lock locked, retrying... ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#366: FILE: kernel/mutex-debug.c:253:
+			printk(" #%d", 10-count);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#366: FILE: kernel/mutex-debug.c:253:
+			printk(" #%d", 10-count);
 			                 ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#370: FILE: kernel/mutex-debug.c:257:
+		printk(" ignoring it.\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#374: FILE: kernel/mutex-debug.c:261:
+		printk(" locked it.\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#383: FILE: kernel/mutex-debug.c:270:
+	printk("\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#385: FILE: kernel/mutex-debug.c:272:
+	printk("=============================================\n\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#394: FILE: kernel/mutex-debug.c:281:
+	printk("\n%s/%d is trying to acquire this lock:\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#395: FILE: kernel/mutex-debug.c:282:
+	printk("\n%s/%d is trying to acquire this lock:\n",
+		current->comm, current->pid);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#397: FILE: kernel/mutex-debug.c:284:
+	printk("... trying at:                 ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#402: FILE: kernel/mutex-debug.c:289:
+		printk("but %s/%d is deadlocking current task %s/%d!\n\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#403: FILE: kernel/mutex-debug.c:290:
+		printk("but %s/%d is deadlocking current task %s/%d!\n\n",
+			task->comm, task->pid, current->comm, current->pid);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#404: FILE: kernel/mutex-debug.c:291:
+		printk("\n%s/%d is blocked on this lock:\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#405: FILE: kernel/mutex-debug.c:292:
+		printk("\n%s/%d is blocked on this lock:\n",
+			task->comm, task->pid);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#410: FILE: kernel/mutex-debug.c:297:
+		printk("\n%s/%d's [blocked] stackdump:\n\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#411: FILE: kernel/mutex-debug.c:298:
+		printk("\n%s/%d's [blocked] stackdump:\n\n",
+			task->comm, task->pid);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#415: FILE: kernel/mutex-debug.c:302:
+	printk("\n%s/%d's [current] stackdump:\n\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#416: FILE: kernel/mutex-debug.c:303:
+	printk("\n%s/%d's [current] stackdump:\n\n",
+		current->comm, current->pid);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#419: FILE: kernel/mutex-debug.c:306:
+	printk("[ turning off deadlock detection. Please report this. ]\n\n");

CHECK:UNCOMMENTED_DEFINITION: struct mutex definition without comment
#426: FILE: kernel/mutex-debug.c:313:
+	struct mutex *lockblk;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#446: FILE: kernel/mutex-debug.c:333:
+		printk("\n==========================================\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#447: FILE: kernel/mutex-debug.c:334:
+		printk(  "[ BUG: lock recursion deadlock detected! |\n");

ERROR:SPACING: space prohibited after that open parenthesis '('
#447: FILE: kernel/mutex-debug.c:334:
+		printk(  "[ BUG: lock recursion deadlock detected! |\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#448: FILE: kernel/mutex-debug.c:335:
+		printk(  "------------------------------------------\n");

ERROR:SPACING: space prohibited after that open parenthesis '('
#448: FILE: kernel/mutex-debug.c:335:
+		printk(  "------------------------------------------\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#456: FILE: kernel/mutex-debug.c:343:
+		printk("\n===========================================\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#457: FILE: kernel/mutex-debug.c:344:
+		printk(  "[ BUG: infinite lock dependency detected!? |\n");

ERROR:SPACING: space prohibited after that open parenthesis '('
#457: FILE: kernel/mutex-debug.c:344:
+		printk(  "[ BUG: infinite lock dependency detected!? |\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#458: FILE: kernel/mutex-debug.c:345:
+		printk(  "-------------------------------------------\n");

ERROR:SPACING: space prohibited after that open parenthesis '('
#458: FILE: kernel/mutex-debug.c:345:
+		printk(  "-------------------------------------------\n");

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#464: FILE: kernel/mutex-debug.c:351:
+	if (lockblk && check_deadlock(lockblk, depth+1, ti, ip)) {
 	                                            ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#465: FILE: kernel/mutex-debug.c:352:
+		printk("\n============================================\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#466: FILE: kernel/mutex-debug.c:353:
+		printk(  "[ BUG: circular locking deadlock detected! ]\n");

ERROR:SPACING: space prohibited after that open parenthesis '('
#466: FILE: kernel/mutex-debug.c:353:
+		printk(  "[ BUG: circular locking deadlock detected! ]\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#467: FILE: kernel/mutex-debug.c:354:
+		printk(  "--------------------------------------------\n");

ERROR:SPACING: space prohibited after that open parenthesis '('
#467: FILE: kernel/mutex-debug.c:354:
+		printk(  "--------------------------------------------\n");

CHECK:UNCOMMENTED_DEFINITION: struct mutex definition without comment
#479: FILE: kernel/mutex-debug.c:366:
+	struct mutex *lock;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#494: FILE: kernel/mutex-debug.c:381:
+		printk("BUG: %s/%d, lock held at task exit time!\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#495: FILE: kernel/mutex-debug.c:382:
+		printk("BUG: %s/%d, lock held at task exit time!\n",
+			task->comm, task->pid);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#498: FILE: kernel/mutex-debug.c:385:
+			printk("exiting task is not even the owner??\n");

CHECK:UNCOMMENTED_DEFINITION: struct mutex definition without comment
#507: FILE: kernel/mutex-debug.c:394:
+	struct mutex *lock;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#524: FILE: kernel/mutex-debug.c:411:
+		printk("BUG: %s/%d, active lock [%p(%p-%p)] freed!\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#525: FILE: kernel/mutex-debug.c:412:
+		printk("BUG: %s/%d, active lock [%p(%p-%p)] freed!\n",
+			current->comm, current->pid, lock, from, to);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#529: FILE: kernel/mutex-debug.c:416:
+			printk("freeing task is not even the owner??\n");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#563: FILE: kernel/mutex-debug.c:450:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:USE_LOCKDEP: Where possible, use lockdep_assert_held instead of assertions based on spin_is_locked
#567: FILE: kernel/mutex-debug.c:454:
+	SMP_DEBUG_WARN_ON(!spin_is_locked(&lock->wait_lock));

WARNING:USE_LOCKDEP: Where possible, use lockdep_assert_held instead of assertions based on spin_is_locked
#584: FILE: kernel/mutex-debug.c:471:
+	SMP_DEBUG_WARN_ON(!spin_is_locked(&lock->wait_lock));

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#631: FILE: lib/Kconfig.debug:98:
+config DEBUG_MUTEXES
+	bool "Mutex debugging, deadlock detection"
+	default y
+	depends on DEBUG_KERNEL
+	help
+	 This allows mutex semantics violations and mutex related deadlocks
+	 (lockups) to be detected and reported automatically.
+

Kconfig symbols should have a help text which fully describes
it.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000123493.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 19 errors, 64 warnings, 24 checks, 563 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000123493.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
