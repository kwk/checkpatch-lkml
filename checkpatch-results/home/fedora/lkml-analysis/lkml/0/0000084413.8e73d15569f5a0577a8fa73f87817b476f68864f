WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#25: 
- list management, for profiles loaded into the system (profile_list) and for 

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#45: FILE: security/apparmor/capabilities.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:STATIC_CONST_CHAR_ARRAY: static const char * array should probably be static const char * const
#58: FILE: security/apparmor/capabilities.c:14:
+static const char *cap_names[] = {

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#102: FILE: security/apparmor/list.c:1:
+/*

WARNING:LINE_SPACING: Missing a blank line after declarations
#135: FILE: security/apparmor/list.c:34:
+	struct aaprofile *p = NULL;
+	if (name) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#263: FILE: security/apparmor/list.c:162:
+		AA_INFO("%s: bad subdomain\n", __FUNCTION__);

ERROR:FUNCTION_WITHOUT_ARGS: Bad function definition - void aa_subdomainlist_release() should probably be void aa_subdomainlist_release(void)
#316: FILE: security/apparmor/list.c:215:
+void aa_subdomainlist_release()

Function declarations without arguments like::

  int foo()

should be::

  int foo(void)

WARNING:LINE_SPACING: Missing a blank line after declarations
#359: FILE: security/apparmor/list.c:258:
+	struct aaprofile *profile = (struct aaprofile *)v;
+	seq_printf(f, "%s (%s)\n", profile->name,

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#364: FILE: security/apparmor/list.c:263:
+struct seq_operations apparmorfs_profiles_op = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#373: FILE: security/apparmor/procattr.c:1:
+/*

WARNING:LINE_SPACING: Missing a blank line after declarations
#433: FILE: security/apparmor/procattr.c:61:
+		const char *unconstrained_str = "unconstrained\n";
+		len = strlen(unconstrained_str);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#446: FILE: security/apparmor/procattr.c:74:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#456: FILE: security/apparmor/procattr.c:84:
+	AA_DEBUG("%s: %p %zd\n", __FUNCTION__, hatinfo, infosize);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#486: FILE: security/apparmor/procattr.c:114:
+	while (*tmp && *tmp != '^') {
+		tmp++;
+	}

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#491: FILE: security/apparmor/procattr.c:119:
+		AA_WARN("%s: Invalid input '%s'\n", __FUNCTION__, token);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#505: FILE: security/apparmor/procattr.c:133:
+	consumed = len = strlen(smagic);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#511: FILE: security/apparmor/procattr.c:139:
+			__FUNCTION__,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#523: FILE: security/apparmor/procattr.c:151:
+			__FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#528: FILE: security/apparmor/procattr.c:156:
+		 __FUNCTION__, magic, hat ? hat : NULL);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#553: FILE: security/apparmor/procattr.c:181:
+		 __FUNCTION__, current->comm, current->pid);

WARNING:SPLIT_STRING: quoted string split across lines
#583: FILE: security/apparmor/procattr.c:211:
+			AA_WARN("%s: Unable to switch task %s(%d) to profile"
+				"'%s'. No such profile.\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#584: FILE: security/apparmor/procattr.c:212:
+				__FUNCTION__,

WARNING:SPLIT_STRING: quoted string split across lines
#601: FILE: security/apparmor/procattr.c:229:
+			AA_WARN("%s: Unconstraining task %s(%d) "
+				"profile %s active %s\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#602: FILE: security/apparmor/procattr.c:230:
+				__FUNCTION__,

WARNING:SPLIT_STRING: quoted string split across lines
#610: FILE: security/apparmor/procattr.c:238:
+			AA_WARN("%s: task %s(%d) "
+				"is already unconstrained\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#611: FILE: security/apparmor/procattr.c:239:
+				__FUNCTION__, p->comm, p->pid);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#619: FILE: security/apparmor/procattr.c:247:
+				__FUNCTION__, p->comm, p->pid);

WARNING:SPLIT_STRING: quoted string split across lines
#627: FILE: security/apparmor/procattr.c:255:
+				AA_WARN("%s: Unable to allocate subdomain for "
+					"task %s(%d). Cannot confine task to "

WARNING:SPLIT_STRING: quoted string split across lines
#628: FILE: security/apparmor/procattr.c:256:
+					"task %s(%d). Cannot confine task to "
+					"profile %s\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#629: FILE: security/apparmor/procattr.c:257:
+					__FUNCTION__,

WARNING:SPLIT_STRING: quoted string split across lines
#672: FILE: security/apparmor/procattr.c:300:
+		AA_WARN("%s: Switching task %s(%d) "
+			"profile %s active %s to new profile %s\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#673: FILE: security/apparmor/procattr.c:301:
+			__FUNCTION__,

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000084413.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 29 warnings, 2 checks, 649 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000084413.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
