WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#46: 
diff -urN linux/Documentation/Configure.help pmac/Documentation/Configure.help

CHECK:SPACING: No space is necessary after a cast
#147: FILE: drivers/net/ppp_generic.c:637:
+		if (copy_from_user(&uprog, (void *) arg, sizeof(uprog)))

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#164: FILE: drivers/net/ppp_generic.c:654:
+		filtp = (cmd == PPPIOCSPASS)? &ppp->pass_filter: &ppp->active_filter;
 		                            ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#164: FILE: drivers/net/ppp_generic.c:654:
+		filtp = (cmd == PPPIOCSPASS)? &ppp->pass_filter: &ppp->active_filter;
 		                                               ^

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#167: FILE: drivers/net/ppp_generic.c:657:
+		if (filtp->filter)
+			kfree(filtp->filter);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#187: FILE: drivers/net/ppp_generic.c:939:
+		/* the filter instructions are constructed assuming
+		   a four-byte PPP header on each packet */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#187: FILE: drivers/net/ppp_generic.c:939:
+		   a four-byte PPP header on each packet */

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#190: FILE: drivers/net/ppp_generic.c:942:
+		if (ppp->pass_filter.filter
+		    && sk_run_filter(skb, ppp->pass_filter.filter,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#193: FILE: drivers/net/ppp_generic.c:945:
+				printk(KERN_DEBUG "PPP: outbound frame not passed\n");

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#200: FILE: drivers/net/ppp_generic.c:952:
+		if (!(ppp->active_filter.filter
+		      && sk_run_filter(skb, ppp->active_filter.filter,

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#232: FILE: drivers/net/ppp_generic.c:1472:
+		/* the filter instructions are constructed assuming
+		   a four-byte PPP header on each packet */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#232: FILE: drivers/net/ppp_generic.c:1472:
+		   a four-byte PPP header on each packet */

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#235: FILE: drivers/net/ppp_generic.c:1475:
+		if (ppp->pass_filter.filter
+		    && sk_run_filter(skb, ppp->pass_filter.filter,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#238: FILE: drivers/net/ppp_generic.c:1478:
+				printk(KERN_DEBUG "PPP: inbound frame not passed\n");

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#243: FILE: drivers/net/ppp_generic.c:1483:
+		if (!(ppp->active_filter.filter
+		      && sk_run_filter(skb, ppp->active_filter.filter,

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#339: FILE: drivers/net/ppp_generic.c:2292:
+	if (ppp->pass_filter.filter) {
+		kfree(ppp->pass_filter.filter);

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#343: FILE: drivers/net/ppp_generic.c:2296:
+	if (ppp->active_filter.filter) {
+		kfree(ppp->active_filter.filter);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#457: FILE: include/linux/filter.h:138:
+extern int sk_chk_filter(struct sock_filter *filter, int flen);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#467: FILE: net/irda/irnet/irnet_ppp.c:478:
   if(ap->ppp_open)
+    return -EAGAIN;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#469: FILE: net/irda/irnet/irnet_ppp.c:479:
+    return -EAGAIN;$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#476: FILE: net/irda/irnet/irnet_ppp.c:502:
   if(ap->ppp_open)
+    return -EAGAIN;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#478: FILE: net/irda/irnet/irnet_ppp.c:503:
+    return -EAGAIN;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#489: FILE: net/irda/irnet/irnet_ppp.c:526:
+  if(!ap->ppp_open)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#489: FILE: net/irda/irnet/irnet_ppp.c:526:
+  if(!ap->ppp_open)
     mask |= irnet_ctrl_poll(ap, file, wait);

ERROR:SPACING: space required before the open parenthesis '('
#489: FILE: net/irda/irnet/irnet_ppp.c:526:
+  if(!ap->ppp_open)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000539456.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 3 errors, 16 warnings, 6 checks, 419 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000539456.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
