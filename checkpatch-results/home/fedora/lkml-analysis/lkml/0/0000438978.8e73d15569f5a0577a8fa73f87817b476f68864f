WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#34: 
> > diff -ruN -X dontdiff linux-2.5.31/fs/proc/root.c statctr-2.5.31/fs/proc/root.c

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#158: FILE: include/linux/statctr.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#162: FILE: include/linux/statctr.h:5:
+ *  Scalable Statistic Counters $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#177: FILE: include/linux/statctr.h:20:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#178: FILE: include/linux/statctr.h:21:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#182: FILE: include/linux/statctr.h:25:
+ * include/linux/statctr.h

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#192: FILE: include/linux/statctr.h:35:
+^Istruct proc_dir_entry ^I*parent;$

WARNING:NEW_TYPEDEFS: do not add new typedefs
#197: FILE: include/linux/statctr.h:40:
+typedef struct {

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#199: FILE: include/linux/statctr.h:42:
+^Iunsigned long ^I^I*ctr;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#201: FILE: include/linux/statctr.h:44:
+^Iunsigned long ^I^Ictr;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#204: FILE: include/linux/statctr.h:47:
+^Ichar ^I^I^I*name;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#210: FILE: include/linux/statctr.h:53:
+extern int statctr_init(statctr_t *, $

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#210: FILE: include/linux/statctr.h:53:
+extern int statctr_init(statctr_t *, 

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'statctr_t *' should also have an identifier name
#210: FILE: include/linux/statctr.h:53:
+extern int statctr_init(statctr_t *, 

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct statctr_group *' should also have an identifier name
#210: FILE: include/linux/statctr.h:53:
+extern int statctr_init(statctr_t *, 

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#210: FILE: include/linux/statctr.h:53:
+extern int statctr_init(statctr_t *, 

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#210: FILE: include/linux/statctr.h:53:
+extern int statctr_init(statctr_t *, 

ERROR:SPACING: space required after that ',' (ctx:OxV)
#211: FILE: include/linux/statctr.h:54:
+			struct statctr_group *, const char *,int);
 			                                    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#212: FILE: include/linux/statctr.h:55:
+extern void statctr_cleanup(statctr_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'statctr_t *' should also have an identifier name
#212: FILE: include/linux/statctr.h:55:
+extern void statctr_cleanup(statctr_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct proc_dir_entry *' should also have an identifier name
#216: FILE: include/linux/statctr.h:59:
+extern struct statctr_group *

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#216: FILE: include/linux/statctr.h:59:
+extern struct statctr_group *

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#218: FILE: include/linux/statctr.h:61:
+extern void free_statctr_group(struct statctr_group *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct statctr_group *' should also have an identifier name
#218: FILE: include/linux/statctr.h:61:
+extern void free_statctr_group(struct statctr_group *);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#221: FILE: include/linux/statctr.h:64:
+create_statctr_group(struct proc_dir_entry *parent, const char *name) $

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#225: FILE: include/linux/statctr.h:68:
+}
+static inline void free_statctr_group(struct statctr_group *group)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#226: FILE: include/linux/statctr.h:69:
+{ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#227: FILE: include/linux/statctr.h:70:
+} $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#230: FILE: include/linux/statctr.h:73:
+#ifdef^ICONFIG_SMP $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#234: FILE: include/linux/statctr.h:77:
+^Istctr->ctr = kmalloc_percpu(sizeof(*(stctr->ctr)), gfp_mask); $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around stctr->ctr
#234: FILE: include/linux/statctr.h:77:
+	stctr->ctr = kmalloc_percpu(sizeof(*(stctr->ctr)), gfp_mask); 

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:TRAILING_WHITESPACE: trailing whitespace
#235: FILE: include/linux/statctr.h:78:
+^Iif (!stctr->ctr) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#245: FILE: include/linux/statctr.h:88:
+/** $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#247: FILE: include/linux/statctr.h:90:
+ * @stctr: Statistics counter $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#249: FILE: include/linux/statctr.h:92:
+ * Increments the counter by one.  Internally only the per-cpu counter is $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#265: FILE: include/linux/statctr.h:108:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#265: FILE: include/linux/statctr.h:108:
+ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#276: FILE: include/linux/statctr.h:119:
+ * Sets the statistics counter. If statctr_read() is invoked after a counter $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#279: FILE: include/linux/statctr.h:122:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#279: FILE: include/linux/statctr.h:122:
+ $

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#284: FILE: include/linux/statctr.h:127:
+	for (i=0; i < NR_CPUS; i++) {
 	      ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#284: FILE: include/linux/statctr.h:127:
+	for (i=0; i < NR_CPUS; i++) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#298: FILE: include/linux/statctr.h:141:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#298: FILE: include/linux/statctr.h:141:
+ $

WARNING:LINE_SPACING: Missing a blank line after declarations
#303: FILE: include/linux/statctr.h:146:
+	unsigned long res = 0;
+	for (i=0; i < NR_CPUS; i++)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#303: FILE: include/linux/statctr.h:146:
+	for (i=0; i < NR_CPUS; i++)
 	      ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#303: FILE: include/linux/statctr.h:146:
+	for (i=0; i < NR_CPUS; i++)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#313: FILE: include/linux/statctr.h:156:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#313: FILE: include/linux/statctr.h:156:
+ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#323: FILE: include/linux/statctr.h:166:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#323: FILE: include/linux/statctr.h:166:
+ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#335: FILE: include/linux/statctr.h:178:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#335: FILE: include/linux/statctr.h:178:
+ $

ERROR:CODE_INDENT: code indent should use tabs where possible
#338: FILE: include/linux/statctr.h:181:
+        *this_cpu_ptr(stctr->ctr) += val;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#338: FILE: include/linux/statctr.h:181:
+        *this_cpu_ptr(stctr->ctr) += val;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#347: FILE: include/linux/statctr.h:190:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#347: FILE: include/linux/statctr.h:190:
+ $

ERROR:CODE_INDENT: code indent should use tabs where possible
#350: FILE: include/linux/statctr.h:193:
+        *this_cpu_ptr(stctr->ctr) -= val;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#350: FILE: include/linux/statctr.h:193:
+        *this_cpu_ptr(stctr->ctr) -= val;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#387: FILE: include/linux/statctr.h:230:
+static inline void statctr_set(statctr_t *stctr, unsigned long val) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#392: FILE: include/linux/statctr.h:235:
+static inline void statctr_add(statctr_t *stctr, unsigned long val) $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#426: FILE: kernel/statctr.c:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#431: FILE: kernel/statctr.c:6:
+ *  $

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#445: FILE: kernel/statctr.c:20:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#446: FILE: kernel/statctr.c:21:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#450: FILE: kernel/statctr.c:25:
+ * kernel/statctr.c

ERROR:TRAILING_WHITESPACE: trailing whitespace
#465: FILE: kernel/statctr.c:40:
+^Iloff_t n = *pos; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#467: FILE: kernel/statctr.c:42:
+^Ilist_for_each(tmp, &group->head) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#469: FILE: kernel/statctr.c:44:
+^I^I^Ireturn list_entry(tmp, statctr_t, grouplist); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#472: FILE: kernel/statctr.c:47:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#473: FILE: kernel/statctr.c:48:
+static void *statctr_next(struct seq_file *m, void *v, loff_t *pos) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#487: FILE: kernel/statctr.c:62:
+^Ichar *spc = " ", *str; $

WARNING:LINE_SPACING: Missing a blank line after declarations
#489: FILE: kernel/statctr.c:64:
+	statctr_t *stctr = v;
+	if (!stctr->name)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#491: FILE: kernel/statctr.c:66:
+^Ielse $

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#497: FILE: kernel/statctr.c:72:
+static struct seq_operations statctr_seq_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:LINE_SPACING: Missing a blank line after declarations
#508: FILE: kernel/statctr.c:83:
+	int res;
+	res = seq_open(file, &statctr_seq_ops);

WARNING:CONST_STRUCT: struct file_operations should normally be const
#516: FILE: kernel/statctr.c:91:
+static struct file_operations proc_statctr_ops = {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#521: FILE: kernel/statctr.c:96:
+};^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#522: FILE: kernel/statctr.c:97:
+^I^I $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#524: FILE: kernel/statctr.c:99:
+create_statctr_seq_entry(const char *name, mode_t mode, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#529: FILE: kernel/statctr.c:104:
+^Istruct proc_dir_entry *entry; $

WARNING:LINE_SPACING: Missing a blank line after declarations
#530: FILE: kernel/statctr.c:105:
+	struct proc_dir_entry *entry; 
+	entry = create_proc_entry(name, mode, parent);

CHECK:BRACES: braces {} should be used on all arms of this statement
#531: FILE: kernel/statctr.c:106:
+	if (entry) {
[...]
+	else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#535: FILE: kernel/statctr.c:110:
+	}
+	else

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#541: FILE: kernel/statctr.c:116:
+ * create_statctr_group - Creates and sets up a "statctr group" $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#543: FILE: kernel/statctr.c:118:
+ *^I      NULL is ok; but procname will be created under $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#546: FILE: kernel/statctr.c:121:
+ * $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#553: FILE: kernel/statctr.c:128:
+	create_statctr_group(struct proc_dir_entry *parent,
+				   const char *procname)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#567: FILE: kernel/statctr.c:142:
+^Iif (!group) $

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#570: FILE: kernel/statctr.c:145:
+	if (create_statctr_seq_entry (procname, 0444, tmpparent, group)) {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#581: FILE: kernel/statctr.c:156:
+	memcpy(group->procname, procname, strlen(procname)+1);
 	                                                  ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#584: FILE: kernel/statctr.c:159:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#590: FILE: kernel/statctr.c:165:
+ * @group: Pointer to struct statctr_group type; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#592: FILE: kernel/statctr.c:167:
+ * frees the memory pointed by it. $

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#597: FILE: kernel/statctr.c:172:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:TRAILING_WHITESPACE: trailing whitespace
#603: FILE: kernel/statctr.c:178:
+static int statctr_link_group(statctr_t *stctr, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#604: FILE: kernel/statctr.c:179:
+static int statctr_link_group(statctr_t *stctr, 
+			       struct statctr_group *group,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#605: FILE: kernel/statctr.c:180:
+^I^I^I       const char *ctrname, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#613: FILE: kernel/statctr.c:188:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#615: FILE: kernel/statctr.c:190:
+^I^Istctr->name = kmalloc(strlen(ctrname) + 1, gfp_mask); $

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#618: FILE: kernel/statctr.c:193:
+		memcpy(stctr->name, ctrname, strlen(ctrname)+1);
 		                                            ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#620: FILE: kernel/statctr.c:195:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#624: FILE: kernel/statctr.c:199:
+^I$

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#628: FILE: kernel/statctr.c:203:
+	if (stctr->name)
+		kfree(stctr->name);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#634: FILE: kernel/statctr.c:209:
+^I^I({do { } while (0); 0;}) $

ERROR:SPACING: space required after that ';' (ctx:VxV)
#634: FILE: kernel/statctr.c:209:
+		({do { } while (0); 0;}) 
 		                     ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#641: FILE: kernel/statctr.c:216:
+ * @group   : ^IThe struct statctr_group type which represents a $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#641: FILE: kernel/statctr.c:216:
+ * @group   : ^IThe struct statctr_group type which represents a $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#642: FILE: kernel/statctr.c:217:
+ *^I^I/proc entry. This should have been created by using the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#643: FILE: kernel/statctr.c:218:
+ *^I^Icreate_statctr_group interface. Passing NULL turns $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#655: FILE: kernel/statctr.c:230:
+ * then you would have no control over the order in which entries show up $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#658: FILE: kernel/statctr.c:233:
+int statctr_init(statctr_t *stctr, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#659: FILE: kernel/statctr.c:234:
+^I^I struct statctr_group *group, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#660: FILE: kernel/statctr.c:235:
+^I^I const char *ctrname, $

WARNING:LINE_SPACING: Missing a blank line after declarations
#664: FILE: kernel/statctr.c:239:
+	int ret;
+	if ((ret = __statctr_init(stctr, gfp_mask)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#664: FILE: kernel/statctr.c:239:
+	if ((ret = __statctr_init(stctr, gfp_mask)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#666: FILE: kernel/statctr.c:241:
+	if ((ret = statctr_link_group(stctr, group, ctrname, gfp_mask))) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#675: FILE: kernel/statctr.c:250:
+ * @ctr: Pointer to statctr_t type; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#683: FILE: kernel/statctr.c:258:
+#ifdef  CONFIG_PROC_FS  $

ERROR:SPACING: exactly one space required after that #ifdef
#683: FILE: kernel/statctr.c:258:
+#ifdef  CONFIG_PROC_FS  

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#685: FILE: kernel/statctr.c:260:
+EXPORT_SYMBOL(free_statctr_group);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#688: FILE: kernel/statctr.c:263:
+EXPORT_SYMBOL(statctr_init);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#689: FILE: kernel/statctr.c:264:
+EXPORT_SYMBOL(statctr_cleanup);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000438978.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 70 errors, 43 warnings, 10 checks, 539 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000438978.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
