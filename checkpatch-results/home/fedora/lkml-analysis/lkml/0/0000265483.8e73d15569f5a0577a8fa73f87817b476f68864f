WARNING:TYPO_SPELLING: 'Appearently' may be misspelled - perhaps 'Apparently'?
#31: 
This patch was sent out earlier. Appearently it is not possible
                                 ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#61: FILE: arch/ppc/boot/lib/zlib.c:1:
+#if 0

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#61: FILE: arch/ppc/boot/lib/zlib.c:1:
+#if 0

ERROR:SPACING: space required after that ',' (ctx:VxV)
#83: FILE: arch/ppc/boot/lib/zlib.c:96:
+#  define Assert(cond,msg) {if(!(cond)) printf(msg);}
                      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ';' (ctx:VxV)
#83: FILE: arch/ppc/boot/lib/zlib.c:96:
+#  define Assert(cond,msg) {if(!(cond)) printf(msg);}
                                                    ^

ERROR:SPACING: space required before the open parenthesis '('
#83: FILE: arch/ppc/boot/lib/zlib.c:96:
+#  define Assert(cond,msg) {if(!(cond)) printf(msg);}

CHECK:CAMELCASE: Avoid CamelCase: <Assert>
#83: FILE: arch/ppc/boot/lib/zlib.c:96:
+#  define Assert(cond,msg) {if(!(cond)) printf(msg);}

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Trace>
#84: FILE: arch/ppc/boot/lib/zlib.c:97:
+#  define Trace(x) printf x

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#84: FILE: arch/ppc/boot/lib/zlib.c:97:
+#  define Trace(x) printf x

ERROR:SPACING: space required after that ';' (ctx:WxV)
#85: FILE: arch/ppc/boot/lib/zlib.c:98:
+#  define Tracev(x) {if (verbose) printf x ;}
                                            ^

CHECK:CAMELCASE: Avoid CamelCase: <Tracev>
#85: FILE: arch/ppc/boot/lib/zlib.c:98:
+#  define Tracev(x) {if (verbose) printf x ;}

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#86: FILE: arch/ppc/boot/lib/zlib.c:99:
+#  define Tracevv(x) {if (verbose>1) printf x ;}
                                  ^

ERROR:SPACING: space required after that ';' (ctx:WxV)
#86: FILE: arch/ppc/boot/lib/zlib.c:99:
+#  define Tracevv(x) {if (verbose>1) printf x ;}
                                               ^

CHECK:CAMELCASE: Avoid CamelCase: <Tracevv>
#86: FILE: arch/ppc/boot/lib/zlib.c:99:
+#  define Tracevv(x) {if (verbose>1) printf x ;}

ERROR:SPACING: space required after that ',' (ctx:VxV)
#87: FILE: arch/ppc/boot/lib/zlib.c:100:
+#  define Tracec(c,x) {if (verbose && (c)) printf x ;}
                   ^

ERROR:SPACING: space required after that ';' (ctx:WxV)
#87: FILE: arch/ppc/boot/lib/zlib.c:100:
+#  define Tracec(c,x) {if (verbose && (c)) printf x ;}
                                                     ^

CHECK:CAMELCASE: Avoid CamelCase: <Tracec>
#87: FILE: arch/ppc/boot/lib/zlib.c:100:
+#  define Tracec(c,x) {if (verbose && (c)) printf x ;}

ERROR:SPACING: space required after that ',' (ctx:VxV)
#88: FILE: arch/ppc/boot/lib/zlib.c:101:
+#  define Tracecv(c,x) {if (verbose>1 && (c)) printf x ;}
                    ^

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#88: FILE: arch/ppc/boot/lib/zlib.c:101:
+#  define Tracecv(c,x) {if (verbose>1 && (c)) printf x ;}
                                    ^

ERROR:SPACING: space required after that ';' (ctx:WxV)
#88: FILE: arch/ppc/boot/lib/zlib.c:101:
+#  define Tracecv(c,x) {if (verbose>1 && (c)) printf x ;}
                                                        ^

CHECK:CAMELCASE: Avoid CamelCase: <Tracecv>
#88: FILE: arch/ppc/boot/lib/zlib.c:101:
+#  define Tracecv(c,x) {if (verbose>1 && (c)) printf x ;}

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#97: FILE: arch/ppc/boot/lib/zlib.c:318:
+  Trace(("inflate: reset\n"));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#106: FILE: arch/ppc/boot/lib/zlib.c:335:
+  Trace(("inflate: end\n"));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#115: FILE: arch/ppc/boot/lib/zlib.c:379:
+  Trace(("inflate: allocated\n"));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#124: FILE: arch/ppc/boot/lib/zlib.c:444:
+      Trace(("inflate: zlib header ok\n"));$

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'inflate', this function's name, in a string
#124: FILE: arch/ppc/boot/lib/zlib.c:444:
+      Trace(("inflate: zlib header ok\n"));

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#133: FILE: arch/ppc/boot/lib/zlib.c:489:
+      Trace(("inflate: zlib check ok\n"));$

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'inflate', this function's name, in a string
#133: FILE: arch/ppc/boot/lib/zlib.c:489:
+      Trace(("inflate: zlib check ok\n"));

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#142: FILE: arch/ppc/boot/lib/zlib.c:773:
+  Trace(("inflate:   blocks reset\n"));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#151: FILE: arch/ppc/boot/lib/zlib.c:796:
+  Trace(("inflate:   blocks allocated\n"));$

ERROR:CODE_INDENT: code indent should use tabs where possible
#160: FILE: arch/ppc/boot/lib/zlib.c:829:
+          Trace(("inflate:     stored block%s\n",$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#160: FILE: arch/ppc/boot/lib/zlib.c:829:
+          Trace(("inflate:     stored block%s\n",$

ERROR:CODE_INDENT: code indent should use tabs where possible
#169: FILE: arch/ppc/boot/lib/zlib.c:837:
+          Trace(("inflate:     fixed codes block%s\n",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#169: FILE: arch/ppc/boot/lib/zlib.c:837:
+          Trace(("inflate:     fixed codes block%s\n",$

ERROR:CODE_INDENT: code indent should use tabs where possible
#178: FILE: arch/ppc/boot/lib/zlib.c:857:
+          Trace(("inflate:     dynamic codes block%s\n",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#178: FILE: arch/ppc/boot/lib/zlib.c:857:
+          Trace(("inflate:     dynamic codes block%s\n",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#187: FILE: arch/ppc/boot/lib/zlib.c:881:
+      Tracev(("inflate:       stored length %u\n", s->sub.left));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#196: FILE: arch/ppc/boot/lib/zlib.c:896:
+      Tracev(("inflate:       stored end, %lu total out\n",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#205: FILE: arch/ppc/boot/lib/zlib.c:924:
+      Tracev(("inflate:       table sizes ok\n"));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#214: FILE: arch/ppc/boot/lib/zlib.c:946:
+      Tracev(("inflate:       bits tree ok\n"));$

ERROR:CODE_INDENT: code indent should use tabs where possible
#223: FILE: arch/ppc/boot/lib/zlib.c:1009:
+        Tracev(("inflate:       trees ok\n"));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#223: FILE: arch/ppc/boot/lib/zlib.c:1009:
+        Tracev(("inflate:       trees ok\n"));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#232: FILE: arch/ppc/boot/lib/zlib.c:1032:
+      Tracev(("inflate:       codes end, %lu total out\n",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#241: FILE: arch/ppc/boot/lib/zlib.c:1075:
+  Trace(("inflate:   blocks freed\n"));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#250: FILE: arch/ppc/boot/lib/zlib.c:1237:
+  local uInt inflate_hufts;$

CHECK:CAMELCASE: Avoid CamelCase: <uInt>
#250: FILE: arch/ppc/boot/lib/zlib.c:1237:
+  local uInt inflate_hufts;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#259: FILE: arch/ppc/boot/lib/zlib.c:1694:
+    Tracev(("inflate:       codes new\n"));$

ERROR:CODE_INDENT: code indent should use tabs where possible
#268: FILE: arch/ppc/boot/lib/zlib.c:1750:
+        Tracevv((t->base >= 0x20 && t->base < 0x7f ?$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#268: FILE: arch/ppc/boot/lib/zlib.c:1750:
+        Tracevv((t->base >= 0x20 && t->base < 0x7f ?$

ERROR:CODE_INDENT: code indent should use tabs where possible
#277: FILE: arch/ppc/boot/lib/zlib.c:1771:
+        Tracevv(("inflate:         end of block\n"));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#277: FILE: arch/ppc/boot/lib/zlib.c:1771:
+        Tracevv(("inflate:         end of block\n"));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#286: FILE: arch/ppc/boot/lib/zlib.c:1786:
+      Tracevv(("inflate:         length %u\n", c->len));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#295: FILE: arch/ppc/boot/lib/zlib.c:1816:
+      Tracevv(("inflate:         distance %u\n", c->sub.copy.dist));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#304: FILE: arch/ppc/boot/lib/zlib.c:1867:
+  Tracev(("inflate:       codes free\n"));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#313: FILE: arch/ppc/boot/lib/zlib.c:2002:
+      Tracevv((t->base >= 0x20 && t->base < 0x7f ?$

ERROR:CODE_INDENT: code indent should use tabs where possible
#322: FILE: arch/ppc/boot/lib/zlib.c:2017:
+        Tracevv(("inflate:         * length %u\n", c));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#322: FILE: arch/ppc/boot/lib/zlib.c:2017:
+        Tracevv(("inflate:         * length %u\n", c));$

ERROR:CODE_INDENT: code indent should use tabs where possible
#331: FILE: arch/ppc/boot/lib/zlib.c:2031:
+            Tracevv(("inflate:         * distance %u\n", d));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#331: FILE: arch/ppc/boot/lib/zlib.c:2031:
+            Tracevv(("inflate:         * distance %u\n", d));$

ERROR:CODE_INDENT: code indent should use tabs where possible
#340: FILE: arch/ppc/boot/lib/zlib.c:2076:
+          Tracevv((t->base >= 0x20 && t->base < 0x7f ?$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#340: FILE: arch/ppc/boot/lib/zlib.c:2076:
+          Tracevv((t->base >= 0x20 && t->base < 0x7f ?$

ERROR:CODE_INDENT: code indent should use tabs where possible
#349: FILE: arch/ppc/boot/lib/zlib.c:2086:
+        Tracevv(("inflate:         * end of block\n"));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#349: FILE: arch/ppc/boot/lib/zlib.c:2086:
+        Tracevv(("inflate:         * end of block\n"));$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000265483.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 22 errors, 34 warnings, 7 checks, 279 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000265483.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
