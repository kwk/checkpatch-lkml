WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#27: 
diff -ruNp 625-crypto-api-work.patch-old/crypto/Kconfig 625-crypto-api-work.patch-new/crypto/Kconfig

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#34: FILE: crypto/Kconfig:265:
+config CRYPTO_LZF
+	tristate "LZF compression algorithm"
+	depends on CRYPTO
+	help
+	  This is the LZF algorithm. It is especially useful for Suspend2,
+	  because it achieves good compression quickly.
+

Kconfig symbols should have a help text which fully describes
it.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#48: FILE: crypto/lzf.c:1:
+/* $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#48: FILE: crypto/lzf.c:1:
+/* 

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#54: FILE: crypto/lzf.c:7:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#56: FILE: crypto/lzf.c:9:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#62: FILE: crypto/lzf.c:15:
+ * Software Foundation; either version 2 of the License, or (at your option) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#65: FILE: crypto/lzf.c:18:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#68: FILE: crypto/lzf.c:21:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#71: FILE: crypto/lzf.c:24:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#75: FILE: crypto/lzf.c:28:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#78: FILE: crypto/lzf.c:31:
+ * $

WARNING:INCLUDE_LINUX: Use #include <linux/string.h> instead of <asm/string.h>
#108: FILE: crypto/lzf.c:61:
+#include <asm/string.h>

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#111: FILE: crypto/lzf.c:64:
+	void * hbuf;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#112: FILE: crypto/lzf.c:65:
+	char * local_buffer;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#113: FILE: crypto/lzf.c:66:
+	char * page_buffer;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#148: FILE: crypto/lzf.c:101:
+#define FRST(p) (((p[0]) << 8) + p[1])

ERROR:SPACING: space required after that ',' (ctx:VxV)
#149: FILE: crypto/lzf.c:102:
+#define NEXT(v,p) (((v) << 8) + p[2])
               ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'p' may be better as '(p)' to avoid precedence issues
#149: FILE: crypto/lzf.c:102:
+#define NEXT(v,p) (((v) << 8) + p[2])

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#150: FILE: crypto/lzf.c:103:
+#define IDX(h) ((((h ^ (h << 5)) >> (3*8 - HLOG)) + h*3) & (HSIZE - 1))
                                       ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#150: FILE: crypto/lzf.c:103:
+#define IDX(h) ((((h ^ (h << 5)) >> (3*8 - HLOG)) + h*3) & (HSIZE - 1))
                                                      ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'h' - possible side-effects?
#150: FILE: crypto/lzf.c:103:
+#define IDX(h) ((((h ^ (h << 5)) >> (3*8 - HLOG)) + h*3) & (HSIZE - 1))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'h' may be better as '(h)' to avoid precedence issues
#150: FILE: crypto/lzf.c:103:
+#define IDX(h) ((((h ^ (h << 5)) >> (3*8 - HLOG)) + h*3) & (HSIZE - 1))

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#158: FILE: crypto/lzf.c:111:
+#if 0

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#160: FILE: crypto/lzf.c:113:
+# define FRST(p) (p[0] << 5) ^ p[1]

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#160: FILE: crypto/lzf.c:113:
+# define FRST(p) (p[0] << 5) ^ p[1]

ERROR:SPACING: space required after that ',' (ctx:VxV)
#161: FILE: crypto/lzf.c:114:
+# define NEXT(v,p) ((v) << 5) ^ p[2]
                ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#161: FILE: crypto/lzf.c:114:
+# define NEXT(v,p) ((v) << 5) ^ p[2]

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'p' may be better as '(p)' to avoid precedence issues
#161: FILE: crypto/lzf.c:114:
+# define NEXT(v,p) ((v) << 5) ^ p[2]

CHECK:BIT_MACRO: Prefer using the BIT macro
#165: FILE: crypto/lzf.c:118:
+#define        MAX_LIT        (1 <<  5)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#166: FILE: crypto/lzf.c:119:
+#define        MAX_OFF        (1 << 13)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#178: FILE: crypto/lzf.c:131:
+static void lzf_compress_exit(void * context)

CHECK:SPACING: No space is necessary after a cast
#180: FILE: crypto/lzf.c:133:
+	struct lzf_ctx * ctx = (struct lzf_ctx *) context;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#180: FILE: crypto/lzf.c:133:
+	struct lzf_ctx * ctx = (struct lzf_ctx *) context;

CHECK:SPACING: No space is necessary after a cast
#183: FILE: crypto/lzf.c:136:
+		free_pages((unsigned long) ctx->local_buffer, 0);

CHECK:SPACING: No space is necessary after a cast
#188: FILE: crypto/lzf.c:141:
+		free_pages((unsigned long) ctx->page_buffer, 0);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#191: FILE: crypto/lzf.c:144:
+^I$

CHECK:SPACING: No space is necessary after a cast
#202: FILE: crypto/lzf.c:155:
+	struct lzf_ctx * ctx = (struct lzf_ctx *) context;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#202: FILE: crypto/lzf.c:155:
+	struct lzf_ctx * ctx = (struct lzf_ctx *) context;

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#205: FILE: crypto/lzf.c:158:
+	ctx->hbuf = vmalloc_32((1<<HLOG)*sizeof(char *));
 	                         ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#205: FILE: crypto/lzf.c:158:
+	ctx->hbuf = vmalloc_32((1<<HLOG)*sizeof(char *));
 	                                ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#207: FILE: crypto/lzf.c:160:
+		printk(KERN_WARNING

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#209: FILE: crypto/lzf.c:162:
+			(1<<HLOG)*sizeof(char *));
 			  ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#209: FILE: crypto/lzf.c:162:
+			(1<<HLOG)*sizeof(char *));
 			         ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#212: FILE: crypto/lzf.c:165:
+^I$

CHECK:SPACING: No space is necessary after a cast
#214: FILE: crypto/lzf.c:167:
+	ctx->local_buffer = (char *) get_zeroed_page(GFP_ATOMIC);

CHECK:SPACING: No space is necessary after a cast
#222: FILE: crypto/lzf.c:175:
+	ctx->page_buffer = (char *) get_zeroed_page(GFP_ATOMIC);

CHECK:SPACING: No space is necessary after a cast
#225: FILE: crypto/lzf.c:178:
+		free_pages((unsigned long) ctx->local_buffer, 0);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#235: FILE: crypto/lzf.c:188:
+static int lzf_compress(void * context, const u8 *in_data, unsigned int in_len,

ERROR:CODE_INDENT: code indent should use tabs where possible
#236: FILE: crypto/lzf.c:189:
+^I                    u8 *out_data, unsigned int *out_len)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#236: FILE: crypto/lzf.c:189:
+static int lzf_compress(void * context, const u8 *in_data, unsigned int in_len,
+	                    u8 *out_data, unsigned int *out_len)

CHECK:SPACING: No space is necessary after a cast
#238: FILE: crypto/lzf.c:191:
+  struct lzf_ctx * ctx = (struct lzf_ctx *) context;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#238: FILE: crypto/lzf.c:191:
+  struct lzf_ctx * ctx = (struct lzf_ctx *) context;$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#238: FILE: crypto/lzf.c:191:
+  struct lzf_ctx * ctx = (struct lzf_ctx *) context;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#239: FILE: crypto/lzf.c:192:
+  const u8 **htab = ctx->hbuf;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#240: FILE: crypto/lzf.c:193:
+  const u8 **hslot;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#241: FILE: crypto/lzf.c:194:
+  const u8 *ip = in_data;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#242: FILE: crypto/lzf.c:195:
+        u8 *op = out_data;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#242: FILE: crypto/lzf.c:195:
+        u8 *op = out_data;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#243: FILE: crypto/lzf.c:196:
+  const u8 *in_end  = ip + in_len;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#244: FILE: crypto/lzf.c:197:
+        u8 *out_end = op + *out_len - 3;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#244: FILE: crypto/lzf.c:197:
+        u8 *out_end = op + *out_len - 3;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#245: FILE: crypto/lzf.c:198:
+  const u8 *ref;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#247: FILE: crypto/lzf.c:200:
+  unsigned int hval = FRST (ip);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#247: FILE: crypto/lzf.c:200:
+  unsigned int hval = FRST (ip);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#248: FILE: crypto/lzf.c:201:
+  unsigned long off;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#249: FILE: crypto/lzf.c:202:
+           int lit = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#249: FILE: crypto/lzf.c:202:
+           int lit = 0;$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#251: FILE: crypto/lzf.c:204:
+	if (ctx->first_call) {
+		ctx->first_call = 0;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#256: FILE: crypto/lzf.c:209:
+    memset (htab, 0, sizeof (htab));$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#256: FILE: crypto/lzf.c:209:
+    memset (htab, 0, sizeof (htab));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#256: FILE: crypto/lzf.c:209:
+    memset (htab, 0, sizeof (htab));

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#258: FILE: crypto/lzf.c:211:
+    for (hslot = htab; hslot < htab + HSIZE; hslot++)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 6)
#258: FILE: crypto/lzf.c:211:
+    for (hslot = htab; hslot < htab + HSIZE; hslot++)
+      *hslot++ = ip;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#259: FILE: crypto/lzf.c:212:
+      *hslot++ = ip;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#263: FILE: crypto/lzf.c:216:
+  for (;;)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#263: FILE: crypto/lzf.c:216:
+  for (;;)
+    {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#263: FILE: crypto/lzf.c:216:
+  for (;;)
+    {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#264: FILE: crypto/lzf.c:217:
+    {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#265: FILE: crypto/lzf.c:218:
+      if (ip < in_end - 2)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#265: FILE: crypto/lzf.c:218:
+      if (ip < in_end - 2)
+        {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (6, 10)
#265: FILE: crypto/lzf.c:218:
+      if (ip < in_end - 2)
+        {

ERROR:CODE_INDENT: code indent should use tabs where possible
#266: FILE: crypto/lzf.c:219:
+        {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#266: FILE: crypto/lzf.c:219:
+        {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#267: FILE: crypto/lzf.c:220:
+          hval = NEXT (hval, ip);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#267: FILE: crypto/lzf.c:220:
+          hval = NEXT (hval, ip);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#267: FILE: crypto/lzf.c:220:
+          hval = NEXT (hval, ip);

ERROR:CODE_INDENT: code indent should use tabs where possible
#268: FILE: crypto/lzf.c:221:
+          hslot = htab + IDX (hval);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#268: FILE: crypto/lzf.c:221:
+          hslot = htab + IDX (hval);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#268: FILE: crypto/lzf.c:221:
+          hslot = htab + IDX (hval);

ERROR:CODE_INDENT: code indent should use tabs where possible
#269: FILE: crypto/lzf.c:222:
+          ref = *hslot; *hslot = ip;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#269: FILE: crypto/lzf.c:222:
+          ref = *hslot; *hslot = ip;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#271: FILE: crypto/lzf.c:224:
+          if (1$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#271: FILE: crypto/lzf.c:224:
+          if (1$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#271: FILE: crypto/lzf.c:224:
+          if (1

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#271: FILE: crypto/lzf.c:224:
+          if (1
[...]
+              && *(u16 *)ref == *(u16 *)ip

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:CODE_INDENT: code indent should use tabs where possible
#273: FILE: crypto/lzf.c:226:
+              && ref < ip /* the next test will actually take care of this, but this is faster */$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#273: FILE: crypto/lzf.c:226:
+#if INIT_HTAB && !USE_MEMCPY
+              && ref < ip /* the next test will actually take care of this, but this is faster */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#273: FILE: crypto/lzf.c:226:
+              && ref < ip /* the next test will actually take care of this, but this is faster */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#275: FILE: crypto/lzf.c:228:
+              && (off = ip - ref - 1) < MAX_OFF$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#275: FILE: crypto/lzf.c:228:
+#endif
+              && (off = ip - ref - 1) < MAX_OFF

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#275: FILE: crypto/lzf.c:228:
+              && (off = ip - ref - 1) < MAX_OFF$

ERROR:CODE_INDENT: code indent should use tabs where possible
#276: FILE: crypto/lzf.c:229:
+              && ip + 4 < in_end$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#276: FILE: crypto/lzf.c:229:
+              && (off = ip - ref - 1) < MAX_OFF
+              && ip + 4 < in_end

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#276: FILE: crypto/lzf.c:229:
+              && ip + 4 < in_end$

ERROR:CODE_INDENT: code indent should use tabs where possible
#277: FILE: crypto/lzf.c:230:
+              && ref > in_data$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#277: FILE: crypto/lzf.c:230:
+              && ip + 4 < in_end
+              && ref > in_data

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#277: FILE: crypto/lzf.c:230:
+              && ref > in_data$

ERROR:CODE_INDENT: code indent should use tabs where possible
#279: FILE: crypto/lzf.c:232:
+              && ref[0] == ip[0]$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#279: FILE: crypto/lzf.c:232:
+#if STRICT_ALIGN
+              && ref[0] == ip[0]

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#279: FILE: crypto/lzf.c:232:
+              && ref[0] == ip[0]$

ERROR:CODE_INDENT: code indent should use tabs where possible
#280: FILE: crypto/lzf.c:233:
+              && ref[1] == ip[1]$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#280: FILE: crypto/lzf.c:233:
+              && ref[0] == ip[0]
+              && ref[1] == ip[1]

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#280: FILE: crypto/lzf.c:233:
+              && ref[1] == ip[1]$

ERROR:CODE_INDENT: code indent should use tabs where possible
#281: FILE: crypto/lzf.c:234:
+              && ref[2] == ip[2]$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#281: FILE: crypto/lzf.c:234:
+              && ref[1] == ip[1]
+              && ref[2] == ip[2]

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#281: FILE: crypto/lzf.c:234:
+              && ref[2] == ip[2]$

ERROR:CODE_INDENT: code indent should use tabs where possible
#283: FILE: crypto/lzf.c:236:
+              && *(u16 *)ref == *(u16 *)ip$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#283: FILE: crypto/lzf.c:236:
+#else
+              && *(u16 *)ref == *(u16 *)ip

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#283: FILE: crypto/lzf.c:236:
+              && *(u16 *)ref == *(u16 *)ip$

ERROR:CODE_INDENT: code indent should use tabs where possible
#284: FILE: crypto/lzf.c:237:
+              && ref[2] == ip[2]$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#284: FILE: crypto/lzf.c:237:
+              && *(u16 *)ref == *(u16 *)ip
+              && ref[2] == ip[2]

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#284: FILE: crypto/lzf.c:237:
+              && ref[2] == ip[2]$

ERROR:CODE_INDENT: code indent should use tabs where possible
#286: FILE: crypto/lzf.c:239:
+            )$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#286: FILE: crypto/lzf.c:239:
+            )$

ERROR:CODE_INDENT: code indent should use tabs where possible
#287: FILE: crypto/lzf.c:240:
+            {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#287: FILE: crypto/lzf.c:240:
+            {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#288: FILE: crypto/lzf.c:241:
+              /* match found at *ref++ */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#289: FILE: crypto/lzf.c:242:
+              unsigned int len = 2;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#289: FILE: crypto/lzf.c:242:
+              unsigned int len = 2;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#290: FILE: crypto/lzf.c:243:
+              unsigned int maxlen = in_end - ip - len;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#290: FILE: crypto/lzf.c:243:
+              unsigned int maxlen = in_end - ip - len;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#291: FILE: crypto/lzf.c:244:
+              maxlen = maxlen > MAX_REF ? MAX_REF : maxlen;$

WARNING:LINE_SPACING: Missing a blank line after declarations
#291: FILE: crypto/lzf.c:244:
+              unsigned int maxlen = in_end - ip - len;
+              maxlen = maxlen > MAX_REF ? MAX_REF : maxlen;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#291: FILE: crypto/lzf.c:244:
+              maxlen = maxlen > MAX_REF ? MAX_REF : maxlen;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#293: FILE: crypto/lzf.c:246:
+              do$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#293: FILE: crypto/lzf.c:246:
+              do$

ERROR:CODE_INDENT: code indent should use tabs where possible
#294: FILE: crypto/lzf.c:247:
+                len++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#294: FILE: crypto/lzf.c:247:
+                len++;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#295: FILE: crypto/lzf.c:248:
+              while (len < maxlen && ref[len] == ip[len]);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#295: FILE: crypto/lzf.c:248:
+              while (len < maxlen && ref[len] == ip[len]);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#297: FILE: crypto/lzf.c:250:
+              if (op + lit + 1 + 3 >= out_end) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#297: FILE: crypto/lzf.c:250:
+              if (op + lit + 1 + 3 >= out_end) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#299: FILE: crypto/lzf.c:252:
+                return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#299: FILE: crypto/lzf.c:252:
+                return 0;$

WARNING:TABSTOP: Statements should start on a tabstop
#300: FILE: crypto/lzf.c:253:
+	      }

ERROR:CODE_INDENT: code indent should use tabs where possible
#302: FILE: crypto/lzf.c:255:
+              if (lit)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#302: FILE: crypto/lzf.c:255:
+              if (lit)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#302: FILE: crypto/lzf.c:255:
+              if (lit)
+                {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (14, 18)
#302: FILE: crypto/lzf.c:255:
+              if (lit)
+                {

ERROR:CODE_INDENT: code indent should use tabs where possible
#303: FILE: crypto/lzf.c:256:
+                {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#303: FILE: crypto/lzf.c:256:
+                {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#304: FILE: crypto/lzf.c:257:
+                  *op++ = lit - 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#304: FILE: crypto/lzf.c:257:
+                  *op++ = lit - 1;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#305: FILE: crypto/lzf.c:258:
+                  lit = -lit;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#305: FILE: crypto/lzf.c:258:
+                  lit = -lit;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#306: FILE: crypto/lzf.c:259:
+                  do$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#306: FILE: crypto/lzf.c:259:
+                  do$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (18, 20)
#306: FILE: crypto/lzf.c:259:
+                  do
+                    *op++ = ip[lit];

ERROR:CODE_INDENT: code indent should use tabs where possible
#307: FILE: crypto/lzf.c:260:
+                    *op++ = ip[lit];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#307: FILE: crypto/lzf.c:260:
+                    *op++ = ip[lit];$

CHECK:SPACING: spaces preferred around that '*' (ctx:ExV)
#307: FILE: crypto/lzf.c:260:
+                    *op++ = ip[lit];
                     ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#308: FILE: crypto/lzf.c:261:
+                  while (++lit);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#308: FILE: crypto/lzf.c:261:
+                  while (++lit);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#309: FILE: crypto/lzf.c:262:
+                }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#309: FILE: crypto/lzf.c:262:
+                }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#311: FILE: crypto/lzf.c:264:
+              len -= 2;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#311: FILE: crypto/lzf.c:264:
+              len -= 2;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#312: FILE: crypto/lzf.c:265:
+              ip++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#312: FILE: crypto/lzf.c:265:
+              ip++;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#314: FILE: crypto/lzf.c:267:
+              if (len < 7)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#314: FILE: crypto/lzf.c:267:
+              if (len < 7)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#314: FILE: crypto/lzf.c:267:
+              if (len < 7)
+                {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (14, 18)
#314: FILE: crypto/lzf.c:267:
+              if (len < 7)
+                {

ERROR:CODE_INDENT: code indent should use tabs where possible
#315: FILE: crypto/lzf.c:268:
+                {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#315: FILE: crypto/lzf.c:268:
+                {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#316: FILE: crypto/lzf.c:269:
+                  *op++ = (off >> 8) + (len << 5);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#316: FILE: crypto/lzf.c:269:
+                  *op++ = (off >> 8) + (len << 5);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#317: FILE: crypto/lzf.c:270:
+                }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#317: FILE: crypto/lzf.c:270:
+                }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#318: FILE: crypto/lzf.c:271:
+              else$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#318: FILE: crypto/lzf.c:271:
+              else$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#318: FILE: crypto/lzf.c:271:
+              else
+                {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (14, 18)
#318: FILE: crypto/lzf.c:271:
+              else
+                {

ERROR:CODE_INDENT: code indent should use tabs where possible
#319: FILE: crypto/lzf.c:272:
+                {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#319: FILE: crypto/lzf.c:272:
+                {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#320: FILE: crypto/lzf.c:273:
+                  *op++ = (off >> 8) + (  7 << 5);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#320: FILE: crypto/lzf.c:273:
+                  *op++ = (off >> 8) + (  7 << 5);$

ERROR:SPACING: space prohibited after that open parenthesis '('
#320: FILE: crypto/lzf.c:273:
+                  *op++ = (off >> 8) + (  7 << 5);

ERROR:CODE_INDENT: code indent should use tabs where possible
#321: FILE: crypto/lzf.c:274:
+                  *op++ = len - 7;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#321: FILE: crypto/lzf.c:274:
+                  *op++ = len - 7;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#322: FILE: crypto/lzf.c:275:
+                }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#322: FILE: crypto/lzf.c:275:
+                }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#324: FILE: crypto/lzf.c:277:
+              *op++ = off;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#324: FILE: crypto/lzf.c:277:
+              *op++ = off;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#327: FILE: crypto/lzf.c:280:
+              ip += len;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#327: FILE: crypto/lzf.c:280:
+              ip += len;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#328: FILE: crypto/lzf.c:281:
+              hval = FRST (ip);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#328: FILE: crypto/lzf.c:281:
+              hval = FRST (ip);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#328: FILE: crypto/lzf.c:281:
+              hval = FRST (ip);

ERROR:CODE_INDENT: code indent should use tabs where possible
#329: FILE: crypto/lzf.c:282:
+              hval = NEXT (hval, ip);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#329: FILE: crypto/lzf.c:282:
+              hval = NEXT (hval, ip);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#329: FILE: crypto/lzf.c:282:
+              hval = NEXT (hval, ip);

ERROR:CODE_INDENT: code indent should use tabs where possible
#330: FILE: crypto/lzf.c:283:
+              htab[IDX (hval)] = ip;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#330: FILE: crypto/lzf.c:283:
+              htab[IDX (hval)] = ip;$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#330: FILE: crypto/lzf.c:283:
+              htab[IDX (hval)] = ip;

ERROR:CODE_INDENT: code indent should use tabs where possible
#331: FILE: crypto/lzf.c:284:
+              ip++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#331: FILE: crypto/lzf.c:284:
+              ip++;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#333: FILE: crypto/lzf.c:286:
+              do$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#333: FILE: crypto/lzf.c:286:
+              do$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#333: FILE: crypto/lzf.c:286:
+              do
+                {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (14, 18)
#333: FILE: crypto/lzf.c:286:
+              do
+                {

ERROR:CODE_INDENT: code indent should use tabs where possible
#334: FILE: crypto/lzf.c:287:
+                {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#334: FILE: crypto/lzf.c:287:
+                {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#335: FILE: crypto/lzf.c:288:
+                  hval = NEXT (hval, ip);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#335: FILE: crypto/lzf.c:288:
+                  hval = NEXT (hval, ip);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#335: FILE: crypto/lzf.c:288:
+                  hval = NEXT (hval, ip);

ERROR:CODE_INDENT: code indent should use tabs where possible
#336: FILE: crypto/lzf.c:289:
+                  htab[IDX (hval)] = ip;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#336: FILE: crypto/lzf.c:289:
+                  htab[IDX (hval)] = ip;$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#336: FILE: crypto/lzf.c:289:
+                  htab[IDX (hval)] = ip;

ERROR:CODE_INDENT: code indent should use tabs where possible
#337: FILE: crypto/lzf.c:290:
+                  ip++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#337: FILE: crypto/lzf.c:290:
+                  ip++;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#338: FILE: crypto/lzf.c:291:
+                }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#338: FILE: crypto/lzf.c:291:
+                }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#339: FILE: crypto/lzf.c:292:
+              while (len--);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#339: FILE: crypto/lzf.c:292:
+              while (len--);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#341: FILE: crypto/lzf.c:294:
+              continue;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#341: FILE: crypto/lzf.c:294:
+              continue;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#342: FILE: crypto/lzf.c:295:
+            }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#342: FILE: crypto/lzf.c:295:
+            }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#343: FILE: crypto/lzf.c:296:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#343: FILE: crypto/lzf.c:296:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#344: FILE: crypto/lzf.c:297:
+      else if (ip == in_end)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#345: FILE: crypto/lzf.c:298:
+        break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#345: FILE: crypto/lzf.c:298:
+        break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#348: FILE: crypto/lzf.c:301:
+      lit++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#349: FILE: crypto/lzf.c:302:
+      ip++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#351: FILE: crypto/lzf.c:304:
+      if (lit == MAX_LIT)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#351: FILE: crypto/lzf.c:304:
+      if (lit == MAX_LIT)
+        {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (6, 10)
#351: FILE: crypto/lzf.c:304:
+      if (lit == MAX_LIT)
+        {

ERROR:CODE_INDENT: code indent should use tabs where possible
#352: FILE: crypto/lzf.c:305:
+        {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#352: FILE: crypto/lzf.c:305:
+        {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#353: FILE: crypto/lzf.c:306:
+          if (op + 1 + MAX_LIT >= out_end) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#353: FILE: crypto/lzf.c:306:
+          if (op + 1 + MAX_LIT >= out_end) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 12)
#353: FILE: crypto/lzf.c:306:
+          if (op + 1 + MAX_LIT >= out_end) {
+            *out_len = PAGE_SIZE;

ERROR:CODE_INDENT: code indent should use tabs where possible
#354: FILE: crypto/lzf.c:307:
+            *out_len = PAGE_SIZE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#354: FILE: crypto/lzf.c:307:
+            *out_len = PAGE_SIZE;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#355: FILE: crypto/lzf.c:308:
+            return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#355: FILE: crypto/lzf.c:308:
+            return 0;$

WARNING:TABSTOP: Statements should start on a tabstop
#356: FILE: crypto/lzf.c:309:
+	  }

ERROR:CODE_INDENT: code indent should use tabs where possible
#358: FILE: crypto/lzf.c:311:
+          *op++ = MAX_LIT - 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#358: FILE: crypto/lzf.c:311:
+          *op++ = MAX_LIT - 1;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#360: FILE: crypto/lzf.c:313:
+          memcpy (op, ip - MAX_LIT, MAX_LIT);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#360: FILE: crypto/lzf.c:313:
+          memcpy (op, ip - MAX_LIT, MAX_LIT);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#360: FILE: crypto/lzf.c:313:
+          memcpy (op, ip - MAX_LIT, MAX_LIT);

ERROR:CODE_INDENT: code indent should use tabs where possible
#361: FILE: crypto/lzf.c:314:
+          op += MAX_LIT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#361: FILE: crypto/lzf.c:314:
+          op += MAX_LIT;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#362: FILE: crypto/lzf.c:315:
+          lit = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#362: FILE: crypto/lzf.c:315:
+          lit = 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#364: FILE: crypto/lzf.c:317:
+          lit = -lit;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#364: FILE: crypto/lzf.c:317:
+          lit = -lit;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#365: FILE: crypto/lzf.c:318:
+          do$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#365: FILE: crypto/lzf.c:318:
+          do$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 12)
#365: FILE: crypto/lzf.c:318:
+          do
+            *op++ = ip[lit];

ERROR:CODE_INDENT: code indent should use tabs where possible
#366: FILE: crypto/lzf.c:319:
+            *op++ = ip[lit];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#366: FILE: crypto/lzf.c:319:
+            *op++ = ip[lit];$

CHECK:SPACING: spaces preferred around that '*' (ctx:ExV)
#366: FILE: crypto/lzf.c:319:
+            *op++ = ip[lit];
             ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#367: FILE: crypto/lzf.c:320:
+          while (++lit);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#367: FILE: crypto/lzf.c:320:
+          while (++lit);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#369: FILE: crypto/lzf.c:322:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#369: FILE: crypto/lzf.c:322:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#370: FILE: crypto/lzf.c:323:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#372: FILE: crypto/lzf.c:325:
+  if (lit)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#372: FILE: crypto/lzf.c:325:
+  if (lit)
+    {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#372: FILE: crypto/lzf.c:325:
+  if (lit)
+    {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#373: FILE: crypto/lzf.c:326:
+    {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#374: FILE: crypto/lzf.c:327:
+      if (op + lit + 1 >= out_end) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#375: FILE: crypto/lzf.c:328:
+        *out_len = PAGE_SIZE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#375: FILE: crypto/lzf.c:328:
+        *out_len = PAGE_SIZE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#377: FILE: crypto/lzf.c:330:
+      }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#379: FILE: crypto/lzf.c:332:
+      *op++ = lit - 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#380: FILE: crypto/lzf.c:333:
+      lit = -lit;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#381: FILE: crypto/lzf.c:334:
+      do$

CHECK:SPACING: spaces preferred around that '*' (ctx:ExV)
#382: FILE: crypto/lzf.c:335:
+	*op++ = ip[lit];
 	^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#383: FILE: crypto/lzf.c:336:
+      while (++lit);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#384: FILE: crypto/lzf.c:337:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#386: FILE: crypto/lzf.c:339:
+  *out_len = op - out_data;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#387: FILE: crypto/lzf.c:340:
+  return 0;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#389: FILE: crypto/lzf.c:342:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#389: FILE: crypto/lzf.c:342:
+ $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#390: FILE: crypto/lzf.c:343:
+static int lzf_decompress(void * context, const u8 *src, unsigned int slen,

ERROR:CODE_INDENT: code indent should use tabs where possible
#391: FILE: crypto/lzf.c:344:
+                              u8 *dst, unsigned int *dlen)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#391: FILE: crypto/lzf.c:344:
+static int lzf_decompress(void * context, const u8 *src, unsigned int slen,
+                              u8 *dst, unsigned int *dlen)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#391: FILE: crypto/lzf.c:344:
+                              u8 *dst, unsigned int *dlen)$

CHECK:SPACING: No space is necessary after a cast
#393: FILE: crypto/lzf.c:346:
+	struct lzf_ctx * ctx = (struct lzf_ctx *) context;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#393: FILE: crypto/lzf.c:346:
+	struct lzf_ctx * ctx = (struct lzf_ctx *) context;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#394: FILE: crypto/lzf.c:347:
+  u8 const *ip = src;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#395: FILE: crypto/lzf.c:348:
+  u8       *op = dst;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#396: FILE: crypto/lzf.c:349:
+  u8 const *const in_end  = ip + slen;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#397: FILE: crypto/lzf.c:350:
+  u8       *const out_end = op + *dlen;$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#399: FILE: crypto/lzf.c:352:
+	if (ctx->first_call) {
+		ctx->first_call = 0;
+	}

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#402: FILE: crypto/lzf.c:355:
+  do$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#402: FILE: crypto/lzf.c:355:
+  do
+    {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#402: FILE: crypto/lzf.c:355:
+  do
+    {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#403: FILE: crypto/lzf.c:356:
+    {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#404: FILE: crypto/lzf.c:357:
+      unsigned int ctrl = *ip++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#406: FILE: crypto/lzf.c:359:
+      if (ctrl < (1 << 5)) /* literal run */$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#406: FILE: crypto/lzf.c:359:
+      if (ctrl < (1 << 5)) /* literal run */
+        {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (6, 10)
#406: FILE: crypto/lzf.c:359:
+      if (ctrl < (1 << 5)) /* literal run */
+        {

ERROR:CODE_INDENT: code indent should use tabs where possible
#407: FILE: crypto/lzf.c:360:
+        {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#407: FILE: crypto/lzf.c:360:
+        {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#408: FILE: crypto/lzf.c:361:
+          ctrl++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#408: FILE: crypto/lzf.c:361:
+          ctrl++;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#410: FILE: crypto/lzf.c:363:
+          if (op + ctrl > out_end) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#410: FILE: crypto/lzf.c:363:
+          if (op + ctrl > out_end) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 12)
#410: FILE: crypto/lzf.c:363:
+          if (op + ctrl > out_end) {
+            *dlen = PAGE_SIZE;

ERROR:CODE_INDENT: code indent should use tabs where possible
#411: FILE: crypto/lzf.c:364:
+            *dlen = PAGE_SIZE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#411: FILE: crypto/lzf.c:364:
+            *dlen = PAGE_SIZE;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#412: FILE: crypto/lzf.c:365:
+            return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#412: FILE: crypto/lzf.c:365:
+            return 0;$

WARNING:TABSTOP: Statements should start on a tabstop
#413: FILE: crypto/lzf.c:366:
+	  }

ERROR:CODE_INDENT: code indent should use tabs where possible
#416: FILE: crypto/lzf.c:369:
+          memcpy (op, ip, ctrl);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#416: FILE: crypto/lzf.c:369:
+          memcpy (op, ip, ctrl);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#416: FILE: crypto/lzf.c:369:
+          memcpy (op, ip, ctrl);

ERROR:CODE_INDENT: code indent should use tabs where possible
#417: FILE: crypto/lzf.c:370:
+          op += ctrl;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#417: FILE: crypto/lzf.c:370:
+          op += ctrl;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#418: FILE: crypto/lzf.c:371:
+          ip += ctrl;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#418: FILE: crypto/lzf.c:371:
+          ip += ctrl;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#420: FILE: crypto/lzf.c:373:
+          do$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#420: FILE: crypto/lzf.c:373:
+          do$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 12)
#420: FILE: crypto/lzf.c:373:
+          do
+            *op++ = *ip++;

ERROR:CODE_INDENT: code indent should use tabs where possible
#421: FILE: crypto/lzf.c:374:
+            *op++ = *ip++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#421: FILE: crypto/lzf.c:374:
+            *op++ = *ip++;$

CHECK:SPACING: spaces preferred around that '*' (ctx:ExV)
#421: FILE: crypto/lzf.c:374:
+            *op++ = *ip++;
             ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#422: FILE: crypto/lzf.c:375:
+          while (--ctrl);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#422: FILE: crypto/lzf.c:375:
+          while (--ctrl);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#424: FILE: crypto/lzf.c:377:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#424: FILE: crypto/lzf.c:377:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#425: FILE: crypto/lzf.c:378:
+      else /* back reference */$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#425: FILE: crypto/lzf.c:378:
+      else /* back reference */
+        {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (6, 10)
#425: FILE: crypto/lzf.c:378:
+      else /* back reference */
+        {

ERROR:CODE_INDENT: code indent should use tabs where possible
#426: FILE: crypto/lzf.c:379:
+        {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#426: FILE: crypto/lzf.c:379:
+        {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#427: FILE: crypto/lzf.c:380:
+          unsigned int len = ctrl >> 5;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#427: FILE: crypto/lzf.c:380:
+          unsigned int len = ctrl >> 5;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#429: FILE: crypto/lzf.c:382:
+          u8 *ref = op - ((ctrl & 0x1f) << 8) - 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#429: FILE: crypto/lzf.c:382:
+          u8 *ref = op - ((ctrl & 0x1f) << 8) - 1;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#431: FILE: crypto/lzf.c:384:
+          if (len == 7)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#431: FILE: crypto/lzf.c:384:
+          if (len == 7)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 12)
#431: FILE: crypto/lzf.c:384:
+          if (len == 7)
+            len += *ip++;

ERROR:CODE_INDENT: code indent should use tabs where possible
#432: FILE: crypto/lzf.c:385:
+            len += *ip++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#432: FILE: crypto/lzf.c:385:
+            len += *ip++;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#433: FILE: crypto/lzf.c:386:
+          $

ERROR:CODE_INDENT: code indent should use tabs where possible
#433: FILE: crypto/lzf.c:386:
+          $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#433: FILE: crypto/lzf.c:386:
+          $

ERROR:CODE_INDENT: code indent should use tabs where possible
#434: FILE: crypto/lzf.c:387:
+          ref -= *ip++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#434: FILE: crypto/lzf.c:387:
+          ref -= *ip++;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#436: FILE: crypto/lzf.c:389:
+          if (op + len + 2 > out_end) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#436: FILE: crypto/lzf.c:389:
+          if (op + len + 2 > out_end) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 12)
#436: FILE: crypto/lzf.c:389:
+          if (op + len + 2 > out_end) {
+            *dlen = PAGE_SIZE;

ERROR:CODE_INDENT: code indent should use tabs where possible
#437: FILE: crypto/lzf.c:390:
+            *dlen = PAGE_SIZE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#437: FILE: crypto/lzf.c:390:
+            *dlen = PAGE_SIZE;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#438: FILE: crypto/lzf.c:391:
+            return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#438: FILE: crypto/lzf.c:391:
+            return 0;$

WARNING:TABSTOP: Statements should start on a tabstop
#439: FILE: crypto/lzf.c:392:
+	  }

ERROR:CODE_INDENT: code indent should use tabs where possible
#441: FILE: crypto/lzf.c:394:
+          if (ref < (u8 *)dst) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#441: FILE: crypto/lzf.c:394:
+          if (ref < (u8 *)dst) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 12)
#441: FILE: crypto/lzf.c:394:
+          if (ref < (u8 *)dst) {
+            *dlen = PAGE_SIZE;

ERROR:CODE_INDENT: code indent should use tabs where possible
#442: FILE: crypto/lzf.c:395:
+            *dlen = PAGE_SIZE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#442: FILE: crypto/lzf.c:395:
+            *dlen = PAGE_SIZE;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#443: FILE: crypto/lzf.c:396:
+            return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#443: FILE: crypto/lzf.c:396:
+            return 0;$

WARNING:TABSTOP: Statements should start on a tabstop
#444: FILE: crypto/lzf.c:397:
+	  }

ERROR:CODE_INDENT: code indent should use tabs where possible
#446: FILE: crypto/lzf.c:399:
+          *op++ = *ref++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#446: FILE: crypto/lzf.c:399:
+          *op++ = *ref++;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#447: FILE: crypto/lzf.c:400:
+          *op++ = *ref++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#447: FILE: crypto/lzf.c:400:
+          *op++ = *ref++;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#449: FILE: crypto/lzf.c:402:
+          do$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#449: FILE: crypto/lzf.c:402:
+          do$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 12)
#449: FILE: crypto/lzf.c:402:
+          do
+            *op++ = *ref++;

ERROR:CODE_INDENT: code indent should use tabs where possible
#450: FILE: crypto/lzf.c:403:
+            *op++ = *ref++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#450: FILE: crypto/lzf.c:403:
+            *op++ = *ref++;$

CHECK:SPACING: spaces preferred around that '*' (ctx:ExV)
#450: FILE: crypto/lzf.c:403:
+            *op++ = *ref++;
             ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#451: FILE: crypto/lzf.c:404:
+          while (--len);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#451: FILE: crypto/lzf.c:404:
+          while (--len);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#452: FILE: crypto/lzf.c:405:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#452: FILE: crypto/lzf.c:405:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#453: FILE: crypto/lzf.c:406:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#454: FILE: crypto/lzf.c:407:
+  while (op < out_end && ip < in_end);$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#454: FILE: crypto/lzf.c:407:
+  while (op < out_end && ip < in_end);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#456: FILE: crypto/lzf.c:409:
+  *dlen = op - (u8 *)dst;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#457: FILE: crypto/lzf.c:410:
+  return 0;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#469: FILE: crypto/lzf.c:422:
+^I.coa_compress ^I^I= lzf_compress,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#470: FILE: crypto/lzf.c:423:
+^I.coa_decompress  ^I= lzf_decompress } }$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000170362.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 153 errors, 202 warnings, 39 checks, 461 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000170362.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
