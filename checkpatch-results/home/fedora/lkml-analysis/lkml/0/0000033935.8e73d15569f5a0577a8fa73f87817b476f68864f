WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#50: 
- gcc-3.4 support. (it had some issues with the inline assembly "m" operands).

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#462: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#467: FILE: include/asm-alpha/marker.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#472: FILE: include/asm-alpha/marker.h:6:
+ * $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#486: FILE: include/asm-arm/marker.h:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#491: FILE: include/asm-arm/marker.h:6:
+ * $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#505: FILE: include/asm-arm26/marker.h:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#510: FILE: include/asm-arm26/marker.h:6:
+ * $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#524: FILE: include/asm-cris/marker.h:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#529: FILE: include/asm-cris/marker.h:6:
+ * $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#543: FILE: include/asm-frv/marker.h:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#548: FILE: include/asm-frv/marker.h:6:
+ * $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#562: FILE: include/asm-generic/marker.h:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#566: FILE: include/asm-generic/marker.h:5:
+ * $

WARNING:LINE_SPACING: Missing a blank line after declarations
#575: FILE: include/asm-generic/marker.h:14:
+	const char *name;
+	marker_probe_func **call;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#577: FILE: include/asm-generic/marker.h:16:
+} __attribute__((packed));

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#581: FILE: include/asm-generic/marker.h:20:
+	volatile char *enable;

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#582: FILE: include/asm-generic/marker.h:21:
+} __attribute__((packed));

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'format' - possible side-effects?
#584: FILE: include/asm-generic/marker.h:23:
+#define MARK(name, format, args...) \
+	do { \
+		static marker_probe_func *__mark_call_##name = \
+					__mark_empty_function; \
+		volatile static char __marker_enable_##name = 0; \
+		static const struct __mark_marker_c __mark_c_##name \
+			__attribute__((section(".markers.c"))) = \
+			{ #name, &__mark_call_##name, format } ; \
+		static const struct __mark_marker __mark_##name \
+			__attribute__((section(".markers"), unused)) = \
+			{ &__mark_c_##name, &__marker_enable_##name } ; \
+		if (unlikely(__marker_enable_##name)) { \
+			preempt_disable(); \
+			(*__mark_call_##name)(format, ## args); \
+			preempt_enable_no_resched(); \
+		} \
+	} while(0)

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#588: FILE: include/asm-generic/marker.h:27:
+		volatile static char __marker_enable_##name = 0; \

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#588: FILE: include/asm-generic/marker.h:27:
+		volatile static char __marker_enable_##name = 0; \

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".markers.c") over __attribute__((section(".markers.c")))
#590: FILE: include/asm-generic/marker.h:29:
+			__attribute__((section(".markers.c"))) = \

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".markers") over __attribute__((section(".markers")))
#593: FILE: include/asm-generic/marker.h:32:
+			__attribute__((section(".markers"), unused)) = \

ERROR:SPACING: space required before the open parenthesis '('
#600: FILE: include/asm-generic/marker.h:39:
+	} while(0)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#602: FILE: include/asm-generic/marker.h:41:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#629: FILE: include/asm-h8300/marker.h:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#634: FILE: include/asm-h8300/marker.h:6:
+ * $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#648: FILE: include/asm-i386/marker.h:1:
+/*

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#665: FILE: include/asm-i386/marker.h:18:
+} __attribute__((packed));

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#669: FILE: include/asm-i386/marker.h:22:
+	volatile char *enable;

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#670: FILE: include/asm-i386/marker.h:23:
+} __attribute__((packed));

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'format' - possible side-effects?
#672: FILE: include/asm-i386/marker.h:25:
+#define MARK(name, format, args...) \
+	do { \
+		static marker_probe_func *__mark_call_##name = \
+					__mark_empty_function; \
+		static const struct __mark_marker_c __mark_c_##name \
+			asm ("__mark_c_"#name) \
+			__attribute__((section(".markers.c"), unused)) = \
+			{ #name, &__mark_call_##name, format } ; \
+		char condition; \
+		asm volatile(	".section .markers, \"a\";\n\t" \
+					".long __mark_c_"#name", 0f;\n\t" \
+					".previous;\n\t" \
+					".align 2\n\t" \
+					"0:\n\t" \
+					"movb $0,%0;\n\t" \
+				: "=r" (condition) : ); \
+		__mark_check_format(format, ## args); \
+		if (unlikely(condition)) { \
+			preempt_disable(); \
+			(*__mark_call_##name)(format, ## args); \
+			preempt_enable_no_resched(); \
+		} \
+	} while(0)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".markers.c") over __attribute__((section(".markers.c")))
#678: FILE: include/asm-i386/marker.h:31:
+			__attribute__((section(".markers.c"), unused)) = \

ERROR:SPACING: space prohibited after that open parenthesis '('
#681: FILE: include/asm-i386/marker.h:34:
+		asm volatile(	".section .markers, \"a\";\n\t" \

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#682: FILE: include/asm-i386/marker.h:35:
+					".long __mark_c_"#name", 0f;\n\t" \

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

ERROR:SPACING: space required before the open parenthesis '('
#694: FILE: include/asm-i386/marker.h:47:
+	} while(0)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#697: FILE: include/asm-i386/marker.h:50:
+ * bytes. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#707: FILE: include/asm-ia64/marker.h:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#712: FILE: include/asm-ia64/marker.h:6:
+ * $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#726: FILE: include/asm-m32r/marker.h:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#731: FILE: include/asm-m32r/marker.h:6:
+ * $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#745: FILE: include/asm-m68k/marker.h:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#750: FILE: include/asm-m68k/marker.h:6:
+ * $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#764: FILE: include/asm-m68knommu/marker.h:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#769: FILE: include/asm-m68knommu/marker.h:6:
+ * $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#783: FILE: include/asm-mips/marker.h:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#788: FILE: include/asm-mips/marker.h:6:
+ * $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#802: FILE: include/asm-parisc/marker.h:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#807: FILE: include/asm-parisc/marker.h:6:
+ * $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#821: FILE: include/asm-powerpc/marker.h:1:
+/*

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#841: FILE: include/asm-powerpc/marker.h:21:
+} __attribute__((packed));

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#845: FILE: include/asm-powerpc/marker.h:25:
+	volatile short *enable;

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#846: FILE: include/asm-powerpc/marker.h:26:
+} __attribute__((packed));

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'format' - possible side-effects?
#848: FILE: include/asm-powerpc/marker.h:28:
+#define MARK(name, format, args...) \
+	do { \
+		static marker_probe_func *__mark_call_##name = \
+					__mark_empty_function; \
+		static const struct __mark_marker_c __mark_c_##name \
+			asm ("__mark_c_"#name) \
+			__attribute__((section(".markers.c"), unused)) = \
+			{ #name, &__mark_call_##name, format } ; \
+		char condition; \
+		asm volatile(	".section .markers, \"a\";\n\t" \
+					PPC_LONG "__mark_c_"#name", 0f;\n\t" \
+					".previous;\n\t" \
+					".align 4\n\t" \
+					"0:\n\t" \
+					"li %0,0;\n\t" \
+				: "=r" (condition) : ); \
+		__mark_check_format(format, ## args); \
+		if (unlikely(condition)) { \
+			preempt_disable(); \
+			(*__mark_call_##name)(format, ## args); \
+			preempt_enable_no_resched(); \
+		} \
+	} while(0)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".markers.c") over __attribute__((section(".markers.c")))
#854: FILE: include/asm-powerpc/marker.h:34:
+			__attribute__((section(".markers.c"), unused)) = \

ERROR:SPACING: space prohibited after that open parenthesis '('
#857: FILE: include/asm-powerpc/marker.h:37:
+		asm volatile(	".section .markers, \"a\";\n\t" \

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#858: FILE: include/asm-powerpc/marker.h:38:
+					PPC_LONG "__mark_c_"#name", 0f;\n\t" \

ERROR:SPACING: space required before the open parenthesis '('
#870: FILE: include/asm-powerpc/marker.h:50:
+	} while(0)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#872: FILE: include/asm-powerpc/marker.h:52:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#874: FILE: include/asm-powerpc/marker.h:54:
+ * of the li mnemonic), in bytes. */

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#884: FILE: include/asm-ppc/marker.h:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#889: FILE: include/asm-ppc/marker.h:6:
+ * $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#903: FILE: include/asm-ppc64/marker.h:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#908: FILE: include/asm-ppc64/marker.h:6:
+ * $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#922: FILE: include/asm-s390/marker.h:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#927: FILE: include/asm-s390/marker.h:6:
+ * $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#941: FILE: include/asm-sh/marker.h:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#946: FILE: include/asm-sh/marker.h:6:
+ * $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#960: FILE: include/asm-sh64/marker.h:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#965: FILE: include/asm-sh64/marker.h:6:
+ * $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#979: FILE: include/asm-sparc/marker.h:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#984: FILE: include/asm-sparc/marker.h:6:
+ * $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#998: FILE: include/asm-sparc64/marker.h:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1003: FILE: include/asm-sparc64/marker.h:6:
+ * $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1017: FILE: include/asm-um/marker.h:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1022: FILE: include/asm-um/marker.h:6:
+ * $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1036: FILE: include/asm-v850/marker.h:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1041: FILE: include/asm-v850/marker.h:6:
+ * $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1055: FILE: include/asm-x86_64/marker.h:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1060: FILE: include/asm-x86_64/marker.h:6:
+ * $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1074: FILE: include/asm-xtensa/marker.h:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1079: FILE: include/asm-xtensa/marker.h:6:
+ * $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1093: FILE: include/linux/marker.h:1:
+#ifndef _LINUX_MARKER_H

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(1, 2) over __attribute__((format(printf, 1, 2)))
#1144: FILE: include/linux/marker.h:52:
+static inline __attribute__ ((format (printf, 1, 2)))

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1150: FILE: include/linux/marker.h:58:
+extern int marker_set_probe(const char *name, const char *format,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1151: FILE: include/linux/marker.h:59:
+extern int marker_set_probe(const char *name, const char *format,
+				marker_probe_func *probe);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1153: FILE: include/linux/marker.h:61:
+extern int marker_remove_probe(marker_probe_func *probe);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1154: FILE: include/linux/marker.h:62:
+extern int marker_list_probe(marker_probe_func *probe);

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#1179: FILE: kernel/Kconfig.marker:3:
+config MARKERS
+	bool "Activate markers"
+	select MODULES
+	default n
+	help
+	  Place an empty function call at each marker site. Can be
+	  dynamically changed for a probe function.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#1187: FILE: kernel/Kconfig.marker:11:
+config MARKERS_DISABLE_OPTIMIZATION
+	bool "Disable architecture specific marker optimization"
+	depends EMBEDDED
+	default n
+	help
+	  Disable code replacement jump optimisations. Especially useful if your
+	  code is in a read-only rom/flash.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1202: FILE: kernel/module.c:126:
+extern const struct __mark_marker __start___markers[];

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1203: FILE: kernel/module.c:127:
+extern const struct __mark_marker __stop___markers[];

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1217: FILE: kernel/module.c:247:
+#define MARK_ENABLE_OFFSET(a) \
+	(typeof(a))((char*)a+MARK_ENABLE_IMMEDIATE_OFFSET)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'a' may be better as '(a)' to avoid precedence issues
#1217: FILE: kernel/module.c:247:
+#define MARK_ENABLE_OFFSET(a) \
+	(typeof(a))((char*)a+MARK_ENABLE_IMMEDIATE_OFFSET)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1218: FILE: kernel/module.c:248:
+	(typeof(a))((char*)a+MARK_ENABLE_IMMEDIATE_OFFSET)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1218: FILE: kernel/module.c:248:
+	(typeof(a))((char*)a+MARK_ENABLE_IMMEDIATE_OFFSET)
 	                    ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1220: FILE: kernel/module.c:250:
+static int marker_set_probe_range(const char *name, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1221: FILE: kernel/module.c:251:
+static int marker_set_probe_range(const char *name, 
+	const char *format,

ERROR:SPACING: space required before the open parenthesis '('
#1229: FILE: kernel/module.c:259:
+	for(iter = begin; iter < end; iter++) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1232: FILE: kernel/module.c:262:
+			if (format
+				&& strcmp(format, iter->cmark->format) != 0) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#1233: FILE: kernel/module.c:263:
+				printk(KERN_NOTICE

WARNING:SPLIT_STRING: quoted string split across lines
#1235: FILE: kernel/module.c:265:
+					"Format mismatch for probe %s "
+					"(%s), marker (%s)\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#1253: FILE: kernel/module.c:283:
+						printk(KERN_NOTICE

WARNING:SPLIT_STRING: quoted string split across lines
#1255: FILE: kernel/module.c:285:
+							"Marker %s busy, "
+							"probe %p already "

WARNING:SPLIT_STRING: quoted string split across lines
#1256: FILE: kernel/module.c:286:
+							"probe %p already "
+							"installed\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1275: FILE: kernel/module.c:305:
+static int marker_remove_probe_range(marker_probe_func *probe,
+	const struct __mark_marker *begin,

ERROR:SPACING: space required before the open parenthesis '('
#1281: FILE: kernel/module.c:311:
+	for(iter = begin; iter < end; iter++) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1292: FILE: kernel/module.c:322:
+static int marker_list_probe_range(marker_probe_func *probe,
+	const struct __mark_marker *begin,

ERROR:SPACING: space required before the open parenthesis '('
#1298: FILE: kernel/module.c:328:
+	for(iter = begin; iter < end; iter++) {

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1300: FILE: kernel/module.c:330:
+			if (probe != *iter->cmark->call) continue;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1301: FILE: kernel/module.c:331:
+		printk("name %s \n", iter->cmark->name);

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1301: FILE: kernel/module.c:331:
+		printk("name %s \n", iter->cmark->name);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1302: FILE: kernel/module.c:332:
+		printk("  enable %u ", *MARK_ENABLE_OFFSET(iter->enable));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1303: FILE: kernel/module.c:333:
+		printk("  func 0x%p format \"%s\"\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1304: FILE: kernel/module.c:334:
+		printk("  func 0x%p format \"%s\"\n",
+			*iter->cmark->call, iter->cmark->format);

WARNING:REPEATED_WORD: Possible repeated word: 'to'
#1309: FILE: kernel/module.c:339:
+/* markers use the modlist_lock to to synchronise */

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1309: FILE: kernel/module.c:339:
+}
+/* markers use the modlist_lock to to synchronise */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1311: FILE: kernel/module.c:341:
+int marker_set_probe(const char *name, const char *format,
+				marker_probe_func *probe)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1321: FILE: kernel/module.c:351:
+^I/* Markers in modules. */ $

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1324: FILE: kernel/module.c:354:
+				mod->markers, mod->markers+mod->num_markers);
 				                          ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1341: FILE: kernel/module.c:371:
+^I/* Markers in modules. */ $

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1344: FILE: kernel/module.c:374:
+				mod->markers, mod->markers+mod->num_markers);
 				                          ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1359: FILE: kernel/module.c:389:
+	printk("Listing kernel markers\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1362: FILE: kernel/module.c:392:
+^I/* Markers in modules. */ $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1363: FILE: kernel/module.c:393:
+	printk("Listing module markers\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1365: FILE: kernel/module.c:395:
+		printk("Listing markers for module %s\n", mod->name);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1367: FILE: kernel/module.c:397:
+				mod->markers, mod->markers+mod->num_markers);
 				                          ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000033935.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 40 errors, 64 warnings, 23 checks, 1050 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000033935.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
