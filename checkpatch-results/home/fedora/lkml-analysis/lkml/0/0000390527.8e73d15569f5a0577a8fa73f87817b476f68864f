WARNING:TYPO_SPELLING: 'Acutally' may be misspelled - perhaps 'Actually'?
#40: 
very small embedded systems. Acutally I suspect the inode could be made
                             ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#61: 
Also I replaced the max_dentries rcu race break hack with a fixed number now.

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 0)
#72: FILE: include/linux/list.h:319:
 	for (pos = (head)->next, n = pos->next; pos != (head); \
[...]
+struct hlist_head { 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#75: FILE: include/linux/list.h:322:
+/* $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#76: FILE: include/linux/list.h:323:
+ * Double linked lists with a single pointer list head. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#77: FILE: include/linux/list.h:324:
+ * Mostly useful for hash tables where the two pointer list head is $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#80: FILE: include/linux/list.h:327:
+ */ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#82: FILE: include/linux/list.h:329:
+struct hlist_head { $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#83: FILE: include/linux/list.h:330:
+^Istruct hlist_node *first; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#84: FILE: include/linux/list.h:331:
+}; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#86: FILE: include/linux/list.h:333:
+struct hlist_node { $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#87: FILE: include/linux/list.h:334:
+^Istruct hlist_node *next, **pprev; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#88: FILE: include/linux/list.h:335:
+}; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#90: FILE: include/linux/list.h:337:
+#define HLIST_HEAD_INIT { first: NULL } $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#92: FILE: include/linux/list.h:339:
+#define INIT_HLIST_HEAD(ptr) ((ptr)->first = NULL) $

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#93: FILE: include/linux/list.h:340:
+#define INIT_HLIST_NODE(ptr) ((ptr)->next = NULL, (ptr)->pprev = NULL)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#96: FILE: include/linux/list.h:343:
+static __inline__ int hnode_empty(struct hlist_node *h) $

WARNING:INLINE: plain inline is preferred over __inline__
#96: FILE: include/linux/list.h:343:
+static __inline__ int hnode_empty(struct hlist_node *h) 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#97: FILE: include/linux/list.h:344:
+{ $

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#98: FILE: include/linux/list.h:345:
+	return h->pprev==0;
 	               ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#99: FILE: include/linux/list.h:346:
+} $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#101: FILE: include/linux/list.h:348:
+static __inline__ int hlist_empty(struct hlist_head *h) $

WARNING:INLINE: plain inline is preferred over __inline__
#101: FILE: include/linux/list.h:348:
+static __inline__ int hlist_empty(struct hlist_head *h) 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#102: FILE: include/linux/list.h:349:
+{ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#104: FILE: include/linux/list.h:351:
+} $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#106: FILE: include/linux/list.h:353:
+static __inline__ void hlist_del(struct hlist_node *n) $

WARNING:INLINE: plain inline is preferred over __inline__
#106: FILE: include/linux/list.h:353:
+static __inline__ void hlist_del(struct hlist_node *n) 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#109: FILE: include/linux/list.h:356:
+^Iif (!n->pprev) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#110: FILE: include/linux/list.h:357:
+^I^Ireturn; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#111: FILE: include/linux/list.h:358:
+^I*(n->pprev) = n->next;  $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around n->pprev
#111: FILE: include/linux/list.h:358:
+	*(n->pprev) = n->next;  

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:TRAILING_WHITESPACE: trailing whitespace
#112: FILE: include/linux/list.h:359:
+^Iif (n->next) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#114: FILE: include/linux/list.h:361:
+}  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#118: FILE: include/linux/list.h:365:
+static __inline__ void hlist_del_init(struct hlist_node *n) $

WARNING:INLINE: plain inline is preferred over __inline__
#118: FILE: include/linux/list.h:365:
+static __inline__ void hlist_del_init(struct hlist_node *n) 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#121: FILE: include/linux/list.h:368:
+^Iif (!n->pprev) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#122: FILE: include/linux/list.h:369:
+^I^Ireturn; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#123: FILE: include/linux/list.h:370:
+^I*(n->pprev) = n->next;  $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around n->pprev
#123: FILE: include/linux/list.h:370:
+	*(n->pprev) = n->next;  

ERROR:TRAILING_WHITESPACE: trailing whitespace
#124: FILE: include/linux/list.h:371:
+^Iif (n->next) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#127: FILE: include/linux/list.h:374:
+}  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#129: FILE: include/linux/list.h:376:
+static __inline__ void hlist_add_head(struct hlist_node *n, struct hlist_head *h) $

WARNING:INLINE: plain inline is preferred over __inline__
#129: FILE: include/linux/list.h:376:
+static __inline__ void hlist_add_head(struct hlist_node *n, struct hlist_head *h) 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#130: FILE: include/linux/list.h:377:
+{ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#131: FILE: include/linux/list.h:378:
+^In->next = h->first; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#132: FILE: include/linux/list.h:379:
+^Iif (h->first) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#134: FILE: include/linux/list.h:381:
+^Ih->first = n; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#135: FILE: include/linux/list.h:382:
+^In->pprev = &h->first; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#136: FILE: include/linux/list.h:383:
+} $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#138: FILE: include/linux/list.h:385:
+static __inline__ void hlist_add_head_rcu(struct hlist_node *n, struct hlist_head *h) $

WARNING:INLINE: plain inline is preferred over __inline__
#138: FILE: include/linux/list.h:385:
+static __inline__ void hlist_add_head_rcu(struct hlist_node *n, struct hlist_head *h) 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#139: FILE: include/linux/list.h:386:
+{ $

WARNING:MEMORY_BARRIER: memory barrier without comment
#141: FILE: include/linux/list.h:388:
+	wmb();

ERROR:TRAILING_WHITESPACE: trailing whitespace
#142: FILE: include/linux/list.h:389:
+^Iif (h->first) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#144: FILE: include/linux/list.h:391:
+^Ih->first = n; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#145: FILE: include/linux/list.h:392:
+^In->pprev = &h->first; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#146: FILE: include/linux/list.h:393:
+} $

WARNING:INLINE: plain inline is preferred over __inline__
#149: FILE: include/linux/list.h:396:
+static __inline__ void hlist_add_before(struct hlist_node *n, struct hlist_node *next)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#152: FILE: include/linux/list.h:399:
+^In->next = next; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#153: FILE: include/linux/list.h:400:
+^Inext->pprev = &n->next; $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around n->pprev
#154: FILE: include/linux/list.h:401:
+	*(n->pprev) = n;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#157: FILE: include/linux/list.h:404:
+#define hlist_entry(ptr, type, member) container_of(ptr,type,member)
                                                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#157: FILE: include/linux/list.h:404:
+#define hlist_entry(ptr, type, member) container_of(ptr,type,member)
                                                             ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pos' - possible side-effects?
#160: FILE: include/linux/list.h:407:
+#define hlist_for_each(pos, head) \
+	for (pos = (head)->first; pos; \
+	     pos = pos->next) 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#162: FILE: include/linux/list.h:409:
+^I     pos = pos->next) $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#175: FILE: include/linux/dcache.h:83:
+	struct hlist_head * d_bucket;	/* lookup hash bucket */

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#194: FILE: include/linux/dcache.h:201:
+extern void shrink_dcache_anon(struct hlist_head *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct hlist_head *' should also have an identifier name
#194: FILE: include/linux/dcache.h:201:
+extern void shrink_dcache_anon(struct hlist_head *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#278: FILE: fs/inode.c:52:
+#define I_NUMBUCKETS	(8*1024)
                     	  ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#279: FILE: fs/inode.c:53:
+#define I_HASHBITS^I12^I/* = log2(I_NUMBUCKETS) */ $

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#280: FILE: fs/inode.c:54:
+#define I_HASHMASK	(I_NUMBUCKETS-1)
                   	             ^

WARNING:LONG_LINE: line length of 131 exceeds 100 columns
#327: FILE: fs/inode.c:461:
+static struct inode * find_inode(struct super_block * sb, struct hlist_head *head, int (*test)(struct inode *, void *), void *data)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#327: FILE: fs/inode.c:461:
+static struct inode * find_inode(struct super_block * sb, struct hlist_head *head, int (*test)(struct inode *, void *), void *data)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#327: FILE: fs/inode.c:461:
+static struct inode * find_inode(struct super_block * sb, struct hlist_head *head, int (*test)(struct inode *, void *), void *data)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#340: FILE: fs/inode.c:466:
+^Ihlist_for_each (node, head) { $

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#340: FILE: fs/inode.c:466:
+	hlist_for_each (node, head) { 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#350: FILE: fs/inode.c:474:
+^I}^I$

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#359: FILE: fs/inode.c:482:
+static struct inode * find_inode_fast(struct super_block * sb, struct hlist_head *head, unsigned long ino)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#359: FILE: fs/inode.c:482:
+static struct inode * find_inode_fast(struct super_block * sb, struct hlist_head *head, unsigned long ino)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#359: FILE: fs/inode.c:482:
+static struct inode * find_inode_fast(struct super_block * sb, struct hlist_head *head, unsigned long ino)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#372: FILE: fs/inode.c:487:
+	hlist_for_each (node, head) {

WARNING:LONG_LINE: line length of 169 exceeds 100 columns
#391: FILE: fs/inode.c:546:
+static struct inode * get_new_inode(struct super_block *sb, struct hlist_head *head, int (*test)(struct inode *, void *), int (*set)(struct inode *, void *), void *data)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#391: FILE: fs/inode.c:546:
+static struct inode * get_new_inode(struct super_block *sb, struct hlist_head *head, int (*test)(struct inode *, void *), int (*set)(struct inode *, void *), void *data)

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#409: FILE: fs/inode.c:596:
+static struct inode * get_new_inode_fast(struct super_block *sb, struct hlist_head *head, unsigned long ino)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#409: FILE: fs/inode.c:596:
+static struct inode * get_new_inode_fast(struct super_block *sb, struct hlist_head *head, unsigned long ino)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#427: FILE: fs/inode.c:663:
+	struct hlist_head * head;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#572: FILE: fs/inode.c:1218:
+^I^I__get_free_pages(GFP_ATOMIC, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#573: FILE: fs/inode.c:1219:
+^I^I     get_order(I_NUMBUCKETS*sizeof(struct hlist_head))); $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#573: FILE: fs/inode.c:1219:
+		__get_free_pages(GFP_ATOMIC, 
+		     get_order(I_NUMBUCKETS*sizeof(struct hlist_head))); 

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#573: FILE: fs/inode.c:1219:
+		     get_order(I_NUMBUCKETS*sizeof(struct hlist_head))); 
 		                           ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#599: FILE: fs/dcache.c:45:
+ * AK: using a prime hash with a prime near some power-of-two would be $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#605: FILE: fs/dcache.c:51:
+ * $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#608: FILE: fs/dcache.c:54:
+#define D_NUMBUCKETS^I(16*1024) ^I/* 64K RAM on a 32bit machine */$

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#608: FILE: fs/dcache.c:54:
+#define D_NUMBUCKETS	(16*1024) 	/* 64K RAM on a 32bit machine */
                     	   ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#610: FILE: fs/dcache.c:56:
+#define D_HASHMASK      (D_NUMBUCKETS-1)
                                      ^

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#620: FILE: fs/dcache.c:63:
+#if 0

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#680: FILE: fs/dcache.c:812:
+static inline struct hlist_head * d_hash(struct dentry * parent, unsigned long hash)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#680: FILE: fs/dcache.c:812:
+static inline struct hlist_head * d_hash(struct dentry * parent, unsigned long hash)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#698: FILE: fs/dcache.c:962:
+	struct hlist_head *head = d_hash(parent,hash);
 	                                       ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#709: FILE: fs/dcache.c:971:
+^Ihlist_for_each (node, head) { $

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#709: FILE: fs/dcache.c:971:
+	hlist_for_each (node, head) { 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#739: FILE: fs/dcache.c:1067:
+^Ihlist_for_each(lhp,base) { $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#739: FILE: fs/dcache.c:1067:
+	hlist_for_each(lhp,base) { 
 	                  ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#760: FILE: fs/dcache.c:1137:
+ ^Ihlist_add_head_rcu(&entry->d_hash, list);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#760: FILE: fs/dcache.c:1137:
+ ^Ihlist_add_head_rcu(&entry->d_hash, list);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#760: FILE: fs/dcache.c:1137:
+ ^Ihlist_add_head_rcu(&entry->d_hash, list);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#841: FILE: fs/dcache.c:1541:
+^I^I__get_free_pages(GFP_ATOMIC, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#842: FILE: fs/dcache.c:1542:
+		__get_free_pages(GFP_ATOMIC, 
+			 get_order(D_NUMBUCKETS * sizeof(struct hlist_head)));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#855: FILE: fs/dcache.c:1546:
+^Ifor (i = 0; i < D_NUMBUCKETS; i++) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#857: FILE: fs/dcache.c:1548:
+^Ihashtable_end = dentry_hashtable + i; $

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000390527.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 74 errors, 23 warnings, 13 checks, 728 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000390527.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
