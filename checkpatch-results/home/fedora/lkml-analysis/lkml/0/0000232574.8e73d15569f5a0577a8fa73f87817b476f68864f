CHECK:CAMELCASE: Avoid CamelCase: <HvLpEvent_Rc>
#127: FILE: arch/ppc64/kernel/mf.c:171:
+	HvLpEvent_Rc hv_rc;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#136: FILE: arch/ppc64/kernel/mf.c:198:
+		hv_rc = HvCallEvent_signalLpEvent(

CHECK:CAMELCASE: Avoid CamelCase: <HvCallEvent_signalLpEvent>
#136: FILE: arch/ppc64/kernel/mf.c:198:
+		hv_rc = HvCallEvent_signalLpEvent(

CHECK:CAMELCASE: Avoid CamelCase: <HvLpEvent_Rc_Good>
#139: FILE: arch/ppc64/kernel/mf.c:200:
+		if (hv_rc != HvLpEvent_Rc_Good) {

CHECK:CAMELCASE: Avoid CamelCase: <HvLpIndex>
#151: FILE: arch/ppc64/kernel/mf.c:231:
+	HvLpIndex primary_lp = HvLpConfig_getPrimaryLpIndex();

CHECK:CAMELCASE: Avoid CamelCase: <HvLpConfig_getPrimaryLpIndex>
#151: FILE: arch/ppc64/kernel/mf.c:231:
+	HvLpIndex primary_lp = HvLpConfig_getPrimaryLpIndex();

CHECK:CAMELCASE: Avoid CamelCase: <xTargetLp>
#160: FILE: arch/ppc64/kernel/mf.c:256:
+	hev->xTargetLp = primary_lp;

CHECK:CAMELCASE: Avoid CamelCase: <xSourceInstanceId>
#164: FILE: arch/ppc64/kernel/mf.c:259:
+	hev->xSourceInstanceId = HvCallEvent_getSourceLpInstanceId(primary_lp,

CHECK:CAMELCASE: Avoid CamelCase: <HvCallEvent_getSourceLpInstanceId>
#164: FILE: arch/ppc64/kernel/mf.c:259:
+	hev->xSourceInstanceId = HvCallEvent_getSourceLpInstanceId(primary_lp,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#165: FILE: arch/ppc64/kernel/mf.c:260:
+	hev->xSourceInstanceId = HvCallEvent_getSourceLpInstanceId(primary_lp,
 			HvLpEvent_Type_MachineFac);

CHECK:CAMELCASE: Avoid CamelCase: <xTargetInstanceId>
#167: FILE: arch/ppc64/kernel/mf.c:261:
+	hev->xTargetInstanceId = HvCallEvent_getTargetLpInstanceId(primary_lp,

CHECK:CAMELCASE: Avoid CamelCase: <HvCallEvent_getTargetLpInstanceId>
#167: FILE: arch/ppc64/kernel/mf.c:261:
+	hev->xTargetInstanceId = HvCallEvent_getTargetLpInstanceId(primary_lp,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#168: FILE: arch/ppc64/kernel/mf.c:262:
+	hev->xTargetInstanceId = HvCallEvent_getTargetLpInstanceId(primary_lp,
 			HvLpEvent_Type_MachineFac);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around vsp_cmd->sub_data
#198: FILE: arch/ppc64/kernel/mf.c:287:
+			&(vsp_cmd->sub_data), sizeof(vsp_cmd->sub_data));

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:LONG_LINE: line length of 117 exceeds 100 columns
#249: FILE: arch/ppc64/kernel/mf.c:401:
+				ce_msg_comp_hdlr handler = pending_event_head->event.data.ce_msg.completion->handler;

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE: line length of 133 exceeds 100 columns
#285: FILE: arch/ppc64/kernel/mf.c:457:
+						ce_msg_comp_hdlr handler = pending_event_head->event.data.ce_msg.completion->handler;

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#307: FILE: arch/ppc64/kernel/mf.c:476:
+				struct vsp_rsp_data *rsp = (struct vsp_rsp_data *)event->data.vsp_cmd.token;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pending_event_head != NULL'
#325: FILE: arch/ppc64/kernel/mf.c:494:
+	if ((pending_event_head != NULL) && (free_it == 1)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'free_it == 1'
#325: FILE: arch/ppc64/kernel/mf.c:494:
+	if ((pending_event_head != NULL) && (free_it == 1)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "pending_event_head"
#325: FILE: arch/ppc64/kernel/mf.c:494:
+	if ((pending_event_head != NULL) && (free_it == 1)) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:CAMELCASE: Avoid CamelCase: <HvLpEvent>
#334: FILE: arch/ppc64/kernel/mf.c:514:
+static void hv_handler(struct HvLpEvent *event, struct pt_regs *regs)

CHECK:CAMELCASE: Avoid CamelCase: <HvLpEvent_Type>
#353: FILE: arch/ppc64/kernel/mf.c:536:
+void mf_allocate_lp_events(HvLpIndex target_lp, HvLpEvent_Type type,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#354: FILE: arch/ppc64/kernel/mf.c:537:
+void mf_allocate_lp_events(HvLpIndex target_lp, HvLpEvent_Type type,
 		unsigned size, unsigned count, MFCompleteHandler hdlr,

CHECK:CAMELCASE: Avoid CamelCase: <xCorrelationToken>
#365: FILE: arch/ppc64/kernel/mf.c:547:
+		ev->event.hp_lp_event.xCorrelationToken = (u64)user_token;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#389: FILE: arch/ppc64/kernel/mf.c:567:
+void mf_deallocate_lp_events(HvLpIndex target_lp, HvLpEvent_Type type,
+		unsigned count, MFCompleteHandler hdlr, void *user_token)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#389: FILE: arch/ppc64/kernel/mf.c:567:
+		unsigned count, MFCompleteHandler hdlr, void *user_token)

CHECK:CAMELCASE: Avoid CamelCase: <MFCompleteHandler>
#389: FILE: arch/ppc64/kernel/mf.c:567:
+		unsigned count, MFCompleteHandler hdlr, void *user_token)

CHECK:CAMELCASE: Avoid CamelCase: <HvLpEvent_registerHandler>
#419: FILE: arch/ppc64/kernel/mf.c:674:
+	HvLpEvent_registerHandler(HvLpEvent_Type_MachineFac, &hv_handler);

CHECK:CAMELCASE: Avoid CamelCase: <HvLpEvent_Type_MachineFac>
#419: FILE: arch/ppc64/kernel/mf.c:674:
+	HvLpEvent_registerHandler(HvLpEvent_Type_MachineFac, &hv_handler);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#436: FILE: arch/ppc64/kernel/mf.c:690:
+	case 'A':	new_side = 0;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#439: FILE: arch/ppc64/kernel/mf.c:692:
+	case 'B':	new_side = 1;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#442: FILE: arch/ppc64/kernel/mf.c:694:
+	case 'C':	new_side = 2;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#445: FILE: arch/ppc64/kernel/mf.c:696:
+	default:	new_side = 3;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#484: FILE: arch/ppc64/kernel/mf.c:722:
+		case 0:	return_value = 'A';

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#487: FILE: arch/ppc64/kernel/mf.c:724:
+		case 1:	return_value = 'B';

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#490: FILE: arch/ppc64/kernel/mf.c:726:
+		case 2:	return_value = 'C';

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#493: FILE: arch/ppc64/kernel/mf.c:728:
+		default:	return_value = 'D';

CHECK:CAMELCASE: Avoid CamelCase: <IplTypeReturnStuff>
#505: FILE: arch/ppc64/kernel/mf.c:738:
+	struct IplTypeReturnStuff return_stuff;

CHECK:CAMELCASE: Avoid CamelCase: <xType>
#516: FILE: arch/ppc64/kernel/mf.c:751:
+	return_stuff.xType = 0;

CHECK:CAMELCASE: Avoid CamelCase: <xRc>
#517: FILE: arch/ppc64/kernel/mf.c:752:
+	return_stuff.xRc = 0;

CHECK:CAMELCASE: Avoid CamelCase: <xDone>
#518: FILE: arch/ppc64/kernel/mf.c:753:
+	return_stuff.xDone = 0;

CHECK:CAMELCASE: Avoid CamelCase: <xEvent>
#523: FILE: arch/ppc64/kernel/mf.c:757:
+	ev->event.data.vsp_cmd.xEvent = &return_stuff;

ERROR:CODE_INDENT: code indent should use tabs where possible
#532: FILE: arch/ppc64/kernel/mf.c:770:
+ ^Iwhile (return_stuff.xDone != 1)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#532: FILE: arch/ppc64/kernel/mf.c:770:
+ ^Iwhile (return_stuff.xDone != 1)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#532: FILE: arch/ppc64/kernel/mf.c:770:
+ ^Iwhile (return_stuff.xDone != 1)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#535: FILE: arch/ppc64/kernel/mf.c:772:
+ ^Iif (return_stuff.xRc == 0)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#535: FILE: arch/ppc64/kernel/mf.c:772:
+ ^Iif (return_stuff.xRc == 0)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#535: FILE: arch/ppc64/kernel/mf.c:772:
+ ^Iif (return_stuff.xRc == 0)$

CHECK:CAMELCASE: Avoid CamelCase: <HvLpDma_AddressType_TceIndex>
#561: FILE: arch/ppc64/kernel/mf.c:798:
+	vsp_cmd.sub_data.kern.address_type = HvLpDma_AddressType_TceIndex;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rtc_data.ce_msg.ce_msg[2] == 0xa9'
#734: FILE: arch/ppc64/kernel/mf.c:939:
+			if ((rtc_data.ce_msg.ce_msg[2] == 0xa9) ||
+			    (rtc_data.ce_msg.ce_msg[2] == 0xaf)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rtc_data.ce_msg.ce_msg[2] == 0xaf'
#734: FILE: arch/ppc64/kernel/mf.c:939:
+			if ((rtc_data.ce_msg.ce_msg[2] == 0xa9) ||
+			    (rtc_data.ce_msg.ce_msg[2] == 0xaf)) {

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000232574.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 10 errors, 8 warnings, 33 checks, 702 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000232574.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
