Use of uninitialized value $typo_fix in concatenation (.) or string at /home/fedora/lkml-analysis/linux/scripts/checkpatch.pl line 3367.
WARNING:TYPO_SPELLING: 'accross' may be misspelled - perhaps 'across'?
#82: 
needed and interesting with links that go accross the Windows drive
                                          ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'msdos' may be misspelled - perhaps ''?
#95: 
a way the fat/vfat/msdos filesystem sypport is structured, the support
                   ^^^^^

WARNING:TYPO_SPELLING: 'sypport' may be misspelled - perhaps 'support'?
#95: 
a way the fat/vfat/msdos filesystem sypport is structured, the support
                                    ^^^^^^^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 32)
#131: FILE: fs/fat/dir.c:330:
+		if (showsymlinks && (xlate_len == name_len + 4)
[...]
+				xlate_len -= 4;

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#132: FILE: fs/fat/dir.c:331:
+		if (showsymlinks && (xlate_len == name_len + 4)
+					&& is_symlink(de->ext))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#142: FILE: fs/fat/dir.c:344:
+			if (showsymlinks && (xlate_len == name_len + 4)
+						&& is_symlink(de->ext))

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#188: FILE: fs/fat/file.c:40:
+int fat_readlink(struct dentry *dentry, char *buffer, int buflen);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#189: FILE: fs/fat/file.c:41:
+int fat_follow_link(struct dentry *dentry, struct nameidata *nd);
                                                              ^^

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#189: FILE: fs/fat/file.c:41:
+int fat_follow_link(struct dentry *dentry, struct nameidata *nd);

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#191: FILE: fs/fat/file.c:43:
+struct inode_operations fat_symlink_inode_operations = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:INDENTED_LABEL: labels should not be indented
#192: FILE: fs/fat/file.c:44:
+	readlink:       fat_readlink,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#193: FILE: fs/fat/file.c:45:
+	follow_link:    fat_follow_link,
 	           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:INDENTED_LABEL: labels should not be indented
#193: FILE: fs/fat/file.c:45:
+	follow_link:    fat_follow_link,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#194: FILE: fs/fat/file.c:46:
+	setattr:	fat_notify_change,
 	       ^

WARNING:INDENTED_LABEL: labels should not be indented
#194: FILE: fs/fat/file.c:46:
+	setattr:	fat_notify_change,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#215: FILE: fs/fat/file.c:158:
+	struct page * page;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#217: FILE: fs/fat/file.c:160:
+	char * ptr;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#224: FILE: fs/fat/file.c:167:
+	page = read_cache_page(mapping, 0, (filler_t *)mapping->a_ops->readpage,
+		NULL);

CHECK:CAMELCASE: Avoid CamelCase: <Page_Uptodate>
#228: FILE: fs/fat/file.c:171:
+	if (!Page_Uptodate(page))

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:LINE_SPACING: Missing a blank line after declarations
#239: FILE: fs/fat/file.c:182:
+		int i, len;
+		for (i = 0; i <= 2; i++) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BRACES: braces {} are not necessary for single statement blocks
#255: FILE: fs/fat/file.c:198:
+			if (len > buflen) {
+				len = buflen;
+			}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#271: FILE: fs/fat/file.c:214:
+		char * first_part = NULL;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#272: FILE: fs/fat/file.c:215:
+		char * final_part = NULL;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#277: FILE: fs/fat/file.c:220:
+		if (flags & FAT_SYMLINK_SHELL_ITEM_LIST) {
+			offset += CF_LE_W(*(__u16 *)(ptr + offset)) + 2;
+		}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#297: FILE: fs/fat/file.c:240:
+		if (!strnicmp(first_part, FAT_SYMLINK_ABSOLUTE,
+			strlen(FAT_SYMLINK_ABSOLUTE))) {

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#309: FILE: fs/fat/file.c:252:
+		ret = total_len = first_part_len + insert_slash

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:LINE_SPACING: Missing a blank line after declarations
#341: FILE: fs/fat/file.c:284:
+			int i;
+			if (total_len > buflen)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#344: FILE: fs/fat/file.c:287:
+			if (copy_to_user(buffer, first_part,
+				min(first_part_len, buflen))) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#350: FILE: fs/fat/file.c:293:
+				if (insert_slash
+					&& copy_to_user(buffer

ERROR:CODE_INDENT: code indent should use tabs where possible
#376: FILE: fs/fat/file.c:319:
+        page_cache_release(page);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#376: FILE: fs/fat/file.c:319:
+        page_cache_release(page);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#378: FILE: fs/fat/file.c:321:
+        return ret;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#378: FILE: fs/fat/file.c:321:
+        return ret;$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#383: FILE: fs/fat/file.c:326:
+	char * out;

WARNING:LINE_SPACING: Missing a blank line after declarations
#384: FILE: fs/fat/file.c:327:
+	char * out;
+	if (dentry->d_inode->i_size > PAGE_SIZE)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#389: FILE: fs/fat/file.c:332:
+int fat_follow_link(struct dentry *dentry, struct nameidata *nd)
                                                              ^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#392: FILE: fs/fat/file.c:335:
+	char * buffer;

WARNING:LINE_SPACING: Missing a blank line after declarations
#393: FILE: fs/fat/file.c:336:
+	char * buffer;
+	if (dentry->d_inode->i_size > PAGE_SIZE)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#396: FILE: fs/fat/file.c:339:
+	res = vfs_follow_link(nd, buffer);
 	                      ^^

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#398: FILE: fs/fat/file.c:341:
+	if (buffer)
+		kfree(buffer);

ERROR:SPACING: space prohibited after that '~' (ctx:WxW)
#432: FILE: fs/fat/inode.c:952:
+			inode->i_mode &= ~ S_IFREG;
 			                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#455: FILE: fs/vfat/namei.c:159:
+		} else if (!strcmp(this_char,"nosymlinks")) {
 		                            ^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#466: FILE: fs/vfat/namei.c:220:
+	if (MSDOS_SB(dentry->d_inode->i_sb)->options.symlinks
+		&& len > 4 && strnicmp(name + len - 4, ".lnk", 4) == 0)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#476: FILE: fs/vfat/namei.c:245:
+	if (MSDOS_SB(dentry->d_inode->i_sb)->options.symlinks
+		&& len > 4 && strnicmp(name + len - 4, ".lnk", 4) == 0)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#485: FILE: fs/vfat/namei.c:1259:
+static int vfat_symlink ( struct inode *dir, struct dentry *dentry,

ERROR:SPACING: space prohibited after that open parenthesis '('
#485: FILE: fs/vfat/namei.c:1259:
+static int vfat_symlink ( struct inode *dir, struct dentry *dentry,

ERROR:CODE_INDENT: code indent should use tabs where possible
#486: FILE: fs/vfat/namei.c:1260:
+                 const char *symname);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#486: FILE: fs/vfat/namei.c:1260:
+static int vfat_symlink ( struct inode *dir, struct dentry *dentry,
+                 const char *symname);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#486: FILE: fs/vfat/namei.c:1260:
+                 const char *symname);$

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#494: FILE: fs/vfat/namei.c:1271:
+	symlink:	vfat_symlink,
 	       ^

WARNING:INDENTED_LABEL: labels should not be indented
#494: FILE: fs/vfat/namei.c:1271:
+	symlink:	vfat_symlink,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#520: FILE: fs/vfat/namei.c:1317:
+static int vfat_symlink_fill(const char * symname, char * buffer)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#520: FILE: fs/vfat/namei.c:1317:
+static int vfat_symlink_fill(const char * symname, char * buffer)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#528: FILE: fs/vfat/namei.c:1325:
+		*(__u32*)(buffer + 60) = CT_LE_L(1);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#535: FILE: fs/vfat/namei.c:1332:
+			*(__u32*)(buffer + 20) = CT_LE_L(6);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#536: FILE: fs/vfat/namei.c:1333:
+			*(__u32*)(buffer + 76) = CT_LE_L(res - 76);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#537: FILE: fs/vfat/namei.c:1334:
+			*(__u32*)(buffer + 80) = CT_LE_L(28);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#538: FILE: fs/vfat/namei.c:1335:
+			*(__u32*)(buffer + 84) = CT_LE_L(2);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#539: FILE: fs/vfat/namei.c:1336:
+			*(__u32*)(buffer + 96) = CT_LE_L(28);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#540: FILE: fs/vfat/namei.c:1337:
+			*(__u32*)(buffer + 100) = CT_LE_L(28 + 20 + 13);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#541: FILE: fs/vfat/namei.c:1338:
+			*(__u32*)(buffer + 104) = CT_LE_L(symnamelen + 12 + 1 + 20);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#542: FILE: fs/vfat/namei.c:1339:
+			*(__u32*)(buffer + 112) = CT_LE_L(20);

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#549: FILE: fs/vfat/namei.c:1346:
+					*(buffer + 124 + 12 + i)
+							= *(symname + i);

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#551: FILE: fs/vfat/namei.c:1348:
+			*(__u32*)(buffer + 124 + 12 + symnamelen + 1)

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#552: FILE: fs/vfat/namei.c:1349:
+			*(__u32*)(buffer + 124 + 12 + symnamelen + 1)
+							= CT_LE_W(symnamelen);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#554: FILE: fs/vfat/namei.c:1351:
+			memcpy(buffer + 124 + 12 + symnamelen + 1 + 2,
+				symname, symnamelen);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#560: FILE: fs/vfat/namei.c:1357:
+			*(__u32*)(buffer + 20) = CT_LE_L(12);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#561: FILE: fs/vfat/namei.c:1358:
+			*(__u16*)(buffer + 76) = CT_LE_W(symnamelen);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#564: FILE: fs/vfat/namei.c:1361:
+			*(__u16*)(buffer + 78 + symnamelen)

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#565: FILE: fs/vfat/namei.c:1362:
+			*(__u16*)(buffer + 78 + symnamelen)
+							= CT_LE_W(symnamelen);

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#571: FILE: fs/vfat/namei.c:1368:
+					*(buffer + 80 + symnamelen + i)
+							= *(symname + i);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#588: FILE: fs/vfat/namei.c:1385:
+static int vfat_symlink ( struct inode *dir, struct dentry *dentry,

ERROR:SPACING: space prohibited after that open parenthesis '('
#588: FILE: fs/vfat/namei.c:1385:
+static int vfat_symlink ( struct inode *dir, struct dentry *dentry,

ERROR:CODE_INDENT: code indent should use tabs where possible
#589: FILE: fs/vfat/namei.c:1386:
+                 const char *symname)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#589: FILE: fs/vfat/namei.c:1386:
+static int vfat_symlink ( struct inode *dir, struct dentry *dentry,
+                 const char *symname)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#589: FILE: fs/vfat/namei.c:1386:
+                 const char *symname)$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#591: FILE: fs/vfat/namei.c:1388:
+	char * buffer;

ERROR:CODE_INDENT: code indent should use tabs where possible
#592: FILE: fs/vfat/namei.c:1389:
+        int ret, len;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#592: FILE: fs/vfat/namei.c:1389:
+        int ret, len;$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#597: FILE: fs/vfat/namei.c:1394:
+		char * new_name = kmalloc(d_name_len + 4 + 1, GFP_KERNEL);

WARNING:LINE_SPACING: Missing a blank line after declarations
#598: FILE: fs/vfat/namei.c:1395:
+		char * new_name = kmalloc(d_name_len + 4 + 1, GFP_KERNEL);
+		if (!new_name) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#610: FILE: fs/vfat/namei.c:1407:
+        ret = vfat_create(dir, dentry, S_IFLNK | 0777);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#610: FILE: fs/vfat/namei.c:1407:
+        ret = vfat_create(dir, dentry, S_IFLNK | 0777);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#611: FILE: fs/vfat/namei.c:1408:
+        if (ret) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#611: FILE: fs/vfat/namei.c:1408:
+        if (ret) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#612: FILE: fs/vfat/namei.c:1409:
+                printk(KERN_WARNING "vfat_symlink: create failed (%d)\n", ret);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#612: FILE: fs/vfat/namei.c:1409:
+                printk(KERN_WARNING "vfat_symlink: create failed (%d)\n", ret);$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#612: FILE: fs/vfat/namei.c:1409:
+                printk(KERN_WARNING "vfat_symlink: create failed (%d)\n", ret);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'vfat_symlink', this function's name, in a string
#612: FILE: fs/vfat/namei.c:1409:
+                printk(KERN_WARNING "vfat_symlink: create failed (%d)\n", ret);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:CODE_INDENT: code indent should use tabs where possible
#613: FILE: fs/vfat/namei.c:1410:
+                goto out;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#613: FILE: fs/vfat/namei.c:1410:
+                goto out;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#614: FILE: fs/vfat/namei.c:1411:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#614: FILE: fs/vfat/namei.c:1411:
+        }$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#632: FILE: fs/vfat/namei.c:1429:
+	printk(KERN_WARNING "vfat_symlink: write failed, unlinking\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'vfat_symlink', this function's name, in a string
#632: FILE: fs/vfat/namei.c:1429:
+	printk(KERN_WARNING "vfat_symlink: write failed, unlinking\n");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#633: FILE: fs/vfat/namei.c:1430:
+	vfat_unlink (dir, dentry);

ERROR:SPACING: space prohibited before that close parenthesis ')'
#646: FILE: include/linux/msdos_fs.h:59:
+#define MSDOS_VALID_MODE (S_IFREG | S_IFDIR | S_IRWXU | S_IRWXG | S_IRWXO | S_IFLNK )

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXU | S_IRWXG | S_IRWXO' are not preferred. Consider using octal permissions '0777'.
#646: FILE: include/linux/msdos_fs.h:59:
+#define MSDOS_VALID_MODE (S_IFREG | S_IFDIR | S_IRWXU | S_IRWXG | S_IRWXO | S_IFLNK )

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#654: FILE: include/linux/msdos_fs.h:274:
+extern struct inode_operations fat_symlink_inode_operations;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#663: FILE: include/linux/msdos_fs.h:283:
+/*
+extern int fat_readlink(struct dentry *dentry, char *buffer, int buflen);

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000451325.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 41 errors, 42 warnings, 17 checks, 539 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000451325.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
