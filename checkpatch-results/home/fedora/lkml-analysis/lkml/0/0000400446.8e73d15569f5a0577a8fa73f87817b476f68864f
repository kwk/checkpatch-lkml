WARNING:LONG_LINE: line length of 130 exceeds 100 columns
#93: FILE: kernel/sched.c:657:
+static inline runqueue_t *find_busiest_in_mask(runqueue_t *this_rq, int this_cpu, int idle, int *imbalance, unsigned long cpumask)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:SPACING: space prohibited before that close parenthesis ')'
#102: FILE: kernel/sched.c:692:
+		if (!cpu_online(i) || !((1UL << i) & cpumask) )

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#112: FILE: kernel/sched.c:735:
+static inline runqueue_t *find_busiest_queue(runqueue_t *this_rq, int this_cpu, int idle, int *imbalance)

WARNING:LINE_SPACING: Missing a blank line after declarations
#115: FILE: kernel/sched.c:738:
+	unsigned long cpumask = __node_to_cpu_mask(__cpu_to_node(this_cpu));
+	return find_busiest_in_mask(this_rq, this_cpu, idle, imbalance,

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#159: FILE: include/linux/sched.h:447:
+extern void sched_balance_exec(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#160: FILE: include/linux/sched.h:448:
+extern void node_nr_running_init(void);

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#161: FILE: include/linux/sched.h:449:
+#define nr_running_inc(rq) atomic_inc(rq->node_ptr); \
+	rq->nr_running++

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'rq' - possible side-effects?
#161: FILE: include/linux/sched.h:449:
+#define nr_running_inc(rq) atomic_inc(rq->node_ptr); \
+	rq->nr_running++

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'rq' may be better as '(rq)' to avoid precedence issues
#161: FILE: include/linux/sched.h:449:
+#define nr_running_inc(rq) atomic_inc(rq->node_ptr); \
+	rq->nr_running++

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#163: FILE: include/linux/sched.h:451:
+#define nr_running_dec(rq) atomic_dec(rq->node_ptr); \
+	rq->nr_running--

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'rq' - possible side-effects?
#163: FILE: include/linux/sched.h:451:
+#define nr_running_dec(rq) atomic_dec(rq->node_ptr); \
+	rq->nr_running--

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'rq' may be better as '(rq)' to avoid precedence issues
#163: FILE: include/linux/sched.h:451:
+#define nr_running_dec(rq) atomic_dec(rq->node_ptr); \
+	rq->nr_running--

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#168: FILE: include/linux/sched.h:456:
+#define nr_running_inc(rq) rq->nr_running++

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'rq' may be better as '(rq)' to avoid precedence issues
#168: FILE: include/linux/sched.h:456:
+#define nr_running_inc(rq) rq->nr_running++

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#169: FILE: include/linux/sched.h:457:
+#define nr_running_dec(rq) rq->nr_running--

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'rq' may be better as '(rq)' to avoid precedence issues
#169: FILE: include/linux/sched.h:457:
+#define nr_running_dec(rq) rq->nr_running--

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#193: FILE: kernel/sched.c:156:
+	atomic_t * node_ptr;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LONG_LINE: line length of 121 exceeds 100 columns
#232: FILE: kernel/sched.c:2176:
+static atomic_t node_nr_running[MAX_NUMNODES] ____cacheline_maxaligned_in_smp = {[0 ...MAX_NUMNODES-1] = ATOMIC_INIT(0)};

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#232: FILE: kernel/sched.c:2176:
+static atomic_t node_nr_running[MAX_NUMNODES] ____cacheline_maxaligned_in_smp = {[0 ...MAX_NUMNODES-1] = ATOMIC_INIT(0)};
                                                                                                    ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#238: FILE: kernel/sched.c:2182:
+	for (i = 0; i < NR_CPUS; i++) {
+		cpu_rq(i)->node_ptr = &node_nr_running[__cpu_to_node(i)];
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#238: FILE: kernel/sched.c:2182:
+	for (i = 0; i < NR_CPUS; i++) {

WARNING:RETURN_VOID: void function return statements are not generally useful
#242: FILE: kernel/sched.c:2186:
+	return;
+}

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#288: FILE: kernel/sched.c:2232:
+	for (i = 0; i < NR_CPUS; ++i) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#369: FILE: kernel/sched.c:711:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#370: FILE: kernel/sched.c:712:
+	this_load = maxload = atomic_read(&node_nr_running[this_node]);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#375: FILE: kernel/sched.c:717:
+		if (load > maxload && (4*load > ((5*4*this_load)/4))) {
 		                        ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#375: FILE: kernel/sched.c:717:
+		if (load > maxload && (4*load > ((5*4*this_load)/4))) {
 		                                   ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#375: FILE: kernel/sched.c:717:
+		if (load > maxload && (4*load > ((5*4*this_load)/4))) {
 		                                     ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#375: FILE: kernel/sched.c:717:
+		if (load > maxload && (4*load > ((5*4*this_load)/4))) {
 		                                                ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'this_rq->lb_cntr'
#394: FILE: kernel/sched.c:842:
+	if (!(++(this_rq->lb_cntr) % INTERNODE_LB)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#454: FILE: kernel/sched.c:719:
+	this_load = maxload = (this_rq()->prev_node_load[this_node] >> 1)

WARNING:LONG_LINE: line length of 115 exceeds 100 columns
#484: FILE: kernel/sched.c:634:
+static int internode_lb[MAX_NUMNODES] ____cacheline_maxaligned_in_smp = {[0 ...MAX_NUMNODES-1] = MAX_INTERNODE_LB};

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#484: FILE: kernel/sched.c:634:
+static int internode_lb[MAX_NUMNODES] ____cacheline_maxaligned_in_smp = {[0 ...MAX_NUMNODES-1] = MAX_INTERNODE_LB};
                                                                                            ^

CHECK:BRACES: Unbalanced braces around else statement
#514: FILE: kernel/sched.c:743:
+	} else

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'this_rq->lb_cntr'
#531: FILE: kernel/sched.c:865:
+	if (!(++(this_rq->lb_cntr) % internode_lb[this_node])) {

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000400446.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 7 errors, 9 warnings, 19 checks, 368 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000400446.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
