WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#31: 
- Start splitting the functions for host chip handling in to separate entities.

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'm5229_revision < 0xC2'
#92: FILE: drivers/ide/alim15x3.c:488:
+	if ((m5229_revision < 0xC2) && (drive->type != ATA_DISK))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'drive->type != ATA_DISK'
#92: FILE: drivers/ide/alim15x3.c:488:
+	if ((m5229_revision < 0xC2) && (drive->type != ATA_DISK))

WARNING:LONG_LINE: line length of 125 exceeds 100 columns
#156: FILE: drivers/ide/cmd64x.c:846:
+	u8 jack_slap		= ((dev->device == PCI_DEVICE_ID_CMD_648) || (dev->device == PCI_DEVICE_ID_CMD_649)) ? 1 : 0;

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: spaces preferred around that '&' (ctx:VxO)
#159: FILE: drivers/ide/cmd64x.c:849:
+	outb(inb(dma_base)&~1, dma_base);	/* stop DMA */
 	                  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#160: FILE: drivers/ide/cmd64x.c:850:
+	dma_stat = inb(dma_base+2);		/* get DMA status */
 	                       ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#161: FILE: drivers/ide/cmd64x.c:851:
+	outb(dma_stat|6, dma_base+2);		/* clear the INTR & ERROR bits */
 	             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#161: FILE: drivers/ide/cmd64x.c:851:
+	outb(dma_stat|6, dma_base+2);		/* clear the INTR & ERROR bits */
 	                         ^

CHECK:SPACING: No space is necessary after a cast
#166: FILE: drivers/ide/cmd64x.c:856:
+		(void) pci_read_config_byte(dev, dma_reg, &dma_intr);

WARNING:LONG_LINE_COMMENT: line length of 104 exceeds 100 columns
#172: FILE: drivers/ide/cmd64x.c:862:
+		(void) pci_write_config_byte(dev, dma_reg, dma_intr|dma_mask);	/* clear the INTR bit */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: No space is necessary after a cast
#172: FILE: drivers/ide/cmd64x.c:862:
+		(void) pci_write_config_byte(dev, dma_reg, dma_intr|dma_mask);	/* clear the INTR bit */

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#172: FILE: drivers/ide/cmd64x.c:862:
+		(void) pci_write_config_byte(dev, dma_reg, dma_intr|dma_mask);	/* clear the INTR bit */
 		                                                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#223: FILE: drivers/ide/cmd64x.c:904:
+	dma_stat = inb(dma_base+2);		/* get DMA status */
 	                       ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxO)
#224: FILE: drivers/ide/cmd64x.c:905:
+	outb(inb(dma_base)&~1, dma_base);	/* stop DMA */
 	                  ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#225: FILE: drivers/ide/cmd64x.c:906:
+	outb(dma_stat|6, dma_base+2);		/* clear the INTR & ERROR bits */
 	             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#225: FILE: drivers/ide/cmd64x.c:906:
+	outb(dma_stat|6, dma_base+2);		/* clear the INTR & ERROR bits */
 	                         ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxO)
#372: FILE: drivers/ide/hpt34x.c:314:
+	outb(inb(dma_base)&~1, dma_base);	/* stop DMA */
 	                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#373: FILE: drivers/ide/hpt34x.c:315:
+	dma_stat = inb(dma_base+2);		/* get DMA status */
 	                       ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#374: FILE: drivers/ide/hpt34x.c:316:
+	outb(dma_stat|6, dma_base+2);		/* clear the INTR & ERROR bits */
 	             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#374: FILE: drivers/ide/hpt34x.c:316:
+	outb(dma_stat|6, dma_base+2);		/* clear the INTR & ERROR bits */
 	                         ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#386: FILE: drivers/ide/hpt34x.c:328:
+	if (!(count = udma_new_table(ch, rq)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#392: FILE: drivers/ide/hpt34x.c:334:
+	outb(inb(dma_base+2)|6, dma_base+2);	/* clear INTR & ERROR flags */
 	                 ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#392: FILE: drivers/ide/hpt34x.c:334:
+	outb(inb(dma_base+2)|6, dma_base+2);	/* clear INTR & ERROR flags */
 	                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#392: FILE: drivers/ide/hpt34x.c:334:
+	outb(inb(dma_base+2)|6, dma_base+2);	/* clear INTR & ERROR flags */
 	                                ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#506: FILE: drivers/ide/hpt366.c:838:
+	u8 regstate = ch->unit ? 0x54 : 0x50;
+	pci_write_config_byte(ch->pci_dev, regstate, 0x37);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#507: FILE: drivers/ide/hpt366.c:839:
+	udelay(10);

usleep_range() should be preferred over udelay(). The proper way of
using usleep_range() is mentioned in the kernel docs.

See: https://www.kernel.org/doc/html/latest/timers/timers-howto.html#delays-information-on-the-various-kernel-delay-sleep-mechanisms

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#534: FILE: drivers/ide/hpt366.c:866:
+	printk(KERN_INFO "%s: %d bytes in FIFO\n", drive->name, dma_stat);

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#536: FILE: drivers/ide/hpt366.c:868:
+	udelay(10);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#540: FILE: drivers/ide/hpt366.c:872:
+	outb(dma_stat | 0x6, dma_base+2); /* clear errors */
 	                             ^

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#542: FILE: drivers/ide/hpt366.c:874:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#564: FILE: drivers/ide/hpt366.c:896:
+		udelay(20); /* wait a little */

CHECK:SPACING: spaces preferred around that '&' (ctx:VxO)
#573: FILE: drivers/ide/hpt366.c:905:
+	outb(inb(dma_base)&~1, dma_base);	/* stop DMA */
 	                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#574: FILE: drivers/ide/hpt366.c:906:
+	dma_stat = inb(dma_base+2);		/* get DMA status */
 	                       ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#575: FILE: drivers/ide/hpt366.c:907:
+	outb(dma_stat|6, dma_base+2);		/* clear the INTR & ERROR bits */
 	             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#575: FILE: drivers/ide/hpt366.c:907:
+	outb(dma_stat|6, dma_base+2);		/* clear the INTR & ERROR bits */
 	                         ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#689: FILE: drivers/ide/ide-cd.c:908:
+		if ((dma_error = udma_stop(drive)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#698: FILE: drivers/ide/ide-cd.c:1483:
+		if ((dma_error = udma_stop(drive))) {

WARNING:TYPO_SPELLING: 'tryed' may be misspelled - perhaps 'tried'?
#832: FILE: drivers/ide/ide-dma.c:553:
+ * tryed to update as much as I could in the architecture specific code.  But
    ^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'driectly' may be misspelled - perhaps 'directly'?
#845: FILE: drivers/ide/ide-dma.c:566:
+ * FIXME: there are some places where this gets used driectly for "error
                                                      ^^^^^^^^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#858: FILE: drivers/ide/ide-dma.c:579:
+			printk("%s: DMA disabled\n", drive->name);

WARNING:TYPO_SPELLING: 'reques' may be misspelled - perhaps 'request'?
#914: FILE: drivers/ide/ide-dma.c:760:
+ * Pacific Digital host chip needs the reques to be passed there to decide
                                        ^^^^^^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#931: FILE: drivers/ide/ide-dma.c:777:
+	outb(inb(dma_base)|1, dma_base);		/* start DMA */
 	                  ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxO)
#945: FILE: drivers/ide/ide-dma.c:791:
+	outb(inb(dma_base)&~1, dma_base);	/* stop DMA */
 	                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#946: FILE: drivers/ide/ide-dma.c:792:
+	dma_stat = inb(dma_base+2);		/* get DMA status */
 	                       ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#947: FILE: drivers/ide/ide-dma.c:793:
+	outb(dma_stat|6, dma_base+2);		/* clear the INTR & ERROR bits */
 	             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#947: FILE: drivers/ide/ide-dma.c:793:
+	outb(dma_stat|6, dma_base+2);		/* clear the INTR & ERROR bits */
 	                         ^

WARNING:LONG_LINE_COMMENT: line length of 104 exceeds 100 columns
#970: FILE: drivers/ide/ide-dma.c:816:
+	ide_set_handler(drive, ide_dma_intr, WAIT_CMD, dma_timer_expiry);	/* issue cmd to drive */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'drive->addressing == 1'
#971: FILE: drivers/ide/ide-dma.c:817:
+	if ((rq->flags & REQ_DRIVE_ACB) && (drive->addressing == 1)) {

WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#1023: FILE: drivers/ide/ide-dma.c:869:
+	printk(KERN_ERR "ATA: UDMA timeout occured %s!\n", drive->name);
 	                                   ^^^^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1023: FILE: drivers/ide/ide-dma.c:869:
+	printk(KERN_ERR "ATA: UDMA timeout occured %s!\n", drive->name);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1029: FILE: drivers/ide/ide-dma.c:875:
+
+}

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1037: FILE: drivers/ide/ide-dma.c:883:
+EXPORT_SYMBOL(udma_enable);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1038: FILE: drivers/ide/ide-dma.c:884:
+EXPORT_SYMBOL(udma_start);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1039: FILE: drivers/ide/ide-dma.c:885:
+EXPORT_SYMBOL(udma_stop);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1040: FILE: drivers/ide/ide-dma.c:886:
+EXPORT_SYMBOL(udma_read);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1041: FILE: drivers/ide/ide-dma.c:887:
+EXPORT_SYMBOL(udma_write);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1042: FILE: drivers/ide/ide-dma.c:888:
+EXPORT_SYMBOL(ata_do_udma);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1043: FILE: drivers/ide/ide-dma.c:889:
+EXPORT_SYMBOL(udma_irq_status);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1046: FILE: drivers/ide/ide-dma.c:892:
+EXPORT_SYMBOL(udma_white_list);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1065: FILE: drivers/ide/ide-floppy.c:1125:
+	if (test_bit (PC_DMA_RECOMMENDED, &pc->flags) && drive->using_dma) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1066: FILE: drivers/ide/ide-floppy.c:1126:
+		if (test_bit (PC_WRITING, &pc->flags))

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1091: FILE: drivers/ide/ide-pci.c:712:
+	printk(KERN_INFO "ATA: chipset rev.: %d\n", class_rev);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1100: FILE: drivers/ide/ide-pci.c:725:
+			printk(KERN_INFO "ATA: Found promise 20265 in RAID mode.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1105: FILE: drivers/ide/ide-pci.c:729:
+				printk(KERN_INFO "ATA: Skipping Promise PDC20265 attached to I2O RAID controller.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1114: FILE: drivers/ide/ide-pci.c:737:
+		printk(KERN_INFO "ATA: non-legacy mode: IRQ probe delayed\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1127: FILE: drivers/ide/ide-pci.c:750:
+		printk(KERN_INFO "ATA: will probe IRQs later\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1131: FILE: drivers/ide/ide-pci.c:753:
+		printk(KERN_INFO "ATA: invalid IRQ (%d): will probe later\n", pciirq);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1139: FILE: drivers/ide/ide-pci.c:759:
+		printk(KERN_INFO "ATA: 100%% native mode on irq\n", __irq_itoa(pciirq));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1142: FILE: drivers/ide/ide-pci.c:761:
+		printk(KERN_INFO "ATA: 100%% native mode on irq %d\n", pciirq);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1151: FILE: drivers/ide/ide-pci.c:892:
+			printk(KERN_INFO "ATA: unknown interface: %s (%04x:%04x) on PCI slot %s\n",

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#1155: FILE: drivers/ide/ide-pci.c:895:
+			printk(KERN_INFO "ATA: interface: %s, on PCI slot %s\n", dev->name, dev->slot_name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1155: FILE: drivers/ide/ide-pci.c:895:
+			printk(KERN_INFO "ATA: interface: %s, on PCI slot %s\n", dev->name, dev->slot_name);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1189: FILE: drivers/ide/ide-tape.c:2314:
+	if (test_bit (PC_DMA_RECOMMENDED, &pc->flags) && drive->using_dma) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1190: FILE: drivers/ide/ide-tape.c:2315:
+		if (test_bit (PC_WRITING, &pc->flags))

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1261: FILE: drivers/ide/ns87415.c:93:
+	dma_stat = inb(ch->dma_base+2);
 	                           ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxO)
#1262: FILE: drivers/ide/ns87415.c:94:
+	outb(inb(dma_base)&~1, dma_base);	/* stop DMA */
 	                  ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1263: FILE: drivers/ide/ns87415.c:95:
+	outb(inb(dma_base)|6, dma_base);	/* from ERRATA: clear the INTR & ERROR bits */
 	                  ^

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1268: FILE: drivers/ide/ns87415.c:100:
+
+}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1371: FILE: drivers/ide/pdc202xx.c:989:
+
+

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#1372: FILE: drivers/ide/pdc202xx.c:990:
+	switch (dev->device) {
+		case PCI_DEVICE_ID_PROMISE_20275:
+		case PCI_DEVICE_ID_PROMISE_20276:
+		case PCI_DEVICE_ID_PROMISE_20269:
+		case PCI_DEVICE_ID_PROMISE_20268R:
+		case PCI_DEVICE_ID_PROMISE_20268:
[...]
+		case PCI_DEVICE_ID_PROMISE_20267:
+		case PCI_DEVICE_ID_PROMISE_20265:
+		case PCI_DEVICE_ID_PROMISE_20262:
[...]
+		default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'drive->addressing'
#1388: FILE: drivers/ide/pdc202xx.c:1006:
+	if ((drive->addressing) && (hardware48hack)) {

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1391: FILE: drivers/ide/pdc202xx.c:1009:
+		outb(clock|(ch->unit ? 0x08 : 0x02), high_16 + 0x11);
 		          ^

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#1393: FILE: drivers/ide/pdc202xx.c:1011:
+		word_count = (rq_data_dir(rq) == READ) ? word_count | 0x05000000 : word_count | 0x06000000;

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#1419: FILE: drivers/ide/pdc202xx.c:1037:
+	switch (dev->device) {
+		case PCI_DEVICE_ID_PROMISE_20275:
+		case PCI_DEVICE_ID_PROMISE_20276:
+		case PCI_DEVICE_ID_PROMISE_20269:
+		case PCI_DEVICE_ID_PROMISE_20268R:
+		case PCI_DEVICE_ID_PROMISE_20268:
[...]
+		case PCI_DEVICE_ID_PROMISE_20267:
+		case PCI_DEVICE_ID_PROMISE_20265:
+		case PCI_DEVICE_ID_PROMISE_20262:
[...]
+ 		default:

ERROR:CODE_INDENT: code indent should use tabs where possible
#1432: FILE: drivers/ide/pdc202xx.c:1050:
+ ^I^Idefault:$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1432: FILE: drivers/ide/pdc202xx.c:1050:
+ ^I^Idefault:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1432: FILE: drivers/ide/pdc202xx.c:1050:
+ ^I^Idefault:$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'drive->addressing'
#1435: FILE: drivers/ide/pdc202xx.c:1053:
+	if ((drive->addressing) && (hardware48hack)) {

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#1438: FILE: drivers/ide/pdc202xx.c:1056:
+		OUT_BYTE(clock & ~(ch->unit ? 0x08:0x02), high_16 + 0x11);
 		                                  ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxO)
#1442: FILE: drivers/ide/pdc202xx.c:1060:
+	outb(inb(dma_base)&~1, dma_base);	/* stop DMA */
 	                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1443: FILE: drivers/ide/pdc202xx.c:1061:
+	dma_stat = inb(dma_base+2);		/* get DMA status */
 	                       ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1444: FILE: drivers/ide/pdc202xx.c:1062:
+	outb(dma_stat|6, dma_base+2);		/* clear the INTR & ERROR bits */
 	             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1444: FILE: drivers/ide/pdc202xx.c:1062:
+	outb(dma_stat|6, dma_base+2);		/* clear the INTR & ERROR bits */
 	                         ^

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1560: FILE: drivers/ide/serverworks.c:489:
+	if(inb(dma_base+0x02)&1)
+	{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1560: FILE: drivers/ide/serverworks.c:489:
+	if(inb(dma_base+0x02)&1)
 	               ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#1560: FILE: drivers/ide/serverworks.c:489:
+	if(inb(dma_base+0x02)&1)
 	                     ^

ERROR:SPACING: space required before the open parenthesis '('
#1560: FILE: drivers/ide/serverworks.c:489:
+	if(inb(dma_base+0x02)&1)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1575: FILE: drivers/ide/serverworks.c:493:
+		int i;
+		printk(KERN_ERR "Curious - OSB4 thinks the DMA is still running.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1575: FILE: drivers/ide/serverworks.c:493:
+		printk(KERN_ERR "Curious - OSB4 thinks the DMA is still running.\n");

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1576: FILE: drivers/ide/serverworks.c:494:
+		for(i=0;i<10;i++)
+		{

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1576: FILE: drivers/ide/serverworks.c:494:
+		for(i=0;i<10;i++)
 		     ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#1576: FILE: drivers/ide/serverworks.c:494:
+		for(i=0;i<10;i++)
 		       ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1576: FILE: drivers/ide/serverworks.c:494:
+		for(i=0;i<10;i++)
 		         ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#1576: FILE: drivers/ide/serverworks.c:494:
+		for(i=0;i<10;i++)
 		            ^

ERROR:SPACING: space required before the open parenthesis '('
#1576: FILE: drivers/ide/serverworks.c:494:
+		for(i=0;i<10;i++)

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1578: FILE: drivers/ide/serverworks.c:496:
+			if(!(inb(dma_base+0x02)&1))
+			{

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1578: FILE: drivers/ide/serverworks.c:496:
+			if(!(inb(dma_base+0x02)&1))
 			                 ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#1578: FILE: drivers/ide/serverworks.c:496:
+			if(!(inb(dma_base+0x02)&1))
 			                       ^

ERROR:SPACING: space required before the open parenthesis '('
#1578: FILE: drivers/ide/serverworks.c:496:
+			if(!(inb(dma_base+0x02)&1))

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1580: FILE: drivers/ide/serverworks.c:498:
+				printk(KERN_ERR "OSB4 now finished.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#1589: FILE: drivers/ide/serverworks.c:504:
+		printk(KERN_CRIT "Serverworks OSB4 in impossible state.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#1590: FILE: drivers/ide/serverworks.c:505:
+		printk(KERN_CRIT "Disable UDMA or if you are using Seagate then try switching disk types\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#1591: FILE: drivers/ide/serverworks.c:506:
+		printk(KERN_CRIT "on this controller. Please report this event to osb4-bug@ide.cabal.tm\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#1601: FILE: drivers/ide/serverworks.c:511:
+		printk(KERN_CRIT "OSB4: continuing might cause disk corruption.\n");

ERROR:SPACING: space required before the open parenthesis '('
#1602: FILE: drivers/ide/serverworks.c:512:
+		while(1)

CHECK:SPACING: spaces preferred around that '&' (ctx:VxO)
#1611: FILE: drivers/ide/serverworks.c:518:
+	outb(inb(dma_base)&~1, dma_base);	/* stop DMA */
 	                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1612: FILE: drivers/ide/serverworks.c:519:
+	dma_stat = inb(dma_base+2);		/* get DMA status */
 	                       ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1613: FILE: drivers/ide/serverworks.c:520:
+	outb(dma_stat|6, dma_base+2);		/* clear the INTR & ERROR bits */
 	             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1613: FILE: drivers/ide/serverworks.c:520:
+	outb(dma_stat|6, dma_base+2);		/* clear the INTR & ERROR bits */
 	                         ^

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#1621: FILE: drivers/ide/serverworks.c:528:
+	switch (func) {
+		case ide_dma_check:

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1834: FILE: drivers/ide/trm290.c:209:
+	if (!(count = udma_new_table(ch, rq))) {

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1840: FILE: drivers/ide/trm290.c:215:
+	outl(ch->dmatable_dma|reading|writing, ch->dma_base);
 	                     ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1840: FILE: drivers/ide/trm290.c:215:
+	outl(ch->dmatable_dma|reading|writing, ch->dma_base);
 	                             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1842: FILE: drivers/ide/trm290.c:217:
+	outw((count * 2) - 1, ch->dma_base+2); /* start DMA */
 	                                  ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1863: FILE: drivers/ide/trm290.c:238:
+static int trm290_dmaproc (ide_dma_action_t func, struct ata_device *drive, struct request *rq)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1901: FILE: drivers/scsi/ide-scsi.c:433:
+		if (test_bit (PC_WRITING, &pc->flags))

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ide_dma_action_t' should also have an identifier name
#1942: FILE: include/linux/ide.h:435:
+	int (*udma)(ide_dma_action_t, struct ata_device *, struct request *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_device *' should also have an identifier name
#1942: FILE: include/linux/ide.h:435:
+	int (*udma)(ide_dma_action_t, struct ata_device *, struct request *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct request *' should also have an identifier name
#1942: FILE: include/linux/ide.h:435:
+	int (*udma)(ide_dma_action_t, struct ata_device *, struct request *);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1944: FILE: include/linux/ide.h:437:
+	int (*udma_start) (struct ata_device *, struct request *rq);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_device *' should also have an identifier name
#1944: FILE: include/linux/ide.h:437:
+	int (*udma_start) (struct ata_device *, struct request *rq);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1945: FILE: include/linux/ide.h:438:
+	int (*udma_stop) (struct ata_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_device *' should also have an identifier name
#1945: FILE: include/linux/ide.h:438:
+	int (*udma_stop) (struct ata_device *);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1947: FILE: include/linux/ide.h:440:
+	int (*udma_read) (struct ata_device *, struct request *rq);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_device *' should also have an identifier name
#1947: FILE: include/linux/ide.h:440:
+	int (*udma_read) (struct ata_device *, struct request *rq);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1948: FILE: include/linux/ide.h:441:
+	int (*udma_write) (struct ata_device *, struct request *rq);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_device *' should also have an identifier name
#1948: FILE: include/linux/ide.h:441:
+	int (*udma_write) (struct ata_device *, struct request *rq);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1950: FILE: include/linux/ide.h:443:
+	int (*udma_irq_status) (struct ata_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_device *' should also have an identifier name
#1950: FILE: include/linux/ide.h:443:
+	int (*udma_irq_status) (struct ata_device *);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1952: FILE: include/linux/ide.h:445:
+	void (*udma_timeout) (struct ata_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_device *' should also have an identifier name
#1952: FILE: include/linux/ide.h:445:
+	void (*udma_timeout) (struct ata_device *);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1953: FILE: include/linux/ide.h:446:
+	void (*udma_lost_irq) (struct ata_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_device *' should also have an identifier name
#1953: FILE: include/linux/ide.h:446:
+	void (*udma_lost_irq) (struct ata_device *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1962: FILE: include/linux/ide.h:884:
+extern void udma_enable(struct ata_device *, int, int);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_device *' should also have an identifier name
#1962: FILE: include/linux/ide.h:884:
+extern void udma_enable(struct ata_device *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1962: FILE: include/linux/ide.h:884:
+extern void udma_enable(struct ata_device *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1962: FILE: include/linux/ide.h:884:
+extern void udma_enable(struct ata_device *, int, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1963: FILE: include/linux/ide.h:885:
+extern int udma_black_list(struct ata_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_device *' should also have an identifier name
#1963: FILE: include/linux/ide.h:885:
+extern int udma_black_list(struct ata_device *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1964: FILE: include/linux/ide.h:886:
+extern int udma_white_list(struct ata_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_device *' should also have an identifier name
#1964: FILE: include/linux/ide.h:886:
+extern int udma_white_list(struct ata_device *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1965: FILE: include/linux/ide.h:887:
+extern void udma_timeout(struct ata_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_device *' should also have an identifier name
#1965: FILE: include/linux/ide.h:887:
+extern void udma_timeout(struct ata_device *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1966: FILE: include/linux/ide.h:888:
+extern void udma_lost_irq(struct ata_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_device *' should also have an identifier name
#1966: FILE: include/linux/ide.h:888:
+extern void udma_lost_irq(struct ata_device *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1967: FILE: include/linux/ide.h:889:
+extern int udma_start(struct ata_device *, struct request *rq);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_device *' should also have an identifier name
#1967: FILE: include/linux/ide.h:889:
+extern int udma_start(struct ata_device *, struct request *rq);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1968: FILE: include/linux/ide.h:890:
+extern int udma_stop(struct ata_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_device *' should also have an identifier name
#1968: FILE: include/linux/ide.h:890:
+extern int udma_stop(struct ata_device *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1969: FILE: include/linux/ide.h:891:
+extern int udma_read(struct ata_device *, struct request *rq);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_device *' should also have an identifier name
#1969: FILE: include/linux/ide.h:891:
+extern int udma_read(struct ata_device *, struct request *rq);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1970: FILE: include/linux/ide.h:892:
+extern int udma_write(struct ata_device *, struct request *rq);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_device *' should also have an identifier name
#1970: FILE: include/linux/ide.h:892:
+extern int udma_write(struct ata_device *, struct request *rq);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1971: FILE: include/linux/ide.h:893:
+extern int udma_irq_status(struct ata_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_device *' should also have an identifier name
#1971: FILE: include/linux/ide.h:893:
+extern int udma_irq_status(struct ata_device *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1973: FILE: include/linux/ide.h:895:
+extern int ata_do_udma(unsigned int reading, struct ata_device *drive, struct request *rq);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000460479.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 19 errors, 76 warnings, 71 checks, 1778 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000460479.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
