WARNING:TYPO_SPELLING: 'EXTRAVERSION' may be misspelled - perhaps 'EXTROVERSION'?
#57: 
//  EXTRAVERSION =-pre9
    ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#58: 
diff -ur 2.5/include/asm-i386/current.h build-2.5/include/asm-i386/current.h

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#66: FILE: include/asm-i386/current.h:5:
+#define GET_CURRENT(reg) \
+	movl %esp, reg;	\
+	andl $0xffffe000, reg; \
+	movl (reg), reg

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'reg' - possible side-effects?
#66: FILE: include/asm-i386/current.h:5:
+#define GET_CURRENT(reg) \
+	movl %esp, reg;	\
+	andl $0xffffe000, reg; \
+	movl (reg), reg

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#67: FILE: include/asm-i386/current.h:6:
+	movl %esp, reg;	\
 	     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#69: FILE: include/asm-i386/current.h:8:
+	movl (reg), reg

WARNING:LINE_SPACING: Missing a blank line after declarations
#83: FILE: include/asm-i386/current.h:17:
+	struct task_struct **ptsk;
+	__asm__("andl %%esp,%0; ":"=r" (ptsk) : "0" (~8191UL));

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#83: FILE: include/asm-i386/current.h:17:
+	__asm__("andl %%esp,%0; ":"=r" (ptsk) : "0" (~8191UL));
 	                         ^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#99: FILE: include/asm-i386/processor.h:398:
+^I0, /* esp0 */ ^I^I^I^I^I^I\$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'tsk' - possible side-effects?
#117: FILE: include/asm-i386/processor.h:451:
+#define KSTK_EIP(tsk)	((tsk)->thread.esp0 ? \
+		((unsigned long*)(tsk)->thread.esp0)[-5] : 0)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#118: FILE: include/asm-i386/processor.h:452:
+		((unsigned long*)(tsk)->thread.esp0)[-5] : 0)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'tsk' - possible side-effects?
#119: FILE: include/asm-i386/processor.h:453:
+#define KSTK_ESP(tsk)	((tsk)->thread.esp0 ? \
+		((unsigned long*)(tsk)->thread.esp0)[-2] : 0)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#120: FILE: include/asm-i386/processor.h:454:
+		((unsigned long*)(tsk)->thread.esp0)[-2] : 0)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#124: FILE: include/asm-i386/processor.h:456:
+#define THREAD_SIZE (2*PAGE_SIZE)
                       ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#137: FILE: include/linux/sched.h:517:
+struct task_struct * alloc_task_struct(void);

CHECK:SPACING: No space is necessary after a cast
#150: FILE: include/linux/sched.h:530:
+	((void*) ((struct task_struct_info*)(tsk))->kstack)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#150: FILE: include/linux/sched.h:530:
+	((void*) ((struct task_struct_info*)(tsk))->kstack)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#150: FILE: include/linux/sched.h:530:
+	((void*) ((struct task_struct_info*)(tsk))->kstack)

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#237: FILE: arch/i386/kernel/init_task.c:20:
+unsigned long init_task_stack[THREAD_SIZE/sizeof(unsigned long)]
                                          ^

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#240: FILE: arch/i386/kernel/init_task.c:22:
 	__attribute__((__section__(".data.init_task"))) =
+	{ (unsigned long)&init_task_union,};

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#246: FILE: arch/i386/kernel/init_task.c:28:
+^I^I{ $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#246: FILE: arch/i386/kernel/init_task.c:28:
+struct task_struct_info init_task_union =
+		{ 

WARNING:INDENTED_LABEL: labels should not be indented
#247: FILE: arch/i386/kernel/init_task.c:29:
+			task: INIT_TASK(init_task_union.task),

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#248: FILE: arch/i386/kernel/init_task.c:30:
+			users: ATOMIC_INIT(1),
 			     ^

WARNING:INDENTED_LABEL: labels should not be indented
#248: FILE: arch/i386/kernel/init_task.c:30:
+			users: ATOMIC_INIT(1),

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#249: FILE: arch/i386/kernel/init_task.c:31:
+			kstack: init_task_stack
 			      ^

WARNING:INDENTED_LABEL: labels should not be indented
#249: FILE: arch/i386/kernel/init_task.c:31:
+			kstack: init_task_stack

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#262: FILE: arch/i386/kernel/irq.c:223:
+		esp += sizeof(void*);

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#277: FILE: arch/i386/kernel/process.c:585:
+	esp0 += THREAD_SIZE - SMP_CACHE_BYTES * ((unsigned long)p % (1504/SMP_CACHE_BYTES));
 	                                                                 ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#373: FILE: kernel/fork.c:70:
+static kmem_cache_t * tsk_cache;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#375: FILE: kernel/fork.c:72:
+struct task_struct * alloc_task_struct(void)

WARNING:LINE_SPACING: Missing a blank line after declarations
#378: FILE: kernel/fork.c:75:
+	struct task_struct_info *f = kmem_cache_alloc(tsk_cache, GFP_KERNEL);
+	if (!f)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#380: FILE: kernel/fork.c:77:
+	f->kstack = (void*)__get_free_pages(GFP_KERNEL,ARCH_STACK_ORDER);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#380: FILE: kernel/fork.c:77:
+	f->kstack = (void*)__get_free_pages(GFP_KERNEL,ARCH_STACK_ORDER);
 	                                              ^

ERROR:POINTER_LOCATION: "(foo**)" should be "(foo **)"
#385: FILE: kernel/fork.c:82:
+	*(void**)f->kstack = &f->task;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#386: FILE: kernel/fork.c:83:
+^Iatomic_set(&f->users, 1);^I$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#392: FILE: kernel/fork.c:89:
+	struct task_struct_info *f = (struct task_struct_info*)tsk;

WARNING:LINE_SPACING: Missing a blank line after declarations
#393: FILE: kernel/fork.c:90:
+	struct task_struct_info *f = (struct task_struct_info*)tsk;
+	atomic_inc(&f->users);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#398: FILE: kernel/fork.c:95:
+	struct task_struct_info *f = (struct task_struct_info*)tsk;

WARNING:LINE_SPACING: Missing a blank line after declarations
#399: FILE: kernel/fork.c:96:
+	struct task_struct_info *f = (struct task_struct_info*)tsk;
+	if(atomic_dec_and_test(&f->users)) {

ERROR:SPACING: space required before the open parenthesis '('
#399: FILE: kernel/fork.c:96:
+	if(atomic_dec_and_test(&f->users)) {

CHECK:SPACING: No space is necessary after a cast
#400: FILE: kernel/fork.c:97:
+		free_pages((unsigned long) f->kstack, ARCH_STACK_ORDER);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#408: FILE: kernel/fork.c:105:
+	tsk_cache = kmem_cache_create("task_cache",
+					 sizeof(struct task_struct_info),

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000487235.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 21 errors, 11 warnings, 11 checks, 316 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000487235.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
