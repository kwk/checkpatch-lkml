ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#79: FILE: drivers/i2c/i2c-core.c:36:
+static int i2c_stop_timer(struct i2c_adapter * adap);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#80: FILE: drivers/i2c/i2c-core.c:37:
+static void i2c_start_timer(struct i2c_adapter * adap,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#81: FILE: drivers/i2c/i2c-core.c:38:
+			    struct i2c_op_q_entry * entry);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#103: FILE: drivers/i2c/i2c-core.c:155:
+^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#148: FILE: drivers/i2c/i2c-core.c:622:
+static void i2c_start_entry(struct i2c_adapter * adap,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#149: FILE: drivers/i2c/i2c-core.c:623:
+			    struct i2c_op_q_entry * entry)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#169: FILE: drivers/i2c/i2c-core.c:643:
+/* Get the first entry off the head of the queue and lock it there.
+   The entry is guaranteed to remain first in the list and the handler

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#170: FILE: drivers/i2c/i2c-core.c:644:
+   not be called until i2c_entry_put() is called. */

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#171: FILE: drivers/i2c/i2c-core.c:645:
+static struct i2c_op_q_entry *_i2c_entry_get(struct i2c_adapter * adap)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#174: FILE: drivers/i2c/i2c-core.c:647:
+	struct i2c_op_q_entry * entry = NULL;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#177: FILE: drivers/i2c/i2c-core.c:650:
+		struct list_head * link = adap->q.next;

WARNING:LINE_SPACING: Missing a blank line after declarations
#178: FILE: drivers/i2c/i2c-core.c:651:
+		struct list_head * link = adap->q.next;
+		entry = list_entry(link, struct i2c_op_q_entry, link);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#179: FILE: drivers/i2c/i2c-core.c:652:
+		if (entry_completed(entry))
[...]
+		else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#181: FILE: drivers/i2c/i2c-core.c:654:
+		else {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#185: FILE: drivers/i2c/i2c-core.c:658:
+			/* This is subtle.  If we increment the
+			   usecount and the value is 1, that means it

WARNING:TYPO_SPELLING: 'tha' may be misspelled - perhaps 'than'?
#188: FILE: drivers/i2c/i2c-core.c:661:
+			   and is between tha decrement and the
 			                  ^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#192: FILE: drivers/i2c/i2c-core.c:665:
+			   started. */

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using '_i2c_entry_get', this function's name, in a string
#199: FILE: drivers/i2c/i2c-core.c:672:
+	pr_debug("_i2c_entry_get %p %p\n", adap, entry);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#203: FILE: drivers/i2c/i2c-core.c:676:
+struct i2c_op_q_entry *i2c_entry_get(struct i2c_adapter * adap)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#206: FILE: drivers/i2c/i2c-core.c:679:
+	struct i2c_op_q_entry * entry;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#216: FILE: drivers/i2c/i2c-core.c:687:
+void i2c_entry_put(struct i2c_adapter * adap,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#217: FILE: drivers/i2c/i2c-core.c:688:
+		   struct i2c_op_q_entry * entry)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#220: FILE: drivers/i2c/i2c-core.c:691:
+	struct i2c_op_q_entry * new_entry = NULL;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#225: FILE: drivers/i2c/i2c-core.c:696:
+	/* Subtle reasons why we don't need a lock before the dec, see
+	   the get routine for more details. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#225: FILE: drivers/i2c/i2c-core.c:696:
+	   the get routine for more details. */

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#249: FILE: drivers/i2c/i2c-core.c:720:
+static void i2c_start_timer(struct i2c_adapter * adap,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#250: FILE: drivers/i2c/i2c-core.c:721:
+			    struct i2c_op_q_entry * entry)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#261: FILE: drivers/i2c/i2c-core.c:732:
+	/* This won't be polled from the user code, so
+	   start a timer to poll it. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#261: FILE: drivers/i2c/i2c-core.c:732:
+	   start a timer to poll it. */

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#263: FILE: drivers/i2c/i2c-core.c:734:
+	if (! t->running) {
 	    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#265: FILE: drivers/i2c/i2c-core.c:736:
+		t->timer.data = (unsigned long) t;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#276: FILE: drivers/i2c/i2c-core.c:747:
+/* Returns true if the timer is stopped (or was not running), false if
+   not.  Must be called with the timer lock held. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#276: FILE: drivers/i2c/i2c-core.c:747:
+   not.  Must be called with the timer lock held. */

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#277: FILE: drivers/i2c/i2c-core.c:748:
+static int i2c_stop_timer(struct i2c_adapter * adap)

CHECK:SPACING: No space is necessary after a cast
#284: FILE: drivers/i2c/i2c-core.c:755:
+	struct i2c_timer      * t = (void *) data;

ERROR:POINTER_LOCATION: "foo      * bar" should be "foo      *bar"
#284: FILE: drivers/i2c/i2c-core.c:755:
+	struct i2c_timer      * t = (void *) data;

ERROR:POINTER_LOCATION: "foo    * bar" should be "foo    *bar"
#285: FILE: drivers/i2c/i2c-core.c:756:
+	struct i2c_adapter    * adap;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#287: FILE: drivers/i2c/i2c-core.c:758:
+	struct i2c_op_q_entry * entry;

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'i2c_handle_timer', this function's name, in a string
#303: FILE: drivers/i2c/i2c-core.c:774:
+	pr_debug("i2c_handle_timer: %p %p\n", adap, entry);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#315: FILE: drivers/i2c/i2c-core.c:786:
+		/* We raced in timer deletion, just restart the
+		   timer if necessary. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#315: FILE: drivers/i2c/i2c-core.c:786:
+		   timer if necessary. */

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'i2c_op_done', this function's name, in a string
#323: FILE: drivers/i2c/i2c-core.c:794:
+	pr_debug("i2c_op_done: %p %p\n", adap, e);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#326: FILE: drivers/i2c/i2c-core.c:797:
+		/* We are the lucky winner!  We get to clean up the
+		   entry. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#326: FILE: drivers/i2c/i2c-core.c:797:
+		   entry. */

WARNING:LINE_SPACING: Missing a blank line after declarations
#330: FILE: drivers/i2c/i2c-core.c:801:
+			struct i2c_timer *t = adap->timer;
+			spin_lock_irqsave(&t->lock, flags);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#333: FILE: drivers/i2c/i2c-core.c:804:
+				/* If we are unable to stop the timer, that
+				   means the timer has gone off but has not

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#336: FILE: drivers/i2c/i2c-core.c:807:
+				   can detect this. */

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#347: FILE: drivers/i2c/i2c-core.c:818:
+static void i2c_wait_complete(struct i2c_op_q_entry * entry)

WARNING:LINE_SPACING: Missing a blank line after declarations
#350: FILE: drivers/i2c/i2c-core.c:821:
+	struct completion *done = entry->handler_data;
+	pr_debug("i2c_wait_complete %p\n", entry);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'i2c_wait_complete', this function's name, in a string
#350: FILE: drivers/i2c/i2c-core.c:821:
+	pr_debug("i2c_wait_complete %p\n", entry);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#354: FILE: drivers/i2c/i2c-core.c:825:
+static void i2c_perform_op_wait(struct i2c_adapter * adap,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#355: FILE: drivers/i2c/i2c-core.c:826:
+				struct i2c_op_q_entry * entry)

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'i2c_perform_op_wait', this function's name, in a string
#361: FILE: drivers/i2c/i2c-core.c:832:
+	pr_debug("i2c_perform_op_wait %p %p\n", adap, entry);

WARNING:LINE_SPACING: Missing a blank line after declarations
#380: FILE: drivers/i2c/i2c-core.c:851:
+		struct completion start;
+		init_completion(&start);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#389: FILE: drivers/i2c/i2c-core.c:860:
+			/* Operation was interrupted.  There
+			   is a race, we can't use the

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#390: FILE: drivers/i2c/i2c-core.c:861:
+			   wait_for_completion return code. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#399: FILE: drivers/i2c/i2c-core.c:870:
+	/* Once the operation is started, we will not
+	   interrupt it. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#399: FILE: drivers/i2c/i2c-core.c:870:
+	   interrupt it. */

WARNING:LINE_SPACING: Missing a blank line after declarations
#402: FILE: drivers/i2c/i2c-core.c:873:
+		unsigned int timeout = entry->call_again_us;
+		timeout += (USEC_PER_JIFFIE - 1);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#413: FILE: drivers/i2c/i2c-core.c:884:
+static int i2c_transfer_entry(struct i2c_adapter * adap,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#414: FILE: drivers/i2c/i2c-core.c:885:
+			      struct i2c_op_q_entry * entry)

ERROR:CODE_INDENT: code indent should use tabs where possible
#423: FILE: drivers/i2c/i2c-core.c:894:
+ ^I ^Idev_dbg(&adap->dev, "master_xfer: with %d msgs.\n",$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#423: FILE: drivers/i2c/i2c-core.c:894:
+ ^I ^Idev_dbg(&adap->dev, "master_xfer: with %d msgs.\n",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#423: FILE: drivers/i2c/i2c-core.c:894:
+ ^I ^Idev_dbg(&adap->dev, "master_xfer: with %d msgs.\n",$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#437: FILE: drivers/i2c/i2c-core.c:909:
+int i2c_transfer(struct i2c_adapter * adap, struct i2c_msg msgs[],int num)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#437: FILE: drivers/i2c/i2c-core.c:909:
+int i2c_transfer(struct i2c_adapter * adap, struct i2c_msg msgs[],int num)
                                                                  ^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#443: FILE: drivers/i2c/i2c-core.c:915:
+	if (!entry)
+	    return -ENOMEM;

WARNING:TABSTOP: Statements should start on a tabstop
#444: FILE: drivers/i2c/i2c-core.c:916:
+	    return -ENOMEM;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#488: FILE: drivers/i2c/i2c-core.c:941:
+	if (ret < 0)
+	    return ret;

WARNING:TABSTOP: Statements should start on a tabstop
#489: FILE: drivers/i2c/i2c-core.c:942:
+	    return ret;

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#494: FILE: drivers/i2c/i2c-core.c:947:
+	return (ret == 1 )? count : ret;
 	                  ^

ERROR:SPACING: space prohibited before that close parenthesis ')'
#494: FILE: drivers/i2c/i2c-core.c:947:
+	return (ret == 1 )? count : ret;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#527: FILE: drivers/i2c/i2c-core.c:966:
+	if (ret < 0)
+	    return ret;

WARNING:TABSTOP: Statements should start on a tabstop
#528: FILE: drivers/i2c/i2c-core.c:967:
+	    return ret;

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#544: FILE: drivers/i2c/i2c-core.c:975:
+	return (ret == 1 )? count : ret;
 	                  ^

ERROR:SPACING: space prohibited before that close parenthesis ')'
#544: FILE: drivers/i2c/i2c-core.c:975:
+	return (ret == 1 )? count : ret;

WARNING:LINE_SPACING: Missing a blank line after declarations
#558: FILE: drivers/i2c/i2c-core.c:1358:
+	int i;
+	if (i2c_smbus_xfer(client->adapter,client->addr,client->flags,

ERROR:SPACING: space required after that ',' (ctx:VxV)
#558: FILE: drivers/i2c/i2c-core.c:1358:
+	if (i2c_smbus_xfer(client->adapter,client->addr,client->flags,
 	                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#558: FILE: drivers/i2c/i2c-core.c:1358:
+	if (i2c_smbus_xfer(client->adapter,client->addr,client->flags,
 	                                               ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#559: FILE: drivers/i2c/i2c-core.c:1359:
+^I                      I2C_SMBUS_READ,command,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#559: FILE: drivers/i2c/i2c-core.c:1359:
+	if (i2c_smbus_xfer(client->adapter,client->addr,client->flags,
+	                      I2C_SMBUS_READ,command,

ERROR:SPACING: space required after that ',' (ctx:VxV)
#559: FILE: drivers/i2c/i2c-core.c:1359:
+	                      I2C_SMBUS_READ,command,
 	                                    ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#560: FILE: drivers/i2c/i2c-core.c:1360:
+^I                      I2C_SMBUS_BLOCK_DATA,&data))$

ERROR:SPACING: space required after that ',' (ctx:VxO)
#560: FILE: drivers/i2c/i2c-core.c:1360:
+	                      I2C_SMBUS_BLOCK_DATA,&data))
 	                                          ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#560: FILE: drivers/i2c/i2c-core.c:1360:
+	                      I2C_SMBUS_BLOCK_DATA,&data))
 	                                           ^

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#562: FILE: drivers/i2c/i2c-core.c:1362:
+		return -1;
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#562: FILE: drivers/i2c/i2c-core.c:1362:
+	else {

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#564: FILE: drivers/i2c/i2c-core.c:1364:
+			values[i-1] = data.block[i];
 			        ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#596: FILE: drivers/i2c/i2c-core.c:1386:
 
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#597: FILE: drivers/i2c/i2c-core.c:1387:
+static void i2c_smbus_complete_entry(struct i2c_adapter * adap,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#598: FILE: drivers/i2c/i2c-core.c:1388:
+				     struct i2c_op_q_entry * entry)

ERROR:SPACING: space required before the open parenthesis '('
#603: FILE: drivers/i2c/i2c-core.c:1393:
+	if(entry->result >= 0 && entry->swpec &&

ERROR:SPACING: space required before the open parenthesis '('
#609: FILE: drivers/i2c/i2c-core.c:1399:
+		if(i2c_smbus_check_pec(entry->smbus.addr,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#618: FILE: drivers/i2c/i2c-core.c:1408:
+static void i2c_smbus_format_entry(struct i2c_adapter * adap,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#619: FILE: drivers/i2c/i2c-core.c:1409:
+				   struct i2c_op_q_entry * entry)

ERROR:SPACING: space required before the open parenthesis '('
#624: FILE: drivers/i2c/i2c-core.c:1414:
+	if((entry->smbus.flags & I2C_CLIENT_PEC) &&

ERROR:SPACING: space required before the open parenthesis '('
#627: FILE: drivers/i2c/i2c-core.c:1417:
+		if(entry->smbus.read_write == I2C_SMBUS_READ &&

CHECK:BRACES: braces {} should be used on all arms of this statement
#627: FILE: drivers/i2c/i2c-core.c:1417:
+		if(entry->smbus.read_write == I2C_SMBUS_READ &&
[...]
+		else if(entry->smbus.size == I2C_SMBUS_PROC_CALL)
[...]
+		else if(entry->smbus.size == I2C_SMBUS_BLOCK_PROC_CALL) {
[...]
+		} else if(entry->smbus.read_write == I2C_SMBUS_WRITE &&
[...]

ERROR:SPACING: space required before the open parenthesis '('
#630: FILE: drivers/i2c/i2c-core.c:1420:
+		else if(entry->smbus.size == I2C_SMBUS_PROC_CALL)

ERROR:SPACING: space required before the open parenthesis '('
#632: FILE: drivers/i2c/i2c-core.c:1422:
+		else if(entry->smbus.size == I2C_SMBUS_BLOCK_PROC_CALL) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#634: FILE: drivers/i2c/i2c-core.c:1424:
+			unsigned char *data = entry->smbus.data->block;
+			i2c_smbus_add_pec(entry->smbus.addr,

ERROR:CODE_INDENT: code indent should use tabs where possible
#636: FILE: drivers/i2c/i2c-core.c:1426:
+^I^I                          I2C_SMBUS_BLOCK_DATA,$

ERROR:SPACING: space required before the open parenthesis '('
#640: FILE: drivers/i2c/i2c-core.c:1430:
+		} else if(entry->smbus.read_write == I2C_SMBUS_WRITE &&

ERROR:CODE_INDENT: code indent should use tabs where possible
#641: FILE: drivers/i2c/i2c-core.c:1431:
+^I^I          entry->smbus.size != I2C_SMBUS_QUICK &&$

ERROR:CODE_INDENT: code indent should use tabs where possible
#642: FILE: drivers/i2c/i2c-core.c:1432:
+^I^I          entry->smbus.size != I2C_SMBUS_I2C_BLOCK_DATA)$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#653: FILE: drivers/i2c/i2c-core.c:1443:
+static void i2c_smbus_emu_complete(struct i2c_adapter * adap,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#654: FILE: drivers/i2c/i2c-core.c:1444:
+				   struct i2c_op_q_entry * entry)

ERROR:SPACING: space required before the open parenthesis '('
#665: FILE: drivers/i2c/i2c-core.c:1453:
+	switch(entry->smbus.size) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#672: FILE: drivers/i2c/i2c-core.c:1460:
+^Icase I2C_SMBUS_WORD_DATA: $

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#674: FILE: drivers/i2c/i2c-core.c:1462:
+		entry->smbus.data->word = msgbuf1[0]|(msgbuf1[1] << 8);
 		                                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#680: FILE: drivers/i2c/i2c-core.c:1468:
+			entry->smbus.data->block[i+1] = msgbuf1[i];
 			                          ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#689: FILE: drivers/i2c/i2c-core.c:1477:
+				struct i2c_op_q_entry * entry)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#692: FILE: drivers/i2c/i2c-core.c:1480:
+	/* So we need to generate a series of msgs. In the case of
+	   writing, we need to use only one message; when reading, we

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#694: FILE: drivers/i2c/i2c-core.c:1482:
+	   keep the code below somewhat simpler. */

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#697: FILE: drivers/i2c/i2c-core.c:1485:
+	int num = entry->smbus.read_write == I2C_SMBUS_READ?2:1;
 	                                                   ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#697: FILE: drivers/i2c/i2c-core.c:1485:
+	int num = entry->smbus.read_write == I2C_SMBUS_READ?2:1;
 	                                                     ^

ERROR:SPACING: space required before the open parenthesis '('
#713: FILE: drivers/i2c/i2c-core.c:1501:
+	switch(entry->smbus.size) {

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#719: FILE: drivers/i2c/i2c-core.c:1506:
+				((entry->smbus.read_write==I2C_SMBUS_READ)
 				                         ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#734: FILE: drivers/i2c/i2c-core.c:1518:
+		if (entry->smbus.read_write == I2C_SMBUS_READ)
[...]
 		else {
[...]

CHECK:BRACES: braces {} should be used on all arms of this statement
#744: FILE: drivers/i2c/i2c-core.c:1526:
+		if (entry->smbus.read_write == I2C_SMBUS_READ)
[...]
 		else {
[...]

ERROR:SPACING: space required before the open parenthesis '('
#786: FILE: drivers/i2c/i2c-core.c:1557:
+			if(entry->smbus.size == I2C_SMBUS_BLOCK_DATA_PEC)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#790: FILE: drivers/i2c/i2c-core.c:1560:
+				msgbuf0[i] = entry->smbus.data->block[i-1];
 				                                       ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#859: FILE: drivers/i2c/i2c-core.c:1598:
+/* Simulate a SMBus command using the i2c protocol $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#860: FILE: drivers/i2c/i2c-core.c:1599:
+/* Simulate a SMBus command using the i2c protocol 
+   No checking of parameters is done!  */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#860: FILE: drivers/i2c/i2c-core.c:1599:
+   No checking of parameters is done!  */

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#861: FILE: drivers/i2c/i2c-core.c:1600:
+static s32 i2c_smbus_xfer_emulated(struct i2c_adapter * adap,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#862: FILE: drivers/i2c/i2c-core.c:1601:
+				   struct i2c_op_q_entry * entry)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#875: FILE: drivers/i2c/i2c-core.c:1613:
+s32 i2c_smbus_xfer(struct i2c_adapter * adap, u16 addr, unsigned short flags,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#922: FILE: drivers/i2c/i2c-core.c:1621:
+
+

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#924: FILE: drivers/i2c/i2c-core.c:1623:
+	if (!entry)
+	    return -ENOMEM;

WARNING:TABSTOP: Statements should start on a tabstop
#925: FILE: drivers/i2c/i2c-core.c:1624:
+	    return -ENOMEM;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "adap->algo->poll"
#961: FILE: drivers/i2c/i2c-core.c:1659:
+	return adap->algo->poll != NULL;

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:TRAILING_WHITESPACE: trailing whitespace
#969: FILE: drivers/i2c/i2c-core.c:1667:
+    $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#969: FILE: drivers/i2c/i2c-core.c:1667:
+    $

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#984: FILE: drivers/i2c/i2c-core.c:1682:
+		return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

CHECK:BRACES: braces {} should be used on all arms of this statement
#1007: FILE: drivers/i2c/i2c-core.c:1705:
+	if (adap->q.next == &entry->link) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1011: FILE: drivers/i2c/i2c-core.c:1709:
+	} else

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1022: FILE: drivers/i2c/i2c-core.c:1741:
+EXPORT_SYMBOL(i2c_op_done);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1033: FILE: drivers/i2c/i2c-core.c:1763:
+EXPORT_SYMBOL(i2c_non_blocking_capable);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1034: FILE: drivers/i2c/i2c-core.c:1764:
+EXPORT_SYMBOL(i2c_poll);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1035: FILE: drivers/i2c/i2c-core.c:1765:
+EXPORT_SYMBOL(i2c_non_blocking_op);

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#1052: FILE: include/linux/i2c.h:39:
+#include <asm/atomic.h>

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1069: FILE: include/linux/i2c.h:63:
+extern int i2c_transfer(struct i2c_adapter *adap, struct i2c_msg *msg,int num);
                                                                      ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1069: FILE: include/linux/i2c.h:63:
+extern int i2c_transfer(struct i2c_adapter *adap, struct i2c_msg *msg,int num);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1077: FILE: include/linux/i2c.h:100:
+extern s32 i2c_smbus_read_block_data(struct i2c_client * client,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1077: FILE: include/linux/i2c.h:100:
+extern s32 i2c_smbus_read_block_data(struct i2c_client * client,

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1083: FILE: include/linux/i2c.h:106:
+/* Non-blocking interface.  The user should fill out the public
+   portions of the entry structure.  All data in the entry structure

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1085: FILE: include/linux/i2c.h:108:
+   called with the entry. */

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1088: FILE: include/linux/i2c.h:111:
+extern int i2c_non_blocking_op(struct i2c_client *client,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1092: FILE: include/linux/i2c.h:115:
+extern int i2c_non_blocking_capable(struct i2c_adapter *adap);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1095: FILE: include/linux/i2c.h:118:
+/* Poll the i2c interface.  This should only be called in a situation
+   where scheduling and interrupts are off.  You should put the amount

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1096: FILE: include/linux/i2c.h:119:
+   of microseconds between calls in us_since_last_call. */

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1097: FILE: include/linux/i2c.h:120:
+extern void i2c_poll(struct i2c_client *client,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1100: FILE: include/linux/i2c.h:123:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1115: FILE: include/linux/i2c.h:217:
+ * $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1122: FILE: include/linux/i2c.h:224:
+/* Called from an non-blocking interface to get the current working
+   entry.  Returns NULL if there is none.  This is primarily for

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1125: FILE: include/linux/i2c.h:227:
+   must call i2c_entry_put() on it. */

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1126: FILE: include/linux/i2c.h:228:
+struct i2c_op_q_entry *i2c_entry_get(struct i2c_adapter * adap);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1127: FILE: include/linux/i2c.h:229:
+void i2c_entry_put(struct i2c_adapter * adap,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1128: FILE: include/linux/i2c.h:230:
+		   struct i2c_op_q_entry * entry);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1131: FILE: include/linux/i2c.h:233:
+/* Called from an non-blocking interface to report that an operation
+   has completed.  Can be called from interrupt context. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1131: FILE: include/linux/i2c.h:233:
+   has completed.  Can be called from interrupt context. */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1152: FILE: include/linux/i2c.h:250:
+^Iint (*master_xfer)(struct i2c_adapter *adap,struct i2c_msg *msgs, $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1152: FILE: include/linux/i2c.h:250:
+	int (*master_xfer)(struct i2c_adapter *adap,struct i2c_msg *msgs, 
 	                                           ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1154: FILE: include/linux/i2c.h:252:
+^Iint (*smbus_xfer)(struct i2c_adapter *adap, u16 addr, $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1156: FILE: include/linux/i2c.h:254:
+			  u8 command, int size, union i2c_smbus_data * data);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1159: FILE: include/linux/i2c.h:257:
+	/* These are like the previous calls, but they will only start
+	   the operation.  The poll call will be called periodically

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1168: FILE: include/linux/i2c.h:266:
+	   should set the result and call i2c_op_done(). */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1174: FILE: include/linux/i2c.h:272:
+	/* us_since_last_poll is the amount of time since the last
+	   time poll was called. Note that this may be *less* than the

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1178: FILE: include/linux/i2c.h:276:
+	   poll.  The value may be zero. */

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#1194: FILE: include/linux/i2c.h:298:
+	spinlock_t lock;

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#1212: FILE: include/linux/i2c.h:325:
+	spinlock_t q_lock;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1218: FILE: include/linux/i2c.h:330:
+	/* Used to time non-blocking operations.  The sequence is used
+	   to handle race conditions in the timer handler. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1218: FILE: include/linux/i2c.h:330:
+	   to handle race conditions in the timer handler. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1251: FILE: include/linux/i2c.h:511:
+	/* The result will be set to the result of the operation when
+	   it completes. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1251: FILE: include/linux/i2c.h:511:
+	   it completes. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1256: FILE: include/linux/i2c.h:516:
+	/* Public interface.  The user should set these up (and the
+	   proper structure below). */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1256: FILE: include/linux/i2c.h:516:
+	   proper structure below). */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1260: FILE: include/linux/i2c.h:520:
+	/* Handler may be called from interrupt context, so be
+	   careful. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1260: FILE: include/linux/i2c.h:520:
+	   careful. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1265: FILE: include/linux/i2c.h:525:
+	/* Note that this is not a union because an smbus operation
+	   may be converted into an i2c operation (thus both

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1267: FILE: include/linux/i2c.h:527:
+	   by the driver. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1274: FILE: include/linux/i2c.h:534:
+		/* Addr and flags are filled in by the non-blocking
+		   send routine that takes a client. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1274: FILE: include/linux/i2c.h:534:
+		   send routine that takes a client. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1282: FILE: include/linux/i2c.h:542:
+		/* Note that the size is *not* the length of the data.
+		   It is the transaction type, like I2C_SMBUS_QUICK

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1286: FILE: include/linux/i2c.h:546:
+		   and receive. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1293: FILE: include/linux/i2c.h:553:
+	/* For use by the bus interface.  The bus interface sets the
+	   timeout in microseconds until the next poll operation.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1298: FILE: include/linux/i2c.h:558:
+	   yet. */

WARNING:TYPO_SPELLING: 'wierd' may be misspelled - perhaps 'weird'?
#1315: FILE: include/linux/i2c.h:575:
+	/* It's wierd, but we use a usecount to track if an q entry is
 	        ^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1316: FILE: include/linux/i2c.h:576:
+	/* It's wierd, but we use a usecount to track if an q entry is
+	   in use and when it should be reported back to the user. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1316: FILE: include/linux/i2c.h:576:
+	   in use and when it should be reported back to the user. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1320: FILE: include/linux/i2c.h:580:
+	/* These are here for SMBus emulation over I2C.  I don't like
+	   them taking this much room in the data structure, but they

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1321: FILE: include/linux/i2c.h:581:
+	   need to be available in this case. */

ERROR:CODE_INDENT: code indent should use tabs where possible
#1351: FILE: include/linux/i2c.h:616:
+                             I2C_FUNC_SMBUS_WRITE_BYTE)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1351: FILE: include/linux/i2c.h:616:
+                             I2C_FUNC_SMBUS_WRITE_BYTE)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1353: FILE: include/linux/i2c.h:618:
+                                  I2C_FUNC_SMBUS_WRITE_BYTE_DATA)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1353: FILE: include/linux/i2c.h:618:
+                                  I2C_FUNC_SMBUS_WRITE_BYTE_DATA)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1355: FILE: include/linux/i2c.h:620:
+                                  I2C_FUNC_SMBUS_WRITE_WORD_DATA)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1355: FILE: include/linux/i2c.h:620:
+                                  I2C_FUNC_SMBUS_WRITE_WORD_DATA)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1357: FILE: include/linux/i2c.h:622:
+                                   I2C_FUNC_SMBUS_WRITE_BLOCK_DATA)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1357: FILE: include/linux/i2c.h:622:
+                                   I2C_FUNC_SMBUS_WRITE_BLOCK_DATA)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1359: FILE: include/linux/i2c.h:624:
+                                  I2C_FUNC_SMBUS_WRITE_I2C_BLOCK)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1359: FILE: include/linux/i2c.h:624:
+                                  I2C_FUNC_SMBUS_WRITE_I2C_BLOCK)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1361: FILE: include/linux/i2c.h:626:
+                                    I2C_FUNC_SMBUS_WRITE_I2C_BLOCK_2)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1361: FILE: include/linux/i2c.h:626:
+                                    I2C_FUNC_SMBUS_WRITE_I2C_BLOCK_2)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1363: FILE: include/linux/i2c.h:628:
+                                       I2C_FUNC_SMBUS_WRITE_BLOCK_DATA_PEC)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1363: FILE: include/linux/i2c.h:628:
+                                       I2C_FUNC_SMBUS_WRITE_BLOCK_DATA_PEC)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1365: FILE: include/linux/i2c.h:630:
+                                       I2C_FUNC_SMBUS_WRITE_WORD_DATA_PEC)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1365: FILE: include/linux/i2c.h:630:
+                                       I2C_FUNC_SMBUS_WRITE_WORD_DATA_PEC)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1382: FILE: include/linux/i2c.h:640:
+                             I2C_FUNC_SMBUS_BYTE | \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1382: FILE: include/linux/i2c.h:640:
+                             I2C_FUNC_SMBUS_BYTE | \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1383: FILE: include/linux/i2c.h:641:
+                             I2C_FUNC_SMBUS_BYTE_DATA | \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1383: FILE: include/linux/i2c.h:641:
+                             I2C_FUNC_SMBUS_BYTE_DATA | \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1384: FILE: include/linux/i2c.h:642:
+                             I2C_FUNC_SMBUS_WORD_DATA | \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1384: FILE: include/linux/i2c.h:642:
+                             I2C_FUNC_SMBUS_WORD_DATA | \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1385: FILE: include/linux/i2c.h:643:
+                             I2C_FUNC_SMBUS_PROC_CALL | \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1385: FILE: include/linux/i2c.h:643:
+                             I2C_FUNC_SMBUS_PROC_CALL | \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1386: FILE: include/linux/i2c.h:644:
+                             I2C_FUNC_SMBUS_WRITE_BLOCK_DATA | \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1386: FILE: include/linux/i2c.h:644:
+                             I2C_FUNC_SMBUS_WRITE_BLOCK_DATA | \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1387: FILE: include/linux/i2c.h:645:
+                             I2C_FUNC_SMBUS_WRITE_BLOCK_DATA_PEC | \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1387: FILE: include/linux/i2c.h:645:
+                             I2C_FUNC_SMBUS_WRITE_BLOCK_DATA_PEC | \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1388: FILE: include/linux/i2c.h:646:
+                             I2C_FUNC_SMBUS_I2C_BLOCK)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1388: FILE: include/linux/i2c.h:646:
+                             I2C_FUNC_SMBUS_I2C_BLOCK)$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000210156.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 92 errors, 103 warnings, 28 checks, 1293 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000210156.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
