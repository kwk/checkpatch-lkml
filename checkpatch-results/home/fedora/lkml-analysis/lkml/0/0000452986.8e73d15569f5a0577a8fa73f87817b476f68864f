WARNING:TYPO_SPELLING: 'informations' may be misspelled - perhaps 'information'?
#59: 
I was thinking about adding some statistics informations, such
                                            ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#80: 
diff -ur 2.4.19-rc1/Documentation/Configure.help 2.4.19-rc1-emux86-0.2/Documentation/Configure.help

WARNING:TYPO_SPELLING: 'guaranted' may be misspelled - perhaps 'guaranteed'?
#102: FILE: Documentation/Configure.help:4003:
+  atomicity can't be guaranted !
                      ^^^^^^^^^

WARNING:TYPO_SPELLING: 'targetted' may be misspelled - perhaps 'targeted'?
#104: FILE: Documentation/Configure.help:4005:
+  Although it's highly preferable that you only execute programs targetted
                                                                  ^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#112: FILE: Documentation/Configure.help:4013:
+  $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'targetted' may be misspelled - perhaps 'targeted'?
#114: FILE: Documentation/Configure.help:4015:
+  you execute a program not targetted for your CPU. You should recompile
                             ^^^^^^^^^

WARNING:TYPO_SPELLING: 'conditionnal' may be misspelled - perhaps 'conditional'?
#122: FILE: Documentation/Configure.help:4023:
+  from RISC processors, which permit to write many simple conditionnal
                                                           ^^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'targetted' may be misspelled - perhaps 'targeted'?
#130: FILE: Documentation/Configure.help:4031:
+  Although it's highly preferable that you only execute programs targetted
                                                                  ^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#140: FILE: Documentation/Configure.help:4041:
+  $

WARNING:TYPO_SPELLING: 'targetted' may be misspelled - perhaps 'targeted'?
#142: FILE: Documentation/Configure.help:4043:
+  you execute a program not targetted for your CPU. You should recompile
                             ^^^^^^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#178: FILE: arch/i386/kernel/traps.c:89:
+asmlinkage void do_general_protection(struct pt_regs * regs, long error_code);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#227: FILE: arch/i386/kernel/traps.c:417:
+                           char w, char bit32, unsigned char modrm)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#227: FILE: arch/i386/kernel/traps.c:417:
+                           char w, char bit32, unsigned char modrm)$

WARNING:UNNECESSARY_INT: Prefer 'unsigned long' over 'unsigned long int' as the int is unnecessary
#229: FILE: arch/i386/kernel/traps.c:419:
+	unsigned long int offset=0;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#229: FILE: arch/i386/kernel/traps.c:419:
+	unsigned long int offset=0;
 	                        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#235: FILE: arch/i386/kernel/traps.c:425:
+			offset = **from + (((int)*(*from+1)) << 8) +
 			                                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#236: FILE: arch/i386/kernel/traps.c:426:
+				(((int)*(*from+2)) << 16) + (((int)*(*from+3)) << 24);
 				              ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#236: FILE: arch/i386/kernel/traps.c:426:
+				(((int)*(*from+2)) << 16) + (((int)*(*from+3)) << 24);
 				                                          ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#240: FILE: arch/i386/kernel/traps.c:430:
+^I^I$

CHECK:BRACES: braces {} should be used on all arms of this statement
#241: FILE: arch/i386/kernel/traps.c:431:
+		if ((modrm & 0x07) != 0x04)
[...]
+		else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#243: FILE: arch/i386/kernel/traps.c:433:
+		else {

ERROR:SPACING: spaces required around that '=' (ctx:VxO)
#245: FILE: arch/i386/kernel/traps.c:435:
+			sib=*(*from)++;
 			   ^

ERROR:SPACING: space required before that '*' (ctx:OxV)
#245: FILE: arch/i386/kernel/traps.c:435:
+			sib=*(*from)++;
 			    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#253: FILE: arch/i386/kernel/traps.c:443:
+				offset += **from + (((int)*(*from+1)) << 8) +
 				                                 ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#254: FILE: arch/i386/kernel/traps.c:444:
+					(((int)*(*from+2)) << 16) + (((int)*(*from+3)) << 24);
 					              ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#254: FILE: arch/i386/kernel/traps.c:444:
+					(((int)*(*from+2)) << 16) + (((int)*(*from+3)) << 24);
 					                                          ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#261: FILE: arch/i386/kernel/traps.c:451:
+^I$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#265: FILE: arch/i386/kernel/traps.c:455:
+			offset += **from + (((int)*(*from+1)) << 8) +
 			                                 ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#266: FILE: arch/i386/kernel/traps.c:456:
+				(((int)*(*from+2)) << 16) + (((int)*(*from+3)) << 24);
 				              ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#266: FILE: arch/i386/kernel/traps.c:456:
+				(((int)*(*from+2)) << 16) + (((int)*(*from+3)) << 24);
 				                                          ^

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#270: FILE: arch/i386/kernel/traps.c:460:
+		return (void *)offset;  /* return the 32 bits offset */
+	} else { /* 16-bits addressing mode */

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#273: FILE: arch/i386/kernel/traps.c:463:
+			offset = **from + (((int)*(*from+1)) << 8);
 			                                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#291: FILE: arch/i386/kernel/traps.c:481:
+			offset += **from + (((int)*(*from+1)) << 8);
 			                                 ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#298: FILE: arch/i386/kernel/traps.c:488:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#310: FILE: arch/i386/kernel/traps.c:500:
+^I$

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#316: FILE: arch/i386/kernel/traps.c:506:
+	}
+	else if ((modrm & 0xC7) == 0x06) /* 16 bits offset */

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#328: FILE: arch/i386/kernel/traps.c:518:
+
+

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#338: FILE: arch/i386/kernel/traps.c:528:
+		return REG_PTR(regs, reg & 7);
+	else

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#351: FILE: arch/i386/kernel/traps.c:541:
+asmlinkage void do_invalid_op(struct pt_regs * regs, long error_code)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#354: FILE: arch/i386/kernel/traps.c:544:
+		PREFIX_ES=1,
 		         ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#355: FILE: arch/i386/kernel/traps.c:545:
+		PREFIX_CS=2,
 		         ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#356: FILE: arch/i386/kernel/traps.c:546:
+		PREFIX_SS=4,
 		         ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#357: FILE: arch/i386/kernel/traps.c:547:
+		PREFIX_DS=8,
 		         ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#358: FILE: arch/i386/kernel/traps.c:548:
+		PREFIX_FS=16,
 		         ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#359: FILE: arch/i386/kernel/traps.c:549:
+		PREFIX_GS=32,
 		         ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#360: FILE: arch/i386/kernel/traps.c:550:
+		PREFIX_SEG=63,  /* any seg */
 		          ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#361: FILE: arch/i386/kernel/traps.c:551:
+		PREFIX_D32=64,
 		          ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#362: FILE: arch/i386/kernel/traps.c:552:
+		PREFIX_A32=128,
 		          ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#363: FILE: arch/i386/kernel/traps.c:553:
+		PREFIX_LOCK=256,
 		           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#364: FILE: arch/i386/kernel/traps.c:554:
+		PREFIX_REPN=512,
 		           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#365: FILE: arch/i386/kernel/traps.c:555:
+		PREFIX_REP=1024
 		          ^

WARNING:UNNECESSARY_INT: Prefer 'unsigned long' over 'unsigned long int' as the int is unnecessary
#370: FILE: arch/i386/kernel/traps.c:560:
+	unsigned long int *src, *dst;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#373: FILE: arch/i386/kernel/traps.c:563:
+	/* we'll first read all known opcode prefixes, and discard obviously
+	   invalid combinations.*/

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#373: FILE: arch/i386/kernel/traps.c:563:
+	   invalid combinations.*/

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#374: FILE: arch/i386/kernel/traps.c:564:
+	prefixes=0;
 	        ^

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#404: FILE: arch/i386/kernel/traps.c:594:
+		}
+		else if ((*eip & 0xfc) == 0xf0) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#415: FILE: arch/i386/kernel/traps.c:605:
+				printk(KERN_WARNING "Warning ! LOCK prefix found at EIP=0x%08x in"

WARNING:SPLIT_STRING: quoted string split across lines
#416: FILE: arch/i386/kernel/traps.c:606:
+				printk(KERN_WARNING "Warning ! LOCK prefix found at EIP=0x%08x in"
+				       "process %d(%s), has no effect before a software-emulated"

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:MISSING_SPACE: break quoted strings at a space character
#416: FILE: arch/i386/kernel/traps.c:606:
+				printk(KERN_WARNING "Warning ! LOCK prefix found at EIP=0x%08x in"
+				       "process %d(%s), has no effect before a software-emulated"

WARNING:SPLIT_STRING: quoted string split across lines
#417: FILE: arch/i386/kernel/traps.c:607:
+				       "process %d(%s), has no effect before a software-emulated"
+				       "instruction\n", regs->eip, current->pid, current->comm);

WARNING:MISSING_SPACE: break quoted strings at a space character
#417: FILE: arch/i386/kernel/traps.c:607:
+				       "process %d(%s), has no effect before a software-emulated"
+				       "instruction\n", regs->eip, current->pid, current->comm);

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#435: FILE: arch/i386/kernel/traps.c:625:
+		}
+		else if ((*eip & 0xe7) == 0x26) {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#474: FILE: arch/i386/kernel/traps.c:664:
+	if ((*eip == 0x0F) && ((*(eip+1) & 0xF0) == 0x40)) {  /* CMOV* */
 	                             ^

WARNING:MISORDERED_TYPE: type 'short unsigned' should be specified in [[un]signed] [short|int|long|long long] order
#484: FILE: arch/i386/kernel/traps.c:674:
+		static short unsigned cmov_flags[8] = {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#505: FILE: arch/i386/kernel/traps.c:695:
+		cond  = *(eip+1) & 0x0F;
 		             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#511: FILE: arch/i386/kernel/traps.c:701:
+		modrm = *(eip+2);
 		             ^

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#529: FILE: arch/i386/kernel/traps.c:719:
+		}
+		else {

CHECK:BRACES: Unbalanced braces around else statement
#529: FILE: arch/i386/kernel/traps.c:719:
+		else {

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#533: FILE: arch/i386/kernel/traps.c:723:
+			    verify_area(VERIFY_WRITE, (void *)src, ((prefixes & PREFIX_D32) ? 2 : 4))) {

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:TRAILING_WHITESPACE: trailing whitespace
#538: FILE: arch/i386/kernel/traps.c:728:
+^I$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#540: FILE: arch/i386/kernel/traps.c:730:
+			*(unsigned long*)dst = *(unsigned long*)src;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#540: FILE: arch/i386/kernel/traps.c:730:
+			*(unsigned long*)dst = *(unsigned long*)src;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#542: FILE: arch/i386/kernel/traps.c:732:
+			*(unsigned short*)dst = *(unsigned short*)src;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#542: FILE: arch/i386/kernel/traps.c:732:
+			*(unsigned short*)dst = *(unsigned short*)src;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#551: FILE: arch/i386/kernel/traps.c:741:
+	if ((*eip == 0x0F) && ((*(eip+1) & 0xF8) == 0xC8)) {  /* BSWAP */
 	                             ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#557: FILE: arch/i386/kernel/traps.c:747:
+#endif^I$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#559: FILE: arch/i386/kernel/traps.c:749:
+		reg = *(eip+1) & 0x07;
 		           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#561: FILE: arch/i386/kernel/traps.c:751:
+		src=reg_address(regs, 1, reg);
 		   ^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#563: FILE: arch/i386/kernel/traps.c:753:
+		__asm__ __volatile__ (

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#574: FILE: arch/i386/kernel/traps.c:764:
+	/* we'll also try to emulate the CMPXCHG instruction (used in mutex locks).
+	   This instruction is often locked, but it's not possible to put a lock

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#578: FILE: arch/i386/kernel/traps.c:768:
+	if ((*eip == 0x0F) && ((*(eip+1) & 0xFE) == 0xB0)) {  /* CMPXCHG */
 	                             ^

ERROR:SPACING: spaces required around that '=' (ctx:VxO)
#585: FILE: arch/i386/kernel/traps.c:775:
+		w=*(eip+1) & 1;
 		 ^

ERROR:SPACING: space required before that '*' (ctx:OxV)
#585: FILE: arch/i386/kernel/traps.c:775:
+		w=*(eip+1) & 1;
 		  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#585: FILE: arch/i386/kernel/traps.c:775:
+		w=*(eip+1) & 1;
 		       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#586: FILE: arch/i386/kernel/traps.c:776:
+		modrm = *(eip+2);
 		             ^

CHECK:BRACES: Unbalanced braces around else statement
#594: FILE: arch/i386/kernel/traps.c:784:
+		else {

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#598: FILE: arch/i386/kernel/traps.c:788:
+			    verify_area(VERIFY_WRITE, (void *)src, (w?((prefixes & PREFIX_D32)?2:4):1))) {

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#598: FILE: arch/i386/kernel/traps.c:788:
+			    verify_area(VERIFY_WRITE, (void *)src, (w?((prefixes & PREFIX_D32)?2:4):1))) {
 			                                             ^

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#598: FILE: arch/i386/kernel/traps.c:788:
+			    verify_area(VERIFY_WRITE, (void *)src, (w?((prefixes & PREFIX_D32)?2:4):1))) {
 			                                                                      ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#598: FILE: arch/i386/kernel/traps.c:788:
+			    verify_area(VERIFY_WRITE, (void *)src, (w?((prefixes & PREFIX_D32)?2:4):1))) {
 			                                                                        ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#598: FILE: arch/i386/kernel/traps.c:788:
+			    verify_area(VERIFY_WRITE, (void *)src, (w?((prefixes & PREFIX_D32)?2:4):1))) {
 			                                                                           ^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#605: FILE: arch/i386/kernel/traps.c:795:
+			if ((unsigned char)regs->eax == *(unsigned char*)src) {

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#606: FILE: arch/i386/kernel/traps.c:796:
+				*(unsigned char*)src = *(unsigned char*)dst;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#606: FILE: arch/i386/kernel/traps.c:796:
+				*(unsigned char*)src = *(unsigned char*)dst;

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#609: FILE: arch/i386/kernel/traps.c:799:
+			}
+			else {

CHECK:BRACES: Unbalanced braces around else statement
#609: FILE: arch/i386/kernel/traps.c:799:
+			else {

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#611: FILE: arch/i386/kernel/traps.c:801:
+				*(unsigned char*)&(regs->eax) = *(unsigned char*)src;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#611: FILE: arch/i386/kernel/traps.c:801:
+				*(unsigned char*)&(regs->eax) = *(unsigned char*)src;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around regs->eax
#611: FILE: arch/i386/kernel/traps.c:801:
+				*(unsigned char*)&(regs->eax) = *(unsigned char*)src;

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#614: FILE: arch/i386/kernel/traps.c:804:
+		}
+		else if (prefixes & PREFIX_D32) { /* 16 bits operands */

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#615: FILE: arch/i386/kernel/traps.c:805:
+			if ((unsigned short)regs->eax == *(unsigned short*)src) {

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#616: FILE: arch/i386/kernel/traps.c:806:
+				*(unsigned short*)src = *(unsigned short*)dst;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#616: FILE: arch/i386/kernel/traps.c:806:
+				*(unsigned short*)src = *(unsigned short*)dst;

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#619: FILE: arch/i386/kernel/traps.c:809:
+			}
+			else {

CHECK:BRACES: Unbalanced braces around else statement
#619: FILE: arch/i386/kernel/traps.c:809:
+			else {

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#621: FILE: arch/i386/kernel/traps.c:811:
+				*(unsigned short*)&regs->eax = *(unsigned short*)src;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#621: FILE: arch/i386/kernel/traps.c:811:
+				*(unsigned short*)&regs->eax = *(unsigned short*)src;

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#624: FILE: arch/i386/kernel/traps.c:814:
+		}
+		else { /* 32 bits operands */

CHECK:BRACES: Unbalanced braces around else statement
#624: FILE: arch/i386/kernel/traps.c:814:
+		else { /* 32 bits operands */

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#625: FILE: arch/i386/kernel/traps.c:815:
+			if ((unsigned long)regs->eax == *(unsigned long*)src) {

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#626: FILE: arch/i386/kernel/traps.c:816:
+				*(unsigned long*)src = *(unsigned long*)dst;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#626: FILE: arch/i386/kernel/traps.c:816:
+				*(unsigned long*)src = *(unsigned long*)dst;

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#629: FILE: arch/i386/kernel/traps.c:819:
+			}
+			else {

CHECK:BRACES: Unbalanced braces around else statement
#629: FILE: arch/i386/kernel/traps.c:819:
+			else {

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#631: FILE: arch/i386/kernel/traps.c:821:
+				regs->eax = *(unsigned long*)src;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#639: FILE: arch/i386/kernel/traps.c:829:
+	if ((*eip == 0x0F) && ((*(eip+1) & 0xFE) == 0xC0)) {  /* XADD */
 	                             ^

CHECK:BRACES: Unbalanced braces around else statement
#656: FILE: arch/i386/kernel/traps.c:846:
+		else {

ERROR:SPACING: space required after that ',' (ctx:VxO)
#657: FILE: arch/i386/kernel/traps.c:847:
+			src = modrm_address(regs, &eip, w,! (prefixes & PREFIX_A32), modrm);
 			                                 ^

ERROR:SPACING: space required before that '!' (ctx:OxW)
#657: FILE: arch/i386/kernel/traps.c:847:
+			src = modrm_address(regs, &eip, w,! (prefixes & PREFIX_A32), modrm);
 			                                  ^

ERROR:SPACING: space prohibited after that '!' (ctx:OxW)
#657: FILE: arch/i386/kernel/traps.c:847:
+			src = modrm_address(regs, &eip, w,! (prefixes & PREFIX_A32), modrm);
 			                                  ^

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#660: FILE: arch/i386/kernel/traps.c:850:
+			    verify_area(VERIFY_WRITE, (void *)src, (w?((prefixes & PREFIX_D32)?2:4):1))) {

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#660: FILE: arch/i386/kernel/traps.c:850:
+			    verify_area(VERIFY_WRITE, (void *)src, (w?((prefixes & PREFIX_D32)?2:4):1))) {
 			                                             ^

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#660: FILE: arch/i386/kernel/traps.c:850:
+			    verify_area(VERIFY_WRITE, (void *)src, (w?((prefixes & PREFIX_D32)?2:4):1))) {
 			                                                                      ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#660: FILE: arch/i386/kernel/traps.c:850:
+			    verify_area(VERIFY_WRITE, (void *)src, (w?((prefixes & PREFIX_D32)?2:4):1))) {
 			                                                                        ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#660: FILE: arch/i386/kernel/traps.c:850:
+			    verify_area(VERIFY_WRITE, (void *)src, (w?((prefixes & PREFIX_D32)?2:4):1))) {
 			                                                                           ^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#667: FILE: arch/i386/kernel/traps.c:857:
+			op1=*(unsigned char*)src;

ERROR:SPACING: spaces required around that '=' (ctx:VxO)
#667: FILE: arch/i386/kernel/traps.c:857:
+			op1=*(unsigned char*)src;
 			   ^

ERROR:SPACING: space required before that '*' (ctx:OxV)
#667: FILE: arch/i386/kernel/traps.c:857:
+			op1=*(unsigned char*)src;
 			    ^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#668: FILE: arch/i386/kernel/traps.c:858:
+			op2=*(unsigned char*)dst;

ERROR:SPACING: spaces required around that '=' (ctx:VxO)
#668: FILE: arch/i386/kernel/traps.c:858:
+			op2=*(unsigned char*)dst;
 			   ^

ERROR:SPACING: space required before that '*' (ctx:OxV)
#668: FILE: arch/i386/kernel/traps.c:858:
+			op2=*(unsigned char*)dst;
 			    ^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#669: FILE: arch/i386/kernel/traps.c:859:
+			*(unsigned char*)src = op1 + op2;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#670: FILE: arch/i386/kernel/traps.c:860:
+			*(unsigned char*)dst = op1;

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#672: FILE: arch/i386/kernel/traps.c:862:
+		}
+		else if (prefixes & PREFIX_D32) { /* 16 bits operands */

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#673: FILE: arch/i386/kernel/traps.c:863:
+			op1=*(unsigned short*)src;

ERROR:SPACING: spaces required around that '=' (ctx:VxO)
#673: FILE: arch/i386/kernel/traps.c:863:
+			op1=*(unsigned short*)src;
 			   ^

ERROR:SPACING: space required before that '*' (ctx:OxV)
#673: FILE: arch/i386/kernel/traps.c:863:
+			op1=*(unsigned short*)src;
 			    ^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#674: FILE: arch/i386/kernel/traps.c:864:
+			op2=*(unsigned short*)dst;

ERROR:SPACING: spaces required around that '=' (ctx:VxO)
#674: FILE: arch/i386/kernel/traps.c:864:
+			op2=*(unsigned short*)dst;
 			   ^

ERROR:SPACING: space required before that '*' (ctx:OxV)
#674: FILE: arch/i386/kernel/traps.c:864:
+			op2=*(unsigned short*)dst;
 			    ^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#675: FILE: arch/i386/kernel/traps.c:865:
+			*(unsigned short*)src = op1 + op2;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#676: FILE: arch/i386/kernel/traps.c:866:
+			*(unsigned short*)dst = op1;

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#678: FILE: arch/i386/kernel/traps.c:868:
+		}
+		else { /* 32 bits operands */

CHECK:BRACES: Unbalanced braces around else statement
#678: FILE: arch/i386/kernel/traps.c:868:
+		else { /* 32 bits operands */

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#679: FILE: arch/i386/kernel/traps.c:869:
+			op1=*(unsigned long*)src;

ERROR:SPACING: spaces required around that '=' (ctx:VxO)
#679: FILE: arch/i386/kernel/traps.c:869:
+			op1=*(unsigned long*)src;
 			   ^

ERROR:SPACING: space required before that '*' (ctx:OxV)
#679: FILE: arch/i386/kernel/traps.c:869:
+			op1=*(unsigned long*)src;
 			    ^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#680: FILE: arch/i386/kernel/traps.c:870:
+			op2=*(unsigned long*)dst;

ERROR:SPACING: spaces required around that '=' (ctx:VxO)
#680: FILE: arch/i386/kernel/traps.c:870:
+			op2=*(unsigned long*)dst;
 			   ^

ERROR:SPACING: space required before that '*' (ctx:OxV)
#680: FILE: arch/i386/kernel/traps.c:870:
+			op2=*(unsigned long*)dst;
 			    ^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#681: FILE: arch/i386/kernel/traps.c:871:
+			*(unsigned long*)src = op1 + op2;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#682: FILE: arch/i386/kernel/traps.c:872:
+			*(unsigned long*)dst = op1;

WARNING:LONG_LINE: line length of 114 exceeds 100 columns
#691: FILE: arch/i386/kernel/traps.c:881:
+	printk(KERN_DEBUG "do_invalid_op() : invalid opcode detected @%p : %02x %02x ...\n", eip, eip[0], eip[1]);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#691: FILE: arch/i386/kernel/traps.c:881:
+	printk(KERN_DEBUG "do_invalid_op() : invalid opcode detected @%p : %02x %02x ...\n", eip, eip[0], eip[1]);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'do_invalid_op', this function's name, in a string
#691: FILE: arch/i386/kernel/traps.c:881:
+	printk(KERN_DEBUG "do_invalid_op() : invalid opcode detected @%p : %02x %02x ...\n", eip, eip[0], eip[1]);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:SPACING: space required after that ',' (ctx:VxV)
#696: FILE: arch/i386/kernel/traps.c:886:
+	die_if_kernel("invalid operand",regs,error_code);
 	                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#696: FILE: arch/i386/kernel/traps.c:886:
+	die_if_kernel("invalid operand",regs,error_code);
 	                                    ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000452986.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 87 errors, 28 warnings, 42 checks, 619 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000452986.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
