WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#44: FILE: drivers/dlm/lowcomms.c:1:
+/******************************************************************************

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#45: FILE: drivers/dlm/lowcomms.c:2:
+/******************************************************************************
+*******************************************************************************

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#126: FILE: drivers/dlm/lowcomms.c:83:
+	spinlock_t		lock;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#140: FILE: drivers/dlm/lowcomms.c:97:
+	unsigned		base;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#141: FILE: drivers/dlm/lowcomms.c:98:
+	unsigned		len;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#142: FILE: drivers/dlm/lowcomms.c:99:
+	unsigned		mask;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#146: FILE: drivers/dlm/lowcomms.c:103:
+/* Just the one of these, now. But this struct keeps
+   the connection-specific variables together */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#146: FILE: drivers/dlm/lowcomms.c:103:
+   the connection-specific variables together */

ERROR:SPACING: space required before the open parenthesis '('
#171: FILE: drivers/dlm/lowcomms.c:128:
+#define CBUF_ADD(cb, n) do { (cb)->len += n; } while(0)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#171: FILE: drivers/dlm/lowcomms.c:128:
+#define CBUF_ADD(cb, n) do { (cb)->len += n; } while(0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cb' - possible side-effects?
#173: FILE: drivers/dlm/lowcomms.c:130:
+#define CBUF_MAY_ADD(cb, n) (((cb)->len + (n)) < ((cb)->mask + 1))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cb' - possible side-effects?
#174: FILE: drivers/dlm/lowcomms.c:131:
+#define CBUF_DATA(cb) (((cb)->base + (cb)->len) & (cb)->mask)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cb' - possible side-effects?
#176: FILE: drivers/dlm/lowcomms.c:133:
+#define CBUF_INIT(cb, size) \
+do { \
+	(cb)->base = (cb)->len = 0; \
+	(cb)->mask = ((size)-1); \
+} while(0)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#179: FILE: drivers/dlm/lowcomms.c:136:
+	(cb)->mask = ((size)-1); \
 	                    ^

ERROR:SPACING: space required before the open parenthesis '('
#180: FILE: drivers/dlm/lowcomms.c:137:
+} while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cb' - possible side-effects?
#182: FILE: drivers/dlm/lowcomms.c:139:
+#define CBUF_EAT(cb, n) \
+do { \
+	(cb)->len  -= (n); \
+	(cb)->base += (n); \
+	(cb)->base &= (cb)->mask; \
+} while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#182: FILE: drivers/dlm/lowcomms.c:139:
+#define CBUF_EAT(cb, n) \
+do { \
+	(cb)->len  -= (n); \
+	(cb)->base += (n); \
+	(cb)->base &= (cb)->mask; \
+} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#187: FILE: drivers/dlm/lowcomms.c:144:
+} while(0)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#189: FILE: drivers/dlm/lowcomms.c:146:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#208: FILE: drivers/dlm/lowcomms.c:165:
+
+

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*node)...) over kmalloc(sizeof(struct dlm_node)...)
#244: FILE: drivers/dlm/lowcomms.c:201:
+	node = kmalloc(sizeof(struct dlm_node), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

ERROR:CODE_INDENT: code indent should use tabs where possible
#287: FILE: drivers/dlm/lowcomms.c:244:
+^I        struct sockaddr_in *in4  = (struct sockaddr_in *) addr;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:SPACING: No space is necessary after a cast
#287: FILE: drivers/dlm/lowcomms.c:244:
+	        struct sockaddr_in *in4  = (struct sockaddr_in *) addr;

CHECK:SPACING: No space is necessary after a cast
#288: FILE: drivers/dlm/lowcomms.c:245:
+		struct sockaddr_in *ret4 = (struct sockaddr_in *) retaddr;

WARNING:LINE_SPACING: Missing a blank line after declarations
#289: FILE: drivers/dlm/lowcomms.c:246:
+		struct sockaddr_in *ret4 = (struct sockaddr_in *) retaddr;
+		ret4->sin_addr.s_addr = in4->sin_addr.s_addr;

ERROR:CODE_INDENT: code indent should use tabs where possible
#291: FILE: drivers/dlm/lowcomms.c:248:
+^I        struct sockaddr_in6 *in6  = (struct sockaddr_in6 *) addr;$

CHECK:SPACING: No space is necessary after a cast
#291: FILE: drivers/dlm/lowcomms.c:248:
+	        struct sockaddr_in6 *in6  = (struct sockaddr_in6 *) addr;

CHECK:SPACING: No space is necessary after a cast
#292: FILE: drivers/dlm/lowcomms.c:249:
+		struct sockaddr_in6 *ret6 = (struct sockaddr_in6 *) retaddr;

WARNING:LINE_SPACING: Missing a blank line after declarations
#293: FILE: drivers/dlm/lowcomms.c:250:
+		struct sockaddr_in6 *ret6 = (struct sockaddr_in6 *) retaddr;
+		memcpy(&ret6->sin6_addr, &in6->sin6_addr,

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*ni)...) over kmalloc(sizeof(struct nodeinfo)...)
#360: FILE: drivers/dlm/lowcomms.c:317:
+		ni = kmalloc(sizeof(struct nodeinfo), alloc);

WARNING:INDENTED_LABEL: labels should not be indented
#384: FILE: drivers/dlm/lowcomms.c:341:
+	out_up:

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#397: FILE: drivers/dlm/lowcomms.c:354:
+	for (i=1; i<=max_nodeid; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<=' (ctx:VxV)
#397: FILE: drivers/dlm/lowcomms.c:354:
+	for (i=1; i<=max_nodeid; i++) {
 	           ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#415: FILE: drivers/dlm/lowcomms.c:372:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#417: FILE: drivers/dlm/lowcomms.c:374:
+/* Add the port number to an IP6 or 4 sockaddr and return the address length.
+   Also padd out the struct with zeros to make comparisons meaningful */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#417: FILE: drivers/dlm/lowcomms.c:374:
+   Also padd out the struct with zeros to make comparisons meaningful */

WARNING:LINE_SPACING: Missing a blank line after declarations
#441: FILE: drivers/dlm/lowcomms.c:398:
+		struct sockaddr_in *in4_addr = (struct sockaddr_in *)saddr;
+		in4_addr->sin_port = cpu_to_be16(port);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#443: FILE: drivers/dlm/lowcomms.c:400:
+		memset(in4_addr+1, 0, sizeof(struct sockaddr_storage) -
 		               ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#448: FILE: drivers/dlm/lowcomms.c:405:
+		struct sockaddr_in6 *in6_addr = (struct sockaddr_in6 *)saddr;
+		in6_addr->sin6_port = cpu_to_be16(port);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#449: FILE: drivers/dlm/lowcomms.c:406:
+		memset(in6_addr+1, 0, sizeof(struct sockaddr_storage) -
 		               ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#501: FILE: drivers/dlm/lowcomms.c:458:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#503: FILE: drivers/dlm/lowcomms.c:460:
+/* INIT failed but we don't know which node...
+   restart INIT on all pending nodes */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#503: FILE: drivers/dlm/lowcomms.c:460:
+   restart INIT on all pending nodes */

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#509: FILE: drivers/dlm/lowcomms.c:466:
+	for (i=1; i<=max_nodeid; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<=' (ctx:VxV)
#509: FILE: drivers/dlm/lowcomms.c:466:
+	for (i=1; i<=max_nodeid; i++) {
 	           ^

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#533: FILE: drivers/dlm/lowcomms.c:490:
+		switch (sn->sn_assoc_change.sac_state) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#548: FILE: drivers/dlm/lowcomms.c:505:
+			 * receive_from_sock */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#552: FILE: drivers/dlm/lowcomms.c:509:
+				log_print("COMM_UP for invalid assoc ID %d",
+					 (int)sn->sn_assoc_change.sac_assoc_id);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#564: FILE: drivers/dlm/lowcomms.c:521:
+						(char*)&prim, &prim_len);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPLIT_STRING: quoted string split across lines
#570: FILE: drivers/dlm/lowcomms.c:527:
+				log_print("getsockopt/sctp_primary_addr on "
+					  "new assoc %d failed : %d",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#596: FILE: drivers/dlm/lowcomms.c:553:
+			log_print("got new/restarted association %d nodeid %d",
+			       (int)sn->sn_assoc_change.sac_assoc_id, nodeid);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#625: FILE: drivers/dlm/lowcomms.c:582:
+		 * again */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#648: FILE: drivers/dlm/lowcomms.c:605:
+	unsigned len;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sctp_con.sock"
#661: FILE: drivers/dlm/lowcomms.c:618:
+	if (sctp_con.sock == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sctp_con.rx_page"
#664: FILE: drivers/dlm/lowcomms.c:621:
+	if (sctp_con.rx_page == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sctp_con.rx_page"
#670: FILE: drivers/dlm/lowcomms.c:627:
+		if (sctp_con.rx_page == NULL)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#713: FILE: drivers/dlm/lowcomms.c:670:
+	r = ret = kernel_recvmsg(sctp_con.sock, &msg, iov, 1, len,

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#733: FILE: drivers/dlm/lowcomms.c:690:
+		if (test_and_clear_bit(NI_INIT_PENDING, &ni->flags)) {
+

WARNING:INDENTED_LABEL: labels should not be indented
#756: FILE: drivers/dlm/lowcomms.c:713:
+      out:

WARNING:INDENTED_LABEL: labels should not be indented
#760: FILE: drivers/dlm/lowcomms.c:717:
+      out_resched:

WARNING:INDENTED_LABEL: labels should not be indented
#766: FILE: drivers/dlm/lowcomms.c:723:
+      out_close:

WARNING:INDENTED_LABEL: labels should not be indented
#769: FILE: drivers/dlm/lowcomms.c:726:
+      out_ret:

CHECK:SPACING: No space is necessary after a cast
#783: FILE: drivers/dlm/lowcomms.c:740:
+					(struct sockaddr *) addr, addr_len);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#796: FILE: drivers/dlm/lowcomms.c:753:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#869: FILE: drivers/dlm/lowcomms.c:826:
+
+

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*entry)...) over kmalloc(sizeof(struct writequeue_entry)...)
#874: FILE: drivers/dlm/lowcomms.c:831:
+	entry = kmalloc(sizeof(struct writequeue_entry), allocation);

CHECK:SPACING: No space is necessary after a cast
#908: FILE: drivers/dlm/lowcomms.c:865:
+	if (((struct list_head *) e == &ni->writequeue) ||

WARNING:INDENTED_LABEL: labels should not be indented
#919: FILE: drivers/dlm/lowcomms.c:876:
+	      got_one:

CHECK:SPACING: No space is necessary after a cast
#942: FILE: drivers/dlm/lowcomms.c:899:
+	struct writequeue_entry *e = (struct writequeue_entry *) arg;

WARNING:INDENTED_LABEL: labels should not be indented
#965: FILE: drivers/dlm/lowcomms.c:922:
+      out:

WARNING:RETURN_VOID: void function return statements are not generally useful
#968: FILE: drivers/dlm/lowcomms.c:925:
+	return;
+}

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#977: FILE: drivers/dlm/lowcomms.c:934:
+/* Initiate an SCTP association. In theory we could just use sendmsg() on
+   the first IP address and it should work, but this allows us to set up the

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#979: FILE: drivers/dlm/lowcomms.c:936:
+   It also keeps the send path clean as it can now always use the association ID */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1016: FILE: drivers/dlm/lowcomms.c:973:
+	/* Real INIT messages seem to cause trouble. Just send a 1 byte message
+	   we can afford to lose */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1016: FILE: drivers/dlm/lowcomms.c:973:
+	   we can afford to lose */

ERROR:CODE_INDENT: code indent should use tabs where possible
#1046: FILE: drivers/dlm/lowcomms.c:1003:
+        /* See if we need to init an association before we start$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1047: FILE: drivers/dlm/lowcomms.c:1004:
+        /* See if we need to init an association before we start
+	   sending precious messages */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1047: FILE: drivers/dlm/lowcomms.c:1004:
+	   sending precious messages */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1081: FILE: drivers/dlm/lowcomms.c:1038:
+		BUG_ON(len == 0 && e->users == 0);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1086: FILE: drivers/dlm/lowcomms.c:1043:
+			iov.iov_base = page_address(e->page)+offset;
 			                                    ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#1091: FILE: drivers/dlm/lowcomms.c:1048:
+			if (ret == -EAGAIN) {
[...]
+			} else if (ret < 0)
[...]

CHECK:BRACES: braces {} should be used on all arms of this statement
#1118: FILE: drivers/dlm/lowcomms.c:1075:
+	if (!test_and_set_bit(NI_INIT_PENDING, &ni->flags)) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1122: FILE: drivers/dlm/lowcomms.c:1079:
+	} else

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1154: FILE: drivers/dlm/lowcomms.c:1111:
+	for (i=1; i<=max_nodeid; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<=' (ctx:VxV)
#1154: FILE: drivers/dlm/lowcomms.c:1111:
+	for (i=1; i<=max_nodeid; i++) {
 	           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1186: FILE: drivers/dlm/lowcomms.c:1143:
+	for (i=1; i<=max_nodeid; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<=' (ctx:VxV)
#1186: FILE: drivers/dlm/lowcomms.c:1143:
+	for (i=1; i<=max_nodeid; i++) {
 	           ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1188: FILE: drivers/dlm/lowcomms.c:1145:
+		struct nodeinfo *ni = nodeid2nodeinfo(i, 0);
+		if (ni)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1193: FILE: drivers/dlm/lowcomms.c:1150:
+
+

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1198: FILE: drivers/dlm/lowcomms.c:1155:
+	for (i=1; i<=max_nodeid; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<=' (ctx:VxV)
#1198: FILE: drivers/dlm/lowcomms.c:1155:
+	for (i=1; i<=max_nodeid; i++) {
 	           ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1200: FILE: drivers/dlm/lowcomms.c:1157:
+		struct nodeinfo *ni = nodeid2nodeinfo(i, 0);
+		if (ni) {

ERROR:SPACING: spaces required around that '>=' (ctx:WxV)
#1243: FILE: drivers/dlm/lowcomms.c:1200:
+			} while (!kthread_should_stop() && ret >=0);
 			                                       ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1288: FILE: drivers/dlm/lowcomms.c:1245:
+       ^Iif (error) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1288: FILE: drivers/dlm/lowcomms.c:1245:
+       ^Iif (error) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1288: FILE: drivers/dlm/lowcomms.c:1245:
+       ^Iif (error) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1296: FILE: drivers/dlm/lowcomms.c:1253:
+       ^Iif (error) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1296: FILE: drivers/dlm/lowcomms.c:1253:
+       ^Iif (error) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1296: FILE: drivers/dlm/lowcomms.c:1253:
+       ^Iif (error) {$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1376: FILE: drivers/dlm/lowcomms.h:1:
+/******************************************************************************

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1377: FILE: drivers/dlm/lowcomms.h:2:
+/******************************************************************************
+*******************************************************************************

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1407: FILE: drivers/dlm/midcomms.c:1:
+/******************************************************************************

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1408: FILE: drivers/dlm/midcomms.c:2:
+/******************************************************************************
+*******************************************************************************

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1439: FILE: drivers/dlm/midcomms.c:33:
+
+

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1440: FILE: drivers/dlm/midcomms.c:34:
+static void copy_from_cb(void *dst, const void *base, unsigned offset,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1441: FILE: drivers/dlm/midcomms.c:35:
+			 unsigned len, unsigned limit)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1441: FILE: drivers/dlm/midcomms.c:35:
+			 unsigned len, unsigned limit)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1443: FILE: drivers/dlm/midcomms.c:37:
+	unsigned copy = len;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1465: FILE: drivers/dlm/midcomms.c:59:
+				unsigned offset, unsigned len, unsigned limit)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1465: FILE: drivers/dlm/midcomms.c:59:
+				unsigned offset, unsigned len, unsigned limit)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1465: FILE: drivers/dlm/midcomms.c:59:
+				unsigned offset, unsigned len, unsigned limit)

CHECK:SPACING: No space is necessary after a cast
#1468: FILE: drivers/dlm/midcomms.c:62:
+	struct dlm_header *msg = (struct dlm_header *) __tmp;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#1471: FILE: drivers/dlm/midcomms.c:65:
+	uint16_t msglen;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1472: FILE: drivers/dlm/midcomms.c:66:
+	uint32_t lockspace;

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1475: FILE: drivers/dlm/midcomms.c:69:
+	while (len > sizeof(struct dlm_header)) {
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1477: FILE: drivers/dlm/midcomms.c:71:
+		/* Copy just the header to check the total length.  The
+		   message may wrap around the end of the buffer back to the

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1478: FILE: drivers/dlm/midcomms.c:72:
+		   start, so we need to use a temp buffer and copy_from_cb. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1498: FILE: drivers/dlm/midcomms.c:92:
+		/* If only part of the full message is contained in this
+		   buffer, then do nothing and wait for lowcomms to call

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1500: FILE: drivers/dlm/midcomms.c:94:
+		   we've consumed none of the input buffer. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1506: FILE: drivers/dlm/midcomms.c:100:
+		/* Allocate a larger temp buffer if the full message won't fit
+		   in the buffer on the stack (which should work for most

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1507: FILE: drivers/dlm/midcomms.c:101:
+		   ordinary messages). */

CHECK:SPACING: No space is necessary after a cast
#1510: FILE: drivers/dlm/midcomms.c:104:
+		    msg == (struct dlm_header *) __tmp) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!msg"
#1512: FILE: drivers/dlm/midcomms.c:106:
+			if (msg == NULL)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1518: FILE: drivers/dlm/midcomms.c:112:
+		BUG_ON(lockspace != msg->h_lockspace);

CHECK:SPACING: No space is necessary after a cast
#1540: FILE: drivers/dlm/midcomms.c:134:
+	if (msg != (struct dlm_header *) __tmp)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1549: FILE: drivers/dlm/midcomms.h:1:
+/******************************************************************************

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1550: FILE: drivers/dlm/midcomms.h:2:
+/******************************************************************************
+*******************************************************************************

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1565: FILE: drivers/dlm/midcomms.h:17:
+int dlm_process_incoming_buffer(int nodeid, const void *base, unsigned offset,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1566: FILE: drivers/dlm/midcomms.h:18:
+				unsigned len, unsigned limit);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1566: FILE: drivers/dlm/midcomms.h:18:
+				unsigned len, unsigned limit);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000183367.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 20 errors, 64 warnings, 46 checks, 1517 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000183367.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
