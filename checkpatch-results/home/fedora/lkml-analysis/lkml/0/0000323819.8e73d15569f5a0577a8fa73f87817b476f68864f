WARNING:TYPO_SPELLING: 'catched' may be misspelled - perhaps 'caught'?
#51: 
PS. I've already catched couple bugs using this
                 ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#74: FILE: mm/slab.c:1909:
+void * uaf_alloc(kmem_cache_t *, int gfp_mask);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#75: FILE: mm/slab.c:1910:
+int uaf_cache_free(kmem_cache_t *, void *addr);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kmem_cache_t *' should also have an identifier name
#75: FILE: mm/slab.c:1910:
+int uaf_cache_free(kmem_cache_t *, void *addr);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#76: FILE: mm/slab.c:1911:
+int uaf_free(void *addr);

WARNING:LINE_SPACING: Missing a blank line after declarations
#92: FILE: mm/slab.c:1927:
+			unsigned long ctor_flags;
+			ctor_flags = SLAB_CTOR_CONSTRUCTOR;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#119: FILE: mm/slab.c:2222:
+	if (uaf_free((void *) objp))

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#130: FILE: mm/slab.c:2871:
+
+

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#142: FILE: mm/slab.c:2883:
+static void *uaf_bitmap = NULL;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#144: FILE: mm/slab.c:2885:
+static int uaf_last_found = 0;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#145: FILE: mm/slab.c:2886:
+static int uaf_used = 0;

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#146: FILE: mm/slab.c:2887:
+static struct vm_struct *uaf_area = NULL;

ERROR:CODE_INDENT: code indent should use tabs where possible
#151: FILE: mm/slab.c:2892:
+        uaf_max = simple_strtoul(str, NULL, 0);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#151: FILE: mm/slab.c:2892:
+        uaf_max = simple_strtoul(str, NULL, 0);$

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#151: FILE: mm/slab.c:2892:
+        uaf_max = simple_strtoul(str, NULL, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

ERROR:CODE_INDENT: code indent should use tabs where possible
#152: FILE: mm/slab.c:2893:
+        return 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#152: FILE: mm/slab.c:2893:
+        return 1;$

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#155: FILE: mm/slab.c:2896:
+__setup("uaf=", uaf_setup);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#165: FILE: mm/slab.c:2906:
+	printk("UAF: total vmalloc-space - %lu\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#166: FILE: mm/slab.c:2907:
+	printk("UAF: total vmalloc-space - %lu\n",
+			VMALLOC_END - VMALLOC_START);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#170: FILE: mm/slab.c:2911:
+		printk(KERN_ALERT "UAF: can't reserve %lu bytes in KVA\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#171: FILE: mm/slab.c:2912:
+		printk(KERN_ALERT "UAF: can't reserve %lu bytes in KVA\n",
+				PAGE_SIZE * uaf_max);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#174: FILE: mm/slab.c:2915:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#175: FILE: mm/slab.c:2916:
+	printk("UAF: reserved %lu bytes in KVA at 0x%p\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#176: FILE: mm/slab.c:2917:
+	printk("UAF: reserved %lu bytes in KVA at 0x%p\n",
+			PAGE_SIZE * uaf_max, uaf_area->addr);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#183: FILE: mm/slab.c:2924:
+		printk(KERN_ALERT

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#183: FILE: mm/slab.c:2924:
+	if (!uaf_bitmap) {
+		printk(KERN_ALERT

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#191: FILE: mm/slab.c:2932:
+	printk("UAF: allocated %d for bitmap\n", size);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#192: FILE: mm/slab.c:2933:
+^I$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#194: FILE: mm/slab.c:2935:
+	 * call map_vm_are() with interrupts disabled */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#197: FILE: mm/slab.c:2938:
+		printk(KERN_ALERT "UAF: can't allocate page!\n");

CHECK:SPACING: No space is necessary after a cast
#200: FILE: mm/slab.c:2941:
+	addr = (unsigned long) uaf_area->addr;

CHECK:SPACING: No space is necessary after a cast
#207: FILE: mm/slab.c:2948:
+		area.addr = (void *) addr;

CHECK:SPACING: No space is necessary after a cast
#210: FILE: mm/slab.c:2951:
+		pages = (struct page **) ptrs;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#213: FILE: mm/slab.c:2954:
+			printk(KERN_ALERT "UAF: can't map at 0x%lx\n", addr);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#217: FILE: mm/slab.c:2958:
+^I^I$

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#218: FILE: mm/slab.c:2959:
+		
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#248: FILE: mm/slab.c:2989:
+void * uaf_alloc(kmem_cache_t *cachep, int gfp_mask)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!uaf_bitmap"
#258: FILE: mm/slab.c:2999:
+	if (uaf_bitmap == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:SPACING: No space is necessary after a cast
#264: FILE: mm/slab.c:3005:
+	pages = (struct page **) ptrs;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#267: FILE: mm/slab.c:3008:
+		printk(KERN_ALERT "size is too big: %d\n", size);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#284: FILE: mm/slab.c:3025:
+		BUG_ON(test_bit(i + j, uaf_bitmap));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:SPACING: No space is necessary after a cast
#291: FILE: mm/slab.c:3032:
+	addr = ((unsigned long) uaf_area->addr) + (PAGE_SIZE * i);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pages[j]"
#295: FILE: mm/slab.c:3036:
+		if (pages[j] == NULL)

CHECK:SPACING: No space is necessary after a cast
#300: FILE: mm/slab.c:3041:
+	area.addr = (void *) addr;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#305: FILE: mm/slab.c:3046:
+	 * page_table_lock -> deadlock. therefore, disable irqs */

CHECK:SPACING: No space is necessary after a cast
#310: FILE: mm/slab.c:3051:
+	pages = (struct page **) ptrs;

CHECK:SPACING: No space is necessary after a cast
#313: FILE: mm/slab.c:3054:
+		ptrs[0]->list.next = (void *) cachep;

CHECK:SPACING: No space is necessary after a cast
#317: FILE: mm/slab.c:3058:
+			flush_tlb_kernel_range((unsigned long) area->addr, end);

CHECK:SPACING: No space is necessary after a cast
#320: FILE: mm/slab.c:3061:
+		return (void *) addr;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#341: FILE: mm/slab.c:3082:
+extern void unmap_area_pmd(pgd_t *dir, unsigned long address,
+				  unsigned long size);

WARNING:TYPO_SPELLING: 'interrtups' may be misspelled - perhaps 'interrupts'?
#356: FILE: mm/slab.c:3097:
+	 * we must not call smp_call_function() with interrtups disabled
 	                                             ^^^^^^^^^^

CHECK:SPACING: No space is necessary after a cast
#360: FILE: mm/slab.c:3101:
+		flush_tlb_kernel_range((unsigned long) area->addr, end);

WARNING:TYPO_SPELLING: 'successfull' may be misspelled - perhaps 'successful'?
#366: FILE: mm/slab.c:3107:
+ * returns 1 if free was successfull
                          ^^^^^^^^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!uaf_bitmap"
#379: FILE: mm/slab.c:3120:
+	if (uaf_bitmap == NULL)

CHECK:SPACING: No space is necessary after a cast
#383: FILE: mm/slab.c:3124:
+	if ((unsigned) addr < (unsigned) uaf_area->addr ||

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#383: FILE: mm/slab.c:3124:
+	if ((unsigned) addr < (unsigned) uaf_area->addr ||

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#383: FILE: mm/slab.c:3124:
+	if ((unsigned) addr < (unsigned) uaf_area->addr ||

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#384: FILE: mm/slab.c:3125:
+	if ((unsigned) addr < (unsigned) uaf_area->addr ||
+		(unsigned) addr >= (unsigned) uaf_area->addr + uaf_area->size)

CHECK:SPACING: No space is necessary after a cast
#384: FILE: mm/slab.c:3125:
+		(unsigned) addr >= (unsigned) uaf_area->addr + uaf_area->size)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#384: FILE: mm/slab.c:3125:
+		(unsigned) addr >= (unsigned) uaf_area->addr + uaf_area->size)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#384: FILE: mm/slab.c:3125:
+		(unsigned) addr >= (unsigned) uaf_area->addr + uaf_area->size)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#386: FILE: mm/slab.c:3127:
+^I$

CHECK:SPACING: No space is necessary after a cast
#388: FILE: mm/slab.c:3129:
+	BUG_ON((unsigned long) addr & ~PAGE_MASK);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#388: FILE: mm/slab.c:3129:
+	BUG_ON((unsigned long) addr & ~PAGE_MASK);

CHECK:SPACING: No space is necessary after a cast
#389: FILE: mm/slab.c:3130:
+	i = (unsigned) addr - (unsigned) uaf_area->addr;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#389: FILE: mm/slab.c:3130:
+	i = (unsigned) addr - (unsigned) uaf_area->addr;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#389: FILE: mm/slab.c:3130:
+	i = (unsigned) addr - (unsigned) uaf_area->addr;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#394: FILE: mm/slab.c:3135:
+	 * protect those pte's from to be reused */

CHECK:SPACING: No space is necessary after a cast
#397: FILE: mm/slab.c:3138:
+		address = ((unsigned long) addr) + (PAGE_SIZE * j);

WARNING:LINE_SPACING: Missing a blank line after declarations
#397: FILE: mm/slab.c:3138:
+		unsigned long address;
+		address = ((unsigned long) addr) + (PAGE_SIZE * j);

CHECK:SPACING: No space is necessary after a cast
#398: FILE: mm/slab.c:3139:
+		pages[j] = vmalloc_to_page((void *) address);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#400: FILE: mm/slab.c:3141:
+^I$

CHECK:SPACING: No space is necessary after a cast
#402: FILE: mm/slab.c:3143:
+	uaf_unmap((unsigned long) addr, PAGE_SIZE * size);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#410: FILE: mm/slab.c:3151:
+		BUG_ON(i+j < 0 && i+j >= uaf_max);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#410: FILE: mm/slab.c:3151:
+		BUG_ON(i+j < 0 && i+j >= uaf_max);
 		        ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#410: FILE: mm/slab.c:3151:
+		BUG_ON(i+j < 0 && i+j >= uaf_max);
 		                   ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#411: FILE: mm/slab.c:3152:
+		BUG_ON(!test_bit(i+j, uaf_bitmap));

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#411: FILE: mm/slab.c:3152:
+		BUG_ON(!test_bit(i+j, uaf_bitmap));
 		                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#413: FILE: mm/slab.c:3154:
+		clear_bit(i+j, uaf_bitmap);
 		           ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!uaf_bitmap"
#424: FILE: mm/slab.c:3165:
+	if (uaf_bitmap == NULL)

CHECK:SPACING: No space is necessary after a cast
#428: FILE: mm/slab.c:3169:
+	if ((unsigned) obj < (unsigned) uaf_area->addr ||

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#428: FILE: mm/slab.c:3169:
+	if ((unsigned) obj < (unsigned) uaf_area->addr ||

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#428: FILE: mm/slab.c:3169:
+	if ((unsigned) obj < (unsigned) uaf_area->addr ||

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#429: FILE: mm/slab.c:3170:
+	if ((unsigned) obj < (unsigned) uaf_area->addr ||
+		(unsigned) obj >= (unsigned) uaf_area->addr + uaf_area->size)

CHECK:SPACING: No space is necessary after a cast
#429: FILE: mm/slab.c:3170:
+		(unsigned) obj >= (unsigned) uaf_area->addr + uaf_area->size)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#429: FILE: mm/slab.c:3170:
+		(unsigned) obj >= (unsigned) uaf_area->addr + uaf_area->size)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#429: FILE: mm/slab.c:3170:
+		(unsigned) obj >= (unsigned) uaf_area->addr + uaf_area->size)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#431: FILE: mm/slab.c:3172:
+^I$

CHECK:SPACING: No space is necessary after a cast
#437: FILE: mm/slab.c:3178:
+	struct page *page = uaf_vaddr_to_page((void *) obj);

CHECK:SPACING: No space is necessary after a cast
#444: FILE: mm/slab.c:3185:
+	return uaf_cache_free(c, (void *) obj);

CHECK:SPACING: No space is necessary after a cast
#449: FILE: mm/slab.c:3190:
+	unsigned long addr = (unsigned long) obj;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!uaf_bitmap"
#452: FILE: mm/slab.c:3193:
+	if (uaf_bitmap == NULL)

CHECK:SPACING: No space is necessary after a cast
#457: FILE: mm/slab.c:3198:
+	if (addr < (unsigned long) uaf_area->addr ||

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#458: FILE: mm/slab.c:3199:
+	if (addr < (unsigned long) uaf_area->addr ||
+			addr >= (unsigned long) uaf_area->addr + uaf_area->size)

CHECK:SPACING: No space is necessary after a cast
#458: FILE: mm/slab.c:3199:
+			addr >= (unsigned long) uaf_area->addr + uaf_area->size)

CHECK:SPACING: No space is necessary after a cast
#462: FILE: mm/slab.c:3203:
+	i = (unsigned) addr - (unsigned) uaf_area->addr;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#462: FILE: mm/slab.c:3203:
+	i = (unsigned) addr - (unsigned) uaf_area->addr;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#462: FILE: mm/slab.c:3203:
+	i = (unsigned) addr - (unsigned) uaf_area->addr;

WARNING:SPLIT_STRING: quoted string split across lines
#473: FILE: mm/slab.c:3214:
+		seq_printf(m, "size(pgs) allocated failed allocations. "
+				"%d reserved, %d in use, %d last\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:SPACING: No space is necessary after a cast
#479: FILE: mm/slab.c:3220:
+	return (void *) 1;

CHECK:SPACING: No space is necessary after a cast
#488: FILE: mm/slab.c:3229:
+	return (void *) (n + 1);

CHECK:SPACING: No space is necessary after a cast
#497: FILE: mm/slab.c:3238:
+	int n = (int) p;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#501: FILE: mm/slab.c:3242:
+^Iseq_printf(m, "%d  %d  %d %d\n", n, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#502: FILE: mm/slab.c:3243:
+	seq_printf(m, "%d  %d  %d %d\n", n, 
+			atomic_read(&uaf_stats[n].uaf_allocated),

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#508: FILE: mm/slab.c:3249:
+struct seq_operations uafinfo_op = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#516: FILE: mm/slab.c:3257:
+ssize_t uafinfo_write(struct file *file, const char __user *buffer,
+				size_t count, loff_t *ppos)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#518: FILE: mm/slab.c:3259:
+	char kbuf[MAX_SLABINFO_WRITE+1], *tmp;
 	                            ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#522: FILE: mm/slab.c:3263:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#527: FILE: mm/slab.c:3268:
+^Ikbuf[MAX_SLABINFO_WRITE] = '\0'; $

ERROR:SPACING: space required after that ',' (ctx:VxO)
#546: FILE: mm/slab.c:3287:
+	list_for_each(p,&cache_chain) {
 	               ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#546: FILE: mm/slab.c:3287:
+	list_for_each(p,&cache_chain) {
 	                ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#551: FILE: mm/slab.c:3292:
+				printk("UAF: use on %s\n", cachep->name);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#554: FILE: mm/slab.c:3295:
+				printk("UAF: dont use on %s\n", cachep->name);

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#586: FILE: arch/i386/Kconfig:1148:
+config DEBUG_UAF
+	bool "Debug memory allocations (use-after-free)"
+	depends on DEBUG_SLAB
+	help
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#603: FILE: fs/proc/proc_misc.c:360:
+extern struct seq_operations uafinfo_op;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#604: FILE: fs/proc/proc_misc.c:361:
+extern ssize_t uafinfo_write(struct file *, const char __user *, size_t, loff_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#604: FILE: fs/proc/proc_misc.c:361:
+extern ssize_t uafinfo_write(struct file *, const char __user *, size_t, loff_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char __user *' should also have an identifier name
#604: FILE: fs/proc/proc_misc.c:361:
+extern ssize_t uafinfo_write(struct file *, const char __user *, size_t, loff_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#604: FILE: fs/proc/proc_misc.c:361:
+extern ssize_t uafinfo_write(struct file *, const char __user *, size_t, loff_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t *' should also have an identifier name
#604: FILE: fs/proc/proc_misc.c:361:
+extern ssize_t uafinfo_write(struct file *, const char __user *, size_t, loff_t *);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#609: FILE: fs/proc/proc_misc.c:366:
+}
+static struct file_operations proc_uafinfo_operations = {

WARNING:CONST_STRUCT: struct file_operations should normally be const
#609: FILE: fs/proc/proc_misc.c:366:
+static struct file_operations proc_uafinfo_operations = {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#626: FILE: fs/proc/proc_misc.c:699:
+	create_seq_entry("uafinfo",S_IWUSR|S_IRUGO,&proc_uafinfo_operations);
 	                          ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#626: FILE: fs/proc/proc_misc.c:699:
+	create_seq_entry("uafinfo",S_IWUSR|S_IRUGO,&proc_uafinfo_operations);
 	                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#626: FILE: fs/proc/proc_misc.c:699:
+	create_seq_entry("uafinfo",S_IWUSR|S_IRUGO,&proc_uafinfo_operations);
 	                                          ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#626: FILE: fs/proc/proc_misc.c:699:
+	create_seq_entry("uafinfo",S_IWUSR|S_IRUGO,&proc_uafinfo_operations);
 	                                           ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR|S_IRUGO' are not preferred. Consider using octal permissions '0644'.
#626: FILE: fs/proc/proc_misc.c:699:
+	create_seq_entry("uafinfo",S_IWUSR|S_IRUGO,&proc_uafinfo_operations);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ka' - possible side-effects?
#654: FILE: include/asm-i386/page.h:138:
+#define virt_to_page(ka) ({							\
+				struct page *_p;				\
+				if ((unsigned long)(ka) >= VMALLOC_START) {	\
+					_p = vmalloc_to_page((void *)(ka));	\
+					BUG_ON(!_p);				\
+				} else 						\
+					_p = mem_map+(__pa(ka) >> PAGE_SHIFT);	\
+				(_p);						\
+			})

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#658: FILE: include/asm-i386/page.h:142:
+					BUG_ON(!_p);				\

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#659: FILE: include/asm-i386/page.h:143:
+^I^I^I^I} else ^I^I^I^I^I^I\$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#660: FILE: include/asm-i386/page.h:144:
+					_p = mem_map+(__pa(ka) >> PAGE_SHIFT);	\
 					            ^

CHECK:SPACING: No space is necessary after a cast
#684: FILE: include/asm-i386/io.h:76:
+	unsigned long addr = (unsigned long) address;

WARNING:LINE_SPACING: Missing a blank line after declarations
#685: FILE: include/asm-i386/io.h:77:
+	unsigned long addr = (unsigned long) address;
+	if (vmlist && addr >= VMALLOC_START && addr < VMALLOC_END) {

CHECK:SPACING: No space is necessary after a cast
#686: FILE: include/asm-i386/io.h:78:
+		struct page *page = vmalloc_to_page((void *) address);

WARNING:LINE_SPACING: Missing a blank line after declarations
#687: FILE: include/asm-i386/io.h:79:
+		struct page *page = vmalloc_to_page((void *) address);
+		if (page) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#689: FILE: include/asm-i386/io.h:81:
+			unsigned long offset = addr & ~PAGE_MASK;
+			address = page_address(page) + offset;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#706: FILE: mm/vmalloc.c:61:
+void unmap_area_pmd(pgd_t *dir, unsigned long address,
 				  unsigned long size)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000323819.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 22 errors, 57 warnings, 59 checks, 606 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000323819.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
