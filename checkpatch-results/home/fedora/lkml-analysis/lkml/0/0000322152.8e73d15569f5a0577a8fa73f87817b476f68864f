WARNING:TYPO_SPELLING: 'noticable' may be misspelled - perhaps 'noticeable'?
#34: 
kmem_cache_alloc are strictly node-local (adds noticable costs to the 
                                               ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'seperately' may be misspelled - perhaps 'separately'?
#46: 
I'll send them seperately to Andrew.
               ^^^^^^^^^^

WARNING:TYPO_SPELLING: 'EXTRAVERSION' may be misspelled - perhaps 'EXTROVERSION'?
#62: 
//  EXTRAVERSION = -test11
    ^^^^^^^^^^^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#69: FILE: include/linux/slab.h:65:
+extern void *kmem_cache_alloc_node(kmem_cache_t *, int);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kmem_cache_t *' should also have an identifier name
#69: FILE: include/linux/slab.h:65:
+extern void *kmem_cache_alloc_node(kmem_cache_t *, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#69: FILE: include/linux/slab.h:65:
+extern void *kmem_cache_alloc_node(kmem_cache_t *, int);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#87: FILE: mm/slab.c:583:
+	int memsize = sizeof(void*)*entries+sizeof(struct array_cache);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#87: FILE: mm/slab.c:583:
+	int memsize = sizeof(void*)*entries+sizeof(struct array_cache);
 	                           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#87: FILE: mm/slab.c:583:
+	int memsize = sizeof(void*)*entries+sizeof(struct array_cache);
 	                                   ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#92: FILE: mm/slab.c:588:
+		nc = kmem_cache_alloc_node(kmem_find_general_cachep(memsize, GFP_KERNEL),
+					cpu_to_node(cpu));

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#105: FILE: mm/slab.c:601:
 static int __devinit cpuup_callback(struct notifier_block *nfb,

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#113: FILE: mm/slab.c:612:
+			kmem_cache_t* cachep = list_entry(p, kmem_cache_t, next);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#213: FILE: mm/slab.c:1621:
+	if (!(objp = kmem_getpages(cachep, flags, numa_node_id())))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#269: FILE: mm/slab.c:2122:
+	if (!(objp = kmem_getpages(cachep, GFP_KERNEL, nodeid)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#273: FILE: mm/slab.c:2126:
+	if (!(slabp = alloc_slabmgmt(cachep, objp, offset, GFP_KERNEL)))

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#280: FILE: mm/slab.c:2133:
+	objp = slabp->s_mem + slabp->free*cachep->objsize;
 	                                 ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#297: FILE: mm/slab.c:2150:
+		list3_data(cachep)->free_objects += cachep->num-1;
 		                                               ^

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#309: FILE: mm/slab.c:2162:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#311: FILE: mm/slab.c:2164:
+EXPORT_SYMBOL(kmem_cache_alloc_node);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#353: FILE: mm/slab.c:2394:
+	new_shared = alloc_arraycache(-1, batchcount*shared, 0xbaadf00d);
 	                                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#369: FILE: include/linux/page-flags.h:136:
+#define add_page_state(member,delta) mod_page_state(member, (delta))
                              ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000322152.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 6 errors, 7 warnings, 8 checks, 292 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000322152.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
