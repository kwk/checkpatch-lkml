CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#29: 
> On Fri, 30 May 2003, Jörn Engel wrote:
                        ^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#46: 
Jörn
 ^

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#54: 
--- linux-2.5.70-bk9/include/linux/zconf.h~zlib_cleanup_FAR	2003-04-07 19:32:18.000000000 +0200

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#91: FILE: include/linux/zlib.h:66:
+    Byte    *next_in;   /* next input byte */$

CHECK:CAMELCASE: Avoid CamelCase: <Byte>
#91: FILE: include/linux/zlib.h:66:
+    Byte    *next_in;   /* next input byte */

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#96: FILE: include/linux/zlib.h:70:
+    Byte    *next_out;  /* next output byte should be put there */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#102: FILE: include/linux/zlib.h:75:
+    struct internal_state *state; /* not visible by applications */$

WARNING:NEW_TYPEDEFS: do not add new typedefs
#111: FILE: include/linux/zlib.h:85:
+typedef z_stream *z_streamp;

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#111: FILE: include/linux/zlib.h:85:
+typedef z_stream *z_streamp;
                  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo  * bar" should be "foo  *bar"
#140: FILE: include/linux/zlib.h:656:
+ZEXTERN const char  * ZEXPORT zlib_zError           OF((int err));

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <zlib_zError>
#140: FILE: include/linux/zlib.h:656:
+ZEXTERN const char  * ZEXPORT zlib_zError           OF((int err));

CHECK:CAMELCASE: Avoid CamelCase: <zlib_inflateSyncPoint>
#141: FILE: include/linux/zlib.h:657:
+ZEXTERN int           ZEXPORT zlib_inflateSyncPoint OF((z_streamp z));

CHECK:CAMELCASE: Avoid CamelCase: <uLong>
#142: FILE: include/linux/zlib.h:658:
+ZEXTERN const uLong * ZEXPORT zlib_get_crc_table    OF((void));

WARNING:NEW_TYPEDEFS: do not add new typedefs
#163: FILE: include/linux/zutil.h:65:
+typedef uLong (ZEXPORT *check_func) OF((uLong check, const Byte *buf,

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#163: FILE: include/linux/zutil.h:65:
+typedef uLong (ZEXPORT *check_func) OF((uLong check, const Byte *buf,
                        ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#183: FILE: lib/zlib_deflate/deflate.c:76:
+local int read_buf        OF((z_streamp strm, Byte *buf, unsigned size));

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#192: FILE: lib/zlib_deflate/deflate.c:164:
+    memset((char *)s->head, 0, (unsigned)(s->hash_size-1)*sizeof(*s->head));$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#192: FILE: lib/zlib_deflate/deflate.c:164:
+    memset((char *)s->head, 0, (unsigned)(s->hash_size-1)*sizeof(*s->head));

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#192: FILE: lib/zlib_deflate/deflate.c:164:
+    memset((char *)s->head, 0, (unsigned)(s->hash_size-1)*sizeof(*s->head));
                                                       ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#192: FILE: lib/zlib_deflate/deflate.c:164:
+    memset((char *)s->head, 0, (unsigned)(s->hash_size-1)*sizeof(*s->head));
                                                          ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#201: FILE: lib/zlib_deflate/deflate.c:197:
+    ush *overlay;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#210: FILE: lib/zlib_deflate/deflate.c:225:
+    strm->state = (struct internal_state *)s;$

CHECK:SPACING: No space is necessary after a cast
#221: FILE: lib/zlib_deflate/deflate.c:238:
+    s->window = (Byte *) mem->window_memory;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#221: FILE: lib/zlib_deflate/deflate.c:238:
+    s->window = (Byte *) mem->window_memory;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#222: FILE: lib/zlib_deflate/deflate.c:239:
+    s->prev   = (Pos *)  mem->prev_memory;$

CHECK:CAMELCASE: Avoid CamelCase: <Pos>
#222: FILE: lib/zlib_deflate/deflate.c:239:
+    s->prev   = (Pos *)  mem->prev_memory;

CHECK:SPACING: No space is necessary after a cast
#223: FILE: lib/zlib_deflate/deflate.c:240:
+    s->head   = (Pos *)  mem->head_memory;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#223: FILE: lib/zlib_deflate/deflate.c:240:
+    s->head   = (Pos *)  mem->head_memory;$

CHECK:SPACING: No space is necessary after a cast
#229: FILE: lib/zlib_deflate/deflate.c:244:
+    overlay = (ush *) mem->overlay_memory;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#229: FILE: lib/zlib_deflate/deflate.c:244:
+    overlay = (ush *) mem->overlay_memory;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#230: FILE: lib/zlib_deflate/deflate.c:245:
+    s->pending_buf = (uch *) overlay;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#248: FILE: lib/zlib_deflate/deflate.c:285:
+    memcpy((char *)s->window, dictionary, length);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#257: FILE: lib/zlib_deflate/deflate.c:586:
+    ush *overlay;$

CHECK:SPACING: No space is necessary after a cast
#266: FILE: lib/zlib_deflate/deflate.c:602:
+    dest->state = (struct internal_state *) ds;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#266: FILE: lib/zlib_deflate/deflate.c:602:
+    dest->state = (struct internal_state *) ds;$

CHECK:SPACING: No space is necessary after a cast
#275: FILE: lib/zlib_deflate/deflate.c:606:
+    ds->window = (Byte *) mem->window_memory;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#275: FILE: lib/zlib_deflate/deflate.c:606:
+    ds->window = (Byte *) mem->window_memory;$

CHECK:SPACING: No space is necessary after a cast
#276: FILE: lib/zlib_deflate/deflate.c:607:
+    ds->prev   = (Pos *)  mem->prev_memory;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#276: FILE: lib/zlib_deflate/deflate.c:607:
+    ds->prev   = (Pos *)  mem->prev_memory;$

CHECK:SPACING: No space is necessary after a cast
#277: FILE: lib/zlib_deflate/deflate.c:608:
+    ds->head   = (Pos *)  mem->head_memory;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#277: FILE: lib/zlib_deflate/deflate.c:608:
+    ds->head   = (Pos *)  mem->head_memory;$

CHECK:SPACING: No space is necessary after a cast
#278: FILE: lib/zlib_deflate/deflate.c:609:
+    overlay = (ush *) mem->overlay_memory;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#278: FILE: lib/zlib_deflate/deflate.c:609:
+    overlay = (ush *) mem->overlay_memory;$

CHECK:SPACING: No space is necessary after a cast
#279: FILE: lib/zlib_deflate/deflate.c:610:
+    ds->pending_buf = (uch *) overlay;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#279: FILE: lib/zlib_deflate/deflate.c:610:
+    ds->pending_buf = (uch *) overlay;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#298: FILE: lib/zlib_deflate/deflate.c:701:
+    register Byte *scan = s->window + s->strstart; /* current string */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#299: FILE: lib/zlib_deflate/deflate.c:702:
+    register Byte *match;                       /* matched string */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#308: FILE: lib/zlib_deflate/deflate.c:711:
+    Pos *prev = s->prev;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#318: FILE: lib/zlib_deflate/deflate.c:718:
+    register Byte *strend = s->window + s->strstart + MAX_MATCH - 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#319: FILE: lib/zlib_deflate/deflate.c:719:
+    register ush scan_start = *(ush*)scan;$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#319: FILE: lib/zlib_deflate/deflate.c:719:
+    register ush scan_start = *(ush*)scan;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#320: FILE: lib/zlib_deflate/deflate.c:720:
+    register ush scan_end   = *(ush*)(scan+best_len-1);$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#320: FILE: lib/zlib_deflate/deflate.c:720:
+    register ush scan_end   = *(ush*)(scan+best_len-1);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#320: FILE: lib/zlib_deflate/deflate.c:720:
+    register ush scan_end   = *(ush*)(scan+best_len-1);
                                           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#320: FILE: lib/zlib_deflate/deflate.c:720:
+    register ush scan_end   = *(ush*)(scan+best_len-1);
                                                    ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#323: FILE: lib/zlib_deflate/deflate.c:722:
+    register Byte *strend = s->window + s->strstart + MAX_MATCH;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#333: FILE: lib/zlib_deflate/deflate.c:754:
+        if (*(ush*)(match+best_len-1) != scan_end ||$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#333: FILE: lib/zlib_deflate/deflate.c:754:
+        if (*(ush*)(match+best_len-1) != scan_end ||$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#333: FILE: lib/zlib_deflate/deflate.c:754:
+        if (*(ush*)(match+best_len-1) != scan_end ||

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#333: FILE: lib/zlib_deflate/deflate.c:754:
+        if (*(ush*)(match+best_len-1) != scan_end ||
                          ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#333: FILE: lib/zlib_deflate/deflate.c:754:
+        if (*(ush*)(match+best_len-1) != scan_end ||
                                   ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#333: FILE: lib/zlib_deflate/deflate.c:754:
+        if (*(ush*)(match+best_len-1) != scan_end ||
+            *(ush*)match != scan_start) continue;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:CODE_INDENT: code indent should use tabs where possible
#334: FILE: lib/zlib_deflate/deflate.c:755:
+            *(ush*)match != scan_start) continue;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#334: FILE: lib/zlib_deflate/deflate.c:755:
+            *(ush*)match != scan_start) continue;$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#334: FILE: lib/zlib_deflate/deflate.c:755:
+            *(ush*)match != scan_start) continue;

ERROR:CODE_INDENT: code indent should use tabs where possible
#346: FILE: lib/zlib_deflate/deflate.c:769:
+        } while (*(ush*)(scan+=2) == *(ush*)(match+=2) &&$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#346: FILE: lib/zlib_deflate/deflate.c:769:
+        } while (*(ush*)(scan+=2) == *(ush*)(match+=2) &&$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#346: FILE: lib/zlib_deflate/deflate.c:769:
+        } while (*(ush*)(scan+=2) == *(ush*)(match+=2) &&

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#346: FILE: lib/zlib_deflate/deflate.c:769:
+        } while (*(ush*)(scan+=2) == *(ush*)(match+=2) &&

ERROR:SPACING: spaces required around that '+=' (ctx:VxV)
#346: FILE: lib/zlib_deflate/deflate.c:769:
+        } while (*(ush*)(scan+=2) == *(ush*)(match+=2) &&
                              ^

ERROR:SPACING: spaces required around that '+=' (ctx:VxV)
#346: FILE: lib/zlib_deflate/deflate.c:769:
+        } while (*(ush*)(scan+=2) == *(ush*)(match+=2) &&
                                                   ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#347: FILE: lib/zlib_deflate/deflate.c:770:
+                 *(ush*)(scan+=2) == *(ush*)(match+=2) &&$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#347: FILE: lib/zlib_deflate/deflate.c:770:
+                 *(ush*)(scan+=2) == *(ush*)(match+=2) &&$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#347: FILE: lib/zlib_deflate/deflate.c:770:
+                 *(ush*)(scan+=2) == *(ush*)(match+=2) &&

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#347: FILE: lib/zlib_deflate/deflate.c:770:
+                 *(ush*)(scan+=2) == *(ush*)(match+=2) &&

ERROR:SPACING: spaces required around that '+=' (ctx:VxV)
#347: FILE: lib/zlib_deflate/deflate.c:770:
+                 *(ush*)(scan+=2) == *(ush*)(match+=2) &&
                              ^

ERROR:SPACING: spaces required around that '+=' (ctx:VxV)
#347: FILE: lib/zlib_deflate/deflate.c:770:
+                 *(ush*)(scan+=2) == *(ush*)(match+=2) &&
                                                   ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#348: FILE: lib/zlib_deflate/deflate.c:771:
+                 *(ush*)(scan+=2) == *(ush*)(match+=2) &&$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#348: FILE: lib/zlib_deflate/deflate.c:771:
+                 *(ush*)(scan+=2) == *(ush*)(match+=2) &&$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#348: FILE: lib/zlib_deflate/deflate.c:771:
+                 *(ush*)(scan+=2) == *(ush*)(match+=2) &&

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#348: FILE: lib/zlib_deflate/deflate.c:771:
+                 *(ush*)(scan+=2) == *(ush*)(match+=2) &&

ERROR:SPACING: spaces required around that '+=' (ctx:VxV)
#348: FILE: lib/zlib_deflate/deflate.c:771:
+                 *(ush*)(scan+=2) == *(ush*)(match+=2) &&
                              ^

ERROR:SPACING: spaces required around that '+=' (ctx:VxV)
#348: FILE: lib/zlib_deflate/deflate.c:771:
+                 *(ush*)(scan+=2) == *(ush*)(match+=2) &&
                                                   ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#349: FILE: lib/zlib_deflate/deflate.c:772:
+                 *(ush*)(scan+=2) == *(ush*)(match+=2) &&$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#349: FILE: lib/zlib_deflate/deflate.c:772:
+                 *(ush*)(scan+=2) == *(ush*)(match+=2) &&$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#349: FILE: lib/zlib_deflate/deflate.c:772:
+                 *(ush*)(scan+=2) == *(ush*)(match+=2) &&

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#349: FILE: lib/zlib_deflate/deflate.c:772:
+                 *(ush*)(scan+=2) == *(ush*)(match+=2) &&

ERROR:SPACING: spaces required around that '+=' (ctx:VxV)
#349: FILE: lib/zlib_deflate/deflate.c:772:
+                 *(ush*)(scan+=2) == *(ush*)(match+=2) &&
                              ^

ERROR:SPACING: spaces required around that '+=' (ctx:VxV)
#349: FILE: lib/zlib_deflate/deflate.c:772:
+                 *(ush*)(scan+=2) == *(ush*)(match+=2) &&
                                                   ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#358: FILE: lib/zlib_deflate/deflate.c:821:
+            scan_end = *(ush*)(scan+best_len-1);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#358: FILE: lib/zlib_deflate/deflate.c:821:
+            scan_end = *(ush*)(scan+best_len-1);$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#358: FILE: lib/zlib_deflate/deflate.c:821:
+            scan_end = *(ush*)(scan+best_len-1);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#358: FILE: lib/zlib_deflate/deflate.c:821:
+            scan_end = *(ush*)(scan+best_len-1);
                                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#358: FILE: lib/zlib_deflate/deflate.c:821:
+            scan_end = *(ush*)(scan+best_len-1);
                                             ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#368: FILE: lib/zlib_deflate/deflate.c:844:
+    if (memcmp((char *)s->window + match,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#369: FILE: lib/zlib_deflate/deflate.c:845:
+                (char *)s->window + start, length) != EQUAL) {$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#369: FILE: lib/zlib_deflate/deflate.c:845:
+    if (memcmp((char *)s->window + match,
+                (char *)s->window + start, length) != EQUAL) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#369: FILE: lib/zlib_deflate/deflate.c:845:
+                (char *)s->window + start, length) != EQUAL) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#378: FILE: lib/zlib_deflate/deflate.c:876:
+    register Pos *p;$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#384: FILE: lib/zlib_deflate/deflate.c:896:
         } else if (s->strstart >= wsize+MAX_DIST(s)) {
[...]
+            memcpy((char *)s->window, (char *)s->window+wsize,

ERROR:CODE_INDENT: code indent should use tabs where possible
#387: FILE: lib/zlib_deflate/deflate.c:898:
+            memcpy((char *)s->window, (char *)s->window+wsize,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#387: FILE: lib/zlib_deflate/deflate.c:898:
+            memcpy((char *)s->window, (char *)s->window+wsize,$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#387: FILE: lib/zlib_deflate/deflate.c:898:
+            memcpy((char *)s->window, (char *)s->window+wsize,
                                                        ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#397: FILE: lib/zlib_deflate/deflate.c:967:
+                   (char *)&s->window[(unsigned)s->block_start] : \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#397: FILE: lib/zlib_deflate/deflate.c:967:
+                   (char *)&s->window[(unsigned)s->block_start] : \$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#397: FILE: lib/zlib_deflate/deflate.c:967:
+                   (char *)&s->window[(unsigned)s->block_start] : \

ERROR:CODE_INDENT: code indent should use tabs where possible
#398: FILE: lib/zlib_deflate/deflate.c:968:
+                   (char *)Z_NULL), \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#398: FILE: lib/zlib_deflate/deflate.c:968:
+                   (char *)Z_NULL), \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#409: FILE: lib/zlib_deflate/deftree.c:116:
+    const int *extra_bits;       /* extra bits for each code or NULL */$

ERROR:POINTER_LOCATION: "foo gen_codes      bar" should be "foo gen_codes bar"
#418: FILE: lib/zlib_deflate/deftree.c:139:
+local void gen_codes      OF((ct_data *tree, int max_code, ush *bl_count));

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#418: FILE: lib/zlib_deflate/deftree.c:139:
+local void gen_codes      OF((ct_data *tree, int max_code, ush *bl_count));

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#427: FILE: lib/zlib_deflate/deftree.c:152:
+local void copy_block     OF((deflate_state *s, char *buf, unsigned len,

ERROR:POINTER_LOCATION: "foo copy_block     bar" should be "foo copy_block bar"
#427: FILE: lib/zlib_deflate/deftree.c:152:
+local void copy_block     OF((deflate_state *s, char *buf, unsigned len,

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#427: FILE: lib/zlib_deflate/deftree.c:152:
+local void copy_block     OF((deflate_state *s, char *buf, unsigned len,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#436: FILE: lib/zlib_deflate/deftree.c:417:
+    const int *extra     = desc->stat_desc->extra_bits;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#472: FILE: lib/zlib_deflate/deftree.c:917:
+        if (buf == (char*)0) error ("block vanished");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#472: FILE: lib/zlib_deflate/deftree.c:917:
+        if (buf == (char*)0) error ("block vanished");$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#472: FILE: lib/zlib_deflate/deftree.c:917:
+        if (buf == (char*)0) error ("block vanished");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#472: FILE: lib/zlib_deflate/deftree.c:917:
+        if (buf == (char*)0) error ("block vanished");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#472: FILE: lib/zlib_deflate/deftree.c:917:
+        if (buf == (char*)0) error ("block vanished");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#513: FILE: lib/zlib_deflate/defutil.h:74:
+    Byte *pending_buf;   /* output still pending */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#516: FILE: lib/zlib_deflate/defutil.h:76:
+    Byte *pending_out;   /* next pending byte to output to the stream */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#525: FILE: lib/zlib_deflate/defutil.h:89:
+    Byte *window;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#534: FILE: lib/zlib_deflate/defutil.h:104:
+    Pos *prev;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#541: FILE: lib/zlib_deflate/defutil.h:110:
+    Pos *head; /* Heads of the hash chains or NIL. */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#550: FILE: lib/zlib_deflate/defutil.h:190:
+    uch *l_buf;          /* buffer for literals or lengths */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#559: FILE: lib/zlib_deflate/defutil.h:214:
+    ush *d_buf;$

ERROR:POINTER_LOCATION: "foo  zlib_tr_flush_block  bar" should be "foo  zlib_tr_flush_block bar"
#577: FILE: lib/zlib_deflate/defutil.h:269:
+ulg  zlib_tr_flush_block  OF((deflate_state *s, char *buf, ulg stored_len,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#592: FILE: lib/zlib_inflate/infcodes.c:50:
+  Byte *p;              /* input data pointer */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#595: FILE: lib/zlib_inflate/infcodes.c:52:
+  Byte *q;              /* output window write pointer */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#598: FILE: lib/zlib_inflate/infcodes.c:54:
+  Byte *f;              /* pointer to copy strings from */$

WARNING:NEW_TYPEDEFS: do not add new typedefs
#609: FILE: lib/zlib_inflate/infcodes.h:17:
+typedef struct inflate_codes_state inflate_codes_statef;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#620: FILE: lib/zlib_inflate/inftrees.c:26:
+    uInt *,             /* code lengths in bits */$

CHECK:CAMELCASE: Avoid CamelCase: <uInt>
#620: FILE: lib/zlib_inflate/inftrees.c:26:
+    uInt *,             /* code lengths in bits */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#627: FILE: lib/zlib_inflate/inftrees.c:29:
+    const uInt *,       /* list of base values for non-simple codes */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#628: FILE: lib/zlib_inflate/inftrees.c:30:
+    const uInt *,       /* list of extra bits for non-simple codes */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#629: FILE: lib/zlib_inflate/inftrees.c:31:
+    inflate_huft **,    /* result: starting table */$

CHECK:SPACING: spaces preferred around that '*' (ctx:WxO)
#629: FILE: lib/zlib_inflate/inftrees.c:31:
+    inflate_huft **,    /* result: starting table */
                  ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#630: FILE: lib/zlib_inflate/inftrees.c:32:
+    uInt *,             /* maximum lookup bits (returns actual) */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#634: FILE: lib/zlib_inflate/inftrees.c:35:
+    uInt * ));          /* space for values */$

ERROR:SPACING: space prohibited before that close parenthesis ')'
#634: FILE: lib/zlib_inflate/inftrees.c:35:
+    uInt * ));          /* space for values */

WARNING:LINE_SPACING: Missing a blank line after declarations
#657: FILE: lib/zlib_inflate/inftrees.c:96:
+	const uInt *e,         /* list of extra bits for non-simple codes */
+	inflate_huft **t,      /* result: starting table */

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:WxO)
#657: FILE: lib/zlib_inflate/inftrees.c:96:
+	inflate_huft **t,      /* result: starting table */
 	             ^

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#659: FILE: lib/zlib_inflate/inftrees.c:98:
+	inflate_huft *hp,      /* space for trees */
 	             ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#661: FILE: lib/zlib_inflate/inftrees.c:100:
+	uInt *hn,              /* hufts used in space */
+	uInt *v                /* working area: values in order of bit length */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#670: FILE: lib/zlib_inflate/inftrees.c:119:
+  register uInt *p;             /* pointer into c[], b[], or v[] */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#677: FILE: lib/zlib_inflate/inftrees.c:125:
+  uInt *xp;                     /* pointer into x */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#698: FILE: lib/zlib_inflate/inftrees.c:302:
+  uInt *v;              /* work area for huft_build */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#702: FILE: lib/zlib_inflate/inftrees.c:305:
+  r = huft_build(c, 19, 19, (uInt*)Z_NULL, (uInt*)Z_NULL,$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#702: FILE: lib/zlib_inflate/inftrees.c:305:
+  r = huft_build(c, 19, 19, (uInt*)Z_NULL, (uInt*)Z_NULL,

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#702: FILE: lib/zlib_inflate/inftrees.c:305:
+  r = huft_build(c, 19, 19, (uInt*)Z_NULL, (uInt*)Z_NULL,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#727: FILE: lib/zlib_inflate/inftrees.c:331:
+  uInt *v;              /* work area for huft_build */$

WARNING:NEW_TYPEDEFS: do not add new typedefs
#753: FILE: lib/zlib_inflate/inftrees.h:17:
+typedef struct inflate_huft_s inflate_huft;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#764: FILE: lib/zlib_inflate/inftrees.h:39:
+    uInt *,                     /* 19 code lengths */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#765: FILE: lib/zlib_inflate/inftrees.h:40:
+    uInt *,                     /* bits tree desired/actual depth */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#766: FILE: lib/zlib_inflate/inftrees.h:41:
+    inflate_huft **,            /* bits tree result */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#778: FILE: lib/zlib_inflate/inftrees.h:48:
+    uInt *,                     /* that many (total) code lengths */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#779: FILE: lib/zlib_inflate/inftrees.h:49:
+    uInt *,                     /* literal desired/actual bit depth */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#780: FILE: lib/zlib_inflate/inftrees.h:50:
+    uInt *,                     /* distance desired/actual bit depth */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#781: FILE: lib/zlib_inflate/inftrees.h:51:
+    inflate_huft **,            /* literal/length tree result */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#782: FILE: lib/zlib_inflate/inftrees.h:52:
+    inflate_huft **,            /* distance tree result */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#791: FILE: lib/zlib_inflate/inftrees.h:57:
+    uInt *,                     /* literal desired/actual bit depth */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#792: FILE: lib/zlib_inflate/inftrees.h:58:
+    uInt *,                     /* distance desired/actual bit depth */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#793: FILE: lib/zlib_inflate/inftrees.h:59:
+    inflate_huft **,            /* literal/length tree result */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#794: FILE: lib/zlib_inflate/inftrees.h:60:
+    inflate_huft **,            /* distance tree result */$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#812: FILE: lib/zlib_inflate/infblock.c:82:
   if (s->checkfn != Z_NULL)
+    z->adler = s->check = (*s->checkfn)(0L, (const Byte *)Z_NULL, 0);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#814: FILE: lib/zlib_inflate/infblock.c:83:
+    z->adler = s->check = (*s->checkfn)(0L, (const Byte *)Z_NULL, 0);$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#814: FILE: lib/zlib_inflate/infblock.c:83:
+    z->adler = s->check = (*s->checkfn)(0L, (const Byte *)Z_NULL, 0);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#823: FILE: lib/zlib_inflate/infblock.c:114:
+  Byte *p;              /* input data pointer */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#826: FILE: lib/zlib_inflate/infblock.c:116:
+  Byte *q;              /* output window write pointer */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#846: FILE: lib/zlib_inflate/inffast.c:41:
+  Byte *p;              /* input data pointer */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#849: FILE: lib/zlib_inflate/inffast.c:43:
+  Byte *q;              /* output window write pointer */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#856: FILE: lib/zlib_inflate/inffast.c:49:
+  Byte *r;              /* copy source pointer */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#867: FILE: lib/zlib_inflate/infutil.h:43:
+      uInt *blens;              /* bit lengths of codes */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#879: FILE: lib/zlib_inflate/infutil.h:58:
+  Byte *window;         /* sliding window */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#880: FILE: lib/zlib_inflate/infutil.h:59:
+  Byte *end;            /* one byte after sliding window */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#881: FILE: lib/zlib_inflate/infutil.h:60:
+  Byte *read;           /* window read pointer */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#882: FILE: lib/zlib_inflate/infutil.h:61:
+  Byte *write;          /* window write pointer */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#894: FILE: lib/zlib_inflate/infutil.c:30:
+  Byte *p;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#895: FILE: lib/zlib_inflate/infutil.c:31:
+  Byte *q;$

WARNING:NEW_TYPEDEFS: do not add new typedefs
#906: FILE: lib/zlib_inflate/infblock.h:15:
+typedef struct inflate_blocks_state inflate_blocks_statef;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#915: FILE: lib/zlib_inflate/infblock.h:30:
+    uLong *));                  /* check value on output */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#924: FILE: lib/zlib_inflate/infblock.h:38:
+    const Byte *d,   /* dictionary */$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000364761.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 43 errors, 107 warnings, 33 checks, 777 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000364761.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
