ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#104: FILE: drivers/base/sys.c:83:
+sysdev_class_show(struct kobject * kobj, struct attribute * attr, char * buffer)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#104: FILE: drivers/base/sys.c:83:
+sysdev_class_show(struct kobject * kobj, struct attribute * attr, char * buffer)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#104: FILE: drivers/base/sys.c:83:
+sysdev_class_show(struct kobject * kobj, struct attribute * attr, char * buffer)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#106: FILE: drivers/base/sys.c:85:
+	struct sysdev_class * sysdev_class = to_sysdev_class(kobj);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#107: FILE: drivers/base/sys.c:86:
+	struct sysdev_class_attribute * sysdev_class_attr = to_sysdev_class_attr(attr);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#115: FILE: drivers/base/sys.c:94:
+sysdev_class_store(struct kobject * kobj, struct attribute * attr,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#115: FILE: drivers/base/sys.c:94:
+sysdev_class_store(struct kobject * kobj, struct attribute * attr,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#116: FILE: drivers/base/sys.c:95:
+sysdev_class_store(struct kobject * kobj, struct attribute * attr,
+	     const char * buffer, size_t count)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#116: FILE: drivers/base/sys.c:95:
+	     const char * buffer, size_t count)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#118: FILE: drivers/base/sys.c:97:
+	struct sysdev_class * sysdev_class = to_sysdev_class(kobj);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#119: FILE: drivers/base/sys.c:98:
+	struct sysdev_class_attribute * sysdev_class_attr = to_sysdev_class_attr(attr);

WARNING:CONST_STRUCT: struct sysfs_ops should normally be const
#126: FILE: drivers/base/sys.c:105:
+static struct sysfs_ops sysdev_class_sysfs_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#152: FILE: drivers/base/sys.c:141:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#158: FILE: drivers/base/sys.c:147:
+EXPORT_SYMBOL_GPL(sysdev_class_create_file);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#159: FILE: drivers/base/sys.c:148:
+EXPORT_SYMBOL_GPL(sysdev_class_remove_file);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sysdev_class *' should also have an identifier name
#172: FILE: include/linux/sysdev.h:45:
+	ssize_t (*show)(struct sysdev_class *, char *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#172: FILE: include/linux/sysdev.h:45:
+	ssize_t (*show)(struct sysdev_class *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sysdev_class *' should also have an identifier name
#173: FILE: include/linux/sysdev.h:46:
+	ssize_t (*store)(struct sysdev_class *, const char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#173: FILE: include/linux/sysdev.h:46:
+	ssize_t (*store)(struct sysdev_class *, const char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#173: FILE: include/linux/sysdev.h:46:
+	ssize_t (*store)(struct sysdev_class *, const char *, size_t);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#176: FILE: include/linux/sysdev.h:49:
+#define SYSDEV_CLASS_ATTR(_name,_mode,_show,_store) ^I^I\$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#176: FILE: include/linux/sysdev.h:49:
+#define SYSDEV_CLASS_ATTR(_name,_mode,_show,_store) 		\
                                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#176: FILE: include/linux/sysdev.h:49:
+#define SYSDEV_CLASS_ATTR(_name,_mode,_show,_store) 		\
                                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#176: FILE: include/linux/sysdev.h:49:
+#define SYSDEV_CLASS_ATTR(_name,_mode,_show,_store) 		\
                                            ^

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#176: FILE: include/linux/sysdev.h:49:
+#define SYSDEV_CLASS_ATTR(_name,_mode,_show,_store) 		\
+struct sysdev_class_attribute attr_##_name = { 			\
+	.attr = {.name = __stringify(_name), .mode = _mode },	\
+	.show	= _show,					\
+	.store	= _store,					\
+};

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#177: FILE: include/linux/sysdev.h:50:
+struct sysdev_class_attribute attr_##_name = { ^I^I^I\$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#183: FILE: include/linux/sysdev.h:56:
+extern int sysdev_class_create_file(struct sysdev_class *, struct sysdev_class_attribute *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sysdev_class *' should also have an identifier name
#183: FILE: include/linux/sysdev.h:56:
+extern int sysdev_class_create_file(struct sysdev_class *, struct sysdev_class_attribute *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sysdev_class_attribute *' should also have an identifier name
#183: FILE: include/linux/sysdev.h:56:
+extern int sysdev_class_create_file(struct sysdev_class *, struct sysdev_class_attribute *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#184: FILE: include/linux/sysdev.h:57:
+extern void sysdev_class_remove_file(struct sysdev_class *, struct sysdev_class_attribute *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sysdev_class *' should also have an identifier name
#184: FILE: include/linux/sysdev.h:57:
+extern void sysdev_class_remove_file(struct sysdev_class *, struct sysdev_class_attribute *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sysdev_class_attribute *' should also have an identifier name
#184: FILE: include/linux/sysdev.h:57:
+extern void sysdev_class_remove_file(struct sysdev_class *, struct sysdev_class_attribute *);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000214465.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 13 errors, 15 warnings, 4 checks, 86 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000214465.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
