CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#169: FILE: fs/dcache.c:417:
+		dentry = list_entry(sb->s_dentry_lru.prev,
+					struct dentry, d_lru);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#171: FILE: fs/dcache.c:419:
+		BUG_ON(dentry->d_sb != sb);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#257: FILE: fs/dcache.c:468:
+	static struct super_block *sb_hand = NULL;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sb_hand"
#261: FILE: fs/dcache.c:472:
+	if (sb_hand == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sb->s_root != NULL'
#311: FILE: fs/dcache.c:495:
+			if ((sb->s_root != NULL) &&
+			    (!list_empty(&sb->s_dentry_lru))) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sb->s_root"
#311: FILE: fs/dcache.c:495:
+			if ((sb->s_root != NULL) &&

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#314: FILE: fs/dcache.c:498:
+				__shrink_dcache_sb(sb, &count,
+						DCACHE_REFERENCED);

ERROR:CODE_INDENT: code indent should use tabs where possible
#333: FILE: fs/dcache.c:511:
+ ^I^I^Ibreak;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#333: FILE: fs/dcache.c:511:
+ ^I^I^Ibreak;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#333: FILE: fs/dcache.c:511:
+ ^I^I^Ibreak;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#334: FILE: fs/dcache.c:512:
+ ^I}$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#334: FILE: fs/dcache.c:512:
+ ^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#334: FILE: fs/dcache.c:512:
+ ^I}$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#337: FILE: fs/dcache.c:515:
+		 * list again. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000074868.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 3 errors, 6 warnings, 5 checks, 415 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000074868.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
