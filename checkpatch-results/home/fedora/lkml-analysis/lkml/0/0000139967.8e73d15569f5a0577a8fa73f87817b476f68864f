CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#169: FILE: arch/um/include/os.h:209:
+extern int run_helper(void (*pre_exec)(void *), void *pre_data, char **argv,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#171: FILE: arch/um/include/os.h:211:
+extern int run_helper_thread(int (*proc)(void *), void *arg, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#171: FILE: arch/um/include/os.h:211:
+extern int run_helper_thread(int (*proc)(void *), void *arg, 

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#174: FILE: arch/um/include/os.h:214:
+extern int helper_wait(int pid);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#468: FILE: arch/um/os-Linux/helper.c:1:
+/* $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#468: FILE: arch/um/os-Linux/helper.c:1:
+/* 

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#486: FILE: arch/um/os-Linux/helper.c:19:
+	void (*pre_exec)(void*);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void*' should also have an identifier name
#486: FILE: arch/um/os-Linux/helper.c:19:
+	void (*pre_exec)(void*);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#493: FILE: arch/um/os-Linux/helper.c:26:
+int helper_pause = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

ERROR:SPACING: space required before the open brace '{'
#505: FILE: arch/um/os-Linux/helper.c:38:
+	if(helper_pause){

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#505: FILE: arch/um/os-Linux/helper.c:38:
+	if(helper_pause){

ERROR:SPACING: space required before the open parenthesis '('
#509: FILE: arch/um/os-Linux/helper.c:42:
+	if(data->pre_exec != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "data->pre_exec"
#509: FILE: arch/um/os-Linux/helper.c:42:
+	if(data->pre_exec != NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#513: FILE: arch/um/os-Linux/helper.c:46:
+	printk("execvp of '%s' failed - errno = %d\n", argv[0], errno);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#516: FILE: arch/um/os-Linux/helper.c:49:
+	return(0);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#520: FILE: arch/um/os-Linux/helper.c:53:
+ * XXX The alloc_stack here breaks if this is called in the tracing thread */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'stack_out != NULL'
#528: FILE: arch/um/os-Linux/helper.c:61:
+	if((stack_out != NULL) && (*stack_out != 0))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:SPACING: space required before the open parenthesis '('
#528: FILE: arch/um/os-Linux/helper.c:61:
+	if((stack_out != NULL) && (*stack_out != 0))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "stack_out"
#528: FILE: arch/um/os-Linux/helper.c:61:
+	if((stack_out != NULL) && (*stack_out != 0))

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#530: FILE: arch/um/os-Linux/helper.c:63:
+	else stack = alloc_stack(0, um_in_interrupt());

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:SPACING: space required before the open parenthesis '('
#531: FILE: arch/um/os-Linux/helper.c:64:
+	if(stack == 0)

ERROR:SPACING: space required before the open brace '{'
#535: FILE: arch/um/os-Linux/helper.c:68:
+	if(ret < 0){

ERROR:SPACING: space required before the open parenthesis '('
#535: FILE: arch/um/os-Linux/helper.c:68:
+	if(ret < 0){

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#536: FILE: arch/um/os-Linux/helper.c:69:
+		printk("run_helper : pipe failed, ret = %d\n", -ret);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'run_helper', this function's name, in a string
#536: FILE: arch/um/os-Linux/helper.c:69:
+		printk("run_helper : pipe failed, ret = %d\n", -ret);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:SPACING: space required before the open brace '{'
#541: FILE: arch/um/os-Linux/helper.c:74:
+	if(ret < 0){

ERROR:SPACING: space required before the open parenthesis '('
#541: FILE: arch/um/os-Linux/helper.c:74:
+	if(ret < 0){

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#542: FILE: arch/um/os-Linux/helper.c:75:
+		printk("run_helper : setting FD_CLOEXEC failed, ret = %d\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'run_helper', this function's name, in a string
#542: FILE: arch/um/os-Linux/helper.c:75:
+		printk("run_helper : setting FD_CLOEXEC failed, ret = %d\n",

CHECK:SPACING: No space is necessary after a cast
#552: FILE: arch/um/os-Linux/helper.c:85:
+	pid = clone(helper_child, (void *) sp, CLONE_VM | SIGCHLD, &data);

ERROR:SPACING: space required before the open brace '{'
#553: FILE: arch/um/os-Linux/helper.c:86:
+	if(pid < 0){

ERROR:SPACING: space required before the open parenthesis '('
#553: FILE: arch/um/os-Linux/helper.c:86:
+	if(pid < 0){

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#555: FILE: arch/um/os-Linux/helper.c:88:
+		printk("run_helper : clone failed, errno = %d\n", errno);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'run_helper', this function's name, in a string
#555: FILE: arch/um/os-Linux/helper.c:88:
+		printk("run_helper : clone failed, errno = %d\n", errno);

ERROR:SPACING: space required before the open brace '{'
#564: FILE: arch/um/os-Linux/helper.c:97:
+	if(n < 0){

ERROR:SPACING: space required before the open parenthesis '('
#564: FILE: arch/um/os-Linux/helper.c:97:
+	if(n < 0){

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#565: FILE: arch/um/os-Linux/helper.c:98:
+		printk("run_helper : read on pipe failed, ret = %d\n", -n);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'run_helper', this function's name, in a string
#565: FILE: arch/um/os-Linux/helper.c:98:
+		printk("run_helper : read on pipe failed, ret = %d\n", -n);

ERROR:SPACING: space required before the open brace '{'
#570: FILE: arch/um/os-Linux/helper.c:103:
+	else if(n != 0){

ERROR:SPACING: space required before the open parenthesis '('
#570: FILE: arch/um/os-Linux/helper.c:103:
+	else if(n != 0){

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#570: FILE: arch/um/os-Linux/helper.c:103:
+	}
+	else if(n != 0){

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required before the open parenthesis '('
#582: FILE: arch/um/os-Linux/helper.c:115:
+	if(stack_out == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!stack_out"
#582: FILE: arch/um/os-Linux/helper.c:115:
+	if(stack_out == NULL)

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#584: FILE: arch/um/os-Linux/helper.c:117:
+	else *stack_out = stack;

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#585: FILE: arch/um/os-Linux/helper.c:118:
+	return(ret);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#588: FILE: arch/um/os-Linux/helper.c:121:
+int run_helper_thread(int (*proc)(void *), void *arg, unsigned int flags, $

ERROR:SPACING: space required before the open parenthesis '('
#595: FILE: arch/um/os-Linux/helper.c:128:
+	if(stack == 0) return(-ENOMEM);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#595: FILE: arch/um/os-Linux/helper.c:128:
+	if(stack == 0) return(-ENOMEM);

CHECK:SPACING: No space is necessary after a cast
#598: FILE: arch/um/os-Linux/helper.c:131:
+	pid = clone(proc, (void *) sp, flags | SIGCHLD, arg);

ERROR:SPACING: space required before the open brace '{'
#599: FILE: arch/um/os-Linux/helper.c:132:
+	if(pid < 0){

ERROR:SPACING: space required before the open parenthesis '('
#599: FILE: arch/um/os-Linux/helper.c:132:
+	if(pid < 0){

ERROR:TRAILING_WHITESPACE: trailing whitespace
#601: FILE: arch/um/os-Linux/helper.c:134:
+^I^Iprintk("run_helper_thread : clone failed, errno = %d\n", $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#601: FILE: arch/um/os-Linux/helper.c:134:
+		printk("run_helper_thread : clone failed, errno = %d\n", 

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'run_helper_thread', this function's name, in a string
#601: FILE: arch/um/os-Linux/helper.c:134:
+		printk("run_helper_thread : clone failed, errno = %d\n", 

ERROR:SPACING: space required before the open brace '{'
#605: FILE: arch/um/os-Linux/helper.c:138:
+	if(stack_out == NULL){

ERROR:SPACING: space required before the open parenthesis '('
#605: FILE: arch/um/os-Linux/helper.c:138:
+	if(stack_out == NULL){

CHECK:BRACES: braces {} should be used on all arms of this statement
#605: FILE: arch/um/os-Linux/helper.c:138:
+	if(stack_out == NULL){
[...]
+	else *stack_out = stack;
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!stack_out"
#605: FILE: arch/um/os-Linux/helper.c:138:
+	if(stack_out == NULL){

ERROR:SPACING: space required before the open brace '{'
#607: FILE: arch/um/os-Linux/helper.c:140:
+		if(pid < 0){

ERROR:SPACING: space required before the open parenthesis '('
#607: FILE: arch/um/os-Linux/helper.c:140:
+		if(pid < 0){

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#609: FILE: arch/um/os-Linux/helper.c:142:
+			printk("run_helper_thread - wait failed, errno = %d\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'run_helper_thread', this function's name, in a string
#609: FILE: arch/um/os-Linux/helper.c:142:
+			printk("run_helper_thread - wait failed, errno = %d\n",

ERROR:SPACING: space required before the open parenthesis '('
#613: FILE: arch/um/os-Linux/helper.c:146:
+		if(!WIFEXITED(status) || (WEXITSTATUS(status) != 0))

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#614: FILE: arch/um/os-Linux/helper.c:147:
+			printk("run_helper_thread - thread returned status "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'run_helper_thread', this function's name, in a string
#614: FILE: arch/um/os-Linux/helper.c:147:
+			printk("run_helper_thread - thread returned status "

WARNING:SPLIT_STRING: quoted string split across lines
#615: FILE: arch/um/os-Linux/helper.c:148:
+			printk("run_helper_thread - thread returned status "
+			       "0x%x\n", status);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#618: FILE: arch/um/os-Linux/helper.c:151:
+	else *stack_out = stack;

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#618: FILE: arch/um/os-Linux/helper.c:151:
+	}
+	else *stack_out = stack;

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#619: FILE: arch/um/os-Linux/helper.c:152:
+	return(pid);

ERROR:SPACING: space required before the open brace '{'
#627: FILE: arch/um/os-Linux/helper.c:160:
+	if(ret < 0){

ERROR:SPACING: space required before the open parenthesis '('
#627: FILE: arch/um/os-Linux/helper.c:160:
+	if(ret < 0){

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#629: FILE: arch/um/os-Linux/helper.c:162:
+		printk("helper_wait : waitpid failed, errno = %d\n", errno);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'helper_wait', this function's name, in a string
#629: FILE: arch/um/os-Linux/helper.c:162:
+		printk("helper_wait : waitpid failed, errno = %d\n", errno);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000139967.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 41 errors, 21 warnings, 11 checks, 308 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000139967.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
