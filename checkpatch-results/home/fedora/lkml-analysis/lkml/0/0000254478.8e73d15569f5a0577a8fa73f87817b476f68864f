WARNING:TYPO_SPELLING: 'hierarchie' may be misspelled - perhaps 'hierarchy'?
#50: 
the attached patch creates a /sys/cryptoapi/<cipher-name>/ hierarchie
                                                           ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'syfs' may be misspelled - perhaps 'sysfs'?
#60: 
to change this should be neglectable (and centered at syfs.c).
                                                      ^^^^

WARNING:TYPO_SPELLING: 'seperated' may be misspelled - perhaps 'separated'?
#62: 
Also the different cipher types (digest, compress..) could be seperated
                                                              ^^^^^^^^^

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#91: 
diff -u -N -r linux-2.6.9-rc1/arch/i386/crypto/aes.c linux-2.6.9-rc1-sys2/a=

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#125: FILE: crypto/api.c:22:
=20

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

WARNING:CONST_STRUCT: struct sysfs_ops should normally be const
#129: FILE: crypto/api.c:24:
+extern struct sysfs_ops cryptoapi_ops;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#130: FILE: crypto/api.c:25:
+extern struct attribute cryptoapi_attr_blocksize;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#131: FILE: crypto/api.c:26:
+extern struct attribute cryptoapi_attr_digestsize;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#132: FILE: crypto/api.c:27:
+extern struct attribute cryptoapi_attr_minkeysize;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#133: FILE: crypto/api.c:28:
+extern struct attribute cryptoapi_attr_maxkeysize;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#134: FILE: crypto/api.c:29:
+extern struct attribute *cryptoapi_attributes[];

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#136: FILE: crypto/api.c:31:
+extern ssize_t cryptoapi_show(struct kobject *kobj, struct attribute *attr=
                                                                           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#136: FILE: crypto/api.c:31:
+extern ssize_t cryptoapi_show(struct kobject *kobj, struct attribute *attr=

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#141: FILE: crypto/api.c:35:
+static struct kobj_type cryptoapi_type =3D {
                                        ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#142: FILE: crypto/api.c:36:
+	.release   =3D cryptoapi_release,
 	           ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#144: FILE: crypto/api.c:38:
+	.sysfs_ops =3D &cryptoapi_ops,
 	           ^

CHECK:SPACING: spaces preferred around that '&' (ctx:WxV)
#144: FILE: crypto/api.c:38:
+	.sysfs_ops =3D &cryptoapi_ops,
 	               ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#145: FILE: crypto/api.c:39:
+	.default_attrs =3D cryptoapi_attributes
 	               ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around alg->cra_obj
#155: FILE: crypto/api.c:48:
+	kobject_get(&(alg->cra_obj));

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around alg->cra_obj
#161: FILE: crypto/api.c:53:
+	kobject_put(&(alg->cra_obj));

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#173: FILE: crypto/api.c:58:
+	struct kobject *obj=3DNULL;
 	                   ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#174: FILE: crypto/api.c:59:
+	struct crypto_alg *result=3DNULL;
 	                         ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#182: FILE: crypto/api.c:61:
+	obj =3D kset_find_obj(&(cryptoapi_subsys.kset), name);
 	    ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around cryptoapi_subsys.kset
#182: FILE: crypto/api.c:61:
+	obj =3D kset_find_obj(&(cryptoapi_subsys.kset), name);

ERROR:SPACING: space required before the open parenthesis '('
#184: FILE: crypto/api.c:63:
+	if(obj) {

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#185: FILE: crypto/api.c:64:
+		result =3D container_of(obj, struct crypto_alg, cra_obj);
 		       ^

ERROR:SPACING: space required before the open parenthesis '('
#186: FILE: crypto/api.c:65:
+		if(result)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#187: FILE: crypto/api.c:66:
+			result =3D (crypto_alg_get(result))?result:NULL;

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#187: FILE: crypto/api.c:66:
+			result =3D (crypto_alg_get(result))?result:NULL;
 			       ^

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#187: FILE: crypto/api.c:66:
+			result =3D (crypto_alg_get(result))?result:NULL;
 			                                   ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#187: FILE: crypto/api.c:66:
+			result =3D (crypto_alg_get(result))?result:NULL;
 			                                          ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around cryptoapi_subsys.kset
#208: FILE: crypto/api.c:185:
+	if(kset_find_obj(&(cryptoapi_subsys.kset), alg->cra_name)) {

ERROR:SPACING: space required before the open parenthesis '('
#208: FILE: crypto/api.c:185:
+	if(kset_find_obj(&(cryptoapi_subsys.kset), alg->cra_name)) {

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#209: FILE: crypto/api.c:186:
+		ret =3D -EEXIST;
 		    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#209: FILE: crypto/api.c:186:
+		ret =3D -EEXIST;
 		        ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around alg->cra_obj
#211: FILE: crypto/api.c:188:
+		kobject_init(&(alg->cra_obj));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#212: FILE: crypto/api.c:189:
+		BUG_ON(kobject_set_name(&(alg->cra_obj), alg->cra_name));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around alg->cra_obj
#212: FILE: crypto/api.c:189:
+		BUG_ON(kobject_set_name(&(alg->cra_obj), alg->cra_name));

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#213: FILE: crypto/api.c:190:
+		alg->cra_obj.kset =3D &cryptoapi_subsys.kset;
 		                  ^

CHECK:SPACING: spaces preferred around that '&' (ctx:WxV)
#213: FILE: crypto/api.c:190:
+		alg->cra_obj.kset =3D &cryptoapi_subsys.kset;
 		                      ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#214: FILE: crypto/api.c:191:
+		BUG_ON(kobject_add(&(alg->cra_obj)));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around alg->cra_obj
#214: FILE: crypto/api.c:191:
+		BUG_ON(kobject_add(&(alg->cra_obj)));

ERROR:SPACING: space required before the open parenthesis '('
#216: FILE: crypto/api.c:193:
+		switch(alg->cra_flags & CRYPTO_ALG_TYPE_MASK) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around alg->cra_obj
#218: FILE: crypto/api.c:195:
+			WARN_ON(sysfs_create_file(&(alg->cra_obj), &cryptoapi_attr_blocksize));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around alg->cra_obj
#219: FILE: crypto/api.c:196:
+			WARN_ON(sysfs_create_file(&(alg->cra_obj), &cryptoapi_attr_minkeysize));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around alg->cra_obj
#220: FILE: crypto/api.c:197:
+			WARN_ON(sysfs_create_file(&(alg->cra_obj), &cryptoapi_attr_maxkeysize));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around alg->cra_obj
#223: FILE: crypto/api.c:200:
+			WARN_ON(sysfs_create_file(&(alg->cra_obj), &cryptoapi_attr_digestsize));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around cryptoapi_subsys.kset
#250: FILE: crypto/api.c:211:
+	if(kset_find_obj(&(cryptoapi_subsys.kset), alg->cra_name)) {

ERROR:SPACING: space required before the open parenthesis '('
#250: FILE: crypto/api.c:211:
+	if(kset_find_obj(&(cryptoapi_subsys.kset), alg->cra_name)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around alg->cra_obj
#251: FILE: crypto/api.c:212:
+		kobject_unregister(&(alg->cra_obj));

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#252: FILE: crypto/api.c:213:
+		ret =3D 0;
 		    ^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#484: FILE: crypto/proc.c:33:
+	struct list_head *e =3D &(((struct kobject*)p)->entry);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#484: FILE: crypto/proc.c:33:
+	struct list_head *e =3D &(((struct kobject*)p)->entry);
 	                    ^

CHECK:SPACING: spaces preferred around that '&' (ctx:WxV)
#484: FILE: crypto/proc.c:33:
+	struct list_head *e =3D &(((struct kobject*)p)->entry);
 	                        ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#490: FILE: crypto/proc.c:36:
+	e =3D e->next;
 	  ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#491: FILE: crypto/proc.c:37:
+	return (e =3D=3D &cryptoapi_subsys.kset.list) ?
 	          ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#491: FILE: crypto/proc.c:37:
+	return (e =3D=3D &cryptoapi_subsys.kset.list) ?
 	             ^

CHECK:SPACING: spaces preferred around that '&' (ctx:WxV)
#491: FILE: crypto/proc.c:37:
+	return (e =3D=3D &cryptoapi_subsys.kset.list) ?
 	                 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#505: FILE: crypto/proc.c:46:
+	struct crypto_alg *alg =3D container_of(p, struct crypto_alg, cra_obj);
 	                       ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#572: FILE: crypto/sysfs.c:1:
+#include <linux/init.h>

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct crypto_alg *' should also have an identifier name
#582: FILE: crypto/sysfs.c:11:
+	ssize_t (*show)(struct crypto_alg *, char *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#582: FILE: crypto/sysfs.c:11:
+	ssize_t (*show)(struct crypto_alg *, char *);

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#585: FILE: crypto/sysfs.c:14:
+static ssize_t cryptoapi_show(struct kobject *kobj, struct attribute *attr=
                                                                           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#589: FILE: crypto/sysfs.c:17:
+static ssize_t cryptoapi_show_blocksize(struct crypto_alg *tmp, char *buff=
                                                                           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#591: FILE: crypto/sysfs.c:18:
+static ssize_t cryptoapi_show_digestsize(struct crypto_alg *tmp, char *buf=
                                                                           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#595: FILE: crypto/sysfs.c:21:
+static ssize_t cryptoapi_show_maxkeysize(struct crypto_alg *tmp, char *buf=
                                                                           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#597: FILE: crypto/sysfs.c:22:
+static ssize_t cryptoapi_show_minkeysize(struct crypto_alg *tmp, char *buf=
                                                                           ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#600: FILE: crypto/sysfs.c:24:
+struct sysfs_ops cryptoapi_ops =3D {
                                ^

WARNING:CONST_STRUCT: struct sysfs_ops should normally be const
#600: FILE: crypto/sysfs.c:24:
+struct sysfs_ops cryptoapi_ops =3D {

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#601: FILE: crypto/sysfs.c:25:
+	.show =3D cryptoapi_show,
 	      ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#602: FILE: crypto/sysfs.c:26:
+	.store =3D NULL,
 	       ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#605: FILE: crypto/sysfs.c:29:
+#define to_cryptoapi_attribute(X) container_of(X, struct cryptoapi_attribu=
                                                                           ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#607: FILE: crypto/sysfs.c:30:
+#define cryptoapi_attribute(X, Y) { .attr =3D {__stringify(X), NULL, 0444}=
                                           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#607: FILE: crypto/sysfs.c:30:
+#define cryptoapi_attribute(X, Y) { .attr =3D {__stringify(X), NULL, 0444}=
                                                                           ^

ERROR:SPACING: space required after that close brace '}'
#607: FILE: crypto/sysfs.c:30:
+#define cryptoapi_attribute(X, Y) { .attr =3D {__stringify(X), NULL, 0444}=

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#610: FILE: crypto/sysfs.c:32:
+struct cryptoapi_attribute cryptoapi_attr_blocksize =3D cryptoapi_attribut=
                                                     ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#610: FILE: crypto/sysfs.c:32:
+struct cryptoapi_attribute cryptoapi_attr_blocksize =3D cryptoapi_attribut=
                                                                           ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#612: FILE: crypto/sysfs.c:33:
+struct cryptoapi_attribute cryptoapi_attr_digestsize =3D cryptoapi_attribu=
                                                      ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#612: FILE: crypto/sysfs.c:33:
+struct cryptoapi_attribute cryptoapi_attr_digestsize =3D cryptoapi_attribu=
                                                                           ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#614: FILE: crypto/sysfs.c:34:
+struct cryptoapi_attribute cryptoapi_attr_minkeysize =3D cryptoapi_attribu=
                                                      ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#614: FILE: crypto/sysfs.c:34:
+struct cryptoapi_attribute cryptoapi_attr_minkeysize =3D cryptoapi_attribu=
                                                                           ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#616: FILE: crypto/sysfs.c:35:
+struct cryptoapi_attribute cryptoapi_attr_maxkeysize =3D cryptoapi_attribu=
                                                      ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#616: FILE: crypto/sysfs.c:35:
+struct cryptoapi_attribute cryptoapi_attr_maxkeysize =3D cryptoapi_attribu=
                                                                           ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#618: FILE: crypto/sysfs.c:36:
+struct cryptoapi_attribute cryptoapi_attr_name =3D cryptoapi_attribute(nam=
                                                ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#618: FILE: crypto/sysfs.c:36:
+struct cryptoapi_attribute cryptoapi_attr_name =3D cryptoapi_attribute(nam=
                                                                           ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#620: FILE: crypto/sysfs.c:37:
+struct cryptoapi_attribute cryptoapi_attr_module =3D cryptoapi_attribute(m=
                                                  ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#620: FILE: crypto/sysfs.c:37:
+struct cryptoapi_attribute cryptoapi_attr_module =3D cryptoapi_attribute(m=
                                                                           ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#622: FILE: crypto/sysfs.c:38:
+struct cryptoapi_attribute cryptoapi_attr_type =3D cryptoapi_attribute(typ=
                                                ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#622: FILE: crypto/sysfs.c:38:
+struct cryptoapi_attribute cryptoapi_attr_type =3D cryptoapi_attribute(typ=
                                                                           ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#625: FILE: crypto/sysfs.c:40:
+struct attribute *cryptoapi_attributes[] =3D {
                                          ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#632: FILE: crypto/sysfs.c:47:
+static ssize_t cryptoapi_show_blocksize(struct crypto_alg *tmp, char *buff=
                                                                           ^

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#632: FILE: crypto/sysfs.c:47:
+static ssize_t cryptoapi_show_blocksize(struct crypto_alg *tmp, char *buff=
er) {
+	return (snprintf(buffer, PAGE_SIZE, "%u\n", tmp->cra_blocksize)+1)*sizeof=
(char);
+}

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#634: FILE: crypto/sysfs.c:48:
+	return (snprintf(buffer, PAGE_SIZE, "%u\n", tmp->cra_blocksize)+1)*sizeof=
 	                                                               ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#634: FILE: crypto/sysfs.c:48:
+	return (snprintf(buffer, PAGE_SIZE, "%u\n", tmp->cra_blocksize)+1)*sizeof=
 	                                                                  ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#634: FILE: crypto/sysfs.c:48:
+	return (snprintf(buffer, PAGE_SIZE, "%u\n", tmp->cra_blocksize)+1)*sizeof=
 	                                                                         ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#638: FILE: crypto/sysfs.c:51:
+static ssize_t cryptoapi_show_digestsize(struct crypto_alg *tmp, char *buf=
                                                                           ^

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#638: FILE: crypto/sysfs.c:51:
+static ssize_t cryptoapi_show_digestsize(struct crypto_alg *tmp, char *buf=
fer) {
+	return (snprintf(buffer, PAGE_SIZE, "%u\n", tmp->cra_digest.dia_digestsiz=
e)+1)*sizeof(char);
+}

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#640: FILE: crypto/sysfs.c:52:
+	return (snprintf(buffer, PAGE_SIZE, "%u\n", tmp->cra_digest.dia_digestsiz=
 	                                                                         ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#644: FILE: crypto/sysfs.c:55:
+static ssize_t cryptoapi_show_minkeysize(struct crypto_alg *tmp, char *buf=
                                                                           ^

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#644: FILE: crypto/sysfs.c:55:
+static ssize_t cryptoapi_show_minkeysize(struct crypto_alg *tmp, char *buf=
fer) {
+	return (snprintf(buffer, PAGE_SIZE, "%u\n", tmp->cra_cipher.cia_min_keysi=
ze)+1)*sizeof(char);
+}

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#646: FILE: crypto/sysfs.c:56:
+	return (snprintf(buffer, PAGE_SIZE, "%u\n", tmp->cra_cipher.cia_min_keysi=
 	                                                                         ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#650: FILE: crypto/sysfs.c:59:
+static ssize_t cryptoapi_show_maxkeysize(struct crypto_alg *tmp, char *buf=
                                                                           ^

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#650: FILE: crypto/sysfs.c:59:
+static ssize_t cryptoapi_show_maxkeysize(struct crypto_alg *tmp, char *buf=
fer) {
+	return (snprintf(buffer, PAGE_SIZE, "%u\n", tmp->cra_cipher.cia_max_keysi=
ze)+1)*sizeof(char);
+}

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#652: FILE: crypto/sysfs.c:60:
+	return (snprintf(buffer, PAGE_SIZE, "%u\n", tmp->cra_cipher.cia_max_keysi=
 	                                                                         ^

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#656: FILE: crypto/sysfs.c:63:
+static ssize_t cryptoapi_show_name(struct crypto_alg *tmp, char *buffer) {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#657: FILE: crypto/sysfs.c:64:
+	return (snprintf(buffer, PAGE_SIZE, "%s\n", tmp->cra_name)+1)*sizeof(char=
 	                                                          ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#657: FILE: crypto/sysfs.c:64:
+	return (snprintf(buffer, PAGE_SIZE, "%s\n", tmp->cra_name)+1)*sizeof(char=
 	                                                             ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#657: FILE: crypto/sysfs.c:64:
+	return (snprintf(buffer, PAGE_SIZE, "%s\n", tmp->cra_name)+1)*sizeof(char=
 	                                                                         ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#661: FILE: crypto/sysfs.c:67:
+static ssize_t cryptoapi_show_module(struct crypto_alg *tmp, char *buffer)=
                                                                           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#663: FILE: crypto/sysfs.c:69:
+	return (snprintf(buffer, PAGE_SIZE, "%s\n", module_name(tmp->cra_module))=
 	                                                                         ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#664: FILE: crypto/sysfs.c:70:
+1)*sizeof(char);
   ^

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#667: FILE: crypto/sysfs.c:73:
+static ssize_t cryptoapi_show_type(struct crypto_alg *tmp, char *buffer) {

ERROR:SPACING: space required before the open parenthesis '('
#668: FILE: crypto/sysfs.c:74:
+	switch(tmp->cra_flags & CRYPTO_ALG_TYPE_MASK) {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#681: FILE: crypto/sysfs.c:87:
+	return (strlen(buffer)+1)*sizeof(char);
 	                      ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#681: FILE: crypto/sysfs.c:87:
+	return (strlen(buffer)+1)*sizeof(char);
 	                         ^

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#684: FILE: crypto/sysfs.c:90:
+static ssize_t cryptoapi_show(struct kobject *kobj, struct attribute *attr,
+		char *buffer) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#685: FILE: crypto/sysfs.c:91:
+static ssize_t cryptoapi_show(struct kobject *kobj, struct attribute *attr,
+		char *buffer) {

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#686: FILE: crypto/sysfs.c:92:
+	struct cryptoapi_attribute *ca_attr =3D to_cryptoapi_attribute(attr);
 	                                    ^

ERROR:SPACING: space required before the open parenthesis '('
#688: FILE: crypto/sysfs.c:94:
+	if(ca_attr->show)

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#689: FILE: crypto/sysfs.c:95:
+		return ca_attr->show(container_of(kobj, struct crypto_alg, cra_obj), buf=
 		                                                                        ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000254478.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 74 errors, 18 warnings, 28 checks, 517 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000254478.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
