CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tty->flip.flag_buf_ptr == NULL'
#138: FILE: arch/um/drivers/chan_kern.c:189:
+	if((tty->flip.flag_buf_ptr == NULL) ||
 	   (tty->flip.char_buf_ptr == NULL))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tty->flip.char_buf_ptr == NULL'
#138: FILE: arch/um/drivers/chan_kern.c:189:
+	if((tty->flip.flag_buf_ptr == NULL) ||
 	   (tty->flip.char_buf_ptr == NULL))

ERROR:SPACING: space required before the open parenthesis '('
#138: FILE: arch/um/drivers/chan_kern.c:189:
+	if((tty->flip.flag_buf_ptr == NULL) ||

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tty->flip.flag_buf_ptr"
#138: FILE: arch/um/drivers/chan_kern.c:189:
+	if((tty->flip.flag_buf_ptr == NULL) ||

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:SPACING: space required before the open parenthesis '('
#154: FILE: arch/um/drivers/chan_kern.c:199:
+	if(chan->opened)

ERROR:SPACING: space required before the open parenthesis '('
#157: FILE: arch/um/drivers/chan_kern.c:202:
+	if(chan->ops->open == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!chan->ops->open"
#157: FILE: arch/um/drivers/chan_kern.c:202:
+	if(chan->ops->open == NULL)

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#159: FILE: arch/um/drivers/chan_kern.c:204:
+	else fd = (*chan->ops->open)(chan->input, chan->output, chan->primary,

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:SPACING: space required before the open parenthesis '('
#161: FILE: arch/um/drivers/chan_kern.c:206:
+	if(fd < 0)

ERROR:SPACING: space required before the open parenthesis '('
#179: FILE: arch/um/drivers/chan_kern.c:223:
+		if(chan->primary)

ERROR:SPACING: space required before the open parenthesis '('
#226: FILE: arch/um/drivers/chan_kern.c:335:
+			if(chan->ops->window_size == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!chan->ops->window_size"
#226: FILE: arch/um/drivers/chan_kern.c:335:
+			if(chan->ops->window_size == NULL)

ERROR:SPACING: space required before the open parenthesis '('
#313: FILE: arch/um/drivers/chan_kern.c:495:
+	if(ops->init == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ops->init"
#313: FILE: arch/um/drivers/chan_kern.c:495:
+	if(ops->init == NULL)

ERROR:SPACING: space required before the open parenthesis '('
#317: FILE: arch/um/drivers/chan_kern.c:498:
+	if(data == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!data"
#317: FILE: arch/um/drivers/chan_kern.c:498:
+	if(data == NULL)

ERROR:SPACING: space required before the open parenthesis '('
#322: FILE: arch/um/drivers/chan_kern.c:502:
+	if(chan == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!chan"
#322: FILE: arch/um/drivers/chan_kern.c:502:
+	if(chan == NULL)

ERROR:SPACING: space required before the open parenthesis '('
#341: FILE: arch/um/drivers/chan_kern.c:524:
+		if(chan->pri >= pri)

ERROR:SPACING: space required before the open parenthesis '('
#351: FILE: arch/um/drivers/chan_kern.c:536:
+		if(new == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!new"
#351: FILE: arch/um/drivers/chan_kern.c:536:
+		if(new == NULL)

ERROR:SPACING: space required before the open parenthesis '('
#359: FILE: arch/um/drivers/chan_kern.c:543:
+		if(new == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!new"
#359: FILE: arch/um/drivers/chan_kern.c:543:
+		if(new == NULL)

ERROR:SPACING: space required before the open parenthesis '('
#368: FILE: arch/um/drivers/chan_kern.c:551:
+		if(new == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!new"
#368: FILE: arch/um/drivers/chan_kern.c:551:
+		if(new == NULL)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tty != NULL'
#397: FILE: arch/um/drivers/chan_kern.c:586:
+			if((tty != NULL) &&
 			   (tty->flip.count >= TTY_FLIPBUF_SIZE)){

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tty->flip.count >= TTY_FLIPBUF_SIZE'
#397: FILE: arch/um/drivers/chan_kern.c:586:
+			if((tty != NULL) &&
 			   (tty->flip.count >= TTY_FLIPBUF_SIZE)){

ERROR:SPACING: space required before the open parenthesis '('
#397: FILE: arch/um/drivers/chan_kern.c:586:
+			if((tty != NULL) &&

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "tty"
#397: FILE: arch/um/drivers/chan_kern.c:586:
+			if((tty != NULL) &&

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#411: FILE: arch/um/drivers/line.c:128:
+	}
+	else {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#411: FILE: arch/um/drivers/line.c:128:
+	else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#455: FILE: arch/um/drivers/line.c:517:
+	}
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#455: FILE: arch/um/drivers/line.c:517:
+	else {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#459: FILE: arch/um/drivers/line.c:520:
+			printk(KERN_ERR "line_setup failed to parse \"%s\"\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'line_setup', this function's name, in a string
#459: FILE: arch/um/drivers/line.c:520:
+			printk(KERN_ERR "line_setup failed to parse \"%s\"\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:SPACING: space required before the open brace '{'
#469: FILE: arch/um/drivers/line.c:533:
+	else if (n >= 0){

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#469: FILE: arch/um/drivers/line.c:533:
+	}
+	else if (n >= 0){

ERROR:SPACING: space required before the open brace '{'
#479: FILE: arch/um/drivers/line.c:548:
+	else if(!all_allowed){

ERROR:SPACING: space required before the open parenthesis '('
#479: FILE: arch/um/drivers/line.c:548:
+	else if(!all_allowed){

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#479: FILE: arch/um/drivers/line.c:548:
+	}
+	else if(!all_allowed){

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#485: FILE: arch/um/drivers/line.c:553:
+	}
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#485: FILE: arch/um/drivers/line.c:553:
+	else {

ERROR:SPACING: space required before the open parenthesis '('
#503: FILE: arch/um/drivers/line.c:664:
+		if(!lines[i].valid)

ERROR:SPACING: space required before the open parenthesis '('
#516: FILE: arch/um/drivers/line.c:685:
+		if(line->init_str == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!line->init_str"
#516: FILE: arch/um/drivers/line.c:685:
+		if(line->init_str == NULL)

ERROR:SPACING: space required before the open parenthesis '('
#520: FILE: arch/um/drivers/line.c:689:
+		if(line->init_str == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!line->init_str"
#520: FILE: arch/um/drivers/line.c:689:
+		if(line->init_str == NULL)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#521: FILE: arch/um/drivers/line.c:690:
+			printk("lines_init - kstrdup returned NULL\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'lines_init', this function's name, in a string
#521: FILE: arch/um/drivers/line.c:690:
+			printk("lines_init - kstrdup returned NULL\n");

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#521: FILE: arch/um/drivers/line.c:690:
+		if(line->init_str == NULL)
+			printk("lines_init - kstrdup returned NULL\n");

ERROR:SPACING: space required before the open parenthesis '('
#549: FILE: arch/um/drivers/line.c:808:
+		if(winch->pid != -1)

WARNING:ARRAY_SIZE: Prefer ARRAY_SIZE(serial_lines)
#573: FILE: arch/um/drivers/ssl.c:88:
+			   sizeof(serial_lines)/sizeof(serial_lines[0]), str);

The ARRAY_SIZE(foo) macro should be preferred over
sizeof(foo)/sizeof(foo[0]) for finding number of elements in an
array.

The macro is defined in include/linux/kernel.h::

  #define ARRAY_SIZE(x) (sizeof(x) / sizeof((x)[0]))

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#573: FILE: arch/um/drivers/ssl.c:88:
+			   sizeof(serial_lines)/sizeof(serial_lines[0]), str);
 			                       ^

WARNING:ARRAY_SIZE: Prefer ARRAY_SIZE(serial_lines)
#582: FILE: arch/um/drivers/ssl.c:94:
+			       sizeof(serial_lines)/sizeof(serial_lines[0]),

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#582: FILE: arch/um/drivers/ssl.c:94:
+			       sizeof(serial_lines)/sizeof(serial_lines[0]),
 			                           ^

WARNING:ARRAY_SIZE: Prefer ARRAY_SIZE(serial_lines)
#591: FILE: arch/um/drivers/ssl.c:101:
+			   sizeof(serial_lines)/sizeof(serial_lines[0]), n);

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#591: FILE: arch/um/drivers/ssl.c:101:
+			   sizeof(serial_lines)/sizeof(serial_lines[0]), n);
 			                       ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#609: FILE: arch/um/drivers/ssl.c:202:
+	printk(KERN_INFO "Initializing software serial port version %d\n",

ERROR:SPACING: space prohibited after that open square bracket '['
#657: FILE: arch/um/drivers/stdio_console.c:89:
+			      [ 1 ... MAX_TTYS - 1 ] =

ERROR:SPACING: space prohibited before that close square bracket ']'
#657: FILE: arch/um/drivers/stdio_console.c:89:
+			      [ 1 ... MAX_TTYS - 1 ] =

WARNING:ARRAY_SIZE: Prefer ARRAY_SIZE(vts)
#663: FILE: arch/um/drivers/stdio_console.c:94:
+	return line_config(vts, sizeof(vts)/sizeof(vts[0]), str);

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#663: FILE: arch/um/drivers/stdio_console.c:94:
+	return line_config(vts, sizeof(vts)/sizeof(vts[0]), str);
 	                                   ^

WARNING:ARRAY_SIZE: Prefer ARRAY_SIZE(vts)
#670: FILE: arch/um/drivers/stdio_console.c:99:
+	return line_get_config(dev, vts, sizeof(vts)/sizeof(vts[0]), str,

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#670: FILE: arch/um/drivers/stdio_console.c:99:
+	return line_get_config(dev, vts, sizeof(vts)/sizeof(vts[0]), str,
 	                                            ^

WARNING:ARRAY_SIZE: Prefer ARRAY_SIZE(vts)
#677: FILE: arch/um/drivers/stdio_console.c:105:
+	return line_remove(vts, sizeof(vts)/sizeof(vts[0]), n);

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#677: FILE: arch/um/drivers/stdio_console.c:105:
+	return line_remove(vts, sizeof(vts)/sizeof(vts[0]), n);
 	                                   ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#695: FILE: arch/um/drivers/stdio_console.c:129:
+			      unsigned len)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!console_driver"
#722: FILE: arch/um/drivers/stdio_console.c:169:
+	if (console_driver == NULL)

WARNING:ARRAY_SIZE: Prefer ARRAY_SIZE(vts)
#740: FILE: arch/um/drivers/stdio_console.c:195:
+	return line_setup(vts, sizeof(vts)/sizeof(vts[0]), str, 1);

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#740: FILE: arch/um/drivers/stdio_console.c:195:
+	return line_setup(vts, sizeof(vts)/sizeof(vts[0]), str, 1);
 	                                  ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#783: FILE: arch/um/include/line.h:77:
+extern int line_open(struct line *lines, struct tty_struct *tty,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#788: FILE: arch/um/include/line.h:81:
+extern int line_write(struct tty_struct *tty, const unsigned char *buf,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#798: FILE: arch/um/include/line.h:93:
+extern int line_setup_irq(int fd, int input, int output,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#804: FILE: arch/um/include/line.h:97:
+extern struct tty_driver * line_register_devfs(struct lines *set,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#804: FILE: arch/um/include/line.h:97:
+extern struct tty_driver * line_register_devfs(struct lines *set,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#805: FILE: arch/um/include/line.h:98:
+extern struct tty_driver * line_register_devfs(struct lines *set,
+				struct line_driver *line_driver,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#813: FILE: arch/um/include/line.h:105:
+extern int line_config(struct line *lines, unsigned int sizeof_lines,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#818: FILE: arch/um/include/line.h:109:
+extern int line_get_config(char *dev, struct line *lines,

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#914: FILE: arch/um/os-Linux/aio.c:75:
+^Iiocb = ((struct iocb) { .aio_data ^I= (unsigned long) aio,$

CHECK:SPACING: No space is necessary after a cast
#914: FILE: arch/um/os-Linux/aio.c:75:
+	iocb = ((struct iocb) { .aio_data 	= (unsigned long) aio,

CHECK:SPACING: No space is necessary after a cast
#917: FILE: arch/um/os-Linux/aio.c:78:
+				.aio_buf	= (unsigned long) buf,

ERROR:SPACING: space required before the open brace '{'
#924: FILE: arch/um/os-Linux/aio.c:85:
+	switch(type){

ERROR:SPACING: space required before the open parenthesis '('
#924: FILE: arch/um/os-Linux/aio.c:85:
+	switch(type){

CHECK:SPACING: No space is necessary after a cast
#935: FILE: arch/um/os-Linux/aio.c:96:
+		iocb.aio_buf = (unsigned long) &c;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#940: FILE: arch/um/os-Linux/aio.c:101:
+		printk("Bogus op in do_aio - %d\n", type);

ERROR:SPACING: space required before the open parenthesis '('
#947: FILE: arch/um/os-Linux/aio.c:106:
+	if(err > 0)

ERROR:SPACING: space required before the open brace '{'
#984: FILE: arch/um/os-Linux/aio.c:124:
+	while(1){

ERROR:SPACING: space required before the open parenthesis '('
#984: FILE: arch/um/os-Linux/aio.c:124:
+	while(1){

ERROR:SPACING: space required before the open brace '{'
#986: FILE: arch/um/os-Linux/aio.c:126:
+		if(n < 0){

ERROR:SPACING: space required before the open parenthesis '('
#986: FILE: arch/um/os-Linux/aio.c:126:
+		if(n < 0){

ERROR:SPACING: space required before the open parenthesis '('
#987: FILE: arch/um/os-Linux/aio.c:127:
+			if(errno == EINTR)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#989: FILE: arch/um/os-Linux/aio.c:129:
+			printk("aio_thread - io_getevents failed, "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'io_getevents', this function's name, in a string
#989: FILE: arch/um/os-Linux/aio.c:129:
+			printk("aio_thread - io_getevents failed, "

WARNING:SPLIT_STRING: quoted string split across lines
#990: FILE: arch/um/os-Linux/aio.c:130:
+			printk("aio_thread - io_getevents failed, "
+			       "errno = %d\n", errno);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#992: FILE: arch/um/os-Linux/aio.c:132:
+		}
+		else {

CHECK:BRACES: Unbalanced braces around else statement
#992: FILE: arch/um/os-Linux/aio.c:132:
+		else {

CHECK:SPACING: No space is necessary after a cast
#994: FILE: arch/um/os-Linux/aio.c:134:
+				{ .data = (void *) (long) event.data,

ERROR:SPACING: space required before the open parenthesis '('
#999: FILE: arch/um/os-Linux/aio.c:138:
+			if(err != sizeof(reply))

WARNING:SPLIT_STRING: quoted string split across lines
#1005: FILE: arch/um/os-Linux/aio.c:140:
 				printk("aio_thread - write failed, fd = %d, "
+				       "err = %d\n", aio_req_fd_r, -err);

ERROR:SPACING: space required before the open brace '{'
#1047: FILE: arch/um/os-Linux/aio.c:153:
+	switch(req->type){

ERROR:SPACING: space required before the open parenthesis '('
#1047: FILE: arch/um/os-Linux/aio.c:153:
+	switch(req->type){

ERROR:SPACING: space required before the open parenthesis '('
#1050: FILE: arch/um/os-Linux/aio.c:156:
+		if(err)

ERROR:SPACING: space required before the open parenthesis '('
#1057: FILE: arch/um/os-Linux/aio.c:163:
+		if(err)

ERROR:SPACING: space required before the open parenthesis '('
#1064: FILE: arch/um/os-Linux/aio.c:170:
+		if(err)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1070: FILE: arch/um/os-Linux/aio.c:176:
+		printk("do_not_aio - bad request type : %d\n", req->type);

ERROR:SPACING: space required before the open brace '{'
#1114: FILE: arch/um/os-Linux/aio.c:192:
+	while(1){

ERROR:SPACING: space required before the open parenthesis '('
#1114: FILE: arch/um/os-Linux/aio.c:192:
+	while(1){

ERROR:SPACING: space required before the open brace '{'
#1116: FILE: arch/um/os-Linux/aio.c:194:
+		if(err != sizeof(req)){

ERROR:SPACING: space required before the open parenthesis '('
#1116: FILE: arch/um/os-Linux/aio.c:194:
+		if(err != sizeof(req)){

ERROR:SPACING: space required before the open parenthesis '('
#1117: FILE: arch/um/os-Linux/aio.c:195:
+			if(err < 0)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1118: FILE: arch/um/os-Linux/aio.c:196:
+				printk("not_aio_thread - read failed, "

WARNING:SPLIT_STRING: quoted string split across lines
#1119: FILE: arch/um/os-Linux/aio.c:197:
+				printk("not_aio_thread - read failed, "
+				       "fd = %d, err = %d\n", aio_req_fd_r,

CHECK:BRACES: Unbalanced braces around else statement
#1121: FILE: arch/um/os-Linux/aio.c:199:
+			else {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1122: FILE: arch/um/os-Linux/aio.c:200:
+				printk("not_aio_thread - short read, fd = %d, "

WARNING:SPLIT_STRING: quoted string split across lines
#1123: FILE: arch/um/os-Linux/aio.c:201:
+				printk("not_aio_thread - short read, fd = %d, "
+				       "length = %d\n", aio_req_fd_r, err);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1128: FILE: arch/um/os-Linux/aio.c:206:
+^I^Ireply = ((struct aio_thread_reply) { .data ^I= req.aio,$

ERROR:SPACING: space required before the open parenthesis '('
#1131: FILE: arch/um/os-Linux/aio.c:209:
+		if(err != sizeof(reply))

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1132: FILE: arch/um/os-Linux/aio.c:210:
+			printk("not_aio_thread - write failed, fd = %d, "

WARNING:SPLIT_STRING: quoted string split across lines
#1133: FILE: arch/um/os-Linux/aio.c:211:
+			printk("not_aio_thread - write failed, fd = %d, "
+			       "err = %d\n", aio_req_fd_r, -err);

ERROR:SPACING: space required before the open parenthesis '('
#1168: FILE: arch/um/os-Linux/aio.c:225:
+	if(err)

ERROR:SPACING: space required before the open parenthesis '('
#1175: FILE: arch/um/os-Linux/aio.c:232:
+	if(err < 0)

ERROR:SPACING: space required before the open brace '{'
#1206: FILE: arch/um/os-Linux/aio.c:259:
+	if(io_setup(256, &ctx)){

ERROR:SPACING: space required before the open parenthesis '('
#1206: FILE: arch/um/os-Linux/aio.c:259:
+	if(io_setup(256, &ctx)){

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1217: FILE: arch/um/os-Linux/aio.c:261:
+		printk("aio_thread failed to initialize context, err = %d\n",

ERROR:SPACING: space required before the open parenthesis '('
#1224: FILE: arch/um/os-Linux/aio.c:268:
+	if(err < 0)

ERROR:SPACING: space required before the open brace '{'
#1254: FILE: arch/um/os-Linux/aio.c:284:
+	if(err){

ERROR:SPACING: space required before the open parenthesis '('
#1254: FILE: arch/um/os-Linux/aio.c:284:
+	if(err){

ERROR:SPACING: space required before the open parenthesis '('
#1258: FILE: arch/um/os-Linux/aio.c:288:
+		if(err != sizeof(reply))

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1259: FILE: arch/um/os-Linux/aio.c:289:
+			printk("submit_aio_26 - write failed, "

WARNING:SPLIT_STRING: quoted string split across lines
#1260: FILE: arch/um/os-Linux/aio.c:290:
+			printk("submit_aio_26 - write failed, "
+			       "fd = %d, err = %d\n", aio->reply_fd, -err);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1261: FILE: arch/um/os-Linux/aio.c:291:
+		else err = 0;

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#1273: FILE: arch/um/os-Linux/aio.c:301:
+	return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#1280: FILE: arch/um/os-Linux/aio.c:307:
+	return -ENOSYS;

ERROR:SPACING: space required before the open brace '{'
#1317: FILE: arch/um/os-Linux/aio.c:335:
+	CHOOSE_MODE(({ if(!aio_24){

ERROR:SPACING: space required before the open parenthesis '('
#1317: FILE: arch/um/os-Linux/aio.c:335:
+	CHOOSE_MODE(({ if(!aio_24){

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1317: FILE: arch/um/os-Linux/aio.c:335:
+	CHOOSE_MODE(({ if(!aio_24){

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1317: FILE: arch/um/os-Linux/aio.c:335:
+	CHOOSE_MODE(({ if(!aio_24){
[...]
+		    } }), (void) 0);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1318: FILE: arch/um/os-Linux/aio.c:336:
+			    printk("Disabling 2.6 AIO in tt mode\n");

CHECK:SPACING: No space is necessary after a cast
#1320: FILE: arch/um/os-Linux/aio.c:338:
+		    } }), (void) 0);

ERROR:SPACING: space required before the open brace '{'
#1322: FILE: arch/um/os-Linux/aio.c:340:
+	if(!aio_24){

ERROR:SPACING: space required before the open parenthesis '('
#1322: FILE: arch/um/os-Linux/aio.c:340:
+	if(!aio_24){

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#1324: FILE: arch/um/os-Linux/aio.c:342:
+		if(err && (errno == ENOSYS)){

ERROR:SPACING: space required before the open brace '{'
#1324: FILE: arch/um/os-Linux/aio.c:342:
+		if(err && (errno == ENOSYS)){

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'errno == ENOSYS'
#1324: FILE: arch/um/os-Linux/aio.c:342:
+		if(err && (errno == ENOSYS)){

ERROR:SPACING: space required before the open parenthesis '('
#1324: FILE: arch/um/os-Linux/aio.c:342:
+		if(err && (errno == ENOSYS)){

CHECK:BRACES: braces {} should be used on all arms of this statement
#1324: FILE: arch/um/os-Linux/aio.c:342:
+		if(err && (errno == ENOSYS)){
[...]
+		else return err;
[...]

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1325: FILE: arch/um/os-Linux/aio.c:343:
+			printk("2.6 AIO not supported on the host - "

WARNING:SPLIT_STRING: quoted string split across lines
#1326: FILE: arch/um/os-Linux/aio.c:344:
+			printk("2.6 AIO not supported on the host - "
+			       "reverting to 2.4 AIO\n");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1329: FILE: arch/um/os-Linux/aio.c:347:
+		else return err;

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1329: FILE: arch/um/os-Linux/aio.c:347:
+		}
+		else return err;

ERROR:SPACING: space required before the open parenthesis '('
#1334: FILE: arch/um/os-Linux/aio.c:350:
+	if(aio_24)

ERROR:SPACING: space required before the open parenthesis '('
#1348: FILE: arch/um/os-Linux/aio.c:366:
+	if(aio_pid != -1)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1369: FILE: arch/um/os-Linux/aio.c:375:
+^Istruct aio_thread_req req = { .type ^I^I= type,$

ERROR:SPACING: space required before the open parenthesis '('
#1379: FILE: arch/um/os-Linux/aio.c:385:
+	if(err == sizeof(req))

ERROR:SPACING: space required before the open parenthesis '('
#1399: FILE: arch/um/os-Linux/aio.c:396:
+	if(aio_24)

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#1399: FILE: arch/um/os-Linux/aio.c:396:
+	if(aio_24)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1401: FILE: arch/um/os-Linux/aio.c:398:
+	else {

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#1478: FILE: arch/um/drivers/mconsole_kern.c:536:
+static char *notify_socket = NULL;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1494: FILE: arch/um/drivers/mconsole_kern.c:574:
+	printk("mconsole (version %d) initialized on %s\n",

ERROR:SPACING: space required before the open parenthesis '('
#1503: FILE: arch/um/drivers/mconsole_kern.c:587:
+	if(buf == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!buf"
#1503: FILE: arch/um/drivers/mconsole_kern.c:587:
+	if(buf == NULL)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000120407.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 76 errors, 40 warnings, 45 checks, 1361 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000120407.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
