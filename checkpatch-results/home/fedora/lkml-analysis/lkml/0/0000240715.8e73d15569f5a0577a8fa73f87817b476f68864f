WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#54: FILE: arch/i386/Kconfig.debug:32:
+config DEBUGREG
+	bool "Global Debug Registers"
+	depends on DEBUG_KERNEL
+	help
+	  Global debug register settings will be honoured if this is turned on.
+	  If in doubt, say "N".
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#68: FILE: arch/i386/kernel/debugreg.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#82: FILE: arch/i386/kernel/debugreg.c:15:
+unsigned long dr7_global_mask = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#87: FILE: arch/i386/kernel/debugreg.c:20:
+	switch (regnum) {
+		case 0: dr7_global_mask |= DR7_DR0_BITS; break;
+		case 1: dr7_global_mask |= DR7_DR1_BITS; break;
+		case 2: dr7_global_mask |= DR7_DR2_BITS; break;
+		case 3: dr7_global_mask |= DR7_DR3_BITS; break;

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#88: FILE: arch/i386/kernel/debugreg.c:21:
+		case 0: dr7_global_mask |= DR7_DR0_BITS; break;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#89: FILE: arch/i386/kernel/debugreg.c:22:
+		case 1: dr7_global_mask |= DR7_DR1_BITS; break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#90: FILE: arch/i386/kernel/debugreg.c:23:
+		case 2: dr7_global_mask |= DR7_DR2_BITS; break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#91: FILE: arch/i386/kernel/debugreg.c:24:
+		case 3: dr7_global_mask |= DR7_DR3_BITS; break;

WARNING:RETURN_VOID: void function return statements are not generally useful
#94: FILE: arch/i386/kernel/debugreg.c:27:
+	return;
+}

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#98: FILE: arch/i386/kernel/debugreg.c:31:
+	switch (regnum) {
+		case 0: dr7_global_mask &= ~DR7_DR0_BITS; break;
+		case 1: dr7_global_mask &= ~DR7_DR1_BITS; break;
+		case 2: dr7_global_mask &= ~DR7_DR2_BITS; break;
+		case 3: dr7_global_mask &= ~DR7_DR3_BITS; break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#99: FILE: arch/i386/kernel/debugreg.c:32:
+		case 0: dr7_global_mask &= ~DR7_DR0_BITS; break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#100: FILE: arch/i386/kernel/debugreg.c:33:
+		case 1: dr7_global_mask &= ~DR7_DR1_BITS; break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#101: FILE: arch/i386/kernel/debugreg.c:34:
+		case 2: dr7_global_mask &= ~DR7_DR2_BITS; break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#102: FILE: arch/i386/kernel/debugreg.c:35:
+		case 3: dr7_global_mask &= ~DR7_DR3_BITS; break;

WARNING:RETURN_VOID: void function return statements are not generally useful
#105: FILE: arch/i386/kernel/debugreg.c:38:
+	return;
+}

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'flag == DR_ALLOC_GLOBAL'
#109: FILE: arch/i386/kernel/debugreg.c:42:
+	if ((flag == DR_ALLOC_GLOBAL) && (dr_list[regnum].flag == DR_UNUSED)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dr_list[regnum].flag == DR_UNUSED'
#109: FILE: arch/i386/kernel/debugreg.c:42:
+	if ((flag == DR_ALLOC_GLOBAL) && (dr_list[regnum].flag == DR_UNUSED)) {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#114: FILE: arch/i386/kernel/debugreg.c:47:
+	}
+	else if ((dr_list[regnum].flag == DR_UNUSED) || (dr_list[regnum].flag == DR_LOCAL)) {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#125: FILE: arch/i386/kernel/debugreg.c:58:
+	int i;
+	if (flag == DR_ALLOC_LOCAL) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#137: FILE: arch/i386/kernel/debugreg.c:70:
+		for (i = DR_MAX-1; i >= 0; i--) {
 		               ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#150: FILE: arch/i386/kernel/debugreg.c:83:
+	if (! (--dr_list[regnum].use_count))
 	    ^

WARNING:RETURN_VOID: void function return statements are not generally useful
#153: FILE: arch/i386/kernel/debugreg.c:86:
+	return;
+}

WARNING:RETURN_VOID: void function return statements are not generally useful
#161: FILE: arch/i386/kernel/debugreg.c:94:
+	return;
+}

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#198: FILE: arch/i386/kernel/debugreg.c:131:
+	for (i =0; i < DR_MAX; i++) {
 	       ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#210: FILE: arch/i386/kernel/debugreg.c:143:
+	for (i =0; i < DR_MAX; i++) {
 	       ^

WARNING:TYPO_SPELLING: 'succeds' may be misspelled - perhaps 'succeeds'?
#222: FILE: arch/i386/kernel/debugreg.c:155:
+ * debug register always succeds and it doesn't check the return value of
                          ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:LINE_SPACING: Missing a blank line after declarations
#232: FILE: arch/i386/kernel/debugreg.c:165:
+	int i, dr_shift = 1UL;
+	for (i = 0; i < DR_MAX; i++, dr_shift <<= 2) {

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#244: FILE: arch/i386/kernel/debugreg.c:177:
+EXPORT_SYMBOL(dr_alloc);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#245: FILE: arch/i386/kernel/debugreg.c:178:
+EXPORT_SYMBOL(dr_free);

WARNING:LINE_SPACING: Missing a blank line after declarations
#307: FILE: arch/i386/kernel/process.c:611:
+	unsigned long next_dr7 = next->debugreg[7];
+	if (unlikely(next_dr7)) {

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#308: FILE: arch/i386/kernel/process.c:612:
+		if (DR7_L0(next_dr7)) loaddebug(next, 0);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#309: FILE: arch/i386/kernel/process.c:613:
+		if (DR7_L1(next_dr7)) loaddebug(next, 1);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#310: FILE: arch/i386/kernel/process.c:614:
+		if (DR7_L2(next_dr7)) loaddebug(next, 2);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#311: FILE: arch/i386/kernel/process.c:615:
+		if (DR7_L3(next_dr7)) loaddebug(next, 3);

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#338: FILE: arch/i386/kernel/ptrace.c:357:
+			  if (addr == 7 && (enable_debugreg(child->thread.debugreg[addr], data)) < 0) {

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:TABSTOP: Statements should start on a tabstop
#338: FILE: arch/i386/kernel/ptrace.c:357:
+			  if (addr == 7 && (enable_debugreg(child->thread.debugreg[addr], data)) < 0) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (26, 34)
#338: FILE: arch/i386/kernel/ptrace.c:357:
+			  if (addr == 7 && (enable_debugreg(child->thread.debugreg[addr], data)) < 0) {
+				  ret = -EBUSY;

WARNING:TABSTOP: Statements should start on a tabstop
#340: FILE: arch/i386/kernel/ptrace.c:359:
+				  break;

WARNING:TABSTOP: Statements should start on a tabstop
#341: FILE: arch/i386/kernel/ptrace.c:360:
+			  }

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#397: FILE: include/asm-i386/debugreg.h:75:
+#define DR_ANY	DR_MAX + 1

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'dr' - possible side-effects?
#403: FILE: include/asm-i386/debugreg.h:81:
+#define DR7_RW_SET(dr, regnum, rw) do {	\
+		(dr) &= ~(0x3 << (16 + (4 * (regnum)))); \
+		(dr) |= (((rw) & 0x3) << (16 + (4 * (regnum)))); \
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'regnum' - possible side-effects?
#403: FILE: include/asm-i386/debugreg.h:81:
+#define DR7_RW_SET(dr, regnum, rw) do {	\
+		(dr) &= ~(0x3 << (16 + (4 * (regnum)))); \
+		(dr) |= (((rw) & 0x3) << (16 + (4 * (regnum)))); \
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'dr' - possible side-effects?
#411: FILE: include/asm-i386/debugreg.h:89:
+#define DR7_LEN_SET(dr, regnum, len) do { \
+		(dr) &= ~(0x3 << (18 + (4 * (regnum)))); \
+		(dr) |= (((len-1) & 0x3) << (18 + (4 * (regnum)))); \
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'regnum' - possible side-effects?
#411: FILE: include/asm-i386/debugreg.h:89:
+#define DR7_LEN_SET(dr, regnum, len) do { \
+		(dr) &= ~(0x3 << (18 + (4 * (regnum)))); \
+		(dr) |= (((len-1) & 0x3) << (18 + (4 * (regnum)))); \
+	} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'len' may be better as '(len)' to avoid precedence issues
#411: FILE: include/asm-i386/debugreg.h:89:
+#define DR7_LEN_SET(dr, regnum, len) do { \
+		(dr) &= ~(0x3 << (18 + (4 * (regnum)))); \
+		(dr) |= (((len-1) & 0x3) << (18 + (4 * (regnum)))); \
+	} while (0)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#413: FILE: include/asm-i386/debugreg.h:91:
+		(dr) |= (((len-1) & 0x3) << (18 + (4 * (regnum)))); \
 		              ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#419: FILE: include/asm-i386/debugreg.h:97:
+#define DR7_L0(dr)    (((dr))&0x1)
                              ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#420: FILE: include/asm-i386/debugreg.h:98:
+#define DR7_L1(dr)    (((dr)>>2)&0x1)
                             ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#420: FILE: include/asm-i386/debugreg.h:98:
+#define DR7_L1(dr)    (((dr)>>2)&0x1)
                                 ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#421: FILE: include/asm-i386/debugreg.h:99:
+#define DR7_L2(dr)    (((dr)>>4)&0x1)
                             ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#421: FILE: include/asm-i386/debugreg.h:99:
+#define DR7_L2(dr)    (((dr)>>4)&0x1)
                                 ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#422: FILE: include/asm-i386/debugreg.h:100:
+#define DR7_L3(dr)    (((dr)>>6)&0x1)
                             ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#422: FILE: include/asm-i386/debugreg.h:100:
+#define DR7_L3(dr)    (((dr)>>6)&0x1)
                                 ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:WxV)
#424: FILE: include/asm-i386/debugreg.h:102:
+#define DR_IS_LOCAL(dr, num) ((dr) & (1UL << (num <<1)))
                                                   ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'num' may be better as '(num)' to avoid precedence issues
#424: FILE: include/asm-i386/debugreg.h:102:
+#define DR_IS_LOCAL(dr, num) ((dr) & (1UL << (num <<1)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'dr' - possible side-effects?
#427: FILE: include/asm-i386/debugreg.h:105:
+#define SET_DR7(dr, regnum, access, len) do { \
+		DR7_RW_SET(dr, regnum, access); \
+		DR7_LEN_SET(dr, regnum, len); \
+		dr |= (2UL << regnum*2); \
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'regnum' - possible side-effects?
#427: FILE: include/asm-i386/debugreg.h:105:
+#define SET_DR7(dr, regnum, access, len) do { \
+		DR7_RW_SET(dr, regnum, access); \
+		DR7_LEN_SET(dr, regnum, len); \
+		dr |= (2UL << regnum*2); \
+	} while (0)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#430: FILE: include/asm-i386/debugreg.h:108:
+		dr |= (2UL << regnum*2); \
 		                    ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#434: FILE: include/asm-i386/debugreg.h:112:
+#define RESET_DR7(dr, regnum) dr &= ~(3UL << regnum*2)
                                                    ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#434: FILE: include/asm-i386/debugreg.h:112:
+#define RESET_DR7(dr, regnum) dr &= ~(3UL << regnum*2)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'dr' may be better as '(dr)' to avoid precedence issues
#434: FILE: include/asm-i386/debugreg.h:112:
+#define RESET_DR7(dr, regnum) dr &= ~(3UL << regnum*2)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'regnum' may be better as '(regnum)' to avoid precedence issues
#434: FILE: include/asm-i386/debugreg.h:112:
+#define RESET_DR7(dr, regnum) dr &= ~(3UL << regnum*2)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#441: FILE: include/asm-i386/debugreg.h:119:
+#define DR_TRAP_MASK ^I^I0xF$

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#450: FILE: include/asm-i386/debugreg.h:128:
+			:"=r" (val))
 			^

WARNING:LINE_SPACING: Missing a blank line after declarations
#454: FILE: include/asm-i386/debugreg.h:132:
+	unsigned long val = 0;
+	switch (regnum) {

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#454: FILE: include/asm-i386/debugreg.h:132:
+	switch (regnum) {
+		case 0: get_dr(0, val); break;
+		case 1: get_dr(1, val); break;
+		case 2: get_dr(2, val); break;
+		case 3: get_dr(3, val); break;
+		case 6: get_dr(6, val); break;
+		case 7: get_dr(7, val); break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#455: FILE: include/asm-i386/debugreg.h:133:
+		case 0: get_dr(0, val); break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#456: FILE: include/asm-i386/debugreg.h:134:
+		case 1: get_dr(1, val); break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#457: FILE: include/asm-i386/debugreg.h:135:
+		case 2: get_dr(2, val); break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#458: FILE: include/asm-i386/debugreg.h:136:
+		case 3: get_dr(3, val); break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#459: FILE: include/asm-i386/debugreg.h:137:
+		case 6: get_dr(6, val); break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#460: FILE: include/asm-i386/debugreg.h:138:
+		case 7: get_dr(7, val); break;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#464: FILE: include/asm-i386/debugreg.h:142:
+}
+#undef get_dr

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#469: FILE: include/asm-i386/debugreg.h:147:
+			:"r" (val))
 			^

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#472: FILE: include/asm-i386/debugreg.h:150:
+	switch (regnum) {
+		case 0: set_dr(0, val); break;
+		case 1: set_dr(1, val); break;
+		case 2: set_dr(2, val); break;
+		case 3: set_dr(3, val); break;
+		case 7: set_dr(7, val); break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#473: FILE: include/asm-i386/debugreg.h:151:
+		case 0: set_dr(0, val); break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#474: FILE: include/asm-i386/debugreg.h:152:
+		case 1: set_dr(1, val); break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#475: FILE: include/asm-i386/debugreg.h:153:
+		case 2: set_dr(2, val); break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#476: FILE: include/asm-i386/debugreg.h:154:
+		case 3: set_dr(3, val); break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#477: FILE: include/asm-i386/debugreg.h:155:
+		case 7: set_dr(7, val); break;

WARNING:RETURN_VOID: void function return statements are not generally useful
#480: FILE: include/asm-i386/debugreg.h:158:
+	return;
+}

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#481: FILE: include/asm-i386/debugreg.h:159:
+}
+#undef set_dr

WARNING:LINE_SPACING: Missing a blank line after declarations
#491: FILE: include/asm-i386/debugreg.h:169:
+	int i, reg_shift = 1UL;
+	for (i = 0; i < DR_MAX; i++, reg_shift <<= 1)

WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#499: FILE: include/asm-i386/debugreg.h:177:
+ * the debug trap occured.
                   ^^^^^^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#525: FILE: include/asm-i386/debugreg.h:203:
+extern int dr_alloc(int regnum, int flag);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#526: FILE: include/asm-i386/debugreg.h:204:
+extern int dr_free(int regnum);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#527: FILE: include/asm-i386/debugreg.h:205:
+extern void dr_inc_use_count(unsigned long mask);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#528: FILE: include/asm-i386/debugreg.h:206:
+extern void dr_dec_use_count(unsigned long mask);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#531: FILE: include/asm-i386/debugreg.h:209:
+extern int enable_debugreg(unsigned long old_dr7, unsigned long new_dr7);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000240715.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 36 errors, 22 warnings, 31 checks, 464 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000240715.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
