WARNING:TYPO_SPELLING: 'seperate' may be misspelled - perhaps 'separate'?
#62: 
>   to seperate the three are certainly possible.
       ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#76: 
Signed-Off-By: Muli Ben-Yehuda <mulix@mulix.org>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#140: FILE: arch/x86_64/kernel/pci-gart.c:279:
+void gart_free_coherent(struct device *dev, size_t size,
 			 void *vaddr, dma_addr_t bus)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#210: FILE: arch/x86_64/kernel/pci-gart.c:574:
+void gart_unmap_single(struct device *dev, dma_addr_t dma_addr,
 		      size_t size, int direction)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#262: FILE: arch/x86_64/kernel/pci-gart.c:633:
+EXPORT_SYMBOL(gart_unmap_sg);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#264: FILE: arch/x86_64/kernel/pci-gart.c:635:
+EXPORT_SYMBOL(gart_map_single);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#265: FILE: arch/x86_64/kernel/pci-gart.c:636:
+EXPORT_SYMBOL(gart_unmap_single);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#266: FILE: arch/x86_64/kernel/pci-gart.c:637:
+EXPORT_SYMBOL(gart_dma_supported);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#276: FILE: arch/x86_64/kernel/pci-gart.c:644:
+EXPORT_SYMBOL(gart_free_coherent);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#278: FILE: arch/x86_64/kernel/pci-gart.c:646:
+static int no_agp; $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#292: FILE: arch/x86_64/kernel/pci-nommu.c:27:
+void *nommu_alloc_coherent(struct device *hwdev, size_t size,
+			 dma_addr_t *dma_handle, gfp_t gfp)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#325: FILE: arch/x86_64/kernel/pci-nommu.c:78:
+dma_addr_t $

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#335: FILE: arch/x86_64/kernel/pci-nommu.c:87:
+	if ((addr+size) & ~*hwdev->dma_mask)
 	         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#344: FILE: arch/x86_64/kernel/pci-nommu.c:94:
+nommu_unmap_single(struct device *hwdev, dma_addr_t dma_addr, size_t size, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#369: FILE: arch/x86_64/kernel/pci-nommu.c:119:
+int nommu_map_sg(struct device *hwdev, struct scatterlist *sg,
+	       int nents, int direction)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#373: FILE: arch/x86_64/kernel/pci-nommu.c:123:
+	BUG_ON(direction == DMA_NONE);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:CODE_INDENT: code indent should use tabs where possible
#374: FILE: arch/x86_64/kernel/pci-nommu.c:124:
+ ^Ifor (i = 0; i < nents; i++ ) {$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#374: FILE: arch/x86_64/kernel/pci-nommu.c:124:
+ ^Ifor (i = 0; i < nents; i++ ) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#374: FILE: arch/x86_64/kernel/pci-nommu.c:124:
+ ^Ifor (i = 0; i < nents; i++ ) {$

ERROR:SPACING: space prohibited before that close parenthesis ')'
#374: FILE: arch/x86_64/kernel/pci-nommu.c:124:
+ 	for (i = 0; i < nents; i++ ) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#376: FILE: arch/x86_64/kernel/pci-nommu.c:126:
+^I^IBUG_ON(!s->page); $

WARNING:LINE_SPACING: Missing a blank line after declarations
#376: FILE: arch/x86_64/kernel/pci-nommu.c:126:
+		struct scatterlist *s = &sg[i];
+		BUG_ON(!s->page); 

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#376: FILE: arch/x86_64/kernel/pci-nommu.c:126:
+		BUG_ON(!s->page); 

CHECK:SPACING: spaces preferred around that '+' (ctx:WxV)
#377: FILE: arch/x86_64/kernel/pci-nommu.c:127:
+		s->dma_address = virt_to_bus(page_address(s->page) +s->offset);
 		                                                   ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#389: FILE: arch/x86_64/kernel/pci-nommu.c:139:
+void nommu_unmap_sg(struct device *dev, struct scatterlist *sg,
+		  int nents, int dir)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#392: FILE: arch/x86_64/kernel/pci-nommu.c:142:
+^Ifor (i = 0; i < nents; i++) { $

WARNING:LINE_SPACING: Missing a blank line after declarations
#392: FILE: arch/x86_64/kernel/pci-nommu.c:142:
+	int i;
+	for (i = 0; i < nents; i++) { 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#394: FILE: arch/x86_64/kernel/pci-nommu.c:144:
+^I^IBUG_ON(s->page == NULL); $

WARNING:LINE_SPACING: Missing a blank line after declarations
#394: FILE: arch/x86_64/kernel/pci-nommu.c:144:
+		struct scatterlist *s = &sg[i];
+		BUG_ON(s->page == NULL); 

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#394: FILE: arch/x86_64/kernel/pci-nommu.c:144:
+		BUG_ON(s->page == NULL); 

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!s->page"
#394: FILE: arch/x86_64/kernel/pci-nommu.c:144:
+		BUG_ON(s->page == NULL); 

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:TRAILING_WHITESPACE: trailing whitespace
#395: FILE: arch/x86_64/kernel/pci-nommu.c:145:
+^I^IBUG_ON(s->dma_address == 0); $

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#395: FILE: arch/x86_64/kernel/pci-nommu.c:145:
+		BUG_ON(s->dma_address == 0); 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#397: FILE: arch/x86_64/kernel/pci-nommu.c:147:
+^I} $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#401: FILE: arch/x86_64/kernel/pci-nommu.c:151:
+static void check_ram(void) $

CHECK:SPACING: No space is necessary after a cast
#401: FILE: arch/x86_64/kernel/pci-nommu.c:151:
+static void check_ram(void) 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#408: FILE: arch/x86_64/kernel/pci-nommu.c:158:
+} $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#427: FILE: arch/x86_64/kernel/pci-nommu.c:177:
+^Iprintk("%s: setting mapping_ops to nommu_mapping_ops(%p)\n", $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#427: FILE: arch/x86_64/kernel/pci-nommu.c:177:
+	printk("%s: setting mapping_ops to nommu_mapping_ops(%p)\n", 

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#439: FILE: arch/x86_64/kernel/pci-nommu.c:187:
+__initcall(nommu_init);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#482: FILE: arch/x86_64/kernel/setup.c:110:
+struct dma_mapping_ops* mapping_ops;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#510: FILE: arch/x86_64/mm/init.c:393:
+	printk("%s: setting mapping_ops to NULL\n", __func__);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#522: FILE: arch/x86_64/mm/init.c:403:
+^I^Iprintk("%s: setting mapping_ops to swiotlb_mapping_ops(%p)\n", $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#522: FILE: arch/x86_64/mm/init.c:403:
+		printk("%s: setting mapping_ops to swiotlb_mapping_ops(%p)\n", 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#539: FILE: include/asm-x86_64/dma-mapping.h:18:
+^Ivoid* (*alloc_coherent)(struct device *dev, size_t size, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#541: FILE: include/asm-x86_64/dma-mapping.h:20:
+^Ivoid (*free_coherent)(struct device *dev, size_t size, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#542: FILE: include/asm-x86_64/dma-mapping.h:21:
+	void (*free_coherent)(struct device *dev, size_t size, 
+			     void *vaddr, dma_addr_t dma_handle);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#543: FILE: include/asm-x86_64/dma-mapping.h:22:
+^Idma_addr_t (*map_single)(struct device *hwdev, void *ptr, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#544: FILE: include/asm-x86_64/dma-mapping.h:23:
+	dma_addr_t (*map_single)(struct device *hwdev, void *ptr, 
+				     size_t size, int direction);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#546: FILE: include/asm-x86_64/dma-mapping.h:25:
+	void (*unmap_single)(struct device *dev, dma_addr_t addr,
+				 size_t size, int direction);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#607: FILE: include/asm-x86_64/dma-mapping.h:44:
+extern struct dma_mapping_ops* mapping_ops;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#618: FILE: include/asm-x86_64/dma-mapping.h:55:
+dma_alloc_coherent(struct device *dev, size_t size, dma_addr_t *dma_handle, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#627: FILE: include/asm-x86_64/dma-mapping.h:64:
+static inline void $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#629: FILE: include/asm-x86_64/dma-mapping.h:66:
+dma_free_coherent(struct device *dev, size_t size, void *vaddr,
+		   dma_addr_t dma_handle)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#635: FILE: include/asm-x86_64/dma-mapping.h:72:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#649: FILE: include/asm-x86_64/dma-mapping.h:86:
+static inline void $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#650: FILE: include/asm-x86_64/dma-mapping.h:87:
+dma_unmap_single(struct device *dev, dma_addr_t addr,size_t size,
                                                     ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#734: FILE: include/asm-x86_64/dma-mapping.h:109:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#747: FILE: include/asm-x86_64/dma-mapping.h:122:
+static inline void $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#753: FILE: include/asm-x86_64/dma-mapping.h:128:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#766: FILE: include/asm-x86_64/dma-mapping.h:141:
+static inline void $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#785: FILE: include/asm-x86_64/dma-mapping.h:160:
+static inline void $

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#863: FILE: include/asm-x86_64/swiotlb.h:20:
+extern void swiotlb_sync_single_range_for_cpu(struct device *hwdev,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#867: FILE: include/asm-x86_64/swiotlb.h:24:
+extern void swiotlb_sync_single_range_for_device(struct device *hwdev,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#882: FILE: include/asm-x86_64/swiotlb.h:43:
+extern int swiotlb_dma_supported(struct device *hwdev, u64 mask);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#898: FILE: include/asm-x86_64/gart-mapping.h:1:
+#ifndef _ASM_GART_MAPPING_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:TYPO_SPELLING: 'implemenation' may be misspelled - perhaps 'implementation'?
#905: FILE: include/asm-x86_64/gart-mapping.h:8:
+/* GART DMA mapping implemenation */
                     ^^^^^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#906: FILE: include/asm-x86_64/gart-mapping.h:9:
+extern void* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#907: FILE: include/asm-x86_64/gart-mapping.h:10:
+gart_alloc_coherent(struct device *dev, size_t size, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#910: FILE: include/asm-x86_64/gart-mapping.h:13:
+extern void $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#918: FILE: include/asm-x86_64/gart-mapping.h:21:
+extern void $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#919: FILE: include/asm-x86_64/gart-mapping.h:22:
+gart_unmap_single(struct device *dev, dma_addr_t addr,size_t size,
                                                      ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#922: FILE: include/asm-x86_64/gart-mapping.h:25:
+extern int $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#926: FILE: include/asm-x86_64/gart-mapping.h:29:
+extern void $

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#930: FILE: include/asm-x86_64/gart-mapping.h:33:
+extern int gart_dma_supported(struct device *hwdev, u64 mask);

WARNING:TYPO_SPELLING: 'implemenation' may be misspelled - perhaps 'implementation'?
#936: FILE: include/asm-x86_64/gart-mapping.h:39:
+/* GART DMA mapping implemenation */
                     ^^^^^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#937: FILE: include/asm-x86_64/gart-mapping.h:40:
+static inline void* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#938: FILE: include/asm-x86_64/gart-mapping.h:41:
+gart_alloc_coherent(struct device *dev, size_t size, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#944: FILE: include/asm-x86_64/gart-mapping.h:47:
+static inline void $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#958: FILE: include/asm-x86_64/gart-mapping.h:61:
+gart_unmap_single(struct device *dev, dma_addr_t addr,size_t size,
                                                      ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#963: FILE: include/asm-x86_64/gart-mapping.h:66:
+static inline int $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#967: FILE: include/asm-x86_64/gart-mapping.h:70:
+^Ireturn 0;^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#970: FILE: include/asm-x86_64/gart-mapping.h:73:
+static inline void $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#976: FILE: include/asm-x86_64/gart-mapping.h:79:
+static inline int $

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000141844.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 44 errors, 23 warnings, 17 checks, 840 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000141844.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
