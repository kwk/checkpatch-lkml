CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#137: FILE: drivers/scsi/hosts.c:230:
+		shost->work_q = create_nofreeze_singlethread_workqueue(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#151: FILE: drivers/scsi/lpfc/lpfc_init.c:1525:
+	phba->worker_thread = kthread_nofreeze_run(lpfc_do_work, phba,
 				       "lpfc_worker_%d", phba->brd_no);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#176: FILE: include/linux/kthread.h:27:
+struct task_struct *__kthread_create(int (*threadfn)(void *data),
+				   void *data,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#179: FILE: include/linux/kthread.h:30:
+				   va_list * args);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#186: FILE: include/linux/kthread.h:37:
+struct task_struct *kthread_nofreeze_create(int (*threadfn)(void *data),
+				   void *data,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#205: FILE: include/linux/kthread.h:49:
+extern struct task_struct * kthread_run(int (*threadfn)(void *data),

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#205: FILE: include/linux/kthread.h:49:
+extern struct task_struct * kthread_run(int (*threadfn)(void *data),

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#209: FILE: include/linux/kthread.h:53:
+extern struct task_struct * kthread_nofreeze_run(int (*threadfn)(void *data),

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#209: FILE: include/linux/kthread.h:53:
+extern struct task_struct * kthread_nofreeze_run(int (*threadfn)(void *data),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#210: FILE: include/linux/kthread.h:54:
+extern struct task_struct * kthread_nofreeze_run(int (*threadfn)(void *data),
+					void *data,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#244: FILE: kernel/audit.c:291:
+^I^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#279: FILE: kernel/kthread.c:128:
+struct task_struct *__kthread_create(int (*threadfn)(void *data),
 				   void *data,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#283: FILE: kernel/kthread.c:131:
+				   va_list * args)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#315: FILE: kernel/kthread.c:162:
+	struct task_struct * result;

WARNING:LINE_SPACING: Missing a blank line after declarations
#318: FILE: kernel/kthread.c:165:
+	va_list args;
+	va_start(args, namefmt);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#327: FILE: kernel/kthread.c:174:
+struct task_struct *kthread_nofreeze_create(int (*threadfn)(void *data),
+				   void *data,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#330: FILE: kernel/kthread.c:177:
+	struct task_struct * result;

WARNING:LINE_SPACING: Missing a blank line after declarations
#333: FILE: kernel/kthread.c:180:
+	va_list args;
+	va_start(args, namefmt);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#339: FILE: kernel/kthread.c:186:
+EXPORT_SYMBOL(kthread_nofreeze_create);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#350: FILE: kernel/kthread.c:197:
+struct task_struct * kthread_run(int (*threadfn)(void *data),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#351: FILE: kernel/kthread.c:198:
+struct task_struct * kthread_run(int (*threadfn)(void *data),
+		void *data,

ERROR:SPACING: space required before the open parenthesis '('
#361: FILE: kernel/kthread.c:208:
+	if(!IS_ERR(__k))

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#367: FILE: kernel/kthread.c:214:
+EXPORT_SYMBOL(kthread_run);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#369: FILE: kernel/kthread.c:216:
+struct task_struct * kthread_nofreeze_run(int (*threadfn)(void *data),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#370: FILE: kernel/kthread.c:217:
+struct task_struct * kthread_nofreeze_run(int (*threadfn)(void *data),
+		void *data,

ERROR:SPACING: space required before the open parenthesis '('
#380: FILE: kernel/kthread.c:227:
+	if(!IS_ERR(__k))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#465: FILE: kernel/workqueue.c:302:
+			p = kthread_nofreeze_create(worker_thread, cwq,
+					"%s", wq->name);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#468: FILE: kernel/workqueue.c:305:
+			p = kthread_create(worker_thread, cwq,
+					"%s", wq->name);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#472: FILE: kernel/workqueue.c:309:
+			p = kthread_nofreeze_create(worker_thread, cwq,
+					"%s/%d", wq->name, cpu);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#475: FILE: kernel/workqueue.c:312:
+			p = kthread_create(worker_thread, cwq,
+					"%s/%d", wq->name, cpu);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#496: FILE: kernel/workqueue.c:344:
+		p = create_workqueue_thread(wq, singlethread_cpu,
+				freezer_flags);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000111472.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 11 errors, 4 warnings, 16 checks, 384 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000111472.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
