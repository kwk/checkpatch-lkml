WARNING:TYPO_SPELLING: 'imlementation' may be misspelled - perhaps 'implementation'?
#24: 
Here's a simpler kmalloc_percpu imlementation (minus the interlaced
                                ^^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#40: 
diff -X dontdiff -ruN linux-2.5.51/include/linux/percpu.h kmalloc_percpu-2.5.51/include/linux/percpu.h

ERROR:TRAILING_WHITESPACE: trailing whitespace
#61: FILE: include/linux/percpu.h:18:
+/* $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#64: FILE: include/linux/percpu.h:21:
+ * to use get_cpu_ptr... $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#65: FILE: include/linux/percpu.h:22:
+ */ $

ERROR:CODE_INDENT: code indent should use tabs where possible
#68: FILE: include/linux/percpu.h:25:
+        struct percpu_data *__p = (struct percpu_data *)~(unsigned long)(ptr); \$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#68: FILE: include/linux/percpu.h:25:
+        struct percpu_data *__p = (struct percpu_data *)~(unsigned long)(ptr); \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#69: FILE: include/linux/percpu.h:26:
+        (__typeof__(ptr))__p->ptrs[(cpu)];^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#69: FILE: include/linux/percpu.h:26:
+        (__typeof__(ptr))__p->ptrs[(cpu)];^I\$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#72: FILE: include/linux/percpu.h:29:
+extern void *kmalloc_percpu(size_t size, int flags);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#73: FILE: include/linux/percpu.h:30:
+extern void kfree_percpu(const void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const void *' should also have an identifier name
#73: FILE: include/linux/percpu.h:30:
+extern void kfree_percpu(const void *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#74: FILE: include/linux/percpu.h:31:
+extern void kmalloc_percpu_init(void);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#82: FILE: include/linux/percpu.h:39:
+	return(kmalloc(size, flags));

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#84: FILE: include/linux/percpu.h:41:
+}
+static inline void kfree_percpu(const void *ptr)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#85: FILE: include/linux/percpu.h:42:
+{^I$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#88: FILE: include/linux/percpu.h:45:
+}
+static inline void kmalloc_percpu_init(void) { }

ERROR:TRAILING_WHITESPACE: trailing whitespace
#92: FILE: include/linux/percpu.h:49:
+/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#95: FILE: include/linux/percpu.h:52:
+ *    and read/modify/write)  AND $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#96: FILE: include/linux/percpu.h:53:
+ * 2. You want "this cpu's version" of the object AND $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#98: FILE: include/linux/percpu.h:55:
+ *    a. On multiprocessors, you don't want to switch between cpus after $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#99: FILE: include/linux/percpu.h:56:
+ *    you've read the current processor id due to preemption -- this would $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#100: FILE: include/linux/percpu.h:57:
+ *    take away the implicit  advantage to not have any kind of traditional $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#104: FILE: include/linux/percpu.h:61:
+ *    $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#105: FILE: include/linux/percpu.h:62:
+ * So, Use get_cpu_ptr to disable preemption and get pointer to the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#108: FILE: include/linux/percpu.h:65:
+ * then considered to be safe. And ofcourse, "Thou shalt not sleep between $

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#124: FILE: kernel/ksyms.c:103:
+EXPORT_SYMBOL(kfree_percpu);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#157: FILE: mm/slab.c:1850:
+	struct percpu_data *pdata = kmalloc(sizeof (*pdata), flags);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#162: FILE: mm/slab.c:1855:
+	for (i = 0; i < NR_CPUS; i++) {

CHECK:SPACING: No space is necessary after a cast
#171: FILE: mm/slab.c:1864:
+	return (void *) (~(unsigned long) pdata);

CHECK:SPACING: No space is necessary after a cast
#205: FILE: mm/slab.c:1929:
+	struct percpu_data *p = (struct percpu_data *) (~(unsigned long) objp);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#207: FILE: mm/slab.c:1931:
+	for (i = 0; i < NR_CPUS; i++) {

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000407413.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 16 errors, 9 warnings, 7 checks, 165 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000407413.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
