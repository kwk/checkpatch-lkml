CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#51: FILE: mm/mempolicy.c:92:
+#define MPOL_MF_INVERT (1<<21)		/* Invert check for nodemask */
                          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BIT_MACRO: Prefer using the BIT macro
#51: FILE: mm/mempolicy.c:92:
+#define MPOL_MF_INVERT (1<<21)		/* Invert check for nodemask */

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#86: FILE: mm/mempolicy.c:452:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#94: FILE: mm/mempolicy.c:460:
+static int migrate_pages_to(struct list_head *pagelist,
+	struct vm_area_struct *vma, int dest)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#104: FILE: mm/mempolicy.c:470:
+			page = alloc_page_vma(GFP_HIGHUSER, vma,
+						vma->vm_start);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#134: FILE: mm/mempolicy.c:543:
 	if (!IS_ERR(vma)) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#175: FILE: mm/mempolicy.c:697:
+	check_range(mm, mm->mmap->vm_start, TASK_SIZE, &nmask,
+			flags | MPOL_MF_DISCONTIG_OK | MPOL_MF_INVERT,

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#179: FILE: mm/mempolicy.c:701:
+	if (!list_empty(&pagelist)) {
+

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#185: FILE: mm/mempolicy.c:707:
+
+	}

ERROR:SPACING: space required after that ',' (ctx:VxV)
#248: FILE: mm/mempolicy.c:759:
+		int s,d;
 		     ^

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#253: FILE: mm/mempolicy.c:764:
+		for_each_node_mask(s, tmp) {
+

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'current->euid != task->suid'
#300: FILE: mm/mempolicy.c:930:
+	if ((current->euid != task->suid) && (current->euid != task->uid) &&
+	    (current->uid != task->suid) && (current->uid != task->uid) &&
 	    !capable(CAP_SYS_ADMIN)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'current->euid != task->uid'
#300: FILE: mm/mempolicy.c:930:
+	if ((current->euid != task->suid) && (current->euid != task->uid) &&
+	    (current->uid != task->suid) && (current->uid != task->uid) &&
 	    !capable(CAP_SYS_ADMIN)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'current->uid != task->suid'
#300: FILE: mm/mempolicy.c:930:
+	if ((current->euid != task->suid) && (current->euid != task->uid) &&
+	    (current->uid != task->suid) && (current->uid != task->uid) &&
 	    !capable(CAP_SYS_ADMIN)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'current->uid != task->uid'
#300: FILE: mm/mempolicy.c:930:
+	if ((current->euid != task->suid) && (current->euid != task->uid) &&
+	    (current->uid != task->suid) && (current->uid != task->uid) &&
 	    !capable(CAP_SYS_ADMIN)) {

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000137999.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 0 warnings, 14 checks, 248 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000137999.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
