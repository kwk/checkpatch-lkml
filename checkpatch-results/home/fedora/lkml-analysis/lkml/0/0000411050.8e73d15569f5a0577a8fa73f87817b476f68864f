WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#24: 
This patch adds a system call semtimedop which allows a program to execute a

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#46: FILE: arch/i386/kernel/sys_i386.c:143:
+		return sys_semtimedop (first, (struct sembuf *)ptr, second, NULL);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#48: FILE: arch/i386/kernel/sys_i386.c:145:
+		return sys_semtimedop (first, (struct sembuf *)ptr, second,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#106: FILE: include/linux/sem.h:143:
+asmlinkage long sys_semtimedop (int semid, struct sembuf *sops,

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#107: FILE: include/linux/sem.h:144:
+								unsigned nsops, const struct timespec *timeout);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#107: FILE: include/linux/sem.h:144:
+asmlinkage long sys_semtimedop (int semid, struct sembuf *sops,
+								unsigned nsops, const struct timespec *timeout);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#107: FILE: include/linux/sem.h:144:
+								unsigned nsops, const struct timespec *timeout);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#126: FILE: ipc/sem.c:973:
+    return sys_semtimedop(semid, tsops, nsops, NULL);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#129: FILE: ipc/sem.c:976:
+asmlinkage long sys_semtimedop (int semid, struct sembuf *tsops,

WARNING:LONG_LINE: line length of 111 exceeds 100 columns
#130: FILE: ipc/sem.c:977:
+								unsigned nsops, const struct timespec *timeout)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#130: FILE: ipc/sem.c:977:
+asmlinkage long sys_semtimedop (int semid, struct sembuf *tsops,
+								unsigned nsops, const struct timespec *timeout)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#130: FILE: ipc/sem.c:977:
+								unsigned nsops, const struct timespec *timeout)

ERROR:CODE_INDENT: code indent should use tabs where possible
#147: FILE: ipc/sem.c:1002:
+ ^Iif (timeout) {$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#147: FILE: ipc/sem.c:1002:
+ ^Iif (timeout) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#147: FILE: ipc/sem.c:1002:
+ ^Iif (timeout) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#147: FILE: ipc/sem.c:1002:
+ 	if (timeout) {
+	  struct timespec _timeout;

WARNING:TABSTOP: Statements should start on a tabstop
#148: FILE: ipc/sem.c:1003:
+	  struct timespec _timeout;

WARNING:TABSTOP: Statements should start on a tabstop
#149: FILE: ipc/sem.c:1004:
+	  if (copy_from_user(&_timeout, timeout, sizeof(*timeout))) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#149: FILE: ipc/sem.c:1004:
+	  struct timespec _timeout;
+	  if (copy_from_user(&_timeout, timeout, sizeof(*timeout))) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TABSTOP: Statements should start on a tabstop
#152: FILE: ipc/sem.c:1007:
+	  }

WARNING:TABSTOP: Statements should start on a tabstop
#153: FILE: ipc/sem.c:1008:
+	  if (_timeout.tv_sec < 0 || _timeout.tv_nsec < 0 ||

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#154: FILE: ipc/sem.c:1009:
+	  if (_timeout.tv_sec < 0 || _timeout.tv_nsec < 0 ||
+		  _timeout.tv_nsec >= 1000000000L) {

WARNING:TABSTOP: Statements should start on a tabstop
#157: FILE: ipc/sem.c:1012:
+	  }

ERROR:CODE_INDENT: code indent should use tabs where possible
#176: FILE: ipc/sem.c:1108:
+ ^I^I^Iif (error == -EINTR && offset == 0)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#176: FILE: ipc/sem.c:1108:
+ ^I^I^Iif (error == -EINTR && offset == 0)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#176: FILE: ipc/sem.c:1108:
+ ^I^I^Iif (error == -EINTR && offset == 0)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 28)
#176: FILE: ipc/sem.c:1108:
+ 			if (error == -EINTR && offset == 0)
+			    error = -EAGAIN;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#188: FILE: ipc/util.c:541:
+asmlinkage long sys_semtimedop (int semid, struct sembuf *sops, unsigned nsops,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#188: FILE: ipc/util.c:541:
+asmlinkage long sys_semtimedop (int semid, struct sembuf *sops, unsigned nsops,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#189: FILE: ipc/util.c:542:
+asmlinkage long sys_semtimedop (int semid, struct sembuf *sops, unsigned nsops,
+								const struct timespec *timeout)

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#191: FILE: ipc/util.c:544:
+	return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#194: FILE: ipc/util.c:547:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#239: FILE: ipc/util.c.orig:38:
+ $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#255: FILE: ipc/util.c.orig:54:
+ *^Iarray itself. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#257: FILE: ipc/util.c.orig:56:
+ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#288: FILE: ipc/util.c.orig:87:
+ *^Iipc_findkey^I-^Ifind a key in an ipc identifier set^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#291: FILE: ipc/util.c.orig:90:
+ *^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#295: FILE: ipc/util.c.orig:94:
+ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#361: FILE: ipc/util.c.orig:160:
+ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#404: FILE: ipc/util.c.orig:203:
+ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#411: FILE: ipc/util.c.orig:210:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#437: FILE: ipc/util.c.orig:236:
+ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#489: FILE: ipc/util.c.orig:288:
+ *^Iipc_rcu_alloc^I-^Iallocate ipc and rcu space $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#494: FILE: ipc/util.c.orig:293:
+ *^INULL is returned if the allocation fails. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#496: FILE: ipc/util.c.orig:295:
+ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#500: FILE: ipc/util.c.orig:299:
+^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#502: FILE: ipc/util.c.orig:301:
+^I * workqueue if necessary (for vmalloc). $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#517: FILE: ipc/util.c.orig:316:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#552: FILE: ipc/util.c.orig:351:
+ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#564: FILE: ipc/util.c.orig:363:
+^Iif ((requested_mode & ~granted_mode & 0007) && $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#584: FILE: ipc/util.c.orig:383:
+ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#605: FILE: ipc/util.c.orig:404:
+ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#658: FILE: ipc/util.c.orig:457:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#694: FILE: ipc/util.c.orig:493:
+ *^IReturn IPC_64 for new style IPC and IPC_OLD for old style IPC. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#698: FILE: ipc/util.c.orig:497:
+ $

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000411050.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 25 errors, 25 warnings, 5 checks, 710 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000411050.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
