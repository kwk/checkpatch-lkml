ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#107: FILE: fs/proc/kcore.c:211:
+	for (m=clist; m; m=m->next) {
 	      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#107: FILE: fs/proc/kcore.c:211:
+	for (m=clist; m; m=m->next) {
 	                  ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR' are not preferred. Consider using octal permissions '0400'.
#145: FILE: fs/proc/proc_misc.c:685:
+		proc_vmcore = create_proc_entry("vmcore", S_IRUSR, NULL);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#160: FILE: fs/proc/vmcore.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#161: FILE: fs/proc/vmcore.c:2:
+ *	fs/proc/vmcore.c Interface for accessing the crash

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#162: FILE: fs/proc/vmcore.c:3:
+ * ^I^I^I^I dump from the system's previous life.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#163: FILE: fs/proc/vmcore.c:4:
+ * ^IHeavily borrowed from fs/proc/kcore.c$

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#181: FILE: fs/proc/vmcore.c:22:
+#include <asm/uaccess.h>

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#182: FILE: fs/proc/vmcore.c:23:
+#include <asm/io.h>

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#187: FILE: fs/proc/vmcore.c:28:
+static int open_vmcore(struct inode * inode, struct file * filp)
                                                            ^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#187: FILE: fs/proc/vmcore.c:28:
+static int open_vmcore(struct inode * inode, struct file * filp)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#187: FILE: fs/proc/vmcore.c:28:
+static int open_vmcore(struct inode * inode, struct file * filp)

ERROR:SPACING: space required after that ',' (ctx:OxV)
#192: FILE: fs/proc/vmcore.c:33:
+static ssize_t read_vmcore(struct file *,char __user *,size_t, loff_t *);
                                         ^

ERROR:SPACING: space required after that ',' (ctx:OxV)
#192: FILE: fs/proc/vmcore.c:33:
+static ssize_t read_vmcore(struct file *,char __user *,size_t, loff_t *);
                                                       ^

WARNING:CONST_STRUCT: struct file_operations should normally be const
#194: FILE: fs/proc/vmcore.c:35:
+struct file_operations proc_vmcore_operations = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#200: FILE: fs/proc/vmcore.c:41:
+#define BACKUP_END CRASH_BACKUP_BASE + CRASH_BACKUP_SIZE

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#204: FILE: fs/proc/vmcore.c:45:
+struct memelfnote
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#222: FILE: fs/proc/vmcore.c:63:
+			(*nphdr + 2)*sizeof(struct elf_phdr) +
 			            ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#236: FILE: fs/proc/vmcore.c:77:
+static ssize_t read_from_oldmem(char *buf, size_t count,
+			     loff_t *ppos, int userbuf)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#280: FILE: fs/proc/vmcore.c:121:
+	buf += sizeof(struct elfhdr) + 2*sizeof(struct elf_phdr);
 	                                ^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#300: FILE: fs/proc/vmcore.c:141:
+static ssize_t read_vmcore(

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#310: FILE: fs/proc/vmcore.c:151:
+	proc_vmcore->size = size = tsz + elf_buflen;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:BRACES: braces {} are not necessary for single statement blocks
#311: FILE: fs/proc/vmcore.c:152:
+	if (buflen == 0 || *fpos >= size) {
+		goto done;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#321: FILE: fs/proc/vmcore.c:162:
+		char * elf_buf;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#345: FILE: fs/proc/vmcore.c:186:
+		if (buflen == 0) {
+			goto done;
+		}

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#351: FILE: fs/proc/vmcore.c:192:
+	if ((tsz = (PAGE_SIZE - (start & ~PAGE_MASK))) > buflen)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'start < 0'
#357: FILE: fs/proc/vmcore.c:198:
+		if ((start < 0) || (start >= size))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'start >= size'
#357: FILE: fs/proc/vmcore.c:198:
+		if ((start < 0) || (start >= size))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'p >= BACKUP_START'
#371: FILE: fs/proc/vmcore.c:212:
+		if ((p >= BACKUP_START) && (p < BACKUP_END)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'p < BACKUP_END'
#371: FILE: fs/proc/vmcore.c:212:
+		if ((p >= BACKUP_START) && (p < BACKUP_END)) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#371: FILE: fs/proc/vmcore.c:212:
+		if ((p >= BACKUP_START) && (p < BACKUP_END)) {
[...]
+		} else if (p < CRASH_RELOCATE_SIZE)
[...]

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#410: FILE: include/linux/crash_dump.h:9:
+extern int notesize(struct memelfnote *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct memelfnote *' should also have an identifier name
#410: FILE: include/linux/crash_dump.h:9:
+extern int notesize(struct memelfnote *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#411: FILE: include/linux/crash_dump.h:10:
+extern char *storenote(struct memelfnote *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct memelfnote *' should also have an identifier name
#411: FILE: include/linux/crash_dump.h:10:
+extern char *storenote(struct memelfnote *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#411: FILE: include/linux/crash_dump.h:10:
+extern char *storenote(struct memelfnote *, char *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#412: FILE: include/linux/crash_dump.h:11:
+extern ssize_t copy_oldmem_page(unsigned long, char *, size_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#412: FILE: include/linux/crash_dump.h:11:
+extern ssize_t copy_oldmem_page(unsigned long, char *, size_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#412: FILE: include/linux/crash_dump.h:11:
+extern ssize_t copy_oldmem_page(unsigned long, char *, size_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#412: FILE: include/linux/crash_dump.h:11:
+extern ssize_t copy_oldmem_page(unsigned long, char *, size_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#412: FILE: include/linux/crash_dump.h:11:
+extern ssize_t copy_oldmem_page(unsigned long, char *, size_t, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#413: FILE: include/linux/crash_dump.h:12:
+extern void elf_kcore_store_hdr(char *, int, int, struct kcore_list *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#413: FILE: include/linux/crash_dump.h:12:
+extern void elf_kcore_store_hdr(char *, int, int, struct kcore_list *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#413: FILE: include/linux/crash_dump.h:12:
+extern void elf_kcore_store_hdr(char *, int, int, struct kcore_list *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#413: FILE: include/linux/crash_dump.h:12:
+extern void elf_kcore_store_hdr(char *, int, int, struct kcore_list *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kcore_list *' should also have an identifier name
#413: FILE: include/linux/crash_dump.h:12:
+extern void elf_kcore_store_hdr(char *, int, int, struct kcore_list *);

WARNING:CONST_STRUCT: struct file_operations should normally be const
#433: FILE: include/linux/proc_fs.h:121:
+extern struct file_operations proc_vmcore_operations;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000249645.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 10 errors, 23 warnings, 14 checks, 343 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000249645.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
