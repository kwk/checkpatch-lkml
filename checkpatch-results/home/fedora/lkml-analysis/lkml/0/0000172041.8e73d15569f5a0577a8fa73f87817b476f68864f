WARNING:TYPO_SPELLING: 'reseting' may be misspelled - perhaps 'resetting'?
#40: 
and the related mechanisms for reseting the affects PCI
                               ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#55: FILE: include/asm-ppc64/eeh.h:39:
+#define EEH_MODE_RECOVERING	(1<<3)
                            	  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BIT_MACRO: Prefer using the BIT macro
#55: FILE: include/asm-ppc64/eeh.h:39:
+#define EEH_MODE_RECOVERING	(1<<3)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#58: FILE: include/asm-ppc64/eeh.h:42:
+ * to be permanently disabled. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:REPEATED_WORD: Possible repeated word: 'the'
#85: FILE: include/asm-ppc64/eeh.h:79:
+ * Obtains the the EEH error details from the RTAS subsystem,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#88: FILE: include/asm-ppc64/eeh.h:82:
+void eeh_slot_error_detail (struct device_node *dn, int severity);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#100: FILE: include/asm-ppc64/eeh.h:92:
+void rtas_set_slot_reset (struct device_node *dn);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct device_node *' should also have an identifier name
#143: FILE: include/asm-ppc64/eeh.h:121:
+void eeh_restore_bars(struct device_node *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#187: FILE: include/asm-ppc64/rtas.h:249:
+extern int rtas_write_config(struct device_node *dn, int where, int size, u32 val);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#212: FILE: arch/ppc64/kernel/eeh.c:17:
  * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#213: FILE: arch/ppc64/kernel/eeh.c:18:
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA$

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/atomic.h> instead of <asm/atomic.h>
#228: FILE: arch/ppc64/kernel/eeh.c:31:
+#include <asm/atomic.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

WARNING:TYPO_SPELLING: 'alo' may be misspelled - perhaps 'also'?
#286: FILE: arch/ppc64/kernel/eeh.c:227:
+		} else if (alo > piar->addr_hi) {
 		           ^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#295: FILE: arch/ppc64/kernel/eeh.c:247:
+	printk (KERN_DEBUG "PIAR: insert range=[%lx:%lx] dev=%s\n",

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#295: FILE: arch/ppc64/kernel/eeh.c:247:
+	printk (KERN_DEBUG "PIAR: insert range=[%lx:%lx] dev=%s\n",

WARNING:TYPO_SPELLING: 'alo' may be misspelled - perhaps 'also'?
#296: FILE: arch/ppc64/kernel/eeh.c:248:
+	               alo, ahi, pci_name (dev));
 	               ^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#296: FILE: arch/ppc64/kernel/eeh.c:248:
+^I               alo, ahi, pci_name (dev));$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#296: FILE: arch/ppc64/kernel/eeh.c:248:
+	printk (KERN_DEBUG "PIAR: insert range=[%lx:%lx] dev=%s\n",
+	               alo, ahi, pci_name (dev));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#296: FILE: arch/ppc64/kernel/eeh.c:248:
+	               alo, ahi, pci_name (dev));

WARNING:IF_1: Consider removing the #if 1 and its #endif
#310: FILE: arch/ppc64/kernel/eeh.c:274:
+#if 1

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#311: FILE: arch/ppc64/kernel/eeh.c:275:
+		printk(KERN_INFO "PCI: skip building address cache for=%s %s %s\n",

WARNING:LINE_SPACING: Missing a blank line after declarations
#338: FILE: arch/ppc64/kernel/eeh.c:394:
+			int i;
+			for (i = 0; i < 16; i++)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#356: FILE: arch/ppc64/kernel/eeh.c:411:
+void eeh_slot_error_detail (struct device_node *dn, int severity)

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#370: FILE: arch/ppc64/kernel/eeh.c:416:
+	if (!dn) return;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:CODE_INDENT: code indent should use tabs where possible
#377: FILE: arch/ppc64/kernel/eeh.c:423:
+^I               8, 1, NULL, dn->eeh_config_addr,$

WARNING:TYPO_SPELLING: 'buid' may be misspelled - perhaps 'build'?
#378: FILE: arch/ppc64/kernel/eeh.c:424:
+	               BUID_HI(dn->phb->buid),
 	                                ^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#378: FILE: arch/ppc64/kernel/eeh.c:424:
+^I               BUID_HI(dn->phb->buid),$

WARNING:TYPO_SPELLING: 'buid' may be misspelled - perhaps 'build'?
#379: FILE: arch/ppc64/kernel/eeh.c:425:
+	               BUID_LO(dn->phb->buid), NULL, 0,
 	                                ^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#379: FILE: arch/ppc64/kernel/eeh.c:425:
+^I               BUID_LO(dn->phb->buid), NULL, 0,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#380: FILE: arch/ppc64/kernel/eeh.c:426:
+^I               virt_to_phys(slot_errbuf),$

ERROR:CODE_INDENT: code indent should use tabs where possible
#381: FILE: arch/ppc64/kernel/eeh.c:427:
+^I               eeh_error_buf_size,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#382: FILE: arch/ppc64/kernel/eeh.c:428:
+^I               severity);$

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#389: FILE: arch/ppc64/kernel/eeh.c:435:
+EXPORT_SYMBOL(eeh_slot_error_detail);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#484: FILE: arch/ppc64/kernel/eeh.c:476:
+static inline struct pci_dev * eeh_find_pci_dev(struct device_node *dn)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#487: FILE: arch/ppc64/kernel/eeh.c:479:
+	struct pci_dev *dev = NULL;
+	for_each_pci_dev(dev) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#498: FILE: arch/ppc64/kernel/eeh.c:490:
+static inline void eeh_mark_slot (struct device_node *dn)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#504: FILE: arch/ppc64/kernel/eeh.c:496:
+		struct pci_dev *dev = eeh_find_pci_dev (dn);

WARNING:LINE_SPACING: Missing a blank line after declarations
#505: FILE: arch/ppc64/kernel/eeh.c:497:
+		struct pci_dev *dev = eeh_find_pci_dev (dn);
+		if (dev && dev->driver) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#505: FILE: arch/ppc64/kernel/eeh.c:497:
+		if (dev && dev->driver) {
+			dev->driver->err_handler.error_state = pci_channel_io_frozen;
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#509: FILE: arch/ppc64/kernel/eeh.c:501:
+			eeh_mark_slot (dn->child);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#514: FILE: arch/ppc64/kernel/eeh.c:506:
+static inline void eeh_clear_slot (struct device_node *dn)

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#517: FILE: arch/ppc64/kernel/eeh.c:509:
+		dn->eeh_mode &= ~(EEH_MODE_RECOVERING|EEH_MODE_ISOLATED);
 		                                     ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#519: FILE: arch/ppc64/kernel/eeh.c:511:
+			eeh_clear_slot (dn->child);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#531: FILE: arch/ppc64/kernel/eeh.c:531:
+extern void disable_irq_nosync(unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#531: FILE: arch/ppc64/kernel/eeh.c:531:
+extern void disable_irq_nosync(unsigned int);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#558: FILE: arch/ppc64/kernel/eeh.c:554:
+		printk ("EEH:ignored check for %s %s\n",

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#558: FILE: arch/ppc64/kernel/eeh.c:554:
+		printk ("EEH:ignored check for %s %s\n",

ERROR:CODE_INDENT: code indent should use tabs where possible
#559: FILE: arch/ppc64/kernel/eeh.c:555:
+^I^I           pci_pretty_name (dev), dn->full_name);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#559: FILE: arch/ppc64/kernel/eeh.c:555:
+		printk ("EEH:ignored check for %s %s\n",
+		           pci_pretty_name (dev), dn->full_name);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#559: FILE: arch/ppc64/kernel/eeh.c:555:
+		           pci_pretty_name (dev), dn->full_name);

ERROR:SPACING: space prohibited before that '++' (ctx:WxO)
#575: FILE: arch/ppc64/kernel/eeh.c:570:
+		dn->eeh_check_count ++;
 		                    ^

WARNING:TYPO_SPELLING: 'panicing' may be misspelled - perhaps 'panicking'?
#577: FILE: arch/ppc64/kernel/eeh.c:572:
+			printk (KERN_ERR "EEH: Device driver ignored %d bad reads, panicing\n",
 			                                                           ^^^^^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#577: FILE: arch/ppc64/kernel/eeh.c:572:
+			printk (KERN_ERR "EEH: Device driver ignored %d bad reads, panicing\n",

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#577: FILE: arch/ppc64/kernel/eeh.c:572:
+			printk (KERN_ERR "EEH: Device driver ignored %d bad reads, panicing\n",

ERROR:CODE_INDENT: code indent should use tabs where possible
#578: FILE: arch/ppc64/kernel/eeh.c:573:
+^I^I^I        dn->eeh_check_count);$

CHECK:SPACING: No space is necessary after a cast
#585: FILE: arch/ppc64/kernel/eeh.c:579:
+*((long *) 0x0) = 42;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#588: FILE: arch/ppc64/kernel/eeh.c:582:
+			panic("EEH: MMIO halt (%d) on device:%s %s\n", rets[0],
+		      pci_name(dev), pci_pretty_name(dev));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rets[0] == 5'
#597: FILE: arch/ppc64/kernel/eeh.c:595:
+	if (!(ret == 0 && ((rets[1] == 1 && (rets[0] == 2 || rets[0] >= 4))
+	                   || (rets[0] == 5)))) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:CODE_INDENT: code indent should use tabs where possible
#598: FILE: arch/ppc64/kernel/eeh.c:596:
+^I                   || (rets[0] == 5)))) {$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#598: FILE: arch/ppc64/kernel/eeh.c:596:
+	if (!(ret == 0 && ((rets[1] == 1 && (rets[0] == 2 || rets[0] >= 4))
+	                   || (rets[0] == 5)))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rets[0] == 5'
#608: FILE: arch/ppc64/kernel/eeh.c:602:
+	if ((rets[0] == 5) && (dn->child == NULL)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dn->child == NULL'
#608: FILE: arch/ppc64/kernel/eeh.c:602:
+	if ((rets[0] == 5) && (dn->child == NULL)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dn->child"
#608: FILE: arch/ppc64/kernel/eeh.c:602:
+	if ((rets[0] == 5) && (dn->child == NULL)) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:TRAILING_WHITESPACE: trailing whitespace
#616: FILE: arch/ppc64/kernel/eeh.c:608:
+^I * with other functions on this device, and functions under $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#617: FILE: arch/ppc64/kernel/eeh.c:609:
+	 * bridges. */

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#618: FILE: arch/ppc64/kernel/eeh.c:610:
+	eeh_mark_slot (dn->parent->child);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#629: FILE: arch/ppc64/kernel/eeh.c:614:
+		dev = eeh_find_pci_dev (dn);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#636: FILE: arch/ppc64/kernel/eeh.c:618:
+		disable_irq_nosync (dev->irq);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rets[0] == 2'
#639: FILE: arch/ppc64/kernel/eeh.c:621:
+	if ((rets[0] == 2) || (rets[0] == 4))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rets[0] == 4'
#639: FILE: arch/ppc64/kernel/eeh.c:621:
+	if ((rets[0] == 2) || (rets[0] == 4))

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#660: FILE: arch/ppc64/kernel/eeh.c:626:
+	peh_send_failure_event (dev, state, rets[2]);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#667: FILE: arch/ppc64/kernel/eeh.c:631:
+	if (rets[0] != 5) dump_stack();

WARNING:LINE_SPACING: Missing a blank line after declarations
#713: FILE: arch/ppc64/kernel/eeh.c:684:
+	struct device_node *dn = pci_device_to_OF_node(dev);
+	rtas_pci_slot_reset (dn, state);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#713: FILE: arch/ppc64/kernel/eeh.c:684:
+	rtas_pci_slot_reset (dn, state);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#728: FILE: arch/ppc64/kernel/eeh.c:699:
+	if (rc) return rc;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#730: FILE: arch/ppc64/kernel/eeh.c:701:
+	if (rets[1] == 0) return -1;  /* EEH is not supported */

WARNING:TYPO_SPELLING: 'Oll' may be misspelled - perhaps 'All'?
#731: FILE: arch/ppc64/kernel/eeh.c:702:
+	if (rets[0] == 0)  return 0;  /* Oll Korrect */
 	                                 ^^^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#731: FILE: arch/ppc64/kernel/eeh.c:702:
+	if (rets[0] == 0)  return 0;  /* Oll Korrect */

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#733: FILE: arch/ppc64/kernel/eeh.c:704:
+		if (rets[2] == 0) return -1; /* permanently unavailable */

WARNING:LINE_SPACING: Missing a blank line after declarations
#743: FILE: arch/ppc64/kernel/eeh.c:714:
+	struct device_node *dn = pci_device_to_OF_node(dev);
+	if (!dn) return -1;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#743: FILE: arch/ppc64/kernel/eeh.c:714:
+	if (!dn) return -1;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#745: FILE: arch/ppc64/kernel/eeh.c:716:
+	BUG_ON (dn->phb==NULL);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#745: FILE: arch/ppc64/kernel/eeh.c:716:
+	BUG_ON (dn->phb==NULL);

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#745: FILE: arch/ppc64/kernel/eeh.c:716:
+	BUG_ON (dn->phb==NULL);
 	               ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dn->phb"
#745: FILE: arch/ppc64/kernel/eeh.c:716:
+	BUG_ON (dn->phb==NULL);

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#746: FILE: arch/ppc64/kernel/eeh.c:717:
+	if (dn->phb==NULL) {
 	           ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dn->phb"
#746: FILE: arch/ppc64/kernel/eeh.c:717:
+	if (dn->phb==NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#747: FILE: arch/ppc64/kernel/eeh.c:718:
+		printk (KERN_ERR "EEH, checking on slot with no phb dn=%s dev=%s:%s\n",

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#747: FILE: arch/ppc64/kernel/eeh.c:718:
+		printk (KERN_ERR "EEH, checking on slot with no phb dn=%s dev=%s:%s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#748: FILE: arch/ppc64/kernel/eeh.c:719:
+		printk (KERN_ERR "EEH, checking on slot with no phb dn=%s dev=%s:%s\n",
+		       dn->full_name, pci_name(dev), pci_pretty_name (dev));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#748: FILE: arch/ppc64/kernel/eeh.c:719:
+		       dn->full_name, pci_name(dev), pci_pretty_name (dev));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#751: FILE: arch/ppc64/kernel/eeh.c:722:
+	return eeh_slot_availability (dn);

WARNING:LONG_LINE: line length of 122 exceeds 100 columns
#762: FILE: arch/ppc64/kernel/eeh.c:733:
+		printk (KERN_WARNING "EEH: in slot reset, device node %s has no phb\n",                    dn->full_name);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#762: FILE: arch/ppc64/kernel/eeh.c:733:
+		printk (KERN_WARNING "EEH: in slot reset, device node %s has no phb\n",                    dn->full_name);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#762: FILE: arch/ppc64/kernel/eeh.c:733:
+		printk (KERN_WARNING "EEH: in slot reset, device node %s has no phb\n",                    dn->full_name);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#767: FILE: arch/ppc64/kernel/eeh.c:738:
+	rc = rtas_call(ibm_set_slot_reset,4,1, NULL,
 	                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#767: FILE: arch/ppc64/kernel/eeh.c:738:
+	rc = rtas_call(ibm_set_slot_reset,4,1, NULL,
 	                                   ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#768: FILE: arch/ppc64/kernel/eeh.c:739:
+^I               dn->eeh_config_addr,$

WARNING:TYPO_SPELLING: 'buid' may be misspelled - perhaps 'build'?
#769: FILE: arch/ppc64/kernel/eeh.c:740:
+	               BUID_HI(dn->phb->buid),
 	                                ^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#769: FILE: arch/ppc64/kernel/eeh.c:740:
+^I               BUID_HI(dn->phb->buid),$

WARNING:TYPO_SPELLING: 'buid' may be misspelled - perhaps 'build'?
#770: FILE: arch/ppc64/kernel/eeh.c:741:
+	               BUID_LO(dn->phb->buid),
 	                                ^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#770: FILE: arch/ppc64/kernel/eeh.c:741:
+^I               BUID_LO(dn->phb->buid),$

ERROR:CODE_INDENT: code indent should use tabs where possible
#771: FILE: arch/ppc64/kernel/eeh.c:742:
+^I               state);$

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#773: FILE: arch/ppc64/kernel/eeh.c:744:
+		printk (KERN_WARNING "EEH: Unable to reset the failed slot, (%d) #RST=%d\n", rc, state);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#773: FILE: arch/ppc64/kernel/eeh.c:744:
+		printk (KERN_WARNING "EEH: Unable to reset the failed slot, (%d) #RST=%d\n", rc, state);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#773: FILE: arch/ppc64/kernel/eeh.c:744:
+		printk (KERN_WARNING "EEH: Unable to reset the failed slot, (%d) #RST=%d\n", rc, state);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#778: FILE: arch/ppc64/kernel/eeh.c:749:
+		eeh_clear_slot (dn->parent->child);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#790: FILE: arch/ppc64/kernel/eeh.c:761:
+	rtas_pci_slot_reset (dn, 1);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#793: FILE: arch/ppc64/kernel/eeh.c:764:
+	 * a 100 milliseconds. We wait a bit longer 'just in case'.  */

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#796: FILE: arch/ppc64/kernel/eeh.c:767:
+	msleep (PCI_BUS_RST_HOLD_TIME_MSEC);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#797: FILE: arch/ppc64/kernel/eeh.c:768:
+	rtas_pci_slot_reset (dn, 0);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#801: FILE: arch/ppc64/kernel/eeh.c:772:
+	 * up traffic. */

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#803: FILE: arch/ppc64/kernel/eeh.c:774:
+	msleep (PCI_BUS_SETTLE_TIME_MSEC);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#806: FILE: arch/ppc64/kernel/eeh.c:777:
+	 * ready to be used; if not, wait for recovery. */

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#807: FILE: arch/ppc64/kernel/eeh.c:778:
+	for (i=0; i<10; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#807: FILE: arch/ppc64/kernel/eeh.c:778:
+	for (i=0; i<10; i++) {
 	           ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#808: FILE: arch/ppc64/kernel/eeh.c:779:
+		rc = eeh_slot_availability (dn);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#809: FILE: arch/ppc64/kernel/eeh.c:780:
+		if (rc <= 0) break;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#811: FILE: arch/ppc64/kernel/eeh.c:782:
+		msleep (rc+100);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#811: FILE: arch/ppc64/kernel/eeh.c:782:
+		msleep (rc+100);
 		          ^

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#815: FILE: arch/ppc64/kernel/eeh.c:786:
+EXPORT_SYMBOL(rtas_set_slot_reset);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#820: FILE: arch/ppc64/kernel/eeh.c:791:
+	int token = rtas_token ("ibm,configure-bridge");

ERROR:SPACING: space required after that ',' (ctx:VxV)
#825: FILE: arch/ppc64/kernel/eeh.c:796:
+	rc = rtas_call(token,3,1, NULL,
 	                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#825: FILE: arch/ppc64/kernel/eeh.c:796:
+	rc = rtas_call(token,3,1, NULL,
 	                      ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#826: FILE: arch/ppc64/kernel/eeh.c:797:
+^I               dn->eeh_config_addr,$

WARNING:TYPO_SPELLING: 'buid' may be misspelled - perhaps 'build'?
#827: FILE: arch/ppc64/kernel/eeh.c:798:
+	               BUID_HI(dn->phb->buid),
 	                                ^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#827: FILE: arch/ppc64/kernel/eeh.c:798:
+^I               BUID_HI(dn->phb->buid),$

WARNING:TYPO_SPELLING: 'buid' may be misspelled - perhaps 'build'?
#828: FILE: arch/ppc64/kernel/eeh.c:799:
+	               BUID_LO(dn->phb->buid));
 	                                ^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#828: FILE: arch/ppc64/kernel/eeh.c:799:
+^I               BUID_LO(dn->phb->buid));$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#830: FILE: arch/ppc64/kernel/eeh.c:801:
+		printk (KERN_WARNING "EEH: Unable to configure device bridge (%d) for %s\n",

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#830: FILE: arch/ppc64/kernel/eeh.c:801:
+		printk (KERN_WARNING "EEH: Unable to configure device bridge (%d) for %s\n",

ERROR:CODE_INDENT: code indent should use tabs where possible
#831: FILE: arch/ppc64/kernel/eeh.c:802:
+^I^I        rc, dn->full_name);$

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#835: FILE: arch/ppc64/kernel/eeh.c:806:
+EXPORT_SYMBOL(rtas_configure_bridge);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#855: FILE: arch/ppc64/kernel/eeh.c:826:
+static inline void __restore_bars (struct device_node *dn)

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#859: FILE: arch/ppc64/kernel/eeh.c:830:
+	if (NULL==dn->phb) return;
 	        ^

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#859: FILE: arch/ppc64/kernel/eeh.c:830:
+	if (NULL==dn->phb) return;

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#859: FILE: arch/ppc64/kernel/eeh.c:830:
+	if (NULL==dn->phb) return;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#860: FILE: arch/ppc64/kernel/eeh.c:831:
+	for (i=4; i<10; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#860: FILE: arch/ppc64/kernel/eeh.c:831:
+	for (i=4; i<10; i++) {
 	           ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#860: FILE: arch/ppc64/kernel/eeh.c:831:
+	for (i=4; i<10; i++) {
+		rtas_write_config(dn, i*4, 4, dn->config_space[i]);
+	}

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#861: FILE: arch/ppc64/kernel/eeh.c:832:
+		rtas_write_config(dn, i*4, 4, dn->config_space[i]);
 		                       ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#865: FILE: arch/ppc64/kernel/eeh.c:836:
+	rtas_write_config(dn, 12*4, 4, dn->config_space[12]);
 	                        ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#867: FILE: arch/ppc64/kernel/eeh.c:838:
+#define BYTE_SWAP(OFF) (8*((OFF)/4)+3-(OFF))
                          ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#867: FILE: arch/ppc64/kernel/eeh.c:838:
+#define BYTE_SWAP(OFF) (8*((OFF)/4)+3-(OFF))
                                 ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#867: FILE: arch/ppc64/kernel/eeh.c:838:
+#define BYTE_SWAP(OFF) (8*((OFF)/4)+3-(OFF))
                                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#867: FILE: arch/ppc64/kernel/eeh.c:838:
+#define BYTE_SWAP(OFF) (8*((OFF)/4)+3-(OFF))
                                      ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'OFF' - possible side-effects?
#867: FILE: arch/ppc64/kernel/eeh.c:838:
+#define BYTE_SWAP(OFF) (8*((OFF)/4)+3-(OFF))

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#870: FILE: arch/ppc64/kernel/eeh.c:841:
+	rtas_write_config (dn, PCI_CACHE_LINE_SIZE, 1,

ERROR:CODE_INDENT: code indent should use tabs where possible
#871: FILE: arch/ppc64/kernel/eeh.c:842:
+^I            SAVED_BYTE(PCI_CACHE_LINE_SIZE));$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#871: FILE: arch/ppc64/kernel/eeh.c:842:
+	rtas_write_config (dn, PCI_CACHE_LINE_SIZE, 1,
+	            SAVED_BYTE(PCI_CACHE_LINE_SIZE));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#873: FILE: arch/ppc64/kernel/eeh.c:844:
+	rtas_write_config (dn, PCI_LATENCY_TIMER, 1,

ERROR:CODE_INDENT: code indent should use tabs where possible
#874: FILE: arch/ppc64/kernel/eeh.c:845:
+^I            SAVED_BYTE(PCI_LATENCY_TIMER));$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#874: FILE: arch/ppc64/kernel/eeh.c:845:
+	rtas_write_config (dn, PCI_LATENCY_TIMER, 1,
+	            SAVED_BYTE(PCI_LATENCY_TIMER));

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#877: FILE: arch/ppc64/kernel/eeh.c:848:
+	rtas_write_config(dn, 15*4, 4, dn->config_space[15]);
 	                        ^

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#885: FILE: arch/ppc64/kernel/eeh.c:856:
+	if (! dn->eeh_is_bridge)
 	    ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#886: FILE: arch/ppc64/kernel/eeh.c:857:
+		__restore_bars (dn);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#889: FILE: arch/ppc64/kernel/eeh.c:860:
+		eeh_restore_bars (dn->child);

WARNING:LINE_SPACING: Missing a blank line after declarations
#895: FILE: arch/ppc64/kernel/eeh.c:866:
+	struct device_node *dn = pci_device_to_OF_node(dev);
+	eeh_restore_bars (dn);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#895: FILE: arch/ppc64/kernel/eeh.c:866:
+	eeh_restore_bars (dn);

WARNING:TYPO_SPELLING: 'buid' may be misspelled - perhaps 'build'?
#932: FILE: arch/ppc64/kernel/eeh.c:1043:
+		printk(KERN_WARNING "EEH: Expected buid but found none for %s\n",
 		                                   ^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#932: FILE: arch/ppc64/kernel/eeh.c:1043:
+		printk(KERN_WARNING "EEH: Expected buid but found none for %s\n",

ERROR:CODE_INDENT: code indent should use tabs where possible
#933: FILE: arch/ppc64/kernel/eeh.c:1044:
+^I^I        dn->full_name);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#933: FILE: arch/ppc64/kernel/eeh.c:1044:
+		printk(KERN_WARNING "EEH: Expected buid but found none for %s\n",
+		        dn->full_name);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#987: FILE: arch/ppc64/kernel/eeh.c:1132:
+		seq_printf(m,
+				"no device=%ld\n"

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000172041.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 47 errors, 85 warnings, 32 checks, 931 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000172041.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
