WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#34: 
diff -urpN --exclude TAGS -X /home/rusty/devel/kernel/kernel-patches/current-dontdiff --minimal .17232-linux-ppc64-2.5/arch/ppc64/kernel/prom.c .17232-linux-ppc64-2.5.updated/arch/ppc64/kernel/prom.c

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#73: FILE: arch/ppc64/kernel/prom.c:294:
+	if ((node = *nodep) != 0

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#74: FILE: arch/ppc64/kernel/prom.c:295:
+	if ((node = *nodep) != 0
+	    && (*nodep = call_prom(RELOC("child"), 1, 1, node)) != 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#76: FILE: arch/ppc64/kernel/prom.c:297:
+	if ((*nodep = call_prom(RELOC("peer"), 1, 1, node)) != 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#79: FILE: arch/ppc64/kernel/prom.c:300:
+		if ((node = call_prom(RELOC("parent"), 1, 1, node)) == 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#81: FILE: arch/ppc64/kernel/prom.c:302:
+		if ((*nodep = call_prom(RELOC("peer"), 1, 1, node)) != 0)

CHECK:SPACING: No space is necessary after a cast
#152: FILE: arch/ppc64/kernel/prom.c:1456:
+	np = (struct device_node *) mem_start;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#178: FILE: arch/ppc64/kernel/prom.c:1476:
+		pp = (struct property *) mem_start;

CHECK:SPACING: No space is necessary after a cast
#179: FILE: arch/ppc64/kernel/prom.c:1477:
+		namep = (char *) (pp + 1);

CHECK:SPACING: No space is necessary after a cast
#181: FILE: arch/ppc64/kernel/prom.c:1479:
+		if ((long) call_prom(RELOC("nextprop"), 3, 1, node, prev_name,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#182: FILE: arch/ppc64/kernel/prom.c:1480:
+		if ((long) call_prom(RELOC("nextprop"), 3, 1, node, prev_name,
+				    namep) <= 0)

CHECK:SPACING: No space is necessary after a cast
#186: FILE: arch/ppc64/kernel/prom.c:1484:
+		valp = (unsigned char *) mem_start;

ERROR:CODE_INDENT: code indent should use tabs where possible
#205: FILE: arch/ppc64/kernel/prom.c:1498:
+                            path, sizeof(path)-1) > 0)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#205: FILE: arch/ppc64/kernel/prom.c:1498:
+			if (call_prom(RELOC("package-to-path"), 3, 1, node,
+                            path, sizeof(path)-1) > 0)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#205: FILE: arch/ppc64/kernel/prom.c:1498:
+                            path, sizeof(path)-1) > 0)$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#205: FILE: arch/ppc64/kernel/prom.c:1498:
+                            path, sizeof(path)-1) > 0)
                                               ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#232: FILE: arch/ppc64/kernel/prom.c:1513:
+        if (np->node) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#232: FILE: arch/ppc64/kernel/prom.c:1513:
+        if (np->node) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#237: FILE: arch/ppc64/kernel/prom.c:1517:
+                /* First see if "ibm,phandle" exists and use its value */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#238: FILE: arch/ppc64/kernel/prom.c:1518:
+                len = (int)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#238: FILE: arch/ppc64/kernel/prom.c:1518:
+                len = (int)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#239: FILE: arch/ppc64/kernel/prom.c:1519:
+                        call_prom(RELOC("getprop"), 4, 1, node, RELOC("ibm,phandle"),$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#239: FILE: arch/ppc64/kernel/prom.c:1519:
+                        call_prom(RELOC("getprop"), 4, 1, node, RELOC("ibm,phandle"),$

ERROR:CODE_INDENT: code indent should use tabs where possible
#240: FILE: arch/ppc64/kernel/prom.c:1520:
+                                  &ibm_phandle, sizeof(ibm_phandle));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#240: FILE: arch/ppc64/kernel/prom.c:1520:
+                                  &ibm_phandle, sizeof(ibm_phandle));$

ERROR:CODE_INDENT: code indent should use tabs where possible
#241: FILE: arch/ppc64/kernel/prom.c:1521:
+                if (len < 0) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#241: FILE: arch/ppc64/kernel/prom.c:1521:
+                if (len < 0) {$

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#241: FILE: arch/ppc64/kernel/prom.c:1521:
+                if (len < 0) {
[...]
+                } else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#242: FILE: arch/ppc64/kernel/prom.c:1522:
+                        np->linux_phandle = np->node;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#242: FILE: arch/ppc64/kernel/prom.c:1522:
+                        np->linux_phandle = np->node;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#243: FILE: arch/ppc64/kernel/prom.c:1523:
+                } else {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#243: FILE: arch/ppc64/kernel/prom.c:1523:
+                } else {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#244: FILE: arch/ppc64/kernel/prom.c:1524:
+                        np->linux_phandle = ibm_phandle;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#244: FILE: arch/ppc64/kernel/prom.c:1524:
+                        np->linux_phandle = ibm_phandle;$

CHECK:SPACING: No space is necessary after a cast
#269: FILE: arch/ppc64/kernel/prom.c:1531:
+	l = (long) call_prom(RELOC("package-to-path"), 3, 1, node,

CHECK:SPACING: No space is necessary after a cast
#270: FILE: arch/ppc64/kernel/prom.c:1532:
+			    (char *) mem_start, mem_end - mem_start);

CHECK:SPACING: No space is necessary after a cast
#272: FILE: arch/ppc64/kernel/prom.c:1534:
+		np->full_name = PTRUNRELOC((char *) mem_start);

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#308: FILE: arch/ppc64/kernel/prom.c:1560:
+	unsigned long mem_end = mem_start + (8<<20);
 	                                      ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#312: FILE: arch/ppc64/kernel/prom.c:1563:
+	if (root == (phandle)0) {
+		prom_panic(RELOC("couldn't get device tree root\n"));
+	}

ERROR:SPACING: space prohibited after that open parenthesis '('
#340: FILE: arch/ppc64/kernel/prom.c:1579:
+	if ( bi_recs == NULL || bi_recs->tag != BI_FIRST )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#340: FILE: arch/ppc64/kernel/prom.c:1579:
+	if ( bi_recs == NULL || bi_recs->tag != BI_FIRST )

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bi_recs"
#340: FILE: arch/ppc64/kernel/prom.c:1579:
+	if ( bi_recs == NULL || bi_recs->tag != BI_FIRST )

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:SPACING: space prohibited after that open parenthesis '('
#348: FILE: arch/ppc64/kernel/prom.c:1583:
+	if ( last == NULL || last->tag != BI_LAST )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#348: FILE: arch/ppc64/kernel/prom.c:1583:
+	if ( last == NULL || last->tag != BI_LAST )

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!last"
#348: FILE: arch/ppc64/kernel/prom.c:1583:
+	if ( last == NULL || last->tag != BI_LAST )

ERROR:SPACING: space prohibited after that open parenthesis '('
#353: FILE: arch/ppc64/kernel/prom.c:1587:
+	if ( first == NULL || first != bi_recs )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#353: FILE: arch/ppc64/kernel/prom.c:1587:
+	if ( first == NULL || first != bi_recs )

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!first"
#353: FILE: arch/ppc64/kernel/prom.c:1587:
+	if ( first == NULL || first != bi_recs )

ERROR:SPACING: space prohibited after that open parenthesis '('
#373: FILE: arch/ppc64/kernel/prom.c:1600:
+	if ( _prom->bi_recs != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "_prom->bi_recs"
#373: FILE: arch/ppc64/kernel/prom.c:1600:
+	if ( _prom->bi_recs != NULL) {

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#379: FILE: arch/ppc64/kernel/prom.c:1602:
+		for ( rec=_prom->bi_recs;
 		         ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#379: FILE: arch/ppc64/kernel/prom.c:1602:
+		for ( rec=_prom->bi_recs;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#381: FILE: arch/ppc64/kernel/prom.c:1604:
+		      rec=bi_rec_next(rec) ) {
 		         ^

ERROR:SPACING: space prohibited before that close parenthesis ')'
#381: FILE: arch/ppc64/kernel/prom.c:1604:
+		      rec=bi_rec_next(rec) ) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#391: FILE: arch/ppc64/kernel/prom.c:1614:
+^I ^I * is enabled, so convert this physical address into a$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#391: FILE: arch/ppc64/kernel/prom.c:1614:
+^I ^I * is enabled, so convert this physical address into a$

ERROR:CODE_INDENT: code indent should use tabs where possible
#392: FILE: arch/ppc64/kernel/prom.c:1615:
+^I ^I * virtual address.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#392: FILE: arch/ppc64/kernel/prom.c:1615:
+^I ^I * virtual address.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#393: FILE: arch/ppc64/kernel/prom.c:1616:
+^I ^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#393: FILE: arch/ppc64/kernel/prom.c:1616:
+^I ^I */$

CHECK:CAMELCASE: Avoid CamelCase: <_xPaca>
#436: FILE: arch/ppc64/kernel/prom.c:1778:
+	struct paca_struct *_xPaca = PTRRELOC(&paca[0]);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#452: FILE: arch/ppc64/kernel/prom.c:1782:
+	 * caches on yet */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:SPACING: space prohibited after that open parenthesis '('
#515: FILE: arch/ppc64/kernel/prom.c:1797:
+	if ( _prom->bi_recs != NULL )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#515: FILE: arch/ppc64/kernel/prom.c:1797:
+	if ( _prom->bi_recs != NULL )

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "_prom->bi_recs"
#515: FILE: arch/ppc64/kernel/prom.c:1797:
+	if ( _prom->bi_recs != NULL )

ERROR:TRAILING_WHITESPACE: trailing whitespace
#564: FILE: arch/ppc64/kernel/prom.c:1809:
+      ^Imem = RELOC(klimit) - offset; $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#564: FILE: arch/ppc64/kernel/prom.c:1809:
+      ^Imem = RELOC(klimit) - offset; $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#564: FILE: arch/ppc64/kernel/prom.c:1809:
+      ^Imem = RELOC(klimit) - offset; $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#564: FILE: arch/ppc64/kernel/prom.c:1809:
+      ^Imem = RELOC(klimit) - offset; $

CHECK:SPACING: No space is necessary after a cast
#571: FILE: arch/ppc64/kernel/prom.c:1812:
+	p = (char *) mem;

ERROR:CODE_INDENT: code indent should use tabs where possible
#595: FILE: arch/ppc64/kernel/prom.c:1825:
+        if ((long)call_prom(RELOC("getprop"), 4, 1, _prom->chosen,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#595: FILE: arch/ppc64/kernel/prom.c:1825:
+        if ((long)call_prom(RELOC("getprop"), 4, 1, _prom->chosen,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#598: FILE: arch/ppc64/kernel/prom.c:1828:
+                prom_panic(RELOC("cannot find boot cpu"));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#598: FILE: arch/ppc64/kernel/prom.c:1828:
+                prom_panic(RELOC("cannot find boot cpu"));$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#610: FILE: arch/ppc64/kernel/prom.c:1833:
+	call_prom(RELOC("getprop"), 4, 1,
+		cpu_pkg, RELOC("reg"),

CHECK:CAMELCASE: Avoid CamelCase: <xHwProcNum>
#613: FILE: arch/ppc64/kernel/prom.c:1836:
+	_xPaca[0].xHwProcNum = _prom->cpu;

ERROR:CODE_INDENT: code indent should use tabs where possible
#618: FILE: arch/ppc64/kernel/prom.c:1841:
+  ^Iprom_print(RELOC("Booting CPU hw index = 0x"));$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#618: FILE: arch/ppc64/kernel/prom.c:1841:
+  ^Iprom_print(RELOC("Booting CPU hw index = 0x"));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#618: FILE: arch/ppc64/kernel/prom.c:1841:
+  ^Iprom_print(RELOC("Booting CPU hw index = 0x"));$

ERROR:CODE_INDENT: code indent should use tabs where possible
#619: FILE: arch/ppc64/kernel/prom.c:1842:
+  ^Iprom_print_hex(_prom->cpu);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#619: FILE: arch/ppc64/kernel/prom.c:1842:
+  ^Iprom_print_hex(_prom->cpu);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#619: FILE: arch/ppc64/kernel/prom.c:1842:
+  ^Iprom_print_hex(_prom->cpu);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#620: FILE: arch/ppc64/kernel/prom.c:1843:
+  ^Iprom_print_nl();$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#620: FILE: arch/ppc64/kernel/prom.c:1843:
+  ^Iprom_print_nl();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#620: FILE: arch/ppc64/kernel/prom.c:1843:
+  ^Iprom_print_nl();$

CHECK:SPACING: No space is necessary after a cast
#624: FILE: arch/ppc64/kernel/prom.c:1847:
+	p = (char *) mem;

CHECK:SPACING: No space is necessary after a cast
#625: FILE: arch/ppc64/kernel/prom.c:1848:
+	l = (long) call_prom(RELOC("getprop"), 4, 1, _prom->chosen,

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#626: FILE: arch/ppc64/kernel/prom.c:1849:
+			    RELOC("bootpath"), p, 1<<20);
 			                           ^

CHECK:SPACING: No space is necessary after a cast
#631: FILE: arch/ppc64/kernel/prom.c:1854:
+		d = (char *) mem;

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#633: FILE: arch/ppc64/kernel/prom.c:1856:
+		call_prom(RELOC("canon"), 3, 1, p, d, 1<<20);
 		                                       ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#646: FILE: arch/ppc64/kernel/prom.c:1863:
+^I^Icall_prom(RELOC("getprop"), 4, 1, _prom->chosen, $

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "p"
#648: FILE: arch/ppc64/kernel/prom.c:1865:
+		if (p != NULL && p[0] != 0)

WARNING:STRLCPY: Prefer strscpy over strlcpy - see: https://lore.kernel.org/r/CAHk-=wgfRnXz0W3D37d01q3JFkr_i_uTL=V6A6G1oUZcprmknw@mail.gmail.com/
#649: FILE: arch/ppc64/kernel/prom.c:1866:
+			strlcpy(RELOC(cmd_line), p, sizeof(cmd_line));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#679: FILE: arch/ppc64/kernel/prom.c:1879:
+        $

ERROR:CODE_INDENT: code indent should use tabs where possible
#679: FILE: arch/ppc64/kernel/prom.c:1879:
+        $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#679: FILE: arch/ppc64/kernel/prom.c:1879:
+        $

ERROR:CODE_INDENT: code indent should use tabs where possible
#680: FILE: arch/ppc64/kernel/prom.c:1880:
+        /* Initialize some system info into the Naca early... */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#681: FILE: arch/ppc64/kernel/prom.c:1881:
+        mem = prom_initialize_naca(mem);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#681: FILE: arch/ppc64/kernel/prom.c:1881:
+        mem = prom_initialize_naca(mem);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#685: FILE: arch/ppc64/kernel/prom.c:1884:
+^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#686: FILE: arch/ppc64/kernel/prom.c:1885:
+        /* If we are on an SMP machine, then we *MUST* do the$

ERROR:CODE_INDENT: code indent should use tabs where possible
#687: FILE: arch/ppc64/kernel/prom.c:1886:
+         * following, regardless of whether we have an SMP$

ERROR:CODE_INDENT: code indent should use tabs where possible
#688: FILE: arch/ppc64/kernel/prom.c:1887:
+         * kernel or not.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#689: FILE: arch/ppc64/kernel/prom.c:1888:
+         */$

ERROR:SPACING: space required before the open parenthesis '('
#731: FILE: arch/ppc64/kernel/prom.c:1909:
+	if(_prom->disp_node) {

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'prom_init', this function's name, in a string
#765: FILE: arch/ppc64/kernel/prom.c:1919:
+	prom_print(RELOC("returning from prom_init\n"));

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#777: FILE: arch/ppc64/kernel/prom.c:1927:
+static struct device_node * __devinit

CHECK:LINE_SPACING: Please don't use multiple blank lines
#788: FILE: arch/ppc64/kernel/prom.c:1938:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#835: FILE: arch/ppc64/kernel/prom.c:2055:
+static int __devinit

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "icp"
#844: FILE: arch/ppc64/kernel/prom.c:2064:
+		if (icp != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "get_property"
#846: FILE: arch/ppc64/kernel/prom.c:2066:
+		if (get_property(p, "interrupt-controller", NULL) != NULL

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#847: FILE: arch/ppc64/kernel/prom.c:2067:
+		if (get_property(p, "interrupt-controller", NULL) != NULL
+		    || get_property(p, "interrupt-map", NULL) != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "get_property"
#847: FILE: arch/ppc64/kernel/prom.c:2067:
+		    || get_property(p, "interrupt-map", NULL) != NULL) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#848: FILE: arch/ppc64/kernel/prom.c:2068:
+			printk("oops, node %s doesn't have #interrupt-cells\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#854: FILE: arch/ppc64/kernel/prom.c:2074:
+	printk("prom_n_intr_cells failed for %s\n", np->full_name);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'prom_n_intr_cells', this function's name, in a string
#854: FILE: arch/ppc64/kernel/prom.c:2074:
+	printk("prom_n_intr_cells failed for %s\n", np->full_name);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ifunc"
#877: FILE: arch/ppc64/kernel/prom.c:2142:
+	if (ifunc != NULL)

CHECK:SPACING: No space is necessary after a cast
#883: FILE: arch/ppc64/kernel/prom.c:2148:
+	ip = (int *) get_property(np, "#address-cells", 0);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ip"
#884: FILE: arch/ppc64/kernel/prom.c:2149:
+	if (ip != NULL)

CHECK:SPACING: No space is necessary after a cast
#886: FILE: arch/ppc64/kernel/prom.c:2151:
+	ip = (int *) get_property(np, "#size-cells", 0);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ip"
#887: FILE: arch/ppc64/kernel/prom.c:2152:
+	if (ip != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!np->parent"
#896: FILE: arch/ppc64/kernel/prom.c:2161:
+	if (!strcmp(np->name, "device-tree") || np->parent == NULL)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#911: FILE: arch/ppc64/kernel/prom.c:2176:
+	else if (!((ifunc == interpret_dbdma_props
+		    || ifunc == interpret_macio_props)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#912: FILE: arch/ppc64/kernel/prom.c:2177:
+		    || ifunc == interpret_macio_props)
+		   && (!strcmp(np->type, "escc")

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#913: FILE: arch/ppc64/kernel/prom.c:2178:
+		   && (!strcmp(np->type, "escc")
+		       || !strcmp(np->type, "media-bay"))))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "child"
#916: FILE: arch/ppc64/kernel/prom.c:2181:
+	for (child = np->child; child != NULL; child = child->sibling)

CHECK:SPACING: No space is necessary after a cast
#937: FILE: arch/ppc64/kernel/prom.c:2202:
+	dev_tree_size = mem - (unsigned long) allnodes;

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#940: FILE: arch/ppc64/kernel/prom.c:2205:
+	lmb_reserve(__pa(klimit), mem-klimit);
 	                             ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#965: FILE: arch/ppc64/kernel/prom.c:2774:
+		struct property *next = prop->next;
+		kfree(prop->name);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1119: FILE: arch/ppc64/kernel/prom.c:2887:
 
+

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*np)...) over kmalloc(sizeof(struct device_node)...)
#1143: FILE: arch/ppc64/kernel/prom.c:3043:
+	np = kmalloc(sizeof(struct device_node), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1165: FILE: arch/ppc64/kernel/prom.c:3065:
+	if (0 != (err = of_finish_dynamic_node(np))) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1196: FILE: arch/ppc64/kernel/prom.c:3096:
+	if ((child = of_get_next_child(np, NULL))) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#1204: FILE: arch/ppc64/kernel/prom.c:3104:
+	if (allnodes == np)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1206: FILE: arch/ppc64/kernel/prom.c:3106:
+	else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1208: FILE: arch/ppc64/kernel/prom.c:3108:
+		struct device_node *prev;
+		for (prev = allnodes;

CHECK:BRACES: braces {} should be used on all arms of this statement
#1215: FILE: arch/ppc64/kernel/prom.c:3115:
+	if (parent->child == np)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1217: FILE: arch/ppc64/kernel/prom.c:3117:
+	else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1219: FILE: arch/ppc64/kernel/prom.c:3119:
+		struct device_node *prevsib;
+		for (prevsib = np->parent->child;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000288494.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 50 errors, 38 warnings, 51 checks, 1185 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000288494.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
