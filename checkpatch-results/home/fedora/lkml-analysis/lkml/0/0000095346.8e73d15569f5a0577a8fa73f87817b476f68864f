WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#149: FILE: include/asm-i386/system.h:462:
+#define local_irq_save(x) do { typecheck(unsigned long,x); local_save_flags(x); local_irq_disable(); } while (0)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:SPACING: space required after that ',' (ctx:VxV)
#149: FILE: include/asm-i386/system.h:462:
+#define local_irq_save(x) do { typecheck(unsigned long,x); local_save_flags(x); local_irq_disable(); } while (0)
                                                       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#168: FILE: include/asm-i386/mach-vmi/mach_system.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#185: FILE: include/asm-i386/mach-vmi/mach_system.h:18:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#186: FILE: include/asm-i386/mach-vmi/mach_system.h:19:
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#192: FILE: include/asm-i386/mach-vmi/mach_system.h:25:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#200: FILE: include/asm-i386/mach-vmi/mach_system.h:33:
+	vmi_wrap_call(

CHECK:CAMELCASE: Avoid CamelCase: <SetCR0>
#201: FILE: include/asm-i386/mach-vmi/mach_system.h:34:
+		SetCR0, "mov %0, %%cr0",

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#209: FILE: include/asm-i386/mach-vmi/mach_system.h:42:
+	vmi_wrap_call(

CHECK:CAMELCASE: Avoid CamelCase: <SetCR2>
#210: FILE: include/asm-i386/mach-vmi/mach_system.h:43:
+		SetCR2, "mov %0, %%cr2",

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#218: FILE: include/asm-i386/mach-vmi/mach_system.h:51:
+	vmi_wrap_call(

CHECK:CAMELCASE: Avoid CamelCase: <SetCR3>
#219: FILE: include/asm-i386/mach-vmi/mach_system.h:52:
+		SetCR3, "mov %0, %%cr3",

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#227: FILE: include/asm-i386/mach-vmi/mach_system.h:60:
+	vmi_wrap_call(

CHECK:CAMELCASE: Avoid CamelCase: <SetCR4>
#228: FILE: include/asm-i386/mach-vmi/mach_system.h:61:
+		SetCR4, "mov %0, %%cr4",

WARNING:LINE_SPACING: Missing a blank line after declarations
#237: FILE: include/asm-i386/mach-vmi/mach_system.h:70:
+	u32 ret;
+	vmi_wrap_call(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#237: FILE: include/asm-i386/mach-vmi/mach_system.h:70:
+	vmi_wrap_call(

CHECK:CAMELCASE: Avoid CamelCase: <GetCR0>
#238: FILE: include/asm-i386/mach-vmi/mach_system.h:71:
+		GetCR0, "mov %%cr0, %%eax",

WARNING:LINE_SPACING: Missing a blank line after declarations
#248: FILE: include/asm-i386/mach-vmi/mach_system.h:81:
+	u32 ret;
+	vmi_wrap_call(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#248: FILE: include/asm-i386/mach-vmi/mach_system.h:81:
+	vmi_wrap_call(

CHECK:CAMELCASE: Avoid CamelCase: <GetCR2>
#249: FILE: include/asm-i386/mach-vmi/mach_system.h:82:
+		GetCR2, "mov %%cr2, %%eax",

WARNING:LINE_SPACING: Missing a blank line after declarations
#259: FILE: include/asm-i386/mach-vmi/mach_system.h:92:
+	u32 ret;
+	vmi_wrap_call(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#259: FILE: include/asm-i386/mach-vmi/mach_system.h:92:
+	vmi_wrap_call(

CHECK:CAMELCASE: Avoid CamelCase: <GetCR3>
#260: FILE: include/asm-i386/mach-vmi/mach_system.h:93:
+		GetCR3, "mov %%cr3, %%eax",

WARNING:LINE_SPACING: Missing a blank line after declarations
#270: FILE: include/asm-i386/mach-vmi/mach_system.h:103:
+	u32 ret;
+	vmi_wrap_call(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#270: FILE: include/asm-i386/mach-vmi/mach_system.h:103:
+	vmi_wrap_call(

CHECK:CAMELCASE: Avoid CamelCase: <GetCR4>
#271: FILE: include/asm-i386/mach-vmi/mach_system.h:104:
+		GetCR4, "mov %%cr4, %%eax",

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#283: FILE: include/asm-i386/mach-vmi/mach_system.h:116:
+	vmi_wrap_call(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#292: FILE: include/asm-i386/mach-vmi/mach_system.h:125:
+	vmi_wrap_call(

ERROR:TRAILING_WHITESPACE: trailing whitespace
#299: FILE: include/asm-i386/mach-vmi/mach_system.h:132:
+/* $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#308: FILE: include/asm-i386/mach-vmi/mach_system.h:141:
+	vmi_wrap_call(

CHECK:CAMELCASE: Avoid CamelCase: <DisableInterrupts>
#309: FILE: include/asm-i386/mach-vmi/mach_system.h:142:
+		DisableInterrupts, "cli",

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#317: FILE: include/asm-i386/mach-vmi/mach_system.h:150:
+	vmi_wrap_call(

CHECK:CAMELCASE: Avoid CamelCase: <EnableInterrupts>
#318: FILE: include/asm-i386/mach-vmi/mach_system.h:151:
+		EnableInterrupts, "sti",

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#326: FILE: include/asm-i386/mach-vmi/mach_system.h:159:
+	vmi_wrap_call(

CHECK:CAMELCASE: Avoid CamelCase: <SetInterruptMask>
#327: FILE: include/asm-i386/mach-vmi/mach_system.h:160:
+		SetInterruptMask, "pushl %0; popfl",

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#329: FILE: include/asm-i386/mach-vmi/mach_system.h:162:
+		1, VMI_IREG1 (flags),

WARNING:LINE_SPACING: Missing a blank line after declarations
#336: FILE: include/asm-i386/mach-vmi/mach_system.h:169:
+	unsigned long ret;
+	vmi_wrap_call(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#336: FILE: include/asm-i386/mach-vmi/mach_system.h:169:
+	vmi_wrap_call(

CHECK:CAMELCASE: Avoid CamelCase: <GetInterruptMask>
#337: FILE: include/asm-i386/mach-vmi/mach_system.h:170:
+		GetInterruptMask, "pushfl; popl %%eax",

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#338: FILE: include/asm-i386/mach-vmi/mach_system.h:171:
+		VMI_OREG1 (ret),

ERROR:SPACING: space required after that ',' (ctx:VxV)
#344: FILE: include/asm-i386/mach-vmi/mach_system.h:177:
+#define local_save_flags(x)     do { typecheck(unsigned long,x); (x) = vmi_get_flags(); } while (0)
                                                             ^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#348: FILE: include/asm-i386/mach-vmi/mach_system.h:181:
+	vmi_wrap_call(

CHECK:CAMELCASE: Avoid CamelCase: <Reboot>
#349: FILE: include/asm-i386/mach-vmi/mach_system.h:182:
+		Reboot, "",

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#357: FILE: include/asm-i386/mach-vmi/mach_system.h:190:
+	vmi_wrap_call(

CHECK:CAMELCASE: Avoid CamelCase: <Halt>
#358: FILE: include/asm-i386/mach-vmi/mach_system.h:191:
+		Halt, "sti; hlt",

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#367: FILE: include/asm-i386/mach-vmi/mach_system.h:200:
+	vmi_wrap_call(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#376: FILE: include/asm-i386/mach-vmi/mach_system.h:209:
+	vmi_wrap_call(

CHECK:CAMELCASE: Avoid CamelCase: <Shutdown>
#377: FILE: include/asm-i386/mach-vmi/mach_system.h:210:
+		Shutdown, "cli; hlt",

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#389: FILE: include/asm-i386/mach-default/mach_system.h:1:
+#ifndef _MACH_SYSTEM_H

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#392: FILE: include/asm-i386/mach-default/mach_system.h:4:
+#define clts() __asm__ __volatile__ ("clts")

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#397: FILE: include/asm-i386/mach-default/mach_system.h:9:
+		:"=r" (__dummy)); \
 		^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#401: FILE: include/asm-i386/mach-default/mach_system.h:13:
+#define write_cr0(x) \
+	__asm__ __volatile__("movl %0,%%cr0": :"r" (x));

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#401: FILE: include/asm-i386/mach-default/mach_system.h:13:
+#define write_cr0(x) \
+	__asm__ __volatile__("movl %0,%%cr0": :"r" (x));

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#402: FILE: include/asm-i386/mach-default/mach_system.h:14:
+	__asm__ __volatile__("movl %0,%%cr0": :"r" (x));
 	                                    ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#402: FILE: include/asm-i386/mach-default/mach_system.h:14:
+	__asm__ __volatile__("movl %0,%%cr0": :"r" (x));
 	                                      ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#405: FILE: include/asm-i386/mach-default/mach_system.h:17:
+        unsigned int __dummy; \$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#405: FILE: include/asm-i386/mach-default/mach_system.h:17:
+        unsigned int __dummy; \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#406: FILE: include/asm-i386/mach-default/mach_system.h:18:
+        __asm__  __volatile__( \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#406: FILE: include/asm-i386/mach-default/mach_system.h:18:
+        __asm__  __volatile__( \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#407: FILE: include/asm-i386/mach-default/mach_system.h:19:
+                "movl %%cr2,%0\n\t" \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#407: FILE: include/asm-i386/mach-default/mach_system.h:19:
+                "movl %%cr2,%0\n\t" \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#408: FILE: include/asm-i386/mach-default/mach_system.h:20:
+                :"=r" (__dummy)); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#408: FILE: include/asm-i386/mach-default/mach_system.h:20:
+                :"=r" (__dummy)); \$

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#408: FILE: include/asm-i386/mach-default/mach_system.h:20:
+                :"=r" (__dummy)); \
                 ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#409: FILE: include/asm-i386/mach-default/mach_system.h:21:
+        __dummy; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#409: FILE: include/asm-i386/mach-default/mach_system.h:21:
+        __dummy; \$

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#411: FILE: include/asm-i386/mach-default/mach_system.h:23:
+#define write_cr2(x) \
+	__asm__  __volatile__("movl %0,%%cr2": :"r" (x));

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#411: FILE: include/asm-i386/mach-default/mach_system.h:23:
+#define write_cr2(x) \
+	__asm__  __volatile__("movl %0,%%cr2": :"r" (x));

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#412: FILE: include/asm-i386/mach-default/mach_system.h:24:
+	__asm__  __volatile__("movl %0,%%cr2": :"r" (x));
 	                                     ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#412: FILE: include/asm-i386/mach-default/mach_system.h:24:
+	__asm__  __volatile__("movl %0,%%cr2": :"r" (x));
 	                                       ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#415: FILE: include/asm-i386/mach-default/mach_system.h:27:
+        unsigned int __dummy; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#415: FILE: include/asm-i386/mach-default/mach_system.h:27:
+        unsigned int __dummy; \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#416: FILE: include/asm-i386/mach-default/mach_system.h:28:
+        __asm__( \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#416: FILE: include/asm-i386/mach-default/mach_system.h:28:
+        __asm__( \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#417: FILE: include/asm-i386/mach-default/mach_system.h:29:
+                "movl %%cr3,%0\n\t" \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#417: FILE: include/asm-i386/mach-default/mach_system.h:29:
+                "movl %%cr3,%0\n\t" \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#418: FILE: include/asm-i386/mach-default/mach_system.h:30:
+                :"=r" (__dummy)); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#418: FILE: include/asm-i386/mach-default/mach_system.h:30:
+                :"=r" (__dummy)); \$

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#418: FILE: include/asm-i386/mach-default/mach_system.h:30:
+                :"=r" (__dummy)); \
                 ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#419: FILE: include/asm-i386/mach-default/mach_system.h:31:
+        __dummy; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#419: FILE: include/asm-i386/mach-default/mach_system.h:31:
+        __dummy; \$

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#421: FILE: include/asm-i386/mach-default/mach_system.h:33:
+#define write_cr3(x) \
+	__asm__ __volatile__("movl %0,%%cr3": :"r" (x));

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#421: FILE: include/asm-i386/mach-default/mach_system.h:33:
+#define write_cr3(x) \
+	__asm__ __volatile__("movl %0,%%cr3": :"r" (x));

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#422: FILE: include/asm-i386/mach-default/mach_system.h:34:
+	__asm__ __volatile__("movl %0,%%cr3": :"r" (x));
 	                                    ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#422: FILE: include/asm-i386/mach-default/mach_system.h:34:
+	__asm__ __volatile__("movl %0,%%cr3": :"r" (x));
 	                                      ^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#428: FILE: include/asm-i386/mach-default/mach_system.h:40:
+		:"=r" (__dummy)); \
 		^

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#435: FILE: include/asm-i386/mach-default/mach_system.h:47:
+	__asm__("1: movl %%cr4, %0		\n"   \

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#436: FILE: include/asm-i386/mach-default/mach_system.h:48:
+		"2:				\n"   \

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#437: FILE: include/asm-i386/mach-default/mach_system.h:49:
+		".section __ex_table,\"a\"	\n"   \

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#438: FILE: include/asm-i386/mach-default/mach_system.h:50:
+		".long 1b,2b			\n"   \

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#439: FILE: include/asm-i386/mach-default/mach_system.h:51:
+		".previous			\n"   \

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#440: FILE: include/asm-i386/mach-default/mach_system.h:52:
+		: "=r" (__dummy): "0" (0));	      \
 		                ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#444: FILE: include/asm-i386/mach-default/mach_system.h:56:
+#define write_cr4(x) \
+	__asm__ __volatile__("movl %0,%%cr4": :"r" (x));

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#444: FILE: include/asm-i386/mach-default/mach_system.h:56:
+#define write_cr4(x) \
+	__asm__ __volatile__("movl %0,%%cr4": :"r" (x));

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#445: FILE: include/asm-i386/mach-default/mach_system.h:57:
+	__asm__ __volatile__("movl %0,%%cr4": :"r" (x));
 	                                    ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#445: FILE: include/asm-i386/mach-default/mach_system.h:57:
+	__asm__ __volatile__("movl %0,%%cr4": :"r" (x));
 	                                      ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#447: FILE: include/asm-i386/mach-default/mach_system.h:59:
+#define wbinvd() \
+	__asm__ __volatile__ ("wbinvd": : :"memory");

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#447: FILE: include/asm-i386/mach-default/mach_system.h:59:
+#define wbinvd() \
+	__asm__ __volatile__ ("wbinvd": : :"memory");

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#448: FILE: include/asm-i386/mach-default/mach_system.h:60:
+	__asm__ __volatile__ ("wbinvd": : :"memory");
 	                              ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#448: FILE: include/asm-i386/mach-default/mach_system.h:60:
+	__asm__ __volatile__ ("wbinvd": : :"memory");
 	                                  ^

WARNING:LONG_LINE: line length of 143 exceeds 100 columns
#451: FILE: include/asm-i386/mach-default/mach_system.h:63:
+#define local_save_flags(x)     do { typecheck(unsigned long,x); __asm__ __volatile__("pushfl ; popl %0":"=g" (x): /* no input */); } while (0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#451: FILE: include/asm-i386/mach-default/mach_system.h:63:
+#define local_save_flags(x)     do { typecheck(unsigned long,x); __asm__ __volatile__("pushfl ; popl %0":"=g" (x): /* no input */); } while (0)
                                                             ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#451: FILE: include/asm-i386/mach-default/mach_system.h:63:
+#define local_save_flags(x)     do { typecheck(unsigned long,x); __asm__ __volatile__("pushfl ; popl %0":"=g" (x): /* no input */); } while (0)
                                                                                                         ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#451: FILE: include/asm-i386/mach-default/mach_system.h:63:
+#define local_save_flags(x)     do { typecheck(unsigned long,x); __asm__ __volatile__("pushfl ; popl %0":"=g" (x): /* no input */); } while (0)
                                                                                                                  ^

WARNING:LONG_LINE: line length of 159 exceeds 100 columns
#454: FILE: include/asm-i386/mach-default/mach_system.h:66:
+#define local_irq_restore(x)    do { typecheck(unsigned long,x); __asm__ __volatile__("pushl %0 ; popfl": /* no output */ :"g" (x):"memory", "cc"); } while (0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#454: FILE: include/asm-i386/mach-default/mach_system.h:66:
+#define local_irq_restore(x)    do { typecheck(unsigned long,x); __asm__ __volatile__("pushl %0 ; popfl": /* no output */ :"g" (x):"memory", "cc"); } while (0)
                                                             ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#454: FILE: include/asm-i386/mach-default/mach_system.h:66:
+#define local_irq_restore(x)    do { typecheck(unsigned long,x); __asm__ __volatile__("pushl %0 ; popfl": /* no output */ :"g" (x):"memory", "cc"); } while (0)
                                                                                                         ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#454: FILE: include/asm-i386/mach-default/mach_system.h:66:
+#define local_irq_restore(x)    do { typecheck(unsigned long,x); __asm__ __volatile__("pushl %0 ; popfl": /* no output */ :"g" (x):"memory", "cc"); } while (0)
                                                                                                                           ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#454: FILE: include/asm-i386/mach-default/mach_system.h:66:
+#define local_irq_restore(x)    do { typecheck(unsigned long,x); __asm__ __volatile__("pushl %0 ; popfl": /* no output */ :"g" (x):"memory", "cc"); } while (0)
                                                                                                                                   ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#456: FILE: include/asm-i386/mach-default/mach_system.h:68:
+#define local_irq_disable()     __asm__ __volatile__("cli": : :"memory")
                                                           ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#456: FILE: include/asm-i386/mach-default/mach_system.h:68:
+#define local_irq_disable()     __asm__ __volatile__("cli": : :"memory")
                                                               ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#456: FILE: include/asm-i386/mach-default/mach_system.h:68:
+#define local_irq_disable()     __asm__ __volatile__("cli": : :"memory")

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#457: FILE: include/asm-i386/mach-default/mach_system.h:69:
+#define local_irq_enable()      __asm__ __volatile__("sti": : :"memory")
                                                           ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#457: FILE: include/asm-i386/mach-default/mach_system.h:69:
+#define local_irq_enable()      __asm__ __volatile__("sti": : :"memory")
                                                               ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#457: FILE: include/asm-i386/mach-default/mach_system.h:69:
+#define local_irq_enable()      __asm__ __volatile__("sti": : :"memory")

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#460: FILE: include/asm-i386/mach-default/mach_system.h:72:
+#define safe_halt()             __asm__ __volatile__("sti; hlt": : :"memory")
                                                                ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#460: FILE: include/asm-i386/mach-default/mach_system.h:72:
+#define safe_halt()             __asm__ __volatile__("sti; hlt": : :"memory")
                                                                    ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#460: FILE: include/asm-i386/mach-default/mach_system.h:72:
+#define safe_halt()             __asm__ __volatile__("sti; hlt": : :"memory")

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#463: FILE: include/asm-i386/mach-default/mach_system.h:75:
+#define shutdown_halt()		__asm__ __volatile__("hlt": : :"memory")
                        		                          ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#463: FILE: include/asm-i386/mach-default/mach_system.h:75:
+#define shutdown_halt()		__asm__ __volatile__("hlt": : :"memory")
                        		                              ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#463: FILE: include/asm-i386/mach-default/mach_system.h:75:
+#define shutdown_halt()		__asm__ __volatile__("hlt": : :"memory")

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#466: FILE: include/asm-i386/mach-default/mach_system.h:78:
+#define halt()			__asm__ __volatile__("hlt")

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000095346.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 54 errors, 32 warnings, 36 checks, 399 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000095346.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
