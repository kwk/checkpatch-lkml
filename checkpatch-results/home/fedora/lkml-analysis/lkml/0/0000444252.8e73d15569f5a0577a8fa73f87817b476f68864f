ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#45: 
--- a/arch/i386/mm/Makefile	Fri Jul 26 16:37:35 2002

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#52: FILE: arch/i386/mm/Makefile:12:
+obj-y^I := init.o pgtable.o fault.o ioremap.o extable.o pageattr.o $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#79: FILE: arch/i386/mm/init.c:54:
+^I^I$

CHECK:SPACING: No space is necessary after a cast
#81: FILE: arch/i386/mm/init.c:56:
+	pmd_table = (pmd_t *) alloc_bootmem_low_pages(PAGE_SIZE);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#83: FILE: arch/i386/mm/init.c:58:
+^Iif (pmd_table != pmd_offset(pgd, 0)) $

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#84: FILE: arch/i386/mm/init.c:59:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:SPACING: No space is necessary after a cast
#98: FILE: arch/i386/mm/init.c:73:
+	pte_t *page_table = (pte_t *) alloc_bootmem_low_pages(PAGE_SIZE);

WARNING:LINE_SPACING: Missing a blank line after declarations
#99: FILE: arch/i386/mm/init.c:74:
+	pte_t *page_table = (pte_t *) alloc_bootmem_low_pages(PAGE_SIZE);
+	set_pmd(pmd, __pmd(__pa(page_table) | _KERNPG_TABLE));

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#101: FILE: arch/i386/mm/init.c:76:
+^I^IBUG();^I$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#101: FILE: arch/i386/mm/init.c:76:
+		BUG();	

ERROR:TRAILING_WHITESPACE: trailing whitespace
#107: FILE: arch/i386/mm/init.c:82:
+ * This function initializes a certain range of kernel virtual memory $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#113: FILE: arch/i386/mm/init.c:88:
+ * NOTE: The pagetables are allocated contiguous on the physical space $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#114: FILE: arch/i386/mm/init.c:89:
+ * so we can cache the place of the first one and move around without $

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#117: FILE: arch/i386/mm/init.c:92:
+static void __init page_table_range_init (unsigned long start, unsigned long end, pgd_t *pgd_base)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#130: FILE: arch/i386/mm/init.c:105:
+^I^Iif (pgd_none(*pgd)) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#135: FILE: arch/i386/mm/init.c:110:
+^I^I^Iif (pmd_none(*pmd)) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#145: FILE: arch/i386/mm/init.c:120:
+ * This maps the physical memory to kernel virtual address space, a total $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#146: FILE: arch/i386/mm/init.c:121:
+ * of max_low_pfn pages, by creating page tables starting from address $

WARNING:LONG_LINE: line length of 119 exceeds 100 columns
#171: FILE: arch/i386/mm/init.c:146:
+				for (pte_ofs = 0; pte_ofs < PTRS_PER_PTE && pfn < max_low_pfn; pte++, pfn++, pte_ofs++)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:TRAILING_WHITESPACE: trailing whitespace
#175: FILE: arch/i386/mm/init.c:150:
+^I}^I$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#199: FILE: arch/i386/mm/init.c:174:
+		addr = (e820.map[i].addr+PAGE_SIZE-1) >> PAGE_SHIFT;
 		                        ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#199: FILE: arch/i386/mm/init.c:174:
+		addr = (e820.map[i].addr+PAGE_SIZE-1) >> PAGE_SHIFT;
 		                                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#200: FILE: arch/i386/mm/init.c:175:
+		end = (e820.map[i].addr+e820.map[i].size) >> PAGE_SHIFT;
 		                       ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pagenr >= addr'
#201: FILE: arch/i386/mm/init.c:176:
+		if  ((pagenr >= addr) && (pagenr < end))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pagenr < end'
#201: FILE: arch/i386/mm/init.c:176:
+		if  ((pagenr >= addr) && (pagenr < end))

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#258: FILE: arch/i386/mm/init.c:208:
+	page_table_range_init(vaddr, vaddr + PAGE_SIZE*LAST_PKMAP, pgd_base);
 	                                              ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#279: FILE: arch/i386/mm/init.c:213:
+^Ipkmap_page_table = pte;^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#283: FILE: arch/i386/mm/init.c:216:
+void __init set_highmem_pages_init(int bad_ppro) $

WARNING:LINE_SPACING: Missing a blank line after declarations
#294: FILE: arch/i386/mm/init.c:219:
+	int pfn;
+	for (pfn = highstart_pfn; pfn < highend_pfn; pfn++) {

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#333: FILE: arch/i386/mm/init.c:226:
+		if (bad_ppro && page_kills_ppro(pfn))
+		{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#444: FILE: arch/i386/mm/init.c:316:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#448: FILE: arch/i386/mm/init.c:320:
+^I$

CHECK:BRACES: braces {} should be used on all arms of this statement
#449: FILE: arch/i386/mm/init.c:321:
+	if (low < max_dma)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#451: FILE: arch/i386/mm/init.c:323:
+	else {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#458: FILE: arch/i386/mm/init.c:330:
+^Ifree_area_init(zones_size);^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#575: FILE: arch/i386/mm/init.c:482:
+        /*$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:CODE_INDENT: code indent should use tabs where possible
#576: FILE: arch/i386/mm/init.c:483:
+         * PAE pgds must be 16-byte aligned:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#577: FILE: arch/i386/mm/init.c:484:
+         */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#578: FILE: arch/i386/mm/init.c:485:
+        pae_pgd_cachep = kmem_cache_create("pae_pgd", 32, 0,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#578: FILE: arch/i386/mm/init.c:485:
+        pae_pgd_cachep = kmem_cache_create("pae_pgd", 32, 0,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#579: FILE: arch/i386/mm/init.c:486:
+                SLAB_HWCACHE_ALIGN | SLAB_MUST_HWCACHE_ALIGN, NULL, NULL);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#579: FILE: arch/i386/mm/init.c:486:
+        pae_pgd_cachep = kmem_cache_create("pae_pgd", 32, 0,
+                SLAB_HWCACHE_ALIGN | SLAB_MUST_HWCACHE_ALIGN, NULL, NULL);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#579: FILE: arch/i386/mm/init.c:486:
+                SLAB_HWCACHE_ALIGN | SLAB_MUST_HWCACHE_ALIGN, NULL, NULL);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#580: FILE: arch/i386/mm/init.c:487:
+        if (!pae_pgd_cachep)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#580: FILE: arch/i386/mm/init.c:487:
+        if (!pae_pgd_cachep)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#581: FILE: arch/i386/mm/init.c:488:
+                panic("init_pae(): Cannot alloc pae_pgd SLAB cache");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#581: FILE: arch/i386/mm/init.c:488:
+                panic("init_pae(): Cannot alloc pae_pgd SLAB cache");$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#702: FILE: arch/i386/mm/pgtable.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#703: FILE: arch/i386/mm/pgtable.c:2:
+ *  linux/arch/i386/mm/pgtable.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/pgtable.h> instead of <asm/pgtable.h>
#717: FILE: arch/i386/mm/pgtable.c:16:
+#include <asm/pgtable.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#730: FILE: arch/i386/mm/pgtable.c:29:
+	printk("Mem-info:\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#732: FILE: arch/i386/mm/pgtable.c:31:
+	printk("Free swap:       %6dkB\n",nr_swap_pages<<(PAGE_SHIFT-10));

ERROR:SPACING: space required after that ',' (ctx:VxV)
#732: FILE: arch/i386/mm/pgtable.c:31:
+	printk("Free swap:       %6dkB\n",nr_swap_pages<<(PAGE_SHIFT-10));
 	                                 ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#732: FILE: arch/i386/mm/pgtable.c:31:
+	printk("Free swap:       %6dkB\n",nr_swap_pages<<(PAGE_SHIFT-10));
 	                                               ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#732: FILE: arch/i386/mm/pgtable.c:31:
+	printk("Free swap:       %6dkB\n",nr_swap_pages<<(PAGE_SHIFT-10));
 	                                                            ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#736: FILE: arch/i386/mm/pgtable.c:35:
+		if (PageHighMem(mem_map+i))
 		                       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#738: FILE: arch/i386/mm/pgtable.c:37:
+		if (PageReserved(mem_map+i))
 		                        ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#740: FILE: arch/i386/mm/pgtable.c:39:
+		else if (PageSwapCache(mem_map+i))
 		                              ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#742: FILE: arch/i386/mm/pgtable.c:41:
+		else if (page_count(mem_map+i))
 		                           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#743: FILE: arch/i386/mm/pgtable.c:42:
+			shared += page_count(mem_map+i) - 1;
 			                            ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#745: FILE: arch/i386/mm/pgtable.c:44:
+	printk("%d pages of RAM\n", total);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#746: FILE: arch/i386/mm/pgtable.c:45:
+	printk("%d pages of HIGHMEM\n",highmem);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#746: FILE: arch/i386/mm/pgtable.c:45:
+	printk("%d pages of HIGHMEM\n",highmem);
 	                              ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#747: FILE: arch/i386/mm/pgtable.c:46:
+	printk("%d reserved pages\n",reserved);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#747: FILE: arch/i386/mm/pgtable.c:46:
+	printk("%d reserved pages\n",reserved);
 	                            ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#748: FILE: arch/i386/mm/pgtable.c:47:
+	printk("%d pages shared\n",shared);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#748: FILE: arch/i386/mm/pgtable.c:47:
+	printk("%d pages shared\n",shared);
 	                          ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#749: FILE: arch/i386/mm/pgtable.c:48:
+	printk("%d pages swap cached\n",cached);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#749: FILE: arch/i386/mm/pgtable.c:48:
+	printk("%d pages swap cached\n",cached);
 	                               ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#753: FILE: arch/i386/mm/pgtable.c:52:
+ * Associate a virtual page frame with a given physical page frame $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#755: FILE: arch/i386/mm/pgtable.c:54:
+ */ $

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#756: FILE: arch/i386/mm/pgtable.c:55:
+static void set_pte_phys (unsigned long vaddr, unsigned long phys, pgprot_t flags)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#764: FILE: arch/i386/mm/pgtable.c:63:
+		BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#769: FILE: arch/i386/mm/pgtable.c:68:
+		BUG();

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#783: FILE: arch/i386/mm/pgtable.c:82:
+void __set_fixmap (enum fixed_addresses idx, unsigned long phys, pgprot_t flags)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#788: FILE: arch/i386/mm/pgtable.c:87:
+		BUG();

ERROR:TRAILING_WHITESPACE: trailing whitespace
#798: FILE: arch/i386/mm/pgtable.c:97:
+   $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#798: FILE: arch/i386/mm/pgtable.c:97:
+   $

ERROR:CODE_INDENT: code indent should use tabs where possible
#799: FILE: arch/i386/mm/pgtable.c:98:
+   ^Ido {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#799: FILE: arch/i386/mm/pgtable.c:98:
+   ^Ido {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#799: FILE: arch/i386/mm/pgtable.c:98:
+   ^Ido {$

CHECK:SPACING: No space is necessary after a cast
#800: FILE: arch/i386/mm/pgtable.c:99:
+		pte = (pte_t *) __get_free_page(GFP_KERNEL);

CHECK:BRACES: braces {} should be used on all arms of this statement
#801: FILE: arch/i386/mm/pgtable.c:100:
+		if (pte)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#803: FILE: arch/i386/mm/pgtable.c:102:
+		else {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#815: FILE: arch/i386/mm/pgtable.c:114:
+   $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#815: FILE: arch/i386/mm/pgtable.c:114:
+   $

ERROR:CODE_INDENT: code indent should use tabs where possible
#816: FILE: arch/i386/mm/pgtable.c:115:
+   ^Ido {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#816: FILE: arch/i386/mm/pgtable.c:115:
+   ^Ido {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#816: FILE: arch/i386/mm/pgtable.c:115:
+   ^Ido {$

CHECK:BRACES: braces {} should be used on all arms of this statement
#822: FILE: arch/i386/mm/pgtable.c:121:
+		if (pte)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#824: FILE: arch/i386/mm/pgtable.c:123:
+		else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#842: FILE: arch/i386/mm/pgtable.c:141:
+			unsigned long pmd = __get_free_page(GFP_KERNEL);
+			if (!pmd)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#848: FILE: arch/i386/mm/pgtable.c:147:
+		memcpy(pgd + USER_PTRS_PER_PGD,
+			swapper_pg_dir + USER_PTRS_PER_PGD,

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#854: FILE: arch/i386/mm/pgtable.c:153:
+		free_page((unsigned long)__va(pgd_val(pgd[i])-1));
 		                                             ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#864: FILE: arch/i386/mm/pgtable.c:163:
+		free_page((unsigned long)__va(pgd_val(pgd[i])-1));
 		                                             ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#877: FILE: arch/i386/mm/pgtable.c:176:
+		memcpy(pgd + USER_PTRS_PER_PGD,
+			swapper_pg_dir + USER_PTRS_PER_PGD,

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#894: FILE: include/asm-generic/sections.h:1:
+#ifndef _ASM_GENERIC_SECTIONS_H_

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#919: FILE: include/asm-i386/sections.h:1:
+#ifndef _I386_SECTIONS_H

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000444252.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 37 errors, 33 warnings, 28 checks, 744 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000444252.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
