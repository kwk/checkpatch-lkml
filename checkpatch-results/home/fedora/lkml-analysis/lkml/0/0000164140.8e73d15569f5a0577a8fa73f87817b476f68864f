WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#25: 
Also, a potential bugfix.  Also, some CR accessors really should be volatile.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#35: 
#define __flush_tlb_single(addr) \

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:BRACES: braces {} are not necessary for single statement blocks
#118: FILE: arch/i386/kernel/process.c:319:
+	if (current_cpu_data.x86 > 4) {
+		cr4 = read_cr4();
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required before the open parenthesis '('
#133: FILE: arch/i386/kernel/smp.c:579:
+		for(;;) halt();

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#133: FILE: arch/i386/kernel/smp.c:579:
+		for(;;) halt();

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:CODE_INDENT: code indent should use tabs where possible
#224: FILE: arch/i386/mm/fault.c:225:
+        address = read_cr2();$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#224: FILE: arch/i386/mm/fault.c:225:
+        address = read_cr2();$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#307: FILE: include/asm-i386/processor.h:233:
+	unsigned cr4;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#321: FILE: include/asm-i386/processor.h:242:
+	unsigned cr4;

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#397: FILE: include/asm-i386/system.h:116:
+	__asm__ __volatile__("movl %0,%%cr0": :"r" (x));
 	                                    ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#397: FILE: include/asm-i386/system.h:116:
+	__asm__ __volatile__("movl %0,%%cr0": :"r" (x));
 	                                      ^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#403: FILE: include/asm-i386/system.h:122:
+		:"=r" (__dummy)); \
 		^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#406: FILE: include/asm-i386/system.h:125:
+#define write_cr2(x) \
+	__asm__ __volatile__("movl %0,%%cr2": :"r" (x));

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#406: FILE: include/asm-i386/system.h:125:
+#define write_cr2(x) \
+	__asm__ __volatile__("movl %0,%%cr2": :"r" (x));

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#407: FILE: include/asm-i386/system.h:126:
+	__asm__ __volatile__("movl %0,%%cr2": :"r" (x));
 	                                    ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#407: FILE: include/asm-i386/system.h:126:
+	__asm__ __volatile__("movl %0,%%cr2": :"r" (x));
 	                                      ^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#413: FILE: include/asm-i386/system.h:132:
+		:"=r" (__dummy)); \
 		^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#416: FILE: include/asm-i386/system.h:135:
+#define write_cr3(x) \
+	__asm__ __volatile__("movl %0,%%cr3": :"r" (x));

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#416: FILE: include/asm-i386/system.h:135:
+#define write_cr3(x) \
+	__asm__ __volatile__("movl %0,%%cr3": :"r" (x));

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#417: FILE: include/asm-i386/system.h:136:
+	__asm__ __volatile__("movl %0,%%cr3": :"r" (x));
 	                                    ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#417: FILE: include/asm-i386/system.h:136:
+	__asm__ __volatile__("movl %0,%%cr3": :"r" (x));
 	                                      ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#426: FILE: include/asm-i386/system.h:146:
+	__asm__ __volatile__("movl %0,%%cr4": :"r" (x));
 	                                    ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#426: FILE: include/asm-i386/system.h:146:
+	__asm__ __volatile__("movl %0,%%cr4": :"r" (x));
 	                                      ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#435: FILE: include/asm-i386/system.h:471:
+#define halt()			__asm__ __volatile__("hlt": : :"memory")
               			                          ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#435: FILE: include/asm-i386/system.h:471:
+#define halt()			__asm__ __volatile__("hlt": : :"memory")
               			                              ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#435: FILE: include/asm-i386/system.h:471:
+#define halt()			__asm__ __volatile__("hlt": : :"memory")

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000164140.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 18 errors, 8 warnings, 0 checks, 318 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000164140.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
