WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#28: 
# This is a BitKeeper generated patch for the following project:

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#29: 
# Project Name: Linux kernel tree

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#30: 
# This patch format is intended for GNU patch command version 2.5 or higher.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#30: 
# This patch format is intended for GNU patch command version 2.5 or higher.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#31: 
# This patch includes the following deltas:

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#32: 
#	           ChangeSet	1.1238  -> 1.1239 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#33: 
#	include/linux/elevator.h	1.28    -> 1.29   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#34: 
#	drivers/block/Kconfig.iosched	1.2     -> 1.3    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#35: 
#	drivers/block/ll_rw_blk.c	1.212   -> 1.213  

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#36: 
#	drivers/block/Makefile	1.21    -> 1.22   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#37: 
#	               (new)	        -> 1.1     drivers/block/cfq-iosched.c

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#38: 
#

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#39: 
# The following is the BitKeeper ChangeSet Log

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#40: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#41: 
# 03/09/09	axboe@smithers.home.kernel.dk	1.1239

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#42: 
# CFQ io scheduler

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#43: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#44: 
#

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#46: 
--- a/drivers/block/Kconfig.iosched	Tue Sep  9 14:00:11 2003

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#52: FILE: drivers/block/Kconfig.iosched:30:
+config IOSCHED_CFQ
+	bool "CFQ I/O scheduler" if EMBEDDED
+	default y
+	---help---
+	  The CFQ I/O scheduler tries to distribute bandwidth equally
+	  among all processes in the system. It should provide a fair
+	  working environment, suitable for desktop systems.

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#74: FILE: drivers/block/cfq-iosched.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#75: FILE: drivers/block/cfq-iosched.c:2:
+ *  linux/drivers/block/cfq-iosched.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:BIT_MACRO: Prefer using the BIT macro
#105: FILE: drivers/block/cfq-iosched.c:32:
+#define CFQ_QHASH_ENTRIES	(1 << CFQ_QHASH_SHIFT)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#110: FILE: drivers/block/cfq-iosched.c:37:
+#define CFQ_MHASH_ENTRIES	(1 << CFQ_MHASH_SHIFT)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#111: FILE: drivers/block/cfq-iosched.c:38:
+#define CFQ_MHASH_FN(sec)	(hash_long(CFQ_MHASH_BLOCK((sec)),CFQ_MHASH_SHIFT))
                          	                                 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'rq' - possible side-effects?
#113: FILE: drivers/block/cfq-iosched.c:40:
+#define rq_hash_key(rq)		((rq)->sector + (rq)->nr_sectors)

CHECK:SPACING: No space is necessary after a cast
#118: FILE: drivers/block/cfq-iosched.c:45:
+#define RQ_DATA(rq)		((struct cfq_rq *) (rq)->elevator_private)

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#143: FILE: drivers/block/cfq-iosched.c:70:
+#if 0

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#193: FILE: drivers/block/cfq-iosched.c:120:
+	BUG_ON(ON_MHASH(crq));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:TRAILING_WHITESPACE: trailing whitespace
#208: FILE: drivers/block/cfq-iosched.c:135:
+^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#209: FILE: drivers/block/cfq-iosched.c:136:
+		BUG_ON(!ON_MHASH(crq));

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rb_node"
#227: FILE: drivers/block/cfq-iosched.c:154:
+#define RB_EMPTY(node)	((node)->rb_node == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#232: FILE: drivers/block/cfq-iosched.c:159:
+#define rq_rb_key(rq)		(rq)->sector

ERROR:SPACING: space required after that ',' (ctx:VxV)
#267: FILE: drivers/block/cfq-iosched.c:194:
+cfq_add_crq_rb(struct cfq_data *cfqd, struct cfq_queue *cfqq,struct cfq_rq *crq)
                                                             ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#347: FILE: drivers/block/cfq-iosched.c:274:
+		BUG_ON(__rq->sector + __rq->nr_sectors != bio->bi_sector);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#442: FILE: drivers/block/cfq-iosched.c:369:
+	queued = ret = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#448: FILE: drivers/block/cfq-iosched.c:375:
+		BUG_ON(RB_EMPTY(&cfqq->sort_list));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'queued < cfq_quantum'
#461: FILE: drivers/block/cfq-iosched.c:388:
+	if ((queued < cfq_quantum) && good_queues)

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#477: FILE: drivers/block/cfq-iosched.c:404:
+		BUG_ON(q->last_merge == rq);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#480: FILE: drivers/block/cfq-iosched.c:407:
+			BUG_ON(ON_MHASH(crq));

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#535: FILE: drivers/block/cfq-iosched.c:462:
+		cfqq->queued[0] = cfqq->queued[1] = 0;

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#562: FILE: drivers/block/cfq-iosched.c:489:
+	switch (where) {
+		case ELEVATOR_INSERT_BACK:
[...]
+		case ELEVATOR_INSERT_FRONT:
[...]
+		case ELEVATOR_INSERT_SORT:
[...]
+		default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#572: FILE: drivers/block/cfq-iosched.c:499:
+			BUG_ON(!blk_fs_request(rq));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#576: FILE: drivers/block/cfq-iosched.c:503:
+			printk("%s: bad insert point %d\n", __FUNCTION__,where);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#576: FILE: drivers/block/cfq-iosched.c:503:
+			printk("%s: bad insert point %d\n", __FUNCTION__,where);
 			                                                ^

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#576: FILE: drivers/block/cfq-iosched.c:503:
+			printk("%s: bad insert point %d\n", __FUNCTION__,where);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#653: FILE: drivers/block/cfq-iosched.c:580:
+		BUG_ON(q->last_merge == rq);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#654: FILE: drivers/block/cfq-iosched.c:581:
+		BUG_ON(ON_MHASH(crq));

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*cfqd->crq_hash)...) over kmalloc(sizeof(struct list_head)...)
#701: FILE: drivers/block/cfq-iosched.c:628:
+	cfqd->crq_hash = kmalloc(sizeof(struct list_head) * CFQ_MHASH_ENTRIES, GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*cfqd->cfq_hash)...) over kmalloc(sizeof(struct list_head)...)
#705: FILE: drivers/block/cfq-iosched.c:632:
+	cfqd->cfq_hash = kmalloc(sizeof(struct list_head) * CFQ_QHASH_ENTRIES, GFP_KERNEL);

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#709: FILE: drivers/block/cfq-iosched.c:636:
+	cfqd->crq_pool = mempool_create(BLKDEV_MIN_RQ, mempool_alloc_slab, mempool_free_slab, crq_pool);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#741: FILE: drivers/block/cfq-iosched.c:668:
+	crq_pool = kmem_cache_create("crq_pool", sizeof(struct cfq_rq), 0, 0,
+					NULL, NULL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#747: FILE: drivers/block/cfq-iosched.c:674:
+	cfq_pool = kmem_cache_create("cfq_pool", sizeof(struct cfq_queue), 0, 0,
+					NULL, NULL);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#764: FILE: drivers/block/cfq-iosched.c:691:
+^I.elevator_merge_fn = ^I^Icfq_merge,$

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#780: FILE: drivers/block/cfq-iosched.c:707:
+EXPORT_SYMBOL(iosched_cfq);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000338475.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 7 errors, 36 warnings, 12 checks, 753 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000338475.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
