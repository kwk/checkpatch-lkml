WARNING:TYPO_SPELLING: 'serie' may be misspelled - perhaps 'series'?
#62: 
top of your last posted mutex patch serie.
                                    ^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#99: FILE: include/linux/mutex.h:116:
+extern void FASTCALL(__mutex_lock_noinline(atomic_t *lock_count));

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#100: FILE: include/linux/mutex.h:117:
+extern void FASTCALL(__mutex_unlock_noinline(atomic_t *lock_count));

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'lock' may be better as '(lock)' to avoid precedence issues
#104: FILE: include/linux/mutex.h:121:
+#define mutex_lock(lock) \
+	__arch_fast_mutex_lock(&lock->count, __mutex_lock_noinline)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'lock' may be better as '(lock)' to avoid precedence issues
#106: FILE: include/linux/mutex.h:123:
+#define mutex_unlock(lock) \
+	__arch_fast_mutex_unlock(&lock->count, __mutex_unlock_noinline)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'lock' may be better as '(lock)' to avoid precedence issues
#108: FILE: include/linux/mutex.h:125:
+#define mutex_trylock(lock) \
+	__arch_fast_mutex_trylock(&lock->count)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'lock' may be better as '(lock)' to avoid precedence issues
#110: FILE: include/linux/mutex.h:127:
+#define mutex_is_locked(lock) \
+	({ mb(); atomic_read(&lock->count) != 1; })

WARNING:MEMORY_BARRIER: memory barrier without comment
#111: FILE: include/linux/mutex.h:128:
+	({ mb(); atomic_read(&lock->count) != 1; })

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#119: FILE: include/linux/mutex.h:134:
+extern int FASTCALL(mutex_trylock(struct mutex *lock));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#124: FILE: include/linux/mutex.h:139:
+extern int FASTCALL(mutex_lock_interruptible(struct mutex *lock));

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#209: FILE: kernel/mutex.c:448:
+EXPORT_SYMBOL_GPL(__mutex_lock_noinline);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#236: FILE: kernel/mutex.c:471:
+EXPORT_SYMBOL_GPL(__mutex_unlock_noinline);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#259: FILE: kernel/mutex.c:514:
+EXPORT_SYMBOL_GPL(mutex_trylock);

WARNING:MEMORY_BARRIER: memory barrier without comment
#263: FILE: kernel/mutex.c:518:
+	mb();

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#267: FILE: kernel/mutex.c:522:
+EXPORT_SYMBOL_GPL(mutex_is_locked);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#279: FILE: include/asm-generic/mutex.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#280: FILE: include/asm-generic/mutex.h:2:
+ *  linux/include/asm-generic/mutex.h

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'count' - possible side-effects?
#287: FILE: include/asm-generic/mutex.h:9:
+#define __arch_fast_mutex_lock(count, contention_fn)			\
+do {									\
+	if (atomic_xchg(count, 0) != 1)					\
+		contention_fn(count);					\
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'count' - possible side-effects?
#293: FILE: include/asm-generic/mutex.h:15:
+#define __arch_fast_mutex_unlock(count, contention_fn)			\
+do {									\
+	if (atomic_xchg(count, 1) != 0)					\
+		contention_fn(count);					\
+} while (0)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#306: FILE: include/asm-i386/mutex.h:1:
+#define MUTEX_LOCKLESS_FASTPATH

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#316: FILE: include/asm-i386/mutex.h:11:
+^I^ILOCK "decl (%%eax)\n"  ^I^I^I^I^I\$

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#320: FILE: include/asm-i386/mutex.h:15:
+		"2: call "#contention"\n\t"				\

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#324: FILE: include/asm-i386/mutex.h:19:
+		:"a" (v)						\
 		^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#325: FILE: include/asm-i386/mutex.h:20:
+		:"memory","cx","dx");					\
 		^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#325: FILE: include/asm-i386/mutex.h:20:
+		:"memory","cx","dx");					\
 		         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#325: FILE: include/asm-i386/mutex.h:20:
+		:"memory","cx","dx");					\
 		              ^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#336: FILE: include/asm-i386/mutex.h:31:
+^I^ILOCK "incl (%%eax)\n"  ^I^I^I^I^I\$

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#340: FILE: include/asm-i386/mutex.h:35:
+		"2: call "#contention"\n\t"				\

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#344: FILE: include/asm-i386/mutex.h:39:
+		:"a" (v)						\
 		^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#345: FILE: include/asm-i386/mutex.h:40:
+		:"memory","cx","dx");					\
 		^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#345: FILE: include/asm-i386/mutex.h:40:
+		:"memory","cx","dx");					\
 		         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#345: FILE: include/asm-i386/mutex.h:40:
+		:"memory","cx","dx");					\
 		              ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#355: FILE: include/asm-arm/mutex.h:1:
+#include <asm/system.h>

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000123614.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 8 errors, 13 warnings, 12 checks, 268 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000123614.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
