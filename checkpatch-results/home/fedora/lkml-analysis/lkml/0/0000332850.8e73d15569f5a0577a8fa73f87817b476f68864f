ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#96: 
--- a/fs/attr.c	Thu Oct  2 02:44:46 2003

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#111: FILE: fs/attr.c:63:
+EXPORT_SYMBOL(inode_change_ok);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#121: FILE: fs/attr.c:106:
+EXPORT_SYMBOL(inode_setattr);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#140: FILE: fs/attr.c:193:
+EXPORT_SYMBOL(notify_change);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#178: FILE: fs/fcntl.c:216:
+static int setfl(int fd, struct file *filp, unsigned long arg)
                                       ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#189: FILE: fs/fcntl.c:265:
+	int err = security_file_set_fowner(filp);
 	                                   ^^^^

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#198: FILE: fs/fcntl.c:274:
+EXPORT_SYMBOL(f_setown);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#205: FILE: fs/fcntl.c:281:
+EXPORT_SYMBOL(f_delown);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#209: FILE: fs/fcntl.c:284:
+		     unsigned long arg, struct file *filp)
 		                                     ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#238: FILE: fs/fcntl.c:548:
+int fasync_helper(int fd, struct file *filp, int on,
                                        ^^^^

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#247: FILE: fs/fcntl.c:588:
+EXPORT_SYMBOL(fasync_helper);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#256: FILE: fs/fcntl.c:609:
+EXPORT_SYMBOL(__kill_fasync);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#265: FILE: fs/fcntl.c:618:
+EXPORT_SYMBOL(kill_fasync);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#287: FILE: fs/file_table.c:25:
+EXPORT_SYMBOL(files_stat); /* Needed by unix.o */

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#292: FILE: fs/file_table.c:30:
+EXPORT_SYMBOL(files_lock);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#329: FILE: fs/file_table.c:107:
+EXPORT_SYMBOL(get_empty_filp);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#338: FILE: fs/file_table.c:137:
+EXPORT_SYMBOL(open_private_file);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#354: FILE: fs/file_table.c:152:
+EXPORT_SYMBOL(close_private_file);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#362: FILE: fs/file_table.c:160:
+EXPORT_SYMBOL(fput);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#371: FILE: fs/file_table.c:207:
+EXPORT_SYMBOL(fget);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#380: FILE: fs/file_table.c:246:
+EXPORT_SYMBOL(put_filp);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#409: FILE: fs/filesystems.c:84:
+EXPORT_SYMBOL(register_filesystem);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#432: FILE: fs/filesystems.c:116:
+EXPORT_SYMBOL(unregister_filesystem);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#478: FILE: fs/filesystems.c:233:
+EXPORT_SYMBOL(get_fs_type);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#486: FILE: fs/fs-writeback.c:110:
+EXPORT_SYMBOL(__mark_inode_dirty);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#547: FILE: fs/fs-writeback.c:496:
+EXPORT_SYMBOL(write_inode_now);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#565: FILE: fs/fs-writeback.c:548:
+EXPORT_SYMBOL(generic_osync_inode);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#577: FILE: fs/locks.c:142:
+EXPORT_SYMBOL(file_lock_list);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#586: FILE: fs/locks.c:191:
+EXPORT_SYMBOL(locks_init_lock);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#596: FILE: fs/locks.c:226:
+EXPORT_SYMBOL(locks_copy_lock);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#637: FILE: fs/locks.c:512:
+		printk(KERN_ERR "locks_delete_lock: fasync == %p\n",

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#698: FILE: fs/locks.c:602:
+struct file_lock *posix_test_lock(struct file *filp, struct file_lock *fl)
                                                ^^^^

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#706: FILE: fs/locks.c:618:
+EXPORT_SYMBOL(posix_test_lock);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#724: FILE: fs/locks.c:662:
+EXPORT_SYMBOL(posix_locks_deadlock);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#733: FILE: fs/locks.c:725:
+EXPORT_SYMBOL(posix_lock_file);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#742: FILE: fs/locks.c:998:
+EXPORT_SYMBOL(locks_mandatory_area);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#751: FILE: fs/locks.c:1138:
+EXPORT_SYMBOL(__break_lease);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#760: FILE: fs/locks.c:1157:
+EXPORT_SYMBOL(lease_get_mtime);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#770: FILE: fs/locks.c:1574:
+int fcntl_setlk64(struct file *filp, unsigned int cmd,
                                ^^^^

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#786: FILE: fs/locks.c:1750:
+EXPORT_SYMBOL(posix_block_lock);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#796: FILE: fs/locks.c:1758:
+void posix_unblock_lock(struct file *filp, struct file_lock *waiter)
                                      ^^^^

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#805: FILE: fs/locks.c:1775:
+EXPORT_SYMBOL(posix_unblock_lock);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#807: FILE: fs/locks.c:1777:
+static void lock_get_status(char* out, struct file_lock *fl,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'fl->fl_end < start'
#825: FILE: fs/locks.c:1931:
+			if ((fl->fl_end < start) ||
+			    (fl->fl_start > (start + len)))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#834: FILE: fs/locks.c:1948:
+EXPORT_SYMBOL(lock_may_read);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'fl->fl_end < start'
#844: FILE: fs/locks.c:1970:
+			if ((fl->fl_end < start) ||
+			    (fl->fl_start > (start + len)))

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#853: FILE: fs/locks.c:1987:
+EXPORT_SYMBOL(lock_may_write);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#879: FILE: fs/namespace.c:97:
+EXPORT_SYMBOL(lookup_mnt);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#898: FILE: fs/namespace.c:168:
+EXPORT_SYMBOL(__mntput);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#907: FILE: fs/namespace.c:265:
+EXPORT_SYMBOL(may_umount);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#951: FILE: fs/namespace.c:564:
+static int do_remount(struct nameidata *nd, int flags,
                                         ^^

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#997: FILE: fs/namespace.c:930:
+EXPORT_SYMBOL(set_fs_root);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1006: FILE: fs/namespace.c:955:
+EXPORT_SYMBOL(set_fs_pwd);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1029: FILE: fs/open.c:45:
+EXPORT_SYMBOL(vfs_statfs);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1169: FILE: fs/open.c:566:
+					LOOKUP_NOALT, &nd);
 					               ^^

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1222: FILE: fs/open.c:763:
+EXPORT_SYMBOL(filp_open);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1231: FILE: fs/open.c:824:
+EXPORT_SYMBOL(dentry_open);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1240: FILE: fs/open.c:888:
+EXPORT_SYMBOL(get_unused_fd);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1249: FILE: fs/open.c:905:
+EXPORT_SYMBOL(put_unused_fd);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1269: FILE: fs/open.c:929:
+EXPORT_SYMBOL(fd_install);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1288: FILE: fs/open.c:1004:
+EXPORT_SYMBOL(filp_close);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1297: FILE: fs/open.c:1033:
+EXPORT_SYMBOL(sys_close);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1307: FILE: fs/open.c:1054:
+int generic_file_open(struct inode *inode, struct file *filp)
                                                         ^^^^

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1318: FILE: fs/partitions/check.c:138:
+EXPORT_SYMBOL(bdevname);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1329: FILE: fs/partitions/check.c:163:
+EXPORT_SYMBOL(__bdevname);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1347: FILE: fs/partitions/check.c:215:
+	struct hd_struct *p = container_of(kobj,struct hd_struct,kobj);
 	                                       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1347: FILE: fs/partitions/check.c:215:
+	struct hd_struct *p = container_of(kobj,struct hd_struct,kobj);
 	                                                        ^

CHECK:CAMELCASE: Avoid CamelCase: <Sector>
#1440: FILE: fs/partitions/check.c:431:
+			       sector_t n, Sector *p)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1465: FILE: fs/partitions/check.c:454:
+EXPORT_SYMBOL(read_dev_sector);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1476: FILE: fs/read_write.c:26:
+EXPORT_SYMBOL(generic_ro_fops);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1485: FILE: fs/read_write.c:53:
+EXPORT_SYMBOL(generic_file_llseek);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1494: FILE: fs/read_write.c:79:
+EXPORT_SYMBOL(remote_llseek);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1501: FILE: fs/read_write.c:86:
+EXPORT_SYMBOL(no_llseek);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1510: FILE: fs/read_write.c:112:
+EXPORT_SYMBOL(default_llseek);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1520: FILE: fs/read_write.c:182:
+ssize_t do_sync_read(struct file *filp, char __user *buf,
                                   ^^^^

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1530: FILE: fs/read_write.c:197:
+EXPORT_SYMBOL(do_sync_read);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1542: FILE: fs/read_write.c:226:
+EXPORT_SYMBOL(vfs_read);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1544: FILE: fs/read_write.c:228:
+ssize_t do_sync_write(struct file *filp, const char __user *buf,
                                    ^^^^

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1554: FILE: fs/read_write.c:243:
+EXPORT_SYMBOL(do_sync_write);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1565: FILE: fs/read_write.c:272:
+EXPORT_SYMBOL(vfs_write);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1575: FILE: fs/read_write.c:289:
+asmlinkage ssize_t sys_write(unsigned int fd, const char __user * buf,

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1593: FILE: fs/read_write.c:363:
+EXPORT_SYMBOL(iov_shorten);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1612: FILE: fs/read_write.c:498:
+EXPORT_SYMBOL(vfs_readv);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1621: FILE: fs/read_write.c:511:
+EXPORT_SYMBOL(vfs_writev);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1686: FILE: fs/select.c:57:
+void __pollwait(struct file *filp, wait_queue_head_t *wait_address,
                              ^^^^

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1686: FILE: fs/select.c:57:
+void __pollwait(struct file *filp, wait_queue_head_t *wait_address,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1695: FILE: fs/select.c:67:
+EXPORT_SYMBOL(poll_initwait);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1705: FILE: fs/select.c:88:
+EXPORT_SYMBOL(poll_freewait);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1707: FILE: fs/select.c:90:
+void __pollwait(struct file *filp, wait_queue_head_t *wait_address,
                              ^^^^

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1725: FILE: fs/select.c:276:
+EXPORT_SYMBOL(do_select);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1786: FILE: fs/stat.c:37:
+EXPORT_SYMBOL(generic_fillattr);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1795: FILE: fs/stat.c:62:
+EXPORT_SYMBOL(vfs_getattr);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1804: FILE: fs/stat.c:77:
+EXPORT_SYMBOL(vfs_stat);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1813: FILE: fs/stat.c:92:
+EXPORT_SYMBOL(vfs_lstat);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1822: FILE: fs/stat.c:106:
+EXPORT_SYMBOL(vfs_fstat);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1841: FILE: fs/stat.c:124:
+		printk(KERN_WARNING "VFS: Warning: %s using old stat() "

WARNING:SPLIT_STRING: quoted string split across lines
#1842: FILE: fs/stat.c:125:
+		printk(KERN_WARNING "VFS: Warning: %s using old stat() "
+				    "call. Recompile your binary.\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1861: FILE: fs/stat.c:162:
 }
+asmlinkage long sys_lstat(char __user *filename,

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1892: FILE: fs/stat.c:245:
 }
+asmlinkage long sys_newlstat(char __user *filename,

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1902: FILE: fs/stat.c:256:
 }
+asmlinkage long sys_newfstat(unsigned int fd, struct stat __user *statbuf)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1952: FILE: fs/stat.c:383:
+EXPORT_SYMBOL(inode_add_bytes);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1961: FILE: fs/stat.c:398:
+EXPORT_SYMBOL(inode_sub_bytes);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1970: FILE: fs/stat.c:410:
+EXPORT_SYMBOL(inode_get_bytes);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1978: FILE: fs/stat.c:418:
+EXPORT_SYMBOL(inode_set_bytes);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000332850.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 5 errors, 93 warnings, 6 checks, 1780 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000332850.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
