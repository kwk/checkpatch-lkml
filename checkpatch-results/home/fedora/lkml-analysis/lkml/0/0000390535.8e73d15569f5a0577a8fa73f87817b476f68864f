WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#37: 
In article <20030223.225251.119557134.davem@redhat.com> (at Sun, 23 Feb 2003 22:52:51 -0800 (PST)), "David S. Miller" <davem@redhat.com> says:

WARNING:PATCH_PREFIX: patch prefix 'Documentation' exists, appears to be a -p0 patch

ERROR:TRAILING_WHITESPACE: trailing whitespace
#64: FILE: Configure.help:5633:
+  support.  With this option, additional periodically-alter $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#68: FILE: Configure.help:5637:
+  By default, kernel generates temporary addresses but it won't use $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#69: FILE: Configure.help:5638:
+  them unless application explicitly bind them.  To prefer temporary $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#72: FILE: Configure.help:5641:
+^Iecho 2 >/proc/sys/net/ipv6/conf/all/use_tempaddr $

WARNING:PATCH_PREFIX: patch prefix 'Documentation' exists, appears to be a -p0 patch

WARNING:TYPO_SPELLING: 'temorary' may be misspelled - perhaps 'temporary'?
#104: FILE: networking/ip-sysctl.txt:631:
+	Preferred lifetime (in seconds) for temorary addresses.
 	                                    ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#109: FILE: networking/ip-sysctl.txt:636:
+^Ithat ensures that clients don't synchronize with each $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#113: FILE: networking/ip-sysctl.txt:640:
+^I$

WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#129: FILE: linux/md5.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:NEW_TYPEDEFS: do not add new typedefs
#138: FILE: linux/md5.h:10:
+typedef struct MD5Context {

CHECK:CAMELCASE: Avoid CamelCase: <MD5Context>
#138: FILE: linux/md5.h:10:
+typedef struct MD5Context {

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <MD5Init>
#144: FILE: linux/md5.h:16:
+void MD5Init(struct MD5Context *context);

CHECK:CAMELCASE: Avoid CamelCase: <MD5Update>
#145: FILE: linux/md5.h:17:
+void MD5Update(struct MD5Context *context,

CHECK:CAMELCASE: Avoid CamelCase: <MD5Final>
#147: FILE: linux/md5.h:19:
+void MD5Final(__u8 digest[16],

CHECK:CAMELCASE: Avoid CamelCase: <MD5Transform>
#149: FILE: linux/md5.h:21:
+void MD5Transform(__u32 buf[4], __u32 const in[16]);

WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#181: FILE: linux/sysctl.h:378:
+	NET_IPV6_RTR_SOLICIT_DELAY=10,
 	                          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#182: FILE: linux/sysctl.h:379:
+	NET_IPV6_USE_TEMPADDR=11,
 	                     ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#183: FILE: linux/sysctl.h:380:
+	NET_IPV6_TEMP_VALID_LFT=12,
 	                       ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#184: FILE: linux/sysctl.h:381:
+	NET_IPV6_TEMP_PREFERED_LFT=13,
 	                          ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#185: FILE: linux/sysctl.h:382:
+	NET_IPV6_REGEN_MAX_RETRY=14,
 	                        ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#186: FILE: linux/sysctl.h:383:
+	NET_IPV6_MAX_DESYNC_FACTOR=15
 	                          ^

WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#202: FILE: net/addrconf.h:9:
+#define TEMP_VALID_LIFETIME		(7*86400)
                            		  ^

WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'lib' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'lib' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'lib' exists, appears to be a -p0 patch

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#315: FILE: md5.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#332: FILE: md5.c:18:
+ * $USAGI: md5.c,v 1.1.6.1 2003/02/24 10:40:59 yoshfuji Exp $

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:SPACING: space required before the open parenthesis '('
#340: FILE: md5.c:26:
+#define byteReverse(buf, len)	do { } while(0)

CHECK:CAMELCASE: Avoid CamelCase: <byteReverse>
#340: FILE: md5.c:26:
+#define byteReverse(buf, len)	do { } while(0)

CHECK:SPACING: No space is necessary after a cast
#378: FILE: md5.c:64:
+	if ((ctx->bits[0] = t + ((u32) len << 3)) < t)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#378: FILE: md5.c:64:
+	if ((ctx->bits[0] = t + ((u32) len << 3)) < t)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:SPACING: No space is necessary after a cast
#387: FILE: md5.c:73:
+		u8 *p = (u8 *) ctx->in + t;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#395: FILE: md5.c:81:
+		byteReverse((u32*)ctx->in, 16);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#396: FILE: md5.c:82:
+		MD5Transform(ctx->buf, (u32 *) ctx->in);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#404: FILE: md5.c:90:
+		byteReverse((u32*)ctx->in, 16);

CHECK:SPACING: No space is necessary after a cast
#405: FILE: md5.c:91:
+		MD5Transform(ctx->buf, (u32 *) ctx->in);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#428: FILE: md5.c:114:
+	 *         always at least one byte free */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#439: FILE: md5.c:125:
+		byteReverse((u32*)ctx->in, 16);

CHECK:SPACING: No space is necessary after a cast
#440: FILE: md5.c:126:
+		MD5Transform(ctx->buf, (u32 *) ctx->in);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#448: FILE: md5.c:134:
+	byteReverse((u32*)ctx->in, 14);

CHECK:SPACING: No space is necessary after a cast
#451: FILE: md5.c:137:
+	((u32 *) ctx->in)[14] = ctx->bits[0];

CHECK:SPACING: No space is necessary after a cast
#452: FILE: md5.c:138:
+	((u32 *) ctx->in)[15] = ctx->bits[1];

CHECK:SPACING: No space is necessary after a cast
#454: FILE: md5.c:140:
+	MD5Transform(ctx->buf, (u32 *) ctx->in);

CHECK:SPACING: No space is necessary after a cast
#457: FILE: md5.c:143:
+	memset((char *) ctx, 0, sizeof(ctx));	/* In case it's sensitive */

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#463: FILE: md5.c:149:
+#define F1(x, y, z) (z ^ (x & (y ^ z)))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'y' may be better as '(y)' to avoid precedence issues
#463: FILE: md5.c:149:
+#define F1(x, y, z) (z ^ (x & (y ^ z)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'z' - possible side-effects?
#463: FILE: md5.c:149:
+#define F1(x, y, z) (z ^ (x & (y ^ z)))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'z' may be better as '(z)' to avoid precedence issues
#463: FILE: md5.c:149:
+#define F1(x, y, z) (z ^ (x & (y ^ z)))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#465: FILE: md5.c:151:
+#define F3(x, y, z) (x ^ y ^ z)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'y' may be better as '(y)' to avoid precedence issues
#465: FILE: md5.c:151:
+#define F3(x, y, z) (x ^ y ^ z)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'z' may be better as '(z)' to avoid precedence issues
#465: FILE: md5.c:151:
+#define F3(x, y, z) (x ^ y ^ z)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#466: FILE: md5.c:152:
+#define F4(x, y, z) (y ^ (x | ~z))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'y' may be better as '(y)' to avoid precedence issues
#466: FILE: md5.c:152:
+#define F4(x, y, z) (y ^ (x | ~z))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'z' may be better as '(z)' to avoid precedence issues
#466: FILE: md5.c:152:
+#define F4(x, y, z) (y ^ (x | ~z))

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#469: FILE: md5.c:155:
+#define MD5STEP(f, w, x, y, z, data, s) ^I\$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'w' - possible side-effects?
#469: FILE: md5.c:155:
+#define MD5STEP(f, w, x, y, z, data, s) 	\
+	( w += f(x, y, z) + data, w = w<<s | w>>(32-s), w += x )

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'w' may be better as '(w)' to avoid precedence issues
#469: FILE: md5.c:155:
+#define MD5STEP(f, w, x, y, z, data, s) 	\
+	( w += f(x, y, z) + data, w = w<<s | w>>(32-s), w += x )

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#469: FILE: md5.c:155:
+#define MD5STEP(f, w, x, y, z, data, s) 	\
+	( w += f(x, y, z) + data, w = w<<s | w>>(32-s), w += x )

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'data' may be better as '(data)' to avoid precedence issues
#469: FILE: md5.c:155:
+#define MD5STEP(f, w, x, y, z, data, s) 	\
+	( w += f(x, y, z) + data, w = w<<s | w>>(32-s), w += x )

CHECK:MACRO_ARG_REUSE: Macro argument reuse 's' - possible side-effects?
#469: FILE: md5.c:155:
+#define MD5STEP(f, w, x, y, z, data, s) 	\
+	( w += f(x, y, z) + data, w = w<<s | w>>(32-s), w += x )

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 's' may be better as '(s)' to avoid precedence issues
#469: FILE: md5.c:155:
+#define MD5STEP(f, w, x, y, z, data, s) 	\
+	( w += f(x, y, z) + data, w = w<<s | w>>(32-s), w += x )

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#470: FILE: md5.c:156:
+	( w += f(x, y, z) + data, w = w<<s | w>>(32-s), w += x )
 	                               ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#470: FILE: md5.c:156:
+	( w += f(x, y, z) + data, w = w<<s | w>>(32-s), w += x )
 	                                      ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#470: FILE: md5.c:156:
+	( w += f(x, y, z) + data, w = w<<s | w>>(32-s), w += x )
 	                                           ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#470: FILE: md5.c:156:
+	( w += f(x, y, z) + data, w = w<<s | w>>(32-s), w += x )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#470: FILE: md5.c:156:
+	( w += f(x, y, z) + data, w = w<<s | w>>(32-s), w += x )

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#562: FILE: md5.c:248:
+EXPORT_SYMBOL(MD5Update);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#563: FILE: md5.c:249:
+EXPORT_SYMBOL(MD5Final);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#564: FILE: md5.c:250:
+EXPORT_SYMBOL(MD5Transform);

WARNING:PATCH_PREFIX: patch prefix 'net' exists, appears to be a -p0 patch

WARNING:TYPO_SPELLING: 'Extentions' may be misspelled - perhaps 'Extensions'?
#579: FILE: ipv6/Config.in:8:
+bool '    IPv6: Privacy Extentions (RFC 3041) support' CONFIG_IPV6_PRIVACY
                         ^^^^^^^^^^

WARNING:PATCH_PREFIX: patch prefix 'net' exists, appears to be a -p0 patch

ERROR:TRAILING_WHITESPACE: trailing whitespace
#619: FILE: ipv6/addrconf.c:95:
+static int __ipv6_try_regen_rndid(struct inet6_dev *idev, struct in6_addr *tmpaddr); $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#635: FILE: ipv6/addrconf.c:140:
+^I.use_tempaddr ^I^I^I= 1,$

CHECK:SPACING: No space is necessary after a cast
#667: FILE: ipv6/addrconf.c:311:
+		ndev->regen_timer.data = (unsigned long) ndev;

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#668: FILE: ipv6/addrconf.c:312:
+		if ((dev->flags&IFF_LOOPBACK) ||
 		               ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#671: FILE: ipv6/addrconf.c:315:
+			printk(KERN_INFO

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#690: FILE: ipv6/addrconf.c:451:
+	if (ifa->flags&IFA_F_TEMPORARY) {
 	              ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#723: FILE: ipv6/addrconf.c:504:
+	if (ifp->flags&IFA_F_TEMPORARY) {
 	              ^

ERROR:SPACING: spaces required around that '=' (ctx:VxO)
#724: FILE: ipv6/addrconf.c:505:
+		for (ifap = &idev->tempaddr_list; (ifa=*ifap) != NULL;
 		                                      ^

ERROR:SPACING: space required before that '*' (ctx:OxV)
#724: FILE: ipv6/addrconf.c:505:
+		for (ifap = &idev->tempaddr_list; (ifa=*ifap) != NULL;
 		                                       ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#774: FILE: ipv6/addrconf.c:568:
+		printk(KERN_INFO

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ipv6_create_tempaddr', this function's name, in a string
#775: FILE: ipv6/addrconf.c:569:
+			"ipv6_create_tempaddr(): use_tempaddr is disabled.\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#785: FILE: ipv6/addrconf.c:579:
+		printk(KERN_WARNING

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ipv6_create_tempaddr', this function's name, in a string
#786: FILE: ipv6/addrconf.c:580:
+			"ipv6_create_tempaddr(): regeneration time exceeded. disabled temporary address support.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#795: FILE: ipv6/addrconf.c:589:
+		printk(KERN_WARNING

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ipv6_create_tempaddr', this function's name, in a string
#796: FILE: ipv6/addrconf.c:590:
+			"ipv6_create_tempaddr(): regeneration of randomized interface id failed.\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#806: FILE: ipv6/addrconf.c:600:
+^Itmp_prefered_lft = min_t(__u32, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#807: FILE: ipv6/addrconf.c:601:
+^I^I^I^I ifp->prefered_lft, $

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#814: FILE: ipv6/addrconf.c:608:
+			      ipv6_addr_type(&addr)&IPV6_ADDR_SCOPE_MASK, IFA_F_TEMPORARY) : 0;
 			                           ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#818: FILE: ipv6/addrconf.c:612:
+		printk(KERN_INFO

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ipv6_create_tempaddr', this function's name, in a string
#819: FILE: ipv6/addrconf.c:613:
+			"ipv6_create_tempaddr(): retry temporary address regeneration.\n");

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#844: FILE: ipv6/addrconf.c:639:
+static int inline ipv6_saddr_pref(const struct inet6_ifaddr *ifp, u8 invpref)

The inline keyword should sit between storage class and type.

For example, the following segment::

  inline static int example_function(void)
  {
          ...
  }

should be::

  static inline int example_function(void)
  {
          ...
  }

WARNING:LINE_SPACING: Missing a blank line after declarations
#847: FILE: ipv6/addrconf.c:642:
+	int pref;
+	pref = ifp->flags&IFA_F_DEPRECATED ? 0 : 2;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#847: FILE: ipv6/addrconf.c:642:
+	pref = ifp->flags&IFA_F_DEPRECATED ? 0 : 2;
 	                 ^

CHECK:SPACING: spaces preferred around that '^' (ctx:VxV)
#849: FILE: ipv6/addrconf.c:644:
+	pref |= (ifp->flags^invpref)&IFA_F_TEMPORARY ? 0 : 1;
 	                   ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#849: FILE: ipv6/addrconf.c:644:
+	pref |= (ifp->flags^invpref)&IFA_F_TEMPORARY ? 0 : 1;
 	                            ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#877: FILE: ipv6/addrconf.c:695:
+					if (ifp->flags&IFA_F_TENTATIVE)
 					              ^

WARNING:LONG_LINE: line length of 119 exceeds 100 columns
#880: FILE: ipv6/addrconf.c:698:
+					score = ipv6_saddr_pref(ifp, idev->cnf.use_tempaddr > 1 ? IFA_F_TEMPORARY : 0);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#912: FILE: ipv6/addrconf.c:738:
+					if (ifp->flags&IFA_F_TENTATIVE)
 					              ^

WARNING:LONG_LINE: line length of 119 exceeds 100 columns
#915: FILE: ipv6/addrconf.c:741:
+					score = ipv6_saddr_pref(ifp, idev->cnf.use_tempaddr > 1 ? IFA_F_TEMPORARY : 0);

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#968: FILE: ipv6/addrconf.c:865:
+	} else if (ifp->flags&IFA_F_TEMPORARY) {
 	                     ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#970: FILE: ipv6/addrconf.c:867:
+		struct inet6_ifaddr *ifpub;
+		spin_lock_bh(&ifp->lock);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1004: FILE: ipv6/addrconf.c:959:
+		printk(KERN_INFO

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using '__ipv6_regen_rndid', this function's name, in a string
#1005: FILE: ipv6/addrconf.c:960:
+			"__ipv6_regen_rndid(idev=%p): cannot get EUI64 identifier; use random bytes.\n",

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1029: FILE: ipv6/addrconf.c:984:
+^Iif (idev->rndid[0] == 0xfd && $

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#1030: FILE: ipv6/addrconf.c:985:
+	    (idev->rndid[1]&idev->rndid[2]&idev->rndid[3]&idev->rndid[4]&idev->rndid[5]&idev->rndid[6]) &&

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#1030: FILE: ipv6/addrconf.c:985:
+	    (idev->rndid[1]&idev->rndid[2]&idev->rndid[3]&idev->rndid[4]&idev->rndid[5]&idev->rndid[6]) &&
 	                   ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#1030: FILE: ipv6/addrconf.c:985:
+	    (idev->rndid[1]&idev->rndid[2]&idev->rndid[3]&idev->rndid[4]&idev->rndid[5]&idev->rndid[6]) &&
 	                                  ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#1030: FILE: ipv6/addrconf.c:985:
+	    (idev->rndid[1]&idev->rndid[2]&idev->rndid[3]&idev->rndid[4]&idev->rndid[5]&idev->rndid[6]) &&
 	                                                 ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#1030: FILE: ipv6/addrconf.c:985:
+	    (idev->rndid[1]&idev->rndid[2]&idev->rndid[3]&idev->rndid[4]&idev->rndid[5]&idev->rndid[6]) &&
 	                                                                ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#1030: FILE: ipv6/addrconf.c:985:
+	    (idev->rndid[1]&idev->rndid[2]&idev->rndid[3]&idev->rndid[4]&idev->rndid[5]&idev->rndid[6]) &&
 	                                                                               ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#1031: FILE: ipv6/addrconf.c:986:
+	    (idev->rndid[7]&0x80))
 	                   ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1033: FILE: ipv6/addrconf.c:988:
+	if ((idev->rndid[0]|idev->rndid[1]) == 0) {
 	                   ^

WARNING:LONG_LINE: line length of 120 exceeds 100 columns
#1036: FILE: ipv6/addrconf.c:991:
+		if ((idev->rndid[2]|idev->rndid[3]|idev->rndid[4]|idev->rndid[5]|idev->rndid[6]|idev->rndid[7]) == 0x00)

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1036: FILE: ipv6/addrconf.c:991:
+		if ((idev->rndid[2]|idev->rndid[3]|idev->rndid[4]|idev->rndid[5]|idev->rndid[6]|idev->rndid[7]) == 0x00)
 		                   ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1036: FILE: ipv6/addrconf.c:991:
+		if ((idev->rndid[2]|idev->rndid[3]|idev->rndid[4]|idev->rndid[5]|idev->rndid[6]|idev->rndid[7]) == 0x00)
 		                                  ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1036: FILE: ipv6/addrconf.c:991:
+		if ((idev->rndid[2]|idev->rndid[3]|idev->rndid[4]|idev->rndid[5]|idev->rndid[6]|idev->rndid[7]) == 0x00)
 		                                                 ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1036: FILE: ipv6/addrconf.c:991:
+		if ((idev->rndid[2]|idev->rndid[3]|idev->rndid[4]|idev->rndid[5]|idev->rndid[6]|idev->rndid[7]) == 0x00)
 		                                                                ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1036: FILE: ipv6/addrconf.c:991:
+		if ((idev->rndid[2]|idev->rndid[3]|idev->rndid[4]|idev->rndid[5]|idev->rndid[6]|idev->rndid[7]) == 0x00)
 		                                                                               ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1039: FILE: ipv6/addrconf.c:994:
+^I$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1042: FILE: ipv6/addrconf.c:997:
+		printk(KERN_WARNING

WARNING:TYPO_SPELLING: 'diabled' may be misspelled - perhaps 'disabled'?
#1043: FILE: ipv6/addrconf.c:998:
+			"__ipv6_regen_rndid(): too short regeneration interval; timer diabled for %s.\n",
 			                                                              ^^^^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using '__ipv6_regen_rndid', this function's name, in a string
#1043: FILE: ipv6/addrconf.c:998:
+			"__ipv6_regen_rndid(): too short regeneration interval; timer diabled for %s.\n",

CHECK:SPACING: No space is necessary after a cast
#1055: FILE: ipv6/addrconf.c:1010:
+	struct inet6_dev *idev = (struct inet6_dev *) data;

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#1065: FILE: ipv6/addrconf.c:1020:
+static int __ipv6_try_regen_rndid(struct inet6_dev *idev, struct in6_addr *tmpaddr) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1111: FILE: ipv6/addrconf.c:1266:
+			for (ift=in6_dev->tempaddr_list; ift; ift=ift->tmp_next) {
 			        ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1111: FILE: ipv6/addrconf.c:1266:
+			for (ift=in6_dev->tempaddr_list; ift; ift=ift->tmp_next) {
 			                                         ^

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#1126: FILE: ipv6/addrconf.c:1281:
+					ift->prefered_lft = prefered_lft + (jiffies - ift->tstamp) / HZ;

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#1128: FILE: ipv6/addrconf.c:1283:
+				if (!(flags&IFA_F_TENTATIVE))
 				           ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1137: FILE: ipv6/addrconf.c:1292:
+^I^I^I^Iread_unlock_bh(&in6_dev->lock); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1161: FILE: ipv6/addrconf.c:2006:
+^I^I^Iregen_advance = ifp->idev->cnf.regen_max_retry * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1162: FILE: ipv6/addrconf.c:2007:
+^I^I^I^I^Iifp->idev->cnf.dad_transmits * $

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#1174: FILE: ipv6/addrconf.c:2040:
+			} else if ((ifp->flags&IFA_F_TEMPORARY) &&
 			                      ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#1175: FILE: ipv6/addrconf.c:2041:
+				   !(ifp->flags&IFA_F_TENTATIVE)) {
 				               ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#1176: FILE: ipv6/addrconf.c:2042:
+				if (age >= ifp->prefered_lft - regen_advance) {
[...]
+				} else if (time_before(ifp->tstamp + ifp->prefered_lft * HZ - regen_advance * HZ, next))
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#1178: FILE: ipv6/addrconf.c:2044:
+					struct inet6_ifaddr *ifpub = ifp->ifpub;
+					if (time_before(ifp->tstamp + ifp->prefered_lft * HZ, next))

WARNING:LONG_LINE: line length of 120 exceeds 100 columns
#1191: FILE: ipv6/addrconf.c:2057:
+				} else if (time_before(ifp->tstamp + ifp->prefered_lft * HZ - regen_advance * HZ, next))

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#1192: FILE: ipv6/addrconf.c:2058:
+					next = ifp->tstamp + ifp->prefered_lft * HZ - regen_advance * HZ;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1241: FILE: ipv6/addrconf.c:2380:
+	for (i=0; t->addrconf_vars[i].data; i++) {
 	      ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000390535.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 35 errors, 49 warnings, 63 checks, 1064 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000390535.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
