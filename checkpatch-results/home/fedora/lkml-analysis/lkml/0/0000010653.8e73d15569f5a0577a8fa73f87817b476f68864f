WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#27: 
Signed-Off-By: Daniel Walker <dwalker@mvista.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

CHECK:SPACING: No space is necessary after a cast
#62: FILE: kernel/latency_trace.c:764:
+		 (unsigned long) (v1 >> 32), (unsigned long) (v1 & 0xFFFFFFFF),

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#82: FILE: kernel/latency_trace.c:998:
+			printk("huh: idx (%d) > %ld*%d!\n", idx, MAX_TRACE,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#83: FILE: kernel/latency_trace.c:999:
+			printk("huh: idx (%d) > %ld*%d!\n", idx, MAX_TRACE,
+				NR_CPUS);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#83: FILE: kernel/latency_trace.c:999:
+				NR_CPUS);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#92: FILE: kernel/latency_trace.c:1093:
+			printk("CPU%d: %016Lx (%016Lx) ... #%d (%016Lx) %016Lx\n",

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#92: FILE: kernel/latency_trace.c:1093:
+			printk("CPU%d: %016Lx (%016Lx) ... #%d (%016Lx) %016Lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#93: FILE: kernel/latency_trace.c:1094:
+			printk("CPU%d: %016Lx (%016Lx) ... #%d (%016Lx) %016Lx\n",
+				cpu,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#102: FILE: kernel/latency_trace.c:1145:
+			printk("huh: sum (%d) > %ld*%d!\n", sum, MAX_TRACE,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#103: FILE: kernel/latency_trace.c:1146:
+			printk("huh: sum (%d) > %ld*%d!\n", sum, MAX_TRACE,
+				NR_CPUS);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#103: FILE: kernel/latency_trace.c:1146:
+				NR_CPUS);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'val < PREEMPT_MASK'
#180: FILE: kernel/latency_trace.c:2049:
+	if (DEBUG_WARN_ON((val < PREEMPT_MASK) &&
+			  !(preempt_count() & PREEMPT_MASK)))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000010653.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 0 errors, 7 warnings, 5 checks, 179 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000010653.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
