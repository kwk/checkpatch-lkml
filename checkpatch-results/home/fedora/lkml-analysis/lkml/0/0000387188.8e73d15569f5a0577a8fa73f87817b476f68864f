WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#27: 
Subject: [PATCH] cpufreq (4/7): updated cpufreq ref-counting and locking scheme

WARNING:SUSPECT_COMMA_SEMICOLON: Possible comma where semicolon could be used
#163: FILE: arch/sparc64/kernel/us3_cpufreq.c:279:
+		driver->owner = THIS_MODULE,
 		strcpy(driver->name, "UltraSPARC-III");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#175: FILE: drivers/cpufreq/userspace.c:116:
+^Iret = cpufreq_driver_target(&current_policy[cpu], freq, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#176: FILE: drivers/cpufreq/userspace.c:117:
+	ret = cpufreq_driver_target(&current_policy[cpu], freq, 
 	      CPUFREQ_RELATION_L);

ERROR:CODE_INDENT: code indent should use tabs where possible
#186: FILE: include/linux/cpufreq.h:73:
+ ^Istruct semaphore^Ilock;   /* CPU ->setpolicy or ->target may$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#186: FILE: include/linux/cpufreq.h:73:
+ ^Istruct semaphore^Ilock;   /* CPU ->setpolicy or ->target may$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#186: FILE: include/linux/cpufreq.h:73:
+ ^Istruct semaphore^Ilock;   /* CPU ->setpolicy or ->target may$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#187: FILE: include/linux/cpufreq.h:74:
+ 	struct semaphore	lock;   /* CPU ->setpolicy or ->target may
+					   only be called once a time */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#187: FILE: include/linux/cpufreq.h:74:
+					   only be called once a time */

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#227: FILE: kernel/cpufreq.c:46:
+static DECLARE_RWSEM		(cpufreq_notifier_rwsem);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#231: FILE: kernel/cpufreq.c:50:
+static DECLARE_MUTEX		(cpufreq_governor_sem);

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#236: FILE: kernel/cpufreq.c:54:
+static int cpufreq_cpu_get(unsigned int cpu) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#237: FILE: kernel/cpufreq.c:55:
+	if (cpu >= NR_CPUS)

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#257: FILE: kernel/cpufreq.c:75:
+static void cpufreq_cpu_put(unsigned int cpu) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#300: FILE: kernel/cpufreq.c:151:
+	return sprintf (buf, "%u\n", policy->object);			\

WARNING:LINE_SPACING: Missing a blank line after declarations
#392: FILE: kernel/cpufreq.c:301:
+	ssize_t ret;
+	if (!cpufreq_cpu_get(policy->cpu))

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#394: FILE: kernel/cpufreq.c:303:
+	ret = fattr->show ? fattr->show(policy,buf) : 0;
 	                                      ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#406: FILE: kernel/cpufreq.c:314:
+	ssize_t ret;
+	if (!cpufreq_cpu_get(policy->cpu))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#408: FILE: kernel/cpufreq.c:316:
+	ret = fattr->store ? fattr->store(policy,buf,count) : 0;
 	                                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#408: FILE: kernel/cpufreq.c:316:
+	ret = fattr->store ? fattr->store(policy,buf,count) : 0;
 	                                            ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#466: FILE: kernel/cpufreq.c:381:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#502: FILE: kernel/cpufreq.c:412:
+^Iif ((cpufreq_driver->target) && $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cpufreq_driver->target'
#502: FILE: kernel/cpufreq.c:412:
+	if ((cpufreq_driver->target) && 
+	    (cpufreq_driver->policy[cpu].policy == CPUFREQ_POLICY_GOVERNOR)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cpufreq_driver->policy[cpu].policy == CPUFREQ_POLICY_GOVERNOR'
#502: FILE: kernel/cpufreq.c:412:
+	if ((cpufreq_driver->target) && 
+	    (cpufreq_driver->policy[cpu].policy == CPUFREQ_POLICY_GOVERNOR)) {

WARNING:LONG_LINE: line length of 111 exceeds 100 columns
#504: FILE: kernel/cpufreq.c:414:
+		cpufreq_driver->policy[cpu].governor->governor(&cpufreq_driver->policy[cpu], CPUFREQ_GOV_STOP);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'event == CPUFREQ_GOV_LIMITS'
#615: FILE: kernel/cpufreq.c:542:
+		if ((event == CPUFREQ_GOV_LIMITS) || (event == CPUFREQ_GOV_START)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'event == CPUFREQ_GOV_START'
#615: FILE: kernel/cpufreq.c:542:
+		if ((event == CPUFREQ_GOV_LIMITS) || (event == CPUFREQ_GOV_START)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'event == CPUFREQ_GOV_LIMITS'
#623: FILE: kernel/cpufreq.c:549:
+		if ((event == CPUFREQ_GOV_LIMITS) || (event == CPUFREQ_GOV_START)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'event == CPUFREQ_GOV_START'
#623: FILE: kernel/cpufreq.c:549:
+		if ((event == CPUFREQ_GOV_LIMITS) || (event == CPUFREQ_GOV_START)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'event != CPUFREQ_GOV_START'
#640: FILE: kernel/cpufreq.c:561:
+		if ((event != CPUFREQ_GOV_START) || ret)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'event == CPUFREQ_GOV_STOP'
#642: FILE: kernel/cpufreq.c:563:
+		if ((event == CPUFREQ_GOV_STOP) && !ret)

ERROR:CODE_INDENT: code indent should use tabs where possible
#683: FILE: kernel/cpufreq.c:599:
+ ^Iup(&cpufreq_governor_sem);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#683: FILE: kernel/cpufreq.c:599:
+ ^Iup(&cpufreq_governor_sem);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#683: FILE: kernel/cpufreq.c:599:
+ ^Iup(&cpufreq_governor_sem);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#705: FILE: kernel/cpufreq.c:624:
+^I^Iif ((cpufreq_driver->policy[i].policy == CPUFREQ_POLICY_GOVERNOR) && $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cpufreq_driver->policy[i].policy == CPUFREQ_POLICY_GOVERNOR'
#705: FILE: kernel/cpufreq.c:624:
+		if ((cpufreq_driver->policy[i].policy == CPUFREQ_POLICY_GOVERNOR) && 
 		    (cpufreq_driver->policy[i].governor == governor)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cpufreq_driver->policy[i].governor == governor'
#705: FILE: kernel/cpufreq.c:624:
+		if ((cpufreq_driver->policy[i].policy == CPUFREQ_POLICY_GOVERNOR) && 
 		    (cpufreq_driver->policy[i].governor == governor)) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#811: FILE: kernel/cpufreq.c:750:
+ error_out:^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#857: FILE: kernel/cpufreq.c:844:
+^I^Iup(&cpufreq_driver_sem);^I^I$

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#873: FILE: kernel/cpufreq.c:856:
+	memset(cpufreq_driver->policy, 0, NR_CPUS * sizeof(struct cpufreq_policy));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'driver != cpufreq_driver'
#891: FILE: kernel/cpufreq.c:876:
+	if (!cpufreq_driver || (driver != cpufreq_driver)) {

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000387188.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 13 errors, 16 warnings, 12 checks, 802 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000387188.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
