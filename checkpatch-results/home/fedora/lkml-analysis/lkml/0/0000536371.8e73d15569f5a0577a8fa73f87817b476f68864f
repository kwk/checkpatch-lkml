WARNING:TYPO_SPELLING: 'EXTRAVERSION' may be misspelled - perhaps 'EXTROVERSION'?
#48: 
//  EXTRAVERSION =
    ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#85: FILE: fs/pipe.c:55:
+ * Do a quick page-table lookup for a single page. $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#87: FILE: fs/pipe.c:57:
+static struct page * follow_page(struct mm_struct *mm, unsigned long address) $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#87: FILE: fs/pipe.c:57:
+static struct page * follow_page(struct mm_struct *mm, unsigned long address) 

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#111: FILE: fs/pipe.c:81:
+}
+/* return values: 0 is success */

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#127: FILE: fs/pipe.c:97:
+		int r;
+		if (srcaddr >= vma->vm_end) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#141: FILE: fs/pipe.c:111:
+			int ret;
+			spin_unlock(&mm->page_table_lock);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#158: FILE: fs/pipe.c:128:
+		pcount = PAGE_SIZE-srcaddr%PAGE_SIZE;
 		                  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#158: FILE: fs/pipe.c:128:
+		pcount = PAGE_SIZE-srcaddr%PAGE_SIZE;
 		                          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#161: FILE: fs/pipe.c:131:
+		r = copy_to_user(dbuf, kaddr+srcaddr%PAGE_SIZE, pcount);
 		                            ^

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#161: FILE: fs/pipe.c:131:
+		r = copy_to_user(dbuf, kaddr+srcaddr%PAGE_SIZE, pcount);
 		                                    ^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#192: FILE: fs/pipe.c:162:
+		if(copy_to_user(ubuf, (void*)pio->addr, chars)) {

ERROR:SPACING: space required before the open parenthesis '('
#192: FILE: fs/pipe.c:162:
+		if(copy_to_user(ubuf, (void*)pio->addr, chars)) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#192: FILE: fs/pipe.c:162:
+		if(copy_to_user(ubuf, (void*)pio->addr, chars)) {
+			return -EFAULT;
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#200: FILE: fs/pipe.c:170:
+		switch(copy_user_to_user(ubuf, mm, pio->addr, chars))
+		{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required before the open parenthesis '('
#200: FILE: fs/pipe.c:170:
+		switch(copy_user_to_user(ubuf, mm, pio->addr, chars))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#237: FILE: fs/pipe.c:207:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#285: FILE: fs/pipe.c:228:
+		int chars = PIPE_LEN(*inode);
+		if (chars) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#288: FILE: fs/pipe.c:231:
+			int offset = PIPE_START(*inode);
+			if (chars > count)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#290: FILE: fs/pipe.c:233:
+			if (chars > PIPE_SIZE-offset)
 			                     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#291: FILE: fs/pipe.c:234:
+				chars = PIPE_SIZE-offset;
 				                 ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#292: FILE: fs/pipe.c:235:
+			if (copy_to_user(buf, pipebuf+offset, chars)) {
 			                             ^

ERROR:SPACING: space required before the open parenthesis '('
#310: FILE: fs/pipe.c:249:
+			if(chars < 0) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#344: FILE: fs/pipe.c:260:
+^I$

WARNING:LINE_SPACING: Missing a blank line after declarations
#449: FILE: fs/pipe.c:336:
+		int offset;
+		ret = 0;

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#454: FILE: fs/pipe.c:341:
+		if (free > PIPE_SIZE-offset)
 		                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#455: FILE: fs/pipe.c:342:
+			free = PIPE_SIZE-offset;
 			                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#461: FILE: fs/pipe.c:344:
+		if (copy_from_user(PIPE_BASE(*inode)+offset, buf, free)) {
 		                                    ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#504: FILE: fs/pipe.c:353:
+^I^I^I^I$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#510: FILE: fs/pipe.c:359:
+		inode->i_ctime = inode->i_mtime = CURRENT_TIME;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:SPACING: space required before the open parenthesis '('
#546: FILE: fs/pipe.c:372:
+		if(!access_ok(VERIFY_READ, buf, count))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#552: FILE: fs/pipe.c:376:
+		if (segment_eq(get_fs(),KERNEL_DS))
 		                       ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#559: FILE: fs/pipe.c:383:
+^I^I$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#560: FILE: fs/pipe.c:384:
+		inode->i_ctime = inode->i_mtime = CURRENT_TIME;

ERROR:SPACING: space required before the open parenthesis '('
#569: FILE: fs/pipe.c:393:
+		for(;;) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#636: FILE: fs/pipe.c:463:
+		struct pipe_pio *pio;
+		pio = list_entry(PIPE_PIO(*inode).next, struct pipe_pio, list);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000536371.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 14 errors, 8 warnings, 14 checks, 680 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000536371.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
