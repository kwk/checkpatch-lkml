WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#23: 
Created HP300 8250 driver which supports DCA and APCI ports. Support for APCI

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#33: FILE: drivers/serial/8250_hp300.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#51: FILE: drivers/serial/8250_hp300.c:19:
+#include <asm/io.h>

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#58: FILE: drivers/serial/8250_hp300.c:26:
+struct hp300_port
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#65: FILE: drivers/serial/8250_hp300.c:33:
+extern int hp300_uart_scode;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#94: FILE: drivers/serial/8250_hp300.c:62:
+ * Parse the bootinfo to find descriptions for headless console and $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#119: FILE: drivers/serial/8250_hp300.c:87:
+	if (scode == 256)
+	{

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#122: FILE: drivers/serial/8250_hp300.c:90:
+		printk(KERN_INFO "Serial console is HP APCI 1\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#130: FILE: drivers/serial/8250_hp300.c:98:
+		printk(KERN_WARNING "Serial console is APCI but support is disabled (CONFIG_HPAPCI)!\n");

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#134: FILE: drivers/serial/8250_hp300.c:102:
+	else
+	{

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#134: FILE: drivers/serial/8250_hp300.c:102:
+	}
+	else

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#138: FILE: drivers/serial/8250_hp300.c:106:
+		unsigned long pa = dio_scodetophysaddr(scode);
+		if (!pa) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BRACES: braces {} are not necessary for single statement blocks
#138: FILE: drivers/serial/8250_hp300.c:106:
+		if (!pa) {
+			return 0;
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#142: FILE: drivers/serial/8250_hp300.c:110:
+		printk(KERN_INFO "Serial console is HP DCA at select code %d\n", scode);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#153: FILE: drivers/serial/8250_hp300.c:121:
+		if (DIO_ID(pa + DIO_VIRADDRBASE) & 0x80) {
+			add_preferred_console("ttyS", port.line, "9600n8");
+		}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#157: FILE: drivers/serial/8250_hp300.c:125:
+		printk(KERN_WARNING "Serial console is DCA but support is disabled (CONFIG_HPDCA)!\n");

WARNING:BRACES: braces {} are not necessary for single statement blocks
#162: FILE: drivers/serial/8250_hp300.c:130:
+	if (early_serial_setup(&port) < 0) {
+		printk(KERN_WARNING "hp300_setup_serial_console(): early_serial_setup() failed.\n");
+	}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#163: FILE: drivers/serial/8250_hp300.c:131:
+		printk(KERN_WARNING "hp300_setup_serial_console(): early_serial_setup() failed.\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'hp300_setup_serial_console', this function's name, in a string
#163: FILE: drivers/serial/8250_hp300.c:131:
+		printk(KERN_WARNING "hp300_setup_serial_console(): early_serial_setup() failed.\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#172: FILE: drivers/serial/8250_hp300.c:140:
+	static int called = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:BRACES: braces {} are not necessary for single statement blocks
#186: FILE: drivers/serial/8250_hp300.c:154:
+	if (!MACH_IS_HP300) {
+		return -ENODEV;
+	}

ERROR:CODE_INDENT: code indent should use tabs where possible
#192: FILE: drivers/serial/8250_hp300.c:160:
+                /* We detect boards by looking for DIO boards which match a$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:CODE_INDENT: code indent should use tabs where possible
#193: FILE: drivers/serial/8250_hp300.c:161:
+                 * given subset of IDs. dio_find() returns the board's scancode.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#194: FILE: drivers/serial/8250_hp300.c:162:
+                 * The scancode to physaddr mapping is a property of the hardware,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#195: FILE: drivers/serial/8250_hp300.c:163:
+                 * as is the scancode to IPL (interrupt priority) mapping.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#196: FILE: drivers/serial/8250_hp300.c:164:
+                 */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#197: FILE: drivers/serial/8250_hp300.c:165:
+                scode = dio_find(DIO_ID_DCA0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#197: FILE: drivers/serial/8250_hp300.c:165:
+                scode = dio_find(DIO_ID_DCA0);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#198: FILE: drivers/serial/8250_hp300.c:166:
+                if (scode < 0)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#198: FILE: drivers/serial/8250_hp300.c:166:
+                if (scode < 0)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#200: FILE: drivers/serial/8250_hp300.c:168:
+                if (scode < 0)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#200: FILE: drivers/serial/8250_hp300.c:168:
+                if (scode < 0)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#202: FILE: drivers/serial/8250_hp300.c:170:
+                if (scode < 0)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#202: FILE: drivers/serial/8250_hp300.c:170:
+                if (scode < 0)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#204: FILE: drivers/serial/8250_hp300.c:172:
+                if (scode < 0)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#204: FILE: drivers/serial/8250_hp300.c:172:
+                if (scode < 0)$

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*port)...) over kmalloc(sizeof(struct hp300_port)...)
#216: FILE: drivers/serial/8250_hp300.c:184:
+		port = kmalloc(sizeof(struct hp300_port), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

ERROR:TRAILING_WHITESPACE: trailing whitespace
#221: FILE: drivers/serial/8250_hp300.c:189:
+^I^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#224: FILE: drivers/serial/8250_hp300.c:192:
+                /* If we want to tell the DIO code that this board is configured,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#225: FILE: drivers/serial/8250_hp300.c:193:
+                 * we should do that here.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#226: FILE: drivers/serial/8250_hp300.c:194:
+                 */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#227: FILE: drivers/serial/8250_hp300.c:195:
+                dio_config_board(scode);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#227: FILE: drivers/serial/8250_hp300.c:195:
+                dio_config_board(scode);$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 16)
#239: FILE: drivers/serial/8250_hp300.c:207:
+		if (hp300_uart_scode != scode) {
[...]
+                out_8(base + DIO_VIRADDRBASE + DCA_ID, 0xff);

ERROR:CODE_INDENT: code indent should use tabs where possible
#241: FILE: drivers/serial/8250_hp300.c:209:
+                /* Reset the DCA */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#242: FILE: drivers/serial/8250_hp300.c:210:
+                out_8(base + DIO_VIRADDRBASE + DCA_ID, 0xff);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#242: FILE: drivers/serial/8250_hp300.c:210:
+                out_8(base + DIO_VIRADDRBASE + DCA_ID, 0xff);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#243: FILE: drivers/serial/8250_hp300.c:211:
+                udelay(100);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#243: FILE: drivers/serial/8250_hp300.c:211:
+                udelay(100);$

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#243: FILE: drivers/serial/8250_hp300.c:211:
+                udelay(100);

usleep_range() should be preferred over udelay(). The proper way of
using usleep_range() is mentioned in the kernel docs.

See: https://www.kernel.org/doc/html/latest/timers/timers-howto.html#delays-information-on-the-various-kernel-delay-sleep-mechanisms

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#251: FILE: drivers/serial/8250_hp300.c:219:
+			printk(KERN_NOTICE "8250_hp300: register_serial() DCA scode %d"

WARNING:SPLIT_STRING: quoted string split across lines
#252: FILE: drivers/serial/8250_hp300.c:220:
+			printk(KERN_NOTICE "8250_hp300: register_serial() DCA scode %d"
+			       " irq %d failed\n", scode, serial_req.irq);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:CODE_INDENT: code indent should use tabs where possible
#267: FILE: drivers/serial/8250_hp300.c:235:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#267: FILE: drivers/serial/8250_hp300.c:235:
+        }$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#271: FILE: drivers/serial/8250_hp300.c:239:
+	if (hp300_model >= HP_400)
+	{

WARNING:BRACES: braces {} are not necessary for single statement blocks
#284: FILE: drivers/serial/8250_hp300.c:252:
+			if (i == 1) {
+				continue;
+			}

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*port)...) over kmalloc(sizeof(struct hp300_port)...)
#290: FILE: drivers/serial/8250_hp300.c:258:
+			port = kmalloc(sizeof(struct hp300_port), GFP_KERNEL);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#311: FILE: drivers/serial/8250_hp300.c:279:
+				printk(KERN_NOTICE "8250_hp300: register_serial() APCI %d"

WARNING:SPLIT_STRING: quoted string split across lines
#312: FILE: drivers/serial/8250_hp300.c:280:
+				printk(KERN_NOTICE "8250_hp300: register_serial() APCI %d"
+				       " irq %d failed\n", i, serial_req.irq);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000235282.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 26 errors, 30 warnings, 3 checks, 337 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000235282.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
