WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#29: 
The attached patch adds CONFIG_RCU_TORTURE_TEST, which enables a /proc-based

ERROR:CODE_INDENT: code indent should use tabs where possible
#170: FILE: fs/proc/proc_misc.c:568:
+^I^I^I         int count, int *eof, void *data)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#170: FILE: fs/proc/proc_misc.c:568:
+int rcu_read_proc_torture_writer(char *page, char **start, off_t off,
+			         int count, int *eof, void *data)

WARNING:LINE_SPACING: Missing a blank line after declarations
#173: FILE: fs/proc/proc_misc.c:571:
+	int len;
+	extern int rcu_read_proc_torture_writer_data(char *page);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#173: FILE: fs/proc/proc_misc.c:571:
+	extern int rcu_read_proc_torture_writer_data(char *page);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:CODE_INDENT: code indent should use tabs where possible
#180: FILE: fs/proc/proc_misc.c:578:
+^I^I^I         int count, int *eof, void *data)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#180: FILE: fs/proc/proc_misc.c:578:
+int rcu_read_proc_torture_reader(char *page, char **start, off_t off,
+			         int count, int *eof, void *data)

WARNING:LINE_SPACING: Missing a blank line after declarations
#183: FILE: fs/proc/proc_misc.c:581:
+	int len;
+	extern int rcu_read_proc_torture_reader_data(char *page);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#183: FILE: fs/proc/proc_misc.c:581:
+	extern int rcu_read_proc_torture_reader_data(char *page);

ERROR:CODE_INDENT: code indent should use tabs where possible
#190: FILE: fs/proc/proc_misc.c:588:
+^I^I^I        int count, int *eof, void *data)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#190: FILE: fs/proc/proc_misc.c:588:
+int rcu_read_proc_torture_stats(char *page, char **start, off_t off,
+			        int count, int *eof, void *data)

WARNING:LINE_SPACING: Missing a blank line after declarations
#193: FILE: fs/proc/proc_misc.c:591:
+	int len;
+	extern int rcu_read_proc_torture_stats_data(char *page);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#193: FILE: fs/proc/proc_misc.c:591:
+	extern int rcu_read_proc_torture_stats_data(char *page);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#222: FILE: include/linux/rcupdate.h:277:
+extern long rcu_batches_completed(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#224: FILE: include/linux/rcupdate.h:279:
+extern void rcu_torture_init(void);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#289: FILE: kernel/rcutorture.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#303: FILE: kernel/rcutorture.c:15:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#304: FILE: kernel/rcutorture.c:16:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#320: FILE: kernel/rcutorture.c:32:
+#include <asm/atomic.h>

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#343: FILE: kernel/rcutorture.c:55:
+static struct rcu_torture *rcu_torture_current = NULL;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#344: FILE: kernel/rcutorture.c:56:
+static long rcu_torture_current_version = 0;

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#348: FILE: kernel/rcutorture.c:60:
+static DEFINE_PER_CPU(long [RCU_TORTURE_PIPE_LEN + 1], rcu_torture_count) =
+	{ 0 };

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#350: FILE: kernel/rcutorture.c:62:
+static DEFINE_PER_CPU(long [RCU_TORTURE_PIPE_LEN + 1], rcu_torture_batch) =
+	{ 0 };

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#352: FILE: kernel/rcutorture.c:64:
+static atomic_t rcu_torture_wcount[RCU_TORTURE_PIPE_LEN + 1] =
+	{ ATOMIC_INIT(0) };

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#373: FILE: kernel/rcutorture.c:85:
+		return (NULL);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#379: FILE: kernel/rcutorture.c:91:
+	return (container_of(p, struct rcu_torture, rtort_free));

WARNING:BRACES: braces {} are not necessary for single statement blocks
#401: FILE: kernel/rcutorture.c:113:
+	if (i > RCU_TORTURE_PIPE_LEN) {
+		i = RCU_TORTURE_PIPE_LEN;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#405: FILE: kernel/rcutorture.c:117:
+	if (++rp->rtort_pipe_count >= RCU_TORTURE_PIPE_LEN) {
[...]
+	} else {
[...]

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#438: FILE: kernel/rcutorture.c:150:
+	return (swahw32(rrsp->rrs_state));

WARNING:BRACES: braces {} are not necessary for single statement blocks
#472: FILE: kernel/rcutorture.c:184:
+		if (rcu_batches_completed() == oldbatch) {
+			continue;
+		}

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#475: FILE: kernel/rcutorture.c:187:
+		if ((rp = rcu_torture_alloc()) == NULL) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#475: FILE: kernel/rcutorture.c:187:
+		if ((rp = rcu_torture_alloc()) == NULL) {
+			continue;
+		}

WARNING:MEMORY_BARRIER: memory barrier without comment
#482: FILE: kernel/rcutorture.c:194:
+		smp_wmb();

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "old_rp"
#483: FILE: kernel/rcutorture.c:195:
+		if (old_rp != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:BRACES: braces {} are not necessary for single statement blocks
#485: FILE: kernel/rcutorture.c:197:
+			if (i > RCU_TORTURE_PIPE_LEN) {
+				i = RCU_TORTURE_PIPE_LEN;
+			}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!p"
#521: FILE: kernel/rcutorture.c:233:
+		if (p == NULL) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#566: FILE: kernel/rcutorture.c:278:
+		if (pipesummary[i] != 0) {
+			break;
+		}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#578: FILE: kernel/rcutorture.c:290:
+	if (i > 1) {
+		cnt += sprintf(&page[cnt], "!!! ");
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#582: FILE: kernel/rcutorture.c:294:
+	for (i = 0; i < RCU_TORTURE_PIPE_LEN + 1; i++) {
+		cnt += sprintf(&page[cnt], " %ld", pipesummary[i]);
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#586: FILE: kernel/rcutorture.c:298:
+	for (i = 0; i < RCU_TORTURE_PIPE_LEN; i++) {
+		cnt += sprintf(&page[cnt], " %ld", batchsummary[i]);
+	}

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#595: FILE: kernel/rcutorture.c:307:
+	return (cnt);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#597: FILE: kernel/rcutorture.c:309:
+
+}

WARNING:ARRAY_SIZE: Prefer ARRAY_SIZE(rcu_tortures)
#604: FILE: kernel/rcutorture.c:316:
+	for (i = 0; i < sizeof(rcu_tortures) / sizeof(rcu_tortures[0]); i++) {

The ARRAY_SIZE(foo) macro should be preferred over
sizeof(foo)/sizeof(foo[0]) for finding number of elements in an
array.

The macro is defined in include/linux/kernel.h::

  #define ARRAY_SIZE(x) (sizeof(x) / sizeof((x)[0]))

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000146578.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 15 errors, 20 warnings, 8 checks, 526 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000146578.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
