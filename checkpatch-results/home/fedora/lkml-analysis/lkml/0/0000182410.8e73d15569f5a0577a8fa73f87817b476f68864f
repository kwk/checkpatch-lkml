WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#109: FILE: arch/i386/Kconfig:585:
+config X86_MCE_INTEL
+	bool "Intel MCE features"
+	depends on X86_MCE && X86_LOCAL_APIC
+	default y
 	help
+	   Additional support for intel specific MCE features such as
+	   Additional support for intel specific MCE features such as
+	   Additional support for intel specific MCE features such as
+	   the thermal monitor.
 

Kconfig symbols should have a help text which fully describes
it.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#159: FILE: arch/i386/kernel/cpu/common.c:30:
+extern void machine_check_init(struct cpuinfo_x86 *c);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#180: FILE: arch/i386/kernel/cpu/mcheck/init.c:17:
+extern int __init mce_dont_init;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#181: FILE: arch/i386/kernel/cpu/mcheck/init.c:18:
+extern void __init intel_p5_mcheck_init(struct cpuinfo_x86 *c);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#182: FILE: arch/i386/kernel/cpu/mcheck/init.c:19:
+void __init winchip_mcheck_init(struct cpuinfo_x86 *c);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#183: FILE: arch/i386/kernel/cpu/mcheck/init.c:20:
+void __init mcheck_init(struct cpuinfo_x86 *c);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#189: FILE: arch/i386/kernel/cpu/mcheck/init.c:22:
+fastcall void do_machine_check(struct pt_regs * regs, long error_code);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#189: FILE: arch/i386/kernel/cpu/mcheck/init.c:22:
+fastcall void do_machine_check(struct pt_regs * regs, long error_code);

WARNING:MEMORY_BARRIER: memory barrier without comment
#225: FILE: arch/i386/kernel/cpu/mcheck/init.c:53:
+			wmb();

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#313: FILE: arch/x86_64/kernel/mce.c:28:
+int __initdata mce_dont_init = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#328: FILE: arch/x86_64/kernel/mce.c:60:
+			/* cast &mcelog.flags to (unsigned long *) in
+			   order to prevent compiler warning in i386.

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:TRAILING_WHITESPACE: trailing whitespace
#329: FILE: arch/x86_64/kernel/mce.c:61:
+^I^I^I   It is OK to cast (unsigned *) to $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#332: FILE: arch/x86_64/kernel/mce.c:64:
+                         */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#333: FILE: arch/x86_64/kernel/mce.c:65:
+			set_bit(MCE_OVERFLOW, (unsigned long*)&mcelog.flags);

WARNING:LINE_SPACING: Missing a blank line after declarations
#353: FILE: arch/x86_64/kernel/mce.c:117:
+		u64 tsc = mcelog.entry[i].tsc;
+		if (time_before64(tsc, start))

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#372: FILE: arch/x86_64/kernel/mce.c:140:
+fastcall void do_machine_check(struct pt_regs * regs, long error_code)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#423: FILE: arch/x86_64/kernel/mce.h:11:
+#define MCG_CTL_P        (1ULL<<8)   /* MCG_CAP register available */
                               ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#423: FILE: arch/x86_64/kernel/mce.h:11:
+#define MCG_CTL_P        (1ULL<<8)   /* MCG_CAP register available */

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#424: FILE: arch/x86_64/kernel/mce.h:12:
+#define MCG_EXT_P        (1ULL<<9)   /* extended MSRs present */
                               ^

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#424: FILE: arch/x86_64/kernel/mce.h:12:
+#define MCG_EXT_P        (1ULL<<9)   /* extended MSRs present */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#437: FILE: arch/x86_64/kernel/mce.h:14:
+#define MCG_STATUS_RIPV  (1ULL<<0)   /* restart ip valid */
                               ^

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#437: FILE: arch/x86_64/kernel/mce.h:14:
+#define MCG_STATUS_RIPV  (1ULL<<0)   /* restart ip valid */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#438: FILE: arch/x86_64/kernel/mce.h:15:
+#define MCG_STATUS_EIPV  (1ULL<<1)   /* eip points to correct instruction */
                               ^

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#438: FILE: arch/x86_64/kernel/mce.h:15:
+#define MCG_STATUS_EIPV  (1ULL<<1)   /* eip points to correct instruction */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#439: FILE: arch/x86_64/kernel/mce.h:16:
+#define MCG_STATUS_MCIP  (1ULL<<2)   /* machine check in progress */
                               ^

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#439: FILE: arch/x86_64/kernel/mce.h:16:
+#define MCG_STATUS_MCIP  (1ULL<<2)   /* machine check in progress */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#441: FILE: arch/x86_64/kernel/mce.h:18:
+#define MCI_STATUS_VAL   (1ULL<<63)  /* valid error */
                               ^

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#441: FILE: arch/x86_64/kernel/mce.h:18:
+#define MCI_STATUS_VAL   (1ULL<<63)  /* valid error */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#442: FILE: arch/x86_64/kernel/mce.h:19:
+#define MCI_STATUS_OVER  (1ULL<<62)  /* previous errors lost */
                               ^

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#442: FILE: arch/x86_64/kernel/mce.h:19:
+#define MCI_STATUS_OVER  (1ULL<<62)  /* previous errors lost */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#443: FILE: arch/x86_64/kernel/mce.h:20:
+#define MCI_STATUS_UC    (1ULL<<61)  /* uncorrected error */
                               ^

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#443: FILE: arch/x86_64/kernel/mce.h:20:
+#define MCI_STATUS_UC    (1ULL<<61)  /* uncorrected error */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#444: FILE: arch/x86_64/kernel/mce.h:21:
+#define MCI_STATUS_EN    (1ULL<<60)  /* error enabled */
                               ^

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#444: FILE: arch/x86_64/kernel/mce.h:21:
+#define MCI_STATUS_EN    (1ULL<<60)  /* error enabled */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#445: FILE: arch/x86_64/kernel/mce.h:22:
+#define MCI_STATUS_MISCV (1ULL<<59)  /* misc error reg. valid */
                               ^

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#445: FILE: arch/x86_64/kernel/mce.h:22:
+#define MCI_STATUS_MISCV (1ULL<<59)  /* misc error reg. valid */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#446: FILE: arch/x86_64/kernel/mce.h:23:
+#define MCI_STATUS_ADDRV (1ULL<<58)  /* addr reg. valid */
                               ^

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#446: FILE: arch/x86_64/kernel/mce.h:23:
+#define MCI_STATUS_ADDRV (1ULL<<58)  /* addr reg. valid */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#447: FILE: arch/x86_64/kernel/mce.h:24:
+#define MCI_STATUS_PCC   (1ULL<<57)  /* processor context corrupt */
                               ^

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#447: FILE: arch/x86_64/kernel/mce.h:24:
+#define MCI_STATUS_PCC   (1ULL<<57)  /* processor context corrupt */

ERROR:SPACING: space required after that ',' (ctx:VxV)
#464: FILE: arch/x86_64/kernel/mce.h:81:
+#define time_after64(a,b)         \
                       ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#465: FILE: arch/x86_64/kernel/mce.h:82:
+        (typecheck(__u64, a) && \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#465: FILE: arch/x86_64/kernel/mce.h:82:
+        (typecheck(__u64, a) && \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#466: FILE: arch/x86_64/kernel/mce.h:83:
+         typecheck(__u64, b) && \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#466: FILE: arch/x86_64/kernel/mce.h:83:
+         typecheck(__u64, b) && \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#467: FILE: arch/x86_64/kernel/mce.h:84:
+         ((__s64)(b) - (__s64)(a) < 0))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#467: FILE: arch/x86_64/kernel/mce.h:84:
+         ((__s64)(b) - (__s64)(a) < 0))$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#468: FILE: arch/x86_64/kernel/mce.h:85:
+#define time_before64(a,b)        time_after64(b,a)
                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#468: FILE: arch/x86_64/kernel/mce.h:85:
+#define time_before64(a,b)        time_after64(b,a)
                                                 ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000182410.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 12 errors, 13 warnings, 24 checks, 373 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000182410.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
