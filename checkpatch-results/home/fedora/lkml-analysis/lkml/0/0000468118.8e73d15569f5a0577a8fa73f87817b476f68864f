WARNING:TYPO_SPELLING: 'orignial' may be misspelled - perhaps 'original'?
#51: 
situation should be better than both the orignial Oops bug,
                                         ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'imposible' may be misspelled - perhaps 'impossible'?
#54: 
imposible to handle situation.
^^^^^^^^^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#67: 
Kasper Dupont -- der bruger for meget tid på usenet.
                                           ^

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#76: 
diff -Nur linux.old/arch/i386/kernel/vm86.c linux.new/arch/i386/kernel/vm86.c

WARNING:TYPO_SPELLING: 'interrups' may be misspelled - perhaps 'interrupts'?
#101: FILE: arch/i386/kernel/vm86.c:304:
+ * end up with interrups disabled, but you ended up with
                ^^^^^^^^^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#136: FILE: arch/i386/kernel/vm86.c:356:
+#define pushb(base, ptr, val, regs, errcode) \
+	do { \
+		int err; \
+		__asm__ __volatile__(				\
+			"decw %w0\n\t"				\
+			"1: movb %3,0(%2,%0)\n\t"		\
+			"xor %1,%1\n\t"				\
+			"2:\n"					\
+			".section .fixup,\"ax\"\n\t"		\
+			"3:	movl $1,%1\n\t"			\
+			"	jmp 2b\n\t"			\
+			".previous\n"				\
+			".section __ex_table,\"a\"\n"		\
+			"	.align 4\n"			\
+			"	.long 1b,3b\n"			\
+			".previous"				\
+			: "=r" (ptr), "=r" (err)		\
+			: "r" (base), "q" (val), "0" (ptr));	\
+		if (err) \
+			return_to_32bit(regs, errcode); \
+	} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#156: FILE: arch/i386/kernel/vm86.c:376:
+	} while(0)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#158: FILE: arch/i386/kernel/vm86.c:378:
+#define pushw(base, ptr, val, regs, errcode) \
+	do { \
+		int err; \
+		__asm__ __volatile__(				\
+			"decw %w0\n\t"				\
+			"1: movb %h3,0(%2,%0)\n\t"		\
+			"decw %w0\n\t"				\
+			"2: movb %b3,0(%2,%0)\n\t"		\
+			"xor %1,%1\n\t"				\
+			"3:\n"					\
+			".section .fixup,\"ax\"\n\t"		\
+			"4:	movl $1,%1\n\t"			\
+			"	jmp 3b\n\t"			\
+			".previous\n"				\
+			".section __ex_table,\"a\"\n"		\
+			"	.align 4\n"			\
+			"	.long 1b,4b\n"			\
+			"	.long 2b,4b\n"			\
+			".previous"				\
+			: "=r" (ptr), "=r" (err)		\
+			: "r" (base), "q" (val), "0" (ptr));	\
+		if (err) \
+			return_to_32bit(regs, errcode); \
+	} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#181: FILE: arch/i386/kernel/vm86.c:401:
+	} while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#183: FILE: arch/i386/kernel/vm86.c:403:
+#define pushl(base, ptr, val, regs, errcode) \
+	do { \
+		int err; \
+		__asm__ __volatile__(				\
+			"decw %w0\n\t"				\
+			"rorl $16,%3\n\t"			\
+			"1: movb %h3,0(%2,%0)\n\t"		\
+			"decw %w0\n\t"				\
+			"2: movb %b3,0(%2,%0)\n\t"		\
+			"decw %w0\n\t"				\
+			"rorl $16,%3\n\t"			\
+			"3: movb %h3,0(%2,%0)\n\t"		\
+			"decw %w0\n\t"				\
+			"4: movb %b3,0(%2,%0)\n\t"		\
+			"xor %1,%1\n\t"				\
+			"5:\n"					\
+			".section .fixup,\"ax\"\n\t"		\
+			"6:	movl $1,%1\n\t"			\
+			"	jmp 5b\n\t"			\
+			".previous\n"				\
+			".section __ex_table,\"a\"\n"		\
+			"	.align 4\n"			\
+			"	.long 1b,6b\n"			\
+			"	.long 2b,6b\n"			\
+			"	.long 3b,6b\n"			\
+			"	.long 4b,6b\n"			\
+			".previous"				\
+			: "=r" (ptr), "=r" (err)		\
+			: "r" (base), "q" (val), "0" (ptr));	\
+		if (err) \
+			return_to_32bit(regs, errcode); \
+	} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#214: FILE: arch/i386/kernel/vm86.c:434:
+	} while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'base' - possible side-effects?
#216: FILE: arch/i386/kernel/vm86.c:436:
+#define popb(base, ptr, regs, errcode) \
+	({ \
+	 	unsigned long __res; \
+	 	unsigned int err; \
+		__asm__ __volatile__( \
+			"1:movb 0(%1,%0),%b2\n\t"		\
+			"incw %w0\n\t"				\
+			"xor %3,%3\n\t"				\
+			"2:\n"					\
+			".section .fixup,\"ax\"\n\t"		\
+			"3:	movl $1,%1\n\t"			\
+			"	jmp 2b\n\t"			\
+			".previous\n"				\
+			".section __ex_table,\"a\"\n"		\
+			"	.align 4\n"			\
+			"	.long 1b,3b\n"			\
+			".previous"				\
+			: "=r" (ptr), "=r" (base), "=q" (__res), \
+				"=r" (err) \
+			: "0" (ptr), "1" (base), "2" (0)); \
+		if (err) \
+			return_to_32bit(regs, errcode); \
+		__res; \
+	})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#216: FILE: arch/i386/kernel/vm86.c:436:
+#define popb(base, ptr, regs, errcode) \
+	({ \
+	 	unsigned long __res; \
+	 	unsigned int err; \
+		__asm__ __volatile__( \
+			"1:movb 0(%1,%0),%b2\n\t"		\
+			"incw %w0\n\t"				\
+			"xor %3,%3\n\t"				\
+			"2:\n"					\
+			".section .fixup,\"ax\"\n\t"		\
+			"3:	movl $1,%1\n\t"			\
+			"	jmp 2b\n\t"			\
+			".previous\n"				\
+			".section __ex_table,\"a\"\n"		\
+			"	.align 4\n"			\
+			"	.long 1b,3b\n"			\
+			".previous"				\
+			: "=r" (ptr), "=r" (base), "=q" (__res), \
+				"=r" (err) \
+			: "0" (ptr), "1" (base), "2" (0)); \
+		if (err) \
+			return_to_32bit(regs, errcode); \
+		__res; \
+	})

ERROR:CODE_INDENT: code indent should use tabs where possible
#218: FILE: arch/i386/kernel/vm86.c:438:
+^I ^Iunsigned long __res; \$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#218: FILE: arch/i386/kernel/vm86.c:438:
+^I ^Iunsigned long __res; \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#219: FILE: arch/i386/kernel/vm86.c:439:
+^I ^Iunsigned int err; \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#219: FILE: arch/i386/kernel/vm86.c:439:
+^I ^Iunsigned int err; \$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'base' - possible side-effects?
#241: FILE: arch/i386/kernel/vm86.c:461:
+#define popw(base, ptr, regs, errcode) \
+	({ \
+	 	unsigned long __res; \
+	 	unsigned int err; \
+		__asm__ __volatile__( \
+			"1:movb 0(%1,%0),%b2\n\t"		\
+			"incw %w0\n\t"				\
+			"2:movb 0(%1,%0),%h2\n\t"		\
+			"incw %w0\n\t"				\
+			"xor %3,%3\n\t"				\
+			"3:\n"					\
+			".section .fixup,\"ax\"\n\t"		\
+			"4:	movl $1,%1\n\t"			\
+			"	jmp 3b\n\t"			\
+			".previous\n"				\
+			".section __ex_table,\"a\"\n"		\
+			"	.align 4\n"			\
+			"	.long 1b,4b\n"			\
+			"	.long 2b,4b\n"			\
+			".previous"				\
+			: "=r" (ptr), "=r" (base), "=q" (__res), \
+				"=r" (err) \
+			: "0" (ptr), "1" (base), "2" (0)); \
+		if (err) \
+			return_to_32bit(regs, errcode); \
+		__res; \
+	})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#241: FILE: arch/i386/kernel/vm86.c:461:
+#define popw(base, ptr, regs, errcode) \
+	({ \
+	 	unsigned long __res; \
+	 	unsigned int err; \
+		__asm__ __volatile__( \
+			"1:movb 0(%1,%0),%b2\n\t"		\
+			"incw %w0\n\t"				\
+			"2:movb 0(%1,%0),%h2\n\t"		\
+			"incw %w0\n\t"				\
+			"xor %3,%3\n\t"				\
+			"3:\n"					\
+			".section .fixup,\"ax\"\n\t"		\
+			"4:	movl $1,%1\n\t"			\
+			"	jmp 3b\n\t"			\
+			".previous\n"				\
+			".section __ex_table,\"a\"\n"		\
+			"	.align 4\n"			\
+			"	.long 1b,4b\n"			\
+			"	.long 2b,4b\n"			\
+			".previous"				\
+			: "=r" (ptr), "=r" (base), "=q" (__res), \
+				"=r" (err) \
+			: "0" (ptr), "1" (base), "2" (0)); \
+		if (err) \
+			return_to_32bit(regs, errcode); \
+		__res; \
+	})

ERROR:CODE_INDENT: code indent should use tabs where possible
#243: FILE: arch/i386/kernel/vm86.c:463:
+^I ^Iunsigned long __res; \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#243: FILE: arch/i386/kernel/vm86.c:463:
+^I ^Iunsigned long __res; \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#244: FILE: arch/i386/kernel/vm86.c:464:
+^I ^Iunsigned int err; \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#244: FILE: arch/i386/kernel/vm86.c:464:
+^I ^Iunsigned int err; \$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'base' - possible side-effects?
#269: FILE: arch/i386/kernel/vm86.c:489:
+#define popl(base, ptr, regs, errcode) \
+	({ \
+	 	unsigned long __res; \
+	 	unsigned int err; \
+		__asm__ __volatile__( \
+			"1:movb 0(%1,%0),%b2\n\t"		\
+			"incw %w0\n\t"				\
+			"2:movb 0(%1,%0),%h2\n\t"		\
+			"incw %w0\n\t"				\
+			"rorl $16,%2\n\t"			\
+			"3:movb 0(%1,%0),%b2\n\t"		\
+			"incw %w0\n\t"				\
+			"4:movb 0(%1,%0),%h2\n\t"		\
+			"incw %w0\n\t"				\
+			"rorl $16,%2\n\t"			\
+			"xor %3,%3\n\t"				\
+			"5:\n"					\
+			".section .fixup,\"ax\"\n\t"		\
+			"6:	movl $1,%1\n\t"			\
+			"	jmp 5b\n\t"			\
+			".previous\n"				\
+			".section __ex_table,\"a\"\n"		\
+			"	.align 4\n"			\
+			"	.long 1b,6b\n"			\
+			"	.long 2b,6b\n"			\
+			"	.long 3b,6b\n"			\
+			"	.long 4b,6b\n"			\
+			".previous"				\
+			: "=r" (ptr), "=r" (base), "=q" (__res), \
+				"=r" (err) \
+			: "0" (ptr), "1" (base), "2" (0)); \
+		if (err) \
+			return_to_32bit(regs, errcode); \
+		__res; \
+	})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#269: FILE: arch/i386/kernel/vm86.c:489:
+#define popl(base, ptr, regs, errcode) \
+	({ \
+	 	unsigned long __res; \
+	 	unsigned int err; \
+		__asm__ __volatile__( \
+			"1:movb 0(%1,%0),%b2\n\t"		\
+			"incw %w0\n\t"				\
+			"2:movb 0(%1,%0),%h2\n\t"		\
+			"incw %w0\n\t"				\
+			"rorl $16,%2\n\t"			\
+			"3:movb 0(%1,%0),%b2\n\t"		\
+			"incw %w0\n\t"				\
+			"4:movb 0(%1,%0),%h2\n\t"		\
+			"incw %w0\n\t"				\
+			"rorl $16,%2\n\t"			\
+			"xor %3,%3\n\t"				\
+			"5:\n"					\
+			".section .fixup,\"ax\"\n\t"		\
+			"6:	movl $1,%1\n\t"			\
+			"	jmp 5b\n\t"			\
+			".previous\n"				\
+			".section __ex_table,\"a\"\n"		\
+			"	.align 4\n"			\
+			"	.long 1b,6b\n"			\
+			"	.long 2b,6b\n"			\
+			"	.long 3b,6b\n"			\
+			"	.long 4b,6b\n"			\
+			".previous"				\
+			: "=r" (ptr), "=r" (base), "=q" (__res), \
+				"=r" (err) \
+			: "0" (ptr), "1" (base), "2" (0)); \
+		if (err) \
+			return_to_32bit(regs, errcode); \
+		__res; \
+	})

ERROR:CODE_INDENT: code indent should use tabs where possible
#271: FILE: arch/i386/kernel/vm86.c:491:
+^I ^Iunsigned long __res; \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#271: FILE: arch/i386/kernel/vm86.c:491:
+^I ^Iunsigned long __res; \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#272: FILE: arch/i386/kernel/vm86.c:492:
+^I ^Iunsigned int err; \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#272: FILE: arch/i386/kernel/vm86.c:492:
+^I ^Iunsigned int err; \$

CHECK:CAMELCASE: Avoid CamelCase: <VM86_INTx>
#388: FILE: arch/i386/kernel/vm86.c:545:
+	pushw(ssp, sp, get_vflags(regs), regs, VM86_INTx + (i << 8));

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

ERROR:SPACING: space required after that ',' (ctx:VxV)
#422: FILE: arch/i386/kernel/vm86.c:605:
+		pushw(ssp,sp,popw(ssp,sp, regs, VM86_SIGSEGV) | TF_MASK, regs, VM86_SIGSEGV);
 		         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#422: FILE: arch/i386/kernel/vm86.c:605:
+		pushw(ssp,sp,popw(ssp,sp, regs, VM86_SIGSEGV) | TF_MASK, regs, VM86_SIGSEGV);
 		            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#422: FILE: arch/i386/kernel/vm86.c:605:
+		pushw(ssp,sp,popw(ssp,sp, regs, VM86_SIGSEGV) | TF_MASK, regs, VM86_SIGSEGV);
 		                     ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#462: FILE: arch/i386/kernel/vm86.c:640:
+			unsigned long newip=popl(ssp, sp, regs, VM86_SIGSEGV);
 			                   ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#463: FILE: arch/i386/kernel/vm86.c:641:
+			unsigned long newcs=popl(ssp, sp, regs, VM86_SIGSEGV);
 			                   ^

CHECK:SPACING: No space is necessary after a cast
#467: FILE: arch/i386/kernel/vm86.c:644:
+			SP(regs) += 12;

ERROR:CODE_INDENT: code indent should use tabs where possible
#498: FILE: arch/i386/kernel/vm86.c:671:
+^I        int intno=popb(csp, ip, regs, VM86_SIGSEGV);$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#498: FILE: arch/i386/kernel/vm86.c:671:
+	        int intno=popb(csp, ip, regs, VM86_SIGSEGV);
 	                 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#510: FILE: arch/i386/kernel/vm86.c:684:
+		unsigned short newip=popw(ssp, sp, regs, VM86_SIGSEGV);
 		                    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#511: FILE: arch/i386/kernel/vm86.c:685:
+		unsigned short newcs=popw(ssp, sp, regs, VM86_SIGSEGV);
 		                    ^

CHECK:SPACING: No space is necessary after a cast
#515: FILE: arch/i386/kernel/vm86.c:688:
+		SP(regs) += 6;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000468118.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 18 errors, 10 warnings, 13 checks, 434 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000468118.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
