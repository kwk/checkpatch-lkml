WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#43: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#48: FILE: include/linux/freezer.h:1:
+/* Freezer declarations */

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#66: FILE: include/linux/freezer.h:19:
+extern void do_freeze_process(struct notifier_block *nl);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:SPACING: space required before the open parenthesis '('
#71: FILE: include/linux/freezer.h:24:
+#define set_freezer_state(bit) do { } while(0)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#72: FILE: include/linux/freezer.h:25:
+#define clear_freezer_state(bit) do { } while(0)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#86: FILE: include/linux/sched.h:1455:
+extern void thaw_processes(int which_threads);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#115: FILE: include/linux/suspend.h:49:
+extern int freeze_processes(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#116: FILE: include/linux/suspend.h:50:
+extern void thaw_processes(int which_threads);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#124: FILE: include/linux/suspend.h:61:
 }
+static inline int freeze_processes(void) { return 0; }

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#230: FILE: kernel/power/process.c:18:
+unsigned long freezer_state = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#233: FILE: kernel/power/process.c:21:
+#define freezer_message(msg, a...) do { printk(msg, ##a); } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#233: FILE: kernel/power/process.c:21:
+#define freezer_message(msg, a...) do { printk(msg, ##a); } while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#233: FILE: kernel/power/process.c:21:
+#define freezer_message(msg, a...) do { printk(msg, ##a); } while(0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

ERROR:SPACING: space required before the open parenthesis '('
#235: FILE: kernel/power/process.c:23:
+#define freezer_message(msg, a...) do { } while(0)

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#244: FILE: kernel/power/process.c:32:
+struct frozen_fs
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#263: FILE: kernel/power/process.c:51:
+/* $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sb->s_frozen == SB_FREEZE_TRANS'
#274: FILE: kernel/power/process.c:62:
+		if (!sb->s_root || !sb->s_bdev ||
+		    (sb->s_frozen == SB_FREEZE_TRANS) ||
+		    (sb->s_flags & MS_RDONLY))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*fs)...) over kmalloc(sizeof(struct frozen_fs)...)
#279: FILE: kernel/power/process.c:67:
+		fs = kmalloc(sizeof(struct frozen_fs), GFP_ATOMIC);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:TYPO_SPELLING: 'dependant' may be misspelled - perhaps 'dependent'?
#284: FILE: kernel/power/process.c:72:
+	/* Do the freezing in reverse order so filesystems dependant
 	                                                   ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#286: FILE: kernel/power/process.c:74:
+	 * on ext3). */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:TRAILING_WHITESPACE: trailing whitespace
#311: FILE: kernel/power/process.c:137:
+^I$

ERROR:SPACING: space prohibited after that open parenthesis '('
#315: FILE: kernel/power/process.c:141:
+	freezer_message( "Stopping tasks: " );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#315: FILE: kernel/power/process.c:141:
+	freezer_message( "Stopping tasks: " );

ERROR:SPACING: space prohibited after that open parenthesis '('
#339: FILE: kernel/power/process.c:186:
+		freezer_message( "\n" );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#339: FILE: kernel/power/process.c:186:
+		freezer_message( "\n" );

ERROR:SPACING: space prohibited after that open parenthesis '('
#356: FILE: kernel/power/process.c:206:
+	freezer_message( "|\n" );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#356: FILE: kernel/power/process.c:206:
+	freezer_message( "|\n" );

ERROR:TRAILING_WHITESPACE: trailing whitespace
#358: FILE: kernel/power/process.c:208:
+^I$

ERROR:SPACING: space prohibited after that open parenthesis '('
#379: FILE: kernel/power/process.c:227:
+	freezer_message( "Restarting tasks..." );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#379: FILE: kernel/power/process.c:227:
+	freezer_message( "Restarting tasks..." );

WARNING:LINE_SPACING: Missing a blank line after declarations
#396: FILE: kernel/power/process.c:238:
+			int is_user = !!(p->mm && !(p->flags & PF_BORROWED_MM));
+			if (!freezeable(p) || (is_user != pass))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'is_user != pass'
#396: FILE: kernel/power/process.c:238:
+			if (!freezeable(p) || (is_user != pass))

ERROR:SPACING: space prohibited before that close parenthesis ')'
#399: FILE: kernel/power/process.c:241:
+				freezer_message(KERN_INFO " Strange, %s not stopped\n", p->comm );

ERROR:SPACING: space required before the open parenthesis '('
#403: FILE: kernel/power/process.c:245:
+	} while(pass < 2 && all);

ERROR:SPACING: space prohibited after that open parenthesis '('
#408: FILE: kernel/power/process.c:249:
+	freezer_message( " done\n" );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#408: FILE: kernel/power/process.c:249:
+	freezer_message( " done\n" );

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000064901.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 21 errors, 7 warnings, 8 checks, 377 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000064901.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
