WARNING:TYPO_SPELLING: 'flexibilty' may be misspelled - perhaps 'flexibility'?
#45: 
	me this flexibilty.
	        ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#94: 
diff -X /usr1/jhouston/dontdiff -urN linux-2.5.46.orig/arch/i386/kernel/apic.c linux-2.5.46/arch/i386/kernel/apic.c

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#138: FILE: arch/i386/kernel/apic.c:940:
+	if (!tmp_value || clocks/APIC_DIVISOR < tmp_value)
 	                        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#139: FILE: arch/i386/kernel/apic.c:941:
+		apic_write_around(APIC_TMICT, clocks/APIC_DIVISOR);
 		                                    ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#142: FILE: arch/i386/kernel/apic.c:944:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#159: FILE: arch/i386/kernel/apic.c:1037:
+^Iif (!run_posix_timers()) $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#188: FILE: arch/i386/kernel/signal.c:508:
 		switch (regs->eax) {
[...]
+			case -ERESTARTNANOSLP:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:TRAILING_WHITESPACE: trailing whitespace
#203: FILE: arch/i386/kernel/signal.c:597:
+^I^I * by a non delivered signal we want to complete $

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#218: FILE: arch/i386/kernel/smpboot.c:184:
+#if 0

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#228: FILE: arch/i386/kernel/smpboot.c:227:
+#if 0

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#231: FILE: arch/i386/kernel/smpboot.c:230:
+	one_usec = cpu_khz/1000;
 	                  ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#258: FILE: arch/i386/kernel/time.c:99:
+}
+void do_gettimeofday_ns(struct timespec *tv)

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#297: FILE: arch/i386/kernel/time.c:123:
+	tv->tv_usec = ts.tv_nsec/1000;
 	                        ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#301: FILE: arch/i386/kernel/time.c:126:
 
+

ERROR:SPACING: spaces required around that '+=' (ctx:WxV)
#310: FILE: arch/i386/kernel/time.c:135:
+	ts.tv_nsec +=ytime.tv_nsec;
 	           ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#357: FILE: arch/i386/kernel/time.c:175:
+	struct timespec ts;
+	ts.tv_sec = tv->tv_sec;

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#383: FILE: arch/i386/kernel/timers/timer_pit.c:118:
+	count = ((LATCH-1) - count) * tick_nsec;
 	               ^

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#406: FILE: arch/i386/kernel/timers/timer_tsc.c:51:
+#if 0

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#412: FILE: arch/i386/kernel/timers/timer_tsc.c:57:
+	edx = ((long long)fast_gettimeoffset_quotient*eax) >> 22;
 	                                             ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#425: FILE: arch/i386/kernel/timers/timer_tsc.c:90:
+	count = ((LATCH-1) - count) * tick_nsec;
 	               ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#447: FILE: arch/i386/kernel/timers/timer_tsc.c:109:
+#define CALIBRATE_TIME	((int)((1000000000LL*CALIBRATE_LATCH + \
                       	                    ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#448: FILE: arch/i386/kernel/timers/timer_tsc.c:110:
+			CLOCK_TICK_RATE/2) / CLOCK_TICK_RATE))
 			               ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#457: FILE: arch/i386/kernel/timers/timer_tsc.c:158:
+		if (endlow <= (CALIBRATE_TIME>>10))
 		                             ^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#463: FILE: arch/i386/kernel/timers/timer_tsc.c:163:
+			:"r" (endlow),
 			^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#464: FILE: arch/i386/kernel/timers/timer_tsc.c:164:
+			"0" (CALIBRATE_TIME<<22),
 			                   ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#465: FILE: arch/i386/kernel/timers/timer_tsc.c:165:
+			"1" (CALIBRATE_TIME>>10));
 			                   ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#482: FILE: arch/i386/kernel/timers/timer_tsc.c:267:
+^I^I^I * The formula is $

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#489: FILE: arch/i386/kernel/timers/timer_tsc.c:272:
+				eax = (long)(1000000LL<<22);
 				                      ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#490: FILE: arch/i386/kernel/timers/timer_tsc.c:273:
+				edx = (long)(1000000LL>>10);
 				                      ^

WARNING:TABSTOP: Statements should start on a tabstop
#552: FILE: include/asm-generic/siginfo.h:240:
+		 int _tid;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#571: FILE: include/asm-i386/posix_types.h:25:
+typedef int		__kernel_timer_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#572: FILE: include/asm-i386/posix_types.h:26:
+typedef int		__kernel_clockid_t;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#584: FILE: include/asm-i386/unistd.h:266:
+#define __NR_timer_settime	(__NR_timer_create+1)
                           	                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#585: FILE: include/asm-i386/unistd.h:267:
+#define __NR_timer_gettime	(__NR_timer_create+2)
                           	                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#586: FILE: include/asm-i386/unistd.h:268:
+#define __NR_timer_getoverrun	(__NR_timer_create+3)
                              	                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#587: FILE: include/asm-i386/unistd.h:269:
+#define __NR_timer_delete	(__NR_timer_create+4)
                          	                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#588: FILE: include/asm-i386/unistd.h:270:
+#define __NR_clock_settime	(__NR_timer_create+5)
                           	                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#589: FILE: include/asm-i386/unistd.h:271:
+#define __NR_clock_gettime	(__NR_timer_create+6)
                           	                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#590: FILE: include/asm-i386/unistd.h:272:
+#define __NR_clock_getres	(__NR_timer_create+7)
                          	                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#591: FILE: include/asm-i386/unistd.h:273:
+#define __NR_clock_nanosleep	(__NR_timer_create+8)
                             	                  ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#610: FILE: include/linux/id2ptr.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#611: FILE: include/linux/id2ptr.h:2:
+ * include/linux/id2ptr.h

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#612: FILE: include/linux/id2ptr.h:3:
+ * $

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#622: FILE: include/linux/id2ptr.h:13:
+#define ID_MASK ((1 << ID_BITS)-1)
                                ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#623: FILE: include/linux/id2ptr.h:14:
+#define ID_FULL ((1 << (1 << ID_BITS))-1)
                                       ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#630: FILE: include/linux/id2ptr.h:21:
+	struct id_layer	*ary[1<<ID_BITS];
 	               	      ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#646: FILE: include/linux/id2ptr.h:37:
+
+

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#650: FILE: include/linux/id2ptr.h:41:
+		p->bitmap |= 1<<bit;
 		              ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#652: FILE: include/linux/id2ptr.h:43:
+		p->bitmap &= ~(1<<bit);
 		                ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#677: FILE: include/linux/posix-timers.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#678: FILE: include/linux/posix-timers.h:2:
+ * include/linux/posix-timers.h

ERROR:TRAILING_WHITESPACE: trailing whitespace
#679: FILE: include/linux/posix-timers.h:3:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#699: FILE: include/linux/posix-timers.h:23:
+^Istruct rb_node^I^Iit_pq_node;^I$

WARNING:SPACING: Unnecessary space after function pointer open parenthesis
#737: FILE: include/linux/posix-timers.h:61:
+	int ( *clock_set)(struct timespec *tp);

ERROR:SPACING: space prohibited after that open parenthesis '('
#737: FILE: include/linux/posix-timers.h:61:
+	int ( *clock_set)(struct timespec *tp);

WARNING:SPACING: Unnecessary space after function pointer open parenthesis
#738: FILE: include/linux/posix-timers.h:62:
+	int ( *clock_get)(struct timespec *tp);

ERROR:SPACING: space prohibited after that open parenthesis '('
#738: FILE: include/linux/posix-timers.h:62:
+	int ( *clock_get)(struct timespec *tp);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#739: FILE: include/linux/posix-timers.h:63:
+^Iint ( *nsleep)(   int flags, $

WARNING:SPACING: Unnecessary space after function pointer open parenthesis
#739: FILE: include/linux/posix-timers.h:63:
+	int ( *nsleep)(   int flags, 

ERROR:SPACING: space prohibited after that open parenthesis '('
#739: FILE: include/linux/posix-timers.h:63:
+	int ( *nsleep)(   int flags, 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#740: FILE: include/linux/posix-timers.h:64:
+	int ( *nsleep)(   int flags, 
+			   struct timespec*new_setting,

ERROR:POINTER_LOCATION: "foo*bar" should be "foo *bar"
#740: FILE: include/linux/posix-timers.h:64:
+			   struct timespec*new_setting,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: Unnecessary space after function pointer open parenthesis
#742: FILE: include/linux/posix-timers.h:66:
+	int ( *timer_set)(struct k_itimer *timr, int flags,

ERROR:SPACING: space prohibited after that open parenthesis '('
#742: FILE: include/linux/posix-timers.h:66:
+	int ( *timer_set)(struct k_itimer *timr, int flags,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#743: FILE: include/linux/posix-timers.h:67:
+	int ( *timer_set)(struct k_itimer *timr, int flags,
+			   struct itimerspec *new_setting,

WARNING:SPACING: Unnecessary space after function pointer open parenthesis
#745: FILE: include/linux/posix-timers.h:69:
+	int  ( *timer_del)(struct k_itimer *timr);

ERROR:SPACING: space prohibited after that open parenthesis '('
#745: FILE: include/linux/posix-timers.h:69:
+	int  ( *timer_del)(struct k_itimer *timr);

WARNING:SPACING: Unnecessary space after function pointer open parenthesis
#746: FILE: include/linux/posix-timers.h:70:
+	void ( *timer_get)(struct k_itimer *timr,

ERROR:SPACING: space prohibited after that open parenthesis '('
#746: FILE: include/linux/posix-timers.h:70:
+	void ( *timer_get)(struct k_itimer *timr,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#785: FILE: include/linux/sched.h:648:
+extern void exit_itimers(struct task_struct *, int);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#785: FILE: include/linux/sched.h:648:
+extern void exit_itimers(struct task_struct *, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#785: FILE: include/linux/sched.h:648:
+extern void exit_itimers(struct task_struct *, int);

ERROR:CODE_INDENT: code indent should use tabs where possible
#808: FILE: include/linux/sysctl.h:132:
+  ^IKERN_POSIX_TIMERS=57,^I/* posix timer parameters */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#808: FILE: include/linux/sysctl.h:132:
+  ^IKERN_POSIX_TIMERS=57,^I/* posix timer parameters */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#808: FILE: include/linux/sysctl.h:132:
+  ^IKERN_POSIX_TIMERS=57,^I/* posix timer parameters */$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#808: FILE: include/linux/sysctl.h:132:
+  	KERN_POSIX_TIMERS=57,	/* posix timer parameters */
   	                 ^

ERROR:OPEN_BRACE: open brace '{' following enum go on the same line
#820: FILE: include/linux/sysctl.h:196:
+enum
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#821: FILE: include/linux/sysctl.h:197:
+	POSIX_TIMERS_RESOLUTION=1,
 	                       ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#822: FILE: include/linux/sysctl.h:198:
+	POSIX_TIMERS_NANOSLEEP_RES=2,
 	                          ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#823: FILE: include/linux/sysctl.h:199:
+	POSIX_TIMERS_MAX_EXPIRIES=3,
 	                         ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#824: FILE: include/linux/sysctl.h:200:
+	POSIX_TIMERS_RECOVERY_TIME=4,
 	                          ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#825: FILE: include/linux/sysctl.h:201:
+	POSIX_TIMERS_MIN_DELAY=5
 	                      ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#866: FILE: include/linux/time.h:141:
+extern int do_sys_settimeofday(struct timeval *tv, struct timezone *tz);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#875: FILE: include/linux/time.h:168:
+
+

WARNING:NEW_TYPEDEFS: do not add new typedefs
#903: FILE: include/linux/types.h:26:
+typedef __kernel_timer_t	timer_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#904: FILE: include/linux/types.h:27:
+typedef __kernel_clockid_t	clockid_t;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#951: FILE: kernel/id2ptr.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#952: FILE: kernel/id2ptr.c:2:
+ * linux/kernel/id2ptr.c

ERROR:TRAILING_WHITESPACE: trailing whitespace
#958: FILE: kernel/id2ptr.c:8:
+ * Small id to pointer translation service.  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#960: FILE: kernel/id2ptr.c:10:
+ * It uses a radix tree like structure as a sparse array indexed $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#967: FILE: kernel/id2ptr.c:17:
+
+

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#989: FILE: kernel/id2ptr.c:39:
+	if (!(p = id_free))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#990: FILE: kernel/id2ptr.c:40:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#994: FILE: kernel/id2ptr.c:44:
+	return(p);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1005: FILE: kernel/id2ptr.c:55:
+ * Lookup the kernel pointer associated with a user supplied $

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1021: FILE: kernel/id2ptr.c:71:
+		return(NULL);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1036: FILE: kernel/id2ptr.c:86:
+	int id_base = id & ~((1 << (shift+ID_BITS))-1);
 	                                 ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1036: FILE: kernel/id2ptr.c:86:
+	int id_base = id & ~((1 << (shift+ID_BITS))-1);
 	                                           ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1038: FILE: kernel/id2ptr.c:88:
+^I$

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1044: FILE: kernel/id2ptr.c:94:
+			p->bitmap |= 1<<n;
 			              ^

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1045: FILE: kernel/id2ptr.c:95:
+			return(id);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1049: FILE: kernel/id2ptr.c:99:
+		if ((v = sub_alloc(p->ary[n], shift-ID_BITS, id, ptr))) {
 		                                   ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1049: FILE: kernel/id2ptr.c:99:
+		if ((v = sub_alloc(p->ary[n], shift-ID_BITS, id, ptr))) {

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1051: FILE: kernel/id2ptr.c:101:
+			return(v);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1064: FILE: kernel/id2ptr.c:114:
+^I$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1068: FILE: kernel/id2ptr.c:118:
+	while (id_free_cnt < n+1) {
 	                      ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1079: FILE: kernel/id2ptr.c:129:
+	if ((last == ((1 << n)-1) && last < idp->min_wrap) ||
 	                      ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1080: FILE: kernel/id2ptr.c:130:
+	if ((last == ((1 << n)-1) && last < idp->min_wrap) ||
+		idp->count == (1 << n)) {

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1088: FILE: kernel/id2ptr.c:138:
+	if (last >= ((1 << n)-1))
 	                     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1095: FILE: kernel/id2ptr.c:145:
+	id = last+1;
 	         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1096: FILE: kernel/id2ptr.c:146:
+	if (!(v = sub_alloc(idp->top, n-ID_BITS, id, ptr)))
 	                               ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1096: FILE: kernel/id2ptr.c:146:
+	if (!(v = sub_alloc(idp->top, n-ID_BITS, id, ptr)))

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1097: FILE: kernel/id2ptr.c:147:
+		v = sub_alloc(idp->top, n-ID_BITS, 1, ptr);
 		                         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1101: FILE: kernel/id2ptr.c:151:
+	return(v+1);
 	        ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1104: FILE: kernel/id2ptr.c:154:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1109: FILE: kernel/id2ptr.c:159:
+^I$

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1111: FILE: kernel/id2ptr.c:161:
+	bitmap = p->bitmap & ~(1<<n);
 	                        ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1117: FILE: kernel/id2ptr.c:167:
+		if (sub_remove(p->ary[n], shift-ID_BITS, id)) {
 		                               ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1142: FILE: kernel/id2ptr.c:192:
+	sub_remove(idp->top, (idp->layers-1)*ID_BITS, id);
 	                                 ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1142: FILE: kernel/id2ptr.c:192:
+	sub_remove(idp->top, (idp->layers-1)*ID_BITS, id);
 	                                    ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1145: FILE: kernel/id2ptr.c:195:
+^I^I$

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1145: FILE: kernel/id2ptr.c:195:
+	if (id_free_cnt >= ID_FREE_MAX) {
+		

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1157: FILE: kernel/id2ptr.c:207:
+^I^Iid_layer_cache = kmem_cache_create("id_layer_cache", $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1158: FILE: kernel/id2ptr.c:208:
+		id_layer_cache = kmem_cache_create("id_layer_cache", 
+			sizeof(struct id_layer), 0, 0, 0, 0);

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#1173: FILE: kernel/id2ptr.c:223:
+__initcall(init_id_cache);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1178: FILE: kernel/posix-timers.c:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1181: FILE: kernel/posix-timers.c:4:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1188: FILE: kernel/posix-timers.c:11:
+ *^I     -^IAdd a separate queue for posix timers.  Its a $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1190: FILE: kernel/posix-timers.c:13:
+ * ^I^Ilinked list & a rbtree as an index into the list.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1197: FILE: kernel/posix-timers.c:20:
+ * ^IThis is an experimental change.  I'm sending it out to$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1198: FILE: kernel/posix-timers.c:21:
+ *^Ithe mailing list in the hope that it will stimulate $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1202: FILE: kernel/posix-timers.c:25:
+/* These are all the functions necessary to implement $

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#1212: FILE: kernel/posix-timers.c:35:
+#include <asm/uaccess.h>

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1223: FILE: kernel/posix-timers.c:46:
+
+

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1227: FILE: kernel/posix-timers.c:50:
+#define div_long_long_rem(dividend,divisor,remainder) ({ \
                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1227: FILE: kernel/posix-timers.c:50:
+#define div_long_long_rem(dividend,divisor,remainder) ({ \
                                           ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'remainder' may be better as '(remainder)' to avoid precedence issues
#1227: FILE: kernel/posix-timers.c:50:
+#define div_long_long_rem(dividend,divisor,remainder) ({ \
+		       u64 result = dividend;		\
+		       *remainder = do_div(result,divisor); \
+		       result; })

WARNING:TABSTOP: Statements should start on a tabstop
#1228: FILE: kernel/posix-timers.c:51:
+		       u64 result = dividend;		\

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1229: FILE: kernel/posix-timers.c:52:
+		       *remainder = do_div(result,divisor); \
 		                                 ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1234: FILE: kernel/posix-timers.c:57:
+
+

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1250: FILE: kernel/posix-timers.c:73:
+	.res = NSEC_PER_SEC/HZ,
 	                   ^

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#1254: FILE: kernel/posix-timers.c:77:
+	.res= NSEC_PER_SEC/HZ,
 	    ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1254: FILE: kernel/posix-timers.c:77:
+	.res= NSEC_PER_SEC/HZ,
 	                  ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1255: FILE: kernel/posix-timers.c:78:
+^I.clock_get = do_posix_clock_monotonic_gettime, $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1259: FILE: kernel/posix-timers.c:82:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1268: FILE: kernel/posix-timers.c:91:
+ * These parameters limit the timer interrupt load if the $

WARNING:TYPO_SPELLING: 'commited' may be misspelled - perhaps 'committed'?
#1269: FILE: kernel/posix-timers.c:92:
+ * timers are over commited.  
                    ^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1269: FILE: kernel/posix-timers.c:92:
+ * timers are over commited.  $

WARNING:LONG_LINE_COMMENT: line length of 151 exceeds 100 columns
#1273: FILE: kernel/posix-timers.c:96:
+static int recovery_time = 100000;	/* Recovery time used if we hit the */						/* timer expiry limit above. */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1277: FILE: kernel/posix-timers.c:100:
+
+

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1304: FILE: kernel/posix-timers.c:127:
+extern void set_APIC_timer(int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1304: FILE: kernel/posix-timers.c:127:
+extern void set_APIC_timer(int);

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1325: FILE: kernel/posix-timers.c:148:
+	if (ts.tv_sec || ts.tv_nsec > (1000000000/HZ))
 	                                         ^

ERROR:POINTER_LOCATION: "foo ** bar" should be "foo **bar"
#1337: FILE: kernel/posix-timers.c:160:
+	struct rb_node ** p = &pq->rb_root.rb_node;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1338: FILE: kernel/posix-timers.c:161:
+	struct rb_node * parent = NULL;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1341: FILE: kernel/posix-timers.c:164:
+	struct list_head *prev;
+	prev = &pq->head;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1344: FILE: kernel/posix-timers.c:167:
+		BUG();

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#1348: FILE: kernel/posix-timers.c:171:
+		cur = rb_entry(parent, struct k_itimer , it_pq_node);
 		                                       ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1356: FILE: kernel/posix-timers.c:179:
+		if (t->it_v.it_value.tv_sec < cur->it_v.it_value.tv_sec  ||
+			(t->it_v.it_value.tv_sec == cur->it_v.it_value.tv_sec &&

CHECK:BRACES: Unbalanced braces around else statement
#1359: FILE: kernel/posix-timers.c:182:
+		else {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1380: FILE: kernel/posix-timers.c:203:
+	if (!(pq = t->it_pq))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1396: FILE: kernel/posix-timers.c:219:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1405: FILE: kernel/posix-timers.c:228:
+^Iif (rv) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1412: FILE: kernel/posix-timers.c:235:
+ * If we are late delivering a periodic timer we may $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1413: FILE: kernel/posix-timers.c:236:
+ * have missed several expiries.  We want to calculate the $

WARNING:IF_1: Consider removing the #if 1 and its #endif
#1424: FILE: kernel/posix-timers.c:247:
+#if 1

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1428: FILE: kernel/posix-timers.c:251:
+	in =  (long long)t->it_v.it_interval.tv_sec*1000000000 +
 	                                           ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1463: FILE: kernel/posix-timers.c:286:
+^I^I(dt.tv_sec == t->it_v.it_interval.tv_sec && $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1463: FILE: kernel/posix-timers.c:286:
+	while (dt.tv_sec > t->it_v.it_interval.tv_sec ||
+		(dt.tv_sec == t->it_v.it_interval.tv_sec && 

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 25)
#1467: FILE: kernel/posix-timers.c:290:
+		if (dt.tv_nsec < 0) {
+			 dt.tv_sec--;

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#1494: FILE: kernel/posix-timers.c:317:
+	if (! (timr->it_sigev_notify & SIGEV_NONE)) {
 	    ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1520: FILE: kernel/posix-timers.c:343:
+ * Check if the timer at the head of the priority queue has $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1527: FILE: kernel/posix-timers.c:350:
+static int check_expiry(struct timer_pq *pq, struct timespec *tv,
+int *next_expiry, int *expiry_cnt)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1535: FILE: kernel/posix-timers.c:358:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1545: FILE: kernel/posix-timers.c:368:
+^I^I^I * till the next expiry if it's less than a $

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1549: FILE: kernel/posix-timers.c:372:
+				nsec = dt.tv_sec ? 1000000000-dt.tv_nsec :
 				                             ^

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1555: FILE: kernel/posix-timers.c:378:
+			return(tick_expired);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1570: FILE: kernel/posix-timers.c:393:
+^I^I^I   (dt.tv_sec == t->it_v.it_interval.tv_sec && $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1570: FILE: kernel/posix-timers.c:393:
+			if (dt.tv_sec > t->it_v.it_interval.tv_sec ||
+			   (dt.tv_sec == t->it_v.it_interval.tv_sec && 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1598: FILE: kernel/posix-timers.c:421:
+^I^I^I * If a clock_nanosleep is interrupted by a $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1599: FILE: kernel/posix-timers.c:422:
+^I^I^I * signal we leave the timer in the queue $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1610: FILE: kernel/posix-timers.c:433:
+^I^I * Limit the number of timers we expire from a $

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1620: FILE: kernel/posix-timers.c:443:
+	return(tick_expired);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1641: FILE: kernel/posix-timers.c:464:
+^I * hang during boot.  $

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1644: FILE: kernel/posix-timers.c:467:
+		set_APIC_timer(1000000000/HZ);
 		                         ^

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1645: FILE: kernel/posix-timers.c:468:
+		return(1);

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1649: FILE: kernel/posix-timers.c:472:
+	next_expiry = 1000000000/HZ;
 	                        ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1668: FILE: kernel/posix-timers.c:491:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1669: FILE: kernel/posix-timers.c:492:
+	
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1672: FILE: kernel/posix-timers.c:495:
+/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1688: FILE: kernel/posix-timers.c:511:
+ $

WARNING:TYPO_SPELLING: 'underlaying' may be misspelled - perhaps 'underlying'?
#1692: FILE: kernel/posix-timers.c:515:
+ *	    resolution may depend on the underlaying clock hardware and
   	                                 ^^^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1706: FILE: kernel/posix-timers.c:529:
+ *^I    fields are not modified by timer code. $

WARNING:TYPO_SPELLING: 'parms' may be misspelled - perhaps 'params'?
#1718: FILE: kernel/posix-timers.c:541:
+#define if_clock_do(clock_fun, alt_fun,parms)	(! clock_fun)? alt_fun parms :\
                                        ^^^^^

WARNING:TYPO_SPELLING: 'parms' may be misspelled - perhaps 'params'?
#1718: FILE: kernel/posix-timers.c:541:
+#define if_clock_do(clock_fun, alt_fun,parms)	(! clock_fun)? alt_fun parms :\
                                              	                       ^^^^^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1718: FILE: kernel/posix-timers.c:541:
+#define if_clock_do(clock_fun, alt_fun,parms)	(! clock_fun)? alt_fun parms :\
                                       ^

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#1718: FILE: kernel/posix-timers.c:541:
+#define if_clock_do(clock_fun, alt_fun,parms)	(! clock_fun)? alt_fun parms :\
                                              	 ^

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#1718: FILE: kernel/posix-timers.c:541:
+#define if_clock_do(clock_fun, alt_fun,parms)	(! clock_fun)? alt_fun parms :\
                                              	             ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1718: FILE: kernel/posix-timers.c:541:
+#define if_clock_do(clock_fun, alt_fun,parms)	(! clock_fun)? alt_fun parms :\
+							      clock_fun parms

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'clock_fun' - possible side-effects?
#1718: FILE: kernel/posix-timers.c:541:
+#define if_clock_do(clock_fun, alt_fun,parms)	(! clock_fun)? alt_fun parms :\
+							      clock_fun parms

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'clock_fun' may be better as '(clock_fun)' to avoid precedence issues
#1718: FILE: kernel/posix-timers.c:541:
+#define if_clock_do(clock_fun, alt_fun,parms)	(! clock_fun)? alt_fun parms :\
+							      clock_fun parms

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'parms' - possible side-effects?
#1718: FILE: kernel/posix-timers.c:541:
+#define if_clock_do(clock_fun, alt_fun,parms)	(! clock_fun)? alt_fun parms :\
+							      clock_fun parms

WARNING:TYPO_SPELLING: 'parms' may be misspelled - perhaps 'params'?
#1719: FILE: kernel/posix-timers.c:542:
+							      clock_fun parms
 							                ^^^^^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1721: FILE: kernel/posix-timers.c:544:
+#define p_timer_get( clock,a,b) if_clock_do((clock)->timer_get, \
                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1721: FILE: kernel/posix-timers.c:544:
+#define p_timer_get( clock,a,b) if_clock_do((clock)->timer_get, \
                             ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#1721: FILE: kernel/posix-timers.c:544:
+#define p_timer_get( clock,a,b) if_clock_do((clock)->timer_get, \

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1723: FILE: kernel/posix-timers.c:546:
+					     (a,b))
 					       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1725: FILE: kernel/posix-timers.c:548:
+#define p_nsleep( clock,a,b,c) if_clock_do((clock)->nsleep,   \
                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1725: FILE: kernel/posix-timers.c:548:
+#define p_nsleep( clock,a,b,c) if_clock_do((clock)->nsleep,   \
                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1725: FILE: kernel/posix-timers.c:548:
+#define p_nsleep( clock,a,b,c) if_clock_do((clock)->nsleep,   \
                            ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#1725: FILE: kernel/posix-timers.c:548:
+#define p_nsleep( clock,a,b,c) if_clock_do((clock)->nsleep,   \

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1727: FILE: kernel/posix-timers.c:550:
+					    (a,b,c))
 					      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1727: FILE: kernel/posix-timers.c:550:
+					    (a,b,c))
 					        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1729: FILE: kernel/posix-timers.c:552:
+#define p_timer_del( clock,a) if_clock_do((clock)->timer_del, \
                           ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#1729: FILE: kernel/posix-timers.c:552:
+#define p_timer_del( clock,a) if_clock_do((clock)->timer_del, \

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1733: FILE: kernel/posix-timers.c:556:
+void register_posix_clock(int clock_id, struct k_clock * new_clock);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1733: FILE: kernel/posix-timers.c:556:
+void register_posix_clock(int clock_id, struct k_clock * new_clock);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1735: FILE: kernel/posix-timers.c:558:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1737: FILE: kernel/posix-timers.c:560:
+void register_posix_clock(int clock_id,struct k_clock * new_clock)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1737: FILE: kernel/posix-timers.c:560:
+void register_posix_clock(int clock_id,struct k_clock * new_clock)
                                       ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1739: FILE: kernel/posix-timers.c:562:
+	if ((unsigned)clock_id >= MAX_CLOCKS) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1740: FILE: kernel/posix-timers.c:563:
+		printk("POSIX clock register failed for clock_id %d\n",clock_id);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1740: FILE: kernel/posix-timers.c:563:
+		printk("POSIX clock register failed for clock_id %d\n",clock_id);
 		                                                      ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1752: FILE: kernel/posix-timers.c:575:
+	posix_timers_cache = kmem_cache_create("posix_timers_cache",
+		sizeof(struct k_itimer), 0, 0, 0, 0);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1755: FILE: kernel/posix-timers.c:578:
+	for (i = 0; i < NR_CPUS; i++) {

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1764: FILE: kernel/posix-timers.c:587:
+		t->it_v.it_interval.tv_nsec = 1000000000/HZ;
 		                                        ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#1768: FILE: kernel/posix-timers.c:591:
+	register_posix_clock(CLOCK_REALTIME,&clock_realtime);
 	                                   ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#1768: FILE: kernel/posix-timers.c:591:
+	register_posix_clock(CLOCK_REALTIME,&clock_realtime);
 	                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#1769: FILE: kernel/posix-timers.c:592:
+	register_posix_clock(CLOCK_MONOTONIC,&clock_monotonic);
 	                                    ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#1769: FILE: kernel/posix-timers.c:592:
+	register_posix_clock(CLOCK_MONOTONIC,&clock_monotonic);
 	                                     ^

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#1774: FILE: kernel/posix-timers.c:597:
+__initcall(init_posix_timers);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1776: FILE: kernel/posix-timers.c:599:
+static struct task_struct * good_sigevent(sigevent_t *event)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1778: FILE: kernel/posix-timers.c:601:
+	struct task_struct * rtn = current;

ERROR:SPACING: space prohibited after that open parenthesis '('
#1781: FILE: kernel/posix-timers.c:604:
+		if ( !(rtn = find_task_by_pid(event->sigev_notify_thread_id)) ||

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1781: FILE: kernel/posix-timers.c:604:
+		if ( !(rtn = find_task_by_pid(event->sigev_notify_thread_id)) ||

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1782: FILE: kernel/posix-timers.c:605:
+		if ( !(rtn = find_task_by_pid(event->sigev_notify_thread_id)) ||
+		     rtn->tgid != current->tgid){

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1787: FILE: kernel/posix-timers.c:610:
+		if ((unsigned)(event->sigev_signo > SIGRTMAX))

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1790: FILE: kernel/posix-timers.c:613:
+	if (event->sigev_notify & ~(SIGEV_SIGNAL | SIGEV_THREAD_ID )) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1790: FILE: kernel/posix-timers.c:613:
+	if (event->sigev_notify & ~(SIGEV_SIGNAL | SIGEV_THREAD_ID )) {
+		return NULL;
+	}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1796: FILE: kernel/posix-timers.c:619:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1798: FILE: kernel/posix-timers.c:621:
+static struct k_itimer * alloc_posix_timer(void)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1801: FILE: kernel/posix-timers.c:624:
+	struct k_itimer *tmr;
+	tmr = kmem_cache_alloc(posix_timers_cache, GFP_KERNEL);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1803: FILE: kernel/posix-timers.c:626:
+	return(tmr);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1812: FILE: kernel/posix-timers.c:635:
+^I^I^I $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1817: FILE: kernel/posix-timers.c:640:
+sys_timer_create(clockid_t which_clock, struct sigevent *timer_event_spec,
+				timer_t *created_timer_id)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1822: FILE: kernel/posix-timers.c:645:
+	struct task_struct * process = 0;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1825: FILE: kernel/posix-timers.c:648:
+	if ((unsigned)which_clock >= MAX_CLOCKS || !posix_clocks[which_clock])

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1829: FILE: kernel/posix-timers.c:652:
+	if (new_timer == NULL) return -EAGAIN;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!new_timer"
#1829: FILE: kernel/posix-timers.c:652:
+	if (new_timer == NULL) return -EAGAIN;

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1838: FILE: kernel/posix-timers.c:661:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1839: FILE: kernel/posix-timers.c:662:
+^Iif (copy_to_user(created_timer_id, &new_timer_id, $

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1851: FILE: kernel/posix-timers.c:674:
+		if ((process = good_sigevent(&event))) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1855: FILE: kernel/posix-timers.c:678:
+^I^I^I * case the we clear posix_timers.next in $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1861: FILE: kernel/posix-timers.c:684:
+				list_add(&new_timer->it_task_list,
+					&process->posix_timers);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1895: FILE: kernel/posix-timers.c:718:
+
+

ERROR:SPACING: space required before the open brace '{'
#1901: FILE: kernel/posix-timers.c:724:
+	if (sys_timer_delete(timer->it_id)){

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1901: FILE: kernel/posix-timers.c:724:
+	if (sys_timer_delete(timer->it_id)){
+		BUG();
+	}

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1902: FILE: kernel/posix-timers.c:725:
+		BUG();

ERROR:SPACING: space required before the open brace '{'
#1920: FILE: kernel/posix-timers.c:743:
+	while (tsk->posix_timers.next != &tsk->posix_timers){

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1922: FILE: kernel/posix-timers.c:745:
+		 tmr = list_entry(tsk->posix_timers.next,struct k_itimer,
 		                                        ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1923: FILE: kernel/posix-timers.c:746:
+		 tmr = list_entry(tsk->posix_timers.next,struct k_itimer,
+			it_task_list);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1933: FILE: kernel/posix-timers.c:756:
+`	 */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1954: FILE: kernel/posix-timers.c:777:
+^Iif ((ts == NULL) || $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ts == NULL'
#1954: FILE: kernel/posix-timers.c:777:
+	if ((ts == NULL) || 
+	    (ts->tv_sec < 0) ||
+	    ((unsigned)ts->tv_nsec >= NSEC_PER_SEC))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ts->tv_sec < 0'
#1954: FILE: kernel/posix-timers.c:777:
+	if ((ts == NULL) || 
+	    (ts->tv_sec < 0) ||
+	    ((unsigned)ts->tv_nsec >= NSEC_PER_SEC))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ts"
#1954: FILE: kernel/posix-timers.c:777:
+	if ((ts == NULL) || 

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1956: FILE: kernel/posix-timers.c:779:
+	    ((unsigned)ts->tv_nsec >= NSEC_PER_SEC))

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1966: FILE: kernel/posix-timers.c:789:
+static struct k_itimer* lock_timer( timer_t timer_id)

ERROR:SPACING: space prohibited after that open parenthesis '('
#1966: FILE: kernel/posix-timers.c:789:
+static struct k_itimer* lock_timer( timer_t timer_id)

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1974: FILE: kernel/posix-timers.c:797:
+	return(timr);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1977: FILE: kernel/posix-timers.c:800:
+/* $

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#1982: FILE: kernel/posix-timers.c:805:
+void inline do_timer_gettime(struct k_itimer *timr,

The inline keyword should sit between storage class and type.

For example, the following segment::

  inline static int example_function(void)
  {
          ...
  }

should be::

  static inline int example_function(void)
  {
          ...
  }

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1995: FILE: kernel/posix-timers.c:818:
+		ts.tv_sec = ts.tv_nsec = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#2007: FILE: kernel/posix-timers.c:830:
+	if (!timr) return -EINVAL;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2009: FILE: kernel/posix-timers.c:832:
+	p_timer_get(posix_clocks[timr->it_clock],timr, &cur_setting);
 	                                        ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2012: FILE: kernel/posix-timers.c:835:
+^I$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2018: FILE: kernel/posix-timers.c:841:
+}
+/*

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2034: FILE: kernel/posix-timers.c:857:
+	struct task_struct * t;

ERROR:SPACING: space prohibited after that open parenthesis '('
#2036: FILE: kernel/posix-timers.c:859:
+	timr = lock_timer( timer_id);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#2037: FILE: kernel/posix-timers.c:860:
+	if (!timr) return -EINVAL;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2042: FILE: kernel/posix-timers.c:865:
+^Ifor (sig_queue = &t->sig->shared_pending, i = 2; i; $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'q->info.si_code == SI_TIMER'
#2045: FILE: kernel/posix-timers.c:868:
+			if ((q->info.si_code == SI_TIMER) &&
+			    (q->info.si_tid == timr->it_id)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'q->info.si_tid == timr->it_id'
#2045: FILE: kernel/posix-timers.c:868:
+			if ((q->info.si_code == SI_TIMER) &&
+			    (q->info.si_tid == timr->it_id)) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#2047: FILE: kernel/posix-timers.c:870:
+			    (q->info.si_tid == timr->it_id)) {
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2055: FILE: kernel/posix-timers.c:878:
+^I$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2065: FILE: kernel/posix-timers.c:888:
+static int  adjust_rel_time(struct k_clock *clock,struct timespec *tp)
                                                  ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2069: FILE: kernel/posix-timers.c:892:
+
+

ERROR:SPACING: space required after that ',' (ctx:VxO)
#2070: FILE: kernel/posix-timers.c:893:
+	do_posix_gettime(clock,&now);
 	                      ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#2070: FILE: kernel/posix-timers.c:893:
+	do_posix_gettime(clock,&now);
 	                       ^

ERROR:SPACING: space required before the open brace '{'
#2074: FILE: kernel/posix-timers.c:897:
+	if (( tp->tv_nsec - NSEC_PER_SEC) >= 0){

ERROR:SPACING: space prohibited after that open parenthesis '('
#2074: FILE: kernel/posix-timers.c:897:
+	if (( tp->tv_nsec - NSEC_PER_SEC) >= 0){

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2087: FILE: kernel/posix-timers.c:910:
+	struct k_clock * clock = posix_clocks[timr->it_clock];

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2090: FILE: kernel/posix-timers.c:913:
+	if (old_setting) {
+		do_timer_gettime(timr, old_setting);
+	}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2093: FILE: kernel/posix-timers.c:916:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2094: FILE: kernel/posix-timers.c:917:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2094: FILE: kernel/posix-timers.c:917:
+	
+	

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'new_setting->it_value.tv_sec == 0'
#2096: FILE: kernel/posix-timers.c:919:
+	if ((new_setting->it_value.tv_sec == 0) &&
+		(new_setting->it_value.tv_nsec == 0)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'new_setting->it_value.tv_nsec == 0'
#2096: FILE: kernel/posix-timers.c:919:
+	if ((new_setting->it_value.tv_sec == 0) &&
+		(new_setting->it_value.tv_nsec == 0)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2097: FILE: kernel/posix-timers.c:920:
+	if ((new_setting->it_value.tv_sec == 0) &&
+		(new_setting->it_value.tv_nsec == 0)) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2106: FILE: kernel/posix-timers.c:929:
+^Itimr->it_overrun_deferred = $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2107: FILE: kernel/posix-timers.c:930:
+^I^Itimr->it_overrun_last = $

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2118: FILE: kernel/posix-timers.c:941:
+	nsec +=  res-1;
 	            ^

ERROR:SPACING: spaces required around that '-=' (ctx:WxV)
#2121: FILE: kernel/posix-timers.c:944:
+		nsec -=1000000000;
 		     ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2127: FILE: kernel/posix-timers.c:950:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2140: FILE: kernel/posix-timers.c:963:
+
+

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2141: FILE: kernel/posix-timers.c:964:
+	if (new_setting == NULL) {
+		return -EINVAL;
+	}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!new_setting"
#2141: FILE: kernel/posix-timers.c:964:
+	if (new_setting == NULL) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2145: FILE: kernel/posix-timers.c:968:
+	if (copy_from_user(&new_spec, new_setting, sizeof(new_spec))) {
+		return -EFAULT;
+	}

ERROR:SPACING: space prohibited after that open parenthesis '('
#2154: FILE: kernel/posix-timers.c:977:
+	timr = lock_timer( timer_id);

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#2158: FILE: kernel/posix-timers.c:981:
+#if 0

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2167: FILE: kernel/posix-timers.c:990:
+		error = do_timer_settime(timr, flags, &new_spec, rtn );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2169: FILE: kernel/posix-timers.c:992:
+		error = clock->timer_set(timr, flags, &new_spec, rtn );

ERROR:SPACING: space prohibited after that '!' (ctx:WxW)
#2172: FILE: kernel/posix-timers.c:995:
+	if (old_setting && ! error) {
 	                   ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2173: FILE: kernel/posix-timers.c:996:
+		if (copy_to_user(old_setting, &old_spec, sizeof(old_spec))) {
+			error = -EFAULT;
+		}

ERROR:SPACING: space prohibited after that open parenthesis '('
#2192: FILE: kernel/posix-timers.c:1015:
+	timer = lock_timer( timer_id);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2196: FILE: kernel/posix-timers.c:1019:
+	p_timer_del(posix_clocks[timer->it_clock],timer);
 	                                         ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2211: FILE: kernel/posix-timers.c:1034:
+}
+/*

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#2219: FILE: kernel/posix-timers.c:1042:
+{
+

ERROR:SPACING: space required before the open brace '{'
#2220: FILE: kernel/posix-timers.c:1043:
+	if (clock->clock_get){

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2220: FILE: kernel/posix-timers.c:1043:
+	if (clock->clock_get){
+		return clock->clock_get(tp);
+	}

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#2230: FILE: kernel/posix-timers.c:1053:
+extern unsigned long fast_gettimeoffset_quotient;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2243: FILE: kernel/posix-timers.c:1066:
+asmlinkage int sys_clock_settime(clockid_t which_clock,const struct timespec *tp)
                                                       ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2247: FILE: kernel/posix-timers.c:1070:
+	if ((unsigned)which_clock >= MAX_CLOCKS || !posix_clocks[which_clock])

ERROR:SPACING: space required before the open brace '{'
#2251: FILE: kernel/posix-timers.c:1074:
+	if ( posix_clocks[which_clock]->clock_set){

ERROR:SPACING: space prohibited after that open parenthesis '('
#2251: FILE: kernel/posix-timers.c:1074:
+	if ( posix_clocks[which_clock]->clock_set){

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2251: FILE: kernel/posix-timers.c:1074:
+	if ( posix_clocks[which_clock]->clock_set){
+		return posix_clocks[which_clock]->clock_set(&new_tp);
+	}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2263: FILE: kernel/posix-timers.c:1086:
+^I$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2264: FILE: kernel/posix-timers.c:1087:
+	if ((unsigned)which_clock >= MAX_CLOCKS || !posix_clocks[which_clock])

ERROR:SPACING: space required after that ',' (ctx:VxO)
#2267: FILE: kernel/posix-timers.c:1090:
+	error = do_posix_gettime(posix_clocks[which_clock],&rtn_tp);
 	                                                  ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#2267: FILE: kernel/posix-timers.c:1090:
+	error = do_posix_gettime(posix_clocks[which_clock],&rtn_tp);
 	                                                   ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2268: FILE: kernel/posix-timers.c:1091:
+^I $

ERROR:SPACING: space prohibited after that '!' (ctx:WxW)
#2269: FILE: kernel/posix-timers.c:1092:
+	if ( ! error) {
 	     ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#2269: FILE: kernel/posix-timers.c:1092:
+	if ( ! error) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2270: FILE: kernel/posix-timers.c:1093:
+		if (copy_to_user(tp, &rtn_tp, sizeof(rtn_tp))) {
+			error = -EFAULT;
+		}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2275: FILE: kernel/posix-timers.c:1098:
+^I^I $

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#2276: FILE: kernel/posix-timers.c:1099:
+		 
+}

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2277: FILE: kernel/posix-timers.c:1100:
+}
+asmlinkage int	 sys_clock_getres(clockid_t which_clock, struct timespec *tp)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2281: FILE: kernel/posix-timers.c:1104:
+	if ((unsigned)which_clock >= MAX_CLOCKS || !posix_clocks[which_clock])

ERROR:SPACING: space required before the open brace '{'
#2286: FILE: kernel/posix-timers.c:1109:
+	if ( tp){

ERROR:SPACING: space prohibited after that open parenthesis '('
#2286: FILE: kernel/posix-timers.c:1109:
+	if ( tp){

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2287: FILE: kernel/posix-timers.c:1110:
+		if (copy_to_user(tp, &rtn_tp, sizeof(rtn_tp))) {
+			return -EFAULT;
+		}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2292: FILE: kernel/posix-timers.c:1115:
+^I $

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#2293: FILE: kernel/posix-timers.c:1116:
+	 
+}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2307: FILE: kernel/posix-timers.c:1130:
+ * change.  If this change is missing an interrupted nanosleep will $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2310: FILE: kernel/posix-timers.c:1133:
+int do_clock_nanosleep(clockid_t which_clock, int flags, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2311: FILE: kernel/posix-timers.c:1134:
+int do_clock_nanosleep(clockid_t which_clock, int flags, 
+const struct timespec *rqtp, struct timespec *rmtp, int from_nanosleep)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2319: FILE: kernel/posix-timers.c:1142:
+	if ((unsigned)which_clock >= MAX_CLOCKS || !posix_clocks[which_clock])

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2340: FILE: kernel/posix-timers.c:1163:
+^Iif (t->it_pq) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2343: FILE: kernel/posix-timers.c:1166:
+^I^I$

ERROR:SPACING: space required before the open parenthesis '('
#2344: FILE: kernel/posix-timers.c:1167:
+	if(copy_from_user(&t->it_v.it_value, rqtp, sizeof(struct timespec)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 't->it_v.it_value.tv_nsec < 0'
#2347: FILE: kernel/posix-timers.c:1170:
+	if ((t->it_v.it_value.tv_nsec < 0) ||
+		(t->it_v.it_value.tv_nsec >= NSEC_PER_SEC) ||
+		(t->it_v.it_value.tv_sec < 0))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 't->it_v.it_value.tv_nsec >= NSEC_PER_SEC'
#2347: FILE: kernel/posix-timers.c:1170:
+	if ((t->it_v.it_value.tv_nsec < 0) ||
+		(t->it_v.it_value.tv_nsec >= NSEC_PER_SEC) ||
+		(t->it_v.it_value.tv_sec < 0))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 't->it_v.it_value.tv_sec < 0'
#2347: FILE: kernel/posix-timers.c:1170:
+	if ((t->it_v.it_value.tv_nsec < 0) ||
+		(t->it_v.it_value.tv_nsec >= NSEC_PER_SEC) ||
+		(t->it_v.it_value.tv_sec < 0))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2348: FILE: kernel/posix-timers.c:1171:
+	if ((t->it_v.it_value.tv_nsec < 0) ||
+		(t->it_v.it_value.tv_nsec >= NSEC_PER_SEC) ||

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#2354: FILE: kernel/posix-timers.c:1177:
+#if 0

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#2362: FILE: kernel/posix-timers.c:1185:
+#if 0

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2372: FILE: kernel/posix-timers.c:1195:
+	if (!(flags & TIMER_ABSTIME) && active && rmtp ) {

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2381: FILE: kernel/posix-timers.c:1204:
+			ts.tv_sec = ts.tv_nsec = 0;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2398: FILE: kernel/posix-timers.c:1221:
+asmlinkage int $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2400: FILE: kernel/posix-timers.c:1223:
+sys_clock_nanosleep(clockid_t which_clock, int flags,
+const struct timespec *rqtp, struct timespec *rmtp)

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#2402: FILE: kernel/posix-timers.c:1225:
+	return(do_clock_nanosleep(which_clock, flags, rqtp, rmtp, 0));

WARNING:TABSTOP: Statements should start on a tabstop
#2420: FILE: kernel/signal.c:693:
+	 struct sigpending *sig_queue;

WARNING:TABSTOP: Statements should start on a tabstop
#2438: FILE: kernel/signal.c:736:
+	 if (LEGACY_QUEUE(sig_queue, sig))

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (9, 17)
#2438: FILE: kernel/signal.c:736:
+	 if (LEGACY_QUEUE(sig_queue, sig))
+		 goto out;

WARNING:TABSTOP: Statements should start on a tabstop
#2439: FILE: kernel/signal.c:737:
+		 goto out;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2441: FILE: kernel/signal.c:739:
+^I  * In case of a POSIX timer generated signal you must check $

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#2442: FILE: kernel/signal.c:740:
+	  * In case of a POSIX timer generated signal you must check 
+	 * if a signal from this timer is already in the queue.

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#2445: FILE: kernel/signal.c:743:
+	 * itimer.c:posix_timer_fn().
+	  */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'info->si_code == SI_TIMER'
#2447: FILE: kernel/signal.c:745:
+	if (((unsigned long)info > 1) && (info->si_code == SI_TIMER)) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#2449: FILE: kernel/signal.c:747:
+		struct sigqueue *q;
+		for (q = sig_queue->head; q; q = q->next) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 33)
#2450: FILE: kernel/signal.c:748:
+			if ((q->info.si_code == SI_TIMER) &&
[...]
+				 q->info.si_overrun += info->si_overrun + 1;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'q->info.si_code == SI_TIMER'
#2450: FILE: kernel/signal.c:748:
+			if ((q->info.si_code == SI_TIMER) &&
+			    (q->info.si_tid == info->si_tid)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'q->info.si_tid == info->si_tid'
#2450: FILE: kernel/signal.c:748:
+			if ((q->info.si_code == SI_TIMER) &&
+			    (q->info.si_tid == info->si_tid)) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2453: FILE: kernel/signal.c:751:
+^I^I^I^I/* $

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#2454: FILE: kernel/signal.c:752:
+				/* 
+				  * this special ret value (1) is recognized

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#2495: FILE: kernel/sysctl.c:126:
+extern ctl_table posix_timers_table[];

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2503: FILE: kernel/sysctl.c:166:
 
+

WARNING:NEW_TYPEDEFS: do not add new typedefs
#2523: FILE: kernel/timer.c:51:
+typedef struct timer_list tmr_t;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2606: FILE: kernel/timer.c:408:
+struct timespec ytime __attribute__ ((aligned (16)));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(16) over __attribute__((aligned(16)))
#2606: FILE: kernel/timer.c:408:
+struct timespec ytime __attribute__ ((aligned (16)));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2640: FILE: kernel/timer.c:1005:
+ * by a signal which is not delivered to the process.  This is $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2643: FILE: kernel/timer.c:1008:
+extern int do_clock_nanosleep(clockid_t which_clock, int flags, $

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#2643: FILE: kernel/timer.c:1008:
+extern int do_clock_nanosleep(clockid_t which_clock, int flags, 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2644: FILE: kernel/timer.c:1009:
+extern int do_clock_nanosleep(clockid_t which_clock, int flags, 
+const struct timespec *rqtp, struct timespec *rmtp, int from_nanosleep);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#2649: FILE: kernel/timer.c:1014:
+	return(do_clock_nanosleep(CLOCK_REALTIME, 0, rqtp, rmtp, 1));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2651: FILE: kernel/timer.c:1016:
+#else $

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000415611.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 175 errors, 89 warnings, 122 checks, 2414 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000415611.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
