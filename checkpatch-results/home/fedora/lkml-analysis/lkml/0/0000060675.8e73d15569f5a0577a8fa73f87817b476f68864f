ERROR:BAD_SIGN_OFF: Unrecognized email address: 'Straub, Michael'
#42: 
To: Straub, Michael

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#69: FILE: drivers/char/eqnx/sst_tty.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#70: FILE: drivers/char/eqnx/sst_tty.c:2:
+/*
+

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#73: FILE: drivers/char/eqnx/sst_tty.c:4:
don't need config.h (autoconf.h is automatically #included)

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#84: FILE: drivers/char/eqnx/sst_tty.c:14:
+int eqnx_write_wakeup_deferred = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#112: FILE: drivers/char/eqnx/sst_tty.c:38:
+ * eqnx_open(tty, filp)
                   ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#117: FILE: drivers/char/eqnx/sst_tty.c:43:
+ * filp	= file structure.
    ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#124: FILE: drivers/char/eqnx/sst_tty.c:47:
+int eqnx_open(struct tty_struct *tty, struct file *filp)
                                                    ^^^^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'eqnx_nssps == 0'
#130: FILE: drivers/char/eqnx/sst_tty.c:52:
+	if ((d > (eqnx_nssps * MAXCHNL_BRD)) || (eqnx_nssps == 0) || (d
< 0))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'd
< 0'
#130: FILE: drivers/char/eqnx/sst_tty.c:52:
+	if ((d > (eqnx_nssps * MAXCHNL_BRD)) || (eqnx_nssps == 0) || (d
< 0))

WARNING:BRACES: braces {} are not necessary for single statement blocks
#136: FILE: drivers/char/eqnx/sst_tty.c:56:
+	if (tty->termios == NULL) {
+		*tty->termios = *mpc->normaltermios;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tty->termios"
#136: FILE: drivers/char/eqnx/sst_tty.c:56:
+	if (tty->termios == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#142: FILE: drivers/char/eqnx/sst_tty.c:61:
+void eqnx_close(struct tty_struct *tty, struct file *filp)
                                                      ^^^^

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#147: FILE: drivers/char/eqnx/sst_tty.c:65:
+{
+

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 1)
#149: FILE: drivers/char/eqnx/sst_tty.c:67:
+	if (tty == (struct tty_struct *)NULL)


ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#164: FILE: drivers/char/eqnx/sst_tty.c:80:
+	if ((mpd = mpc->mpc_mpd) == (struct mpdev *)NULL)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'mpd >= &eqnx_dev[eqnx_nssps]'
#171: FILE: drivers/char/eqnx/sst_tty.c:85:
+	if ((mpd >= &eqnx_dev[eqnx_nssps]) || (!(mpd->mpd_alive)) ||
+	    (nchan >= (int)mpd->mpd_nchan))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'nchan >= (int)mpd->mpd_nchan'
#171: FILE: drivers/char/eqnx/sst_tty.c:85:
+	if ((mpd >= &eqnx_dev[eqnx_nssps]) || (!(mpd->mpd_alive)) ||
+	    (nchan >= (int)mpd->mpd_nchan))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!eqnx_txcooktty"
#183: FILE: drivers/char/eqnx/sst_tty.c:96:
+	if (eqnx_txcooktty == NULL)

CHECK:BRACES: Unbalanced braces around else statement
#188: FILE: drivers/char/eqnx/sst_tty.c:100:
+	else {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#189: FILE: drivers/char/eqnx/sst_tty.c:101:
+	else {
+

WARNING:USE_LOCKDEP: Where possible, use lockdep_assert_held instead of assertions based on spin_is_locked
#191: FILE: drivers/char/eqnx/sst_tty.c:103:
+		if (!(spin_is_locked(&mpd->mpd_lock)))

lockdep_assert_held() annotations should be preferred over
assertions based on spin_is_locked()

See: https://www.kernel.org/doc/html/latest/locking/lockdep-design.html#annotations

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#205: FILE: drivers/char/eqnx/sst_tty.c:116:
+			dev_dbg(mpd->dev, "eqnx_flush_chars_locked: "
 			                                          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#212: FILE: drivers/char/eqnx/sst_tty.c:123:
+			dev_dbg(mpd->dev, "eqnx_flush_chars_locked: "
 			                                          ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#236: FILE: drivers/char/eqnx/sst_tty.c:145:
+			dev_dbg(mpd->dev, "eqnx_flush_chars: mpd lock "
 			                                   ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#276: FILE: drivers/char/eqnx/sst_tty.c:181:
+	dev_dbg(mpd->dev, "eqnx_throttle: device %d\n",
 	                                ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#276: FILE: drivers/char/eqnx/sst_tty.c:181:
+	dev_dbg(mpd->dev, "eqnx_throttle: device %d\n",
 	                                         ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#306: FILE: drivers/char/eqnx/sst_tty.c:205:
+		dev_dbg(mpd->dev, "eqnx_flush_buffer_locked: mpd lock
 		                                           ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#332: FILE: drivers/char/eqnx/sst_tty.c:229:
+	mpc->xmit_cnt = mpc->xmit_head = mpc->xmit_tail = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#374: FILE: drivers/char/eqnx/sst_tty.c:269:
+	volatile struct icp_in_struct *icpi;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#375: FILE: drivers/char/eqnx/sst_tty.c:270:
+	volatile struct icp_out_struct *icpo;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#376: FILE: drivers/char/eqnx/sst_tty.c:271:
+	volatile struct cout_que_struct *icpq;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#377: FILE: drivers/char/eqnx/sst_tty.c:272:
+	volatile struct cin_bnk_struct *icpb;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 1)
#423: FILE: drivers/char/eqnx/sst_tty.c:316:
+	while (++loop < 100000) {


WARNING:LEADING_SPACE: please, no spaces at the start of a line
#444: FILE: drivers/char/eqnx/sst_tty.c:334:
+ * delay_jiffies(len)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#445: FILE: drivers/char/eqnx/sst_tty.c:335:
+ *$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#446: FILE: drivers/char/eqnx/sst_tty.c:336:
+ * Delay by the specified number of jiffies.$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#447: FILE: drivers/char/eqnx/sst_tty.c:337:
+ *$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#448: FILE: drivers/char/eqnx/sst_tty.c:338:
+ * len^I= jiffies to delay.$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#449: FILE: drivers/char/eqnx/sst_tty.c:339:
+ */$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000060675.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 9 errors, 20 warnings, 11 checks, 394 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000060675.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
