WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#30: 
Signed-Off-By: Hubertus Franke <frankeh@us.ibm.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#31: 
Signed-Off-By: Chandra Seetharaman <sekharan@us.ibm.com>

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#32: 
Signed-Off-By: Shailabh Nagar <nagar@us.ibm.com>

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#33: 
Signed-Off-By: Vivek Kashyap <vivk@us.ibm.com>

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#34: 
Signed-Off-By: Gerrit Huizenga <gh@us.ibm.com>

WARNING:TYPO_SPELLING: 'comman' may be misspelled - perhaps 'command'?
#62: FILE: kernel/ckrm/rbce/rbce_internal.h:45:
+ * comman data structure used for identification of class and rules
    ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:SPACING: No space is necessary after a cast
#83: FILE: kernel/ckrm/rbce/rbce_internal.h:66:
+	RBCE_RULE_CMD_PATH = (__force rbce_rule_op_t) 1,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#84: FILE: kernel/ckrm/rbce/rbce_internal.h:67:
+	RBCE_RULE_CMD = (__force rbce_rule_op_t) 2,

CHECK:SPACING: No space is necessary after a cast
#85: FILE: kernel/ckrm/rbce/rbce_internal.h:68:
+	RBCE_RULE_ARGS = (__force rbce_rule_op_t) 3,

CHECK:SPACING: No space is necessary after a cast
#86: FILE: kernel/ckrm/rbce/rbce_internal.h:69:
+	RBCE_RULE_REAL_UID = (__force rbce_rule_op_t) 4,

CHECK:SPACING: No space is necessary after a cast
#87: FILE: kernel/ckrm/rbce/rbce_internal.h:70:
+	RBCE_RULE_REAL_GID = (__force rbce_rule_op_t) 5,

CHECK:SPACING: No space is necessary after a cast
#88: FILE: kernel/ckrm/rbce/rbce_internal.h:71:
+	RBCE_RULE_EFFECTIVE_UID = (__force rbce_rule_op_t) 6,

CHECK:SPACING: No space is necessary after a cast
#89: FILE: kernel/ckrm/rbce/rbce_internal.h:72:
+	RBCE_RULE_EFFECTIVE_GID = (__force rbce_rule_op_t) 7,

CHECK:SPACING: No space is necessary after a cast
#90: FILE: kernel/ckrm/rbce/rbce_internal.h:73:
+	RBCE_RULE_APP_TAG = (__force rbce_rule_op_t) 8,

CHECK:SPACING: No space is necessary after a cast
#91: FILE: kernel/ckrm/rbce/rbce_internal.h:74:
+	RBCE_RULE_IPV4 = (__force rbce_rule_op_t) 9,

CHECK:SPACING: No space is necessary after a cast
#92: FILE: kernel/ckrm/rbce/rbce_internal.h:75:
+	RBCE_RULE_IPV6 = (__force rbce_rule_op_t) 10,

CHECK:SPACING: No space is necessary after a cast
#93: FILE: kernel/ckrm/rbce/rbce_internal.h:76:
+	RBCE_RULE_DEP_RULE = (__force rbce_rule_op_t) 11,

CHECK:SPACING: No space is necessary after a cast
#94: FILE: kernel/ckrm/rbce/rbce_internal.h:77:
+	RBCE_RULE_INVALID = (__force rbce_rule_op_t) 12,

CHECK:SPACING: No space is necessary after a cast
#95: FILE: kernel/ckrm/rbce/rbce_internal.h:78:
+	RBCE_RULE_INVALID2 = (__force rbce_rule_op_t) 13,

CHECK:SPACING: No space is necessary after a cast
#100: FILE: kernel/ckrm/rbce/rbce_internal.h:83:
+	RBCE_EQUAL = (__force rbce_operator_t) 1,

CHECK:SPACING: No space is necessary after a cast
#101: FILE: kernel/ckrm/rbce/rbce_internal.h:84:
+	RBCE_NOT = (__force rbce_operator_t) 2,

CHECK:SPACING: No space is necessary after a cast
#102: FILE: kernel/ckrm/rbce/rbce_internal.h:85:
+	RBCE_LESS_THAN = (__force rbce_operator_t) 3,

CHECK:SPACING: No space is necessary after a cast
#103: FILE: kernel/ckrm/rbce/rbce_internal.h:86:
+	RBCE_GREATER_THAN = (__force rbce_operator_t) 4,

CHECK:BIT_MACRO: Prefer using the BIT macro
#147: FILE: kernel/ckrm/rbce/rbce_internal.h:130:
+#define RBCE_TERMFLAG_CMD   (1 << RBCE_TERM_CMD)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#148: FILE: kernel/ckrm/rbce/rbce_internal.h:131:
+#define RBCE_TERMFLAG_UID   (1 << RBCE_TERM_UID)

CHECK:BIT_MACRO: Prefer using the BIT macro
#149: FILE: kernel/ckrm/rbce/rbce_internal.h:132:
+#define RBCE_TERMFLAG_GID   (1 << RBCE_TERM_GID)

CHECK:BIT_MACRO: Prefer using the BIT macro
#150: FILE: kernel/ckrm/rbce/rbce_internal.h:133:
+#define RBCE_TERMFLAG_TAG   (1 << RBCE_TERM_TAG)

CHECK:BIT_MACRO: Prefer using the BIT macro
#151: FILE: kernel/ckrm/rbce/rbce_internal.h:134:
+#define RBCE_TERMFLAG_IPV4  (1 << RBCE_TERM_IPV4)

CHECK:BIT_MACRO: Prefer using the BIT macro
#152: FILE: kernel/ckrm/rbce/rbce_internal.h:135:
+#define RBCE_TERMFLAG_IPV6  (1 << RBCE_TERM_IPV6)

CHECK:SPACING: No space is necessary after a cast
#160: FILE: kernel/ckrm/rbce/rbce_internal.h:143:
+	TOKEN_PATH = (__force rule_token_t) 1,

CHECK:SPACING: No space is necessary after a cast
#161: FILE: kernel/ckrm/rbce/rbce_internal.h:144:
+	TOKEN_CMD = (__force rule_token_t) 2,

CHECK:SPACING: No space is necessary after a cast
#162: FILE: kernel/ckrm/rbce/rbce_internal.h:145:
+	TOKEN_ARGS = (__force rule_token_t) 3,

CHECK:SPACING: No space is necessary after a cast
#163: FILE: kernel/ckrm/rbce/rbce_internal.h:146:
+	TOKEN_RUID_EQ = (__force rule_token_t) 4,

CHECK:SPACING: No space is necessary after a cast
#164: FILE: kernel/ckrm/rbce/rbce_internal.h:147:
+	TOKEN_RUID_LT = (__force rule_token_t) 5,

CHECK:SPACING: No space is necessary after a cast
#165: FILE: kernel/ckrm/rbce/rbce_internal.h:148:
+	TOKEN_RUID_GT = (__force rule_token_t) 6,

CHECK:SPACING: No space is necessary after a cast
#166: FILE: kernel/ckrm/rbce/rbce_internal.h:149:
+	TOKEN_RUID_NOT = (__force rule_token_t) 7,

CHECK:SPACING: No space is necessary after a cast
#167: FILE: kernel/ckrm/rbce/rbce_internal.h:150:
+	TOKEN_RGID_EQ = (__force rule_token_t) 8,

CHECK:SPACING: No space is necessary after a cast
#168: FILE: kernel/ckrm/rbce/rbce_internal.h:151:
+	TOKEN_RGID_LT = (__force rule_token_t) 9,

CHECK:SPACING: No space is necessary after a cast
#169: FILE: kernel/ckrm/rbce/rbce_internal.h:152:
+	TOKEN_RGID_GT = (__force rule_token_t) 10,

CHECK:SPACING: No space is necessary after a cast
#170: FILE: kernel/ckrm/rbce/rbce_internal.h:153:
+	TOKEN_RGID_NOT = (__force rule_token_t) 11,

CHECK:SPACING: No space is necessary after a cast
#171: FILE: kernel/ckrm/rbce/rbce_internal.h:154:
+	TOKEN_EUID_EQ = (__force rule_token_t) 12,

CHECK:SPACING: No space is necessary after a cast
#172: FILE: kernel/ckrm/rbce/rbce_internal.h:155:
+	TOKEN_EUID_LT = (__force rule_token_t) 13,

CHECK:SPACING: No space is necessary after a cast
#173: FILE: kernel/ckrm/rbce/rbce_internal.h:156:
+	TOKEN_EUID_GT = (__force rule_token_t) 14,

CHECK:SPACING: No space is necessary after a cast
#174: FILE: kernel/ckrm/rbce/rbce_internal.h:157:
+	TOKEN_EUID_NOT = (__force rule_token_t) 15,

CHECK:SPACING: No space is necessary after a cast
#175: FILE: kernel/ckrm/rbce/rbce_internal.h:158:
+	TOKEN_EGID_EQ = (__force rule_token_t) 16,

CHECK:SPACING: No space is necessary after a cast
#176: FILE: kernel/ckrm/rbce/rbce_internal.h:159:
+	TOKEN_EGID_LT = (__force rule_token_t) 17,

CHECK:SPACING: No space is necessary after a cast
#177: FILE: kernel/ckrm/rbce/rbce_internal.h:160:
+	TOKEN_EGID_GT = (__force rule_token_t) 18,

CHECK:SPACING: No space is necessary after a cast
#178: FILE: kernel/ckrm/rbce/rbce_internal.h:161:
+	TOKEN_EGID_NOT = (__force rule_token_t) 19,

CHECK:SPACING: No space is necessary after a cast
#179: FILE: kernel/ckrm/rbce/rbce_internal.h:162:
+	TOKEN_TAG = (__force rule_token_t) 20,

CHECK:SPACING: No space is necessary after a cast
#180: FILE: kernel/ckrm/rbce/rbce_internal.h:163:
+	TOKEN_IPV4 = (__force rule_token_t) 21,

CHECK:SPACING: No space is necessary after a cast
#181: FILE: kernel/ckrm/rbce/rbce_internal.h:164:
+	TOKEN_IPV6 = (__force rule_token_t) 22,

CHECK:SPACING: No space is necessary after a cast
#182: FILE: kernel/ckrm/rbce/rbce_internal.h:165:
+	TOKEN_DEP = (__force rule_token_t) 23,

CHECK:SPACING: No space is necessary after a cast
#183: FILE: kernel/ckrm/rbce/rbce_internal.h:166:
+	TOKEN_DEP_ADD = (__force rule_token_t) 24,

CHECK:SPACING: No space is necessary after a cast
#184: FILE: kernel/ckrm/rbce/rbce_internal.h:167:
+	TOKEN_DEP_DEL = (__force rule_token_t) 25,

CHECK:SPACING: No space is necessary after a cast
#185: FILE: kernel/ckrm/rbce/rbce_internal.h:168:
+	TOKEN_ORDER = (__force rule_token_t) 26,

CHECK:SPACING: No space is necessary after a cast
#186: FILE: kernel/ckrm/rbce/rbce_internal.h:169:
+	TOKEN_CLASS = (__force rule_token_t) 27,

CHECK:SPACING: No space is necessary after a cast
#187: FILE: kernel/ckrm/rbce/rbce_internal.h:170:
+	TOKEN_STATE = (__force rule_token_t) 28,

CHECK:SPACING: No space is necessary after a cast
#188: FILE: kernel/ckrm/rbce/rbce_internal.h:171:
+	TOKEN_INVALID = (__force rule_token_t) 29

CHECK:SPACING: No space is necessary after a cast
#193: FILE: kernel/ckrm/rbce/rbce_internal.h:176:
+	TOKEN_OP_EQUAL = (__force op_token_t) RBCE_EQUAL,

CHECK:SPACING: No space is necessary after a cast
#194: FILE: kernel/ckrm/rbce/rbce_internal.h:177:
+	TOKEN_OP_NOT = (__force op_token_t) RBCE_NOT,

CHECK:SPACING: No space is necessary after a cast
#195: FILE: kernel/ckrm/rbce/rbce_internal.h:178:
+	TOKEN_OP_LESS_THAN = (__force op_token_t) RBCE_LESS_THAN,

CHECK:SPACING: No space is necessary after a cast
#196: FILE: kernel/ckrm/rbce/rbce_internal.h:179:
+	TOKEN_OP_GREATER_THAN = (__force op_token_t) RBCE_GREATER_THAN,

CHECK:SPACING: No space is necessary after a cast
#197: FILE: kernel/ckrm/rbce/rbce_internal.h:180:
+	TOKEN_OP_DEP = (__force op_token_t) (TOKEN_OP_GREATER_THAN+1),

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#197: FILE: kernel/ckrm/rbce/rbce_internal.h:180:
+	TOKEN_OP_DEP = (__force op_token_t) (TOKEN_OP_GREATER_THAN+1),
 	                                                          ^

CHECK:SPACING: No space is necessary after a cast
#198: FILE: kernel/ckrm/rbce/rbce_internal.h:181:
+	TOKEN_OP_DEP_ADD = (__force op_token_t) (TOKEN_OP_GREATER_THAN+2),

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#198: FILE: kernel/ckrm/rbce/rbce_internal.h:181:
+	TOKEN_OP_DEP_ADD = (__force op_token_t) (TOKEN_OP_GREATER_THAN+2),
 	                                                              ^

CHECK:SPACING: No space is necessary after a cast
#199: FILE: kernel/ckrm/rbce/rbce_internal.h:182:
+	TOKEN_OP_DEP_DEL = (__force op_token_t) (TOKEN_OP_GREATER_THAN+3),

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#199: FILE: kernel/ckrm/rbce/rbce_internal.h:182:
+	TOKEN_OP_DEP_DEL = (__force op_token_t) (TOKEN_OP_GREATER_THAN+3),
 	                                                              ^

CHECK:SPACING: No space is necessary after a cast
#200: FILE: kernel/ckrm/rbce/rbce_internal.h:183:
+	TOKEN_OP_ORDER = (__force op_token_t) (TOKEN_OP_GREATER_THAN+4),

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#200: FILE: kernel/ckrm/rbce/rbce_internal.h:183:
+	TOKEN_OP_ORDER = (__force op_token_t) (TOKEN_OP_GREATER_THAN+4),
 	                                                            ^

CHECK:SPACING: No space is necessary after a cast
#201: FILE: kernel/ckrm/rbce/rbce_internal.h:184:
+	TOKEN_OP_CLASS = (__force op_token_t) (TOKEN_OP_GREATER_THAN+5),

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#201: FILE: kernel/ckrm/rbce/rbce_internal.h:184:
+	TOKEN_OP_CLASS = (__force op_token_t) (TOKEN_OP_GREATER_THAN+5),
 	                                                            ^

CHECK:SPACING: No space is necessary after a cast
#202: FILE: kernel/ckrm/rbce/rbce_internal.h:185:
+	TOKEN_OP_STATE = (__force op_token_t) (TOKEN_OP_GREATER_THAN+6),

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#202: FILE: kernel/ckrm/rbce/rbce_internal.h:185:
+	TOKEN_OP_STATE = (__force op_token_t) (TOKEN_OP_GREATER_THAN+6),
 	                                                            ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#205: FILE: kernel/ckrm/rbce/rbce_internal.h:188:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#215: FILE: kernel/ckrm/rbce/rbce_internal.h:198:
+#define RBCE_DATA(tsk) ((struct rbce_private_data*)((tsk)->ce_data))

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#227: FILE: kernel/ckrm/rbce/rbce_internal.h:216:
+extern int rules_parse(char *, struct rbce_rule_term **, int *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#227: FILE: kernel/ckrm/rbce/rbce_internal.h:216:
+extern int rules_parse(char *, struct rbce_rule_term **, int *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rbce_rule_term **' should also have an identifier name
#227: FILE: kernel/ckrm/rbce/rbce_internal.h:216:
+extern int rules_parse(char *, struct rbce_rule_term **, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int *' should also have an identifier name
#227: FILE: kernel/ckrm/rbce/rbce_internal.h:216:
+extern int rules_parse(char *, struct rbce_rule_term **, int *);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#257: FILE: kernel/ckrm/rbce/rbce_main.c:50:
+#define TERM_2_TERMFLAG(x)		(1 << x)

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#264: FILE: kernel/ckrm/rbce/rbce_main.c:57:
+extern int errno;

WARNING:REPEATED_WORD: Possible repeated word: 'order'
#317: FILE: kernel/ckrm/rbce/rbce_main.c:109:
+ * Insert the given rule at the specified order
+ * 		order = -1 ==> insert at the tail.

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#317: FILE: kernel/ckrm/rbce/rbce_main.c:109:
+ * ^I^Iorder = -1 ==> insert at the tail.$

WARNING:TYPO_SPELLING: 'accoring' may be misspelled - perhaps 'according'?
#320: FILE: kernel/ckrm/rbce/rbce_main.c:112:
+ *				 position and reinsert accoring to order.
   				                       ^^^^^^^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#361: FILE: kernel/ckrm/rbce/rbce_main.c:153:
+	if (type == REINSERT)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#363: FILE: kernel/ckrm/rbce/rbce_main.c:155:
+	else {

WARNING:TYPO_SPELLING: 'refernece' may be misspelled - perhaps 'reference'?
#375: FILE: kernel/ckrm/rbce/rbce_main.c:166:
+ * Get a refernece to the class, create one if it doesn't exist
          ^^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#381: FILE: kernel/ckrm/rbce/rbce_main.c:172:
+struct rbce_class *create_rbce_class(const char *classname,
+					    int classtype, void *classobj)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#387: FILE: kernel/ckrm/rbce/rbce_main.c:177:
+		printk(KERN_ERR

WARNING:SPLIT_STRING: quoted string split across lines
#389: FILE: kernel/ckrm/rbce/rbce_main.c:179:
+		       "ckrm_classobj returned %d as classtype which cannot "
+		       " be handled by RBCE\n", classtype);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*cls)...) over kmalloc(sizeof(struct rbce_class)...)
#393: FILE: kernel/ckrm/rbce/rbce_main.c:183:
+	cls = kmalloc(sizeof(struct rbce_class), GFP_ATOMIC);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:TYPO_SPELLING: 'refernece' may be misspelled - perhaps 'reference'?
#436: FILE: kernel/ckrm/rbce/rbce_main.c:223:
+ * Drop a refernece to the class, create one if it doesn't exist
           ^^^^^^^^^

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#469: FILE: kernel/ckrm/rbce/rbce_main.c:253:
+		newv =
+		    kmalloc(newsize * sizeof(struct rbce_rule_term),
+			    GFP_ATOMIC);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'idx < 0'
#494: FILE: kernel/ckrm/rbce/rbce_main.c:278:
+	if ((idx < 0) || (idx > gl_num_terms))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'idx > gl_num_terms'
#494: FILE: kernel/ckrm/rbce/rbce_main.c:278:
+	if ((idx < 0) || (idx > gl_num_terms))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'gl_released > POLICY_INC_NUMTERMS'
#499: FILE: kernel/ckrm/rbce/rbce_main.c:283:
+	if ((gl_released > POLICY_INC_NUMTERMS) &&
+	    (gl_allocated >
+	     (gl_num_terms - gl_released + POLICY_INC_NUMTERMS))) {

WARNING:RETURN_VOID: void function return statements are not generally useful
#505: FILE: kernel/ckrm/rbce/rbce_main.c:289:
+	return;
+}

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#527: FILE: kernel/ckrm/rbce/rbce_main.c:311:
+	if (rule->strtab) {
+		kfree(rule->strtab);

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#531: FILE: kernel/ckrm/rbce/rbce_main.c:315:
+	if (rule->terms) {
+		kfree(rule->terms);

WARNING:RETURN_VOID: void function return statements are not generally useful
#535: FILE: kernel/ckrm/rbce/rbce_main.c:319:
+	return;
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#570: FILE: kernel/ckrm/rbce/rbce_main.c:354:
+digest_terms(struct rbce_rule *newrule,
+	struct rbce_rule_term *terms, int nterms)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#594: FILE: kernel/ckrm/rbce/rbce_main.c:378:
+					    RBCE_RULE_DEP_RULE
+					    && terms[j].u.deprule ==

CHECK:BRACES: braces {} should be used on all arms of this statement
#604: FILE: kernel/ckrm/rbce/rbce_main.c:388:
+			if (terms[i].operator != TOKEN_OP_DEP_DEL)
[...]
+			else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#606: FILE: kernel/ckrm/rbce/rbce_main.c:390:
+			else {

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#624: FILE: kernel/ckrm/rbce/rbce_main.c:408:
+
+		}

CHECK:BRACES: braces {} should be used on all arms of this statement
#628: FILE: kernel/ckrm/rbce/rbce_main.c:412:
+		if (!strtab)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#630: FILE: kernel/ckrm/rbce/rbce_main.c:414:
+		else {

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#632: FILE: kernel/ckrm/rbce/rbce_main.c:416:
+			if (newrule->strtab)
+				kfree(newrule->strtab);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#650: FILE: kernel/ckrm/rbce/rbce_main.c:434:
+digest_nonterms(struct rbce_rule *newrule,
+	struct rbce_rule_term *terms, int nterms)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "class"
#678: FILE: kernel/ckrm/rbce/rbce_main.c:462:
+	if (class != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:LINE_SPACING: Missing a blank line after declarations
#681: FILE: kernel/ckrm/rbce/rbce_main.c:465:
+		struct rbce_class *targetcls;
+		if ((targetcls = get_class(class, &classtype)) == NULL) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#681: FILE: kernel/ckrm/rbce/rbce_main.c:465:
+		if ((targetcls = get_class(class, &classtype)) == NULL) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:TYPO_SPELLING: 'realy' may be misspelled - perhaps 'really'?
#705: FILE: kernel/ckrm/rbce/rbce_main.c:489:
+ * Only handle the realy terms and ignore the nonterms.
                    ^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#709: FILE: kernel/ckrm/rbce/rbce_main.c:493:
+fill_term_vector(struct rbce_rule *newrule,
+	struct rbce_rule_term *terms, int real_nterms)

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#714: FILE: kernel/ckrm/rbce/rbce_main.c:498:
+	newrule->terms = kmalloc(real_nterms * sizeof(int), GFP_ATOMIC);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#768: FILE: kernel/ckrm/rbce/rbce_main.c:552:
+
+}

CHECK:BRACES: braces {} should be used on all arms of this statement
#806: FILE: kernel/ckrm/rbce/rbce_main.c:590:
+	if (rc) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#820: FILE: kernel/ckrm/rbce/rbce_main.c:604:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#827: FILE: kernel/ckrm/rbce/rbce_main.c:611:
+rbce_create_rule(struct rbce_rule_term *new_terms,
+	int nterms, const char *rname)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#832: FILE: kernel/ckrm/rbce/rbce_main.c:616:
+	rule = kmalloc (sizeof(struct rbce_rule), GFP_ATOMIC);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*rule)...) over kmalloc(sizeof(struct rbce_rule)...)
#832: FILE: kernel/ckrm/rbce/rbce_main.c:616:
+	rule = kmalloc (sizeof(struct rbce_rule), GFP_ATOMIC);

CHECK:BRACES: braces {} should be used on all arms of this statement
#835: FILE: kernel/ckrm/rbce/rbce_main.c:619:
+		if (rule->obj.name) {
[...]
+		} else
[...]

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#852: FILE: kernel/ckrm/rbce/rbce_main.c:636:
+			} else if ((rc = insert_rule(rule,

CHECK:BRACES: Unbalanced braces around else statement
#855: FILE: kernel/ckrm/rbce/rbce_main.c:639:
+		} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#863: FILE: kernel/ckrm/rbce/rbce_main.c:647:
+merge_terms(struct rbce_rule *rule, struct rbce_rule_term *new_terms,
+	int nterms, int new_term_mask, int *merged_nterms)

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#874: FILE: kernel/ckrm/rbce/rbce_main.c:658:
+	terms = kmalloc(tot_terms * sizeof(struct rbce_rule_term), GFP_ATOMIC);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#876: FILE: kernel/ckrm/rbce/rbce_main.c:660:
+	if (!terms) {
+		return NULL;
+	}

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'new_terms[j].operator'
#917: FILE: kernel/ckrm/rbce/rbce_main.c:701:
+					terms[i].operator = new_terms[j].
+					    operator;

A single dereferencing identifier spanned on multiple lines like::

  struct_identifier->member[index].
  member = <foo>;

is generally hard to follow. It can easily lead to typos and so makes
the code vulnerable to bugs.

If fixing the multiple line dereferencing leads to an 80 column
violation, then either rewrite the code in a more simple way or if the
starting part of the dereferencing identifier is the same and used at
multiple places then store it in a temporary variable, and use that
temporary variable only at all the places. For example, if there are
two dereferencing identifiers::

  member1->member2->member3.foo1;
  member1->member2->member3.foo2;

then store the member1->member2->member3 part in a temporary variable.
It not only helps to avoid the 80 column violation but also reduces
the program size by removing the unnecessary dereferences.

But if none of the above methods work then ignore the 80 column
violation because it is much easier to read a dereferencing identifier
on a single line.

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#970: FILE: kernel/ckrm/rbce/rbce_main.c:754:
+						if (terms[k].op ==

Indentation with 6 or more tabs usually indicate overly indented
code.

It is suggested to refactor excessive indentation of
if/else/for/do/while/switch statements.

See: https://lore.kernel.org/lkml/1328311239.21255.24.camel@joe2Laptop/

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#972: FILE: kernel/ckrm/rbce/rbce_main.c:756:
+						    RBCE_RULE_DEP_RULE
+						    && terms[k].u.deprule ==

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1010: FILE: kernel/ckrm/rbce/rbce_main.c:794:
+	if ((nterms = rules_parse(rdefn, &new_terms, &new_term_mask)) <= 0)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rule"
#1015: FILE: kernel/ckrm/rbce/rbce_main.c:799:
+	if (rule == NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1023: FILE: kernel/ckrm/rbce/rbce_main.c:807:
+	merged_terms = merge_terms(rule, new_terms, nterms, new_term_mask,
+			&merged_nterms);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1054: FILE: kernel/ckrm/rbce/rbce_main.c:838:
+	if ((rule = find_rule_name(rname)) != NULL)

CHECK:BRACES: braces {} should be used on all arms of this statement
#1074: FILE: kernel/ckrm/rbce/rbce_main.c:858:
+	if (rule != NULL) {
[...]
+	} else
[...]

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rule"
#1074: FILE: kernel/ckrm/rbce/rbce_main.c:858:
+	if (rule != NULL) {

WARNING:INDENTED_LABEL: labels should not be indented
#1089: FILE: kernel/ckrm/rbce/rbce_main.c:873:
+			handleid:

WARNING:INDENTED_LABEL: labels should not be indented
#1125: FILE: kernel/ckrm/rbce/rbce_main.c:909:
+			      handle_str:

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'rule->target_class->obj.name'
#1144: FILE: kernel/ckrm/rbce/rbce_main.c:928:
+			    rule->target_class ? rule->target_class->obj.
+			    name : "*****REMOVED*****");

CHECK:BRACES: Unbalanced braces around else statement
#1146: FILE: kernel/ckrm/rbce/rbce_main.c:930:
+	} else

WARNING:RETURN_VOID: void function return statements are not generally useful
#1151: FILE: kernel/ckrm/rbce/rbce_main.c:935:
+	return;
+}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rule"
#1167: FILE: kernel/ckrm/rbce/rbce_main.c:951:
+	if (rule != NULL) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1168: FILE: kernel/ckrm/rbce/rbce_main.c:952:
+		if ((nlen = strlen(to_rname)) > strlen(rule->obj.name)) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1170: FILE: kernel/ckrm/rbce/rbce_main.c:954:
+			char *name = kmalloc(nlen + 1, GFP_ATOMIC);
+			if (!name)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rule"
#1193: FILE: kernel/ckrm/rbce/rbce_main.c:977:
+	return rule != NULL;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1198: FILE: kernel/ckrm/rbce/rbce_main.c:982:
+struct rbce_private_data *create_private_data(struct rbce_private_data *a,
+						     int b)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1217: FILE: kernel/ckrm/rbce/rbce_main.c:1001:
+	strncpy(tp,tag,len);
 	          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1217: FILE: kernel/ckrm/rbce/rbce_main.c:1001:
+	strncpy(tp,tag,len);
 	              ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1220: FILE: kernel/ckrm/rbce/rbce_main.c:1004:
+	if ((tsk = find_task_by_pid(pid)) == NULL) {

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#1234: FILE: kernel/ckrm/rbce/rbce_main.c:1018:
+	if (pdata->app_tag)
+		kfree(pdata->app_tag);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1253: FILE: kernel/ckrm/rbce/rbce_token.c:1:
+/* Tokens for Rule-based Classification Engine (RBCE) and

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:SPACING: No space is necessary after a cast
#1310: FILE: kernel/ckrm/rbce/rbce_token.c:58:
+	[TOKEN_PATH] = (__force op_token_t) TOKEN_OP_EQUAL,

CHECK:SPACING: No space is necessary after a cast
#1311: FILE: kernel/ckrm/rbce/rbce_token.c:59:
+	[TOKEN_CMD] = (__force op_token_t) TOKEN_OP_EQUAL,

CHECK:SPACING: No space is necessary after a cast
#1312: FILE: kernel/ckrm/rbce/rbce_token.c:60:
+	[TOKEN_ARGS] = (__force op_token_t) TOKEN_OP_EQUAL,

CHECK:SPACING: No space is necessary after a cast
#1313: FILE: kernel/ckrm/rbce/rbce_token.c:61:
+	[TOKEN_RUID_EQ] = (__force op_token_t) TOKEN_OP_EQUAL,

CHECK:SPACING: No space is necessary after a cast
#1314: FILE: kernel/ckrm/rbce/rbce_token.c:62:
+	[TOKEN_RUID_LT] = (__force op_token_t) TOKEN_OP_LESS_THAN,

CHECK:SPACING: No space is necessary after a cast
#1315: FILE: kernel/ckrm/rbce/rbce_token.c:63:
+	[TOKEN_RUID_GT] = (__force op_token_t) TOKEN_OP_GREATER_THAN,

CHECK:SPACING: No space is necessary after a cast
#1316: FILE: kernel/ckrm/rbce/rbce_token.c:64:
+	[TOKEN_RUID_NOT] = (__force op_token_t) TOKEN_OP_NOT,

CHECK:SPACING: No space is necessary after a cast
#1317: FILE: kernel/ckrm/rbce/rbce_token.c:65:
+	[TOKEN_RGID_EQ] = (__force op_token_t) TOKEN_OP_EQUAL,

CHECK:SPACING: No space is necessary after a cast
#1318: FILE: kernel/ckrm/rbce/rbce_token.c:66:
+	[TOKEN_RGID_LT] = (__force op_token_t) TOKEN_OP_LESS_THAN,

CHECK:SPACING: No space is necessary after a cast
#1319: FILE: kernel/ckrm/rbce/rbce_token.c:67:
+	[TOKEN_RGID_GT] = (__force op_token_t) TOKEN_OP_GREATER_THAN,

CHECK:SPACING: No space is necessary after a cast
#1320: FILE: kernel/ckrm/rbce/rbce_token.c:68:
+	[TOKEN_RGID_NOT] = (__force op_token_t) TOKEN_OP_NOT,

CHECK:SPACING: No space is necessary after a cast
#1321: FILE: kernel/ckrm/rbce/rbce_token.c:69:
+	[TOKEN_EUID_EQ] = (__force op_token_t) TOKEN_OP_EQUAL,

CHECK:SPACING: No space is necessary after a cast
#1322: FILE: kernel/ckrm/rbce/rbce_token.c:70:
+	[TOKEN_EUID_LT] = (__force op_token_t) TOKEN_OP_LESS_THAN,

CHECK:SPACING: No space is necessary after a cast
#1323: FILE: kernel/ckrm/rbce/rbce_token.c:71:
+	[TOKEN_EUID_GT] = (__force op_token_t) TOKEN_OP_GREATER_THAN,

CHECK:SPACING: No space is necessary after a cast
#1324: FILE: kernel/ckrm/rbce/rbce_token.c:72:
+	[TOKEN_EUID_NOT] = (__force op_token_t) TOKEN_OP_NOT,

CHECK:SPACING: No space is necessary after a cast
#1325: FILE: kernel/ckrm/rbce/rbce_token.c:73:
+	[TOKEN_EGID_EQ] = (__force op_token_t) TOKEN_OP_EQUAL,

CHECK:SPACING: No space is necessary after a cast
#1326: FILE: kernel/ckrm/rbce/rbce_token.c:74:
+	[TOKEN_EGID_LT] = (__force op_token_t) TOKEN_OP_LESS_THAN,

CHECK:SPACING: No space is necessary after a cast
#1327: FILE: kernel/ckrm/rbce/rbce_token.c:75:
+	[TOKEN_EGID_GT] = (__force op_token_t) TOKEN_OP_GREATER_THAN,

CHECK:SPACING: No space is necessary after a cast
#1328: FILE: kernel/ckrm/rbce/rbce_token.c:76:
+	[TOKEN_EGID_NOT] = (__force op_token_t) TOKEN_OP_NOT,

CHECK:SPACING: No space is necessary after a cast
#1329: FILE: kernel/ckrm/rbce/rbce_token.c:77:
+	[TOKEN_TAG] = (__force op_token_t) TOKEN_OP_EQUAL,

CHECK:SPACING: No space is necessary after a cast
#1330: FILE: kernel/ckrm/rbce/rbce_token.c:78:
+	[TOKEN_IPV4] = (__force op_token_t) TOKEN_OP_EQUAL,

CHECK:SPACING: No space is necessary after a cast
#1331: FILE: kernel/ckrm/rbce/rbce_token.c:79:
+	[TOKEN_IPV6] = (__force op_token_t) TOKEN_OP_EQUAL,

CHECK:SPACING: No space is necessary after a cast
#1332: FILE: kernel/ckrm/rbce/rbce_token.c:80:
+	[TOKEN_DEP] = (__force op_token_t) TOKEN_OP_DEP,

CHECK:SPACING: No space is necessary after a cast
#1333: FILE: kernel/ckrm/rbce/rbce_token.c:81:
+	[TOKEN_DEP_ADD] = (__force op_token_t) TOKEN_OP_DEP_ADD,

CHECK:SPACING: No space is necessary after a cast
#1334: FILE: kernel/ckrm/rbce/rbce_token.c:82:
+	[TOKEN_DEP_DEL] = (__force op_token_t) TOKEN_OP_DEP_DEL,

CHECK:SPACING: No space is necessary after a cast
#1335: FILE: kernel/ckrm/rbce/rbce_token.c:83:
+	[TOKEN_ORDER] = (__force op_token_t) TOKEN_OP_ORDER,

CHECK:SPACING: No space is necessary after a cast
#1336: FILE: kernel/ckrm/rbce/rbce_token.c:84:
+	[TOKEN_CLASS] = (__force op_token_t) TOKEN_OP_CLASS,

CHECK:SPACING: No space is necessary after a cast
#1337: FILE: kernel/ckrm/rbce/rbce_token.c:85:
+	[TOKEN_STATE] = (__force op_token_t) TOKEN_OP_STATE

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#1398: FILE: kernel/ckrm/rbce/rbce_token.c:146:
+	terms = kmalloc(nterms * sizeof(struct rbce_rule_term), GFP_KERNEL);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1403: FILE: kernel/ckrm/rbce/rbce_token.c:151:
+	while ((p = strsep(&rule_defn, ",")) != NULL) {
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1417: FILE: kernel/ckrm/rbce/rbce_token.c:165:
+		switch (token) {
+

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#1429: FILE: kernel/ckrm/rbce/rbce_token.c:177:
+		/*FALLTHRU*/

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#1458: FILE: kernel/ckrm/rbce/rbce_token.c:206:
+		/*FALLTHRU*/

ERROR:SPACING: space required before the open brace '{'
#1472: FILE: kernel/ckrm/rbce/rbce_token.c:220:
+		switch(token){

ERROR:SPACING: space required before the open parenthesis '('
#1472: FILE: kernel/ckrm/rbce/rbce_token.c:220:
+		switch(token){

ERROR:SPACING: space required before the open brace '{'
#1474: FILE: kernel/ckrm/rbce/rbce_token.c:222:
+			if ((terms[i].u.id != 0) && (terms[i].u.id != 1)){

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'terms[i].u.id != 0'
#1474: FILE: kernel/ckrm/rbce/rbce_token.c:222:
+			if ((terms[i].u.id != 0) && (terms[i].u.id != 1)){

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'terms[i].u.id != 1'
#1474: FILE: kernel/ckrm/rbce/rbce_token.c:222:
+			if ((terms[i].u.id != 0) && (terms[i].u.id != 1)){

WARNING:INDENTED_LABEL: labels should not be indented
#1487: FILE: kernel/ckrm/rbce/rbce_token.c:235:
+      out:

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000173793.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 12 errors, 42 warnings, 137 checks, 1431 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000173793.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
