WARNING:REPEATED_WORD: Possible repeated word: 'up'
#41: 
  - "spi_plat_example.c" sets up up a multi-device configuration.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#51: FILE: drivers/spi/ads7846.c:1:
+#include <linux/autoconf.h>

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:LINE_SPACING: Please don't use multiple blank lines
#57: FILE: drivers/spi/ads7846.c:7:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BIT_MACRO: Prefer using the BIT macro
#65: FILE: drivers/spi/ads7846.c:15:
+#define	ADS_START		(1 << 7)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#66: FILE: drivers/spi/ads7846.c:16:
+#define	ADS_A2A1A0_d_y		(1 << 4)	/* differential */

CHECK:BIT_MACRO: Prefer using the BIT macro
#74: FILE: drivers/spi/ads7846.c:24:
+#define	ADS_8_BIT		(1 << 3)

CHECK:BIT_MACRO: Prefer using the BIT macro
#76: FILE: drivers/spi/ads7846.c:26:
+#define	ADS_SER			(1 << 2)	/* non-differential */

CHECK:BIT_MACRO: Prefer using the BIT macro
#79: FILE: drivers/spi/ads7846.c:29:
+#define	ADS_PD10_ADC_ON		(1 << 0)	/* ADC on */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#96: FILE: drivers/spi/ads7846.c:46:
+static int ads7846_read12_ser(struct device *dev, unsigned command)

CHECK:SPACING: No space is necessary after a cast
#104: FILE: drivers/spi/ads7846.c:54:
+	(void) spi_w8r16(spi, READ_12BIT_DFR(x) | ADS_PD10_REF_ON);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#108: FILE: drivers/spi/ads7846.c:58:
+	(void) spi_w8r16(spi, READ_12BIT_DFR(y));

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#115: FILE: drivers/spi/ads7846.c:65:
+#define SHOW(name) static ssize_t \
+name ## _show(struct device *dev, struct device_attribute *attr, char *buf) \
+{ \
+	ssize_t v = ads7846_read12_ser(dev, READ_12BIT_SER(name)); \
+	if (v < 0) \
+		return v; \
+	return sprintf(buf, "%u\n", (unsigned) v); \
+} \
+static DEVICE_ATTR(name, S_IRUGO, name ## _show, NULL);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#115: FILE: drivers/spi/ads7846.c:65:
+#define SHOW(name) static ssize_t \
+name ## _show(struct device *dev, struct device_attribute *attr, char *buf) \
+{ \
+	ssize_t v = ads7846_read12_ser(dev, READ_12BIT_SER(name)); \
+	if (v < 0) \
+		return v; \
+	return sprintf(buf, "%u\n", (unsigned) v); \
+} \
+static DEVICE_ATTR(name, S_IRUGO, name ## _show, NULL);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

CHECK:SPACING: No space is necessary after a cast
#121: FILE: drivers/spi/ads7846.c:71:
+	return sprintf(buf, "%u\n", (unsigned) v); \

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#121: FILE: drivers/spi/ads7846.c:71:
+	return sprintf(buf, "%u\n", (unsigned) v); \

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#123: FILE: drivers/spi/ads7846.c:73:
+static DEVICE_ATTR(name, S_IRUGO, name ## _show, NULL);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#133: FILE: drivers/spi/ads7846.c:83:
+
+

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#138: FILE: drivers/spi/ads7846.c:88:
+static int ads7846_read12_dfr(struct device *dev, unsigned command)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#149: FILE: drivers/spi/ads7846.c:99:
+#define SHOW_D(name) static ssize_t \
+name ## _show(struct device *dev, struct device_attribute *attr, char *buf) \
+{ \
+	ssize_t v = ads7846_read12_dfr(dev, READ_12BIT_DFR(name)); \
+	if (v < 0) \
+		return v; \
+	return sprintf(buf, "%u\n", (unsigned) v); \
+} \
+static DEVICE_ATTR(name, S_IRUGO, name ## _show, NULL);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#149: FILE: drivers/spi/ads7846.c:99:
+#define SHOW_D(name) static ssize_t \
+name ## _show(struct device *dev, struct device_attribute *attr, char *buf) \
+{ \
+	ssize_t v = ads7846_read12_dfr(dev, READ_12BIT_DFR(name)); \
+	if (v < 0) \
+		return v; \
+	return sprintf(buf, "%u\n", (unsigned) v); \
+} \
+static DEVICE_ATTR(name, S_IRUGO, name ## _show, NULL);

CHECK:SPACING: No space is necessary after a cast
#155: FILE: drivers/spi/ads7846.c:105:
+	return sprintf(buf, "%u\n", (unsigned) v); \

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#155: FILE: drivers/spi/ads7846.c:105:
+	return sprintf(buf, "%u\n", (unsigned) v); \

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#157: FILE: drivers/spi/ads7846.c:107:
+static DEVICE_ATTR(name, S_IRUGO, name ## _show, NULL);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#165: FILE: drivers/spi/ads7846.c:115:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#225: FILE: drivers/spi/spi_plat_example.c:1:
+/*

CHECK:LINE_SPACING: Please don't use multiple blank lines
#241: FILE: drivers/spi/spi_plat_example.c:17:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#248: FILE: drivers/spi/spi_plat_example.c:24:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#281: FILE: drivers/spi/spi_plat_example.c:57:
+
+

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#286: FILE: drivers/spi/spi_plat_example.c:62:
+}
+// arch_initcall(myboard_init);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#288: FILE: drivers/spi/spi_plat_example.c:64:
+
+

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#329: FILE: drivers/spi/spi_plat_example.c:105:
+}
+// arch_initcall(myboard_init2);

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#331: FILE: drivers/spi/spi_plat_example.c:107:
+#if 0

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#378: FILE: drivers/spi/spi_plat_example.c:154:
+	pr_debug("%s setup: %u MHz, mode %d\n",
+			spi->dev.bus_id,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#389: FILE: drivers/spi/spi_plat_example.c:165:
+	unsigned		i;

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#397: FILE: drivers/spi/spi_plat_example.c:173:
+^I// ^Ilist_add_tail(&msg->queue, &foo->queue)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#411: FILE: drivers/spi/spi_plat_example.c:187:
+		pr_debug("%s: [%u] %u bytes %s\n",
+				spi->dev.bus_id, i, x->len,

ERROR:SPACING: space required after that ',' (ctx:VxV)
#428: FILE: drivers/spi/spi_plat_example.c:204:
+#define	kzalloc(n, flags)	kcalloc(1,(n),(flags))
        	                 	         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#428: FILE: drivers/spi/spi_plat_example.c:204:
+#define	kzalloc(n, flags)	kcalloc(1,(n),(flags))
        	                 	             ^

WARNING:SIZEOF_PARENTHESIS: sizeof *foo should be sizeof(*foo)
#436: FILE: drivers/spi/spi_plat_example.c:212:
+	foo = kzalloc(sizeof *foo, GFP_KERNEL);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#517: FILE: drivers/spi/spi_plat_example.c:293:
+}
+// device_initcall(init3);

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#519: FILE: drivers/spi/spi_plat_example.c:295:
+#if 0

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#546: FILE: drivers/spi/spi_plat_example.c:322:
+#if 0

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#549: FILE: drivers/spi/spi_plat_example.c:325:
+pr_debug("%s\n", __FUNCTION__);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000152847.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 2 errors, 18 warnings, 23 checks, 502 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000152847.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
