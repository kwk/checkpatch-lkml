WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#288: FILE: arch/ppc/8260_io/fcc_enet.c:198:
+/* CLK13 is receive, CLK14 is transmit.  These are board dependent.
+*/

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#331: FILE: arch/ppc/8260_io/fcc_enet.c:229:
+/* CLK15 is receive, CLK16 is transmit.  These are board dependent.
+*/

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'REG' may be better as '(REG)' to avoid precedence issues
#462: FILE: arch/ppc/8260_io/fcc_enet.c:362:
+#define mk_mii_read(REG)	(0x60020000 | ((REG & 0x1f) << 18))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'REG' may be better as '(REG)' to avoid precedence issues
#463: FILE: arch/ppc/8260_io/fcc_enet.c:363:
+#define mk_mii_write(REG, VAL)	(0x50020000 | ((REG & 0x1f) << 18) | \
+						(VAL & 0xffff))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'VAL' may be better as '(VAL)' to avoid precedence issues
#463: FILE: arch/ppc/8260_io/fcc_enet.c:363:
+#define mk_mii_write(REG, VAL)	(0x50020000 | ((REG & 0x1f) << 18) | \
+						(VAL & 0xffff))

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#499: FILE: arch/ppc/8260_io/fcc_enet.c:413:
+		/* This should never happen (any more).
+		   Leave the sanity check in for now... */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#499: FILE: arch/ppc/8260_io/fcc_enet.c:413:
+		   Leave the sanity check in for now... */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#500: FILE: arch/ppc/8260_io/fcc_enet.c:414:
+^I^Iprintk(KERN_ERR "EEP. cep->tx_skbuff[%d] is %p not NULL in %s\n", $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#500: FILE: arch/ppc/8260_io/fcc_enet.c:414:
+		printk(KERN_ERR "EEP. cep->tx_skbuff[%d] is %p not NULL in %s\n", 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#502: FILE: arch/ppc/8260_io/fcc_enet.c:416:
+^I^Iprintk(KERN_ERR "Expect to lose %d bytes of sock space", $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#502: FILE: arch/ppc/8260_io/fcc_enet.c:416:
+		printk(KERN_ERR "Expect to lose %d bytes of sock space", 

CHECK:LINE_SPACING: Please don't use multiple blank lines
#521: FILE: arch/ppc/8260_io/fcc_enet.c:443:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#523: FILE: arch/ppc/8260_io/fcc_enet.c:445:
+	if (atomic_read(&cep->n_pkts) >= (TX_RING_SIZE-1)) {
+	  if (!netif_queue_stopped(dev)) {

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#523: FILE: arch/ppc/8260_io/fcc_enet.c:445:
+	if (atomic_read(&cep->n_pkts) >= (TX_RING_SIZE-1)) {
 	                                              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TABSTOP: Statements should start on a tabstop
#524: FILE: arch/ppc/8260_io/fcc_enet.c:446:
+	  if (!netif_queue_stopped(dev)) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#525: FILE: arch/ppc/8260_io/fcc_enet.c:447:
+^I^Inetif_stop_queue(dev);^I  $

WARNING:TABSTOP: Statements should start on a tabstop
#527: FILE: arch/ppc/8260_io/fcc_enet.c:449:
+	  }

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#538: FILE: arch/ppc/8260_io/fcc_enet.c:471:
+		printk(" Ring data dump: cur_tx %p%s cur_rx %p.\n",

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 20)
#582: FILE: arch/ppc/8260_io/fcc_enet.c:533:
+		if ((bdp==cep->cur_tx) && (cep->tx_full == 0))
 		    break;

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#582: FILE: arch/ppc/8260_io/fcc_enet.c:533:
+		if ((bdp==cep->cur_tx) && (cep->tx_full == 0))
 		        ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bdp==cep->cur_tx'
#582: FILE: arch/ppc/8260_io/fcc_enet.c:533:
+		if ((bdp==cep->cur_tx) && (cep->tx_full == 0))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cep->tx_full == 0'
#582: FILE: arch/ppc/8260_io/fcc_enet.c:533:
+		if ((bdp==cep->cur_tx) && (cep->tx_full == 0))

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#795: FILE: arch/ppc/8260_io/fcc_enet.c:965:
+		 * read here to get a valid value in ack_int */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1126: FILE: arch/ppc/8260_io/fcc_enet.c:1263:
 
+

ERROR:SPACING: space required before the open parenthesis '('
#1144: FILE: arch/ppc/8260_io/fcc_enet.c:1283:
+		if(phy_info[i]->id == (fep->phy_id >> 4))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1161: FILE: arch/ppc/8260_io/fcc_enet.c:1307:
+	if ((phytype = (mii_reg & 0xfff)) != 0xfff) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1172: FILE: arch/ppc/8260_io/fcc_enet.c:1316:
+			mii_queue(dev, mk_mii_read(MII_REG_PHYIR1),
 							mii_discover_phy);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1219: FILE: arch/ppc/8260_io/fcc_enet.c:1386:
+			for (i=0; i<dev->mc_count; i++) {
 			      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1219: FILE: arch/ppc/8260_io/fcc_enet.c:1386:
+			for (i=0; i<dev->mc_count; i++) {
 			           ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1220: FILE: arch/ppc/8260_io/fcc_enet.c:1387:
+^I^I$

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1220: FILE: arch/ppc/8260_io/fcc_enet.c:1387:
+			for (i=0; i<dev->mc_count; i++) {
+		

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1332: FILE: arch/ppc/8260_io/fcc_enet.c:1717:
+		else {
 			*eap++ = dev->dev_addr[i] = bd->bi_enetaddr[i];
 		}

CHECK:BRACES: Unbalanced braces around else statement
#1332: FILE: arch/ppc/8260_io/fcc_enet.c:1717:
+		else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1387: FILE: arch/ppc/8260_io/fcc_enet.c:1826:
+	if (request_irq(fip->fc_interrupt, fcc_enet_interrupt, 0,
+							"fenet", dev) < 0)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1408: FILE: arch/ppc/8260_io/fcc_enet.c:1832:
+		printk("Can't get MII IRQ %d\n", fip->fc_interrupt);

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1426: FILE: arch/ppc/8260_io/fcc_enet.c:1851:
+	/* Enable the PHY.
+	*/

ERROR:CODE_INDENT: code indent should use tabs where possible
#1427: FILE: arch/ppc/8260_io/fcc_enet.c:1852:
+        *(volatile uint *)(BCSR_ADDR + 4) &= ~BCSR1_FETHIEN;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1427: FILE: arch/ppc/8260_io/fcc_enet.c:1852:
+        *(volatile uint *)(BCSR_ADDR + 4) &= ~BCSR1_FETHIEN;$

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1427: FILE: arch/ppc/8260_io/fcc_enet.c:1852:
+        *(volatile uint *)(BCSR_ADDR + 4) &= ~BCSR1_FETHIEN;

ERROR:CODE_INDENT: code indent should use tabs where possible
#1428: FILE: arch/ppc/8260_io/fcc_enet.c:1853:
+        *(volatile uint *)(BCSR_ADDR + 4) |=  BCSR1_FETH_RST;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1428: FILE: arch/ppc/8260_io/fcc_enet.c:1853:
+        *(volatile uint *)(BCSR_ADDR + 4) |=  BCSR1_FETH_RST;$

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1428: FILE: arch/ppc/8260_io/fcc_enet.c:1853:
+        *(volatile uint *)(BCSR_ADDR + 4) |=  BCSR1_FETH_RST;

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#1473: FILE: arch/ppc/8260_io/fcc_enet.c:1876:
+#define FCC_PDATC_MDIO(bit)					\
+	if (bit)						\
+		io->iop_pdatc |= fip->fc_mdio;			\
+	else							\
+		io->iop_pdatc &= ~fip->fc_mdio;

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#1473: FILE: arch/ppc/8260_io/fcc_enet.c:1876:
+#define FCC_PDATC_MDIO(bit)					\
+	if (bit)						\
+		io->iop_pdatc |= fip->fc_mdio;			\
+	else							\
+		io->iop_pdatc &= ~fip->fc_mdio;

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#1479: FILE: arch/ppc/8260_io/fcc_enet.c:1882:
+#define FCC_PDATC_MDC(bit)					\
+	if (bit)						\
+		io->iop_pdatc |= fip->fc_mdck;			\
+	else							\
+		io->iop_pdatc &= ~fip->fc_mdck;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#1479: FILE: arch/ppc/8260_io/fcc_enet.c:1882:
+#define FCC_PDATC_MDC(bit)					\
+	if (bit)						\
+		io->iop_pdatc |= fip->fc_mdck;			\
+	else							\
+		io->iop_pdatc &= ~fip->fc_mdck;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1491: FILE: arch/ppc/8260_io/fcc_enet.c:1893:
+	volatile	cpm2_map_t		*immap;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1492: FILE: arch/ppc/8260_io/fcc_enet.c:1894:
+	volatile	iop_cpm2_t	*io;

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1578: FILE: arch/ppc/8260_io/fcc_enet.c:1953:
+	for (i = 0; i < 32; i++)
+	{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1606: FILE: arch/ppc/8260_io/fcc_enet.c:1968:
+	volatile fcc_t	*fccp;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1658: FILE: arch/ppc/8260_io/fcc_enet.c:1982:
+	volatile fcc_t	*fccp;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000198787.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 14 errors, 25 warnings, 12 checks, 1588 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000198787.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
