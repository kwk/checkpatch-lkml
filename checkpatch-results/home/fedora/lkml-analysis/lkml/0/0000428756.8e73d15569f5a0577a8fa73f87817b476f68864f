ERROR:TRAILING_WHITESPACE: trailing whitespace
#204: FILE: arch/i386/mm/fault.c:104:
+ * message out $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:NEW_TYPEDEFS: do not add new typedefs
#302: FILE: include/linux/timer.h:21:
+typedef struct timer_list {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#314: FILE: include/linux/timer.h:29:
+extern void add_timer(timer_t * timer);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#314: FILE: include/linux/timer.h:29:
+extern void add_timer(timer_t * timer);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#315: FILE: include/linux/timer.h:30:
+extern int del_timer(timer_t * timer);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#315: FILE: include/linux/timer.h:30:
+extern int del_timer(timer_t * timer);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#316: FILE: include/linux/timer.h:31:
+  $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#316: FILE: include/linux/timer.h:31:
+  $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#319: FILE: include/linux/timer.h:33:
+extern int del_timer_sync(timer_t * timer);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#319: FILE: include/linux/timer.h:33:
+extern int del_timer_sync(timer_t * timer);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#320: FILE: include/linux/timer.h:34:
+extern void sync_timers(void);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'base' may be better as '(base)' to avoid precedence issues
#321: FILE: include/linux/timer.h:35:
+#define timer_enter(base, t) do { base->running_timer = t; mb(); } while (0)

WARNING:MEMORY_BARRIER: memory barrier without comment
#321: FILE: include/linux/timer.h:35:
+#define timer_enter(base, t) do { base->running_timer = t; mb(); } while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'base' may be better as '(base)' to avoid precedence issues
#322: FILE: include/linux/timer.h:36:
+#define timer_exit(base) do { base->running_timer = NULL; } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#322: FILE: include/linux/timer.h:36:
+#define timer_exit(base) do { base->running_timer = NULL; } while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

ERROR:SPACING: space required after that ',' (ctx:VxV)
#323: FILE: include/linux/timer.h:37:
+#define timer_is_running(base,t) (base->running_timer == t)
                              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'base' may be better as '(base)' to avoid precedence issues
#323: FILE: include/linux/timer.h:37:
+#define timer_is_running(base,t) (base->running_timer == t)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 't' may be better as '(t)' to avoid precedence issues
#323: FILE: include/linux/timer.h:37:
+#define timer_is_running(base,t) (base->running_timer == t)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#324: FILE: include/linux/timer.h:38:
+#define timer_synchronize(base,t) while (timer_is_running(base,t)) barrier()
                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#324: FILE: include/linux/timer.h:38:
+#define timer_synchronize(base,t) while (timer_is_running(base,t)) barrier()
                                                               ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#324: FILE: include/linux/timer.h:38:
+#define timer_synchronize(base,t) while (timer_is_running(base,t)) barrier()

ERROR:SPACING: space required after that ',' (ctx:VxV)
#328: FILE: include/linux/timer.h:42:
+#define timer_enter(base,t)          do { } while (0)
                         ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#332: FILE: include/linux/timer.h:45:
+  $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#332: FILE: include/linux/timer.h:45:
+  $

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#346: FILE: include/linux/timer.h:57:
+extern void init_timers(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#347: FILE: include/linux/timer.h:58:
+extern void run_local_timers(void);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#349: FILE: include/linux/timer.h:60:
+static inline void init_timer(timer_t * timer)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#356: FILE: include/linux/timer.h:66:
+static inline int timer_pending(const timer_t * timer)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#479: FILE: include/linux/tqueue.h:52:
+extern void flush_scheduled_tasks(void);

WARNING:TYPO_SPELLING: 'depened' may be misspelled - perhaps 'depend'?
#517: FILE: net/core/dev.c:1310:
+	/* Old protocols did not depened on BHs different of NET_BH and
 	                         ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#518: FILE: net/core/dev.c:1311:
+	/* Old protocols did not depened on BHs different of NET_BH and
+	   TIMER_BH - they need to be fixed for the new assumptions.

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:NEW_TYPEDEFS: do not add new typedefs
#698: FILE: kernel/timer.c:40:
+typedef struct tvec_s {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#705: FILE: kernel/timer.c:45:
+typedef struct tvec_root_s {

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#717: FILE: kernel/timer.c:51:
+	spinlock_t lock;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#719: FILE: kernel/timer.c:53:
+	volatile timer_t * volatile running_timer;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#730: FILE: kernel/timer.c:61:
+typedef struct tvec_t_base_s tvec_base_t;

ERROR:CODE_INDENT: code indent should use tabs where possible
#825: FILE: kernel/timer.c:110:
+  ^Iunsigned long flags;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#825: FILE: kernel/timer.c:110:
+  ^Iunsigned long flags;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#825: FILE: kernel/timer.c:110:
+  ^Iunsigned long flags;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#826: FILE: kernel/timer.c:111:
+  $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#826: FILE: kernel/timer.c:111:
+  $

ERROR:CODE_INDENT: code indent should use tabs where possible
#827: FILE: kernel/timer.c:112:
+  ^IBUG_ON(timer_pending(timer));$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#827: FILE: kernel/timer.c:112:
+  ^IBUG_ON(timer_pending(timer));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#827: FILE: kernel/timer.c:112:
+  ^IBUG_ON(timer_pending(timer));$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#827: FILE: kernel/timer.c:112:
+  	BUG_ON(timer_pending(timer));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#847: FILE: kernel/timer.c:121:
+static inline int detach_timer (timer_t *timer)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'new_base != old_base'
#878: FILE: kernel/timer.c:150:
+	if (old_base && (new_base != old_base)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:BRACES: braces {} should be used on all arms of this statement
#878: FILE: kernel/timer.c:150:
+	if (old_base && (new_base != old_base)) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#895: FILE: kernel/timer.c:167:
+	} else

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'new_base != old_base'
#906: FILE: kernel/timer.c:175:
+	if (old_base && (new_base != old_base))

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#914: FILE: kernel/timer.c:182:
+int del_timer(timer_t * timer)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#918: FILE: kernel/timer.c:185:
+	tvec_base_t * base;

ERROR:CODE_INDENT: code indent should use tabs where possible
#925: FILE: kernel/timer.c:191:
+ ^Ibase = timer->base;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#925: FILE: kernel/timer.c:191:
+ ^Ibase = timer->base;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#925: FILE: kernel/timer.c:191:
+ ^Ibase = timer->base;$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#944: FILE: kernel/timer.c:213:
+int del_timer_sync(timer_t * timer)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#946: FILE: kernel/timer.c:215:
+	tvec_base_t * base;

ERROR:CODE_INDENT: code indent should use tabs where possible
#957: FILE: kernel/timer.c:225:
+^I ^Ibase = timer->base;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#957: FILE: kernel/timer.c:225:
+^I ^Ibase = timer->base;$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#997: FILE: kernel/timer.c:263:
+			BUG();

ERROR:CODE_INDENT: code indent should use tabs where possible
#1052: FILE: kernel/timer.c:305:
+ ^I^I^Idata = timer->data;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1052: FILE: kernel/timer.c:305:
+ ^I^I^Idata = timer->data;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1052: FILE: kernel/timer.c:305:
+ ^I^I^Idata = timer->data;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1069: FILE: kernel/timer.c:316:
+^I^I++base->timer_jiffies; $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1086: FILE: kernel/timer.c:327:
+unsigned long tick_usec = TICK_USEC; ^I^I/* ACTHZ   period (usec) */$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1094: FILE: kernel/timer.c:331:
+struct timespec xtime __attribute__ ((aligned (16)));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(16) over __attribute__((aligned(16)))
#1094: FILE: kernel/timer.c:331:
+struct timespec xtime __attribute__ ((aligned (16)));

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1097: FILE: kernel/timer.c:334:
+int tickadj = 500/HZ ? : 1;		/* microsecs */
                  ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1114: FILE: kernel/timer.c:351:
+long time_freq = ((1000000 + HZ/2) % HZ - HZ/2) << SHIFT_USEC;
                                ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1114: FILE: kernel/timer.c:351:
+long time_freq = ((1000000 + HZ/2) % HZ - HZ/2) << SHIFT_USEC;
                                             ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1120: FILE: kernel/timer.c:357:
+unsigned int * prof_buffer;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1179: FILE: kernel/timer.c:695:
+  $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1179: FILE: kernel/timer.c:695:
+  $

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1200: FILE: kernel/timer.c:715:
+extern int do_setitimer(int, struct itimerval *, struct itimerval *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1200: FILE: kernel/timer.c:715:
+extern int do_setitimer(int, struct itimerval *, struct itimerval *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct itimerval *' should also have an identifier name
#1200: FILE: kernel/timer.c:715:
+extern int do_setitimer(int, struct itimerval *, struct itimerval *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct itimerval *' should also have an identifier name
#1200: FILE: kernel/timer.c:715:
+extern int do_setitimer(int, struct itimerval *, struct itimerval *);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1224: FILE: kernel/timer.c:1016:
+	for (i = 0; i < NR_CPUS; i++) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1226: FILE: kernel/timer.c:1018:
+^I       $

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1387: FILE: kernel/context.c:33:
+typedef struct list_head task_queue;

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'q' may be better as '(q)' to avoid precedence issues
#1407: FILE: kernel/context.c:53:
+#define TQ_ACTIVE(q)	(!list_empty(&q))

WARNING:SPACING: Unnecessary space before function pointer arguments
#1424: FILE: kernel/context.c:70:
+		void (*f) (void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#1424: FILE: kernel/context.c:70:
+		void (*f) (void *);

WARNING:MEMORY_BARRIER: memory barrier without comment
#1432: FILE: kernel/context.c:78:
+		wmb();

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000428756.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 27 errors, 37 warnings, 20 checks, 1258 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000428756.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
