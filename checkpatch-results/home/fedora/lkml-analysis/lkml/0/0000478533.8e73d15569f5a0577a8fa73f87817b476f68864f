WARNING:TYPO_SPELLING: 'loosing' may be misspelled - perhaps 'losing'?
#51: 
without loosing the lock. So you may start with a spin-lock and relax
        ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#118: FILE: include/linux/combilock.h:1:
+#ifndef __LINUX_COMBILOCK_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#122: FILE: include/linux/combilock.h:5:
+/*
+* combilock data structure.

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:LINE_SPACING: Please don't use multiple blank lines
#126: FILE: include/linux/combilock.h:9:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#131: FILE: include/linux/combilock.h:14:
+	struct task_struct volatile   *owner;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'work' - possible side-effects?
#138: FILE: include/linux/combilock.h:21:
+#define DECLARE_COMBILOCK(work) \
+	struct combilock work = COMBILOCK_INITIALIZER(work)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#147: FILE: include/linux/combilock.h:30:
+extern int  FASTCALL(combi_mutex_trylock(struct combilock *x));

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#148: FILE: include/linux/combilock.h:31:
+extern void FASTCALL(combi_mutex_lock(struct combilock *x));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#149: FILE: include/linux/combilock.h:32:
+extern int  FASTCALL(combi_mutex_lock_interruptible(struct combilock

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#150: FILE: include/linux/combilock.h:32:
*x));

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#151: FILE: include/linux/combilock.h:33:
+extern void FASTCALL(combi_mutex_unlock(struct combilock *x));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#152: FILE: include/linux/combilock.h:34:
+extern void FASTCALL(__combi_wait(struct combilock *x));

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#154: FILE: include/linux/combilock.h:36:
+static inline struct task_struct volatile *combi_owner(struct combilock

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#184: FILE: include/linux/combilock.h:65:
+		x->owner=current;
 		        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#193: FILE: include/linux/combilock.h:74:
+		x->owner=NULL;
 		        ^

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#225: FILE: kernel/ksyms.c:378:
+EXPORT_SYMBOL(combi_mutex_lock);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#226: FILE: kernel/ksyms.c:379:
+EXPORT_SYMBOL(combi_mutex_lock_interruptible);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#227: FILE: kernel/ksyms.c:380:
+EXPORT_SYMBOL(combi_mutex_unlock);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#228: FILE: kernel/ksyms.c:381:
+EXPORT_SYMBOL(__combi_wait);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#249: FILE: kernel/sched.c:787:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#251: FILE: kernel/sched.c:789:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#253: FILE: kernel/sched.c:791:
+
+

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#263: FILE: kernel/sched.c:801:
+	do {
+	__set_current_state(TASK_UNINTERRUPTIBLE);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#274: FILE: kernel/sched.c:812:
+	int res=0;
 	       ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#275: FILE: kernel/sched.c:813:
+	int res=0;
+	spin_lock(&x->wait.lock);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#287: FILE: kernel/sched.c:825:
+				x->owner=current;
 				        ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#291: FILE: kernel/sched.c:829:
+				res=1;
 				   ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#308: FILE: kernel/sched.c:846:
+	x->owner=current;
 	        ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#318: FILE: kernel/sched.c:856:
+	x->owner=current;
 	        ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#325: FILE: kernel/sched.c:863:
+	x->owner=NULL;
 	        ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#331: FILE: kernel/sched.c:868:
+
+

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000478533.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 9 errors, 11 warnings, 11 checks, 205 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000478533.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
