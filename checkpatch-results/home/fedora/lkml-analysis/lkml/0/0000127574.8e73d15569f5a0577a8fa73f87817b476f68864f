ERROR:CODE_INDENT: code indent should use tabs where possible
#67: FILE: fs/proc/base.c:172:
+        PROC_TID_DELAY_ACCT,$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#67: FILE: fs/proc/base.c:172:
+        PROC_TID_DELAY_ACCT,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#68: FILE: fs/proc/base.c:173:
+        PROC_TGID_DELAY_ACCT,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#68: FILE: fs/proc/base.c:173:
+        PROC_TGID_DELAY_ACCT,$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#78: FILE: fs/proc/base.c:230:
+	E(PROC_TGID_DELAY_ACCT,"delay",   S_IFREG|S_IRUGO),
 	                      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#78: FILE: fs/proc/base.c:230:
+	E(PROC_TGID_DELAY_ACCT,"delay",   S_IFREG|S_IRUGO),
 	                                         ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#78: FILE: fs/proc/base.c:230:
+	E(PROC_TGID_DELAY_ACCT,"delay",   S_IFREG|S_IRUGO),

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

ERROR:SPACING: space required after that ',' (ctx:VxV)
#88: FILE: fs/proc/base.c:275:
+	E(PROC_TID_DELAY_ACCT,"delay",   S_IFREG|S_IRUGO),
 	                     ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#88: FILE: fs/proc/base.c:275:
+	E(PROC_TID_DELAY_ACCT,"delay",   S_IFREG|S_IRUGO),
 	                                        ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#88: FILE: fs/proc/base.c:275:
+	E(PROC_TID_DELAY_ACCT,"delay",   S_IFREG|S_IRUGO),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#99: FILE: fs/proc/base.c:1083:
+ssize_t proc_delayacct_write(struct file *file, const char __user *buffer,
+				size_t count, loff_t *ppos)

ERROR:CODE_INDENT: code indent should use tabs where possible
#108: FILE: fs/proc/base.c:1092:
+        ^Ireturn -EFAULT;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#108: FILE: fs/proc/base.c:1092:
+        ^Ireturn -EFAULT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#108: FILE: fs/proc/base.c:1092:
+        ^Ireturn -EFAULT;$

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#110: FILE: fs/proc/base.c:1094:
+	cmd = simple_strtoul(kbuf, NULL, 10);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#119: FILE: fs/proc/base.c:1103:
+ssize_t proc_delayacct_read(struct file *file, char __user *buffer,
+				size_t count, loff_t *ppos)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#130: FILE: fs/proc/base.c:1114:
+	if (count > len-__ppos)
 	               ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#131: FILE: fs/proc/base.c:1115:
+		count = len-__ppos;
 		           ^

WARNING:CONST_STRUCT: struct file_operations should normally be const
#138: FILE: fs/proc/base.c:1122:
+static struct file_operations proc_delayacct_operations = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

ERROR:CODE_INDENT: code indent should use tabs where possible
#139: FILE: fs/proc/base.c:1123:
+        .read           = proc_delayacct_read,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#139: FILE: fs/proc/base.c:1123:
+        .read           = proc_delayacct_read,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#140: FILE: fs/proc/base.c:1124:
+        .write          = proc_delayacct_write,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#140: FILE: fs/proc/base.c:1124:
+        .write          = proc_delayacct_write,$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#177: FILE: include/linux/delayacct.h:28:
+extern int delayacct_task_write(struct task_struct *tsk, int cmd);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#178: FILE: include/linux/delayacct.h:29:
+extern size_t delayacct_task_read(struct task_struct *tsk, char *buf);

WARNING:SPACING: space prohibited before semicolon
#218: FILE: kernel/delayacct.c:89:
+	run_count = tsk->sched_info.pcnt ;

CHECK:SPACING: No space is necessary after a cast
#223: FILE: kernel/delayacct.c:94:
+		 (uint64_t) current_sched_time(tsk),

CHECK:SPACING: No space is necessary after a cast
#224: FILE: kernel/delayacct.c:95:
+		 (uint64_t) run_delay,

CHECK:SPACING: No space is necessary after a cast
#225: FILE: kernel/delayacct.c:96:
+		 (unsigned int) tsk->delays.blkio_count,

CHECK:SPACING: No space is necessary after a cast
#226: FILE: kernel/delayacct.c:97:
+		 (uint64_t) tsk->delays.blkio_delay,

CHECK:SPACING: No space is necessary after a cast
#227: FILE: kernel/delayacct.c:98:
+		 (unsigned int) tsk->delays.swapin_count,

CHECK:SPACING: No space is necessary after a cast
#228: FILE: kernel/delayacct.c:99:
+		 (uint64_t) tsk->delays.swapin_delay);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000127574.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 7 errors, 11 warnings, 14 checks, 160 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000127574.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
