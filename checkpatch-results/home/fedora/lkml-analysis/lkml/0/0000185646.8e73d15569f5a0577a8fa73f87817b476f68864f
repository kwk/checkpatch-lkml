WARNING:TYPO_SPELLING: 'initalization' may be misspelled - perhaps 'initialization'?
#22: 
Make sparse's initalization be accessible at runtime.  This
              ^^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#82: FILE: include/linux/mmzone.h:480:
+#define	SECTION_MARKED_PRESENT	(1UL<<0)
        	                      	    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BIT_MACRO: Prefer using the BIT macro
#82: FILE: include/linux/mmzone.h:480:
+#define	SECTION_MARKED_PRESENT	(1UL<<0)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#83: FILE: include/linux/mmzone.h:481:
+#define SECTION_HAS_MEM_MAP	(1UL<<1)
                            	    ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#83: FILE: include/linux/mmzone.h:481:
+#define SECTION_HAS_MEM_MAP	(1UL<<1)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#84: FILE: include/linux/mmzone.h:482:
+#define SECTION_MAP_LAST_BIT	(1UL<<2)
                             	    ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#84: FILE: include/linux/mmzone.h:482:
+#define SECTION_MAP_LAST_BIT	(1UL<<2)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#85: FILE: include/linux/mmzone.h:483:
+#define SECTION_MAP_MASK	(~(SECTION_MAP_LAST_BIT-1))
                         	                       ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#90: FILE: include/linux/mmzone.h:488:
+	unsigned long map = section->section_mem_map;
+	map &= SECTION_MAP_MASK;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#171: FILE: mm/sparse.c:74:
+static int sparse_init_one_section(struct mem_section *ms,
+		unsigned long pnum, struct page *mem_map)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#191: FILE: mm/sparse.c:94:
+	map = alloc_bootmem_node(NODE_DATA(nid),
+			sizeof(struct page) * PAGES_PER_SECTION);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#195: FILE: mm/sparse.c:98:
+	printk(KERN_WARNING "%s: allocation failed\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#195: FILE: mm/sparse.c:98:
+	printk(KERN_WARNING "%s: allocation failed\n", __FUNCTION__);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000185646.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 0 errors, 4 warnings, 9 checks, 187 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000185646.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
