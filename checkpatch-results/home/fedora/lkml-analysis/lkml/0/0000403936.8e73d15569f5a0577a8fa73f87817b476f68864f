WARNING:TYPO_SPELLING: 'avaiable' may be misspelled - perhaps 'available'?
#29: 
devfs_helper is avaiable from the following location:
                ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#31: 
ftp://ftp.yggdrasil.com/pub/dist/device_control/devfs_helper/devfs_helper-0.1.tar.gz

WARNING:TYPO_SPELLING: 'embarassed' may be misspelled - perhaps 'embarrassed'?
#42: 
	Also, here is version 2 of my mini-devfs.  I am embarassed
	                                                ^^^^^^^^^^

WARNING:NEW_TYPEDEFS: do not add new typedefs
#75: FILE: include/linux/devfs_fs_kernel.h:28:
+typedef struct dentry * devfs_handle_t;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#75: FILE: include/linux/devfs_fs_kernel.h:28:
+typedef struct dentry * devfs_handle_t;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#89: FILE: fs/namei.c:1380:
+struct dentry *lookup_create(struct nameidata *nd, int is_dir)
                                                ^^

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#99: FILE: fs/Kconfig:850:
+config DEVFS_SMALL
+	bool "Smaller /dev file system (EXPERIMENTAL)"
+	depends on EXPERIMENTAL && DEVFS_FS
+	---help---
+	  New smaller devfs without automatic partition rereading
+	  (which impeded user level partition handling) and currently
+	  without some features used by arch/ia64/sn.
+
+	  If unsure, say N.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#143: FILE: fs/mini-devfs/inode.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#169: FILE: fs/mini-devfs/inode.c:27:
+#include <asm/uaccess.h>

WARNING:INCLUDE_LINUX: Use #include <linux/string.h> instead of <asm/string.h>
#170: FILE: fs/mini-devfs/inode.c:28:
+#include <asm/string.h>

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#173: FILE: fs/mini-devfs/inode.c:31:
+/* For now, must be the same as devfs magic to appease glibc.  See
+   __posix_openpt in glibc-2.3/sysdeps/unix/sysv/linux/getpt.c

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#174: FILE: fs/mini-devfs/inode.c:32:
+   TODO(?): Adopt a new magic number and adjust glibc? */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#177: FILE: fs/mini-devfs/inode.c:35:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#179: FILE: fs/mini-devfs/inode.c:37:
+/* TODO: Move this to some .h file or, more likely, use a slightly
+   different interface from lookup_create. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#179: FILE: fs/mini-devfs/inode.c:37:
+   different interface from lookup_create. */

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#180: FILE: fs/mini-devfs/inode.c:38:
+extern struct dentry *lookup_create(struct nameidata *nd, int is_dir);
                                                       ^^

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#180: FILE: fs/mini-devfs/inode.c:38:
+extern struct dentry *lookup_create(struct nameidata *nd, int is_dir);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:CONST_STRUCT: struct address_space_operations should normally be const
#183: FILE: fs/mini-devfs/inode.c:41:
+static struct address_space_operations devfs2_aops;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct file_operations should normally be const
#184: FILE: fs/mini-devfs/inode.c:42:
+static struct file_operations devfs2_file_operations;

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#185: FILE: fs/mini-devfs/inode.c:43:
+static struct inode_operations devfs2_dir_inode_operations;

CHECK:BRACES: braces {} should be used on all arms of this statement
#200: FILE: fs/mini-devfs/inode.c:58:
+	if (devfs_generate_path(dentry, path, sizeof(path)) == 0) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:STATIC_CONST_CHAR_ARRAY: char * array declaration might be better as static const
#201: FILE: fs/mini-devfs/inode.c:59:
+		const char *argv[] = { devfs_helper, event, path, NULL };

WARNING:STATIC_CONST_CHAR_ARRAY: char * array declaration might be better as static const
#202: FILE: fs/mini-devfs/inode.c:60:
+		static char *envp[] = {"PATH=/bin:/sbin:/usr/bin:/usr/sbin",

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#206: FILE: fs/mini-devfs/inode.c:64:
+		/* FIXME: Change the call_usermodehelper prototype so
+		   that argv and envp are type const so we won't have

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#207: FILE: fs/mini-devfs/inode.c:65:
+		   to cast the type of argv. */

CHECK:SPACING: No space is necessary after a cast
#208: FILE: fs/mini-devfs/inode.c:66:
+		call_usermodehelper(devfs_helper, (char**) argv, envp);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "(foo**)" should be "(foo **)"
#208: FILE: fs/mini-devfs/inode.c:66:
+		call_usermodehelper(devfs_helper, (char**) argv, envp);

CHECK:BRACES: Unbalanced braces around else statement
#209: FILE: fs/mini-devfs/inode.c:67:
+	} else

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#210: FILE: fs/mini-devfs/inode.c:68:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#215: FILE: fs/mini-devfs/inode.c:73:
+	struct inode * inode = new_inode(sb);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#228: FILE: fs/mini-devfs/inode.c:86:
+	inode->i_atime = inode->i_mtime = inode->i_ctime = CURRENT_TIME;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#229: FILE: fs/mini-devfs/inode.c:87:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#252: FILE: fs/mini-devfs/inode.c:110:
+static struct dentry * devfs2_lookup(struct inode *inode, struct dentry *dentry)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#259: FILE: fs/mini-devfs/inode.c:117:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#267: FILE: fs/mini-devfs/inode.c:125:
+	struct inode * inode = devfs2_get_inode(dir->i_sb, mode, dev);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#280: FILE: fs/mini-devfs/inode.c:138:
+static int devfs2_mkdir(struct inode * dir, struct dentry * dentry, int mode)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#280: FILE: fs/mini-devfs/inode.c:138:
+static int devfs2_mkdir(struct inode * dir, struct dentry * dentry, int mode)

WARNING:LINE_SPACING: Missing a blank line after declarations
#283: FILE: fs/mini-devfs/inode.c:141:
+	int retval = devfs2_mknod(dir, dentry, mode | S_IFDIR, 0);
+	if (!retval)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#293: FILE: fs/mini-devfs/inode.c:151:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#294: FILE: fs/mini-devfs/inode.c:152:
+static int devfs2_symlink(struct inode * dir, struct dentry *dentry, const char * symname)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#294: FILE: fs/mini-devfs/inode.c:152:
+static int devfs2_symlink(struct inode * dir, struct dentry *dentry, const char * symname)

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#299: FILE: fs/mini-devfs/inode.c:157:
+	inode = devfs2_get_inode(dir->i_sb, S_IFLNK|S_IRWXUGO, 0);
 	                                           ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXUGO' are not preferred. Consider using octal permissions '0777'.
#299: FILE: fs/mini-devfs/inode.c:157:
+	inode = devfs2_get_inode(dir->i_sb, S_IFLNK|S_IRWXUGO, 0);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#301: FILE: fs/mini-devfs/inode.c:159:
+		int l = strlen(symname)+1;
 		                       ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#302: FILE: fs/mini-devfs/inode.c:160:
+		int l = strlen(symname)+1;
+		error = page_symlink(inode, symname, l);

CHECK:BRACES: braces {} should be used on all arms of this statement
#303: FILE: fs/mini-devfs/inode.c:161:
+		if (!error) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#306: FILE: fs/mini-devfs/inode.c:164:
+		} else

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#307: FILE: fs/mini-devfs/inode.c:165:
+			iput(inode);
 			^^^^

WARNING:CONST_STRUCT: struct address_space_operations should normally be const
#312: FILE: fs/mini-devfs/inode.c:170:
+static struct address_space_operations devfs2_aops = {

WARNING:CONST_STRUCT: struct file_operations should normally be const
#318: FILE: fs/mini-devfs/inode.c:176:
+static struct file_operations devfs2_file_operations = {

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#326: FILE: fs/mini-devfs/inode.c:184:
+static struct inode_operations devfs2_dir_inode_operations = {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#343: FILE: fs/mini-devfs/inode.c:201:
+static int devfs2_fill_super(struct super_block * sb, void * data, int silent)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#343: FILE: fs/mini-devfs/inode.c:201:
+static int devfs2_fill_super(struct super_block * sb, void * data, int silent)

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#358: FILE: fs/mini-devfs/inode.c:216:
+		iput(inode);
 		^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "devfs2_vfsmount"
#381: FILE: fs/mini-devfs/inode.c:239:
+	if (devfs2_vfsmount != NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:BRACES: braces {} should be used on all arms of this statement
#390: FILE: fs/mini-devfs/inode.c:248:
+	if (IS_ERR(devfs2_vfsmount)) {
[...]
+	else
[...]

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#394: FILE: fs/mini-devfs/inode.c:252:
+	}
+	else

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#409: FILE: fs/mini-devfs/inode.c:267:
+static int walk_parents_mkdir(const char **path, struct nameidata *nd,
                                                                    ^^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#413: FILE: fs/mini-devfs/inode.c:271:
+	char buf[strlen(*path)+1];
 	                      ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#418: FILE: fs/mini-devfs/inode.c:276:
+		int len = slash - *path;
+		memcpy(buf, *path, len);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#422: FILE: fs/mini-devfs/inode.c:280:
+		err = link_path_walk(buf, nd); /* releases dcache_lock */
 		                          ^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#424: FILE: fs/mini-devfs/inode.c:282:
+		BUG_ON(err);	/* AJR */

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#428: FILE: fs/mini-devfs/inode.c:286:
+		nd->dentry = lookup_create(nd, is_dir);
 		                           ^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#431: FILE: fs/mini-devfs/inode.c:289:
+			BUG();

ERROR:TRAILING_WHITESPACE: trailing whitespace
#438: FILE: fs/mini-devfs/inode.c:296:
+^I^I$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#442: FILE: fs/mini-devfs/inode.c:300:
+			BUG_ON(err); /* AJR */

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#456: FILE: fs/mini-devfs/inode.c:314:
+	struct nameidata nd;
 	                 ^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dir"
#459: FILE: fs/mini-devfs/inode.c:317:
+	if (dir == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!devfs2_vfsmount"
#460: FILE: fs/mini-devfs/inode.c:318:
+		if (devfs2_vfsmount == NULL && init_devfs2_fs() != 0)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#461: FILE: fs/mini-devfs/inode.c:319:
+			BUG();

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#466: FILE: fs/mini-devfs/inode.c:324:
+	memset(&nd, 0, sizeof(nd));
 	        ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#466: FILE: fs/mini-devfs/inode.c:324:
+	memset(&nd, 0, sizeof(nd));
 	                      ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#467: FILE: fs/mini-devfs/inode.c:325:
+	nd.flags = LOOKUP_PARENT;
 	^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#468: FILE: fs/mini-devfs/inode.c:326:
+	/* nd.mnt = current->fs->rootmnt; FIXME? */
 	   ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#469: FILE: fs/mini-devfs/inode.c:327:
+	nd.mnt = devfs2_vfsmount;
 	^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#470: FILE: fs/mini-devfs/inode.c:328:
+	nd.dentry = dir;
 	^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#472: FILE: fs/mini-devfs/inode.c:330:
+	err = walk_parents_mkdir(&name, &nd, is_dir);
 	                                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#477: FILE: fs/mini-devfs/inode.c:335:
+	err = link_path_walk(name, &nd);
 	                            ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#479: FILE: fs/mini-devfs/inode.c:337:
+		printk ("AJR devfs_decode: link_path_walk(name %s, &nd) got error %d.\n", name, err);
 		                                                    ^^

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#479: FILE: fs/mini-devfs/inode.c:337:
+		printk ("AJR devfs_decode: link_path_walk(name %s, &nd) got error %d.\n", name, err);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#479: FILE: fs/mini-devfs/inode.c:337:
+		printk ("AJR devfs_decode: link_path_walk(name %s, &nd) got error %d.\n", name, err);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#479: FILE: fs/mini-devfs/inode.c:337:
+		printk ("AJR devfs_decode: link_path_walk(name %s, &nd) got error %d.\n", name, err);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'devfs_decode', this function's name, in a string
#479: FILE: fs/mini-devfs/inode.c:337:
+		printk ("AJR devfs_decode: link_path_walk(name %s, &nd) got error %d.\n", name, err);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#480: FILE: fs/mini-devfs/inode.c:338:
+		BUG();

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#484: FILE: fs/mini-devfs/inode.c:342:
+	*dentry = lookup_create(&nd, is_dir);
 	                         ^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#486: FILE: fs/mini-devfs/inode.c:344:
+	BUG_ON(IS_ERR(*dentry)); /* AJR */

CHECK:BRACES: braces {} should be used on all arms of this statement
#487: FILE: fs/mini-devfs/inode.c:345:
+	if (IS_ERR(*dentry))
[...]
+	else {
[...]

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#489: FILE: fs/mini-devfs/inode.c:347:
+		return PTR_ERR(*dentry);
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#489: FILE: fs/mini-devfs/inode.c:347:
+	else {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#495: FILE: fs/mini-devfs/inode.c:353:
+
+

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#496: FILE: fs/mini-devfs/inode.c:354:
+devfs_handle_t devfs_register (devfs_handle_t dir,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#513: FILE: fs/mini-devfs/inode.c:371:
+			printk ("AJR devfs_register(dir %p, name %s, flags 0x%x,\n\tmajor %d, minor %d, mode 0%o, ops %p, info %p)\n\tfailed, err %d.\n",

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#513: FILE: fs/mini-devfs/inode.c:371:
+			printk ("AJR devfs_register(dir %p, name %s, flags 0x%x,\n\tmajor %d, minor %d, mode 0%o, ops %p, info %p)\n\tfailed, err %d.\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'devfs_register', this function's name, in a string
#513: FILE: fs/mini-devfs/inode.c:371:
+			printk ("AJR devfs_register(dir %p, name %s, flags 0x%x,\n\tmajor %d, minor %d, mode 0%o, ops %p, info %p)\n\tfailed, err %d.\n",

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#515: FILE: fs/mini-devfs/inode.c:373:
+			BUG_ON(err != -EEXIST);	/* AJR */

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#522: FILE: fs/mini-devfs/inode.c:380:
+
+}

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#525: FILE: fs/mini-devfs/inode.c:383:
+void devfs_unregister (devfs_handle_t de)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#534: FILE: fs/mini-devfs/inode.c:392:
+void devfs_put (devfs_handle_t de)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#540: FILE: fs/mini-devfs/inode.c:398:
+int devfs_mk_symlink (devfs_handle_t dir, const char *name,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#558: FILE: fs/mini-devfs/inode.c:416:
+devfs_handle_t devfs_mk_dir (devfs_handle_t dir, const char *name, void *info)

CHECK:BRACES: braces {} should be used on all arms of this statement
#564: FILE: fs/mini-devfs/inode.c:422:
+	if (!err) {
[...]
+	else
[...]

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#568: FILE: fs/mini-devfs/inode.c:426:
+			BUG_ON (err != -EEXIST); /* AJR */

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#568: FILE: fs/mini-devfs/inode.c:426:
+			BUG_ON (err != -EEXIST); /* AJR */

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#572: FILE: fs/mini-devfs/inode.c:430:
+	}
+	else

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#573: FILE: fs/mini-devfs/inode.c:431:
+		BUG();	/* AJR */

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#584: FILE: fs/mini-devfs/inode.c:442:
+	struct nameidata nd;
 	                 ^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#590: FILE: fs/mini-devfs/inode.c:448:
+		BUG();

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#594: FILE: fs/mini-devfs/inode.c:452:
+	buf[sizeof(buf)-1] = '\0';
 	               ^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#596: FILE: fs/mini-devfs/inode.c:454:
+	memset(&nd, 0, sizeof(nd));
 	        ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#596: FILE: fs/mini-devfs/inode.c:454:
+	memset(&nd, 0, sizeof(nd));
 	                      ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#597: FILE: fs/mini-devfs/inode.c:455:
+	nd.mnt = devfs2_vfsmount;
 	^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#598: FILE: fs/mini-devfs/inode.c:456:
+	nd.dentry = devfs2_vfsmount->mnt_sb->s_root;
 	^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#601: FILE: fs/mini-devfs/inode.c:459:
+	err = link_path_walk(buf, &nd);
 	                           ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#603: FILE: fs/mini-devfs/inode.c:461:
+		devfs_unregister(nd.dentry);
 		                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#604: FILE: fs/mini-devfs/inode.c:462:
+		devfs_put(nd.dentry);
 		          ^^

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#606: FILE: fs/mini-devfs/inode.c:464:
+	}
+	else

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#607: FILE: fs/mini-devfs/inode.c:465:
+		printk ("AJR devfs_remove: link_path_walk(buf %s, len %d) "

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#607: FILE: fs/mini-devfs/inode.c:465:
+		printk ("AJR devfs_remove: link_path_walk(buf %s, len %d) "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'devfs_remove', this function's name, in a string
#607: FILE: fs/mini-devfs/inode.c:465:
+		printk ("AJR devfs_remove: link_path_walk(buf %s, len %d) "

WARNING:SPLIT_STRING: quoted string split across lines
#608: FILE: fs/mini-devfs/inode.c:466:
+		printk ("AJR devfs_remove: link_path_walk(buf %s, len %d) "
+			"returned err %d.\n", buf, len, err);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#610: FILE: fs/mini-devfs/inode.c:468:
+
+}

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#612: FILE: fs/mini-devfs/inode.c:470:
+EXPORT_SYMBOL(devfs_remove);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#619: FILE: fs/mini-devfs/inode.c:477:
+void __init mount_devfs_fs (void)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#622: FILE: fs/mini-devfs/inode.c:480:
+    int err;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#624: FILE: fs/mini-devfs/inode.c:482:
+    err = do_mount ("none", "/dev", "devfs", 0, "");$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#624: FILE: fs/mini-devfs/inode.c:482:
+    err = do_mount ("none", "/dev", "devfs", 0, "");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#625: FILE: fs/mini-devfs/inode.c:483:
+    if (err == 0) printk (KERN_INFO "Mounted devfs on /dev\n");$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#625: FILE: fs/mini-devfs/inode.c:483:
+    if (err == 0) printk (KERN_INFO "Mounted devfs on /dev\n");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#625: FILE: fs/mini-devfs/inode.c:483:
+    if (err == 0) printk (KERN_INFO "Mounted devfs on /dev\n");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#625: FILE: fs/mini-devfs/inode.c:483:
+    if (err == 0) printk (KERN_INFO "Mounted devfs on /dev\n");

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#626: FILE: fs/mini-devfs/inode.c:484:
+    else printk ("(): unable to mount devfs2, err: %d\n", err);$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#626: FILE: fs/mini-devfs/inode.c:484:
+    else printk ("(): unable to mount devfs2, err: %d\n", err);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#626: FILE: fs/mini-devfs/inode.c:484:
+    else printk ("(): unable to mount devfs2, err: %d\n", err);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#626: FILE: fs/mini-devfs/inode.c:484:
+    else printk ("(): unable to mount devfs2, err: %d\n", err);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#630: FILE: fs/mini-devfs/inode.c:488:
+
+

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#631: FILE: fs/mini-devfs/inode.c:489:
+static int path_len (struct dentry *de, struct dentry *root)

WARNING:LINE_SPACING: Missing a blank line after declarations
#634: FILE: fs/mini-devfs/inode.c:492:
+	int len = 0;
+	while (de != root) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#639: FILE: fs/mini-devfs/inode.c:497:
+	return len;		/* -1 because we omit the leading '/',
+				   +1 because we include trailing '\0' */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#639: FILE: fs/mini-devfs/inode.c:497:
+				   +1 because we include trailing '\0' */

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#642: FILE: fs/mini-devfs/inode.c:500:
+int devfs_generate_path (devfs_handle_t de, char *path, int buflen)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!de"
#648: FILE: fs/mini-devfs/inode.c:506:
+	if (de == NULL) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#649: FILE: fs/mini-devfs/inode.c:507:
+		BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#656: FILE: fs/mini-devfs/inode.c:514:
+		BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#664: FILE: fs/mini-devfs/inode.c:522:
+		BUG();

ERROR:TRAILING_WHITESPACE: trailing whitespace
#679: FILE: fs/mini-devfs/inode.c:537:
+^I^I$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#682: FILE: fs/mini-devfs/inode.c:540:
+	BUG_ON(path != path_orig);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#687: FILE: fs/mini-devfs/inode.c:545:
+int devfs_set_file_size (devfs_handle_t de, unsigned long size)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#690: FILE: fs/mini-devfs/inode.c:548:
+	BUG();

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#696: FILE: fs/mini-devfs/numspace.c:1:
+/*  numspace operations copied from devfs/util.c, which have the following

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#697: FILE: fs/mini-devfs/numspace.c:2:
+/*  numspace operations copied from devfs/util.c, which have the following
+    copyright notice:

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#712: FILE: fs/mini-devfs/numspace.c:17:
+    License along with this library; if not, write to the Free$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#713: FILE: fs/mini-devfs/numspace.c:18:
+    Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#732: FILE: fs/mini-devfs/numspace.c:37:
+int devfs_alloc_unique_number (struct unique_numspace *space)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#734: FILE: fs/mini-devfs/numspace.c:39:
+    int number;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#735: FILE: fs/mini-devfs/numspace.c:40:
+    unsigned int length;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#738: FILE: fs/mini-devfs/numspace.c:43:
+    spin_lock (&space->init_lock);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#738: FILE: fs/mini-devfs/numspace.c:43:
+    spin_lock (&space->init_lock);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#739: FILE: fs/mini-devfs/numspace.c:44:
+    if (!space->sem_initialised)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#739: FILE: fs/mini-devfs/numspace.c:44:
+    if (!space->sem_initialised)
+    {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#740: FILE: fs/mini-devfs/numspace.c:45:
+    {$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#741: FILE: fs/mini-devfs/numspace.c:46:
+	sema_init (&space->semaphore, 1);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#743: FILE: fs/mini-devfs/numspace.c:48:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#744: FILE: fs/mini-devfs/numspace.c:49:
+    spin_unlock (&space->init_lock);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#744: FILE: fs/mini-devfs/numspace.c:49:
+    spin_unlock (&space->init_lock);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#745: FILE: fs/mini-devfs/numspace.c:50:
+    down (&space->semaphore);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#745: FILE: fs/mini-devfs/numspace.c:50:
+    down (&space->semaphore);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#746: FILE: fs/mini-devfs/numspace.c:51:
+    if (space->num_free < 1)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#746: FILE: fs/mini-devfs/numspace.c:51:
+    if (space->num_free < 1)
+    {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#747: FILE: fs/mini-devfs/numspace.c:52:
+    {$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#750: FILE: fs/mini-devfs/numspace.c:55:
+	if (space->length < 16) length = 16;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#751: FILE: fs/mini-devfs/numspace.c:56:
+	else length = space->length << 1;

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#752: FILE: fs/mini-devfs/numspace.c:57:
+	if ( ( bits = vmalloc (length) ) == NULL )
+	{

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#752: FILE: fs/mini-devfs/numspace.c:57:
+	if ( ( bits = vmalloc (length) ) == NULL )
+	{

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#752: FILE: fs/mini-devfs/numspace.c:57:
+	if ( ( bits = vmalloc (length) ) == NULL )

ERROR:SPACING: space prohibited after that open parenthesis '('
#752: FILE: fs/mini-devfs/numspace.c:57:
+	if ( ( bits = vmalloc (length) ) == NULL )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#752: FILE: fs/mini-devfs/numspace.c:57:
+	if ( ( bits = vmalloc (length) ) == NULL )

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#752: FILE: fs/mini-devfs/numspace.c:57:
+	if ( ( bits = vmalloc (length) ) == NULL )

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#754: FILE: fs/mini-devfs/numspace.c:59:
+	    up (&space->semaphore);

WARNING:TABSTOP: Statements should start on a tabstop
#755: FILE: fs/mini-devfs/numspace.c:60:
+	    return -ENOMEM;

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#757: FILE: fs/mini-devfs/numspace.c:62:
+	if (space->bits != NULL)
+	{

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#757: FILE: fs/mini-devfs/numspace.c:62:
+	if (space->bits != NULL)
+	{

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "space->bits"
#757: FILE: fs/mini-devfs/numspace.c:62:
+	if (space->bits != NULL)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#759: FILE: fs/mini-devfs/numspace.c:64:
+	    memcpy (bits, space->bits, space->length);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#760: FILE: fs/mini-devfs/numspace.c:65:
+	    vfree (space->bits);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#764: FILE: fs/mini-devfs/numspace.c:69:
+	memset (bits + space->length, 0, length - space->length);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#766: FILE: fs/mini-devfs/numspace.c:71:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#767: FILE: fs/mini-devfs/numspace.c:72:
+    number = find_first_zero_bit (space->bits, space->length << 3);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#767: FILE: fs/mini-devfs/numspace.c:72:
+    number = find_first_zero_bit (space->bits, space->length << 3);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#768: FILE: fs/mini-devfs/numspace.c:73:
+    --space->num_free;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#769: FILE: fs/mini-devfs/numspace.c:74:
+    __set_bit (number, space->bits);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#769: FILE: fs/mini-devfs/numspace.c:74:
+    __set_bit (number, space->bits);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#770: FILE: fs/mini-devfs/numspace.c:75:
+    up (&space->semaphore);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#770: FILE: fs/mini-devfs/numspace.c:75:
+    up (&space->semaphore);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#771: FILE: fs/mini-devfs/numspace.c:76:
+    return number;$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#775: FILE: fs/mini-devfs/numspace.c:80:
+
+

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#784: FILE: fs/mini-devfs/numspace.c:89:
+void devfs_dealloc_unique_number (struct unique_numspace *space, int number)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#786: FILE: fs/mini-devfs/numspace.c:91:
+    int was_set;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#788: FILE: fs/mini-devfs/numspace.c:93:
+    if (number < 0) return;$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#788: FILE: fs/mini-devfs/numspace.c:93:
+    if (number < 0) return;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#789: FILE: fs/mini-devfs/numspace.c:94:
+    down (&space->semaphore);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#789: FILE: fs/mini-devfs/numspace.c:94:
+    down (&space->semaphore);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#790: FILE: fs/mini-devfs/numspace.c:95:
+    was_set = __test_and_clear_bit (number, space->bits);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#790: FILE: fs/mini-devfs/numspace.c:95:
+    was_set = __test_and_clear_bit (number, space->bits);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#791: FILE: fs/mini-devfs/numspace.c:96:
+    if (was_set) ++space->num_free;$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#791: FILE: fs/mini-devfs/numspace.c:96:
+    if (was_set) ++space->num_free;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#792: FILE: fs/mini-devfs/numspace.c:97:
+    up (&space->semaphore);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#792: FILE: fs/mini-devfs/numspace.c:97:
+    up (&space->semaphore);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#793: FILE: fs/mini-devfs/numspace.c:98:
+    if (!was_set) printk ("(): number %d was already free\n", number);$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#793: FILE: fs/mini-devfs/numspace.c:98:
+    if (!was_set) printk ("(): number %d was already free\n", number);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#793: FILE: fs/mini-devfs/numspace.c:98:
+    if (!was_set) printk ("(): number %d was already free\n", number);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#793: FILE: fs/mini-devfs/numspace.c:98:
+    if (!was_set) printk ("(): number %d was already free\n", number);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000403936.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 33 errors, 151 warnings, 27 checks, 709 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000403936.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
