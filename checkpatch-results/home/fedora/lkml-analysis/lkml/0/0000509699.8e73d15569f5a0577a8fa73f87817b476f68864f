WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#32: 
diff -urN -X exclude linux-2.4.11-pre2-orig/fs/smbfs/ChangeLog linux-2.4.11-pre2-smbfs/fs/smbfs/ChangeLog

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#257: FILE: fs/smbfs/inode.c:406:
+	server->temp_buf = smb_kmalloc(2*SMB_MAXPATHLEN+20, GFP_KERNEL);
 	                                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#257: FILE: fs/smbfs/inode.c:406:
+	server->temp_buf = smb_kmalloc(2*SMB_MAXPATHLEN+20, GFP_KERNEL);
 	                                               ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR' are not preferred. Consider using octal permissions '0200'.
#379: FILE: fs/smbfs/inode.c:584:
+		if (attr->ia_mode & S_IWUSR) {

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:CAMELCASE: Avoid CamelCase: <aRONLY>
#380: FILE: fs/smbfs/inode.c:585:
+			if (fattr.attr & aRONLY) {

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#508: FILE: fs/smbfs/proc.c:320:
+	/* first subtract and mask after that... Otherwise, if
+	   date == 0, bad things happen */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#508: FILE: fs/smbfs/proc.c:320:
+	   date == 0, bad things happen */

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#527: FILE: fs/smbfs/proc.c:366:
+#define NTFS_TIME_OFFSET ((u64)(369*365 + 89) * 24 * 3600 * 10000000)
                                    ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#584: FILE: fs/smbfs/proc.c:378:
+	u64 t = ntutc - NTFS_TIME_OFFSET;
+	do_div(t, 10000000);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#693: FILE: fs/smbfs/proc.c:560:
+                       return -ENOLCK;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#693: FILE: fs/smbfs/proc.c:560:
+                       return -ENOLCK;$

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#799: FILE: fs/smbfs/proc.c:839:
+	fput(filp);
 	     ^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#848: FILE: fs/smbfs/proc.c:1500:
+		fattr->f_blocks = 1 + ((fattr->f_size-1) >> 9);
 		                                     ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#919: FILE: fs/smbfs/proc.c:2564:
+	attr->f_bavail = attr->f_bfree = WVAL(p, 6) * unit;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#941: FILE: fs/smbfs/proto.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#946: FILE: fs/smbfs/proto.h:6:
+extern int smb_setcodepage(struct smb_sb_info *server, struct smb_nls_codepage *cp);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#947: FILE: fs/smbfs/proto.h:7:
+extern __u32 smb_len(__u8 *p);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#948: FILE: fs/smbfs/proto.h:8:
+extern int smb_get_rsize(struct smb_sb_info *server);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#949: FILE: fs/smbfs/proto.h:9:
+extern int smb_get_wsize(struct smb_sb_info *server);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#950: FILE: fs/smbfs/proto.h:10:
+extern int smb_errno(struct smb_sb_info *server);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#951: FILE: fs/smbfs/proto.h:11:
+extern int smb_newconn(struct smb_sb_info *server, struct smb_conn_opt *opt);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#952: FILE: fs/smbfs/proto.h:12:
+extern int smb_wakeup(struct smb_sb_info *server);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#953: FILE: fs/smbfs/proto.h:13:
+extern __u8 *smb_setup_header(struct smb_sb_info *server, __u8 command, __u16 wct, __u16 bcc);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#954: FILE: fs/smbfs/proto.h:14:
+extern int smb_open(struct dentry *dentry, int wish);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#955: FILE: fs/smbfs/proto.h:15:
+extern int smb_close(struct inode *ino);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#956: FILE: fs/smbfs/proto.h:16:
+extern int smb_close_fileid(struct dentry *dentry, __u16 fileid);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#957: FILE: fs/smbfs/proto.h:17:
+extern int smb_proc_read(struct inode *inode, off_t offset, int count, char *data);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#958: FILE: fs/smbfs/proto.h:18:
+extern int smb_proc_write(struct inode *inode, off_t offset, int count, const char *data);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#959: FILE: fs/smbfs/proto.h:19:
+extern int smb_proc_create(struct dentry *dentry, __u16 attr, time_t ctime, __u16 *fileid);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#960: FILE: fs/smbfs/proto.h:20:
+extern int smb_proc_mv(struct dentry *old_dentry, struct dentry *new_dentry);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#961: FILE: fs/smbfs/proto.h:21:
+extern int smb_proc_mkdir(struct dentry *dentry);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#962: FILE: fs/smbfs/proto.h:22:
+extern int smb_proc_rmdir(struct dentry *dentry);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#963: FILE: fs/smbfs/proto.h:23:
+extern int smb_proc_unlink(struct dentry *dentry);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#964: FILE: fs/smbfs/proto.h:24:
+extern int smb_proc_flush(struct smb_sb_info *server, __u16 fileid);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#965: FILE: fs/smbfs/proto.h:25:
+extern int smb_proc_trunc(struct smb_sb_info *server, __u16 fid, __u32 length);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#966: FILE: fs/smbfs/proto.h:26:
+extern void smb_init_root_dirent(struct smb_sb_info *server, struct smb_fattr *fattr);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#967: FILE: fs/smbfs/proto.h:27:
+extern int smb_proc_readdir(struct file *filp, void *dirent, filldir_t filldir, struct smb_cache_control *ctl);
                                          ^^^^

WARNING:LONG_LINE: line length of 111 exceeds 100 columns
#967: FILE: fs/smbfs/proto.h:27:
+extern int smb_proc_readdir(struct file *filp, void *dirent, filldir_t filldir, struct smb_cache_control *ctl);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#967: FILE: fs/smbfs/proto.h:27:
+extern int smb_proc_readdir(struct file *filp, void *dirent, filldir_t filldir, struct smb_cache_control *ctl);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#968: FILE: fs/smbfs/proto.h:28:
+extern int smb_proc_getattr(struct dentry *dir, struct smb_fattr *fattr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#969: FILE: fs/smbfs/proto.h:29:
+extern int smb_proc_setattr(struct dentry *dir, struct smb_fattr *fattr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#970: FILE: fs/smbfs/proto.h:30:
+extern int smb_proc_settime(struct dentry *dentry, struct smb_fattr *fattr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#971: FILE: fs/smbfs/proto.h:31:
+extern int smb_proc_dskattr(struct super_block *sb, struct statfs *attr);

WARNING:CONST_STRUCT: struct file_operations should normally be const
#973: FILE: fs/smbfs/proto.h:33:
+extern struct file_operations smb_dir_operations;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#974: FILE: fs/smbfs/proto.h:34:
+extern struct inode_operations smb_dir_inode_operations;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#975: FILE: fs/smbfs/proto.h:35:
+extern void smb_new_dentry(struct dentry *dentry);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#976: FILE: fs/smbfs/proto.h:36:
+extern void smb_renew_times(struct dentry *dentry);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#978: FILE: fs/smbfs/proto.h:38:
+extern void smb_invalid_dir_cache(struct inode *dir);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#979: FILE: fs/smbfs/proto.h:39:
+extern void smb_invalidate_dircache_entries(struct dentry *parent);

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#980: FILE: fs/smbfs/proto.h:40:
+extern struct dentry *smb_dget_fpos(struct dentry *dentry, struct dentry *parent, unsigned long fpos);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#980: FILE: fs/smbfs/proto.h:40:
+extern struct dentry *smb_dget_fpos(struct dentry *dentry, struct dentry *parent, unsigned long fpos);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#981: FILE: fs/smbfs/proto.h:41:
+extern int smb_fill_cache(struct file *filp, void *dirent, filldir_t filldir, struct smb_cache_control *ctrl, struct qstr *qname, struct smb_fattr *entry);
                                        ^^^^

WARNING:LONG_LINE: line length of 155 exceeds 100 columns
#981: FILE: fs/smbfs/proto.h:41:
+extern int smb_fill_cache(struct file *filp, void *dirent, filldir_t filldir, struct smb_cache_control *ctrl, struct qstr *qname, struct smb_fattr *entry);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#981: FILE: fs/smbfs/proto.h:41:
+extern int smb_fill_cache(struct file *filp, void *dirent, filldir_t filldir, struct smb_cache_control *ctrl, struct qstr *qname, struct smb_fattr *entry);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#983: FILE: fs/smbfs/proto.h:43:
+extern int smb_valid_socket(struct inode *inode);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#984: FILE: fs/smbfs/proto.h:44:
+extern int smb_catch_keepalive(struct smb_sb_info *server);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#985: FILE: fs/smbfs/proto.h:45:
+extern int smb_dont_catch_keepalive(struct smb_sb_info *server);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#986: FILE: fs/smbfs/proto.h:46:
+extern void smb_close_socket(struct smb_sb_info *server);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#987: FILE: fs/smbfs/proto.h:47:
+extern int smb_round_length(int len);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#988: FILE: fs/smbfs/proto.h:48:
+extern int smb_request(struct smb_sb_info *server);

WARNING:LONG_LINE: line length of 220 exceeds 100 columns
#989: FILE: fs/smbfs/proto.h:49:
+extern int smb_trans2_request(struct smb_sb_info *server, __u16 trans2_command, int ldata, unsigned char *data, int lparam, unsigned char *param, int *lrdata, unsigned char **rdata, int *lrparam, unsigned char **rparam);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#989: FILE: fs/smbfs/proto.h:49:
+extern int smb_trans2_request(struct smb_sb_info *server, __u16 trans2_command, int ldata, unsigned char *data, int lparam, unsigned char *param, int *lrdata, unsigned char **rdata, int *lrparam, unsigned char **rparam);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#991: FILE: fs/smbfs/proto.h:51:
+extern struct inode *smb_iget(struct super_block *sb, struct smb_fattr *fattr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#992: FILE: fs/smbfs/proto.h:52:
+extern void smb_get_inode_attr(struct inode *inode, struct smb_fattr *fattr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#993: FILE: fs/smbfs/proto.h:53:
+extern void smb_set_inode_attr(struct inode *inode, struct smb_fattr *fattr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#994: FILE: fs/smbfs/proto.h:54:
+extern void smb_invalidate_inodes(struct smb_sb_info *server);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#995: FILE: fs/smbfs/proto.h:55:
+extern int smb_revalidate_inode(struct dentry *dentry);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#996: FILE: fs/smbfs/proto.h:56:
+extern struct super_block *smb_read_super(struct super_block *sb, void *raw_data, int silent);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#997: FILE: fs/smbfs/proto.h:57:
+extern int smb_notify_change(struct dentry *dentry, struct iattr *attr);

WARNING:CONST_STRUCT: struct address_space_operations should normally be const
#999: FILE: fs/smbfs/proto.h:59:
+extern struct address_space_operations smb_file_aops;

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1000: FILE: fs/smbfs/proto.h:60:
+extern struct file_operations smb_file_operations;

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#1001: FILE: fs/smbfs/proto.h:61:
+extern struct inode_operations smb_file_inode_operations;

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1003: FILE: fs/smbfs/proto.h:63:
+extern int smb_ioctl(struct inode *inode, struct file *filp, unsigned int cmd, unsigned long arg);
                                                        ^^^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1003: FILE: fs/smbfs/proto.h:63:
+extern int smb_ioctl(struct inode *inode, struct file *filp, unsigned int cmd, unsigned long arg);

CHECK:CAMELCASE: Avoid CamelCase: <ERRinvalidparam>
#1129: FILE: include/linux/smbno.h:42:
+#define ERRinvalidparam 87      /* ERROR_INVALID_PARAMETER */

CHECK:CAMELCASE: Avoid CamelCase: <ERRdiskfull>
#1130: FILE: include/linux/smbno.h:43:
+#define ERRdiskfull 112         /* ERROR_DISK_FULL */

CHECK:CAMELCASE: Avoid CamelCase: <ERRinvalidname>
#1131: FILE: include/linux/smbno.h:44:
+#define ERRinvalidname 123      /* ERROR_INVALID_NAME */

CHECK:CAMELCASE: Avoid CamelCase: <ERRdirnotempty>
#1132: FILE: include/linux/smbno.h:45:
+#define ERRdirnotempty 145      /* ERROR_DIR_NOT_EMPTY */

CHECK:CAMELCASE: Avoid CamelCase: <ERRnotlocked>
#1133: FILE: include/linux/smbno.h:46:
+#define ERRnotlocked 158        /* ERROR_NOT_LOCKED */

CHECK:CAMELCASE: Avoid CamelCase: <ERRexists>
#1134: FILE: include/linux/smbno.h:47:
+#define ERRexists 183           /* ERROR_ALREADY_EXISTS, see also 80 */

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000509699.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 20 warnings, 59 checks, 1019 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000509699.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
