WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#172: FILE: include/linux/libata.h:685:
+			printk(KERN_WARNING "ATA: abnormal status 0x%X on port 0x%lX\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#173: FILE: include/linux/libata.h:686:
+			printk(KERN_WARNING "ATA: abnormal status 0x%X on port 0x%lX\n",
+				status, l);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#183: FILE: include/linux/libata.h:779:
+			printk(KERN_ERR "abnormal status 0x%X\n", status);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#194: FILE: include/linux/libata.h:798:
+		printk(KERN_INFO "%s: irq ack: host_stat 0x%X, new host_stat 0x%X, drv_stat 0x%X\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#195: FILE: include/linux/libata.h:799:
+		printk(KERN_INFO "%s: irq ack: host_stat 0x%X, new host_stat 0x%X, drv_stat 0x%X\n",
+			__FUNCTION__,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#195: FILE: include/linux/libata.h:799:
+			__FUNCTION__,

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#218: FILE: drivers/scsi/libata-acpi.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#268: FILE: drivers/scsi/libata-acpi.c:51:
+static int sata_get_dev_handle(struct device *dev, acpi_handle *handle,
+					acpi_integer *pcidevfn)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#299: FILE: drivers/scsi/libata-acpi.c:82:
+static acpi_status get_devices(acpi_handle handle,
+				u32 level, void *context, void **return_value)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#324: FILE: drivers/scsi/libata-acpi.c:107:
+				printk(KERN_DEBUG

WARNING:STRLCPY: Prefer strscpy over strlcpy - see: https://lore.kernel.org/r/CAHk-=wgfRnXz0W3D37d01q3JFkr_i_uTL=V6A6G1oUZcprmknw@mail.gmail.com/
#327: FILE: drivers/scsi/libata-acpi.c:110:
+			strlcpy(winfo->basepath, pathname,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#339: FILE: drivers/scsi/libata-acpi.c:122:
+		if (strncmp(pathname, winfo->basepath,
+		    winfo->basepath_len) == 0) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#343: FILE: drivers/scsi/libata-acpi.c:126:
+				printk(KERN_DEBUG "GOT ONE: (%s) "

WARNING:SPLIT_STRING: quoted string split across lines
#344: FILE: drivers/scsi/libata-acpi.c:127:
+				printk(KERN_DEBUG "GOT ONE: (%s) "
+					"root_port = 0x%llx, port_num = 0x%llx\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#351: FILE: drivers/scsi/libata-acpi.c:134:
+					printk(KERN_DEBUG

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#357: FILE: drivers/scsi/libata-acpi.c:140:
+					printk(KERN_DEBUG

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*winfo)...) over kzalloc(sizeof(struct walk_info)...)
#383: FILE: drivers/scsi/libata-acpi.c:166:
+	winfo = kzalloc(sizeof(struct walk_info), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#392: FILE: drivers/scsi/libata-acpi.c:175:
+			printk(KERN_DEBUG "acpi_bus_get_device failed\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#400: FILE: drivers/scsi/libata-acpi.c:183:
+			printk(KERN_DEBUG "%s: acpi_get_devices failed\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#401: FILE: drivers/scsi/libata-acpi.c:184:
+			printk(KERN_DEBUG "%s: acpi_get_devices failed\n",
+				__FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#401: FILE: drivers/scsi/libata-acpi.c:184:
+				__FUNCTION__);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#430: FILE: drivers/scsi/libata-acpi.c:213:
+^Iunion acpi_object ^I^Iin_params[1];$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#436: FILE: drivers/scsi/libata-acpi.c:219:
+		printk(KERN_DEBUG

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#438: FILE: drivers/scsi/libata-acpi.c:221:
+			__FUNCTION__, ap->id, ix,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#444: FILE: drivers/scsi/libata-acpi.c:227:
+			printk(KERN_DEBUG "%s: ata_id_is_sata is False\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#445: FILE: drivers/scsi/libata-acpi.c:228:
+			printk(KERN_DEBUG "%s: ata_id_is_sata is False\n",
+				__FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#445: FILE: drivers/scsi/libata-acpi.c:228:
+				__FUNCTION__);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#450: FILE: drivers/scsi/libata-acpi.c:233:
+	 * _SDD is intended for known motherboard devices. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#454: FILE: drivers/scsi/libata-acpi.c:237:
+			printk(KERN_DEBUG

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#456: FILE: drivers/scsi/libata-acpi.c:239:
+				__FUNCTION__, err);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#464: FILE: drivers/scsi/libata-acpi.c:247:
+		err = get_sata_adr(dev, handle, pcidevfn, ix, ap, atadev,
+				&dev_adr);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#468: FILE: drivers/scsi/libata-acpi.c:251:
+				printk(KERN_DEBUG "%s: get_sata_adr failed: "

WARNING:SPLIT_STRING: quoted string split across lines
#469: FILE: drivers/scsi/libata-acpi.c:252:
+				printk(KERN_DEBUG "%s: get_sata_adr failed: "
+					"err=%d, dev_adr=%u, obj_handle=0x%p\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#470: FILE: drivers/scsi/libata-acpi.c:253:
+					__FUNCTION__, err, dev_adr,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#493: FILE: drivers/scsi/libata-acpi.c:276:
+			printk(KERN_DEBUG

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#496: FILE: drivers/scsi/libata-acpi.c:279:
+				__FUNCTION__, status);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#522: FILE: drivers/scsi/libata-acpi.c:305:
+int do_drive_get_GTF(struct ata_port *ap, struct ata_device *atadev,
+			unsigned int *gtf_length, unsigned long *gtf_address)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#529: FILE: drivers/scsi/libata-acpi.c:312:
+^Iunion acpi_object ^I^I*out_obj;$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#534: FILE: drivers/scsi/libata-acpi.c:317:
+		printk(KERN_DEBUG

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#536: FILE: drivers/scsi/libata-acpi.c:319:
+			__FUNCTION__, ap->id,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#548: FILE: drivers/scsi/libata-acpi.c:331:
+			printk(KERN_DEBUG "%s: ERR: "

WARNING:SPLIT_STRING: quoted string split across lines
#549: FILE: drivers/scsi/libata-acpi.c:332:
+			printk(KERN_DEBUG "%s: ERR: "
+				"ata_dev_present: %d, PORT_DISABLED: %lu\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#550: FILE: drivers/scsi/libata-acpi.c:333:
+				__FUNCTION__, ata_dev_present(atadev),

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#556: FILE: drivers/scsi/libata-acpi.c:339:
+	 * _GTF is intended for known motherboard devices. */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#560: FILE: drivers/scsi/libata-acpi.c:343:
+			printk(KERN_DEBUG

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#562: FILE: drivers/scsi/libata-acpi.c:345:
+				__FUNCTION__, err);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#570: FILE: drivers/scsi/libata-acpi.c:353:
+		err = get_sata_adr(dev, handle, pcidevfn, 0, ap, atadev,
+				&dev_adr);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#574: FILE: drivers/scsi/libata-acpi.c:357:
+				printk(KERN_DEBUG "%s: get_sata_adr failed: "

WARNING:SPLIT_STRING: quoted string split across lines
#575: FILE: drivers/scsi/libata-acpi.c:358:
+				printk(KERN_DEBUG "%s: get_sata_adr failed: "
+					"err=%d, dev_adr=%u, obj_handle=0x%p\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#576: FILE: drivers/scsi/libata-acpi.c:359:
+					__FUNCTION__, err, dev_adr,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#589: FILE: drivers/scsi/libata-acpi.c:372:
+	status = acpi_evaluate_object(atadev->obj_handle, "_GTF",
+					NULL, &output);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#591: FILE: drivers/scsi/libata-acpi.c:374:
+		printk(KERN_DEBUG

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#593: FILE: drivers/scsi/libata-acpi.c:376:
+			__FUNCTION__, status);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#598: FILE: drivers/scsi/libata-acpi.c:381:
+		printk(KERN_DEBUG

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#600: FILE: drivers/scsi/libata-acpi.c:383:
+			__FUNCTION__,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#609: FILE: drivers/scsi/libata-acpi.c:392:
+		printk(KERN_DEBUG "%s: Run _GTF: error: "

WARNING:SPLIT_STRING: quoted string split across lines
#610: FILE: drivers/scsi/libata-acpi.c:393:
+		printk(KERN_DEBUG "%s: Run _GTF: error: "
+			"expected object type of ACPI_TYPE_BUFFER, got 0x%x\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#611: FILE: drivers/scsi/libata-acpi.c:394:
+			__FUNCTION__, out_obj->type);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#618: FILE: drivers/scsi/libata-acpi.c:401:
+			printk(KERN_ERR "%s: unexpected GTF length (%d)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#619: FILE: drivers/scsi/libata-acpi.c:402:
+			printk(KERN_ERR "%s: unexpected GTF length (%d)\n",
+				__FUNCTION__, out_obj->buffer.length);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#619: FILE: drivers/scsi/libata-acpi.c:402:
+				__FUNCTION__, out_obj->buffer.length);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#652: FILE: drivers/scsi/libata-acpi.c:435:
+static void taskfile_load_raw(struct ata_port *ap,
+				struct ata_device *atadev,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#656: FILE: drivers/scsi/libata-acpi.c:439:
+		printk(KERN_DEBUG "%s: (0x1f1-1f7): hex: "

WARNING:SPLIT_STRING: quoted string split across lines
#657: FILE: drivers/scsi/libata-acpi.c:440:
+		printk(KERN_DEBUG "%s: (0x1f1-1f7): hex: "
+			"%02x %02x %02x %02x %02x %02x %02x\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#658: FILE: drivers/scsi/libata-acpi.c:441:
+			__FUNCTION__,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#681: FILE: drivers/scsi/libata-acpi.c:464:
+			printk(KERN_DEBUG "call ata_exec_internal:\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#684: FILE: drivers/scsi/libata-acpi.c:467:
+			printk(KERN_ERR "%s: ata_exec_internal failed: %u\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#685: FILE: drivers/scsi/libata-acpi.c:468:
+			printk(KERN_ERR "%s: ata_exec_internal failed: %u\n",
+				__FUNCTION__, err);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#685: FILE: drivers/scsi/libata-acpi.c:468:
+				__FUNCTION__, err);

CHECK:BRACES: Unbalanced braces around else statement
#686: FILE: drivers/scsi/libata-acpi.c:469:
+	} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#688: FILE: drivers/scsi/libata-acpi.c:471:
+			printk(KERN_WARNING

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#690: FILE: drivers/scsi/libata-acpi.c:473:
+				__FUNCTION__);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#706: FILE: drivers/scsi/libata-acpi.c:489:
+int do_drive_set_taskfiles(struct ata_port *ap, struct ata_device *atadev,
+			unsigned int gtf_length, unsigned long gtf_address)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#714: FILE: drivers/scsi/libata-acpi.c:497:
+		printk(KERN_DEBUG

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#716: FILE: drivers/scsi/libata-acpi.c:499:
+			__FUNCTION__, ap->id,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#729: FILE: drivers/scsi/libata-acpi.c:512:
+		printk(KERN_DEBUG

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#731: FILE: drivers/scsi/libata-acpi.c:514:
+			__FUNCTION__, gtf_length, gtf_length, gtf_count);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#734: FILE: drivers/scsi/libata-acpi.c:517:
+			printk(KERN_ERR "%s: unexpected GTF length (%d)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#735: FILE: drivers/scsi/libata-acpi.c:518:
+			printk(KERN_ERR "%s: unexpected GTF length (%d)\n",
+				__FUNCTION__, gtf_length);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#735: FILE: drivers/scsi/libata-acpi.c:518:
+				__FUNCTION__, gtf_length);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#767: FILE: drivers/scsi/libata-acpi.c:550:
+		printk(KERN_DEBUG "%s: ENTER:\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#767: FILE: drivers/scsi/libata-acpi.c:550:
+		printk(KERN_DEBUG "%s: ENTER:\n", __FUNCTION__);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#773: FILE: drivers/scsi/libata-acpi.c:556:
+		printk(KERN_DEBUG "%s: call get_GTF, ix=%d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#774: FILE: drivers/scsi/libata-acpi.c:557:
+		printk(KERN_DEBUG "%s: call get_GTF, ix=%d\n",
+			__FUNCTION__, ix);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#774: FILE: drivers/scsi/libata-acpi.c:557:
+			__FUNCTION__, ix);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#776: FILE: drivers/scsi/libata-acpi.c:559:
+		ret = do_drive_get_GTF(ap, &ap->device[ix],
+				&gtf_length, &gtf_address);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#779: FILE: drivers/scsi/libata-acpi.c:562:
+				printk(KERN_DEBUG "%s: get_GTF error (%d)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#780: FILE: drivers/scsi/libata-acpi.c:563:
+				printk(KERN_DEBUG "%s: get_GTF error (%d)\n",
+					__FUNCTION__, ret);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#780: FILE: drivers/scsi/libata-acpi.c:563:
+					__FUNCTION__, ret);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#784: FILE: drivers/scsi/libata-acpi.c:567:
+		printk(KERN_DEBUG "%s: call set_taskfiles, ix=%d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#785: FILE: drivers/scsi/libata-acpi.c:568:
+		printk(KERN_DEBUG "%s: call set_taskfiles, ix=%d\n",
+			__FUNCTION__, ix);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#785: FILE: drivers/scsi/libata-acpi.c:568:
+			__FUNCTION__, ix);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#787: FILE: drivers/scsi/libata-acpi.c:570:
+		ret = do_drive_set_taskfiles(ap, &ap->device[ix],
+				gtf_length, gtf_address);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#791: FILE: drivers/scsi/libata-acpi.c:574:
+				printk(KERN_DEBUG

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#793: FILE: drivers/scsi/libata-acpi.c:576:
+					__FUNCTION__, ret);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#799: FILE: drivers/scsi/libata-acpi.c:582:
+		printk(KERN_DEBUG "%s: ret=%d\n", __FUNCTION__, ret);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#799: FILE: drivers/scsi/libata-acpi.c:582:
+		printk(KERN_DEBUG "%s: ret=%d\n", __FUNCTION__, ret);

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#810: FILE: drivers/scsi/libata-core.c:85:
+int noacpi = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#880: FILE: drivers/scsi/libata.h:57:
+extern unsigned int ata_exec_internal(struct ata_port *ap,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#881: FILE: drivers/scsi/libata.h:58:
+extern unsigned int ata_exec_internal(struct ata_port *ap,
+				struct ata_device *dev,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#885: FILE: drivers/scsi/libata.h:62:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#888: FILE: drivers/scsi/libata.h:65:
+extern int ata_acpi_push_id(struct ata_port *ap, unsigned int ix);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#889: FILE: drivers/scsi/libata.h:66:
+extern int do_drive_get_GTF(struct ata_port *ap, struct ata_device *atadev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#890: FILE: drivers/scsi/libata.h:67:
+extern int do_drive_get_GTF(struct ata_port *ap, struct ata_device *atadev,
+			unsigned int *gtf_length, unsigned long *gtf_address);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#891: FILE: drivers/scsi/libata.h:68:
+extern int do_drive_set_taskfiles(struct ata_port *ap, struct ata_device *atadev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#892: FILE: drivers/scsi/libata.h:69:
+extern int do_drive_set_taskfiles(struct ata_port *ap, struct ata_device *atadev,
+			unsigned int gtf_length, unsigned long gtf_address);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#893: FILE: drivers/scsi/libata.h:70:
+extern int ata_acpi_exec_tfs(struct ata_port *ap);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#899: FILE: drivers/scsi/libata.h:76:
+}
+static inline int do_drive_get_GTF(struct ata_port *ap,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#900: FILE: drivers/scsi/libata.h:77:
+static inline int do_drive_get_GTF(struct ata_port *ap,
+			struct ata_device *atadev,

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#905: FILE: drivers/scsi/libata.h:82:
+}
+static inline int do_drive_set_taskfiles(struct ata_port *ap,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#906: FILE: drivers/scsi/libata.h:83:
+static inline int do_drive_set_taskfiles(struct ata_port *ap,
+			struct ata_device *atadev,

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#911: FILE: drivers/scsi/libata.h:88:
+}
+static inline int ata_acpi_exec_tfs(struct ata_port *ap)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000115692.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 74 warnings, 37 checks, 860 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000115692.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
