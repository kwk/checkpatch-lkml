WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:TYPO_SPELLING: 'seperated' may be misspelled - perhaps 'separated'?
#48: FILE: fs/nfsd/nfs4xdr.c:1228:
+ * seperated @sep.
    ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#55: FILE: fs/nfsd/nfs4xdr.c:1235:
+	int strlen, count=0;
 	                 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'nfsd4_encode_components', this function's name, in a string
#58: FILE: fs/nfsd/nfs4xdr.c:1238:
+	dprintk("nfsd4_encode_components(%s)\n", components);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#59: FILE: fs/nfsd/nfs4xdr.c:1239:
+	if ((*buflen -= 4) < 0)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#62: FILE: fs/nfsd/nfs4xdr.c:1242:
+	end = str = components;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:BRACES: braces {} should be used on all arms of this statement
#67: FILE: fs/nfsd/nfs4xdr.c:1247:
+		if (strlen) {
[...]
+		else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#68: FILE: fs/nfsd/nfs4xdr.c:1248:
+			if ((*buflen -= ((XDR_QUADLEN(strlen) << 2) + 4)) < 0)

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#74: FILE: fs/nfsd/nfs4xdr.c:1254:
+		}
+		else

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#88: FILE: fs/nfsd/nfs4xdr.c:1268:
+static int nfsd4_encode_fs_location4(struct nfsd4_fs_location *location,
+				    u32 **pp, int *buflen)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#123: FILE: fs/nfsd/nfs4xdr.c:1303:
+		printk("nfsd: fs_locations failed;"

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#148: FILE: fs/nfsd/nfs4xdr.c:1328:
+	if ((*buflen -= 4) < 0)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#151: FILE: fs/nfsd/nfs4xdr.c:1331:
+	for (i=0; i<fslocs->locations_count; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#151: FILE: fs/nfsd/nfs4xdr.c:1331:
+	for (i=0; i<fslocs->locations_count; i++) {
 	           ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#168: FILE: fs/nfsd/nfs4xdr.c:1452:
+		if (exp->ex_fslocs.locations == NULL) {
+			bmval0 &= ~FATTR4_WORD0_FS_LOCATIONS;
+		}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!exp->ex_fslocs.locations"
#168: FILE: fs/nfsd/nfs4xdr.c:1452:
+		if (exp->ex_fslocs.locations == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:LONG_LINE: line length of 121 exceeds 100 columns
#206: FILE: include/linux/nfsd/nfsd.h:310:
+ | FATTR4_WORD0_FILES_FREE      | FATTR4_WORD0_FILES_TOTAL  | FATTR4_WORD0_FS_LOCATIONS | FATTR4_WORD0_HOMOGENEOUS      \

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#206: FILE: include/linux/nfsd/nfsd.h:310:
+ | FATTR4_WORD0_FILES_FREE      | FATTR4_WORD0_FILES_TOTAL  | FATTR4_WORD0_FS_LOCATIONS | FATTR4_WORD0_HOMOGENEOUS      \$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000033670.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 7 errors, 8 warnings, 4 checks, 158 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000033670.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
