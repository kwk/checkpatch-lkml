WARNING:TYPO_SPELLING: 'unneccessary' may be misspelled - perhaps 'unnecessary'?
#33: 
D: functionality for various architectures, to avoid unneccessary (and
                                                     ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#40: 
diff -urpN --exclude TAGS -X /home/rusty/devel/kernel/kernel-patches/current-dontdiff --minimal .11490-2.5-bk-extable.pre/kernel/extable.c .11490-2.5-bk-extable/kernel/extable.c

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#44: FILE: kernel/extable.c:16:
     Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#89: FILE: kernel/extable.c:28:
+	e = search_extable(__start___ex_table, __stop___ex_table-1, addr);
 	                                                        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#130: FILE: kernel/module.c:1444:
+^I^I^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#131: FILE: kernel/module.c:1445:
+		e = search_extable(i->entry, i->entry+i->num_entries-1, addr);
 		                                     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#131: FILE: kernel/module.c:1445:
+		e = search_extable(i->entry, i->entry+i->num_entries-1, addr);
 		                                                    ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#138: FILE: kernel/module.c:1452:
+           we cannot unload the module, hence no refcnt needed. */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#138: FILE: kernel/module.c:1452:
+	/* Now, if we found one, we are running inside it now, hence
+           we cannot unload the module, hence no refcnt needed. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#138: FILE: kernel/module.c:1452:
+           we cannot unload the module, hence no refcnt needed. */

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#144: FILE: kernel/module.c:1458:
+extern const struct kernel_symbol __stop___ksymtab[];

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#145: FILE: kernel/module.c:1459:
+extern const struct kernel_symbol __start___gpl_ksymtab[];

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#146: FILE: kernel/module.c:1460:
+extern const struct kernel_symbol __stop___gpl_ksymtab[];

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#166: FILE: kernel/module.c:1480:
+__initcall(symbols_init);

WARNING:LINE_SPACING: Missing a blank line after declarations
#261: FILE: arch/i386/kernel/traps.c:439:
+		const struct exception_table_entry *fixup;
+		fixup = search_exception_tables(regs->eip);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#295: FILE: arch/i386/mm/extable.c:23:
+                        return mid;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#295: FILE: arch/i386/mm/extable.c:23:
+                        return mid;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#334: FILE: arch/i386/mm/extable.c:29:
+        return NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#334: FILE: arch/i386/mm/extable.c:29:
+        return NULL;$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#362: FILE: arch/i386/mm/fault.c:314:
+	if ((fixup = search_exception_tables(regs->eip)) != NULL) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#392: FILE: arch/ppc/kernel/traps.c:152:
 	if (((msr & 0xffff0000) == 0 || (msr & (0x80000 | 0x40000)))
+	    && (entry = search_exception_tables(regs->nip)) != NULL) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#435: FILE: arch/ppc/mm/extable.c:63:
+                        return mid;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#435: FILE: arch/ppc/mm/extable.c:63:
+                        return mid;$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#496: FILE: arch/ppc/mm/fault.c:270:
+	if ((entry = search_exception_tables(regs->nip)) != NULL) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#514: FILE: arch/sparc64/kernel/traps.c:155:
+		if ((entry = search_extables_range(regs->tpc, &g2))) {

WARNING:SPLIT_STRING: quoted string split across lines
#520: FILE: arch/sparc64/kernel/traps.c:160:
 			printk("EX_TABLE: insn<%016lx> fixup<%016lx> "
+			       "g2<%016lx>\n", regs->tpc, entry->fixup, g2);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:CODE_INDENT: code indent should use tabs where possible
#602: FILE: arch/sparc64/mm/extable.c:56:
+        return NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#602: FILE: arch/sparc64/mm/extable.c:56:
+        return NULL;$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000402709.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 10 errors, 14 warnings, 4 checks, 599 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000402709.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
