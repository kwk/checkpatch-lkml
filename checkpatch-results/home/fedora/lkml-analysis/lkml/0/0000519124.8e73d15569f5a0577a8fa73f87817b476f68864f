WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#51: FILE: kernel/softirq.c:56:
+static inline void wakeup_softirqd(unsigned cpu)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#53: FILE: kernel/softirq.c:58:
+	struct task_struct * tsk = ksoftirqd_task(cpu);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#176: FILE: kernel/softirq.c:203:
+				BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#219: FILE: kernel/softirq.c:241:
+				BUG();

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#246: FILE: kernel/softirq.c:374:
+static int ksoftirqd(void * __bind_cpu)

CHECK:SPACING: No space is necessary after a cast
#248: FILE: kernel/softirq.c:376:
+	int bind_cpu = *(int *) __bind_cpu;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:MEMORY_BARRIER: memory barrier without comment
#263: FILE: kernel/softirq.c:391:
+	mb();

CHECK:SPACING: No space is necessary after a cast
#288: FILE: kernel/softirq.c:416:
+		if (kernel_thread(ksoftirqd, (void *) &cpu,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#290: FILE: kernel/softirq.c:418:
+			printk("spawn_ksoftirqd() failed for cpu %d\n", cpu);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'spawn_ksoftirqd', this function's name, in a string
#290: FILE: kernel/softirq.c:418:
+			printk("spawn_ksoftirqd() failed for cpu %d\n", cpu);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:BRACES: Unbalanced braces around else statement
#291: FILE: kernel/softirq.c:419:
+		else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#302: FILE: kernel/softirq.c:430:
+__initcall(spawn_ksoftirqd);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#371: FILE: include/linux/interrupt.h:77:
+extern void FASTCALL(cpu_raise_softirq(unsigned int cpu, unsigned int nr));

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#372: FILE: include/linux/interrupt.h:78:
+extern void FASTCALL(raise_softirq(unsigned int nr));

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#381: FILE: include/linux/interrupt.h:133:
+#define tasklet_unlock(t) do { smp_mb__before_clear_bit(); clear_bit(TASKLET_STATE_RUN, &(t)->state); } while(0)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:SPACING: space required before the open parenthesis '('
#381: FILE: include/linux/interrupt.h:133:
+#define tasklet_unlock(t) do { smp_mb__before_clear_bit(); clear_bit(TASKLET_STATE_RUN, &(t)->state); } while(0)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#418: FILE: include/asm-i386/hardirq.h:14:
+	struct task_struct * __ksoftirqd_task; /* waitqueue is too large */

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000519124.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 4 errors, 8 warnings, 5 checks, 352 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000519124.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
