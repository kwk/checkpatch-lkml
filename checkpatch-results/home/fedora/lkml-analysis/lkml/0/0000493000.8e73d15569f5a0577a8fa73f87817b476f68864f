ERROR:SPACING: space required after that ',' (ctx:VxV)
#62: FILE: include/asm-alpha/unistd.h:511:
+#define _syscall0(type,name)						\
                       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#62: FILE: include/asm-alpha/unistd.h:511:
+#define _syscall0(type,name)						\
+type name(void)								\
+{									\
+	type (*syscall_ptr)(void) = sys_call_table[__NR_##name];	\
+	return syscall_ptr();						\
 }

ERROR:SPACING: space required after that ',' (ctx:VxV)
#73: FILE: include/asm-alpha/unistd.h:518:
+#define _syscall1(type,name,type1,arg1)					\
                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#73: FILE: include/asm-alpha/unistd.h:518:
+#define _syscall1(type,name,type1,arg1)					\
                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#73: FILE: include/asm-alpha/unistd.h:518:
+#define _syscall1(type,name,type1,arg1)					\
                                  ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'type1' - possible side-effects?
#73: FILE: include/asm-alpha/unistd.h:518:
+#define _syscall1(type,name,type1,arg1)					\
+type name(type1 arg1)							\
+{									\
+	type (*syscall_ptr)(type1);					\
+	syscall_ptr = sys_call_table[__NR_##name];			\
+	return syscall_ptr(arg1);					\
 }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg1' - possible side-effects?
#73: FILE: include/asm-alpha/unistd.h:518:
+#define _syscall1(type,name,type1,arg1)					\
+type name(type1 arg1)							\
+{									\
+	type (*syscall_ptr)(type1);					\
+	syscall_ptr = sys_call_table[__NR_##name];			\
+	return syscall_ptr(arg1);					\
 }

WARNING:FUNCTION_ARGUMENTS: function definition argument 'type1' should also have an identifier name
#76: FILE: include/asm-alpha/unistd.h:521:
+	type (*syscall_ptr)(type1);					\

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

ERROR:SPACING: space required after that ',' (ctx:VxV)
#84: FILE: include/asm-alpha/unistd.h:526:
+#define _syscall2(type,name,type1,arg1,type2,arg2)			\
                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#84: FILE: include/asm-alpha/unistd.h:526:
+#define _syscall2(type,name,type1,arg1,type2,arg2)			\
                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#84: FILE: include/asm-alpha/unistd.h:526:
+#define _syscall2(type,name,type1,arg1,type2,arg2)			\
                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#84: FILE: include/asm-alpha/unistd.h:526:
+#define _syscall2(type,name,type1,arg1,type2,arg2)			\
                                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#84: FILE: include/asm-alpha/unistd.h:526:
+#define _syscall2(type,name,type1,arg1,type2,arg2)			\
                                             ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'type1' - possible side-effects?
#84: FILE: include/asm-alpha/unistd.h:526:
+#define _syscall2(type,name,type1,arg1,type2,arg2)			\
+type name(type1 arg1, type2 arg2)					\
+{									\
+	type (*syscall_ptr)(type1, type2);				\
+	syscall_ptr = sys_call_table[__NR_##name];			\
+	return syscall_ptr(arg1, arg2);					\
 }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg1' - possible side-effects?
#84: FILE: include/asm-alpha/unistd.h:526:
+#define _syscall2(type,name,type1,arg1,type2,arg2)			\
+type name(type1 arg1, type2 arg2)					\
+{									\
+	type (*syscall_ptr)(type1, type2);				\
+	syscall_ptr = sys_call_table[__NR_##name];			\
+	return syscall_ptr(arg1, arg2);					\
 }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'type2' - possible side-effects?
#84: FILE: include/asm-alpha/unistd.h:526:
+#define _syscall2(type,name,type1,arg1,type2,arg2)			\
+type name(type1 arg1, type2 arg2)					\
+{									\
+	type (*syscall_ptr)(type1, type2);				\
+	syscall_ptr = sys_call_table[__NR_##name];			\
+	return syscall_ptr(arg1, arg2);					\
 }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg2' - possible side-effects?
#84: FILE: include/asm-alpha/unistd.h:526:
+#define _syscall2(type,name,type1,arg1,type2,arg2)			\
+type name(type1 arg1, type2 arg2)					\
+{									\
+	type (*syscall_ptr)(type1, type2);				\
+	syscall_ptr = sys_call_table[__NR_##name];			\
+	return syscall_ptr(arg1, arg2);					\
 }

WARNING:FUNCTION_ARGUMENTS: function definition argument 'type1' should also have an identifier name
#87: FILE: include/asm-alpha/unistd.h:529:
+	type (*syscall_ptr)(type1, type2);				\

WARNING:FUNCTION_ARGUMENTS: function definition argument 'type2' should also have an identifier name
#87: FILE: include/asm-alpha/unistd.h:529:
+	type (*syscall_ptr)(type1, type2);				\

ERROR:SPACING: space required after that ',' (ctx:VxV)
#96: FILE: include/asm-alpha/unistd.h:534:
+#define _syscall3(type,name,type1,arg1,type2,arg2,type3,arg3)		\
                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#96: FILE: include/asm-alpha/unistd.h:534:
+#define _syscall3(type,name,type1,arg1,type2,arg2,type3,arg3)		\
                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#96: FILE: include/asm-alpha/unistd.h:534:
+#define _syscall3(type,name,type1,arg1,type2,arg2,type3,arg3)		\
                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#96: FILE: include/asm-alpha/unistd.h:534:
+#define _syscall3(type,name,type1,arg1,type2,arg2,type3,arg3)		\
                                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#96: FILE: include/asm-alpha/unistd.h:534:
+#define _syscall3(type,name,type1,arg1,type2,arg2,type3,arg3)		\
                                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#96: FILE: include/asm-alpha/unistd.h:534:
+#define _syscall3(type,name,type1,arg1,type2,arg2,type3,arg3)		\
                                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#96: FILE: include/asm-alpha/unistd.h:534:
+#define _syscall3(type,name,type1,arg1,type2,arg2,type3,arg3)		\
                                                        ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'type1' - possible side-effects?
#96: FILE: include/asm-alpha/unistd.h:534:
+#define _syscall3(type,name,type1,arg1,type2,arg2,type3,arg3)		\
+type name(type1 arg1, type2 arg2, type3 arg3)				\
+{									\
+	type (*syscall_ptr)(type1, type2, type3);			\
+	syscall_ptr = sys_call_table[__NR_##name];			\
+	return syscall_ptr(arg1, arg2, arg3);				\
 }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg1' - possible side-effects?
#96: FILE: include/asm-alpha/unistd.h:534:
+#define _syscall3(type,name,type1,arg1,type2,arg2,type3,arg3)		\
+type name(type1 arg1, type2 arg2, type3 arg3)				\
+{									\
+	type (*syscall_ptr)(type1, type2, type3);			\
+	syscall_ptr = sys_call_table[__NR_##name];			\
+	return syscall_ptr(arg1, arg2, arg3);				\
 }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'type2' - possible side-effects?
#96: FILE: include/asm-alpha/unistd.h:534:
+#define _syscall3(type,name,type1,arg1,type2,arg2,type3,arg3)		\
+type name(type1 arg1, type2 arg2, type3 arg3)				\
+{									\
+	type (*syscall_ptr)(type1, type2, type3);			\
+	syscall_ptr = sys_call_table[__NR_##name];			\
+	return syscall_ptr(arg1, arg2, arg3);				\
 }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg2' - possible side-effects?
#96: FILE: include/asm-alpha/unistd.h:534:
+#define _syscall3(type,name,type1,arg1,type2,arg2,type3,arg3)		\
+type name(type1 arg1, type2 arg2, type3 arg3)				\
+{									\
+	type (*syscall_ptr)(type1, type2, type3);			\
+	syscall_ptr = sys_call_table[__NR_##name];			\
+	return syscall_ptr(arg1, arg2, arg3);				\
 }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'type3' - possible side-effects?
#96: FILE: include/asm-alpha/unistd.h:534:
+#define _syscall3(type,name,type1,arg1,type2,arg2,type3,arg3)		\
+type name(type1 arg1, type2 arg2, type3 arg3)				\
+{									\
+	type (*syscall_ptr)(type1, type2, type3);			\
+	syscall_ptr = sys_call_table[__NR_##name];			\
+	return syscall_ptr(arg1, arg2, arg3);				\
 }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg3' - possible side-effects?
#96: FILE: include/asm-alpha/unistd.h:534:
+#define _syscall3(type,name,type1,arg1,type2,arg2,type3,arg3)		\
+type name(type1 arg1, type2 arg2, type3 arg3)				\
+{									\
+	type (*syscall_ptr)(type1, type2, type3);			\
+	syscall_ptr = sys_call_table[__NR_##name];			\
+	return syscall_ptr(arg1, arg2, arg3);				\
 }

WARNING:FUNCTION_ARGUMENTS: function definition argument 'type1' should also have an identifier name
#99: FILE: include/asm-alpha/unistd.h:537:
+	type (*syscall_ptr)(type1, type2, type3);			\

WARNING:FUNCTION_ARGUMENTS: function definition argument 'type2' should also have an identifier name
#99: FILE: include/asm-alpha/unistd.h:537:
+	type (*syscall_ptr)(type1, type2, type3);			\

WARNING:FUNCTION_ARGUMENTS: function definition argument 'type3' should also have an identifier name
#99: FILE: include/asm-alpha/unistd.h:537:
+	type (*syscall_ptr)(type1, type2, type3);			\

ERROR:SPACING: space required after that ',' (ctx:VxV)
#108: FILE: include/asm-alpha/unistd.h:542:
+#define _syscall4(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4)\
                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#108: FILE: include/asm-alpha/unistd.h:542:
+#define _syscall4(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4)\
                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#108: FILE: include/asm-alpha/unistd.h:542:
+#define _syscall4(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4)\
                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#108: FILE: include/asm-alpha/unistd.h:542:
+#define _syscall4(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4)\
                                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#108: FILE: include/asm-alpha/unistd.h:542:
+#define _syscall4(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4)\
                                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#108: FILE: include/asm-alpha/unistd.h:542:
+#define _syscall4(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4)\
                                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#108: FILE: include/asm-alpha/unistd.h:542:
+#define _syscall4(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4)\
                                                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#108: FILE: include/asm-alpha/unistd.h:542:
+#define _syscall4(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4)\
                                                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#108: FILE: include/asm-alpha/unistd.h:542:
+#define _syscall4(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4)\
                                                                   ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'type1' - possible side-effects?
#108: FILE: include/asm-alpha/unistd.h:542:
+#define _syscall4(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4)\
+type name(type1 arg1, type2 arg2, type3 arg3, type4 arg4)		\
+{									\
+	type (*syscall_ptr)(type1, type2, type3, type4);		\
+	syscall_ptr = sys_call_table[__NR_##name];			\
+	return syscall_ptr(arg1, arg2, arg3, arg4);			\
 }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg1' - possible side-effects?
#108: FILE: include/asm-alpha/unistd.h:542:
+#define _syscall4(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4)\
+type name(type1 arg1, type2 arg2, type3 arg3, type4 arg4)		\
+{									\
+	type (*syscall_ptr)(type1, type2, type3, type4);		\
+	syscall_ptr = sys_call_table[__NR_##name];			\
+	return syscall_ptr(arg1, arg2, arg3, arg4);			\
 }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'type2' - possible side-effects?
#108: FILE: include/asm-alpha/unistd.h:542:
+#define _syscall4(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4)\
+type name(type1 arg1, type2 arg2, type3 arg3, type4 arg4)		\
+{									\
+	type (*syscall_ptr)(type1, type2, type3, type4);		\
+	syscall_ptr = sys_call_table[__NR_##name];			\
+	return syscall_ptr(arg1, arg2, arg3, arg4);			\
 }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg2' - possible side-effects?
#108: FILE: include/asm-alpha/unistd.h:542:
+#define _syscall4(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4)\
+type name(type1 arg1, type2 arg2, type3 arg3, type4 arg4)		\
+{									\
+	type (*syscall_ptr)(type1, type2, type3, type4);		\
+	syscall_ptr = sys_call_table[__NR_##name];			\
+	return syscall_ptr(arg1, arg2, arg3, arg4);			\
 }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'type3' - possible side-effects?
#108: FILE: include/asm-alpha/unistd.h:542:
+#define _syscall4(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4)\
+type name(type1 arg1, type2 arg2, type3 arg3, type4 arg4)		\
+{									\
+	type (*syscall_ptr)(type1, type2, type3, type4);		\
+	syscall_ptr = sys_call_table[__NR_##name];			\
+	return syscall_ptr(arg1, arg2, arg3, arg4);			\
 }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg3' - possible side-effects?
#108: FILE: include/asm-alpha/unistd.h:542:
+#define _syscall4(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4)\
+type name(type1 arg1, type2 arg2, type3 arg3, type4 arg4)		\
+{									\
+	type (*syscall_ptr)(type1, type2, type3, type4);		\
+	syscall_ptr = sys_call_table[__NR_##name];			\
+	return syscall_ptr(arg1, arg2, arg3, arg4);			\
 }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'type4' - possible side-effects?
#108: FILE: include/asm-alpha/unistd.h:542:
+#define _syscall4(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4)\
+type name(type1 arg1, type2 arg2, type3 arg3, type4 arg4)		\
+{									\
+	type (*syscall_ptr)(type1, type2, type3, type4);		\
+	syscall_ptr = sys_call_table[__NR_##name];			\
+	return syscall_ptr(arg1, arg2, arg3, arg4);			\
 }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg4' - possible side-effects?
#108: FILE: include/asm-alpha/unistd.h:542:
+#define _syscall4(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4)\
+type name(type1 arg1, type2 arg2, type3 arg3, type4 arg4)		\
+{									\
+	type (*syscall_ptr)(type1, type2, type3, type4);		\
+	syscall_ptr = sys_call_table[__NR_##name];			\
+	return syscall_ptr(arg1, arg2, arg3, arg4);			\
 }

WARNING:FUNCTION_ARGUMENTS: function definition argument 'type1' should also have an identifier name
#111: FILE: include/asm-alpha/unistd.h:545:
+	type (*syscall_ptr)(type1, type2, type3, type4);		\

WARNING:FUNCTION_ARGUMENTS: function definition argument 'type2' should also have an identifier name
#111: FILE: include/asm-alpha/unistd.h:545:
+	type (*syscall_ptr)(type1, type2, type3, type4);		\

WARNING:FUNCTION_ARGUMENTS: function definition argument 'type3' should also have an identifier name
#111: FILE: include/asm-alpha/unistd.h:545:
+	type (*syscall_ptr)(type1, type2, type3, type4);		\

WARNING:FUNCTION_ARGUMENTS: function definition argument 'type4' should also have an identifier name
#111: FILE: include/asm-alpha/unistd.h:545:
+	type (*syscall_ptr)(type1, type2, type3, type4);		\

ERROR:SPACING: space required after that ',' (ctx:VxV)
#122: FILE: include/asm-alpha/unistd.h:550:
+#define _syscall5(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4,\
                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#122: FILE: include/asm-alpha/unistd.h:550:
+#define _syscall5(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4,\
                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#122: FILE: include/asm-alpha/unistd.h:550:
+#define _syscall5(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4,\
                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#122: FILE: include/asm-alpha/unistd.h:550:
+#define _syscall5(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4,\
                                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#122: FILE: include/asm-alpha/unistd.h:550:
+#define _syscall5(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4,\
                                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#122: FILE: include/asm-alpha/unistd.h:550:
+#define _syscall5(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4,\
                                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#122: FILE: include/asm-alpha/unistd.h:550:
+#define _syscall5(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4,\
                                                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#122: FILE: include/asm-alpha/unistd.h:550:
+#define _syscall5(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4,\
                                                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#122: FILE: include/asm-alpha/unistd.h:550:
+#define _syscall5(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4,\
                                                                   ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'type1' - possible side-effects?
#122: FILE: include/asm-alpha/unistd.h:550:
+#define _syscall5(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4,\
+		  type5,arg5)						\
+type name(type1 arg1, type2 arg2, type3 arg3, type4 arg4, type5 arg5)	\
+{									\
+	type (*syscall_ptr)(type1, type2, type3, type4, type5);		\
+	syscall_ptr = sys_call_table[__NR_##name];			\
+	return syscall_ptr(arg1, arg2, arg3, arg4, arg5);		\
 }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg1' - possible side-effects?
#122: FILE: include/asm-alpha/unistd.h:550:
+#define _syscall5(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4,\
+		  type5,arg5)						\
+type name(type1 arg1, type2 arg2, type3 arg3, type4 arg4, type5 arg5)	\
+{									\
+	type (*syscall_ptr)(type1, type2, type3, type4, type5);		\
+	syscall_ptr = sys_call_table[__NR_##name];			\
+	return syscall_ptr(arg1, arg2, arg3, arg4, arg5);		\
 }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'type2' - possible side-effects?
#122: FILE: include/asm-alpha/unistd.h:550:
+#define _syscall5(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4,\
+		  type5,arg5)						\
+type name(type1 arg1, type2 arg2, type3 arg3, type4 arg4, type5 arg5)	\
+{									\
+	type (*syscall_ptr)(type1, type2, type3, type4, type5);		\
+	syscall_ptr = sys_call_table[__NR_##name];			\
+	return syscall_ptr(arg1, arg2, arg3, arg4, arg5);		\
 }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg2' - possible side-effects?
#122: FILE: include/asm-alpha/unistd.h:550:
+#define _syscall5(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4,\
+		  type5,arg5)						\
+type name(type1 arg1, type2 arg2, type3 arg3, type4 arg4, type5 arg5)	\
+{									\
+	type (*syscall_ptr)(type1, type2, type3, type4, type5);		\
+	syscall_ptr = sys_call_table[__NR_##name];			\
+	return syscall_ptr(arg1, arg2, arg3, arg4, arg5);		\
 }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'type3' - possible side-effects?
#122: FILE: include/asm-alpha/unistd.h:550:
+#define _syscall5(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4,\
+		  type5,arg5)						\
+type name(type1 arg1, type2 arg2, type3 arg3, type4 arg4, type5 arg5)	\
+{									\
+	type (*syscall_ptr)(type1, type2, type3, type4, type5);		\
+	syscall_ptr = sys_call_table[__NR_##name];			\
+	return syscall_ptr(arg1, arg2, arg3, arg4, arg5);		\
 }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg3' - possible side-effects?
#122: FILE: include/asm-alpha/unistd.h:550:
+#define _syscall5(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4,\
+		  type5,arg5)						\
+type name(type1 arg1, type2 arg2, type3 arg3, type4 arg4, type5 arg5)	\
+{									\
+	type (*syscall_ptr)(type1, type2, type3, type4, type5);		\
+	syscall_ptr = sys_call_table[__NR_##name];			\
+	return syscall_ptr(arg1, arg2, arg3, arg4, arg5);		\
 }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'type4' - possible side-effects?
#122: FILE: include/asm-alpha/unistd.h:550:
+#define _syscall5(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4,\
+		  type5,arg5)						\
+type name(type1 arg1, type2 arg2, type3 arg3, type4 arg4, type5 arg5)	\
+{									\
+	type (*syscall_ptr)(type1, type2, type3, type4, type5);		\
+	syscall_ptr = sys_call_table[__NR_##name];			\
+	return syscall_ptr(arg1, arg2, arg3, arg4, arg5);		\
 }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg4' - possible side-effects?
#122: FILE: include/asm-alpha/unistd.h:550:
+#define _syscall5(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4,\
+		  type5,arg5)						\
+type name(type1 arg1, type2 arg2, type3 arg3, type4 arg4, type5 arg5)	\
+{									\
+	type (*syscall_ptr)(type1, type2, type3, type4, type5);		\
+	syscall_ptr = sys_call_table[__NR_##name];			\
+	return syscall_ptr(arg1, arg2, arg3, arg4, arg5);		\
 }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'type5' - possible side-effects?
#122: FILE: include/asm-alpha/unistd.h:550:
+#define _syscall5(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4,\
+		  type5,arg5)						\
+type name(type1 arg1, type2 arg2, type3 arg3, type4 arg4, type5 arg5)	\
+{									\
+	type (*syscall_ptr)(type1, type2, type3, type4, type5);		\
+	syscall_ptr = sys_call_table[__NR_##name];			\
+	return syscall_ptr(arg1, arg2, arg3, arg4, arg5);		\
 }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg5' - possible side-effects?
#122: FILE: include/asm-alpha/unistd.h:550:
+#define _syscall5(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4,\
+		  type5,arg5)						\
+type name(type1 arg1, type2 arg2, type3 arg3, type4 arg4, type5 arg5)	\
+{									\
+	type (*syscall_ptr)(type1, type2, type3, type4, type5);		\
+	syscall_ptr = sys_call_table[__NR_##name];			\
+	return syscall_ptr(arg1, arg2, arg3, arg4, arg5);		\
 }

ERROR:SPACING: space required after that ',' (ctx:VxV)
#123: FILE: include/asm-alpha/unistd.h:551:
+		  type5,arg5)						\
 		       ^

WARNING:FUNCTION_ARGUMENTS: function definition argument 'type1' should also have an identifier name
#126: FILE: include/asm-alpha/unistd.h:554:
+	type (*syscall_ptr)(type1, type2, type3, type4, type5);		\

WARNING:FUNCTION_ARGUMENTS: function definition argument 'type2' should also have an identifier name
#126: FILE: include/asm-alpha/unistd.h:554:
+	type (*syscall_ptr)(type1, type2, type3, type4, type5);		\

WARNING:FUNCTION_ARGUMENTS: function definition argument 'type3' should also have an identifier name
#126: FILE: include/asm-alpha/unistd.h:554:
+	type (*syscall_ptr)(type1, type2, type3, type4, type5);		\

WARNING:FUNCTION_ARGUMENTS: function definition argument 'type4' should also have an identifier name
#126: FILE: include/asm-alpha/unistd.h:554:
+	type (*syscall_ptr)(type1, type2, type3, type4, type5);		\

WARNING:FUNCTION_ARGUMENTS: function definition argument 'type5' should also have an identifier name
#126: FILE: include/asm-alpha/unistd.h:554:
+	type (*syscall_ptr)(type1, type2, type3, type4, type5);		\

ERROR:SPACING: space required after that ',' (ctx:VxV)
#133: FILE: include/asm-alpha/unistd.h:559:
+#define _syscall6(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4,\
                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#133: FILE: include/asm-alpha/unistd.h:559:
+#define _syscall6(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4,\
                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#133: FILE: include/asm-alpha/unistd.h:559:
+#define _syscall6(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4,\
                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#133: FILE: include/asm-alpha/unistd.h:559:
+#define _syscall6(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4,\
                                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#133: FILE: include/asm-alpha/unistd.h:559:
+#define _syscall6(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4,\
                                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#133: FILE: include/asm-alpha/unistd.h:559:
+#define _syscall6(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4,\
                                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#133: FILE: include/asm-alpha/unistd.h:559:
+#define _syscall6(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4,\
                                                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#133: FILE: include/asm-alpha/unistd.h:559:
+#define _syscall6(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4,\
                                                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#133: FILE: include/asm-alpha/unistd.h:559:
+#define _syscall6(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4,\
                                                                   ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'type1' - possible side-effects?
#133: FILE: include/asm-alpha/unistd.h:559:
+#define _syscall6(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4,\
+		  type5,arg5,type6,arg6)				\
+type name(type1 arg1, type2 arg2, type3 arg3, type4 arg4, type5 arg5,	\
+	  type6 arg6)							\
+{									\
+	type (*syscall_ptr)(type1, type2, type3, type4, type5, type6);	\
+	syscall_ptr = sys_call_table[__NR_##name];			\
+	return syscall_ptr(arg1, arg2, arg3, arg4, arg5, arg6);		\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg1' - possible side-effects?
#133: FILE: include/asm-alpha/unistd.h:559:
+#define _syscall6(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4,\
+		  type5,arg5,type6,arg6)				\
+type name(type1 arg1, type2 arg2, type3 arg3, type4 arg4, type5 arg5,	\
+	  type6 arg6)							\
+{									\
+	type (*syscall_ptr)(type1, type2, type3, type4, type5, type6);	\
+	syscall_ptr = sys_call_table[__NR_##name];			\
+	return syscall_ptr(arg1, arg2, arg3, arg4, arg5, arg6);		\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'type2' - possible side-effects?
#133: FILE: include/asm-alpha/unistd.h:559:
+#define _syscall6(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4,\
+		  type5,arg5,type6,arg6)				\
+type name(type1 arg1, type2 arg2, type3 arg3, type4 arg4, type5 arg5,	\
+	  type6 arg6)							\
+{									\
+	type (*syscall_ptr)(type1, type2, type3, type4, type5, type6);	\
+	syscall_ptr = sys_call_table[__NR_##name];			\
+	return syscall_ptr(arg1, arg2, arg3, arg4, arg5, arg6);		\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg2' - possible side-effects?
#133: FILE: include/asm-alpha/unistd.h:559:
+#define _syscall6(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4,\
+		  type5,arg5,type6,arg6)				\
+type name(type1 arg1, type2 arg2, type3 arg3, type4 arg4, type5 arg5,	\
+	  type6 arg6)							\
+{									\
+	type (*syscall_ptr)(type1, type2, type3, type4, type5, type6);	\
+	syscall_ptr = sys_call_table[__NR_##name];			\
+	return syscall_ptr(arg1, arg2, arg3, arg4, arg5, arg6);		\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'type3' - possible side-effects?
#133: FILE: include/asm-alpha/unistd.h:559:
+#define _syscall6(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4,\
+		  type5,arg5,type6,arg6)				\
+type name(type1 arg1, type2 arg2, type3 arg3, type4 arg4, type5 arg5,	\
+	  type6 arg6)							\
+{									\
+	type (*syscall_ptr)(type1, type2, type3, type4, type5, type6);	\
+	syscall_ptr = sys_call_table[__NR_##name];			\
+	return syscall_ptr(arg1, arg2, arg3, arg4, arg5, arg6);		\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg3' - possible side-effects?
#133: FILE: include/asm-alpha/unistd.h:559:
+#define _syscall6(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4,\
+		  type5,arg5,type6,arg6)				\
+type name(type1 arg1, type2 arg2, type3 arg3, type4 arg4, type5 arg5,	\
+	  type6 arg6)							\
+{									\
+	type (*syscall_ptr)(type1, type2, type3, type4, type5, type6);	\
+	syscall_ptr = sys_call_table[__NR_##name];			\
+	return syscall_ptr(arg1, arg2, arg3, arg4, arg5, arg6);		\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'type4' - possible side-effects?
#133: FILE: include/asm-alpha/unistd.h:559:
+#define _syscall6(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4,\
+		  type5,arg5,type6,arg6)				\
+type name(type1 arg1, type2 arg2, type3 arg3, type4 arg4, type5 arg5,	\
+	  type6 arg6)							\
+{									\
+	type (*syscall_ptr)(type1, type2, type3, type4, type5, type6);	\
+	syscall_ptr = sys_call_table[__NR_##name];			\
+	return syscall_ptr(arg1, arg2, arg3, arg4, arg5, arg6);		\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg4' - possible side-effects?
#133: FILE: include/asm-alpha/unistd.h:559:
+#define _syscall6(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4,\
+		  type5,arg5,type6,arg6)				\
+type name(type1 arg1, type2 arg2, type3 arg3, type4 arg4, type5 arg5,	\
+	  type6 arg6)							\
+{									\
+	type (*syscall_ptr)(type1, type2, type3, type4, type5, type6);	\
+	syscall_ptr = sys_call_table[__NR_##name];			\
+	return syscall_ptr(arg1, arg2, arg3, arg4, arg5, arg6);		\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'type5' - possible side-effects?
#133: FILE: include/asm-alpha/unistd.h:559:
+#define _syscall6(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4,\
+		  type5,arg5,type6,arg6)				\
+type name(type1 arg1, type2 arg2, type3 arg3, type4 arg4, type5 arg5,	\
+	  type6 arg6)							\
+{									\
+	type (*syscall_ptr)(type1, type2, type3, type4, type5, type6);	\
+	syscall_ptr = sys_call_table[__NR_##name];			\
+	return syscall_ptr(arg1, arg2, arg3, arg4, arg5, arg6);		\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg5' - possible side-effects?
#133: FILE: include/asm-alpha/unistd.h:559:
+#define _syscall6(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4,\
+		  type5,arg5,type6,arg6)				\
+type name(type1 arg1, type2 arg2, type3 arg3, type4 arg4, type5 arg5,	\
+	  type6 arg6)							\
+{									\
+	type (*syscall_ptr)(type1, type2, type3, type4, type5, type6);	\
+	syscall_ptr = sys_call_table[__NR_##name];			\
+	return syscall_ptr(arg1, arg2, arg3, arg4, arg5, arg6);		\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'type6' - possible side-effects?
#133: FILE: include/asm-alpha/unistd.h:559:
+#define _syscall6(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4,\
+		  type5,arg5,type6,arg6)				\
+type name(type1 arg1, type2 arg2, type3 arg3, type4 arg4, type5 arg5,	\
+	  type6 arg6)							\
+{									\
+	type (*syscall_ptr)(type1, type2, type3, type4, type5, type6);	\
+	syscall_ptr = sys_call_table[__NR_##name];			\
+	return syscall_ptr(arg1, arg2, arg3, arg4, arg5, arg6);		\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg6' - possible side-effects?
#133: FILE: include/asm-alpha/unistd.h:559:
+#define _syscall6(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4,\
+		  type5,arg5,type6,arg6)				\
+type name(type1 arg1, type2 arg2, type3 arg3, type4 arg4, type5 arg5,	\
+	  type6 arg6)							\
+{									\
+	type (*syscall_ptr)(type1, type2, type3, type4, type5, type6);	\
+	syscall_ptr = sys_call_table[__NR_##name];			\
+	return syscall_ptr(arg1, arg2, arg3, arg4, arg5, arg6);		\
+}

ERROR:SPACING: space required after that ',' (ctx:VxV)
#134: FILE: include/asm-alpha/unistd.h:560:
+		  type5,arg5,type6,arg6)				\
 		       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#134: FILE: include/asm-alpha/unistd.h:560:
+		  type5,arg5,type6,arg6)				\
 		            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#134: FILE: include/asm-alpha/unistd.h:560:
+		  type5,arg5,type6,arg6)				\
 		                  ^

WARNING:FUNCTION_ARGUMENTS: function definition argument 'type1' should also have an identifier name
#138: FILE: include/asm-alpha/unistd.h:564:
+	type (*syscall_ptr)(type1, type2, type3, type4, type5, type6);	\

WARNING:FUNCTION_ARGUMENTS: function definition argument 'type2' should also have an identifier name
#138: FILE: include/asm-alpha/unistd.h:564:
+	type (*syscall_ptr)(type1, type2, type3, type4, type5, type6);	\

WARNING:FUNCTION_ARGUMENTS: function definition argument 'type3' should also have an identifier name
#138: FILE: include/asm-alpha/unistd.h:564:
+	type (*syscall_ptr)(type1, type2, type3, type4, type5, type6);	\

WARNING:FUNCTION_ARGUMENTS: function definition argument 'type4' should also have an identifier name
#138: FILE: include/asm-alpha/unistd.h:564:
+	type (*syscall_ptr)(type1, type2, type3, type4, type5, type6);	\

WARNING:FUNCTION_ARGUMENTS: function definition argument 'type5' should also have an identifier name
#138: FILE: include/asm-alpha/unistd.h:564:
+	type (*syscall_ptr)(type1, type2, type3, type4, type5, type6);	\

WARNING:FUNCTION_ARGUMENTS: function definition argument 'type6' should also have an identifier name
#138: FILE: include/asm-alpha/unistd.h:564:
+	type (*syscall_ptr)(type1, type2, type3, type4, type5, type6);	\

ERROR:SPACING: space required after that ',' (ctx:VxV)
#144: FILE: include/asm-alpha/unistd.h:570:
+static inline _syscall0(int,sync)
                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#145: FILE: include/asm-alpha/unistd.h:571:
+static inline _syscall0(pid_t,setsid)
                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#146: FILE: include/asm-alpha/unistd.h:572:
+static inline _syscall3(long,write,int,fd,const char *,buf,off_t,count)
                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#146: FILE: include/asm-alpha/unistd.h:572:
+static inline _syscall3(long,write,int,fd,const char *,buf,off_t,count)
                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#146: FILE: include/asm-alpha/unistd.h:572:
+static inline _syscall3(long,write,int,fd,const char *,buf,off_t,count)
                                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#146: FILE: include/asm-alpha/unistd.h:572:
+static inline _syscall3(long,write,int,fd,const char *,buf,off_t,count)
                                          ^

ERROR:SPACING: space required after that ',' (ctx:OxV)
#146: FILE: include/asm-alpha/unistd.h:572:
+static inline _syscall3(long,write,int,fd,const char *,buf,off_t,count)
                                                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#146: FILE: include/asm-alpha/unistd.h:572:
+static inline _syscall3(long,write,int,fd,const char *,buf,off_t,count)
                                                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#146: FILE: include/asm-alpha/unistd.h:572:
+static inline _syscall3(long,write,int,fd,const char *,buf,off_t,count)
                                                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#147: FILE: include/asm-alpha/unistd.h:573:
+static inline _syscall3(long,read,int,fd,char *,buf,off_t,count)
                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#147: FILE: include/asm-alpha/unistd.h:573:
+static inline _syscall3(long,read,int,fd,char *,buf,off_t,count)
                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#147: FILE: include/asm-alpha/unistd.h:573:
+static inline _syscall3(long,read,int,fd,char *,buf,off_t,count)
                                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#147: FILE: include/asm-alpha/unistd.h:573:
+static inline _syscall3(long,read,int,fd,char *,buf,off_t,count)
                                         ^

ERROR:SPACING: space required after that ',' (ctx:OxV)
#147: FILE: include/asm-alpha/unistd.h:573:
+static inline _syscall3(long,read,int,fd,char *,buf,off_t,count)
                                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#147: FILE: include/asm-alpha/unistd.h:573:
+static inline _syscall3(long,read,int,fd,char *,buf,off_t,count)
                                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#147: FILE: include/asm-alpha/unistd.h:573:
+static inline _syscall3(long,read,int,fd,char *,buf,off_t,count)
                                                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#148: FILE: include/asm-alpha/unistd.h:574:
+static inline _syscall3(off_t,lseek,int,fd,off_t,offset,int,count)
                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#148: FILE: include/asm-alpha/unistd.h:574:
+static inline _syscall3(off_t,lseek,int,fd,off_t,offset,int,count)
                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#148: FILE: include/asm-alpha/unistd.h:574:
+static inline _syscall3(off_t,lseek,int,fd,off_t,offset,int,count)
                                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#148: FILE: include/asm-alpha/unistd.h:574:
+static inline _syscall3(off_t,lseek,int,fd,off_t,offset,int,count)
                                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#148: FILE: include/asm-alpha/unistd.h:574:
+static inline _syscall3(off_t,lseek,int,fd,off_t,offset,int,count)
                                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#148: FILE: include/asm-alpha/unistd.h:574:
+static inline _syscall3(off_t,lseek,int,fd,off_t,offset,int,count)
                                                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#148: FILE: include/asm-alpha/unistd.h:574:
+static inline _syscall3(off_t,lseek,int,fd,off_t,offset,int,count)
                                                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#149: FILE: include/asm-alpha/unistd.h:575:
+static inline _syscall1(int,dup,int,fd)
                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#149: FILE: include/asm-alpha/unistd.h:575:
+static inline _syscall1(int,dup,int,fd)
                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#149: FILE: include/asm-alpha/unistd.h:575:
+static inline _syscall1(int,dup,int,fd)
                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#150: FILE: include/asm-alpha/unistd.h:576:
+static inline _syscall3(int,open,const char *,file,int,flag,int,mode)
                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#150: FILE: include/asm-alpha/unistd.h:576:
+static inline _syscall3(int,open,const char *,file,int,flag,int,mode)
                                 ^

ERROR:SPACING: space required after that ',' (ctx:OxV)
#150: FILE: include/asm-alpha/unistd.h:576:
+static inline _syscall3(int,open,const char *,file,int,flag,int,mode)
                                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#150: FILE: include/asm-alpha/unistd.h:576:
+static inline _syscall3(int,open,const char *,file,int,flag,int,mode)
                                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#150: FILE: include/asm-alpha/unistd.h:576:
+static inline _syscall3(int,open,const char *,file,int,flag,int,mode)
                                                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#150: FILE: include/asm-alpha/unistd.h:576:
+static inline _syscall3(int,open,const char *,file,int,flag,int,mode)
                                                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#150: FILE: include/asm-alpha/unistd.h:576:
+static inline _syscall3(int,open,const char *,file,int,flag,int,mode)
                                                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#151: FILE: include/asm-alpha/unistd.h:577:
+static inline _syscall1(int,close,int,fd)
                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#151: FILE: include/asm-alpha/unistd.h:577:
+static inline _syscall1(int,close,int,fd)
                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#151: FILE: include/asm-alpha/unistd.h:577:
+static inline _syscall1(int,close,int,fd)
                                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#152: FILE: include/asm-alpha/unistd.h:578:
+static inline _syscall1(long,_exit,int,exitcode)
                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#152: FILE: include/asm-alpha/unistd.h:578:
+static inline _syscall1(long,_exit,int,exitcode)
                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#152: FILE: include/asm-alpha/unistd.h:578:
+static inline _syscall1(long,_exit,int,exitcode)
                                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#153: FILE: include/asm-alpha/unistd.h:579:
+static inline _syscall1(long,delete_module,const char *,name)
                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#153: FILE: include/asm-alpha/unistd.h:579:
+static inline _syscall1(long,delete_module,const char *,name)
                                           ^

ERROR:SPACING: space required after that ',' (ctx:OxV)
#153: FILE: include/asm-alpha/unistd.h:579:
+static inline _syscall1(long,delete_module,const char *,name)
                                                        ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#155: FILE: include/asm-alpha/unistd.h:581:
+extern void sys_idle(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000493000.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 90 errors, 21 warnings, 43 checks, 176 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000493000.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
