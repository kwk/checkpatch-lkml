WARNING:TYPO_SPELLING: 'fo' may be misspelled - perhaps 'of'?
#16: 
Subject: [PATCH] [6/6] PPC64 iSeries last of the cleanups fo the MF code
                                                          ^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#68: FILE: arch/ppc64/kernel/mf.c:25:
   * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/uaccess.h> instead of <asm/uaccess.h>
#90: FILE: arch/ppc64/kernel/mf.c:38:
+#include <asm/uaccess.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#104: FILE: arch/ppc64/kernel/mf.c:198:
+			printk(KERN_ERR "mf.c: HvCallEvent_signalLpEvent() "

WARNING:SPLIT_STRING: quoted string split across lines
#105: FILE: arch/ppc64/kernel/mf.c:199:
+			printk(KERN_ERR "mf.c: HvCallEvent_signalLpEvent() "
+					"failed with %d\n", (int)hv_rc);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*ev)...) over kmalloc(sizeof(struct pending_event)...)
#119: FILE: arch/ppc64/kernel/mf.c:239:
+		ev = kmalloc(sizeof(struct pending_event), GFP_ATOMIC);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ev"
#120: FILE: arch/ppc64/kernel/mf.c:240:
+		if (ev == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#121: FILE: arch/ppc64/kernel/mf.c:241:
+			printk(KERN_ERR "mf.c: unable to kmalloc %ld bytes\n",

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#121: FILE: arch/ppc64/kernel/mf.c:241:
+		if (ev == NULL) {
+			printk(KERN_ERR "mf.c: unable to kmalloc %ld bytes\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#122: FILE: arch/ppc64/kernel/mf.c:242:
+			printk(KERN_ERR "mf.c: unable to kmalloc %ld bytes\n",
+					sizeof(struct pending_event));

CHECK:CAMELCASE: Avoid CamelCase: <xSizeMinus1>
#133: FILE: arch/ppc64/kernel/mf.c:255:
+	hev->xSizeMinus1 = sizeof(ev->event) - 1;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "pev"
#171: FILE: arch/ppc64/kernel/mf.c:398:
+			if (pev != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pev"
#174: FILE: arch/ppc64/kernel/mf.c:401:
+			if (pev == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "pce_msg_data->completion"
#183: FILE: arch/ppc64/kernel/mf.c:406:
+			if (pce_msg_data->completion != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "pending_event_head"
#211: FILE: arch/ppc64/kernel/mf.c:418:
+			if (pending_event_head != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pending_event_head"
#257: FILE: arch/ppc64/kernel/mf.c:445:
+	if (pending_event_head == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#258: FILE: arch/ppc64/kernel/mf.c:446:
+		printk(KERN_ERR "mf.c: stack empty for receiving ack\n");

CHECK:CAMELCASE: Avoid CamelCase: <xSubtype>
#262: FILE: arch/ppc64/kernel/mf.c:450:
+	switch (event->hp_lp_event.xSubtype) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "pce_msg_data->completion"
#285: FILE: arch/ppc64/kernel/mf.c:461:
+		if (pce_msg_data->completion != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "handler"
#290: FILE: arch/ppc64/kernel/mf.c:466:
+			if (handler != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "pending_event_head->hdlr"
#296: FILE: arch/ppc64/kernel/mf.c:472:
+		if (pending_event_head->hdlr != NULL)

WARNING:LONG_LINE: line length of 123 exceeds 100 columns
#297: FILE: arch/ppc64/kernel/mf.c:473:
+			(*pending_event_head->hdlr)((void *)event->hp_lp_event.xCorrelationToken, event->data.alloc.count);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:CAMELCASE: Avoid CamelCase: <xCorrelationToken>
#297: FILE: arch/ppc64/kernel/mf.c:473:
+			(*pending_event_head->hdlr)((void *)event->hp_lp_event.xCorrelationToken, event->data.alloc.count);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rsp"
#303: FILE: arch/ppc64/kernel/mf.c:479:
+		if (rsp == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#304: FILE: arch/ppc64/kernel/mf.c:480:
+			printk(KERN_ERR "mf.c: no rsp\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rsp->response"
#307: FILE: arch/ppc64/kernel/mf.c:483:
+		if (rsp->response != NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#309: FILE: arch/ppc64/kernel/mf.c:485:
+			memcpy(rsp->response, &event->data.vsp_cmd,
+					sizeof(event->data.vsp_cmd));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#559: FILE: arch/ppc64/kernel/mf.c:680:
+	printk(KERN_NOTICE "mf.c: iSeries Linux LPAR Machine Facilities "

WARNING:SPLIT_STRING: quoted string split across lines
#560: FILE: arch/ppc64/kernel/mf.c:681:
+	printk(KERN_NOTICE "mf.c: iSeries Linux LPAR Machine Facilities "
+			"initialized\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rtc_data.ce_msg.ce_msg[2] == 0xa9'
#638: FILE: arch/ppc64/kernel/mf.c:727:
+	if ((rtc_data.ce_msg.ce_msg[2] == 0xa9) ||
+	    (rtc_data.ce_msg.ce_msg[2] == 0xaf)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rtc_data.ce_msg.ce_msg[2] == 0xaf'
#638: FILE: arch/ppc64/kernel/mf.c:727:
+	if ((rtc_data.ce_msg.ce_msg[2] == 0xa9) ||
+	    (rtc_data.ce_msg.ce_msg[2] == 0xaf)) {

CHECK:CAMELCASE: Avoid CamelCase: <iSeries_vio_dev>
#723: FILE: arch/ppc64/kernel/mf.c:822:
+	dma_addr = dma_map_single(iSeries_vio_dev, page, off + count,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#724: FILE: arch/ppc64/kernel/mf.c:823:
+	dma_addr = dma_map_single(iSeries_vio_dev, page, off + count,
+			DMA_FROM_DEVICE);

CHECK:CAMELCASE: Avoid CamelCase: <HvLpDma_AddressType_TceIndex>
#731: FILE: arch/ppc64/kernel/mf.c:830:
+	vsp_cmd.sub_data.kern.address_type = HvLpDma_AddressType_TceIndex;

WARNING:MEMORY_BARRIER: memory barrier without comment
#734: FILE: arch/ppc64/kernel/mf.c:833:
+	mb();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#737: FILE: arch/ppc64/kernel/mf.c:836:
+	dma_unmap_single(iSeries_vio_dev, dma_addr, off + count,
+			DMA_FROM_DEVICE);

CHECK:CAMELCASE: Avoid CamelCase: <mf_getVmlinuxChunk>
#771: FILE: arch/ppc64/kernel/mf.c:864:
+static int mf_getVmlinuxChunk(char *buffer, int *size, int offset, u64 side)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#779: FILE: arch/ppc64/kernel/mf.c:872:
+	dma_addr = dma_map_single(iSeries_vio_dev, buffer, len,
+			DMA_FROM_DEVICE);

WARNING:MEMORY_BARRIER: memory barrier without comment
#788: FILE: arch/ppc64/kernel/mf.c:881:
+	mb();

WARNING:MEMORY_BARRIER: memory barrier without comment
#816: FILE: arch/ppc64/kernel/mf.c:926:
+	mb();

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#821: FILE: arch/ppc64/kernel/mf.c:931:
+			case 0:	mf_current_side = 'A';

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#823: FILE: arch/ppc64/kernel/mf.c:933:
+			case 1:	mf_current_side = 'B';

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#825: FILE: arch/ppc64/kernel/mf.c:935:
+			case 2:	mf_current_side = 'C';

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#827: FILE: arch/ppc64/kernel/mf.c:937:
+			default:	mf_current_side = 'D';

CHECK:CAMELCASE: Avoid CamelCase: <newSide>
#841: FILE: arch/ppc64/kernel/mf.c:960:
+	u64 newSide;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#860: FILE: arch/ppc64/kernel/mf.c:973:
+	case 'A':	newSide = 0;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#862: FILE: arch/ppc64/kernel/mf.c:975:
+	case 'B':	newSide = 1;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#864: FILE: arch/ppc64/kernel/mf.c:977:
+	case 'C':	newSide = 2;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#866: FILE: arch/ppc64/kernel/mf.c:979:
+	case 'D':	newSide = 3;

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#883: FILE: arch/ppc64/kernel/mf.c:995:
+#if 0

CHECK:CAMELCASE: Avoid CamelCase: <mf_getSrcHistory>
#884: FILE: arch/ppc64/kernel/mf.c:996:
+static void mf_getSrcHistory(char *buffer, int size)

CHECK:CAMELCASE: Avoid CamelCase: <IplTypeReturnStuff>
#886: FILE: arch/ppc64/kernel/mf.c:998:
+	struct IplTypeReturnStuff return_stuff;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ev == NULL'
#895: FILE: arch/ppc64/kernel/mf.c:1007:
+	if ((ev == NULL) || (pages[0] == NULL) || (pages[1] == NULL)
+			 || (pages[2] == NULL) || (pages[3] == NULL))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pages[0] == NULL'
#895: FILE: arch/ppc64/kernel/mf.c:1007:
+	if ((ev == NULL) || (pages[0] == NULL) || (pages[1] == NULL)
+			 || (pages[2] == NULL) || (pages[3] == NULL))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pages[1] == NULL'
#895: FILE: arch/ppc64/kernel/mf.c:1007:
+	if ((ev == NULL) || (pages[0] == NULL) || (pages[1] == NULL)
+			 || (pages[2] == NULL) || (pages[3] == NULL))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pages[2] == NULL'
#895: FILE: arch/ppc64/kernel/mf.c:1007:
+	if ((ev == NULL) || (pages[0] == NULL) || (pages[1] == NULL)
+			 || (pages[2] == NULL) || (pages[3] == NULL))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pages[3] == NULL'
#895: FILE: arch/ppc64/kernel/mf.c:1007:
+	if ((ev == NULL) || (pages[0] == NULL) || (pages[1] == NULL)
+			 || (pages[2] == NULL) || (pages[3] == NULL))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ev"
#895: FILE: arch/ppc64/kernel/mf.c:1007:
+	if ((ev == NULL) || (pages[0] == NULL) || (pages[1] == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pages[0]"
#895: FILE: arch/ppc64/kernel/mf.c:1007:
+	if ((ev == NULL) || (pages[0] == NULL) || (pages[1] == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pages[1]"
#895: FILE: arch/ppc64/kernel/mf.c:1007:
+	if ((ev == NULL) || (pages[0] == NULL) || (pages[1] == NULL)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#896: FILE: arch/ppc64/kernel/mf.c:1008:
+	if ((ev == NULL) || (pages[0] == NULL) || (pages[1] == NULL)
+			 || (pages[2] == NULL) || (pages[3] == NULL))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pages[2]"
#896: FILE: arch/ppc64/kernel/mf.c:1008:
+			 || (pages[2] == NULL) || (pages[3] == NULL))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pages[3]"
#896: FILE: arch/ppc64/kernel/mf.c:1008:
+			 || (pages[2] == NULL) || (pages[3] == NULL))

CHECK:CAMELCASE: Avoid CamelCase: <xType>
#899: FILE: arch/ppc64/kernel/mf.c:1011:
+	return_stuff.xType = 0;

CHECK:CAMELCASE: Avoid CamelCase: <xRc>
#900: FILE: arch/ppc64/kernel/mf.c:1012:
+	return_stuff.xRc = 0;

CHECK:CAMELCASE: Avoid CamelCase: <xDone>
#901: FILE: arch/ppc64/kernel/mf.c:1013:
+	return_stuff.xDone = 0;

CHECK:CAMELCASE: Avoid CamelCase: <xSubtypeData>
#903: FILE: arch/ppc64/kernel/mf.c:1015:
+	ev->event.hp_lp_event.x.xSubtypeData =

CHECK:CAMELCASE: Avoid CamelCase: <xEvent>
#905: FILE: arch/ppc64/kernel/mf.c:1017:
+	ev->event.data.vsp_cmd.xEvent = &return_stuff;

CHECK:CAMELCASE: Avoid CamelCase: <HvLpConfig_getLpIndex>
#907: FILE: arch/ppc64/kernel/mf.c:1019:
+	ev->event.data.vsp_cmd.lp_index = HvLpConfig_getLpIndex();

WARNING:MEMORY_BARRIER: memory barrier without comment
#914: FILE: arch/ppc64/kernel/mf.c:1026:
+	mb();

ERROR:CODE_INDENT: code indent should use tabs where possible
#918: FILE: arch/ppc64/kernel/mf.c:1030:
+ ^Iwhile (return_stuff.xDone != 1)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#918: FILE: arch/ppc64/kernel/mf.c:1030:
+ ^Iwhile (return_stuff.xDone != 1)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#918: FILE: arch/ppc64/kernel/mf.c:1030:
+ ^Iwhile (return_stuff.xDone != 1)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#919: FILE: arch/ppc64/kernel/mf.c:1031:
+ ^I^Iudelay(10);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#919: FILE: arch/ppc64/kernel/mf.c:1031:
+ ^I^Iudelay(10);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#919: FILE: arch/ppc64/kernel/mf.c:1031:
+ ^I^Iudelay(10);$

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#919: FILE: arch/ppc64/kernel/mf.c:1031:
+ 		udelay(10);

usleep_range() should be preferred over udelay(). The proper way of
using usleep_range() is mentioned in the kernel docs.

See: https://www.kernel.org/doc/html/latest/timers/timers-howto.html#delays-information-on-the-various-kernel-delay-sleep-mechanisms

ERROR:CODE_INDENT: code indent should use tabs where possible
#920: FILE: arch/ppc64/kernel/mf.c:1032:
+ ^Iif (return_stuff.xRc == 0)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#920: FILE: arch/ppc64/kernel/mf.c:1032:
+ ^Iif (return_stuff.xRc == 0)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#920: FILE: arch/ppc64/kernel/mf.c:1032:
+ ^Iif (return_stuff.xRc == 0)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#921: FILE: arch/ppc64/kernel/mf.c:1033:
+ ^I^Imemcpy(buffer, pages[0], size);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#921: FILE: arch/ppc64/kernel/mf.c:1033:
+ ^I^Imemcpy(buffer, pages[0], size);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#921: FILE: arch/ppc64/kernel/mf.c:1033:
+ ^I^Imemcpy(buffer, pages[0], size);$

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#932: FILE: arch/ppc64/kernel/mf.c:1044:
+#if 0

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#952: FILE: arch/ppc64/kernel/mf.c:1090:
+static int proc_mf_change_cmdline(struct file *file, const char __user *buffer,
 		unsigned long count, void *data)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#966: FILE: arch/ppc64/kernel/mf.c:1102:
+	page = dma_alloc_coherent(iSeries_vio_dev, count, &dma_addr,
+			GFP_ATOMIC);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!page"
#968: FILE: arch/ppc64/kernel/mf.c:1104:
+	if (page == NULL)

WARNING:MEMORY_BARRIER: memory barrier without comment
#982: FILE: arch/ppc64/kernel/mf.c:1117:
+	mb();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1015: FILE: arch/ppc64/kernel/mf.c:1143:
+	page = dma_alloc_coherent(iSeries_vio_dev, count, &dma_addr,
+			GFP_ATOMIC);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!page"
#1017: FILE: arch/ppc64/kernel/mf.c:1145:
+	if (page == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1018: FILE: arch/ppc64/kernel/mf.c:1146:
+		printk(KERN_ERR "mf.c: couldn't allocate memory to set vmlinux chunk\n");

WARNING:MEMORY_BARRIER: memory barrier without comment
#1033: FILE: arch/ppc64/kernel/mf.c:1160:
+	mb();

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1061: FILE: include/asm-ppc64/iSeries/mf.h:24:
  * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1062: FILE: include/asm-ppc64/iSeries/mf.h:25:
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000232572.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 15 errors, 27 warnings, 52 checks, 1017 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000232572.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
