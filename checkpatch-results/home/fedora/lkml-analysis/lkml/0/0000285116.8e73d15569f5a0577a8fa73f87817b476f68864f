ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#38: 
--- a/drivers/message/i2o/i2o_core.c	2004-04-03 17:37:36.000000000 -1000

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#57: FILE: drivers/message/i2o/i2o_core.c:229:
+u32 i2o_context_list_add(void *ptr, struct i2o_controller *c) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required before the open parenthesis '('
#64: FILE: drivers/message/i2o/i2o_core.c:236:
+	while(*entry && ((*entry)->flags & I2O_CONTEXT_LIST_USED)) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#65: FILE: drivers/message/i2o/i2o_core.c:237:
+		if((*entry)->context >= context)

ERROR:SPACING: space required before the open parenthesis '('
#70: FILE: drivers/message/i2o/i2o_core.c:242:
+	if(!*entry) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#70: FILE: drivers/message/i2o/i2o_core.c:242:
+	if(!*entry) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required before the open parenthesis '('
#71: FILE: drivers/message/i2o/i2o_core.c:243:
+		if(unlikely(!context)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#73: FILE: drivers/message/i2o/i2o_core.c:245:
+			printk(KERN_EMERG "i2o_core: context list overflow\n");

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*element)...) over kmalloc(sizeof(struct i2o_context_list_element)...)
#77: FILE: drivers/message/i2o/i2o_core.c:249:
+		element = kmalloc(sizeof(struct i2o_context_list_element), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

ERROR:SPACING: space required before the open parenthesis '('
#78: FILE: drivers/message/i2o/i2o_core.c:250:
+		if(!element) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#79: FILE: drivers/message/i2o/i2o_core.c:251:
+			printk(KERN_EMERG "i2o_core: could not allocate memory for context list element\n");

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#79: FILE: drivers/message/i2o/i2o_core.c:251:
+		if(!element) {
+			printk(KERN_EMERG "i2o_core: could not allocate memory for context list element\n");

CHECK:BRACES: Unbalanced braces around else statement
#85: FILE: drivers/message/i2o/i2o_core.c:257:
+	} else

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#104: FILE: drivers/message/i2o/i2o_core.c:276:
+u32 i2o_context_list_remove(void *ptr, struct i2o_controller *c) {

ERROR:SPACING: space required before the open parenthesis '('
#111: FILE: drivers/message/i2o/i2o_core.c:283:
+	while(*entry && ((*entry)->ptr != ptr))

ERROR:SPACING: space required before the open parenthesis '('
#114: FILE: drivers/message/i2o/i2o_core.c:286:
+	if(unlikely(!*entry)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#116: FILE: drivers/message/i2o/i2o_core.c:288:
+		printk(KERN_WARNING "i2o_core: could not remove nonexistent ptr %p\n", ptr);

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#138: FILE: drivers/message/i2o/i2o_core.c:310:
+void *i2o_context_list_get(u32 context, struct i2o_controller *c) {

ERROR:SPACING: space required before the open parenthesis '('
#146: FILE: drivers/message/i2o/i2o_core.c:318:
+	while(*entry && ((*entry)->context != context)) {

ERROR:SPACING: space prohibited before that '++' (ctx:WxO)
#148: FILE: drivers/message/i2o/i2o_core.c:320:
+		count ++;
 		      ^

ERROR:SPACING: space required before the open parenthesis '('
#151: FILE: drivers/message/i2o/i2o_core.c:323:
+	if(unlikely(!*entry)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#153: FILE: drivers/message/i2o/i2o_core.c:325:
+		printk(KERN_WARNING "i2o_core: context id %d not found\n", context);

ERROR:SPACING: space required before the open parenthesis '('
#159: FILE: drivers/message/i2o/i2o_core.c:331:
+	if(count >= I2O_CONTEXT_LIST_MIN_LENGTH) {

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#192: FILE: drivers/message/i2o/i2o_core.c:3923:
+EXPORT_SYMBOL(i2o_context_list_get);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#193: FILE: drivers/message/i2o/i2o_core.c:3924:
+EXPORT_SYMBOL(i2o_context_list_remove);

CHECK:CAMELCASE: Avoid CamelCase: <Scsi_Cmnd>
#211: FILE: drivers/message/i2o/i2o_scsi.c:233:
+			current_command = (Scsi_Cmnd *)i2o_context_list_get(m[3], c);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

ERROR:SPACING: space required before the open parenthesis '('
#212: FILE: drivers/message/i2o/i2o_scsi.c:234:
+			if(!current_command)

WARNING:LONG_LINE_COMMENT: line length of 113 exceeds 100 columns
#263: FILE: drivers/message/i2o/i2o_scsi.c:699:
+	i2o_raw_writel(i2o_context_list_add(SCpnt, c), &msg[3]);	/* We want the SCSI control block back */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:CAMELCASE: Avoid CamelCase: <SCpnt>
#263: FILE: drivers/message/i2o/i2o_scsi.c:699:
+	i2o_raw_writel(i2o_context_list_add(SCpnt, c), &msg[3]);	/* We want the SCSI control block back */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#324: FILE: drivers/message/i2o/i2o_scsi.c:912:
+	msg[1] = I2O_CMD_SCSI_ABORT<<24|HOST_TID<<12|tid;
 	                           ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#324: FILE: drivers/message/i2o/i2o_scsi.c:912:
+	msg[1] = I2O_CMD_SCSI_ABORT<<24|HOST_TID<<12|tid;
 	                               ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#324: FILE: drivers/message/i2o/i2o_scsi.c:912:
+	msg[1] = I2O_CMD_SCSI_ABORT<<24|HOST_TID<<12|tid;
 	                                        ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#324: FILE: drivers/message/i2o/i2o_scsi.c:912:
+	msg[1] = I2O_CMD_SCSI_ABORT<<24|HOST_TID<<12|tid;
 	                                            ^

ERROR:SPACING: space required before the open parenthesis '('
#328: FILE: drivers/message/i2o/i2o_scsi.c:916:
+	if(i2o_post_wait(c, msg, sizeof(msg), 240))

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#363: FILE: include/linux/i2o.h:149:
+	struct i2o_context_list_element *context_list; /* list of context id's
+						    and pointers */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#363: FILE: include/linux/i2o.h:149:
+						    and pointers */

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#373: FILE: include/linux/i2o.h:339:
+extern u32 i2o_context_list_add(void *, struct i2o_controller *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#374: FILE: include/linux/i2o.h:340:
+extern void *i2o_context_list_get(u32, struct i2o_controller *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#374: FILE: include/linux/i2o.h:340:
+extern void *i2o_context_list_get(u32, struct i2o_controller *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct i2o_controller *' should also have an identifier name
#374: FILE: include/linux/i2o.h:340:
+extern void *i2o_context_list_get(u32, struct i2o_controller *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#375: FILE: include/linux/i2o.h:341:
+extern u32 i2o_context_list_remove(void *, struct i2o_controller *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#375: FILE: include/linux/i2o.h:341:
+extern u32 i2o_context_list_remove(void *, struct i2o_controller *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct i2o_controller *' should also have an identifier name
#375: FILE: include/linux/i2o.h:341:
+extern u32 i2o_context_list_remove(void *, struct i2o_controller *);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000285116.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 17 errors, 14 warnings, 12 checks, 346 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000285116.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
