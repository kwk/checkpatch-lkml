WARNING:TYPO_SPELLING: 'severly' may be misspelled - perhaps 'severely'?
#167: FILE: fs/ntfs/ChangeLog:55:
+	  whose data attribute is split across multiple extents, is severly
 	                                                            ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:DEPRECATED_VARIABLE: Use of EXTRA_CFLAGS is deprecated, please use `ccflags-y instead.
#198: FILE: fs/ntfs/Makefile:9:
+EXTRA_CFLAGS = -DNTFS_VERSION=\"2.1.25\"

EXTRA_{A,C,CPP,LD}FLAGS are deprecated and should be replaced by the new
flags added via commit f77bf01425b1 ("kbuild: introduce ccflags-y,
asflags-y and ldflags-y").

The following conversion scheme maybe used::

  EXTRA_AFLAGS    ->  asflags-y
  EXTRA_CFLAGS    ->  ccflags-y
  EXTRA_CPPFLAGS  ->  cppflags-y
  EXTRA_LDFLAGS   ->  ldflags-y

See:

  1. https://lore.kernel.org/lkml/20070930191054.GA15876@uranus.ravnborg.org/
  2. https://lore.kernel.org/lkml/1313384834-24433-12-git-send-email-lacombar@gmail.com/
  3. https://www.kernel.org/doc/html/latest/kbuild/makefiles.html#compilation-flags

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#207: FILE: fs/ntfs/file.c:19:
  * Foundation,Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#220: FILE: fs/ntfs/file.c:31:
+#include <asm/uaccess.h>

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#247: FILE: fs/ntfs/file.c:83:
+ * that if any uptodate page cache pages between the old initialized size and
                ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#257: FILE: fs/ntfs/file.c:93:
+ * cache at all.  This is because if the page cache page is not uptodate we
                                                                 ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#258: FILE: fs/ntfs/file.c:94:
+ * bring it uptodate later, when doing the write to the mft record since we
             ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#259: FILE: fs/ntfs/file.c:95:
+ * then already have the page mapped.  And if the page is uptodate, the
                                                           ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#261: FILE: fs/ntfs/file.c:97:
+ * brought uptodate and the region may in fact already have been overwritten
            ^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#282: FILE: fs/ntfs/file.c:118:
+static int ntfs_attr_extend_initialized(ntfs_inode *ni, const s64 new_init_size,
+		struct page **cached_page, struct pagevec *lru_pvec)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#302: FILE: fs/ntfs/file.c:138:
+	BUG_ON(new_init_size > ni->allocated_size);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:SPLIT_STRING: quoted string split across lines
#305: FILE: fs/ntfs/file.c:141:
+	ntfs_debug("Entering for i_ino 0x%lx, attribute type 0x%x, "
+			"old_initialized_size 0x%llx, "

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#306: FILE: fs/ntfs/file.c:142:
+			"old_initialized_size 0x%llx, "
+			"new_initialized_size 0x%llx, i_size 0x%llx.",

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#307: FILE: fs/ntfs/file.c:143:
+			vi->i_ino, (unsigned)le32_to_cpu(ni->type),

CHECK:CAMELCASE: Avoid CamelCase: <NInoAttr>
#310: FILE: fs/ntfs/file.c:146:
+	if (!NInoAttr(ni))

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <NInoNonResident>
#315: FILE: fs/ntfs/file.c:151:
+	if (NInoNonResident(ni))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#317: FILE: fs/ntfs/file.c:153:
+	BUG_ON(old_init_size != old_i_size);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#330: FILE: fs/ntfs/file.c:166:
+	err = ntfs_attr_lookup(ni->type, ni->name, ni->name_len,
+			CASE_SENSITIVE, 0, NULL, 0, ctx);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#338: FILE: fs/ntfs/file.c:174:
+	BUG_ON(a->non_resident);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#341: FILE: fs/ntfs/file.c:177:
+	BUG_ON(old_i_size != (loff_t)attr_len);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#346: FILE: fs/ntfs/file.c:182:
+	kattr = (u8*)a + le16_to_cpu(a->data.resident.value_offset);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#374: FILE: fs/ntfs/file.c:210:
+		err = ntfs_attr_lookup(ni->type, ni->name, ni->name_len,
+				CASE_SENSITIVE, 0, NULL, 0, ctx);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#382: FILE: fs/ntfs/file.c:218:
+		BUG_ON(!a->non_resident);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#383: FILE: fs/ntfs/file.c:219:
+		BUG_ON(old_i_size != (loff_t)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#404: FILE: fs/ntfs/file.c:240:
+		page = read_cache_page(mapping, index,
+				(filler_t*)mapping->a_ops->readpage, NULL);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#404: FILE: fs/ntfs/file.c:240:
+				(filler_t*)mapping->a_ops->readpage, NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#458: FILE: fs/ntfs/file.c:294:
+	BUG_ON(ni->initialized_size != new_init_size);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#473: FILE: fs/ntfs/file.c:309:
+	err = ntfs_attr_lookup(ni->type, ni->name, ni->name_len,
+			CASE_SENSITIVE, 0, NULL, 0, ctx);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#481: FILE: fs/ntfs/file.c:317:
+	BUG_ON(!a->non_resident);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#491: FILE: fs/ntfs/file.c:327:
+	ntfs_debug("Done, initialized_size 0x%llx, i_size 0x%llx.",
+			(unsigned long long)new_init_size, i_size_read(vi));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#529: FILE: fs/ntfs/file.c:365:
+static inline void ntfs_fault_in_pages_readable(const char __user *uaddr,
+		int bytes)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#532: FILE: fs/ntfs/file.c:368:
+	volatile char c;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#535: FILE: fs/ntfs/file.c:371:
+	end = (const char __user*)PAGE_ALIGN((ptrdiff_t __user)uaddr + bytes);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#547: FILE: fs/ntfs/file.c:383:
+static inline void ntfs_fault_in_pages_readable_iovec(const struct iovec *iov,
+		size_t iov_ofs, int bytes)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#551: FILE: fs/ntfs/file.c:387:
+		unsigned len;

WARNING:TYPO_SPELLING: 'maping' may be misspelled - perhaps 'mapping'?
#573: FILE: fs/ntfs/file.c:409:
+ * Obtain @nr_pages locked page cache pages from the mapping @maping and
                                                               ^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#586: FILE: fs/ntfs/file.c:422:
+static inline int __ntfs_grab_cache_pages(struct address_space *mapping,
+		pgoff_t index, const unsigned nr_pages, struct page **pages,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#586: FILE: fs/ntfs/file.c:422:
+		pgoff_t index, const unsigned nr_pages, struct page **pages,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#591: FILE: fs/ntfs/file.c:427:
+	BUG_ON(!nr_pages);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#592: FILE: fs/ntfs/file.c:428:
+	err = nr = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#604: FILE: fs/ntfs/file.c:440:
+			err = add_to_page_cache(*cached_page, mapping, index,
+					GFP_KERNEL);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#648: FILE: fs/ntfs/file.c:484:
+ * $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#650: FILE: fs/ntfs/file.c:486:
+ * ensure all the buffers are mapped, and bring uptodate any buffers that are
                                                 ^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#663: FILE: fs/ntfs/file.c:499:
+static int ntfs_prepare_pages_for_non_resident_write(struct page **pages,
+		unsigned nr_pages, s64 pos, size_t bytes)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#663: FILE: fs/ntfs/file.c:499:
+		unsigned nr_pages, s64 pos, size_t bytes)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#680: FILE: fs/ntfs/file.c:516:
+	unsigned blocksize, u;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#691: FILE: fs/ntfs/file.c:527:
+	BUG_ON(!nr_pages);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#692: FILE: fs/ntfs/file.c:528:
+	BUG_ON(!pages);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#693: FILE: fs/ntfs/file.c:529:
+	BUG_ON(!*pages);

WARNING:SPLIT_STRING: quoted string split across lines
#698: FILE: fs/ntfs/file.c:534:
+	ntfs_debug("Entering for inode 0x%lx, attribute type 0x%x, start page "
+			"index 0x%lx, nr_pages 0x%x, pos 0x%llx, bytes 0x%x.",

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#707: FILE: fs/ntfs/file.c:543:
+		 * create_empty_buffers() will create uptodate/dirty buffers if
 		                                      ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#708: FILE: fs/ntfs/file.c:544:
+		 * the page is uptodate/dirty.
 		               ^^^^^^^^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#719: FILE: fs/ntfs/file.c:555:
+	vcn = lcn = -1;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#734: FILE: fs/ntfs/file.c:570:
+	bh = head = page_buffers(page);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#738: FILE: fs/ntfs/file.c:574:
+		unsigned bh_cofs;

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#748: FILE: fs/ntfs/file.c:584:
+			 * The buffer is already mapped.  If it is uptodate,
 			                                           ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#754: FILE: fs/ntfs/file.c:590:
+			 * The buffer is not uptodate.  If the page is uptodate
 			                     ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#754: FILE: fs/ntfs/file.c:590:
+			 * The buffer is not uptodate.  If the page is uptodate
 			                                               ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#755: FILE: fs/ntfs/file.c:591:
+			 * set the buffer uptodate and otherwise ignore it.
 			                  ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#762: FILE: fs/ntfs/file.c:598:
+			 * Neither the page nor the buffer are uptodate.  If
 			                                       ^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#767: FILE: fs/ntfs/file.c:603:
+			if ((bh_pos < pos && bh_end > pos) ||
+					(bh_pos < end && bh_end > end)) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#781: FILE: fs/ntfs/file.c:617:
+					u8 *kaddr = kmap_atomic(page, KM_USER0);
+					memset(kaddr + bh_offset(bh), 0,

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#782: FILE: fs/ntfs/file.c:618:
+					memset(kaddr + bh_offset(bh), 0,
+							blocksize);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#803: FILE: fs/ntfs/file.c:639:
+			BUG_ON(lcn < 0);

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#810: FILE: fs/ntfs/file.c:646:
+			 * If the page is uptodate so is the buffer.  If the
 			                  ^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#824: FILE: fs/ntfs/file.c:660:
+					unmap_underlying_metadata(bh->b_bdev,
+							bh->b_blocknr);

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#832: FILE: fs/ntfs/file.c:668:
+			/* Page is _not_ uptodate. */
 			                 ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#836: FILE: fs/ntfs/file.c:672:
+				 * uptodate and is only partially being written
 				   ^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#841: FILE: fs/ntfs/file.c:677:
+				if (!buffer_uptodate(bh) && ((bh_pos < pos &&
+						bh_end > pos) ||

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#851: FILE: fs/ntfs/file.c:687:
+					read_lock_irqsave(&ni->size_lock,
+							flags);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#854: FILE: fs/ntfs/file.c:690:
+					read_unlock_irqrestore(&ni->size_lock,
+							flags);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#862: FILE: fs/ntfs/file.c:698:
+						memset(kaddr + bh_offset(bh),
+								0, blocksize);

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#874: FILE: fs/ntfs/file.c:710:
+			 * set it uptodate, and mark it dirty so it gets
 			          ^^^^^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#883: FILE: fs/ntfs/file.c:719:
+					u8 *kaddr = kmap_atomic(page, KM_USER0);
+					memset(kaddr + bh_offset(bh), 0,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#884: FILE: fs/ntfs/file.c:720:
+					memset(kaddr + bh_offset(bh), 0,
+							blocksize);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#894: FILE: fs/ntfs/file.c:730:
+			if (!buffer_uptodate(bh) &&
+					(bh_pos < pos || bh_end > end)) {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#896: FILE: fs/ntfs/file.c:732:
+				unsigned pofs;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#897: FILE: fs/ntfs/file.c:733:
+^I^I^I^I^I$

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#914: FILE: fs/ntfs/file.c:750:
+		 * is outside allocated size and is not uptodate, zero it and
 		                                        ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#915: FILE: fs/ntfs/file.c:751:
+		 * set it uptodate.
 		          ^^^^^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#926: FILE: fs/ntfs/file.c:762:
+				u8 *kaddr = kmap_atomic(page, KM_USER0);
+				memset(kaddr + bh_offset(bh), 0, blocksize);

CHECK:BRACES: braces {} should be used on all arms of this statement
#939: FILE: fs/ntfs/file.c:775:
+		if (likely(rl != NULL)) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rl"
#939: FILE: fs/ntfs/file.c:775:
+		if (likely(rl != NULL)) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:BRACES: braces {} should be used on all arms of this statement
#961: FILE: fs/ntfs/file.c:797:
+					if (rl_write_locked) {
[...]
+					} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#964: FILE: fs/ntfs/file.c:800:
+					} else

CHECK:BRACES: Unbalanced braces around else statement
#970: FILE: fs/ntfs/file.c:806:
+		} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#977: FILE: fs/ntfs/file.c:813:
+			if (likely(!is_retry && lcn == LCN_RL_NOT_MAPPED)) {
[...]
+			} else
[...]

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#993: FILE: fs/ntfs/file.c:829:
+				err = ntfs_map_runlist_nolock(ni, bh_cpos,
+						NULL);

CHECK:BRACES: Unbalanced braces around else statement
#1008: FILE: fs/ntfs/file.c:844:
+			} else

WARNING:SPLIT_STRING: quoted string split across lines
#1013: FILE: fs/ntfs/file.c:849:
+			ntfs_error(vol->sb, "Failed to write to inode 0x%lx, "
+					"attribute type 0x%x, vcn 0x%llx, "

WARNING:SPLIT_STRING: quoted string split across lines
#1014: FILE: fs/ntfs/file.c:850:
+					"attribute type 0x%x, vcn 0x%llx, "
+					"vcn offset 0x%x, because its "

WARNING:SPLIT_STRING: quoted string split across lines
#1015: FILE: fs/ntfs/file.c:851:
+					"vcn offset 0x%x, because its "
+					"location on disk could not be "

WARNING:SPLIT_STRING: quoted string split across lines
#1016: FILE: fs/ntfs/file.c:852:
+					"location on disk could not be "
+					"determined%s (error code %i).",

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1019: FILE: fs/ntfs/file.c:855:
+					(unsigned)bh_pos &

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1039: FILE: fs/ntfs/file.c:875:
+				 * If the buffer is uptodate we skip it.  If it
 				                    ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1040: FILE: fs/ntfs/file.c:876:
+				 * is not but the page is uptodate, we can set
 				                          ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1041: FILE: fs/ntfs/file.c:877:
+				 * the buffer uptodate.  If the page is not
 				              ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1042: FILE: fs/ntfs/file.c:878:
+				 * uptodate, we can clear the buffer and set it
 				   ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1043: FILE: fs/ntfs/file.c:879:
+				 * uptodate.  Whether this is worthwhile is
 				   ^^^^^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1051: FILE: fs/ntfs/file.c:887:
+					u8 *kaddr = kmap_atomic(page, KM_USER0);
+					memset(kaddr + bh_offset(bh), 0,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1052: FILE: fs/ntfs/file.c:888:
+					memset(kaddr + bh_offset(bh), 0,
+							blocksize);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1064: FILE: fs/ntfs/file.c:900:
+		BUG_ON(lcn != LCN_HOLE);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1070: FILE: fs/ntfs/file.c:906:
+		BUG_ON(!rl);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1078: FILE: fs/ntfs/file.c:914:
+		BUG_ON(rl->lcn != LCN_HOLE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1088: FILE: fs/ntfs/file.c:924:
+		rl2 = ntfs_cluster_alloc(vol, bh_cpos, 1, lcn, DATA_ZONE,
+				FALSE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1092: FILE: fs/ntfs/file.c:928:
+			ntfs_debug("Failed to allocate cluster, error code %i.",
+					err);

WARNING:SPLIT_STRING: quoted string split across lines
#1103: FILE: fs/ntfs/file.c:939:
+				ntfs_error(vol->sb, "Failed to release "
+						"allocated cluster in error "

WARNING:SPLIT_STRING: quoted string split across lines
#1104: FILE: fs/ntfs/file.c:940:
+						"allocated cluster in error "
+						"code path.  Run chkdsk to "

WARNING:SPLIT_STRING: quoted string split across lines
#1105: FILE: fs/ntfs/file.c:941:
+						"code path.  Run chkdsk to "
+						"recover the lost cluster.");

CHECK:CAMELCASE: Avoid CamelCase: <NVolSetErrors>
#1106: FILE: fs/ntfs/file.c:942:
+				NVolSetErrors(vol);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1132: FILE: fs/ntfs/file.c:968:
+		err = ntfs_attr_lookup(ni->type, ni->name, ni->name_len,
+				CASE_SENSITIVE, bh_cpos, NULL, 0, ctx);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1149: FILE: fs/ntfs/file.c:985:
+		BUG_ON(!rl2);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1150: FILE: fs/ntfs/file.c:986:
+		BUG_ON(!rl2->length);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1151: FILE: fs/ntfs/file.c:987:
+		BUG_ON(rl2->lcn < LCN_HOLE);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1158: FILE: fs/ntfs/file.c:994:
+			highest_vcn = (sle64_to_cpu(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1166: FILE: fs/ntfs/file.c:1002:
+		mp_size = ntfs_get_size_for_mapping_pairs(vol, rl2, vcn,
+				highest_vcn);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1168: FILE: fs/ntfs/file.c:1004:
+			if (!(err = mp_size))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:SPLIT_STRING: quoted string split across lines
#1171: FILE: fs/ntfs/file.c:1007:
+			ntfs_debug("Failed to get size for mapping pairs "
+					"array, error code %i.", err);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1179: FILE: fs/ntfs/file.c:1015:
+		err = ntfs_attr_record_resize(m, a, mp_size + le16_to_cpu(

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1182: FILE: fs/ntfs/file.c:1018:
+			BUG_ON(err != -ENOSPC);

WARNING:SPLIT_STRING: quoted string split across lines
#1196: FILE: fs/ntfs/file.c:1032:
+			ntfs_error(vol->sb, "Not enough space in the mft "
+					"record for the extended attribute "

WARNING:SPLIT_STRING: quoted string split across lines
#1197: FILE: fs/ntfs/file.c:1033:
+					"record for the extended attribute "
+					"record.  This case is not "

WARNING:SPLIT_STRING: quoted string split across lines
#1198: FILE: fs/ntfs/file.c:1034:
+					"record.  This case is not "
+					"implemented yet.");

WARNING:SPACING: space prohibited before semicolon
#1200: FILE: fs/ntfs/file.c:1036:
+			break ;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1207: FILE: fs/ntfs/file.c:1043:
+		err = ntfs_mapping_pairs_build(vol, (u8*)a + le16_to_cpu(

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1207: FILE: fs/ntfs/file.c:1043:
+		err = ntfs_mapping_pairs_build(vol, (u8*)a + le16_to_cpu(

WARNING:SPLIT_STRING: quoted string split across lines
#1212: FILE: fs/ntfs/file.c:1048:
+			ntfs_error(vol->sb, "Cannot fill hole in inode 0x%lx, "
+					"attribute type 0x%x, because building "

WARNING:SPLIT_STRING: quoted string split across lines
#1213: FILE: fs/ntfs/file.c:1049:
+					"attribute type 0x%x, because building "
+					"the mapping pairs failed with error "

WARNING:SPLIT_STRING: quoted string split across lines
#1214: FILE: fs/ntfs/file.c:1050:
+					"the mapping pairs failed with error "
+					"code %i.", vi->i_ino,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1215: FILE: fs/ntfs/file.c:1051:
+					(unsigned)le32_to_cpu(ni->type), err);

CHECK:CAMELCASE: Avoid CamelCase: <NInoSparse>
#1227: FILE: fs/ntfs/file.c:1063:
+		if (likely(NInoSparse(ni) || NInoCompressed(ni))) {

CHECK:CAMELCASE: Avoid CamelCase: <NInoCompressed>
#1227: FILE: fs/ntfs/file.c:1063:
+		if (likely(NInoSparse(ni) || NInoCompressed(ni))) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1238: FILE: fs/ntfs/file.c:1074:
+				err = ntfs_attr_lookup(ni->type, ni->name,
+						ni->name_len, CASE_SENSITIVE,

CHECK:BRACES: braces {} should be used on all arms of this statement
#1285: FILE: fs/ntfs/file.c:1121:
+		if (unlikely(rl_write_locked)) {
[...]
+		} else if (unlikely(rl))
[...]

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1315: FILE: fs/ntfs/file.c:1151:
+				memset(kaddr + bh_offset(bh) + ofs, 0,
+						blocksize - ofs);

CHECK:BRACES: Unbalanced braces around else statement
#1319: FILE: fs/ntfs/file.c:1155:
+		} else /* if (unlikely(!buffer_uptodate(bh))) */

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1326: FILE: fs/ntfs/file.c:1162:
+			bh = head = page_buffers(pages[u]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1339: FILE: fs/ntfs/file.c:1175:
+		if (ntfs_attr_lookup(ni->type, ni->name, ni->name_len,
+				CASE_SENSITIVE, bh_cpos, NULL, 0, ctx)) {

WARNING:SPLIT_STRING: quoted string split across lines
#1341: FILE: fs/ntfs/file.c:1177:
+			ntfs_error(vol->sb, "Failed to find required "
+					"attribute extent of attribute in "

WARNING:SPLIT_STRING: quoted string split across lines
#1342: FILE: fs/ntfs/file.c:1178:
+					"attribute extent of attribute in "
+					"error code path.  Run chkdsk to "

WARNING:SPLIT_STRING: quoted string split across lines
#1343: FILE: fs/ntfs/file.c:1179:
+					"error code path.  Run chkdsk to "
+					"recover.");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1369: FILE: fs/ntfs/file.c:1205:
+		BUG_ON(!rl_write_locked);

WARNING:SPLIT_STRING: quoted string split across lines
#1373: FILE: fs/ntfs/file.c:1209:
+			ntfs_error(vol->sb, "Failed to punch hole into "
+					"attribute runlist in error code "

WARNING:SPLIT_STRING: quoted string split across lines
#1374: FILE: fs/ntfs/file.c:1210:
+					"attribute runlist in error code "
+					"path.  Run chkdsk to recover the "

WARNING:SPLIT_STRING: quoted string split across lines
#1375: FILE: fs/ntfs/file.c:1211:
+					"path.  Run chkdsk to recover the "
+					"lost cluster.");

WARNING:SPLIT_STRING: quoted string split across lines
#1389: FILE: fs/ntfs/file.c:1225:
+				ntfs_error(vol->sb, "Failed to release "
+						"allocated cluster in error "

WARNING:SPLIT_STRING: quoted string split across lines
#1390: FILE: fs/ntfs/file.c:1226:
+						"allocated cluster in error "
+						"code path.  Run chkdsk to "

WARNING:SPLIT_STRING: quoted string split across lines
#1391: FILE: fs/ntfs/file.c:1227:
+						"code path.  Run chkdsk to "
+						"recover the lost cluster.");

WARNING:SPLIT_STRING: quoted string split across lines
#1406: FILE: fs/ntfs/file.c:1242:
+			ntfs_error(vol->sb, "Failed to restore attribute "
+					"record in error code path.  Run "

WARNING:SPLIT_STRING: quoted string split across lines
#1407: FILE: fs/ntfs/file.c:1243:
+					"record in error code path.  Run "
+					"chkdsk to recover.");

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1412: FILE: fs/ntfs/file.c:1248:
+			if (ntfs_mapping_pairs_build(vol, (u8*)a +

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'a->data.non_resident.mapping_pairs_offset'
#1414: FILE: fs/ntfs/file.c:1250:
+					le16_to_cpu(a->data.non_resident.
+					mapping_pairs_offset), attr_rec_len -

A single dereferencing identifier spanned on multiple lines like::

  struct_identifier->member[index].
  member = <foo>;

is generally hard to follow. It can easily lead to typos and so makes
the code vulnerable to bugs.

If fixing the multiple line dereferencing leads to an 80 column
violation, then either rewrite the code in a more simple way or if the
starting part of the dereferencing identifier is the same and used at
multiple places then store it in a temporary variable, and use that
temporary variable only at all the places. For example, if there are
two dereferencing identifiers::

  member1->member2->member3.foo1;
  member1->member2->member3.foo2;

then store the member1->member2->member3 part in a temporary variable.
It not only helps to avoid the 80 column violation but also reduces
the program size by removing the unnecessary dereferences.

But if none of the above methods work then ignore the 80 column
violation because it is much easier to read a dereferencing identifier
on a single line.

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'a->data.non_resident.mapping_pairs_offset'
#1416: FILE: fs/ntfs/file.c:1252:
+					le16_to_cpu(a->data.non_resident.
+					mapping_pairs_offset), ni->runlist.rl,

WARNING:SPLIT_STRING: quoted string split across lines
#1419: FILE: fs/ntfs/file.c:1255:
+				ntfs_error(vol->sb, "Failed to restore "
+						"mapping pairs array in error "

WARNING:SPLIT_STRING: quoted string split across lines
#1420: FILE: fs/ntfs/file.c:1256:
+						"mapping pairs array in error "
+						"code path.  Run chkdsk to "

WARNING:SPLIT_STRING: quoted string split across lines
#1421: FILE: fs/ntfs/file.c:1257:
+						"code path.  Run chkdsk to "
+						"recover.");

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1450: FILE: fs/ntfs/file.c:1286:
+		bh = head = page_buffers(page);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1453: FILE: fs/ntfs/file.c:1289:
+			if (u == nr_pages &&
+					((s64)page->index << PAGE_CACHE_SHIFT) +

CHECK:BRACES: braces {} should be used on all arms of this statement
#1460: FILE: fs/ntfs/file.c:1296:
+				if (PageUptodate(page))
[...]
+				else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1462: FILE: fs/ntfs/file.c:1298:
+				else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1464: FILE: fs/ntfs/file.c:1300:
+					u8 *kaddr = kmap_atomic(page, KM_USER0);
+					memset(kaddr + bh_offset(bh), 0,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1465: FILE: fs/ntfs/file.c:1301:
+					memset(kaddr + bh_offset(bh), 0,
+							blocksize);

WARNING:TYPO_SPELLING: 'sucessfully' may be misspelled - perhaps 'successfully'?
#1480: FILE: fs/ntfs/file.c:1316:
+ * were sucessfully copied.  If a fault is encountered then clear the pages
         ^^^^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1484: FILE: fs/ntfs/file.c:1320:
+static inline size_t ntfs_copy_from_user(struct page **pages,
+		unsigned nr_pages, unsigned ofs, const char __user *buf,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1484: FILE: fs/ntfs/file.c:1320:
+		unsigned nr_pages, unsigned ofs, const char __user *buf,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1484: FILE: fs/ntfs/file.c:1320:
+		unsigned nr_pages, unsigned ofs, const char __user *buf,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1490: FILE: fs/ntfs/file.c:1326:
+	unsigned len;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1535: FILE: fs/ntfs/file.c:1371:
+static size_t __ntfs_copy_from_user_iovec(char *vaddr,
+		const struct iovec *iov, size_t iov_ofs, size_t bytes)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1541: FILE: fs/ntfs/file.c:1377:
+		unsigned len;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1568: FILE: fs/ntfs/file.c:1404:
+static inline void ntfs_set_next_iovec(const struct iovec **iovp,
+		size_t *iov_ofsp, size_t bytes)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1574: FILE: fs/ntfs/file.c:1410:
+		unsigned len;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1605: FILE: fs/ntfs/file.c:1441:
+static inline size_t ntfs_copy_from_user_iovec(struct page **pages,
+		unsigned nr_pages, unsigned ofs, const struct iovec **iov,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1605: FILE: fs/ntfs/file.c:1441:
+		unsigned nr_pages, unsigned ofs, const struct iovec **iov,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1605: FILE: fs/ntfs/file.c:1441:
+		unsigned nr_pages, unsigned ofs, const struct iovec **iov,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1618: FILE: fs/ntfs/file.c:1454:
+		copied = __ntfs_copy_from_user_iovec(kaddr + ofs,
+				*iov, *iov_ofs, len);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1624: FILE: fs/ntfs/file.c:1460:
+			copied = __ntfs_copy_from_user_iovec(kaddr + ofs,
+					*iov, *iov_ofs, len);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1656: FILE: fs/ntfs/file.c:1492:
+static inline void ntfs_flush_dcache_pages(struct page **pages,
+		unsigned nr_pages)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1656: FILE: fs/ntfs/file.c:1492:
+		unsigned nr_pages)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1658: FILE: fs/ntfs/file.c:1494:
+	BUG_ON(!nr_pages);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1678: FILE: fs/ntfs/file.c:1514:
+static inline int ntfs_commit_pages_after_non_resident_write(

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1679: FILE: fs/ntfs/file.c:1515:
+		struct page **pages, const unsigned nr_pages,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1690: FILE: fs/ntfs/file.c:1526:
+	unsigned blocksize, u;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1705: FILE: fs/ntfs/file.c:1541:
+		bh = head = page_buffers(page);

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1720: FILE: fs/ntfs/file.c:1556:
+		 * If all buffers are now uptodate but the page is not, set the
 		                          ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1721: FILE: fs/ntfs/file.c:1557:
+		 * page uptodate.
 		        ^^^^^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1753: FILE: fs/ntfs/file.c:1589:
+	BUG_ON(!NInoNonResident(ni));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1760: FILE: fs/ntfs/file.c:1596:
+	err = ntfs_attr_lookup(ni->type, ni->name, ni->name_len,
+			CASE_SENSITIVE, 0, NULL, 0, ctx);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1767: FILE: fs/ntfs/file.c:1603:
+	BUG_ON(!a->non_resident);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1769: FILE: fs/ntfs/file.c:1605:
+	BUG_ON(end > ni->allocated_size);

WARNING:SPLIT_STRING: quoted string split across lines
#1791: FILE: fs/ntfs/file.c:1627:
+	ntfs_error(vi->i_sb, "Failed to update initialized_size/i_size (error "
+			"code %i).", err);

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1814: FILE: fs/ntfs/file.c:1650:
+ * Need to set uptodate and mark dirty all buffers within the boundary of the
                ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1815: FILE: fs/ntfs/file.c:1651:
+ * write.  If all buffers in a page are uptodate we set the page uptodate, too.
                                         ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1815: FILE: fs/ntfs/file.c:1651:
+ * write.  If all buffers in a page are uptodate we set the page uptodate, too.
                                                                  ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1824: FILE: fs/ntfs/file.c:1660:
+ * buffers uptodate and dirty, sets the page uptodate if all buffers in the
            ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1824: FILE: fs/ntfs/file.c:1660:
+ * buffers uptodate and dirty, sets the page uptodate if all buffers in the
                                              ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1825: FILE: fs/ntfs/file.c:1661:
+ * page are uptodate, and updates i_size if the end of io is beyond i_size.  In
             ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1831: FILE: fs/ntfs/file.c:1667:
+ * attributes we need to do the uptodate bringing here which we combine with
                                 ^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1837: FILE: fs/ntfs/file.c:1673:
+static int ntfs_commit_pages_after_write(struct page **pages,
+		const unsigned nr_pages, s64 pos, size_t bytes)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1837: FILE: fs/ntfs/file.c:1673:
+		const unsigned nr_pages, s64 pos, size_t bytes)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1852: FILE: fs/ntfs/file.c:1688:
+	BUG_ON(!nr_pages);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1853: FILE: fs/ntfs/file.c:1689:
+	BUG_ON(!pages);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1855: FILE: fs/ntfs/file.c:1691:
+	BUG_ON(!page);

WARNING:SPLIT_STRING: quoted string split across lines
#1859: FILE: fs/ntfs/file.c:1695:
+	ntfs_debug("Entering for inode 0x%lx, attribute type 0x%x, start page "
+			"index 0x%lx, nr_pages 0x%x, pos 0x%llx, bytes 0x%x.",

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1865: FILE: fs/ntfs/file.c:1701:
+	BUG_ON(nr_pages > 1);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1874: FILE: fs/ntfs/file.c:1710:
+	BUG_ON(NInoNonResident(ni));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1889: FILE: fs/ntfs/file.c:1725:
+	err = ntfs_attr_lookup(ni->type, ni->name, ni->name_len,
+			CASE_SENSITIVE, 0, NULL, 0, ctx);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1896: FILE: fs/ntfs/file.c:1732:
+	BUG_ON(a->non_resident);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1900: FILE: fs/ntfs/file.c:1736:
+	BUG_ON(attr_len != i_size);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1901: FILE: fs/ntfs/file.c:1737:
+	BUG_ON(pos > attr_len);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1903: FILE: fs/ntfs/file.c:1739:
+	BUG_ON(end > le32_to_cpu(a->length) -

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1905: FILE: fs/ntfs/file.c:1741:
+	kattr = (u8*)a + le16_to_cpu(a->data.resident.value_offset);

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1915: FILE: fs/ntfs/file.c:1751:
+	 * If the page is not uptodate, bring the out of bounds area(s)
 	                      ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1916: FILE: fs/ntfs/file.c:1752:
+	 * uptodate by copying data from the mft record to the page.
 	   ^^^^^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1932: FILE: fs/ntfs/file.c:1768:
+	BUG_ON(end > ni->allocated_size);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1934: FILE: fs/ntfs/file.c:1770:
+	BUG_ON(initialized_size != i_size);

WARNING:SPLIT_STRING: quoted string split across lines
#1953: FILE: fs/ntfs/file.c:1789:
+		ntfs_warning(vi->i_sb, "Error allocating memory required to "
+				"commit the write.");

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1955: FILE: fs/ntfs/file.c:1791:
+			ntfs_warning(vi->i_sb, "Page is uptodate, setting "
 			                                ^^^^^^^^

WARNING:SPLIT_STRING: quoted string split across lines
#1956: FILE: fs/ntfs/file.c:1792:
+			ntfs_warning(vi->i_sb, "Page is uptodate, setting "
+					"dirty so the write will be retried "

WARNING:SPLIT_STRING: quoted string split across lines
#1957: FILE: fs/ntfs/file.c:1793:
+					"dirty so the write will be retried "
+					"later on by the VM.");

CHECK:BRACES: Unbalanced braces around else statement
#1964: FILE: fs/ntfs/file.c:1800:
+		} else

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1965: FILE: fs/ntfs/file.c:1801:
+			ntfs_error(vi->i_sb, "Page is not uptodate.  Written "
 			                                  ^^^^^^^^

WARNING:SPLIT_STRING: quoted string split across lines
#1966: FILE: fs/ntfs/file.c:1802:
+			ntfs_error(vi->i_sb, "Page is not uptodate.  Written "
+					"data has been lost.");

WARNING:SPLIT_STRING: quoted string split across lines
#1969: FILE: fs/ntfs/file.c:1805:
+		ntfs_error(vi->i_sb, "Resident attribute commit write failed "
+				"with error %i.", err);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1987: FILE: fs/ntfs/file.c:1823:
+static ssize_t ntfs_file_buffered_write(struct kiocb *iocb,
+		const struct iovec *iov, unsigned long nr_segs,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2004: FILE: fs/ntfs/file.c:1840:
+	unsigned nr_pages;

WARNING:SPLIT_STRING: quoted string split across lines
#2009: FILE: fs/ntfs/file.c:1845:
+	ntfs_debug("Entering for i_ino 0x%lx, attribute type 0x%x, "
+			"pos 0x%llx, count 0x%lx.",

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2010: FILE: fs/ntfs/file.c:1846:
+			vi->i_ino, (unsigned)le32_to_cpu(ni->type),

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2014: FILE: fs/ntfs/file.c:1850:
+	BUG_ON(NInoMstProtected(ni));

CHECK:CAMELCASE: Avoid CamelCase: <NInoMstProtected>
#2014: FILE: fs/ntfs/file.c:1850:
+	BUG_ON(NInoMstProtected(ni));

CHECK:CAMELCASE: Avoid CamelCase: <NInoEncrypted>
#2023: FILE: fs/ntfs/file.c:1859:
+		if (NInoEncrypted(ni)) {

WARNING:SPLIT_STRING: quoted string split across lines
#2029: FILE: fs/ntfs/file.c:1865:
+			ntfs_error(vi->i_sb, "Writing to compressed files is "
+					"not implemented yet.  Sorry.");

CHECK:CAMELCASE: Avoid CamelCase: <NInoTruncateFailed>
#2037: FILE: fs/ntfs/file.c:1873:
+	if (unlikely(NInoTruncateFailed(ni))) {

WARNING:SPLIT_STRING: quoted string split across lines
#2045: FILE: fs/ntfs/file.c:1881:
+			ntfs_error(vol->sb, "Cannot perform write to inode "
+					"0x%lx, attribute type 0x%x, because "

WARNING:SPLIT_STRING: quoted string split across lines
#2046: FILE: fs/ntfs/file.c:1882:
+					"0x%lx, attribute type 0x%x, because "
+					"ntfs_truncate() failed (error code "

WARNING:SPLIT_STRING: quoted string split across lines
#2047: FILE: fs/ntfs/file.c:1883:
+					"ntfs_truncate() failed (error code "
+					"%i).", vi->i_ino,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2048: FILE: fs/ntfs/file.c:1884:
+					(unsigned)le32_to_cpu(ni->type), err);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2065: FILE: fs/ntfs/file.c:1901:
+			BUG_ON(pos >= ll);

WARNING:SPLIT_STRING: quoted string split across lines
#2069: FILE: fs/ntfs/file.c:1905:
+				ntfs_debug("Truncating write to inode 0x%lx, "
+						"attribute type 0x%x, because "

WARNING:SPLIT_STRING: quoted string split across lines
#2070: FILE: fs/ntfs/file.c:1906:
+						"attribute type 0x%x, because "
+						"the allocation was only "

WARNING:SPLIT_STRING: quoted string split across lines
#2071: FILE: fs/ntfs/file.c:1907:
+						"the allocation was only "
+						"partially extended.",

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2072: FILE: fs/ntfs/file.c:1908:
+						vi->i_ino, (unsigned)

WARNING:SPLIT_STRING: quoted string split across lines
#2085: FILE: fs/ntfs/file.c:1921:
+				ntfs_debug("Truncating write to inode 0x%lx, "
+						"attribute type 0x%x, because "

WARNING:SPLIT_STRING: quoted string split across lines
#2086: FILE: fs/ntfs/file.c:1922:
+						"attribute type 0x%x, because "
+						"extending the allocation "

WARNING:SPLIT_STRING: quoted string split across lines
#2087: FILE: fs/ntfs/file.c:1923:
+						"extending the allocation "
+						"failed (error code %i).",

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2088: FILE: fs/ntfs/file.c:1924:
+						vi->i_ino, (unsigned)

WARNING:SPLIT_STRING: quoted string split across lines
#2094: FILE: fs/ntfs/file.c:1930:
+				ntfs_error(vol->sb, "Cannot perform write to "
+						"inode 0x%lx, attribute type "

WARNING:SPLIT_STRING: quoted string split across lines
#2095: FILE: fs/ntfs/file.c:1931:
+						"inode 0x%lx, attribute type "
+						"0x%x, because extending the "

WARNING:SPLIT_STRING: quoted string split across lines
#2096: FILE: fs/ntfs/file.c:1932:
+						"0x%x, because extending the "
+						"allocation failed (error "

WARNING:SPLIT_STRING: quoted string split across lines
#2097: FILE: fs/ntfs/file.c:1933:
+						"allocation failed (error "
+						"code %i).", vi->i_ino,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2098: FILE: fs/ntfs/file.c:1934:
+						(unsigned)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2118: FILE: fs/ntfs/file.c:1954:
+		err = ntfs_attr_extend_initialized(ni, pos, &cached_page,
+				&lru_pvec);

WARNING:SPLIT_STRING: quoted string split across lines
#2121: FILE: fs/ntfs/file.c:1957:
+			ntfs_error(vol->sb, "Cannot perform write to inode "
+					"0x%lx, attribute type 0x%x, because "

WARNING:SPLIT_STRING: quoted string split across lines
#2122: FILE: fs/ntfs/file.c:1958:
+					"0x%lx, attribute type 0x%x, because "
+					"extending the initialized size "

WARNING:SPLIT_STRING: quoted string split across lines
#2123: FILE: fs/ntfs/file.c:1959:
+					"extending the initialized size "
+					"failed (error code %i).", vi->i_ino,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2124: FILE: fs/ntfs/file.c:1960:
+					(unsigned)le32_to_cpu(ni->type), err);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2145: FILE: fs/ntfs/file.c:1981:
+		unsigned ofs, do_pages, u;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2148: FILE: fs/ntfs/file.c:1984:
+		start_idx = idx = pos >> PAGE_CACHE_SHIFT;

WARNING:SPLIT_STRING: quoted string split across lines
#2171: FILE: fs/ntfs/file.c:2007:
+						ntfs_error(vol->sb, "Cannot "
+							"perform write to "

WARNING:SPLIT_STRING: quoted string split across lines
#2172: FILE: fs/ntfs/file.c:2008:
+							"perform write to "
+							"inode 0x%lx, "

WARNING:SPLIT_STRING: quoted string split across lines
#2173: FILE: fs/ntfs/file.c:2009:
+							"inode 0x%lx, "
+							"attribute type 0x%x, "

WARNING:SPLIT_STRING: quoted string split across lines
#2174: FILE: fs/ntfs/file.c:2010:
+							"attribute type 0x%x, "
+							"because the attribute "

WARNING:SPLIT_STRING: quoted string split across lines
#2175: FILE: fs/ntfs/file.c:2011:
+							"because the attribute "
+							"is corrupt.",

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2176: FILE: fs/ntfs/file.c:2012:
+							vi->i_ino, (unsigned)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2206: FILE: fs/ntfs/file.c:2042:
+		status = __ntfs_grab_cache_pages(mapping, start_idx, do_pages,
+				pages, &cached_page, &lru_pvec);

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#2212: FILE: fs/ntfs/file.c:2048:
+		 * need to bring uptodate any buffers that are only partially
 		                 ^^^^^^^^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2216: FILE: fs/ntfs/file.c:2052:
+			status = ntfs_prepare_pages_for_non_resident_write(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2241: FILE: fs/ntfs/file.c:2077:
+			copied = ntfs_copy_from_user(pages + u, do_pages - u,
+					ofs, buf, bytes);

CHECK:BRACES: Unbalanced braces around else statement
#2243: FILE: fs/ntfs/file.c:2079:
+		} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2245: FILE: fs/ntfs/file.c:2081:
+			copied = ntfs_copy_from_user_iovec(pages + u,
+					do_pages - u, ofs, &iov, &iov_ofs,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2249: FILE: fs/ntfs/file.c:2085:
+		status = ntfs_commit_pages_after_write(pages, do_pages, pos,
+				bytes);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2276: FILE: fs/ntfs/file.c:2112:
+				status = generic_osync_inode(vi, mapping,
+						OSYNC_METADATA|OSYNC_DATA);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2276: FILE: fs/ntfs/file.c:2112:
+						OSYNC_METADATA|OSYNC_DATA);
 						              ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#2278: FILE: fs/ntfs/file.c:2114:
+  ^I}$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2278: FILE: fs/ntfs/file.c:2114:
+  ^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2278: FILE: fs/ntfs/file.c:2114:
+  ^I}$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2281: FILE: fs/ntfs/file.c:2117:
+	ntfs_debug("Done.  Returning %s (written 0x%lx, status %li).",
+			written ? "written" : "status", (unsigned long)written,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2290: FILE: fs/ntfs/file.c:2126:
+static ssize_t ntfs_file_aio_write_nolock(struct kiocb *iocb,
+		const struct iovec *iov, unsigned long nr_segs, loff_t *ppos)

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2308: FILE: fs/ntfs/file.c:2144:
+		if (unlikely((ssize_t)(count|iv->iov_len) < 0))
 		                            ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2333: FILE: fs/ntfs/file.c:2169:
+	written = ntfs_file_buffered_write(iocb, iov, nr_segs, pos, ppos,
+			count);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2343: FILE: fs/ntfs/file.c:2179:
+static ssize_t ntfs_file_aio_write(struct kiocb *iocb, const char __user *buf,
+		size_t count, loff_t pos)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2352: FILE: fs/ntfs/file.c:2188:
+	BUG_ON(iocb->ki_pos != pos);

WARNING:LINE_SPACING: Missing a blank line after declarations
#2359: FILE: fs/ntfs/file.c:2195:
+		int err = sync_page_range(inode, mapping, pos, ret);
+		if (err < 0)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2372: FILE: fs/ntfs/file.c:2208:
+static ssize_t ntfs_file_writev(struct file *file, const struct iovec *iov,
+		unsigned long nr_segs, loff_t *ppos)

WARNING:LINE_SPACING: Missing a blank line after declarations
#2387: FILE: fs/ntfs/file.c:2223:
+		int err = sync_page_range(inode, mapping, *ppos - ret, ret);
+		if (err < 0)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2397: FILE: fs/ntfs/file.c:2233:
+static ssize_t ntfs_file_write(struct file *file, const char __user *buf,
+		size_t count, loff_t *ppos)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2439: FILE: fs/ntfs/file.c:2308:
+	/*.release	= ,*/			 /* Last file is closed.  See
+						    fs/ext2/file.c::

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2443: FILE: fs/ntfs/file.c:2312:
+						    write opened files. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2446: FILE: fs/ntfs/file.c:2315:
+	/*.aio_fsync	= ,*/			 /* Sync all outstanding async
+						    i/o operations on a

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2447: FILE: fs/ntfs/file.c:2316:
+						    kiocb. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2464: FILE: fs/ntfs/file.c:2319:
+	/*.ioctl	= ,*/			 /* Perform function on the
+						    mounted filesystem. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2464: FILE: fs/ntfs/file.c:2319:
+						    mounted filesystem. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2468: FILE: fs/ntfs/file.c:2323:
+	.sendfile	= generic_file_sendfile, /* Zero-copy data send with
+						    the data source being on

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2471: FILE: fs/ntfs/file.c:2326:
+						    data destination. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2473: FILE: fs/ntfs/file.c:2328:
+	/*.sendpage	= ,*/			 /* Zero-copy data send with
+						    the data destination being

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2476: FILE: fs/ntfs/file.c:2331:
+						    the data source. */

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000139828.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 11 errors, 195 warnings, 89 checks, 2401 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000139828.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
