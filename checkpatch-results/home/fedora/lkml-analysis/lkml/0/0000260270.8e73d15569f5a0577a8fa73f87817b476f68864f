WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#34: 
> the patch has been through a couple of iterations with Al, who suggested a

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#70: FILE: include/linux/fs.h:1544:
+extern int TA_open(struct file *, write_op_t *, size_t);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#70: FILE: include/linux/fs.h:1544:
+extern int TA_open(struct file *, write_op_t *, size_t);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'write_op_t *' should also have an identifier name
#70: FILE: include/linux/fs.h:1544:
+extern int TA_open(struct file *, write_op_t *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#70: FILE: include/linux/fs.h:1544:
+extern int TA_open(struct file *, write_op_t *, size_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#71: FILE: include/linux/fs.h:1545:
+extern ssize_t TA_write(struct file *, const char __user *, size_t, loff_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#71: FILE: include/linux/fs.h:1545:
+extern ssize_t TA_write(struct file *, const char __user *, size_t, loff_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char __user *' should also have an identifier name
#71: FILE: include/linux/fs.h:1545:
+extern ssize_t TA_write(struct file *, const char __user *, size_t, loff_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#71: FILE: include/linux/fs.h:1545:
+extern ssize_t TA_write(struct file *, const char __user *, size_t, loff_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t *' should also have an identifier name
#71: FILE: include/linux/fs.h:1545:
+extern ssize_t TA_write(struct file *, const char __user *, size_t, loff_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#72: FILE: include/linux/fs.h:1546:
+extern ssize_t TA_read(struct file *, char __user *, size_t, loff_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#72: FILE: include/linux/fs.h:1546:
+extern ssize_t TA_read(struct file *, char __user *, size_t, loff_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char __user *' should also have an identifier name
#72: FILE: include/linux/fs.h:1546:
+extern ssize_t TA_read(struct file *, char __user *, size_t, loff_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#72: FILE: include/linux/fs.h:1546:
+extern ssize_t TA_read(struct file *, char __user *, size_t, loff_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t *' should also have an identifier name
#72: FILE: include/linux/fs.h:1546:
+extern ssize_t TA_read(struct file *, char __user *, size_t, loff_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#73: FILE: include/linux/fs.h:1547:
+extern int TA_release(struct inode *, struct file *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#73: FILE: include/linux/fs.h:1547:
+extern int TA_release(struct inode *, struct file *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#73: FILE: include/linux/fs.h:1547:
+extern int TA_release(struct inode *, struct file *);

WARNING:LINE_SPACING: Missing a blank line after declarations
#87: FILE: fs/libfs.c:462:
+	struct TA_file *ta;
+	ta = kmalloc(sizeof(*ta), GFP_KERNEL);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#102: FILE: fs/libfs.c:477:
+ * possibly a read which collects the result - which is stored in a $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#132: FILE: fs/libfs.c:507:
+^I$

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#134: FILE: fs/libfs.c:509:
+	if (rv>0) {
 	      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#143: FILE: fs/libfs.c:518:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#148: FILE: fs/libfs.c:523:
+^I$

WARNING:LINE_SPACING: Missing a blank line after declarations
#162: FILE: fs/libfs.c:537:
+	char *data = NULL;
+	ta = file->private_data;

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#179: FILE: fs/libfs.c:570:
+EXPORT_SYMBOL(TA_write);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#180: FILE: fs/libfs.c:571:
+EXPORT_SYMBOL(TA_read);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#181: FILE: fs/libfs.c:572:
+EXPORT_SYMBOL(TA_release);

WARNING:ARRAY_SIZE: Prefer ARRAY_SIZE(write_op)
#278: FILE: fs/nfsd/nfsctl.c:85:
+	return TA_open(file, write_op, sizeof(write_op)/sizeof(write_op[0]));

The ARRAY_SIZE(foo) macro should be preferred over
sizeof(foo)/sizeof(foo[0]) for finding number of elements in an
array.

The macro is defined in include/linux/kernel.h::

  #define ARRAY_SIZE(x) (sizeof(x) / sizeof((x)[0]))

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#278: FILE: fs/nfsd/nfsctl.c:85:
+	return TA_open(file, write_op, sizeof(write_op)/sizeof(write_op[0]));
 	                                               ^

WARNING:ARRAY_SIZE: Prefer ARRAY_SIZE(write_op)
#396: FILE: security/selinux/selinuxfs.c:395:
+	return TA_open(file, write_op, sizeof(write_op)/sizeof(write_op[0]));

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#396: FILE: security/selinux/selinuxfs.c:395:
+	return TA_open(file, write_op, sizeof(write_op)/sizeof(write_op[0]));
 	                                               ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#413: FILE: security/selinux/selinuxfs.c:451:
+	length = scnprintf(buf, PAGE_SIZE, "%x %x %x %x %u",
 			  avd.allowed, avd.decided,

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000260270.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 4 errors, 21 warnings, 8 checks, 374 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000260270.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
