WARNING:TYPO_SPELLING: 'dependancy' may be misspelled - perhaps 'dependency'?
#39: 
	o [FEATURE] Remove dependancy on irmanager
	                   ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#110: FILE: net/irda/af_irda.c:1177:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#155: FILE: net/irda/af_irda.c:2402:
+        dev_add_pack(&irda_packet_type);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#155: FILE: net/irda/af_irda.c:2402:
+        dev_add_pack(&irda_packet_type);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#161: FILE: net/irda/af_irda.c:2408:
+ ^Iirda_device_init();  /* Called by init/main.c when non-modular */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#161: FILE: net/irda/af_irda.c:2408:
+ ^Iirda_device_init();  /* Called by init/main.c when non-modular */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#161: FILE: net/irda/af_irda.c:2408:
+ ^Iirda_device_init();  /* Called by init/main.c when non-modular */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#179: FILE: net/irda/af_irda.c:2423:
+        dev_remove_pack(&irda_packet_type);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#179: FILE: net/irda/af_irda.c:2423:
+        dev_remove_pack(&irda_packet_type);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#182: FILE: net/irda/af_irda.c:2425:
+        unregister_netdevice_notifier(&irda_dev_notifier);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#182: FILE: net/irda/af_irda.c:2425:
+        unregister_netdevice_notifier(&irda_dev_notifier);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#186: FILE: net/irda/af_irda.c:2429:
+^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#187: FILE: net/irda/af_irda.c:2430:
+        return;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#187: FILE: net/irda/af_irda.c:2430:
+        return;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#191: FILE: net/irda/af_irda.c:2434:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#191: FILE: net/irda/af_irda.c:2434:
+ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#193: FILE: net/irda/af_irda.c:2436:
+MODULE_DESCRIPTION("The Linux IrDA Protocol Subsystem"); $

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#204: FILE: net/irda/irlmp.c:77:
+	IRDA_DEBUG(0, __FUNCTION__ "()\n");

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#235: FILE: net/irda/irlmp.c:1353:
+	IRDA_DEBUG(0, __FUNCTION__ "()\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "irlmp"
#236: FILE: net/irda/irlmp.c:1354:
+	ASSERT(irlmp != NULL, return 0;);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:TRAILING_WHITESPACE: trailing whitespace
#237: FILE: net/irda/irlmp.c:1355:
+^I$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#814: FILE: net/irda/irsyms.c:1:
+/*********************************************************************

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#815: FILE: net/irda/irsyms.c:2:
+ *                $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#824: FILE: net/irda/irsyms.c:11:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#826: FILE: net/irda/irsyms.c:13:
+ *      $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#827: FILE: net/irda/irsyms.c:14:
+ *     This program is free software; you can redistribute it and/or $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#828: FILE: net/irda/irsyms.c:15:
+ *     modify it under the terms of the GNU General Public License as $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#829: FILE: net/irda/irsyms.c:16:
+ *     published by the Free Software Foundation; either version 2 of $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#831: FILE: net/irda/irsyms.c:18:
+ *  $

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#832: FILE: net/irda/irsyms.c:19:
+ *     Neither Dag Brattli nor University of Tromsø admit liability nor
                                                   ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#833: FILE: net/irda/irsyms.c:20:
+ *     provide warranty for any of this software. This material is $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#835: FILE: net/irda/irsyms.c:22:
+ *     $

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#865: FILE: net/irda/irsyms.c:52:
+extern void irda_proc_register(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#866: FILE: net/irda/irsyms.c:53:
+extern void irda_proc_unregister(void);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#867: FILE: net/irda/irsyms.c:54:
+extern int  irda_sysctl_register(void);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#868: FILE: net/irda/irsyms.c:55:
+extern void irda_sysctl_unregister(void);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#870: FILE: net/irda/irsyms.c:57:
+extern int irda_proto_init(void);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#871: FILE: net/irda/irsyms.c:58:
+extern void irda_proto_cleanup(void);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#873: FILE: net/irda/irsyms.c:60:
+extern int irda_device_init(void);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#874: FILE: net/irda/irsyms.c:61:
+extern int irlan_init(void);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#875: FILE: net/irda/irsyms.c:62:
+extern int irlan_client_init(void);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#876: FILE: net/irda/irsyms.c:63:
+extern int irlan_server_init(void);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#877: FILE: net/irda/irsyms.c:64:
+extern int ircomm_init(void);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#878: FILE: net/irda/irsyms.c:65:
+extern int ircomm_tty_init(void);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#879: FILE: net/irda/irsyms.c:66:
+extern int irlpt_client_init(void);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#880: FILE: net/irda/irsyms.c:67:
+extern int irlpt_server_init(void);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#890: FILE: net/irda/irsyms.c:77:
+EXPORT_SYMBOL(irttp_close_tsap);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#891: FILE: net/irda/irsyms.c:78:
+EXPORT_SYMBOL(irttp_connect_response);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#892: FILE: net/irda/irsyms.c:79:
+EXPORT_SYMBOL(irttp_data_request);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#893: FILE: net/irda/irsyms.c:80:
+EXPORT_SYMBOL(irttp_disconnect_request);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#894: FILE: net/irda/irsyms.c:81:
+EXPORT_SYMBOL(irttp_flow_request);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#895: FILE: net/irda/irsyms.c:82:
+EXPORT_SYMBOL(irttp_connect_request);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#896: FILE: net/irda/irsyms.c:83:
+EXPORT_SYMBOL(irttp_udata_request);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#897: FILE: net/irda/irsyms.c:84:
+EXPORT_SYMBOL(irttp_dup);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#904: FILE: net/irda/irsyms.c:91:
+EXPORT_SYMBOL(irda_lock);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#909: FILE: net/irda/irsyms.c:96:
+EXPORT_SYMBOL(irda_param_extract);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#910: FILE: net/irda/irsyms.c:97:
+EXPORT_SYMBOL(irda_param_extract_all);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#911: FILE: net/irda/irsyms.c:98:
+EXPORT_SYMBOL(irda_param_pack);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#912: FILE: net/irda/irsyms.c:99:
+EXPORT_SYMBOL(irda_param_unpack);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#916: FILE: net/irda/irsyms.c:103:
+EXPORT_SYMBOL(iriap_close);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#917: FILE: net/irda/irsyms.c:104:
+EXPORT_SYMBOL(iriap_getvaluebyclass_request);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#918: FILE: net/irda/irsyms.c:105:
+EXPORT_SYMBOL(irias_object_change_attribute);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#919: FILE: net/irda/irsyms.c:106:
+EXPORT_SYMBOL(irias_add_integer_attrib);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#920: FILE: net/irda/irsyms.c:107:
+EXPORT_SYMBOL(irias_add_octseq_attrib);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#921: FILE: net/irda/irsyms.c:108:
+EXPORT_SYMBOL(irias_add_string_attrib);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#922: FILE: net/irda/irsyms.c:109:
+EXPORT_SYMBOL(irias_insert_object);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#923: FILE: net/irda/irsyms.c:110:
+EXPORT_SYMBOL(irias_new_object);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#924: FILE: net/irda/irsyms.c:111:
+EXPORT_SYMBOL(irias_delete_object);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#925: FILE: net/irda/irsyms.c:112:
+EXPORT_SYMBOL(irias_delete_value);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#926: FILE: net/irda/irsyms.c:113:
+EXPORT_SYMBOL(irias_find_object);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#927: FILE: net/irda/irsyms.c:114:
+EXPORT_SYMBOL(irias_find_attrib);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#928: FILE: net/irda/irsyms.c:115:
+EXPORT_SYMBOL(irias_new_integer_value);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#929: FILE: net/irda/irsyms.c:116:
+EXPORT_SYMBOL(irias_new_string_value);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#930: FILE: net/irda/irsyms.c:117:
+EXPORT_SYMBOL(irias_new_octseq_value);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#934: FILE: net/irda/irsyms.c:121:
+EXPORT_SYMBOL(irlmp_get_discoveries);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#935: FILE: net/irda/irsyms.c:122:
+EXPORT_SYMBOL(sysctl_discovery_timeout);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#936: FILE: net/irda/irsyms.c:123:
+EXPORT_SYMBOL(irlmp_register_client);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#937: FILE: net/irda/irsyms.c:124:
+EXPORT_SYMBOL(irlmp_unregister_client);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#938: FILE: net/irda/irsyms.c:125:
+EXPORT_SYMBOL(irlmp_update_client);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#939: FILE: net/irda/irsyms.c:126:
+EXPORT_SYMBOL(irlmp_register_service);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#940: FILE: net/irda/irsyms.c:127:
+EXPORT_SYMBOL(irlmp_unregister_service);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#941: FILE: net/irda/irsyms.c:128:
+EXPORT_SYMBOL(irlmp_service_to_hint);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#942: FILE: net/irda/irsyms.c:129:
+EXPORT_SYMBOL(irlmp_data_request);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#943: FILE: net/irda/irsyms.c:130:
+EXPORT_SYMBOL(irlmp_open_lsap);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#944: FILE: net/irda/irsyms.c:131:
+EXPORT_SYMBOL(irlmp_close_lsap);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#945: FILE: net/irda/irsyms.c:132:
+EXPORT_SYMBOL(irlmp_connect_request);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#946: FILE: net/irda/irsyms.c:133:
+EXPORT_SYMBOL(irlmp_connect_response);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#947: FILE: net/irda/irsyms.c:134:
+EXPORT_SYMBOL(irlmp_disconnect_request);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#948: FILE: net/irda/irsyms.c:135:
+EXPORT_SYMBOL(irlmp_get_daddr);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#949: FILE: net/irda/irsyms.c:136:
+EXPORT_SYMBOL(irlmp_get_saddr);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#950: FILE: net/irda/irsyms.c:137:
+EXPORT_SYMBOL(irlmp_dup);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#951: FILE: net/irda/irsyms.c:138:
+EXPORT_SYMBOL(lmp_reasons);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#955: FILE: net/irda/irsyms.c:142:
+EXPORT_SYMBOL(hashbin_new);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#956: FILE: net/irda/irsyms.c:143:
+EXPORT_SYMBOL(hashbin_insert);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#957: FILE: net/irda/irsyms.c:144:
+EXPORT_SYMBOL(hashbin_delete);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#958: FILE: net/irda/irsyms.c:145:
+EXPORT_SYMBOL(hashbin_remove);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#959: FILE: net/irda/irsyms.c:146:
+EXPORT_SYMBOL(hashbin_remove_this);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#960: FILE: net/irda/irsyms.c:147:
+EXPORT_SYMBOL(hashbin_get_next);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#961: FILE: net/irda/irsyms.c:148:
+EXPORT_SYMBOL(hashbin_get_first);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#965: FILE: net/irda/irsyms.c:152:
+EXPORT_SYMBOL(irlap_close);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#968: FILE: net/irda/irsyms.c:155:
+EXPORT_SYMBOL(irda_register_compressor);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#971: FILE: net/irda/irsyms.c:158:
+EXPORT_SYMBOL(irda_qos_bits_to_value);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#972: FILE: net/irda/irsyms.c:159:
+EXPORT_SYMBOL(irda_device_setup);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#973: FILE: net/irda/irsyms.c:160:
+EXPORT_SYMBOL(irda_device_set_media_busy);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#974: FILE: net/irda/irsyms.c:161:
+EXPORT_SYMBOL(irda_device_txqueue_empty);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#976: FILE: net/irda/irsyms.c:163:
+EXPORT_SYMBOL(irda_device_dongle_init);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#977: FILE: net/irda/irsyms.c:164:
+EXPORT_SYMBOL(irda_device_dongle_cleanup);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#978: FILE: net/irda/irsyms.c:165:
+EXPORT_SYMBOL(irda_device_register_dongle);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#979: FILE: net/irda/irsyms.c:166:
+EXPORT_SYMBOL(irda_device_unregister_dongle);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#980: FILE: net/irda/irsyms.c:167:
+EXPORT_SYMBOL(irda_task_execute);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#981: FILE: net/irda/irsyms.c:168:
+EXPORT_SYMBOL(irda_task_kick);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#982: FILE: net/irda/irsyms.c:169:
+EXPORT_SYMBOL(irda_task_next_state);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#983: FILE: net/irda/irsyms.c:170:
+EXPORT_SYMBOL(irda_task_delete);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#985: FILE: net/irda/irsyms.c:172:
+EXPORT_SYMBOL(async_wrap_skb);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#986: FILE: net/irda/irsyms.c:173:
+EXPORT_SYMBOL(async_unwrap_char);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#987: FILE: net/irda/irsyms.c:174:
+EXPORT_SYMBOL(irda_start_timer);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#988: FILE: net/irda/irsyms.c:175:
+EXPORT_SYMBOL(setup_dma);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#989: FILE: net/irda/irsyms.c:176:
+EXPORT_SYMBOL(infrared_mode);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#993: FILE: net/irda/irsyms.c:180:
+EXPORT_SYMBOL(irtty_register_dongle);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#994: FILE: net/irda/irsyms.c:181:
+EXPORT_SYMBOL(irtty_unregister_dongle);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#995: FILE: net/irda/irsyms.c:182:
+EXPORT_SYMBOL(irtty_set_packet_mode);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1000: FILE: net/irda/irsyms.c:187:
+	IRDA_DEBUG(0, __FUNCTION__ "()\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#1002: FILE: net/irda/irsyms.c:189:
+ ^Iirlmp_init();$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1002: FILE: net/irda/irsyms.c:189:
+ ^Iirlmp_init();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1002: FILE: net/irda/irsyms.c:189:
+ ^Iirlmp_init();$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1004: FILE: net/irda/irsyms.c:191:
+^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1006: FILE: net/irda/irsyms.c:193:
+ ^Iirttp_init();$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1006: FILE: net/irda/irsyms.c:193:
+ ^Iirttp_init();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1006: FILE: net/irda/irsyms.c:193:
+ ^Iirttp_init();$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1007: FILE: net/irda/irsyms.c:194:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1014: FILE: net/irda/irsyms.c:201:
+^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1015: FILE: net/irda/irsyms.c:202:
+^I * Initialize modules that got compiled into the kernel $

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#1015: FILE: net/irda/irsyms.c:202:
+	/* 
+	 * Initialize modules that got compiled into the kernel 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1038: FILE: net/irda/irsyms.c:225:
+#endif^I$

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#1056: FILE: net/irda/irsyms.c:243:
+/*
+ * Function irda_unlock (lock)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1061: FILE: net/irda/irsyms.c:248:
+inline int irda_unlock(int *lock) $

CHECK:SPACING: No space is necessary after a cast
#1063: FILE: net/irda/irsyms.c:250:
+	if (!test_and_clear_bit(0, (void *) lock))  {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1064: FILE: net/irda/irsyms.c:251:
+		printk("Trying to unlock already unlocked variable!\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#1066: FILE: net/irda/irsyms.c:253:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1066: FILE: net/irda/irsyms.c:253:
+        }$

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#1071: FILE: net/irda/irsyms.c:258:
+/*
+ * Function irda_notify_init (notify)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000566795.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 28 errors, 110 warnings, 3 checks, 459 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000566795.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
