WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#22: 
adopting a new locking interface that allows the add_rmaps to be batched in 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#36: 
#!/bin/sh

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#83: FILE: include/linux/mm.h:135:
+	struct pte_chain * next;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#84: FILE: include/linux/mm.h:136:
+	pte_t * ptep;

CHECK:BIT_MACRO: Prefer using the BIT macro
#97: FILE: include/linux/mm.h:329:
+#define num_rmap_locks (1 << 8)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

WARNING:LINE_SPACING: Missing a blank line after declarations
#124: FILE: include/linux/mm.h:343:
+	unsigned long index = page->index;
+	while (1) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#126: FILE: include/linux/mm.h:345:
+		spinlock_t *lock = rmap_locks + rmap_locknum(index);
+		spin_lock(lock);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#130: FILE: include/linux/mm.h:349:
+^I}^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#136: FILE: include/linux/mm.h:355:
+	spinlock_t *lock = lock_rmap(page);
+	page->index = index;

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#142: FILE: include/linux/mm.h:361:
+void add_rmap_nolock(struct page* page, pte_t *ptep, struct pte_chain *pte_chain);

WARNING:LONG_LINE: line length of 120 exceeds 100 columns
#152: FILE: include/linux/mm.h:535:
+extern int copy_page_range(struct mm_struct *dst, struct mm_struct *src, struct vm_area_struct *vma, unsigned *locknum);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#152: FILE: include/linux/mm.h:535:
+extern int copy_page_range(struct mm_struct *dst, struct mm_struct *src, struct vm_area_struct *vma, unsigned *locknum);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#152: FILE: include/linux/mm.h:535:
+extern int copy_page_range(struct mm_struct *dst, struct mm_struct *src, struct vm_area_struct *vma, unsigned *locknum);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#162: FILE: kernel/fork.c:135:
+	unsigned rmap_locknum = -1;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#216: FILE: mm/memory.c:182:
+			struct vm_area_struct *vma, unsigned *unused_locknum)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#231: FILE: mm/memory.c:219:
+			unsigned last_locknum = -1;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#242: FILE: mm/memory.c:258:
+					unsigned more = 16;

WARNING:LINE_SPACING: Missing a blank line after declarations
#243: FILE: mm/memory.c:259:
+					unsigned more = 16;
+					if (last_locknum != -1) {

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#248: FILE: mm/memory.c:264:
+						struct pte_chain *new = pte_chain_alloc(pte_chain_zone);

WARNING:LINE_SPACING: Missing a blank line after declarations
#249: FILE: mm/memory.c:265:
+						struct pte_chain *new = pte_chain_alloc(pte_chain_zone);
+						new->next = local_pte_chain;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#255: FILE: mm/memory.c:271:
+					if (last_locknum != -1) {
+
+						spin_unlock(rmap_lock);
+					}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#256: FILE: mm/memory.c:272:
+					if (last_locknum != -1) {
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#300: FILE: mm/memory.c:324:
+		struct pte_chain *next = local_pte_chain->next;
+		pte_chain_push(pte_chain_zone, local_pte_chain);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#318: FILE: mm/page_alloc.c:216:
+			static unsigned foo_page_allocs;

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#342: FILE: mm/rmap.c:47:
+spinlock_t rmap_locks[num_rmap_locks];

WARNING:LINE_SPACING: Missing a blank line after declarations
#351: FILE: mm/rmap.c:56:
+	int i = 0;
+	while (i < num_rmap_locks)

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#367: FILE: mm/rmap.c:96:
+	spinlock_t *rmap_lock;

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#402: FILE: mm/rmap.c:133:
+void add_rmap_nolock(struct page* page, pte_t *ptep, struct pte_chain *pte_chain)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#406: FILE: mm/rmap.c:137:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#408: FILE: mm/rmap.c:139:
+		BUG();

WARNING:TRAILING_SEMICOLON: trailing semicolon indicates no statements, indent implies otherwise
#409: FILE: mm/rmap.c:140:
+	if (!ptep_to_mm(ptep));
+		BUG();

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#409: FILE: mm/rmap.c:140:
+	if (!ptep_to_mm(ptep));

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#410: FILE: mm/rmap.c:141:
+		BUG();

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#418: FILE: mm/rmap.c:149:
+		struct pte_chain * pc;

WARNING:LINE_SPACING: Missing a blank line after declarations
#419: FILE: mm/rmap.c:150:
+		struct pte_chain * pc;
+		for (pc = page->pte_chain; pc; pc = pc->next) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#421: FILE: mm/rmap.c:152:
+				BUG();

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#437: FILE: mm/rmap.c:177:
+	spinlock_t *rmap_lock;

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#484: FILE: mm/swap.c:81:
+	spinlock_t *rmap_lock;

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#513: FILE: mm/vmscan.c:84:
+	spinlock_t *rmap_lock;

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#555: FILE: mm/vmscan.c:217:
+	spinlock_t *rmap_lock;

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#647: FILE: mm/vmscan.c:481:
+	spinlock_t *rmap_lock;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000442387.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 7 errors, 24 warnings, 10 checks, 544 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000442387.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
