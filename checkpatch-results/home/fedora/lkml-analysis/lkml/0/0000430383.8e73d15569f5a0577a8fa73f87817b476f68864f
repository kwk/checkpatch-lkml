WARNING:TYPO_SPELLING: 'Patchs' may be misspelled - perhaps 'Patches'?
#33: 
and Hien Nguyen), and Mike Sullivan (all from IBM).  Patchs 1-4 are in 
                                                     ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#136: 
recid=2163, size=33, format=BINARY, event_type=0x8ab218f4, facility=disk_dummy, 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#166: 
#define DISK_ON_FIRE "Disk on fire"

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#235: FILE: drivers/net/eepro100.c:330:
+		problem(LOG_ALERT, "eepro100: wait_for_cmd_done timeout!",
+				detail(ioaddr, "%lx", cmd_ioaddr));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#269: FILE: drivers/net/eepro100.c:612:
+		pci_problem(LOG_ERR, pdev,
+					"eepro100: cannot remap MMIO region %lx @ %lx",

WARNING:SPLIT_STRING: quoted string split across lines
#297: FILE: drivers/net/eepro100.c:710:
+			net_pci_problem(LOG_WARNING, dev, pdev, "Invalid EEPROM checksum, "
+				   "check settings before activating this device!",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#311: FILE: drivers/net/eepro100.c:793:
+^I^I^Inet_pci_problem(LOG_ERR, dev, pdev, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#312: FILE: drivers/net/eepro100.c:794:
+			net_pci_problem(LOG_ERR, dev, pdev, 
+				"Self test failed.Failure to initialize the i82557. Verify that the card is a bus-master capable slot.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#349: FILE: drivers/net/eepro100.c:1382:
+	net_pci_problem(LOG_WARNING, dev, sp->pdev,  "Transmit timed out\n",
+		detail(scbstatus, "%4.4x", status),

CHECK:CAMELCASE: Avoid CamelCase: <SCBCmd>
#350: FILE: drivers/net/eepro100.c:1383:
+		detail(scbcmd, "%4.4x", inw(ioaddr + SCBCmd)),

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#374: FILE: drivers/net/eepro100.c:1542:
+		net_pci_problem(LOG_ERR, dev, sp->pdev,  "out-of-sync dirty pointer\n",
+			detail(dirty_tx, "%d", dirty_tx),

ERROR:SPACING: space required after that ',' (ctx:VxV)
#385: FILE: drivers/net/eepro100.c:1576:
+		net_problem(LOG_ERR, dev,"speedo_interrupt() for unknown device\n",
 		                        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#386: FILE: drivers/net/eepro100.c:1577:
+		net_problem(LOG_ERR, dev,"speedo_interrupt() for unknown device\n",
+			detail(irq, "%d", irq));

WARNING:LONG_LINE_STRING: line length of 109 exceeds 100 columns
#396: FILE: drivers/net/eepro100.c:1588:
+		net_pci_problem(LOG_ERR, dev, sp->pdev, "SMP simultaneous entry of an interrupt handler.\n");

A string starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#407: FILE: drivers/net/eepro100.c:1654:
+			net_pci_problem(LOG_ERR, dev, sp->pdev, "Too much work at interrupt\n",
+				detail(status, "%4.4x", status));

WARNING:LONG_LINE_STRING: line length of 102 exceeds 100 columns
#417: FILE: drivers/net/eepro100.c:1725:
+				net_pci_problem(LOG_WARNING, dev, sp->pdev,  "can't fill rx buffer\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#418: FILE: drivers/net/eepro100.c:1726:
+				net_pci_problem(LOG_WARNING, dev, sp->pdev,  "can't fill rx buffer\n",
+					detail(force, "%d", force));

WARNING:LONG_LINE_STRING: line length of 114 exceeds 100 columns
#428: FILE: drivers/net/eepro100.c:1806:
+				net_pci_problem(LOG_ERR, dev, sp->pdev,  "Ethernet frame overran the Rx buffer\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#429: FILE: drivers/net/eepro100.c:1807:
+				net_pci_problem(LOG_ERR, dev, sp->pdev,  "Ethernet frame overran the Rx buffer\n",
+					detail(status, "%8.8x", status));

WARNING:LONG_LINE_STRING: line length of 107 exceeds 100 columns
#436: FILE: drivers/net/eepro100.c:1811:
+				net_pci_problem(LOG_ERR, dev, sp->pdev, "Anomalous event in speedo_rx()\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#437: FILE: drivers/net/eepro100.c:1812:
+				net_pci_problem(LOG_ERR, dev, sp->pdev, "Anomalous event in speedo_rx()\n",
+					detail(status, "%8.8x", status));

WARNING:LONG_LINE_STRING: line length of 119 exceeds 100 columns
#447: FILE: drivers/net/eepro100.c:1839:
+					net_pci_problem(LOG_ERR, dev, sp->pdev, "Inconsistent Rx descriptor chain.\n");

WARNING:LONG_LINE_STRING: line length of 104 exceeds 100 columns
#457: FILE: drivers/net/eepro100.c:2204:
+			net_pci_problem(LOG_ERR, dev, sp->pdev,  "Failed to allocate a setup frame.\n");

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#464: FILE: include/linux/net_problem.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#480: FILE: include/linux/net_problem.h:17:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#481: FILE: include/linux/net_problem.h:18:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

WARNING:REPEATED_WORD: Possible repeated word: 'the'
#506: FILE: include/linux/net_problem.h:43:
+ * based on the the value of the parameters is not allowed :(

ERROR:TRAILING_WHITESPACE: trailing whitespace
#507: FILE: include/linux/net_problem.h:44:
+ * The alternative is to have the dd writer use different macros $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#511: FILE: include/linux/net_problem.h:48:
+ * a bus specific type & member included, invoking $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#518: FILE: include/linux/net_problem.h:55:
+ * for byte[] fmt objects exists          */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#519: FILE: include/linux/net_problem.h:56:
+#define net_detail(dev) \
+	detail(net_name, "%s", (dev)->name), \
+	array_detail(net_mac, "%02hhx", ":", (dev)->dev_addr, 8), \
+	detail(net_addr, "%p", (dev))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'dev' - possible side-effects?
#519: FILE: include/linux/net_problem.h:56:
+#define net_detail(dev) \
+	detail(net_name, "%s", (dev)->name), \
+	array_detail(net_mac, "%02hhx", ":", (dev)->dev_addr, 8), \
+	detail(net_addr, "%p", (dev))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#525: FILE: include/linux/net_problem.h:62:
+ * problem() without net_detail() if dev is NULL, but one problem() $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#527: FILE: include/linux/net_problem.h:64:
+ * to warn the developer if they have used this macro without $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#528: FILE: include/linux/net_problem.h:65:
+ * valid args */

ERROR:SPACING: space required after that ',' (ctx:VxV)
#529: FILE: include/linux/net_problem.h:66:
+#define net_problem(sev, dev, string,...) \
                                     ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'dev' - possible side-effects?
#529: FILE: include/linux/net_problem.h:66:
+#define net_problem(sev, dev, string,...) \
+do { \
+  if (dev)     \
+    problem(sev, string, net_detail((struct net_device*)dev), ## __VA_ARGS__); \
+  else  \
+    printk("net_problem. Invalid usage struct net_device * is NULL\n"); \
+} while (0)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (0, 2)
#530: FILE: include/linux/net_problem.h:67:
+do { \
+  if (dev)     \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#531: FILE: include/linux/net_problem.h:68:
+  if (dev)     \$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#531: FILE: include/linux/net_problem.h:68:
+  if (dev)     \
+    problem(sev, string, net_detail((struct net_device*)dev), ## __VA_ARGS__); \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#532: FILE: include/linux/net_problem.h:69:
+    problem(sev, string, net_detail((struct net_device*)dev), ## __VA_ARGS__); \$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#532: FILE: include/linux/net_problem.h:69:
+    problem(sev, string, net_detail((struct net_device*)dev), ## __VA_ARGS__); \

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#533: FILE: include/linux/net_problem.h:70:
+  else  \$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#533: FILE: include/linux/net_problem.h:70:
+  else  \
+    printk("net_problem. Invalid usage struct net_device * is NULL\n"); \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#534: FILE: include/linux/net_problem.h:71:
+    printk("net_problem. Invalid usage struct net_device * is NULL\n"); \$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#534: FILE: include/linux/net_problem.h:71:
+    printk("net_problem. Invalid usage struct net_device * is NULL\n"); \

CHECK:LINE_SPACING: Please don't use multiple blank lines
#537: FILE: include/linux/net_problem.h:74:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#539: FILE: include/linux/net_problem.h:76:
+ * value of dev and pdev. But one problem() $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#541: FILE: include/linux/net_problem.h:78:
+ * to warn the developer if they have used this macro without $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#542: FILE: include/linux/net_problem.h:79:
+ * valid args */

ERROR:SPACING: space required after that ',' (ctx:VxV)
#544: FILE: include/linux/net_problem.h:81:
+#define net_pci_problem(sev, dev, pdev, string,...) \
                                               ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'dev' - possible side-effects?
#544: FILE: include/linux/net_problem.h:81:
+#define net_pci_problem(sev, dev, pdev, string,...) \
+do { \
+  if ( (dev) && (pdev) )     \
+    problem(sev, string, net_detail((struct net_device*)dev), pci_detail((struct pci_dev *)pdev), ## __VA_ARGS__); \
+  else { \
+    if (!dev)             \
+      printk("net_problem. Invalid usage struct net_device * is NULL\n"); \
+    if (!pdev)             \
+      printk("net_problem. Invalid usage struct pci_dev * is NULL\n"); \
+  } \
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pdev' - possible side-effects?
#544: FILE: include/linux/net_problem.h:81:
+#define net_pci_problem(sev, dev, pdev, string,...) \
+do { \
+  if ( (dev) && (pdev) )     \
+    problem(sev, string, net_detail((struct net_device*)dev), pci_detail((struct pci_dev *)pdev), ## __VA_ARGS__); \
+  else { \
+    if (!dev)             \
+      printk("net_problem. Invalid usage struct net_device * is NULL\n"); \
+    if (!pdev)             \
+      printk("net_problem. Invalid usage struct pci_dev * is NULL\n"); \
+  } \
+} while (0)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (0, 2)
#545: FILE: include/linux/net_problem.h:82:
+do { \
+  if ( (dev) && (pdev) )     \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#546: FILE: include/linux/net_problem.h:83:
+  if ( (dev) && (pdev) )     \$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#546: FILE: include/linux/net_problem.h:83:
+  if ( (dev) && (pdev) )     \
+    problem(sev, string, net_detail((struct net_device*)dev), pci_detail((struct pci_dev *)pdev), ## __VA_ARGS__); \

ERROR:SPACING: space prohibited after that open parenthesis '('
#546: FILE: include/linux/net_problem.h:83:
+  if ( (dev) && (pdev) )     \

ERROR:SPACING: space prohibited before that close parenthesis ')'
#546: FILE: include/linux/net_problem.h:83:
+  if ( (dev) && (pdev) )     \

WARNING:LONG_LINE: line length of 116 exceeds 100 columns
#547: FILE: include/linux/net_problem.h:84:
+    problem(sev, string, net_detail((struct net_device*)dev), pci_detail((struct pci_dev *)pdev), ## __VA_ARGS__); \

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#547: FILE: include/linux/net_problem.h:84:
+    problem(sev, string, net_detail((struct net_device*)dev), pci_detail((struct pci_dev *)pdev), ## __VA_ARGS__); \$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#547: FILE: include/linux/net_problem.h:84:
+    problem(sev, string, net_detail((struct net_device*)dev), pci_detail((struct pci_dev *)pdev), ## __VA_ARGS__); \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#548: FILE: include/linux/net_problem.h:85:
+  else { \$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#548: FILE: include/linux/net_problem.h:85:
+  else { \
+    if (!dev)             \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#549: FILE: include/linux/net_problem.h:86:
+    if (!dev)             \$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 6)
#549: FILE: include/linux/net_problem.h:86:
+    if (!dev)             \
+      printk("net_problem. Invalid usage struct net_device * is NULL\n"); \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#550: FILE: include/linux/net_problem.h:87:
+      printk("net_problem. Invalid usage struct net_device * is NULL\n"); \$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#550: FILE: include/linux/net_problem.h:87:
+      printk("net_problem. Invalid usage struct net_device * is NULL\n"); \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#551: FILE: include/linux/net_problem.h:88:
+    if (!pdev)             \$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 6)
#551: FILE: include/linux/net_problem.h:88:
+    if (!pdev)             \
+      printk("net_problem. Invalid usage struct pci_dev * is NULL\n"); \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#552: FILE: include/linux/net_problem.h:89:
+      printk("net_problem. Invalid usage struct pci_dev * is NULL\n"); \$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#552: FILE: include/linux/net_problem.h:89:
+      printk("net_problem. Invalid usage struct pci_dev * is NULL\n"); \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#553: FILE: include/linux/net_problem.h:90:
+  } \$

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#556: FILE: include/linux/net_problem.h:93:
+static inline void net_introduce(struct net_device *dev) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#557: FILE: include/linux/net_problem.h:94:
+  if (dev) introduce(__stringify(KBUILD_MODNAME) " introduces network device: ", dev, net_detail(dev));

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#557: FILE: include/linux/net_problem.h:94:
+  if (dev) introduce(__stringify(KBUILD_MODNAME) " introduces network device: ", dev, net_detail(dev));$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#557: FILE: include/linux/net_problem.h:94:
+  if (dev) introduce(__stringify(KBUILD_MODNAME) " introduces network device: ", dev, net_detail(dev));

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#564: FILE: include/linux/pci_problem.h:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#580: FILE: include/linux/pci_problem.h:17:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#581: FILE: include/linux/pci_problem.h:18:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#595: FILE: include/linux/pci_problem.h:32:
+#define pci_detail(pdev) \
+	detail(pci_name, "%s", (pdev)->name), \
+	detail(pci_slot, "%s", (pdev)->slot_name), \
+	detail(pci_vendorid, "%x", (pdev)->vendor), \
+	detail(pci_deviceid, "%x", (pdev)->device), \
+	detail(pci_dev_addr, "%p", (pdev))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pdev' - possible side-effects?
#595: FILE: include/linux/pci_problem.h:32:
+#define pci_detail(pdev) \
+	detail(pci_name, "%s", (pdev)->name), \
+	detail(pci_slot, "%s", (pdev)->slot_name), \
+	detail(pci_vendorid, "%x", (pdev)->vendor), \
+	detail(pci_deviceid, "%x", (pdev)->device), \
+	detail(pci_dev_addr, "%p", (pdev))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#602: FILE: include/linux/pci_problem.h:39:
+#define pci_problem(sev, pdev, string,...) \
                                      ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pdev' - possible side-effects?
#602: FILE: include/linux/pci_problem.h:39:
+#define pci_problem(sev, pdev, string,...) \
+do { \
+  if (pdev)  \
+    problem(sev, string, pci_detail((struct pci_dev *)pdev), ## __VA_ARGS__); \
+  else       \
+    printk("pci_problem. Invalid usage struct pci_dev * is NULL\n"); \
+} while (0)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (0, 2)
#603: FILE: include/linux/pci_problem.h:40:
+do { \
+  if (pdev)  \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#604: FILE: include/linux/pci_problem.h:41:
+  if (pdev)  \$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#604: FILE: include/linux/pci_problem.h:41:
+  if (pdev)  \
+    problem(sev, string, pci_detail((struct pci_dev *)pdev), ## __VA_ARGS__); \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#605: FILE: include/linux/pci_problem.h:42:
+    problem(sev, string, pci_detail((struct pci_dev *)pdev), ## __VA_ARGS__); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#606: FILE: include/linux/pci_problem.h:43:
+  else       \$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#606: FILE: include/linux/pci_problem.h:43:
+  else       \
+    printk("pci_problem. Invalid usage struct pci_dev * is NULL\n"); \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#607: FILE: include/linux/pci_problem.h:44:
+    printk("pci_problem. Invalid usage struct pci_dev * is NULL\n"); \$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#607: FILE: include/linux/pci_problem.h:44:
+    printk("pci_problem. Invalid usage struct pci_dev * is NULL\n"); \

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#610: FILE: include/linux/pci_problem.h:47:
+static inline void pci_introduce(struct pci_dev *pdev) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#614: FILE: include/linux/pci_problem.h:51:
+
+

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000430383.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 24 errors, 50 warnings, 19 checks, 369 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000430383.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
