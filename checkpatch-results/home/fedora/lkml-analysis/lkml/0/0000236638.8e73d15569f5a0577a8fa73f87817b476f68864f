WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#86: 
diff -ru linux-2.6.10-rc1/include/asm-generic/div64.h linux-2.6.10-rc1-nsz/include/asm-generic/div64.h

ERROR:SPACING: space required after that ',' (ctx:VxV)
#99: FILE: include/asm-generic/div64.h:25:
+# define do_div(n,base) ({						\
                  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#99: FILE: include/asm-generic/div64.h:25:
+# define do_div(n,base) ({						\
+	uint32_t __rem;							\
+	if (__builtin_constant_p(base) && !((base) & ((base)-1))) {	\
+		__rem = ((uint64_t)(n)) % (base);			\
+		(n) = ((uint64_t)(n)) / (base);				\
+	} else {							\
+		uint32_t __base = (base);				\
+		__rem = ((uint64_t)(n)) % __base;			\
+		(n) = ((uint64_t)(n)) / __base;				\
+	}								\
+	__rem;								\
  })

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'base' - possible side-effects?
#99: FILE: include/asm-generic/div64.h:25:
+# define do_div(n,base) ({						\
+	uint32_t __rem;							\
+	if (__builtin_constant_p(base) && !((base) & ((base)-1))) {	\
+		__rem = ((uint64_t)(n)) % (base);			\
+		(n) = ((uint64_t)(n)) / (base);				\
+	} else {							\
+		uint32_t __base = (base);				\
+		__rem = ((uint64_t)(n)) % __base;			\
+		(n) = ((uint64_t)(n)) / __base;				\
+	}								\
+	__rem;								\
  })

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#100: FILE: include/asm-generic/div64.h:26:
+	uint32_t __rem;							\

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#101: FILE: include/asm-generic/div64.h:27:
+	if (__builtin_constant_p(base) && !((base) & ((base)-1))) {	\
 	                                                    ^

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#105: FILE: include/asm-generic/div64.h:31:
+		uint32_t __base = (base);				\

ERROR:SPACING: space required after that ',' (ctx:VxV)
#127: FILE: include/asm-generic/div64.h:45:
+# define do_div(n,base) ({						\
                  ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#127: FILE: include/asm-generic/div64.h:45:
+# define do_div(n,base) ({						\
+	uint32_t __rem;						 	\
+	(void)(((typeof((n)) *)0) == ((uint64_t *)0));			\
+	if (__builtin_constant_p(base) && !((base) & ((base)-1))) {     \
+		__rem = ((uint64_t)(n)) % (base);			\
+		(n) = ((uint64_t)(n)) / (base);				\
+	} else {							\
+		uint32_t __base = (base);				\
+		if (likely(((n) >> 32) == 0)) {				\
+			__rem = (uint32_t)(n) % __base;			\
+			(n) = (uint32_t)(n) / __base;			\
+		} else 							\
+			__rem = __div64_32(&(n), __base);		\
+	}								\
+	__rem;								\
  })

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'base' - possible side-effects?
#127: FILE: include/asm-generic/div64.h:45:
+# define do_div(n,base) ({						\
+	uint32_t __rem;						 	\
+	(void)(((typeof((n)) *)0) == ((uint64_t *)0));			\
+	if (__builtin_constant_p(base) && !((base) & ((base)-1))) {     \
+		__rem = ((uint64_t)(n)) % (base);			\
+		(n) = ((uint64_t)(n)) / (base);				\
+	} else {							\
+		uint32_t __base = (base);				\
+		if (likely(((n) >> 32) == 0)) {				\
+			__rem = (uint32_t)(n) % __base;			\
+			(n) = (uint32_t)(n) / __base;			\
+		} else 							\
+			__rem = __div64_32(&(n), __base);		\
+	}								\
+	__rem;								\
  })

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#128: FILE: include/asm-generic/div64.h:46:
+^Iuint32_t __rem;^I^I^I^I^I^I ^I\$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#128: FILE: include/asm-generic/div64.h:46:
+	uint32_t __rem;						 	\

CHECK:SPACING: No space is necessary after a cast
#129: FILE: include/asm-generic/div64.h:47:
+	(void)(((typeof((n)) *)0) == ((uint64_t *)0));			\

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#130: FILE: include/asm-generic/div64.h:48:
+	if (__builtin_constant_p(base) && !((base) & ((base)-1))) {     \
 	                                                    ^

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#134: FILE: include/asm-generic/div64.h:52:
+		uint32_t __base = (base);				\

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#138: FILE: include/asm-generic/div64.h:56:
+^I^I} else ^I^I^I^I^I^I^I\$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#160: FILE: include/asm-i386/div64.h:18:
+	if (__builtin_constant_p(base) && !((base) & ((base)-1))) { \
 	                                                    ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#166: FILE: include/asm-i386/div64.h:24:
+		asm("":"=a" (__low), "=d" (__high):"A" (n)); \
 		      ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#166: FILE: include/asm-i386/div64.h:24:
+		asm("":"=a" (__low), "=d" (__high):"A" (n)); \
 		                                  ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#172: FILE: include/asm-i386/div64.h:30:
+		asm("divl %2":	"=a" (__low), "=d" (__mod) : \
 		             ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#174: FILE: include/asm-i386/div64.h:32:
+		asm("":"=A" (n):"a" (__low),"d" (__high)); \
 		      ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#174: FILE: include/asm-i386/div64.h:32:
+		asm("":"=A" (n):"a" (__low),"d" (__high)); \
 		               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#174: FILE: include/asm-i386/div64.h:32:
+		asm("":"=A" (n):"a" (__low),"d" (__high)); \
 		                           ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000236638.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 4 errors, 3 warnings, 16 checks, 86 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000236638.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
