WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#79: FILE: drivers/i2c/chips/fscpos.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#80: FILE: drivers/i2c/chips/fscpos.c:2:
+/*
+	fscpos.c - Kernel module for hardware monitoring with FSC Poseidon chips

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#94: FILE: drivers/i2c/chips/fscpos.c:16:
+^Ialong with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#95: FILE: drivers/i2c/chips/fscpos.c:17:
+^IFoundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#99: FILE: drivers/i2c/chips/fscpos.c:21:
+/*
+	fujitsu siemens poseidon chip,

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#196: FILE: drivers/i2c/chips/fscpos.c:118:
+^Ichar valid; ^I^I/* 0 until following fields are valid */$

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#237: FILE: drivers/i2c/chips/fscpos.c:159:
+	unsigned long v = simple_strtoul(buf, NULL, 10);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:LINE_SPACING: Missing a blank line after declarations
#238: FILE: drivers/i2c/chips/fscpos.c:160:
+	unsigned long v = simple_strtoul(buf, NULL, 10);
+	if (v != 1) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPLIT_STRING: quoted string split across lines
#240: FILE: drivers/i2c/chips/fscpos.c:162:
+		dev_err(&client->dev, "temp_reset value %ld not supported. "
+					"Use 1 to reset the alarm!\n", v);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#245: FILE: drivers/i2c/chips/fscpos.c:167:
+	dev_info(&client->dev, "You used the temp_reset feature which has not "
+				"been proplerly tested. Please report your "

WARNING:SPLIT_STRING: quoted string split across lines
#246: FILE: drivers/i2c/chips/fscpos.c:168:
+				"been proplerly tested. Please report your "
+				"experience to the module author.\n");

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#277: FILE: drivers/i2c/chips/fscpos.c:199:
+	unsigned long v = simple_strtoul(buf, NULL, 10);

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#279: FILE: drivers/i2c/chips/fscpos.c:201:
+	switch (v) {
+		case 2: v = 1; break;
+		case 4: v = 2; break;
+		case 8: v = 3; break;

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#280: FILE: drivers/i2c/chips/fscpos.c:202:
+		case 2: v = 1; break;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#281: FILE: drivers/i2c/chips/fscpos.c:203:
+		case 4: v = 2; break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#282: FILE: drivers/i2c/chips/fscpos.c:204:
+		case 8: v = 3; break;

WARNING:SPLIT_STRING: quoted string split across lines
#285: FILE: drivers/i2c/chips/fscpos.c:207:
+		dev_err(&client->dev, "fan_ripple value %ld not supported. "
+					"Must be one of 2, 4 or 8!\n", v);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#288: FILE: drivers/i2c/chips/fscpos.c:210:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#292: FILE: drivers/i2c/chips/fscpos.c:214:
+^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#303: FILE: drivers/i2c/chips/fscpos.c:225:
+static ssize_t set_pwm(struct i2c_client *client, struct fscpos_data *data,
+				const char *buf, size_t count, int nr, int reg)

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#305: FILE: drivers/i2c/chips/fscpos.c:227:
+	unsigned long v = simple_strtoul(buf, NULL, 10);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#308: FILE: drivers/i2c/chips/fscpos.c:230:
+	if (v < 0) v = 0;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#309: FILE: drivers/i2c/chips/fscpos.c:231:
+	if (v > 255) v = 255;

WARNING:LINE_SPACING: Missing a blank line after declarations
#327: FILE: drivers/i2c/chips/fscpos.c:249:
+	struct fscpos_data *data = fscpos_update_device(dev);
+	return sprintf(buf, "%u\n", VOLT_FROM_REG(data->volt[0], 1420));

WARNING:LINE_SPACING: Missing a blank line after declarations
#333: FILE: drivers/i2c/chips/fscpos.c:255:
+	struct fscpos_data *data = fscpos_update_device(dev);
+	return sprintf(buf, "%u\n", VOLT_FROM_REG(data->volt[1], 660));

WARNING:LINE_SPACING: Missing a blank line after declarations
#339: FILE: drivers/i2c/chips/fscpos.c:261:
+	struct fscpos_data *data = fscpos_update_device(dev);
+	return sprintf(buf, "%u\n", VOLT_FROM_REG(data->volt[2], 330));

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#353: FILE: drivers/i2c/chips/fscpos.c:275:
+	unsigned long v = simple_strtoul(buf, NULL, 10) & 0xf0;

WARNING:LINE_SPACING: Missing a blank line after declarations
#354: FILE: drivers/i2c/chips/fscpos.c:276:
+	unsigned long v = simple_strtoul(buf, NULL, 10) & 0xf0;
+	data->wdog_control &= ~0xf0;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#356: FILE: drivers/i2c/chips/fscpos.c:278:
+^I$

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#370: FILE: drivers/i2c/chips/fscpos.c:292:
+	unsigned long v = simple_strtoul(buf, NULL, 10) & 0x02;

WARNING:SPLIT_STRING: quoted string split across lines
#375: FILE: drivers/i2c/chips/fscpos.c:297:
+		dev_err(&client->dev, "wdog_state value %ld not supported. "
+					"Must be 2 to clear the state!\n", v);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#380: FILE: drivers/i2c/chips/fscpos.c:302:
+^I$

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#393: FILE: drivers/i2c/chips/fscpos.c:315:
+	data->wdog_preset = simple_strtoul(buf, NULL, 10) & 0xff;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#394: FILE: drivers/i2c/chips/fscpos.c:316:
+^I$

WARNING:LINE_SPACING: Missing a blank line after declarations
#404: FILE: drivers/i2c/chips/fscpos.c:326:
+	struct fscpos_data *data = fscpos_update_device(dev);
+	return sprintf(buf, "%u\n", data->global_event & 0x9b);

ERROR:CODE_INDENT: code indent should use tabs where possible
#419: FILE: drivers/i2c/chips/fscpos.c:341:
+^I^I^I^I^I^I^I^I ^I*buf) \$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#419: FILE: drivers/i2c/chips/fscpos.c:341:
+^I^I^I^I^I^I^I^I ^I*buf) \$

CHECK:SPACING: spaces preferred around that '*' (ctx:ExV)
#419: FILE: drivers/i2c/chips/fscpos.c:341:
+								 	*buf) \
 								 	^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#426: FILE: drivers/i2c/chips/fscpos.c:348:
+	static ssize_t sysfs_set_##kind##sub (struct device *dev, const char \

CHECK:SPACING: spaces preferred around that '*' (ctx:ExV)
#427: FILE: drivers/i2c/chips/fscpos.c:349:
+							*buf, size_t count) \
 							^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#435: FILE: drivers/i2c/chips/fscpos.c:357:
+	static ssize_t sysfs_set_##kind##offset##sub (struct device *dev, \

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#443: FILE: drivers/i2c/chips/fscpos.c:365:
+#define create_sysfs_device_ro(kind, sub, offset) \
+	static DEVICE_ATTR(kind##offset##sub, S_IRUGO, \
+					sysfs_show_##kind##offset##sub, NULL);

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#443: FILE: drivers/i2c/chips/fscpos.c:365:
+#define create_sysfs_device_ro(kind, sub, offset) \
+	static DEVICE_ATTR(kind##offset##sub, S_IRUGO, \
+					sysfs_show_##kind##offset##sub, NULL);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#444: FILE: drivers/i2c/chips/fscpos.c:366:
+	static DEVICE_ATTR(kind##offset##sub, S_IRUGO, \

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#447: FILE: drivers/i2c/chips/fscpos.c:369:
+#define create_sysfs_device_rw(kind, sub, offset) \
+	static DEVICE_ATTR(kind##offset##sub, S_IRUGO | S_IWUSR, \
+		sysfs_show_##kind##offset##sub, sysfs_set_##kind##offset##sub);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#447: FILE: drivers/i2c/chips/fscpos.c:369:
+#define create_sysfs_device_rw(kind, sub, offset) \
+	static DEVICE_ATTR(kind##offset##sub, S_IRUGO | S_IWUSR, \
+		sysfs_show_##kind##offset##sub, sysfs_set_##kind##offset##sub);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#448: FILE: drivers/i2c/chips/fscpos.c:370:
+	static DEVICE_ATTR(kind##offset##sub, S_IRUGO | S_IWUSR, \

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#451: FILE: drivers/i2c/chips/fscpos.c:373:
+#define sysfs_ro_n(kind, sub, offset) \
+	create_getter_n(kind, offset, sub); \
+	create_sysfs_device_ro(kind, sub, offset);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'kind' - possible side-effects?
#451: FILE: drivers/i2c/chips/fscpos.c:373:
+#define sysfs_ro_n(kind, sub, offset) \
+	create_getter_n(kind, offset, sub); \
+	create_sysfs_device_ro(kind, sub, offset);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'sub' - possible side-effects?
#451: FILE: drivers/i2c/chips/fscpos.c:373:
+#define sysfs_ro_n(kind, sub, offset) \
+	create_getter_n(kind, offset, sub); \
+	create_sysfs_device_ro(kind, sub, offset);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'offset' - possible side-effects?
#451: FILE: drivers/i2c/chips/fscpos.c:373:
+#define sysfs_ro_n(kind, sub, offset) \
+	create_getter_n(kind, offset, sub); \
+	create_sysfs_device_ro(kind, sub, offset);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#451: FILE: drivers/i2c/chips/fscpos.c:373:
+#define sysfs_ro_n(kind, sub, offset) \
+	create_getter_n(kind, offset, sub); \
+	create_sysfs_device_ro(kind, sub, offset);

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#455: FILE: drivers/i2c/chips/fscpos.c:377:
+#define sysfs_rw_n(kind, sub, offset, reg) \
+	create_getter_n(kind, offset, sub); \
+	create_setter_n(kind, offset, sub, reg); \
+	create_sysfs_device_rw(kind, sub, offset);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'kind' - possible side-effects?
#455: FILE: drivers/i2c/chips/fscpos.c:377:
+#define sysfs_rw_n(kind, sub, offset, reg) \
+	create_getter_n(kind, offset, sub); \
+	create_setter_n(kind, offset, sub, reg); \
+	create_sysfs_device_rw(kind, sub, offset);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'sub' - possible side-effects?
#455: FILE: drivers/i2c/chips/fscpos.c:377:
+#define sysfs_rw_n(kind, sub, offset, reg) \
+	create_getter_n(kind, offset, sub); \
+	create_setter_n(kind, offset, sub, reg); \
+	create_sysfs_device_rw(kind, sub, offset);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'offset' - possible side-effects?
#455: FILE: drivers/i2c/chips/fscpos.c:377:
+#define sysfs_rw_n(kind, sub, offset, reg) \
+	create_getter_n(kind, offset, sub); \
+	create_setter_n(kind, offset, sub, reg); \
+	create_sysfs_device_rw(kind, sub, offset);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#455: FILE: drivers/i2c/chips/fscpos.c:377:
+#define sysfs_rw_n(kind, sub, offset, reg) \
+	create_getter_n(kind, offset, sub); \
+	create_setter_n(kind, offset, sub, reg); \
+	create_sysfs_device_rw(kind, sub, offset);

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#460: FILE: drivers/i2c/chips/fscpos.c:382:
+#define sysfs_rw(kind, sub, reg) \
+	create_getter(kind, sub); \
+	create_setter(kind, sub, reg); \
+	create_sysfs_device_rw(kind, sub,);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'kind' - possible side-effects?
#460: FILE: drivers/i2c/chips/fscpos.c:382:
+#define sysfs_rw(kind, sub, reg) \
+	create_getter(kind, sub); \
+	create_setter(kind, sub, reg); \
+	create_sysfs_device_rw(kind, sub,);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'sub' - possible side-effects?
#460: FILE: drivers/i2c/chips/fscpos.c:382:
+#define sysfs_rw(kind, sub, reg) \
+	create_getter(kind, sub); \
+	create_setter(kind, sub, reg); \
+	create_sysfs_device_rw(kind, sub,);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#460: FILE: drivers/i2c/chips/fscpos.c:382:
+#define sysfs_rw(kind, sub, reg) \
+	create_getter(kind, sub); \
+	create_setter(kind, sub, reg); \
+	create_sysfs_device_rw(kind, sub,);

ERROR:SPACING: space required after that ',' (ctx:VxB)
#463: FILE: drivers/i2c/chips/fscpos.c:385:
+	create_sysfs_device_rw(kind, sub,);
 	                                ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#465: FILE: drivers/i2c/chips/fscpos.c:387:
+#define sysfs_fan_with_min(offset, reg_status, reg_ripple, reg_min) \
+	sysfs_fan(offset, reg_status, reg_ripple); \
+	sysfs_rw_n(pwm,, offset, reg_min);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'offset' - possible side-effects?
#465: FILE: drivers/i2c/chips/fscpos.c:387:
+#define sysfs_fan_with_min(offset, reg_status, reg_ripple, reg_min) \
+	sysfs_fan(offset, reg_status, reg_ripple); \
+	sysfs_rw_n(pwm,, offset, reg_min);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#465: FILE: drivers/i2c/chips/fscpos.c:387:
+#define sysfs_fan_with_min(offset, reg_status, reg_ripple, reg_min) \
+	sysfs_fan(offset, reg_status, reg_ripple); \
+	sysfs_rw_n(pwm,, offset, reg_min);

ERROR:SPACING: space required after that ',' (ctx:VxO)
#467: FILE: drivers/i2c/chips/fscpos.c:389:
+	sysfs_rw_n(pwm,, offset, reg_min);
 	              ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#469: FILE: drivers/i2c/chips/fscpos.c:391:
+#define sysfs_fan(offset, reg_status, reg_ripple) \
+	sysfs_ro_n(fan, _input, offset); \
+	sysfs_ro_n(fan, _status, offset); \
+	sysfs_rw_n(fan, _ripple, offset, reg_ripple);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'offset' - possible side-effects?
#469: FILE: drivers/i2c/chips/fscpos.c:391:
+#define sysfs_fan(offset, reg_status, reg_ripple) \
+	sysfs_ro_n(fan, _input, offset); \
+	sysfs_ro_n(fan, _status, offset); \
+	sysfs_rw_n(fan, _ripple, offset, reg_ripple);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#469: FILE: drivers/i2c/chips/fscpos.c:391:
+#define sysfs_fan(offset, reg_status, reg_ripple) \
+	sysfs_ro_n(fan, _input, offset); \
+	sysfs_ro_n(fan, _status, offset); \
+	sysfs_rw_n(fan, _ripple, offset, reg_ripple);

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#474: FILE: drivers/i2c/chips/fscpos.c:396:
+#define sysfs_temp(offset, reg_status) \
+	sysfs_ro_n(temp, _input, offset); \
+	sysfs_ro_n(temp, _status, offset); \
+	sysfs_rw_n(temp, _reset, offset, reg_status);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'offset' - possible side-effects?
#474: FILE: drivers/i2c/chips/fscpos.c:396:
+#define sysfs_temp(offset, reg_status) \
+	sysfs_ro_n(temp, _input, offset); \
+	sysfs_ro_n(temp, _status, offset); \
+	sysfs_rw_n(temp, _reset, offset, reg_status);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#474: FILE: drivers/i2c/chips/fscpos.c:396:
+#define sysfs_temp(offset, reg_status) \
+	sysfs_ro_n(temp, _input, offset); \
+	sysfs_ro_n(temp, _status, offset); \
+	sysfs_rw_n(temp, _reset, offset, reg_status);

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#479: FILE: drivers/i2c/chips/fscpos.c:401:
+#define sysfs_watchdog(reg_wdog_preset, reg_wdog_state, reg_wdog_control) \
+	sysfs_rw(wdog, _control, reg_wdog_control); \
+	sysfs_rw(wdog, _preset, reg_wdog_preset); \
+	sysfs_rw(wdog, _state, reg_wdog_state);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#479: FILE: drivers/i2c/chips/fscpos.c:401:
+#define sysfs_watchdog(reg_wdog_preset, reg_wdog_state, reg_wdog_control) \
+	sysfs_rw(wdog, _control, reg_wdog_control); \
+	sysfs_rw(wdog, _preset, reg_wdog_preset); \
+	sysfs_rw(wdog, _state, reg_wdog_state);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#485: FILE: drivers/i2c/chips/fscpos.c:407:
+sysfs_fan_with_min(1, FSCPOS_REG_FAN_STATE[0], FSCPOS_REG_FAN_RIPPLE[0],
+							FSCPOS_REG_PWM[0]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#487: FILE: drivers/i2c/chips/fscpos.c:409:
+sysfs_fan_with_min(2, FSCPOS_REG_FAN_STATE[1], FSCPOS_REG_FAN_RIPPLE[1],
+							FSCPOS_REG_PWM[1]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#495: FILE: drivers/i2c/chips/fscpos.c:417:
+sysfs_watchdog(FSCPOS_REG_WDOG_PRESET, FSCPOS_REG_WDOG_STATE,
+						FSCPOS_REG_WDOG_CONTROL);

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'show_event' to 'event_show'
#497: FILE: drivers/i2c/chips/fscpos.c:419:
+static DEVICE_ATTR(event, S_IRUGO, show_event, NULL);

The function names used in DEVICE_ATTR is unusual.
Typically, the store and show functions are used with <attr>_store and
<attr>_show, where <attr> is a named attribute variable of the device.

Consider the following examples::

  static DEVICE_ATTR(type, 0444, type_show, NULL);
  static DEVICE_ATTR(power, 0644, power_show, power_store);

The function names should preferably follow the above pattern.

See: https://www.kernel.org/doc/html/latest/driver-api/driver-model/device.html#attributes

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#497: FILE: drivers/i2c/chips/fscpos.c:419:
+static DEVICE_ATTR(event, S_IRUGO, show_event, NULL);

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'show_volt_12' to 'in0_input_show'
#498: FILE: drivers/i2c/chips/fscpos.c:420:
+static DEVICE_ATTR(in0_input, S_IRUGO, show_volt_12, NULL);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#498: FILE: drivers/i2c/chips/fscpos.c:420:
+static DEVICE_ATTR(in0_input, S_IRUGO, show_volt_12, NULL);

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'show_volt_5' to 'in1_input_show'
#499: FILE: drivers/i2c/chips/fscpos.c:421:
+static DEVICE_ATTR(in1_input, S_IRUGO, show_volt_5, NULL);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#499: FILE: drivers/i2c/chips/fscpos.c:421:
+static DEVICE_ATTR(in1_input, S_IRUGO, show_volt_5, NULL);

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'show_volt_batt' to 'in2_input_show'
#500: FILE: drivers/i2c/chips/fscpos.c:422:
+static DEVICE_ATTR(in2_input, S_IRUGO, show_volt_batt, NULL);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#500: FILE: drivers/i2c/chips/fscpos.c:422:
+static DEVICE_ATTR(in2_input, S_IRUGO, show_volt_batt, NULL);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#524: FILE: drivers/i2c/chips/fscpos.c:446:
+	if (!(data = kmalloc(sizeof(struct fscpos_data), GFP_KERNEL))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*data)...) over kmalloc(sizeof(struct fscpos_data)...)
#524: FILE: drivers/i2c/chips/fscpos.c:446:
+	if (!(data = kmalloc(sizeof(struct fscpos_data), GFP_KERNEL))) {

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#539: FILE: drivers/i2c/chips/fscpos.c:461:
+		if ((fscpos_read_value(new_client, FSCPOS_REG_IDENT_0)
+			!= 0x50) /* 'P' */
+		|| (fscpos_read_value(new_client, FSCPOS_REG_IDENT_1)
+			!= 0x45) /* 'E' */
+		|| (fscpos_read_value(new_client, FSCPOS_REG_IDENT_2)
+			!= 0x47))/* 'G' */
+		{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#541: FILE: drivers/i2c/chips/fscpos.c:463:
+			!= 0x50) /* 'P' */
+		|| (fscpos_read_value(new_client, FSCPOS_REG_IDENT_1)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#543: FILE: drivers/i2c/chips/fscpos.c:465:
+			!= 0x45) /* 'E' */
+		|| (fscpos_read_value(new_client, FSCPOS_REG_IDENT_2)

WARNING:STRLCPY: Prefer strscpy over strlcpy - see: https://lore.kernel.org/r/CAHk-=wgfRnXz0W3D37d01q3JFkr_i_uTL=V6A6G1oUZcprmknw@mail.gmail.com/
#552: FILE: drivers/i2c/chips/fscpos.c:474:
+	strlcpy(new_client->name, "fscpos", I2C_NAME_SIZE);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#558: FILE: drivers/i2c/chips/fscpos.c:480:
+	if ((err = i2c_attach_client(new_client)))

WARNING:TYPO_SPELLING: 'Inizialize' may be misspelled - perhaps 'Initialize'?
#561: FILE: drivers/i2c/chips/fscpos.c:483:
+	/* Inizialize the fscpos chip */
 	   ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#608: FILE: drivers/i2c/chips/fscpos.c:530:
+	if ((err = i2c_detach_client(client))) {

WARNING:SPLIT_STRING: quoted string split across lines
#610: FILE: drivers/i2c/chips/fscpos.c:532:
+		dev_err(&client->dev, "Client deregistration failed, client"
+							" not detached.\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'jiffies < data->last_updated'
#645: FILE: drivers/i2c/chips/fscpos.c:567:
+	if ((jiffies - data->last_updated > 2 * HZ) ||
+			(jiffies < data->last_updated) || !data->valid) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#646: FILE: drivers/i2c/chips/fscpos.c:568:
+	if ((jiffies - data->last_updated > 2 * HZ) ||
+			(jiffies < data->last_updated) || !data->valid) {

WARNING:JIFFIES_COMPARISON: Comparing jiffies is almost always wrong; prefer time_after, time_before and friends
#646: FILE: drivers/i2c/chips/fscpos.c:568:
+			(jiffies < data->last_updated) || !data->valid) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#647: FILE: drivers/i2c/chips/fscpos.c:569:
+			(jiffies < data->last_updated) || !data->valid) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#651: FILE: drivers/i2c/chips/fscpos.c:573:
+		int i;
+		for (i = 0; i < 3; i++) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#653: FILE: drivers/i2c/chips/fscpos.c:575:
+			data->temp_act[i] = fscpos_read_value(client,
+						FSCPOS_REG_TEMP_ACT[i]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#655: FILE: drivers/i2c/chips/fscpos.c:577:
+			data->temp_status[i] = fscpos_read_value(client,
+						FSCPOS_REG_TEMP_STATE[i]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#657: FILE: drivers/i2c/chips/fscpos.c:579:
+			data->fan_act[i] = fscpos_read_value(client,
+						FSCPOS_REG_FAN_ACT[i]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#659: FILE: drivers/i2c/chips/fscpos.c:581:
+			data->fan_status[i] = fscpos_read_value(client,
+						FSCPOS_REG_FAN_STATE[i]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#661: FILE: drivers/i2c/chips/fscpos.c:583:
+			data->fan_ripple[i] = fscpos_read_value(client,
+						FSCPOS_REG_FAN_RIPPLE[i]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#665: FILE: drivers/i2c/chips/fscpos.c:587:
+				data->pwm[i] = fscpos_read_value(client,
+							FSCPOS_REG_PWM[i]);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#668: FILE: drivers/i2c/chips/fscpos.c:590:
+			if (data->fan_status[i] != 0 && data->fan_act[i] > 0) {
+				reset_fan_alarm(client, i);
+			}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#678: FILE: drivers/i2c/chips/fscpos.c:600:
+		data->wdog_preset = fscpos_read_value(client,
+							FSCPOS_REG_WDOG_PRESET);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#680: FILE: drivers/i2c/chips/fscpos.c:602:
+		data->wdog_state = fscpos_read_value(client,
+							FSCPOS_REG_WDOG_STATE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#682: FILE: drivers/i2c/chips/fscpos.c:604:
+		data->wdog_control = fscpos_read_value(client,
+						FSCPOS_REG_WDOG_CONTROL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#685: FILE: drivers/i2c/chips/fscpos.c:607:
+		data->global_event = fscpos_read_value(client,
+						FSCPOS_REG_EVENT_STATE);

WARNING:SPLIT_STRING: quoted string split across lines
#705: FILE: drivers/i2c/chips/fscpos.c:627:
+MODULE_AUTHOR("Stefan Ott <stefan@desire.ch> based on work from Hermann Jung "
+				"<hej@odn.de>, Frodo Looijaard <frodol@dds.nl>"

WARNING:SPLIT_STRING: quoted string split across lines
#706: FILE: drivers/i2c/chips/fscpos.c:628:
+				"<hej@odn.de>, Frodo Looijaard <frodol@dds.nl>"
+				" and Philip Edelbrock <phil@netroedge.com>");

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000202139.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 29 errors, 51 warnings, 33 checks, 657 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000202139.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
