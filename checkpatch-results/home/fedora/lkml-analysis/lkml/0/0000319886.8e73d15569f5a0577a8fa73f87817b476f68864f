WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#49: FILE: include/linux/mempool.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:NEW_TYPEDEFS: do not add new typedefs
#59: FILE: include/linux/mempool.h:11:
+typedef struct mempool_s mempool_t;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#64: FILE: include/linux/mempool.h:16:
+extern mempool_t * mempool_create(int min_nr, mempool_alloc_t *alloc_fn,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#64: FILE: include/linux/mempool.h:16:
+extern mempool_t * mempool_create(int min_nr, mempool_alloc_t *alloc_fn,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#65: FILE: include/linux/mempool.h:17:
+extern mempool_t * mempool_create(int min_nr, mempool_alloc_t *alloc_fn,
+				 mempool_free_t *free_fn, void *pool_data);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#66: FILE: include/linux/mempool.h:18:
+extern int mempool_resize(mempool_t *pool, int new_min_nr, int gfp_mask);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#67: FILE: include/linux/mempool.h:19:
+extern void mempool_destroy(mempool_t *pool);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#68: FILE: include/linux/mempool.h:20:
+extern void * mempool_alloc(mempool_t *pool, int gfp_mask);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#68: FILE: include/linux/mempool.h:20:
+extern void * mempool_alloc(mempool_t *pool, int gfp_mask);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#69: FILE: include/linux/mempool.h:21:
+extern void mempool_free(void *element, mempool_t *pool);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#78: FILE: include/linux/mempool.h:30:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#83: FILE: mm/mempool.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#84: FILE: mm/mempool.c:2:
+ *  linux/mm/mempool.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#99: FILE: mm/mempool.c:17:
+	spinlock_t lock;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#112: FILE: mm/mempool.c:30:
+	BUG_ON(pool->curr_nr >= pool->min_nr);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#118: FILE: mm/mempool.c:36:
+	BUG_ON(pool->curr_nr <= 0);

WARNING:LINE_SPACING: Missing a blank line after declarations
#126: FILE: mm/mempool.c:44:
+		void *element = remove_element(pool);
+		pool->free(element, pool->pool_data);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#146: FILE: mm/mempool.c:64:
+mempool_t * mempool_create(int min_nr, mempool_alloc_t *alloc_fn,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#147: FILE: mm/mempool.c:65:
+mempool_t * mempool_create(int min_nr, mempool_alloc_t *alloc_fn,
+				mempool_free_t *free_fn, void *pool_data)

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#155: FILE: mm/mempool.c:73:
+	pool->elements = kmalloc(min_nr * sizeof(void *), GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#205: FILE: mm/mempool.c:123:
+	BUG_ON(new_min_nr <= 0);

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#221: FILE: mm/mempool.c:139:
+	new_elements = kmalloc(new_min_nr * sizeof(*new_elements), gfp_mask);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#227: FILE: mm/mempool.c:145:
+	memcpy(new_elements, pool->elements,
+			pool->curr_nr * sizeof(*new_elements));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#261: FILE: mm/mempool.c:179:
+		BUG();		/* There were outstanding elements */

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#276: FILE: mm/mempool.c:194:
+void * mempool_alloc(mempool_t *pool, int gfp_mask)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "element"
#286: FILE: mm/mempool.c:204:
+	if (likely(element != NULL))

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#293: FILE: mm/mempool.c:211:
+	if ((gfp_mask != gfp_nowait) && (pool->curr_nr <= pool->min_nr/2)) {
 	                                                              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'gfp_mask != gfp_nowait'
#293: FILE: mm/mempool.c:211:
+	if ((gfp_mask != gfp_nowait) && (pool->curr_nr <= pool->min_nr/2)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "element"
#295: FILE: mm/mempool.c:213:
+		if (likely(element != NULL))

CHECK:SPACING: No space is necessary after a cast
#364: FILE: mm/mempool.c:282:
+	kmem_cache_t *mem = (kmem_cache_t *) pool_data;

WARNING:LINE_SPACING: Missing a blank line after declarations
#365: FILE: mm/mempool.c:283:
+	kmem_cache_t *mem = (kmem_cache_t *) pool_data;
+	return kmem_cache_alloc(mem, gfp_mask);

CHECK:SPACING: No space is necessary after a cast
#370: FILE: mm/mempool.c:288:
+	kmem_cache_t *mem = (kmem_cache_t *) pool_data;

WARNING:LINE_SPACING: Missing a blank line after declarations
#371: FILE: mm/mempool.c:289:
+	kmem_cache_t *mem = (kmem_cache_t *) pool_data;
+	kmem_cache_free(mem, element);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#374: FILE: mm/mempool.c:292:
+
+

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#375: FILE: mm/mempool.c:293:
+EXPORT_SYMBOL(mempool_create);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#376: FILE: mm/mempool.c:294:
+EXPORT_SYMBOL(mempool_resize);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#377: FILE: mm/mempool.c:295:
+EXPORT_SYMBOL(mempool_destroy);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#378: FILE: mm/mempool.c:296:
+EXPORT_SYMBOL(mempool_alloc);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#379: FILE: mm/mempool.c:297:
+EXPORT_SYMBOL(mempool_free);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#380: FILE: mm/mempool.c:298:
+EXPORT_SYMBOL(mempool_alloc_slab);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#381: FILE: mm/mempool.c:299:
+EXPORT_SYMBOL(mempool_free_slab);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000319886.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 4 errors, 20 warnings, 17 checks, 344 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000319886.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
