WARNING:TYPO_SPELLING: 'lengh' may be misspelled - perhaps 'length'?
#54: 
In addition, the lengh of the free list is limited based on the free 
                 ^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'dependant' may be misspelled - perhaps 'dependent'?
#61: 
	cache_alloc_debugcheck_before, and make that DEBUG dependant.
	                                                   ^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#129: FILE: mm/slab.c:307:
+/* Optimization question: fewer reaps means less $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'OTHO' may be misspelled - perhaps 'OTOH'?
#132: FILE: mm/slab.c:310:
+ * OTHO the cpuarrays can contain lots of objects,
    ^^^^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#135: FILE: mm/slab.c:313:
+#define REAPTIMEOUT_CPUC	(2*HZ)
                         	  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#136: FILE: mm/slab.c:314:
+#define REAPTIMEOUT_LIST3	(4*HZ)
                          	  ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#145: FILE: mm/slab.c:326:
+#define	STATS_SET_FREEABLE(x, i) \
+				do { if ((x)->max_freeable < i) \
+					(x)->max_freeable = i; \
+				} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'i' - possible side-effects?
#145: FILE: mm/slab.c:326:
+#define	STATS_SET_FREEABLE(x, i) \
+				do { if ((x)->max_freeable < i) \
+					(x)->max_freeable = i; \
+				} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'i' may be better as '(i)' to avoid precedence issues
#145: FILE: mm/slab.c:326:
+#define	STATS_SET_FREEABLE(x, i) \
+				do { if ((x)->max_freeable < i) \
+					(x)->max_freeable = i; \
+				} while (0)

WARNING:LINE_SPACING: Missing a blank line after declarations
#215: FILE: mm/slab.c:513:
+	int cpu = smp_processor_id();
+	if (reap_timer[cpu].function == 0) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#216: FILE: mm/slab.c:514:
+		printk(KERN_INFO "slab: reap timer started for cpu %d.\n", cpu);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#218: FILE: mm/slab.c:516:
+		reap_timer[cpu].expires = jiffies + HZ + 3*cpu;
 		                                          ^

ERROR:POINTER_LOCATION: "foo*bar" should be "foo *bar"
#227: FILE: mm/slab.c:525:
+	void (*fnc)(void*arg);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#238: FILE: mm/slab.c:536:
+	BUG_ON(smp_processor_id() != info->cpu);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:LINE_SPACING: Missing a blank line after declarations
#248: FILE: mm/slab.c:546:
+	struct cpucall_info *info;
+	info = kmalloc(sizeof(*info), GFP_KERNEL);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#250: FILE: mm/slab.c:548:
+		printk(KERN_INFO "do_cpucall for cpu %d, callback %p failed at kmalloc.\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'do_cpucall', this function's name, in a string
#250: FILE: mm/slab.c:548:
+		printk(KERN_INFO "do_cpucall for cpu %d, callback %p failed at kmalloc.\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#251: FILE: mm/slab.c:549:
+		printk(KERN_INFO "do_cpucall for cpu %d, callback %p failed at kmalloc.\n",
+				cpu, fnc);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#258: FILE: mm/slab.c:556:
+		printk(KERN_INFO "do_cpucall for cpu %d, callback %p failed at kernel_thread.\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'do_cpucall', this function's name, in a string
#258: FILE: mm/slab.c:556:
+		printk(KERN_INFO "do_cpucall for cpu %d, callback %p failed at kernel_thread.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#259: FILE: mm/slab.c:557:
+		printk(KERN_INFO "do_cpucall for cpu %d, callback %p failed at kernel_thread.\n",
+				cpu, fnc);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#285: FILE: mm/slab.c:594:
+			cachep->free_limit = (1+num_online_cpus())*cachep->batchcount
 			                       ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#285: FILE: mm/slab.c:594:
+			cachep->free_limit = (1+num_online_cpus())*cachep->batchcount
 			                                          ^

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#291: FILE: mm/slab.c:598:
 
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#337: FILE: mm/slab.c:712:
+^I/* $

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#342: FILE: mm/slab.c:717:
+	for (i=0;i<NR_CPUS;i++) {
 	      ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#342: FILE: mm/slab.c:717:
+	for (i=0;i<NR_CPUS;i++) {
 	        ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#342: FILE: mm/slab.c:717:
+	for (i=0;i<NR_CPUS;i++) {
 	          ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#342: FILE: mm/slab.c:717:
+	for (i=0;i<NR_CPUS;i++) {
 	                  ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#342: FILE: mm/slab.c:717:
+	for (i=0;i<NR_CPUS;i++) {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#356: FILE: mm/slab.c:1057:
+		cachep->free_limit = (1+num_online_cpus())*cachep->batchcount
 		                       ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#356: FILE: mm/slab.c:1057:
+		cachep->free_limit = (1+num_online_cpus())*cachep->batchcount
 		                                          ^

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#361: FILE: mm/slab.c:1062:
+					((unsigned long)cachep)%REAPTIMEOUT_LIST3;
 					                       ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#505: FILE: mm/slab.c:1752:
+			BUG_ON(slabp->inuse);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#529: FILE: mm/slab.c:1955:
+	cachep->free_limit = (1+num_online_cpus())*cachep->batchcount + cachep->num;
 	                       ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#529: FILE: mm/slab.c:1955:
+	cachep->free_limit = (1+num_online_cpus())*cachep->batchcount + cachep->num;
 	                                          ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#546: FILE: mm/slab.c:1999:
+static inline void cache_reap (void)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#563: FILE: mm/slab.c:2004:
+	BUG_ON(!in_interrupt());

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#564: FILE: mm/slab.c:2005:
+	BUG_ON(in_irq());

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#601: FILE: mm/slab.c:2027:
+			tofree = (cc->limit+4)/5;
 			                   ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#601: FILE: mm/slab.c:2027:
+			tofree = (cc->limit+4)/5;
 			                      ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#602: FILE: mm/slab.c:2028:
+			if (tofree > cc->avail) {
+				tofree = (cc->avail+1)/2;
 			}

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#603: FILE: mm/slab.c:2029:
+				tofree = (cc->avail+1)/2;
 				                   ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#603: FILE: mm/slab.c:2029:
+				tofree = (cc->avail+1)/2;
 				                      ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#608: FILE: mm/slab.c:2034:
+			memmove(&cc_entry(cc)[0], &cc_entry(cc)[tofree],
+					sizeof(void*)*cc->avail);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#608: FILE: mm/slab.c:2034:
+					sizeof(void*)*cc->avail);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#608: FILE: mm/slab.c:2034:
+					sizeof(void*)*cc->avail);
 					             ^

ERROR:SPACING: space required before the open parenthesis '('
#610: FILE: mm/slab.c:2036:
+		if(time_after(searchp->lists.next_reap, jiffies))

ERROR:SPACING: space required before the open parenthesis '('
#624: FILE: mm/slab.c:2040:
+		if(time_after(searchp->lists.next_reap, jiffies)) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#624: FILE: mm/slab.c:2040:
+		if(time_after(searchp->lists.next_reap, jiffies)) {
+			goto next_unlock;
 		}

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#658: FILE: mm/slab.c:2049:
+		tofree = (searchp->free_limit+5*searchp->num-1)/(5*searchp->num);
 		                             ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#658: FILE: mm/slab.c:2049:
+		tofree = (searchp->free_limit+5*searchp->num-1)/(5*searchp->num);
 		                               ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#658: FILE: mm/slab.c:2049:
+		tofree = (searchp->free_limit+5*searchp->num-1)/(5*searchp->num);
 		                                            ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#658: FILE: mm/slab.c:2049:
+		tofree = (searchp->free_limit+5*searchp->num-1)/(5*searchp->num);
 		                                               ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#658: FILE: mm/slab.c:2049:
+		tofree = (searchp->free_limit+5*searchp->num-1)/(5*searchp->num);
 		                                                  ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#675: FILE: mm/slab.c:2056:
+			BUG_ON(slabp->inuse);

ERROR:SPACING: space required before the open parenthesis '('
#688: FILE: mm/slab.c:2069:
+		} while(--tofree > 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#748: FILE: mm/slab.c:2172:
+	BUG_ON(num_objs - active_objs != cachep->lists.free_objects);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#784: FILE: mm/slab.c:2202:
+^I^I^I^Ihigh, allocs, grown, reaped, errors, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#784: FILE: mm/slab.c:2202:
+		seq_printf(m, " : %6lu %7lu %5lu %4lu %4lu %4lu %4lu",
+				high, allocs, grown, reaped, errors, 

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000426600.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 12 errors, 20 warnings, 28 checks, 683 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000426600.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
