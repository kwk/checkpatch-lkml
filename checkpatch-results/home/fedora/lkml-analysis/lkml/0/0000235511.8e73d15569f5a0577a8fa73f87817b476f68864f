CHECK:SPACING: No space is necessary after a cast
#188: FILE: kernel/sched.c:188:
+#define task_hot(p, now, sd) ((long long) ((now) - (p)->u.ingosched.last_ran)	\

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#188: FILE: kernel/sched.c:188:
 }
+#define task_hot(p, now, sd) ((long long) ((now) - (p)->u.ingosched.last_ran)	\

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#197: FILE: kernel/sched.c:298:
+	return (unlikely((p)->u.ingosched.prio < MAX_RT_PRIO));

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 32)
#269: FILE: kernel/sched.c:679:
+		if (p->mm && p->u.ingosched.activated != -1 &&
[...]
+				p->u.ingosched.sleep_avg = JIFFIES_TO_NS(MAX_SLEEP_AVG -

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#270: FILE: kernel/sched.c:680:
+		if (p->mm && p->u.ingosched.activated != -1 &&
 			sleep_time > INTERACTIVE_SLEEP(p)) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#287: FILE: kernel/sched.c:706:
+				if (p->u.ingosched.sleep_avg >= INTERACTIVE_SLEEP(p))
[...]
-				else if (p->sleep_avg + sleep_time >=
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#470: FILE: kernel/sched.c:1229:
+			if (unlikely(!current->u.ingosched.array))
[...]
 			else {
[...]

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#478: FILE: kernel/sched.c:1233:
+				list_add_tail(&p->u.ingosched.run_list, &current->u.ingosched.run_list);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'p->policy == SCHED_RR'
#565: FILE: kernel/sched.c:2411:
+		if ((p->policy == SCHED_RR) && !--p->u.ingosched.time_slice) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 32)
#620: FILE: kernel/sched.c:2564:
+		if (((smt_curr->u.ingosched.time_slice * (100 - sd->per_cpu_gain) / 100) >
[...]
 				ret = 1;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#687: FILE: kernel/sched.c:2747:
+	prev->u.ingosched.timestamp = prev->u.ingosched.last_ran = now;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#729: FILE: kernel/sched.c:2891:
+	BUG_ON(p->u.ingosched.array);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#734: FILE: kernel/sched.c:2895:
+		p->u.ingosched.prio = MAX_USER_RT_PRIO-1 - p->rt_priority;
 		                                      ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000235511.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 4 warnings, 8 checks, 704 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000235511.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
