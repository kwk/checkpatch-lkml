WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#34: 
Signed-Off-By: Dave Teigland <teigland@redhat.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#35: 
Signed-Off-By: Patrick Caulfield <pcaulfie@redhat.com>

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#45: FILE: drivers/dlm/lock.c:1:
+/******************************************************************************

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#46: FILE: drivers/dlm/lock.c:2:
+/******************************************************************************
+*******************************************************************************

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#72: FILE: drivers/dlm/lock.c:28:
+/* Central locking logic has four stages:
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#91: FILE: drivers/dlm/lock.c:47:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#109: FILE: drivers/dlm/lock.c:65:
+
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#115: FILE: drivers/dlm/lock.c:71:
+                                   R: do_xxxx()$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:LINE_SPACING: Please don't use multiple blank lines
#147: FILE: drivers/dlm/lock.c:103:
+
+

WARNING:TYPO_SPELLING: 'compatibilty' may be misspelled - perhaps 'compatibility'?
#149: FILE: drivers/dlm/lock.c:105:
+ * Lock compatibilty matrix - thanks Steve
         ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:CODE_INDENT: code indent should use tabs where possible
#158: FILE: drivers/dlm/lock.c:114:
+        {1, 1, 1, 1, 1, 1, 1, 0},       /* UN */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#158: FILE: drivers/dlm/lock.c:114:
+        {1, 1, 1, 1, 1, 1, 1, 0},       /* UN */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#159: FILE: drivers/dlm/lock.c:115:
+        {1, 1, 1, 1, 1, 1, 1, 0},       /* NL */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#159: FILE: drivers/dlm/lock.c:115:
+        {1, 1, 1, 1, 1, 1, 1, 0},       /* NL */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#160: FILE: drivers/dlm/lock.c:116:
+        {1, 1, 1, 1, 1, 1, 0, 0},       /* CR */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#160: FILE: drivers/dlm/lock.c:116:
+        {1, 1, 1, 1, 1, 1, 0, 0},       /* CR */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#161: FILE: drivers/dlm/lock.c:117:
+        {1, 1, 1, 1, 0, 0, 0, 0},       /* CW */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#161: FILE: drivers/dlm/lock.c:117:
+        {1, 1, 1, 1, 0, 0, 0, 0},       /* CW */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#162: FILE: drivers/dlm/lock.c:118:
+        {1, 1, 1, 0, 1, 0, 0, 0},       /* PR */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#162: FILE: drivers/dlm/lock.c:118:
+        {1, 1, 1, 0, 1, 0, 0, 0},       /* PR */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#163: FILE: drivers/dlm/lock.c:119:
+        {1, 1, 1, 0, 0, 0, 0, 0},       /* PW */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#163: FILE: drivers/dlm/lock.c:119:
+        {1, 1, 1, 0, 0, 0, 0, 0},       /* PW */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#164: FILE: drivers/dlm/lock.c:120:
+        {1, 1, 0, 0, 0, 0, 0, 0},       /* EX */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#164: FILE: drivers/dlm/lock.c:120:
+        {1, 1, 0, 0, 0, 0, 0, 0},       /* EX */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#165: FILE: drivers/dlm/lock.c:121:
+        {0, 0, 0, 0, 0, 0, 0, 0}        /* PD */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#165: FILE: drivers/dlm/lock.c:121:
+        {0, 0, 0, 0, 0, 0, 0, 0}        /* PD */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#184: FILE: drivers/dlm/lock.c:140:
+        {0, 0, 0, 0, 0, 0, 0, 0},       /* UN */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#184: FILE: drivers/dlm/lock.c:140:
+        {0, 0, 0, 0, 0, 0, 0, 0},       /* UN */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#185: FILE: drivers/dlm/lock.c:141:
+        {0, 0, 1, 1, 1, 1, 1, 0},       /* NL */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#185: FILE: drivers/dlm/lock.c:141:
+        {0, 0, 1, 1, 1, 1, 1, 0},       /* NL */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#186: FILE: drivers/dlm/lock.c:142:
+        {0, 0, 0, 1, 1, 1, 1, 0},       /* CR */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#186: FILE: drivers/dlm/lock.c:142:
+        {0, 0, 0, 1, 1, 1, 1, 0},       /* CR */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#187: FILE: drivers/dlm/lock.c:143:
+        {0, 0, 0, 0, 1, 1, 1, 0},       /* CW */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#187: FILE: drivers/dlm/lock.c:143:
+        {0, 0, 0, 0, 1, 1, 1, 0},       /* CW */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#188: FILE: drivers/dlm/lock.c:144:
+        {0, 0, 0, 1, 0, 1, 1, 0},       /* PR */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#188: FILE: drivers/dlm/lock.c:144:
+        {0, 0, 0, 1, 0, 1, 1, 0},       /* PR */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#189: FILE: drivers/dlm/lock.c:145:
+        {0, 0, 0, 0, 0, 0, 1, 0},       /* PW */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#189: FILE: drivers/dlm/lock.c:145:
+        {0, 0, 0, 0, 0, 0, 1, 0},       /* PW */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#190: FILE: drivers/dlm/lock.c:146:
+        {0, 0, 0, 0, 0, 0, 0, 0},       /* EX */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#190: FILE: drivers/dlm/lock.c:146:
+        {0, 0, 0, 0, 0, 0, 0, 0},       /* EX */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#191: FILE: drivers/dlm/lock.c:147:
+        {0, 0, 0, 0, 0, 0, 0, 0}        /* PD */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#191: FILE: drivers/dlm/lock.c:147:
+        {0, 0, 0, 0, 0, 0, 0, 0}        /* PD */$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#196: FILE: drivers/dlm/lock.c:152:
+	printk("lkb: nodeid %d id %x remid %x exflags %x flags %x\n"

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#205: FILE: drivers/dlm/lock.c:161:
+	printk("rsb: nodeid %d flags %lx trial %x name %s\n",

CHECK:BRACES: braces {} should be used on all arms of this statement
#284: FILE: drivers/dlm/lock.c:240:
+	if (is_master_copy(lkb))
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#286: FILE: drivers/dlm/lock.c:242:
+	else {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#304: FILE: drivers/dlm/lock.c:260:
+
+

ERROR:SPACING: space required after that ',' (ctx:VxB)
#380: FILE: drivers/dlm/lock.c:336:
+					     &r->res_flags),);
 					                   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#392: FILE: drivers/dlm/lock.c:348:
+	int error;
+	write_lock(&ls->ls_rsbtbl[b].lock);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#416: FILE: drivers/dlm/lock.c:372:
+	uint32_t bucket;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#465: FILE: drivers/dlm/lock.c:421:
+/* This is only called to add a reference when the code already holds
+   a valid reference to the rsb, so there's no need for locking. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#465: FILE: drivers/dlm/lock.c:421:
+   a valid reference to the rsb, so there's no need for locking. */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#466: FILE: drivers/dlm/lock.c:422:
+   $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#466: FILE: drivers/dlm/lock.c:422:
+   $

WARNING:TYPO_SPELLING: 'transfered' may be misspelled - perhaps 'transferred'?
#492: FILE: drivers/dlm/lock.c:448:
+/* When all references to the rsb are gone it's transfered to
                                                 ^^^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#493: FILE: drivers/dlm/lock.c:449:
+/* When all references to the rsb are gone it's transfered to
+   the tossed list for later disposal. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#493: FILE: drivers/dlm/lock.c:449:
+   the tossed list for later disposal. */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#498: FILE: drivers/dlm/lock.c:454:
+	uint32_t bucket = r->res_bucket;

WARNING:LINE_SPACING: Missing a blank line after declarations
#515: FILE: drivers/dlm/lock.c:471:
+	int rv;
+	rv = kref_put(&r->res_ref, toss_rsb);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#524: FILE: drivers/dlm/lock.c:480:
+	/* All work is done after the return from kref_put() so we
+	   can release the write_lock before the remove and free. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#524: FILE: drivers/dlm/lock.c:480:
+	   can release the write_lock before the remove and free. */

ERROR:SPACING: space required after that ',' (ctx:VxB)
#526: FILE: drivers/dlm/lock.c:482:
+	DLM_ASSERT(list_empty(&r->res_lookup),);
 	                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxB)
#527: FILE: drivers/dlm/lock.c:483:
+	DLM_ASSERT(list_empty(&r->res_grantqueue),);
 	                                         ^

ERROR:SPACING: space required after that ',' (ctx:VxB)
#528: FILE: drivers/dlm/lock.c:484:
+	DLM_ASSERT(list_empty(&r->res_convertqueue),);
 	                                           ^

ERROR:SPACING: space required after that ',' (ctx:VxB)
#529: FILE: drivers/dlm/lock.c:485:
+	DLM_ASSERT(list_empty(&r->res_waitqueue),);
 	                                        ^

ERROR:SPACING: space required after that ',' (ctx:VxB)
#530: FILE: drivers/dlm/lock.c:486:
+	DLM_ASSERT(list_empty(&r->res_root_list),);
 	                                        ^

ERROR:SPACING: space required after that ',' (ctx:VxB)
#531: FILE: drivers/dlm/lock.c:487:
+	DLM_ASSERT(list_empty(&r->res_recover_list),);
 	                                           ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#535: FILE: drivers/dlm/lock.c:491:
+/* FIXME: shouldn't this be able to exit as soon as one non-due rsb is
+   found since they are in order of newest to oldest? */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#535: FILE: drivers/dlm/lock.c:491:
+   found since they are in order of newest to oldest? */

ERROR:CODE_INDENT: code indent should use tabs where possible
#548: FILE: drivers/dlm/lock.c:504:
+^I^I^I^I^I            DLM_TOSS_SECS * HZ))$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#612: FILE: drivers/dlm/lock.c:568:
+/* Attaching/detaching lkb's from rsb's is for rsb reference counting.
+   The rsb must exist as long as any lkb's for it do. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#612: FILE: drivers/dlm/lock.c:568:
+   The rsb must exist as long as any lkb's for it do. */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#631: FILE: drivers/dlm/lock.c:587:
+	uint32_t lkid;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#632: FILE: drivers/dlm/lock.c:588:
+	uint16_t bucket;

ERROR:SPACING: space prohibited before that close parenthesis ')'
#649: FILE: drivers/dlm/lock.c:605:
+	DLM_ASSERT(lkid, );

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#661: FILE: drivers/dlm/lock.c:617:
+	uint16_t bucket = lkid & 0xFFFF;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#674: FILE: drivers/dlm/lock.c:630:
+	uint16_t bucket = lkid & 0xFFFF;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#694: FILE: drivers/dlm/lock.c:650:
+	/* All work is done after the return from kref_put() so we
+	   can release the write_lock before the detach_lkb */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#694: FILE: drivers/dlm/lock.c:650:
+	   can release the write_lock before the detach_lkb */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#702: FILE: drivers/dlm/lock.c:658:
+	uint16_t bucket = lkb->lkb_id & 0xFFFF;

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#718: FILE: drivers/dlm/lock.c:674:
+		return 1;
+	} else {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#730: FILE: drivers/dlm/lock.c:686:
+/* This is only called to add a reference when the code already holds
+   a valid reference to the lkb, so there's no need for locking. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#730: FILE: drivers/dlm/lock.c:686:
+   a valid reference to the lkb, so there's no need for locking. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#738: FILE: drivers/dlm/lock.c:694:
+/* This is called when we need to remove a reference and are certain
+   it's not the last ref.  e.g. del_lkb is always called between a

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#740: FILE: drivers/dlm/lock.c:696:
+   put_lkb would work fine, but would involve unnecessary locking */

WARNING:LINE_SPACING: Missing a blank line after declarations
#745: FILE: drivers/dlm/lock.c:701:
+	int rv;
+	rv = kref_put(&lkb->lkb_ref, kill_lkb);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#794: FILE: drivers/dlm/lock.c:750:
+		DLM_ASSERT(0, dlm_print_lkb(lkb); printk("sts=%d\n", status););

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#814: FILE: drivers/dlm/lock.c:770:
+/* add/remove lkb from global waiters list of lkb's waiting for
+   a reply from a remote node */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#814: FILE: drivers/dlm/lock.c:770:
+   a reply from a remote node */

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#822: FILE: drivers/dlm/lock.c:778:
+		printk("add_to_waiters error %d", lkb->lkb_wait_type);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'add_to_waiters', this function's name, in a string
#822: FILE: drivers/dlm/lock.c:778:
+		printk("add_to_waiters error %d", lkb->lkb_wait_type);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#837: FILE: drivers/dlm/lock.c:793:
+		printk("remove_from_waiters error");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'namelen > DLM_RESNAME_MAXLEN'
#876: FILE: drivers/dlm/lock.c:832:
+	if (!(flags & DLM_LKF_CONVERT) && (namelen > DLM_RESNAME_MAXLEN))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#917: FILE: drivers/dlm/lock.c:873:
+	/* these args will be copied to the lkb in validate_lock_args,
+	   it cannot be done now because when converting locks, fields in

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#918: FILE: drivers/dlm/lock.c:874:
+	   an active lkb cannot be modified before locking the rsb */

CHECK:SPACING: No space is necessary after a cast
#922: FILE: drivers/dlm/lock.c:878:
+	args->astparam = (long) astarg;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#932: FILE: drivers/dlm/lock.c:888:
+static int set_unlock_args(uint32_t flags, void *astarg, struct dlm_args *args)

CHECK:SPACING: No space is necessary after a cast
#938: FILE: drivers/dlm/lock.c:894:
+	args->astparam = (long) astarg;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#949: FILE: drivers/dlm/lock.c:905:
+	     uint32_t flags,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#952: FILE: drivers/dlm/lock.c:908:
+	     uint32_t parent_lkid,

WARNING:SPACING: Unnecessary space before function pointer arguments
#953: FILE: drivers/dlm/lock.c:909:
+	     void (*ast) (void *astarg),

WARNING:SPACING: Unnecessary space before function pointer arguments
#955: FILE: drivers/dlm/lock.c:911:
+	     void (*bast) (void *astarg, int mode),

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1001: FILE: drivers/dlm/lock.c:957:
+	       uint32_t lkid,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1002: FILE: drivers/dlm/lock.c:958:
+	       uint32_t flags,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1040: FILE: drivers/dlm/lock.c:996:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1042: FILE: drivers/dlm/lock.c:998:
+/* set_master(r, lkb) -- set the master nodeid of a resource
+

WARNING:TYPO_SPELLING: 'retrived' may be misspelled - perhaps 'retrieved'?
#1054: FILE: drivers/dlm/lock.c:1010:
+   After a remote lookup or when a tossed rsb is retrived that specifies
                                                  ^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1068: FILE: drivers/dlm/lock.c:1024:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1068: FILE: drivers/dlm/lock.c:1024:
+ $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1103: FILE: drivers/dlm/lock.c:1059:
+	/* This is the first lkb requested on this rsb since the rsb
+	   was created.  We need to figure out who the rsb master is. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1103: FILE: drivers/dlm/lock.c:1059:
+	   was created.  We need to figure out who the rsb master is. */

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1105: FILE: drivers/dlm/lock.c:1061:
+	DLM_ASSERT(r->res_nodeid == -1, );

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1117: FILE: drivers/dlm/lock.c:1073:
+		/* It's possible for dlm_scand to remove an old rsb for
+		   this same resource from the toss list, us to create

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1120: FILE: drivers/dlm/lock.c:1076:
+		   dir_remove() on the previous rsb. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1144: FILE: drivers/dlm/lock.c:1100:
+/* confirm_master -- confirm (or deny) an rsb's master nodeid
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1165: FILE: drivers/dlm/lock.c:1121:
+		/* the remote master queued our request, or
+		   the remote dir node told us we're the master */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1165: FILE: drivers/dlm/lock.c:1121:
+		   the remote dir node told us we're the master */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1177: FILE: drivers/dlm/lock.c:1133:
+^I$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1180: FILE: drivers/dlm/lock.c:1136:
+		/* the remote master didn't queue our NOQUEUE request;
+		   do another trial with the next waiting lkb */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1180: FILE: drivers/dlm/lock.c:1136:
+		   do another trial with the next waiting lkb */

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#1190: FILE: drivers/dlm/lock.c:1146:
+		/* fall through so the rsb looks new */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1195: FILE: drivers/dlm/lock.c:1151:
+		/* the remote master wasn't really the master, i.e.  our
+		   trial failed; so we start over with another lookup */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1195: FILE: drivers/dlm/lock.c:1151:
+		   trial failed; so we start over with another lookup */

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'confirm_master', this function's name, in a string
#1203: FILE: drivers/dlm/lock.c:1159:
+		log_error(r->res_ls, "confirm_master unknown error %d", error);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1217: FILE: drivers/dlm/lock.c:1173:
+		    !__quecvt_compat_matrix[lkb->lkb_grmode+1][args->mode+1])
 		                                           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1217: FILE: drivers/dlm/lock.c:1173:
+		    !__quecvt_compat_matrix[lkb->lkb_grmode+1][args->mode+1])
 		                                                         ^

CHECK:SPACING: No space is necessary after a cast
#1233: FILE: drivers/dlm/lock.c:1189:
+	lkb->lkb_ownpid = (int) current->pid;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1245: FILE: drivers/dlm/lock.c:1201:
+		/* This is needed for conversions that contain ranges
+		   where the original lock didn't but it's harmless for

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1246: FILE: drivers/dlm/lock.c:1202:
+		   new locks too. */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1396: FILE: drivers/dlm/lock.c:1352:
+^I   $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1398: FILE: drivers/dlm/lock.c:1354:
+^Iif (error < 0) $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1466: FILE: drivers/dlm/lock.c:1422:
+	/* b=1 lvb returned to caller
+	   b=0 lvb written to rsb or invalidated

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1467: FILE: drivers/dlm/lock.c:1423:
+	   b=-1 do nothing */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1557: FILE: drivers/dlm/lock.c:1513:
+/* Manipulate lkb's on rsb's convert/granted/waiting queues
+   remove_lock -- used for unlock, removes lkb from granted

ERROR:CODE_INDENT: code indent should use tabs where possible
#1560: FILE: drivers/dlm/lock.c:1516:
+                  moves lkb from convert or waiting to granted$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1561: FILE: drivers/dlm/lock.c:1517:
+ $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1564: FILE: drivers/dlm/lock.c:1520:
+   a process copy (pc) lkb. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1571: FILE: drivers/dlm/lock.c:1527:
+	/* this unhold undoes the original ref from create_lkb()
+	   so this leads to the lkb being freed */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1571: FILE: drivers/dlm/lock.c:1527:
+	   so this leads to the lkb being freed */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1598: FILE: drivers/dlm/lock.c:1554:
+		/* this unhold undoes the original ref from create_lkb()
+		   so this leads to the lkb being freed */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1598: FILE: drivers/dlm/lock.c:1554:
+		   so this leads to the lkb being freed */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1644: FILE: drivers/dlm/lock.c:1600:
+/* called by grant_pending_locks() which means an async grant message must
+   be sent to the requesting node in addition to granting the lock if the

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1645: FILE: drivers/dlm/lock.c:1601:
+   lkb belongs to a remote node. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1745: FILE: drivers/dlm/lock.c:1701:
+	/* if lkb is on the convert queue and is preventing the first
+	   from being granted, then there's deadlock and we demote lkb.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1747: FILE: drivers/dlm/lock.c:1703:
+	   converting lock can be granted. */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's8' over 'int8_t'
#1773: FILE: drivers/dlm/lock.c:1729:
+	int8_t conv = (lkb->lkb_grmode != DLM_LOCK_IV);

WARNING:TYPO_SPELLING: 'theis' may be misspelled - perhaps 'this'?
#1781: FILE: drivers/dlm/lock.c:1737:
+	 * tells the Lock Manager to expedite theis request by not considering
 	                                      ^^^^^

WARNING:TYPO_SPELLING: 'indefinate' may be misspelled - perhaps 'indefinite'?
#1818: FILE: drivers/dlm/lock.c:1774:
+	 * turn, can lead to a phenomenon known as "indefinate postponement".
 	                                            ^^^^^^^^^^

WARNING:TYPO_SPELLING: 'servce' may be misspelled - perhaps 'service'?
#1825: FILE: drivers/dlm/lock.c:1781:
+	 * being ordered on a "first come first servce" basis.
 	                                        ^^^^^^

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1905: FILE: drivers/dlm/lock.c:1861:
+	uint32_t flags = lkb->lkb_exflags;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's8' over 'int8_t'
#1907: FILE: drivers/dlm/lock.c:1863:
+	int8_t alt = 0, rqmode = lkb->lkb_rqmode;

ERROR:CODE_INDENT: code indent should use tabs where possible
#1973: FILE: drivers/dlm/lock.c:1929:
+                else$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1973: FILE: drivers/dlm/lock.c:1929:
+                else$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'lkb->lkb_highbast < high'
#2001: FILE: drivers/dlm/lock.c:1957:
+		if (lkb->lkb_bastaddr && (lkb->lkb_highbast < high) &&
+		    !__dlm_compat_matrix[lkb->lkb_grmode+1][high+1]) {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2002: FILE: drivers/dlm/lock.c:1958:
+		    !__dlm_compat_matrix[lkb->lkb_grmode+1][high+1]) {
 		                                        ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2002: FILE: drivers/dlm/lock.c:1958:
+		    !__dlm_compat_matrix[lkb->lkb_grmode+1][high+1]) {
 		                                                ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2118: FILE: drivers/dlm/lock.c:2074:
+
+

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2133: FILE: drivers/dlm/lock.c:2089:
+ * ^I^I^I^Isend_common_reply$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2142: FILE: drivers/dlm/lock.c:2098:
+static int create_message(struct dlm_rsb *r, int to_nodeid, int mstype,
+		struct dlm_message **ms_ret, struct dlm_mhandle **mh_ret)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2155: FILE: drivers/dlm/lock.c:2111:
+	/* get_buffer gives us a message handle (mh) that we need to
+	   pass into lowcomms_commit and a message buffer (mb) that we

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2156: FILE: drivers/dlm/lock.c:2112:
+	   write our data into */

CHECK:SPACING: No space is necessary after a cast
#2164: FILE: drivers/dlm/lock.c:2120:
+	ms = (struct dlm_message *) mb;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2202: FILE: drivers/dlm/lock.c:2158:
+	/* m_result and m_bastmode are set from function args,
+	   not from lkb fields */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2202: FILE: drivers/dlm/lock.c:2158:
+	   not from lkb fields */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2216: FILE: drivers/dlm/lock.c:2172:
+^I$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2258: FILE: drivers/dlm/lock.c:2214:
+/* FIXME: if this lkb is the only lock we hold on the rsb, then set
+   MASTER_UNCERTAIN to force the next request on the rsb to confirm

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2259: FILE: drivers/dlm/lock.c:2215:
+   that the master is still correct. */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2260: FILE: drivers/dlm/lock.c:2216:
+   $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2260: FILE: drivers/dlm/lock.c:2216:
+   $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2422: FILE: drivers/dlm/lock.c:2378:
+/* which args we save from a received message depends heavily on the type
+   of message, unlike the send side where we can safely send everything about

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2423: FILE: drivers/dlm/lock.c:2379:
+   the lkb for any type of message */

ERROR:CODE_INDENT: code indent should use tabs where possible
#2429: FILE: drivers/dlm/lock.c:2385:
+^I^I         (ms->m_flags & 0x0000FFFF);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2436: FILE: drivers/dlm/lock.c:2392:
+^I^I         (ms->m_flags & 0x0000FFFF);$

CHECK:SPACING: No space is necessary after a cast
#2479: FILE: drivers/dlm/lock.c:2435:
+	lkb->lkb_bastaddr = (void *) (long) (ms->m_asts & AST_BAST);

CHECK:SPACING: No space is necessary after a cast
#2480: FILE: drivers/dlm/lock.c:2436:
+	lkb->lkb_astaddr = (void *) (long) (ms->m_asts & AST_COMP);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2536: FILE: drivers/dlm/lock.c:2492:
+/* We fill in the stub-lkb fields with the info that send_xxxx_reply()
+   uses to send a reply and that the remote end uses to process the reply. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2536: FILE: drivers/dlm/lock.c:2492:
+   uses to send a reply and that the remote end uses to process the reply. */

WARNING:LINE_SPACING: Missing a blank line after declarations
#2541: FILE: drivers/dlm/lock.c:2497:
+	struct dlm_lkb *lkb = &ls->ls_stub_lkb;
+	lkb->lkb_nodeid = ms->m_header.h_nodeid;

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'receive_grant', this function's name, in a string
#2697: FILE: drivers/dlm/lock.c:2653:
+		log_error(ls, "receive_grant no lkb");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'receive_bast', this function's name, in a string
#2724: FILE: drivers/dlm/lock.c:2680:
+		log_error(ls, "receive_bast no lkb");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'receive_request_reply', this function's name, in a string
#2789: FILE: drivers/dlm/lock.c:2745:
+		log_error(ls, "receive_request_reply no lkb");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'receive_request_reply', this function's name, in a string
#2796: FILE: drivers/dlm/lock.c:2752:
+		log_error(ls, "receive_request_reply not on waiters");

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2810: FILE: drivers/dlm/lock.c:2766:
+		/* request would block (be queued) on remote master;
+		   the unhold undoes the original ref from create_lkb()

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2811: FILE: drivers/dlm/lock.c:2767:
+		   so it leads to the lkb being freed */

CHECK:BRACES: braces {} should be used on all arms of this statement
#2822: FILE: drivers/dlm/lock.c:2778:
+		if (error)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2824: FILE: drivers/dlm/lock.c:2780:
+		else {

ERROR:CODE_INDENT: code indent should use tabs where possible
#2836: FILE: drivers/dlm/lock.c:2792:
+^I^I           log_print("receive_request_reply error %d", error);$

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'receive_request_reply', this function's name, in a string
#2836: FILE: drivers/dlm/lock.c:2792:
+		           log_print("receive_request_reply error %d", error);

ERROR:CODE_INDENT: code indent should use tabs where possible
#2837: FILE: drivers/dlm/lock.c:2793:
+^I^I           dlm_print_lkb(lkb);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2838: FILE: drivers/dlm/lock.c:2794:
+^I^I           dlm_print_rsb(r););$

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'receive_request_reply', this function's name, in a string
#2846: FILE: drivers/dlm/lock.c:2802:
+		log_error(ls, "receive_request_reply unknown error %d", error);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'receive_convert_reply', this function's name, in a string
#2900: FILE: drivers/dlm/lock.c:2856:
+		log_error(ls, "receive_convert_reply no lkb");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'receive_convert_reply', this function's name, in a string
#2907: FILE: drivers/dlm/lock.c:2863:
+		log_error(ls, "receive_convert_reply not on waiters");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'receive_unlock_reply', this function's name, in a string
#2948: FILE: drivers/dlm/lock.c:2904:
+		log_error(ls, "receive_unlock_reply no lkb");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'receive_unlock_reply', this function's name, in a string
#2955: FILE: drivers/dlm/lock.c:2911:
+		log_error(ls, "receive_unlock_reply not on waiters");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'receive_cancel_reply', this function's name, in a string
#2996: FILE: drivers/dlm/lock.c:2952:
+		log_error(ls, "receive_cancel_reply no lkb");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'receive_cancel_reply', this function's name, in a string
#3003: FILE: drivers/dlm/lock.c:2959:
+		log_error(ls, "receive_cancel_reply not on waiters");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'receive_lookup_reply', this function's name, in a string
#3020: FILE: drivers/dlm/lock.c:2976:
+		log_error(ls, "receive_lookup_reply no lkb");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'receive_lookup_reply', this function's name, in a string
#3026: FILE: drivers/dlm/lock.c:2982:
+		log_error(ls, "receive_lookup_reply not on waiters");

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#3031: FILE: drivers/dlm/lock.c:2987:
+	/* this is the value returned by dlm_dir_lookup on dir node
+	   FIXME: will a non-zero error ever be returned? */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3031: FILE: drivers/dlm/lock.c:2987:
+	   FIXME: will a non-zero error ever be returned? */

CHECK:BRACES: braces {} should be used on all arms of this statement
#3039: FILE: drivers/dlm/lock.c:2995:
+	if (ret_nodeid == dlm_our_nodeid())
[...]
+	else {
[...]

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#3040: FILE: drivers/dlm/lock.c:2996:
+		r->res_nodeid = ret_nodeid = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:BRACES: Unbalanced braces around else statement
#3041: FILE: drivers/dlm/lock.c:2997:
+	else {

CHECK:SPACING: No space is necessary after a cast
#3059: FILE: drivers/dlm/lock.c:3015:
+	struct dlm_message *ms = (struct dlm_message *) hd;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#3074: FILE: drivers/dlm/lock.c:3030:
+	/* recovery may have just ended leaving a bunch of backed-up requests
+	   in the requestqueue; wait while dlm_recoverd clears them */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3074: FILE: drivers/dlm/lock.c:3030:
+	   in the requestqueue; wait while dlm_recoverd clears them */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#3080: FILE: drivers/dlm/lock.c:3036:
+	/* recovery may have just started while there were a bunch of
+	   in-flight requests -- save them in requestqueue to be processed

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3084: FILE: drivers/dlm/lock.c:3040:
+	   recovery operation is starting. */

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#3100: FILE: drivers/dlm/lock.c:3056:
+	switch (ms->m_type) {
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3174: FILE: drivers/dlm/lock.c:3130:
+
+

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#3181: FILE: drivers/dlm/lock.c:3137:
+	if ((lkb->lkb_grmode==DLM_LOCK_PR && lkb->lkb_rqmode==DLM_LOCK_CW) ||
 	                    ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#3181: FILE: drivers/dlm/lock.c:3137:
+	if ((lkb->lkb_grmode==DLM_LOCK_PR && lkb->lkb_rqmode==DLM_LOCK_CW) ||
 	                                                    ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#3182: FILE: drivers/dlm/lock.c:3138:
+	    (lkb->lkb_rqmode==DLM_LOCK_PR && lkb->lkb_grmode==DLM_LOCK_CW))
 	                    ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#3182: FILE: drivers/dlm/lock.c:3138:
+	    (lkb->lkb_rqmode==DLM_LOCK_PR && lkb->lkb_grmode==DLM_LOCK_CW))
 	                                                    ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#3213: FILE: drivers/dlm/lock.c:3169:
+/* Recovery for locks that are waiting for replies from nodes that are now
+   gone.  We can just complete unlocks and cancels by faking a reply from the

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3216: FILE: drivers/dlm/lock.c:3172:
+   unlocks.  Conversions between PR and CW need special attention. */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#3217: FILE: drivers/dlm/lock.c:3173:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3217: FILE: drivers/dlm/lock.c:3173:
+ $

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#3232: FILE: drivers/dlm/lock.c:3188:
+		switch (lkb->lkb_wait_type) {
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#3259: FILE: drivers/dlm/lock.c:3215:
+			/* all outstanding lookups, regardless of dest.
+			   will be resent after recovery is done */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3259: FILE: drivers/dlm/lock.c:3215:
+			   will be resent after recovery is done */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#3293: FILE: drivers/dlm/lock.c:3249:
+/* Deal with lookups and lkb's marked RESEND from _pre.  We may now be the
+   master or dir-node for r.  Processing the lkb may result in it being placed

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3294: FILE: drivers/dlm/lock.c:3250:
+   back on waiters. */

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#3319: FILE: drivers/dlm/lock.c:3275:
+		switch (mstype) {
+

CHECK:SPACING: No space is necessary after a cast
#3446: FILE: drivers/dlm/lock.c:3402:
+	struct rcom_lock *rl = (struct rcom_lock *) rc->rc_buf;

CHECK:SPACING: No space is necessary after a cast
#3459: FILE: drivers/dlm/lock.c:3415:
+	lkb->lkb_bastaddr = (void *) (long) (rl->rl_asts & AST_BAST);

CHECK:SPACING: No space is necessary after a cast
#3460: FILE: drivers/dlm/lock.c:3416:
+	lkb->lkb_astaddr = (void *) (long) (rl->rl_asts & AST_COMP);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#3466: FILE: drivers/dlm/lock.c:3422:
+		memcpy(lkb->lkb_range, rl->rl_range, 4*sizeof(uint64_t));
 		                                      ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#3477: FILE: drivers/dlm/lock.c:3433:
+	/* Conversions between PR and CW (middle modes) need special handling.
+	   The real granted mode of these converting locks cannot be determined

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3478: FILE: drivers/dlm/lock.c:3434:
+	   until all locks have been rebuilt on the rsb (recover_conversion) */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#3490: FILE: drivers/dlm/lock.c:3446:
+/* This lkb may have been recovered in a previous aborted recovery so we need
+   to check if the rsb already has an lkb with the given remote nodeid/lkid.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3493: FILE: drivers/dlm/lock.c:3449:
+   back the rcom_lock struct we got but with the remid field filled in. */

CHECK:SPACING: No space is necessary after a cast
#3497: FILE: drivers/dlm/lock.c:3453:
+	struct rcom_lock *rl = (struct rcom_lock *) rc->rc_buf;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#3535: FILE: drivers/dlm/lock.c:3491:
+	/* this is the new value returned to the lock holder for
+	   saving in its process-copy lkb */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3535: FILE: drivers/dlm/lock.c:3491:
+	   saving in its process-copy lkb */

CHECK:SPACING: No space is necessary after a cast
#3548: FILE: drivers/dlm/lock.c:3504:
+	struct rcom_lock *rl = (struct rcom_lock *) rc->rc_buf;

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#3570: FILE: drivers/dlm/lock.c:3526:
+		/* fall through */

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'dlm_recover_process_copy', this function's name, in a string
#3575: FILE: drivers/dlm/lock.c:3531:
+		log_error(ls, "dlm_recover_process_copy unknown error %d %x",

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#3580: FILE: drivers/dlm/lock.c:3536:
+	/* an ack for dlm_recover_locks() which waits for replies from
+	   all the locks it sends to new masters */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3580: FILE: drivers/dlm/lock.c:3536:
+	   all the locks it sends to new masters */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3590: FILE: drivers/dlm/lock.c:3546:
+
+

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000188052.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 47 errors, 142 warnings, 53 checks, 3546 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000188052.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
