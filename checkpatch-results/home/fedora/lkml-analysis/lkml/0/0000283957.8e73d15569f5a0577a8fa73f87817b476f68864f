WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#80: FILE: include/linux/fs.h:697:
+	 * may already be invalid. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#83: FILE: include/linux/fs.h:700:
+	 * after successful call to get_sb_entry() */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#96: FILE: include/linux/fs.h:751:
+						 * by ->s_umount. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#119: FILE: include/linux/fs.h:774:
+			       * with silly kobject.h macros */

WARNING:SPACING: Unnecessary space before function pointer arguments
#127: FILE: include/linux/fs.h:782:
+	ssize_t (*show) (struct super_block *,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#127: FILE: include/linux/fs.h:782:
+	ssize_t (*show) (struct super_block *,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct fs_kobject *' should also have an identifier name
#127: FILE: include/linux/fs.h:782:
+	ssize_t (*show) (struct super_block *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct fs_kattr *' should also have an identifier name
#127: FILE: include/linux/fs.h:782:
+	ssize_t (*show) (struct super_block *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#127: FILE: include/linux/fs.h:782:
+	ssize_t (*show) (struct super_block *,

WARNING:SPACING: Unnecessary space before function pointer arguments
#129: FILE: include/linux/fs.h:784:
+	ssize_t (*store) (struct super_block *, struct fs_kobject *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#129: FILE: include/linux/fs.h:784:
+	ssize_t (*store) (struct super_block *, struct fs_kobject *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct fs_kobject *' should also have an identifier name
#129: FILE: include/linux/fs.h:784:
+	ssize_t (*store) (struct super_block *, struct fs_kobject *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct fs_kattr *' should also have an identifier name
#129: FILE: include/linux/fs.h:784:
+	ssize_t (*store) (struct super_block *, struct fs_kobject *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#129: FILE: include/linux/fs.h:784:
+	ssize_t (*store) (struct super_block *, struct fs_kobject *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#129: FILE: include/linux/fs.h:784:
+	ssize_t (*store) (struct super_block *, struct fs_kobject *,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#135: FILE: include/linux/fs.h:790:
+int fs_kobject_register(struct super_block *s, struct fs_kobject * fskobj);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#136: FILE: include/linux/fs.h:791:
+void fs_kobject_unregister(struct fs_kobject * fskobj);

WARNING:CONST_STRUCT: struct sysfs_ops should normally be const
#138: FILE: include/linux/fs.h:793:
+extern struct sysfs_ops fs_attr_ops;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "entry->type"
#188: FILE: fs/super.c:132:
+	if (entry->type != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#195: FILE: fs/super.c:139:
+ * local in get_sb_entry(). */

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#262: FILE: fs/super.c:206:
+int fs_kobject_register(struct super_block *s, struct fs_kobject * fskobj)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#279: FILE: fs/super.c:223:
+void fs_kobject_unregister(struct fs_kobject * fskobj)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "fskattr->show"
#308: FILE: fs/super.c:252:
+		if (fskattr->show != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "fskattr->store"
#340: FILE: fs/super.c:284:
+		if (fskattr->store != NULL)

WARNING:CONST_STRUCT: struct sysfs_ops should normally be const
#351: FILE: fs/super.c:295:
+struct sysfs_ops fs_attr_ops = {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#359: FILE: fs/super.c:303:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000283957.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 4 errors, 18 warnings, 4 checks, 302 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000283957.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
