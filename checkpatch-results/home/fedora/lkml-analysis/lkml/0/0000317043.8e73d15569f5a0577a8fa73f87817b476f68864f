WARNING:TYPO_SPELLING: 'followings' may be misspelled - perhaps 'following'?
#45: 
TODO list is followings.
             ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'EXTRAVERSION' may be misspelled - perhaps 'EXTROVERSION'?
#73: FILE: Makefile:4:
+EXTRAVERSION = mem-hotplug
 ^^^^^^^^^^^^

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#84: FILE: arch/i386/Kconfig:709:
+config MEMHOTPLUGTEST
+	bool "Memory hotplug test"
+	default n
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#108: FILE: arch/i386/kernel/setup.c:117:
+extern unsigned long node_end_pfn[MAX_NUMNODES];

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#144: FILE: arch/i386/mm/discontig.c:119:
+	printk("NUMA - single node, flat memory mode, but broken in several blocks\n");

CHECK:BRACES: braces {} should be used on all arms of this statement
#153: FILE: arch/i386/mm/discontig.c:128:
+		if (pfn < max_pfn)
[...]
+		else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#155: FILE: arch/i386/mm/discontig.c:130:
+		else {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#158: FILE: arch/i386/mm/discontig.c:133:
+			printk("total %d blocks, max %d\n", i, (int)max_pfn);

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#164: FILE: arch/i386/mm/discontig.c:139:
+	/* Fill in the physnode_map with our simplistic memory model,
+	   * all memory is in node 0.

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#165: FILE: arch/i386/mm/discontig.c:140:
+	   * all memory is in node 0.
+	 */

ERROR:SPACING: space prohibited after that open parenthesis '('
#293: FILE: arch/i386/mm/discontig.c:496:
+		set_highmem_pages_init_core( nid, bad_ppro);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited before that close parenthesis ')'
#331: FILE: include/asm-i386/mmzone.h:131:
+extern int get_memcfg_numa_blks(void );

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#331: FILE: include/asm-i386/mmzone.h:131:
+extern int get_memcfg_numa_blks(void );

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void' should also have an identifier name
#331: FILE: include/asm-i386/mmzone.h:131:
+extern int get_memcfg_numa_blks(void );

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#369: FILE: include/linux/mm.h:224:
+			printk("Page: %lx ", (long)p);			\

ERROR:SPACING: space required before the open parenthesis '('
#370: FILE: include/linux/mm.h:225:
+			for(i = 0; i < sizeof(struct page); i++)	\

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#371: FILE: include/linux/mm.h:226:
+				printk(" %02x", ((unsigned char *)p)[i]); \

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#372: FILE: include/linux/mm.h:227:
+			printk("\n");					\

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#373: FILE: include/linux/mm.h:228:
+			BUG();				\

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#383: FILE: include/linux/mm.h:633:
+#define	page_trace(p)	page_trace_func(p, __FUNCTION__, __LINE__)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#384: FILE: include/linux/mm.h:634:
+extern void page_trace_func(const struct page *, const char *, int);

ERROR:SPACING: space required before the open parenthesis '('
#386: FILE: include/linux/mm.h:636:
+#define	page_trace(p)	do { } while(0)

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#389: FILE: include/linux/mm.h:639:
+#define	page_trace(p)	page_trace_func(p, __FUNCTION__, __LINE__)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#390: FILE: include/linux/mm.h:640:
+extern void page_trace_func(const struct page *, const char *, int);

ERROR:SPACING: space required before the open parenthesis '('
#392: FILE: include/linux/mm.h:642:
+#define	page_trace(p)	do { } while(0)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#393: FILE: include/linux/mm.h:643:
+#endif /* CONFIG_MEMHOTPLUGTEST */ $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#430: FILE: include/linux/mmzone.h:271:
+extern void setup_per_zone_pages_min_add_node(int);

ERROR:SPACING: space prohibited after that open parenthesis '('
#443: FILE: include/linux/mmzone.h:351:
+	node_to_memblk( zone_to_nid(zone) )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#443: FILE: include/linux/mmzone.h:351:
+	node_to_memblk( zone_to_nid(zone) )

CHECK:LINE_SPACING: Please don't use multiple blank lines
#446: FILE: include/linux/mmzone.h:354:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Unbalanced braces around else statement
#467: FILE: include/linux/mmzone.h:387:
+	else {

ERROR:SPACING: space prohibited after that open parenthesis '('
#469: FILE: include/linux/mmzone.h:389:
+		while ( pgdat->pgdat_next ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#469: FILE: include/linux/mmzone.h:389:
+		while ( pgdat->pgdat_next ) {

ERROR:SPACING: space required before the open brace '{'
#471: FILE: include/linux/mmzone.h:391:
+			if ( node_online(pgdat->node_id) ){

ERROR:SPACING: space prohibited after that open parenthesis '('
#471: FILE: include/linux/mmzone.h:391:
+			if ( node_online(pgdat->node_id) ){

ERROR:SPACING: space prohibited before that close parenthesis ')'
#471: FILE: include/linux/mmzone.h:391:
+			if ( node_online(pgdat->node_id) ){

CHECK:BRACES: Unbalanced braces around else statement
#481: FILE: include/linux/mmzone.h:401:
+	} else

WARNING:IF_1: Consider removing the #if 1 and its #endif
#516: FILE: mm/page_alloc.c:684:
+#if 1 // debug

WARNING:LINE_SPACING: Missing a blank line after declarations
#521: FILE: mm/page_alloc.c:689:
+		int idx = page - z->zone_mem_map;
+		if (idx < 0 || idx >= z->spanned_pages) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#522: FILE: mm/page_alloc.c:690:
+			printk("0x%08x %d\n", (int)(page->flags >> ZONE_SHIFT), idx);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#523: FILE: mm/page_alloc.c:691:
+			BUG();

ERROR:SPACING: space required before the open parenthesis '('
#565: FILE: mm/page_alloc.c:1135:
+		for(; k >= 0; k--) {

ERROR:SPACING: space prohibited after that open parenthesis '('
#567: FILE: mm/page_alloc.c:1137:
+			if ( !node_online(zone_to_nid(zone)) )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#567: FILE: mm/page_alloc.c:1137:
+			if ( !node_online(zone_to_nid(zone)) )

ERROR:SPACING: space prohibited after that open parenthesis '('
#573: FILE: mm/page_alloc.c:1143:
+				if ( node_online( zone_to_nid(zone) ) &&

ERROR:SPACING: space prohibited before that close parenthesis ')'
#573: FILE: mm/page_alloc.c:1143:
+				if ( node_online( zone_to_nid(zone) ) &&

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#574: FILE: mm/page_alloc.c:1144:
+				if ( node_online( zone_to_nid(zone) ) &&
+				     zone->present_pages )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#574: FILE: mm/page_alloc.c:1144:
+				     zone->present_pages )

ERROR:SPACING: space prohibited after that open parenthesis '('
#579: FILE: mm/page_alloc.c:1149:
+				if ( node_online( zone_to_nid(zone) ) &&

ERROR:SPACING: space prohibited before that close parenthesis ')'
#579: FILE: mm/page_alloc.c:1149:
+				if ( node_online( zone_to_nid(zone) ) &&

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#580: FILE: mm/page_alloc.c:1150:
+				if ( node_online( zone_to_nid(zone) ) &&
+				     zone->present_pages )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#580: FILE: mm/page_alloc.c:1150:
+				     zone->present_pages )

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#594: FILE: mm/page_alloc.c:1212:
+static void calculate_zone_totalpages(struct pglist_data *pgdat,
+		unsigned long *zones_size, unsigned long *zholes_size)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#613: FILE: mm/page_alloc.c:1259:
+		pgdat->valid_addr_bitmap = (unsigned long *)kmalloc(size,GFP_KERNEL);
 		                                                        ^

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#613: FILE: mm/page_alloc.c:1259:
+		pgdat->valid_addr_bitmap = (unsigned long *)kmalloc(size,GFP_KERNEL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#627: FILE: mm/page_alloc.c:1273:
+void memmap_init_zone(struct page *start, unsigned long size, int nid,
+		unsigned long zone, unsigned long start_pfn)

WARNING:LONG_LINE_COMMENT: line length of 107 exceeds 100 columns
#640: FILE: mm/page_alloc.c:1325:
+										/* only node 0 is active */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE_COMMENT: line length of 113 exceeds 100 columns
#641: FILE: mm/page_alloc.c:1326:
+		if ( nid ){ 							/*  node 1-... are node active */

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#641: FILE: mm/page_alloc.c:1326:
+^I^Iif ( nid ){ ^I^I^I^I^I^I^I/*  node 1-... are node active */$

ERROR:SPACING: space required before the open brace '{'
#641: FILE: mm/page_alloc.c:1326:
+		if ( nid ){ 							/*  node 1-... are node active */

ERROR:SPACING: space prohibited after that open parenthesis '('
#641: FILE: mm/page_alloc.c:1326:
+		if ( nid ){ 							/*  node 1-... are node active */

ERROR:SPACING: space prohibited before that close parenthesis ')'
#641: FILE: mm/page_alloc.c:1326:
+		if ( nid ){ 							/*  node 1-... are node active */

WARNING:LONG_LINE_COMMENT: line length of 115 exceeds 100 columns
#642: FILE: mm/page_alloc.c:1327:
+										/* XXX : This should be changed. */

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#650: FILE: mm/page_alloc.c:1335:
+			for (cpu = 0; cpu < NR_CPUS; cpu++) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#685: FILE: mm/page_alloc.c:1404:
+		printk("  %s zone: %lu pages, LIFO batch:%lu start:%lu\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#686: FILE: mm/page_alloc.c:1405:
+		printk("  %s zone: %lu pages, LIFO batch:%lu start:%lu\n",
+				zone_names[j], realsize, batch, zone_start_pfn);

ERROR:SPACING: space required before the open parenthesis '('
#706: FILE: mm/page_alloc.c:1502:
+	if(!nid)memblk_set_online(node_to_memblk(nid));		/* only node 0 is online */

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#706: FILE: mm/page_alloc.c:1502:
+	if(!nid)memblk_set_online(node_to_memblk(nid));		/* only node 0 is online */

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:CODE_INDENT: code indent should use tabs where possible
#759: FILE: mm/page_alloc.c:1796:
+                and added node ID is next of last ID.$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#759: FILE: mm/page_alloc.c:1796:
+	/* XXX: This function assume that nid is sequential value,
+                and added node ID is next of last ID.

ERROR:CODE_INDENT: code indent should use tabs where possible
#760: FILE: mm/page_alloc.c:1797:
+                But, node ID might be skippable for hotplug */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#760: FILE: mm/page_alloc.c:1797:
+                But, node ID might be skippable for hotplug */

ERROR:SPACING: spaces required around that '>=' (ctx:VxV)
#764: FILE: mm/page_alloc.c:1801:
+	for( i = numnodes * MAX_NR_ZONES ;  i>=1 ;  i--){
 	                                     ^

ERROR:SPACING: space required before the open brace '{'
#764: FILE: mm/page_alloc.c:1801:
+	for( i = numnodes * MAX_NR_ZONES ;  i>=1 ;  i--){

ERROR:SPACING: space prohibited after that open parenthesis '('
#764: FILE: mm/page_alloc.c:1801:
+	for( i = numnodes * MAX_NR_ZONES ;  i>=1 ;  i--){

ERROR:SPACING: space required before the open parenthesis '('
#764: FILE: mm/page_alloc.c:1801:
+	for( i = numnodes * MAX_NR_ZONES ;  i>=1 ;  i--){

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#765: FILE: mm/page_alloc.c:1802:
+		zone=zonelist->zones[i-1];
 		    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#765: FILE: mm/page_alloc.c:1802:
+		zone=zonelist->zones[i-1];
 		                      ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#766: FILE: mm/page_alloc.c:1803:
+		if( !zone )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#766: FILE: mm/page_alloc.c:1803:
+		if( !zone )

ERROR:SPACING: space required before the open parenthesis '('
#766: FILE: mm/page_alloc.c:1803:
+		if( !zone )

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#768: FILE: mm/page_alloc.c:1805:
+		if( zone_to_nid(zone) == nid -1 )
 		                             ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#768: FILE: mm/page_alloc.c:1805:
+		if( zone_to_nid(zone) == nid -1 )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#768: FILE: mm/page_alloc.c:1805:
+		if( zone_to_nid(zone) == nid -1 )

ERROR:SPACING: space required before the open parenthesis '('
#768: FILE: mm/page_alloc.c:1805:
+		if( zone_to_nid(zone) == nid -1 )

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#773: FILE: mm/page_alloc.c:1810:
+
+}

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#778: FILE: mm/page_alloc.c:1815:
+	unsigned long node, p_node, q, j=0;
 	                                ^

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#784: FILE: mm/page_alloc.c:1821:
+	j= build_zonelists_node( NODE_DATA(nid), zonelist, j, ZONE_HIGHMEM);
 	 ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#784: FILE: mm/page_alloc.c:1821:
+	j= build_zonelists_node( NODE_DATA(nid), zonelist, j, ZONE_HIGHMEM);

ERROR:SPACING: space prohibited after that open parenthesis '('
#786: FILE: mm/page_alloc.c:1823:
+	for ( node = nid + 1; node < numnodes; node++)

ERROR:SPACING: space prohibited after that open parenthesis '('
#787: FILE: mm/page_alloc.c:1824:
+		j = build_zonelists_node( NODE_DATA(node), zonelist, j, ZONE_HIGHMEM);

ERROR:SPACING: space prohibited after that open parenthesis '('
#789: FILE: mm/page_alloc.c:1826:
+		j = build_zonelists_node( NODE_DATA(node), zonelist, j, ZONE_HIGHMEM);

ERROR:SPACING: space required before the open brace '{'
#792: FILE: mm/page_alloc.c:1829:
+	for( p_node = 0; p_node < numnodes ; p_node++){

ERROR:SPACING: space prohibited after that open parenthesis '('
#792: FILE: mm/page_alloc.c:1829:
+	for( p_node = 0; p_node < numnodes ; p_node++){

ERROR:SPACING: space required before the open parenthesis '('
#792: FILE: mm/page_alloc.c:1829:
+	for( p_node = 0; p_node < numnodes ; p_node++){

ERROR:SPACING: space prohibited after that open parenthesis '('
#793: FILE: mm/page_alloc.c:1830:
+		if( p_node == nid ) continue;   /* already set */

ERROR:SPACING: space prohibited before that close parenthesis ')'
#793: FILE: mm/page_alloc.c:1830:
+		if( p_node == nid ) continue;   /* already set */

ERROR:SPACING: space required before the open parenthesis '('
#793: FILE: mm/page_alloc.c:1830:
+		if( p_node == nid ) continue;   /* already set */

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#793: FILE: mm/page_alloc.c:1830:
+		if( p_node == nid ) continue;   /* already set */

ERROR:SPACING: space prohibited after that open parenthesis '('
#796: FILE: mm/page_alloc.c:1833:
+		q = search_insert_zonelist( zonelist, nid);

ERROR:SPACING: space required one side of that '--' (ctx:WxW)
#798: FILE: mm/page_alloc.c:1835:
+		for ( j = numnodes * MAX_NR_ZONES ; j > q ; j -- )
 		                                              ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#798: FILE: mm/page_alloc.c:1835:
+		for ( j = numnodes * MAX_NR_ZONES ; j > q ; j -- )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#798: FILE: mm/page_alloc.c:1835:
+		for ( j = numnodes * MAX_NR_ZONES ; j > q ; j -- )

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#799: FILE: mm/page_alloc.c:1836:
+			zonelist->zones[j] = zonelist->zones[j-1];
 			                                      ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#805: FILE: mm/page_alloc.c:1842:
+static void free_area_add_core(struct pglist_data *pgdat,
+		unsigned long *zones_size, unsigned long *zholes_size)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#808: FILE: mm/page_alloc.c:1845:
+	const unsigned long zone_required_alignment = 1UL << (MAX_ORDER-1);
 	                                                               ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#823: FILE: mm/page_alloc.c:1860:
+		realsize = size = zones_size[ZONE_HIGHMEM];

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#849: FILE: mm/page_alloc.c:1886:
+		for (cpu = 0; cpu < NR_CPUS; cpu++) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#866: FILE: mm/page_alloc.c:1903:
+		printk("  %s zone: %lu pages, LIFO batch:%lu start:%lu\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#867: FILE: mm/page_alloc.c:1904:
+		printk("  %s zone: %lu pages, LIFO batch:%lu start:%lu\n",
+				zone_names[ZONE_HIGHMEM], realsize, batch, zone_start_pfn);

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#881: FILE: mm/page_alloc.c:1918:
+		zone->wait_table = (wait_queue_head_t *)kmalloc(zone->wait_table_size

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#881: FILE: mm/page_alloc.c:1918:
+		zone->wait_table = (wait_queue_head_t *)kmalloc(zone->wait_table_size
+						* sizeof(wait_queue_head_t), GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

ERROR:SPACING: space required before the open parenthesis '('
#886: FILE: mm/page_alloc.c:1923:
+		for(i = 0; i < zone->wait_table_size; ++i)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#889: FILE: mm/page_alloc.c:1926:
+		pgdat->nr_zones = ZONE_HIGHMEM+1;
 		                              ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#894: FILE: mm/page_alloc.c:1931:
+		if ((zone_start_pfn) & (zone_required_alignment-1))
 		                                               ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#895: FILE: mm/page_alloc.c:1932:
+			printk("BUG: wrong zone alignment, it will crash\n");

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#897: FILE: mm/page_alloc.c:1934:
+		memset( lmem_map, 0, sizeof(struct page)*size);
 		                                        ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#897: FILE: mm/page_alloc.c:1934:
+		memset( lmem_map, 0, sizeof(struct page)*size);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#904: FILE: mm/page_alloc.c:1941:
+			if (i == MAX_ORDER-1) {
 			                  ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#932: FILE: mm/page_alloc.c:1969:
+			bitmap_size = (size-1) >> (i+4);
 			                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#932: FILE: mm/page_alloc.c:1969:
+			bitmap_size = (size-1) >> (i+4);
 			                            ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#933: FILE: mm/page_alloc.c:1970:
+			bitmap_size = LONG_ALIGN(bitmap_size+1);
 			                                    ^

CHECK:SPACING: No space is necessary after a cast
#935: FILE: mm/page_alloc.c:1972:
+			  (unsigned long *) kmalloc(bitmap_size, GFP_KERNEL);

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#935: FILE: mm/page_alloc.c:1972:
+			  (unsigned long *) kmalloc(bitmap_size, GFP_KERNEL);

ERROR:SPACING: space prohibited after that open parenthesis '('
#937: FILE: mm/page_alloc.c:1974:
+			memset( zone->free_area[i].map, 0, bitmap_size);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#943: FILE: mm/page_alloc.c:1980:
+extern int remap_one_node_kva(int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#943: FILE: mm/page_alloc.c:1980:
+extern int remap_one_node_kva(int);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#945: FILE: mm/page_alloc.c:1982:
+int free_area_add_node(int nid, struct pglist_data *pgdat,unsigned long *zones_size,
                                                          ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#946: FILE: mm/page_alloc.c:1983:
+int free_area_add_node(int nid, struct pglist_data *pgdat,unsigned long *zones_size,
+		unsigned long node_start_pfn, unsigned long *zholes_size)

ERROR:SPACING: space required before the open brace '{'
#953: FILE: mm/page_alloc.c:1990:
+	if(remap_one_node_kva(nid)){

ERROR:SPACING: space required before the open parenthesis '('
#953: FILE: mm/page_alloc.c:1990:
+	if(remap_one_node_kva(nid)){

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#954: FILE: mm/page_alloc.c:1991:
+	if(remap_one_node_kva(nid)){
+

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#961: FILE: mm/page_alloc.c:1998:
+
+}

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#964: FILE: mm/page_alloc.c:2001:
+extern unsigned long node_end_pfn[];

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#965: FILE: mm/page_alloc.c:2002:
+extern void set_highmem_pages_init_core(int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#965: FILE: mm/page_alloc.c:2002:
+extern void set_highmem_pages_init_core(int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#965: FILE: mm/page_alloc.c:2002:
+extern void set_highmem_pages_init_core(int, int);

ERROR:SPACING: space required before the open brace '{'
#972: FILE: mm/page_alloc.c:2009:
+	if (nid > numnodes){		/* XXX : nid should has continuity now */

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#974: FILE: mm/page_alloc.c:2011:
+		printk("nid=%d isn&t possible to enable \n",nid);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#974: FILE: mm/page_alloc.c:2011:
+		printk("nid=%d isn&t possible to enable \n",nid);
 		                                           ^

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#974: FILE: mm/page_alloc.c:2011:
+		printk("nid=%d isn&t possible to enable \n",nid);

ERROR:SPACING: space required before the open brace '{'
#978: FILE: mm/page_alloc.c:2015:
+	if (node_online(nid)){

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#979: FILE: mm/page_alloc.c:2016:
+		printk("nid=%d is already enable \n", nid);

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#979: FILE: mm/page_alloc.c:2016:
+		printk("nid=%d is already enable \n", nid);

ERROR:CODE_INDENT: code indent should use tabs where possible
#985: FILE: mm/page_alloc.c:2022:
+^I^I^I^I^I        However, this is emulation. */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#985: FILE: mm/page_alloc.c:2022:
+					/* XXX: This information should be got from firmware.
+					        However, this is emulation. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#985: FILE: mm/page_alloc.c:2022:
+					        However, this is emulation. */

ERROR:SPACING: space required before the open brace '{'
#986: FILE: mm/page_alloc.c:2023:
+	if( !zones_size[ZONE_HIGHMEM] ){

ERROR:SPACING: space prohibited after that open parenthesis '('
#986: FILE: mm/page_alloc.c:2023:
+	if( !zones_size[ZONE_HIGHMEM] ){

ERROR:SPACING: space prohibited before that close parenthesis ')'
#986: FILE: mm/page_alloc.c:2023:
+	if( !zones_size[ZONE_HIGHMEM] ){

ERROR:SPACING: space required before the open parenthesis '('
#986: FILE: mm/page_alloc.c:2023:
+	if( !zones_size[ZONE_HIGHMEM] ){

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#987: FILE: mm/page_alloc.c:2024:
+		printk("nid=%d is size 0\n",nid);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#987: FILE: mm/page_alloc.c:2024:
+		printk("nid=%d is size 0\n",nid);
 		                           ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#989: FILE: mm/page_alloc.c:2026:
+ ^I}$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#989: FILE: mm/page_alloc.c:2026:
+ ^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#989: FILE: mm/page_alloc.c:2026:
+ ^I}$

ERROR:SPACING: space prohibited after that open parenthesis '('
#1000: FILE: mm/page_alloc.c:2037:
+	rebuild_all_zonelist( nid);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1004: FILE: mm/page_alloc.c:2041:
+
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1007: FILE: mm/page_alloc.c:2044:
+static int mhtest_read(char *page, char **start, off_t off, int count,
+    int *eof, void *data)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1007: FILE: mm/page_alloc.c:2044:
+    int *eof, void *data)$

ERROR:SPACING: space required before the open parenthesis '('
#1014: FILE: mm/page_alloc.c:2051:
+	for(i = 0; ; i++) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!z"
#1016: FILE: mm/page_alloc.c:2053:
+		if (z == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#1018: FILE: mm/page_alloc.c:2055:
+		if (! z->present_pages)
 		    ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1022: FILE: mm/page_alloc.c:2059:
+		len = sprintf(p, "Zone %d: free %d, active %d, present %d\n", i,
+				 (int)z->free_pages, (int)z->nr_active, (int)z->present_pages);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1040: FILE: mm/page_alloc.c:2077:
+static int mhtest_write(struct file *file, const char *buffer,
+    unsigned long count, void *data)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1040: FILE: mm/page_alloc.c:2077:
+    unsigned long count, void *data)$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!p"
#1054: FILE: mm/page_alloc.c:2091:
+	if (p == NULL)

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#1058: FILE: mm/page_alloc.c:2095:
+	idx = simple_strtoul(p, NULL, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

ERROR:SPACING: space required before the open parenthesis '('
#1061: FILE: mm/page_alloc.c:2098:
+		for(i = 0; i < sizeof(page_trace_list) /

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!page_trace_list[i]"
#1063: FILE: mm/page_alloc.c:2100:
+			if (page_trace_list[i] == NULL) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1065: FILE: mm/page_alloc.c:2102:
+				printk("add trace %lx\n", (unsigned long)idx);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1068: FILE: mm/page_alloc.c:2105:
+		printk("page_trace_list is full (not added)\n");

ERROR:SPACING: space required before the open parenthesis '('
#1071: FILE: mm/page_alloc.c:2108:
+		for(i = 0; i < sizeof(page_trace_list) /

WARNING:ARRAY_SIZE: Prefer ARRAY_SIZE(page_trace_list)
#1075: FILE: mm/page_alloc.c:2112:
+		if (i == sizeof(page_trace_list) / sizeof(page_trace_list[0])) {

The ARRAY_SIZE(foo) macro should be preferred over
sizeof(foo)/sizeof(foo[0]) for finding number of elements in an
array.

The macro is defined in include/linux/kernel.h::

  #define ARRAY_SIZE(x) (sizeof(x) / sizeof((x)[0]))

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1076: FILE: mm/page_alloc.c:2113:
+			printk("not registered\n");

ERROR:SPACING: space required before the open parenthesis '('
#1079: FILE: mm/page_alloc.c:2116:
+		for(; i < sizeof(page_trace_list) /

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1086: FILE: mm/page_alloc.c:2123:
+		printk("Argument out of range\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1090: FILE: mm/page_alloc.c:2127:
+		printk("disable node = %d\n", (int)idx);	/* XXX */

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1095: FILE: mm/page_alloc.c:2132:
+		printk("enable node = %d\n", (int)idx);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1099: FILE: mm/page_alloc.c:2136:
+		/*
+		if (zone_table[idx] == NULL)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1114: FILE: mm/page_alloc.c:2151:
+		/*
+		if (zone_table[idx] == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!entry"
#1131: FILE: mm/page_alloc.c:2168:
+	if (entry == NULL)

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#1138: FILE: mm/page_alloc.c:2175:
+__initcall(procmhtest_init);

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#1140: FILE: mm/page_alloc.c:2177:
+void
+page_trace_func(const struct page *p, const char *func, int line) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required before the open parenthesis '('
#1144: FILE: mm/page_alloc.c:2181:
+	for(i = 0; i < sizeof(page_trace_list) /

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!page_trace_list[i]"
#1146: FILE: mm/page_alloc.c:2183:
+		if (page_trace_list[i] == NULL)

WARNING:ARRAY_SIZE: Prefer ARRAY_SIZE(page_trace_list)
#1151: FILE: mm/page_alloc.c:2188:
+	if (i == sizeof(page_trace_list) / sizeof(page_trace_list[0]))

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1154: FILE: mm/page_alloc.c:2191:
+	printk("Page %lx, %s %d\n", (unsigned long)p, func, line);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000317043.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 82 errors, 64 warnings, 42 checks, 1021 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000317043.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
