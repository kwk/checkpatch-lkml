WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mm_struct *' should also have an identifier name
#58: FILE: include/linux/rmap.h:41:
+int exec_rmap(struct mm_struct *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mm_struct *' should also have an identifier name
#59: FILE: include/linux/rmap.h:42:
+int dup_rmap(struct mm_struct *, struct mm_struct *oldmm);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mm_struct *' should also have an identifier name
#60: FILE: include/linux/rmap.h:43:
+void exit_rmap(struct mm_struct *);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#163: FILE: mm/rmap.c:45:
+};
+static kmem_cache_t *anonmm_cachep;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#172: FILE: mm/rmap.c:54:
+	anonmm_cachep = kmem_cache_create("anonmm",
+			sizeof(struct anonmm), 0, SLAB_PANIC, NULL, NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#229: FILE: mm/rmap.c:111:
+		BUG_ON(anonmm == anonhd);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#233: FILE: mm/rmap.c:115:
+			BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#237: FILE: mm/rmap.c:119:
+		BUG_ON(anonhd->mm);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#238: FILE: mm/rmap.c:120:
+		BUG_ON(!list_empty(&anonhd->list));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#247: FILE: mm/rmap.c:129:
+	BUG_ON(anonmm->mm);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#248: FILE: mm/rmap.c:130:
+	BUG_ON(anonmm == anonhd);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#252: FILE: mm/rmap.c:134:
+		BUG();

CHECK:SPACING: No space is necessary after a cast
#259: FILE: mm/rmap.c:141:
+	struct anonmm *anonmm = (struct anonmm *) page->mapping;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#274: FILE: mm/rmap.c:220:
+	struct anonmm *anonmm = (struct anonmm *) page->mapping;

CHECK:BRACES: braces {} should be used on all arms of this statement
#286: FILE: mm/rmap.c:232:
+	if (!anonmm->mm)
[...]
+	else if (anonmm->mm->rss) {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: No space is necessary after a cast
#311: FILE: mm/rmap.c:257:
+			anonmm = (struct anonmm *) page->mapping;

CHECK:SPACING: No space is necessary after a cast
#331: FILE: mm/rmap.c:277:
+	page->mapping = (void *) new_anonmm;

CHECK:SPACING: No space is necessary after a cast
#353: FILE: mm/rmap.c:401:
+		page->mapping = (void *) anonmm;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#382: FILE: mm/rmap.c:522:
+		BUG_ON(!PageSwapCache(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#385: FILE: mm/rmap.c:525:
+		BUG_ON(pte_file(*pte));

CHECK:SPACING: No space is necessary after a cast
#397: FILE: mm/rmap.c:634:
+	struct anonmm *anonmm = (struct anonmm *) page->mapping;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#408: FILE: mm/rmap.c:645:
+		ret = try_to_unmap_one(page,
+			anonmm->mm, page->index, &mapcount, NULL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#424: FILE: mm/rmap.c:661:
+		ret = try_to_unmap_one(page,
+			anonmm->mm, page->index, &mapcount, NULL);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000288258.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 0 errors, 12 warnings, 11 checks, 362 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000288258.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
