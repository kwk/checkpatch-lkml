ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#65: 
--- a/fs/proc/array.c	2002-12-16 03:08:11.000000000 +0100

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#73: FILE: fs/proc/array.c:602:
+int proc_pid_cpu(struct task_struct *task, char * buffer)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#78: FILE: fs/proc/array.c:607:
+	len = sprintf(buffer,
+		"cpu  %lu %lu\n",

ERROR:TRAILING_WHITESPACE: trailing whitespace
#81: FILE: fs/proc/array.c:610:
+^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#82: FILE: fs/proc/array.c:611:
+	for (i = 0 ; i < NR_CPUS; i++) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 16)
#83: FILE: fs/proc/array.c:612:
+		if (cpu_online(i))
+		len += sprintf(buffer + len, "cpu%d %lu %lu\n",

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#89: FILE: fs/proc/array.c:618:
+
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#90: FILE: fs/proc/array.c:619:
+	len += sprintf(buffer + len, "current_cpu %d\n",task_cpu(task));
 	                                               ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#110: FILE: fs/proc/base.c:80:
+  E(PROC_PID_CPU,^I"cpu",^I^IS_IFREG|S_IRUGO),$

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#110: FILE: fs/proc/base.c:80:
+  E(PROC_PID_CPU,	"cpu",		S_IFREG|S_IRUGO),
                  	      		       ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#110: FILE: fs/proc/base.c:80:
+  E(PROC_PID_CPU,	"cpu",		S_IFREG|S_IRUGO),

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

ERROR:SPACING: space required before the open parenthesis '('
#153: FILE: kernel/fork.c:802:
+		for(i = 0; i < NR_CPUS; i++)

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#153: FILE: kernel/fork.c:802:
+		for(i = 0; i < NR_CPUS; i++)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#154: FILE: kernel/fork.c:803:
+			p->per_cpu_utime[i] = p->per_cpu_stime[i] = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000405571.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 5 errors, 5 warnings, 4 checks, 88 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000405571.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
