ERROR:TRAILING_WHITESPACE: trailing whitespace
#51: FILE: fs/dcache.c:694:
+struct dentry * __d_lookup(struct dentry * parent, struct qstr * name)  $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#51: FILE: fs/dcache.c:694:
+struct dentry * __d_lookup(struct dentry * parent, struct qstr * name)  

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#51: FILE: fs/dcache.c:694:
+struct dentry * __d_lookup(struct dentry * parent, struct qstr * name)  

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#51: FILE: fs/dcache.c:694:
+struct dentry * __d_lookup(struct dentry * parent, struct qstr * name)  

ERROR:SPACING: space required before the open parenthesis '('
#70: FILE: fs/dcache.c:721:
+		if(!(dentry->d_vfs_flags & DCACHE_REFERENCED)) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BRACES: braces {} are not necessary for single statement blocks
#70: FILE: fs/dcache.c:721:
+		if(!(dentry->d_vfs_flags & DCACHE_REFERENCED)) {
+			dentry->d_vfs_flags |= DCACHE_REFERENCED;
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#89: FILE: fs/dcache.c:739:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#89: FILE: fs/dcache.c:739:
+ $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#90: FILE: fs/dcache.c:740:
+struct dentry * d_lookup(struct dentry * parent, struct qstr * name)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#90: FILE: fs/dcache.c:740:
+struct dentry * d_lookup(struct dentry * parent, struct qstr * name)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#90: FILE: fs/dcache.c:740:
+struct dentry * d_lookup(struct dentry * parent, struct qstr * name)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#92: FILE: fs/dcache.c:742:
+	struct dentry * dentry;

WARNING:LINE_SPACING: Missing a blank line after declarations
#93: FILE: fs/dcache.c:743:
+	struct dentry * dentry;
+	spin_lock(&dcache_lock);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#94: FILE: fs/dcache.c:744:
+	dentry = __d_lookup(parent,name);
 	                          ^

ERROR:SPACING: space required before the open parenthesis '('
#95: FILE: fs/dcache.c:745:
+	if(dentry)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#115: FILE: fs/namei.c:270:
+static void __undo_locked(struct nameidata *nd, struct dentry *dentry) {
                                             ^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#115: FILE: fs/namei.c:270:
+static void __undo_locked(struct nameidata *nd, struct dentry *dentry) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required before the open parenthesis '('
#117: FILE: fs/namei.c:272:
+	if(dentry)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#124: FILE: fs/namei.c:279:
+static inline void undo_locked(struct nameidata *nd, struct dentry *dentry)
                                                  ^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#127: FILE: fs/namei.c:281:
+^Iif(nd->flags & LOOKUP_LOCKED) $

ERROR:SPACING: space required before the open parenthesis '('
#127: FILE: fs/namei.c:281:
+	if(nd->flags & LOOKUP_LOCKED) 

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#128: FILE: fs/namei.c:282:
+		__undo_locked(nd, dentry);
 		              ^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#130: FILE: fs/namei.c:284:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#132: FILE: fs/namei.c:286:
+ * For fast path lookup while holding the dcache_lock. $

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#135: FILE: fs/namei.c:289:
+static struct dentry * cached_lookup(struct nameidata * nd, struct qstr * name, int flags)
                                                         ^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#135: FILE: fs/namei.c:289:
+static struct dentry * cached_lookup(struct nameidata * nd, struct qstr * name, int flags)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#135: FILE: fs/namei.c:289:
+static struct dentry * cached_lookup(struct nameidata * nd, struct qstr * name, int flags)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#135: FILE: fs/namei.c:289:
+static struct dentry * cached_lookup(struct nameidata * nd, struct qstr * name, int flags)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#137: FILE: fs/namei.c:291:
+	struct dentry * dentry = NULL;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#138: FILE: fs/namei.c:292:
+^Iif(nd->flags & LOOKUP_LOCKED) $

WARNING:LINE_SPACING: Missing a blank line after declarations
#138: FILE: fs/namei.c:292:
+	struct dentry * dentry = NULL;
+	if(nd->flags & LOOKUP_LOCKED) 

ERROR:SPACING: space required before the open parenthesis '('
#138: FILE: fs/namei.c:292:
+	if(nd->flags & LOOKUP_LOCKED) 

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#144: FILE: fs/namei.c:298:
+		undo_locked(nd, dentry);
 		            ^^

ERROR:SPACING: space required before the open parenthesis '('
#189: FILE: fs/namei.c:530:
+		if(err) {

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#190: FILE: fs/namei.c:531:
+			undo_locked(nd, NULL);
 			            ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#200: FILE: fs/namei.c:568:
+				undo_locked(nd, NULL);
 				            ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#209: FILE: fs/namei.c:585:
+		dentry = cached_lookup(nd, &this, LOOKUP_CONTINUE);
 		                       ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#211: FILE: fs/namei.c:587:
+			undo_locked(nd, NULL);
 			            ^^

ERROR:SPACING: space required before the open brace '{'
#220: FILE: fs/namei.c:594:
+		if(d_mountpoint(dentry)){

ERROR:SPACING: space required before the open parenthesis '('
#220: FILE: fs/namei.c:594:
+		if(d_mountpoint(dentry)){

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#221: FILE: fs/namei.c:595:
+			undo_locked(nd, dentry);
 			            ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#232: FILE: fs/namei.c:609:
+			undo_locked(nd, dentry);
 			            ^^

ERROR:SPACING: space prohibited before that '++' (ctx:WxO)
#242: FILE: fs/namei.c:623:
+				dentry_stat.slowwalks ++;
 				                      ^

ERROR:SPACING: space prohibited before that '++' (ctx:WxO)
#245: FILE: fs/namei.c:626:
+				dentry_stat.fastwalks ++;
 				                      ^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#254: FILE: fs/namei.c:647:
+				undo_locked(nd, NULL);
 				            ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#263: FILE: fs/namei.c:659:
+		dentry = cached_lookup(nd, &this, 0);
 		                       ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#264: FILE: fs/namei.c:660:
+		undo_locked(nd, dentry); 
 		            ^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#264: FILE: fs/namei.c:660:
+^I^Iundo_locked(nd, dentry); $

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#272: FILE: fs/namei.c:700:
+		undo_locked(nd, NULL);
 		            ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#275: FILE: fs/namei.c:703:
+		undo_locked(nd, dentry);
 		            ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#279: FILE: fs/namei.c:707:
+	undo_locked(nd, dentry);
 	            ^^

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#290: FILE: fs/namei.c:787:
 	if (current->fs->altroot && !(nd->flags & LOOKUP_NOALT)) {
+

ERROR:SPACING: space required before the open parenthesis '('
#307: FILE: fs/namei.c:802:
+	if(flags & LOOKUP_LOCKED) {

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#320: FILE: fs/namei.c:826:
+int path_lookup(const char *name, unsigned int flags, struct nameidata *nd)
                                                                         ^^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#324: FILE: fs/namei.c:830:
+	if (*name=='/'){
 	         ^

ERROR:SPACING: space required before the open brace '{'
#324: FILE: fs/namei.c:830:
+	if (*name=='/'){

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#325: FILE: fs/namei.c:831:
+		if(!walk_init_root(name, nd)) 
 		                         ^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#325: FILE: fs/namei.c:831:
+^I^Iif(!walk_init_root(name, nd)) $

ERROR:SPACING: space required before the open parenthesis '('
#325: FILE: fs/namei.c:831:
+		if(!walk_init_root(name, nd)) 

ERROR:SPACING: space required before the open brace '{'
#327: FILE: fs/namei.c:833:
+	} else{

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#334: FILE: fs/namei.c:840:
+	return (path_walk(name, nd));
 	                        ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#344: FILE: fs/namei.c:851:
+	struct nameidata nd;
 	                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#352: FILE: fs/namei.c:861:
+	nd.dentry = base;
 	^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#353: FILE: fs/namei.c:862:
+	nd.flags = 0;
 	^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#363: FILE: fs/namei.c:875:
+	dentry = cached_lookup(&nd, name, 0);
 	                        ^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#384: FILE: include/linux/dcache.h:224:
+extern struct dentry * __d_lookup(struct dentry *, struct qstr *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#384: FILE: include/linux/dcache.h:224:
+extern struct dentry * __d_lookup(struct dentry *, struct qstr *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#384: FILE: include/linux/dcache.h:224:
+extern struct dentry * __d_lookup(struct dentry *, struct qstr *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct qstr *' should also have an identifier name
#384: FILE: include/linux/dcache.h:224:
+extern struct dentry * __d_lookup(struct dentry *, struct qstr *);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#418: FILE: include/linux/fs.h:1315:
+extern int FASTCALL(path_lookup(const char *, unsigned, struct nameidata *));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#418: FILE: include/linux/fs.h:1315:
+extern int FASTCALL(path_lookup(const char *, unsigned, struct nameidata *));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#418: FILE: include/linux/fs.h:1315:
+extern int FASTCALL(path_lookup(const char *, unsigned, struct nameidata *));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned' should also have an identifier name
#418: FILE: include/linux/fs.h:1315:
+extern int FASTCALL(path_lookup(const char *, unsigned, struct nameidata *));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nameidata *' should also have an identifier name
#418: FILE: include/linux/fs.h:1315:
+extern int FASTCALL(path_lookup(const char *, unsigned, struct nameidata *));

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000471251.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 37 errors, 34 warnings, 3 checks, 356 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000471251.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
