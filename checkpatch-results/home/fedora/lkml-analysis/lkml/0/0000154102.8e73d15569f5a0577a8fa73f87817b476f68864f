WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#82: 
--- working-2.6.orig/arch/ppc64/perfmon/perfmon.c	2005-09-06 14:52:16.000000000 +1000

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'pfm_arch_unload_context', this function's name, in a string
#126: FILE: arch/ppc64/perfmon/perfmon.c:52:
+	DPRINT(("pfm_arch_unload_context()\n"));

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ctx"
#140: FILE: arch/ppc64/perfmon/perfmon.c:66:
+	if (ctx == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:BRACES: braces {} are not necessary for single statement blocks
#292: FILE: arch/ppc64/perfmon/perfmon.c:221:
+	for (i = 0; i < num_cnt; i++) {
 		pfm_arch_write_pmc(i, set->set_pmcs[i]);
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ctx"
#385: FILE: arch/ppc64/perfmon/perfmon.c:307:
+	if (ctx == NULL)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#397: FILE: arch/ppc64/perfmon/perfmon.c:319:
 	for (i = 0; used_mask; i++, used_mask >>=1) {
+

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#404: FILE: arch/ppc64/perfmon/perfmon.c:323:
+				i, new_val, (new_val&(PFM_ONE_64<<width)) ? 1 : 0));
 				                    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#404: FILE: arch/ppc64/perfmon/perfmon.c:323:
+				i, new_val, (new_val&(PFM_ONE_64<<width)) ? 1 : 0));
 				                                ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#406: FILE: arch/ppc64/perfmon/perfmon.c:325:
+			if ((new_val & (PFM_ONE_64 << width)) == 0) {
 				bv |= PFM_ONE_64 << i;
 			}

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#566: FILE: include/asm-ppc64/perfmon.h:149:
+extern void pfm_arch_ctxswout_thread(struct task_struct *task,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#567: FILE: include/asm-ppc64/perfmon.h:150:
+extern void pfm_arch_ctxswout_thread(struct task_struct *task,
+			struct pfm_context *ctx, struct pfm_event_set *set);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#568: FILE: include/asm-ppc64/perfmon.h:151:
+extern void pfm_arch_ctxswin_thread(struct task_struct *task,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#569: FILE: include/asm-ppc64/perfmon.h:152:
+extern void pfm_arch_ctxswin_thread(struct task_struct *task,
+			struct pfm_context *ctx, struct pfm_event_set *set);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#570: FILE: include/asm-ppc64/perfmon.h:153:
+extern void pfm_arch_stop(struct task_struct *task,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#571: FILE: include/asm-ppc64/perfmon.h:154:
+extern void pfm_arch_stop(struct task_struct *task,
+			struct pfm_context *ctx, struct pfm_event_set *set);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#572: FILE: include/asm-ppc64/perfmon.h:155:
+extern void pfm_arch_start(struct task_struct *task,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#573: FILE: include/asm-ppc64/perfmon.h:156:
+extern void pfm_arch_start(struct task_struct *task,
+			struct pfm_context *ctx, struct pfm_event_set *set);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#578: FILE: include/asm-ppc64/perfmon.h:159:
+extern void pfm_arch_restore_pmcs(struct pfm_event_set *set, int plm_mask);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#581: FILE: include/asm-ppc64/perfmon.h:162:
+extern void pfm_arch_pmu_config_init(struct pfm_pmu_config *cfg);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#586: FILE: include/asm-ppc64/perfmon.h:166:
+extern int  pfm_arch_get_ovfl_pmds(struct pfm_context *ctx,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#587: FILE: include/asm-ppc64/perfmon.h:167:
+extern int  pfm_arch_get_ovfl_pmds(struct pfm_context *ctx,
+			struct pfm_event_set *set);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#598: FILE: include/asm-ppc64/perfmon.h:174:
+extern void pfm_arch_context_initialize(struct pfm_context *ctx, u32 ctx_flags);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#599: FILE: include/asm-ppc64/perfmon.h:175:
+extern void pfm_arch_unload_context(struct pfm_context *ctx,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#600: FILE: include/asm-ppc64/perfmon.h:176:
+extern void pfm_arch_unload_context(struct pfm_context *ctx,
+		struct task_struct *task);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#601: FILE: include/asm-ppc64/perfmon.h:177:
+extern void pfm_arch_load_context(struct pfm_context *ctx,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#602: FILE: include/asm-ppc64/perfmon.h:178:
+extern void pfm_arch_load_context(struct pfm_context *ctx,
+		struct task_struct *task);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#633: FILE: include/asm-ppc64/perfmon.h:206:
+static inline void pfm_arch_stop_thread(struct task_struct *task,
+			struct pfm_context *ctx, struct pfm_event_set *set)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#641: FILE: include/asm-ppc64/perfmon.h:212:
+static inline void pfm_arch_start_thread(struct task_struct *task,
+		struct pfm_context *ctx, struct pfm_event_set *set)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#649: FILE: include/asm-ppc64/perfmon.h:218:
+static inline void pfm_arch_stop_sys(struct task_struct *task,
+		struct pfm_context *ctx, struct pfm_event_set *set)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#657: FILE: include/asm-ppc64/perfmon.h:224:
+static inline void pfm_arch_start_sys(struct task_struct *task,
+		struct pfm_context *ctx, struct pfm_event_set *set)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#665: FILE: include/asm-ppc64/perfmon.h:230:
+static inline int pfm_arch_load_checks(struct pfm_context *ctx,
+		struct task_struct *task)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000154102.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 0 errors, 4 warnings, 27 checks, 618 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000154102.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
