ERROR:DEFINE_ARCH_HAS: #define of '__ARCH_HAS_GET_SET_64BIT' is wrong - use Kconfig variables or standard guards instead
#50: FILE: include/asm-i386/system.h:147:
+#define __ARCH_HAS_GET_SET_64BIT 1

The ARCH_HAS_xyz and ARCH_HAVE_xyz patterns are wrong.

For big conceptual features use Kconfig symbols instead.  And for
smaller things where we have compatibility fallback functions but
want architectures able to override them with optimized ones, we
should either use weak functions (appropriate for some cases), or
the symbol that protects them should be the same symbol we use.

See: https://lore.kernel.org/lkml/CA+55aFycQ9XJvEOsiM3txHL5bjUc8CeKWJNR_H+MiicaddB42Q@mail.gmail.com/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#67: FILE: include/asm-i386/system.h:202:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#73: FILE: include/asm-i386/system.h:208:
+static inline unsigned long long get_64bit(unsigned long long * ptr)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#75: FILE: include/asm-i386/system.h:210:
+        unsigned long low, high;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#75: FILE: include/asm-i386/system.h:210:
+        unsigned long low, high;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#77: FILE: include/asm-i386/system.h:212:
+        __asm__ __volatile__ ($

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#77: FILE: include/asm-i386/system.h:212:
+        __asm__ __volatile__ ($

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#77: FILE: include/asm-i386/system.h:212:
+        __asm__ __volatile__ (

ERROR:CODE_INDENT: code indent should use tabs where possible
#78: FILE: include/asm-i386/system.h:213:
+                "\n1:\t"$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#78: FILE: include/asm-i386/system.h:213:
+                "\n1:\t"$

ERROR:CODE_INDENT: code indent should use tabs where possible
#79: FILE: include/asm-i386/system.h:214:
+                "movl (%2), %%eax\n\t"$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#79: FILE: include/asm-i386/system.h:214:
+                "movl (%2), %%eax\n\t"$

ERROR:CODE_INDENT: code indent should use tabs where possible
#80: FILE: include/asm-i386/system.h:215:
+                "movl 4(%2), %%edx\n\t"$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#80: FILE: include/asm-i386/system.h:215:
+                "movl 4(%2), %%edx\n\t"$

ERROR:CODE_INDENT: code indent should use tabs where possible
#81: FILE: include/asm-i386/system.h:216:
+                "movl %%eax, %%ebx\n\t"$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#81: FILE: include/asm-i386/system.h:216:
+                "movl %%eax, %%ebx\n\t"$

ERROR:CODE_INDENT: code indent should use tabs where possible
#82: FILE: include/asm-i386/system.h:217:
+                "movl %%edx, %%ecx\n\t"$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#82: FILE: include/asm-i386/system.h:217:
+                "movl %%edx, %%ecx\n\t"$

ERROR:CODE_INDENT: code indent should use tabs where possible
#83: FILE: include/asm-i386/system.h:218:
+                "lock cmpxchg8b (%2)\n\t"$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#83: FILE: include/asm-i386/system.h:218:
+                "lock cmpxchg8b (%2)\n\t"$

ERROR:CODE_INDENT: code indent should use tabs where possible
#84: FILE: include/asm-i386/system.h:219:
+                "jnz 1b"$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#84: FILE: include/asm-i386/system.h:219:
+                "jnz 1b"$

ERROR:CODE_INDENT: code indent should use tabs where possible
#85: FILE: include/asm-i386/system.h:220:
+                : "=&b" (low), "=&c" (high)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#85: FILE: include/asm-i386/system.h:220:
+                : "=&b" (low), "=&c" (high)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#86: FILE: include/asm-i386/system.h:221:
+                : "r" (ptr)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#86: FILE: include/asm-i386/system.h:221:
+                : "r" (ptr)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#87: FILE: include/asm-i386/system.h:222:
+                : "ax","dx","memory");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#87: FILE: include/asm-i386/system.h:222:
+                : "ax","dx","memory");$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#87: FILE: include/asm-i386/system.h:222:
+                : "ax","dx","memory");
                       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#87: FILE: include/asm-i386/system.h:222:
+                : "ax","dx","memory");
                            ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#89: FILE: include/asm-i386/system.h:224:
+        return low | ((unsigned long long) high << 32);$

CHECK:SPACING: No space is necessary after a cast
#89: FILE: include/asm-i386/system.h:224:
+        return low | ((unsigned long long) high << 32);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#89: FILE: include/asm-i386/system.h:224:
+        return low | ((unsigned long long) high << 32);$

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#103: FILE: include/linux/fs.h:452:
+#if BITS_PER_LONG==32 && defined(CONFIG_SMP) && !defined(__ARCH_HAS_GET_SET_64BIT)
                  ^

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#105: FILE: include/linux/fs.h:454:
+#define i_size_ordered_init(inode) do { (inode)->i_size_version1 = (inode)->i_size_version2 = 0; } while (0)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'inode' - possible side-effects?
#105: FILE: include/linux/fs.h:454:
+#define i_size_ordered_init(inode) do { (inode)->i_size_version1 = (inode)->i_size_version2 = 0; } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#105: FILE: include/linux/fs.h:454:
+#define i_size_ordered_init(inode) do { (inode)->i_size_version1 = (inode)->i_size_version2 = 0; } while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#118: FILE: include/linux/fs.h:545:
+	volatile int		i_size_version1;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#119: FILE: include/linux/fs.h:546:
+	volatile int		i_size_version2;

WARNING:TYPO_SPELLING: 'preemptable' may be misspelled - perhaps 'preemptible'?
#124: FILE: include/linux/fs.h:551:
+ * NOTE: in a 32bit arch with a preemptable kernel and
                                 ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#133: FILE: include/linux/fs.h:560:
+static inline loff_t i_size_read(struct inode * inode)

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#135: FILE: include/linux/fs.h:562:
+#if BITS_PER_LONG==32 && defined(CONFIG_SMP)
                  ^

CHECK:SPACING: No space is necessary after a cast
#137: FILE: include/linux/fs.h:564:
+	return (loff_t) get_64bit((unsigned long long *) &inode->i_size);

WARNING:MEMORY_BARRIER: memory barrier without comment
#145: FILE: include/linux/fs.h:572:
+		rmb();

WARNING:MEMORY_BARRIER: memory barrier without comment
#147: FILE: include/linux/fs.h:574:
+		rmb();

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#153: FILE: include/linux/fs.h:580:
+#elif BITS_PER_LONG==64 || !defined(CONFIG_SMP)
                    ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#158: FILE: include/linux/fs.h:585:
+static inline void i_size_write(struct inode * inode, loff_t i_size)

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#160: FILE: include/linux/fs.h:587:
+#if BITS_PER_LONG==32 && defined(CONFIG_SMP)
                  ^

CHECK:SPACING: No space is necessary after a cast
#162: FILE: include/linux/fs.h:589:
+	set_64bit((unsigned long long *) &inode->i_size, (unsigned long long) i_size);

WARNING:MEMORY_BARRIER: memory barrier without comment
#165: FILE: include/linux/fs.h:592:
+	wmb();

WARNING:MEMORY_BARRIER: memory barrier without comment
#167: FILE: include/linux/fs.h:594:
+	wmb();

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#171: FILE: include/linux/fs.h:598:
+#elif BITS_PER_LONG==64 || !defined(CONFIG_SMP)
                    ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000445097.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 24 errors, 22 warnings, 6 checks, 133 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000445097.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
