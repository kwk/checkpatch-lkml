CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#68: FILE: fs/exec.c:292:
+void put_stack_page(struct vm_area_struct *mpnt,
+	struct page *page, unsigned long address)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#122: FILE: fs/exec.c:421:
+			put_stack_page(mpnt,page,stack_base);
 			                   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#122: FILE: fs/exec.c:421:
+			put_stack_page(mpnt,page,stack_base);
 			                        ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#140: FILE: include/linux/mm.h:580:
+extern void put_stack_page(struct vm_area_struct *,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#141: FILE: include/linux/mm.h:581:
+extern void put_stack_page(struct vm_area_struct *,
+		struct page *, unsigned long);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#149: FILE: include/linux/mm.h:589:
+static inline void put_stack_page(struct vm_area_struct *,
+		struct page *, unsigned long)

WARNING:RETURN_VOID: void function return statements are not generally useful
#152: FILE: include/linux/mm.h:592:
+	return;
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#164: FILE: include/linux/rmap.h:12:
+void page_add_rmap(struct page *, struct vm_area_struct *,
+			unsigned long addr, int anon);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#165: FILE: include/linux/rmap.h:13:
+void page_turn_rmap(struct page *, struct vm_area_struct *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vm_area_struct *' should also have an identifier name
#165: FILE: include/linux/rmap.h:13:
+void page_turn_rmap(struct page *, struct vm_area_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mm_struct *' should also have an identifier name
#177: FILE: include/linux/rmap.h:27:
+int exec_rmap(struct mm_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mm_struct *' should also have an identifier name
#178: FILE: include/linux/rmap.h:28:
+int dup_rmap(struct mm_struct *, struct mm_struct *oldmm);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mm_struct *' should also have an identifier name
#179: FILE: include/linux/rmap.h:29:
+void exit_rmap(struct mm_struct *);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#338: FILE: mm/mremap.c:87:
+copy_one_pte(struct vm_area_struct *vma, pte_t *src, pte_t *dst,
+	unsigned long old_addr, unsigned long new_addr)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#383: FILE: mm/rmap.c:49:
+};
+static kmem_cache_t *anonmm_cachep;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '?' (ctx:VxE)
#399: FILE: mm/rmap.c:62:
+	return (address >= vma->vm_start && address < vma->vm_end)?
 	                                                          ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#400: FILE: mm/rmap.c:63:
+		address: NOADDR;
 		       ^

WARNING:INDENTED_LABEL: labels should not be indented
#400: FILE: mm/rmap.c:63:
+		address: NOADDR;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#411: FILE: mm/rmap.c:74:
+	anonmm_cachep = kmem_cache_create("anonmm",
+			sizeof(struct anonmm), 0,

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'init_rmap', this function's name, in a string
#414: FILE: mm/rmap.c:77:
+		panic("init_rmap: Cannot alloc anonmm SLAB cache");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#474: FILE: mm/rmap.c:137:
+		BUG_ON(anonmm == anonhd);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#478: FILE: mm/rmap.c:141:
+			BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#482: FILE: mm/rmap.c:145:
+		BUG_ON(anonhd->mm);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#483: FILE: mm/rmap.c:146:
+		BUG_ON(!list_empty(&anonhd->list));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#493: FILE: mm/rmap.c:156:
+	BUG_ON(anonmm->mm);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#494: FILE: mm/rmap.c:157:
+	BUG_ON(anonmm == anonhd);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#498: FILE: mm/rmap.c:161:
+		BUG();

CHECK:SPACING: No space is necessary after a cast
#507: FILE: mm/rmap.c:169:
+	struct anonmm *anonmm = (struct anonmm *) page->mapping;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#524: FILE: mm/rmap.c:184:
+page_referenced_one(struct page *page, struct mm_struct *mm,
+	unsigned long address, unsigned long *mapcount)

CHECK:SPACING: No space is necessary after a cast
#562: FILE: mm/rmap.c:229:
+	struct anonmm *anonmm = (struct anonmm *) page->mapping;

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#569: FILE: mm/rmap.c:236:
+		referenced += page_referenced_one(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#578: FILE: mm/rmap.c:245:
+		referenced += page_referenced_one(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#609: FILE: mm/rmap.c:271:
+			referenced += page_referenced_one(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#621: FILE: mm/rmap.c:283:
+			referenced += page_referenced_one(

ERROR:SPACING: spaces required around that '?' (ctx:VxE)
#643: FILE: mm/rmap.c:311:
+		referenced += PageAnon(page)?
 		                            ^

ERROR:SPACING: spaces required around that ':' (ctx:VxE)
#644: FILE: mm/rmap.c:312:
+			page_referenced_anon(page, &mapcount):
 			                                     ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#663: FILE: mm/rmap.c:330:
+page_add_rmap(struct page *page, struct vm_area_struct *vma,
+	unsigned long address, int anon)

CHECK:SPACING: No space is necessary after a cast
#681: FILE: mm/rmap.c:354:
+			page->mapping = (struct address_space *) anonmm;

CHECK:SPACING: No space is necessary after a cast
#700: FILE: mm/rmap.c:394:
+	struct anonmm *old_anonmm = (struct anonmm *) page->mapping;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#703: FILE: mm/rmap.c:397:
+	BUG_ON(!PageAnon(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#704: FILE: mm/rmap.c:398:
+	BUG_ON(page_mapcount(page) != 1);

CHECK:SPACING: No space is necessary after a cast
#713: FILE: mm/rmap.c:407:
+	page->mapping = (struct address_space *) new_anonmm;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#733: FILE: mm/rmap.c:447:
+try_to_unmap_one(struct page *page, struct mm_struct *mm,
+	unsigned long address, unsigned long *mapcount,

CHECK:SPACING: No space is necessary after a cast
#826: FILE: mm/rmap.c:540:
+	struct anonmm *anonmm = (struct anonmm *) page->mapping;

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#833: FILE: mm/rmap.c:547:
+		ret = try_to_unmap_one(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#842: FILE: mm/rmap.c:556:
+		ret = try_to_unmap_one(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#871: FILE: mm/rmap.c:582:
+			ret = try_to_unmap_one(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#886: FILE: mm/rmap.c:594:
+			ret = try_to_unmap_one(

ERROR:SPACING: spaces required around that '?' (ctx:VxE)
#909: FILE: mm/rmap.c:629:
+	ret = PageAnon(page)?
 	                    ^

ERROR:SPACING: spaces required around that ':' (ctx:VxE)
#910: FILE: mm/rmap.c:630:
+		try_to_unmap_anon(page, &mapcount):
 		                                  ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000384174.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 8 errors, 17 warnings, 25 checks, 825 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000384174.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
