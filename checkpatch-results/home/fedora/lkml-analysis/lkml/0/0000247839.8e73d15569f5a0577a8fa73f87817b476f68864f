WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#37: 
         - Change ntfs_{external_,}attr_find() to return 0 on success, -ENOENT

WARNING:BAD_SIGN_OFF: Do not use whitespace before Signed-off-by:
#53: 
   Signed-off-by: Anton Altaparmakov <aia21@cantab.net>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#103: FILE: fs/ntfs/aops.c:406:
+	err = ntfs_attr_lookup(ni->type, ni->name, ni->name_len,
+			CASE_SENSITIVE, 0, NULL, 0, ctx);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#118: FILE: fs/ntfs/aops.c:1125:
+	err = ntfs_attr_lookup(ni->type, ni->name, ni->name_len,
+			CASE_SENSITIVE, 0, NULL, 0, ctx);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#133: FILE: fs/ntfs/aops.c:1898:
+	err = ntfs_attr_lookup(ni->type, ni->name, ni->name_len,
+			CASE_SENSITIVE, 0, NULL, 0, ctx);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#159: FILE: fs/ntfs/attrib.c:970:
+	err = ntfs_attr_lookup(ni->type, ni->name, ni->name_len,
+			CASE_SENSITIVE, vcn, NULL, 0, ctx);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#201: FILE: fs/ntfs/attrib.c:1207:
+static int ntfs_attr_find(const ATTR_TYPES type, const ntfschar *name,
 		const u32 name_len, const IGNORE_CASE_BOOL ic,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#212: FILE: fs/ntfs/attrib.c:1240:
+		if (unlikely(le32_to_cpu(a->type) > le32_to_cpu(type) ||
+				a->type == AT_END))

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#282: FILE: fs/ntfs/attrib.c:1296:
+					min_t(u32, val_len, le32_to_cpu(

CHECK:CAMELCASE: Avoid CamelCase: <NVolSetErrors>
#307: FILE: fs/ntfs/attrib.c:1316:
+	NVolSetErrors(vol);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#347: FILE: fs/ntfs/attrib.c:1479:
+static int ntfs_external_attr_find(const ATTR_TYPES type,
 		const ntfschar *name, const u32 name_len,

WARNING:SPLIT_STRING: quoted string split across lines
#402: FILE: fs/ntfs/attrib.c:1605:
 				ntfs_error(vol->sb, "Found stale mft "
+						"reference in attribute list "

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#403: FILE: fs/ntfs/attrib.c:1606:
+						"reference in attribute list "
+						"of base inode 0x%lx.%s",

WARNING:SPLIT_STRING: quoted string split across lines
#418: FILE: fs/ntfs/attrib.c:1627:
+					ntfs_error(vol->sb, "Failed to map "
+							"extent mft record "

WARNING:SPLIT_STRING: quoted string split across lines
#419: FILE: fs/ntfs/attrib.c:1628:
+							"extent mft record "
+							"0x%lx of base inode "

WARNING:SPLIT_STRING: quoted string split across lines
#420: FILE: fs/ntfs/attrib.c:1629:
+							"0x%lx of base inode "
+							"0x%lx.%s",

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'al_entry->mft_reference'
#422: FILE: fs/ntfs/attrib.c:1631:
+							MREF_LE(al_entry->
+							mft_reference),

A single dereferencing identifier spanned on multiple lines like::

  struct_identifier->member[index].
  member = <foo>;

is generally hard to follow. It can easily lead to typos and so makes
the code vulnerable to bugs.

If fixing the multiple line dereferencing leads to an 80 column
violation, then either rewrite the code in a more simple way or if the
starting part of the dereferencing identifier is the same and used at
multiple places then store it in a temporary variable, and use that
temporary variable only at all the places. For example, if there are
two dereferencing identifiers::

  member1->member2->member3.foo1;
  member1->member2->member3.foo2;

then store the member1->member2->member3 part in a temporary variable.
It not only helps to avoid the 80 column violation but also reduces
the program size by removing the unnecessary dereferences.

But if none of the above methods work then ignore the 80 column
violation because it is much easier to read a dereferencing identifier
on a single line.

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#461: FILE: fs/ntfs/attrib.c:1679:
+		if (!ntfs_are_names_equal((ntfschar*)((u8*)a +

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#461: FILE: fs/ntfs/attrib.c:1679:
+		if (!ntfs_are_names_equal((ntfschar*)((u8*)a +

WARNING:SPLIT_STRING: quoted string split across lines
#485: FILE: fs/ntfs/attrib.c:1704:
+		ntfs_error(vol->sb, "Base inode 0x%lx contains corrupt "
+				"attribute list attribute.%s", base_ni->mft_no,

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#528: FILE: fs/ntfs/attrib.c:1741:
+	ctx->attr = (ATTR_RECORD*)((u8*)ctx->mrec +

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#528: FILE: fs/ntfs/attrib.c:1741:
+	ctx->attr = (ATTR_RECORD*)((u8*)ctx->mrec +

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#553: FILE: fs/ntfs/attrib.c:1757:
+		err = ntfs_attr_find(type, name, name_len, ic, val, val_len,
+				ctx);

WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#593: FILE: fs/ntfs/attrib.c:1799:
+ * When -errno != -ENOENT, an error occured during the lookup.  @ctx->attr is
                                     ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#598: FILE: fs/ntfs/attrib.c:1803:
+int ntfs_attr_lookup(const ATTR_TYPES type, const ntfschar *name,
 		const u32 name_len, const IGNORE_CASE_BOOL ic,

CHECK:CAMELCASE: Avoid CamelCase: <NInoAttrList>
#606: FILE: fs/ntfs/attrib.c:1816:
+	if (!NInoAttrList(base_ni) || type == AT_ATTRIBUTE_LIST)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#623: FILE: fs/ntfs/attrib.h:85:
+int ntfs_attr_lookup(const ATTR_TYPES type, const ntfschar *name,
 		const u32 name_len, const IGNORE_CASE_BOOL ic,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#639: FILE: fs/ntfs/dir.c:110:
+	err = ntfs_attr_lookup(AT_INDEX_ROOT, I30, 4, CASE_SENSITIVE, 0, NULL,
+			0, ctx);

WARNING:SPLIT_STRING: quoted string split across lines
#643: FILE: fs/ntfs/dir.c:114:
+			ntfs_error(sb, "Index root attribute missing in "
+					"directory inode 0x%lx.",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#660: FILE: fs/ntfs/dir.c:663:
+	err = ntfs_attr_lookup(AT_INDEX_ROOT, I30, 4, CASE_SENSITIVE, 0, NULL,
+			0, ctx);

WARNING:SPLIT_STRING: quoted string split across lines
#664: FILE: fs/ntfs/dir.c:667:
+			ntfs_error(sb, "Index root attribute missing in "
+					"directory inode 0x%lx.",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#678: FILE: fs/ntfs/dir.c:1195:
+	err = ntfs_attr_lookup(AT_INDEX_ROOT, I30, 4, CASE_SENSITIVE, 0, NULL,
+			0, ctx);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#720: FILE: fs/ntfs/index.c:171:
+	err = ntfs_attr_lookup(AT_INDEX_ROOT, idx_ni->name, idx_ni->name_len,
+			CASE_SENSITIVE, 0, NULL, 0, actx);

WARNING:SPLIT_STRING: quoted string split across lines
#724: FILE: fs/ntfs/index.c:175:
+			ntfs_error(sb, "Index root attribute missing in inode "
+					"0x%lx.", idx_ni->mft_no);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#753: FILE: fs/ntfs/inode.c:445:
+	while (!(err = ntfs_attr_lookup(AT_FILE_NAME, NULL, 0, 0, 0, NULL, 0,
+			ctx))) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#781: FILE: fs/ntfs/inode.c:615:
+	err = ntfs_attr_lookup(AT_STANDARD_INFORMATION, NULL, 0, 0, 0, NULL, 0,
+			ctx);

WARNING:SPLIT_STRING: quoted string split across lines
#790: FILE: fs/ntfs/inode.c:624:
+			ntfs_error(vi->i_sb, "$STANDARD_INFORMATION attribute "
+					"is missing.");

WARNING:SPLIT_STRING: quoted string split across lines
#804: FILE: fs/ntfs/inode.c:661:
+			ntfs_error(vi->i_sb, "Failed to lookup attribute list "
+					"attribute. You should run chkdsk.");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#822: FILE: fs/ntfs/inode.c:752:
+		err = ntfs_attr_lookup(AT_INDEX_ROOT, I30, 4, CASE_SENSITIVE,
+				0, NULL, 0, ctx);

WARNING:SPLIT_STRING: quoted string split across lines
#829: FILE: fs/ntfs/inode.c:759:
+				ntfs_error(vi->i_sb, "$INDEX_ROOT attribute "
+						"is missing.");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#844: FILE: fs/ntfs/inode.c:872:
+		err = ntfs_attr_lookup(AT_INDEX_ALLOCATION, I30, 4,
+				CASE_SENSITIVE, 0, NULL, 0, ctx);

WARNING:SPLIT_STRING: quoted string split across lines
#848: FILE: fs/ntfs/inode.c:876:
+				ntfs_error(vi->i_sb, "$INDEX_ALLOCATION "
+						"attribute is not present but "

WARNING:SPLIT_STRING: quoted string split across lines
#849: FILE: fs/ntfs/inode.c:877:
+						"attribute is not present but "
+						"$INDEX_ROOT indicated it "

WARNING:SPLIT_STRING: quoted string split across lines
#850: FILE: fs/ntfs/inode.c:878:
+						"$INDEX_ROOT indicated it "
+						"is.");

WARNING:SPLIT_STRING: quoted string split across lines
#853: FILE: fs/ntfs/inode.c:881:
+				ntfs_error(vi->i_sb, "Failed to lookup "
+						"$INDEX_ALLOCATION "

WARNING:SPLIT_STRING: quoted string split across lines
#854: FILE: fs/ntfs/inode.c:882:
+						"$INDEX_ALLOCATION "
+						"attribute.");

WARNING:SPLIT_STRING: quoted string split across lines
#870: FILE: fs/ntfs/inode.c:980:
+				ntfs_error(vi->i_sb, "Failed to lookup $DATA "
+						"attribute.");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#883: FILE: fs/ntfs/inode.c:1204:
+	err = ntfs_attr_lookup(ni->type, ni->name, ni->name_len,
+			CASE_SENSITIVE, 0, NULL, 0, ctx);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#896: FILE: fs/ntfs/inode.c:1461:
+	err = ntfs_attr_lookup(AT_INDEX_ROOT, ni->name, ni->name_len,
+			CASE_SENSITIVE, 0, NULL, 0, ctx);

WARNING:SPLIT_STRING: quoted string split across lines
#900: FILE: fs/ntfs/inode.c:1465:
+			ntfs_error(vi->i_sb, "$INDEX_ROOT attribute is "
+					"missing.");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#913: FILE: fs/ntfs/inode.c:1545:
+	err = ntfs_attr_lookup(AT_INDEX_ALLOCATION, ni->name, ni->name_len,
+			CASE_SENSITIVE, 0, NULL, 0, ctx);

WARNING:SPLIT_STRING: quoted string split across lines
#917: FILE: fs/ntfs/inode.c:1549:
+			ntfs_error(vi->i_sb, "$INDEX_ALLOCATION attribute is "
+					"not present but $INDEX_ROOT "

WARNING:SPLIT_STRING: quoted string split across lines
#918: FILE: fs/ntfs/inode.c:1550:
+					"not present but $INDEX_ROOT "
+					"indicated it is.");

WARNING:SPLIT_STRING: quoted string split across lines
#921: FILE: fs/ntfs/inode.c:1553:
+			ntfs_error(vi->i_sb, "Failed to lookup "
+					"$INDEX_ALLOCATION attribute.");

WARNING:SPLIT_STRING: quoted string split across lines
#934: FILE: fs/ntfs/inode.c:1774:
+			ntfs_error(sb, "Failed to lookup attribute list "
+					"attribute. You should run chkdsk.");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#947: FILE: fs/ntfs/inode.c:1912:
+	while (!(err = ntfs_attr_lookup(AT_DATA, NULL, 0, 0, next_vcn, NULL, 0,
+			ctx))) {

WARNING:SPLIT_STRING: quoted string split across lines
#957: FILE: fs/ntfs/inode.c:2045:
+		ntfs_error(sb, "Failed to lookup $MFT/$DATA attribute extent. "
+				"$MFT is corrupt. Run chkdsk.");

WARNING:SPLIT_STRING: quoted string split across lines
#970: FILE: fs/ntfs/inode.c:2055:
+		ntfs_error(sb, "Failed to load the complete runlist for "
+				"$MFT/$DATA. Driver bug or corrupt $MFT. "

WARNING:SPLIT_STRING: quoted string split across lines
#971: FILE: fs/ntfs/inode.c:2056:
+				"$MFT/$DATA. Driver bug or corrupt $MFT. "
+				"Run chkdsk.");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#982: FILE: fs/ntfs/inode.c:2405:
+	err = ntfs_attr_lookup(AT_STANDARD_INFORMATION, NULL, 0,
+			CASE_SENSITIVE, 0, NULL, 0, ctx);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1008: FILE: fs/ntfs/namei.c:209:
+			err = ntfs_attr_lookup(AT_FILE_NAME, NULL, 0, 0, 0,
+					NULL, 0, ctx);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1034: FILE: fs/ntfs/namei.c:392:
+	err = ntfs_attr_lookup(AT_FILE_NAME, NULL, 0, CASE_SENSITIVE, 0, NULL,
+			0, ctx);

WARNING:SPLIT_STRING: quoted string split across lines
#1043: FILE: fs/ntfs/namei.c:398:
+			ntfs_error(vi->i_sb, "Inode 0x%lx does not have a "
+					"file name attribute.  Run chkdsk.",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1060: FILE: fs/ntfs/super.c:340:
+	err = ntfs_attr_lookup(AT_VOLUME_INFORMATION, NULL, 0, 0, 0, NULL, 0,
+			ctx);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1073: FILE: fs/ntfs/super.c:1436:
+	if (ntfs_attr_lookup(AT_VOLUME_INFORMATION, NULL, 0, 0, 0, NULL, 0,
 			ctx) || ctx->attr->non_resident || ctx->attr->flags) {

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000247839.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 4 errors, 31 warnings, 30 checks, 930 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000247839.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
