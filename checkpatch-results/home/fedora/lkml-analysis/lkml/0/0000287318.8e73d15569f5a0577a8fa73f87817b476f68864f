WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#48: FILE: arch/ia64/Kconfig:221:
+config DYN_SYSCALL
+        tristate "Support for dynamic system calls"
+	default m
+	help
+	  Say m if you want a module supporting to register / unregister or
+	  to hijack / restore system calls.
+	  This stuff is not foreseen to run inside the kernel.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#78: FILE: arch/ia64/kernel/dyn_syscall_asm.S:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#88: FILE: arch/ia64/kernel/dyn_syscall_asm.S:11:
+ $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#334: FILE: arch/ia64/kernel/dyn_syscall_main.c:1:
+#define	_TEST_

CHECK:LINE_SPACING: Please don't use multiple blank lines
#336: FILE: arch/ia64/kernel/dyn_syscall_main.c:3:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:REPEATED_WORD: Possible repeated word: 'to'
#355: FILE: arch/ia64/kernel/dyn_syscall_main.c:22:
+ *		- A pointer to "sys/kernel/dynamic_syscalls" or to
+ *		  to "sys/kernel/hijacked_syscalls" directory in the "/proc"

WARNING:REPEATED_WORD: Possible repeated word: 'to'
#358: FILE: arch/ia64/kernel/dyn_syscall_main.c:25:
+ *		- A pointer to "sys/kernel/dynamic_syscalls/<name>" or to
+ *		  to "sys/kernel/hijacked_syscalls/<name>" entry in the "/proc"

CHECK:LINE_SPACING: Please don't use multiple blank lines
#406: FILE: arch/ia64/kernel/dyn_syscall_main.c:73:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#415: FILE: arch/ia64/kernel/dyn_syscall_main.c:82:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#421: FILE: arch/ia64/kernel/dyn_syscall_main.c:88:
+
+

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#430: FILE: arch/ia64/kernel/dyn_syscall_main.c:97:
+#define	PRINT(args...)	printk(args)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#432: FILE: arch/ia64/kernel/dyn_syscall_main.c:99:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#445: FILE: arch/ia64/kernel/dyn_syscall_main.c:112:
+
+

WARNING:NEW_TYPEDEFS: do not add new typedefs
#447: FILE: arch/ia64/kernel/dyn_syscall_main.c:114:
+typedef	unsigned long	entry_t;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#455: FILE: arch/ia64/kernel/dyn_syscall_main.c:122:
+
+

WARNING:STATIC_CONST_CHAR_ARRAY: static char array declaration should probably be static const char
#457: FILE: arch/ia64/kernel/dyn_syscall_main.c:124:
+static char			dyn_scall_dir[] = "sys/kernel/dynamic_syscalls";

WARNING:STATIC_CONST_CHAR_ARRAY: static char array declaration should probably be static const char
#459: FILE: arch/ia64/kernel/dyn_syscall_main.c:126:
+static char			hijack_dir[] = "sys/kernel/hijacked_syscalls";

CHECK:LINE_SPACING: Please don't use multiple blank lines
#462: FILE: arch/ia64/kernel/dyn_syscall_main.c:129:
+
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'var' - possible side-effects?
#468: FILE: arch/ia64/kernel/dyn_syscall_main.c:135:
+#define atomic_check_and_dec(var, condition)				\
+({									\
+	__s32	___old;							\
+	int	___rc;							\
+									\
+	do {								\
+		___old = atomic_read(var);				\
+		if (!(___rc = (___old condition)))			\
+			break;						\
+	} while	(cmpxchg(var, ___old, ___old - 1) != ___old);		\
+	___rc;								\
+})

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#475: FILE: arch/ia64/kernel/dyn_syscall_main.c:142:
+		if (!(___rc = (___old condition)))			\

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#481: FILE: arch/ia64/kernel/dyn_syscall_main.c:148:
+
+

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#485: FILE: arch/ia64/kernel/dyn_syscall_main.c:152:
+#define	my_fetch_add64(delta, v)					\
+	ia64_fetchadd(delta, &atomic64_read(v), rel);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#488: FILE: arch/ia64/kernel/dyn_syscall_main.c:155:
+
+

WARNING:NEW_TYPEDEFS: do not add new typedefs
#508: FILE: arch/ia64/kernel/dyn_syscall_main.c:175:
+typedef struct {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#516: FILE: arch/ia64/kernel/dyn_syscall_main.c:183:
+
+

WARNING:NEW_TYPEDEFS: do not add new typedefs
#520: FILE: arch/ia64/kernel/dyn_syscall_main.c:187:
+typedef unsigned int		x_mod_sem_t;		/* 4 byte quantity */

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#521: FILE: arch/ia64/kernel/dyn_syscall_main.c:188:
+extern x_mod_sem_t		x_module_sem_tab[];

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#523: FILE: arch/ia64/kernel/dyn_syscall_main.c:190:
+
+

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#529: FILE: arch/ia64/kernel/dyn_syscall_main.c:196:
+extern fdesc_t			x_module_fp_tab[];

CHECK:LINE_SPACING: Please don't use multiple blank lines
#531: FILE: arch/ia64/kernel/dyn_syscall_main.c:198:
+
+

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#544: FILE: arch/ia64/kernel/dyn_syscall_main.c:211:
+extern char			x_module_link[],

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'i' may be better as '(i)' to avoid precedence issues
#548: FILE: arch/ia64/kernel/dyn_syscall_main.c:215:
+#define	X_MODULE_LINK(i)	(x_module_link + i * x_module_link_entry_size)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#550: FILE: arch/ia64/kernel/dyn_syscall_main.c:217:
+
+

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#551: FILE: arch/ia64/kernel/dyn_syscall_main.c:218:
+extern unsigned long		x_module_k_gp;		/* Kernel GP */

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#552: FILE: arch/ia64/kernel/dyn_syscall_main.c:219:
+extern unsigned long		x_module_sys_ni;	/* -> sys_ni_syscall() */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#554: FILE: arch/ia64/kernel/dyn_syscall_main.c:221:
+
+

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#555: FILE: arch/ia64/kernel/dyn_syscall_main.c:222:
+STATIC INLINE int

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#558: FILE: arch/ia64/kernel/dyn_syscall_main.c:225:
+STATIC void

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const unsigned int' should also have an identifier name
#558: FILE: arch/ia64/kernel/dyn_syscall_main.c:225:
+STATIC void

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const dyn_syscall_t' should also have an identifier name
#558: FILE: arch/ia64/kernel/dyn_syscall_main.c:225:
+STATIC void

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#561: FILE: arch/ia64/kernel/dyn_syscall_main.c:228:
+STATIC int

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#563: FILE: arch/ia64/kernel/dyn_syscall_main.c:230:
+dsc_read_func(char *page, char **start, off_t off, int count, int *eof,
+								void *data);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#565: FILE: arch/ia64/kernel/dyn_syscall_main.c:232:
+STATIC int

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct proc_dir_entry * const' should also have an identifier name
#565: FILE: arch/ia64/kernel/dyn_syscall_main.c:232:
+STATIC int

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char * const' should also have an identifier name
#565: FILE: arch/ia64/kernel/dyn_syscall_main.c:232:
+STATIC int

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const unsigned int' should also have an identifier name
#565: FILE: arch/ia64/kernel/dyn_syscall_main.c:232:
+STATIC int

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#567: FILE: arch/ia64/kernel/dyn_syscall_main.c:234:
+make_proc_entry(struct proc_dir_entry * const, const char * const,
+							const unsigned int);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#569: FILE: arch/ia64/kernel/dyn_syscall_main.c:236:
+
+

ERROR:SPACING: space required before the open brace '{'
#584: FILE: arch/ia64/kernel/dyn_syscall_main.c:251:
+	if (scn < 1 || scn >= NR_syscalls){

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#588: FILE: arch/ia64/kernel/dyn_syscall_main.c:255:
+	if ((entry_t) atomic64_read(&sh_syscall[scn].entry) <= 1 ||

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#589: FILE: arch/ia64/kernel/dyn_syscall_main.c:256:
+	if ((entry_t) atomic64_read(&sh_syscall[scn].entry) <= 1 ||
+		sys_call_table_addr[scn] != (entry_t) X_MODULE_LINK(scn) ||

CHECK:SPACING: No space is necessary after a cast
#589: FILE: arch/ia64/kernel/dyn_syscall_main.c:256:
+		sys_call_table_addr[scn] != (entry_t) X_MODULE_LINK(scn) ||

ERROR:SPACING: space required before the open brace '{'
#590: FILE: arch/ia64/kernel/dyn_syscall_main.c:257:
+				strcmp(sh_syscall[scn].name, name) != 0){

ERROR:SPACING: space required before the open brace '{'
#594: FILE: arch/ia64/kernel/dyn_syscall_main.c:261:
+	if (x_module_sem_tab[scn] != _SEM_WRITE_){

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#599: FILE: arch/ia64/kernel/dyn_syscall_main.c:266:
+	PRINT("Unlocking syscall \"%s\": No = %d\n", sh_syscall[scn].name,
+							scn + __NR_ni_syscall);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#604: FILE: arch/ia64/kernel/dyn_syscall_main.c:271:
+EXPORT_SYMBOL(syscall_unlock);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#606: FILE: arch/ia64/kernel/dyn_syscall_main.c:273:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#628: FILE: arch/ia64/kernel/dyn_syscall_main.c:295:
+	PRINT("Successfully locking syscall \"%s\": No = %d\n",
+				sh_syscall[scn].name, scn + __NR_ni_syscall);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#632: FILE: arch/ia64/kernel/dyn_syscall_main.c:299:
+
+

CHECK:SPACING: No space is necessary after a cast
#647: FILE: arch/ia64/kernel/dyn_syscall_main.c:314:
+	entry_t		addr = (entry_t) atomic64_read(&sh_syscall[scn].entry);

ERROR:SPACING: space required before the open brace '{'
#649: FILE: arch/ia64/kernel/dyn_syscall_main.c:316:
+	if (scn < 1 || scn >= NR_syscalls){

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#654: FILE: arch/ia64/kernel/dyn_syscall_main.c:321:
+	if (addr < KERNEL_START || !(addr & 1) ||
+				sys_call_table_addr[scn] != addr - 1 ||

ERROR:SPACING: space required before the open brace '{'
#655: FILE: arch/ia64/kernel/dyn_syscall_main.c:322:
+				strcmp(sh_syscall[scn].name, name) != 0){

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#662: FILE: arch/ia64/kernel/dyn_syscall_main.c:329:
+EXPORT_SYMBOL(syscall_trylock);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#664: FILE: arch/ia64/kernel/dyn_syscall_main.c:331:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#684: FILE: arch/ia64/kernel/dyn_syscall_main.c:351:
+dyn_syscall_reg(const char * const name, const unsigned int scall_no,
+							const dyn_syscall_t fp)

ERROR:SPACING: space required before the open brace '{'
#689: FILE: arch/ia64/kernel/dyn_syscall_main.c:356:
+	if (!atomic_check_and_dec(&free_entries, > 0)){

ERROR:SPACING: space required before the open brace '{'
#694: FILE: arch/ia64/kernel/dyn_syscall_main.c:361:
+	if (scall_no == 0){

ERROR:SPACING: space required before the open brace '{'
#699: FILE: arch/ia64/kernel/dyn_syscall_main.c:366:
+		if (scn < 1 || scn >= NR_syscalls){

ERROR:SPACING: space required before the open brace '{'
#705: FILE: arch/ia64/kernel/dyn_syscall_main.c:372:
+		if (cmpxchg(&sh_syscall[scn].entry, 0, 1) != 0){

ERROR:SPACING: space required before the open brace '{'
#710: FILE: arch/ia64/kernel/dyn_syscall_main.c:377:
+		if (sys_call_table_addr[scn] != sys_ni_syscall_addr){

WARNING:MEMORY_BARRIER: memory barrier without comment
#712: FILE: arch/ia64/kernel/dyn_syscall_main.c:379:
+			mb();

ERROR:SPACING: space required before the open brace '{'
#719: FILE: arch/ia64/kernel/dyn_syscall_main.c:386:
+	if ((rc = make_proc_entry(dyn_pde_p, name, scn)) < 0){

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#719: FILE: arch/ia64/kernel/dyn_syscall_main.c:386:
+	if ((rc = make_proc_entry(dyn_pde_p, name, scn)) < 0){

WARNING:MEMORY_BARRIER: memory barrier without comment
#721: FILE: arch/ia64/kernel/dyn_syscall_main.c:388:
+		mb();

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#731: FILE: arch/ia64/kernel/dyn_syscall_main.c:398:
+EXPORT_SYMBOL(dyn_syscall_reg);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#733: FILE: arch/ia64/kernel/dyn_syscall_main.c:400:
+
+

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#746: FILE: arch/ia64/kernel/dyn_syscall_main.c:413:
+^Iunsigned int ^Ii;$

ERROR:SPACING: space required before the open brace '{'
#749: FILE: arch/ia64/kernel/dyn_syscall_main.c:416:
+	for (i = NR_syscalls - 1; i > 0; i--){

CHECK:LINE_SPACING: Please don't use multiple blank lines
#760: FILE: arch/ia64/kernel/dyn_syscall_main.c:427:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#772: FILE: arch/ia64/kernel/dyn_syscall_main.c:439:
+	PRINT("Syscall \"%s\": No = %d IP = 0x%lx GP = 0x%lx\n",
+				sh_syscall[scn].name, scn + __NR_ni_syscall,

CHECK:SPACING: No space is necessary after a cast
#773: FILE: arch/ia64/kernel/dyn_syscall_main.c:440:
+				((fdesc_t *) fp)->ip, ((fdesc_t *) fp)->gp);

CHECK:SPACING: No space is necessary after a cast
#774: FILE: arch/ia64/kernel/dyn_syscall_main.c:441:
+	x_module_fp_tab[scn] = * (fdesc_t *) fp;

ERROR:SPACING: space prohibited after that '*' (ctx:WxW)
#774: FILE: arch/ia64/kernel/dyn_syscall_main.c:441:
+	x_module_fp_tab[scn] = * (fdesc_t *) fp;
 	                       ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#776: FILE: arch/ia64/kernel/dyn_syscall_main.c:443:
+	atomic64_set(&sh_syscall[scn].entry,
+			sys_call_table_addr[scn]);	/* Must not be 0 */

CHECK:SPACING: No space is necessary after a cast
#778: FILE: arch/ia64/kernel/dyn_syscall_main.c:445:
+	sys_call_table_addr[scn] = (entry_t) X_MODULE_LINK(scn);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#781: FILE: arch/ia64/kernel/dyn_syscall_main.c:448:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#795: FILE: arch/ia64/kernel/dyn_syscall_main.c:462:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#805: FILE: arch/ia64/kernel/dyn_syscall_main.c:472:
+	PRINT("Restoring syscall \"%s\": No = %d\n", sh_syscall[scn].name,
+							scn + __NR_ni_syscall);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#811: FILE: arch/ia64/kernel/dyn_syscall_main.c:478:
+
+

ERROR:SPACING: space required after that ',' (ctx:VxV)
#817: FILE: arch/ia64/kernel/dyn_syscall_main.c:484:
+#define MIN(a,b)	((a) < (b) ? (a) : (b))
              ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'a' - possible side-effects?
#817: FILE: arch/ia64/kernel/dyn_syscall_main.c:484:
+#define MIN(a,b)	((a) < (b) ? (a) : (b))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'b' - possible side-effects?
#817: FILE: arch/ia64/kernel/dyn_syscall_main.c:484:
+#define MIN(a,b)	((a) < (b) ? (a) : (b))

CHECK:SPACING: No space is necessary after a cast
#824: FILE: arch/ia64/kernel/dyn_syscall_main.c:491:
+	sprintf(buff, "%4d\n", ((int) (long) data) + __NR_ni_syscall);

ERROR:SPACING: space required before the open brace '{'
#825: FILE: arch/ia64/kernel/dyn_syscall_main.c:492:
+	if (off >= sizeof(buff) - 1){

CHECK:LINE_SPACING: Please don't use multiple blank lines
#834: FILE: arch/ia64/kernel/dyn_syscall_main.c:501:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#846: FILE: arch/ia64/kernel/dyn_syscall_main.c:513:
+make_proc_entry(struct proc_dir_entry * const p_pde_p, const char * const name,
+							const unsigned int scn)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#850: FILE: arch/ia64/kernel/dyn_syscall_main.c:517:
+	if ((pde_p = create_proc_entry(name, S_IRUSR | S_IRGRP | S_IROTH,

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IRGRP | S_IROTH' are not preferred. Consider using octal permissions '0444'.
#850: FILE: arch/ia64/kernel/dyn_syscall_main.c:517:
+	if ((pde_p = create_proc_entry(name, S_IRUSR | S_IRGRP | S_IROTH,

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#851: FILE: arch/ia64/kernel/dyn_syscall_main.c:518:
+	if ((pde_p = create_proc_entry(name, S_IRUSR | S_IRGRP | S_IROTH,
+							p_pde_p)) == NULL){

CHECK:SPACING: No space is necessary after a cast
#856: FILE: arch/ia64/kernel/dyn_syscall_main.c:523:
+	pde_p->data = (void *) (long) scn;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#863: FILE: arch/ia64/kernel/dyn_syscall_main.c:530:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#881: FILE: arch/ia64/kernel/dyn_syscall_main.c:548:
+hijack_syscall(const char * const name, const unsigned int scall_no,
+							const dyn_syscall_t fp)

ERROR:SPACING: space required before the open brace '{'
#886: FILE: arch/ia64/kernel/dyn_syscall_main.c:553:
+	if (scn < 1 || scn >= NR_syscalls){

ERROR:SPACING: space required before the open brace '{'
#891: FILE: arch/ia64/kernel/dyn_syscall_main.c:558:
+	if (cmpxchg(&sh_syscall[scn].entry, 0, 1) != 0){

ERROR:SPACING: space required before the open brace '{'
#895: FILE: arch/ia64/kernel/dyn_syscall_main.c:562:
+	if (sys_call_table_addr[scn] == sys_ni_syscall_addr){

ERROR:SPACING: space required before the open brace '{'
#901: FILE: arch/ia64/kernel/dyn_syscall_main.c:568:
+	if ((rc = make_proc_entry(hi_pde_p, name, scn)) < 0){

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#901: FILE: arch/ia64/kernel/dyn_syscall_main.c:568:
+	if ((rc = make_proc_entry(hi_pde_p, name, scn)) < 0){

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#911: FILE: arch/ia64/kernel/dyn_syscall_main.c:578:
+EXPORT_SYMBOL(hijack_syscall);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#913: FILE: arch/ia64/kernel/dyn_syscall_main.c:580:
+
+

ERROR:SPACING: space required before the open brace '{'
#929: FILE: arch/ia64/kernel/dyn_syscall_main.c:596:
+	if (scn < 1 || scn >= NR_syscalls){

CHECK:SPACING: No space is necessary after a cast
#933: FILE: arch/ia64/kernel/dyn_syscall_main.c:600:
+	if ((entry_t) atomic64_read(&sh_syscall[scn].entry) <= 1 ||

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#934: FILE: arch/ia64/kernel/dyn_syscall_main.c:601:
+	if ((entry_t) atomic64_read(&sh_syscall[scn].entry) <= 1 ||
+		sys_call_table_addr[scn] != (entry_t) X_MODULE_LINK(scn) ||

CHECK:SPACING: No space is necessary after a cast
#934: FILE: arch/ia64/kernel/dyn_syscall_main.c:601:
+		sys_call_table_addr[scn] != (entry_t) X_MODULE_LINK(scn) ||

ERROR:SPACING: space required before the open brace '{'
#935: FILE: arch/ia64/kernel/dyn_syscall_main.c:602:
+				strcmp(sh_syscall[scn].name, name) != 0){

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#940: FILE: arch/ia64/kernel/dyn_syscall_main.c:607:
+	PRINT("Preparing to restore syscall \"%s\": No = %d\n",
+						sh_syscall[scn].name, scall_no);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#942: FILE: arch/ia64/kernel/dyn_syscall_main.c:609:
+	sh_syscall[scn].pdentry = sh_syscall[scn].p_pdentry = NULL;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#947: FILE: arch/ia64/kernel/dyn_syscall_main.c:614:
+EXPORT_SYMBOL(prep_restore_syscall);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#949: FILE: arch/ia64/kernel/dyn_syscall_main.c:616:
+
+

CHECK:SPACING: No space is necessary after a cast
#964: FILE: arch/ia64/kernel/dyn_syscall_main.c:631:
+	entry_t		addr = (entry_t) atomic64_read(&sh_syscall[scn].entry);

ERROR:SPACING: space required before the open brace '{'
#966: FILE: arch/ia64/kernel/dyn_syscall_main.c:633:
+	if (scn < 1 || scn >= NR_syscalls){

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#971: FILE: arch/ia64/kernel/dyn_syscall_main.c:638:
+	if (addr < KERNEL_START || !(addr & 1) ||
+				sys_call_table_addr[scn] != addr - 1 ||

ERROR:SPACING: space required before the open brace '{'
#972: FILE: arch/ia64/kernel/dyn_syscall_main.c:639:
+				strcmp(sh_syscall[scn].name, name) != 0){

ERROR:SPACING: space required before the open brace '{'
#976: FILE: arch/ia64/kernel/dyn_syscall_main.c:643:
+	if (x_module_sem_tab[scn] != _SEM_WRITE_){

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#985: FILE: arch/ia64/kernel/dyn_syscall_main.c:652:
+EXPORT_SYMBOL(restore_syscall);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#987: FILE: arch/ia64/kernel/dyn_syscall_main.c:654:
+
+

ERROR:SPACING: space required before the open brace '{'
#1002: FILE: arch/ia64/kernel/dyn_syscall_main.c:669:
+	if (( rc = restore_syscall(name, scall_no)) == 0){

ERROR:SPACING: space prohibited after that open parenthesis '('
#1002: FILE: arch/ia64/kernel/dyn_syscall_main.c:669:
+	if (( rc = restore_syscall(name, scall_no)) == 0){

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1002: FILE: arch/ia64/kernel/dyn_syscall_main.c:669:
+	if (( rc = restore_syscall(name, scall_no)) == 0){

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1009: FILE: arch/ia64/kernel/dyn_syscall_main.c:676:
+EXPORT_SYMBOL(dyn_syscall_unreg);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1011: FILE: arch/ia64/kernel/dyn_syscall_main.c:678:
+
+

CHECK:SPACING: No space is necessary after a cast
#1028: FILE: arch/ia64/kernel/dyn_syscall_main.c:695:
+	p = (entry_t *) sys_call_table_addr;

ERROR:SPACING: space required before the open brace '{'
#1029: FILE: arch/ia64/kernel/dyn_syscall_main.c:696:
+	if (*p++ != sys_ni_syscall_addr){

ERROR:SPACING: space required before the open brace '{'
#1037: FILE: arch/ia64/kernel/dyn_syscall_main.c:704:
+	if (atomic_read(&free_entries) < 1){

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1044: FILE: arch/ia64/kernel/dyn_syscall_main.c:711:
+
+

ERROR:SPACING: space required before the open brace '{'
#1055: FILE: arch/ia64/kernel/dyn_syscall_main.c:722:
+	if ((dyn_pde_p = proc_mkdir(dyn_scall_dir, NULL)) == NULL){

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1055: FILE: arch/ia64/kernel/dyn_syscall_main.c:722:
+	if ((dyn_pde_p = proc_mkdir(dyn_scall_dir, NULL)) == NULL){

ERROR:SPACING: space required before the open brace '{'
#1059: FILE: arch/ia64/kernel/dyn_syscall_main.c:726:
+	if ((hi_pde_p = proc_mkdir(hijack_dir, NULL)) == NULL){

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1059: FILE: arch/ia64/kernel/dyn_syscall_main.c:726:
+	if ((hi_pde_p = proc_mkdir(hijack_dir, NULL)) == NULL){

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1069: FILE: arch/ia64/kernel/dyn_syscall_main.c:736:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1072: FILE: arch/ia64/kernel/dyn_syscall_main.c:739:
+
+

ERROR:SPACING: space required before the open brace '{'
#1085: FILE: arch/ia64/kernel/dyn_syscall_main.c:752:
+	for (p = buff; p < &buff[RD_BUF_SIZE];){

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1086: FILE: arch/ia64/kernel/dyn_syscall_main.c:753:
+		if ((rc = sys_read(fd, p, 1)) < 0)

ERROR:SPACING: space required before the open brace '{'
#1094: FILE: arch/ia64/kernel/dyn_syscall_main.c:761:
+	while (*p != '\n'){

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1095: FILE: arch/ia64/kernel/dyn_syscall_main.c:762:
+		if ((rc = sys_read(fd, p, 1)) < 0)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1104: FILE: arch/ia64/kernel/dyn_syscall_main.c:771:
+
+

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#1119: FILE: arch/ia64/kernel/dyn_syscall_main.c:786:
+	tmp = simple_strtoul(line, &p, 16);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1120: FILE: arch/ia64/kernel/dyn_syscall_main.c:787:
+	for (p += 3, q = p; *p != '\0' && *p != '\t' && *p != ' '; p++);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:SPACING: space required before the open brace '{'
#1122: FILE: arch/ia64/kernel/dyn_syscall_main.c:789:
+	if (strcmp(q, _sys_call_table) == 0){

CHECK:SPACING: No space is necessary after a cast
#1123: FILE: arch/ia64/kernel/dyn_syscall_main.c:790:
+		sys_call_table_addr = (entry_t *) tmp;

ERROR:SPACING: space required before the open brace '{'
#1125: FILE: arch/ia64/kernel/dyn_syscall_main.c:792:
+	} else if (strcmp(q, _sys_ni_syscall) == 0){

ERROR:SPACING: space required before the open brace '{'
#1128: FILE: arch/ia64/kernel/dyn_syscall_main.c:795:
+	} else if (strcmp(q, _kernel_gp) == 0){

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sys_call_table_addr"
#1132: FILE: arch/ia64/kernel/dyn_syscall_main.c:799:
+	return sys_call_table_addr != NULL &&

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1136: FILE: arch/ia64/kernel/dyn_syscall_main.c:803:
+
+

ERROR:SPACING: space required before the open brace '{'
#1156: FILE: arch/ia64/kernel/dyn_syscall_main.c:823:
+	if ((fd = sys_open(kernel_syms, O_RDONLY, 0)) < 0){

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1156: FILE: arch/ia64/kernel/dyn_syscall_main.c:823:
+	if ((fd = sys_open(kernel_syms, O_RDONLY, 0)) < 0){

ERROR:SPACING: space required before the open brace '{'
#1168: FILE: arch/ia64/kernel/dyn_syscall_main.c:835:
+	if (sys_call_table_addr == NULL){

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sys_call_table_addr"
#1168: FILE: arch/ia64/kernel/dyn_syscall_main.c:835:
+	if (sys_call_table_addr == NULL){

ERROR:SPACING: space required before the open brace '{'
#1172: FILE: arch/ia64/kernel/dyn_syscall_main.c:839:
+	if (sys_ni_syscall_addr == 0){

ERROR:SPACING: space required before the open brace '{'
#1176: FILE: arch/ia64/kernel/dyn_syscall_main.c:843:
+	if (x_module_k_gp == 0){

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1183: FILE: arch/ia64/kernel/dyn_syscall_main.c:850:
+
+

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1197: FILE: arch/ia64/kernel/dyn_syscall_main.c:864:
+	if ((rc = get_kernel_syms()) < 0)

CHECK:SPACING: No space is necessary after a cast
#1199: FILE: arch/ia64/kernel/dyn_syscall_main.c:866:
+	if (sys_call_table_addr < (entry_t *) KERNEL_START ||

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1200: FILE: arch/ia64/kernel/dyn_syscall_main.c:867:
+	if (sys_call_table_addr < (entry_t *) KERNEL_START ||
+			sys_call_table_addr >= (entry_t *) (KERNEL_START +

CHECK:SPACING: No space is necessary after a cast
#1200: FILE: arch/ia64/kernel/dyn_syscall_main.c:867:
+			sys_call_table_addr >= (entry_t *) (KERNEL_START +

ERROR:SPACING: space required before the open brace '{'
#1201: FILE: arch/ia64/kernel/dyn_syscall_main.c:868:
+			IA64_GRANULE_SIZE - NR_syscalls * sizeof(entry_t))){

CHECK:SPACING: No space is necessary after a cast
#1206: FILE: arch/ia64/kernel/dyn_syscall_main.c:873:
+						(entry_t) sys_call_table_addr){

ERROR:SPACING: space required before the open brace '{'
#1206: FILE: arch/ia64/kernel/dyn_syscall_main.c:873:
+						(entry_t) sys_call_table_addr){

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1210: FILE: arch/ia64/kernel/dyn_syscall_main.c:877:
+	if ((rc = count_free_syscalls()) < 0)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1224: FILE: arch/ia64/kernel/dyn_syscall_main.c:891:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1233: FILE: arch/ia64/kernel/dyn_syscall_main.c:900:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1241: FILE: include/asm-ia64/dyn_syscall.h:1:
+/*

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1252: FILE: include/asm-ia64/dyn_syscall.h:12:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1255: FILE: include/asm-ia64/dyn_syscall.h:15:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1259: FILE: include/asm-ia64/dyn_syscall.h:19:
+
+

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1260: FILE: include/asm-ia64/dyn_syscall.h:20:
+typedef	long (* dyn_syscall_t)(const int, ...);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1262: FILE: include/asm-ia64/dyn_syscall.h:22:
+
+

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1266: FILE: include/asm-ia64/dyn_syscall.h:26:
+typedef struct fdesc {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1271: FILE: include/asm-ia64/dyn_syscall.h:31:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1291: FILE: include/asm-ia64/dyn_syscall.h:51:
+dyn_syscall_reg(const char * const name, const unsigned int scall_no,
+							const dyn_syscall_t fp);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1293: FILE: include/asm-ia64/dyn_syscall.h:53:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1311: FILE: include/asm-ia64/dyn_syscall.h:71:
+hijack_syscall(const char * const name, const unsigned int scall_no,
+							const dyn_syscall_t fp);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1313: FILE: include/asm-ia64/dyn_syscall.h:73:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1326: FILE: include/asm-ia64/dyn_syscall.h:86:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1339: FILE: include/asm-ia64/dyn_syscall.h:99:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1352: FILE: include/asm-ia64/dyn_syscall.h:112:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1365: FILE: include/asm-ia64/dyn_syscall.h:125:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1379: FILE: include/asm-ia64/dyn_syscall.h:139:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1382: FILE: include/asm-ia64/dyn_syscall.h:142:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1428: FILE: Documentation/dyn_syscall.txt:33:
+    dynamically the syscalls actually needed. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1447: FILE: Documentation/dyn_syscall.txt:52:
+loadable kernel module. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1637: FILE: Documentation/dyn_syscall.txt:242:
+^I$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000287318.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 58 errors, 41 warnings, 93 checks, 1634 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000287318.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
