CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#76: FILE: include/asm-i386/hw_irq.h:72:
+extern void hw_resend_irq(struct hw_interrupt_type *h, unsigned int i);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#84: FILE: drivers/xen/core/evtchn.c:1:
+/******************************************************************************

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#86: FILE: drivers/xen/core/evtchn.c:3:
+ * $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#88: FILE: drivers/xen/core/evtchn.c:5:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#90: FILE: drivers/xen/core/evtchn.c:7:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#96: FILE: drivers/xen/core/evtchn.c:13:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#103: FILE: drivers/xen/core/evtchn.c:20:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#106: FILE: drivers/xen/core/evtchn.c:23:
+ * $

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#123: FILE: drivers/xen/core/evtchn.c:40:
+#include <asm/atomic.h>

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#190: FILE: drivers/xen/core/evtchn.c:107:
+static unsigned long pirq_needs_unmask_notify[NR_PIRQS/sizeof(unsigned long)];
                                                       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#195: FILE: drivers/xen/core/evtchn.c:112:
+static unsigned long cpu_evtchn_mask[NR_CPUS][NR_EVENT_CHANNELS/BITS_PER_LONG];
                                                                ^

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#251: FILE: drivers/xen/core/evtchn.c:168:
+extern fastcall unsigned int do_IRQ(struct pt_regs *regs);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#252: FILE: drivers/xen/core/evtchn.c:169:
+#if defined (__i386__)

CHECK:ARCH_DEFINES: architecture specific defines should be avoided
#252: FILE: drivers/xen/core/evtchn.c:169:
+#if defined (__i386__)

Architecture specific defines should be avoided wherever
possible.

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#255: FILE: drivers/xen/core/evtchn.c:172:
+#elif defined (__x86_64__)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'regs' - possible side-effects?
#259: FILE: drivers/xen/core/evtchn.c:176:
+#define do_IRQ(irq, regs) do {		\
+	(regs)->IRQ_REG = ~(irq);	\
+	do_IRQ((regs));			\
+} while (0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#300: FILE: drivers/xen/core/evtchn.c:217:
+			if ((irq = evtchn_to_irq[port]) != -1)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#300: FILE: drivers/xen/core/evtchn.c:217:
+			if ((irq = evtchn_to_irq[port]) != -1)
[...]
+			else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#302: FILE: drivers/xen/core/evtchn.c:219:
+			else {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#323: FILE: drivers/xen/core/evtchn.c:240:
+		printk(KERN_ERR "No available IRQ to bind to: increase NR_IRQS!\n");

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#336: FILE: drivers/xen/core/evtchn.c:253:
+	if ((irq = evtchn_to_irq[evtchn]) == -1) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#358: FILE: drivers/xen/core/evtchn.c:275:
+	if ((irq = per_cpu(virq_to_irq, cpu)[virq]) == -1) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#365: FILE: drivers/xen/core/evtchn.c:282:
+		BUG_ON(HYPERVISOR_event_channel_op(&op) != 0);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#390: FILE: drivers/xen/core/evtchn.c:307:
+	if ((irq = per_cpu(ipi_to_irq, cpu)[ipi]) == -1) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#396: FILE: drivers/xen/core/evtchn.c:313:
+		BUG_ON(HYPERVISOR_event_channel_op(&op) != 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#423: FILE: drivers/xen/core/evtchn.c:340:
+		BUG_ON(HYPERVISOR_event_channel_op(&op) != 0);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#448: FILE: drivers/xen/core/evtchn.c:365:
+int bind_evtchn_to_irqhandler(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#472: FILE: drivers/xen/core/evtchn.c:389:
+int bind_virq_to_irqhandler(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#497: FILE: drivers/xen/core/evtchn.c:414:
+int bind_ipi_to_irqhandler(

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#536: FILE: drivers/xen/core/evtchn.c:453:
+static void rebind_irq_to_cpu(unsigned irq, unsigned tcpu)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#536: FILE: drivers/xen/core/evtchn.c:453:
+static void rebind_irq_to_cpu(unsigned irq, unsigned tcpu)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#554: FILE: drivers/xen/core/evtchn.c:471:
+^I * If this fails, it usually just indicates that we're dealing with a $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#565: FILE: drivers/xen/core/evtchn.c:482:
+^I * will check for any pending interrupts, and so service any that got $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#567: FILE: drivers/xen/core/evtchn.c:484:
+^I * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#569: FILE: drivers/xen/core/evtchn.c:486:
+^I * the hotplug/hotunplug path. In that case, all cpus are stopped with $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#577: FILE: drivers/xen/core/evtchn.c:494:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#578: FILE: drivers/xen/core/evtchn.c:495:
+static void set_affinity_irq(unsigned irq, cpumask_t dest)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#580: FILE: drivers/xen/core/evtchn.c:497:
+	unsigned tcpu = first_cpu(dest);

WARNING:LINE_SPACING: Missing a blank line after declarations
#581: FILE: drivers/xen/core/evtchn.c:498:
+	unsigned tcpu = first_cpu(dest);
+	rebind_irq_to_cpu(irq, tcpu);

WARNING:LINE_SPACING: Missing a blank line after declarations
#653: FILE: drivers/xen/core/evtchn.c:570:
+	struct physdev_op op;
+	if (unlikely(test_bit(pirq, &pirq_needs_unmask_notify[0]))) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#662: FILE: drivers/xen/core/evtchn.c:579:
+	struct physdev_op op;
+	op.cmd = PHYSDEVOP_IRQ_STATUS_QUERY;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!irq_desc[(_irq)].action"
#674: FILE: drivers/xen/core/evtchn.c:591:
+#define probing_irq(_irq) (irq_desc[(_irq)].action == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#689: FILE: drivers/xen/core/evtchn.c:606:
+			printk(KERN_INFO "Failed to obtain physical IRQ %d\n",

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#719: FILE: drivers/xen/core/evtchn.c:636:
+	BUG_ON(HYPERVISOR_event_channel_op(&op) != 0);

WARNING:LINE_SPACING: Missing a blank line after declarations
#779: FILE: drivers/xen/core/evtchn.c:696:
+	struct shared_info *s = HYPERVISOR_shared_info;
+	if (!VALID_EVTCHN(evtchn))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#781: FILE: drivers/xen/core/evtchn.c:698:
+	BUG_ON(!test_bit(evtchn, &s->evtchn_mask[0]));

WARNING:LINE_SPACING: Missing a blank line after declarations
#797: FILE: drivers/xen/core/evtchn.c:714:
+	struct shared_info *s = HYPERVISOR_shared_info;
+	synch_set_bit(port, &s->evtchn_mask[0]);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#845: FILE: drivers/xen/core/evtchn.c:762:
+		BUG_ON(irq_info[pirq_to_irq(pirq)] != IRQ_UNBOUND);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#848: FILE: drivers/xen/core/evtchn.c:765:
+	for (cpu = 1; cpu < NR_CPUS; cpu++) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#850: FILE: drivers/xen/core/evtchn.c:767:
+			BUG_ON(per_cpu(virq_to_irq, cpu)[virq] != -1);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#852: FILE: drivers/xen/core/evtchn.c:769:
+			BUG_ON(per_cpu(ipi_to_irq, cpu)[ipi] != -1);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#863: FILE: drivers/xen/core/evtchn.c:780:
+		if ((irq = per_cpu(virq_to_irq, 0)[virq]) == -1)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#866: FILE: drivers/xen/core/evtchn.c:783:
+		BUG_ON(irq_info[irq] != mk_irq_info(IRQT_VIRQ, virq, 0));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#873: FILE: drivers/xen/core/evtchn.c:790:
+		BUG_ON(HYPERVISOR_event_channel_op(&op) != 0);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#886: FILE: drivers/xen/core/evtchn.c:803:
+		if ((irq = per_cpu(ipi_to_irq, 0)[ipi]) == -1)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#889: FILE: drivers/xen/core/evtchn.c:806:
+		BUG_ON(irq_info[irq] != mk_irq_info(IRQT_IPI, ipi, 0));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#895: FILE: drivers/xen/core/evtchn.c:812:
+		BUG_ON(HYPERVISOR_event_channel_op(&op) != 0);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#911: FILE: drivers/xen/core/evtchn.c:828:
+void __init init_ISA_irqs (void)

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#927: FILE: drivers/xen/core/evtchn.c:844:
+	for (cpu = 0; cpu < NR_CPUS; cpu++) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'i == RTC_IRQ'
#960: FILE: drivers/xen/core/evtchn.c:877:
+		if ((i == RTC_IRQ) &&
+		    !(xen_start_info->flags & SIF_INITDOMAIN))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#974: FILE: include/asm-i386/mach-xen/irq_vectors.h:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#994: FILE: include/asm-i386/mach-xen/irq_vectors.h:21:
+ */^I^I^I$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'irq' - possible side-effects?
#1053: FILE: include/asm-i386/mach-xen/irq_vectors.h:80:
+#define invalid_vm86_irq(irq)	((irq) < 3 || (irq) > 15)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1058: FILE: include/asm-i386/mach-xen/irq_vectors.h:85:
+ *     if we have physical device-access privilege. This region is at the $

CHECK:BIT_MACRO: Prefer using the BIT macro
#1067: FILE: include/asm-i386/mach-xen/irq_vectors.h:94:
+#define NR_PIRQS		(1 << PIRQ_BITS)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#1071: FILE: include/asm-i386/mach-xen/irq_vectors.h:98:
+#define NR_DYNIRQS		(1 << DYNIRQ_BITS)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1086: FILE: include/xen/evtchn.h:1:
+/******************************************************************************

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1088: FILE: include/xen/evtchn.h:3:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1091: FILE: include/xen/evtchn.h:6:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1093: FILE: include/xen/evtchn.h:8:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1099: FILE: include/xen/evtchn.h:14:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1106: FILE: include/xen/evtchn.h:21:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1109: FILE: include/xen/evtchn.h:24:
+ * $

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1142: FILE: include/xen/evtchn.h:57:
+extern int bind_evtchn_to_irqhandler(

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1142: FILE: include/xen/evtchn.h:57:
+extern int bind_evtchn_to_irqhandler(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1148: FILE: include/xen/evtchn.h:63:
+extern int bind_virq_to_irqhandler(

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1148: FILE: include/xen/evtchn.h:63:
+extern int bind_virq_to_irqhandler(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1155: FILE: include/xen/evtchn.h:70:
+extern int bind_ipi_to_irqhandler(

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1155: FILE: include/xen/evtchn.h:70:
+extern int bind_ipi_to_irqhandler(

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1168: FILE: include/xen/evtchn.h:83:
+extern void unbind_from_irqhandler(unsigned int irq, void *dev_id);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1170: FILE: include/xen/evtchn.h:85:
+extern void irq_resume(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1176: FILE: include/xen/evtchn.h:91:
+extern void evtchn_device_upcall(int port);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1178: FILE: include/xen/evtchn.h:93:
+extern void mask_evtchn(int port);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1179: FILE: include/xen/evtchn.h:94:
+extern void unmask_evtchn(int port);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1184: FILE: include/xen/evtchn.h:99:
+	struct shared_info *s = HYPERVISOR_shared_info;
+	synch_clear_bit(port, &s->evtchn_pending[0]);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1190: FILE: include/xen/evtchn.h:105:
+	struct evtchn_op op;
+	op.cmd         = EVTCHNOP_send,

WARNING:SUSPECT_COMMA_SEMICOLON: Possible comma where semicolon could be used
#1190: FILE: include/xen/evtchn.h:105:
+	op.cmd         = EVTCHNOP_send,
+	op.u.send.port = port;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1199: FILE: include/xen/evtchn.h:114:
+extern void notify_remote_via_irq(int irq);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000079280.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 24 errors, 36 warnings, 28 checks, 1140 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000079280.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
