WARNING:TYPO_SPELLING: 'accomodate' may be misspelled - perhaps 'accommodate'?
#26: 
simple header files, and generalizing the mk_ptregs buils to accomodate
                                                             ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#77: FILE: arch/um/include/sysdep-i386/ptrace.h:48:
+#define REGS_SET_SYSCALL_RETURN(r, res) REGS_EAX(r) = (res)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#95: FILE: arch/um/include/sysdep-x86_64/ptrace.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#151: FILE: arch/um/include/sysdep-x86_64/ptrace.h:57:
+#define REGS_SET_SYSCALL_RETURN(r, res) REGS_RAX(r) = (res)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'r' - possible side-effects?
#197: FILE: arch/um/include/sysdep-x86_64/ptrace.h:103:
+#define UPT_RBX(r) CHOOSE_MODE(SC_RBX(UPT_SC(r)), REGS_RBX((r)->skas.regs))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'r' - possible side-effects?
#198: FILE: arch/um/include/sysdep-x86_64/ptrace.h:104:
+#define UPT_RCX(r) CHOOSE_MODE(SC_RCX(UPT_SC(r)), REGS_RCX((r)->skas.regs))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'r' - possible side-effects?
#199: FILE: arch/um/include/sysdep-x86_64/ptrace.h:105:
+#define UPT_RDX(r) CHOOSE_MODE(SC_RDX(UPT_SC(r)), REGS_RDX((r)->skas.regs))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'r' - possible side-effects?
#200: FILE: arch/um/include/sysdep-x86_64/ptrace.h:106:
+#define UPT_RSI(r) CHOOSE_MODE(SC_RSI(UPT_SC(r)), REGS_RSI((r)->skas.regs))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'r' - possible side-effects?
#201: FILE: arch/um/include/sysdep-x86_64/ptrace.h:107:
+#define UPT_RDI(r) CHOOSE_MODE(SC_RDI(UPT_SC(r)), REGS_RDI((r)->skas.regs))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'r' - possible side-effects?
#202: FILE: arch/um/include/sysdep-x86_64/ptrace.h:108:
+#define UPT_RBP(r) CHOOSE_MODE(SC_RBP(UPT_SC(r)), REGS_RBP((r)->skas.regs))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'r' - possible side-effects?
#203: FILE: arch/um/include/sysdep-x86_64/ptrace.h:109:
+#define UPT_RAX(r) CHOOSE_MODE(SC_RAX(UPT_SC(r)), REGS_RAX((r)->skas.regs))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'r' - possible side-effects?
#204: FILE: arch/um/include/sysdep-x86_64/ptrace.h:110:
+#define UPT_R8(r) CHOOSE_MODE(SC_R8(UPT_SC(r)), REGS_R8((r)->skas.regs))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'r' - possible side-effects?
#205: FILE: arch/um/include/sysdep-x86_64/ptrace.h:111:
+#define UPT_R9(r) CHOOSE_MODE(SC_R9(UPT_SC(r)), REGS_R9((r)->skas.regs))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'r' - possible side-effects?
#206: FILE: arch/um/include/sysdep-x86_64/ptrace.h:112:
+#define UPT_R10(r) CHOOSE_MODE(SC_R10(UPT_SC(r)), REGS_R10((r)->skas.regs))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'r' - possible side-effects?
#207: FILE: arch/um/include/sysdep-x86_64/ptrace.h:113:
+#define UPT_R11(r) CHOOSE_MODE(SC_R11(UPT_SC(r)), REGS_R11((r)->skas.regs))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'r' - possible side-effects?
#208: FILE: arch/um/include/sysdep-x86_64/ptrace.h:114:
+#define UPT_R12(r) CHOOSE_MODE(SC_R12(UPT_SC(r)), REGS_R12((r)->skas.regs))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'r' - possible side-effects?
#209: FILE: arch/um/include/sysdep-x86_64/ptrace.h:115:
+#define UPT_R13(r) CHOOSE_MODE(SC_R13(UPT_SC(r)), REGS_R13((r)->skas.regs))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'r' - possible side-effects?
#210: FILE: arch/um/include/sysdep-x86_64/ptrace.h:116:
+#define UPT_R14(r) CHOOSE_MODE(SC_R14(UPT_SC(r)), REGS_R14((r)->skas.regs))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'r' - possible side-effects?
#211: FILE: arch/um/include/sysdep-x86_64/ptrace.h:117:
+#define UPT_R15(r) CHOOSE_MODE(SC_R15(UPT_SC(r)), REGS_R15((r)->skas.regs))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'r' - possible side-effects?
#212: FILE: arch/um/include/sysdep-x86_64/ptrace.h:118:
+#define UPT_CS(r) CHOOSE_MODE(SC_CS(UPT_SC(r)), REGS_CS((r)->skas.regs))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'r' - possible side-effects?
#213: FILE: arch/um/include/sysdep-x86_64/ptrace.h:119:
+#define UPT_FS(r) CHOOSE_MODE(SC_FS(UPT_SC(r)), REGS_FS((r)->skas.regs))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'r' - possible side-effects?
#214: FILE: arch/um/include/sysdep-x86_64/ptrace.h:120:
+#define UPT_GS(r) CHOOSE_MODE(SC_GS(UPT_SC(r)), REGS_GS((r)->skas.regs))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'r' - possible side-effects?
#215: FILE: arch/um/include/sysdep-x86_64/ptrace.h:121:
+#define UPT_DS(r) CHOOSE_MODE(SC_DS(UPT_SC(r)), REGS_DS((r)->skas.regs))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'r' - possible side-effects?
#216: FILE: arch/um/include/sysdep-x86_64/ptrace.h:122:
+#define UPT_ES(r) CHOOSE_MODE(SC_ES(UPT_SC(r)), REGS_ES((r)->skas.regs))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'r' - possible side-effects?
#217: FILE: arch/um/include/sysdep-x86_64/ptrace.h:123:
+#define UPT_CS(r) CHOOSE_MODE(SC_CS(UPT_SC(r)), REGS_CS((r)->skas.regs))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'r' - possible side-effects?
#218: FILE: arch/um/include/sysdep-x86_64/ptrace.h:124:
+#define UPT_ORIG_RAX(r) \
+	CHOOSE_MODE((r)->tt.orig_rax, REGS_ORIG_RAX((r)->skas.regs))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'r' - possible side-effects?
#221: FILE: arch/um/include/sysdep-x86_64/ptrace.h:127:
+#define UPT_IP(r) CHOOSE_MODE(SC_IP(UPT_SC(r)), REGS_IP((r)->skas.regs))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'r' - possible side-effects?
#222: FILE: arch/um/include/sysdep-x86_64/ptrace.h:128:
+#define UPT_SP(r) CHOOSE_MODE(SC_SP(UPT_SC(r)), REGS_SP((r)->skas.regs))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'r' - possible side-effects?
#224: FILE: arch/um/include/sysdep-x86_64/ptrace.h:130:
+#define UPT_EFLAGS(r) \
+	CHOOSE_MODE(SC_EFLAGS(UPT_SC(r)), REGS_EFLAGS((r)->skas.regs))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'r' - possible side-effects?
#227: FILE: arch/um/include/sysdep-x86_64/ptrace.h:133:
+#define UPT_SYSCALL_NR(r) CHOOSE_MODE((r)->tt.syscall, (r)->skas.syscall)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#229: FILE: arch/um/include/sysdep-x86_64/ptrace.h:135:
+extern int user_context(unsigned long sp);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'r' - possible side-effects?
#231: FILE: arch/um/include/sysdep-x86_64/ptrace.h:137:
+#define UPT_IS_USER(r) \
+	CHOOSE_MODE(user_context(UPT_SP(r)), (r)->skas.is_user)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'r' - possible side-effects?
#245: FILE: arch/um/include/sysdep-x86_64/ptrace.h:151:
+#define SYSCALL_ARGS(r) ((struct syscall_args) \
+                        { .args = { UPT_SYSCALL_ARG1(r), \
+                                    UPT_SYSCALL_ARG2(r), \
+ 			            UPT_SYSCALL_ARG3(r), \
+                                    UPT_SYSCALL_ARG4(r), \
+		                    UPT_SYSCALL_ARG5(r), \
+                                    UPT_SYSCALL_ARG6(r) } } )

ERROR:CODE_INDENT: code indent should use tabs where possible
#246: FILE: arch/um/include/sysdep-x86_64/ptrace.h:152:
+                        { .args = { UPT_SYSCALL_ARG1(r), \$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#246: FILE: arch/um/include/sysdep-x86_64/ptrace.h:152:
+                        { .args = { UPT_SYSCALL_ARG1(r), \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#247: FILE: arch/um/include/sysdep-x86_64/ptrace.h:153:
+                                    UPT_SYSCALL_ARG2(r), \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#247: FILE: arch/um/include/sysdep-x86_64/ptrace.h:153:
+                                    UPT_SYSCALL_ARG2(r), \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#248: FILE: arch/um/include/sysdep-x86_64/ptrace.h:154:
+ ^I^I^I            UPT_SYSCALL_ARG3(r), \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#248: FILE: arch/um/include/sysdep-x86_64/ptrace.h:154:
+ ^I^I^I            UPT_SYSCALL_ARG3(r), \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#248: FILE: arch/um/include/sysdep-x86_64/ptrace.h:154:
+ ^I^I^I            UPT_SYSCALL_ARG3(r), \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#249: FILE: arch/um/include/sysdep-x86_64/ptrace.h:155:
+                                    UPT_SYSCALL_ARG4(r), \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#249: FILE: arch/um/include/sysdep-x86_64/ptrace.h:155:
+                                    UPT_SYSCALL_ARG4(r), \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#250: FILE: arch/um/include/sysdep-x86_64/ptrace.h:156:
+^I^I                    UPT_SYSCALL_ARG5(r), \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#251: FILE: arch/um/include/sysdep-x86_64/ptrace.h:157:
+                                    UPT_SYSCALL_ARG6(r) } } )$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#251: FILE: arch/um/include/sysdep-x86_64/ptrace.h:157:
+                                    UPT_SYSCALL_ARG6(r) } } )$

ERROR:SPACING: space prohibited before that close parenthesis ')'
#251: FILE: arch/um/include/sysdep-x86_64/ptrace.h:157:
+                                    UPT_SYSCALL_ARG6(r) } } )

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'regs' - possible side-effects?
#253: FILE: arch/um/include/sysdep-x86_64/ptrace.h:159:
+#define UPT_REG(regs, reg) \
+        ({      unsigned long val; \
+                switch(reg){ \
+		case R8: val = UPT_R8(regs); break; \
+		case R9: val = UPT_R9(regs); break; \
+		case R10: val = UPT_R10(regs); break; \
+		case R11: val = UPT_R11(regs); break; \
+		case R12: val = UPT_R12(regs); break; \
+		case R13: val = UPT_R13(regs); break; \
+		case R14: val = UPT_R14(regs); break; \
+		case R15: val = UPT_R15(regs); break; \
+                case RIP: val = UPT_IP(regs); break; \
+                case RSP: val = UPT_SP(regs); break; \
+                case RAX: val = UPT_RAX(regs); break; \
+                case RBX: val = UPT_RBX(regs); break; \
+                case RCX: val = UPT_RCX(regs); break; \
+                case RDX: val = UPT_RDX(regs); break; \
+                case RSI: val = UPT_RSI(regs); break; \
+                case RDI: val = UPT_RDI(regs); break; \
+                case RBP: val = UPT_RBP(regs); break; \
+                case ORIG_RAX: val = UPT_ORIG_RAX(regs); break; \
+                case CS: val = UPT_CS(regs); break; \
+                case DS: val = UPT_DS(regs); break; \
+                case ES: val = UPT_ES(regs); break; \
+                case FS: val = UPT_FS(regs); break; \
+                case GS: val = UPT_GS(regs); break; \
+                case EFLAGS: val = UPT_EFLAGS(regs); break; \
+                default :  \
+                        panic("Bad register in UPT_REG : %d\n", reg);  \
+                        val = -1; \
+                } \
+                val; \
+        })

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'reg' - possible side-effects?
#253: FILE: arch/um/include/sysdep-x86_64/ptrace.h:159:
+#define UPT_REG(regs, reg) \
+        ({      unsigned long val; \
+                switch(reg){ \
+		case R8: val = UPT_R8(regs); break; \
+		case R9: val = UPT_R9(regs); break; \
+		case R10: val = UPT_R10(regs); break; \
+		case R11: val = UPT_R11(regs); break; \
+		case R12: val = UPT_R12(regs); break; \
+		case R13: val = UPT_R13(regs); break; \
+		case R14: val = UPT_R14(regs); break; \
+		case R15: val = UPT_R15(regs); break; \
+                case RIP: val = UPT_IP(regs); break; \
+                case RSP: val = UPT_SP(regs); break; \
+                case RAX: val = UPT_RAX(regs); break; \
+                case RBX: val = UPT_RBX(regs); break; \
+                case RCX: val = UPT_RCX(regs); break; \
+                case RDX: val = UPT_RDX(regs); break; \
+                case RSI: val = UPT_RSI(regs); break; \
+                case RDI: val = UPT_RDI(regs); break; \
+                case RBP: val = UPT_RBP(regs); break; \
+                case ORIG_RAX: val = UPT_ORIG_RAX(regs); break; \
+                case CS: val = UPT_CS(regs); break; \
+                case DS: val = UPT_DS(regs); break; \
+                case ES: val = UPT_ES(regs); break; \
+                case FS: val = UPT_FS(regs); break; \
+                case GS: val = UPT_GS(regs); break; \
+                case EFLAGS: val = UPT_EFLAGS(regs); break; \
+                default :  \
+                        panic("Bad register in UPT_REG : %d\n", reg);  \
+                        val = -1; \
+                } \
+                val; \
+        })

ERROR:CODE_INDENT: code indent should use tabs where possible
#254: FILE: arch/um/include/sysdep-x86_64/ptrace.h:160:
+        ({      unsigned long val; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#254: FILE: arch/um/include/sysdep-x86_64/ptrace.h:160:
+        ({      unsigned long val; \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#255: FILE: arch/um/include/sysdep-x86_64/ptrace.h:161:
+                switch(reg){ \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#255: FILE: arch/um/include/sysdep-x86_64/ptrace.h:161:
+                switch(reg){ \$

ERROR:SPACING: space required before the open brace '{'
#255: FILE: arch/um/include/sysdep-x86_64/ptrace.h:161:
+                switch(reg){ \

ERROR:SPACING: space required before the open parenthesis '('
#255: FILE: arch/um/include/sysdep-x86_64/ptrace.h:161:
+                switch(reg){ \

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#256: FILE: arch/um/include/sysdep-x86_64/ptrace.h:162:
+		case R8: val = UPT_R8(regs); break; \

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#257: FILE: arch/um/include/sysdep-x86_64/ptrace.h:163:
+		case R9: val = UPT_R9(regs); break; \

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#258: FILE: arch/um/include/sysdep-x86_64/ptrace.h:164:
+		case R10: val = UPT_R10(regs); break; \

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#259: FILE: arch/um/include/sysdep-x86_64/ptrace.h:165:
+		case R11: val = UPT_R11(regs); break; \

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#260: FILE: arch/um/include/sysdep-x86_64/ptrace.h:166:
+		case R12: val = UPT_R12(regs); break; \

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#261: FILE: arch/um/include/sysdep-x86_64/ptrace.h:167:
+		case R13: val = UPT_R13(regs); break; \

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#262: FILE: arch/um/include/sysdep-x86_64/ptrace.h:168:
+		case R14: val = UPT_R14(regs); break; \

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#263: FILE: arch/um/include/sysdep-x86_64/ptrace.h:169:
+		case R15: val = UPT_R15(regs); break; \

ERROR:CODE_INDENT: code indent should use tabs where possible
#264: FILE: arch/um/include/sysdep-x86_64/ptrace.h:170:
+                case RIP: val = UPT_IP(regs); break; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#264: FILE: arch/um/include/sysdep-x86_64/ptrace.h:170:
+                case RIP: val = UPT_IP(regs); break; \$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#264: FILE: arch/um/include/sysdep-x86_64/ptrace.h:170:
+                case RIP: val = UPT_IP(regs); break; \

ERROR:CODE_INDENT: code indent should use tabs where possible
#265: FILE: arch/um/include/sysdep-x86_64/ptrace.h:171:
+                case RSP: val = UPT_SP(regs); break; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#265: FILE: arch/um/include/sysdep-x86_64/ptrace.h:171:
+                case RSP: val = UPT_SP(regs); break; \$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#265: FILE: arch/um/include/sysdep-x86_64/ptrace.h:171:
+                case RSP: val = UPT_SP(regs); break; \

ERROR:CODE_INDENT: code indent should use tabs where possible
#266: FILE: arch/um/include/sysdep-x86_64/ptrace.h:172:
+                case RAX: val = UPT_RAX(regs); break; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#266: FILE: arch/um/include/sysdep-x86_64/ptrace.h:172:
+                case RAX: val = UPT_RAX(regs); break; \$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#266: FILE: arch/um/include/sysdep-x86_64/ptrace.h:172:
+                case RAX: val = UPT_RAX(regs); break; \

ERROR:CODE_INDENT: code indent should use tabs where possible
#267: FILE: arch/um/include/sysdep-x86_64/ptrace.h:173:
+                case RBX: val = UPT_RBX(regs); break; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#267: FILE: arch/um/include/sysdep-x86_64/ptrace.h:173:
+                case RBX: val = UPT_RBX(regs); break; \$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#267: FILE: arch/um/include/sysdep-x86_64/ptrace.h:173:
+                case RBX: val = UPT_RBX(regs); break; \

ERROR:CODE_INDENT: code indent should use tabs where possible
#268: FILE: arch/um/include/sysdep-x86_64/ptrace.h:174:
+                case RCX: val = UPT_RCX(regs); break; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#268: FILE: arch/um/include/sysdep-x86_64/ptrace.h:174:
+                case RCX: val = UPT_RCX(regs); break; \$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#268: FILE: arch/um/include/sysdep-x86_64/ptrace.h:174:
+                case RCX: val = UPT_RCX(regs); break; \

ERROR:CODE_INDENT: code indent should use tabs where possible
#269: FILE: arch/um/include/sysdep-x86_64/ptrace.h:175:
+                case RDX: val = UPT_RDX(regs); break; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#269: FILE: arch/um/include/sysdep-x86_64/ptrace.h:175:
+                case RDX: val = UPT_RDX(regs); break; \$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#269: FILE: arch/um/include/sysdep-x86_64/ptrace.h:175:
+                case RDX: val = UPT_RDX(regs); break; \

ERROR:CODE_INDENT: code indent should use tabs where possible
#270: FILE: arch/um/include/sysdep-x86_64/ptrace.h:176:
+                case RSI: val = UPT_RSI(regs); break; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#270: FILE: arch/um/include/sysdep-x86_64/ptrace.h:176:
+                case RSI: val = UPT_RSI(regs); break; \$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#270: FILE: arch/um/include/sysdep-x86_64/ptrace.h:176:
+                case RSI: val = UPT_RSI(regs); break; \

ERROR:CODE_INDENT: code indent should use tabs where possible
#271: FILE: arch/um/include/sysdep-x86_64/ptrace.h:177:
+                case RDI: val = UPT_RDI(regs); break; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#271: FILE: arch/um/include/sysdep-x86_64/ptrace.h:177:
+                case RDI: val = UPT_RDI(regs); break; \$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#271: FILE: arch/um/include/sysdep-x86_64/ptrace.h:177:
+                case RDI: val = UPT_RDI(regs); break; \

ERROR:CODE_INDENT: code indent should use tabs where possible
#272: FILE: arch/um/include/sysdep-x86_64/ptrace.h:178:
+                case RBP: val = UPT_RBP(regs); break; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#272: FILE: arch/um/include/sysdep-x86_64/ptrace.h:178:
+                case RBP: val = UPT_RBP(regs); break; \$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#272: FILE: arch/um/include/sysdep-x86_64/ptrace.h:178:
+                case RBP: val = UPT_RBP(regs); break; \

ERROR:CODE_INDENT: code indent should use tabs where possible
#273: FILE: arch/um/include/sysdep-x86_64/ptrace.h:179:
+                case ORIG_RAX: val = UPT_ORIG_RAX(regs); break; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#273: FILE: arch/um/include/sysdep-x86_64/ptrace.h:179:
+                case ORIG_RAX: val = UPT_ORIG_RAX(regs); break; \$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#273: FILE: arch/um/include/sysdep-x86_64/ptrace.h:179:
+                case ORIG_RAX: val = UPT_ORIG_RAX(regs); break; \

ERROR:CODE_INDENT: code indent should use tabs where possible
#274: FILE: arch/um/include/sysdep-x86_64/ptrace.h:180:
+                case CS: val = UPT_CS(regs); break; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#274: FILE: arch/um/include/sysdep-x86_64/ptrace.h:180:
+                case CS: val = UPT_CS(regs); break; \$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#274: FILE: arch/um/include/sysdep-x86_64/ptrace.h:180:
+                case CS: val = UPT_CS(regs); break; \

ERROR:CODE_INDENT: code indent should use tabs where possible
#275: FILE: arch/um/include/sysdep-x86_64/ptrace.h:181:
+                case DS: val = UPT_DS(regs); break; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#275: FILE: arch/um/include/sysdep-x86_64/ptrace.h:181:
+                case DS: val = UPT_DS(regs); break; \$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#275: FILE: arch/um/include/sysdep-x86_64/ptrace.h:181:
+                case DS: val = UPT_DS(regs); break; \

ERROR:CODE_INDENT: code indent should use tabs where possible
#276: FILE: arch/um/include/sysdep-x86_64/ptrace.h:182:
+                case ES: val = UPT_ES(regs); break; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#276: FILE: arch/um/include/sysdep-x86_64/ptrace.h:182:
+                case ES: val = UPT_ES(regs); break; \$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#276: FILE: arch/um/include/sysdep-x86_64/ptrace.h:182:
+                case ES: val = UPT_ES(regs); break; \

ERROR:CODE_INDENT: code indent should use tabs where possible
#277: FILE: arch/um/include/sysdep-x86_64/ptrace.h:183:
+                case FS: val = UPT_FS(regs); break; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#277: FILE: arch/um/include/sysdep-x86_64/ptrace.h:183:
+                case FS: val = UPT_FS(regs); break; \$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#277: FILE: arch/um/include/sysdep-x86_64/ptrace.h:183:
+                case FS: val = UPT_FS(regs); break; \

ERROR:CODE_INDENT: code indent should use tabs where possible
#278: FILE: arch/um/include/sysdep-x86_64/ptrace.h:184:
+                case GS: val = UPT_GS(regs); break; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#278: FILE: arch/um/include/sysdep-x86_64/ptrace.h:184:
+                case GS: val = UPT_GS(regs); break; \$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#278: FILE: arch/um/include/sysdep-x86_64/ptrace.h:184:
+                case GS: val = UPT_GS(regs); break; \

ERROR:CODE_INDENT: code indent should use tabs where possible
#279: FILE: arch/um/include/sysdep-x86_64/ptrace.h:185:
+                case EFLAGS: val = UPT_EFLAGS(regs); break; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#279: FILE: arch/um/include/sysdep-x86_64/ptrace.h:185:
+                case EFLAGS: val = UPT_EFLAGS(regs); break; \$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#279: FILE: arch/um/include/sysdep-x86_64/ptrace.h:185:
+                case EFLAGS: val = UPT_EFLAGS(regs); break; \

ERROR:CODE_INDENT: code indent should use tabs where possible
#280: FILE: arch/um/include/sysdep-x86_64/ptrace.h:186:
+                default :  \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#280: FILE: arch/um/include/sysdep-x86_64/ptrace.h:186:
+                default :  \$

ERROR:SPACING: space prohibited before that ':' (ctx:WxE)
#280: FILE: arch/um/include/sysdep-x86_64/ptrace.h:186:
+                default :  \
                         ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#281: FILE: arch/um/include/sysdep-x86_64/ptrace.h:187:
+                        panic("Bad register in UPT_REG : %d\n", reg);  \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#281: FILE: arch/um/include/sysdep-x86_64/ptrace.h:187:
+                        panic("Bad register in UPT_REG : %d\n", reg);  \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#282: FILE: arch/um/include/sysdep-x86_64/ptrace.h:188:
+                        val = -1; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#282: FILE: arch/um/include/sysdep-x86_64/ptrace.h:188:
+                        val = -1; \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#283: FILE: arch/um/include/sysdep-x86_64/ptrace.h:189:
+                } \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#283: FILE: arch/um/include/sysdep-x86_64/ptrace.h:189:
+                } \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#284: FILE: arch/um/include/sysdep-x86_64/ptrace.h:190:
+                val; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#284: FILE: arch/um/include/sysdep-x86_64/ptrace.h:190:
+                val; \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#285: FILE: arch/um/include/sysdep-x86_64/ptrace.h:191:
+        })$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#285: FILE: arch/um/include/sysdep-x86_64/ptrace.h:191:
+        })$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#287: FILE: arch/um/include/sysdep-x86_64/ptrace.h:193:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'regs' - possible side-effects?
#288: FILE: arch/um/include/sysdep-x86_64/ptrace.h:194:
+#define UPT_SET(regs, reg, val) \
+        ({      unsigned long val; \
+                switch(reg){ \
+		case R8: UPT_R8(regs) = val; break; \
+		case R9: UPT_R9(regs) = val; break; \
+		case R10: UPT_R10(regs) = val; break; \
+		case R11: UPT_R11(regs) = val; break; \
+		case R12: UPT_R12(regs) = val; break; \
+		case R13: UPT_R13(regs) = val; break; \
+		case R14: UPT_R14(regs) = val; break; \
+		case R15: UPT_R15(regs) = val; break; \
+                case RIP: UPT_IP(regs) = val; break; \
+                case RSP: UPT_SP(regs) = val; break; \
+                case RAX: UPT_RAX(regs) = val; break; \
+                case RBX: UPT_RBX(regs) = val; break; \
+                case RCX: UPT_RCX(regs) = val; break; \
+                case RDX: UPT_RDX(regs) = val; break; \
+                case RSI: UPT_RSI(regs) = val; break; \
+                case RDI: UPT_RDI(regs) = val; break; \
+                case RBP: UPT_RBP(regs) = val; break; \
+                case ORIG_RAX: UPT_ORIG_RAX(regs) = val; break; \
+                case CS: UPT_CS(regs) = val; break; \
+                case DS: UPT_DS(regs) = val; break; \
+                case ES: UPT_ES(regs) = val; break; \
+                case FS: UPT_FS(regs) = val; break; \
+                case GS: UPT_GS(regs) = val; break; \
+                case EFLAGS: UPT_EFLAGS(regs) = val; break; \
+                default :  \
+                        panic("Bad register in UPT_SET : %d\n", reg);  \
+			break; \
+                } \
+                val; \
+        })

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'reg' - possible side-effects?
#288: FILE: arch/um/include/sysdep-x86_64/ptrace.h:194:
+#define UPT_SET(regs, reg, val) \
+        ({      unsigned long val; \
+                switch(reg){ \
+		case R8: UPT_R8(regs) = val; break; \
+		case R9: UPT_R9(regs) = val; break; \
+		case R10: UPT_R10(regs) = val; break; \
+		case R11: UPT_R11(regs) = val; break; \
+		case R12: UPT_R12(regs) = val; break; \
+		case R13: UPT_R13(regs) = val; break; \
+		case R14: UPT_R14(regs) = val; break; \
+		case R15: UPT_R15(regs) = val; break; \
+                case RIP: UPT_IP(regs) = val; break; \
+                case RSP: UPT_SP(regs) = val; break; \
+                case RAX: UPT_RAX(regs) = val; break; \
+                case RBX: UPT_RBX(regs) = val; break; \
+                case RCX: UPT_RCX(regs) = val; break; \
+                case RDX: UPT_RDX(regs) = val; break; \
+                case RSI: UPT_RSI(regs) = val; break; \
+                case RDI: UPT_RDI(regs) = val; break; \
+                case RBP: UPT_RBP(regs) = val; break; \
+                case ORIG_RAX: UPT_ORIG_RAX(regs) = val; break; \
+                case CS: UPT_CS(regs) = val; break; \
+                case DS: UPT_DS(regs) = val; break; \
+                case ES: UPT_ES(regs) = val; break; \
+                case FS: UPT_FS(regs) = val; break; \
+                case GS: UPT_GS(regs) = val; break; \
+                case EFLAGS: UPT_EFLAGS(regs) = val; break; \
+                default :  \
+                        panic("Bad register in UPT_SET : %d\n", reg);  \
+			break; \
+                } \
+                val; \
+        })

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'val' - possible side-effects?
#288: FILE: arch/um/include/sysdep-x86_64/ptrace.h:194:
+#define UPT_SET(regs, reg, val) \
+        ({      unsigned long val; \
+                switch(reg){ \
+		case R8: UPT_R8(regs) = val; break; \
+		case R9: UPT_R9(regs) = val; break; \
+		case R10: UPT_R10(regs) = val; break; \
+		case R11: UPT_R11(regs) = val; break; \
+		case R12: UPT_R12(regs) = val; break; \
+		case R13: UPT_R13(regs) = val; break; \
+		case R14: UPT_R14(regs) = val; break; \
+		case R15: UPT_R15(regs) = val; break; \
+                case RIP: UPT_IP(regs) = val; break; \
+                case RSP: UPT_SP(regs) = val; break; \
+                case RAX: UPT_RAX(regs) = val; break; \
+                case RBX: UPT_RBX(regs) = val; break; \
+                case RCX: UPT_RCX(regs) = val; break; \
+                case RDX: UPT_RDX(regs) = val; break; \
+                case RSI: UPT_RSI(regs) = val; break; \
+                case RDI: UPT_RDI(regs) = val; break; \
+                case RBP: UPT_RBP(regs) = val; break; \
+                case ORIG_RAX: UPT_ORIG_RAX(regs) = val; break; \
+                case CS: UPT_CS(regs) = val; break; \
+                case DS: UPT_DS(regs) = val; break; \
+                case ES: UPT_ES(regs) = val; break; \
+                case FS: UPT_FS(regs) = val; break; \
+                case GS: UPT_GS(regs) = val; break; \
+                case EFLAGS: UPT_EFLAGS(regs) = val; break; \
+                default :  \
+                        panic("Bad register in UPT_SET : %d\n", reg);  \
+			break; \
+                } \
+                val; \
+        })

ERROR:CODE_INDENT: code indent should use tabs where possible
#289: FILE: arch/um/include/sysdep-x86_64/ptrace.h:195:
+        ({      unsigned long val; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#289: FILE: arch/um/include/sysdep-x86_64/ptrace.h:195:
+        ({      unsigned long val; \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#290: FILE: arch/um/include/sysdep-x86_64/ptrace.h:196:
+                switch(reg){ \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#290: FILE: arch/um/include/sysdep-x86_64/ptrace.h:196:
+                switch(reg){ \$

ERROR:SPACING: space required before the open brace '{'
#290: FILE: arch/um/include/sysdep-x86_64/ptrace.h:196:
+                switch(reg){ \

ERROR:SPACING: space required before the open parenthesis '('
#290: FILE: arch/um/include/sysdep-x86_64/ptrace.h:196:
+                switch(reg){ \

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#291: FILE: arch/um/include/sysdep-x86_64/ptrace.h:197:
+		case R8: UPT_R8(regs) = val; break; \

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#292: FILE: arch/um/include/sysdep-x86_64/ptrace.h:198:
+		case R9: UPT_R9(regs) = val; break; \

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#293: FILE: arch/um/include/sysdep-x86_64/ptrace.h:199:
+		case R10: UPT_R10(regs) = val; break; \

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#294: FILE: arch/um/include/sysdep-x86_64/ptrace.h:200:
+		case R11: UPT_R11(regs) = val; break; \

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#295: FILE: arch/um/include/sysdep-x86_64/ptrace.h:201:
+		case R12: UPT_R12(regs) = val; break; \

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#296: FILE: arch/um/include/sysdep-x86_64/ptrace.h:202:
+		case R13: UPT_R13(regs) = val; break; \

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#297: FILE: arch/um/include/sysdep-x86_64/ptrace.h:203:
+		case R14: UPT_R14(regs) = val; break; \

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#298: FILE: arch/um/include/sysdep-x86_64/ptrace.h:204:
+		case R15: UPT_R15(regs) = val; break; \

ERROR:CODE_INDENT: code indent should use tabs where possible
#299: FILE: arch/um/include/sysdep-x86_64/ptrace.h:205:
+                case RIP: UPT_IP(regs) = val; break; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#299: FILE: arch/um/include/sysdep-x86_64/ptrace.h:205:
+                case RIP: UPT_IP(regs) = val; break; \$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#299: FILE: arch/um/include/sysdep-x86_64/ptrace.h:205:
+                case RIP: UPT_IP(regs) = val; break; \

ERROR:CODE_INDENT: code indent should use tabs where possible
#300: FILE: arch/um/include/sysdep-x86_64/ptrace.h:206:
+                case RSP: UPT_SP(regs) = val; break; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#300: FILE: arch/um/include/sysdep-x86_64/ptrace.h:206:
+                case RSP: UPT_SP(regs) = val; break; \$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#300: FILE: arch/um/include/sysdep-x86_64/ptrace.h:206:
+                case RSP: UPT_SP(regs) = val; break; \

ERROR:CODE_INDENT: code indent should use tabs where possible
#301: FILE: arch/um/include/sysdep-x86_64/ptrace.h:207:
+                case RAX: UPT_RAX(regs) = val; break; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#301: FILE: arch/um/include/sysdep-x86_64/ptrace.h:207:
+                case RAX: UPT_RAX(regs) = val; break; \$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#301: FILE: arch/um/include/sysdep-x86_64/ptrace.h:207:
+                case RAX: UPT_RAX(regs) = val; break; \

ERROR:CODE_INDENT: code indent should use tabs where possible
#302: FILE: arch/um/include/sysdep-x86_64/ptrace.h:208:
+                case RBX: UPT_RBX(regs) = val; break; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#302: FILE: arch/um/include/sysdep-x86_64/ptrace.h:208:
+                case RBX: UPT_RBX(regs) = val; break; \$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#302: FILE: arch/um/include/sysdep-x86_64/ptrace.h:208:
+                case RBX: UPT_RBX(regs) = val; break; \

ERROR:CODE_INDENT: code indent should use tabs where possible
#303: FILE: arch/um/include/sysdep-x86_64/ptrace.h:209:
+                case RCX: UPT_RCX(regs) = val; break; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#303: FILE: arch/um/include/sysdep-x86_64/ptrace.h:209:
+                case RCX: UPT_RCX(regs) = val; break; \$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#303: FILE: arch/um/include/sysdep-x86_64/ptrace.h:209:
+                case RCX: UPT_RCX(regs) = val; break; \

ERROR:CODE_INDENT: code indent should use tabs where possible
#304: FILE: arch/um/include/sysdep-x86_64/ptrace.h:210:
+                case RDX: UPT_RDX(regs) = val; break; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#304: FILE: arch/um/include/sysdep-x86_64/ptrace.h:210:
+                case RDX: UPT_RDX(regs) = val; break; \$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#304: FILE: arch/um/include/sysdep-x86_64/ptrace.h:210:
+                case RDX: UPT_RDX(regs) = val; break; \

ERROR:CODE_INDENT: code indent should use tabs where possible
#305: FILE: arch/um/include/sysdep-x86_64/ptrace.h:211:
+                case RSI: UPT_RSI(regs) = val; break; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#305: FILE: arch/um/include/sysdep-x86_64/ptrace.h:211:
+                case RSI: UPT_RSI(regs) = val; break; \$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#305: FILE: arch/um/include/sysdep-x86_64/ptrace.h:211:
+                case RSI: UPT_RSI(regs) = val; break; \

ERROR:CODE_INDENT: code indent should use tabs where possible
#306: FILE: arch/um/include/sysdep-x86_64/ptrace.h:212:
+                case RDI: UPT_RDI(regs) = val; break; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#306: FILE: arch/um/include/sysdep-x86_64/ptrace.h:212:
+                case RDI: UPT_RDI(regs) = val; break; \$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#306: FILE: arch/um/include/sysdep-x86_64/ptrace.h:212:
+                case RDI: UPT_RDI(regs) = val; break; \

ERROR:CODE_INDENT: code indent should use tabs where possible
#307: FILE: arch/um/include/sysdep-x86_64/ptrace.h:213:
+                case RBP: UPT_RBP(regs) = val; break; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#307: FILE: arch/um/include/sysdep-x86_64/ptrace.h:213:
+                case RBP: UPT_RBP(regs) = val; break; \$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#307: FILE: arch/um/include/sysdep-x86_64/ptrace.h:213:
+                case RBP: UPT_RBP(regs) = val; break; \

ERROR:CODE_INDENT: code indent should use tabs where possible
#308: FILE: arch/um/include/sysdep-x86_64/ptrace.h:214:
+                case ORIG_RAX: UPT_ORIG_RAX(regs) = val; break; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#308: FILE: arch/um/include/sysdep-x86_64/ptrace.h:214:
+                case ORIG_RAX: UPT_ORIG_RAX(regs) = val; break; \$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#308: FILE: arch/um/include/sysdep-x86_64/ptrace.h:214:
+                case ORIG_RAX: UPT_ORIG_RAX(regs) = val; break; \

ERROR:CODE_INDENT: code indent should use tabs where possible
#309: FILE: arch/um/include/sysdep-x86_64/ptrace.h:215:
+                case CS: UPT_CS(regs) = val; break; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#309: FILE: arch/um/include/sysdep-x86_64/ptrace.h:215:
+                case CS: UPT_CS(regs) = val; break; \$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#309: FILE: arch/um/include/sysdep-x86_64/ptrace.h:215:
+                case CS: UPT_CS(regs) = val; break; \

ERROR:CODE_INDENT: code indent should use tabs where possible
#310: FILE: arch/um/include/sysdep-x86_64/ptrace.h:216:
+                case DS: UPT_DS(regs) = val; break; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#310: FILE: arch/um/include/sysdep-x86_64/ptrace.h:216:
+                case DS: UPT_DS(regs) = val; break; \$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#310: FILE: arch/um/include/sysdep-x86_64/ptrace.h:216:
+                case DS: UPT_DS(regs) = val; break; \

ERROR:CODE_INDENT: code indent should use tabs where possible
#311: FILE: arch/um/include/sysdep-x86_64/ptrace.h:217:
+                case ES: UPT_ES(regs) = val; break; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#311: FILE: arch/um/include/sysdep-x86_64/ptrace.h:217:
+                case ES: UPT_ES(regs) = val; break; \$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#311: FILE: arch/um/include/sysdep-x86_64/ptrace.h:217:
+                case ES: UPT_ES(regs) = val; break; \

ERROR:CODE_INDENT: code indent should use tabs where possible
#312: FILE: arch/um/include/sysdep-x86_64/ptrace.h:218:
+                case FS: UPT_FS(regs) = val; break; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#312: FILE: arch/um/include/sysdep-x86_64/ptrace.h:218:
+                case FS: UPT_FS(regs) = val; break; \$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#312: FILE: arch/um/include/sysdep-x86_64/ptrace.h:218:
+                case FS: UPT_FS(regs) = val; break; \

ERROR:CODE_INDENT: code indent should use tabs where possible
#313: FILE: arch/um/include/sysdep-x86_64/ptrace.h:219:
+                case GS: UPT_GS(regs) = val; break; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#313: FILE: arch/um/include/sysdep-x86_64/ptrace.h:219:
+                case GS: UPT_GS(regs) = val; break; \$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#313: FILE: arch/um/include/sysdep-x86_64/ptrace.h:219:
+                case GS: UPT_GS(regs) = val; break; \

ERROR:CODE_INDENT: code indent should use tabs where possible
#314: FILE: arch/um/include/sysdep-x86_64/ptrace.h:220:
+                case EFLAGS: UPT_EFLAGS(regs) = val; break; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#314: FILE: arch/um/include/sysdep-x86_64/ptrace.h:220:
+                case EFLAGS: UPT_EFLAGS(regs) = val; break; \$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#314: FILE: arch/um/include/sysdep-x86_64/ptrace.h:220:
+                case EFLAGS: UPT_EFLAGS(regs) = val; break; \

ERROR:CODE_INDENT: code indent should use tabs where possible
#315: FILE: arch/um/include/sysdep-x86_64/ptrace.h:221:
+                default :  \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#315: FILE: arch/um/include/sysdep-x86_64/ptrace.h:221:
+                default :  \$

ERROR:SPACING: space prohibited before that ':' (ctx:WxE)
#315: FILE: arch/um/include/sysdep-x86_64/ptrace.h:221:
+                default :  \
                         ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#316: FILE: arch/um/include/sysdep-x86_64/ptrace.h:222:
+                        panic("Bad register in UPT_SET : %d\n", reg);  \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#316: FILE: arch/um/include/sysdep-x86_64/ptrace.h:222:
+                        panic("Bad register in UPT_SET : %d\n", reg);  \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#318: FILE: arch/um/include/sysdep-x86_64/ptrace.h:224:
+                } \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#318: FILE: arch/um/include/sysdep-x86_64/ptrace.h:224:
+                } \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#319: FILE: arch/um/include/sysdep-x86_64/ptrace.h:225:
+                val; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#319: FILE: arch/um/include/sysdep-x86_64/ptrace.h:225:
+                val; \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#320: FILE: arch/um/include/sysdep-x86_64/ptrace.h:226:
+        })$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#320: FILE: arch/um/include/sysdep-x86_64/ptrace.h:226:
+        })$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'r' - possible side-effects?
#322: FILE: arch/um/include/sysdep-x86_64/ptrace.h:228:
+#define UPT_SET_SYSCALL_RETURN(r, res) \
+	CHOOSE_MODE(SC_SET_SYSCALL_RETURN(UPT_SC(r), (res)), \
+                    REGS_SET_SYSCALL_RETURN((r)->skas.regs, (res)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'res' - possible side-effects?
#322: FILE: arch/um/include/sysdep-x86_64/ptrace.h:228:
+#define UPT_SET_SYSCALL_RETURN(r, res) \
+	CHOOSE_MODE(SC_SET_SYSCALL_RETURN(UPT_SC(r), (res)), \
+                    REGS_SET_SYSCALL_RETURN((r)->skas.regs, (res)))

ERROR:CODE_INDENT: code indent should use tabs where possible
#324: FILE: arch/um/include/sysdep-x86_64/ptrace.h:230:
+                    REGS_SET_SYSCALL_RETURN((r)->skas.regs, (res)))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#324: FILE: arch/um/include/sysdep-x86_64/ptrace.h:230:
+                    REGS_SET_SYSCALL_RETURN((r)->skas.regs, (res)))$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'r' - possible side-effects?
#326: FILE: arch/um/include/sysdep-x86_64/ptrace.h:232:
+#define UPT_RESTART_SYSCALL(r) \
+	CHOOSE_MODE(SC_RESTART_SYSCALL(UPT_SC(r)), \
+		    REGS_RESTART_SYSCALL((r)->skas.regs))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'r' - possible side-effects?
#330: FILE: arch/um/include/sysdep-x86_64/ptrace.h:236:
+#define UPT_SEGV_IS_FIXABLE(r) \
+	CHOOSE_MODE(SC_SEGV_IS_FIXABLE(UPT_SC(r)), \
+                    REGS_SEGV_IS_FIXABLE(&r->skas))

ERROR:CODE_INDENT: code indent should use tabs where possible
#332: FILE: arch/um/include/sysdep-x86_64/ptrace.h:238:
+                    REGS_SEGV_IS_FIXABLE(&r->skas))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#332: FILE: arch/um/include/sysdep-x86_64/ptrace.h:238:
+                    REGS_SEGV_IS_FIXABLE(&r->skas))$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'r' - possible side-effects?
#334: FILE: arch/um/include/sysdep-x86_64/ptrace.h:240:
+#define UPT_FAULT_ADDR(r) \
+	CHOOSE_MODE(SC_FAULT_ADDR(UPT_SC(r)), REGS_FAULT_ADDR(&r->skas))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'r' - possible side-effects?
#337: FILE: arch/um/include/sysdep-x86_64/ptrace.h:243:
+#define UPT_FAULT_WRITE(r) \
+	CHOOSE_MODE(SC_FAULT_WRITE(UPT_SC(r)), REGS_FAULT_WRITE(&r->skas))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'r' - possible side-effects?
#340: FILE: arch/um/include/sysdep-x86_64/ptrace.h:246:
+#define UPT_TRAP(r) CHOOSE_MODE(SC_TRAP_TYPE(UPT_SC(r)), REGS_TRAP(&r->skas))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'r' - possible side-effects?
#341: FILE: arch/um/include/sysdep-x86_64/ptrace.h:247:
+#define UPT_ERR(r) CHOOSE_MODE(SC_FAULT_TYPE(UPT_SC(r)), REGS_ERR(&r->skas))

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#360: FILE: arch/um/include/sysdep-x86_64/ptrace_user.h:1:
+/*

CHECK:SPACING: No space is necessary after a cast
#378: FILE: arch/um/include/sysdep-x86_64/ptrace_user.h:19:
+#define PT_SYSCALL_ARG1(regs) (((unsigned long *) (regs))[PT_INDEX(RDI)])

CHECK:SPACING: No space is necessary after a cast
#381: FILE: arch/um/include/sysdep-x86_64/ptrace_user.h:22:
+#define PT_SYSCALL_ARG2(regs) (((unsigned long *) (regs))[PT_INDEX(RSI)])

CHECK:SPACING: No space is necessary after a cast
#384: FILE: arch/um/include/sysdep-x86_64/ptrace_user.h:25:
+#define PT_SYSCALL_ARG3(regs) (((unsigned long *) (regs))[PT_INDEX(RDX)])

CHECK:SPACING: No space is necessary after a cast
#387: FILE: arch/um/include/sysdep-x86_64/ptrace_user.h:28:
+#define PT_SYSCALL_ARG4(regs) (((unsigned long *) (regs))[PT_INDEX(RCX)])

CHECK:SPACING: No space is necessary after a cast
#390: FILE: arch/um/include/sysdep-x86_64/ptrace_user.h:31:
+#define PT_SYSCALL_ARG5(regs) (((unsigned long *) (regs))[PT_INDEX(R8)])

CHECK:SPACING: No space is necessary after a cast
#393: FILE: arch/um/include/sysdep-x86_64/ptrace_user.h:34:
+#define PT_SYSCALL_ARG6(regs) (((unsigned long *) (regs))[PT_INDEX(R9)])

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#530: FILE: arch/um/kernel/skas/util/mk_ptregs-i386.c:1:
+#include <stdio.h>

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/user.h> instead of <asm/user.h>
#532: FILE: arch/um/kernel/skas/util/mk_ptregs-i386.c:3:
+#include <asm/user.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

WARNING:SPLIT_STRING: quoted string split across lines
#539: FILE: arch/um/kernel/skas/util/mk_ptregs-i386.c:10:
+	printf("/* Automatically generated by "
+	       "arch/um/kernel/skas/util/mk_ptregs */\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#545: FILE: arch/um/kernel/skas/util/mk_ptregs-i386.c:16:
+^Iprintf("#define HOST_FP_SIZE %d\n", $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#547: FILE: arch/um/kernel/skas/util/mk_ptregs-i386.c:18:
+^Iprintf("#define HOST_XFP_SIZE %d\n", $

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#568: FILE: arch/um/kernel/skas/util/mk_ptregs-i386.c:39:
+	return(0);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#586: FILE: arch/um/kernel/skas/util/mk_ptregs-x86_64.c:1:
+/*

WARNING:SPLIT_STRING: quoted string split across lines
#602: FILE: arch/um/kernel/skas/util/mk_ptregs-x86_64.c:17:
+	printf("/* Automatically generated by "
+	       "arch/um/kernel/skas/util/mk_ptregs */\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#627: FILE: arch/um/kernel/skas/util/mk_ptregs-x86_64.c:42:
+#if 0^I$

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#627: FILE: arch/um/kernel/skas/util/mk_ptregs-x86_64.c:42:
+#if 0	

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#641: FILE: arch/um/kernel/skas/util/mk_ptregs-x86_64.c:56:
+	return(0);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#777: FILE: arch/um/sys-x86_64/ptrace.c:1:
+/*

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#808: FILE: arch/um/sys-x86_64/ptrace.c:32:
+	/* Some code in the 64bit emulation may not be 64bit clean.
+	   Don't take any chances. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#808: FILE: arch/um/sys-x86_64/ptrace.c:32:
+	   Don't take any chances. */

ERROR:SPACING: space required before the open brace '{'
#812: FILE: arch/um/sys-x86_64/ptrace.c:36:
+	switch (regno){

ERROR:TRAILING_WHITESPACE: trailing whitespace
#816: FILE: arch/um/sys-x86_64/ptrace.c:40:
+^Icase ES: $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#818: FILE: arch/um/sys-x86_64/ptrace.c:42:
+^Icase CS: $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#821: FILE: arch/um/sys-x86_64/ptrace.c:45:
+^I^Ivalue &= 0xffff; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#827: FILE: arch/um/sys-x86_64/ptrace.c:51:
+^I^I^Ireturn -EIO; $

WARNING:LINE_SPACING: Missing a blank line after declarations
#844: FILE: arch/um/sys-x86_64/ptrace.c:68:
+	unsigned long retval = ~0UL;
+	switch (regno) {

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#852: FILE: arch/um/sys-x86_64/ptrace.c:76:
+		/* fall through */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#866: FILE: arch/um/sys-x86_64/ptrace.c:90:
+/* XXX
+	printk("arch_switch\n");

ERROR:SPACING: space prohibited before that close parenthesis ')'
#875: FILE: arch/um/sys-x86_64/ptrace.c:99:
+int dump_fpu(struct pt_regs *regs, elf_fpregset_t *fpu )

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#878: FILE: arch/um/sys-x86_64/ptrace.c:102:
+	return(1);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#884: FILE: arch/um/sys-x86_64/ptrace.c:108:
+	return(0);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#890: FILE: arch/um/sys-x86_64/ptrace.c:114:
+	return(0);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#896: FILE: arch/um/sys-x86_64/ptrace.c:120:
+	return(0);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#902: FILE: arch/um/sys-x86_64/ptrace.c:126:
+	return(0);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#920: FILE: arch/um/sys-x86_64/ptrace_user.c:1:
+/*

ERROR:SPACING: space required before the open parenthesis '('
#936: FILE: arch/um/sys-x86_64/ptrace_user.c:17:
+	if(ptrace(PTRACE_GETREGS, pid, 0, regs_out) < 0)

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#938: FILE: arch/um/sys-x86_64/ptrace_user.c:19:
+	return(0);

ERROR:SPACING: space required before the open parenthesis '('
#943: FILE: arch/um/sys-x86_64/ptrace_user.c:24:
+	if(ptrace(PTRACE_SETREGS, pid, 0, regs) < 0)

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#945: FILE: arch/um/sys-x86_64/ptrace_user.c:26:
+	return(0);

ERROR:SPACING: space required before the open parenthesis '('
#964: FILE: arch/um/sys-x86_64/ptrace_user.c:45:
+	if(ptrace(PTRACE_POKEUSER, pid, CS, UM_USER_CS) < 0)

ERROR:SPACING: space required before the open parenthesis '('
#968: FILE: arch/um/sys-x86_64/ptrace_user.c:49:
+	if(ptrace(PTRACE_POKEUSER, pid, DS, __USER_DS) < 0)

ERROR:SPACING: space required before the open parenthesis '('
#970: FILE: arch/um/sys-x86_64/ptrace_user.c:51:
+	if(ptrace(PTRACE_POKEUSER, pid, ES, __USER_DS) < 0)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1001: FILE: include/asm-um/ptrace-x86_64.h:1:
+/*

ERROR:SPACING: space required before the open parenthesis '('
#1060: FILE: include/asm-um/ptrace-x86_64.h:60:
+#define PT_FIX_EXEC_STACK(sp) do ; while(0)

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#1060: FILE: include/asm-um/ptrace-x86_64.h:60:
+#define PT_FIX_EXEC_STACK(sp) do ; while(0)

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000217270.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 137 errors, 71 warnings, 50 checks, 826 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000217270.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
