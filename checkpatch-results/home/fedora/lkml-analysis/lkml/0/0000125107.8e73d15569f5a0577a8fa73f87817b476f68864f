WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#57: FILE: kernel/container_api.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#77: FILE: kernel/container_api.c:21:
+#include <asm/uaccess.h>

ERROR:SPACING: space prohibited after that open parenthesis '('
#85: FILE: kernel/container_api.c:29:
+#define DPRINTK( fmt, args...)  // printk( "%s: " fmt, __FUNCTION__, ##args)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#106: FILE: kernel/container_api.c:50:
+	kbuf[MAX_CONTAINER_NAME_LEN-1] = '\0';
 	                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#109: FILE: kernel/container_api.c:53:
+	cname = strsep(&cptr,delims);
 	                    ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#118: FILE: kernel/container_api.c:62:
+^I       ^I^I      size_t count, loff_t *ppos)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#118: FILE: kernel/container_api.c:62:
+^I       ^I^I      size_t count, loff_t *ppos)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#118: FILE: kernel/container_api.c:62:
+static ssize_t container_read(struct file *file, char __user *ubuf,
+	       		      size_t count, loff_t *ppos)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#126: FILE: kernel/container_api.c:70:
+	len = sprintf(kbuf,"%s\n",cname);
 	                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#126: FILE: kernel/container_api.c:70:
+	len = sprintf(kbuf,"%s\n",cname);
 	                         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#129: FILE: kernel/container_api.c:73:
+	if (count > len-__ppos)
 	               ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#130: FILE: kernel/container_api.c:74:
+		count = len-__ppos;
 		           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#131: FILE: kernel/container_api.c:75:
+	if (copy_to_user(ubuf, kbuf+__ppos, count))
 	                           ^

WARNING:CONST_STRUCT: struct file_operations should normally be const
#139: FILE: kernel/container_api.c:83:
+static struct file_operations container_proc_operations = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#153: FILE: kernel/container_api.c:97:
+	entry = create_proc_entry("container", S_IWUGO|S_IRUGO, NULL);
 	                                              ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUGO|S_IRUGO' are not preferred. Consider using octal permissions '0666'.
#153: FILE: kernel/container_api.c:97:
+	entry = create_proc_entry("container", S_IWUGO|S_IRUGO, NULL);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000125107.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 5 errors, 5 warnings, 6 checks, 124 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000125107.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
