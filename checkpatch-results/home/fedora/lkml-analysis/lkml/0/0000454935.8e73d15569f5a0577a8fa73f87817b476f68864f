WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#27: 
> additional patch which converts swap to use mpage_writepages(), so we swap

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#62: FILE: fs/buffer.c:1814:
+	BUG_ON(from > page_size(page));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#63: FILE: fs/buffer.c:1815:
+	BUG_ON(to > page_size(page));

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#110: FILE: fs/buffer.c:2100:
+	while(page->index > (pgpos = *bytes>>page_shift(page))) {
 	                                   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#110: FILE: fs/buffer.c:2100:
+	while(page->index > (pgpos = *bytes>>page_shift(page))) {

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#117: FILE: fs/buffer.c:2106:
+		if (*bytes>>page_shift(page) != pgpos) {
 		          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#135: FILE: fs/buffer.c:2121:
+		memset(kaddr+zerofrom, 0, page_size(new_page)-zerofrom);
 		            ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#135: FILE: fs/buffer.c:2121:
+		memset(kaddr+zerofrom, 0, page_size(new_page)-zerofrom);
 		                                             ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#168: FILE: fs/buffer.c:2209:
+	unsigned offset = from & (mapping_page_size(mapping) - 1);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#232: FILE: fs/mpage.c:169:
+	const unsigned blocks_per_page = page_size(page) >> blkbits;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#295: FILE: fs/mpage.c:236:
+		unsigned nr_bvecs = MPAGE_BIO_MAX_SIZE / page_size(page);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'first_hole != blocks_per_page'
#304: FILE: fs/mpage.c:251:
+	if (buffer_boundary(&map_bh) || (first_hole != blocks_per_page))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#313: FILE: fs/mpage.c:329:
+	const unsigned blocks_per_page = page_size(page) >> blkbits;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#341: FILE: fs/mpage.c:424:
+		unsigned offset = inode->i_size & (page_size(page) - 1);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bio->bi_idx == bio->bi_vcnt'
#360: FILE: fs/mpage.c:440:
+		if ((bio->bi_idx == bio->bi_vcnt) ||
+				(*last_block_in_bio != first_page_block - 1) ||
+				(bio->bi_bdev != bdev))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bio->bi_bdev != bdev'
#360: FILE: fs/mpage.c:440:
+		if ((bio->bi_idx == bio->bi_vcnt) ||
+				(*last_block_in_bio != first_page_block - 1) ||
+				(bio->bi_bdev != bdev))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#361: FILE: fs/mpage.c:441:
+		if ((bio->bi_idx == bio->bi_vcnt) ||
+				(*last_block_in_bio != first_page_block - 1) ||

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#368: FILE: fs/mpage.c:447:
+		unsigned nr_bvecs = MPAGE_BIO_MAX_SIZE / page_size(page);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#391: FILE: include/linux/pagemap.h:106:
+static inline unsigned mapping_page_size(struct address_space *mapping)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#396: FILE: include/linux/pagemap.h:111:
+static inline unsigned mapping_page_shift(struct address_space *mapping)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#401: FILE: include/linux/pagemap.h:116:
+static inline unsigned mapping_page_mask(struct address_space *mapping)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#406: FILE: include/linux/pagemap.h:121:
+static inline unsigned page_size(struct page *page)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#411: FILE: include/linux/pagemap.h:126:
+static inline unsigned page_shift(struct page *page)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#416: FILE: include/linux/pagemap.h:131:
+static inline unsigned page_mask(struct page *page)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#445: FILE: mm/page_io.c:47:
+swap_write_get_block(struct inode *inode, sector_t iblock,
+		struct buffer_head *bh_result, int create)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#458: FILE: mm/page_io.c:60:
+	printk("swap_writepage\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'swap_writepage', this function's name, in a string
#458: FILE: mm/page_io.c:60:
+	printk("swap_writepage\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#553: FILE: mm/page_io.c:145:
+	writepages:	swap_writepages,
 	          ^

WARNING:INDENTED_LABEL: labels should not be indented
#553: FILE: mm/page_io.c:145:
+	writepages:	swap_writepages,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#619: FILE: mm/swap_state.c:125:
+	BUG_ON(PagePrivate(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#628: FILE: mm/swap_state.c:193:
+	BUG_ON(PagePrivate(page));

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#641: FILE: mm/swapfile.c:43:
+#define SWAP_STRIPE_PAGES	((1024*1024)/PAGE_SIZE)
                          	      ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#641: FILE: mm/swapfile.c:43:
+#define SWAP_STRIPE_PAGES	((1024*1024)/PAGE_SIZE)
                          	            ^

WARNING:TYPO_SPELLING: 'completly' may be misspelled - perhaps 'completely'?
#687: FILE: mm/swapfile.c:85:
+		 * We found a completly empty cluster, so start using it.
 		              ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#770: FILE: mm/swapfile.c:180:
+		printk("%d:%lu\n", swp_type(entry), swp_offset(entry));

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000454935.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 2 errors, 22 warnings, 11 checks, 715 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000454935.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
