WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#30: 
Signed-Off-By: Chandra Seetharaman <sekharan@us.ibm.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#31: 
Signed-Off-By: Hubertus Franke <frankeh@us.ibm.com>

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#32: 
Signed-Off-By: Shailabh Nagar <nagar@us.ibm.com>

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#33: 
Signed-Off-By: Vivek Kashyap <vivk@us.ibm.com>

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#34: 
Signed-Off-By: Gerrit Huizenga <gh@us.ibm.com>

ERROR:TRAILING_WHITESPACE: trailing whitespace
#53: FILE: fs/rcfs/dir.c:1:
+/* $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#53: FILE: fs/rcfs/dir.c:1:
+/* 

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#54: FILE: fs/rcfs/dir.c:2:
+ * fs/rcfs/dir.c $

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#54: FILE: fs/rcfs/dir.c:2:
+ * fs/rcfs/dir.c 

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#58: FILE: fs/rcfs/dir.c:6:
+ *           $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#59: FILE: fs/rcfs/dir.c:7:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#63: FILE: fs/rcfs/dir.c:11:
+ * $

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#92: FILE: fs/rcfs/dir.c:40:
+#include <asm/uaccess.h>

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'dentry' - possible side-effects?
#96: FILE: fs/rcfs/dir.c:44:
+#define rcfs_positive(dentry)  ((dentry)->d_inode && !d_unhashed((dentry)))

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#104: FILE: fs/rcfs/dir.c:52:
+	list_for_each_entry(child, &dentry->d_subdirs, d_child)
+	    if (!rcfs_is_magic(child) && rcfs_positive(child))

WARNING:TABSTOP: Statements should start on a tabstop
#105: FILE: fs/rcfs/dir.c:53:
+	    if (!rcfs_is_magic(child) && rcfs_positive(child))

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#117: FILE: fs/rcfs/dir.c:65:
+	    struct nameidata *nd)
 	                      ^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#122: FILE: fs/rcfs/dir.c:70:
+EXPORT_SYMBOL_GPL(rcfs_create);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXUGO' are not preferred. Consider using octal permissions '0777'.
#130: FILE: fs/rcfs/dir.c:78:
+	inode = rcfs_get_inode(dir->i_sb, S_IFLNK | S_IRWXUGO, 0);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:LINE_SPACING: Missing a blank line after declarations
#133: FILE: fs/rcfs/dir.c:81:
+		int l = strlen(symname) + 1;
+		error = page_symlink(inode, symname, l);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#134: FILE: fs/rcfs/dir.c:82:
+		if (!error) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#139: FILE: fs/rcfs/dir.c:87:
+		} else

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#140: FILE: fs/rcfs/dir.c:88:
+			iput(inode);
 			^^^^

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#145: FILE: fs/rcfs/dir.c:93:
+EXPORT_SYMBOL_GPL(rcfs_symlink);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#149: FILE: fs/rcfs/dir.c:97:
+{
+

WARNING:BRACES: braces {} are not necessary for single statement blocks
#159: FILE: fs/rcfs/dir.c:107:
+		if (!ridir->name) {
+			return -ENOMEM;
+		}

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around ripar->core->classtype->alloc
#164: FILE: fs/rcfs/dir.c:112:
+		ridir->core = (*(ripar->core->classtype->alloc))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#167: FILE: fs/rcfs/dir.c:115:
+		printk(KERN_ERR "rcfs_mkdir: Invalid parent core %p\n",

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#175: FILE: fs/rcfs/dir.c:123:
+EXPORT_SYMBOL_GPL(rcfs_create_coredir);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#179: FILE: fs/rcfs/dir.c:127:
+{
+

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#183: FILE: fs/rcfs/dir.c:131:
+#if 0

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#189: FILE: fs/rcfs/dir.c:137:
+		if (rcfs_eng_callbacks.mkdir) {
[...]
+		} else {
[...]

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#197: FILE: fs/rcfs/dir.c:145:
+		printk(KERN_ERR "rcfs_mkdir: error in _rcfs_mknod\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'rcfs_mkdir', this function's name, in a string
#197: FILE: fs/rcfs/dir.c:145:
+		printk(KERN_ERR "rcfs_mkdir: error in _rcfs_mknod\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#216: FILE: fs/rcfs/dir.c:164:
+EXPORT_SYMBOL_GPL(rcfs_mkdir);

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#222: FILE: fs/rcfs/dir.c:170:
+#if 0

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#228: FILE: fs/rcfs/dir.c:176:
+		if (rcfs_eng_callbacks.rmdir) {
[...]
+		} else {
[...]

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#239: FILE: fs/rcfs/dir.c:187:
+		printk(KERN_ERR "rcfs_rmdir: directory not empty\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'rcfs_rmdir', this function's name, in a string
#239: FILE: fs/rcfs/dir.c:187:
+		printk(KERN_ERR "rcfs_rmdir: directory not empty\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ri->core"
#244: FILE: fs/rcfs/dir.c:192:
+	if (ri->core == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#245: FILE: fs/rcfs/dir.c:193:
+		printk(KERN_ERR "rcfs_rmdir: core==NULL\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'rcfs_rmdir', this function's name, in a string
#245: FILE: fs/rcfs/dir.c:193:
+		printk(KERN_ERR "rcfs_rmdir: core==NULL\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around ri->core->classtype->free
#250: FILE: fs/rcfs/dir.c:198:
+	if ((*(ri->core->classtype->free)) (ri->core)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ri->core->classtype->free'
#250: FILE: fs/rcfs/dir.c:198:
+	if ((*(ri->core->classtype->free)) (ri->core)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ri->core'
#250: FILE: fs/rcfs/dir.c:198:
+	if ((*(ri->core->classtype->free)) (ri->core)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#251: FILE: fs/rcfs/dir.c:199:
+		printk(KERN_ERR "rcfs_rmdir: ckrm_free_core_class failed\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'rcfs_rmdir', this function's name, in a string
#251: FILE: fs/rcfs/dir.c:199:
+		printk(KERN_ERR "rcfs_rmdir: ckrm_free_core_class failed\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#254: FILE: fs/rcfs/dir.c:202:
+^Iri->core = NULL;^I// just to be safe $

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#265: FILE: fs/rcfs/dir.c:213:
+EXPORT_SYMBOL(rcfs_rmdir);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#269: FILE: fs/rcfs/dir.c:217:
+^I// -ENOENT and not -ENOPERM to allow rm -rf to work despite $

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#274: FILE: fs/rcfs/dir.c:222:
+EXPORT_SYMBOL_GPL(rcfs_unlink);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#287: FILE: fs/rcfs/dir.c:235:
+EXPORT_SYMBOL_GPL(rcfs_rename);

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#289: FILE: fs/rcfs/dir.c:237:
+struct inode_operations rcfs_dir_inode_operations = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#303: FILE: fs/rcfs/dir.c:251:
+		 struct nameidata *nd)
 		                   ^^

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#342: FILE: fs/rcfs/dir.c:290:
+struct inode_operations rcfs_rootdir_inode_operations = {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#358: FILE: fs/rcfs/inode.c:1:
+/* $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#358: FILE: fs/rcfs/inode.c:1:
+/* 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#359: FILE: fs/rcfs/inode.c:2:
+ * fs/rcfs/inode.c $

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#359: FILE: fs/rcfs/inode.c:2:
+ * fs/rcfs/inode.c 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#363: FILE: fs/rcfs/inode.c:6:
+ *           $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#364: FILE: fs/rcfs/inode.c:7:
+ * Resource class filesystem (rcfs) forming the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#368: FILE: fs/rcfs/inode.c:11:
+ * $

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#398: FILE: fs/rcfs/inode.c:41:
+#include <asm/uaccess.h>

ERROR:TRAILING_WHITESPACE: trailing whitespace
#403: FILE: fs/rcfs/inode.c:46:
+ * Address of variable used as flag to indicate a magic file, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#405: FILE: fs/rcfs/inode.c:48:
+ */ $

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#418: FILE: fs/rcfs/inode.c:61:
+		inode->i_atime = inode->i_mtime = inode->i_ctime = CURRENT_TIME;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#434: FILE: fs/rcfs/inode.c:77:
+^I^I^I * directory inodes start off with i_nlink == 2 $

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#468: FILE: fs/rcfs/inode.c:111:
+EXPORT_SYMBOL_GPL(_rcfs_mknod);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#479: FILE: fs/rcfs/inode.c:122:
+EXPORT_SYMBOL_GPL(rcfs_mknod);

CHECK:BRACES: Unbalanced braces around else statement
#501: FILE: fs/rcfs/inode.c:144:
+		else {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#505: FILE: fs/rcfs/inode.c:148:
+^I^I^I * _rcfs_mknod doesn't increment parent's link count, $

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#519: FILE: fs/rcfs/inode.c:162:
+EXPORT_SYMBOL_GPL(rcfs_create_internal);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#528: FILE: fs/rcfs/inode.c:171:
+	if (!mfdentry->d_inode) {
+		return 0;
+	}

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#542: FILE: fs/rcfs/inode.c:185:
+EXPORT_SYMBOL_GPL(rcfs_delete_internal);

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#544: FILE: fs/rcfs/inode.c:187:
+struct inode_operations rcfs_file_inode_operations = {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#552: FILE: fs/rcfs/magic.c:1:
+/* $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#552: FILE: fs/rcfs/magic.c:1:
+/* 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#553: FILE: fs/rcfs/magic.c:2:
+ * fs/rcfs/magic.c $

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#553: FILE: fs/rcfs/magic.c:2:
+ * fs/rcfs/magic.c 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#559: FILE: fs/rcfs/magic.c:8:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#560: FILE: fs/rcfs/magic.c:9:
+ * File operations for common magic files in rcfs, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#561: FILE: fs/rcfs/magic.c:10:
+ * the user interface for CKRM. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#562: FILE: fs/rcfs/magic.c:11:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#564: FILE: fs/rcfs/magic.c:13:
+ * $

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#588: FILE: fs/rcfs/magic.c:37:
+#include <asm/uaccess.h>

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#599: FILE: fs/rcfs/magic.c:48:
+#define MAGIC_SHOW(FUNC)                                               \
+static int                                                             \
+FUNC ## _show(struct seq_file *s, void *v)			       \
+{								       \
+	int rc=0;                                                      \
+        ssize_t precnt;                                                \
+	ckrm_core_class_t *core ;				       \
+								       \
+	core = (ckrm_core_class_t *)                                   \
+		(((struct rcfs_inode_info *)s->private)->core);	       \
+								       \
+	if (!ckrm_is_core_valid(core)) {			       \
+		return -EINVAL;					       \
+        }                                                              \
+        precnt = s->count ;                                            \
+	if (core->classtype->show_ ## FUNC)			       \
+		rc = (* core->classtype->show_ ## FUNC)(core, s);      \
+                                                                       \
+        if (s->count == precnt)                                        \
+		seq_printf(s, "No data to display\n");                 \
+	return rc;						       \
+};

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#603: FILE: fs/rcfs/magic.c:52:
+	int rc=0;                                                      \
 	      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#604: FILE: fs/rcfs/magic.c:53:
+        ssize_t precnt;                                                \$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#604: FILE: fs/rcfs/magic.c:53:
+        ssize_t precnt;                                                \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#612: FILE: fs/rcfs/magic.c:61:
+        }                                                              \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#612: FILE: fs/rcfs/magic.c:61:
+        }                                                              \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#613: FILE: fs/rcfs/magic.c:62:
+        precnt = s->count ;                                            \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#613: FILE: fs/rcfs/magic.c:62:
+        precnt = s->count ;                                            \$

ERROR:SPACING: space prohibited after that '*' (ctx:BxW)
#615: FILE: fs/rcfs/magic.c:64:
+		rc = (* core->classtype->show_ ## FUNC)(core, s);      \
 		      ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#616: FILE: fs/rcfs/magic.c:65:
+                                                                       \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#616: FILE: fs/rcfs/magic.c:65:
+                                                                       \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#617: FILE: fs/rcfs/magic.c:66:
+        if (s->count == precnt)                                        \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#617: FILE: fs/rcfs/magic.c:66:
+        if (s->count == precnt)                                        \$

ERROR:SPACING: spaces required around that '=' (ctx:VxO)
#627: FILE: fs/rcfs/magic.c:76:
+	int ret=-EINVAL;                                               \
 	       ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#627: FILE: fs/rcfs/magic.c:76:
+	int ret=-EINVAL;                                               \
 	        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#632: FILE: fs/rcfs/magic.c:81:
+		ret = single_open(file,FUNC ## _show, (void *)ri);     \
 		                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#641: FILE: fs/rcfs/magic.c:90:
+	return single_release(inode,file);			       \
 	                           ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!otherstr"
#669: FILE: fs/rcfs/magic.c:118:
+				if (*otherstr == NULL) {	       \

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "resstr"
#686: FILE: fs/rcfs/magic.c:135:
+	return (*resstr != NULL);				       \

ERROR:SPACING: space required after that ',' (ctx:VxV)
#689: FILE: fs/rcfs/magic.c:138:
+#define MAGIC_WRITE(FUNC,CLSTYPEFUN)                                   \
                         ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'CLSTYPEFUN' - possible side-effects?
#689: FILE: fs/rcfs/magic.c:138:
+#define MAGIC_WRITE(FUNC,CLSTYPEFUN)                                   \
+static ssize_t                                                         \
+FUNC ## _write(struct file *file, const char __user *buf,	       \
+			   size_t count, loff_t *ppos)		       \
+{								       \
+	struct rcfs_inode_info *ri = 				       \
+		RCFS_I(file->f_dentry->d_parent->d_inode);	       \
+	char *optbuf, *otherstr=NULL, *resname=NULL;		       \
+	int done, rc = 0;					       \
+	ckrm_core_class_t *core ;				       \
+								       \
+	core = ri->core;					       \
+	if (!ckrm_is_core_valid(core)) 				       \
+		return -EINVAL;					       \
+								       \
+	if ((ssize_t) count < 0 				       \
+	    || (ssize_t) count > FUNC ## _max_input_size)              \
+		return -EINVAL;					       \
+								       \
+	if (!access_ok(VERIFY_READ, buf, count))		       \
+		return -EFAULT;					       \
+								       \
+	down(&(ri->vfs_inode.i_sem));				       \
+								       \
+	optbuf = kmalloc(FUNC ## _max_input_size, GFP_KERNEL);         \
+	__copy_from_user(optbuf, buf, count);			       \
+	if (optbuf[count-1] == '\n')				       \
+		optbuf[count-1]='\0';				       \
+								       \
+	done = FUNC ## _parse(optbuf, &resname, &otherstr);            \
+								       \
+	if (!done) {						       \
+		printk(KERN_ERR "Error parsing FUNC \n");	       \
+		goto FUNC ## _write_out;			       \
+	}							       \
+								       \
+	if (core->classtype-> CLSTYPEFUN) {		               \
+		rc = (*core->classtype->CLSTYPEFUN)	               \
+			(core, resname, otherstr);		       \
+		if (rc) {					       \
+			printk(KERN_ERR "FUNC_write: CLSTYPEFUN error\n");   \
+			goto FUNC ## _write_out; 	               \
+		}						       \
+	}							       \
+								       \
+FUNC ## _write_out:						       \
+	up(&(ri->vfs_inode.i_sem));				       \
+	kfree(optbuf);						       \
+	kfree(otherstr);					       \
+	kfree(resname);						       \
+	return rc ? rc : count;					       \
+}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'CLSTYPEFUN' may be better as '(CLSTYPEFUN)' to avoid precedence issues
#689: FILE: fs/rcfs/magic.c:138:
+#define MAGIC_WRITE(FUNC,CLSTYPEFUN)                                   \
+static ssize_t                                                         \
+FUNC ## _write(struct file *file, const char __user *buf,	       \
+			   size_t count, loff_t *ppos)		       \
+{								       \
+	struct rcfs_inode_info *ri = 				       \
+		RCFS_I(file->f_dentry->d_parent->d_inode);	       \
+	char *optbuf, *otherstr=NULL, *resname=NULL;		       \
+	int done, rc = 0;					       \
+	ckrm_core_class_t *core ;				       \
+								       \
+	core = ri->core;					       \
+	if (!ckrm_is_core_valid(core)) 				       \
+		return -EINVAL;					       \
+								       \
+	if ((ssize_t) count < 0 				       \
+	    || (ssize_t) count > FUNC ## _max_input_size)              \
+		return -EINVAL;					       \
+								       \
+	if (!access_ok(VERIFY_READ, buf, count))		       \
+		return -EFAULT;					       \
+								       \
+	down(&(ri->vfs_inode.i_sem));				       \
+								       \
+	optbuf = kmalloc(FUNC ## _max_input_size, GFP_KERNEL);         \
+	__copy_from_user(optbuf, buf, count);			       \
+	if (optbuf[count-1] == '\n')				       \
+		optbuf[count-1]='\0';				       \
+								       \
+	done = FUNC ## _parse(optbuf, &resname, &otherstr);            \
+								       \
+	if (!done) {						       \
+		printk(KERN_ERR "Error parsing FUNC \n");	       \
+		goto FUNC ## _write_out;			       \
+	}							       \
+								       \
+	if (core->classtype-> CLSTYPEFUN) {		               \
+		rc = (*core->classtype->CLSTYPEFUN)	               \
+			(core, resname, otherstr);		       \
+		if (rc) {					       \
+			printk(KERN_ERR "FUNC_write: CLSTYPEFUN error\n");   \
+			goto FUNC ## _write_out; 	               \
+		}						       \
+	}							       \
+								       \
+FUNC ## _write_out:						       \
+	up(&(ri->vfs_inode.i_sem));				       \
+	kfree(optbuf);						       \
+	kfree(otherstr);					       \
+	kfree(resname);						       \
+	return rc ? rc : count;					       \
+}

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#694: FILE: fs/rcfs/magic.c:143:
+^Istruct rcfs_inode_info *ri = ^I^I^I^I       \$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#696: FILE: fs/rcfs/magic.c:145:
+	char *optbuf, *otherstr=NULL, *resname=NULL;		       \
 	                       ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#696: FILE: fs/rcfs/magic.c:145:
+	char *optbuf, *otherstr=NULL, *resname=NULL;		       \
 	                                      ^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#701: FILE: fs/rcfs/magic.c:150:
+^Iif (!ckrm_is_core_valid(core)) ^I^I^I^I       \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#704: FILE: fs/rcfs/magic.c:153:
+^Iif ((ssize_t) count < 0 ^I^I^I^I       \$

CHECK:SPACING: No space is necessary after a cast
#704: FILE: fs/rcfs/magic.c:153:
+	if ((ssize_t) count < 0 				       \

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#705: FILE: fs/rcfs/magic.c:154:
+	if ((ssize_t) count < 0 				       \
+	    || (ssize_t) count > FUNC ## _max_input_size)              \

CHECK:SPACING: No space is necessary after a cast
#705: FILE: fs/rcfs/magic.c:154:
+	    || (ssize_t) count > FUNC ## _max_input_size)              \

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around ri->vfs_inode.i_sem
#711: FILE: fs/rcfs/magic.c:160:
+	down(&(ri->vfs_inode.i_sem));				       \

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#715: FILE: fs/rcfs/magic.c:164:
+	if (optbuf[count-1] == '\n')				       \
 	                ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#716: FILE: fs/rcfs/magic.c:165:
+		optbuf[count-1]='\0';				       \
 		            ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#716: FILE: fs/rcfs/magic.c:165:
+		optbuf[count-1]='\0';				       \
 		               ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#721: FILE: fs/rcfs/magic.c:170:
+		printk(KERN_ERR "Error parsing FUNC \n");	       \

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#721: FILE: fs/rcfs/magic.c:170:
+		printk(KERN_ERR "Error parsing FUNC \n");	       \

ERROR:SPACING: spaces prohibited around that '->' (ctx:VxW)
#725: FILE: fs/rcfs/magic.c:174:
+	if (core->classtype-> CLSTYPEFUN) {		               \
 	                   ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#729: FILE: fs/rcfs/magic.c:178:
+			printk(KERN_ERR "FUNC_write: CLSTYPEFUN error\n");   \

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#730: FILE: fs/rcfs/magic.c:179:
+^I^I^Igoto FUNC ## _write_out; ^I               \$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around ri->vfs_inode.i_sem
#735: FILE: fs/rcfs/magic.c:184:
+	up(&(ri->vfs_inode.i_sem));				       \

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#742: FILE: fs/rcfs/magic.c:191:
+#define MAGIC_RD_FILEOPS(FUNC)                                         \
+struct file_operations FUNC ## _fileops = {                            \
+	.open           = FUNC ## _open,			       \
+	.read           = seq_read,				       \
+	.llseek         = seq_lseek,				       \
+	.release        = FUNC ## _close,			       \
+};                                                                     \
+EXPORT_SYMBOL(FUNC ## _fileops);

WARNING:CONST_STRUCT: struct file_operations should normally be const
#743: FILE: fs/rcfs/magic.c:192:
+struct file_operations FUNC ## _fileops = {                            \

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#751: FILE: fs/rcfs/magic.c:200:
+#define MAGIC_RDWR_FILEOPS(FUNC)                                       \
+struct file_operations FUNC ## _fileops = {                            \
+	.open           = FUNC ## _open,			       \
+	.read           = seq_read,				       \
+	.llseek         = seq_lseek,				       \
+	.release        = FUNC ## _close,			       \
+	.write          = FUNC ## _write,	                       \
+};                                                                     \
+EXPORT_SYMBOL(FUNC ## _fileops);

WARNING:CONST_STRUCT: struct file_operations should normally be const
#752: FILE: fs/rcfs/magic.c:201:
+struct file_operations FUNC ## _fileops = {                            \

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#768: FILE: fs/rcfs/magic.c:217:
+target_reclassify_write(struct file *file, const char __user * buf,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#769: FILE: fs/rcfs/magic.c:218:
+			size_t count, loff_t * ppos, int manual)

CHECK:SPACING: No space is necessary after a cast
#776: FILE: fs/rcfs/magic.c:225:
+	if ((ssize_t) count < 0 || (ssize_t) count > TARGET_MAX_INPUT_SIZE)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around ri->vfs_inode.i_sem
#780: FILE: fs/rcfs/magic.c:229:
+	down(&(ri->vfs_inode.i_sem));

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#787: FILE: fs/rcfs/magic.c:236:
+		rc = (*clstype->forced_reclassify) (manual ? ri->core: NULL, optbuf);
 		                                                     ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around ri->vfs_inode.i_sem
#788: FILE: fs/rcfs/magic.c:237:
+	up(&(ri->vfs_inode.i_sem));

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#792: FILE: fs/rcfs/magic.c:241:
+
+}

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#801: FILE: fs/rcfs/magic.c:250:
+target_write(struct file *file, const char __user * buf,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#802: FILE: fs/rcfs/magic.c:251:
+	     size_t count, loff_t * ppos)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#804: FILE: fs/rcfs/magic.c:253:
+	return target_reclassify_write(file,buf,count,ppos,1);
 	                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#804: FILE: fs/rcfs/magic.c:253:
+	return target_reclassify_write(file,buf,count,ppos,1);
 	                                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#804: FILE: fs/rcfs/magic.c:253:
+	return target_reclassify_write(file,buf,count,ppos,1);
 	                                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#804: FILE: fs/rcfs/magic.c:253:
+	return target_reclassify_write(file,buf,count,ppos,1);
 	                                                  ^

WARNING:CONST_STRUCT: struct file_operations should normally be const
#807: FILE: fs/rcfs/magic.c:256:
+struct file_operations target_fileops = {

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#811: FILE: fs/rcfs/magic.c:260:
+EXPORT_SYMBOL_GPL(target_fileops);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#820: FILE: fs/rcfs/magic.c:269:
+reclassify_write(struct file *file, const char __user * buf,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#821: FILE: fs/rcfs/magic.c:270:
+		 size_t count, loff_t * ppos)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#823: FILE: fs/rcfs/magic.c:272:
+	return target_reclassify_write(file,buf,count,ppos,0);
 	                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#823: FILE: fs/rcfs/magic.c:272:
+	return target_reclassify_write(file,buf,count,ppos,0);
 	                                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#823: FILE: fs/rcfs/magic.c:272:
+	return target_reclassify_write(file,buf,count,ppos,0);
 	                                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#823: FILE: fs/rcfs/magic.c:272:
+	return target_reclassify_write(file,buf,count,ppos,0);
 	                                                  ^

WARNING:CONST_STRUCT: struct file_operations should normally be const
#826: FILE: fs/rcfs/magic.c:275:
+struct file_operations reclassify_fileops = {

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#830: FILE: fs/rcfs/magic.c:279:
+EXPORT_SYMBOL_GPL(reclassify_fileops);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#835: FILE: fs/rcfs/magic.c:284:
+ * Set/get configuration parameters of a class. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#906: FILE: fs/rcfs/magic.c:355:
+ * Share types and semantics are defined by rcfs and ckrm core $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#980: FILE: fs/rcfs/magic.c:429:
+shares_write(struct file *file, const char __user * buf,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#981: FILE: fs/rcfs/magic.c:430:
+	     size_t count, loff_t * ppos)

CHECK:SPACING: No space is necessary after a cast
#999: FILE: fs/rcfs/magic.c:448:
+	if ((ssize_t) count < 0 || (ssize_t) count > SHARES_MAX_INPUT_SIZE)

CHECK:SPACING: No space is necessary after a cast
#1004: FILE: fs/rcfs/magic.c:453:
+	if (!ri || !ckrm_is_core_valid((ckrm_core_class_t *) (ri->core))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ri->core'
#1004: FILE: fs/rcfs/magic.c:453:
+	if (!ri || !ckrm_is_core_valid((ckrm_core_class_t *) (ri->core))) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1005: FILE: fs/rcfs/magic.c:454:
+		printk(KERN_ERR "shares_write: Error accessing core class\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'shares_write', this function's name, in a string
#1005: FILE: fs/rcfs/magic.c:454:
+		printk(KERN_ERR "shares_write: Error accessing core class\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1020: FILE: fs/rcfs/magic.c:469:
+		printk(KERN_ERR "Error parsing shares\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1027: FILE: fs/rcfs/magic.c:476:
+			printk(KERN_ERR

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'shares_write', this function's name, in a string
#1028: FILE: fs/rcfs/magic.c:477:
+			       "shares_write: resctlr share set error\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1032: FILE: fs/rcfs/magic.c:481:
+	printk(KERN_ERR "Set %s shares to %d %d %d %d\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1064: FILE: fs/rcfs/magic.c:513:
+			printk(KERN_ERR

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'rcfs_clear_magic', this function's name, in a string
#1065: FILE: fs/rcfs/magic.c:514:
+			       "rcfs_clear_magic: error deleting one\n");

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1070: FILE: fs/rcfs/magic.c:519:
+EXPORT_SYMBOL_GPL(rcfs_clear_magic);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1093: FILE: fs/rcfs/magic.c:542:
+EXPORT_SYMBOL_GPL(rcfs_create_magic);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1103: FILE: fs/rcfs/Makefile:5:
+obj-$(CONFIG_RCFS_FS) += rcfs.o $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1110: FILE: fs/rcfs/rootdir.c:1:
+/* $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1110: FILE: fs/rcfs/rootdir.c:1:
+/* 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1111: FILE: fs/rcfs/rootdir.c:2:
+ * fs/rcfs/rootdir.c $

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#1111: FILE: fs/rcfs/rootdir.c:2:
+ * fs/rcfs/rootdir.c 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1114: FILE: fs/rcfs/rootdir.c:5:
+ *           $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1115: FILE: fs/rcfs/rootdir.c:6:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1116: FILE: fs/rcfs/rootdir.c:7:
+ * Functions for creating root directories and magic files $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1120: FILE: fs/rcfs/rootdir.c:11:
+ * $

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#1149: FILE: fs/rcfs/rootdir.c:40:
+#include <asm/uaccess.h>

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1157: FILE: fs/rcfs/rootdir.c:48:
+int rcfs_register_engine(rbce_eng_callback_t * rcbs)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1159: FILE: fs/rcfs/rootdir.c:50:
+	if (!rcbs->mkdir || rcfs_eng_callbacks.mkdir) {
+		return -EINVAL;
+	}

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1167: FILE: fs/rcfs/rootdir.c:58:
+EXPORT_SYMBOL_GPL(rcfs_register_engine);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1169: FILE: fs/rcfs/rootdir.c:60:
+int rcfs_unregister_engine(rbce_eng_callback_t * rcbs)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rcbs->mkdir != rcfs_eng_callbacks.mkdir'
#1171: FILE: fs/rcfs/rootdir.c:62:
+	if (!rcbs->mkdir || !rcfs_eng_callbacks.mkdir ||
+	    (rcbs->mkdir != rcfs_eng_callbacks.mkdir)) {

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1181: FILE: fs/rcfs/rootdir.c:72:
+EXPORT_SYMBOL(rcfs_unregister_engine);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1185: FILE: fs/rcfs/rootdir.c:76:
+ * Create and return a "root" dentry under /rcfs. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1186: FILE: fs/rcfs/rootdir.c:77:
+ * Also create associated magic files $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'mfcount < 0'
#1201: FILE: fs/rcfs/rootdir.c:92:
+	if ((mfcount < 0) || (!mfdesc))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!mfdesc'
#1201: FILE: fs/rcfs/rootdir.c:92:
+	if ((mfcount < 0) || (!mfdesc))

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1205: FILE: fs/rcfs/rootdir.c:96:
+	printk("allocating classtype root <%s>\n", rootdesc->name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1209: FILE: fs/rcfs/rootdir.c:100:
+		printk(KERN_ERR "Could not create %s\n", rootdesc->name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1216: FILE: fs/rcfs/rootdir.c:107:
+		printk(KERN_ERR "Error allocating name for %s\n",

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1233: FILE: fs/rcfs/rootdir.c:124:
+EXPORT_SYMBOL_GPL(rcfs_mkroot);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1250: FILE: fs/rcfs/rootdir.c:141:
+EXPORT_SYMBOL_GPL(rcfs_rmroot);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1252: FILE: fs/rcfs/rootdir.c:143:
+int rcfs_register_classtype(ckrm_classtype_t * clstype)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1258: FILE: fs/rcfs/rootdir.c:149:
+	if (genmfdesc[clstype->mfidx] == NULL) {
+		return -ENOMEM;
+	}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!genmfdesc[clstype->mfidx]"
#1258: FILE: fs/rcfs/rootdir.c:149:
+	if (genmfdesc[clstype->mfidx] == NULL) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around clstype->rootde
#1271: FILE: fs/rcfs/rootdir.c:162:
+			 (struct dentry **)&(clstype->rootde));

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1280: FILE: fs/rcfs/rootdir.c:171:
+	if ((rc = rcfs_create_magic(clstype->rootde, &mfdesc[1],

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1290: FILE: fs/rcfs/rootdir.c:181:
+EXPORT_SYMBOL_GPL(rcfs_register_classtype);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1292: FILE: fs/rcfs/rootdir.c:183:
+int rcfs_deregister_classtype(ckrm_classtype_t * clstype)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1304: FILE: fs/rcfs/rootdir.c:195:
+EXPORT_SYMBOL_GPL(rcfs_deregister_classtype);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1307: FILE: fs/rcfs/rootdir.c:198:
+ * root name, root permissions, magic file names and magic file permissions $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1308: FILE: fs/rcfs/rootdir.c:199:
+ * are needed by all entities (classtypes and classification engines) existing $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1311: FILE: fs/rcfs/rootdir.c:202:
+ * The common sets of these attributes are listed here as a table. Individual $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1312: FILE: fs/rcfs/rootdir.c:203:
+ * classtypes and classification engines can simple specify the index into the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1313: FILE: fs/rcfs/rootdir.c:204:
+ * table to initialize their magf entries. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1324: FILE: fs/rcfs/super.c:1:
+/* $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1324: FILE: fs/rcfs/super.c:1:
+/* 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1325: FILE: fs/rcfs/super.c:2:
+ * fs/rcfs/super.c $

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#1325: FILE: fs/rcfs/super.c:2:
+ * fs/rcfs/super.c 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1329: FILE: fs/rcfs/super.c:6:
+ *           $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1331: FILE: fs/rcfs/super.c:8:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1334: FILE: fs/rcfs/super.c:11:
+ * $

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#1363: FILE: fs/rcfs/super.c:40:
+#include <asm/uaccess.h>

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1376: FILE: fs/rcfs/super.c:53:
+EXPORT_SYMBOL_GPL(RCFS_I);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1381: FILE: fs/rcfs/super.c:58:
+	struct rcfs_inode_info *ri;
+	ri = (struct rcfs_inode_info *)kmem_cache_alloc(rcfs_inode_cachep,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1398: FILE: fs/rcfs/super.c:75:
+rcfs_init_once(void *foo, kmem_cache_t * cachep, unsigned long flags)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rcfs_inode_cachep"
#1415: FILE: fs/rcfs/super.c:92:
+	if (rcfs_inode_cachep == NULL)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1422: FILE: fs/rcfs/super.c:99:
+	printk(KERN_WARNING "destroy inodecache was called\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1424: FILE: fs/rcfs/super.c:101:
+		printk(KERN_INFO

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1448: FILE: fs/rcfs/super.c:125:
+	if (rcfs_mounted) {
+		return -EPERM;
+	}

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1464: FILE: fs/rcfs/super.c:141:
+		iput(inode);
 		^^^^

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1474: FILE: fs/rcfs/super.c:151:
+		iput(inode);
 		^^^^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1481: FILE: fs/rcfs/super.c:158:
+	sb->s_fs_info = rcfs_root = inode;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!clstype"
#1488: FILE: fs/rcfs/super.c:165:
+		if (clstype == NULL)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1490: FILE: fs/rcfs/super.c:167:
+		printk("A non null classtype\n");

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1492: FILE: fs/rcfs/super.c:169:
+		if ((rc = rcfs_register_classtype(clstype)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1502: FILE: fs/rcfs/super.c:179:
+			if ((rc = (*rcfs_eng_callbacks.mnt) ())) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1502: FILE: fs/rcfs/super.c:179:
+			if ((rc = (*rcfs_eng_callbacks.mnt) ())) {
+				printk(KERN_ERR "Error in CE mnt %d\n", rc);
+			}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1503: FILE: fs/rcfs/super.c:180:
+				printk(KERN_ERR "Error in CE mnt %d\n", rc);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1510: FILE: fs/rcfs/super.c:187:
+^I * register CE's with rcfs $

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!clstype"
#1538: FILE: fs/rcfs/super.c:215:
+		if (clstype == NULL || clstype->rootde == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!clstype->rootde"
#1538: FILE: fs/rcfs/super.c:215:
+		if (clstype == NULL || clstype->rootde == NULL)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1541: FILE: fs/rcfs/super.c:218:
+		if ((rc = rcfs_deregister_classtype(clstype))) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1542: FILE: fs/rcfs/super.c:219:
+			printk(KERN_ERR "Error removing classtype %s\n",

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1553: FILE: fs/rcfs/super.c:230:
+			if ((rc = (*rcfs_eng_callbacks.umnt) ())) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1554: FILE: fs/rcfs/super.c:231:
+				printk(KERN_ERR "Error in CE umnt %d\n", rc);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1559: FILE: fs/rcfs/super.c:236:
+^I * Following comment handled by code above; keep nonetheless if it $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1564: FILE: fs/rcfs/super.c:241:
+^I * if ce is in  one directory /rcfs/ce, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1565: FILE: fs/rcfs/super.c:242:
+^I *       rcfs_deregister_engine for all classtypes within above $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1566: FILE: fs/rcfs/super.c:243:
+^I *             codebase $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1572: FILE: fs/rcfs/super.c:249:
+^I * following will automatically clear rcfs root entry including its $

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1592: FILE: fs/rcfs/super.c:269:
+extern struct rcfs_functions rcfs_fn;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1640: FILE: init/Kconfig:159:
+^I  RCFS is the filesystem API for CKRM. This separate configuration $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1641: FILE: init/Kconfig:160:
+^I  option is provided only for debugging and will eventually disappear $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1642: FILE: init/Kconfig:161:
+^I  since rcfs will be automounted whenever CKRM is configured. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1644: FILE: init/Kconfig:163:
+^I  Say N if unsure, Y if you've enabled CKRM, M to debug rcfs $

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000226805.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 97 errors, 111 warnings, 40 checks, 1573 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000226805.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
