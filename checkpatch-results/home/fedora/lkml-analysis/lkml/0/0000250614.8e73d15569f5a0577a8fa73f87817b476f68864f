WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#35: 
> > Attached is a patch against the security Kconfig and Makefile to support

WARNING:USE_RELATIVE_PATH: use relative pathname instead of absolute in changelog text
#63: 
diff -Nrup /home/hallyn/kernel/linux-2.6.8.1/security/Kconfig linux-2.6.8.1/security/Kconfig

WARNING:USE_RELATIVE_PATH: use relative pathname instead of absolute in changelog text
#64: 
--- /home/hallyn/kernel/linux-2.6.8.1/security/Kconfig	2004-08-14 05:55:47.000000000 -0500

ERROR:TRAILING_WHITESPACE: trailing whitespace
#78: FILE: security/Kconfig:57:
+^I  $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#95: FILE: security/bsdjail.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#96: FILE: security/bsdjail.c:2:
+ * File: linux/security/bsdjail.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#124: FILE: security/bsdjail.c:30:
+#include <asm/uaccess.h>

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#132: FILE: security/bsdjail.c:38:
+static int jail_debug = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:SPACING: space prohibited before that close parenthesis ')'
#138: FILE: security/bsdjail.c:44:
+#define bsdj_debug(how, fmt, arg... ) \

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'how' may be better as '(how)' to avoid precedence issues
#138: FILE: security/bsdjail.c:44:
+#define bsdj_debug(how, fmt, arg... ) \
+	do { \
+		if ( how || jail_debug ) \
+			printk(KERN_NOTICE "%s: %s: " fmt, \
+				MY_NAME, __FUNCTION__, \
+				## arg ); \
+	} while ( 0 )

ERROR:SPACING: space prohibited after that open parenthesis '('
#140: FILE: security/bsdjail.c:46:
+		if ( how || jail_debug ) \

ERROR:SPACING: space prohibited before that close parenthesis ')'
#140: FILE: security/bsdjail.c:46:
+		if ( how || jail_debug ) \

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#141: FILE: security/bsdjail.c:47:
+			printk(KERN_NOTICE "%s: %s: " fmt, \

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#142: FILE: security/bsdjail.c:48:
+				MY_NAME, __FUNCTION__, \

ERROR:SPACING: space prohibited before that close parenthesis ')'
#143: FILE: security/bsdjail.c:49:
+				## arg ); \

ERROR:SPACING: space prohibited after that open parenthesis '('
#144: FILE: security/bsdjail.c:50:
+	} while ( 0 )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#144: FILE: security/bsdjail.c:50:
+	} while ( 0 )

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#149: FILE: security/bsdjail.c:55:
+static int secondary = 0;

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#176: FILE: security/bsdjail.c:82:
+^Ilong nice;      ^I/* nice level for processes in this jail */$

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#185: FILE: security/bsdjail.c:91:
+#define in_use(x) (x->jail_flags & IN_USE)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#186: FILE: security/bsdjail.c:92:
+#define set_in_use(x) (x->jail_flags |= IN_USE)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#188: FILE: security/bsdjail.c:94:
+#define got_network(x) (x->jail_flags & GOT_NETWORK)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#189: FILE: security/bsdjail.c:95:
+#define set_got_network(x) (x->jail_flags |= GOT_NETWORK)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#190: FILE: security/bsdjail.c:96:
+#define unset_got_network(x) (x->jail_flags &= ~GOT_NETWORK)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#192: FILE: security/bsdjail.c:98:
+#define is_ipv4(x) (!(x->jail_flags & IS_IPV6))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#193: FILE: security/bsdjail.c:99:
+#define is_ipv6(x) (x->jail_flags & IS_IPV6)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#194: FILE: security/bsdjail.c:100:
+#define set_ipv4(x) (x->jail_flags &= ~IS_IPV6)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#195: FILE: security/bsdjail.c:101:
+#define set_ipv6(x) (x->jail_flags |= IS_IPV6)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'task' may be better as '(task)' to avoid precedence issues
#201: FILE: security/bsdjail.c:107:
+#define get_task_security(task) (task->security)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'inode' may be better as '(inode)' to avoid precedence issues
#202: FILE: security/bsdjail.c:108:
+#define get_inode_security(inode) (inode->i_security)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'sock' may be better as '(sock)' to avoid precedence issues
#203: FILE: security/bsdjail.c:109:
+#define get_sock_security(sock) (sock->sk_security)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'file' may be better as '(file)' to avoid precedence issues
#204: FILE: security/bsdjail.c:110:
+#define get_file_security(file) (file->f_security)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'ipc' may be better as '(ipc)' to avoid precedence issues
#205: FILE: security/bsdjail.c:111:
+#define get_ipc_security(ipc)	(ipc->security)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#226: FILE: security/bsdjail.c:132:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#233: FILE: security/bsdjail.c:139:
+	if (tsec->root_pathname)
+		kfree(tsec->root_pathname);

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#235: FILE: security/bsdjail.c:141:
+	if (tsec->ip_addr_name)
+		kfree(tsec->ip_addr_name);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#239: FILE: security/bsdjail.c:145:
+#define set_task_security(task,data) task->security = data
                               ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#239: FILE: security/bsdjail.c:145:
+#define set_task_security(task,data) task->security = data

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'task' may be better as '(task)' to avoid precedence issues
#239: FILE: security/bsdjail.c:145:
+#define set_task_security(task,data) task->security = data

ERROR:SPACING: space required after that ',' (ctx:VxV)
#240: FILE: security/bsdjail.c:146:
+#define set_inode_security(inode,data) inode->i_security = data
                                 ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#240: FILE: security/bsdjail.c:146:
+#define set_inode_security(inode,data) inode->i_security = data

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'inode' may be better as '(inode)' to avoid precedence issues
#240: FILE: security/bsdjail.c:146:
+#define set_inode_security(inode,data) inode->i_security = data

ERROR:SPACING: space required after that ',' (ctx:VxV)
#241: FILE: security/bsdjail.c:147:
+#define set_sock_security(sock,data) sock->sk_security = data
                               ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#241: FILE: security/bsdjail.c:147:
+#define set_sock_security(sock,data) sock->sk_security = data

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'sock' may be better as '(sock)' to avoid precedence issues
#241: FILE: security/bsdjail.c:147:
+#define set_sock_security(sock,data) sock->sk_security = data

ERROR:SPACING: space required after that ',' (ctx:VxV)
#242: FILE: security/bsdjail.c:148:
+#define set_file_security(file,data) file->f_security = data
                               ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#242: FILE: security/bsdjail.c:148:
+#define set_file_security(file,data) file->f_security = data

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'file' may be better as '(file)' to avoid precedence issues
#242: FILE: security/bsdjail.c:148:
+#define set_file_security(file,data) file->f_security = data

ERROR:SPACING: space required after that ',' (ctx:VxV)
#243: FILE: security/bsdjail.c:149:
+#define set_ipc_security(ipc,data)   ipc.security = data
                             ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#262: FILE: security/bsdjail.c:168:
+^I^I/* $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#267: FILE: security/bsdjail.c:173:
+		set_task_security(task,NULL);
 		                      ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#279: FILE: security/bsdjail.c:185:
+	struct jail_struct *tsec;
+	tsec = kmalloc(sizeof(struct jail_struct), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*tsec)...) over kmalloc(sizeof(struct jail_struct)...)
#279: FILE: security/bsdjail.c:185:
+	tsec = kmalloc(sizeof(struct jail_struct), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

ERROR:TRAILING_WHITESPACE: trailing whitespace
#291: FILE: security/bsdjail.c:197:
+^I$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#306: FILE: security/bsdjail.c:212:
+	unsigned int a,b,c,d, i;
 	              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#306: FILE: security/bsdjail.c:212:
+	unsigned int a,b,c,d, i;
 	                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#306: FILE: security/bsdjail.c:212:
+	unsigned int a,b,c,d, i;
 	                  ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#312: FILE: security/bsdjail.c:218:
+		printk(KERN_NOTICE "%s: exiting\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#312: FILE: security/bsdjail.c:218:
+		printk(KERN_NOTICE "%s: exiting\n", __FUNCTION__);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#317: FILE: security/bsdjail.c:223:
+		printk(KERN_NOTICE "%s: is ipv6\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#317: FILE: security/bsdjail.c:223:
+		printk(KERN_NOTICE "%s: is ipv6\n", __FUNCTION__);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#318: FILE: security/bsdjail.c:224:
+		if (sscanf(tsec->ip_addr_name,"%x:%x:%x:%x:%x:%x:%x:%x",
 		                             ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#319: FILE: security/bsdjail.c:225:
+		if (sscanf(tsec->ip_addr_name,"%x:%x:%x:%x:%x:%x:%x:%x",
+			&x[0], &x[1], &x[2], &x[3], &x[4], &x[5], &x[6],

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#321: FILE: security/bsdjail.c:227:
+			printk(KERN_NOTICE "%s: bad ipv6 addr %s\n", __FUNCTION__,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#321: FILE: security/bsdjail.c:227:
+			printk(KERN_NOTICE "%s: bad ipv6 addr %s\n", __FUNCTION__,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#322: FILE: security/bsdjail.c:228:
+			printk(KERN_NOTICE "%s: bad ipv6 addr %s\n", __FUNCTION__,
+				tsec->ip_addr_name);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#325: FILE: security/bsdjail.c:231:
+		for (i=0; i<8; i++) {
 		      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#325: FILE: security/bsdjail.c:231:
+		for (i=0; i<8; i++) {
 		           ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#327: FILE: security/bsdjail.c:233:
+				printk("%s: %x > 65535 at %d\n", __FUNCTION__, x[i], i);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#327: FILE: security/bsdjail.c:233:
+				printk("%s: %x > 65535 at %d\n", __FUNCTION__, x[i], i);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#333: FILE: security/bsdjail.c:239:
+		if (sscanf(tsec->ip_addr_name,"%u.%u.%u.%u",&a,&b,&c,&d)!=4)
 		                             ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#333: FILE: security/bsdjail.c:239:
+		if (sscanf(tsec->ip_addr_name,"%u.%u.%u.%u",&a,&b,&c,&d)!=4)
 		                                           ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#333: FILE: security/bsdjail.c:239:
+		if (sscanf(tsec->ip_addr_name,"%u.%u.%u.%u",&a,&b,&c,&d)!=4)
 		                                            ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#333: FILE: security/bsdjail.c:239:
+		if (sscanf(tsec->ip_addr_name,"%u.%u.%u.%u",&a,&b,&c,&d)!=4)
 		                                              ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#333: FILE: security/bsdjail.c:239:
+		if (sscanf(tsec->ip_addr_name,"%u.%u.%u.%u",&a,&b,&c,&d)!=4)
 		                                               ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#333: FILE: security/bsdjail.c:239:
+		if (sscanf(tsec->ip_addr_name,"%u.%u.%u.%u",&a,&b,&c,&d)!=4)
 		                                                 ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#333: FILE: security/bsdjail.c:239:
+		if (sscanf(tsec->ip_addr_name,"%u.%u.%u.%u",&a,&b,&c,&d)!=4)
 		                                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#333: FILE: security/bsdjail.c:239:
+		if (sscanf(tsec->ip_addr_name,"%u.%u.%u.%u",&a,&b,&c,&d)!=4)
 		                                                    ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#333: FILE: security/bsdjail.c:239:
+		if (sscanf(tsec->ip_addr_name,"%u.%u.%u.%u",&a,&b,&c,&d)!=4)
 		                                                     ^

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#333: FILE: security/bsdjail.c:239:
+		if (sscanf(tsec->ip_addr_name,"%u.%u.%u.%u",&a,&b,&c,&d)!=4)
 		                                                        ^

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#335: FILE: security/bsdjail.c:241:
+		if (a>255 || b>255 || c>255 || d>255)
 		     ^

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#335: FILE: security/bsdjail.c:241:
+		if (a>255 || b>255 || c>255 || d>255)
 		              ^

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#335: FILE: security/bsdjail.c:241:
+		if (a>255 || b>255 || c>255 || d>255)
 		                       ^

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#335: FILE: security/bsdjail.c:241:
+		if (a>255 || b>255 || c>255 || d>255)
 		                                ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#337: FILE: security/bsdjail.c:243:
+		tsec->realaddr.a4 = htonl((a<<24)|(b<<16)|(c<<8)|d);
 		                            ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#337: FILE: security/bsdjail.c:243:
+		tsec->realaddr.a4 = htonl((a<<24)|(b<<16)|(c<<8)|d);
 		                                 ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#337: FILE: security/bsdjail.c:243:
+		tsec->realaddr.a4 = htonl((a<<24)|(b<<16)|(c<<8)|d);
 		                                    ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#337: FILE: security/bsdjail.c:243:
+		tsec->realaddr.a4 = htonl((a<<24)|(b<<16)|(c<<8)|d);
 		                                         ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#337: FILE: security/bsdjail.c:243:
+		tsec->realaddr.a4 = htonl((a<<24)|(b<<16)|(c<<8)|d);
 		                                            ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#337: FILE: security/bsdjail.c:243:
+		tsec->realaddr.a4 = htonl((a<<24)|(b<<16)|(c<<8)|d);
 		                                                ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#350: FILE: security/bsdjail.c:256:
+^I$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#351: FILE: security/bsdjail.c:257:
+	tsec = container_of(kref,struct jail_struct,kref);
 	                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#351: FILE: security/bsdjail.c:257:
+	tsec = container_of(kref,struct jail_struct,kref);
 	                                           ^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#367: FILE: security/bsdjail.c:273:
+	struct nameidata nd;
 	                 ^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#375: FILE: security/bsdjail.c:281:
+^I/* $

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#394: FILE: security/bsdjail.c:300:
+	retval = path_lookup(tsec->root_pathname, LOOKUP_FOLLOW | LOOKUP_DIRECTORY, &nd);
 	                                                                             ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#401: FILE: security/bsdjail.c:307:
+	set_fs_root(tsk->fs, nd.mnt, nd.dentry);
 	                     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#401: FILE: security/bsdjail.c:307:
+	set_fs_root(tsk->fs, nd.mnt, nd.dentry);
 	                             ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#402: FILE: security/bsdjail.c:308:
+	set_fs_pwd(tsk->fs, nd.mnt, nd.dentry);
 	                    ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#402: FILE: security/bsdjail.c:308:
+	set_fs_pwd(tsk->fs, nd.mnt, nd.dentry);
 	                            ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#426: FILE: security/bsdjail.c:332:
+	tsec->mnt = mntget(nd.mnt);
 	                   ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#427: FILE: security/bsdjail.c:333:
+	tsec->dentry = dget(nd.dentry);
 	                    ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#428: FILE: security/bsdjail.c:334:
+	path_release(&nd);
 	              ^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#458: FILE: security/bsdjail.c:364:
+^I^I$

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#462: FILE: security/bsdjail.c:368:
+	if (strncmp(value, "root ", 5)==0) {
 	                              ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#462: FILE: security/bsdjail.c:368:
+	if (strncmp(value, "root ", 5)==0) {
[...]
+	} else if (strncmp(value, "ip ", 3)==0) {
[...]
+	} else if (strncmp(value, "ip6 ", 4) == 0) {
[...]
+	} else if (strncmp(value, "slice ", 6)==0) {
[...]
+	} else if (strncmp(value, "timeslice ", 10)==0) {
[...]
+	} else if (strncmp(value, "nrtask ", 7)==0) {
[...]
+	} else if (strncmp(value, "memlock ", 8)==0) {
[...]
+	} else if (strncmp(value, "data ", 5)==0) {
[...]
+	} else if (strncmp(value, "nice ", 5)==0) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#469: FILE: security/bsdjail.c:375:
+		if (tsec->root_pathname)
+			kfree(tsec->root_pathname);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#471: FILE: security/bsdjail.c:377:
+		len = size-start;
 		          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#472: FILE: security/bsdjail.c:378:
+		tsec->root_pathname = kmalloc(len+1, GFP_KERNEL);
 		                                 ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#475: FILE: security/bsdjail.c:381:
+		strncpy(tsec->root_pathname, value+start, len);
 		                                  ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#477: FILE: security/bsdjail.c:383:
+	} else if (strncmp(value, "ip ", 3)==0) {
 	                                   ^

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#484: FILE: security/bsdjail.c:390:
+		if (tsec->ip_addr_name)
+			kfree(tsec->ip_addr_name);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#486: FILE: security/bsdjail.c:392:
+		len = size-start;
 		          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#487: FILE: security/bsdjail.c:393:
+		tsec->ip_addr_name = kmalloc(len+1, GFP_KERNEL);
 		                                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#490: FILE: security/bsdjail.c:396:
+		strncpy(tsec->ip_addr_name, value+start, len);
 		                                 ^

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#500: FILE: security/bsdjail.c:406:
+		if (tsec->ip_addr_name)
+			kfree(tsec->ip_addr_name);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#502: FILE: security/bsdjail.c:408:
+		len = size-start;
 		          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#503: FILE: security/bsdjail.c:409:
+		tsec->ip_addr_name = kmalloc(len+1, GFP_KERNEL);
 		                                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#506: FILE: security/bsdjail.c:412:
+		strncpy(tsec->ip_addr_name, value+start, len);
 		                                 ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#511: FILE: security/bsdjail.c:417:
+	} else if (strncmp(value, "slice ", 6)==0) {
 	                                      ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#517: FILE: security/bsdjail.c:423:
+		val = simple_strtoul(value+6, NULL, 0);
 		                          ^

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#517: FILE: security/bsdjail.c:423:
+		val = simple_strtoul(value+6, NULL, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#519: FILE: security/bsdjail.c:425:
+	} else if (strncmp(value, "timeslice ", 10)==0) {
 	                                           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#525: FILE: security/bsdjail.c:431:
+		val = simple_strtoul(value+10, NULL, 0);
 		                          ^

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#525: FILE: security/bsdjail.c:431:
+		val = simple_strtoul(value+10, NULL, 0);

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#527: FILE: security/bsdjail.c:433:
+	} else if (strncmp(value, "nrtask ", 7)==0) {
 	                                       ^

CHECK:SPACING: No space is necessary after a cast
#533: FILE: security/bsdjail.c:439:
+		val = (int) simple_strtol(value+7, NULL, 0);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#533: FILE: security/bsdjail.c:439:
+		val = (int) simple_strtol(value+7, NULL, 0);
 		                               ^

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#533: FILE: security/bsdjail.c:439:
+		val = (int) simple_strtol(value+7, NULL, 0);

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#537: FILE: security/bsdjail.c:443:
+	} else if (strncmp(value, "memlock ", 8)==0) {
 	                                        ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#543: FILE: security/bsdjail.c:449:
+		val = simple_strtoul(value+8, NULL, 0);
 		                          ^

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#543: FILE: security/bsdjail.c:449:
+		val = simple_strtoul(value+8, NULL, 0);

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#545: FILE: security/bsdjail.c:451:
+	} else if (strncmp(value, "data ", 5)==0) {
 	                                     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#551: FILE: security/bsdjail.c:457:
+		val = simple_strtoul(value+5, NULL, 0);
 		                          ^

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#551: FILE: security/bsdjail.c:457:
+		val = simple_strtoul(value+5, NULL, 0);

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#553: FILE: security/bsdjail.c:459:
+	} else if (strncmp(value, "nice ", 5)==0) {
 	                                     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#559: FILE: security/bsdjail.c:465:
+		val = simple_strtoul(value+5, NULL, 0);
 		                          ^

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#559: FILE: security/bsdjail.c:465:
+		val = simple_strtoul(value+5, NULL, 0);

CHECK:BRACES: Unbalanced braces around else statement
#561: FILE: security/bsdjail.c:467:
+	} else

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#602: FILE: security/bsdjail.c:508:
+		if (strcmp(name, "current")==0) {
 		                           ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#605: FILE: security/bsdjail.c:511:
+			err = print_jail_net_info(jail_of(current), value,
+				size);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#610: FILE: security/bsdjail.c:516:
+^I^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#614: FILE: security/bsdjail.c:520:
+		err = snprintf(value, size,
+			"Valid keywords:\n"

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#634: FILE: security/bsdjail.c:540:
+		err = snprintf(value, size,
+			"Root: %s\nIP: %s\n"

WARNING:SPLIT_STRING: quoted string split across lines
#636: FILE: security/bsdjail.c:542:
+			"max_nrtask %d current nrtask %d max_timeslice %lu "
+			"nice %lu\n"

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#658: FILE: security/bsdjail.c:564:
+jail_file_send_sigiotask(struct task_struct *tsk, struct fown_struct *fown,
+       int fd, int reason)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#658: FILE: security/bsdjail.c:564:
+       int fd, int reason)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#666: FILE: security/bsdjail.c:572:
+        file = (struct file *)((long)fown - offsetof(struct file,f_owner));$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#666: FILE: security/bsdjail.c:572:
+        file = (struct file *)((long)fown - offsetof(struct file,f_owner));$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#666: FILE: security/bsdjail.c:572:
+        file = (struct file *)((long)fown - offsetof(struct file,f_owner));
                                                                 ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#722: FILE: security/bsdjail.c:628:
+/* $

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#727: FILE: security/bsdjail.c:633:
+jail_ptrace (struct task_struct *tracer, struct task_struct *tracee)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#745: FILE: security/bsdjail.c:651:
+static int jail_socket_unix_bind(struct socket *sock, struct sockaddr *address,
+		int addrlen);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#749: FILE: security/bsdjail.c:655:
+static inline int jail_inet4_bind(struct socket *sock, struct sockaddr *address, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#750: FILE: security/bsdjail.c:656:
+static inline int jail_inet4_bind(struct socket *sock, struct sockaddr *address, 
+	int addrlen, struct jail_struct *tsec)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#768: FILE: security/bsdjail.c:674:
+^I^Ibsdj_debug(DBG, "Converted to: %u.%u.%u.%u\n", $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#769: FILE: security/bsdjail.c:675:
+		bsdj_debug(DBG, "Converted to: %u.%u.%u.%u\n", 
+			NIPQUAD(sin_addr));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#778: FILE: security/bsdjail.c:684:
+jail_inet6_bind(struct socket *sock, struct sockaddr *address, int addrlen,
+	struct jail_struct *tsec)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#783: FILE: security/bsdjail.c:689:
+	printk(KERN_NOTICE "%s: 1\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#783: FILE: security/bsdjail.c:689:
+	printk(KERN_NOTICE "%s: 1\n", __FUNCTION__);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#787: FILE: security/bsdjail.c:693:
+	printk(KERN_NOTICE "%s: 2\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#787: FILE: security/bsdjail.c:693:
+	printk(KERN_NOTICE "%s: 2\n", __FUNCTION__);

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#793: FILE: security/bsdjail.c:699:
+	if (ipv6_addr_cmp(jailaddr, sin6_addr)==0) {
 	                                      ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#794: FILE: security/bsdjail.c:700:
+		printk(KERN_NOTICE "%s: allowing 1\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#794: FILE: security/bsdjail.c:700:
+		printk(KERN_NOTICE "%s: allowing 1\n", __FUNCTION__);

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#798: FILE: security/bsdjail.c:704:
+	if (ipv6_addr_cmp(sin6_addr, &in6addr_loopback)==0) {
 	                                               ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#799: FILE: security/bsdjail.c:705:
+		printk(KERN_NOTICE "%s: allowing 2\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#799: FILE: security/bsdjail.c:705:
+		printk(KERN_NOTICE "%s: allowing 2\n", __FUNCTION__);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#804: FILE: security/bsdjail.c:710:
+	printk(KERN_NOTICE "%s: DENYING\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#804: FILE: security/bsdjail.c:710:
+	printk(KERN_NOTICE "%s: DENYING\n", __FUNCTION__);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#805: FILE: security/bsdjail.c:711:
+	printk(KERN_NOTICE "%s: a %04x:%04x:%04x:%04x:%04x:%04x:%04x:%04x "

ERROR:TRAILING_WHITESPACE: trailing whitespace
#806: FILE: security/bsdjail.c:712:
+^I^I"j %04x:%04x:%04x:%04x:%04x:%04x:%04x:%04x\n", $

WARNING:SPLIT_STRING: quoted string split across lines
#806: FILE: security/bsdjail.c:712:
+	printk(KERN_NOTICE "%s: a %04x:%04x:%04x:%04x:%04x:%04x:%04x:%04x "
+		"j %04x:%04x:%04x:%04x:%04x:%04x:%04x:%04x\n", 

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#807: FILE: security/bsdjail.c:713:
+		__FUNCTION__,

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#828: FILE: security/bsdjail.c:734:
+		 * For now we just allow it. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#868: FILE: security/bsdjail.c:774:
+jail_socket_post_create(struct socket *sock, int family, int type,
+	int protocol, int kern)

WARNING:RETURN_VOID: void function return statements are not generally useful
#888: FILE: security/bsdjail.c:794:
+	return;
+}

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#911: FILE: security/bsdjail.c:817:
+		if (ipv6_addr_cmp(&inet6->saddr, &tsec->realaddr.a6)==0)
 		                                                    ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#936: FILE: security/bsdjail.c:842:
+jail_socket_unix_bind(struct socket *sock, struct sockaddr *address,
+	int addrlen)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#975: FILE: security/bsdjail.c:881:
+jail_socket_unix_stream_connect(struct socket *sock,
+	      struct socket *other, struct sock *newsk)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#989: FILE: security/bsdjail.c:895:
+jail_mount(char * dev_name, struct nameidata *nd, char * type,
                                               ^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#989: FILE: security/bsdjail.c:895:
+jail_mount(char * dev_name, struct nameidata *nd, char * type,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#989: FILE: security/bsdjail.c:895:
+jail_mount(char * dev_name, struct nameidata *nd, char * type,

ERROR:CODE_INDENT: code indent should use tabs where possible
#990: FILE: security/bsdjail.c:896:
+                         unsigned long flags, void * data)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#990: FILE: security/bsdjail.c:896:
+jail_mount(char * dev_name, struct nameidata *nd, char * type,
+                         unsigned long flags, void * data)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#990: FILE: security/bsdjail.c:896:
+                         unsigned long flags, void * data)$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#990: FILE: security/bsdjail.c:896:
+                         unsigned long flags, void * data)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1007: FILE: security/bsdjail.c:913:
+/* $

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1014: FILE: security/bsdjail.c:920:
+jail_capable (struct task_struct *tsk, int cap)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1027: FILE: security/bsdjail.c:933:
+	if (cap_is_fs_cap (cap) ? tsk->fsuid == 0 : tsk->euid == 0)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1041: FILE: security/bsdjail.c:947:
+jail_security_task_create (unsigned long clone_flags)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1110: FILE: security/bsdjail.c:1016:
+ * Process in jail may not create devices $

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1127: FILE: security/bsdjail.c:1033:
+static unsigned name_to_int(struct dentry *dentry)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1131: FILE: security/bsdjail.c:1037:
+	unsigned n = 0;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1136: FILE: security/bsdjail.c:1042:
+		unsigned c = *name++ - '0';

WARNING:LINE_SPACING: Missing a blank line after declarations
#1137: FILE: security/bsdjail.c:1043:
+		unsigned c = *name++ - '0';
+		if (c > 9)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1139: FILE: security/bsdjail.c:1045:
+		if (n >= (~0U-9)/10)
 		             ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1139: FILE: security/bsdjail.c:1045:
+		if (n >= (~0U-9)/10)
 		                ^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1161: FILE: security/bsdjail.c:1067:
+				    struct nameidata *nd)
 				                      ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1161: FILE: security/bsdjail.c:1067:
+jail_proc_inode_permission(struct inode *inode, int mask,
+				    struct nameidata *nd)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1165: FILE: security/bsdjail.c:1071:
+	unsigned pid;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1170: FILE: security/bsdjail.c:1076:
+		struct qstr *dname = &dentry->d_name;
+		if (strcmp(dname->name, "scsi")==0 ||

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#1170: FILE: security/bsdjail.c:1076:
+		if (strcmp(dname->name, "scsi")==0 ||
 		                               ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1171: FILE: security/bsdjail.c:1077:
+		if (strcmp(dname->name, "scsi")==0 ||
+			strcmp(dname->name, "sys")==0 ||

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#1171: FILE: security/bsdjail.c:1077:
+			strcmp(dname->name, "sys")==0 ||
 			                          ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#1172: FILE: security/bsdjail.c:1078:
+			strcmp(dname->name, "ide")==0)
 			                          ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1190: FILE: security/bsdjail.c:1096:
+is_jailroot_parent(struct dentry *candidate, struct dentry *root,
+	struct vfsmount *rootmnt)

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#1205: FILE: security/bsdjail.c:1111:
+	if (rootmnt->mnt_root == root && rootmnt->mnt_mountpoint!=root) {
 	                                                        ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1230: FILE: security/bsdjail.c:1136:
+}
+/*

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1249: FILE: security/bsdjail.c:1155:
+ * ^Imay deny permission.$

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1255: FILE: security/bsdjail.c:1161:
+				    struct nameidata *nd)
 				                      ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1255: FILE: security/bsdjail.c:1161:
+jail_inode_permission(struct inode *inode, int mask,
+				    struct nameidata *nd)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1262: FILE: security/bsdjail.c:1168:
+	if (!nd)
 	     ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1266: FILE: security/bsdjail.c:1172:
+	if (nd->dentry &&
+		strcmp(nd->dentry->d_sb->s_type->name, "proc")==0) {

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#1266: FILE: security/bsdjail.c:1172:
+		strcmp(nd->dentry->d_sb->s_type->name, "proc")==0) {
 		                                              ^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1267: FILE: security/bsdjail.c:1173:
+		return jail_proc_inode_permission(inode, mask, nd);
 		                                               ^^

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1269: FILE: security/bsdjail.c:1175:
+
+	}

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#1271: FILE: security/bsdjail.c:1177:
+	if (!(mask&MAY_EXEC))
 	          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1277: FILE: security/bsdjail.c:1183:
+		bsdj_debug(WARN,"Attempt to chdir(..) out of jail!\n"
 		               ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1295: FILE: security/bsdjail.c:1201:
+	unsigned pid = name_to_int(dentry);

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#1301: FILE: security/bsdjail.c:1207:
+	if (strcmp(dentry->d_sb->s_type->name, "proc")!=0)
 	                                              ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#1339: FILE: security/bsdjail.c:1245:
+	if (sig==SIGCHLD)
 	       ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1349: FILE: security/bsdjail.c:1255:
+static int jail_task_setrlimit (unsigned int resource, struct rlimit *new_rlim)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1357: FILE: security/bsdjail.c:1263:
+static int jail_task_setscheduler (struct task_struct *p, int policy,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1358: FILE: security/bsdjail.c:1264:
+static int jail_task_setscheduler (struct task_struct *p, int policy,
+				    struct sched_param *lp)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1391: FILE: security/bsdjail.c:1297:
+jail_shm_alloc_security (struct shmid_kernel *shp)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1403: FILE: security/bsdjail.c:1309:
+jail_shm_free_security (struct shmid_kernel *shp)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1409: FILE: security/bsdjail.c:1315:
+jail_shm_associate (struct shmid_kernel *shp, int shmflg)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1469: FILE: security/bsdjail.c:1375:
+jail_msg_queue_msgrcv(struct msg_queue *msq, struct msg_msg *msg,
+		struct task_struct *target, long type, int mode)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1508: FILE: security/bsdjail.c:1414:
+jail_sem_semop(struct sem_array *sma, struct sembuf *sops, unsigned nsops,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1509: FILE: security/bsdjail.c:1415:
+jail_sem_semop(struct sem_array *sma, struct sembuf *sops, unsigned nsops,
+	int alter)

ERROR:CODE_INDENT: code indent should use tabs where possible
#1540: FILE: security/bsdjail.c:1446:
+        .unix_stream_connect =^I^Ijail_socket_unix_stream_connect,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1540: FILE: security/bsdjail.c:1446:
+        .unix_stream_connect =^I^Ijail_socket_unix_stream_connect,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1553: FILE: security/bsdjail.c:1459:
+^I.shm_alloc_security = ^I^Ijail_shm_alloc_security,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1554: FILE: security/bsdjail.c:1460:
+^I.shm_free_security = ^I^Ijail_shm_free_security,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1566: FILE: security/bsdjail.c:1472:
+^I.sem_alloc_security = ^I^Ijail_sem_alloc_security,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1567: FILE: security/bsdjail.c:1473:
+^I.sem_free_security =  ^I^Ijail_sem_free_security,$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1573: FILE: security/bsdjail.c:1479:
+static int __init bsdjail_init (void)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1577: FILE: security/bsdjail.c:1483:
+	if (register_security (&bsdjail_security_ops)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '&bsdjail_security_ops'
#1577: FILE: security/bsdjail.c:1483:
+	if (register_security (&bsdjail_security_ops)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1578: FILE: security/bsdjail.c:1484:
+^I^Iprintk (KERN_INFO $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1578: FILE: security/bsdjail.c:1484:
+		printk (KERN_INFO 

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1578: FILE: security/bsdjail.c:1484:
+		printk (KERN_INFO 

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1583: FILE: security/bsdjail.c:1489:
+			printk (KERN_INFO "Failure registering BSD Jail "

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1583: FILE: security/bsdjail.c:1489:
+			printk (KERN_INFO "Failure registering BSD Jail "

WARNING:SPLIT_STRING: quoted string split across lines
#1584: FILE: security/bsdjail.c:1490:
+			printk (KERN_INFO "Failure registering BSD Jail "
+				" module with primary security module.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1589: FILE: security/bsdjail.c:1495:
+	printk (KERN_INFO "BSD Jail module initialized.\n");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1589: FILE: security/bsdjail.c:1495:
+	printk (KERN_INFO "BSD Jail module initialized.\n");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1594: FILE: security/bsdjail.c:1500:
+static void __exit bsdjail_exit (void)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1597: FILE: security/bsdjail.c:1503:
+		if (mod_unreg_security (MY_NAME, &bsdjail_security_ops))

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1598: FILE: security/bsdjail.c:1504:
+			printk (KERN_INFO "Failure unregistering BSD Jail "

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1598: FILE: security/bsdjail.c:1504:
+			printk (KERN_INFO "Failure unregistering BSD Jail "

WARNING:SPLIT_STRING: quoted string split across lines
#1599: FILE: security/bsdjail.c:1505:
+			printk (KERN_INFO "Failure unregistering BSD Jail "
+				" module with primary module.\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1600: FILE: security/bsdjail.c:1506:
+^I} else { $

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1601: FILE: security/bsdjail.c:1507:
+		if (unregister_security (&bsdjail_security_ops)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '&bsdjail_security_ops'
#1601: FILE: security/bsdjail.c:1507:
+		if (unregister_security (&bsdjail_security_ops)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1602: FILE: security/bsdjail.c:1508:
+			printk (KERN_INFO "Failure unregistering BSD Jail "

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1602: FILE: security/bsdjail.c:1508:
+			printk (KERN_INFO "Failure unregistering BSD Jail "

WARNING:SPLIT_STRING: quoted string split across lines
#1603: FILE: security/bsdjail.c:1509:
+			printk (KERN_INFO "Failure unregistering BSD Jail "
+				"module with the kernel\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1607: FILE: security/bsdjail.c:1513:
+	printk (KERN_INFO "BSD Jail module removed\n");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1607: FILE: security/bsdjail.c:1513:
+	printk (KERN_INFO "BSD Jail module removed\n");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1610: FILE: security/bsdjail.c:1516:
+security_initcall (bsdjail_init);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1611: FILE: security/bsdjail.c:1517:
+module_exit (bsdjail_exit);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000250614.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 82 errors, 107 warnings, 74 checks, 1540 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000250614.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
