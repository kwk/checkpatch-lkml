WARNING:TYPO_SPELLING: 'seperate' may be misspelled - perhaps 'separate'?
#27: 
ktimers seperate the "timer API" from the "timeout API". 
        ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'seperate' may be misspelled - perhaps 'separate'?
#56: 
CLOCK_REALTIME and CLOCK_MONOTONIC. They provide seperate timer queues 
                                                 ^^^^^^^^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#97: FILE: fs/exec.c:656:
+				     KTIMER_RESTART|KTIMER_NOCHECK);
 				                   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#137: FILE: fs/proc/array.c:432:
+		(clock_t) nsec_to_clock_t(it_real_value),

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#146: FILE: include/linux/ktimer.h:1:
+#ifndef _LINUX_KTIMER_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#166: FILE: include/linux/ktimer.h:21:
+^Insec_t^I^I ^Iexpired;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#167: FILE: include/linux/ktimer.h:22:
+^Insec_t^I^I ^Iinterval;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#168: FILE: include/linux/ktimer.h:23:
+^Iint ^I ^I ^Ioverrun;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#170: FILE: include/linux/ktimer.h:25:
+^Ivoid ^I^I^I(*function)(void *);$

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#170: FILE: include/linux/ktimer.h:25:
+	void 			(*function)(void *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#172: FILE: include/linux/ktimer.h:27:
+^Istruct ktimer_base ^I*base;$

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#181: FILE: include/linux/ktimer.h:36:
+	spinlock_t		lock;

ERROR:OPEN_BRACE: open brace '{' following enum go on the same line
#195: FILE: include/linux/ktimer.h:50:
+enum
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:TYPO_SPELLING: 'relativ' may be misspelled - perhaps 'relative'?
#198: FILE: include/linux/ktimer.h:53:
+	KTIMER_REL,	/* Time value is relativ to now */
 	           	                 ^^^^^^^

WARNING:TYPO_SPELLING: 'relativ' may be misspelled - perhaps 'relative'?
#199: FILE: include/linux/ktimer.h:54:
+	KTIMER_INCR,	/* Time value is relativ to previous expiry time */
 	            	                 ^^^^^^^

CHECK:SPACING: No space is necessary after a cast
#209: FILE: include/linux/ktimer.h:64:
+#define KTIMER_POISON		((void *) 0x00100101)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#210: FILE: include/linux/ktimer.h:65:
+#define KTIMERS_MAX_NSEC	(~(1LL<<63))
                         	      ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 't1' may be better as '(t1)' to avoid precedence issues
#212: FILE: include/linux/ktimer.h:67:
+#define ktimer_before(t1, t2) (t1->expires < t2->expires)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 't2' may be better as '(t2)' to avoid precedence issues
#212: FILE: include/linux/ktimer.h:67:
+#define ktimer_before(t1, t2) (t1->expires < t2->expires)

ERROR:OPEN_BRACE: open brace '{' following enum go on the same line
#216: FILE: include/linux/ktimer.h:71:
+enum
+{

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#224: FILE: include/linux/ktimer.h:79:
+extern void fastcall init_ktimer_real(struct ktimer *timer);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#225: FILE: include/linux/ktimer.h:80:
+extern void fastcall init_ktimer_mono(struct ktimer *timer);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#226: FILE: include/linux/ktimer.h:81:
+extern int modify_ktimer(struct ktimer *timer, nsec_t *tim, int mode);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#227: FILE: include/linux/ktimer.h:82:
+extern int start_ktimer(struct ktimer *timer, nsec_t *tim, int mode);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#228: FILE: include/linux/ktimer.h:83:
+extern int try_to_stop_ktimer(struct ktimer *timer);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#229: FILE: include/linux/ktimer.h:84:
+extern int stop_ktimer(struct ktimer *timer);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#230: FILE: include/linux/ktimer.h:85:
+extern nsec_t get_remtime_ktimer(struct ktimer *timer, long fake);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#231: FILE: include/linux/ktimer.h:86:
+extern nsec_t get_expiry_ktimer(struct ktimer *timer, nsec_t *now);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#232: FILE: include/linux/ktimer.h:87:
+extern void __init init_ktimers(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#235: FILE: include/linux/ktimer.h:90:
+extern nsec_t ktimer_convert_timeval(struct ktimer *timer, struct timeval *tv);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#236: FILE: include/linux/ktimer.h:91:
+extern nsec_t ktimer_convert_timespec(struct ktimer *timer, struct timespec *ts);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#239: FILE: include/linux/ktimer.h:94:
+extern int get_ktimer_mono_res(clockid_t which_clock, struct timespec *tp);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#240: FILE: include/linux/ktimer.h:95:
+extern int get_ktimer_real_res(clockid_t which_clock, struct timespec *tp);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#247: FILE: include/linux/ktimer.h:102:
+extern void wait_for_ktimer(struct ktimer *timer);

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#252: FILE: include/linux/ktimer.h:107:
+#define KTIME_REALTIME_RES (NSEC_PER_SEC/HZ)
                                         ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#253: FILE: include/linux/ktimer.h:108:
+#define KTIME_MONOTONIC_RES (NSEC_PER_SEC/HZ)
                                          ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#259: FILE: include/linux/ktimer.h:114:
+	struct timespec tomono;
+	do {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#272: FILE: include/linux/ktimer.h:127:
+	struct timespec tm;
+	get_ktime_mono_ts(&tm);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#286: FILE: include/linux/ktimer.h:141:
+extern void run_ktimer_queues(void);

WARNING:SPACING: Unnecessary space before function pointer arguments
#323: FILE: include/linux/posix-timers.h:75:
+	int (*nsleep) (clockid_t which_clock, int flags, struct timespec *, struct timespec *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct timespec *' should also have an identifier name
#323: FILE: include/linux/posix-timers.h:75:
+	int (*nsleep) (clockid_t which_clock, int flags, struct timespec *, struct timespec *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct timespec *' should also have an identifier name
#323: FILE: include/linux/posix-timers.h:75:
+	int (*nsleep) (clockid_t which_clock, int flags, struct timespec *, struct timespec *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'clockid_t' should also have an identifier name
#332: FILE: include/linux/posix-timers.h:89:
+int do_posix_clock_nonanosleep(clockid_t, int flags, struct timespec *, struct timespec __user *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct timespec *' should also have an identifier name
#332: FILE: include/linux/posix-timers.h:89:
+int do_posix_clock_nonanosleep(clockid_t, int flags, struct timespec *, struct timespec __user *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct timespec __user *' should also have an identifier name
#332: FILE: include/linux/posix-timers.h:89:
+int do_posix_clock_nonanosleep(clockid_t, int flags, struct timespec *, struct timespec __user *);

CHECK:SPACING: No space is necessary after a cast
#352: FILE: include/linux/posix-timers.h:106:
+			do_div(delta, (unsigned long) t->it.real.incr);

ERROR:SPACING: space required before the open parenthesis '('
#359: FILE: include/linux/posix-timers.h:113:
+			while(t1 >> 32) {

CHECK:SPACING: No space is necessary after a cast
#364: FILE: include/linux/posix-timers.h:118:
+			do_div(t2, (unsigned long) t1);

CHECK:SPACING: No space is necessary after a cast
#371: FILE: include/linux/posix-timers.h:125:
+	t->it_overrun += (long) orun;

WARNING:FUNCTION_ARGUMENTS: function definition argument 'clockid_t' should also have an identifier name
#414: FILE: include/linux/posix-timers.h:152:
+int posix_cpu_nsleep(clockid_t, int, struct timespec *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#414: FILE: include/linux/posix-timers.h:152:
+int posix_cpu_nsleep(clockid_t, int, struct timespec *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct timespec *' should also have an identifier name
#414: FILE: include/linux/posix-timers.h:152:
+int posix_cpu_nsleep(clockid_t, int, struct timespec *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct timespec __user *' should also have an identifier name
#414: FILE: include/linux/posix-timers.h:152:
+int posix_cpu_nsleep(clockid_t, int, struct timespec *,

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ts' - possible side-effects?
#457: FILE: include/linux/time.h:49:
+#define timespec_valid(ts) \
+(((ts)->tv_sec >= 0) && (((unsigned) (ts)->tv_nsec) < NSEC_PER_SEC))

CHECK:SPACING: No space is necessary after a cast
#458: FILE: include/linux/time.h:50:
+(((ts)->tv_sec >= 0) && (((unsigned) (ts)->tv_nsec) < NSEC_PER_SEC))

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#458: FILE: include/linux/time.h:50:
+(((ts)->tv_sec >= 0) && (((unsigned) (ts)->tv_nsec) < NSEC_PER_SEC))

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#471: FILE: include/linux/time.h:104:
+extern void do_posix_clock_monotonic_gettime(struct timespec *ts);

CHECK:BRACES: braces {} should be used on all arms of this statement
#481: FILE: include/linux/time.h:131:
+	if (unlikely(ns < 0)) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#484: FILE: include/linux/time.h:134:
+	} else

WARNING:INLINE: plain inline is preferred over __inline__
#488: FILE: include/linux/time.h:138:
+static __inline__ nsec_t timespec_to_ns(struct timespec *s)

CHECK:SPACING: No space is necessary after a cast
#490: FILE: include/linux/time.h:140:
+	nsec_t res = (nsec_t) s->tv_sec * NSEC_PER_SEC;

CHECK:SPACING: No space is necessary after a cast
#491: FILE: include/linux/time.h:141:
+	return res + (nsec_t) s->tv_nsec;

WARNING:LINE_SPACING: Missing a blank line after declarations
#491: FILE: include/linux/time.h:141:
+	nsec_t res = (nsec_t) s->tv_sec * NSEC_PER_SEC;
+	return res + (nsec_t) s->tv_nsec;

WARNING:INLINE: plain inline is preferred over __inline__
#494: FILE: include/linux/time.h:144:
+static __inline__ struct timespec ns_to_timespec(nsec_t n)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#501: FILE: include/linux/time.h:151:
+		ts.tv_sec = ts.tv_nsec = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:INLINE: plain inline is preferred over __inline__
#505: FILE: include/linux/time.h:155:
+static __inline__ nsec_t timeval_to_ns(struct timeval *s)

CHECK:SPACING: No space is necessary after a cast
#507: FILE: include/linux/time.h:157:
+	nsec_t res = (nsec_t) s->tv_sec * NSEC_PER_SEC;

CHECK:SPACING: No space is necessary after a cast
#508: FILE: include/linux/time.h:158:
+	return res + (nsec_t) s->tv_usec * NSEC_PER_USEC;

WARNING:LINE_SPACING: Missing a blank line after declarations
#508: FILE: include/linux/time.h:158:
+	nsec_t res = (nsec_t) s->tv_sec * NSEC_PER_SEC;
+	return res + (nsec_t) s->tv_usec * NSEC_PER_USEC;

WARNING:INLINE: plain inline is preferred over __inline__
#511: FILE: include/linux/time.h:161:
+static __inline__ struct timeval ns_to_timeval(nsec_t n)

WARNING:LINE_SPACING: Missing a blank line after declarations
#514: FILE: include/linux/time.h:164:
+	struct timeval tv;
+	if (n) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#514: FILE: include/linux/time.h:164:
+	if (n) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#517: FILE: include/linux/time.h:167:
+	} else

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#518: FILE: include/linux/time.h:168:
+		tv.tv_sec = tv.tv_usec = 0;

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#532: FILE: include/linux/time.h:205:
+#define CLOCK_MONOTONIC^I  ^I 1$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#562: FILE: include/linux/timer.h:90:
+extern void it_real_fn(void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#562: FILE: include/linux/timer.h:90:
+extern void it_real_fn(void *);

ERROR:CODE_INDENT: code indent should use tabs where possible
#600: FILE: kernel/exit.c:833:
+ ^I^Istop_ktimer(&tsk->signal->real_timer);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#600: FILE: kernel/exit.c:833:
+ ^I^Istop_ktimer(&tsk->signal->real_timer);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#600: FILE: kernel/exit.c:833:
+ ^I^Istop_ktimer(&tsk->signal->real_timer);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#706: FILE: kernel/itimer.c:114:
+ ^Insec_t expires;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#706: FILE: kernel/itimer.c:114:
+ ^Insec_t expires;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#706: FILE: kernel/itimer.c:114:
+ ^Insec_t expires;$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#749: FILE: kernel/ktimers.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#750: FILE: kernel/ktimers.c:2:
+ *  linux/kernel/ktimers.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#785: FILE: kernel/ktimers.c:37:
+#include <asm/uaccess.h>

ERROR:SPACING: space required after that ',' (ctx:VxV)
#792: FILE: kernel/ktimers.c:44:
+#define set_running_timer(b,t) b->running_timer = t
                            ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#792: FILE: kernel/ktimers.c:44:
+#define set_running_timer(b,t) b->running_timer = t

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'b' may be better as '(b)' to avoid precedence issues
#792: FILE: kernel/ktimers.c:44:
+#define set_running_timer(b,t) b->running_timer = t

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'b' may be better as '(b)' to avoid precedence issues
#793: FILE: kernel/ktimers.c:45:
+#define wake_up_timer_waiters(b) wake_up(&b->wait_for_running_timer)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#820: FILE: kernel/ktimers.c:72:
+static inline struct ktimer_base *lock_ktimer_base(struct ktimer *timer,
+					    unsigned long *flags)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "base"
#826: FILE: kernel/ktimers.c:78:
+		if (likely(base != NULL)) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#850: FILE: kernel/ktimers.c:102:
+			return NULL;
+		} else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#869: FILE: kernel/ktimers.c:121:
+	struct ktimer_base *base;
+	while (!(base = timer->base));

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#869: FILE: kernel/ktimers.c:121:
+	while (!(base = timer->base));

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#874: FILE: kernel/ktimers.c:126:
+#define set_running_timer(b,t) do {} while (0)
                            ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#878: FILE: kernel/ktimers.c:130:
+static inline struct ktimer_base *lock_ktimer_base(struct ktimer *timer,
+					    unsigned long *flags)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#889: FILE: kernel/ktimers.c:141:
+#define get_ktimer_base_unlocked(t) (t)->base

CHECK:SPACING: No space is necessary after a cast
#907: FILE: kernel/ktimers.c:159:
+	t = (nsec_t) ts->tv_sec * NSEC_PER_SEC;

ERROR:CODE_INDENT: code indent should use tabs where possible
#908: FILE: kernel/ktimers.c:160:
+ ^It += (nsec_t) ts->tv_nsec;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#908: FILE: kernel/ktimers.c:160:
+ ^It += (nsec_t) ts->tv_nsec;$

CHECK:SPACING: No space is necessary after a cast
#908: FILE: kernel/ktimers.c:160:
+ 	t += (nsec_t) ts->tv_nsec;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#908: FILE: kernel/ktimers.c:160:
+ ^It += (nsec_t) ts->tv_nsec;$

CHECK:SPACING: No space is necessary after a cast
#912: FILE: kernel/ktimers.c:164:
+		t += (nsec_t) (base->resolution - rem);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#937: FILE: kernel/ktimers.c:189:
+static int enqueue_ktimer(struct ktimer *timer, struct ktimer_base *base,
+			   nsec_t *tim, int mode)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#974: FILE: kernel/ktimers.c:226:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:BRACES: braces {} should be used on all arms of this statement
#993: FILE: kernel/ktimers.c:245:
+		if (ktimer_before(timer, entry))
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#995: FILE: kernel/ktimers.c:247:
+		else {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1024: FILE: kernel/ktimers.c:276:
+	BUG_ON(base->count < 0);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1049: FILE: kernel/ktimers.c:301:
+  ^Iunsigned long flags;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1049: FILE: kernel/ktimers.c:301:
+  ^Iunsigned long flags;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1049: FILE: kernel/ktimers.c:301:
+  ^Iunsigned long flags;$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1052: FILE: kernel/ktimers.c:304:
+	BUG_ON(!timer->function);

ERROR:SPACING: space required before the open brace '{'
#1064: FILE: kernel/ktimers.c:316:
+	if (ktimer_base_can_change && unlikely(!new_base)){

ERROR:CODE_INDENT: code indent should use tabs where possible
#1089: FILE: kernel/ktimers.c:341:
+  ^IBUG_ON(!tim || !timer->function);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1089: FILE: kernel/ktimers.c:341:
+  ^IBUG_ON(!tim || !timer->function);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1089: FILE: kernel/ktimers.c:341:
+  ^IBUG_ON(!tim || !timer->function);$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1089: FILE: kernel/ktimers.c:341:
+  	BUG_ON(!tim || !timer->function);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1101: FILE: kernel/ktimers.c:353:
+  ^IBUG_ON(ktimer_active(timer) || !timer->function);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1101: FILE: kernel/ktimers.c:353:
+  ^IBUG_ON(ktimer_active(timer) || !timer->function);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1101: FILE: kernel/ktimers.c:353:
+  ^IBUG_ON(ktimer_active(timer) || !timer->function);$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1101: FILE: kernel/ktimers.c:353:
+  	BUG_ON(ktimer_active(timer) || !timer->function);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1127: FILE: kernel/ktimers.c:379:
+
+}

WARNING:LINE_SPACING: Missing a blank line after declarations
#1138: FILE: kernel/ktimers.c:390:
+		int ret = try_to_stop_ktimer(timer);
+		if (ret >= 0)

CHECK:SPACING: No space is necessary after a cast
#1160: FILE: kernel/ktimers.c:412:
+			rem = (nsec_t) fake;

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1210: FILE: kernel/ktimers.c:462:
+	[0 ... NR_CPUS-1] = {
 	              ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1252: FILE: kernel/ktimers.c:504:
+	[0 ... NR_CPUS-1] = {
 	              ^

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#1291: FILE: kernel/ktimers.c:543:
+		void (*fn)(void *);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1303: FILE: kernel/ktimers.c:555:
+ ^I^Ifn(data);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1303: FILE: kernel/ktimers.c:555:
+ ^I^Ifn(data);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1303: FILE: kernel/ktimers.c:555:
+ ^I^Ifn(data);$

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1329: FILE: kernel/ktimers.c:581:
+static void __devinit init_ktimers_cpu(int cpu)

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1359: FILE: kernel/ktimers.c:611:
+static void __devinit migrate_ktimers(int cpu)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1365: FILE: kernel/ktimers.c:617:
+	BUG_ON(cpu_online(cpu));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1379: FILE: kernel/ktimers.c:631:
+			BUG();

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1391: FILE: kernel/ktimers.c:643:
+static int __devinit ktimer_cpu_notify(struct notifier_block *self,

WARNING:LINE_SPACING: Missing a blank line after declarations
#1395: FILE: kernel/ktimers.c:647:
+	long cpu = (long)hcpu;
+	switch(action) {

ERROR:SPACING: space required before the open parenthesis '('
#1395: FILE: kernel/ktimers.c:647:
+	switch(action) {

WARNING:HOTPLUG_SECTION: Using __devinitdata is unnecessary
#1410: FILE: kernel/ktimers.c:662:
+static struct notifier_block __devinitdata ktimers_nb = {

WARNING:MISPLACED_INIT: __devinitdata should be placed after ktimers_nb
#1410: FILE: kernel/ktimers.c:662:
+static struct notifier_block __devinitdata ktimers_nb = {

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1421: FILE: kernel/ktimers.c:673:
+			printk("Registered KTimer base %s\n", base->name);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1434: FILE: kernel/ktimers.c:686:
+	ktimer_cpu_notify(&ktimers_nb, (unsigned long)CPU_UP_PREPARE,
+				(void *)(long)smp_processor_id());

CHECK:SPACING: No space is necessary after a cast
#1495: FILE: kernel/ktimers.c:747:
+	struct timespec __user *rmtp = (struct timespec __user *) restart->arg2;

CHECK:SPACING: No space is necessary after a cast
#1499: FILE: kernel/ktimers.c:751:
+	t = (nsec_t) restart->arg0;

CHECK:SPACING: No space is necessary after a cast
#1500: FILE: kernel/ktimers.c:752:
+	t += ((nsec_t) restart->arg1) << 32;

CHECK:SPACING: No space is necessary after a cast
#1557: FILE: kernel/ktimers.c:809:
+	restart->arg2 = (unsigned long) rmtp;

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1560: FILE: kernel/ktimers.c:812:
+
+}

CHECK:SPACING: No space is necessary after a cast
#1627: FILE: kernel/posix-cpu-timers.c:1475:
+		restart_block->arg1 = (unsigned long) rmtp;

CHECK:SPACING: No space is necessary after a cast
#1640: FILE: kernel/posix-cpu-timers.c:1492:
+	rmtp = (struct timespec __user *) restart_block->arg1;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1928: FILE: kernel/posix-timers.c:289:
+	timr->it.real.overrun = timr->it.real.timer.overrun = -1;

WARNING:TYPO_SPELLING: 'Thats' may be misspelled - perhaps 'That's'?
#2080: FILE: kernel/posix-timers.c:664:
+	 * automatically by the ktimer REARM mode. Thats the next
 	                                           ^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2501: FILE: kernel/posix-timers.c:1005:
+		/* Posix madness. Only absolute timers on clock realtime
+		   are affected by clock set. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2501: FILE: kernel/posix-timers.c:1005:
+		   are affected by clock set. */

ERROR:CODE_INDENT: code indent should use tabs where possible
#2736: FILE: kernel/timer.c:915:
+ ^Irun_ktimer_queues();$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2736: FILE: kernel/timer.c:915:
+ ^Irun_ktimer_queues();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2736: FILE: kernel/timer.c:915:
+ ^Irun_ktimer_queues();$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2819: FILE: include/asm-generic/div64.h:39:
+#define div_long_long_rem(a,b,c) div_ll_X_l_rem(a,b,c)
                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2819: FILE: include/asm-generic/div64.h:39:
+#define div_long_long_rem(a,b,c) div_ll_X_l_rem(a,b,c)
                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2819: FILE: include/asm-generic/div64.h:39:
+#define div_long_long_rem(a,b,c) div_ll_X_l_rem(a,b,c)
                                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2819: FILE: include/asm-generic/div64.h:39:
+#define div_long_long_rem(a,b,c) div_ll_X_l_rem(a,b,c)
                                                    ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2824: FILE: include/asm-generic/div64.h:44:
+					   unsigned long * rem)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000149936.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 23 errors, 73 warnings, 65 checks, 2627 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000149936.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
