WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#40: 
>> >> +module_param_named(protect_method, libata_protect_method, int, 0444);

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#94: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:TYPO_SPELLING: 'poiters' may be misspelled - perhaps 'pointers'?
#159: FILE: Documentation/block/disk-protection.txt:61:
+of poiters at different projects aiming at an implementation of shock
    ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:SPACING: No space is necessary after a cast
#267: FILE: block/ll_rw_blk.c:3970:
+	request_queue_t *q = (request_queue_t *) data;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#283: FILE: block/ll_rw_blk.c:3986:
+	request_queue_t *q = (request_queue_t *) data;

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#299: FILE: block/ll_rw_blk.c:4002:
+	mod_timer(&q->unfreeze_timer, msecs_to_jiffies(seconds*1000) + jiffies);
 	                                                      ^

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#335: FILE: block/ll_rw_blk.c:4038:
+	if (freeze>0) {
 	          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#364: FILE: block/ll_rw_blk.c:4067:
+		len += sprintf(page+len, "\n");
 		                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#366: FILE: block/ll_rw_blk.c:4069:
+		len += sprintf(page+len, " ");
 		                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#378: FILE: block/ll_rw_blk.c:4081:
+	len += queue_str_show(page+len, "auto", (unload & 2) >> 1);
 	                          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#379: FILE: block/ll_rw_blk.c:4082:
+	len += queue_str_show(page+len, "unload", unload & 1);
 	                          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#380: FILE: block/ll_rw_blk.c:4083:
+	len += queue_str_show(page+len, "standby", !unload ? 3 : 2);
 	                          ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#388: FILE: block/ll_rw_blk.c:4091:
+static ssize_t queue_protect_method_store(struct request_queue *q,
+				   const char *page, size_t count)

CHECK:BRACES: braces {} should be used on all arms of this statement
#391: FILE: block/ll_rw_blk.c:4094:
+	if (!strcmp(page, "auto") || !strcmp(page, "auto\n"))
[...]
+	else if (!strcmp(page, "unload") || !strcmp(page, "unload\n"))
[...]
+	else if (!strcmp(page, "standby") || !strcmp(page, "standby\n"))
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#397: FILE: block/ll_rw_blk.c:4100:
+	else {

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#406: FILE: block/ll_rw_blk.c:4109:
+	.attr = { .name = "protect", .mode = S_IRUGO | S_IWUSR },

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#410: FILE: block/ll_rw_blk.c:4113:
+};
+static struct queue_sysfs_entry queue_protect_method_entry = {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#411: FILE: block/ll_rw_blk.c:4114:
+	.attr = { .name = "protect_method", .mode = S_IRUGO | S_IWUSR },

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#427: FILE: block/ll_rw_blk.c:4130:
+		printk(KERN_ERR

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'blk_protect_register', this function's name, in a string
#428: FILE: block/ll_rw_blk.c:4131:
+		       "blk_protect_register(): failed to create protect queue attribute!\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#435: FILE: block/ll_rw_blk.c:4138:
+		printk(KERN_ERR

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'blk_protect_register', this function's name, in a string
#436: FILE: block/ll_rw_blk.c:4139:
+		       "blk_protect_register(): failed to create protect_method attribute!\n");

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#465: FILE: drivers/ata/libata-scsi.c:845:
+extern int scsi_unprotect_queue(request_queue_t *q);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:SPACING: No space is necessary after a cast
#470: FILE: drivers/ata/libata-scsi.c:850:
+	struct ata_port *ap = (struct ata_port *) &sdev->host->hostdata[0];

ERROR:TRAILING_WHITESPACE: trailing whitespace
#498: FILE: drivers/ata/libata-scsi.c:894:
+^Iblk_queue_issue_protect_fn(sdev->request_queue, ata_scsi_issue_protect_fn);^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#499: FILE: drivers/ata/libata-scsi.c:895:
+^Iblk_queue_issue_unprotect_fn(sdev->request_queue, ata_scsi_issue_unprotect_fn);^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#512: FILE: drivers/ide/ide-disk.c:735:
+ *  - we freeze the queue regardless of success and rely on the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#514: FILE: drivers/ide/ide-disk.c:737:
+ *    failed (to be consistent with the libata handler)... should $

WARNING:TYPO_SPELLING: 'accquired' may be misspelled - perhaps 'acquired'?
#522: FILE: drivers/ide/ide-disk.c:745:
+	/* spin lock already accquired */
 	                     ^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#542: FILE: drivers/ide/ide-disk.c:765:
+^I$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#548: FILE: drivers/ide/ide-disk.c:771:
+	/* The unload feature of the IDLE_IMMEDIATE command
+	   temporarily disables HD power management from spinning down

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:TYPO_SPELLING: 'reenable' may be misspelled - perhaps 're-enable'?
#549: FILE: drivers/ide/ide-disk.c:772:
+	   the disk. Any other command will reenable HD pm, so, if
 	                                    ^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#552: FILE: drivers/ide/ide-disk.c:775:
+	   just fine. */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#554: FILE: drivers/ide/ide-disk.c:777:
+		printk(KERN_DEBUG "ide_unprotect_queue(): No pending I/O, re-enabling power management..\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ide_unprotect_queue', this function's name, in a string
#554: FILE: drivers/ide/ide-disk.c:777:
+		printk(KERN_DEBUG "ide_unprotect_queue(): No pending I/O, re-enabling power management..\n");

CHECK:BRACES: braces {} should be used on all arms of this statement
#580: FILE: drivers/ide/ide-disk.c:803:
+	if (unload) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#586: FILE: drivers/ide/ide-disk.c:809:
+	} else

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#600: FILE: drivers/ide/ide-disk.c:823:
+	if (ret)
+	{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#602: FILE: drivers/ide/ide-disk.c:825:
+		printk(KERN_DEBUG "ide_protect_queue(): Warning: head NOT parked!..\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ide_protect_queue', this function's name, in a string
#602: FILE: drivers/ide/ide-disk.c:825:
+		printk(KERN_DEBUG "ide_protect_queue(): Warning: head NOT parked!..\n");

CHECK:BRACES: braces {} should be used on all arms of this statement
#607: FILE: drivers/ide/ide-disk.c:830:
+	if (unload) {
[...]
+	} else
[...]

CHECK:BRACES: braces {} should be used on all arms of this statement
#608: FILE: drivers/ide/ide-disk.c:831:
+		if (args[3] == 0xc4)
[...]
+		else {
[...]

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#609: FILE: drivers/ide/ide-disk.c:832:
+			printk(KERN_DEBUG "ide_protect_queue(): head parked..\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ide_protect_queue', this function's name, in a string
#609: FILE: drivers/ide/ide-disk.c:832:
+			printk(KERN_DEBUG "ide_protect_queue(): head parked..\n");

CHECK:BRACES: Unbalanced braces around else statement
#610: FILE: drivers/ide/ide-disk.c:833:
+		else {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#612: FILE: drivers/ide/ide-disk.c:835:
+			printk(KERN_DEBUG "ide_protect_queue(): head NOT parked!..\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ide_protect_queue', this function's name, in a string
#612: FILE: drivers/ide/ide-disk.c:835:
+			printk(KERN_DEBUG "ide_protect_queue(): head NOT parked!..\n");

CHECK:BRACES: Unbalanced braces around else statement
#616: FILE: drivers/ide/ide-disk.c:839:
+	} else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#617: FILE: drivers/ide/ide-disk.c:840:
+		printk(KERN_DEBUG "ide_protect_queue(): head park not requested, used standby!..\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ide_protect_queue', this function's name, in a string
#617: FILE: drivers/ide/ide-disk.c:840:
+		printk(KERN_DEBUG "ide_protect_queue(): head park not requested, used standby!..\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#620: FILE: drivers/ide/ide-disk.c:843:
+}^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#672: FILE: drivers/ide/ide-io.c:1265:
+^I^I * are resuming from suspend). Prevents existing queue entries $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#673: FILE: drivers/ide/ide-io.c:1266:
+^I^I * being processed after queue is stopped by the hard disk $

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#676: FILE: drivers/ide/ide-io.c:1269:
+		if (test_bit(QUEUE_FLAG_STOPPED, &drive->queue->queue_flags) && !blk_pm_resume_request(rq)) {

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#765: FILE: drivers/scsi/scsi_lib.c:2324:
+		printk(KERN_DEBUG "scsi_unprotect_queue(): No pending I/O, re-enabling power management..\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'scsi_unprotect_queue', this function's name, in a string
#765: FILE: drivers/scsi/scsi_lib.c:2324:
+		printk(KERN_DEBUG "scsi_unprotect_queue(): No pending I/O, re-enabling power management..\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#774: FILE: drivers/scsi/scsi_lib.c:2333:
+   ^I^I   from scsi_ioctl_send_command() for default case... */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#774: FILE: drivers/scsi/scsi_lib.c:2333:
+   ^I^I   from scsi_ioctl_send_command() for default case... */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#774: FILE: drivers/scsi/scsi_lib.c:2333:
+		/* Good values for timeout and retries?  Values below
+   		   from scsi_ioctl_send_command() for default case... */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#774: FILE: drivers/scsi/scsi_lib.c:2333:
+   		   from scsi_ioctl_send_command() for default case... */

ERROR:CODE_INDENT: code indent should use tabs where possible
#776: FILE: drivers/scsi/scsi_lib.c:2335:
+^I^I   ^I^I     (10*HZ), 5))$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#776: FILE: drivers/scsi/scsi_lib.c:2335:
+^I^I   ^I^I     (10*HZ), 5))$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#776: FILE: drivers/scsi/scsi_lib.c:2335:
+		if (scsi_execute_req(sdev, scsi_cmd, DMA_NONE, NULL, 0, &sshdr,
+		   		     (10*HZ), 5))

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#776: FILE: drivers/scsi/scsi_lib.c:2335:
+		   		     (10*HZ), 5))
 		   		        ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#805: FILE: drivers/scsi/scsi_lib.c:2364:
+	if (unload) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#811: FILE: drivers/scsi/scsi_lib.c:2370:
+	} else

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#829: FILE: drivers/scsi/scsi_lib.c:2388:
+			   DMA_NONE, NULL, 0, 0, (10*HZ), 5,
 			                            ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#834: FILE: drivers/scsi/scsi_lib.c:2393:
+		printk(KERN_DEBUG "scsi_protect_queue(): head NOT parked!..\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'scsi_protect_queue', this function's name, in a string
#834: FILE: drivers/scsi/scsi_lib.c:2393:
+		printk(KERN_DEBUG "scsi_protect_queue(): head NOT parked!..\n");

CHECK:BRACES: braces {} should be used on all arms of this statement
#850: FILE: drivers/scsi/scsi_lib.c:2409:
+	if (unload) {
[...]
+	} else
[...]

CHECK:BRACES: braces {} should be used on all arms of this statement
#851: FILE: drivers/scsi/scsi_lib.c:2410:
+		if (args[3] == 0xc4)
[...]
+		else {
[...]

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#852: FILE: drivers/scsi/scsi_lib.c:2411:
+			printk(KERN_DEBUG "scsi_protect_queue(): head parked..\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'scsi_protect_queue', this function's name, in a string
#852: FILE: drivers/scsi/scsi_lib.c:2411:
+			printk(KERN_DEBUG "scsi_protect_queue(): head parked..\n");

CHECK:BRACES: Unbalanced braces around else statement
#853: FILE: drivers/scsi/scsi_lib.c:2412:
+		else {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#855: FILE: drivers/scsi/scsi_lib.c:2414:
+			printk(KERN_DEBUG "scsi_protect_queue(): head NOT parked!..\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'scsi_protect_queue', this function's name, in a string
#855: FILE: drivers/scsi/scsi_lib.c:2414:
+			printk(KERN_DEBUG "scsi_protect_queue(): head NOT parked!..\n");

CHECK:BRACES: Unbalanced braces around else statement
#859: FILE: drivers/scsi/scsi_lib.c:2418:
+	} else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#860: FILE: drivers/scsi/scsi_lib.c:2419:
+		printk(KERN_DEBUG "scsi_protect_queue(): head park not requested, used standby!..\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'scsi_protect_queue', this function's name, in a string
#860: FILE: drivers/scsi/scsi_lib.c:2419:
+		printk(KERN_DEBUG "scsi_protect_queue(): head park not requested, used standby!..\n");

CHECK:SPACING: No space is necessary after a cast
#886: FILE: include/linux/blkdev.h:349:
+typedef int (issue_protect_fn) (request_queue_t *);

CHECK:SPACING: No space is necessary after a cast
#887: FILE: include/linux/blkdev.h:350:
+typedef int (issue_unprotect_fn) (request_queue_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#919: FILE: include/linux/blkdev.h:775:
+extern void blk_queue_issue_protect_fn(request_queue_t *, issue_protect_fn *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'request_queue_t *' should also have an identifier name
#919: FILE: include/linux/blkdev.h:775:
+extern void blk_queue_issue_protect_fn(request_queue_t *, issue_protect_fn *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'issue_protect_fn *' should also have an identifier name
#919: FILE: include/linux/blkdev.h:775:
+extern void blk_queue_issue_protect_fn(request_queue_t *, issue_protect_fn *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#920: FILE: include/linux/blkdev.h:776:
+extern void blk_queue_issue_unprotect_fn(request_queue_t *, issue_unprotect_fn *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'request_queue_t *' should also have an identifier name
#920: FILE: include/linux/blkdev.h:776:
+extern void blk_queue_issue_unprotect_fn(request_queue_t *, issue_unprotect_fn *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'issue_unprotect_fn *' should also have an identifier name
#920: FILE: include/linux/blkdev.h:776:
+extern void blk_queue_issue_unprotect_fn(request_queue_t *, issue_unprotect_fn *);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000010720.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 12 errors, 43 warnings, 32 checks, 785 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000010720.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
