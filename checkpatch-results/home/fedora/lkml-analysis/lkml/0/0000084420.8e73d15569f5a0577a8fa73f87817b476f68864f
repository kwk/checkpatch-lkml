WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#24: 
This patch provides the various common headerfiles used by the AppArmor module.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#42: FILE: security/apparmor/apparmor.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#62: FILE: security/apparmor/apparmor.h:21:
+ * via /sys/kernel/security/apparmor/control */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'inode' - possible side-effects?
#75: FILE: security/apparmor/apparmor.h:34:
+#define VALID_FSTYPE(inode) ((inode)->i_sb->s_magic != PIPEFS_MAGIC && \
+                             (inode)->i_sb->s_magic != SOCKFS_MAGIC && \
+                             (inode)->i_sb->s_magic != INOTIFYFS_MAGIC)

ERROR:CODE_INDENT: code indent should use tabs where possible
#76: FILE: security/apparmor/apparmor.h:35:
+                             (inode)->i_sb->s_magic != SOCKFS_MAGIC && \$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#76: FILE: security/apparmor/apparmor.h:35:
+                             (inode)->i_sb->s_magic != SOCKFS_MAGIC && \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#77: FILE: security/apparmor/apparmor.h:36:
+                             (inode)->i_sb->s_magic != INOTIFYFS_MAGIC)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#77: FILE: security/apparmor/apparmor.h:36:
+                             (inode)->i_sb->s_magic != INOTIFYFS_MAGIC)$

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_profile' - possible side-effects?
#79: FILE: security/apparmor/apparmor.h:38:
+#define PROFILE_COMPLAIN(_profile) \
+	(apparmor_complain == 1 || ((_profile) && (_profile)->flags.complain))

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_sd' - possible side-effects?
#82: FILE: security/apparmor/apparmor.h:41:
+#define SUBDOMAIN_COMPLAIN(_sd) \
+	(apparmor_complain == 1 || \
+	 ((_sd) && (_sd)->active && (_sd)->active->flags.complain))

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_profile' - possible side-effects?
#86: FILE: security/apparmor/apparmor.h:45:
+#define PROFILE_AUDIT(_profile) \
+	(apparmor_audit == 1 || ((_profile) && (_profile)->flags.audit))

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_sd' - possible side-effects?
#89: FILE: security/apparmor/apparmor.h:48:
+#define SUBDOMAIN_AUDIT(_sd) \
+	(apparmor_audit == 1 || \
+	 ((_sd) && (_sd)->active && (_sd)->active->flags.audit))

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#101: FILE: security/apparmor/apparmor.h:60:
+			printk(KERN_DEBUG "AppArmor: " fmt, ##args);	\

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#103: FILE: security/apparmor/apparmor.h:62:
+#define AA_INFO(fmt, args...)	printk(KERN_INFO "AppArmor: " fmt, ##args)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#104: FILE: security/apparmor/apparmor.h:63:
+#define AA_WARN(fmt, args...)	printk(KERN_WARNING "AppArmor: " fmt, ##args)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#105: FILE: security/apparmor/apparmor.h:64:
+#define AA_ERROR(fmt, args...)	printk(KERN_ERR "AppArmor: " fmt, ##args)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#136: FILE: security/apparmor/apparmor.h:95:
+				 * (meaning don't prefetch). */

ERROR:CODE_INDENT: code indent should use tabs where possible
#146: FILE: security/apparmor/apparmor.h:105:
+^I^I      ^I^I    AA_EXEC_INHERIT |\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#146: FILE: security/apparmor/apparmor.h:105:
+^I^I      ^I^I    AA_EXEC_INHERIT |\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#147: FILE: security/apparmor/apparmor.h:106:
+^I^I      ^I^I    AA_EXEC_PROFILE))$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#147: FILE: security/apparmor/apparmor.h:106:
+^I^I      ^I^I    AA_EXEC_PROFILE))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#150: FILE: security/apparmor/apparmor.h:109:
+^I^I      ^I^I    AA_EXEC_UNCONSTRAINED |\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#150: FILE: security/apparmor/apparmor.h:109:
+^I^I      ^I^I    AA_EXEC_UNCONSTRAINED |\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#151: FILE: security/apparmor/apparmor.h:110:
+^I^I      ^I^I    AA_EXEC_INHERIT |\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#151: FILE: security/apparmor/apparmor.h:110:
+^I^I      ^I^I    AA_EXEC_INHERIT |\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#152: FILE: security/apparmor/apparmor.h:111:
+^I^I      ^I^I    AA_EXEC_PROFILE))$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#152: FILE: security/apparmor/apparmor.h:111:
+^I^I      ^I^I    AA_EXEC_PROFILE))$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#154: FILE: security/apparmor/apparmor.h:113:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'controling' may be misspelled - perhaps 'controlling'?
#200: FILE: security/apparmor/apparmor.h:159:
+ * @hat_magic: the magic token controling the ability to leave a hat
                                ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#229: FILE: security/apparmor/apparmor.h:188:
+#define AA_SUBDOMAIN(sec)	((struct subdomain*)(sec))

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#230: FILE: security/apparmor/apparmor.h:189:
+#define AA_PROFILE(sec)		((struct aaprofile*)(sec))

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#270: FILE: security/apparmor/apparmor.h:229:
+#define AA_AUDITFLAG_LOGERR	     2 /* log operations that failed due to
+					   non permission errors  */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#270: FILE: security/apparmor/apparmor.h:229:
+					   non permission errors  */

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#277: FILE: security/apparmor/apparmor.h:236:
+#define LOG_HINT(p, gfp, hint, fmt, args...) \
+	do {\
+		aa_audit_message(p, gfp, 0, \
+			"LOGPROF-HINT " hint " " fmt, ##args);\
+	} while(0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

ERROR:SPACING: space required before the open parenthesis '('
#281: FILE: security/apparmor/apparmor.h:240:
+	} while(0)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#297: FILE: security/apparmor/apparmor.h:256:
+#define BASE_PROFILE(p) ((p)->parent ? (p)->parent : (p))

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#301: FILE: security/apparmor/apparmor.h:260:
+extern int alloc_null_complain_profile(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#302: FILE: security/apparmor/apparmor.h:261:
+extern void free_null_complain_profile(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#303: FILE: security/apparmor/apparmor.h:262:
+extern int attach_nullprofile(struct aaprofile *profile);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#304: FILE: security/apparmor/apparmor.h:263:
+extern int aa_audit_message(struct aaprofile *active, unsigned int gfp, int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#304: FILE: security/apparmor/apparmor.h:263:
+extern int aa_audit_message(struct aaprofile *active, unsigned int gfp, int,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#304: FILE: security/apparmor/apparmor.h:263:
+extern int aa_audit_message(struct aaprofile *active, unsigned int gfp, int,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#306: FILE: security/apparmor/apparmor.h:265:
+extern int aa_audit_syscallreject(struct aaprofile *active, unsigned int gfp,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#306: FILE: security/apparmor/apparmor.h:265:
+extern int aa_audit_syscallreject(struct aaprofile *active, unsigned int gfp,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#308: FILE: security/apparmor/apparmor.h:267:
+extern int aa_audit(struct aaprofile *active, const struct aa_audit *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct aa_audit *' should also have an identifier name
#308: FILE: security/apparmor/apparmor.h:267:
+extern int aa_audit(struct aaprofile *active, const struct aa_audit *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#309: FILE: security/apparmor/apparmor.h:268:
+extern char *aa_get_name(struct dentry *dentry, struct vfsmount *mnt);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#311: FILE: security/apparmor/apparmor.h:270:
+extern int aa_attr(struct aaprofile *active, struct dentry *dentry,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#313: FILE: security/apparmor/apparmor.h:272:
+extern int aa_xattr(struct aaprofile *active, struct dentry *dentry,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#315: FILE: security/apparmor/apparmor.h:274:
+extern int aa_capability(struct aaprofile *active, int cap);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#316: FILE: security/apparmor/apparmor.h:275:
+extern int aa_perm(struct aaprofile *active, struct dentry *dentry,

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#318: FILE: security/apparmor/apparmor.h:277:
+extern int aa_perm_nameidata(struct aaprofile *active, struct nameidata *nd,
                                                                          ^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#318: FILE: security/apparmor/apparmor.h:277:
+extern int aa_perm_nameidata(struct aaprofile *active, struct nameidata *nd,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#320: FILE: security/apparmor/apparmor.h:279:
+extern int aa_perm_dentry(struct aaprofile *active, struct dentry *dentry,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#322: FILE: security/apparmor/apparmor.h:281:
+extern int aa_perm_dir(struct aaprofile *active, struct dentry *dentry,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#324: FILE: security/apparmor/apparmor.h:283:
+extern int aa_link(struct aaprofile *active,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#326: FILE: security/apparmor/apparmor.h:285:
+extern int aa_fork(struct task_struct *p);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#327: FILE: security/apparmor/apparmor.h:286:
+extern int aa_register(struct file *file);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#328: FILE: security/apparmor/apparmor.h:287:
+extern void aa_release(struct task_struct *p);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#329: FILE: security/apparmor/apparmor.h:288:
+extern int aa_change_hat(const char *id, u32 hat_magic);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#330: FILE: security/apparmor/apparmor.h:289:
+extern int aa_associate_filp(struct file *filp);
                                           ^^^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#330: FILE: security/apparmor/apparmor.h:289:
+extern int aa_associate_filp(struct file *filp);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#333: FILE: security/apparmor/apparmor.h:292:
+extern struct aaprofile *aa_profilelist_find(const char *name);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#334: FILE: security/apparmor/apparmor.h:293:
+extern int aa_profilelist_add(struct aaprofile *profile);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#335: FILE: security/apparmor/apparmor.h:294:
+extern struct aaprofile *aa_profilelist_remove(const char *name);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#336: FILE: security/apparmor/apparmor.h:295:
+extern void aa_profilelist_release(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#337: FILE: security/apparmor/apparmor.h:296:
+extern struct aaprofile *aa_profilelist_replace(struct aaprofile *profile);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#338: FILE: security/apparmor/apparmor.h:297:
+extern void aa_profile_dump(struct aaprofile *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct aaprofile *' should also have an identifier name
#338: FILE: security/apparmor/apparmor.h:297:
+extern void aa_profile_dump(struct aaprofile *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#339: FILE: security/apparmor/apparmor.h:298:
+extern void aa_profilelist_dump(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#340: FILE: security/apparmor/apparmor.h:299:
+extern void aa_subdomainlist_add(struct subdomain *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct subdomain *' should also have an identifier name
#340: FILE: security/apparmor/apparmor.h:299:
+extern void aa_subdomainlist_add(struct subdomain *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#341: FILE: security/apparmor/apparmor.h:300:
+extern void aa_subdomainlist_remove(struct subdomain *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct subdomain *' should also have an identifier name
#341: FILE: security/apparmor/apparmor.h:300:
+extern void aa_subdomainlist_remove(struct subdomain *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#342: FILE: security/apparmor/apparmor.h:301:
+extern void aa_subdomainlist_iterate(aa_iter, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'aa_iter' should also have an identifier name
#342: FILE: security/apparmor/apparmor.h:301:
+extern void aa_subdomainlist_iterate(aa_iter, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#342: FILE: security/apparmor/apparmor.h:301:
+extern void aa_subdomainlist_iterate(aa_iter, void *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#343: FILE: security/apparmor/apparmor.h:302:
+extern void aa_subdomainlist_iterateremove(aa_iter, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'aa_iter' should also have an identifier name
#343: FILE: security/apparmor/apparmor.h:302:
+extern void aa_subdomainlist_iterateremove(aa_iter, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#343: FILE: security/apparmor/apparmor.h:302:
+extern void aa_subdomainlist_iterateremove(aa_iter, void *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#344: FILE: security/apparmor/apparmor.h:303:
+extern void aa_subdomainlist_release(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#347: FILE: security/apparmor/apparmor.h:306:
+extern ssize_t aa_file_prof_add(void *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#347: FILE: security/apparmor/apparmor.h:306:
+extern ssize_t aa_file_prof_add(void *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#347: FILE: security/apparmor/apparmor.h:306:
+extern ssize_t aa_file_prof_add(void *, size_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#348: FILE: security/apparmor/apparmor.h:307:
+extern ssize_t aa_file_prof_repl(void *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#348: FILE: security/apparmor/apparmor.h:307:
+extern ssize_t aa_file_prof_repl(void *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#348: FILE: security/apparmor/apparmor.h:307:
+extern ssize_t aa_file_prof_repl(void *, size_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#349: FILE: security/apparmor/apparmor.h:308:
+extern ssize_t aa_file_prof_remove(const char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#349: FILE: security/apparmor/apparmor.h:308:
+extern ssize_t aa_file_prof_remove(const char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#349: FILE: security/apparmor/apparmor.h:308:
+extern ssize_t aa_file_prof_remove(const char *, size_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#350: FILE: security/apparmor/apparmor.h:309:
+extern void free_aaprofile(struct aaprofile *profile);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#351: FILE: security/apparmor/apparmor.h:310:
+extern void free_aaprofile_kref(struct kref *kref);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#354: FILE: security/apparmor/apparmor.h:313:
+extern size_t aa_getprocattr(struct aaprofile *active, char *str, size_t size);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#355: FILE: security/apparmor/apparmor.h:314:
+extern int aa_setprocattr_changehat(char *hatinfo, size_t infosize);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#356: FILE: security/apparmor/apparmor.h:315:
+extern int aa_setprocattr_setprofile(struct task_struct *p, char *profilename,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#360: FILE: security/apparmor/apparmor.h:319:
+extern int create_apparmorfs(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#361: FILE: security/apparmor/apparmor.h:320:
+extern void destroy_apparmorfs(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#364: FILE: security/apparmor/apparmor.h:323:
+extern const char *capability_to_name(unsigned int cap);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#370: FILE: security/apparmor/inline.h:1:
+/*

WARNING:LINE_SPACING: Missing a blank line after declarations
#397: FILE: security/apparmor/inline.h:28:
+	struct subdomain *sd = AA_SUBDOMAIN(current->security);
+	return __aa_is_confined(sd);

WARNING:LINE_SPACING: Missing a blank line after declarations
#412: FILE: security/apparmor/inline.h:43:
+	struct subdomain *sd = AA_SUBDOMAIN(current->security);
+	return __aa_sub_defined(sd);

CHECK:SPACING: No space is necessary after a cast
#449: FILE: security/apparmor/inline.h:80:
+		active = (struct aaprofile *) rcu_dereference(sd->active);

WARNING:TYPO_SPELLING: 'grabing' may be misspelled - perhaps 'grabbing'?
#495: FILE: security/apparmor/inline.h:126:
+ * for grabing the sd_lock to meet its consistency constraints before
        ^^^^^^^

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*sd)...) over kzalloc(sizeof(struct subdomain)...)
#533: FILE: security/apparmor/inline.h:164:
+	sd = kzalloc(sizeof(struct subdomain), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#567: FILE: security/apparmor/inline.h:198:
+	profile = (struct aaprofile *)kzalloc(sizeof(struct aaprofile),

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*profile)...) over kzalloc(sizeof(struct aaprofile)...)
#567: FILE: security/apparmor/inline.h:198:
+	profile = (struct aaprofile *)kzalloc(sizeof(struct aaprofile),

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#569: FILE: security/apparmor/inline.h:200:
+	AA_DEBUG("%s(%p)\n", __FUNCTION__, profile);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#576: FILE: security/apparmor/inline.h:207:
+		for (i = 0; i <= POS_AA_FILE_MAX; i++) {
+			INIT_LIST_HEAD(&profile->file_entryp[i]);
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#612: FILE: security/apparmor/inline.h:243:
+	AA_DEBUG("%s: finding profile %s\n", __FUNCTION__, name);

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#618: FILE: security/apparmor/inline.h:249:
+			return p;
+		} else {

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#619: FILE: security/apparmor/inline.h:250:
+			AA_DEBUG("%s: skipping %s\n", __FUNCTION__, p->name);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#653: FILE: security/apparmor/inline.h:284:
+static inline void aa_path_begin(struct dentry *dentry,
+				     struct aa_path_data *data)

WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#662: FILE: security/apparmor/inline.h:293:
+ * If an error occured in begin or get, it is returned. Otherwise 0.
                ^^^^^^^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#706: FILE: security/apparmor/shared.h:1:
+/*

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'X' may be better as '(X)' to avoid precedence issues
#742: FILE: security/apparmor/shared.h:37:
+#define AA_EXEC_MODIFIERS(X)		(X & (AA_EXEC_INHERIT | \
+					 A_EXEC_UNCONSTRAINED | \
+					 AA_EXEC_PROFILE))

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000084420.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 10 errors, 50 warnings, 55 checks, 699 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000084420.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
