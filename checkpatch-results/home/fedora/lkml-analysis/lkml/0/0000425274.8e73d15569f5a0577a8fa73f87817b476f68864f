WARNING:REPEATED_WORD: Possible repeated word: 'returns'
#79: FILE: mm/slab.c:92:
+ * - the behaviour is extremely bad if get_free_pages returns returns

WARNING:TYPO_SPELLING: 'chache' may be misspelled - perhaps 'cache'?
#82: FILE: mm/slab.c:95:
+ * - determine the optimal placement for the chache spinlock:
                                              ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#88: FILE: mm/slab.c:101:
+ $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#88: FILE: mm/slab.c:101:
+ $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#111: FILE: mm/slab.c:225:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#145: FILE: mm/slab.c:269:
+#define DEFINE_NUMALIST_PTR(x)^I$

ERROR:SPACING: space required before the open parenthesis '('
#147: FILE: mm/slab.c:271:
+		do { } while(0)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#153: FILE: mm/slab.c:274:
+		do { } while(0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'cachep' may be better as '(cachep)' to avoid precedence issues
#155: FILE: mm/slab.c:276:
+#define access_numalist_ptr(cachep, x) \
+		(&(cachep->lists[0]))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around cachep->lists[0]
#156: FILE: mm/slab.c:277:
+		(&(cachep->lists[0]))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#198: FILE: mm/slab.c:635:
+			memsize = sizeof(void*)*cachep->limit+sizeof(cpucache_t);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#198: FILE: mm/slab.c:635:
+			memsize = sizeof(void*)*cachep->limit+sizeof(cpucache_t);
 			                       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#198: FILE: mm/slab.c:635:
+			memsize = sizeof(void*)*cachep->limit+sizeof(cpucache_t);
 			                                     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#209: FILE: mm/slab.c:646:
+			cachep->free_limit = (1+num_online_cpus())*cachep->batchcount
 			                       ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#209: FILE: mm/slab.c:646:
+			cachep->free_limit = (1+num_online_cpus())*cachep->batchcount
 			                                          ^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#223: FILE: mm/slab.c:668:
+ * ^Ifor the object.$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#230: FILE: mm/slab.c:675:
+}
+static inline struct cpucache_s * cc_data_ptr(kmem_cache_t *cachep, void *objp)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#230: FILE: mm/slab.c:675:
+static inline struct cpucache_s * cc_data_ptr(kmem_cache_t *cachep, void *objp)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#236: FILE: mm/slab.c:681:
+}
+#define DEFINE_NUMALIST_PTR(x)	\

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#236: FILE: mm/slab.c:681:
+#define DEFINE_NUMALIST_PTR(x)	\
+	struct kmem_list3 *x

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'cachep' may be better as '(cachep)' to avoid precedence issues
#239: FILE: mm/slab.c:684:
+#define set_numalist_ptr(x, cachep, objp) \
+		do { x = &cachep->lists[ptr_to_node(objp)]; } while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#239: FILE: mm/slab.c:684:
+#define set_numalist_ptr(x, cachep, objp) \
+		do { x = &cachep->lists[ptr_to_node(objp)]; } while(0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

ERROR:SPACING: space required before the open parenthesis '('
#240: FILE: mm/slab.c:685:
+		do { x = &cachep->lists[ptr_to_node(objp)]; } while(0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'cachep' may be better as '(cachep)' to avoid precedence issues
#241: FILE: mm/slab.c:686:
+#define set_numalist_cur(x, cachep) \
+		do { x = &cachep->lists[__cpu_to_node(smp_processor_id())]; } while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#241: FILE: mm/slab.c:686:
+#define set_numalist_cur(x, cachep) \
+		do { x = &cachep->lists[__cpu_to_node(smp_processor_id())]; } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#242: FILE: mm/slab.c:687:
+		do { x = &cachep->lists[__cpu_to_node(smp_processor_id())]; } while(0)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#258: FILE: mm/slab.c:703:
+	for (i=0;i<MAX_NUMNODES;i++) {
 	      ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#258: FILE: mm/slab.c:703:
+	for (i=0;i<MAX_NUMNODES;i++) {
 	        ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#258: FILE: mm/slab.c:703:
+	for (i=0;i<MAX_NUMNODES;i++) {
 	          ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#258: FILE: mm/slab.c:703:
+	for (i=0;i<MAX_NUMNODES;i++) {
 	                       ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#273: FILE: mm/slab.c:770:
+		void * ptr2;

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*ptr2)...) over kmalloc(sizeof(struct cpucache_int)...)
#278: FILE: mm/slab.c:775:
+		ptr2 = kmalloc(sizeof(struct cpucache_int), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#284: FILE: mm/slab.c:778:
+		BUG_ON(cache_cache.cpudata[0].native != &cpuarray_cache.cache);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*ptr2)...) over kmalloc(sizeof(struct cpucache_int)...)
#295: FILE: mm/slab.c:789:
+		ptr2 = kmalloc(sizeof(struct cpucache_int), GFP_KERNEL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#300: FILE: mm/slab.c:792:
+		BUG_ON(cache_sizes[0].cs_cachep->cpudata[0].native !=

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#303: FILE: mm/slab.c:795:
+		memcpy(ptr, cache_sizes[0].cs_cachep->cpudata[0].native,
 				sizeof(struct cpucache_int));

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#329: FILE: mm/slab.c:1131:
+	for (i=0;i<MAX_NUMNODES;i++) {
 	      ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#329: FILE: mm/slab.c:1131:
+	for (i=0;i<MAX_NUMNODES;i++) {
 	        ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#329: FILE: mm/slab.c:1131:
+	for (i=0;i<MAX_NUMNODES;i++) {
 	          ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#329: FILE: mm/slab.c:1131:
+	for (i=0;i<MAX_NUMNODES;i++) {
 	                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#343: FILE: mm/slab.c:1157:
+				kmalloc(sizeof(struct cpucache_int),GFP_KERNEL);
 				                                   ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#367: FILE: mm/slab.c:1179:
+	for (i=0;i< MAX_NUMNODES;i++) {
 	      ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#367: FILE: mm/slab.c:1179:
+	for (i=0;i< MAX_NUMNODES;i++) {
 	        ^

ERROR:SPACING: spaces required around that '<' (ctx:VxW)
#367: FILE: mm/slab.c:1179:
+	for (i=0;i< MAX_NUMNODES;i++) {
 	          ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#367: FILE: mm/slab.c:1179:
+	for (i=0;i< MAX_NUMNODES;i++) {
 	                        ^

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#369: FILE: mm/slab.c:1181:
+					((unsigned long)cachep)%REAPTIMEOUT_LIST3 +
 					                       ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#370: FILE: mm/slab.c:1182:
+					i*HZ/10;
 					 ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#370: FILE: mm/slab.c:1182:
+					i*HZ/10;
 					    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#394: FILE: mm/slab.c:1289:
+	for (i=0;i<MAX_NUMNODES;i++) {
 	      ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#394: FILE: mm/slab.c:1289:
+	for (i=0;i<MAX_NUMNODES;i++) {
 	        ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#394: FILE: mm/slab.c:1289:
+	for (i=0;i<MAX_NUMNODES;i++) {
 	          ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#394: FILE: mm/slab.c:1289:
+	for (i=0;i<MAX_NUMNODES;i++) {
 	                       ^

ERROR:SPACING: space required before the open parenthesis '('
#395: FILE: mm/slab.c:1290:
+		for(;;) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#411: FILE: mm/slab.c:1300:
+				BUG();

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#440: FILE: mm/slab.c:1371:
+		for (i = 0; i < NR_CPUS; i++) {

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#501: FILE: mm/slab.c:1847:
+			list_add_tail(&slabp->list, &(access_numalist_ptr(cachep, l3)->slabs_partial));

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#539: FILE: mm/slab.c:2083:
+		ccnew = kmalloc(sizeof(void*)*limit+

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#539: FILE: mm/slab.c:2083:
+		ccnew = kmalloc(sizeof(void*)*limit+
 		                             ^

CHECK:SPACING: space preferred before that '+' (ctx:VxE)
#539: FILE: mm/slab.c:2083:
+		ccnew = kmalloc(sizeof(void*)*limit+
 		                                   ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#542: FILE: mm/slab.c:2086:
+			for (i--; i >= 0; i--) kfree(new.new[i]);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#565: FILE: mm/slab.c:2108:
+		cpucache_t* ccold;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#566: FILE: mm/slab.c:2109:
+^I^I$

ERROR:SPACING: space required before the open parenthesis '('
#603: FILE: mm/slab.c:2201:
+		if(time_after(access_numalist_ptr(searchp, l3)->next_reap, jiffies))

ERROR:SPACING: space required before the open parenthesis '('
#608: FILE: mm/slab.c:2205:
+		if(time_after(access_numalist_ptr(searchp, l3)->next_reap, jiffies)) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#608: FILE: mm/slab.c:2205:
+		if(time_after(access_numalist_ptr(searchp, l3)->next_reap, jiffies)) {
 			goto next_unlock;
 		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#659: FILE: mm/slab.c:2317:
+	for (i=0;i<MAX_NUMNODES;i++) {
 	      ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#659: FILE: mm/slab.c:2317:
+	for (i=0;i<MAX_NUMNODES;i++) {
 	        ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#659: FILE: mm/slab.c:2317:
+	for (i=0;i<MAX_NUMNODES;i++) {
 	          ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#659: FILE: mm/slab.c:2317:
+	for (i=0;i<MAX_NUMNODES;i++) {
 	                       ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#660: FILE: mm/slab.c:2318:
+		list_for_each(q,&cachep->lists[i].slabs_full) {
 		               ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#660: FILE: mm/slab.c:2318:
+		list_for_each(q,&cachep->lists[i].slabs_full) {
 		                ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#663: FILE: mm/slab.c:2321:
+				BUG();

ERROR:SPACING: space required after that ',' (ctx:VxO)
#667: FILE: mm/slab.c:2325:
+		list_for_each(q,&cachep->lists[i].slabs_partial) {
 		               ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#667: FILE: mm/slab.c:2325:
+		list_for_each(q,&cachep->lists[i].slabs_partial) {
 		                ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#669: FILE: mm/slab.c:2327:
+			BUG_ON(slabp->inuse == cachep->num || !slabp->inuse);

ERROR:SPACING: space required after that ',' (ctx:VxO)
#673: FILE: mm/slab.c:2331:
+		list_for_each(q,&cachep->lists[i].slabs_free) {
 		               ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#673: FILE: mm/slab.c:2331:
+		list_for_each(q,&cachep->lists[i].slabs_free) {
 		                ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#676: FILE: mm/slab.c:2334:
+				BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#684: FILE: mm/slab.c:2341:
+	BUG_ON(num_objs - active_objs != cachep->lists[0].free_objects);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000425274.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 43 errors, 16 warnings, 20 checks, 593 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000425274.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
