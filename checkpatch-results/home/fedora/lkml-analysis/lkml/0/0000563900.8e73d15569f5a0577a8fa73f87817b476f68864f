WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#28: 
diff -u --recursive --new-file ../linux-2.4.0test12pre3/linux/Documentation/filesystems/devfs/README ./linux/Documentation/filesystems/devfs/README

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#95: FILE: linux/fs/isofs/inode.c:1021:
+	struct iso_directory_record * tmpde = NULL;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#118: FILE: linux/fs/isofs/inode.c:1087:
+	if (tmpde)
+		kfree(tmpde);

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#133: FILE: linux/fs/isofs/inode.c:1100:
+	if (tmpde)
+		kfree(tmpde);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#146: FILE: linux/fs/isofs/inode.c:1117:
+	struct buffer_head * bh = NULL;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#147: FILE: linux/fs/isofs/inode.c:1118:
+	struct iso_directory_record * de;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#148: FILE: linux/fs/isofs/inode.c:1119:
+	struct iso_directory_record * tmpde = NULL;

CHECK:SPACING: No space is necessary after a cast
#165: FILE: linux/fs/isofs/inode.c:1129:
+	de = (struct iso_directory_record *) (bh->b_data + offset);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#166: FILE: linux/fs/isofs/inode.c:1130:
+	de_len = *(unsigned char *) de;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tmpde"
#172: FILE: linux/fs/isofs/inode.c:1136:
+		if (tmpde == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#173: FILE: linux/fs/isofs/inode.c:1137:
+			printk(KERN_INFO "isofs_read_inode: out of memory\n");

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#173: FILE: linux/fs/isofs/inode.c:1137:
+		if (tmpde == NULL) {
+			printk(KERN_INFO "isofs_read_inode: out of memory\n");

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#181: FILE: linux/fs/isofs/inode.c:1145:
+		memcpy((char *)tmpde+frag1, bh->b_data, de_len - frag1);
 		                    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#196: FILE: linux/fs/isofs/inode.c:1164:
+		for(i=0; i< de->name_len[0]; i++)
 		     ^

ERROR:SPACING: spaces required around that '<' (ctx:VxW)
#196: FILE: linux/fs/isofs/inode.c:1164:
+		for(i=0; i< de->name_len[0]; i++)
 		          ^

ERROR:SPACING: space required before the open parenthesis '('
#196: FILE: linux/fs/isofs/inode.c:1164:
+		for(i=0; i< de->name_len[0]; i++)

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#197: FILE: linux/fs/isofs/inode.c:1165:
+			if(de->name[i]=='.' || de->name[i]==';')
 			              ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#197: FILE: linux/fs/isofs/inode.c:1165:
+			if(de->name[i]=='.' || de->name[i]==';')
 			                                  ^

ERROR:SPACING: space required before the open parenthesis '('
#197: FILE: linux/fs/isofs/inode.c:1165:
+			if(de->name[i]=='.' || de->name[i]==';')

ERROR:SPACING: space required before the open parenthesis '('
#200: FILE: linux/fs/isofs/inode.c:1167:
+		if(i == de->name_len[0] || de->name[i] == ';')

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#210: FILE: linux/fs/isofs/inode.c:1175:
+	inode->u.isofs_i.i_section_size = isonum_733 (de->size);

ERROR:SPACING: space required before the open parenthesis '('
#211: FILE: linux/fs/isofs/inode.c:1176:
+	if(de->flags[-high_sierra] & 0x80) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#215: FILE: linux/fs/isofs/inode.c:1179:
+		inode->i_size = isonum_733 (de->size);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#227: FILE: linux/fs/isofs/inode.c:1188:
+		printk(KERN_WARNING "Warning: defective CD-ROM.  "

WARNING:SPLIT_STRING: quoted string split across lines
#228: FILE: linux/fs/isofs/inode.c:1189:
+		printk(KERN_WARNING "Warning: defective CD-ROM.  "
+		       "Enabling \"cruft\" mount option.\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#262: FILE: linux/fs/isofs/inode.c:1213:
+		printk("File unit size != 0 for ISO file (%ld).\n",

ERROR:SPACING: spaces required around that '!=' (ctx:VxW)
#270: FILE: linux/fs/isofs/inode.c:1220:
+	if((de->flags[-high_sierra] & ~2)!= 0){
 	                                 ^

ERROR:SPACING: space required before the open brace '{'
#270: FILE: linux/fs/isofs/inode.c:1220:
+	if((de->flags[-high_sierra] & ~2)!= 0){

ERROR:SPACING: space required before the open parenthesis '('
#270: FILE: linux/fs/isofs/inode.c:1220:
+	if((de->flags[-high_sierra] & ~2)!= 0){

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#288: FILE: linux/fs/isofs/inode.c:1229:
+	inode->u.isofs_i.i_first_extent = (isonum_733 (de->extent) +

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#289: FILE: linux/fs/isofs/inode.c:1230:
+					   isonum_711 (de->ext_attr_length));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#320: FILE: linux/fs/isofs/inode.c:1245:
+	volume_seq_no = isonum_723 (de->volume_sequence_number) ;

WARNING:SPACING: space prohibited before semicolon
#320: FILE: linux/fs/isofs/inode.c:1245:
+	volume_seq_no = isonum_723 (de->volume_sequence_number) ;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#330: FILE: linux/fs/isofs/inode.c:1255:
+		printk(KERN_WARNING "Warning: defective CD-ROM "

WARNING:SPLIT_STRING: quoted string split across lines
#331: FILE: linux/fs/isofs/inode.c:1256:
+		printk(KERN_WARNING "Warning: defective CD-ROM "
+		       "(volume sequence number %d). "

WARNING:SPLIT_STRING: quoted string split across lines
#332: FILE: linux/fs/isofs/inode.c:1257:
+		       "(volume sequence number %d). "
+		       "Enabling \"cruft\" mount option.\n", volume_seq_no);

CHECK:BRACES: Unbalanced braces around else statement
#363: FILE: linux/fs/isofs/inode.c:1278:
+		} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#370: FILE: linux/fs/isofs/inode.c:1285:
+	if (tmpde)
+		kfree(tmpde);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#378: FILE: linux/fs/isofs/inode.c:1291:
+	printk(KERN_WARNING "ISOFS: unable to read i-node block\n");

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#416: FILE: linux/fs/isofs/rock.c:75:
+    }    \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#451: FILE: linux/fs/isofs/rock.c:140:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#452: FILE: linux/fs/isofs/rock.c:141:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#480: FILE: linux/fs/isofs/rock.c:214:
+    }$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#489: FILE: linux/fs/isofs/rock.c:260:
+	printk(KERN_DEBUG "ISO 9660 Extensions: ");

WARNING:TABSTOP: Statements should start on a tabstop
#511: FILE: linux/fs/isofs/rock.c:328:
+	   }

WARNING:TABSTOP: Statements should start on a tabstop
#521: FILE: linux/fs/isofs/rock.c:342:
+	   if (!rootflag && (oldslp->flags & 1) == 0)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (11, 19)
#521: FILE: linux/fs/isofs/rock.c:342:
+	   if (!rootflag && (oldslp->flags & 1) == 0)
+		   inode->i_size += 1;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#529: FILE: linux/fs/isofs/rock.c:349:
+	printk(KERN_WARNING "Attempt to read inode for relocated directory\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#543: FILE: linux/fs/isofs/rock.c:372:
+    }$

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000563900.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 15 errors, 36 warnings, 5 checks, 486 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000563900.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
