WARNING:TYPO_SPELLING: 'reenable' may be misspelled - perhaps 're-enable'?
#41: 
	o [CORRECT] Send credit when higher layer reenable receive
	                                          ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#56: 
diff -u -p -r linux/include/net/irda/irttp.d6.h linux/include/net/irda/irttp.h

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#69: FILE: include/net/irda/irttp.h:50:
+ * to have 7 to make a full window - Jean II */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#72: FILE: include/net/irda/irttp.h:53:
+ * keep a low number of Tx buffers in TTP - Jean II */

WARNING:TYPO_SPELLING: 'explicitely' may be misspelled - perhaps 'explicitly'?
#77: FILE: include/net/irda/irttp.h:58:
+ * If the peer has less credits than 9 frames, we will explicitely send
                                                        ^^^^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#82: FILE: include/net/irda/irttp.h:63:
+ * + 1 frames while he process the credits). - Jean II */

WARNING:TYPO_SPELLING: 'negociated' may be misspelled - perhaps 'negotiated'?
#86: FILE: include/net/irda/irttp.h:67:
+ * control answer from us (this may be negociated differently at TSAP setup).
                                        ^^^^^^^^^^

WARNING:TYPO_SPELLING: 'explicitely' may be misspelled - perhaps 'explicitly'?
#87: FILE: include/net/irda/irttp.h:68:
+ * We want to minimise the number of times we have to explicitely send some
                                                       ^^^^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#95: FILE: include/net/irda/irttp.h:76:
+ * LAP window + 1 + MIN_CREDITS. - Jean II */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#101: FILE: include/net/irda/irttp.h:82:
+ * more than one or two packets. - Jean II */

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#158: FILE: net/irda/irttp.c:134:
+/*
+ * Function irttp_start_todo_timer (self, timeout)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#160: FILE: net/irda/irttp.c:136:
+ *    Start todo timer. $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'effient' may be misspelled - perhaps 'efficient'?
#162: FILE: net/irda/irttp.c:138:
+ * Made it more effient and unsensitive to race conditions - Jean II
                 ^^^^^^^

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#171: FILE: net/irda/irttp.c:147:
+/*
+ * Function irttp_todo_expired (data)

CHECK:SPACING: No space is necessary after a cast
#186: FILE: net/irda/irttp.c:162:
+	struct tsap_cb *self = (struct tsap_cb *) data;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#191: FILE: net/irda/irttp.c:167:
+^I$

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#192: FILE: net/irda/irttp.c:168:
+	IRDA_DEBUG(4, __FUNCTION__ "(instance=%p)\n", self);

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#211: FILE: net/irda/irttp.c:187:
+			irttp_start_todo_timer(self, HZ/10);
 			                               ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#212: FILE: net/irda/irttp.c:188:
+^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#217: FILE: net/irda/irttp.c:193:
+^I$

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#225: FILE: net/irda/irttp.c:201:
+/*
+ * Function irttp_flush_queues (self)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#231: FILE: net/irda/irttp.c:207:
+	struct sk_buff* skb;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#232: FILE: net/irda/irttp.c:208:
+^I$

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#233: FILE: net/irda/irttp.c:209:
+	IRDA_DEBUG(4, __FUNCTION__ "()\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "self"
#235: FILE: net/irda/irttp.c:211:
+	ASSERT(self != NULL, return;);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:TRAILING_WHITESPACE: trailing whitespace
#237: FILE: net/irda/irttp.c:213:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#241: FILE: net/irda/irttp.c:217:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#245: FILE: net/irda/irttp.c:221:
+^I$

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#252: FILE: net/irda/irttp.c:228:
+/*
+ * Function irttp_reassemble (self)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#262: FILE: net/irda/irttp.c:238:
+^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#263: FILE: net/irda/irttp.c:239:
+      ^IASSERT(self != NULL, return NULL;);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#263: FILE: net/irda/irttp.c:239:
+      ^IASSERT(self != NULL, return NULL;);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#263: FILE: net/irda/irttp.c:239:
+      ^IASSERT(self != NULL, return NULL;);$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "self"
#263: FILE: net/irda/irttp.c:239:
+      	ASSERT(self != NULL, return NULL;);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#266: FILE: net/irda/irttp.c:242:
+^IIRDA_DEBUG(2, __FUNCTION__ "(), self->rx_sdu_size=%d\n", $

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#266: FILE: net/irda/irttp.c:242:
+	IRDA_DEBUG(2, __FUNCTION__ "(), self->rx_sdu_size=%d\n", 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#273: FILE: net/irda/irttp.c:249:
+^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#274: FILE: net/irda/irttp.c:250:
+^I * Need to reserve space for TTP header in case this skb needs to $

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#274: FILE: net/irda/irttp.c:250:
+	/* 
+	 * Need to reserve space for TTP header in case this skb needs to 

WARNING:TYPO_SPELLING: 'failes' may be misspelled - perhaps 'fails'?
#275: FILE: net/irda/irttp.c:251:
+	 * be requeued in case delivery failes
 	                                ^^^^^^

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#281: FILE: net/irda/irttp.c:257:
+	/*
+	 *  Copy all fragments to a new buffer

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#284: FILE: net/irda/irttp.c:260:
+		memcpy(skb->data+n, frag->data, frag->len);
 		                ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#286: FILE: net/irda/irttp.c:262:
+^I^I$

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#289: FILE: net/irda/irttp.c:265:
+	IRDA_DEBUG(2, __FUNCTION__ "(), frame len=%d\n", n);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#291: FILE: net/irda/irttp.c:267:
+	IRDA_DEBUG(2, __FUNCTION__ "(), rx_sdu_size=%d\n", self->rx_sdu_size);

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#303: FILE: net/irda/irttp.c:279:
+/*
+ * Function irttp_fragment_skb (skb)

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#314: FILE: net/irda/irttp.c:290:
+	IRDA_DEBUG(2, __FUNCTION__ "()\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "self"
#316: FILE: net/irda/irttp.c:292:
+	ASSERT(self != NULL, return;);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "skb"
#318: FILE: net/irda/irttp.c:294:
+	ASSERT(skb != NULL, return;);

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#321: FILE: net/irda/irttp.c:297:
+	/*
+	 *  Split frame into a number of segments

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#324: FILE: net/irda/irttp.c:300:
+		IRDA_DEBUG(2, __FUNCTION__  "(), fragmenting ...\n");

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#327: FILE: net/irda/irttp.c:303:
+		frag = dev_alloc_skb(self->max_seg_size+self->max_header_size);
 		                                       ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#334: FILE: net/irda/irttp.c:310:
+^I^Imemcpy(skb_put(frag, self->max_seg_size), skb->data, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#340: FILE: net/irda/irttp.c:316:
+^I^I$

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#348: FILE: net/irda/irttp.c:324:
+	IRDA_DEBUG(2, __FUNCTION__  "(), queuing last segment\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#349: FILE: net/irda/irttp.c:325:
+^I$

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#358: FILE: net/irda/irttp.c:334:
+/*
+ * Function irttp_param_max_sdu_size (self, param)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#364: FILE: net/irda/irttp.c:340:
+static int irttp_param_max_sdu_size(void *instance, irda_param_t *param, $

CHECK:SPACING: No space is necessary after a cast
#369: FILE: net/irda/irttp.c:345:
+	self = (struct tsap_cb *) instance;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "self"
#371: FILE: net/irda/irttp.c:347:
+	ASSERT(self != NULL, return -1;);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#379: FILE: net/irda/irttp.c:355:
+	IRDA_DEBUG(1, __FUNCTION__ "(), MaxSduSize=%d\n", param->pv.i);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#380: FILE: net/irda/irttp.c:356:
+^I$

CHECK:SPACING: No space is necessary after a cast
#397: FILE: net/irda/irttp.c:397:
+	self->todo_timer.data     = (unsigned long) self;

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#435: FILE: net/irda/irttp.c:504:
+		irttp_start_todo_timer(self, HZ/10);
 		                               ^

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#443: FILE: net/irda/irttp.c:569:
+	IRDA_DEBUG(2, __FUNCTION__ " : queue len = %d\n",

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#462: FILE: net/irda/irttp.c:610:
+		 * to requeue the packet in the client code - Jean II */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#489: FILE: net/irda/irttp.c:646:
+		 * Jean II */

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#504: FILE: net/irda/irttp.c:668:
+	IRDA_DEBUG(2, __FUNCTION__ "() : send_credit = %d, queue_len = %d\n",

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#514: FILE: net/irda/irttp.c:677:
+	 * poll us through irttp_flow_indication() - Jean II */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#571: FILE: net/irda/irttp.c:742:
+	 * where we can spend a bit of time doing stuff. - Jean II */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#572: FILE: net/irda/irttp.c:743:
+^Iif ((self->tx_sdu_busy) && $

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#572: FILE: net/irda/irttp.c:743:
+	if ((self->tx_sdu_busy) && 
+	    (skb_queue_len(&self->tx_queue) < TTP_TX_LOW_THRESHOLD) &&
+	    (!self->close_pend))
+	{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'self->tx_sdu_busy'
#572: FILE: net/irda/irttp.c:743:
+	if ((self->tx_sdu_busy) && 
+	    (skb_queue_len(&self->tx_queue) < TTP_TX_LOW_THRESHOLD) &&
+	    (!self->close_pend))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!self->close_pend'
#572: FILE: net/irda/irttp.c:743:
+	if ((self->tx_sdu_busy) && 
+	    (skb_queue_len(&self->tx_queue) < TTP_TX_LOW_THRESHOLD) &&
+	    (!self->close_pend))

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#582: FILE: net/irda/irttp.c:753:
+		 * to update our state after the client - Jean II */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#595: FILE: net/irda/irttp.c:767:
+static inline void irttp_give_credit(struct tsap_cb *self) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#621: FILE: net/irda/irttp.c:863:
+^I *  Since we can transmit and receive frames concurrently, $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#651: FILE: net/irda/irttp.c:888:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#662: FILE: net/irda/irttp.c:899:
+	 * Jean II */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#680: FILE: net/irda/irttp.c:905:
+	 * a while before it's run... - Jean II */

WARNING:TYPO_SPELLING: 'shedule' may be misspelled - perhaps 'schedule'?
#685: FILE: net/irda/irttp.c:909:
+         * anyone from before, then we need to shedule the tx queue.
                                                ^^^^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#685: FILE: net/irda/irttp.c:909:
+         * anyone from before, then we need to shedule the tx queue.$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#697: FILE: net/irda/irttp.c:919:
+		 * because the tasklet API is broken. - Jean II */

CHECK:SPACING: No space is necessary after a cast
#716: FILE: net/irda/irttp.c:963:
+	self = (struct tsap_cb *) instance;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#717: FILE: net/irda/irttp.c:964:
+^I$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "self"
#718: FILE: net/irda/irttp.c:965:
+	ASSERT(self != NULL, return;);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#720: FILE: net/irda/irttp.c:967:
+^I$

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#721: FILE: net/irda/irttp.c:968:
+	IRDA_DEBUG(4, __FUNCTION__ "(instance=%p)\n", self);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#727: FILE: net/irda/irttp.c:974:
+	 * for packets. - Jean II */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#731: FILE: net/irda/irttp.c:978:
+	 * This allow the scheduler to do its round robin - Jean II */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#743: FILE: net/irda/irttp.c:990:
+	 * to do that. Jean II */

ERROR:SPACING: space required before the open parenthesis '('
#746: FILE: net/irda/irttp.c:993:
+	if(self->disconnect_pend)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#759: FILE: net/irda/irttp.c:1021:
+		 * queues ASAP - Jean II */

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#770: FILE: net/irda/irttp.c:1461:
+			irttp_start_todo_timer(self, HZ/10);
 			                               ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#777: FILE: net/irda/irttp.c:1468:
+	 * full of data). - Jean II */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#868: FILE: net/irda/irttp.c:1674:
+^I * by incrementing at each packet, because delivery may fail $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'self->remote_credit <= TTP_RX_MIN_CREDIT'
#1004: FILE: net/irda/irttp.c:1689:
+	if ((self->remote_credit <= TTP_RX_MIN_CREDIT) &&
+	    (self->avail_credit > 0)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'self->avail_credit > 0'
#1004: FILE: net/irda/irttp.c:1689:
+	if ((self->remote_credit <= TTP_RX_MIN_CREDIT) &&
+	    (self->avail_credit > 0)) {

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000463464.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 29 errors, 49 warnings, 20 checks, 984 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000463464.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
