WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#60: 
    int fileop_notify(buf, filp, fileop);
                           ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#98: FILE: fs/Kconfig:975:
+config RELAYFS_FS
+	tristate "Relayfs file system support"
+	---help---
+	  Relayfs is a high-speed data relay filesystem designed to provide
+	  an efficient mechanism for tools and facilities to relay large
+	  amounts of data from kernel space to user space.
+
+	  To compile this code as a module, choose M here: the module will be
+	  called relayfs.
+
+	  If unsure, say N.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#137: FILE: fs/relayfs/buffers.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!page_array"
#167: FILE: fs/relayfs/buffers.c:31:
+	if (page_array == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#265: FILE: fs/relayfs/buffers.h:1:
+#ifndef _BUFFERS_H

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#269: FILE: fs/relayfs/buffers.h:5:
+#define FIX_SIZE(x) (((x) - 1) & PAGE_MASK) + PAGE_SIZE

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#271: FILE: fs/relayfs/buffers.h:7:
+extern void *relay_alloc_rchan_buf(unsigned long size,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#274: FILE: fs/relayfs/buffers.h:10:
+extern void relay_free_rchan_buf(void *buf,

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#283: FILE: fs/relayfs/inode.c:1:
+/*

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#306: FILE: fs/relayfs/inode.c:24:
+#include <asm/uaccess.h>

ERROR:POINTER_LOCATION: "foo *		bar" should be "foo *bar"
#311: FILE: fs/relayfs/inode.c:29:
+static struct vfsmount *		relayfs_mount;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#322: FILE: fs/relayfs/inode.c:40:
+	struct inode * inode = new_inode(sb);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#331: FILE: fs/relayfs/inode.c:49:
+		inode->i_atime = inode->i_mtime = inode->i_ctime = CURRENT_TIME;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#358: FILE: fs/relayfs/inode.c:76:
+	struct inode * inode = relayfs_get_inode(dir->i_sb, mode, dev);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#371: FILE: fs/relayfs/inode.c:89:
+static int relayfs_mkdir(struct inode * dir, struct dentry * dentry, int mode)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#371: FILE: fs/relayfs/inode.c:89:
+static int relayfs_mkdir(struct inode * dir, struct dentry * dentry, int mode)

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXUGO' are not preferred. Consider using octal permissions '0777'.
#375: FILE: fs/relayfs/inode.c:93:
+	mode = (mode & (S_IRWXUGO | S_ISVTX)) | S_IFDIR;

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#383: FILE: fs/relayfs/inode.c:101:
+			  struct nameidata *nd)
 			                    ^^

WARNING:TYPO_SPELLING: 'specifed' may be misspelled - perhaps 'specified'?
#397: FILE: fs/relayfs/inode.c:115:
+ *	Creates a file or directory with the specifed permissions.
   	                                     ^^^^^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#399: FILE: fs/relayfs/inode.c:117:
+static int relayfs_create_entry(const char * name, struct dentry * parent,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#399: FILE: fs/relayfs/inode.c:117:
+static int relayfs_create_entry(const char * name, struct dentry * parent,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#400: FILE: fs/relayfs/inode.c:118:
+				struct dentry **dentry, int mode, void * data)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#408: FILE: fs/relayfs/inode.c:126:
+		printk(KERN_ERR "Couldn't mount relayfs: errcode %d\n", error);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!parent"
#416: FILE: fs/relayfs/inode.c:134:
+	if (parent == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!parent"
#420: FILE: fs/relayfs/inode.c:138:
+	if (parent == NULL) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#422: FILE: fs/relayfs/inode.c:140:
+ ^I^Ireturn -EINVAL;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#422: FILE: fs/relayfs/inode.c:140:
+ ^I^Ireturn -EINVAL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#422: FILE: fs/relayfs/inode.c:140:
+ ^I^Ireturn -EINVAL;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#449: FILE: fs/relayfs/inode.c:167:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#450: FILE: fs/relayfs/inode.c:168:
+release_mount:^I^I$

WARNING:TYPO_SPELLING: 'specied' may be misspelled - perhaps 'specified'?
#467: FILE: fs/relayfs/inode.c:185:
+ *	@mode: mode, if not specied the default perms are used
   	                    ^^^^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#471: FILE: fs/relayfs/inode.c:189:
+int relayfs_create_file(const char * name, struct dentry * parent,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#471: FILE: fs/relayfs/inode.c:189:
+int relayfs_create_file(const char * name, struct dentry * parent,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#472: FILE: fs/relayfs/inode.c:190:
+			struct dentry **dentry, void * data, int mode)

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IWUSR' are not preferred. Consider using octal permissions '0600'.
#475: FILE: fs/relayfs/inode.c:193:
+		mode = S_IRUSR | S_IWUSR;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#488: FILE: fs/relayfs/inode.c:206:
+int relayfs_create_dir(const char * name, struct dentry * parent,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#488: FILE: fs/relayfs/inode.c:206:
+int relayfs_create_dir(const char * name, struct dentry * parent,

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXU | S_IRUGO | S_IXUGO' are not preferred. Consider using octal permissions '0755'.
#491: FILE: fs/relayfs/inode.c:209:
+	int mode = S_IFDIR | S_IRWXU | S_IRUGO | S_IXUGO;

WARNING:LINE_SPACING: Missing a blank line after declarations
#492: FILE: fs/relayfs/inode.c:210:
+	int mode = S_IFDIR | S_IRWXU | S_IRUGO | S_IXUGO;
+	return relayfs_create_entry(name, parent, dentry, mode, NULL);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!parent"
#505: FILE: fs/relayfs/inode.c:223:
+	if (parent == NULL)

WARNING:TYPO_SPELLING: 'successully' may be misspelled - perhaps 'successfully'?
#527: FILE: fs/relayfs/inode.c:245:
+ *	@topdir: the last directory successully created, NULL if none created
   	                            ^^^^^^^^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tmpname"
#545: FILE: fs/relayfs/inode.c:263:
+	if (tmpname == NULL)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#550: FILE: fs/relayfs/inode.c:268:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#585: FILE: fs/relayfs/inode.c:303:
+^I$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#586: FILE: fs/relayfs/inode.c:304:
+	while (dir != NULL)
+	{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "dir"
#586: FILE: fs/relayfs/inode.c:304:
+	while (dir != NULL)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#597: FILE: fs/relayfs/inode.c:315:
+^I^I$

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#606: FILE: fs/relayfs/inode.c:324:
+ *	@filp: the file
   	 ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#611: FILE: fs/relayfs/inode.c:329:
+int relayfs_open(struct inode *inode, struct file *filp)
                                                    ^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!buf"
#618: FILE: fs/relayfs/inode.c:336:
+		if (buf == NULL)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#621: FILE: fs/relayfs/inode.c:339:
+		retval = buf->chan->cb->fileop_notify(buf, filp, RELAY_FILE_OPEN);
 		                                           ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#633: FILE: fs/relayfs/inode.c:351:
+ *	@filp: the file
   	 ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#638: FILE: fs/relayfs/inode.c:356:
+int relayfs_mmap(struct file *filp, struct vm_area_struct *vma)
                               ^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#641: FILE: fs/relayfs/inode.c:359:
+  $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#641: FILE: fs/relayfs/inode.c:359:
+  $

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#647: FILE: fs/relayfs/inode.c:365:
+ *	@filp: the file
   	 ^^^^

WARNING:TYPO_SPELLING: 'implemention' may be misspelled - perhaps 'implementation'?
#650: FILE: fs/relayfs/inode.c:368:
+ *	Poll implemention.
   	     ^^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#652: FILE: fs/relayfs/inode.c:370:
+unsigned int relayfs_poll(struct file *filp, poll_table *wait)
                                        ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#661: FILE: fs/relayfs/inode.c:379:
+		poll_wait(filp, &buf->read_wait, wait);
 		          ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#672: FILE: fs/relayfs/inode.c:390:
+ *	@filp: the file
   	 ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#677: FILE: fs/relayfs/inode.c:395:
+int relayfs_release(struct inode *inode, struct file *filp)
                                                       ^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#680: FILE: fs/relayfs/inode.c:398:
+	struct rchan_buf *buf = filp->private_data;
+	if (buf == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!buf"
#680: FILE: fs/relayfs/inode.c:398:
+	if (buf == NULL)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#683: FILE: fs/relayfs/inode.c:401:
+        buf->chan->cb->fileop_notify(buf, filp, RELAY_FILE_CLOSE);
                                           ^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#683: FILE: fs/relayfs/inode.c:401:
+        buf->chan->cb->fileop_notify(buf, filp, RELAY_FILE_CLOSE);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#683: FILE: fs/relayfs/inode.c:401:
+        buf->chan->cb->fileop_notify(buf, filp, RELAY_FILE_CLOSE);$

WARNING:CONST_STRUCT: struct file_operations should normally be const
#689: FILE: fs/relayfs/inode.c:407:
+struct file_operations relayfs_file_operations = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#701: FILE: fs/relayfs/inode.c:419:
+static int relayfs_fill_super(struct super_block * sb, void * data, int silent)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#701: FILE: fs/relayfs/inode.c:419:
+static int relayfs_fill_super(struct super_block * sb, void * data, int silent)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#703: FILE: fs/relayfs/inode.c:421:
+	struct inode * inode;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#704: FILE: fs/relayfs/inode.c:422:
+	struct dentry * root;

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXU | S_IRUGO | S_IXUGO' are not preferred. Consider using octal permissions '0755'.
#705: FILE: fs/relayfs/inode.c:423:
+	int mode = S_IFDIR | S_IRWXU | S_IRUGO | S_IXUGO;

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#718: FILE: fs/relayfs/inode.c:436:
+		iput(inode);
 		^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#726: FILE: fs/relayfs/inode.c:444:
+static struct super_block * relayfs_get_sb(struct file_system_type *fs_type,

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#754: FILE: fs/relayfs/inode.c:472:
+EXPORT_SYMBOL_GPL(relayfs_open);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#755: FILE: fs/relayfs/inode.c:473:
+EXPORT_SYMBOL_GPL(relayfs_poll);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#756: FILE: fs/relayfs/inode.c:474:
+EXPORT_SYMBOL_GPL(relayfs_mmap);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#757: FILE: fs/relayfs/inode.c:475:
+EXPORT_SYMBOL_GPL(relayfs_release);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#758: FILE: fs/relayfs/inode.c:476:
+EXPORT_SYMBOL_GPL(relayfs_file_operations);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#768: FILE: fs/relayfs/relay.c:1:
+/*

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#790: FILE: fs/relayfs/relay.c:23:
+#include <asm/io.h>

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#792: FILE: fs/relayfs/relay.c:25:
+#include <asm/uaccess.h>

WARNING:INCLUDE_LINUX: Use #include <linux/bitops.h> instead of <asm/bitops.h>
#793: FILE: fs/relayfs/relay.c:26:
+#include <asm/bitops.h>

WARNING:INCLUDE_LINUX: Use #include <linux/pgtable.h> instead of <asm/pgtable.h>
#794: FILE: fs/relayfs/relay.c:27:
+#include <asm/pgtable.h>

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#839: FILE: fs/relayfs/relay.c:72:
+	struct file *filp = vma->vm_file;
 	             ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#842: FILE: fs/relayfs/relay.c:75:
+	buf->chan->cb->fileop_notify(buf, filp, RELAY_FILE_UNMAP);
 	                                  ^^^^

WARNING:CONST_STRUCT: struct vm_operations_struct should normally be const
#848: FILE: fs/relayfs/relay.c:81:
+static struct vm_operations_struct relay_file_mmap_ops = {

CHECK:SPACING: No space is necessary after a cast
#857: FILE: fs/relayfs/relay.c:90:
+	kva = (unsigned long) page_address(vmalloc_to_page((void *) adr));

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#868: FILE: fs/relayfs/relay.c:101:
+	unsigned long start = (unsigned long) adr;

CHECK:SPACING: No space is necessary after a cast
#871: FILE: fs/relayfs/relay.c:104:
+	pos = (unsigned long) start_pos;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#884: FILE: fs/relayfs/relay.c:117:
+}
+/* \end{Code inspired from BTTV driver} */

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#902: FILE: fs/relayfs/relay.c:135:
+	struct file *filp = vma->vm_file;
 	             ^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!buf"
#904: FILE: fs/relayfs/relay.c:137:
+	if (buf == NULL) {

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#921: FILE: fs/relayfs/relay.c:154:
+		err = buf->chan->cb->fileop_notify(buf, filp, RELAY_FILE_MAP);
 		                                        ^^^^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#941: FILE: fs/relayfs/relay.c:174:
+					 unsigned prev_subbuf_idx)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#949: FILE: fs/relayfs/relay.c:182:
+static void deliver_default_callback (struct rchan_buf *buf,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#951: FILE: fs/relayfs/relay.c:184:
+				      unsigned subbuf_idx)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#959: FILE: fs/relayfs/relay.c:192:
+					  struct file *filp,
 					               ^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1030: FILE: fs/relayfs/relay.c:263:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1045: FILE: fs/relayfs/relay.c:278:
+^I$

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1082: FILE: fs/relayfs/relay.c:315:
+	for (i = 0; i < NR_CPUS; i++)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "chan->buf[i]"
#1083: FILE: fs/relayfs/relay.c:316:
+		if (chan->buf[i] != NULL)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1119: FILE: fs/relayfs/relay.c:352:
+	if ((buf = kcalloc(1, sizeof(struct rchan_buf), GFP_KERNEL)) == NULL)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#1122: FILE: fs/relayfs/relay.c:355:
+	buf->padding = kmalloc(chan->n_subbufs * sizeof(unsigned *), GFP_KERNEL);

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#1122: FILE: fs/relayfs/relay.c:355:
+	buf->padding = kmalloc(chan->n_subbufs * sizeof(unsigned *), GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!buf->padding"
#1123: FILE: fs/relayfs/relay.c:356:
+	if (buf->padding == NULL)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1125: FILE: fs/relayfs/relay.c:358:
+^I$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#1126: FILE: fs/relayfs/relay.c:359:
+	buf->commit = kmalloc(chan->n_subbufs * sizeof(unsigned *), GFP_KERNEL);

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#1126: FILE: fs/relayfs/relay.c:359:
+	buf->commit = kmalloc(chan->n_subbufs * sizeof(unsigned *), GFP_KERNEL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!buf->commit"
#1127: FILE: fs/relayfs/relay.c:360:
+	if (buf->commit == NULL)

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#1130: FILE: fs/relayfs/relay.c:363:
+	if ((buf->start = relay_alloc_rchan_buf(chan->alloc_size, &page_array, &page_count)) == NULL) {

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1130: FILE: fs/relayfs/relay.c:363:
+	if ((buf->start = relay_alloc_rchan_buf(chan->alloc_size, &page_array, &page_count)) == NULL) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1164: FILE: fs/relayfs/relay.c:397:
+	if ((buf = rchan_create_buf(chan)) == NULL)

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR' are not preferred. Consider using octal permissions '0400'.
#1168: FILE: fs/relayfs/relay.c:401:
+	if (relayfs_create_file(filename, parent, &dentry, buf, S_IRUSR) < 0) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!callbacks"
#1184: FILE: fs/relayfs/relay.c:417:
+	if (callbacks == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!callbacks->subbuf_start"
#1189: FILE: fs/relayfs/relay.c:422:
+	if (callbacks->subbuf_start == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!callbacks->deliver"
#1191: FILE: fs/relayfs/relay.c:424:
+	if (callbacks->deliver == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!callbacks->fileop_notify"
#1193: FILE: fs/relayfs/relay.c:426:
+	if (callbacks->fileop_notify == NULL)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1212: FILE: fs/relayfs/relay.c:445:
+			 unsigned subbuf_size,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1213: FILE: fs/relayfs/relay.c:446:
+			 unsigned n_subbufs,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!chanpath"
#1224: FILE: fs/relayfs/relay.c:457:
+	if (chanpath == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!chan"
#1231: FILE: fs/relayfs/relay.c:464:
+	if (chan == NULL)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1240: FILE: fs/relayfs/relay.c:473:
+^I$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tmpname"
#1242: FILE: fs/relayfs/relay.c:475:
+	if (tmpname == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!chan->buf[i]"
#1252: FILE: fs/relayfs/relay.c:485:
+		if (chan->buf[i] == NULL)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1257: FILE: fs/relayfs/relay.c:490:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1260: FILE: fs/relayfs/relay.c:493:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1263: FILE: fs/relayfs/relay.c:496:
+^I$

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1264: FILE: fs/relayfs/relay.c:497:
+	for (i = 0; i < NR_CPUS; i++)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "chan->buf[i]"
#1265: FILE: fs/relayfs/relay.c:498:
+		if (chan->buf[i] != NULL)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1278: FILE: fs/relayfs/relay.c:511:
+				 unsigned subbuf_idx)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1280: FILE: fs/relayfs/relay.c:513:
+	unsigned full;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1301: FILE: fs/relayfs/relay.c:534:
+unsigned relay_switch_subbuf(struct rchan_buf *buf, unsigned length)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1301: FILE: fs/relayfs/relay.c:534:
+unsigned relay_switch_subbuf(struct rchan_buf *buf, unsigned length)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1304: FILE: fs/relayfs/relay.c:537:
+	unsigned start = 0, padding = buf->chan->subbuf_size - buf->offset;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1305: FILE: fs/relayfs/relay.c:538:
+^I$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1310: FILE: fs/relayfs/relay.c:543:
+	cur_subbuf = prev_subbuf = subbufs_produced % buf->chan->n_subbufs;

WARNING:WAITQUEUE_ACTIVE: waitqueue_active without comment
#1315: FILE: fs/relayfs/relay.c:548:
+	if (waitqueue_active(&buf->read_wait)) {

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1325: FILE: fs/relayfs/relay.c:558:
+	buf->padding[cur_subbuf] = buf->commit[cur_subbuf] = 0;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1343: FILE: fs/relayfs/relay.c:576:
+		  unsigned subbuf_idx,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1344: FILE: fs/relayfs/relay.c:577:
+		  unsigned count)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1348: FILE: fs/relayfs/relay.c:581:
+^I$

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1406: FILE: fs/relayfs/relay.c:639:
+	for (i = 0; i < NR_CPUS; i++)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "chan->buf[i]"
#1407: FILE: fs/relayfs/relay.c:640:
+		if (chan->buf[i] != NULL)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1411: FILE: fs/relayfs/relay.c:644:
+^I$

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1415: FILE: fs/relayfs/relay.c:648:
+EXPORT_SYMBOL_GPL(relay_open);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1416: FILE: fs/relayfs/relay.c:649:
+EXPORT_SYMBOL_GPL(relay_close);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1417: FILE: fs/relayfs/relay.c:650:
+EXPORT_SYMBOL_GPL(relay_reset);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1418: FILE: fs/relayfs/relay.c:651:
+EXPORT_SYMBOL_GPL(relay_subbufs_consumed);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1419: FILE: fs/relayfs/relay.c:652:
+EXPORT_SYMBOL_GPL(relay_switch_subbuf);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1420: FILE: fs/relayfs/relay.c:653:
+EXPORT_SYMBOL_GPL(relay_commit);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1425: FILE: fs/relayfs/relay.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#1426: FILE: fs/relayfs/relay.h:2:
+ * fs/relayfs/relay.h

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1443: FILE: fs/relayfs/relay.h:19:
+extern int relayfs_create_file(const char * name,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1443: FILE: fs/relayfs/relay.h:19:
+extern int relayfs_create_file(const char * name,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1446: FILE: fs/relayfs/relay.h:22:
+			       void * data,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1448: FILE: fs/relayfs/relay.h:24:
+extern int relayfs_remove_file(struct dentry *dentry);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1449: FILE: fs/relayfs/relay.h:25:
+extern int relayfs_create_dirs(const char *chanpath,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1452: FILE: fs/relayfs/relay.h:28:
+extern void relayfs_remove_dirs(struct dentry *dir);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1453: FILE: fs/relayfs/relay.h:29:
+extern int relay_mmap_buffer(struct rchan_buf *buf,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1455: FILE: fs/relayfs/relay.h:31:
+extern void relay_destroy_buf(struct kref *kref);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1456: FILE: fs/relayfs/relay.h:32:
+extern int relay_buf_empty(struct rchan_buf *buf);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1463: FILE: include/linux/relayfs_fs.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#1464: FILE: include/linux/relayfs_fs.h:2:
+ * linux/include/linux/relayfs_fs.h

ERROR:OPEN_BRACE: open brace '{' following enum go on the same line
#1502: FILE: include/linux/relayfs_fs.h:40:
+enum relay_fileop
+{

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#1513: FILE: include/linux/relayfs_fs.h:51:
+struct rchan_buf
+{

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1516: FILE: include/linux/relayfs_fs.h:54:
+	unsigned offset;		/* current offset into sub-buffer */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#1526: FILE: include/linux/relayfs_fs.h:64:
+	unsigned *padding;		/* padding counts per sub-buffer */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#1527: FILE: include/linux/relayfs_fs.h:65:
+	unsigned *commit;		/* commit counts per sub-buffer */

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#1535: FILE: include/linux/relayfs_fs.h:73:
+struct rchan
+{

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1537: FILE: include/linux/relayfs_fs.h:75:
+	unsigned subbuf_size;		/* sub-buffer size */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1538: FILE: include/linux/relayfs_fs.h:76:
+	unsigned n_subbufs;		/* number of sub-buffers per buffer */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1539: FILE: include/linux/relayfs_fs.h:77:
+	unsigned alloc_size;		/* total buffer size allocated */

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#1550: FILE: include/linux/relayfs_fs.h:88:
+struct rchan_callbacks
+{

WARNING:SPACING: Unnecessary space before function pointer arguments
#1558: FILE: include/linux/relayfs_fs.h:96:
+	int (*subbuf_start) (struct rchan_buf *buf,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1560: FILE: include/linux/relayfs_fs.h:98:
+			     unsigned prev_subbuf_idx);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1570: FILE: include/linux/relayfs_fs.h:108:
+	void (*deliver) (struct rchan_buf *buf,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1572: FILE: include/linux/relayfs_fs.h:110:
+			 unsigned subbuf_idx);

WARNING:REPEATED_WORD: Possible repeated word: 'channel'
#1576: FILE: include/linux/relayfs_fs.h:114:
+	 * @chan: the channel channel buffer

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1577: FILE: include/linux/relayfs_fs.h:115:
+	 * @filp: relayfs file pointer
 	    ^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1582: FILE: include/linux/relayfs_fs.h:120:
+        int (*fileop_notify)(struct rchan_buf *buf,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1582: FILE: include/linux/relayfs_fs.h:120:
+        int (*fileop_notify)(struct rchan_buf *buf,$

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1583: FILE: include/linux/relayfs_fs.h:121:
+			     struct file *filp,
 			                  ^^^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1591: FILE: include/linux/relayfs_fs.h:129:
+extern struct rchan *relay_open(const char *chanpath,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1592: FILE: include/linux/relayfs_fs.h:130:
+				unsigned subbuf_size,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1593: FILE: include/linux/relayfs_fs.h:131:
+				unsigned n_subbufs,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1596: FILE: include/linux/relayfs_fs.h:134:
+extern void relay_close(struct rchan *chan);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1597: FILE: include/linux/relayfs_fs.h:135:
+extern void relay_subbufs_consumed(struct rchan *chan,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1600: FILE: include/linux/relayfs_fs.h:138:
+extern void relay_reset(struct rchan *chan);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1601: FILE: include/linux/relayfs_fs.h:139:
+extern unsigned relay_switch_subbuf(struct rchan_buf *buf,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1601: FILE: include/linux/relayfs_fs.h:139:
+extern unsigned relay_switch_subbuf(struct rchan_buf *buf,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1602: FILE: include/linux/relayfs_fs.h:140:
+				    unsigned length);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1603: FILE: include/linux/relayfs_fs.h:141:
+extern void relay_commit(struct rchan_buf *buf,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1604: FILE: include/linux/relayfs_fs.h:142:
+			 unsigned subbuf_idx,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1605: FILE: include/linux/relayfs_fs.h:143:
+			 unsigned count);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'chan' may be better as '(chan)' to avoid precedence issues
#1607: FILE: include/linux/relayfs_fs.h:145:
+#define relay_get_buf(chan, cpu)		(chan->buf[cpu])

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'buf' may be better as '(buf)' to avoid precedence issues
#1608: FILE: include/linux/relayfs_fs.h:146:
+#define relay_get_padding(buf, subbuf_idx)	(buf->padding[subbuf_idx])

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'buf' may be better as '(buf)' to avoid precedence issues
#1609: FILE: include/linux/relayfs_fs.h:147:
+#define relay_get_commit(buf, subbuf_idx)	(buf->commit[subbuf_idx])

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1621: FILE: include/linux/relayfs_fs.h:159:
+static inline unsigned relay_write(struct rchan *chan,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1623: FILE: include/linux/relayfs_fs.h:161:
+				   unsigned length)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1634: FILE: include/linux/relayfs_fs.h:172:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1634: FILE: include/linux/relayfs_fs.h:172:
+ $

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1648: FILE: include/linux/relayfs_fs.h:186:
+static inline unsigned __relay_write(struct rchan *chan,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1650: FILE: include/linux/relayfs_fs.h:188:
+				     unsigned length)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1659: FILE: include/linux/relayfs_fs.h:197:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1659: FILE: include/linux/relayfs_fs.h:197:
+ $

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1673: FILE: include/linux/relayfs_fs.h:211:
+static inline void *relay_reserve(struct rchan *chan, unsigned length)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1683: FILE: include/linux/relayfs_fs.h:221:
+^I$

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1694: FILE: include/linux/relayfs_fs.h:232:
+extern struct file_operations relayfs_file_operations;

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1695: FILE: include/linux/relayfs_fs.h:233:
+extern int relayfs_open(struct inode *inode, struct file *filp);
                                                           ^^^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1695: FILE: include/linux/relayfs_fs.h:233:
+extern int relayfs_open(struct inode *inode, struct file *filp);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1696: FILE: include/linux/relayfs_fs.h:234:
+extern unsigned int relayfs_poll(struct file *filp, poll_table *wait);
                                               ^^^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1696: FILE: include/linux/relayfs_fs.h:234:
+extern unsigned int relayfs_poll(struct file *filp, poll_table *wait);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1697: FILE: include/linux/relayfs_fs.h:235:
+extern int relayfs_mmap(struct file *filp, struct vm_area_struct *vma);
                                      ^^^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1697: FILE: include/linux/relayfs_fs.h:235:
+extern int relayfs_mmap(struct file *filp, struct vm_area_struct *vma);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1698: FILE: include/linux/relayfs_fs.h:236:
+extern int relayfs_release(struct inode *inode, struct file *filp);
                                                              ^^^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1698: FILE: include/linux/relayfs_fs.h:236:
+extern int relayfs_release(struct inode *inode, struct file *filp);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000209183.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 51 errors, 115 warnings, 51 checks, 1575 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000209183.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
