WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#105: FILE: include/linux/generic_hooks.h:1:
+#ifndef GENERIC_HOOKS_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPACING: Unnecessary space before function pointer name
#110: FILE: include/linux/generic_hooks.h:6:
+	void (* handler)(struct task_struct *, struct task_struct *);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited after that '*' (ctx:BxW)
#110: FILE: include/linux/generic_hooks.h:6:
+	void (* handler)(struct task_struct *, struct task_struct *);
 	      ^

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#110: FILE: include/linux/generic_hooks.h:6:
+	void (* handler)(struct task_struct *, struct task_struct *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#110: FILE: include/linux/generic_hooks.h:6:
+	void (* handler)(struct task_struct *, struct task_struct *);

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#121: FILE: init/Kconfig:202:
+config RELAY_FORK
+	tristate "Relay Fork Event"
+	depends on SYSFS
+	default n
+	---help---
+   	  This module sends a signal to one or several processes when a fork
+ 	  occurs in the kernel. It relays information about forks.
+
+   	  The relay fork module is configured by using the sysfs. The main
+	  directory is called "/sys/relayfork" and it contains two files. One
+	  keeps the number of the signal that is send when a fork occurred and
+	  the other is a list of processes that are registered. Those files
+	  are writable. The tree structure is as follow:
+         	sys/
+         	sys/relayfork/
+         	sys/relayfork/processes
+         	sys/relayfork/signal
+
+   	  If you want to register a process, just "echoing" its PID in the
+	  file "processes". Example:
+        	- Register process 123
+          	echo 123 > /sys/relayfork/processes
+        	- Un-Register process 123
+          	echo -123 > /sys/relayfork/processes
+

Kconfig symbols should have a help text which fully describes
it.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#183: FILE: kernel/fork.c:86:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#201: FILE: kernel/fork.c:1265:
+		list_for_each_entry(cb, &do_fork_cb_list,list)
 		                                        ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#222: FILE: kernel/relay_fork.c:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#227: FILE: kernel/relay_fork.c:6:
+ * This module is a relay for fork monitoring. You use the $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#228: FILE: kernel/relay_fork.c:7:
+ * /sys/relayfork/processes to register your process or to $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#229: FILE: kernel/relay_fork.c:8:
+ * display registered processes. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#231: FILE: kernel/relay_fork.c:10:
+ * to all registered processes when a fork occurs in the kernel. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#232: FILE: kernel/relay_fork.c:11:
+ * The signal can be change by using /sys/relayfork/signal. $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#235: FILE: kernel/relay_fork.c:14:
+ * ^Istructures are prefixed by rfork_$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#236: FILE: kernel/relay_fork.c:15:
+ * ^Ifunctions  are prefixed by rfd_$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#237: FILE: kernel/relay_fork.c:16:
+ * ^Ivariable  are prefixed by relayf_$

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#256: FILE: kernel/relay_fork.c:35:
+extern void do_fork_cb_register(struct do_fork_cb *p);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#257: FILE: kernel/relay_fork.c:36:
+extern void do_fork_cb_unregister(struct do_fork_cb *p);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#260: FILE: kernel/relay_fork.c:39:
+ * local definition $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#263: FILE: kernel/relay_fork.c:42:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#272: FILE: kernel/relay_fork.c:51:
+	 ssize_t(*show) (struct rfork_device * dev, char *buf);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: missing space after return type
#272: FILE: kernel/relay_fork.c:51:
+	 ssize_t(*show) (struct rfork_device * dev, char *buf);

WARNING:SPACING: Unnecessary space before function pointer arguments
#272: FILE: kernel/relay_fork.c:51:
+	 ssize_t(*show) (struct rfork_device * dev, char *buf);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#273: FILE: kernel/relay_fork.c:52:
+	 ssize_t(*store) (struct rfork_device * dev, const char *buf,

WARNING:SPACING: missing space after return type
#273: FILE: kernel/relay_fork.c:52:
+	 ssize_t(*store) (struct rfork_device * dev, const char *buf,

WARNING:SPACING: Unnecessary space before function pointer arguments
#273: FILE: kernel/relay_fork.c:52:
+	 ssize_t(*store) (struct rfork_device * dev, const char *buf,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#287: FILE: kernel/relay_fork.c:66:
+
+

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#288: FILE: kernel/relay_fork.c:67:
+ssize_t rfd_attr_show(struct kobject *kobj, struct attribute *attr,

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#290: FILE: kernel/relay_fork.c:69:
+ssize_t rfd_attr_store(struct kobject *kobj, struct attribute *attr,

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#293: FILE: kernel/relay_fork.c:72:
+ssize_t rfd_proclist_show(struct rfork_device *dev, char *buf);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#294: FILE: kernel/relay_fork.c:73:
+ssize_t rfd_proclist_store(struct rfork_device *dev, const char *buf,

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#296: FILE: kernel/relay_fork.c:75:
+ssize_t rfd_signal_show(struct rfork_device *dev, char *buf);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#297: FILE: kernel/relay_fork.c:76:
+ssize_t rfd_signal_store(struct rfork_device *dev, const char *buf,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#300: FILE: kernel/relay_fork.c:79:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#302: FILE: kernel/relay_fork.c:81:
+ * local variable $

WARNING:CONST_STRUCT: struct sysfs_ops should normally be const
#307: FILE: kernel/relay_fork.c:86:
+struct sysfs_ops relayf_sysfs_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#320: FILE: kernel/relay_fork.c:99:
+#define RELAYF_ATTR(_name,_mode,_show,_store)    ^I^I^I\$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#320: FILE: kernel/relay_fork.c:99:
+#define RELAYF_ATTR(_name,_mode,_show,_store)    			\
                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#320: FILE: kernel/relay_fork.c:99:
+#define RELAYF_ATTR(_name,_mode,_show,_store)    			\
                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#320: FILE: kernel/relay_fork.c:99:
+#define RELAYF_ATTR(_name,_mode,_show,_store)    			\
                                      ^

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#320: FILE: kernel/relay_fork.c:99:
+#define RELAYF_ATTR(_name,_mode,_show,_store)    			\
+struct rfork_attribute relayf_attr_##_name = {            		\
+        .attr = {.name  = __stringify(_name) , .mode   = _mode },      	\
+        .show   = _show,                                		\
+        .store  = _store,                               		\
+};

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#321: FILE: kernel/relay_fork.c:100:
+struct rfork_attribute relayf_attr_##_name = {            ^I^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#322: FILE: kernel/relay_fork.c:101:
+        .attr = {.name  = __stringify(_name) , .mode   = _mode },      ^I\$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#322: FILE: kernel/relay_fork.c:101:
+        .attr = {.name  = __stringify(_name) , .mode   = _mode },      ^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#322: FILE: kernel/relay_fork.c:101:
+        .attr = {.name  = __stringify(_name) , .mode   = _mode },      ^I\$

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#322: FILE: kernel/relay_fork.c:101:
+        .attr = {.name  = __stringify(_name) , .mode   = _mode },      	\
                                              ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#323: FILE: kernel/relay_fork.c:102:
+        .show   = _show,                                ^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#323: FILE: kernel/relay_fork.c:102:
+        .show   = _show,                                ^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#323: FILE: kernel/relay_fork.c:102:
+        .show   = _show,                                ^I^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#324: FILE: kernel/relay_fork.c:103:
+        .store  = _store,                               ^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#324: FILE: kernel/relay_fork.c:103:
+        .store  = _store,                               ^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#324: FILE: kernel/relay_fork.c:103:
+        .store  = _store,                               ^I^I\$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#326: FILE: kernel/relay_fork.c:105:
+};
+/* give write access only to root, otherwise it's a security hole */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#330: FILE: kernel/relay_fork.c:109:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#332: FILE: kernel/relay_fork.c:111:
+ * body of local functions $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#335: FILE: kernel/relay_fork.c:114:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#340: FILE: kernel/relay_fork.c:119:
+ * Convert a string to an unsigned long. When we found $

WARNING:TYPO_SPELLING: 'immediatly' may be misspelled - perhaps 'immediately'?
#341: FILE: kernel/relay_fork.c:120:
+ * a character that is not a number, we return immediatly.
                                                ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#342: FILE: kernel/relay_fork.c:121:
+ * The first character can be '-' but if it is, we just $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#397: FILE: kernel/relay_fork.c:176:
+ * Translate the generic struct kobject and struct attribute $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#398: FILE: kernel/relay_fork.c:177:
+ * pointers to the appropriate pointer types, and calls the $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#401: FILE: kernel/relay_fork.c:180:
+ssize_t rfd_attr_show(struct kobject * kobj, struct attribute * attr,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#401: FILE: kernel/relay_fork.c:180:
+ssize_t rfd_attr_show(struct kobject * kobj, struct attribute * attr,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#420: FILE: kernel/relay_fork.c:199:
+ * Translate the generic struct kobject and struct attribute $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#421: FILE: kernel/relay_fork.c:200:
+ * pointers to the appropriate pointer types, and calls the $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#424: FILE: kernel/relay_fork.c:203:
+ssize_t rfd_attr_store(struct kobject * kobj, struct attribute * attr,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#424: FILE: kernel/relay_fork.c:203:
+ssize_t rfd_attr_store(struct kobject * kobj, struct attribute * attr,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#441: FILE: kernel/relay_fork.c:220:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#443: FILE: kernel/relay_fork.c:222:
+ * As the method is called only once for a read, the show() method should $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#445: FILE: kernel/relay_fork.c:224:
+ * are registered. As the size of the buffer is limited, we also limit $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#447: FILE: kernel/relay_fork.c:226:
+ * Method returns the number of bytes printed into the buffer. If a bad $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#450: FILE: kernel/relay_fork.c:229:
+ssize_t rfd_proclist_show(struct rfork_device * dev, char *buf)

CHECK:BRACES: Unbalanced braces around else statement
#467: FILE: kernel/relay_fork.c:246:
+		} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#468: FILE: kernel/relay_fork.c:247:
+^I^I^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#485: FILE: kernel/relay_fork.c:264:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#486: FILE: kernel/relay_fork.c:265:
+ * As the method is called only once for a write, the store() method should $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#487: FILE: kernel/relay_fork.c:266:
+ * fill the entire buffer. Methods should return the number of bytes used $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#490: FILE: kernel/relay_fork.c:269:
+ssize_t rfd_proclist_store(struct rfork_device * dev, const char *buf,

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*p)...) over kmalloc(sizeof(struct rfork_proclist)...)
#539: FILE: kernel/relay_fork.c:318:
+		p = kmalloc(sizeof(struct rfork_proclist), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#561: FILE: kernel/relay_fork.c:340:
+ssize_t rfd_signal_show(struct rfork_device * dev, char *buf)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#573: FILE: kernel/relay_fork.c:352:
+ * integer. This value is used to set the new RT signal. A RT signal $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#576: FILE: kernel/relay_fork.c:355:
+ssize_t rfd_signal_store(struct rfork_device * dev, const char *buf,

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rtsignal > SIGRTMIN'
#582: FILE: kernel/relay_fork.c:361:
+	if ((rtsignal > SIGRTMIN) && (rtsignal < SIGRTMAX))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rtsignal < SIGRTMAX'
#582: FILE: kernel/relay_fork.c:361:
+	if ((rtsignal > SIGRTMIN) && (rtsignal < SIGRTMAX))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#591: FILE: kernel/relay_fork.c:370:
+ * @parent: PID of the parent $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#594: FILE: kernel/relay_fork.c:373:
+ * Send information to all registered processes when a fork $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#595: FILE: kernel/relay_fork.c:374:
+ * occurs in the kernel. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#602: FILE: kernel/relay_fork.c:381:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#661: FILE: kernel/relay_fork.c:440:
+^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#674: FILE: kernel/relay_fork.c:453:
+ * rfd_cleanup - $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#696: FILE: kernel/relay_fork.c:475:
+
+

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000208529.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 48 errors, 32 warnings, 12 checks, 575 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000208529.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
