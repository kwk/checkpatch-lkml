WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#29: 
are a bit different from other pages and are treated a little differently.  For 

WARNING:REPEATED_WORD: Possible repeated word: 'have'
#40: 
tried (I have have experimented quite a bit).  It also avoids using any magic

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#63: 
# This is a BitKeeper generated patch for the following project:

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#64: 
# Project Name: Linux kernel tree

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#65: 
# This patch format is intended for GNU patch command version 2.5 or higher.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#66: 
# This patch includes the following deltas:

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#67: 
#	           ChangeSet	1.423   -> 1.425  

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#68: 
#	         fs/dcache.c	1.19    -> 1.20   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#69: 
#	          fs/dquot.c	1.19    -> 1.20   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#70: 
#	         mm/vmscan.c	1.69    -> 1.71   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#71: 
#	           mm/slab.c	1.17    -> 1.19   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#72: 
#	          fs/inode.c	1.35    -> 1.36   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#73: 
#	include/linux/slab.h	1.10    -> 1.12   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#74: 
#	include/linux/dcache.h	1.11    -> 1.12   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#75: 
#

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#76: 
# The following is the BitKeeper ChangeSet Log

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#77: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#78: 
# 02/05/31	ed@oscar.et.ca	1.424

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#79: 
# [PATCH] move slab pages into the lru

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#80: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#81: 
# 02/06/03	ed@oscar.et.ca	1.425

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#82: 
# Various locking improvements and fixes.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#83: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#84: 
#

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#86: 
--- a/fs/dcache.c	Mon Jun  3 21:01:57 2002

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#118: FILE: fs/dcache.c:539:
+ * more memory. $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#156: FILE: fs/dcache.c:1273:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#158: FILE: fs/dcache.c:1275:
+^I$

ERROR:SPACING: space required before the open parenthesis '('
#190: FILE: fs/inode.c:675:
+	for(; goal; goal--) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#272: FILE: include/linux/slab.h:61:
+extern void kmem_set_pruner(kmem_cache_t *, kmem_pruner_t);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kmem_cache_t *' should also have an identifier name
#272: FILE: include/linux/slab.h:61:
+extern void kmem_set_pruner(kmem_cache_t *, kmem_pruner_t);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kmem_pruner_t' should also have an identifier name
#272: FILE: include/linux/slab.h:61:
+extern void kmem_set_pruner(kmem_cache_t *, kmem_pruner_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#273: FILE: include/linux/slab.h:62:
+extern int kmem_do_prunes(int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#273: FILE: include/linux/slab.h:62:
+extern int kmem_do_prunes(int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#274: FILE: include/linux/slab.h:63:
+extern int kmem_count_page(struct page *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#274: FILE: include/linux/slab.h:63:
+extern int kmem_count_page(struct page *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#274: FILE: include/linux/slab.h:63:
+extern int kmem_count_page(struct page *, int);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#275: FILE: include/linux/slab.h:64:
+#define kmem_touch_page(addr)                 SetPageReferenced(virt_to_page(addr));

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#278: FILE: include/linux/slab.h:67:
+extern int kmem_shrink_slab(struct page *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#278: FILE: include/linux/slab.h:67:
+extern int kmem_shrink_slab(struct page *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#281: FILE: include/linux/slab.h:70:
+extern int age_dcache_memory(kmem_cache_t *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kmem_cache_t *' should also have an identifier name
#281: FILE: include/linux/slab.h:70:
+extern int age_dcache_memory(kmem_cache_t *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#281: FILE: include/linux/slab.h:70:
+extern int age_dcache_memory(kmem_cache_t *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#281: FILE: include/linux/slab.h:70:
+extern int age_dcache_memory(kmem_cache_t *, int, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#284: FILE: include/linux/slab.h:73:
+extern int age_icache_memory(kmem_cache_t *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kmem_cache_t *' should also have an identifier name
#284: FILE: include/linux/slab.h:73:
+extern int age_icache_memory(kmem_cache_t *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#284: FILE: include/linux/slab.h:73:
+extern int age_icache_memory(kmem_cache_t *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#284: FILE: include/linux/slab.h:73:
+extern int age_icache_memory(kmem_cache_t *, int, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#287: FILE: include/linux/slab.h:76:
+extern int age_dqcache_memory(kmem_cache_t *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kmem_cache_t *' should also have an identifier name
#287: FILE: include/linux/slab.h:76:
+extern int age_dqcache_memory(kmem_cache_t *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#287: FILE: include/linux/slab.h:76:
+extern int age_dqcache_memory(kmem_cache_t *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#287: FILE: include/linux/slab.h:76:
+extern int age_dqcache_memory(kmem_cache_t *, int, int);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#308: FILE: mm/slab.c:217:
+^Iint ^I^I^Icount;^I^I/* count used to trigger shrink */$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#316: FILE: mm/slab.c:256:
+#define^IDFLGS_NONLRU^I0x000002UL^I/* there are reciently allocated $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#317: FILE: mm/slab.c:257:
+#define	DFLGS_NONLRU	0x000002UL	/* there are reciently allocated 
+					   non lru pages in this cache */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#317: FILE: mm/slab.c:257:
+					   non lru pages in this cache */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#330: FILE: mm/slab.c:389:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#330: FILE: mm/slab.c:389:
+ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#331: FILE: mm/slab.c:390:
+/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#334: FILE: mm/slab.c:393:
+void kmem_set_pruner(kmem_cache_t * cachep, kmem_pruner_t thepruner) $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#334: FILE: mm/slab.c:393:
+void kmem_set_pruner(kmem_cache_t * cachep, kmem_pruner_t thepruner) 

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#337: FILE: mm/slab.c:396:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:TRAILING_WHITESPACE: trailing whitespace
#341: FILE: mm/slab.c:400:
+/* $

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#348: FILE: mm/slab.c:407:
+	int ret =0;
 	        ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#349: FILE: mm/slab.c:408:
+	int ret =0;
+	spin_lock(&cachep->spinlock);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#350: FILE: mm/slab.c:409:
+	if (cachep->pruner != NULL) {
[...]
+	} else 
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cachep->pruner"
#350: FILE: mm/slab.c:409:
+	if (cachep->pruner != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:TRAILING_WHITESPACE: trailing whitespace
#353: FILE: mm/slab.c:412:
+^I} else $

CHECK:BRACES: Unbalanced braces around else statement
#353: FILE: mm/slab.c:412:
+	} else 

CHECK:LINE_SPACING: Please don't use multiple blank lines
#359: FILE: mm/slab.c:418:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#361: FILE: mm/slab.c:420:
+int kmem_do_prunes(int gfp_mask) $

ERROR:CODE_INDENT: code indent should use tabs where possible
#366: FILE: mm/slab.c:425:
+        if (gfp_mask & __GFP_WAIT)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#366: FILE: mm/slab.c:425:
+        if (gfp_mask & __GFP_WAIT)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#367: FILE: mm/slab.c:426:
+                down(&cache_chain_sem);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#367: FILE: mm/slab.c:426:
+                down(&cache_chain_sem);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#368: FILE: mm/slab.c:427:
+        else$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#368: FILE: mm/slab.c:427:
+        else$

ERROR:CODE_INDENT: code indent should use tabs where possible
#369: FILE: mm/slab.c:428:
+                if (down_trylock(&cache_chain_sem))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#369: FILE: mm/slab.c:428:
+                if (down_trylock(&cache_chain_sem))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#370: FILE: mm/slab.c:429:
+                        return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#370: FILE: mm/slab.c:429:
+                        return 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#372: FILE: mm/slab.c:431:
+        list_for_each(p,&cache_chain) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#372: FILE: mm/slab.c:431:
+        list_for_each(p,&cache_chain) {$

ERROR:SPACING: space required after that ',' (ctx:VxO)
#372: FILE: mm/slab.c:431:
+        list_for_each(p,&cache_chain) {
                        ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#372: FILE: mm/slab.c:431:
+        list_for_each(p,&cache_chain) {
                         ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#373: FILE: mm/slab.c:432:
+                kmem_cache_t *cachep = list_entry(p, kmem_cache_t, next);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#373: FILE: mm/slab.c:432:
+                kmem_cache_t *cachep = list_entry(p, kmem_cache_t, next);$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cachep->pruner"
#374: FILE: mm/slab.c:433:
+		if (cachep->pruner != NULL) {

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#382: FILE: mm/slab.c:441:
+
+		}

ERROR:CODE_INDENT: code indent should use tabs where possible
#384: FILE: mm/slab.c:443:
+        up(&cache_chain_sem);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#384: FILE: mm/slab.c:443:
+        up(&cache_chain_sem);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#407: FILE: mm/slab.c:569:
+/* Interface to system's page release. $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#408: FILE: mm/slab.c:570:
+ * Normally called with pagemap_lru_lock held */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#417: FILE: mm/slab.c:582:
+^I^Iif (cachep->flags & SLAB_NO_REAP) $

CHECK:BRACES: braces {} should be used on all arms of this statement
#417: FILE: mm/slab.c:582:
+		if (cachep->flags & SLAB_NO_REAP) 
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#419: FILE: mm/slab.c:584:
+		else {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#437: FILE: mm/slab.c:623:
 
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#482: FILE: mm/slab.c:1052:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#482: FILE: mm/slab.c:1052:
+ $

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#490: FILE: mm/slab.c:1059:
+	return ret<<cachep->gfporder;
 	          ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#493: FILE: mm/slab.c:1062:
 
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#494: FILE: mm/slab.c:1063:
+/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#497: FILE: mm/slab.c:1066:
+ * pages since the last time we shrunk this cache. $

ERROR:CODE_INDENT: code indent should use tabs where possible
#509: FILE: mm/slab.c:1078:
+^I ^Iif (!cachep->growing) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#509: FILE: mm/slab.c:1078:
+^I ^Iif (!cachep->growing) {$

WARNING:LINE_SPACING: Missing a blank line after declarations
#512: FILE: mm/slab.c:1081:
+				int nr = __kmem_cache_shrink_locked(cachep);
+				cachep->dflags &= ~DFLGS_NONLRU;

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#514: FILE: mm/slab.c:1083:
+				return nr<<cachep->gfporder;
 				         ^

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#515: FILE: mm/slab.c:1084:
+				return nr<<cachep->gfporder;
+			} else {

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#519: FILE: mm/slab.c:1088:
+				return 1<<cachep->gfporder;
 				        ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#522: FILE: mm/slab.c:1091:
+				BUG();

ERROR:TRAILING_WHITESPACE: trailing whitespace
#526: FILE: mm/slab.c:1095:
+^Ireturn 0; $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#529: FILE: mm/slab.c:1098:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#546: FILE: mm/slab.c:1285:
+^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#547: FILE: mm/slab.c:1286:
+^I * We want the pagemap_lru_lock, in UP spin locks to not $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#549: FILE: mm/slab.c:1288:
+^I * optimizating for speed, we process if we do not get it. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#569: FILE: mm/slab.c:1312:
+^I^Iif (locked) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#592: FILE: mm/slab.c:1337:
+^I/* do not use kmem_freepages - we are not in the lru yet... */      $

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#643: FILE: mm/vmscan.c:275:
+			BUG();

ERROR:TRAILING_WHITESPACE: trailing whitespace
#674: FILE: mm/vmscan.c:542:
+^I^I * and moves the page(s) to the inactive clean list. $

CHECK:CAMELCASE: Avoid CamelCase: <UnlockPage>
#678: FILE: mm/vmscan.c:546:
+			UnlockPage(page);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:LINE_SPACING: Missing a blank line after declarations
#681: FILE: mm/vmscan.c:549:
+				int pages = kmem_shrink_slab(page);
+				if (pages) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#693: FILE: mm/vmscan.c:561:
+^I^I/* $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#701: FILE: mm/vmscan.c:594:
 
+

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000452402.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 38 errors, 62 warnings, 23 checks, 610 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000452402.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
