WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#28: 
Though the config option is still named CONFIG_LARGE_PAGE, but there are lot

WARNING:TYPO_SPELLING: 'physcial' may be misspelled - perhaps 'physical'?
#42: 
physcial huge pages.
^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#67: FILE: arch/i386/config.in:156:
CONFIG_LARGE_PAGE

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#96: FILE: arch/i386/kernel/sys_i386.c:251:
+#define LPAGE_ALIGN(x)  (((unsigned long)x + (LPAGE_SIZE -1)) & LPAGE_MASK)
                                                          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#96: FILE: arch/i386/kernel/sys_i386.c:251:
+#define LPAGE_ALIGN(x)  (((unsigned long)x + (LPAGE_SIZE -1)) & LPAGE_MASK)

WARNING:TYPO_SPELLING: 'virtaul' may be misspelled - perhaps 'virtual'?
#98: FILE: arch/i386/kernel/sys_i386.c:253:
+/* get_addr function gets the currently unused virtaul range in
                                                ^^^^^^^

WARNING:TYPO_SPELLING: 'gurantee' may be misspelled - perhaps 'guarantee'?
#101: FILE: arch/i386/kernel/sys_i386.c:256:
+ * routines only could gurantee that allocated address is PAGE_SIZSE
                        ^^^^^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#108: FILE: arch/i386/kernel/sys_i386.c:262:
+	struct vm_area_struct   *vma;
+	if (addr) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#112: FILE: arch/i386/kernel/sys_i386.c:266:
+		if (((TASK_SIZE - len) >= addr) &&
+				(!vma || addr + len <= vma->vm_start))

WARNING:LINE_SPACING: Missing a blank line after declarations
#134: FILE: arch/i386/kernel/sys_i386.c:287:
+	int     retval;
+	extern int alloc_hugetlb_pages(int, unsigned long *, unsigned long,

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#134: FILE: arch/i386/kernel/sys_i386.c:287:
+	extern int alloc_hugetlb_pages(int, unsigned long *, unsigned long,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#134: FILE: arch/i386/kernel/sys_i386.c:287:
+	extern int alloc_hugetlb_pages(int, unsigned long *, unsigned long,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long *' should also have an identifier name
#134: FILE: arch/i386/kernel/sys_i386.c:287:
+	extern int alloc_hugetlb_pages(int, unsigned long *, unsigned long,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#134: FILE: arch/i386/kernel/sys_i386.c:287:
+	extern int alloc_hugetlb_pages(int, unsigned long *, unsigned long,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#134: FILE: arch/i386/kernel/sys_i386.c:287:
+	extern int alloc_hugetlb_pages(int, unsigned long *, unsigned long,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#136: FILE: arch/i386/kernel/sys_i386.c:288:
+	extern int alloc_hugetlb_pages(int, unsigned long *, unsigned long,
+	if (!(cpu_has_pse))

CHECK:SPACING: No space is necessary after a cast
#147: FILE: arch/i386/kernel/sys_i386.c:299:
+		return (unsigned long) retval;

WARNING:LINE_SPACING: Missing a blank line after declarations
#155: FILE: arch/i386/kernel/sys_i386.c:307:
+	struct vm_area_struct   *vma;
+	extern int free_hugepages(struct vm_area_struct *);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#155: FILE: arch/i386/kernel/sys_i386.c:307:
+	extern int free_hugepages(struct vm_area_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vm_area_struct *' should also have an identifier name
#155: FILE: arch/i386/kernel/sys_i386.c:307:
+	extern int free_hugepages(struct vm_area_struct *);

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#158: FILE: arch/i386/kernel/sys_i386.c:310:
+	if ((!vma) || (!is_vm_hugetlb_page(vma)) || (vma->vm_start!=addr))
 	                                                          ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!vma'
#158: FILE: arch/i386/kernel/sys_i386.c:310:
+	if ((!vma) || (!is_vm_hugetlb_page(vma)) || (vma->vm_start!=addr))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'vma->vm_start!=addr'
#158: FILE: arch/i386/kernel/sys_i386.c:310:
+	if ((!vma) || (!is_vm_hugetlb_page(vma)) || (vma->vm_start!=addr))

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#169: FILE: arch/i386/kernel/sys_i386.c:320:
+	return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#171: FILE: arch/i386/kernel/sys_i386.c:322:
+}
+asmlinkage int

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#174: FILE: arch/i386/kernel/sys_i386.c:325:
+	return -ENOSYS;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#198: FILE: arch/i386/mm/init.c:410:
+long    lpagemem = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#201: FILE: arch/i386/mm/init.c:413:
+extern struct   list_head lpage_freelist;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#220: FILE: arch/i386/mm/init.c:490:
+		for (i=0; i<lpzone_pages; i++) {
 		      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#220: FILE: arch/i386/mm/init.c:490:
+		for (i=0; i<lpzone_pages; i++) {
 		           ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!page"
#222: FILE: arch/i386/mm/init.c:492:
+			if (page == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#225: FILE: arch/i386/mm/init.c:495:
+			for (j=0; j<(LPAGE_SIZE/PAGE_SIZE); j++) {
 			      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#225: FILE: arch/i386/mm/init.c:495:
+			for (j=0; j<(LPAGE_SIZE/PAGE_SIZE); j++) {
 			           ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#225: FILE: arch/i386/mm/init.c:495:
+			for (j=0; j<(LPAGE_SIZE/PAGE_SIZE); j++) {
 			                       ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#231: FILE: arch/i386/mm/init.c:501:
+		printk("Total Large_page memory pages allocated %ld\n", i);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#232: FILE: arch/i386/mm/init.c:502:
+		lpzone_pages = lpagemem = i;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#244: FILE: arch/i386/mm/lpage.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:LINE_SPACING: Please don't use multiple blank lines
#250: FILE: arch/i386/mm/lpage.c:7:
+
+

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/uaccess.h> instead of <asm/uaccess.h>
#264: FILE: arch/i386/mm/lpage.c:21:
+#include <asm/uaccess.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

WARNING:CONST_STRUCT: struct vm_operations_struct should normally be const
#267: FILE: arch/i386/mm/lpage.c:24:
+static struct vm_operations_struct	hugetlb_vm_ops;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#268: FILE: arch/i386/mm/lpage.c:25:
+struct list_head ^I^I^Ilpage_freelist;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#270: FILE: arch/i386/mm/lpage.c:27:
+extern^Ilong ^I^I^I^Ilpagemem;$

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#270: FILE: arch/i386/mm/lpage.c:27:
+extern	long 				lpagemem;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#272: FILE: arch/i386/mm/lpage.c:29:
+void zap_hugetlb_resources(struct vm_area_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vm_area_struct *' should also have an identifier name
#272: FILE: arch/i386/mm/lpage.c:29:
+void zap_hugetlb_resources(struct vm_area_struct *);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#274: FILE: arch/i386/mm/lpage.c:31:
+#define MAX_ID ^I32$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#285: FILE: arch/i386/mm/lpage.c:42:
+	for (i=0; i<MAX_ID; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#285: FILE: arch/i386/mm/lpage.c:42:
+	for (i=0; i<MAX_ID; i++) {
 	           ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#286: FILE: arch/i386/mm/lpage.c:43:
+^I^Iif (lpk[i].key == key) $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#291: FILE: arch/i386/mm/lpage.c:48:
+}
+static struct page *

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'page->mapping != NULL'
#318: FILE: arch/i386/mm/lpage.c:75:
+	if ((page->mapping != NULL) && (page_count(page) == 2)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "page->mapping"
#318: FILE: arch/i386/mm/lpage.c:75:
+	if ((page->mapping != NULL) && (page_count(page) == 2)) {

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#320: FILE: arch/i386/mm/lpage.c:77:
+^I^Iint ^Ii;$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#325: FILE: arch/i386/mm/lpage.c:82:
+		if ((inode->i_size -= LPAGE_SIZE) == 0) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#326: FILE: arch/i386/mm/lpage.c:83:
+			for (i=0;i<MAX_ID;i++)
 			      ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#326: FILE: arch/i386/mm/lpage.c:83:
+			for (i=0;i<MAX_ID;i++)
 			        ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#326: FILE: arch/i386/mm/lpage.c:83:
+			for (i=0;i<MAX_ID;i++)
 			          ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#326: FILE: arch/i386/mm/lpage.c:83:
+			for (i=0;i<MAX_ID;i++)
 			                 ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#358: FILE: arch/i386/mm/lpage.c:115:
+^I$

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#359: FILE: arch/i386/mm/lpage.c:116:
+	pgd =pgd_offset(mm, addr);
 	    ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#364: FILE: arch/i386/mm/lpage.c:121:
+#define mk_pte_huge(entry) {entry.pte_low |= (_PAGE_PRESENT | _PAGE_PSE);}
                                                                         ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#365: FILE: arch/i386/mm/lpage.c:122:
+^I$

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#372: FILE: arch/i386/mm/lpage.c:128:
+	mm->rss += (LPAGE_SIZE/PAGE_SIZE);
 	                      ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#373: FILE: arch/i386/mm/lpage.c:129:
+	if (write_access) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#376: FILE: arch/i386/mm/lpage.c:131:
+		entry = pte_mkwrite(pte_mkdirty(mk_pte(page,
+	} else

CHECK:BRACES: Unbalanced braces around else statement
#376: FILE: arch/i386/mm/lpage.c:131:
+	} else

WARNING:RETURN_VOID: void function return statements are not generally useful
#382: FILE: arch/i386/mm/lpage.c:137:
+	return;
+}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#391: FILE: arch/i386/mm/lpage.c:145:
+^Iif (page == NULL) $

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!page"
#391: FILE: arch/i386/mm/lpage.c:145:
+	if (page == NULL) 

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#403: FILE: arch/i386/mm/lpage.c:156:
+	struct vm_area_struct * vma;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#411: FILE: arch/i386/mm/lpage.c:164:
+	if ((vma->vm_end - vma->vm_start) & (LPAGE_SIZE-1))
 	                                               ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#414: FILE: arch/i386/mm/lpage.c:167:
+^Ido {    $

CHECK:BRACES: braces {} should be used on all arms of this statement
#416: FILE: arch/i386/mm/lpage.c:169:
+		if ((pte) && (pte_none(*pte))) {
[...]
+		} else
[...]

ERROR:TRAILING_WHITESPACE: trailing whitespace
#417: FILE: arch/i386/mm/lpage.c:170:
+^I^I^Iif (anon_get_lpage(mm, vma, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#418: FILE: arch/i386/mm/lpage.c:171:
+			if (anon_get_lpage(mm, vma, 
+				write ? VM_WRITE : VM_READ, pte) == -1)

CHECK:BRACES: Unbalanced braces around else statement
#420: FILE: arch/i386/mm/lpage.c:173:
+		} else

ERROR:TRAILING_WHITESPACE: trailing whitespace
#423: FILE: arch/i386/mm/lpage.c:176:
+^I} while (addr < end); $

ERROR:SPACING: space prohibited before that close parenthesis ')'
#426: FILE: arch/i386/mm/lpage.c:179:
+	if (flags & MAP_PRIVATE )

ERROR:TRAILING_WHITESPACE: trailing whitespace
#431: FILE: arch/i386/mm/lpage.c:184:
+^Iif (addr > vma->vm_start) { $

ERROR:CODE_INDENT: code indent should use tabs where possible
#432: FILE: arch/i386/mm/lpage.c:185:
+^I   ^Ivma->vm_end = addr ;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#432: FILE: arch/i386/mm/lpage.c:185:
+^I   ^Ivma->vm_end = addr ;$

WARNING:SPACING: space prohibited before semicolon
#432: FILE: arch/i386/mm/lpage.c:185:
+	   	vma->vm_end = addr ;

ERROR:CODE_INDENT: code indent should use tabs where possible
#433: FILE: arch/i386/mm/lpage.c:186:
+^I   ^Izap_hugetlb_resources(vma);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#433: FILE: arch/i386/mm/lpage.c:186:
+^I   ^Izap_hugetlb_resources(vma);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#434: FILE: arch/i386/mm/lpage.c:187:
+^I   ^Ivma->vm_end = end;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#434: FILE: arch/i386/mm/lpage.c:187:
+^I   ^Ivma->vm_end = end;$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#444: FILE: arch/i386/mm/lpage.c:196:
+copy_hugetlb_page_range(struct mm_struct *dst, struct mm_struct *src,
+{

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#446: FILE: arch/i386/mm/lpage.c:198:
+^Istruct page ^I*ptepage;$

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#459: FILE: arch/i386/mm/lpage.c:211:
+			dst->rss += (LPAGE_SIZE/PAGE_SIZE);
 			                       ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#460: FILE: arch/i386/mm/lpage.c:212:
+^I^I^Iaddr += LPAGE_SIZE; $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#462: FILE: arch/i386/mm/lpage.c:214:
+    return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#465: FILE: arch/i386/mm/lpage.c:217:
+    return -ENOMEM;$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#467: FILE: arch/i386/mm/lpage.c:219:
+}
+int

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#471: FILE: arch/i386/mm/lpage.c:221:
+follow_hugetlb_page(struct mm_struct *mm, struct vm_area_struct *vma,
+{

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'start <
 ma->vm_end'
#495: FILE: arch/i386/mm/lpage.c:245:
+		if (((start & LPAGE_MASK) == pstart) && len && (start <
vma->vm_end))

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#508: FILE: arch/i386/mm/lpage.c:257:
+^Iunsigned long ^Ilen, addr, end;$

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#536: FILE: arch/i386/mm/lpage.c:285:
+	}
+	else {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#536: FILE: arch/i386/mm/lpage.c:285:
+	else {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#537: FILE: arch/i386/mm/lpage.c:286:
+		while (vma->vm_next != mpnt) {
+			vma = vma->vm_next;
+		}

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#566: FILE: arch/i386/mm/lpage.c:315:
+	for (i=0; i<MAX_ID; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#566: FILE: arch/i386/mm/lpage.c:315:
+	for (i=0; i<MAX_ID; i++) {
 	           ^

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*inode)...) over kmalloc(sizeof(struct inode)...)
#572: FILE: arch/i386/mm/lpage.c:321:
+	inode = kmalloc(sizeof(struct inode), GFP_ATOMIC);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!inode"
#573: FILE: arch/i386/mm/lpage.c:322:
+	if (inode == NULL)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#575: FILE: arch/i386/mm/lpage.c:324:
+^I$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#626: FILE: arch/i386/mm/lpage.c:374:
+^Iunsigned long ^I^I^Iaddr = *raddr;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#628: FILE: arch/i386/mm/lpage.c:376:
+^Iint ^Iretval = -ENOMEM;$

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#630: FILE: arch/i386/mm/lpage.c:378:
+	if (len & (LPAGE_SIZE -1))
 	                      ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!inode"
#634: FILE: arch/i386/mm/lpage.c:382:
+	if (inode == NULL) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#638: FILE: arch/i386/mm/lpage.c:386:
+^I^Iif (inode == NULL) $

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!inode"
#638: FILE: arch/i386/mm/lpage.c:386:
+		if (inode == NULL) 

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#641: FILE: arch/i386/mm/lpage.c:389:
+	}
+	else

ERROR:TRAILING_WHITESPACE: trailing whitespace
#646: FILE: arch/i386/mm/lpage.c:394:
+^Iaddr = do_mmap_pgoff(NULL, addr, len, (unsigned long)prot, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#647: FILE: arch/i386/mm/lpage.c:395:
+	addr = do_mmap_pgoff(NULL, addr, len, (unsigned long)prot, 
+			MAP_FIXED|MAP_PRIVATE | MAP_ANONYMOUS, 0);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#647: FILE: arch/i386/mm/lpage.c:395:
+			MAP_FIXED|MAP_PRIVATE | MAP_ANONYMOUS, 0);
 			         ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#648: FILE: arch/i386/mm/lpage.c:396:
+^Iif (IS_ERR((void *)addr)) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#649: FILE: arch/i386/mm/lpage.c:397:
+^I^Ireturn -ENOMEM; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#654: FILE: arch/i386/mm/lpage.c:402:
+^I$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#658: FILE: arch/i386/mm/lpage.c:406:
+		pte_t * pte = huge_pte_alloc(mm, addr);

WARNING:LINE_SPACING: Missing a blank line after declarations
#659: FILE: arch/i386/mm/lpage.c:407:
+		pte_t * pte = huge_pte_alloc(mm, addr);
+		if ((pte) && (pte_none(*pte))) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#659: FILE: arch/i386/mm/lpage.c:407:
+		if ((pte) && (pte_none(*pte))) {
[...]
+		} else 
[...]

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!page"
#662: FILE: arch/i386/mm/lpage.c:410:
+			if (page == NULL) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#663: FILE: arch/i386/mm/lpage.c:411:
+^I^I^I^Ipage = alloc_hugetlb_page();^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#664: FILE: arch/i386/mm/lpage.c:412:
+^I^I^I^Iif (page == NULL) $

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!page"
#664: FILE: arch/i386/mm/lpage.c:412:
+				if (page == NULL) 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#665: FILE: arch/i386/mm/lpage.c:413:
+^I^I^I^I^Igoto out;^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#670: FILE: arch/i386/mm/lpage.c:417:
+^I^I} else $

CHECK:BRACES: Unbalanced braces around else statement
#670: FILE: arch/i386/mm/lpage.c:417:
+		} else 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#673: FILE: arch/i386/mm/lpage.c:420:
+^I} while (addr < vma->vm_end); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#698: FILE: arch/i386/mm/lpage.c:443:
+^Iif (IS_ERR((void *)addr)) $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#698: FILE: arch/i386/mm/lpage.c:443:
+	addr = do_mmap_pgoff(NULL, addr, len, prot,
+	if (IS_ERR((void *)addr)) 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#699: FILE: arch/i386/mm/lpage.c:444:
+^I^Ireturn -ENOMEM; $

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#700: FILE: arch/i386/mm/lpage.c:445:
+	if (addr & (LPAGE_SIZE -1)) { /*Should not happen. */
 	                       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#704: FILE: arch/i386/mm/lpage.c:449:
+	if (make_hugetlb_pages_present(addr, (addr+len), flag) < 0) {
 	                                          ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#716: FILE: arch/i386/mm/lpage.c:460:
+^Iif (key > 0) $

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#729: FILE: arch/i386/mm/lpage.c:471:
+	extern long        lpzone_pages;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#730: FILE: arch/i386/mm/lpage.c:472:
+	extern struct list_head lpage_freelist;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#734: FILE: arch/i386/mm/lpage.c:476:
+^Ielse $

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!page"
#740: FILE: arch/i386/mm/lpage.c:482:
+			if (page == NULL)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#743: FILE: arch/i386/mm/lpage.c:485:
+			for (j=0; j<(LPAGE_SIZE/PAGE_SIZE); j++) {
 			      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#743: FILE: arch/i386/mm/lpage.c:485:
+			for (j=0; j<(LPAGE_SIZE/PAGE_SIZE); j++) {
 			           ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#743: FILE: arch/i386/mm/lpage.c:485:
+			for (j=0; j<(LPAGE_SIZE/PAGE_SIZE); j++) {
 			                       ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!page"
#758: FILE: arch/i386/mm/lpage.c:500:
+		if (page == NULL)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#764: FILE: arch/i386/mm/lpage.c:506:
+		for (j=0; j<(LPAGE_SIZE/PAGE_SIZE); j++) {
 		      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#764: FILE: arch/i386/mm/lpage.c:506:
+		for (j=0; j<(LPAGE_SIZE/PAGE_SIZE); j++) {
 		           ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#764: FILE: arch/i386/mm/lpage.c:506:
+		for (j=0; j<(LPAGE_SIZE/PAGE_SIZE); j++) {
 		                       ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#772: FILE: arch/i386/mm/lpage.c:514:
+}
+static struct vm_operations_struct	hugetlb_vm_ops = {

WARNING:CONST_STRUCT: struct vm_operations_struct should normally be const
#772: FILE: arch/i386/mm/lpage.c:514:
+static struct vm_operations_struct	hugetlb_vm_ops = {

WARNING:INDENTED_LABEL: labels should not be indented
#773: FILE: arch/i386/mm/lpage.c:515:
+	close: zap_hugetlb_resources,

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#809: FILE: fs/proc/proc_misc.c:191:
+		extern  unsigned long lpagemem, lpzone_pages;

WARNING:LINE_SPACING: Missing a blank line after declarations
#810: FILE: fs/proc/proc_misc.c:192:
+		extern  unsigned long lpagemem, lpzone_pages;
+		len += sprintf(page+len,"Total # of LargePages:

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#810: FILE: fs/proc/proc_misc.c:192:
+		len += sprintf(page+len,"Total # of LargePages:
 		                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#810: FILE: fs/proc/proc_misc.c:192:
+		len += sprintf(page+len,"Total # of LargePages:
 		                       ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#812: FILE: fs/proc/proc_misc.c:193:
+				"LargePageSize: %8lu(0x%xKB)\n",
 				              ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#812: FILE: fs/proc/proc_misc.c:193:
+				"LargePageSize: %8lu(0x%xKB)\n",
 				                ^

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#812: FILE: fs/proc/proc_misc.c:193:
+				"LargePageSize: %8lu(0x%xKB)\n",
 				                       ^

CHECK:CAMELCASE: Avoid CamelCase: <LargePageSize>
#812: FILE: fs/proc/proc_misc.c:193:
+				"LargePageSize: %8lu(0x%xKB)\n",

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <xKB>
#812: FILE: fs/proc/proc_misc.c:193:
+				"LargePageSize: %8lu(0x%xKB)\n",

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'vma' may be better as '(vma)' to avoid precedence issues
#866: FILE: include/linux/mm.h:365:
+#define is_vm_hugetlb_page(vma) (vma->vm_flags & VM_HUGETLB)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#867: FILE: include/linux/mm.h:366:
+extern int copy_hugetlb_page_range(struct mm_struct *, struct mm_struct *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#869: FILE: include/linux/mm.h:367:
+extern int copy_hugetlb_page_range(struct mm_struct *, struct mm_struct *,
+extern int follow_hugetlb_page(struct mm_struct *, struct vm_area_struct *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#869: FILE: include/linux/mm.h:367:
+extern int follow_hugetlb_page(struct mm_struct *, struct vm_area_struct *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mm_struct *' should also have an identifier name
#869: FILE: include/linux/mm.h:367:
+extern int follow_hugetlb_page(struct mm_struct *, struct vm_area_struct *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vm_area_struct *' should also have an identifier name
#869: FILE: include/linux/mm.h:367:
+extern int follow_hugetlb_page(struct mm_struct *, struct vm_area_struct *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vm_area_struct **' should also have an identifier name
#869: FILE: include/linux/mm.h:367:
+extern int follow_hugetlb_page(struct mm_struct *, struct vm_area_struct *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long *' should also have an identifier name
#869: FILE: include/linux/mm.h:367:
+extern int follow_hugetlb_page(struct mm_struct *, struct vm_area_struct *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int *' should also have an identifier name
#869: FILE: include/linux/mm.h:367:
+extern int follow_hugetlb_page(struct mm_struct *, struct vm_area_struct *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#869: FILE: include/linux/mm.h:367:
+extern int follow_hugetlb_page(struct mm_struct *, struct vm_area_struct *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#870: FILE: include/linux/mm.h:367:
+extern int copy_hugetlb_page_range(struct mm_struct *, struct mm_struct *,
struct page **, struct vm_area_struct **, unsigned long *, int *, int);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#871: FILE: include/linux/mm.h:368:
+extern int follow_hugetlb_page(struct mm_struct *, struct vm_area_struct *,
+#else

CHECK:LINE_SPACING: Please don't use multiple blank lines
#877: FILE: include/linux/mm.h:374:
+
+

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#917: FILE: kernel/sysctl.c:102:
+extern	int	set_hugetlb_page_size(int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#917: FILE: kernel/sysctl.c:102:
+extern	int	set_hugetlb_page_size(int);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000440528.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 56 errors, 54 warnings, 62 checks, 891 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000440528.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
