CHECK:BRACES: braces {} should be used on all arms of this statement
#109: FILE: arch/x86_64/kernel/traps.c:198:
+		if (i > 50) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#110: FILE: arch/x86_64/kernel/traps.c:199:
+			printk("\n       ");

CHECK:BRACES: Unbalanced braces around else statement
#112: FILE: arch/x86_64/kernel/traps.c:201:
+		} else

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#113: FILE: arch/x86_64/kernel/traps.c:202:
+			i += printk(" ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#118: FILE: arch/x86_64/kernel/traps.c:207:
+	printk("\n");

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#129: FILE: arch/x86_64/kernel/traps.c:217:
+void show_trace(struct task_struct *tsk, struct pt_regs *regs, unsigned long * stack)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#165: FILE: arch/x86_64/kernel/traps.c:302:
+static void _show_stack(struct task_struct *tsk, struct pt_regs *regs, unsigned long * rsp)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#177: FILE: arch/x86_64/kernel/traps.c:339:
+void show_stack(struct task_struct *tsk, unsigned long * rsp)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#197: FILE: arch/x86_64/kernel/traps.c:377:
+		_show_stack(NULL, regs, (unsigned long*)rsp);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#230: FILE: include/asm-x86_64/proto.h:78:
+extern void show_trace(struct task_struct *, struct pt_regs *, unsigned long * rsp);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#230: FILE: include/asm-x86_64/proto.h:78:
+extern void show_trace(struct task_struct *, struct pt_regs *, unsigned long * rsp);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#230: FILE: include/asm-x86_64/proto.h:78:
+extern void show_trace(struct task_struct *, struct pt_regs *, unsigned long * rsp);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#230: FILE: include/asm-x86_64/proto.h:78:
+extern void show_trace(struct task_struct *, struct pt_regs *, unsigned long * rsp);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#239: FILE: include/asm-x86_64/unwind.h:1:
+#ifndef _ASM_X86_64_UNWIND_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#252: FILE: include/asm-x86_64/unwind.h:14:
+#include <asm/uaccess.h>

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#256: FILE: include/asm-x86_64/unwind.h:18:
+struct unwind_frame_info
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#261: FILE: include/asm-x86_64/unwind.h:23:
+#define UNW_PC(frame)        (frame)->regs.rip

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#262: FILE: include/asm-x86_64/unwind.h:24:
+#define UNW_SP(frame)        (frame)->regs.rsp

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#264: FILE: include/asm-x86_64/unwind.h:26:
+#define UNW_FP(frame)        (frame)->regs.rbp

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#271: FILE: include/asm-x86_64/unwind.h:33:
+/* Might need to account for the special exception and interrupt handling
+   stacks here, since normally

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#276: FILE: include/asm-x86_64/unwind.h:38:
+   not desirable. */

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#279: FILE: include/asm-x86_64/unwind.h:41:
+#define UNW_REGISTER_INFO \
+	PTREGS_INFO(rax), \
+	PTREGS_INFO(rdx), \
+	PTREGS_INFO(rcx), \
+	PTREGS_INFO(rbx), \
+	PTREGS_INFO(rsi), \
+	PTREGS_INFO(rdi), \
+	PTREGS_INFO(rbp), \
+	PTREGS_INFO(rsp), \
+	PTREGS_INFO(r8), \
+	PTREGS_INFO(r9), \
+	PTREGS_INFO(r10), \
+	PTREGS_INFO(r11), \
+	PTREGS_INFO(r12), \
+	PTREGS_INFO(r13), \
+	PTREGS_INFO(r14), \
+	PTREGS_INFO(r15), \
+	PTREGS_INFO(rip)

ERROR:CODE_INDENT: code indent should use tabs where possible
#299: FILE: include/asm-x86_64/unwind.h:61:
+                                            /*const*/ struct pt_regs *regs)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#316: FILE: include/asm-x86_64/unwind.h:78:
+extern void arch_unwind_init_running(struct unwind_frame_info *,

ERROR:CODE_INDENT: code indent should use tabs where possible
#317: FILE: include/asm-x86_64/unwind.h:79:
+                                     void (*callback)(struct unwind_frame_info *,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#317: FILE: include/asm-x86_64/unwind.h:79:
+                                     void (*callback)(struct unwind_frame_info *,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#318: FILE: include/asm-x86_64/unwind.h:80:
+                                                      void *arg),$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#318: FILE: include/asm-x86_64/unwind.h:80:
+                                                      void *arg),$

ERROR:CODE_INDENT: code indent should use tabs where possible
#319: FILE: include/asm-x86_64/unwind.h:81:
+                                     void *arg);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#319: FILE: include/asm-x86_64/unwind.h:81:
+                                     void *arg);$

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#323: FILE: include/asm-x86_64/unwind.h:85:
+#if 0 /* This can only work when selector register saves/restores

ERROR:CODE_INDENT: code indent should use tabs where possible
#324: FILE: include/asm-x86_64/unwind.h:86:
+         are properly annotated (and tracked in UNW_REGISTER_INFO). */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#324: FILE: include/asm-x86_64/unwind.h:86:
+#if 0 /* This can only work when selector register saves/restores
+         are properly annotated (and tracked in UNW_REGISTER_INFO). */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#324: FILE: include/asm-x86_64/unwind.h:86:
+         are properly annotated (and tracked in UNW_REGISTER_INFO). */

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#328: FILE: include/asm-x86_64/unwind.h:90:
+	return (long)info->regs.rip >= 0
+	       || (info->regs.rip >= VSYSCALL_START && info->regs.rip < VSYSCALL_END)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#329: FILE: include/asm-x86_64/unwind.h:91:
+	       || (info->regs.rip >= VSYSCALL_START && info->regs.rip < VSYSCALL_END)
+	       || (long)info->regs.rsp >= 0;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000075424.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 15 errors, 15 warnings, 6 checks, 283 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000075424.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
