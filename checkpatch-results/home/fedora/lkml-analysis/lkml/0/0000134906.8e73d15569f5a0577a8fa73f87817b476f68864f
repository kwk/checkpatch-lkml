WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#73: 
diff -Naur linux-2.6.12/arch/i386/Kconfig linux-2.6.12.post/arch/i386/Kconfig

ERROR:TRAILING_WHITESPACE: trailing whitespace
#92: FILE: arch/i386/Kconfig:502:
+^I  $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#111: FILE: arch/i386/kernel/smpalts.c:1:
+#include <linux/kernel.h>

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/processor.h> instead of <asm/processor.h>
#114: FILE: arch/i386/kernel/smpalts.c:4:
+#include <asm/processor.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/string.h> instead of <asm/string.h>
#115: FILE: arch/i386/kernel/smpalts.c:5:
+#include <asm/string.h>

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#131: FILE: arch/i386/kernel/smpalts.c:21:
+extern struct smp_alternative_record __start_smp_alternatives_table,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#132: FILE: arch/i386/kernel/smpalts.c:22:
+  __stop_smp_alternatives_table;$

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#133: FILE: arch/i386/kernel/smpalts.c:23:
+extern unsigned long __init_begin, __init_end;

WARNING:LINE_SPACING: Missing a blank line after declarations
#138: FILE: arch/i386/kernel/smpalts.c:28:
+	struct smp_alternative_record *r;
+	printk(KERN_INFO "Enabling SMP...\n");

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#138: FILE: arch/i386/kernel/smpalts.c:28:
+	printk(KERN_INFO "Enabling SMP...\n");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#142: FILE: arch/i386/kernel/smpalts.c:32:
+		BUG_ON(r->repl->targ_size < r->repl->smp1_size);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#143: FILE: arch/i386/kernel/smpalts.c:33:
+		BUG_ON(r->repl->targ_size < r->repl->smp2_size);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#144: FILE: arch/i386/kernel/smpalts.c:34:
+		BUG_ON(r->repl->targ_size < r->repl->up_size);

ERROR:CODE_INDENT: code indent should use tabs where possible
#145: FILE: arch/i386/kernel/smpalts.c:35:
+               if (system_state == SYSTEM_RUNNING &&$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#145: FILE: arch/i386/kernel/smpalts.c:35:
+               if (system_state == SYSTEM_RUNNING &&$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#145: FILE: arch/i386/kernel/smpalts.c:35:
+               if (system_state == SYSTEM_RUNNING &&
[...]
+                       continue;

ERROR:CODE_INDENT: code indent should use tabs where possible
#146: FILE: arch/i386/kernel/smpalts.c:36:
+                   r->targ_start >= (void *)&__init_begin &&$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#146: FILE: arch/i386/kernel/smpalts.c:36:
+                   r->targ_start >= (void *)&__init_begin &&$

ERROR:CODE_INDENT: code indent should use tabs where possible
#147: FILE: arch/i386/kernel/smpalts.c:37:
+                   r->targ_start < (void *)&__init_end)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#147: FILE: arch/i386/kernel/smpalts.c:37:
+                   r->targ_start < (void *)&__init_end)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#148: FILE: arch/i386/kernel/smpalts.c:38:
+                       continue;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#148: FILE: arch/i386/kernel/smpalts.c:38:
+                       continue;$

WARNING:MEMORY_BARRIER: memory barrier without comment
#168: FILE: arch/i386/kernel/smpalts.c:58:
+	mb();

WARNING:LINE_SPACING: Missing a blank line after declarations
#174: FILE: arch/i386/kernel/smpalts.c:64:
+	struct smp_alternative_record *r;
+	printk(KERN_INFO "Disabling SMP...\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#174: FILE: arch/i386/kernel/smpalts.c:64:
+	printk(KERN_INFO "Disabling SMP...\n");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#178: FILE: arch/i386/kernel/smpalts.c:68:
+		BUG_ON(r->repl->targ_size < r->repl->smp1_size);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#179: FILE: arch/i386/kernel/smpalts.c:69:
+		BUG_ON(r->repl->targ_size < r->repl->smp2_size);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#180: FILE: arch/i386/kernel/smpalts.c:70:
+		BUG_ON(r->repl->targ_size < r->repl->up_size);

ERROR:CODE_INDENT: code indent should use tabs where possible
#181: FILE: arch/i386/kernel/smpalts.c:71:
+               if (system_state == SYSTEM_RUNNING &&$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#181: FILE: arch/i386/kernel/smpalts.c:71:
+               if (system_state == SYSTEM_RUNNING &&$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#181: FILE: arch/i386/kernel/smpalts.c:71:
+               if (system_state == SYSTEM_RUNNING &&
[...]
+                       continue;

ERROR:CODE_INDENT: code indent should use tabs where possible
#182: FILE: arch/i386/kernel/smpalts.c:72:
+                   r->targ_start >= (void *)&__init_begin &&$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#182: FILE: arch/i386/kernel/smpalts.c:72:
+                   r->targ_start >= (void *)&__init_begin &&$

ERROR:CODE_INDENT: code indent should use tabs where possible
#183: FILE: arch/i386/kernel/smpalts.c:73:
+                   r->targ_start < (void *)&__init_end)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#183: FILE: arch/i386/kernel/smpalts.c:73:
+                   r->targ_start < (void *)&__init_end)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#184: FILE: arch/i386/kernel/smpalts.c:74:
+                       continue;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#184: FILE: arch/i386/kernel/smpalts.c:74:
+                       continue;$

WARNING:MEMORY_BARRIER: memory barrier without comment
#194: FILE: arch/i386/kernel/smpalts.c:84:
+	mb();

ERROR:SPACING: space prohibited after that open parenthesis '('
#292: FILE: include/asm-i386/bitops.h:39:
+	__asm__ __volatile__( LOCK

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited after that open parenthesis '('
#301: FILE: include/asm-i386/bitops.h:74:
+	__asm__ __volatile__( LOCK

ERROR:SPACING: space prohibited after that open parenthesis '('
#310: FILE: include/asm-i386/bitops.h:119:
+	__asm__ __volatile__( LOCK

ERROR:SPACING: space prohibited after that open parenthesis '('
#319: FILE: include/asm-i386/bitops.h:138:
+	__asm__ __volatile__( LOCK

ERROR:SPACING: space prohibited after that open parenthesis '('
#328: FILE: include/asm-i386/bitops.h:178:
+	__asm__ __volatile__( LOCK

ERROR:SPACING: space prohibited after that open parenthesis '('
#337: FILE: include/asm-i386/bitops.h:229:
+	__asm__ __volatile__( LOCK

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#420: FILE: include/asm-i386/rwsem.h:280:
+LOCK  ^I          "xadd %0,(%2)"$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#428: FILE: include/asm-i386/smp_alt.h:1:
+#ifndef __ASM_SMP_ALT_H__

ERROR:CODE_INDENT: code indent should use tabs where possible
#436: FILE: include/asm-i386/smp_alt.h:9:
+        "6677: nop\n" \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#436: FILE: include/asm-i386/smp_alt.h:9:
+        "6677: nop\n" \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#445: FILE: include/asm-i386/smp_alt.h:18:
+        ".byte 1\n" \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#445: FILE: include/asm-i386/smp_alt.h:18:
+        ".byte 1\n" \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#477: FILE: include/asm-i386/spinlock.h:51:
+        "1:\n" \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#477: FILE: include/asm-i386/spinlock.h:51:
+        "1:\n" \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#489: FILE: include/asm-i386/spinlock.h:63:
+        "1:\n" \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#489: FILE: include/asm-i386/spinlock.h:63:
+        "1:\n" \$

WARNING:SPLIT_STRING: quoted string split across lines
#505: FILE: include/asm-i386/spinlock.h:132:
+		"2:"
+		".section __smp_alternatives,\"a\"\n"

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#523: FILE: include/asm-i386/spinlock.h:150:
+	__asm__ __volatile__(

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#525: FILE: include/asm-i386/spinlock.h:152:
+		:"=q" (oldval), "=m" (lock->slock)
 		^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#526: FILE: include/asm-i386/spinlock.h:153:
+		:"0" (0) : "memory");
 		^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#537: FILE: include/asm-i386/spinlock.h:255:
+#define _raw_read_unlock(rw)	asm volatile(LOCK "incl %0" :"=m" ((rw)->lock) : : "memory")
                             	                            ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#537: FILE: include/asm-i386/spinlock.h:255:
+#define _raw_read_unlock(rw)	asm volatile(LOCK "incl %0" :"=m" ((rw)->lock) : : "memory")

WARNING:LONG_LINE: line length of 113 exceeds 100 columns
#538: FILE: include/asm-i386/spinlock.h:256:
+#define _raw_write_unlock(rw)	asm volatile(LOCK "addl $" RW_LOCK_BIAS_STR ",%0":"=m" ((rw)->lock) : : "memory")

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#538: FILE: include/asm-i386/spinlock.h:256:
+#define _raw_write_unlock(rw)	asm volatile(LOCK "addl $" RW_LOCK_BIAS_STR ",%0":"=m" ((rw)->lock) : : "memory")
                              	                                                 ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#538: FILE: include/asm-i386/spinlock.h:256:
+#define _raw_write_unlock(rw)	asm volatile(LOCK "addl $" RW_LOCK_BIAS_STR ",%0":"=m" ((rw)->lock) : : "memory")

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#586: FILE: include/asm-i386/system.h:430:
+#define smp_alt_mb(instr)                                           \
+__asm__ __volatile__("6667:\nnop\nnop\nnop\nnop\nnop\nnop\n6668:\n" \
+		     ".section __smp_alternatives,\"a\"\n"          \
+		     ".long 6667b\n"                                \
+                     ".long 6673f\n"                                \
+		     ".previous\n"                                  \
+		     ".section __smp_replacements,\"a\"\n"          \
+		     "6673:.byte 6668b-6667b\n"                     \
+		     ".byte 6670f-6669f\n"                          \
+		     ".byte 6671f-6670f\n"                          \
+                     ".byte 0\n"                                    \
+		     ".byte %c0\n"                                  \
+		     "6669:lock;addl $0,0(%%esp)\n"                 \
+		     "6670:" instr "\n"                             \
+		     "6671:\n"                                      \
+		     ".previous\n"                                  \
+		     :                                              \
+		     : "i" (X86_FEATURE_XMM2)                       \
+		     : "memory")

ERROR:CODE_INDENT: code indent should use tabs where possible
#590: FILE: include/asm-i386/system.h:434:
+                     ".long 6673f\n"                                \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#590: FILE: include/asm-i386/system.h:434:
+                     ".long 6673f\n"                                \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#596: FILE: include/asm-i386/system.h:440:
+                     ".byte 0\n"                                    \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#596: FILE: include/asm-i386/system.h:440:
+                     ".byte 0\n"                                    \$

WARNING:MEMORY_BARRIER: memory barrier without comment
#605: FILE: include/asm-i386/system.h:449:
+#define smp_rmb() smp_alt_mb("lfence")

WARNING:MEMORY_BARRIER: memory barrier without comment
#606: FILE: include/asm-i386/system.h:450:
+#define smp_mb()  smp_alt_mb("mfence")

WARNING:MEMORY_BARRIER: memory barrier without comment
#628: FILE: include/asm-i386/system.h:472:
+#define smp_rmb()	rmb()

WARNING:MEMORY_BARRIER: memory barrier without comment
#629: FILE: include/asm-i386/system.h:473:
+#define smp_mb()	mb()

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000134906.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 27 errors, 41 warnings, 4 checks, 497 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000134906.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
