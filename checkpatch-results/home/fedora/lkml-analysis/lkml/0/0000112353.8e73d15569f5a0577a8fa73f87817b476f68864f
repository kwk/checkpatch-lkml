CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#59: FILE: mm/slab.c:295:
+	spinlock_t spin_lock;

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#152: FILE: mm/slab.c:903:
 static int __devinit cpuup_callback(struct notifier_block *nfb,

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#181: FILE: mm/slab.c:927:
+				if (!(node_cache = kmalloc_node(memsize,

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#182: FILE: mm/slab.c:928:
+				if (!(node_cache = kmalloc_node(memsize,
 							GFP_KERNEL, node)))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#212: FILE: mm/slab.c:956:
+			BUG_ON(!node_cache);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc_node(sizeof(*ptr)...) over kmalloc_node(sizeof(struct node_cache)...)
#302: FILE: mm/slab.c:1050:
+	ptr = kmalloc_node(sizeof(struct node_cache), GFP_KERNEL, nodeid);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#407: FILE: mm/slab.c:1545:
+/* For setting up all the node_caches for cache whose buffer_size is same
+   as size of node_cache. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#407: FILE: mm/slab.c:1545:
+   as size of node_cache. */

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#606: FILE: mm/slab.c:2137:
+		if ((node_cache = cachep->nodelists[i])) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around node_cache->slabs_free
#633: FILE: mm/slab.c:2366:
+	list_add_tail(&slabp->list, &(node_cache->slabs_free));

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#660: FILE: mm/slab.c:2530:
+	BUG_ON(ac->avail > 0 || !node_cache);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#719: FILE: mm/slab.c:2707:
+	BUG_ON(!node_cache);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around node_cache->slabs_free
#846: FILE: mm/slab.c:2832:
+		while (p != &(node_cache->slabs_free)) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#909: FILE: mm/slab.c:3195:
+		if ((node_cache = cachep->nodelists[node])) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#934: FILE: mm/slab.c:3214:
+		if (!(node_cache = kmalloc_node(sizeof(struct node_cache),

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc_node(sizeof(*node_cache)...) over kmalloc_node(sizeof(struct node_cache)...)
#934: FILE: mm/slab.c:3214:
+		if (!(node_cache = kmalloc_node(sizeof(struct node_cache),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#935: FILE: mm/slab.c:3215:
+		if (!(node_cache = kmalloc_node(sizeof(struct node_cache),
 					GFP_KERNEL, node)))

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#971: FILE: mm/slab.c:3289:
+		printk(KERN_ERR "alloc_node_caches failed for %s, error %d.\n",

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around node_cache->slabs_free
#1028: FILE: mm/slab.c:3432:
+			if (p == &(node_cache->slabs_free))

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000112353.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 4 errors, 7 warnings, 8 checks, 1019 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000112353.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
