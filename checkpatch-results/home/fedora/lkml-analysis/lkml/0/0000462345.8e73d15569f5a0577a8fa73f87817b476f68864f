WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#62: 
--- 2.5.9/include/linux/page-flags.h~cleanup-010-page_flags	Wed Apr 24 01:06:11 2002

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#80: FILE: include/linux/page-flags.h:21:
+ * When a read completes, the page becomes uptodate, unless a disk I/O
                                            ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#292: FILE: mm/vmscan.c:38:
+static inline int is_page_cache_freeable(struct page * page)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#411: FILE: arch/alpha/mm/init.c:130:
+		else if (page_swap_cache(mem_map+i))
 		                                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#422: FILE: arch/alpha/mm/numa.c:415:
+			else if (page_swap_cache(lmem_map+i))
 			                                 ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#444: FILE: arch/cris/mm/init.c:170:
+		else if (page_swap_cache(mem_map+i))
 		                                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#455: FILE: arch/i386/mm/init.c:88:
+		else if (page_swap_cache(mem_map+i))
 		                                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#466: FILE: arch/ia64/mm/init.c:191:
+				else if (page_swap_cache(pgdat->node_mem_map+i))
 				                                            ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#475: FILE: arch/ia64/mm/init.c:213:
+		else if (page_swap_cache(mem_map+i))
 		                                ^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#497: FILE: arch/m68k/mm/init.c:99:
+	else if (page_swap_cache(mem_map+i))
 	    cached++;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#497: FILE: arch/m68k/mm/init.c:99:
+	else if (page_swap_cache(mem_map+i))
 	                                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#508: FILE: arch/mips/mm/init.c:127:
+		else if (page_swap_cache(mem_map+i))
 		                                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#519: FILE: arch/mips64/mm/init.c:331:
+		else if (page_swap_cache(mem_map+i))
 		                                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#530: FILE: arch/parisc/mm/init.c:147:
+		else if (page_swap_cache(mem_map+i))
 		                                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#541: FILE: arch/ppc/mm/init.c:132:
+		else if (page_swap_cache(mem_map+i))
 		                                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#552: FILE: arch/ppc64/mm/init.c:129:
+		else if (page_swap_cache(mem_map+i))
 		                                ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#563: FILE: arch/s390/mm/init.c:82:
+                else if (page_swap_cache(mem_map+i))$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#563: FILE: arch/s390/mm/init.c:82:
+                else if (page_swap_cache(mem_map+i))$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#563: FILE: arch/s390/mm/init.c:82:
+                else if (page_swap_cache(mem_map+i))
                                                 ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#574: FILE: arch/s390x/mm/init.c:82:
+                else if (page_swap_cache(mem_map+i))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#574: FILE: arch/s390x/mm/init.c:82:
+                else if (page_swap_cache(mem_map+i))$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#574: FILE: arch/s390x/mm/init.c:82:
+                else if (page_swap_cache(mem_map+i))
                                                 ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#585: FILE: arch/sh/mm/init.c:67:
+		else if (page_swap_cache(mem_map+i))
 		                                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#596: FILE: arch/x86_64/mm/init.c:63:
+		else if (page_swap_cache(mem_map+i))
 		                                ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'swcount > 0'
#753: FILE: mm/swapfile.c:677:
+		if ((swcount > 0) != page_swap_cache(page))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#851: FILE: drivers/mtd/devices/blkmtd.c:180:
+  if(PageUptodate(page)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#851: FILE: drivers/mtd/devices/blkmtd.c:180:
+  if(PageUptodate(page)) {
     DEBUG(2, "blkmtd: readpage page %ld is already upto date\n", page->index);

ERROR:SPACING: space required before the open parenthesis '('
#851: FILE: drivers/mtd/devices/blkmtd.c:180:
+  if(PageUptodate(page)) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#854: FILE: drivers/mtd/devices/blkmtd.c:182:
+    unlock_page(page);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#872: FILE: drivers/mtd/devices/blkmtd.c:286:
+  unlock_page(page);$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#879: FILE: drivers/mtd/devices/blkmtd.c:421:
 	for(i = 0 ; i < item->pagecnt; i++) {
+	  unlock_page(item->pages[i]);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#888: FILE: drivers/mtd/devices/blkmtd.c:475:
 	while(i--) {
+	  unlock_page(new_pages[i]);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#908: FILE: drivers/mtd/devices/blkmtd.c:669:
+    if(!PageUptodate(page)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 6)
#908: FILE: drivers/mtd/devices/blkmtd.c:669:
+    if(!PageUptodate(page)) {
[...]
       printk("blkmtd: read: page not uptodate\n");

ERROR:SPACING: space required before the open parenthesis '('
#908: FILE: drivers/mtd/devices/blkmtd.c:669:
+    if(!PageUptodate(page)) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#917: FILE: drivers/mtd/devices/blkmtd.c:812:
+      unlock_page(page);$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#924: FILE: drivers/mtd/devices/blkmtd.c:967:
   if(erase_page) {
+    unlock_page(erase_page);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#926: FILE: drivers/mtd/devices/blkmtd.c:968:
+    unlock_page(erase_page);$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#1504: FILE: fs/reiserfs/inode.c:276:
+	if ((args & GET_BLOCK_NO_HOLE) && !PageUptodate(bh_result->b_page) ) {
 	    return -ENOENT ;

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1504: FILE: fs/reiserfs/inode.c:276:
+	if ((args & GET_BLOCK_NO_HOLE) && !PageUptodate(bh_result->b_page) ) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1504: FILE: fs/reiserfs/inode.c:276:
+	if ((args & GET_BLOCK_NO_HOLE) && !PageUptodate(bh_result->b_page) ) {
 	    return -ENOENT ;
 	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#1509: FILE: fs/reiserfs/inode.c:295:
 	} else 
[...]
+	    if ((args & GET_BLOCK_NO_HOLE) && !PageUptodate(bh_result->b_page) ) {

WARNING:TABSTOP: Statements should start on a tabstop
#1513: FILE: fs/reiserfs/inode.c:298:
+	    if ((args & GET_BLOCK_NO_HOLE) && !PageUptodate(bh_result->b_page) ) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (12, 12)
#1513: FILE: fs/reiserfs/inode.c:298:
+	    if ((args & GET_BLOCK_NO_HOLE) && !PageUptodate(bh_result->b_page) ) {
 	    ret = -ENOENT ;

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1513: FILE: fs/reiserfs/inode.c:298:
+	    if ((args & GET_BLOCK_NO_HOLE) && !PageUptodate(bh_result->b_page) ) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1513: FILE: fs/reiserfs/inode.c:298:
+	    if ((args & GET_BLOCK_NO_HOLE) && !PageUptodate(bh_result->b_page) ) {
 	    ret = -ENOENT ;
 	    }

WARNING:TABSTOP: Statements should start on a tabstop
#1522: FILE: fs/reiserfs/inode.c:331:
+	    if (PageUptodate(bh_result->b_page)) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#1531: FILE: fs/reiserfs/inode.c:503:
+        unlock_page(tail_page) ;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1531: FILE: fs/reiserfs/inode.c:503:
+        unlock_page(tail_page) ;$

WARNING:SPACING: space prohibited before semicolon
#1531: FILE: fs/reiserfs/inode.c:503:
+        unlock_page(tail_page) ;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1540: FILE: fs/reiserfs/inode.c:1725:
+    unlock_page(page) ;$

WARNING:SPACING: space prohibited before semicolon
#1540: FILE: fs/reiserfs/inode.c:1725:
+    unlock_page(page) ;

WARNING:SPACING: space prohibited before semicolon
#1549: FILE: fs/reiserfs/inode.c:1797:
+	unlock_page(page) ;

ERROR:CODE_INDENT: code indent should use tabs where possible
#1558: FILE: fs/reiserfs/inode.c:1999:
+        unlock_page(page) ;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1558: FILE: fs/reiserfs/inode.c:1999:
+        unlock_page(page) ;$

WARNING:SPACING: space prohibited before semicolon
#1558: FILE: fs/reiserfs/inode.c:1999:
+        unlock_page(page) ;

ERROR:CODE_INDENT: code indent should use tabs where possible
#1567: FILE: fs/reiserfs/inode.c:2010:
+        unlock_page(page) ;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1567: FILE: fs/reiserfs/inode.c:2010:
+        unlock_page(page) ;$

WARNING:SPACING: space prohibited before semicolon
#1567: FILE: fs/reiserfs/inode.c:2010:
+        unlock_page(page) ;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#1578: FILE: fs/reiserfs/tail_conversion.c:109:
+	if (buffer_uptodate(unbh) || PageUptodate(unbh->b_page)) {
 	    up_to_date_bh = NULL ;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1621: FILE: fs/smbfs/dir.c:107:
+			 DENTRY_PATH(dentry), PageUptodate(page),ctl.head.eof);
 			                                        ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#1933: FILE: mm/filemap.c:894:
+		if ( !TestSetPageLocked(page) ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1933: FILE: mm/filemap.c:894:
+		if ( !TestSetPageLocked(page) ) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2145: FILE: mm/shmem.c:548:
+^I^Iif (TestSetPageLocked(page)) $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#2366: FILE: fs/freevxfs/vxfs_immed.c:135:
+        unlock_page(pp);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2366: FILE: fs/freevxfs/vxfs_immed.c:135:
+        unlock_page(pp);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2561: FILE: fs/reiserfs/ioctl.c:86:
+    unlock_page(page) ;$

WARNING:SPACING: space prohibited before semicolon
#2561: FILE: fs/reiserfs/ioctl.c:86:
+    unlock_page(page) ;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000462345.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 15 errors, 36 warnings, 17 checks, 2229 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000462345.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
