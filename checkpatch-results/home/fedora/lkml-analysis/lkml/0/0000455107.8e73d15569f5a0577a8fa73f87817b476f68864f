WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#51: 
diff -urN linux-2.5.19/arch/cris/drivers/ide.c linux/arch/cris/drivers/ide.c

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#114: FILE: drivers/ide/aec62xx.c:166:
+				/* Can't use these modes simultaneously,
+				   based on which PLL clock was chosen. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#114: FILE: drivers/ide/aec62xx.c:166:
+				   based on which PLL clock was chosen. */

WARNING:LONG_LINE: line length of 121 exceeds 100 columns
#115: FILE: drivers/ide/aec62xx.c:167:
+				map |= inb (bmide + AEC_BM_STAT_PCH) & AEC_PLLCLK_ATA133 ? XFER_UDMA_133 : XFER_UDMA_100;

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#115: FILE: drivers/ide/aec62xx.c:167:
+				map |= inb (bmide + AEC_BM_STAT_PCH) & AEC_PLLCLK_ATA133 ? XFER_UDMA_133 : XFER_UDMA_100;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#139: FILE: drivers/ide/aec62xx.c:218:
+			outb (inb (bmide + AEC_BM_STAT_SCH) | AEC_CABLEPINS_INPUT, bmide + AEC_BM_STAT_SCH);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#139: FILE: drivers/ide/aec62xx.c:218:
+			outb (inb (bmide + AEC_BM_STAT_SCH) | AEC_CABLEPINS_INPUT, bmide + AEC_BM_STAT_SCH);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#139: FILE: drivers/ide/aec62xx.c:218:
+			outb (inb (bmide + AEC_BM_STAT_SCH) | AEC_CABLEPINS_INPUT, bmide + AEC_BM_STAT_SCH);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#156: FILE: drivers/ide/device.c:1:
+/**** vi:set ts=8 sts=8 sw=8:************************************************

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#190: FILE: drivers/ide/device.c:35:
+#include <asm/io.h>

WARNING:INCLUDE_LINUX: Use #include <linux/bitops.h> instead of <asm/bitops.h>
#191: FILE: drivers/ide/device.c:36:
+#include <asm/bitops.h>

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#192: FILE: drivers/ide/device.c:37:
+#include <asm/uaccess.h>

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#220: FILE: drivers/ide/device.c:65:
+EXPORT_SYMBOL(ata_select);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#248: FILE: drivers/ide/device.c:93:
+EXPORT_SYMBOL(ata_status);

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#268: FILE: drivers/ide/hpt366.c:559:
+static unsigned int pci_bus_clock_list(u8 speed, struct chipset_bus_clock_list_entry * chipset_table)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#268: FILE: drivers/ide/hpt366.c:559:
+static unsigned int pci_bus_clock_list(u8 speed, struct chipset_bus_clock_list_entry * chipset_table)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <regXXh>
#443: FILE: drivers/ide/hpt366.c:1059:
+	u8 reg59h, regXXh;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:BRACES: braces {} should be used on all arms of this statement
#575: FILE: drivers/ide/ide.c:264:
+	if (ata_status(drive, 0, BUSY_STAT))
[...]
-	} else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#578: FILE: drivers/ide/ide.c:266:
+	else {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#587: FILE: drivers/ide/ide.c:273:
+		printk("%s: ATAPI reset timed out, status=0x%02x\n", drive->name, drive->status);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#607: FILE: drivers/ide/ide.c:297:
+		printk("%s: reset timed out, status=0x%02x\n", ch->name, drive->status);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#674: FILE: drivers/ide/ide.c:668:
+	if (!ata_status(drive, 0, BUSY_STAT|DRQ_STAT))
 	                                   ^

WARNING:LONG_LINE_COMMENT: line length of 110 exceeds 100 columns
#700: FILE: drivers/ide/ide.c:703:
+		return ide_error(drive, rq, "drive_cmd", drive->status); /* already calls ide_end_drive_cmd */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#776: FILE: drivers/ide/ide.c:1282:
+					startstop = ide_error(drive, drive->rq, "irq timeout", drive->status);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#889: FILE: drivers/ide/ide-cd.c:676:
+			*startstop = ide_error(drive, rq, __FUNCTION__, drive->status);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#930: FILE: drivers/ide/ide-floppy.c:640:
+	ide_end_drive_cmd (drive, rq, 0);

ERROR:SPACING: space required before the open parenthesis '('
#967: FILE: drivers/ide/ide-pmac.c:400:
+		if(ata_status(drive, 0, BUSY_STAT)) {

ERROR:SPACING: space required before the open parenthesis '('
#971: FILE: drivers/ide/ide-pmac.c:403:
+			else if((drive->status & drive->ready_stat)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#972: FILE: drivers/ide/ide-pmac.c:404:
+			else if((drive->status & drive->ready_stat)
+				|| (drive->status & ERR_STAT))

ERROR:SPACING: space required before the open parenthesis '('
#980: FILE: drivers/ide/ide-pmac.c:409:
+	if((drive->status & ERR_STAT) || timeout <= 0) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#982: FILE: drivers/ide/ide-pmac.c:411:
+			printk(KERN_ERR "ide_pmac: wait_for_ready, error status: %x\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#983: FILE: drivers/ide/ide-pmac.c:412:
+			printk(KERN_ERR "ide_pmac: wait_for_ready, error status: %x\n",
+				drive->status);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1073: FILE: drivers/ide/ide-taskfile.c:1:
+/**** vi:set ts=8 sts=8 sw=8:************************************************

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#1101: FILE: drivers/ide/ide-taskfile.c:187:
 	else
[...]
+	ata_status(drive, 0, 0);	/* Note: this may clear a pending IRQ!! */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1120: FILE: drivers/ide/ide-taskfile.c:237:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1135: FILE: drivers/ide/ide-taskfile.c:249:
+			startstop = ide_error(drive, rq, __FUNCTION__, drive->status);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1218: FILE: drivers/ide/ide-taskfile.c:450:
+		if (drive->status & (ERR_STAT|DRQ_STAT))
 		                             ^

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1219: FILE: drivers/ide/ide-taskfile.c:451:
+			return ide_error(drive, rq, __FUNCTION__, drive->status);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1272: FILE: drivers/ide/ide-taskfile.c:519:
+		return ide_error(drive, rq, __FUNCTION__, drive->status);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rq->nr_sectors == 1'
#1279: FILE: drivers/ide/ide-taskfile.c:525:
+	if ((rq->nr_sectors == 1) != (drive->status & DRQ_STAT)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1304: FILE: drivers/ide/ide-taskfile.c:550:
+		if (drive->status & (ERR_STAT|DRQ_STAT)) {
 		                             ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1304: FILE: drivers/ide/ide-taskfile.c:550:
+		if (drive->status & (ERR_STAT|DRQ_STAT)) {
+			return ide_error(drive, rq, __FUNCTION__, drive->status);
 		}

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1305: FILE: drivers/ide/ide-taskfile.c:551:
+			return ide_error(drive, rq, __FUNCTION__, drive->status);

WARNING:SPLIT_STRING: quoted string split across lines
#1475: FILE: drivers/ide/pdc4030.c:599:
 		printk(KERN_DEBUG "%s: promise_write: <= 4 sectors, "
+			"status = %02x\n", drive->name, drive->status);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:BRACES: braces {} should be used on all arms of this statement
#1621: FILE: drivers/ide/probe.c:696:
+	if (ata_status(drive, READY_STAT, BUSY_STAT) || drive->present || cmd == WIN_PIDENTIFY)	{
[...]
-			printk("%s: no response (status = 0x%02x)\n", drive->name, GET_STAT());
[...]

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1627: FILE: drivers/ide/probe.c:701:
+			printk("%s: no response (status = 0x%02x), resetting drive\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1628: FILE: drivers/ide/probe.c:702:
+			printk("%s: no response (status = 0x%02x), resetting drive\n",
+					drive->name, drive->status);

WARNING:LONG_LINE: line length of 114 exceeds 100 columns
#1636: FILE: drivers/ide/probe.c:708:
+			while (!ata_status(drive, 0, BUSY_STAT) && time_before(jiffies, timeout + WAIT_WORSTCASE))

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1643: FILE: drivers/ide/probe.c:713:
+			printk("%s: no response (status = 0x%02x)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1644: FILE: drivers/ide/probe.c:714:
+			printk("%s: no response (status = 0x%02x)\n",
+					drive->name, drive->status);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1678: FILE: drivers/ide/probe.c:777:
+				printk("failed (status = 0x%02x)\n", drive->status);

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#1751: FILE: drivers/ide/tcq.c:340:
+		printk(KERN_ERR "%s: %s: error status %x\n", __FUNCTION__, drive->name, drive->status);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1751: FILE: drivers/ide/tcq.c:340:
+		printk(KERN_ERR "%s: %s: error status %x\n", __FUNCTION__, drive->name, drive->status);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1751: FILE: drivers/ide/tcq.c:340:
+		printk(KERN_ERR "%s: %s: error status %x\n", __FUNCTION__, drive->name, drive->status);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1752: FILE: drivers/ide/tcq.c:341:
+		ide_dump_status(drive, rq, __FUNCTION__, drive->status);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1774: FILE: drivers/ide/tcq.c:374:
+	TCQ_PRINTK("%s: stat=%x\n", __FUNCTION__, drive->status);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1792: FILE: drivers/ide/tcq.c:387:
+		TCQ_PRINTK("%s: SERV (stat=%x)\n", __FUNCTION__, drive->status);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1797: FILE: drivers/ide/tcq.c:391:
+	printk("%s: stat=%x, not expected\n", __FUNCTION__, drive->status);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1797: FILE: drivers/ide/tcq.c:391:
+	printk("%s: stat=%x, not expected\n", __FUNCTION__, drive->status);

WARNING:TYPO_SPELLING: 'retrived' may be misspelled - perhaps 'retrieved'?
#1924: FILE: include/linux/ide.h:351:
+	u8		status;		/* last retrived status value for device */
 	  		       		        ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPACING: Unnecessary space before function pointer arguments
#1934: FILE: include/linux/ide.h:477:
+	void (*maskproc) (struct ata_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_device *' should also have an identifier name
#1934: FILE: include/linux/ide.h:477:
+	void (*maskproc) (struct ata_device *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1943: FILE: include/linux/ide.h:722:
+extern void ide_end_drive_cmd(struct ata_device *, struct request *, u8);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_device *' should also have an identifier name
#1943: FILE: include/linux/ide.h:722:
+extern void ide_end_drive_cmd(struct ata_device *, struct request *, u8);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct request *' should also have an identifier name
#1943: FILE: include/linux/ide.h:722:
+extern void ide_end_drive_cmd(struct ata_device *, struct request *, u8);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u8' should also have an identifier name
#1943: FILE: include/linux/ide.h:722:
+extern void ide_end_drive_cmd(struct ata_device *, struct request *, u8);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1953: FILE: include/linux/ide.h:896:
+extern void ata_select(struct ata_device *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_device *' should also have an identifier name
#1953: FILE: include/linux/ide.h:896:
+extern void ata_select(struct ata_device *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#1953: FILE: include/linux/ide.h:896:
+extern void ata_select(struct ata_device *, unsigned long);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1954: FILE: include/linux/ide.h:897:
+extern void ata_mask(struct ata_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_device *' should also have an identifier name
#1954: FILE: include/linux/ide.h:897:
+extern void ata_mask(struct ata_device *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1955: FILE: include/linux/ide.h:898:
+extern int ata_status(struct ata_device *, u8, u8);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_device *' should also have an identifier name
#1955: FILE: include/linux/ide.h:898:
+extern int ata_status(struct ata_device *, u8, u8);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u8' should also have an identifier name
#1955: FILE: include/linux/ide.h:898:
+extern int ata_status(struct ata_device *, u8, u8);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u8' should also have an identifier name
#1955: FILE: include/linux/ide.h:898:
+extern int ata_status(struct ata_device *, u8, u8);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000455107.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 4 errors, 54 warnings, 17 checks, 1721 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000455107.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
