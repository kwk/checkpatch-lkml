WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#20: 
In message <Pine.LNX.4.33.0203151656320.1379-100000@home.transmeta.com> you wri

WARNING:TYPO_SPELLING: 'te' may be misspelled - perhaps 'the'?
#21: 
te:
^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:SPACING: space prohibited after that open parenthesis '('
#77: FILE: arch/i386/kernel/bluesmoke.c:126:
+	if( !test_bit(X86_FEATURE_MCE, c->x86_capability) )

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited before that close parenthesis ')'
#77: FILE: arch/i386/kernel/bluesmoke.c:126:
+	if( !test_bit(X86_FEATURE_MCE, c->x86_capability) )

ERROR:SPACING: space required before the open parenthesis '('
#77: FILE: arch/i386/kernel/bluesmoke.c:126:
+	if( !test_bit(X86_FEATURE_MCE, c->x86_capability) )

ERROR:SPACING: space prohibited after that open parenthesis '('
#86: FILE: arch/i386/kernel/bluesmoke.c:156:
+	if( !test_bit(X86_FEATURE_MCA, c->x86_capability) )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#86: FILE: arch/i386/kernel/bluesmoke.c:156:
+	if( !test_bit(X86_FEATURE_MCA, c->x86_capability) )

ERROR:SPACING: space required before the open parenthesis '('
#86: FILE: arch/i386/kernel/bluesmoke.c:156:
+	if( !test_bit(X86_FEATURE_MCA, c->x86_capability) )

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#98: FILE: arch/i386/kernel/mtrr.c:390:
+    if ( test_bit(X86_FEATURE_PGE, boot_cpu_data.x86_capability) ) {$

ERROR:SPACING: space prohibited after that open parenthesis '('
#98: FILE: arch/i386/kernel/mtrr.c:390:
+    if ( test_bit(X86_FEATURE_PGE, boot_cpu_data.x86_capability) ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#98: FILE: arch/i386/kernel/mtrr.c:390:
+    if ( test_bit(X86_FEATURE_PGE, boot_cpu_data.x86_capability) ) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#107: FILE: arch/i386/kernel/mtrr.c:451:
+    if ( test_bit(X86_FEATURE_PGE, boot_cpu_data.x86_capability) )$

ERROR:SPACING: space prohibited after that open parenthesis '('
#107: FILE: arch/i386/kernel/mtrr.c:451:
+    if ( test_bit(X86_FEATURE_PGE, boot_cpu_data.x86_capability) )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#107: FILE: arch/i386/kernel/mtrr.c:451:
+    if ( test_bit(X86_FEATURE_PGE, boot_cpu_data.x86_capability) )

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#116: FILE: arch/i386/kernel/mtrr.c:2126:
+    if ( test_bit(X86_FEATURE_MTRR, boot_cpu_data.x86_capability) ) {$

ERROR:SPACING: space prohibited after that open parenthesis '('
#116: FILE: arch/i386/kernel/mtrr.c:2126:
+    if ( test_bit(X86_FEATURE_MTRR, boot_cpu_data.x86_capability) ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#116: FILE: arch/i386/kernel/mtrr.c:2126:
+    if ( test_bit(X86_FEATURE_MTRR, boot_cpu_data.x86_capability) ) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#125: FILE: arch/i386/kernel/mtrr.c:2170:
+    } else if ( test_bit(X86_FEATURE_K6_MTRR, boot_cpu_data.x86_capability) ) {$

ERROR:SPACING: space prohibited after that open parenthesis '('
#125: FILE: arch/i386/kernel/mtrr.c:2170:
+    } else if ( test_bit(X86_FEATURE_K6_MTRR, boot_cpu_data.x86_capability) ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#125: FILE: arch/i386/kernel/mtrr.c:2170:
+    } else if ( test_bit(X86_FEATURE_K6_MTRR, boot_cpu_data.x86_capability) ) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#133: FILE: arch/i386/kernel/mtrr.c:2177:
+    } else if ( test_bit(X86_FEATURE_CYRIX_ARR, boot_cpu_data.x86_capability) ) {$

ERROR:SPACING: space prohibited after that open parenthesis '('
#133: FILE: arch/i386/kernel/mtrr.c:2177:
+    } else if ( test_bit(X86_FEATURE_CYRIX_ARR, boot_cpu_data.x86_capability) ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#133: FILE: arch/i386/kernel/mtrr.c:2177:
+    } else if ( test_bit(X86_FEATURE_CYRIX_ARR, boot_cpu_data.x86_capability) ) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#142: FILE: arch/i386/kernel/mtrr.c:2186:
+    } else if ( test_bit(X86_FEATURE_CENTAUR_MCR, boot_cpu_data.x86_capability) ) {$

ERROR:SPACING: space prohibited after that open parenthesis '('
#142: FILE: arch/i386/kernel/mtrr.c:2186:
+    } else if ( test_bit(X86_FEATURE_CENTAUR_MCR, boot_cpu_data.x86_capability) ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#142: FILE: arch/i386/kernel/mtrr.c:2186:
+    } else if ( test_bit(X86_FEATURE_CENTAUR_MCR, boot_cpu_data.x86_capability) ) {

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#163: FILE: arch/i386/kernel/setup.c:1111:
+	clear_bit(0*32+31, c->x86_capability);
 	           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#163: FILE: arch/i386/kernel/setup.c:1111:
+	clear_bit(0*32+31, c->x86_capability);
 	              ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#207: FILE: arch/i386/kernel/setup.c:1337:
+	clear_bit(0*32+31, c->x86_capability);
 	           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#207: FILE: arch/i386/kernel/setup.c:1337:
+	clear_bit(0*32+31, c->x86_capability);
 	              ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#213: FILE: arch/i386/kernel/setup.c:1340:
+	if ( test_bit(1*32+24, c->x86_capability) ) {
 	               ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#213: FILE: arch/i386/kernel/setup.c:1340:
+	if ( test_bit(1*32+24, c->x86_capability) ) {
 	                  ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#213: FILE: arch/i386/kernel/setup.c:1340:
+	if ( test_bit(1*32+24, c->x86_capability) ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#213: FILE: arch/i386/kernel/setup.c:1340:
+	if ( test_bit(1*32+24, c->x86_capability) ) {

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#214: FILE: arch/i386/kernel/setup.c:1341:
+		clear_bit(1*32+24, c->x86_capability);
 		           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#214: FILE: arch/i386/kernel/setup.c:1341:
+		clear_bit(1*32+24, c->x86_capability);
 		              ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#251: FILE: arch/i386/kernel/setup.c:1748:
+	clear_bit(0*32+31, c->x86_capability);
 	           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#251: FILE: arch/i386/kernel/setup.c:1748:
+	clear_bit(0*32+31, c->x86_capability);
 	              ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#323: FILE: arch/i386/kernel/setup.c:2304:
+	if( test_bit(X86_FEATURE_PN, c->x86_capability) &&

ERROR:SPACING: space required before the open parenthesis '('
#323: FILE: arch/i386/kernel/setup.c:2304:
+	if( test_bit(X86_FEATURE_PN, c->x86_capability) &&

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#324: FILE: arch/i386/kernel/setup.c:2305:
+	if( test_bit(X86_FEATURE_PN, c->x86_capability) &&
 	    disable_x86_serial_nr ) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#350: FILE: arch/i386/kernel/setup.c:2505:
+	printk(KERN_DEBUG "CPU: Before vendor init, caps: %08lx %08lx %08lx, vendor = %d\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#359: FILE: arch/i386/kernel/setup.c:2565:
+	printk(KERN_DEBUG "CPU: After vendor init, caps: %08lx %08lx %08lx %08lx\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#379: FILE: arch/i386/kernel/setup.c:2608:
+	printk(KERN_DEBUG "CPU:     After generic, caps: %08lx %08lx %08lx %08lx\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#388: FILE: arch/i386/kernel/setup.c:2626:
+	printk(KERN_DEBUG "CPU:             Common caps: %08lx %08lx %08lx %08lx\n",

ERROR:SPACING: space prohibited after that open parenthesis '('
#397: FILE: arch/i386/kernel/setup.c:2735:
+	if ( test_bit(X86_FEATURE_TSC, c->x86_capability) ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#397: FILE: arch/i386/kernel/setup.c:2735:
+	if ( test_bit(X86_FEATURE_TSC, c->x86_capability) ) {

ERROR:SPACING: space prohibited after that open parenthesis '('
#406: FILE: arch/i386/kernel/setup.c:2765:
+		if ( test_bit(i, c->x86_capability) &&

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#407: FILE: arch/i386/kernel/setup.c:2766:
+		if ( test_bit(i, c->x86_capability) &&
 		     x86_cap_flags[i] != NULL )

ERROR:CODE_INDENT: code indent should use tabs where possible
#433: FILE: drivers/char/mem.c:176:
+ ^Ireturn !( test_bit(X86_FEATURE_MTRR, boot_cpu_data.x86_capability) ||$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#433: FILE: drivers/char/mem.c:176:
+ ^Ireturn !( test_bit(X86_FEATURE_MTRR, boot_cpu_data.x86_capability) ||$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#433: FILE: drivers/char/mem.c:176:
+ ^Ireturn !( test_bit(X86_FEATURE_MTRR, boot_cpu_data.x86_capability) ||$

ERROR:SPACING: space prohibited after that open parenthesis '('
#433: FILE: drivers/char/mem.c:176:
+ 	return !( test_bit(X86_FEATURE_MTRR, boot_cpu_data.x86_capability) ||

ERROR:SPACING: space prohibited before that close parenthesis ')'
#436: FILE: drivers/char/mem.c:179:
+		  test_bit(X86_FEATURE_CENTAUR_MCR, boot_cpu_data.x86_capability) )

ERROR:SPACING: space prohibited after that open parenthesis '('
#534: FILE: drivers/char/random.c:739:
+	if ( test_bit(X86_FEATURE_TSC, boot_cpu_data.x86_capability) ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#534: FILE: drivers/char/random.c:739:
+	if ( test_bit(X86_FEATURE_TSC, boot_cpu_data.x86_capability) ) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#567: FILE: drivers/macintosh/adb.c:442:
+static unsigned long adb_sreq_lock; // Use semaphore ! */ $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#567: FILE: drivers/macintosh/adb.c:442:
+static unsigned long adb_sreq_lock; // Use semaphore ! */ 

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#657: FILE: fs/devfs/util.c:128:
+    unsigned long bits[256 / BITS_PER_LONG];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#666: FILE: fs/devfs/util.c:215:
+    unsigned long bits[256 / BITS_PER_LONG];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#675: FILE: fs/devfs/util.c:358:
+    unsigned long *bits;$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#684: FILE: fs/devfs/util.c:385:
+	memset ((void *)bits + space->length, 0, length - space->length);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#696: FILE: fs/open.c:707:
+ ^Ifd = find_next_zero_bit(files->open_fds->fds_bits, $

ERROR:CODE_INDENT: code indent should use tabs where possible
#696: FILE: fs/open.c:707:
+ ^Ifd = find_next_zero_bit(files->open_fds->fds_bits, $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#696: FILE: fs/open.c:707:
+ ^Ifd = find_next_zero_bit(files->open_fds->fds_bits, $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#696: FILE: fs/open.c:707:
+ ^Ifd = find_next_zero_bit(files->open_fds->fds_bits, $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#708: FILE: include/asm-i386/bitops.h:37:
+static __inline__ void set_bit(int nr, volatile unsigned long * addr)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#708: FILE: include/asm-i386/bitops.h:37:
+static __inline__ void set_bit(int nr, volatile unsigned long * addr)

WARNING:INLINE: plain inline is preferred over __inline__
#708: FILE: include/asm-i386/bitops.h:37:
+static __inline__ void set_bit(int nr, volatile unsigned long * addr)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#717: FILE: include/asm-i386/bitops.h:54:
+static __inline__ void __set_bit(int nr, volatile unsigned long * addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#717: FILE: include/asm-i386/bitops.h:54:
+static __inline__ void __set_bit(int nr, volatile unsigned long * addr)

WARNING:INLINE: plain inline is preferred over __inline__
#717: FILE: include/asm-i386/bitops.h:54:
+static __inline__ void __set_bit(int nr, volatile unsigned long * addr)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#726: FILE: include/asm-i386/bitops.h:72:
+static __inline__ void clear_bit(int nr, volatile unsigned long * addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#726: FILE: include/asm-i386/bitops.h:72:
+static __inline__ void clear_bit(int nr, volatile unsigned long * addr)

WARNING:INLINE: plain inline is preferred over __inline__
#726: FILE: include/asm-i386/bitops.h:72:
+static __inline__ void clear_bit(int nr, volatile unsigned long * addr)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#735: FILE: include/asm-i386/bitops.h:80:
+static __inline__ void __clear_bit(int nr, volatile unsigned long * addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#735: FILE: include/asm-i386/bitops.h:80:
+static __inline__ void __clear_bit(int nr, volatile unsigned long * addr)

WARNING:INLINE: plain inline is preferred over __inline__
#735: FILE: include/asm-i386/bitops.h:80:
+static __inline__ void __clear_bit(int nr, volatile unsigned long * addr)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#744: FILE: include/asm-i386/bitops.h:99:
+static __inline__ void __change_bit(int nr, volatile unsigned long * addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#744: FILE: include/asm-i386/bitops.h:99:
+static __inline__ void __change_bit(int nr, volatile unsigned long * addr)

WARNING:INLINE: plain inline is preferred over __inline__
#744: FILE: include/asm-i386/bitops.h:99:
+static __inline__ void __change_bit(int nr, volatile unsigned long * addr)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#753: FILE: include/asm-i386/bitops.h:116:
+static __inline__ void change_bit(int nr, volatile unsigned long * addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#753: FILE: include/asm-i386/bitops.h:116:
+static __inline__ void change_bit(int nr, volatile unsigned long * addr)

WARNING:INLINE: plain inline is preferred over __inline__
#753: FILE: include/asm-i386/bitops.h:116:
+static __inline__ void change_bit(int nr, volatile unsigned long * addr)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#762: FILE: include/asm-i386/bitops.h:132:
+static __inline__ int test_and_set_bit(int nr, volatile unsigned long * addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#762: FILE: include/asm-i386/bitops.h:132:
+static __inline__ int test_and_set_bit(int nr, volatile unsigned long * addr)

WARNING:INLINE: plain inline is preferred over __inline__
#762: FILE: include/asm-i386/bitops.h:132:
+static __inline__ int test_and_set_bit(int nr, volatile unsigned long * addr)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#771: FILE: include/asm-i386/bitops.h:152:
+static __inline__ int __test_and_set_bit(int nr, volatile unsigned long * addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#771: FILE: include/asm-i386/bitops.h:152:
+static __inline__ int __test_and_set_bit(int nr, volatile unsigned long * addr)

WARNING:INLINE: plain inline is preferred over __inline__
#771: FILE: include/asm-i386/bitops.h:152:
+static __inline__ int __test_and_set_bit(int nr, volatile unsigned long * addr)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#780: FILE: include/asm-i386/bitops.h:171:
+static __inline__ int test_and_clear_bit(int nr, volatile unsigned long * addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#780: FILE: include/asm-i386/bitops.h:171:
+static __inline__ int test_and_clear_bit(int nr, volatile unsigned long * addr)

WARNING:INLINE: plain inline is preferred over __inline__
#780: FILE: include/asm-i386/bitops.h:171:
+static __inline__ int test_and_clear_bit(int nr, volatile unsigned long * addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#789: FILE: include/asm-i386/bitops.h:191:
+static __inline__ int __test_and_clear_bit(int nr, volatile unsigned long *addr)

WARNING:INLINE: plain inline is preferred over __inline__
#789: FILE: include/asm-i386/bitops.h:191:
+static __inline__ int __test_and_clear_bit(int nr, volatile unsigned long *addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#798: FILE: include/asm-i386/bitops.h:203:
+static __inline__ int __test_and_change_bit(int nr, volatile unsigned long *addr)

WARNING:INLINE: plain inline is preferred over __inline__
#798: FILE: include/asm-i386/bitops.h:203:
+static __inline__ int __test_and_change_bit(int nr, volatile unsigned long *addr)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#807: FILE: include/asm-i386/bitops.h:222:
+static __inline__ int test_and_change_bit(int nr, volatile unsigned long* addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#807: FILE: include/asm-i386/bitops.h:222:
+static __inline__ int test_and_change_bit(int nr, volatile unsigned long* addr)

WARNING:INLINE: plain inline is preferred over __inline__
#807: FILE: include/asm-i386/bitops.h:222:
+static __inline__ int test_and_change_bit(int nr, volatile unsigned long* addr)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#816: FILE: include/asm-i386/bitops.h:242:
+static __inline__ int constant_test_bit(int nr, const volatile unsigned long * addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#816: FILE: include/asm-i386/bitops.h:242:
+static __inline__ int constant_test_bit(int nr, const volatile unsigned long * addr)

WARNING:INLINE: plain inline is preferred over __inline__
#816: FILE: include/asm-i386/bitops.h:242:
+static __inline__ int constant_test_bit(int nr, const volatile unsigned long * addr)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#822: FILE: include/asm-i386/bitops.h:247:
+static __inline__ int variable_test_bit(int nr, volatile unsigned long * addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#822: FILE: include/asm-i386/bitops.h:247:
+static __inline__ int variable_test_bit(int nr, volatile unsigned long * addr)

WARNING:INLINE: plain inline is preferred over __inline__
#822: FILE: include/asm-i386/bitops.h:247:
+static __inline__ int variable_test_bit(int nr, volatile unsigned long * addr)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#831: FILE: include/asm-i386/bitops.h:271:
+static __inline__ int find_first_zero_bit(unsigned long * addr, unsigned size)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#831: FILE: include/asm-i386/bitops.h:271:
+static __inline__ int find_first_zero_bit(unsigned long * addr, unsigned size)

WARNING:INLINE: plain inline is preferred over __inline__
#831: FILE: include/asm-i386/bitops.h:271:
+static __inline__ int find_first_zero_bit(unsigned long * addr, unsigned size)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#840: FILE: include/asm-i386/bitops.h:303:
+static __inline__ int find_first_bit(unsigned long * addr, unsigned size)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#840: FILE: include/asm-i386/bitops.h:303:
+static __inline__ int find_first_bit(unsigned long * addr, unsigned size)

WARNING:INLINE: plain inline is preferred over __inline__
#840: FILE: include/asm-i386/bitops.h:303:
+static __inline__ int find_first_bit(unsigned long * addr, unsigned size)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#849: FILE: include/asm-i386/bitops.h:329:
+static __inline__ int find_next_zero_bit(unsigned long * addr, int size, int offset)

WARNING:INLINE: plain inline is preferred over __inline__
#849: FILE: include/asm-i386/bitops.h:329:
+static __inline__ int find_next_zero_bit(unsigned long * addr, int size, int offset)

WARNING:INLINE: plain inline is preferred over __inline__
#858: FILE: include/asm-i386/bitops.h:362:
+static __inline__ int find_next_bit(unsigned long *addr, int size, int offset)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#861: FILE: include/asm-i386/bitops.h:364:
+	unsigned long * p = addr + (offset >> 5);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#870: FILE: include/asm-i386/bitops.h:385:
+	res = find_first_bit (p, size - 32 * (p - addr));

ERROR:SPACING: space required after that ',' (ctx:VxV)
#883: FILE: include/asm-i386/bitops.h:472:
+#define ext2_set_bit(nr,addr) \
                        ^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#884: FILE: include/asm-i386/bitops.h:473:
+	__test_and_set_bit((nr),(unsigned long*)addr)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#884: FILE: include/asm-i386/bitops.h:473:
+	__test_and_set_bit((nr),(unsigned long*)addr)
 	                       ^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#886: FILE: include/asm-i386/bitops.h:475:
+	__test_and_clear_bit((nr),(unsigned long*)addr)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#886: FILE: include/asm-i386/bitops.h:475:
+	__test_and_clear_bit((nr),(unsigned long*)addr)
 	                         ^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#887: FILE: include/asm-i386/bitops.h:476:
+#define ext2_test_bit(nr, addr)      test_bit((nr),(unsigned long*)addr)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#887: FILE: include/asm-i386/bitops.h:476:
+#define ext2_test_bit(nr, addr)      test_bit((nr),(unsigned long*)addr)
                                                   ^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#889: FILE: include/asm-i386/bitops.h:478:
+	find_first_zero_bit((unsigned long*)addr, size)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#891: FILE: include/asm-i386/bitops.h:480:
+	find_next_zero_bit((unsigned long*)addr, size, off)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#899: FILE: include/asm-i386/bitops.h:483:
+#define minix_test_and_set_bit(nr,addr) __test_and_set_bit(nr,(void*)addr)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#899: FILE: include/asm-i386/bitops.h:483:
+#define minix_test_and_set_bit(nr,addr) __test_and_set_bit(nr,(void*)addr)
                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#899: FILE: include/asm-i386/bitops.h:483:
+#define minix_test_and_set_bit(nr,addr) __test_and_set_bit(nr,(void*)addr)
                                                              ^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#900: FILE: include/asm-i386/bitops.h:484:
+#define minix_set_bit(nr,addr) __set_bit(nr,(void*)addr)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#900: FILE: include/asm-i386/bitops.h:484:
+#define minix_set_bit(nr,addr) __set_bit(nr,(void*)addr)
                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#900: FILE: include/asm-i386/bitops.h:484:
+#define minix_set_bit(nr,addr) __set_bit(nr,(void*)addr)
                                            ^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#901: FILE: include/asm-i386/bitops.h:485:
+#define minix_test_and_clear_bit(nr,addr) __test_and_clear_bit(nr,(void*)addr)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#901: FILE: include/asm-i386/bitops.h:485:
+#define minix_test_and_clear_bit(nr,addr) __test_and_clear_bit(nr,(void*)addr)
                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#901: FILE: include/asm-i386/bitops.h:485:
+#define minix_test_and_clear_bit(nr,addr) __test_and_clear_bit(nr,(void*)addr)
                                                                  ^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#902: FILE: include/asm-i386/bitops.h:486:
+#define minix_test_bit(nr,addr) test_bit(nr,(void*)addr)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#902: FILE: include/asm-i386/bitops.h:486:
+#define minix_test_bit(nr,addr) test_bit(nr,(void*)addr)
                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#902: FILE: include/asm-i386/bitops.h:486:
+#define minix_test_bit(nr,addr) test_bit(nr,(void*)addr)
                                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#903: FILE: include/asm-i386/bitops.h:487:
+#define minix_find_first_zero_bit(addr,size) \
                                       ^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#904: FILE: include/asm-i386/bitops.h:488:
+	find_first_zero_bit((void*)addr,size)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#904: FILE: include/asm-i386/bitops.h:488:
+	find_first_zero_bit((void*)addr,size)
 	                               ^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#916: FILE: include/asm-i386/bugs.h:197:
 	if (boot_cpu_data.x86_vendor == X86_VENDOR_INTEL
+	    && test_bit(X86_FEATURE_APIC, boot_cpu_data.x86_capability)

WARNING:LONG_LINE: line length of 127 exceeds 100 columns
#931: FILE: include/asm-i386/pgtable.h:291:
+static inline  int ptep_test_and_clear_dirty(pte_t *ptep)	{ return test_and_clear_bit(_PAGE_BIT_DIRTY, &ptep->pte_low); }

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE: line length of 130 exceeds 100 columns
#932: FILE: include/asm-i386/pgtable.h:292:
+static inline  int ptep_test_and_clear_young(pte_t *ptep)	{ return test_and_clear_bit(_PAGE_BIT_ACCESSED, &ptep->pte_low); }

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#933: FILE: include/asm-i386/pgtable.h:293:
+static inline void ptep_set_wrprotect(pte_t *ptep)		{ clear_bit(_PAGE_BIT_RW, &ptep->pte_low); }

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#934: FILE: include/asm-i386/pgtable.h:294:
+static inline void ptep_mkdirty(pte_t *ptep)			{ set_bit(_PAGE_BIT_DIRTY, &ptep->pte_low); }

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#970: FILE: include/asm-ppc/bitops.h:33:
+static __inline__ void set_bit(int nr, volatile unsigned long * addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#970: FILE: include/asm-ppc/bitops.h:33:
+static __inline__ void set_bit(int nr, volatile unsigned long * addr)

WARNING:INLINE: plain inline is preferred over __inline__
#970: FILE: include/asm-ppc/bitops.h:33:
+static __inline__ void set_bit(int nr, volatile unsigned long * addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#979: FILE: include/asm-ppc/bitops.h:53:
+static __inline__ void __set_bit(int nr, volatile unsigned long *addr)

WARNING:INLINE: plain inline is preferred over __inline__
#979: FILE: include/asm-ppc/bitops.h:53:
+static __inline__ void __set_bit(int nr, volatile unsigned long *addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#988: FILE: include/asm-ppc/bitops.h:67:
+static __inline__ void clear_bit(int nr, volatile unsigned long *addr)

WARNING:INLINE: plain inline is preferred over __inline__
#988: FILE: include/asm-ppc/bitops.h:67:
+static __inline__ void clear_bit(int nr, volatile unsigned long *addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#997: FILE: include/asm-ppc/bitops.h:87:
+static __inline__ void __clear_bit(int nr, volatile unsigned long *addr)

WARNING:INLINE: plain inline is preferred over __inline__
#997: FILE: include/asm-ppc/bitops.h:87:
+static __inline__ void __clear_bit(int nr, volatile unsigned long *addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1006: FILE: include/asm-ppc/bitops.h:95:
+static __inline__ void change_bit(int nr, volatile unsigned long *addr)

WARNING:INLINE: plain inline is preferred over __inline__
#1006: FILE: include/asm-ppc/bitops.h:95:
+static __inline__ void change_bit(int nr, volatile unsigned long *addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1015: FILE: include/asm-ppc/bitops.h:115:
+static __inline__ void __change_bit(int nr, volatile unsigned long *addr)

WARNING:INLINE: plain inline is preferred over __inline__
#1015: FILE: include/asm-ppc/bitops.h:115:
+static __inline__ void __change_bit(int nr, volatile unsigned long *addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1024: FILE: include/asm-ppc/bitops.h:126:
+static __inline__ int test_and_set_bit(int nr, volatile unsigned long *addr)

WARNING:INLINE: plain inline is preferred over __inline__
#1024: FILE: include/asm-ppc/bitops.h:126:
+static __inline__ int test_and_set_bit(int nr, volatile unsigned long *addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1033: FILE: include/asm-ppc/bitops.h:149:
+static __inline__ int __test_and_set_bit(int nr, volatile unsigned long *addr)

WARNING:INLINE: plain inline is preferred over __inline__
#1033: FILE: include/asm-ppc/bitops.h:149:
+static __inline__ int __test_and_set_bit(int nr, volatile unsigned long *addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1042: FILE: include/asm-ppc/bitops.h:159:
+static __inline__ int test_and_clear_bit(int nr, volatile unsigned long *addr)

WARNING:INLINE: plain inline is preferred over __inline__
#1042: FILE: include/asm-ppc/bitops.h:159:
+static __inline__ int test_and_clear_bit(int nr, volatile unsigned long *addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1051: FILE: include/asm-ppc/bitops.h:182:
+static __inline__ int __test_and_clear_bit(int nr, volatile unsigned long *addr)

WARNING:INLINE: plain inline is preferred over __inline__
#1051: FILE: include/asm-ppc/bitops.h:182:
+static __inline__ int __test_and_clear_bit(int nr, volatile unsigned long *addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1060: FILE: include/asm-ppc/bitops.h:192:
+static __inline__ int test_and_change_bit(int nr, volatile unsigned long *addr)

WARNING:INLINE: plain inline is preferred over __inline__
#1060: FILE: include/asm-ppc/bitops.h:192:
+static __inline__ int test_and_change_bit(int nr, volatile unsigned long *addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1069: FILE: include/asm-ppc/bitops.h:215:
+static __inline__ int __test_and_change_bit(int nr, volatile unsigned long *addr)

WARNING:INLINE: plain inline is preferred over __inline__
#1069: FILE: include/asm-ppc/bitops.h:215:
+static __inline__ int __test_and_change_bit(int nr, volatile unsigned long *addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1078: FILE: include/asm-ppc/bitops.h:225:
+static __inline__ int test_bit(int nr, __const__ volatile unsigned long *addr)

WARNING:INLINE: plain inline is preferred over __inline__
#1078: FILE: include/asm-ppc/bitops.h:225:
+static __inline__ int test_bit(int nr, __const__ volatile unsigned long *addr)

WARNING:INLINE: plain inline is preferred over __inline__
#1087: FILE: include/asm-ppc/bitops.h:233:
+static __inline__ int __ilog2(unsigned long x)

WARNING:INLINE: plain inline is preferred over __inline__
#1096: FILE: include/asm-ppc/bitops.h:241:
+static __inline__ int ffz(unsigned long x)

WARNING:INLINE: plain inline is preferred over __inline__
#1105: FILE: include/asm-ppc/bitops.h:299:
+static __inline__ unsigned long find_next_bit(unsigned long *addr,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1106: FILE: include/asm-ppc/bitops.h:300:
+static __inline__ unsigned long find_next_bit(unsigned long *addr,
 	unsigned long size, unsigned long offset)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1114: FILE: include/asm-ppc/bitops.h:356:
+static __inline__ unsigned long find_next_zero_bit(unsigned long * addr,

WARNING:INLINE: plain inline is preferred over __inline__
#1114: FILE: include/asm-ppc/bitops.h:356:
+static __inline__ unsigned long find_next_zero_bit(unsigned long * addr,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1115: FILE: include/asm-ppc/bitops.h:357:
+static __inline__ unsigned long find_next_zero_bit(unsigned long * addr,
 	unsigned long size, unsigned long offset)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1137: FILE: include/linux/devfs_fs_kernel.h:57:
+    unsigned long *bits;$

CHECK:SPACING: No space is necessary after a cast
#1198: FILE: mm/swapfile.c:962:
+			if (test_bit(i,(unsigned long *) swap_header)) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1198: FILE: mm/swapfile.c:962:
+			if (test_bit(i,(unsigned long *) swap_header)) {
 			              ^

CHECK:SPACING: No space is necessary after a cast
#1207: FILE: mm/swapfile.c:977:
+			if (test_bit(i,(unsigned long *) swap_header))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1207: FILE: mm/swapfile.c:977:
+			if (test_bit(i,(unsigned long *) swap_header))
 			              ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000469553.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 77 errors, 91 warnings, 17 checks, 975 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000469553.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
