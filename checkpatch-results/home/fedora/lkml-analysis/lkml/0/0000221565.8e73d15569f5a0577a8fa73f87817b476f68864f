WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#34: 
legacy_io and legacy_mem files for use by userspace applications that want to 

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#92: FILE: arch/ia64/pci/pci.c:550:
+	if ((ret = pci_get_legacy_mem(bus, &addr)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#259: FILE: arch/ia64/sn/pci/pci_dma.c:534:
+		*(volatile u8 *)(addr) = (u8)(val);

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#263: FILE: arch/ia64/sn/pci/pci_dma.c:538:
+		*(volatile u16 *)(addr) = (u16)(val);

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#267: FILE: arch/ia64/sn/pci/pci_dma.c:542:
+		*(volatile u32 *)(addr) = (u32)(val);

ERROR:CODE_INDENT: code indent should use tabs where possible
#298: FILE: drivers/pci/pci-sysfs.c:196:
+        struct pci_bus *bus = to_pci_bus(container_of(kobj,$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#298: FILE: drivers/pci/pci-sysfs.c:196:
+        struct pci_bus *bus = to_pci_bus(container_of(kobj,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#299: FILE: drivers/pci/pci-sysfs.c:197:
+                                                      struct device, kobj));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#299: FILE: drivers/pci/pci-sysfs.c:197:
+                                                      struct device, kobj));$

ERROR:CODE_INDENT: code indent should use tabs where possible
#301: FILE: drivers/pci/pci-sysfs.c:199:
+        /* Only support 1, 2 or 4 byte accesses */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#302: FILE: drivers/pci/pci-sysfs.c:200:
+        if (count != 1 && count != 2 && count != 4)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#302: FILE: drivers/pci/pci-sysfs.c:200:
+        if (count != 1 && count != 2 && count != 4)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#303: FILE: drivers/pci/pci-sysfs.c:201:
+                return -EINVAL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#303: FILE: drivers/pci/pci-sysfs.c:201:
+                return -EINVAL;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#305: FILE: drivers/pci/pci-sysfs.c:203:
+        return pci_legacy_read(bus, off, (u32 *)buf, count);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#305: FILE: drivers/pci/pci-sysfs.c:203:
+        return pci_legacy_read(bus, off, (u32 *)buf, count);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#321: FILE: drivers/pci/pci-sysfs.c:219:
+        struct pci_bus *bus = to_pci_bus(container_of(kobj,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#321: FILE: drivers/pci/pci-sysfs.c:219:
+        struct pci_bus *bus = to_pci_bus(container_of(kobj,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#322: FILE: drivers/pci/pci-sysfs.c:220:
+                                                      struct device, kobj));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#322: FILE: drivers/pci/pci-sysfs.c:220:
+                                                      struct device, kobj));$

ERROR:CODE_INDENT: code indent should use tabs where possible
#323: FILE: drivers/pci/pci-sysfs.c:221:
+        /* Only support 1, 2 or 4 byte accesses */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#324: FILE: drivers/pci/pci-sysfs.c:222:
+        if (count != 1 && count != 2 && count != 4)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#324: FILE: drivers/pci/pci-sysfs.c:222:
+        if (count != 1 && count != 2 && count != 4)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#325: FILE: drivers/pci/pci-sysfs.c:223:
+                return -EINVAL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#325: FILE: drivers/pci/pci-sysfs.c:223:
+                return -EINVAL;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#327: FILE: drivers/pci/pci-sysfs.c:225:
+        return pci_legacy_write(bus, off, *(u32 *)buf, count);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#327: FILE: drivers/pci/pci-sysfs.c:225:
+        return pci_legacy_write(bus, off, *(u32 *)buf, count);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#342: FILE: drivers/pci/pci-sysfs.c:240:
+                    struct vm_area_struct *vma)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#342: FILE: drivers/pci/pci-sysfs.c:240:
+                    struct vm_area_struct *vma)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#344: FILE: drivers/pci/pci-sysfs.c:242:
+        struct pci_bus *bus = to_pci_bus(container_of(kobj,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#344: FILE: drivers/pci/pci-sysfs.c:242:
+        struct pci_bus *bus = to_pci_bus(container_of(kobj,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#345: FILE: drivers/pci/pci-sysfs.c:243:
+                                                      struct device, kobj));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#345: FILE: drivers/pci/pci-sysfs.c:243:
+                                                      struct device, kobj));$

ERROR:CODE_INDENT: code indent should use tabs where possible
#347: FILE: drivers/pci/pci-sysfs.c:245:
+        return pci_mmap_legacy_page_range(bus, vma);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#347: FILE: drivers/pci/pci-sysfs.c:245:
+        return pci_mmap_legacy_page_range(bus, vma);$

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*b->legacy_io)...) over kmalloc(sizeof(struct bin_attribute)...)
#363: FILE: drivers/pci/probe.c:807:
+	b->legacy_io = kmalloc(sizeof(struct bin_attribute) * 2,

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IWUSR' are not preferred. Consider using octal permissions '0600'.
#368: FILE: drivers/pci/probe.c:812:
+		b->legacy_io->attr.mode = S_IRUSR | S_IWUSR;

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#377: FILE: drivers/pci/probe.c:821:
+		b->legacy_mem->size = 1024*1024;
 		                          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IWUSR' are not preferred. Consider using octal permissions '0600'.
#378: FILE: drivers/pci/probe.c:822:
+		b->legacy_mem->attr.mode = S_IRUSR | S_IWUSR;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#501: FILE: include/asm-ia64/pci.h:89:
+extern int pci_mmap_legacy_page_range(struct pci_bus *bus,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#503: FILE: include/asm-ia64/pci.h:91:
+extern ssize_t pci_read_legacy_io(struct kobject *kobj, char *buf, loff_t off,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#505: FILE: include/asm-ia64/pci.h:93:
+extern ssize_t pci_write_legacy_io(struct kobject *kobj, char *buf, loff_t off,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#507: FILE: include/asm-ia64/pci.h:95:
+extern int pci_mmap_legacy_mem(struct kobject *kobj,

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#552: FILE: include/asm-ia64/sn/sn_sal.h:505:
+			*((u8*)data_ptr) = (u8)isrv.v0;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#555: FILE: include/asm-ia64/sn/sn_sal.h:508:
+			*((u16*)data_ptr) = (u16)isrv.v0;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#558: FILE: include/asm-ia64/sn/sn_sal.h:511:
+			*((u32*)data_ptr) = (u32)isrv.v0;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#561: FILE: include/asm-ia64/sn/sn_sal.h:514:
+			*((u64*)data_ptr) = (u64)isrv.v0;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000221565.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 21 errors, 20 warnings, 6 checks, 485 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000221565.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
