ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#119: FILE: fs/binfmt_elf.c:6:
Support

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#155: FILE: fs/binfmt_elf.c:492:
+	    /* first check things most likely to fail;
+	       magic number, type and architecture, so we bail out

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'elf_ex.e_ident[EI_CLASS] != ELF_CLASS'
#158: FILE: fs/binfmt_elf.c:495:
+	if (((memcmp(elf_ex.e_ident, ELFMAG, SELFMAG) != 0)) ||
+	    (elf_ex.e_type != ET_EXEC && elf_ex.e_type != ET_DYN) ||
+	    (!elf_check_arch(&elf_ex)) ||
+
+	    /* check all remaining entries in e_ident[] */
+	    (elf_ex.e_ident[EI_CLASS] != ELF_CLASS) ||
+	    (elf_ex.e_ident[EI_DATA] != ELF_DATA) ||
+	    (elf_ex.e_ident[EI_VERSION] != EV_CURRENT) || /* see comment for e_version */
+	    /* we don't check anything in e_ident[EI_PAD]
+	       the ELF spec states that when reading object files, these
+	       bytes should be ignored - reserved for future use.
+	     */
+
+	    /* check remaining ELF header fields */
+	    /*
+	      The value 1 signifies the original file format; extensions will
+	      create new versions with higher numbers. The value of EV_CURRENT,
+	      though being 1 currently , will change as necessary to reflect the
+	      current version number. This needs to be kept in mind when new ELF
+	      versions come out and we want to support new and old versions.
+	     */
+	     (elf_ex.e_version != EV_CURRENT) ||
+	     /* how can we check e_entry? any guarenteed invalid entry points? */
+	     /* need to come up with valid checks for e_phoff & e_shoff */
+	     /* e_flags is checked by elf_check_arch */
+	     (elf_ex.e_ehsize != sizeof(Elf_Ehdr)) ||
+	     /* e_phentsize checked below */
+	     /* how can we check e_phnum, e_shentsize & e_shnum ? */
+	     /* check for e_shstrndx needs to improve */
+	     ((elf_ex.e_shstrndx == SHN_UNDEF) && (elf_ex.e_shnum != 0)))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'elf_ex.e_ident[EI_DATA] != ELF_DATA'
#158: FILE: fs/binfmt_elf.c:495:
+	if (((memcmp(elf_ex.e_ident, ELFMAG, SELFMAG) != 0)) ||
+	    (elf_ex.e_type != ET_EXEC && elf_ex.e_type != ET_DYN) ||
+	    (!elf_check_arch(&elf_ex)) ||
+
+	    /* check all remaining entries in e_ident[] */
+	    (elf_ex.e_ident[EI_CLASS] != ELF_CLASS) ||
+	    (elf_ex.e_ident[EI_DATA] != ELF_DATA) ||
+	    (elf_ex.e_ident[EI_VERSION] != EV_CURRENT) || /* see comment for e_version */
+	    /* we don't check anything in e_ident[EI_PAD]
+	       the ELF spec states that when reading object files, these
+	       bytes should be ignored - reserved for future use.
+	     */
+
+	    /* check remaining ELF header fields */
+	    /*
+	      The value 1 signifies the original file format; extensions will
+	      create new versions with higher numbers. The value of EV_CURRENT,
+	      though being 1 currently , will change as necessary to reflect the
+	      current version number. This needs to be kept in mind when new ELF
+	      versions come out and we want to support new and old versions.
+	     */
+	     (elf_ex.e_version != EV_CURRENT) ||
+	     /* how can we check e_entry? any guarenteed invalid entry points? */
+	     /* need to come up with valid checks for e_phoff & e_shoff */
+	     /* e_flags is checked by elf_check_arch */
+	     (elf_ex.e_ehsize != sizeof(Elf_Ehdr)) ||
+	     /* e_phentsize checked below */
+	     /* how can we check e_phnum, e_shentsize & e_shnum ? */
+	     /* check for e_shstrndx needs to improve */
+	     ((elf_ex.e_shstrndx == SHN_UNDEF) && (elf_ex.e_shnum != 0)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'elf_ex.e_ident[EI_VERSION] != EV_CURRENT'
#158: FILE: fs/binfmt_elf.c:495:
+	if (((memcmp(elf_ex.e_ident, ELFMAG, SELFMAG) != 0)) ||
+	    (elf_ex.e_type != ET_EXEC && elf_ex.e_type != ET_DYN) ||
+	    (!elf_check_arch(&elf_ex)) ||
+
+	    /* check all remaining entries in e_ident[] */
+	    (elf_ex.e_ident[EI_CLASS] != ELF_CLASS) ||
+	    (elf_ex.e_ident[EI_DATA] != ELF_DATA) ||
+	    (elf_ex.e_ident[EI_VERSION] != EV_CURRENT) || /* see comment for e_version */
+	    /* we don't check anything in e_ident[EI_PAD]
+	       the ELF spec states that when reading object files, these
+	       bytes should be ignored - reserved for future use.
+	     */
+
+	    /* check remaining ELF header fields */
+	    /*
+	      The value 1 signifies the original file format; extensions will
+	      create new versions with higher numbers. The value of EV_CURRENT,
+	      though being 1 currently , will change as necessary to reflect the
+	      current version number. This needs to be kept in mind when new ELF
+	      versions come out and we want to support new and old versions.
+	     */
+	     (elf_ex.e_version != EV_CURRENT) ||
+	     /* how can we check e_entry? any guarenteed invalid entry points? */
+	     /* need to come up with valid checks for e_phoff & e_shoff */
+	     /* e_flags is checked by elf_check_arch */
+	     (elf_ex.e_ehsize != sizeof(Elf_Ehdr)) ||
+	     /* e_phentsize checked below */
+	     /* how can we check e_phnum, e_shentsize & e_shnum ? */
+	     /* check for e_shstrndx needs to improve */
+	     ((elf_ex.e_shstrndx == SHN_UNDEF) && (elf_ex.e_shnum != 0)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'elf_ex.e_version != EV_CURRENT'
#158: FILE: fs/binfmt_elf.c:495:
+	if (((memcmp(elf_ex.e_ident, ELFMAG, SELFMAG) != 0)) ||
+	    (elf_ex.e_type != ET_EXEC && elf_ex.e_type != ET_DYN) ||
+	    (!elf_check_arch(&elf_ex)) ||
+
+	    /* check all remaining entries in e_ident[] */
+	    (elf_ex.e_ident[EI_CLASS] != ELF_CLASS) ||
+	    (elf_ex.e_ident[EI_DATA] != ELF_DATA) ||
+	    (elf_ex.e_ident[EI_VERSION] != EV_CURRENT) || /* see comment for e_version */
+	    /* we don't check anything in e_ident[EI_PAD]
+	       the ELF spec states that when reading object files, these
+	       bytes should be ignored - reserved for future use.
+	     */
+
+	    /* check remaining ELF header fields */
+	    /*
+	      The value 1 signifies the original file format; extensions will
+	      create new versions with higher numbers. The value of EV_CURRENT,
+	      though being 1 currently , will change as necessary to reflect the
+	      current version number. This needs to be kept in mind when new ELF
+	      versions come out and we want to support new and old versions.
+	     */
+	     (elf_ex.e_version != EV_CURRENT) ||
+	     /* how can we check e_entry? any guarenteed invalid entry points? */
+	     /* need to come up with valid checks for e_phoff & e_shoff */
+	     /* e_flags is checked by elf_check_arch */
+	     (elf_ex.e_ehsize != sizeof(Elf_Ehdr)) ||
+	     /* e_phentsize checked below */
+	     /* how can we check e_phnum, e_shentsize & e_shnum ? */
+	     /* check for e_shstrndx needs to improve */
+	     ((elf_ex.e_shstrndx == SHN_UNDEF) && (elf_ex.e_shnum != 0)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'elf_ex.e_ehsize != sizeof(Elf_Ehdr)'
#158: FILE: fs/binfmt_elf.c:495:
+	if (((memcmp(elf_ex.e_ident, ELFMAG, SELFMAG) != 0)) ||
+	    (elf_ex.e_type != ET_EXEC && elf_ex.e_type != ET_DYN) ||
+	    (!elf_check_arch(&elf_ex)) ||
+
+	    /* check all remaining entries in e_ident[] */
+	    (elf_ex.e_ident[EI_CLASS] != ELF_CLASS) ||
+	    (elf_ex.e_ident[EI_DATA] != ELF_DATA) ||
+	    (elf_ex.e_ident[EI_VERSION] != EV_CURRENT) || /* see comment for e_version */
+	    /* we don't check anything in e_ident[EI_PAD]
+	       the ELF spec states that when reading object files, these
+	       bytes should be ignored - reserved for future use.
+	     */
+
+	    /* check remaining ELF header fields */
+	    /*
+	      The value 1 signifies the original file format; extensions will
+	      create new versions with higher numbers. The value of EV_CURRENT,
+	      though being 1 currently , will change as necessary to reflect the
+	      current version number. This needs to be kept in mind when new ELF
+	      versions come out and we want to support new and old versions.
+	     */
+	     (elf_ex.e_version != EV_CURRENT) ||
+	     /* how can we check e_entry? any guarenteed invalid entry points? */
+	     /* need to come up with valid checks for e_phoff & e_shoff */
+	     /* e_flags is checked by elf_check_arch */
+	     (elf_ex.e_ehsize != sizeof(Elf_Ehdr)) ||
+	     /* e_phentsize checked below */
+	     /* how can we check e_phnum, e_shentsize & e_shnum ? */
+	     /* check for e_shstrndx needs to improve */
+	     ((elf_ex.e_shstrndx == SHN_UNDEF) && (elf_ex.e_shnum != 0)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'elf_ex.e_shstrndx == SHN_UNDEF'
#158: FILE: fs/binfmt_elf.c:495:
+	if (((memcmp(elf_ex.e_ident, ELFMAG, SELFMAG) != 0)) ||
+	    (elf_ex.e_type != ET_EXEC && elf_ex.e_type != ET_DYN) ||
+	    (!elf_check_arch(&elf_ex)) ||
+
+	    /* check all remaining entries in e_ident[] */
+	    (elf_ex.e_ident[EI_CLASS] != ELF_CLASS) ||
+	    (elf_ex.e_ident[EI_DATA] != ELF_DATA) ||
+	    (elf_ex.e_ident[EI_VERSION] != EV_CURRENT) || /* see comment for e_version */
+	    /* we don't check anything in e_ident[EI_PAD]
+	       the ELF spec states that when reading object files, these
+	       bytes should be ignored - reserved for future use.
+	     */
+
+	    /* check remaining ELF header fields */
+	    /*
+	      The value 1 signifies the original file format; extensions will
+	      create new versions with higher numbers. The value of EV_CURRENT,
+	      though being 1 currently , will change as necessary to reflect the
+	      current version number. This needs to be kept in mind when new ELF
+	      versions come out and we want to support new and old versions.
+	     */
+	     (elf_ex.e_version != EV_CURRENT) ||
+	     /* how can we check e_entry? any guarenteed invalid entry points? */
+	     /* need to come up with valid checks for e_phoff & e_shoff */
+	     /* e_flags is checked by elf_check_arch */
+	     (elf_ex.e_ehsize != sizeof(Elf_Ehdr)) ||
+	     /* e_phentsize checked below */
+	     /* how can we check e_phnum, e_shentsize & e_shnum ? */
+	     /* check for e_shstrndx needs to improve */
+	     ((elf_ex.e_shstrndx == SHN_UNDEF) && (elf_ex.e_shnum != 0)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'elf_ex.e_shnum != 0'
#158: FILE: fs/binfmt_elf.c:495:
+	if (((memcmp(elf_ex.e_ident, ELFMAG, SELFMAG) != 0)) ||
+	    (elf_ex.e_type != ET_EXEC && elf_ex.e_type != ET_DYN) ||
+	    (!elf_check_arch(&elf_ex)) ||
+
+	    /* check all remaining entries in e_ident[] */
+	    (elf_ex.e_ident[EI_CLASS] != ELF_CLASS) ||
+	    (elf_ex.e_ident[EI_DATA] != ELF_DATA) ||
+	    (elf_ex.e_ident[EI_VERSION] != EV_CURRENT) || /* see comment for e_version */
+	    /* we don't check anything in e_ident[EI_PAD]
+	       the ELF spec states that when reading object files, these
+	       bytes should be ignored - reserved for future use.
+	     */
+
+	    /* check remaining ELF header fields */
+	    /*
+	      The value 1 signifies the original file format; extensions will
+	      create new versions with higher numbers. The value of EV_CURRENT,
+	      though being 1 currently , will change as necessary to reflect the
+	      current version number. This needs to be kept in mind when new ELF
+	      versions come out and we want to support new and old versions.
+	     */
+	     (elf_ex.e_version != EV_CURRENT) ||
+	     /* how can we check e_entry? any guarenteed invalid entry points? */
+	     /* need to come up with valid checks for e_phoff & e_shoff */
+	     /* e_flags is checked by elf_check_arch */
+	     (elf_ex.e_ehsize != sizeof(Elf_Ehdr)) ||
+	     /* e_phentsize checked below */
+	     /* how can we check e_phnum, e_shentsize & e_shnum ? */
+	     /* check for e_shstrndx needs to improve */
+	     ((elf_ex.e_shstrndx == SHN_UNDEF) && (elf_ex.e_shnum != 0)))

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#167: FILE: fs/binfmt_elf.c:504:
+	    /* we don't check anything in e_ident[EI_PAD]
+	       the ELF spec states that when reading object files, these

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#173: FILE: fs/binfmt_elf.c:510:
+	    /*
+	      The value 1 signifies the original file format; extensions will

WARNING:TYPO_SPELLING: 'guarenteed' may be misspelled - perhaps 'guaranteed'?
#180: FILE: fs/binfmt_elf.c:517:
+	     /* how can we check e_entry? any guarenteed invalid entry points? */
 	                                      ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:CAMELCASE: Avoid CamelCase: <Elf_Ehdr>
#183: FILE: fs/binfmt_elf.c:520:
+	     (elf_ex.e_ehsize != sizeof(Elf_Ehdr)) ||

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000312777.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 4 warnings, 8 checks, 84 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000312777.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
