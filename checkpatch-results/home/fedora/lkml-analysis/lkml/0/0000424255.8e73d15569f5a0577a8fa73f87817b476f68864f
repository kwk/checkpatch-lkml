WARNING:TYPO_SPELLING: 'neccessary' may be misspelled - perhaps 'necessary'?
#27: 
More work will be neccessary to completely disentangle both files, so that 
                  ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#596: FILE: include/linux/tasks.h:1:
+#ifndef _LINUX_TASKS_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#599: FILE: include/linux/tasks.h:4:
+#include <asm/atomic.h> /* sem.h needs this first */

WARNING:INCLUDE_LINUX: Use #include <linux/processor.h> instead of <asm/processor.h>
#611: FILE: include/linux/tasks.h:16:
+#include <asm/processor.h>

CHECK:LINE_SPACING: Please don't use multiple blank lines
#614: FILE: include/linux/tasks.h:19:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#622: FILE: include/linux/tasks.h:27:
+#define __set_task_state(tsk, state_value)		\
+	do { (tsk)->state = (state_value); } while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#632: FILE: include/linux/tasks.h:37:
+#define __set_current_state(state_value)			\
+	do { current->state = (state_value); } while (0)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#649: FILE: include/linux/tasks.h:54:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#652: FILE: include/linux/tasks.h:57:
+
+

WARNING:NEW_TYPEDEFS: do not add new typedefs
#653: FILE: include/linux/tasks.h:58:
+typedef struct prio_array prio_array_t;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#657: FILE: include/linux/tasks.h:62:
+	volatile long state;	/* -1 unrunnable, 0 runnable, >0 stopped */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#699: FILE: include/linux/tasks.h:104:
+^I/* $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#701: FILE: include/linux/tasks.h:106:
+^I * older sibling, respectively.  (p->father can be replaced with $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#728: FILE: include/linux/tasks.h:133:
+	uid_t uid,euid,suid,fsuid;
 	         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#728: FILE: include/linux/tasks.h:133:
+	uid_t uid,euid,suid,fsuid;
 	              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#728: FILE: include/linux/tasks.h:133:
+	uid_t uid,euid,suid,fsuid;
 	                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#729: FILE: include/linux/tasks.h:134:
+	gid_t gid,egid,sgid,fsgid;
 	         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#729: FILE: include/linux/tasks.h:134:
+	gid_t gid,egid,sgid,fsgid;
 	              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#729: FILE: include/linux/tasks.h:134:
+	gid_t gid,egid,sgid,fsgid;
 	                   ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#764: FILE: include/linux/tasks.h:169:
+^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#768: FILE: include/linux/tasks.h:173:
+   ^Iu32 parent_exec_id;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#768: FILE: include/linux/tasks.h:173:
+   ^Iu32 parent_exec_id;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#768: FILE: include/linux/tasks.h:173:
+   ^Iu32 parent_exec_id;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#769: FILE: include/linux/tasks.h:174:
+   ^Iu32 self_exec_id;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#769: FILE: include/linux/tasks.h:174:
+   ^Iu32 self_exec_id;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#769: FILE: include/linux/tasks.h:174:
+   ^Iu32 self_exec_id;$

WARNING:NEW_TYPEDEFS: do not add new typedefs
#781: FILE: include/linux/tasks.h:186:
+typedef struct task_struct task_t;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#783: FILE: include/linux/tasks.h:188:
+extern void __put_task_struct(struct task_struct *tsk);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:SPACING: space required before the open parenthesis '('
#784: FILE: include/linux/tasks.h:189:
+#define get_task_struct(tsk) do { atomic_inc(&(tsk)->usage); } while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#784: FILE: include/linux/tasks.h:189:
+#define get_task_struct(tsk) do { atomic_inc(&(tsk)->usage); } while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'tsk' - possible side-effects?
#785: FILE: include/linux/tasks.h:190:
+#define put_task_struct(tsk) \
+do { if (atomic_dec_and_test(&(tsk)->usage)) __put_task_struct(tsk); } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#786: FILE: include/linux/tasks.h:191:
+do { if (atomic_dec_and_test(&(tsk)->usage)) __put_task_struct(tsk); } while(0)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#823: FILE: include/linux/tasks.h:228:
+
+

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#837: FILE: include/linux/tasks.h:242:
+#define __wait_event(wq, condition) ^I^I^I^I^I\$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'wq' - possible side-effects?
#837: FILE: include/linux/tasks.h:242:
+#define __wait_event(wq, condition) 					\
+do {									\
+	wait_queue_t __wait;						\
+	init_waitqueue_entry(&__wait, current);				\
+									\
+	add_wait_queue(&wq, &__wait);					\
+	for (;;) {							\
+		set_current_state(TASK_UNINTERRUPTIBLE);		\
+		if (condition)						\
+			break;						\
+		schedule();						\
+	}								\
+	current->state = TASK_RUNNING;					\
+	remove_wait_queue(&wq, &__wait);				\
+} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'wq' may be better as '(wq)' to avoid precedence issues
#837: FILE: include/linux/tasks.h:242:
+#define __wait_event(wq, condition) 					\
+do {									\
+	wait_queue_t __wait;						\
+	init_waitqueue_entry(&__wait, current);				\
+									\
+	add_wait_queue(&wq, &__wait);					\
+	for (;;) {							\
+		set_current_state(TASK_UNINTERRUPTIBLE);		\
+		if (condition)						\
+			break;						\
+		schedule();						\
+	}								\
+	current->state = TASK_RUNNING;					\
+	remove_wait_queue(&wq, &__wait);				\
+} while (0)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#853: FILE: include/linux/tasks.h:258:
+#define wait_event(wq, condition) ^I^I^I^I^I\$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'condition' - possible side-effects?
#853: FILE: include/linux/tasks.h:258:
+#define wait_event(wq, condition) 					\
+do {									\
+	if (condition)	 						\
+		break;							\
+	__wait_event(wq, condition);					\
+} while (0)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#855: FILE: include/linux/tasks.h:260:
+^Iif (condition)^I ^I^I^I^I^I^I\$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'wq' - possible side-effects?
#860: FILE: include/linux/tasks.h:265:
+#define __wait_event_interruptible(wq, condition, ret)			\
+do {									\
+	wait_queue_t __wait;						\
+	init_waitqueue_entry(&__wait, current);				\
+									\
+	add_wait_queue(&wq, &__wait);					\
+	for (;;) {							\
+		set_current_state(TASK_INTERRUPTIBLE);			\
+		if (condition)						\
+			break;						\
+		if (!signal_pending(current)) {				\
+			schedule();					\
+			continue;					\
+		}							\
+		ret = -ERESTARTSYS;					\
+		break;							\
+	}								\
+	current->state = TASK_RUNNING;					\
+	remove_wait_queue(&wq, &__wait);				\
+} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'wq' may be better as '(wq)' to avoid precedence issues
#860: FILE: include/linux/tasks.h:265:
+#define __wait_event_interruptible(wq, condition, ret)			\
+do {									\
+	wait_queue_t __wait;						\
+	init_waitqueue_entry(&__wait, current);				\
+									\
+	add_wait_queue(&wq, &__wait);					\
+	for (;;) {							\
+		set_current_state(TASK_INTERRUPTIBLE);			\
+		if (condition)						\
+			break;						\
+		if (!signal_pending(current)) {				\
+			schedule();					\
+			continue;					\
+		}							\
+		ret = -ERESTARTSYS;					\
+		break;							\
+	}								\
+	current->state = TASK_RUNNING;					\
+	remove_wait_queue(&wq, &__wait);				\
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'condition' - possible side-effects?
#881: FILE: include/linux/tasks.h:286:
+#define wait_event_interruptible(wq, condition)				\
+({									\
+	int __ret = 0;							\
+	if (!(condition))						\
+		__wait_event_interruptible(wq, condition, __ret);	\
+	__ret;								\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'wq' - possible side-effects?
#889: FILE: include/linux/tasks.h:294:
+#define __wait_event_interruptible_timeout(wq, condition, ret)		\
+do {									\
+	wait_queue_t __wait;						\
+	init_waitqueue_entry(&__wait, current);				\
+									\
+	add_wait_queue(&wq, &__wait);					\
+	for (;;) {							\
+		set_current_state(TASK_INTERRUPTIBLE);			\
+		if (condition)						\
+			break;						\
+		if (!signal_pending(current)) {				\
+			ret = schedule_timeout(ret);			\
+			if (!ret)					\
+				break;					\
+			continue;					\
+		}							\
+		ret = -ERESTARTSYS;					\
+		break;							\
+	}								\
+	current->state = TASK_RUNNING;					\
+	remove_wait_queue(&wq, &__wait);				\
+} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'wq' may be better as '(wq)' to avoid precedence issues
#889: FILE: include/linux/tasks.h:294:
+#define __wait_event_interruptible_timeout(wq, condition, ret)		\
+do {									\
+	wait_queue_t __wait;						\
+	init_waitqueue_entry(&__wait, current);				\
+									\
+	add_wait_queue(&wq, &__wait);					\
+	for (;;) {							\
+		set_current_state(TASK_INTERRUPTIBLE);			\
+		if (condition)						\
+			break;						\
+		if (!signal_pending(current)) {				\
+			ret = schedule_timeout(ret);			\
+			if (!ret)					\
+				break;					\
+			continue;					\
+		}							\
+		ret = -ERESTARTSYS;					\
+		break;							\
+	}								\
+	current->state = TASK_RUNNING;					\
+	remove_wait_queue(&wq, &__wait);				\
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ret' - possible side-effects?
#889: FILE: include/linux/tasks.h:294:
+#define __wait_event_interruptible_timeout(wq, condition, ret)		\
+do {									\
+	wait_queue_t __wait;						\
+	init_waitqueue_entry(&__wait, current);				\
+									\
+	add_wait_queue(&wq, &__wait);					\
+	for (;;) {							\
+		set_current_state(TASK_INTERRUPTIBLE);			\
+		if (condition)						\
+			break;						\
+		if (!signal_pending(current)) {				\
+			ret = schedule_timeout(ret);			\
+			if (!ret)					\
+				break;					\
+			continue;					\
+		}							\
+		ret = -ERESTARTSYS;					\
+		break;							\
+	}								\
+	current->state = TASK_RUNNING;					\
+	remove_wait_queue(&wq, &__wait);				\
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'condition' - possible side-effects?
#912: FILE: include/linux/tasks.h:317:
+#define wait_event_interruptible_timeout(wq, condition, timeout)	\
+({									\
+	long __ret = timeout;						\
+	if (!(condition))						\
+		__wait_event_interruptible_timeout(wq, condition, __ret); \
+	__ret;								\
+})

ERROR:TRAILING_WHITESPACE: trailing whitespace
#919: FILE: include/linux/tasks.h:324:
+^I$

ERROR:SPACING: space required after that ',' (ctx:VxO)
#921: FILE: include/linux/tasks.h:326:
+#define add_parent(p, parent)	list_add_tail(&(p)->sibling,&(parent)->children)
                              	                           ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#921: FILE: include/linux/tasks.h:326:
+#define add_parent(p, parent)	list_add_tail(&(p)->sibling,&(parent)->children)
                              	                            ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#923: FILE: include/linux/tasks.h:328:
+#define REMOVE_LINKS(p) do {					\
+	if (thread_group_leader(p))				\
+		list_del_init(&(p)->tasks);			\
+	remove_parent(p);					\
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#929: FILE: include/linux/tasks.h:334:
+#define SET_LINKS(p) do {					\
+	if (thread_group_leader(p))				\
+		list_add_tail(&(p)->tasks,&init_task.tasks);	\
+	add_parent(p, (p)->parent);				\
+	} while (0)

ERROR:SPACING: space required after that ',' (ctx:VxO)
#931: FILE: include/linux/tasks.h:336:
+		list_add_tail(&(p)->tasks,&init_task.tasks);	\
 		                         ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#931: FILE: include/linux/tasks.h:336:
+		list_add_tail(&(p)->tasks,&init_task.tasks);	\
 		                          ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#937: FILE: include/linux/tasks.h:342:
+	if (list_empty(&p->children)) return NULL;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#938: FILE: include/linux/tasks.h:343:
+	return list_entry(p->children.next,struct task_struct,sibling);
 	                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#938: FILE: include/linux/tasks.h:343:
+	return list_entry(p->children.next,struct task_struct,sibling);
 	                                                     ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#943: FILE: include/linux/tasks.h:348:
+	if (list_empty(&p->children)) return NULL;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#944: FILE: include/linux/tasks.h:349:
+	return list_entry(p->children.prev,struct task_struct,sibling);
 	                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#944: FILE: include/linux/tasks.h:349:
+	return list_entry(p->children.prev,struct task_struct,sibling);
 	                                                     ^

ERROR:SPACING: spaces required around that '==' (ctx:VxO)
#949: FILE: include/linux/tasks.h:354:
+	if (p->sibling.prev==&p->parent->children) return NULL;
 	                   ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#949: FILE: include/linux/tasks.h:354:
+	if (p->sibling.prev==&p->parent->children) return NULL;
 	                     ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#949: FILE: include/linux/tasks.h:354:
+	if (p->sibling.prev==&p->parent->children) return NULL;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#950: FILE: include/linux/tasks.h:355:
+	return list_entry(p->sibling.prev,struct task_struct,sibling);
 	                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#950: FILE: include/linux/tasks.h:355:
+	return list_entry(p->sibling.prev,struct task_struct,sibling);
 	                                                    ^

ERROR:SPACING: spaces required around that '==' (ctx:VxO)
#955: FILE: include/linux/tasks.h:360:
+	if (p->sibling.next==&p->parent->children) return NULL;
 	                   ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#955: FILE: include/linux/tasks.h:360:
+	if (p->sibling.next==&p->parent->children) return NULL;
 	                     ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#955: FILE: include/linux/tasks.h:360:
+	if (p->sibling.next==&p->parent->children) return NULL;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#956: FILE: include/linux/tasks.h:361:
+	return list_entry(p->sibling.next,struct task_struct,sibling);
 	                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#956: FILE: include/linux/tasks.h:361:
+	return list_entry(p->sibling.next,struct task_struct,sibling);
 	                                                    ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#962: FILE: include/linux/tasks.h:367:
+#define for_each_process(p) \
+	for (p = &init_task ; (p = next_task(p)) != &init_task ; )

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'g' - possible side-effects?
#969: FILE: include/linux/tasks.h:374:
+#define do_each_thread(g, t) \
+	for (g = t = &init_task ; (g = t = next_task(g)) != &init_task ; ) do

CHECK:MACRO_ARG_REUSE: Macro argument reuse 't' - possible side-effects?
#969: FILE: include/linux/tasks.h:374:
+#define do_each_thread(g, t) \
+	for (g = t = &init_task ; (g = t = next_task(g)) != &init_task ; ) do

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#970: FILE: include/linux/tasks.h:375:
+	for (g = t = &init_task ; (g = t = next_task(g)) != &init_task ; ) do

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#972: FILE: include/linux/tasks.h:377:
+#define while_each_thread(g, t) \
+	while ((t = next_thread(t)) != g)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'g' may be better as '(g)' to avoid precedence issues
#972: FILE: include/linux/tasks.h:377:
+#define while_each_thread(g, t) \
+	while ((t = next_thread(t)) != g)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 't' - possible side-effects?
#972: FILE: include/linux/tasks.h:377:
+#define while_each_thread(g, t) \
+	while ((t = next_thread(t)) != g)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#975: FILE: include/linux/tasks.h:380:
+#define thread_group_leader(p)	(p->pid == p->tgid)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'p' may be better as '(p)' to avoid precedence issues
#975: FILE: include/linux/tasks.h:380:
+#define thread_group_leader(p)	(p->pid == p->tgid)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#984: FILE: include/linux/tasks.h:389:
+#define delay_group_leader(p) \
+		(thread_group_leader(p) && !thread_group_empty(p))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#998: FILE: include/linux/tasks.h:403:
+ $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#998: FILE: include/linux/tasks.h:403:
+
+ 

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#998: FILE: include/linux/tasks.h:403:
+ $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1004: FILE: include/linux/tasks.h:409:
+	set_ti_thread_flag(tsk->thread_info,flag);
 	                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1009: FILE: include/linux/tasks.h:414:
+	clear_ti_thread_flag(tsk->thread_info,flag);
 	                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1014: FILE: include/linux/tasks.h:419:
+	return test_and_set_ti_thread_flag(tsk->thread_info,flag);
 	                                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1019: FILE: include/linux/tasks.h:424:
+	return test_and_clear_ti_thread_flag(tsk->thread_info,flag);
 	                                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1024: FILE: include/linux/tasks.h:429:
+	return test_ti_thread_flag(tsk->thread_info,flag);
 	                                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1029: FILE: include/linux/tasks.h:434:
+	set_tsk_thread_flag(tsk,TIF_NEED_RESCHED);
 	                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1034: FILE: include/linux/tasks.h:439:
+	clear_tsk_thread_flag(tsk,TIF_NEED_RESCHED);
 	                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1039: FILE: include/linux/tasks.h:444:
+	return unlikely(test_tsk_thread_flag(p,TIF_SIGPENDING));
 	                                      ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1041: FILE: include/linux/tasks.h:446:
+  $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1041: FILE: include/linux/tasks.h:446:
+  $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1075: FILE: include/linux/tasks.h:480:
+
+

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000424255.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 46 errors, 19 warnings, 28 checks, 1024 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000424255.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
