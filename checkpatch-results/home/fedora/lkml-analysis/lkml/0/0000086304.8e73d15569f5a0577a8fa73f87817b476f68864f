CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#46: FILE: include/linux/mm.h:871:
+extern void free_area_init_nodes(unsigned long max_dma_pfn,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#47: FILE: include/linux/mm.h:872:
+extern void free_area_init_nodes(unsigned long max_dma_pfn,
+					unsigned long max_dma32_pfn,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#50: FILE: include/linux/mm.h:875:
+extern void add_active_range(unsigned int nid, unsigned long start_pfn,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#51: FILE: include/linux/mm.h:876:
+extern void add_active_range(unsigned int nid, unsigned long start_pfn,
+					unsigned long end_pfn);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#52: FILE: include/linux/mm.h:877:
+extern void get_pfn_range_for_nid(unsigned int nid,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#53: FILE: include/linux/mm.h:878:
+extern void get_pfn_range_for_nid(unsigned int nid,
+			unsigned long *start_pfn, unsigned long *end_pfn);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#54: FILE: include/linux/mm.h:879:
+extern int early_pfn_to_nid(unsigned long pfn);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#55: FILE: include/linux/mm.h:880:
+extern void free_bootmem_with_active_regions(int nid,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#56: FILE: include/linux/mm.h:881:
+extern void free_bootmem_with_active_regions(int nid,
+						unsigned long max_low_pfn);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#57: FILE: include/linux/mm.h:882:
+extern void memory_present_with_active_regions(int nid);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#117: FILE: mm/page_alloc.c:96:
+  struct node_active_region __initdata early_node_map[MAX_ACTIVE_REGIONS];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#118: FILE: mm/page_alloc.c:97:
+  unsigned long __initdata arch_zone_lowest_possible_pfn[MAX_NR_ZONES];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#119: FILE: mm/page_alloc.c:98:
+  unsigned long __initdata arch_zone_highest_possible_pfn[MAX_NR_ZONES];$

WARNING:LINE_SPACING: Missing a blank line after declarations
#159: FILE: mm/page_alloc.c:2050:
+	int i;
+	for (i = 0; early_node_map[i].end_pfn; i++) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'start_pfn <= pfn'
#186: FILE: mm/page_alloc.c:2077:
+		if ((start_pfn <= pfn) && (pfn < end_pfn))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pfn < end_pfn'
#186: FILE: mm/page_alloc.c:2077:
+		if ((start_pfn <= pfn) && (pfn < end_pfn))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'i' - possible side-effects?
#194: FILE: mm/page_alloc.c:2085:
+#define for_each_active_range_index_in_nid(i, nid) \
+	for (i = first_active_region_index_in_nid(nid); \
+				i != MAX_ACTIVE_REGIONS; \
+				i = next_active_region_index_in_nid(i, nid))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'nid' - possible side-effects?
#194: FILE: mm/page_alloc.c:2085:
+#define for_each_active_range_index_in_nid(i, nid) \
+	for (i = first_active_region_index_in_nid(nid); \
+				i != MAX_ACTIVE_REGIONS; \
+				i = next_active_region_index_in_nid(i, nid))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#200: FILE: mm/page_alloc.c:2091:
+void __init free_bootmem_with_active_regions(int nid,
+						unsigned long max_low_pfn)

WARNING:LINE_SPACING: Missing a blank line after declarations
#203: FILE: mm/page_alloc.c:2094:
+	unsigned int i;
+	for_each_active_range_index_in_nid(i, nid) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#206: FILE: mm/page_alloc.c:2097:
+		unsigned long end_pfn = early_node_map[i].end_pfn;
+		if (early_node_map[i].start_pfn >= max_low_pfn)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#214: FILE: mm/page_alloc.c:2105:
+		free_bootmem_node(NODE_DATA(early_node_map[i].nid),
+				PFN_PHYS(early_node_map[i].start_pfn),

WARNING:LINE_SPACING: Missing a blank line after declarations
#222: FILE: mm/page_alloc.c:2113:
+	unsigned int i;
+	for_each_active_range_index_in_nid(i, nid)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#224: FILE: mm/page_alloc.c:2115:
+		memory_present(early_node_map[i].nid,
+				early_node_map[i].start_pfn,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#229: FILE: mm/page_alloc.c:2120:
+void __init get_pfn_range_for_nid(unsigned int nid,
+			unsigned long *start_pfn, unsigned long *end_pfn)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#244: FILE: mm/page_alloc.c:2135:
+		printk(KERN_WARNING "Node %u active with no memory\n", nid);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#250: FILE: mm/page_alloc.c:2141:
+unsigned long __init zone_present_pages_in_node(int nid,
+					unsigned long zone_type,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#276: FILE: mm/page_alloc.c:2167:
+static inline int __init pfn_range_in_zone(unsigned long start_pfn,
+		unsigned long end_pfn,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#295: FILE: mm/page_alloc.c:2186:
+unsigned long __init zone_absent_pages_in_node(int nid,
+					unsigned long zone_type,

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#309: FILE: mm/page_alloc.c:2200:
+			i = next_active_region_index_in_nid(i, nid)) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#313: FILE: mm/page_alloc.c:2204:
+			BUG_ON(prev_end_pfn > start_pfn);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#324: FILE: mm/page_alloc.c:2215:
+static inline unsigned long zone_present_pages_in_node(int nid,
+					unsigned long zone_type,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#331: FILE: mm/page_alloc.c:2222:
+static inline unsigned long zone_absent_pages_in_node(int nid,
+						unsigned long zone_type,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#342: FILE: mm/page_alloc.c:2233:
+static void __init calculate_node_totalpages(struct pglist_data *pgdat,
+		unsigned long *zones_size, unsigned long *zholes_size)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#359: FILE: mm/page_alloc.c:2250:
+	printk(KERN_DEBUG "On node %d totalpages: %lu\n", pgdat->node_id,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#360: FILE: mm/page_alloc.c:2251:
+	printk(KERN_DEBUG "On node %d totalpages: %lu\n", pgdat->node_id,
+							realtotalpages);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#394: FILE: mm/page_alloc.c:2354:
+void __init add_active_range(unsigned int nid, unsigned long start_pfn,
+						unsigned long end_pfn)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#420: FILE: mm/page_alloc.c:2380:
+		printk(KERN_ERR "WARNING: too many memory regions in "

WARNING:SPLIT_STRING: quoted string split across lines
#421: FILE: mm/page_alloc.c:2381:
+		printk(KERN_ERR "WARNING: too many memory regions in "
+				"numa code, truncating\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:LINE_SPACING: Missing a blank line after declarations
#449: FILE: mm/page_alloc.c:2409:
+	size_t num = 0;
+	while (early_node_map[num].end_pfn)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#453: FILE: mm/page_alloc.c:2413:
+	sort(early_node_map, num, sizeof(struct node_active_region),
+						cmp_node_active_region, NULL);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#480: FILE: mm/page_alloc.c:2440:
+	printk(KERN_WARNING "Could not find start_pfn for node %lu\n", nid);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#485: FILE: mm/page_alloc.c:2445:
+void __init free_area_init_nodes(unsigned long arch_max_dma_pfn,
+				unsigned long arch_max_dma32_pfn,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#493: FILE: mm/page_alloc.c:2453:
+	memset(arch_zone_lowest_possible_pfn, 0,
+				sizeof(arch_zone_lowest_possible_pfn));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#495: FILE: mm/page_alloc.c:2455:
+	memset(arch_zone_highest_possible_pfn, 0,
+				sizeof(arch_zone_highest_possible_pfn));

WARNING:LINE_SPACING: Missing a blank line after declarations
#510: FILE: mm/page_alloc.c:2470:
+		pg_data_t *pgdat = NODE_DATA(nid);
+		free_area_init_node(nid, pgdat, NULL,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#511: FILE: mm/page_alloc.c:2471:
+		free_area_init_node(nid, pgdat, NULL,
+				find_start_pfn_for_node(nid), NULL);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000086304.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 0 errors, 15 warnings, 32 checks, 463 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000086304.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
