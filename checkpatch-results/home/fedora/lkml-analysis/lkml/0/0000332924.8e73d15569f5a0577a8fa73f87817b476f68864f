ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#72: 
--- a/fs/block_dev.c	Wed Oct  1 20:59:02 2003

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#78: FILE: fs/block_dev.c:73:
+EXPORT_SYMBOL(set_blocksize);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#87: FILE: fs/block_dev.c:87:
+EXPORT_SYMBOL(sb_set_blocksize);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#96: FILE: fs/block_dev.c:97:
+EXPORT_SYMBOL(sb_min_blocksize);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#105: FILE: fs/block_dev.c:367:
+EXPORT_SYMBOL(bdget);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#115: FILE: fs/block_dev.c:388:
+EXPORT_SYMBOL(bdput);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#123: FILE: fs/block_dev.c:457:
+EXPORT_SYMBOL(bd_claim);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#132: FILE: fs/block_dev.c:469:
+EXPORT_SYMBOL(bd_release);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#141: FILE: fs/block_dev.c:488:
+EXPORT_SYMBOL(open_by_devnum);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#150: FILE: fs/block_dev.c:519:
+EXPORT_SYMBOL(check_disk_change);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#159: FILE: fs/block_dev.c:653:
+EXPORT_SYMBOL(blkdev_get);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#168: FILE: fs/block_dev.c:685:
+EXPORT_SYMBOL(blkdev_open);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#177: FILE: fs/block_dev.c:735:
+EXPORT_SYMBOL(blkdev_put);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#186: FILE: fs/block_dev.c:787:
+EXPORT_SYMBOL(def_blk_fops);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#195: FILE: fs/block_dev.c:799:
+EXPORT_SYMBOL(ioctl_by_bdev);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#204: FILE: fs/block_dev.c:885:
+EXPORT_SYMBOL(open_bdev_excl);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#214: FILE: fs/block_dev.c:901:
+EXPORT_SYMBOL(close_bdev_excl);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#222: FILE: fs/exec.c:86:
+EXPORT_SYMBOL(register_binfmt);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#231: FILE: fs/exec.c:105:
+EXPORT_SYMBOL(unregister_binfmt);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#240: FILE: fs/exec.c:288:
+EXPORT_SYMBOL(copy_strings_kernel);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#249: FILE: fs/exec.c:452:
+EXPORT_SYMBOL(setup_arg_pages);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#258: FILE: fs/exec.c:504:
+EXPORT_SYMBOL(open_exec);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#267: FILE: fs/exec.c:521:
+EXPORT_SYMBOL(kernel_read);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#276: FILE: fs/exec.c:837:
+EXPORT_SYMBOL(flush_old_exec);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#285: FILE: fs/exec.c:895:
+EXPORT_SYMBOL(prepare_binprm);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#294: FILE: fs/exec.c:937:
+EXPORT_SYMBOL(compute_creds);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#303: FILE: fs/exec.c:963:
+EXPORT_SYMBOL(remove_arg_zero);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#312: FILE: fs/exec.c:1060:
+EXPORT_SYMBOL(search_binary_handler);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#321: FILE: fs/exec.c:1158:
+EXPORT_SYMBOL(do_execve);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#331: FILE: fs/exec.c:1174:
+EXPORT_SYMBOL(set_binfmt);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#342: FILE: fs/inode.c:198:
+EXPORT_SYMBOL(inode_init_once);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#359: FILE: fs/inode.c:255:
+EXPORT_SYMBOL(clear_inode);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#377: FILE: fs/inode.c:352:
+EXPORT_SYMBOL(invalidate_inodes);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#385: FILE: fs/inode.c:379:
+EXPORT_SYMBOL(__invalidate_device);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#402: FILE: fs/inode.c:560:
+EXPORT_SYMBOL(new_inode);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#427: FILE: fs/inode.c:719:
+EXPORT_SYMBOL(iunique);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#436: FILE: fs/inode.c:737:
+EXPORT_SYMBOL(igrab);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#485: FILE: fs/inode.c:949:
+EXPORT_SYMBOL(__insert_inode_hash);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#501: FILE: fs/inode.c:964:
+EXPORT_SYMBOL(remove_inode_hash);

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#526: FILE: fs/inode.c:1096:
+EXPORT_SYMBOL(iput);
               ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#526: FILE: fs/inode.c:1096:
+EXPORT_SYMBOL(iput);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#543: FILE: fs/inode.c:1117:
+EXPORT_SYMBOL(bmap);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#560: FILE: fs/inode.c:1161:
+EXPORT_SYMBOL(update_atime);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#586: FILE: fs/inode.c:1402:
+EXPORT_SYMBOL(init_special_inode);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#602: FILE: fs/seq_file.c:41:
+EXPORT_SYMBOL(seq_open);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#611: FILE: fs/seq_file.c:150:
+EXPORT_SYMBOL(seq_read);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#620: FILE: fs/seq_file.c:236:
+EXPORT_SYMBOL(seq_lseek);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#629: FILE: fs/seq_file.c:254:
+EXPORT_SYMBOL(seq_release);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#638: FILE: fs/seq_file.c:291:
+EXPORT_SYMBOL(seq_escape);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#647: FILE: fs/seq_file.c:311:
+EXPORT_SYMBOL(seq_printf);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#661: FILE: fs/seq_file.c:344:
+EXPORT_SYMBOL(seq_path);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#680: FILE: fs/seq_file.c:381:
+EXPORT_SYMBOL(single_open);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#689: FILE: fs/seq_file.c:391:
+EXPORT_SYMBOL(single_release);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#698: FILE: fs/seq_file.c:402:
+EXPORT_SYMBOL(seq_release_private);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#714: FILE: fs/super.c:138:
+EXPORT_SYMBOL(deactivate_super);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#723: FILE: fs/super.c:220:
+EXPORT_SYMBOL(generic_shutdown_super);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#732: FILE: fs/super.c:267:
+EXPORT_SYMBOL(sget);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#740: FILE: fs/super.c:275:
+EXPORT_SYMBOL(drop_super);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#750: FILE: fs/super.c:395:
+EXPORT_SYMBOL(get_super);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#758: FILE: fs/super.c:419:
+EXPORT_SYMBOL(user_get_super);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#767: FILE: fs/super.c:550:
+EXPORT_SYMBOL(set_anon_super);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#776: FILE: fs/super.c:561:
+EXPORT_SYMBOL(kill_anon_super);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#785: FILE: fs/super.c:570:
+EXPORT_SYMBOL(kill_litter_super);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#794: FILE: fs/super.c:630:
+EXPORT_SYMBOL(get_sb_bdev);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#803: FILE: fs/super.c:640:
+EXPORT_SYMBOL(kill_block_super);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#812: FILE: fs/super.c:664:
+EXPORT_SYMBOL(get_sb_nodev);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#821: FILE: fs/super.c:695:
+EXPORT_SYMBOL(get_sb_single);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#831: FILE: fs/super.c:740:
+EXPORT_SYMBOL(kern_mount);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1020: FILE: kernel/sysctl.c:2005:
+EXPORT_SYMBOL(proc_dointvec_minmax);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1021: FILE: kernel/sysctl.c:2006:
+EXPORT_SYMBOL(proc_dostring);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1022: FILE: kernel/sysctl.c:2007:
+EXPORT_SYMBOL(proc_doulongvec_minmax);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1023: FILE: kernel/sysctl.c:2008:
+EXPORT_SYMBOL(proc_doulongvec_ms_jiffies_minmax);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1024: FILE: kernel/sysctl.c:2009:
+EXPORT_SYMBOL(register_sysctl_table);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1025: FILE: kernel/sysctl.c:2010:
+EXPORT_SYMBOL(sysctl_intvec);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1026: FILE: kernel/sysctl.c:2011:
+EXPORT_SYMBOL(sysctl_jiffies);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1027: FILE: kernel/sysctl.c:2012:
+EXPORT_SYMBOL(sysctl_string);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1028: FILE: kernel/sysctl.c:2013:
+EXPORT_SYMBOL(unregister_sysctl_table);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000332924.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 76 warnings, 0 checks, 842 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000332924.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
