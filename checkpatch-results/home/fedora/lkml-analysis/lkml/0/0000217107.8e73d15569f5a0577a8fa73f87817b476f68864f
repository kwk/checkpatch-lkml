WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#54: FILE: kernel/kprobes.c:138:
+	char *module, namebuf[KSYM_NAME_LEN+1];
 	                                   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#58: FILE: kernel/kprobes.c:142:
+	if(k->pre_handler) {

ERROR:SPACING: space required before the open parenthesis '('
#67: FILE: kernel/kprobes.c:151:
+	if(k->post_handler) {

ERROR:SPACING: space required before the open parenthesis '('
#75: FILE: kernel/kprobes.c:159:
+	if(k->fault_handler) {

ERROR:SPACING: space required before the open parenthesis '('
#83: FILE: kernel/kprobes.c:167:
+	if(k->break_handler) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#95: FILE: kernel/kprobes.c:179:
+{
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required before the open parenthesis '('
#102: FILE: kernel/kprobes.c:186:
+	for(i = 0; i < KPROBE_TABLE_SIZE; i++) {

ERROR:SPACING: space required before the open parenthesis '('
#105: FILE: kernel/kprobes.c:189:
+			if((k = hlist_entry(node, struct kprobe, hlist))) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#105: FILE: kernel/kprobes.c:189:
+			if((k = hlist_entry(node, struct kprobe, hlist))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#124: FILE: fs/proc/proc_misc.c:69:
+extern int get_kprobes_list(char *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#124: FILE: fs/proc/proc_misc.c:69:
+extern int get_kprobes_list(char *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:LINE_SPACING: Missing a blank line after declarations
#137: FILE: fs/proc/proc_misc.c:556:
+	int len = get_kprobes_list(page);
+	return proc_calc_metrics(page, start, off, count, eof, len);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000217107.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 7 errors, 5 warnings, 2 checks, 108 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000217107.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
