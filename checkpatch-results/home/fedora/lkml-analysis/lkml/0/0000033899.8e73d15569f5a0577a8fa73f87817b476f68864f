WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#32: 
This patch introduces a new runqueue structure (struct task_grp_rq) which is 

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'array1' - possible side-effects?
#133: FILE: kernel/sched.c:309:
+#define switch_array(array1, array2) \
+		{ \
+			struct prio_array *tmp = array2; \
+			array2 = array1; \
+			array1 = tmp; \
+		}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'array2' - possible side-effects?
#133: FILE: kernel/sched.c:309:
+#define switch_array(array1, array2) \
+		{ \
+			struct prio_array *tmp = array2; \
+			array2 = array1; \
+			array1 = tmp; \
+		}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#147: FILE: kernel/sched.c:329:
+#define task_grp_rq(p)          (task_grp(p)->rq[task_cpu(p)])

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'rq' - possible side-effects?
#195: FILE: kernel/sched.c:2137:
+#define rq_best_prio(rq) min((rq)->curr->prio, (rq)->expired->best_static_prio)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'tgrq' - possible side-effects?
#203: FILE: kernel/sched.c:2944:
+#define nr_tasks(tgrq)	(tgrq->active->nr_active + tgrq->expired->nr_active)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'tgrq' may be better as '(tgrq)' to avoid precedence issues
#203: FILE: kernel/sched.c:2944:
+#define nr_tasks(tgrq)	(tgrq->active->nr_active + tgrq->expired->nr_active)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#424: FILE: kernel/sched.c:5240:
+					list_entry(list->next,
+						 struct task_grp_rq, list);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#475: FILE: kernel/sched.c:6861:
+		tgrq = init_task_grp.rq[i] = &per_cpu(init_tg_rq, i);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#503: FILE: init/Kconfig:234:
+config CPUMETER
+	bool "CPU resource control"
+	depends on CPUSETS && EXPERIMENTAL
+	help
+	  This options lets you create cpu resource partitions within
+	  cpusets. Each resource partition can be given a different quota
+	  of CPU usage.
+

Kconfig symbols should have a help text which fully describes
it.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000033899.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 0 errors, 2 warnings, 8 checks, 429 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000033899.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
