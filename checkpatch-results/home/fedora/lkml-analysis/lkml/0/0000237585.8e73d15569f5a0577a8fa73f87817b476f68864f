WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#37: 
> > Here is a patch to restore fan control to the lm85 driver in the 2.6.X kernel.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#57: FILE: drivers/i2c/chips/lm85.c:7:
+    Copyright (c) 2004        Justin Thiessen <jthiessen@penguincomputing.com>$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#57: FILE: drivers/i2c/chips/lm85.c:7:
+    Copyright (c) 2004        Justin Thiessen <jthiessen@penguincomputing.com>

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <Copyright>
#57: FILE: drivers/i2c/chips/lm85.c:7:
+    Copyright (c) 2004        Justin Thiessen <jthiessen@penguincomputing.com>

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Justin>
#57: FILE: drivers/i2c/chips/lm85.c:7:
+    Copyright (c) 2004        Justin Thiessen <jthiessen@penguincomputing.com>

CHECK:CAMELCASE: Avoid CamelCase: <Thiessen>
#57: FILE: drivers/i2c/chips/lm85.c:7:
+    Copyright (c) 2004        Justin Thiessen <jthiessen@penguincomputing.com>

ERROR:TRAILING_WHITESPACE: trailing whitespace
#92: FILE: drivers/i2c/chips/lm85.c:181:
+static int lm85_range_map[] = {   $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#105: FILE: drivers/i2c/chips/lm85.c:190:
+^Iif ( range < lm85_range_map[0] ) { $

ERROR:SPACING: space prohibited after that open parenthesis '('
#105: FILE: drivers/i2c/chips/lm85.c:190:
+	if ( range < lm85_range_map[0] ) { 

ERROR:SPACING: space prohibited before that close parenthesis ')'
#105: FILE: drivers/i2c/chips/lm85.c:190:
+	if ( range < lm85_range_map[0] ) { 

WARNING:SPACING: space prohibited before semicolon
#106: FILE: drivers/i2c/chips/lm85.c:191:
+		return 0 ;

ERROR:SPACING: space prohibited after that open parenthesis '('
#107: FILE: drivers/i2c/chips/lm85.c:192:
+	} else if ( range > lm85_range_map[15] ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#107: FILE: drivers/i2c/chips/lm85.c:192:
+	} else if ( range > lm85_range_map[15] ) {

WARNING:SPACING: space prohibited before semicolon
#108: FILE: drivers/i2c/chips/lm85.c:193:
+		return 15 ;

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#109: FILE: drivers/i2c/chips/lm85.c:194:
+		return 15 ;
+	} else {  /* find closest match */

ERROR:SPACING: space prohibited after that open parenthesis '('
#110: FILE: drivers/i2c/chips/lm85.c:195:
+		for ( i = 14 ; i >= 0 ; --i ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#110: FILE: drivers/i2c/chips/lm85.c:195:
+		for ( i = 14 ; i >= 0 ; --i ) {

ERROR:SPACING: space prohibited after that open parenthesis '('
#111: FILE: drivers/i2c/chips/lm85.c:196:
+			if ( range > lm85_range_map[i] ) { /* range bracketed */

ERROR:SPACING: space prohibited before that close parenthesis ')'
#111: FILE: drivers/i2c/chips/lm85.c:196:
+			if ( range > lm85_range_map[i] ) { /* range bracketed */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#112: FILE: drivers/i2c/chips/lm85.c:197:
+^I^I^I^Iif ((lm85_range_map[i+1] - range) < $

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#112: FILE: drivers/i2c/chips/lm85.c:197:
+				if ((lm85_range_map[i+1] - range) < 
 				                     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#155: FILE: drivers/i2c/chips/lm85.c:290:
+#define HYST_TO_REG(val) (SENSORS_LIMIT(((val)+500)/1000,0,15))
                                               ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#155: FILE: drivers/i2c/chips/lm85.c:290:
+#define HYST_TO_REG(val) (SENSORS_LIMIT(((val)+500)/1000,0,15))
                                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#155: FILE: drivers/i2c/chips/lm85.c:290:
+#define HYST_TO_REG(val) (SENSORS_LIMIT(((val)+500)/1000,0,15))
                                                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#155: FILE: drivers/i2c/chips/lm85.c:290:
+#define HYST_TO_REG(val) (SENSORS_LIMIT(((val)+500)/1000,0,15))
                                                           ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#156: FILE: drivers/i2c/chips/lm85.c:291:
+#define HYST_FROM_REG(val) ((val)*1000)
                                  ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#164: FILE: drivers/i2c/chips/lm85.c:341:
+^Iu8 off_desired; /* Actual "off" temperature specified.  Preserved $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#168: FILE: drivers/i2c/chips/lm85.c:345:
+^Iu8 max_desired; /* Actual "max" temperature specified.  Preserved $

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#194: FILE: drivers/i2c/chips/lm85.c:459:
+static DEVICE_ATTR(fan##offset##_input, S_IRUGO, show_fan_##offset,     \

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#210: FILE: drivers/i2c/chips/lm85.c:544:
+^Ireturn set_pwm(dev, buf, count, offset - 1);     ^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#218: FILE: drivers/i2c/chips/lm85.c:550:
+static DEVICE_ATTR(fan##offset##_pwm, S_IRUGO | S_IWUSR, ^I^I\$

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#218: FILE: drivers/i2c/chips/lm85.c:550:
+static DEVICE_ATTR(fan##offset##_pwm, S_IRUGO | S_IWUSR, 		\

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#221: FILE: drivers/i2c/chips/lm85.c:552:
+static DEVICE_ATTR(fan##offset##_pwm_enable, S_IRUGO,                   \

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#262: FILE: drivers/i2c/chips/lm85.c:687:
+^Ireturn show_temp(dev, buf, offset - 1);  ^I^I^I\$

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#287: FILE: drivers/i2c/chips/lm85.c:707:
+static DEVICE_ATTR(temp##offset##_input, S_IRUGO, show_temp_##offset,   \

WARNING:LINE_SPACING: Missing a blank line after declarations
#301: FILE: drivers/i2c/chips/lm85.c:724:
+	struct lm85_data *data = lm85_update_device(dev);
+	return sprintf(buf,"%d\n", ZONE_FROM_REG(data->autofan[nr].config));

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#301: FILE: drivers/i2c/chips/lm85.c:724:
+	return sprintf(buf,"%d\n", ZONE_FROM_REG(data->autofan[nr].config));
 	                  ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#303: FILE: drivers/i2c/chips/lm85.c:726:
+}
+static ssize_t set_pwm_auto_channels(struct device *dev, const char *buf,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#304: FILE: drivers/i2c/chips/lm85.c:727:
+static ssize_t set_pwm_auto_channels(struct device *dev, const char *buf,
+	size_t count, int nr)

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#311: FILE: drivers/i2c/chips/lm85.c:734:
+	val = simple_strtol(buf, NULL, 10);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:SPACING: space prohibited before semicolon
#313: FILE: drivers/i2c/chips/lm85.c:736:
+		| ZONE_TO_REG(val) ;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#315: FILE: drivers/i2c/chips/lm85.c:738:
+	lm85_write_value(client, LM85_REG_AFAN_CONFIG(nr),
+		data->autofan[nr].config);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#319: FILE: drivers/i2c/chips/lm85.c:742:
+}
+static ssize_t show_pwm_auto_pwm_min(struct device *dev, char *buf, int nr)

WARNING:LINE_SPACING: Missing a blank line after declarations
#322: FILE: drivers/i2c/chips/lm85.c:745:
+	struct lm85_data *data = lm85_update_device(dev);
+	return sprintf(buf,"%d\n", PWM_FROM_REG(data->autofan[nr].min_pwm));

ERROR:SPACING: space required after that ',' (ctx:VxV)
#322: FILE: drivers/i2c/chips/lm85.c:745:
+	return sprintf(buf,"%d\n", PWM_FROM_REG(data->autofan[nr].min_pwm));
 	                  ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#324: FILE: drivers/i2c/chips/lm85.c:747:
+}
+static ssize_t set_pwm_auto_pwm_min(struct device *dev, const char *buf,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#325: FILE: drivers/i2c/chips/lm85.c:748:
+static ssize_t set_pwm_auto_pwm_min(struct device *dev, const char *buf,
+	size_t count, int nr)

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#332: FILE: drivers/i2c/chips/lm85.c:755:
+	val = simple_strtol(buf, NULL, 10);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#335: FILE: drivers/i2c/chips/lm85.c:758:
+	lm85_write_value(client, LM85_REG_AFAN_MINPWM(nr),
+		data->autofan[nr].min_pwm);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#339: FILE: drivers/i2c/chips/lm85.c:762:
+}
+static ssize_t show_pwm_auto_pwm_minctl(struct device *dev, char *buf, int nr)

WARNING:LINE_SPACING: Missing a blank line after declarations
#342: FILE: drivers/i2c/chips/lm85.c:765:
+	struct lm85_data *data = lm85_update_device(dev);
+	return sprintf(buf,"%d\n", data->autofan[nr].min_off);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#342: FILE: drivers/i2c/chips/lm85.c:765:
+	return sprintf(buf,"%d\n", data->autofan[nr].min_off);
 	                  ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#344: FILE: drivers/i2c/chips/lm85.c:767:
+}
+static ssize_t set_pwm_auto_pwm_minctl(struct device *dev, const char *buf,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#345: FILE: drivers/i2c/chips/lm85.c:768:
+static ssize_t set_pwm_auto_pwm_minctl(struct device *dev, const char *buf,
+	size_t count, int nr)

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#352: FILE: drivers/i2c/chips/lm85.c:775:
+	val = simple_strtol(buf, NULL, 10);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#363: FILE: drivers/i2c/chips/lm85.c:786:
+}
+static ssize_t show_pwm_auto_pwm_freq(struct device *dev, char *buf, int nr)

WARNING:LINE_SPACING: Missing a blank line after declarations
#366: FILE: drivers/i2c/chips/lm85.c:789:
+	struct lm85_data *data = lm85_update_device(dev);
+	return sprintf(buf,"%d\n", FREQ_FROM_REG(data->autofan[nr].freq));

ERROR:SPACING: space required after that ',' (ctx:VxV)
#366: FILE: drivers/i2c/chips/lm85.c:789:
+	return sprintf(buf,"%d\n", FREQ_FROM_REG(data->autofan[nr].freq));
 	                  ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#368: FILE: drivers/i2c/chips/lm85.c:791:
+}
+static ssize_t set_pwm_auto_pwm_freq(struct device *dev, const char *buf,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#369: FILE: drivers/i2c/chips/lm85.c:792:
+static ssize_t set_pwm_auto_pwm_freq(struct device *dev, const char *buf,
+		size_t count, int nr)

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#376: FILE: drivers/i2c/chips/lm85.c:799:
+	val = simple_strtol(buf, NULL, 10);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#379: FILE: drivers/i2c/chips/lm85.c:802:
+	lm85_write_value(client, LM85_REG_AFAN_RANGE(nr),
+		(data->zone[nr].range << 4)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#381: FILE: drivers/i2c/chips/lm85.c:804:
+^I); $

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#385: FILE: drivers/i2c/chips/lm85.c:808:
+}
+#define pwm_auto(offset)						\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'offset' - possible side-effects?
#385: FILE: drivers/i2c/chips/lm85.c:808:
+#define pwm_auto(offset)						\
+static ssize_t show_pwm##offset##_auto_channels (struct device *dev,	\
+	char *buf)							\
+{									\
+	return show_pwm_auto_channels(dev, buf, offset - 1);	\
+}									\
+static ssize_t set_pwm##offset##_auto_channels (struct device *dev,	\
+	const char *buf, size_t count)					\
+{									\
+	return set_pwm_auto_channels(dev, buf, count, offset - 1);	\
+}									\
+static ssize_t show_pwm##offset##_auto_pwm_min (struct device *dev,	\
+	char *buf)							\
+{									\
+	return show_pwm_auto_pwm_min(dev, buf, offset - 1);		\
+}									\
+static ssize_t set_pwm##offset##_auto_pwm_min (struct device *dev,	\
+	const char *buf, size_t count)					\
+{									\
+	return set_pwm_auto_pwm_min(dev, buf, count, offset - 1);	\
+}									\
+static ssize_t show_pwm##offset##_auto_pwm_minctl (struct device *dev,	\
+	char *buf)							\
+{									\
+	return show_pwm_auto_pwm_minctl(dev, buf, offset - 1);	\
+}									\
+static ssize_t set_pwm##offset##_auto_pwm_minctl (struct device *dev,	\
+	const char *buf, size_t count)					\
+{									\
+	return set_pwm_auto_pwm_minctl(dev, buf, count, offset - 1);\
+}									\
+static ssize_t show_pwm##offset##_auto_pwm_freq (struct device *dev,	\
+	char *buf)							\
+{									\
+	return show_pwm_auto_pwm_freq(dev, buf, offset - 1);	\
+}									\
+static ssize_t set_pwm##offset##_auto_pwm_freq(struct device *dev,	\
+	const char *buf, size_t count)					\
+{									\
+	return set_pwm_auto_pwm_freq(dev, buf, count, offset - 1);	\
+}									\
+static DEVICE_ATTR(pwm##offset##_auto_channels, S_IRUGO | S_IWUSR,	\
+		show_pwm##offset##_auto_channels,			\
+		set_pwm##offset##_auto_channels);                       \
+static DEVICE_ATTR(pwm##offset##_auto_pwm_min, S_IRUGO | S_IWUSR,	\
+		show_pwm##offset##_auto_pwm_min,			\
+		set_pwm##offset##_auto_pwm_min);			\
+static DEVICE_ATTR(pwm##offset##_auto_pwm_minctl, S_IRUGO | S_IWUSR,	\
+		show_pwm##offset##_auto_pwm_minctl,			\
+		set_pwm##offset##_auto_pwm_minctl);                     \
+static DEVICE_ATTR(pwm##offset##_auto_pwm_freq, S_IRUGO | S_IWUSR,	\
+		show_pwm##offset##_auto_pwm_freq,			\
+		set_pwm##offset##_auto_pwm_freq);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'offset' may be better as '(offset)' to avoid precedence issues
#385: FILE: drivers/i2c/chips/lm85.c:808:
+#define pwm_auto(offset)						\
+static ssize_t show_pwm##offset##_auto_channels (struct device *dev,	\
+	char *buf)							\
+{									\
+	return show_pwm_auto_channels(dev, buf, offset - 1);	\
+}									\
+static ssize_t set_pwm##offset##_auto_channels (struct device *dev,	\
+	const char *buf, size_t count)					\
+{									\
+	return set_pwm_auto_channels(dev, buf, count, offset - 1);	\
+}									\
+static ssize_t show_pwm##offset##_auto_pwm_min (struct device *dev,	\
+	char *buf)							\
+{									\
+	return show_pwm_auto_pwm_min(dev, buf, offset - 1);		\
+}									\
+static ssize_t set_pwm##offset##_auto_pwm_min (struct device *dev,	\
+	const char *buf, size_t count)					\
+{									\
+	return set_pwm_auto_pwm_min(dev, buf, count, offset - 1);	\
+}									\
+static ssize_t show_pwm##offset##_auto_pwm_minctl (struct device *dev,	\
+	char *buf)							\
+{									\
+	return show_pwm_auto_pwm_minctl(dev, buf, offset - 1);	\
+}									\
+static ssize_t set_pwm##offset##_auto_pwm_minctl (struct device *dev,	\
+	const char *buf, size_t count)					\
+{									\
+	return set_pwm_auto_pwm_minctl(dev, buf, count, offset - 1);\
+}									\
+static ssize_t show_pwm##offset##_auto_pwm_freq (struct device *dev,	\
+	char *buf)							\
+{									\
+	return show_pwm_auto_pwm_freq(dev, buf, offset - 1);	\
+}									\
+static ssize_t set_pwm##offset##_auto_pwm_freq(struct device *dev,	\
+	const char *buf, size_t count)					\
+{									\
+	return set_pwm_auto_pwm_freq(dev, buf, count, offset - 1);	\
+}									\
+static DEVICE_ATTR(pwm##offset##_auto_channels, S_IRUGO | S_IWUSR,	\
+		show_pwm##offset##_auto_channels,			\
+		set_pwm##offset##_auto_channels);                       \
+static DEVICE_ATTR(pwm##offset##_auto_pwm_min, S_IRUGO | S_IWUSR,	\
+		show_pwm##offset##_auto_pwm_min,			\
+		set_pwm##offset##_auto_pwm_min);			\
+static DEVICE_ATTR(pwm##offset##_auto_pwm_minctl, S_IRUGO | S_IWUSR,	\
+		show_pwm##offset##_auto_pwm_minctl,			\
+		set_pwm##offset##_auto_pwm_minctl);                     \
+static DEVICE_ATTR(pwm##offset##_auto_pwm_freq, S_IRUGO | S_IWUSR,	\
+		show_pwm##offset##_auto_pwm_freq,			\
+		set_pwm##offset##_auto_pwm_freq);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#385: FILE: drivers/i2c/chips/lm85.c:808:
+#define pwm_auto(offset)						\
+static ssize_t show_pwm##offset##_auto_channels (struct device *dev,	\
+	char *buf)							\
+{									\
+	return show_pwm_auto_channels(dev, buf, offset - 1);	\
+}									\
+static ssize_t set_pwm##offset##_auto_channels (struct device *dev,	\
+	const char *buf, size_t count)					\
+{									\
+	return set_pwm_auto_channels(dev, buf, count, offset - 1);	\
+}									\
+static ssize_t show_pwm##offset##_auto_pwm_min (struct device *dev,	\
+	char *buf)							\
+{									\
+	return show_pwm_auto_pwm_min(dev, buf, offset - 1);		\
+}									\
+static ssize_t set_pwm##offset##_auto_pwm_min (struct device *dev,	\
+	const char *buf, size_t count)					\
+{									\
+	return set_pwm_auto_pwm_min(dev, buf, count, offset - 1);	\
+}									\
+static ssize_t show_pwm##offset##_auto_pwm_minctl (struct device *dev,	\
+	char *buf)							\
+{									\
+	return show_pwm_auto_pwm_minctl(dev, buf, offset - 1);	\
+}									\
+static ssize_t set_pwm##offset##_auto_pwm_minctl (struct device *dev,	\
+	const char *buf, size_t count)					\
+{									\
+	return set_pwm_auto_pwm_minctl(dev, buf, count, offset - 1);\
+}									\
+static ssize_t show_pwm##offset##_auto_pwm_freq (struct device *dev,	\
+	char *buf)							\
+{									\
+	return show_pwm_auto_pwm_freq(dev, buf, offset - 1);	\
+}									\
+static ssize_t set_pwm##offset##_auto_pwm_freq(struct device *dev,	\
+	const char *buf, size_t count)					\
+{									\
+	return set_pwm_auto_pwm_freq(dev, buf, count, offset - 1);	\
+}									\
+static DEVICE_ATTR(pwm##offset##_auto_channels, S_IRUGO | S_IWUSR,	\
+		show_pwm##offset##_auto_channels,			\
+		set_pwm##offset##_auto_channels);                       \
+static DEVICE_ATTR(pwm##offset##_auto_pwm_min, S_IRUGO | S_IWUSR,	\
+		show_pwm##offset##_auto_pwm_min,			\
+		set_pwm##offset##_auto_pwm_min);			\
+static DEVICE_ATTR(pwm##offset##_auto_pwm_minctl, S_IRUGO | S_IWUSR,	\
+		show_pwm##offset##_auto_pwm_minctl,			\
+		set_pwm##offset##_auto_pwm_minctl);                     \
+static DEVICE_ATTR(pwm##offset##_auto_pwm_freq, S_IRUGO | S_IWUSR,	\
+		show_pwm##offset##_auto_pwm_freq,			\
+		set_pwm##offset##_auto_pwm_freq);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#386: FILE: drivers/i2c/chips/lm85.c:809:
+static ssize_t show_pwm##offset##_auto_channels (struct device *dev,	\

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#391: FILE: drivers/i2c/chips/lm85.c:814:
+static ssize_t set_pwm##offset##_auto_channels (struct device *dev,	\

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#396: FILE: drivers/i2c/chips/lm85.c:819:
+static ssize_t show_pwm##offset##_auto_pwm_min (struct device *dev,	\

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#401: FILE: drivers/i2c/chips/lm85.c:824:
+static ssize_t set_pwm##offset##_auto_pwm_min (struct device *dev,	\

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#406: FILE: drivers/i2c/chips/lm85.c:829:
+static ssize_t show_pwm##offset##_auto_pwm_minctl (struct device *dev,	\

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#411: FILE: drivers/i2c/chips/lm85.c:834:
+static ssize_t set_pwm##offset##_auto_pwm_minctl (struct device *dev,	\

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#416: FILE: drivers/i2c/chips/lm85.c:839:
+static ssize_t show_pwm##offset##_auto_pwm_freq (struct device *dev,	\

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#426: FILE: drivers/i2c/chips/lm85.c:849:
+static DEVICE_ATTR(pwm##offset##_auto_channels, S_IRUGO | S_IWUSR,	\

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#429: FILE: drivers/i2c/chips/lm85.c:852:
+static DEVICE_ATTR(pwm##offset##_auto_pwm_min, S_IRUGO | S_IWUSR,	\

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#432: FILE: drivers/i2c/chips/lm85.c:855:
+static DEVICE_ATTR(pwm##offset##_auto_pwm_minctl, S_IRUGO | S_IWUSR,	\

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#435: FILE: drivers/i2c/chips/lm85.c:858:
+static DEVICE_ATTR(pwm##offset##_auto_pwm_freq, S_IRUGO | S_IWUSR,	\

WARNING:LINE_SPACING: Missing a blank line after declarations
#447: FILE: drivers/i2c/chips/lm85.c:870:
+	struct lm85_data *data = lm85_update_device(dev);
+	return sprintf(buf,"%d\n", TEMP_FROM_REG(data->zone[nr].limit) -

ERROR:SPACING: space required after that ',' (ctx:VxV)
#447: FILE: drivers/i2c/chips/lm85.c:870:
+	return sprintf(buf,"%d\n", TEMP_FROM_REG(data->zone[nr].limit) -
 	                  ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#450: FILE: drivers/i2c/chips/lm85.c:873:
+}
+static ssize_t set_temp_auto_temp_off(struct device *dev, const char *buf,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#451: FILE: drivers/i2c/chips/lm85.c:874:
+static ssize_t set_temp_auto_temp_off(struct device *dev, const char *buf,
+	size_t count, int nr)

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#458: FILE: drivers/i2c/chips/lm85.c:881:
+	val = simple_strtol(buf, NULL, 10);

ERROR:SPACING: space prohibited after that open parenthesis '('
#462: FILE: drivers/i2c/chips/lm85.c:885:
+	if ( nr == 0 || nr == 1 ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#462: FILE: drivers/i2c/chips/lm85.c:885:
+	if ( nr == 0 || nr == 1 ) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#464: FILE: drivers/i2c/chips/lm85.c:887:
+		lm85_write_value(client, LM85_REG_AFAN_HYST1,
+			(data->zone[0].hyst << 4)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#469: FILE: drivers/i2c/chips/lm85.c:892:
+		lm85_write_value(client, LM85_REG_AFAN_HYST2,
+			(data->zone[2].hyst << 4)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#475: FILE: drivers/i2c/chips/lm85.c:898:
+}
+static ssize_t show_temp_auto_temp_min(struct device *dev, char *buf, int nr)

WARNING:LINE_SPACING: Missing a blank line after declarations
#478: FILE: drivers/i2c/chips/lm85.c:901:
+	struct lm85_data *data = lm85_update_device(dev);
+	return sprintf(buf,"%d\n", TEMP_FROM_REG(data->zone[nr].limit) );

ERROR:SPACING: space required after that ',' (ctx:VxV)
#478: FILE: drivers/i2c/chips/lm85.c:901:
+	return sprintf(buf,"%d\n", TEMP_FROM_REG(data->zone[nr].limit) );
 	                  ^

ERROR:SPACING: space prohibited before that close parenthesis ')'
#478: FILE: drivers/i2c/chips/lm85.c:901:
+	return sprintf(buf,"%d\n", TEMP_FROM_REG(data->zone[nr].limit) );

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#480: FILE: drivers/i2c/chips/lm85.c:903:
+}
+static ssize_t set_temp_auto_temp_min(struct device *dev, const char *buf,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#481: FILE: drivers/i2c/chips/lm85.c:904:
+static ssize_t set_temp_auto_temp_min(struct device *dev, const char *buf,
+	size_t count, int nr)

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#488: FILE: drivers/i2c/chips/lm85.c:911:
+	val = simple_strtol(buf, NULL, 10);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#491: FILE: drivers/i2c/chips/lm85.c:914:
+	lm85_write_value(client, LM85_REG_AFAN_LIMIT(nr),
+		data->zone[nr].limit);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#494: FILE: drivers/i2c/chips/lm85.c:917:
+	data->zone[nr].range = RANGE_TO_REG(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#498: FILE: drivers/i2c/chips/lm85.c:921:
+	lm85_write_value(client, LM85_REG_AFAN_RANGE(nr),
+		((data->zone[nr].range & 0x0f) << 4)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#502: FILE: drivers/i2c/chips/lm85.c:925:
+	data->zone[nr].hyst = HYST_TO_REG(TEMP_FROM_REG(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#503: FILE: drivers/i2c/chips/lm85.c:926:
+		data->zone[nr].limit) - TEMP_FROM_REG(

ERROR:SPACING: space prohibited after that open parenthesis '('
#505: FILE: drivers/i2c/chips/lm85.c:928:
+	if ( nr == 0 || nr == 1 ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#505: FILE: drivers/i2c/chips/lm85.c:928:
+	if ( nr == 0 || nr == 1 ) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#507: FILE: drivers/i2c/chips/lm85.c:930:
+		lm85_write_value(client, LM85_REG_AFAN_HYST1,
+			(data->zone[0].hyst << 4)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#512: FILE: drivers/i2c/chips/lm85.c:935:
+		lm85_write_value(client, LM85_REG_AFAN_HYST2,
+			(data->zone[2].hyst << 4)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#518: FILE: drivers/i2c/chips/lm85.c:941:
+}
+static ssize_t show_temp_auto_temp_max(struct device *dev, char *buf, int nr)

WARNING:LINE_SPACING: Missing a blank line after declarations
#521: FILE: drivers/i2c/chips/lm85.c:944:
+	struct lm85_data *data = lm85_update_device(dev);
+	return sprintf(buf,"%d\n", TEMP_FROM_REG(data->zone[nr].limit) +

ERROR:SPACING: space required after that ',' (ctx:VxV)
#521: FILE: drivers/i2c/chips/lm85.c:944:
+	return sprintf(buf,"%d\n", TEMP_FROM_REG(data->zone[nr].limit) +
 	                  ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#524: FILE: drivers/i2c/chips/lm85.c:947:
+}
+static ssize_t set_temp_auto_temp_max(struct device *dev, const char *buf,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#525: FILE: drivers/i2c/chips/lm85.c:948:
+static ssize_t set_temp_auto_temp_max(struct device *dev, const char *buf,
+	size_t count, int nr)

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#533: FILE: drivers/i2c/chips/lm85.c:956:
+	val = simple_strtol(buf, NULL, 10);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#535: FILE: drivers/i2c/chips/lm85.c:958:
+	data->zone[nr].range = RANGE_TO_REG(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#538: FILE: drivers/i2c/chips/lm85.c:961:
+	lm85_write_value(client, LM85_REG_AFAN_RANGE(nr),
+		((data->zone[nr].range & 0x0f) << 4)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#543: FILE: drivers/i2c/chips/lm85.c:966:
+}
+static ssize_t show_temp_auto_temp_crit(struct device *dev, char *buf, int nr)

WARNING:LINE_SPACING: Missing a blank line after declarations
#546: FILE: drivers/i2c/chips/lm85.c:969:
+	struct lm85_data *data = lm85_update_device(dev);
+	return sprintf(buf,"%d\n", TEMP_FROM_REG(data->zone[nr].critical));

ERROR:SPACING: space required after that ',' (ctx:VxV)
#546: FILE: drivers/i2c/chips/lm85.c:969:
+	return sprintf(buf,"%d\n", TEMP_FROM_REG(data->zone[nr].critical));
 	                  ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#548: FILE: drivers/i2c/chips/lm85.c:971:
+}
+static ssize_t set_temp_auto_temp_crit(struct device *dev, const char *buf,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#549: FILE: drivers/i2c/chips/lm85.c:972:
+static ssize_t set_temp_auto_temp_crit(struct device *dev, const char *buf,
+		size_t count, int nr)

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#556: FILE: drivers/i2c/chips/lm85.c:979:
+	val = simple_strtol(buf, NULL, 10);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#559: FILE: drivers/i2c/chips/lm85.c:982:
+	lm85_write_value(client, LM85_REG_AFAN_CRITICAL(nr),
+		data->zone[nr].critical);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#563: FILE: drivers/i2c/chips/lm85.c:986:
+}
+#define temp_auto(offset)						\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'offset' - possible side-effects?
#563: FILE: drivers/i2c/chips/lm85.c:986:
+#define temp_auto(offset)						\
+static ssize_t show_temp##offset##_auto_temp_off (struct device *dev,	\
+	char *buf)							\
+{									\
+	return show_temp_auto_temp_off(dev, buf, offset - 1);	\
+}									\
+static ssize_t set_temp##offset##_auto_temp_off (struct device *dev,	\
+	const char *buf, size_t count)					\
+{									\
+	return set_temp_auto_temp_off(dev, buf, count, offset - 1);	\
+}									\
+static ssize_t show_temp##offset##_auto_temp_min (struct device *dev,	\
+	char *buf)							\
+{									\
+	return show_temp_auto_temp_min(dev, buf, offset - 1);	\
+}									\
+static ssize_t set_temp##offset##_auto_temp_min (struct device *dev,	\
+	const char *buf, size_t count)					\
+{									\
+	return set_temp_auto_temp_min(dev, buf, count, offset - 1);	\
+}									\
+static ssize_t show_temp##offset##_auto_temp_max (struct device *dev,	\
+	char *buf)							\
+{									\
+	return show_temp_auto_temp_max(dev, buf, offset - 1);	\
+}									\
+static ssize_t set_temp##offset##_auto_temp_max (struct device *dev,	\
+	const char *buf, size_t count)					\
+{									\
+	return set_temp_auto_temp_max(dev, buf, count, offset - 1);	\
+}									\
+static ssize_t show_temp##offset##_auto_temp_crit (struct device *dev,	\
+	char *buf)							\
+{									\
+	return show_temp_auto_temp_crit(dev, buf, offset - 1);          \
+}									\
+static ssize_t set_temp##offset##_auto_temp_crit (struct device *dev,	\
+	const char *buf, size_t count)					\
+{									\
+	return set_temp_auto_temp_crit(dev, buf, count, offset - 1);    \
+}									\
+static DEVICE_ATTR(temp##offset##_auto_temp_off, S_IRUGO | S_IWUSR,	\
+		show_temp##offset##_auto_temp_off,			\
+		set_temp##offset##_auto_temp_off);                      \
+static DEVICE_ATTR(temp##offset##_auto_temp_min, S_IRUGO | S_IWUSR,	\
+		show_temp##offset##_auto_temp_min,			\
+		set_temp##offset##_auto_temp_min);                      \
+static DEVICE_ATTR(temp##offset##_auto_temp_max, S_IRUGO | S_IWUSR,	\
+		show_temp##offset##_auto_temp_max,			\
+		set_temp##offset##_auto_temp_max);                      \
+static DEVICE_ATTR(temp##offset##_auto_temp_crit, S_IRUGO | S_IWUSR,	\
+		show_temp##offset##_auto_temp_crit,			\
+		set_temp##offset##_auto_temp_crit);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'offset' may be better as '(offset)' to avoid precedence issues
#563: FILE: drivers/i2c/chips/lm85.c:986:
+#define temp_auto(offset)						\
+static ssize_t show_temp##offset##_auto_temp_off (struct device *dev,	\
+	char *buf)							\
+{									\
+	return show_temp_auto_temp_off(dev, buf, offset - 1);	\
+}									\
+static ssize_t set_temp##offset##_auto_temp_off (struct device *dev,	\
+	const char *buf, size_t count)					\
+{									\
+	return set_temp_auto_temp_off(dev, buf, count, offset - 1);	\
+}									\
+static ssize_t show_temp##offset##_auto_temp_min (struct device *dev,	\
+	char *buf)							\
+{									\
+	return show_temp_auto_temp_min(dev, buf, offset - 1);	\
+}									\
+static ssize_t set_temp##offset##_auto_temp_min (struct device *dev,	\
+	const char *buf, size_t count)					\
+{									\
+	return set_temp_auto_temp_min(dev, buf, count, offset - 1);	\
+}									\
+static ssize_t show_temp##offset##_auto_temp_max (struct device *dev,	\
+	char *buf)							\
+{									\
+	return show_temp_auto_temp_max(dev, buf, offset - 1);	\
+}									\
+static ssize_t set_temp##offset##_auto_temp_max (struct device *dev,	\
+	const char *buf, size_t count)					\
+{									\
+	return set_temp_auto_temp_max(dev, buf, count, offset - 1);	\
+}									\
+static ssize_t show_temp##offset##_auto_temp_crit (struct device *dev,	\
+	char *buf)							\
+{									\
+	return show_temp_auto_temp_crit(dev, buf, offset - 1);          \
+}									\
+static ssize_t set_temp##offset##_auto_temp_crit (struct device *dev,	\
+	const char *buf, size_t count)					\
+{									\
+	return set_temp_auto_temp_crit(dev, buf, count, offset - 1);    \
+}									\
+static DEVICE_ATTR(temp##offset##_auto_temp_off, S_IRUGO | S_IWUSR,	\
+		show_temp##offset##_auto_temp_off,			\
+		set_temp##offset##_auto_temp_off);                      \
+static DEVICE_ATTR(temp##offset##_auto_temp_min, S_IRUGO | S_IWUSR,	\
+		show_temp##offset##_auto_temp_min,			\
+		set_temp##offset##_auto_temp_min);                      \
+static DEVICE_ATTR(temp##offset##_auto_temp_max, S_IRUGO | S_IWUSR,	\
+		show_temp##offset##_auto_temp_max,			\
+		set_temp##offset##_auto_temp_max);                      \
+static DEVICE_ATTR(temp##offset##_auto_temp_crit, S_IRUGO | S_IWUSR,	\
+		show_temp##offset##_auto_temp_crit,			\
+		set_temp##offset##_auto_temp_crit);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#563: FILE: drivers/i2c/chips/lm85.c:986:
+#define temp_auto(offset)						\
+static ssize_t show_temp##offset##_auto_temp_off (struct device *dev,	\
+	char *buf)							\
+{									\
+	return show_temp_auto_temp_off(dev, buf, offset - 1);	\
+}									\
+static ssize_t set_temp##offset##_auto_temp_off (struct device *dev,	\
+	const char *buf, size_t count)					\
+{									\
+	return set_temp_auto_temp_off(dev, buf, count, offset - 1);	\
+}									\
+static ssize_t show_temp##offset##_auto_temp_min (struct device *dev,	\
+	char *buf)							\
+{									\
+	return show_temp_auto_temp_min(dev, buf, offset - 1);	\
+}									\
+static ssize_t set_temp##offset##_auto_temp_min (struct device *dev,	\
+	const char *buf, size_t count)					\
+{									\
+	return set_temp_auto_temp_min(dev, buf, count, offset - 1);	\
+}									\
+static ssize_t show_temp##offset##_auto_temp_max (struct device *dev,	\
+	char *buf)							\
+{									\
+	return show_temp_auto_temp_max(dev, buf, offset - 1);	\
+}									\
+static ssize_t set_temp##offset##_auto_temp_max (struct device *dev,	\
+	const char *buf, size_t count)					\
+{									\
+	return set_temp_auto_temp_max(dev, buf, count, offset - 1);	\
+}									\
+static ssize_t show_temp##offset##_auto_temp_crit (struct device *dev,	\
+	char *buf)							\
+{									\
+	return show_temp_auto_temp_crit(dev, buf, offset - 1);          \
+}									\
+static ssize_t set_temp##offset##_auto_temp_crit (struct device *dev,	\
+	const char *buf, size_t count)					\
+{									\
+	return set_temp_auto_temp_crit(dev, buf, count, offset - 1);    \
+}									\
+static DEVICE_ATTR(temp##offset##_auto_temp_off, S_IRUGO | S_IWUSR,	\
+		show_temp##offset##_auto_temp_off,			\
+		set_temp##offset##_auto_temp_off);                      \
+static DEVICE_ATTR(temp##offset##_auto_temp_min, S_IRUGO | S_IWUSR,	\
+		show_temp##offset##_auto_temp_min,			\
+		set_temp##offset##_auto_temp_min);                      \
+static DEVICE_ATTR(temp##offset##_auto_temp_max, S_IRUGO | S_IWUSR,	\
+		show_temp##offset##_auto_temp_max,			\
+		set_temp##offset##_auto_temp_max);                      \
+static DEVICE_ATTR(temp##offset##_auto_temp_crit, S_IRUGO | S_IWUSR,	\
+		show_temp##offset##_auto_temp_crit,			\
+		set_temp##offset##_auto_temp_crit);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#564: FILE: drivers/i2c/chips/lm85.c:987:
+static ssize_t show_temp##offset##_auto_temp_off (struct device *dev,	\

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#569: FILE: drivers/i2c/chips/lm85.c:992:
+static ssize_t set_temp##offset##_auto_temp_off (struct device *dev,	\

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#574: FILE: drivers/i2c/chips/lm85.c:997:
+static ssize_t show_temp##offset##_auto_temp_min (struct device *dev,	\

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#579: FILE: drivers/i2c/chips/lm85.c:1002:
+static ssize_t set_temp##offset##_auto_temp_min (struct device *dev,	\

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#584: FILE: drivers/i2c/chips/lm85.c:1007:
+static ssize_t show_temp##offset##_auto_temp_max (struct device *dev,	\

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#589: FILE: drivers/i2c/chips/lm85.c:1012:
+static ssize_t set_temp##offset##_auto_temp_max (struct device *dev,	\

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#594: FILE: drivers/i2c/chips/lm85.c:1017:
+static ssize_t show_temp##offset##_auto_temp_crit (struct device *dev,	\

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#599: FILE: drivers/i2c/chips/lm85.c:1022:
+static ssize_t set_temp##offset##_auto_temp_crit (struct device *dev,	\

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#604: FILE: drivers/i2c/chips/lm85.c:1027:
+static DEVICE_ATTR(temp##offset##_auto_temp_off, S_IRUGO | S_IWUSR,	\

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#607: FILE: drivers/i2c/chips/lm85.c:1030:
+static DEVICE_ATTR(temp##offset##_auto_temp_min, S_IRUGO | S_IWUSR,	\

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#610: FILE: drivers/i2c/chips/lm85.c:1033:
+static DEVICE_ATTR(temp##offset##_auto_temp_max, S_IRUGO | S_IWUSR,	\

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#613: FILE: drivers/i2c/chips/lm85.c:1036:
+static DEVICE_ATTR(temp##offset##_auto_temp_crit, S_IRUGO | S_IWUSR,	\

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000237585.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 29 errors, 55 warnings, 50 checks, 595 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000237585.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
