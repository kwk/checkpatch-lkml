WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#29: 
On Mon, 17 Mar 2003 23:33:37 -0800 (PST) "David S. Miller" <davem@redhat.com> wrote:

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#136: FILE: include/net/compat.h:1:
+#ifndef NET_COMPAT_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#165: FILE: include/net/compat.h:30:
+extern int get_compat_msghdr(struct msghdr *, struct compat_msghdr *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct msghdr *' should also have an identifier name
#165: FILE: include/net/compat.h:30:
+extern int get_compat_msghdr(struct msghdr *, struct compat_msghdr *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct compat_msghdr *' should also have an identifier name
#165: FILE: include/net/compat.h:30:
+extern int get_compat_msghdr(struct msghdr *, struct compat_msghdr *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#166: FILE: include/net/compat.h:31:
+extern int verify_compat_iovec(struct msghdr *, struct iovec *, char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct msghdr *' should also have an identifier name
#166: FILE: include/net/compat.h:31:
+extern int verify_compat_iovec(struct msghdr *, struct iovec *, char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct iovec *' should also have an identifier name
#166: FILE: include/net/compat.h:31:
+extern int verify_compat_iovec(struct msghdr *, struct iovec *, char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#166: FILE: include/net/compat.h:31:
+extern int verify_compat_iovec(struct msghdr *, struct iovec *, char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#166: FILE: include/net/compat.h:31:
+extern int verify_compat_iovec(struct msghdr *, struct iovec *, char *, int);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#167: FILE: include/net/compat.h:32:
+extern asmlinkage long compat_sys_sendmsg(int,struct compat_msghdr *,unsigned);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#167: FILE: include/net/compat.h:32:
+extern asmlinkage long compat_sys_sendmsg(int,struct compat_msghdr *,unsigned);
                                              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:OxV)
#167: FILE: include/net/compat.h:32:
+extern asmlinkage long compat_sys_sendmsg(int,struct compat_msghdr *,unsigned);
                                                                     ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#168: FILE: include/net/compat.h:33:
+extern asmlinkage long compat_sys_recvmsg(int,struct compat_msghdr *,unsigned);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#168: FILE: include/net/compat.h:33:
+extern asmlinkage long compat_sys_recvmsg(int,struct compat_msghdr *,unsigned);
                                              ^

ERROR:SPACING: space required after that ',' (ctx:OxV)
#168: FILE: include/net/compat.h:33:
+extern asmlinkage long compat_sys_recvmsg(int,struct compat_msghdr *,unsigned);
                                                                     ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#170: FILE: include/net/compat.h:35:
+extern int put_cmsg_compat(struct msghdr*, int, int, int, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct msghdr*' should also have an identifier name
#170: FILE: include/net/compat.h:35:
+extern int put_cmsg_compat(struct msghdr*, int, int, int, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#170: FILE: include/net/compat.h:35:
+extern int put_cmsg_compat(struct msghdr*, int, int, int, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#170: FILE: include/net/compat.h:35:
+extern int put_cmsg_compat(struct msghdr*, int, int, int, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#170: FILE: include/net/compat.h:35:
+extern int put_cmsg_compat(struct msghdr*, int, int, int, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#170: FILE: include/net/compat.h:35:
+extern int put_cmsg_compat(struct msghdr*, int, int, int, void *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#171: FILE: include/net/compat.h:36:
+extern int put_compat_msg_controllen(struct msghdr *, struct compat_msghdr *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct msghdr *' should also have an identifier name
#171: FILE: include/net/compat.h:36:
+extern int put_compat_msg_controllen(struct msghdr *, struct compat_msghdr *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct compat_msghdr *' should also have an identifier name
#171: FILE: include/net/compat.h:36:
+extern int put_compat_msg_controllen(struct msghdr *, struct compat_msghdr *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#171: FILE: include/net/compat.h:36:
+extern int put_compat_msg_controllen(struct msghdr *, struct compat_msghdr *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#172: FILE: include/net/compat.h:37:
+extern int put_compat_msg_controllen(struct msghdr *, struct compat_msghdr *,
+		unsigned long);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#173: FILE: include/net/compat.h:38:
+extern int cmsghdr_from_user_compat_to_kern(struct msghdr *, unsigned char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct msghdr *' should also have an identifier name
#173: FILE: include/net/compat.h:38:
+extern int cmsghdr_from_user_compat_to_kern(struct msghdr *, unsigned char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned char *' should also have an identifier name
#173: FILE: include/net/compat.h:38:
+extern int cmsghdr_from_user_compat_to_kern(struct msghdr *, unsigned char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#173: FILE: include/net/compat.h:38:
+extern int cmsghdr_from_user_compat_to_kern(struct msghdr *, unsigned char *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#174: FILE: include/net/compat.h:39:
+extern int cmsghdr_from_user_compat_to_kern(struct msghdr *, unsigned char *,
+		int);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'msg' - possible side-effects?
#329: FILE: net/compat.c:122:
+#define CMSG_COMPAT_FIRSTHDR(msg)			\
+	(((msg)->msg_controllen) >= sizeof(struct compat_cmsghdr) ?	\
+	 (struct compat_cmsghdr *)((msg)->msg_control) :		\
+	 (struct compat_cmsghdr *)NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#335: FILE: net/compat.c:128:
+static inline struct compat_cmsghdr *cmsg_compat_nxthdr(struct msghdr *msg,
+		struct compat_cmsghdr *cmsg, int cmsg_len)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#382: FILE: net/compat.c:389:
+int put_compat_msg_controllen(struct msghdr *msg_sys,
+		struct compat_msghdr *msg_compat, unsigned long cmsg_ptr)

CHECK:SPACING: No space is necessary after a cast
#390: FILE: net/compat.c:397:
+	uclen = (compat_size_t) (ucmsg_ptr - cmsg_ptr);

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#398: FILE: net/compat.c:405:
+/*
+ * For now, we assume that the compatibility and native version

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#493: FILE: net/compat.c:463:
+	/*
+	 * Since struct ipt_counters just contains two u_int64_t members

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#500: FILE: net/compat.c:470:
+	if (!access_ok(VERIFY_WRITE, krepl->counters,
+			krepl->num_counters * sizeof(struct ipt_counters)))

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#522: FILE: net/compat.c:484:
+/*
+ * A struct sock_filter is architecture independent.

WARNING:TYPO_SPELLING: 'architecure' may be misspelled - perhaps 'architecture'?
#560: FILE: net/compat.c:508:
+	 * Since struct sock_filter is architecure independent,
 	                               ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#560: FILE: net/compat.c:508:
+	/*
+	 * Since struct sock_filter is architecure independent,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#565: FILE: net/compat.c:513:
+	if (!access_ok(VERIFY_READ, kfprog.filter,
+			kfprog.len * sizeof(struct sock_filter)))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#611: FILE: net/compat.c:575:
+asmlinkage long compat_sys_setsockopt(int fd, int level, int optname,
 				char *optval, int optlen)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#620: FILE: net/compat.c:593:
+				       void * optval, int *optlen);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#623: FILE: net/compat.c:596:
+static int do_get_sock_timeout(int fd, int level, int optname, char *optval,
+		int *optlen)

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#663: FILE: net/compat.c:639:
+extern asmlinkage long sys_connect(int, struct sockaddr *, int);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#664: FILE: net/compat.c:640:
+extern asmlinkage long sys_accept(int, struct sockaddr *, int *); $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#664: FILE: net/compat.c:640:
+extern asmlinkage long sys_accept(int, struct sockaddr *, int *); 

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#665: FILE: net/compat.c:641:
+extern asmlinkage long sys_getsockname(int, struct sockaddr *, int *);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#666: FILE: net/compat.c:642:
+extern asmlinkage long sys_getpeername(int, struct sockaddr *, int *);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#667: FILE: net/compat.c:643:
+extern asmlinkage long sys_send(int, void *, size_t, unsigned);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#667: FILE: net/compat.c:643:
+extern asmlinkage long sys_send(int, void *, size_t, unsigned);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#668: FILE: net/compat.c:644:
+extern asmlinkage long sys_sendto(int, void *, size_t, unsigned,

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#668: FILE: net/compat.c:644:
+extern asmlinkage long sys_sendto(int, void *, size_t, unsigned,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#670: FILE: net/compat.c:646:
+extern asmlinkage long sys_recv(int, void *, size_t, unsigned);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#670: FILE: net/compat.c:646:
+extern asmlinkage long sys_recv(int, void *, size_t, unsigned);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#671: FILE: net/compat.c:647:
+extern asmlinkage long sys_recvfrom(int, void *, size_t, unsigned,

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#671: FILE: net/compat.c:647:
+extern asmlinkage long sys_recvfrom(int, void *, size_t, unsigned,

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#673: FILE: net/compat.c:649:
+extern asmlinkage long sys_socket(int, int, int);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#674: FILE: net/compat.c:650:
+extern asmlinkage long sys_socketpair(int, int, int, int [2]);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#675: FILE: net/compat.c:651:
+extern asmlinkage long sys_shutdown(int, int);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#676: FILE: net/compat.c:652:
+extern asmlinkage long sys_listen(int, int);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000384948.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 6 errors, 42 warnings, 15 checks, 572 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000384948.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
