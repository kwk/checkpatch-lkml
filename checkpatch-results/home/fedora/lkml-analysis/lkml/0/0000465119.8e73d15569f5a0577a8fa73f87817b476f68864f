WARNING:TYPO_SPELLING: 'Tought' may be misspelled - perhaps 'Thought'?
#29: 
Tought this was patched against 2.5.8-pre2 it still applyes
^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'applyes' may be misspelled - perhaps 'applies'?
#29: 
Tought this was patched against 2.5.8-pre2 it still applyes
                                                    ^^^^^^^

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#37: 
   This should become the entity which is holding all data for a request in the

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#210: FILE: drivers/ide/ide-disk.c:663:
+		args.taskfile.high_cylinder	= drive->cyl>>8;
 		                           	            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#211: FILE: drivers/ide/ide-disk.c:664:
+		args.taskfile.device_head	= ((drive->head-1)|drive->select.all)&0xBF;
 		                         	               ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#211: FILE: drivers/ide/ide-disk.c:664:
+		args.taskfile.device_head	= ((drive->head-1)|drive->select.all)&0xBF;
 		                         	                  ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#211: FILE: drivers/ide/ide-disk.c:664:
+		args.taskfile.device_head	= ((drive->head-1)|drive->select.all)&0xBF;
 		                         	                                     ^

WARNING:ONE_SEMICOLON: Statements terminations use 1 semicolon
#218: FILE: drivers/ide/ide-disk.c:668:
+			args.handler = set_geometry_intr;;

ERROR:CODE_INDENT: code indent should use tabs where possible
#295: FILE: drivers/ide/ide-dma.c:255:
+        nents = blk_rq_map_sg(rq->q, rq, ch->sg_table);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#295: FILE: drivers/ide/ide-dma.c:255:
+        nents = blk_rq_map_sg(rq->q, rq, ch->sg_table);$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#331: FILE: drivers/ide/ide-dma.c:304:
+		hwif->sg_nents = i = raw_build_sglist(hwif, HWGROUP(drive)->rq);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#352: FILE: drivers/ide/ide-features.c:187:
+int ide_ata66_check (ide_drive_t *drive, struct ata_taskfile *args)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#361: FILE: drivers/ide/ide-features.c:214:
+int set_transfer (ide_drive_t *drive, struct ata_taskfile *args)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#373: FILE: drivers/ide/ide-pmac.c:1058:
+pmac_raw_build_sglist (int ix, struct request *rq)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#389: FILE: drivers/ide/ide-pmac.c:1114:
+		pmac_ide[ix].sg_nents = i = pmac_raw_build_sglist(ix, rq);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "args->handler"
#477: FILE: drivers/ide/ide-taskfile.c:426:
+	if (args->handler != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "args->prehandler"
#487: FILE: drivers/ide/ide-taskfile.c:434:
+		if (args->prehandler != NULL)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'args->taskfile.command == WIN_WRITEDMA'
#492: FILE: drivers/ide/ide-taskfile.c:438:
+		if (drive->using_dma &&
+		!(drive->channel->dmaproc(((args->taskfile.command == WIN_WRITEDMA)
+					|| (args->taskfile.command == WIN_WRITEDMA_EXT))
+					? ide_dma_write : ide_dma_read, drive)));

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'args->taskfile.command == WIN_WRITEDMA_EXT'
#492: FILE: drivers/ide/ide-taskfile.c:438:
+		if (drive->using_dma &&
+		!(drive->channel->dmaproc(((args->taskfile.command == WIN_WRITEDMA)
+					|| (args->taskfile.command == WIN_WRITEDMA_EXT))
+					? ide_dma_write : ide_dma_read, drive)));

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#492: FILE: drivers/ide/ide-taskfile.c:438:
+		if (drive->using_dma &&
[...]
+					? ide_dma_write : ide_dma_read, drive)));

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#493: FILE: drivers/ide/ide-taskfile.c:439:
+		if (drive->using_dma &&
+		!(drive->channel->dmaproc(((args->taskfile.command == WIN_WRITEDMA)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#494: FILE: drivers/ide/ide-taskfile.c:440:
+		!(drive->channel->dmaproc(((args->taskfile.command == WIN_WRITEDMA)
+					|| (args->taskfile.command == WIN_WRITEDMA_EXT))

WARNING:LINE_SPACING: Missing a blank line after declarations
#579: FILE: drivers/ide/ide.c:742:
+		struct ata_taskfile *args = rq->special;
+		rq->errors = !OK_STAT(stat, READY_STAT, BAD_STAT);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:INCLUDE_LINUX: Use #include <linux/bitops.h> instead of <asm/bitops.h>
#714: FILE: include/linux/ide.h:18:
+#include <asm/bitops.h>

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#790: FILE: include/linux/ide.h:748:
+extern void ide_init_drive_cmd (struct request *rq);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#790: FILE: include/linux/ide.h:748:
+extern void ide_init_drive_cmd (struct request *rq);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#828: FILE: include/linux/ide.h:801:
+int ide_raw_taskfile (ide_drive_t *drive, struct ata_taskfile *cmd, byte *buf);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#834: FILE: include/linux/ide.h:805:
+extern void ide_cmd_type_parser(struct ata_taskfile *args);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#843: FILE: include/linux/ide.h:814:
+int ide_ata66_check (ide_drive_t *drive, struct ata_taskfile *args);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#847: FILE: include/linux/ide.h:817:
+int set_transfer (ide_drive_t *drive, struct ata_taskfile *args);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000465119.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 2 errors, 14 warnings, 14 checks, 725 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000465119.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
