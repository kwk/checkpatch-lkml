WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#31: 
  timer interrupt, but is otherwise not utilized by any other subsystem yet.

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#58: FILE: include/linux/ktime.h:316:
+#define KTIME_REALTIME_RES	(NSEC_PER_SEC/HZ)
                           	             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#59: FILE: include/linux/ktime.h:317:
+#define KTIME_MONOTONIC_RES	(NSEC_PER_SEC/HZ)
                            	             ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#62: FILE: include/linux/ktime.h:320:
+extern ktime_t ktime_get(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#65: FILE: include/linux/ktime.h:323:
+extern ktime_t ktime_get_real(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#68: FILE: include/linux/ktime.h:326:
+extern void ktime_get_ts(struct timespec *ts);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#79: FILE: include/linux/ktimer.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#80: FILE: include/linux/ktimer.h:2:
+ *  include/linux/ktimer.h

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:TYPO_SPELLING: 'Thats' may be misspelled - perhaps 'That's'?
#119: FILE: include/linux/ktimer.h:41:
+	 * Rounding is required when the time is set up. Thats an
 	                                                 ^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'enqueing' may be misspelled - perhaps 'enqueuing'?
#121: FILE: include/linux/ktimer.h:43:
+	 * in the enqueing code so we do not need to read is twice.
 	          ^^^^^^^^

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#168: FILE: include/linux/ktimer.h:90:
+	void			(*function)(void *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#190: FILE: include/linux/ktimer.h:112:
+	spinlock_t		lock;

CHECK:SPACING: No space is necessary after a cast
#201: FILE: include/linux/ktimer.h:123:
+#define KTIMER_POISON		((void *) 0x00100101)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#206: FILE: include/linux/ktimer.h:128:
+extern void ktimer_init(struct ktimer *timer);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#207: FILE: include/linux/ktimer.h:129:
+extern void ktimer_init_clock(struct ktimer *timer,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#211: FILE: include/linux/ktimer.h:133:
+extern int ktimer_start(struct ktimer *timer, const ktime_t *tim,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#213: FILE: include/linux/ktimer.h:135:
+extern int ktimer_restart(struct ktimer *timer, const ktime_t *tim,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#215: FILE: include/linux/ktimer.h:137:
+extern int ktimer_cancel(struct ktimer *timer);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#216: FILE: include/linux/ktimer.h:138:
+extern int ktimer_try_to_cancel(struct ktimer *timer);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#219: FILE: include/linux/ktimer.h:141:
+extern ktime_t ktimer_get_remtime(const struct ktimer *timer);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#220: FILE: include/linux/ktimer.h:142:
+extern ktime_t ktimer_get_expiry(const struct ktimer *timer, ktime_t *now);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#221: FILE: include/linux/ktimer.h:143:
+extern int ktimer_get_res(const clockid_t which_clock, struct timespec *tp);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#222: FILE: include/linux/ktimer.h:144:
+extern int ktimer_get_res_clock(const clockid_t which_clock,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#231: FILE: include/linux/ktimer.h:153:
+extern ktime_t ktimer_round_timeval(const struct ktimer *timer,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#233: FILE: include/linux/ktimer.h:155:
+extern ktime_t ktimer_round_timespec(const struct ktimer *timer,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#237: FILE: include/linux/ktimer.h:159:
+extern void wait_for_ktimer(const struct ktimer *timer);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#243: FILE: include/linux/ktimer.h:165:
+extern void ktimer_run_queues(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#246: FILE: include/linux/ktimer.h:168:
+extern void __init ktimers_init(void);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#289: FILE: kernel/ktimer.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#290: FILE: kernel/ktimer.c:2:
+ *  linux/kernel/ktimer.c

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#323: FILE: kernel/ktimer.c:35:
+#include <asm/uaccess.h>

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#332: FILE: kernel/ktimer.c:44:
+static DEFINE_PER_CPU(struct ktimer_base, ktimer_bases[MAX_KTIMER_BASES]) =
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#361: FILE: kernel/ktimer.c:73:
+EXPORT_SYMBOL_GPL(ktime_get);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#377: FILE: kernel/ktimer.c:89:
+EXPORT_SYMBOL_GPL(ktime_get_real);

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#410: FILE: kernel/ktimer.c:122:
+#define set_curr_timer(b, t)		(b)->curr_timer = (t)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "base"
#451: FILE: kernel/ktimer.c:163:
+		if (likely(base != NULL)) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#526: FILE: kernel/ktimer.c:238:
+#define get_ktimer_base_unlocked(t)	(t)->base

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#582: FILE: kernel/ktimer.c:294:
+# define ktime_modulo(kt, div)		(unsigned long)((kt).tv64 % (div))

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#668: FILE: kernel/ktimer.c:380:
+	switch (mode & ~(KTIMER_NOCHECK | KTIMER_ROUND)) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#701: FILE: kernel/ktimer.c:413:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:BRACES: braces {} should be used on all arms of this statement
#737: FILE: kernel/ktimer.c:449:
+		if (timer->expires.tv64 < entry->expires.tv64)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#739: FILE: kernel/ktimer.c:451:
+		else {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#777: FILE: kernel/ktimer.c:489:
+	BUG_ON(base->count < 0);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'timer->interval.tv64 != 0'
#780: FILE: kernel/ktimer.c:492:
+	if (rearm && (timer->interval.tv64 != 0))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#806: FILE: kernel/ktimer.c:518:
+	BUG_ON(!timer->function);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#841: FILE: kernel/ktimer.c:553:
+	BUG_ON(ktimer_active(timer));

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#846: FILE: kernel/ktimer.c:558:
+EXPORT_SYMBOL_GPL(ktimer_start);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#862: FILE: kernel/ktimer.c:574:
+	BUG_ON(!tim);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#867: FILE: kernel/ktimer.c:579:
+EXPORT_SYMBOL_GPL(ktimer_restart);

WARNING:TYPO_SPELLING: 'excuting' may be misspelled - perhaps 'executing'?
#877: FILE: kernel/ktimer.c:589:
+ * -1 when the timer is currently excuting the callback function and
                                   ^^^^^^^^

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#898: FILE: kernel/ktimer.c:610:
+
+}

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#900: FILE: kernel/ktimer.c:612:
+EXPORT_SYMBOL_GPL(ktimer_try_to_cancel);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#922: FILE: kernel/ktimer.c:634:
+EXPORT_SYMBOL_GPL(ktimer_cancel);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#990: FILE: kernel/ktimer.c:702:
+EXPORT_SYMBOL_GPL(ktimer_init);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1007: FILE: kernel/ktimer.c:719:
+EXPORT_SYMBOL_GPL(ktimer_init_clock);

WARNING:TYPO_SPELLING: 'compability' may be misspelled - perhaps 'compatibility'?
#1012: FILE: kernel/ktimer.c:724:
+ * @which_clock: unused parameter for compability with the posix timer code
                                       ^^^^^^^^^^^

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#1060: FILE: kernel/ktimer.c:772:
+		void (*fn)(void *);

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1099: FILE: kernel/ktimer.c:811:
+static void __devinit init_ktimers_cpu(int cpu)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1133: FILE: kernel/ktimer.c:845:
+	BUG_ON(cpu_online(cpu));

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1140: FILE: kernel/ktimer.c:852:
+	for (i = 0; i < MAX_KTIMER_BASES; i++) {
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1144: FILE: kernel/ktimer.c:856:
+		BUG_ON(old_base->curr_timer);

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1159: FILE: kernel/ktimer.c:871:
+static int __devinit ktimer_cpu_notify(struct notifier_block *self,

ERROR:SPACING: space required before the open parenthesis '('
#1164: FILE: kernel/ktimer.c:876:
+	switch(action) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1165: FILE: kernel/ktimer.c:877:
+	switch(action) {
+

WARNING:HOTPLUG_SECTION: Using __devinitdata is unnecessary
#1183: FILE: kernel/ktimer.c:895:
+static struct notifier_block __devinitdata ktimers_nb = {

WARNING:MISPLACED_INIT: __devinitdata should be placed after ktimers_nb
#1183: FILE: kernel/ktimer.c:895:
+static struct notifier_block __devinitdata ktimers_nb = {

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

ERROR:CODE_INDENT: code indent should use tabs where possible
#1210: FILE: kernel/timer.c:861:
+ ^Iktimer_run_queues();$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1210: FILE: kernel/timer.c:861:
+ ^Iktimer_run_queues();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1210: FILE: kernel/timer.c:861:
+ ^Iktimer_run_queues();$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000129829.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 6 errors, 33 warnings, 30 checks, 1138 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000129829.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
