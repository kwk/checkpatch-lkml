WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#78: 
diff -ur --exclude-from /home/axboe/exclude /opt/kernel/linux-2.4.9-pre4/include/asm-i386/pci.h linux/include/asm-i386/pci.h

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#101: FILE: include/asm-i386/pci.h:96:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#110: FILE: include/asm-i386/pci.h:105:
+		BUG();

ERROR:SPACING: space prohibited before that close parenthesis ')'
#129: FILE: include/asm-i386/pci.h:135:
+	for (i = 0; i < nents; i++ ) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#131: FILE: include/asm-i386/pci.h:137:
+			BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#133: FILE: include/asm-i386/pci.h:139:
+			BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#158: FILE: include/asm-i386/pci.h:172:
+		BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#170: FILE: include/asm-i386/pci.h:184:
+		BUG();

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#202: FILE: include/asm-i386/scatterlist.h:8:
+    struct page * page; /* Location for highmem page, if any */$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#202: FILE: include/asm-i386/scatterlist.h:8:
+    struct page * page; /* Location for highmem page, if any */

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#203: FILE: include/asm-i386/scatterlist.h:9:
+    char *  address;    /* Location data is to be transferred to, NULL for$

ERROR:POINTER_LOCATION: "foo *  bar" should be "foo *bar"
#203: FILE: include/asm-i386/scatterlist.h:9:
+    char *  address;    /* Location data is to be transferred to, NULL for

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#204: FILE: include/asm-i386/scatterlist.h:10:
+			 * highmem page */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#207: FILE: include/asm-i386/scatterlist.h:13:
+    dma_addr_t dma_address;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#209: FILE: include/asm-i386/scatterlist.h:15:
+    unsigned int offset;/* for highmem, page offset */$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#277: FILE: drivers/block/cciss.c:1133:
+		pci_unmap_page(hba[cmd->ctlr]->pdev,
 			temp64.val, cmd->SG[i].Len, 

CHECK:SPACING: No space is necessary after a cast
#369: FILE: drivers/block/cciss.c:1356:
+		temp64.val = (__u64) pci_map_page( h->pdev,

ERROR:SPACING: space prohibited after that open parenthesis '('
#369: FILE: drivers/block/cciss.c:1356:
+		temp64.val = (__u64) pci_map_page( h->pdev,

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#458: FILE: drivers/block/cpqarray.c:982:
+	seg = lastdataend = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:SPACING: No space is necessary after a cast
#485: FILE: drivers/block/cpqarray.c:1004:
+		c->req.sg[i].addr = (__u32) pci_map_page(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#485: FILE: drivers/block/cpqarray.c:1004:
+		c->req.sg[i].addr = (__u32) pci_map_page(

ERROR:CODE_INDENT: code indent should use tabs where possible
#486: FILE: drivers/block/cpqarray.c:1005:
+                ^I^Ih->pci_dev, tmp_sg[i].page, tmp_sg[i].size,$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#486: FILE: drivers/block/cpqarray.c:1005:
+                ^I^Ih->pci_dev, tmp_sg[i].page, tmp_sg[i].size,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#486: FILE: drivers/block/cpqarray.c:1005:
+                ^I^Ih->pci_dev, tmp_sg[i].page, tmp_sg[i].size,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#496: FILE: drivers/block/cpqarray.c:1113:
+                pci_unmap_page(hba[cmd->ctlr]->pci_dev,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#496: FILE: drivers/block/cpqarray.c:1113:
+                pci_unmap_page(hba[cmd->ctlr]->pci_dev,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#497: FILE: drivers/block/cpqarray.c:1114:
+                pci_unmap_page(hba[cmd->ctlr]->pci_dev,
                         cmd->req.sg[i].addr, cmd->req.sg[i].size,

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#661: FILE: drivers/block/ll_rw_blk.c:757:
+			req->current_nr_sectors = req->hard_cur_sectors = count;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#670: FILE: drivers/block/ll_rw_blk.c:807:
+	req->current_nr_sectors = req->hard_cur_sectors = count;

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#712: FILE: drivers/block/ll_rw_blk.c:1295:
+EXPORT_SYMBOL(blk_max_low_pfn);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:LINE_SPACING: Missing a blank line after declarations
#816: FILE: drivers/ide/ide-disk.c:216:
+				char *to = ide_map_buffer(rq, &flags);
+				idedisk_output_data (drive, to, SECTOR_WORDS);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#816: FILE: drivers/ide/ide-disk.c:216:
+				idedisk_output_data (drive, to, SECTOR_WORDS);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#987: FILE: drivers/ide/ide-dma.c:312:
+^I^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#989: FILE: drivers/ide/ide-dma.c:314:
+				BUG();

ERROR:TRAILING_WHITESPACE: trailing whitespace
#998: FILE: drivers/ide/ide-dma.c:323:
+^I^I^I^I/* $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1024: FILE: drivers/ide/ide-dma.c:354:
+	pci_unmap_sgl(HWIF(drive)->pci_dev,
 		     HWIF(drive)->sg_table,

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*hwif->sg_table)...) over kmalloc(sizeof(struct sg_list)...)
#1088: FILE: drivers/ide/ide-dma.c:708:
+	hwif->sg_table = kmalloc(sizeof(struct sg_list) * PRD_ENTRIES,

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1123: FILE: drivers/scsi/aic7xxx/aic7xxx_linux_host.h:85:
+	can_dma_32: 1						\
 	          ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1134: FILE: drivers/scsi/hosts.c:238:
+    retval->can_dma_32 = tpnt->can_dma_32;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1145: FILE: drivers/scsi/hosts.h:294:
+    unsigned can_dma_32:1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1154: FILE: drivers/scsi/hosts.h:395:
+    unsigned can_dma_32:1;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1166: FILE: drivers/scsi/qlogicfc.h:103:
+        use_clustering:         ENABLE_CLUSTERING,^I^I^I   \$

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1166: FILE: drivers/scsi/qlogicfc.h:103:
+        use_clustering:         ENABLE_CLUSTERING,			   \
                       ^

WARNING:INDENTED_LABEL: labels should not be indented
#1166: FILE: drivers/scsi/qlogicfc.h:103:
+        use_clustering:         ENABLE_CLUSTERING,			   \

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1167: FILE: drivers/scsi/qlogicfc.h:104:
+	can_dma_32:		1					   \
 	          ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1182: FILE: drivers/scsi/scsi.c:181:
+void  scsi_initialize_queue(Scsi_Device * SDpnt, struct Scsi_Host * SHpnt)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1182: FILE: drivers/scsi/scsi.c:181:
+void  scsi_initialize_queue(Scsi_Device * SDpnt, struct Scsi_Host * SHpnt)

CHECK:CAMELCASE: Avoid CamelCase: <Scsi_Device>
#1182: FILE: drivers/scsi/scsi.c:181:
+void  scsi_initialize_queue(Scsi_Device * SDpnt, struct Scsi_Host * SHpnt)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <SDpnt>
#1182: FILE: drivers/scsi/scsi.c:181:
+void  scsi_initialize_queue(Scsi_Device * SDpnt, struct Scsi_Host * SHpnt)

CHECK:CAMELCASE: Avoid CamelCase: <Scsi_Host>
#1182: FILE: drivers/scsi/scsi.c:181:
+void  scsi_initialize_queue(Scsi_Device * SDpnt, struct Scsi_Host * SHpnt)

CHECK:CAMELCASE: Avoid CamelCase: <SHpnt>
#1182: FILE: drivers/scsi/scsi.c:181:
+void  scsi_initialize_queue(Scsi_Device * SDpnt, struct Scsi_Host * SHpnt)

CHECK:SPACING: No space is necessary after a cast
#1188: FILE: drivers/scsi/scsi.c:187:
+	q->queuedata = (void *) SDpnt;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1200: FILE: drivers/scsi/scsi.h:394:
+#define CONTIGUOUS_BUFFERS(X,Y) (bh_bus((X)) + (X)->b_size == bh_bus((Y)))
                             ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'X' - possible side-effects?
#1200: FILE: drivers/scsi/scsi.h:394:
+#define CONTIGUOUS_BUFFERS(X,Y) (bh_bus((X)) + (X)->b_size == bh_bus((Y)))

CHECK:CAMELCASE: Avoid CamelCase: <SCpnt>
#1227: FILE: drivers/scsi/scsi_lib.c:492:
+	struct request *req = &SCpnt->request;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1240: FILE: drivers/scsi/scsi_lib.c:513:
+			scsi_free(SCpnt->request_buffer,SCpnt->request_bufflen);
 			                               ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1273: FILE: drivers/scsi/scsi_lib.c:593:
+				char *to = bh_kmap_irq(req->bh, &flags);
+				memcpy(to, SCpnt->buffer, SCpnt->bufflen);

ERROR:SPACING: space prohibited after that open parenthesis '('
#1314: FILE: drivers/scsi/scsi_merge.c:244:
+				if( dma_host && bh_bus(bh) - 1 >= ISA_DMA_THRESHOLD

ERROR:SPACING: space required before the open parenthesis '('
#1314: FILE: drivers/scsi/scsi_merge.c:244:
+				if( dma_host && bh_bus(bh) - 1 >= ISA_DMA_THRESHOLD

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1323: FILE: drivers/scsi/scsi_merge.c:306:
+(((((long)bh_bus((X))+(X)->b_size)|((long)bh_bus((Y)))) & \
                      ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1323: FILE: drivers/scsi/scsi_merge.c:306:
+(((((long)bh_bus((X))+(X)->b_size)|((long)bh_bus((Y)))) & \
                                   ^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1378: FILE: drivers/scsi/scsi_merge.c:658:
 		    && CONTIGUOUS_BUFFERS(req->bhtail, next->bh)
+		    && bh_bus(req->bhtail) - 1 >= ISA_DMA_THRESHOLD )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1378: FILE: drivers/scsi/scsi_merge.c:658:
+		    && bh_bus(req->bhtail) - 1 >= ISA_DMA_THRESHOLD )

WARNING:TYPO_SPELLING: 'guarenteed' may be misspelled - perhaps 'guaranteed'?
#1496: FILE: drivers/scsi/scsi_merge.c:915:
+		 * set since it's guarenteed to be a low memory page
 		                  ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1536: FILE: drivers/scsi/scsi_merge.c:1024:
+	buff = req->buffer = bh->b_data;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1563: FILE: drivers/scsi/scsi_merge.c:1045:
+				char *buf = bh_kmap_irq(bh, &flags);
+				memcpy(buff, buf, this_count << 9);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'SDpnt->type == TYPE_DISK'
#1593: FILE: drivers/scsi/scsi_merge.c:1131:
+	if (SHpnt->can_dma_32 && (SDpnt->type == TYPE_DISK))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1607: FILE: drivers/scsi/sym53c8xx.h:99:
+			use_clustering: DISABLE_CLUSTERING,	\
 			              ^

WARNING:INDENTED_LABEL: labels should not be indented
#1607: FILE: drivers/scsi/sym53c8xx.h:99:
+			use_clustering: DISABLE_CLUSTERING,	\

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1608: FILE: drivers/scsi/sym53c8xx.h:100:
+			can_dma_32:	1}
 			          ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1675: FILE: include/linux/blkdev.h:132:
+extern void blk_queue_bounce_limit(request_queue_t *, unsigned long);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'request_queue_t *' should also have an identifier name
#1675: FILE: include/linux/blkdev.h:132:
+extern void blk_queue_bounce_limit(request_queue_t *, unsigned long);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#1675: FILE: include/linux/blkdev.h:132:
+extern void blk_queue_bounce_limit(request_queue_t *, unsigned long);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1678: FILE: include/linux/blkdev.h:135:
+extern struct buffer_head *create_bounce(int, struct buffer_head *);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'bh' - possible side-effects?
#1711: FILE: include/linux/fs.h:280:
+#define bh_bus(bh)		(page_to_bus((bh)->b_page) + bh_offset((bh)))

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1725: FILE: include/linux/highmem.h:16:
+extern struct buffer_head *create_bounce(int rw, struct buffer_head * bh_orig);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1725: FILE: include/linux/highmem.h:16:
+extern struct buffer_head *create_bounce(int rw, struct buffer_head * bh_orig);

WARNING:TYPO_SPELLING: 'reenable' may be misspelled - perhaps 're-enable'?
#1734: FILE: include/linux/highmem.h:29:
+ * remember to add offset! and never ever reenable interrupts between a
                                           ^^^^^^^^

CHECK:SPACING: No space is necessary after a cast
#1753: FILE: include/linux/highmem.h:48:
+	addr = (unsigned long) kmap_atomic(bh->b_page, KM_BH_IRQ);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1756: FILE: include/linux/highmem.h:51:
+		BUG();

CHECK:SPACING: No space is necessary after a cast
#1758: FILE: include/linux/highmem.h:53:
+	return (char *) addr + bh_offset(bh);

CHECK:SPACING: No space is necessary after a cast
#1763: FILE: include/linux/highmem.h:58:
+	unsigned long ptr = (unsigned long) buffer & PAGE_MASK;

CHECK:SPACING: No space is necessary after a cast
#1765: FILE: include/linux/highmem.h:60:
+	kunmap_atomic((void *) ptr, KM_BH_IRQ);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'rq' - possible side-effects?
#1813: FILE: include/linux/ide.h:820:
+#define ide_rq_offset(rq) (((rq)->hard_cur_sectors - (rq)->current_nr_sectors) << 9)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1835: FILE: kernel/ksyms.c:125:
+EXPORT_SYMBOL(kmap_pte);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000518976.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 22 errors, 32 warnings, 31 checks, 1543 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000518976.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
