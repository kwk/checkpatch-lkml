CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#57: FILE: fs/proc/base.c:295:
+	E(PROC_TID_CPU_RATE_HARD_CAP,  "cpu_rate_hard_cap",   S_IFREG|S_IRUGO|S_IWUSR),
 	                                                             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#57: FILE: fs/proc/base.c:295:
+	E(PROC_TID_CPU_RATE_HARD_CAP,  "cpu_rate_hard_cap",   S_IFREG|S_IRUGO|S_IWUSR),
 	                                                                     ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO|S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#57: FILE: fs/proc/base.c:295:
+	E(PROC_TID_CPU_RATE_HARD_CAP,  "cpu_rate_hard_cap",   S_IFREG|S_IRUGO|S_IWUSR),

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#67: FILE: fs/proc/base.c:1105:
+static ssize_t cpu_rate_hard_cap_read(struct file * file, char * buf,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#67: FILE: fs/proc/base.c:1105:
+static ssize_t cpu_rate_hard_cap_read(struct file * file, char * buf,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#68: FILE: fs/proc/base.c:1106:
+static ssize_t cpu_rate_hard_cap_read(struct file * file, char * buf,
+			size_t count, loff_t *ppos)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#84: FILE: fs/proc/base.c:1122:
+static ssize_t cpu_rate_hard_cap_write(struct file * file, const char * buf,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#84: FILE: fs/proc/base.c:1122:
+static ssize_t cpu_rate_hard_cap_write(struct file * file, const char * buf,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#85: FILE: fs/proc/base.c:1123:
+static ssize_t cpu_rate_hard_cap_write(struct file * file, const char * buf,
+			 size_t count, loff_t *ppos)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#93: FILE: fs/proc/base.c:1131:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'count > 63'
#94: FILE: fs/proc/base.c:1132:
+	if ((count > 63) || *ppos)

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#98: FILE: fs/proc/base.c:1136:
+	hcppt = simple_strtoul(buffer, &endptr, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'endptr == buffer'
#99: FILE: fs/proc/base.c:1137:
+	if ((endptr == buffer) || (hcppt == ULONG_MAX))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'hcppt == ULONG_MAX'
#99: FILE: fs/proc/base.c:1137:
+	if ((endptr == buffer) || (hcppt == ULONG_MAX))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#102: FILE: fs/proc/base.c:1140:
+	if ((res = set_cpu_rate_hard_cap(task, hcppt)) != 0)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:CONST_STRUCT: struct file_operations should normally be const
#108: FILE: fs/proc/base.c:1146:
+struct file_operations proc_cpu_rate_hard_cap_operations = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:INDENTED_LABEL: labels should not be indented
#109: FILE: fs/proc/base.c:1147:
+	read:		cpu_rate_hard_cap_read,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#110: FILE: fs/proc/base.c:1148:
+	write:		cpu_rate_hard_cap_write,
 	     ^

WARNING:INDENTED_LABEL: labels should not be indented
#110: FILE: fs/proc/base.c:1148:
+	write:		cpu_rate_hard_cap_write,

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000066509.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 6 errors, 5 warnings, 8 checks, 90 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000066509.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
