CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#80: FILE: include/linux/pci.h:174:
+static inline struct pci_cap_saved_state *pci_find_saved_cap(

ERROR:SPACING: space required after that ',' (ctx:VxV)
#81: FILE: include/linux/pci.h:175:
+	struct pci_dev *pci_dev,char cap)
 	                       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#94: FILE: include/linux/pci.h:188:
+static inline void pci_add_saved_cap(struct pci_dev *pci_dev,
+	struct pci_cap_saved_state *new_cap)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#136: FILE: drivers/pci/pci.c:456:
+	if ((i = pci_save_msi_state(dev)) != 0)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#138: FILE: drivers/pci/pci.c:458:
+	if ((i = pci_save_msix_state(dev)) != 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#148: FILE: drivers/pci/pci.c:475:
+	if ((i = pci_restore_msi_state(dev)) != 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#150: FILE: drivers/pci/pci.c:477:
+	if ((i = pci_restore_msix_state(dev)) != 0)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*save_state)...) over kzalloc(sizeof(struct pci_cap_saved_state)...)
#180: FILE: drivers/pci/msi.c:535:
+	save_state = kzalloc(sizeof(struct pci_cap_saved_state) + sizeof(u32) * 5,

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#181: FILE: drivers/pci/msi.c:536:
+	save_state = kzalloc(sizeof(struct pci_cap_saved_state) + sizeof(u32) * 5,
+		GFP_KERNEL);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#183: FILE: drivers/pci/msi.c:538:
+		printk(KERN_ERR "Out of memory in pci_save_msi_state\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'pci_save_msi_state', this function's name, in a string
#183: FILE: drivers/pci/msi.c:538:
+		printk(KERN_ERR "Out of memory in pci_save_msi_state\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#183: FILE: drivers/pci/msi.c:538:
+	if (!save_state) {
+		printk(KERN_ERR "Out of memory in pci_save_msi_state\n");

CHECK:BRACES: braces {} should be used on all arms of this statement
#191: FILE: drivers/pci/msi.c:546:
+	if (control & PCI_MSI_FLAGS_64BIT) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#194: FILE: drivers/pci/msi.c:549:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#219: FILE: drivers/pci/msi.c:574:
+	if (control & PCI_MSI_FLAGS_64BIT) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#222: FILE: drivers/pci/msi.c:577:
+	} else

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*save_state)...) over kzalloc(sizeof(struct pci_cap_saved_state)...)
#248: FILE: drivers/pci/msi.c:603:
+	save_state = kzalloc(sizeof(struct pci_cap_saved_state) + sizeof(u16),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#249: FILE: drivers/pci/msi.c:604:
+	save_state = kzalloc(sizeof(struct pci_cap_saved_state) + sizeof(u16),
+		GFP_KERNEL);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#251: FILE: drivers/pci/msi.c:606:
+		printk(KERN_ERR "Out of memory in pci_save_msix_state\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'pci_save_msix_state', this function's name, in a string
#251: FILE: drivers/pci/msi.c:606:
+		printk(KERN_ERR "Out of memory in pci_save_msix_state\n");

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#251: FILE: drivers/pci/msi.c:606:
+	if (!save_state) {
+		printk(KERN_ERR "Out of memory in pci_save_msix_state\n");

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#292: FILE: drivers/pci/msi.c:647:
+	vector = head = dev->irq;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#307: FILE: drivers/pci/msi.c:662:
+		writel(address_lo,
+			base + j * PCI_MSIX_ENTRY_SIZE +

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#310: FILE: drivers/pci/msi.c:665:
+		writel(address_hi,
+			base + j * PCI_MSIX_ENTRY_SIZE +

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#313: FILE: drivers/pci/msi.c:668:
+		writel(data,
+			base + j * PCI_MSIX_ENTRY_SIZE +

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#322: FILE: drivers/pci/msi.c:677:
+		printk(KERN_ERR "PCI %s: restore MSI-X configs failed\n", pci_name(dev));

CHECK:BRACES: braces {} should be used on all arms of this statement
#353: FILE: drivers/pci/msi.c:708:
+	if (is_64bit_address(control)) {
[...]
+	} else
[...]

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#355: FILE: drivers/pci/msi.c:710:
+		pci_write_config_dword(dev,
+			msi_upper_address_reg(pos), address_hi);

CHECK:BRACES: Unbalanced braces around else statement
#357: FILE: drivers/pci/msi.c:712:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#364: FILE: drivers/pci/msi.c:719:
+		pci_read_config_dword(dev,
+			msi_mask_bits_reg(pos, is_64bit_address(control)),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#370: FILE: drivers/pci/msi.c:725:
+		pci_write_config_dword(dev,
+			msi_mask_bits_reg(pos, is_64bit_address(control)),

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000101823.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 5 errors, 7 warnings, 19 checks, 379 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000101823.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
