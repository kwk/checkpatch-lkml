WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#35: 
<http://home.t-online.de/home/olaf.dietsche/linux/accessfs-2.5.34-0.4.patch.gz>

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#49: FILE: fs/Config.in:105:
+source fs/accessfs/Config.in

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#82: FILE: fs/accessfs/Config.help:15:
+  To use this file system, you need to mount the file system $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'wether' may be misspelled - perhaps 'weather'?
#103: FILE: fs/accessfs/Config.help:36:
+  This option lets you choose, wether you want accessfs alone (N)
                                ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#150: FILE: fs/accessfs/inode.c:1:
+/* Copyright (c) 2001 Olaf Dietsche

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#159: FILE: fs/accessfs/inode.c:10:
+ * BENC255: the kernel doesn't lock BKL for us when entering methods $

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#175: FILE: fs/accessfs/inode.c:26:
+#include <asm/uaccess.h>

WARNING:NEW_TYPEDEFS: do not add new typedefs
#177: FILE: fs/accessfs/inode.c:28:
+typedef struct accessfs_entry	afs_entry_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#178: FILE: fs/accessfs/inode.c:29:
+typedef struct accessfs_direntry	afs_dir_t;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#182: FILE: fs/accessfs/inode.c:33:
+#ifdef CONFIG_PROC_FS           $

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#183: FILE: fs/accessfs/inode.c:34:
+static struct proc_dir_entry *mountdir = NULL;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#184: FILE: fs/accessfs/inode.c:35:
+#endif  $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#186: FILE: fs/accessfs/inode.c:37:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#187: FILE: fs/accessfs/inode.c:38:
+static struct inode_operations	accessfs_inode_operations;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct file_operations should normally be const
#188: FILE: fs/accessfs/inode.c:39:
+static struct file_operations	accessfs_dir_file_operations;

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#189: FILE: fs/accessfs/inode.c:40:
+static struct inode_operations	accessfs_dir_inode_operations;

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#199: FILE: fs/accessfs/inode.c:50:
+static int	accessfs_readdir(struct file *filp, void *dirent, filldir_t filldir)
           	                              ^^^^

CHECK:SPACING: No space is necessary after a cast
#221: FILE: fs/accessfs/inode.c:72:
+		afs_dir_t	*de = (afs_dir_t *) dentry->d_inode->u.generic_ip;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#232: FILE: fs/accessfs/inode.c:83:
+			if (filldir(dirent, pe->name, strlen(pe->name), filp->f_pos, pe->ino, DT_UNKNOWN) < 0)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LINE_SPACING: Missing a blank line after declarations
#232: FILE: fs/accessfs/inode.c:83:
+			afs_entry_t	*pe = list_entry(list, afs_entry_t, siblings);
+			if (filldir(dirent, pe->name, strlen(pe->name), filp->f_pos, pe->ino, DT_UNKNOWN) < 0)

CHECK:SPACING: No space is necessary after a cast
#250: FILE: fs/accessfs/inode.c:101:
+		afs_dir_t	*dir = (afs_dir_t *) pe;

WARNING:LINE_SPACING: Missing a blank line after declarations
#251: FILE: fs/accessfs/inode.c:102:
+		afs_dir_t	*dir = (afs_dir_t *) pe;
+		list_for_each(list, &dir->children) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#253: FILE: fs/accessfs/inode.c:104:
+			afs_entry_t	*de = list_entry(list, afs_entry_t, siblings);
+			if (strncmp(de->name, name, len) == 0 && de->name[len] == 0)

WARNING:LINE_SPACING: Missing a blank line after declarations
#265: FILE: fs/accessfs/inode.c:116:
+	afs_entry_t	*pe;
+	pe = accessfs_lookup_entry(dir->u.generic_ip, dentry->d_name.name, dentry->d_name.len);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#274: FILE: fs/accessfs/inode.c:125:
+^I{ "/", $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#275: FILE: fs/accessfs/inode.c:126:
+^I  LIST_HEAD_INIT(accessfs_rootdir.node.hash), $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#276: FILE: fs/accessfs/inode.c:127:
+^I  LIST_HEAD_INIT(accessfs_rootdir.node.siblings), $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#278: FILE: fs/accessfs/inode.c:129:
+^INULL, LIST_HEAD_INIT(accessfs_rootdir.children), $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#289: FILE: fs/accessfs/inode.c:140:
+/*
+	inode->i_blksize = PAGE_CACHE_SIZE;

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#293: FILE: fs/accessfs/inode.c:144:
+	inode->i_atime = inode->i_mtime = inode->i_ctime = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#303: FILE: fs/accessfs/inode.c:154:
+		printk(KERN_ERR "accessfs_init_inode(): '%s' unhandled mode=%d\n", pe->name, inode->i_mode);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#303: FILE: fs/accessfs/inode.c:154:
+		printk(KERN_ERR "accessfs_init_inode(): '%s' unhandled mode=%d\n", pe->name, inode->i_mode);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'accessfs_init_inode', this function's name, in a string
#303: FILE: fs/accessfs/inode.c:154:
+		printk(KERN_ERR "accessfs_init_inode(): '%s' unhandled mode=%d\n", pe->name, inode->i_mode);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#304: FILE: fs/accessfs/inode.c:155:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:LINE_SPACING: Missing a blank line after declarations
#312: FILE: fs/accessfs/inode.c:163:
+	struct inode	*inode = new_inode(sb);
+	if (inode) {

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#313: FILE: fs/accessfs/inode.c:164:
+/* ^I^Iinode->i_ino = accessfs_rootdir.node.ino; */$

WARNING:LONG_LINE: line length of 139 exceeds 100 columns
#323: FILE: fs/accessfs/inode.c:174:
+static int	accessfs_node_init(afs_dir_t *parent, afs_entry_t *de, const char *name, size_t len, struct access_attr *attr, mode_t mode)

WARNING:LINE_SPACING: Missing a blank line after declarations
#326: FILE: fs/accessfs/inode.c:177:
+	static unsigned long	ino = 1;
+	de->name = kmalloc(len + 1, GFP_KERNEL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!de->name"
#327: FILE: fs/accessfs/inode.c:178:
+	if (de->name == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:LINE_SPACING: Missing a blank line after declarations
#345: FILE: fs/accessfs/inode.c:196:
+	afs_entry_t	*pe = kmalloc(sizeof(afs_entry_t), GFP_KERNEL);
+	if (pe == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pe"
#345: FILE: fs/accessfs/inode.c:196:
+	if (pe == NULL)

WARNING:LINE_SPACING: Missing a blank line after declarations
#356: FILE: fs/accessfs/inode.c:207:
+	afs_dir_t	*dir = kmalloc(sizeof(afs_dir_t), GFP_KERNEL);
+	if (dir == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dir"
#356: FILE: fs/accessfs/inode.c:207:
+	if (dir == NULL)

WARNING:LINE_SPACING: Missing a blank line after declarations
#374: FILE: fs/accessfs/inode.c:225:
+	const char	*slash;
+	do {

WARNING:LINE_SPACING: Missing a blank line after declarations
#377: FILE: fs/accessfs/inode.c:228:
+		size_t	len;
+		while (*name == '/')

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#383: FILE: fs/accessfs/inode.c:234:
+		if (de == NULL) {
[...]
+		} else if (S_ISDIR(de->attr->mode)) {
[...]
+		} else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!de"
#383: FILE: fs/accessfs/inode.c:234:
+		if (de == NULL) {

CHECK:SPACING: No space is necessary after a cast
#386: FILE: fs/accessfs/inode.c:237:
+			dir = (afs_dir_t *) de;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dir"
#391: FILE: fs/accessfs/inode.c:242:
+		if (dir == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "slash"
#395: FILE: fs/accessfs/inode.c:246:
+	} while (slash != NULL);

WARNING:LINE_SPACING: Missing a blank line after declarations
#412: FILE: fs/accessfs/inode.c:263:
+	int	error = inode_setattr(i, iattr);
+	if (!error) {

CHECK:SPACING: No space is necessary after a cast
#413: FILE: fs/accessfs/inode.c:264:
+		afs_entry_t	*pe = (afs_entry_t *) i->u.generic_ip;

WARNING:LINE_SPACING: Missing a blank line after declarations
#414: FILE: fs/accessfs/inode.c:265:
+		afs_entry_t	*pe = (afs_entry_t *) i->u.generic_ip;
+		pe->attr->uid = i->i_uid;

WARNING:LINE_SPACING: Missing a blank line after declarations
#426: FILE: fs/accessfs/inode.c:277:
+	struct list_head	*list;
+	list_for_each(list, &hash) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#428: FILE: fs/accessfs/inode.c:279:
+		afs_entry_t	*pe = list_entry(list, afs_entry_t, hash);
+		if (pe->ino == ino) {

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#435: FILE: fs/accessfs/inode.c:286:
+static struct inode_operations	accessfs_inode_operations = {

WARNING:INDENTED_LABEL: labels should not be indented
#436: FILE: fs/accessfs/inode.c:287:
+	setattr:	accessfs_notify_change,

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#439: FILE: fs/accessfs/inode.c:290:
+static struct inode_operations	accessfs_dir_inode_operations = {

WARNING:INDENTED_LABEL: labels should not be indented
#440: FILE: fs/accessfs/inode.c:291:
+	lookup:	accessfs_lookup,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#441: FILE: fs/accessfs/inode.c:292:
+	setattr:	accessfs_notify_change,
 	       ^

WARNING:INDENTED_LABEL: labels should not be indented
#441: FILE: fs/accessfs/inode.c:292:
+	setattr:	accessfs_notify_change,

WARNING:CONST_STRUCT: struct file_operations should normally be const
#444: FILE: fs/accessfs/inode.c:295:
+static struct file_operations	accessfs_dir_file_operations = {

WARNING:INDENTED_LABEL: labels should not be indented
#445: FILE: fs/accessfs/inode.c:296:
+	readdir:	accessfs_readdir,

WARNING:INDENTED_LABEL: labels should not be indented
#449: FILE: fs/accessfs/inode.c:300:
+	read_inode:	accessfs_read_inode,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#450: FILE: fs/accessfs/inode.c:301:
+	statfs:		accessfs_statfs,
 	      ^

WARNING:INDENTED_LABEL: labels should not be indented
#450: FILE: fs/accessfs/inode.c:301:
+	statfs:		accessfs_statfs,

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#468: FILE: fs/accessfs/inode.c:319:
+		iput(inode);
 		^^^^

WARNING:LONG_LINE: line length of 121 exceeds 100 columns
#476: FILE: fs/accessfs/inode.c:327:
+static struct super_block	*accessfs_get_sb(struct file_system_type *fs_type, int flags, char *dev_name, void *data)

WARNING:LINE_SPACING: Missing a blank line after declarations
#484: FILE: fs/accessfs/inode.c:335:
+	mode_t	mode = p->mode;
+	if (current->fsuid == p->uid)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#494: FILE: fs/accessfs/inode.c:345:
+	if (dir) {
+		accessfs_mknod(dir, name, attr);
+	}

WARNING:LINE_SPACING: Missing a blank line after declarations
#502: FILE: fs/accessfs/inode.c:353:
+	afs_entry_t	*pe = accessfs_lookup_entry(&dir->node, name, strlen(name));
+	if (pe) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#502: FILE: fs/accessfs/inode.c:353:
+	if (pe) {
+		accessfs_unlink(pe);
+	}

WARNING:INDENTED_LABEL: labels should not be indented
#508: FILE: fs/accessfs/inode.c:359:
+	name:		"accessfs",

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#509: FILE: fs/accessfs/inode.c:360:
+	get_sb:	accessfs_get_sb,
 	      ^

WARNING:INDENTED_LABEL: labels should not be indented
#509: FILE: fs/accessfs/inode.c:360:
+	get_sb:	accessfs_get_sb,

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#510: FILE: fs/accessfs/inode.c:361:
+/* ^Ikill_sb:^Ikill_litter_super, */$

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#511: FILE: fs/accessfs/inode.c:362:
+	kill_sb:	kill_anon_super,
 	       ^

WARNING:INDENTED_LABEL: labels should not be indented
#511: FILE: fs/accessfs/inode.c:362:
+	kill_sb:	kill_anon_super,

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#516: FILE: fs/accessfs/inode.c:367:
+{
+

ERROR:SPACING: space required after that ',' (ctx:VxO)
#519: FILE: fs/accessfs/inode.c:370:
+	mountdir = proc_mkdir("access",&proc_root);
 	                              ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#519: FILE: fs/accessfs/inode.c:370:
+	mountdir = proc_mkdir("access",&proc_root);
 	                               ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#521: FILE: fs/accessfs/inode.c:372:
+^I$

ERROR:SPACING: space required after that ',' (ctx:VxO)
#530: FILE: fs/accessfs/inode.c:381:
+	remove_proc_entry("access",&proc_root);
 	                          ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#530: FILE: fs/accessfs/inode.c:381:
+	remove_proc_entry("access",&proc_root);
 	                           ^

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#537: FILE: fs/accessfs/inode.c:388:
+EXPORT_SYMBOL(accessfs_permitted);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#538: FILE: fs/accessfs/inode.c:389:
+EXPORT_SYMBOL(accessfs_make_dirpath);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#539: FILE: fs/accessfs/inode.c:390:
+EXPORT_SYMBOL(accessfs_register);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#540: FILE: fs/accessfs/inode.c:391:
+EXPORT_SYMBOL(accessfs_unregister);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#545: FILE: include/linux/accessfs_fs.h:1:
+/* -*- mode: c -*- */

WARNING:CVS_KEYWORD: CVS style keyword markers, these will _not_ be updated
#551: FILE: include/linux/accessfs_fs.h:7:
+ * $Log$

Since linux moved to git, the CVS markers are no longer used.
So, CVS style keywords ($Id$, $Revision$, $Log$) should not be
added.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#579: FILE: include/linux/accessfs_fs.h:35:
+extern int	accessfs_permitted(struct access_attr *p, int mask);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#580: FILE: include/linux/accessfs_fs.h:36:
+extern struct accessfs_direntry	*accessfs_make_dirpath(const char *name);

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#581: FILE: include/linux/accessfs_fs.h:37:
+extern void	accessfs_register(struct accessfs_direntry *dir, const char *name, struct access_attr *attr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#581: FILE: include/linux/accessfs_fs.h:37:
+extern void	accessfs_register(struct accessfs_direntry *dir, const char *name, struct access_attr *attr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#582: FILE: include/linux/accessfs_fs.h:38:
+extern void	accessfs_unregister(struct accessfs_direntry *dir, const char *name);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#584: FILE: include/linux/accessfs_fs.h:40:
+#ifdef ^ICONFIG_ACCESSFS_KEEP_CAPABILITIES$

ERROR:SPACING: exactly one space required after that #ifdef
#584: FILE: include/linux/accessfs_fs.h:40:
+#ifdef 	CONFIG_ACCESSFS_KEEP_CAPABILITIES

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#590: FILE: include/linux/accessfs_fs.h:46:
+#if ^ICONFIG_ACCESSFS_PROT_SOCK < PROT_SOCK$

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#618: FILE: net/ipv4/af_inet.c:359:
+	mode:	S_IXUSR,
 	    ^

WARNING:INDENTED_LABEL: labels should not be indented
#618: FILE: net/ipv4/af_inet.c:359:
+	mode:	S_IXUSR,

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IXUSR' are not preferred. Consider using octal permissions '0100'.
#618: FILE: net/ipv4/af_inet.c:359:
+	mode:	S_IXUSR,

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:LONG_LINE: line length of 161 exceeds 100 columns
#630: FILE: net/ipv4/af_inet.c:405:
+	if (answer->capability > 0 && !(answer->capability == CAP_NET_RAW && accessfs_permitted(&raw_socket, MAY_EXEC)) && !accessfs_capable(answer->capability))

WARNING:LONG_LINE: line length of 150 exceeds 100 columns
#653: FILE: net/ipv4/af_inet.c:554:
+	if (snum && snum < CONFIG_ACCESSFS_PROT_SOCK && !accessfs_permitted(&bind_to_port[snum], MAY_EXEC) && !accessfs_capable(CAP_NET_BIND_SERVICE))

WARNING:LINE_SPACING: Missing a blank line after declarations
#669: FILE: net/ipv4/af_inet.c:1152:
+	int i;
+	for (i = 1; i < CONFIG_ACCESSFS_PROT_SOCK; ++i) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#671: FILE: net/ipv4/af_inet.c:1154:
+		char	buf[sizeof("65536")];
+		bind_to_port[i].uid = 0;

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IXUSR' are not preferred. Consider using octal permissions '0100'.
#673: FILE: net/ipv4/af_inet.c:1156:
+		bind_to_port[i].mode = i < PROT_SOCK ? S_IXUSR : S_IXUGO;

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IXUGO' are not preferred. Consider using octal permissions '0111'.
#673: FILE: net/ipv4/af_inet.c:1156:
+		bind_to_port[i].mode = i < PROT_SOCK ? S_IXUSR : S_IXUGO;

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#679: FILE: net/ipv4/af_inet.c:1162:
+#if	0

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IXUSR' are not preferred. Consider using octal permissions '0100'.
#682: FILE: net/ipv4/af_inet.c:1165:
+	raw_socket.mode = S_IXUSR;

WARNING:LONG_LINE: line length of 150 exceeds 100 columns
#730: FILE: net/ipv6/af_inet6.c:323:
+	if (snum && snum < CONFIG_ACCESSFS_PROT_SOCK && !accessfs_permitted(&bind_to_port[snum], MAY_EXEC) && !accessfs_capable(CAP_NET_BIND_SERVICE))

WARNING:LINE_SPACING: Missing a blank line after declarations
#746: FILE: net/ipv6/af_inet6.c:650:
+	int i;
+	for (i = 1; i < CONFIG_ACCESSFS_PROT_SOCK; ++i) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#748: FILE: net/ipv6/af_inet6.c:652:
+		char	buf[sizeof("65536")];
+		bind_to_port[i].uid = 0;

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IXUSR' are not preferred. Consider using octal permissions '0100'.
#750: FILE: net/ipv6/af_inet6.c:654:
+		bind_to_port[i].mode = i < PROT_SOCK ? S_IXUSR : S_IXUGO;

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IXUGO' are not preferred. Consider using octal permissions '0111'.
#750: FILE: net/ipv6/af_inet6.c:654:
+		bind_to_port[i].mode = i < PROT_SOCK ? S_IXUSR : S_IXUGO;

WARNING:LINE_SPACING: Missing a blank line after declarations
#761: FILE: net/ipv6/af_inet6.c:665:
+	int i;
+	for (i = 1; i < CONFIG_ACCESSFS_PROT_SOCK; ++i) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#763: FILE: net/ipv6/af_inet6.c:667:
+		char	buf[sizeof("65536")];
+		sprintf(buf, "%d", i);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000431222.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 20 errors, 79 warnings, 17 checks, 706 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000431222.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
