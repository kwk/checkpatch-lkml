WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#47: 
diff -Nru -X dontdiff linux-2.5.64/arch/i386/Kconfig linux-lockmeter/arch/i386/Kconfig

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#54: FILE: arch/i386/Kconfig:1500:
+config LOCKMETER
+	bool "Kernel lock metering"
+	depends on SMP
+	help
+	  Say Y to enable kernel lock metering, which adds overhead to SMP locks, 
+	  but allows you to see various statistics using the lockstat command.
+

Kconfig symbols should have a help text which fully describes
it.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#58: FILE: arch/i386/Kconfig:1504:
+^I  Say Y to enable kernel lock metering, which adds overhead to SMP locks, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#109: FILE: arch/sparc64/lib/rwlock.S:66:
+ $

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#148: FILE: fs/proc/proc_misc.c:540:
+extern ssize_t put_lockmeter_info(const char *, size_t);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#148: FILE: fs/proc/proc_misc.c:540:
+extern ssize_t put_lockmeter_info(const char *, size_t);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#148: FILE: fs/proc/proc_misc.c:540:
+extern ssize_t put_lockmeter_info(const char *, size_t);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#149: FILE: fs/proc/proc_misc.c:541:
+extern int get_lockmeter_info_size(void);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#152: FILE: fs/proc/proc_misc.c:544:
+ * This function accesses lock metering information. $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#163: FILE: fs/proc/proc_misc.c:555:
+static ssize_t write_lockmeter(struct file * file, const char * buf,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#163: FILE: fs/proc/proc_misc.c:555:
+static ssize_t write_lockmeter(struct file * file, const char * buf,

WARNING:CONST_STRUCT: struct file_operations should normally be const
#169: FILE: fs/proc/proc_misc.c:561:
+static struct file_operations proc_lockmeter_operations = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#171: FILE: fs/proc/proc_misc.c:563:
+	read:		read_lockmeter,
 	    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:INDENTED_LABEL: labels should not be indented
#171: FILE: fs/proc/proc_misc.c:563:
+	read:		read_lockmeter,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#172: FILE: fs/proc/proc_misc.c:564:
+	write:		write_lockmeter,
 	     ^

WARNING:INDENTED_LABEL: labels should not be indented
#172: FILE: fs/proc/proc_misc.c:564:
+	write:		write_lockmeter,

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR | S_IRUGO' are not preferred. Consider using octal permissions '0644'.
#184: FILE: fs/proc/proc_misc.c:630:
+	entry = create_proc_entry("lockmeter", S_IWUSR | S_IRUGO, NULL);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#197: FILE: include/asm-alpha/lockmeter.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:LINUX_VERSION_CODE: LINUX_VERSION_CODE should be avoided, code should be for the version to which it is merged
#215: FILE: include/asm-alpha/lockmeter.h:19:
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,3,0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#215: FILE: include/asm-alpha/lockmeter.h:19:
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,3,0)
                                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#215: FILE: include/asm-alpha/lockmeter.h:19:
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,3,0)
                                            ^

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#215: FILE: include/asm-alpha/lockmeter.h:19:
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,3,0)

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

WARNING:NEW_TYPEDEFS: do not add new typedefs
#238: FILE: include/asm-alpha/lockmeter.h:42:
+typedef struct inst_spinlock_s {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#243: FILE: include/asm-alpha/lockmeter.h:47:
+#define PUT_INDEX(lock_ptr,indexv)	((inst_spinlock_t *)(lock_ptr))->index = indexv
                           ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#243: FILE: include/asm-alpha/lockmeter.h:47:
+#define PUT_INDEX(lock_ptr,indexv)	((inst_spinlock_t *)(lock_ptr))->index = indexv

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#244: FILE: include/asm-alpha/lockmeter.h:48:
+#define GET_INDEX(lock_ptr)		((inst_spinlock_t *)(lock_ptr))->index

WARNING:NEW_TYPEDEFS: do not add new typedefs
#256: FILE: include/asm-alpha/lockmeter.h:60:
+typedef struct inst_rwlock_s {

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#257: FILE: include/asm-alpha/lockmeter.h:61:
+	volatile int lock;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#261: FILE: include/asm-alpha/lockmeter.h:65:
+#define PUT_RWINDEX(rwlock_ptr,indexv)	((inst_rwlock_t *)(rwlock_ptr))->index = indexv
                               ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#261: FILE: include/asm-alpha/lockmeter.h:65:
+#define PUT_RWINDEX(rwlock_ptr,indexv)	((inst_rwlock_t *)(rwlock_ptr))->index = indexv

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#262: FILE: include/asm-alpha/lockmeter.h:66:
+#define GET_RWINDEX(rwlock_ptr)		((inst_rwlock_t *)(rwlock_ptr))->index

ERROR:SPACING: space required after that ',' (ctx:VxV)
#263: FILE: include/asm-alpha/lockmeter.h:67:
+#define PUT_RW_CPU(rwlock_ptr,cpuv)	((inst_rwlock_t *)(rwlock_ptr))->cpu = cpuv
                              ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#263: FILE: include/asm-alpha/lockmeter.h:67:
+#define PUT_RW_CPU(rwlock_ptr,cpuv)	((inst_rwlock_t *)(rwlock_ptr))->cpu = cpuv

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#264: FILE: include/asm-alpha/lockmeter.h:68:
+#define GET_RW_CPU(rwlock_ptr)		((inst_rwlock_t *)(rwlock_ptr))->cpu

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#271: FILE: include/asm-alpha/lockmeter.h:75:
+#define IABS(x) ((x) > 0 ? (x) : -(x))

CHECK:SPACING: No space is necessary after a cast
#276: FILE: include/asm-alpha/lockmeter.h:80:
+	int tmp = (int) ((inst_rwlock_t *)rwlock_ptr)->lock;

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#278: FILE: include/asm-alpha/lockmeter.h:82:
+^I/* ^I- andnot off a possible writer (bit 0)^I*/$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#282: FILE: include/asm-alpha/lockmeter.h:86:
+	if (tmp == 0) return(0);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#283: FILE: include/asm-alpha/lockmeter.h:87:
+	else return(IABS(tmp & ~1)>>1);
 	                          ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#283: FILE: include/asm-alpha/lockmeter.h:87:
+	else return(IABS(tmp & ~1)>>1);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#308: FILE: include/asm-alpha/spinlock.h:105:
+	unsigned magic;

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#313: FILE: include/asm-alpha/spinlock.h:110:
+#define RW_LOCK_UNLOCKED (rwlock_t) { 0, 0, 0 }

ERROR:SPACING: space required after that ',' (ctx:VxV)
#327: FILE: include/asm-alpha/spinlock.h:188:
+	long temp,result;
 	         ^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#329: FILE: include/asm-alpha/spinlock.h:190:
+	__asm__ __volatile__(

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#336: FILE: include/asm-alpha/spinlock.h:197:
+	: "=m" (*(volatile int *)lock), "=&r" (temp), "=&r" (result)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#337: FILE: include/asm-alpha/spinlock.h:198:
+	: "m" (*(volatile int *)lock)

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#340: FILE: include/asm-alpha/spinlock.h:201:
+	return (result);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#345: FILE: include/asm-alpha/spinlock.h:206:
+	unsigned long temp,result;
 	                  ^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#347: FILE: include/asm-alpha/spinlock.h:208:
+	__asm__ __volatile__(

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#354: FILE: include/asm-alpha/spinlock.h:215:
+	: "=m" (*(volatile int *)lock), "=&r" (temp), "=&r" (result)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#355: FILE: include/asm-alpha/spinlock.h:216:
+	: "m" (*(volatile int *)lock)

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#357: FILE: include/asm-alpha/spinlock.h:218:
+	return (result);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#366: FILE: include/asm-i386/lockmeter.h:1:
+/*

WARNING:LINUX_VERSION_CODE: LINUX_VERSION_CODE should be avoided, code should be for the version to which it is merged
#399: FILE: include/asm-i386/lockmeter.h:34:
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,3,0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#399: FILE: include/asm-i386/lockmeter.h:34:
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,3,0)
                                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#399: FILE: include/asm-i386/lockmeter.h:34:
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,3,0)
                                            ^

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#399: FILE: include/asm-i386/lockmeter.h:34:
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,3,0)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#400: FILE: include/asm-i386/lockmeter.h:35:
+#define local_irq_save(x) \
+    __asm__ __volatile__("pushfl ; popl %0 ; cli":"=g" (x): /* no input */ :"memory")

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#401: FILE: include/asm-i386/lockmeter.h:36:
+    __asm__ __volatile__("pushfl ; popl %0 ; cli":"=g" (x): /* no input */ :"memory")$

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#401: FILE: include/asm-i386/lockmeter.h:36:
+    __asm__ __volatile__("pushfl ; popl %0 ; cli":"=g" (x): /* no input */ :"memory")
                                                  ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#401: FILE: include/asm-i386/lockmeter.h:36:
+    __asm__ __volatile__("pushfl ; popl %0 ; cli":"=g" (x): /* no input */ :"memory")
                                                           ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#401: FILE: include/asm-i386/lockmeter.h:36:
+    __asm__ __volatile__("pushfl ; popl %0 ; cli":"=g" (x): /* no input */ :"memory")
                                                                            ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#403: FILE: include/asm-i386/lockmeter.h:38:
+#define local_irq_restore(x) \
+    __asm__ __volatile__("pushl %0 ; popfl": /* no output */ :"g" (x):"memory")

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#404: FILE: include/asm-i386/lockmeter.h:39:
+    __asm__ __volatile__("pushl %0 ; popfl": /* no output */ :"g" (x):"memory")$

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#404: FILE: include/asm-i386/lockmeter.h:39:
+    __asm__ __volatile__("pushl %0 ; popfl": /* no output */ :"g" (x):"memory")
                                            ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#404: FILE: include/asm-i386/lockmeter.h:39:
+    __asm__ __volatile__("pushl %0 ; popfl": /* no output */ :"g" (x):"memory")
                                                              ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#404: FILE: include/asm-i386/lockmeter.h:39:
+    __asm__ __volatile__("pushl %0 ; popfl": /* no output */ :"g" (x):"memory")
                                                                      ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#408: FILE: include/asm-i386/lockmeter.h:43:
+ * macros to cache and retrieve an index value inside of a spin lock  $

WARNING:NEW_TYPEDEFS: do not add new typedefs
#417: FILE: include/asm-i386/lockmeter.h:52:
+typedef struct inst_spinlock_s {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#422: FILE: include/asm-i386/lockmeter.h:57:
+#define PUT_INDEX(lock_ptr,indexv) ((inst_spinlock_t *)(lock_ptr))->index = indexv
                           ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#422: FILE: include/asm-i386/lockmeter.h:57:
+#define PUT_INDEX(lock_ptr,indexv) ((inst_spinlock_t *)(lock_ptr))->index = indexv

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#423: FILE: include/asm-i386/lockmeter.h:58:
+#define GET_INDEX(lock_ptr)        ((inst_spinlock_t *)(lock_ptr))->index

WARNING:NEW_TYPEDEFS: do not add new typedefs
#435: FILE: include/asm-i386/lockmeter.h:70:
+typedef struct inst_rwlock_s {

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#436: FILE: include/asm-i386/lockmeter.h:71:
+	volatile int lock;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#440: FILE: include/asm-i386/lockmeter.h:75:
+#define PUT_RWINDEX(rwlock_ptr,indexv) ((inst_rwlock_t *)(rwlock_ptr))->index = indexv
                               ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#440: FILE: include/asm-i386/lockmeter.h:75:
+#define PUT_RWINDEX(rwlock_ptr,indexv) ((inst_rwlock_t *)(rwlock_ptr))->index = indexv

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#441: FILE: include/asm-i386/lockmeter.h:76:
+#define GET_RWINDEX(rwlock_ptr)        ((inst_rwlock_t *)(rwlock_ptr))->index

ERROR:SPACING: space required after that ',' (ctx:VxV)
#442: FILE: include/asm-i386/lockmeter.h:77:
+#define PUT_RW_CPU(rwlock_ptr,cpuv)    ((inst_rwlock_t *)(rwlock_ptr))->cpu = cpuv
                              ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#442: FILE: include/asm-i386/lockmeter.h:77:
+#define PUT_RW_CPU(rwlock_ptr,cpuv)    ((inst_rwlock_t *)(rwlock_ptr))->cpu = cpuv

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#443: FILE: include/asm-i386/lockmeter.h:78:
+#define GET_RW_CPU(rwlock_ptr)         ((inst_rwlock_t *)(rwlock_ptr))->cpu

ERROR:TRAILING_WHITESPACE: trailing whitespace
#445: FILE: include/asm-i386/lockmeter.h:80:
+/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#450: FILE: include/asm-i386/lockmeter.h:85:
+extern inline int rwlock_readers(rwlock_t *rwlock_ptr) $

CHECK:SPACING: No space is necessary after a cast
#452: FILE: include/asm-i386/lockmeter.h:87:
+	int tmp = (int) rwlock_ptr->lock;

CHECK:SPACING: No space is necessary after a cast
#459: FILE: include/asm-i386/lockmeter.h:94:
+		tmp = (int) rwlock_ptr->lock;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#461: FILE: include/asm-i386/lockmeter.h:96:
+	if (tmp == 0) return(0);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#462: FILE: include/asm-i386/lockmeter.h:97:
+	else return(RW_LOCK_BIAS-tmp);
 	                        ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#462: FILE: include/asm-i386/lockmeter.h:97:
+	else return(RW_LOCK_BIAS-tmp);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#470: FILE: include/asm-i386/lockmeter.h:105:
+#define IABS(x) ((x) > 0 ? (x) : -(x))

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#482: FILE: include/asm-i386/lockmeter.h:117:
+			uint32_t eax;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#483: FILE: include/asm-i386/lockmeter.h:118:
+			uint32_t edx;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#485: FILE: include/asm-i386/lockmeter.h:120:
+^I} longlong; $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#487: FILE: include/asm-i386/lockmeter.h:122:
+	rdtsc(longlong.intint.eax,longlong.intint.edx);
 	                         ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#503: FILE: include/asm-i386/spinlock.h:147:
+	unsigned lockmeter_magic;

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#514: FILE: include/asm-i386/spinlock.h:158:
+#define RWLOCK_MAGIC_INIT	, 0, RWLOCK_MAGIC
                          	^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#514: FILE: include/asm-i386/spinlock.h:158:
+#define RWLOCK_MAGIC_INIT	, 0, RWLOCK_MAGIC

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#516: FILE: include/asm-i386/spinlock.h:160:
+#define RWLOCK_MAGIC_INIT	, 0
                          	^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#516: FILE: include/asm-i386/spinlock.h:160:
+#define RWLOCK_MAGIC_INIT	, 0

WARNING:LINE_SPACING: Missing a blank line after declarations
#537: FILE: include/asm-i386/spinlock.h:222:
+	atomic_t *count = (atomic_t *)lock;
+	atomic_dec(count);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#546: FILE: include/asm-i386/spinlock.h:231:
+extern void _metered_spin_lock  (spinlock_t *lock);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#546: FILE: include/asm-i386/spinlock.h:231:
+extern void _metered_spin_lock  (spinlock_t *lock);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#547: FILE: include/asm-i386/spinlock.h:232:
+extern void _metered_spin_unlock(spinlock_t *lock);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#561: FILE: include/asm-i386/spinlock.h:246:
+	newcount = counter-1;
 	                  ^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#567: FILE: include/asm-i386/spinlock.h:252:
+		:"=a" (newcount)
 		^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#568: FILE: include/asm-i386/spinlock.h:253:
+		:"r" (newcount), "m" (atomic->counter), "0" (counter));
 		^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#591: FILE: include/asm-ia64/lockmeter.h:1:
+/*

WARNING:NEW_TYPEDEFS: do not add new typedefs
#620: FILE: include/asm-ia64/lockmeter.h:30:
+typedef struct inst_spinlock_s {

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#622: FILE: include/asm-ia64/lockmeter.h:32:
+	volatile unsigned short lock;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#623: FILE: include/asm-ia64/lockmeter.h:33:
+	volatile unsigned short index;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#625: FILE: include/asm-ia64/lockmeter.h:35:
+#define PUT_INDEX(lock_ptr,indexv) ((inst_spinlock_t *)(lock_ptr))->index = indexv
                           ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#625: FILE: include/asm-ia64/lockmeter.h:35:
+#define PUT_INDEX(lock_ptr,indexv) ((inst_spinlock_t *)(lock_ptr))->index = indexv

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#626: FILE: include/asm-ia64/lockmeter.h:36:
+#define GET_INDEX(lock_ptr)        ((inst_spinlock_t *)(lock_ptr))->index

WARNING:NEW_TYPEDEFS: do not add new typedefs
#638: FILE: include/asm-ia64/lockmeter.h:48:
+typedef struct inst_rwlock_s {

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#639: FILE: include/asm-ia64/lockmeter.h:49:
+	volatile int read_counter:31;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#640: FILE: include/asm-ia64/lockmeter.h:50:
+	volatile int write_lock:1;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#641: FILE: include/asm-ia64/lockmeter.h:51:
+	volatile unsigned short index;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#642: FILE: include/asm-ia64/lockmeter.h:52:
+	volatile unsigned short cpu;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#644: FILE: include/asm-ia64/lockmeter.h:54:
+#define PUT_RWINDEX(rwlock_ptr,indexv) ((inst_rwlock_t *)(rwlock_ptr))->index = indexv
                               ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#644: FILE: include/asm-ia64/lockmeter.h:54:
+#define PUT_RWINDEX(rwlock_ptr,indexv) ((inst_rwlock_t *)(rwlock_ptr))->index = indexv

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#645: FILE: include/asm-ia64/lockmeter.h:55:
+#define GET_RWINDEX(rwlock_ptr)        ((inst_rwlock_t *)(rwlock_ptr))->index

ERROR:SPACING: space required after that ',' (ctx:VxV)
#646: FILE: include/asm-ia64/lockmeter.h:56:
+#define PUT_RW_CPU(rwlock_ptr,cpuv)    ((inst_rwlock_t *)(rwlock_ptr))->cpu = cpuv
                              ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#646: FILE: include/asm-ia64/lockmeter.h:56:
+#define PUT_RW_CPU(rwlock_ptr,cpuv)    ((inst_rwlock_t *)(rwlock_ptr))->cpu = cpuv

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#647: FILE: include/asm-ia64/lockmeter.h:57:
+#define GET_RW_CPU(rwlock_ptr)         ((inst_rwlock_t *)(rwlock_ptr))->cpu

ERROR:TRAILING_WHITESPACE: trailing whitespace
#649: FILE: include/asm-ia64/lockmeter.h:59:
+/* $

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#673: FILE: include/asm-ia64/spinlock.h:134:
+	unsigned lockmeter_magic;

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#678: FILE: include/asm-ia64/spinlock.h:139:
+#define RW_LOCK_UNLOCKED (rwlock_t) { 0, 0, 0 }

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#701: FILE: include/asm-ia64/spinlock.h:180:
+		return 0;
+	} else {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#709: FILE: include/asm-ia64/spinlock.h:188:
+	if (!(rw->write_lock)) {
[...]
+	    if (test_and_set_bit(31, rw) == 0) {

WARNING:TABSTOP: Statements should start on a tabstop
#711: FILE: include/asm-ia64/spinlock.h:190:
+	    if (test_and_set_bit(31, rw) == 0) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 20)
#713: FILE: include/asm-ia64/spinlock.h:192:
+		if (rw->read_counter) {
[...]
+		    clear_bit(31, rw);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 20)
#716: FILE: include/asm-ia64/spinlock.h:195:
+		} else {
[...]
+		    barrier();

WARNING:REPEATED_WORD: Possible repeated word: 'the'
#717: FILE: include/asm-ia64/spinlock.h:196:
+		    /* we've the the write-lock, no read-lockers... success! */

WARNING:TABSTOP: Statements should start on a tabstop
#719: FILE: include/asm-ia64/spinlock.h:198:
+		    return 1;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#721: FILE: include/asm-ia64/spinlock.h:200:
+^I^I$

WARNING:TABSTOP: Statements should start on a tabstop
#722: FILE: include/asm-ia64/spinlock.h:201:
+	    }

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#722: FILE: include/asm-ia64/spinlock.h:201:
+		
+	    }

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#725: FILE: include/asm-ia64/spinlock.h:204:
+	/* falls through ... fails to write-lock */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#739: FILE: include/asm-ia64/spinlock.h:245:
+extern void _metered_spin_lock  (spinlock_t *lock);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#739: FILE: include/asm-ia64/spinlock.h:245:
+extern void _metered_spin_lock  (spinlock_t *lock);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#740: FILE: include/asm-ia64/spinlock.h:246:
+extern void _metered_spin_unlock(spinlock_t *lock);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#756: FILE: include/asm-ia64/spinlock.h:262:
+}
+#define ATOMIC_DEC_AND_LOCK

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#764: FILE: include/asm-mips/lockmeter.h:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#770: FILE: include/asm-mips/lockmeter.h:7:
+ *   by D.J. Barrow ( dj.barrow@asitatechnologies.com ) $

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#787: FILE: include/asm-mips/lockmeter.h:24:
+static uint32_t cpu_cycle_frequency = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#787: FILE: include/asm-mips/lockmeter.h:24:
+static uint32_t cpu_cycle_frequency = 0;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#792: FILE: include/asm-mips/lockmeter.h:29:
+    int sec;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#793: FILE: include/asm-mips/lockmeter.h:30:
+    uint32_t start_cycles;$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#793: FILE: include/asm-mips/lockmeter.h:30:
+    uint32_t start_cycles;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#794: FILE: include/asm-mips/lockmeter.h:31:
+    struct timeval tv;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#796: FILE: include/asm-mips/lockmeter.h:33:
+    if (cpu_cycle_frequency == 0) {^I/* uninitialized */$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#799: FILE: include/asm-mips/lockmeter.h:36:
+	while (sec == tv.tv_sec) { do_gettimeofday(&tv); }

WARNING:BRACES: braces {} are not necessary for single statement blocks
#799: FILE: include/asm-mips/lockmeter.h:36:
+	while (sec == tv.tv_sec) { do_gettimeofday(&tv); }

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#802: FILE: include/asm-mips/lockmeter.h:39:
+	while (sec == tv.tv_sec) { do_gettimeofday(&tv); }

WARNING:BRACES: braces {} are not necessary for single statement blocks
#802: FILE: include/asm-mips/lockmeter.h:39:
+	while (sec == tv.tv_sec) { do_gettimeofday(&tv); }

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#804: FILE: include/asm-mips/lockmeter.h:41:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#806: FILE: include/asm-mips/lockmeter.h:43:
+    return cpu_cycle_frequency;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#813: FILE: include/asm-mips/lockmeter.h:50:
+    static uint64_t last_get_cycles64 = 0;$

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#813: FILE: include/asm-mips/lockmeter.h:50:
+    static uint64_t last_get_cycles64 = 0;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#813: FILE: include/asm-mips/lockmeter.h:50:
+    static uint64_t last_get_cycles64 = 0;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#814: FILE: include/asm-mips/lockmeter.h:51:
+    uint64_t ret;$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#814: FILE: include/asm-mips/lockmeter.h:51:
+    uint64_t ret;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#815: FILE: include/asm-mips/lockmeter.h:52:
+    unsigned long sec;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#816: FILE: include/asm-mips/lockmeter.h:53:
+    unsigned long usec, usec_offset;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#819: FILE: include/asm-mips/lockmeter.h:56:
+    sec  = xtime.tv_sec;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#820: FILE: include/asm-mips/lockmeter.h:57:
+    usec = xtime.tv_usec;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#821: FILE: include/asm-mips/lockmeter.h:58:
+    usec_offset = do_gettimeoffset();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#822: FILE: include/asm-mips/lockmeter.h:59:
+    if ((xtime.tv_sec != sec)  ||$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'xtime.tv_sec != sec'
#822: FILE: include/asm-mips/lockmeter.h:59:
+    if ((xtime.tv_sec != sec)  ||
+	(xtime.tv_usec != usec)||
+	(usec_offset >= 20000))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'xtime.tv_usec != usec'
#822: FILE: include/asm-mips/lockmeter.h:59:
+    if ((xtime.tv_sec != sec)  ||
+	(xtime.tv_usec != usec)||
+	(usec_offset >= 20000))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'usec_offset >= 20000'
#822: FILE: include/asm-mips/lockmeter.h:59:
+    if ((xtime.tv_sec != sec)  ||
+	(xtime.tv_usec != usec)||
+	(usec_offset >= 20000))

ERROR:SPACING: spaces required around that '||' (ctx:VxE)
#823: FILE: include/asm-mips/lockmeter.h:60:
+	(xtime.tv_usec != usec)||
 	                       ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#827: FILE: include/asm-mips/lockmeter.h:64:
+    ret = ((uint64_t)(usec + usec_offset) * cpu_cycle_frequency);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#829: FILE: include/asm-mips/lockmeter.h:66:
+    do_div(ret,1000000);$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#829: FILE: include/asm-mips/lockmeter.h:66:
+    do_div(ret,1000000);
               ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#830: FILE: include/asm-mips/lockmeter.h:67:
+    ret +=  ((uint64_t)sec * cpu_cycle_frequency);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#833: FILE: include/asm-mips/lockmeter.h:70:
+    if (ret <= last_get_cycles64)$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#834: FILE: include/asm-mips/lockmeter.h:71:
+	ret  = last_get_cycles64+1;
 	                        ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#835: FILE: include/asm-mips/lockmeter.h:72:
+    last_get_cycles64 = ret;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#837: FILE: include/asm-mips/lockmeter.h:74:
+    return ret;$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#850: FILE: include/asm-mips/lockmeter.h:87:
+#define PUT_INDEX(lockp,index)   \
                        ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#850: FILE: include/asm-mips/lockmeter.h:87:
+#define PUT_INDEX(lockp,index)   \
+        lockp->lock = (((lockp->lock) & ~INDEX_MASK) | (index) << INDEX_SHIFT)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lockp' - possible side-effects?
#850: FILE: include/asm-mips/lockmeter.h:87:
+#define PUT_INDEX(lockp,index)   \
+        lockp->lock = (((lockp->lock) & ~INDEX_MASK) | (index) << INDEX_SHIFT)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'lockp' may be better as '(lockp)' to avoid precedence issues
#850: FILE: include/asm-mips/lockmeter.h:87:
+#define PUT_INDEX(lockp,index)   \
+        lockp->lock = (((lockp->lock) & ~INDEX_MASK) | (index) << INDEX_SHIFT)

ERROR:CODE_INDENT: code indent should use tabs where possible
#851: FILE: include/asm-mips/lockmeter.h:88:
+        lockp->lock = (((lockp->lock) & ~INDEX_MASK) | (index) << INDEX_SHIFT)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#851: FILE: include/asm-mips/lockmeter.h:88:
+        lockp->lock = (((lockp->lock) & ~INDEX_MASK) | (index) << INDEX_SHIFT)$

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'lockp' may be better as '(lockp)' to avoid precedence issues
#852: FILE: include/asm-mips/lockmeter.h:89:
+#define GET_INDEX(lockp) \
+        (((lockp->lock) & INDEX_MASK) >> INDEX_SHIFT)

ERROR:CODE_INDENT: code indent should use tabs where possible
#853: FILE: include/asm-mips/lockmeter.h:90:
+        (((lockp->lock) & INDEX_MASK) >> INDEX_SHIFT)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#853: FILE: include/asm-mips/lockmeter.h:90:
+        (((lockp->lock) & INDEX_MASK) >> INDEX_SHIFT)$

WARNING:NEW_TYPEDEFS: do not add new typedefs
#865: FILE: include/asm-mips/lockmeter.h:102:
+typedef struct inst_rwlock_s {

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#866: FILE: include/asm-mips/lockmeter.h:103:
+	volatile int lock;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#870: FILE: include/asm-mips/lockmeter.h:107:
+#define PUT_RWINDEX(rwlock_ptr,indexv) ((inst_rwlock_t *)(rwlock_ptr))->index = indexv
                               ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#870: FILE: include/asm-mips/lockmeter.h:107:
+#define PUT_RWINDEX(rwlock_ptr,indexv) ((inst_rwlock_t *)(rwlock_ptr))->index = indexv

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#871: FILE: include/asm-mips/lockmeter.h:108:
+#define GET_RWINDEX(rwlock_ptr)        ((inst_rwlock_t *)(rwlock_ptr))->index

ERROR:SPACING: space required after that ',' (ctx:VxV)
#872: FILE: include/asm-mips/lockmeter.h:109:
+#define PUT_RW_CPU(rwlock_ptr,cpuv)    ((inst_rwlock_t *)(rwlock_ptr))->cpu = cpuv
                              ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#872: FILE: include/asm-mips/lockmeter.h:109:
+#define PUT_RW_CPU(rwlock_ptr,cpuv)    ((inst_rwlock_t *)(rwlock_ptr))->cpu = cpuv

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#873: FILE: include/asm-mips/lockmeter.h:110:
+#define GET_RW_CPU(rwlock_ptr)         ((inst_rwlock_t *)(rwlock_ptr))->cpu

ERROR:TRAILING_WHITESPACE: trailing whitespace
#875: FILE: include/asm-mips/lockmeter.h:112:
+/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#880: FILE: include/asm-mips/lockmeter.h:117:
+extern inline int rwlock_readers(rwlock_t *rwlock_ptr) $

CHECK:SPACING: No space is necessary after a cast
#882: FILE: include/asm-mips/lockmeter.h:119:
+	int tmp = (int) rwlock_ptr->lock;

WARNING:LINE_SPACING: Missing a blank line after declarations
#883: FILE: include/asm-mips/lockmeter.h:120:
+	int tmp = (int) rwlock_ptr->lock;
+	return (tmp >= 0) ? tmp : 0;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#900: FILE: include/asm-mips/spinlock.h:80:
+	unsigned lockmeter_magic;

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#905: FILE: include/asm-mips/spinlock.h:85:
+#define RW_LOCK_UNLOCKED (rwlock_t) { 0, 0 }

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#916: FILE: include/asm-mips64/lockmeter.h:1:
+/*

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#934: FILE: include/asm-mips64/lockmeter.h:19:
+static uint32_t cpu_cycle_frequency = 0;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#934: FILE: include/asm-mips64/lockmeter.h:19:
+static uint32_t cpu_cycle_frequency = 0;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#939: FILE: include/asm-mips64/lockmeter.h:24:
+    int sec;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#940: FILE: include/asm-mips64/lockmeter.h:25:
+    uint32_t start_cycles;$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#940: FILE: include/asm-mips64/lockmeter.h:25:
+    uint32_t start_cycles;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#941: FILE: include/asm-mips64/lockmeter.h:26:
+    struct timeval tv;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#943: FILE: include/asm-mips64/lockmeter.h:28:
+    if (cpu_cycle_frequency == 0) {^I/* uninitialized */$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#946: FILE: include/asm-mips64/lockmeter.h:31:
+	while (sec == tv.tv_sec) { do_gettimeofday(&tv); }

WARNING:BRACES: braces {} are not necessary for single statement blocks
#946: FILE: include/asm-mips64/lockmeter.h:31:
+	while (sec == tv.tv_sec) { do_gettimeofday(&tv); }

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#949: FILE: include/asm-mips64/lockmeter.h:34:
+	while (sec == tv.tv_sec) { do_gettimeofday(&tv); }

WARNING:BRACES: braces {} are not necessary for single statement blocks
#949: FILE: include/asm-mips64/lockmeter.h:34:
+	while (sec == tv.tv_sec) { do_gettimeofday(&tv); }

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#951: FILE: include/asm-mips64/lockmeter.h:36:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#953: FILE: include/asm-mips64/lockmeter.h:38:
+    return cpu_cycle_frequency;$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#957: FILE: include/asm-mips64/lockmeter.h:42:
+extern long do_gettimeoffset(void);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#961: FILE: include/asm-mips64/lockmeter.h:46:
+    static uint64_t last_get_cycles64 = 0;$

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#961: FILE: include/asm-mips64/lockmeter.h:46:
+    static uint64_t last_get_cycles64 = 0;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#961: FILE: include/asm-mips64/lockmeter.h:46:
+    static uint64_t last_get_cycles64 = 0;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#962: FILE: include/asm-mips64/lockmeter.h:47:
+    uint64_t ret;$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#962: FILE: include/asm-mips64/lockmeter.h:47:
+    uint64_t ret;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#963: FILE: include/asm-mips64/lockmeter.h:48:
+    unsigned long sec;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#964: FILE: include/asm-mips64/lockmeter.h:49:
+    unsigned long usec, usec_offset;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#967: FILE: include/asm-mips64/lockmeter.h:52:
+    sec  = xtime.tv_sec;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#968: FILE: include/asm-mips64/lockmeter.h:53:
+    usec = xtime.tv_usec;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#969: FILE: include/asm-mips64/lockmeter.h:54:
+    usec_offset = do_gettimeoffset();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#970: FILE: include/asm-mips64/lockmeter.h:55:
+    if ((xtime.tv_sec != sec)  ||$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'xtime.tv_sec != sec'
#970: FILE: include/asm-mips64/lockmeter.h:55:
+    if ((xtime.tv_sec != sec)  ||
+	(xtime.tv_usec != usec)||
+	(usec_offset >= 20000))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'xtime.tv_usec != usec'
#970: FILE: include/asm-mips64/lockmeter.h:55:
+    if ((xtime.tv_sec != sec)  ||
+	(xtime.tv_usec != usec)||
+	(usec_offset >= 20000))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'usec_offset >= 20000'
#970: FILE: include/asm-mips64/lockmeter.h:55:
+    if ((xtime.tv_sec != sec)  ||
+	(xtime.tv_usec != usec)||
+	(usec_offset >= 20000))

ERROR:SPACING: spaces required around that '||' (ctx:VxE)
#971: FILE: include/asm-mips64/lockmeter.h:56:
+	(xtime.tv_usec != usec)||
 	                       ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#975: FILE: include/asm-mips64/lockmeter.h:60:
+    ret =  ((uint64_t)sec * cpu_cycle_frequency)$

ERROR:SPACING: space prohibited after that open parenthesis '('
#976: FILE: include/asm-mips64/lockmeter.h:61:
+	+ ( ((uint64_t)(usec + usec_offset) * cpu_cycle_frequency) / 1000000 );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#976: FILE: include/asm-mips64/lockmeter.h:61:
+	+ ( ((uint64_t)(usec + usec_offset) * cpu_cycle_frequency) / 1000000 );

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#979: FILE: include/asm-mips64/lockmeter.h:64:
+    if (ret <= last_get_cycles64)$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#980: FILE: include/asm-mips64/lockmeter.h:65:
+	ret  = last_get_cycles64+1;
 	                        ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#981: FILE: include/asm-mips64/lockmeter.h:66:
+    last_get_cycles64 = ret;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#983: FILE: include/asm-mips64/lockmeter.h:68:
+    return ret;$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#996: FILE: include/asm-mips64/lockmeter.h:81:
+#define PUT_INDEX(lockp,index)   \
                        ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#996: FILE: include/asm-mips64/lockmeter.h:81:
+#define PUT_INDEX(lockp,index)   \
+        lockp->lock = (((lockp->lock) & ~INDEX_MASK) | (index) << INDEX_SHIFT)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lockp' - possible side-effects?
#996: FILE: include/asm-mips64/lockmeter.h:81:
+#define PUT_INDEX(lockp,index)   \
+        lockp->lock = (((lockp->lock) & ~INDEX_MASK) | (index) << INDEX_SHIFT)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'lockp' may be better as '(lockp)' to avoid precedence issues
#996: FILE: include/asm-mips64/lockmeter.h:81:
+#define PUT_INDEX(lockp,index)   \
+        lockp->lock = (((lockp->lock) & ~INDEX_MASK) | (index) << INDEX_SHIFT)

ERROR:CODE_INDENT: code indent should use tabs where possible
#997: FILE: include/asm-mips64/lockmeter.h:82:
+        lockp->lock = (((lockp->lock) & ~INDEX_MASK) | (index) << INDEX_SHIFT)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#997: FILE: include/asm-mips64/lockmeter.h:82:
+        lockp->lock = (((lockp->lock) & ~INDEX_MASK) | (index) << INDEX_SHIFT)$

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'lockp' may be better as '(lockp)' to avoid precedence issues
#998: FILE: include/asm-mips64/lockmeter.h:83:
+#define GET_INDEX(lockp) \
+        (((lockp->lock) & INDEX_MASK) >> INDEX_SHIFT)

ERROR:CODE_INDENT: code indent should use tabs where possible
#999: FILE: include/asm-mips64/lockmeter.h:84:
+        (((lockp->lock) & INDEX_MASK) >> INDEX_SHIFT)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#999: FILE: include/asm-mips64/lockmeter.h:84:
+        (((lockp->lock) & INDEX_MASK) >> INDEX_SHIFT)$

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1011: FILE: include/asm-mips64/lockmeter.h:96:
+typedef struct inst_rwlock_s {

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1012: FILE: include/asm-mips64/lockmeter.h:97:
+	volatile int lock;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1016: FILE: include/asm-mips64/lockmeter.h:101:
+#define PUT_RWINDEX(rwlock_ptr,indexv) ((inst_rwlock_t *)(rwlock_ptr))->index = indexv
                               ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1016: FILE: include/asm-mips64/lockmeter.h:101:
+#define PUT_RWINDEX(rwlock_ptr,indexv) ((inst_rwlock_t *)(rwlock_ptr))->index = indexv

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1017: FILE: include/asm-mips64/lockmeter.h:102:
+#define GET_RWINDEX(rwlock_ptr)        ((inst_rwlock_t *)(rwlock_ptr))->index

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1018: FILE: include/asm-mips64/lockmeter.h:103:
+#define PUT_RW_CPU(rwlock_ptr,cpuv)    ((inst_rwlock_t *)(rwlock_ptr))->cpu = cpuv
                              ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1018: FILE: include/asm-mips64/lockmeter.h:103:
+#define PUT_RW_CPU(rwlock_ptr,cpuv)    ((inst_rwlock_t *)(rwlock_ptr))->cpu = cpuv

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1019: FILE: include/asm-mips64/lockmeter.h:104:
+#define GET_RW_CPU(rwlock_ptr)         ((inst_rwlock_t *)(rwlock_ptr))->cpu

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1021: FILE: include/asm-mips64/lockmeter.h:106:
+/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1026: FILE: include/asm-mips64/lockmeter.h:111:
+extern inline int rwlock_readers(rwlock_t *rwlock_ptr) $

CHECK:SPACING: No space is necessary after a cast
#1028: FILE: include/asm-mips64/lockmeter.h:113:
+	int tmp = (int) rwlock_ptr->lock;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1029: FILE: include/asm-mips64/lockmeter.h:114:
+	int tmp = (int) rwlock_ptr->lock;
+	return (tmp >= 0) ? tmp : 0;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1052: FILE: include/asm-sparc64/lockmeter.h:1:
+/*

WARNING:LINUX_VERSION_CODE: LINUX_VERSION_CODE should be avoided, code should be for the version to which it is merged
#1068: FILE: include/asm-sparc64/lockmeter.h:17:
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,3,0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1068: FILE: include/asm-sparc64/lockmeter.h:17:
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,3,0)
                                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1068: FILE: include/asm-sparc64/lockmeter.h:17:
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,3,0)
                                            ^

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#1068: FILE: include/asm-sparc64/lockmeter.h:17:
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,3,0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1073: FILE: include/asm-sparc64/lockmeter.h:22:
+#define PUT_INDEX(lock_ptr,indexv)	(lock_ptr)->index = (indexv)
                           ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1073: FILE: include/asm-sparc64/lockmeter.h:22:
+#define PUT_INDEX(lock_ptr,indexv)	(lock_ptr)->index = (indexv)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1074: FILE: include/asm-sparc64/lockmeter.h:23:
+#define GET_INDEX(lock_ptr)		(lock_ptr)->index

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1076: FILE: include/asm-sparc64/lockmeter.h:25:
+#define PUT_RWINDEX(rwlock_ptr,indexv) (rwlock_ptr)->index = (indexv)
                               ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1076: FILE: include/asm-sparc64/lockmeter.h:25:
+#define PUT_RWINDEX(rwlock_ptr,indexv) (rwlock_ptr)->index = (indexv)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1077: FILE: include/asm-sparc64/lockmeter.h:26:
+#define GET_RWINDEX(rwlock_ptr)        (rwlock_ptr)->index

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1078: FILE: include/asm-sparc64/lockmeter.h:27:
+#define PUT_RW_CPU(rwlock_ptr,cpuv)    (rwlock_ptr)->cpu = (cpuv)
                              ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1078: FILE: include/asm-sparc64/lockmeter.h:27:
+#define PUT_RW_CPU(rwlock_ptr,cpuv)    (rwlock_ptr)->cpu = (cpuv)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1079: FILE: include/asm-sparc64/lockmeter.h:28:
+#define GET_RW_CPU(rwlock_ptr)         (rwlock_ptr)->cpu

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1108: FILE: include/asm-sparc64/spinlock.h:33:
+typedef struct {

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1116: FILE: include/asm-sparc64/spinlock.h:39:
+#define SPIN_LOCK_UNLOCKED	(spinlock_t) {0, 0}

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1118: FILE: include/asm-sparc64/spinlock.h:41:
+#define SPIN_LOCK_UNLOCKED	(spinlock_t) { 0 }

ERROR:SPACING: space required before the open parenthesis '('
#1121: FILE: include/asm-sparc64/spinlock.h:44:
+#define spin_lock_init(__lock)	do { *(__lock) = SPIN_LOCK_UNLOCKED; } while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#1121: FILE: include/asm-sparc64/spinlock.h:44:
+#define spin_lock_init(__lock)	do { *(__lock) = SPIN_LOCK_UNLOCKED; } while(0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1122: FILE: include/asm-sparc64/spinlock.h:45:
+#define spin_is_locked(__lock)	(*((volatile unsigned char *)(&((__lock)->lock))) != 0)

WARNING:USE_LOCKDEP: Where possible, use lockdep_assert_held instead of assertions based on spin_is_locked
#1122: FILE: include/asm-sparc64/spinlock.h:45:
+#define spin_is_locked(__lock)	(*((volatile unsigned char *)(&((__lock)->lock))) != 0)

lockdep_assert_held() annotations should be preferred over
assertions based on spin_is_locked()

See: https://www.kernel.org/doc/html/latest/locking/lockdep-design.html#annotations

ERROR:SPACING: space required before the open parenthesis '('
#1128: FILE: include/asm-sparc64/spinlock.h:49:
+} while(*((volatile unsigned char *)(&(((spinlock_t *)__lock)->lock))))

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1128: FILE: include/asm-sparc64/spinlock.h:49:
+} while(*((volatile unsigned char *)(&(((spinlock_t *)__lock)->lock))))

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1139: FILE: include/asm-sparc64/spinlock.h:121:
+typedef struct {

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1144: FILE: include/asm-sparc64/spinlock.h:126:
+#define RW_LOCK_UNLOCKED       (rwlock_t) { 0, 0, 0xff }

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1146: FILE: include/asm-sparc64/spinlock.h:128:
+typedef struct {

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1149: FILE: include/asm-sparc64/spinlock.h:131:
+#define RW_LOCK_UNLOCKED        (rwlock_t) { 0 }

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1159: FILE: include/linux/lockmeter.h:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1164: FILE: include/linux/lockmeter.h:6:
+ *  $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1178: FILE: include/linux/lockmeter.h:20:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1181: FILE: include/linux/lockmeter.h:23:
+ *-------------------------------------------------*/

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1183: FILE: include/linux/lockmeter.h:25:
+/* $

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void*' should also have an identifier name
#1191: FILE: include/linux/lockmeter.h:33:
+int	lstat_update(void*, void*, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void*' should also have an identifier name
#1191: FILE: include/linux/lockmeter.h:33:
+int	lstat_update(void*, void*, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1191: FILE: include/linux/lockmeter.h:33:
+int	lstat_update(void*, void*, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void*' should also have an identifier name
#1192: FILE: include/linux/lockmeter.h:34:
+int	lstat_update_time(void*, void*, int, uint32_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void*' should also have an identifier name
#1192: FILE: include/linux/lockmeter.h:34:
+int	lstat_update_time(void*, void*, int, uint32_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1192: FILE: include/linux/lockmeter.h:34:
+int	lstat_update_time(void*, void*, int, uint32_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'uint32_t' should also have an identifier name
#1192: FILE: include/linux/lockmeter.h:34:
+int	lstat_update_time(void*, void*, int, uint32_t);

WARNING:LONG_LINE: line length of 116 exceeds 100 columns
#1207: FILE: include/linux/lockmeter.h:49:
+#if defined(__KERNEL__) || (!defined(CONFIG_MIPS32_COMPAT) && !defined(CONFIG_SPARC32_COMPAT)) || (_MIPS_SZLONG==32)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#1207: FILE: include/linux/lockmeter.h:49:
+#if defined(__KERNEL__) || (!defined(CONFIG_MIPS32_COMPAT) && !defined(CONFIG_SPARC32_COMPAT)) || (_MIPS_SZLONG==32)
                                                                                                                ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1215: FILE: include/linux/lockmeter.h:57:
+ *^IZZZ - do we want a try-success status here??? $

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'n' may be better as '(n)' to avoid precedence issues
#1236: FILE: include/linux/lockmeter.h:78:
+#define LSTAT_RA(n)	\
+	((void*)( ((unsigned long)__builtin_return_address(0) & ~3) | n) )

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1237: FILE: include/linux/lockmeter.h:79:
+	((void*)( ((unsigned long)__builtin_return_address(0) & ~3) | n) )

ERROR:SPACING: space prohibited after that open parenthesis '('
#1237: FILE: include/linux/lockmeter.h:79:
+	((void*)( ((unsigned long)__builtin_return_address(0) & ~3) | n) )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1237: FILE: include/linux/lockmeter.h:79:
+	((void*)( ((unsigned long)__builtin_return_address(0) & ~3) | n) )

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1241: FILE: include/linux/lockmeter.h:83:
+ * to indicate special values of the lock address. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1246: FILE: include/linux/lockmeter.h:88:
+ * Maximum size of the lockstats tables. Increase this value $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1253: FILE: include/linux/lockmeter.h:95:
+ * This value depends on how many bits are available in the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1258: FILE: include/linux/lockmeter.h:100:
+/* $

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1262: FILE: include/linux/lockmeter.h:104:
+#define LSTAT_HASH_TABLE_MASK		(LSTAT_HASH_TABLE_SIZE-1)
                              		                      ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#1264: FILE: include/linux/lockmeter.h:106:
+#define DIRHASH(ra)      ((unsigned long)(ra)>>2 & LSTAT_HASH_TABLE_MASK)
                                              ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1269: FILE: include/linux/lockmeter.h:111:
+ *^IA directory entry only contains the lock identification - $

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1273: FILE: include/linux/lockmeter.h:115:
+typedef struct {

WARNING:LONG_LINE_COMMENT: line length of 103 exceeds 100 columns
#1276: FILE: include/linux/lockmeter.h:118:
+	ushort	next_stat_index;  /* Used to link multiple locks that have the same hash table value */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1290: FILE: include/linux/lockmeter.h:132:
+/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1292: FILE: include/linux/lockmeter.h:134:
+ *  Not all data is used for all cases.  In particular, the hold time   $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1294: FILE: include/linux/lockmeter.h:136:
+ *  (e. g. cannot be separated out by return address) quantity. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1297: FILE: include/linux/lockmeter.h:139:
+ */ $

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1298: FILE: include/linux/lockmeter.h:140:
+typedef struct {

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1299: FILE: include/linux/lockmeter.h:141:
+	uint64_t    cum_wait_ticks;	/* sum of wait times               */

ERROR:CODE_INDENT: code indent should use tabs where possible
#1300: FILE: include/linux/lockmeter.h:142:
+^I                                /* for write locks, sum of time a  */$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's64' over 'int64_t'
#1302: FILE: include/linux/lockmeter.h:144:
+	int64_t	    cum_hold_ticks;	/* cumulative sum of holds         */

ERROR:CODE_INDENT: code indent should use tabs where possible
#1303: FILE: include/linux/lockmeter.h:145:
+^I                                /* not used for read mode locks    */$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1305: FILE: include/linux/lockmeter.h:147:
+	uint32_t    max_wait_ticks;	/* max waiting time                */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1306: FILE: include/linux/lockmeter.h:148:
+	uint32_t    max_hold_ticks;	/* max holding time                */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1307: FILE: include/linux/lockmeter.h:149:
+	uint64_t    cum_wait_ww_ticks;  /* sum times writer waits on writer*/

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1308: FILE: include/linux/lockmeter.h:150:
+	uint32_t    max_wait_ww_ticks;  /* max wait time writer vs writer  */

ERROR:CODE_INDENT: code indent should use tabs where possible
#1309: FILE: include/linux/lockmeter.h:151:
+^I                                /* prev 2 only used for write locks*/$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1310: FILE: include/linux/lockmeter.h:152:
+	uint32_t    acquire_time;       /* time lock acquired this CPU     */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1311: FILE: include/linux/lockmeter.h:153:
+	uint32_t    count[LSTAT_ACT_MAX_VALUES];

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1314: FILE: include/linux/lockmeter.h:156:
+typedef lstat_lock_counts_t	lstat_cpu_counts_t[LSTAT_MAX_STAT_INDEX];

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1326: FILE: include/linux/lockmeter.h:168:
+typedef struct {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1328: FILE: include/linux/lockmeter.h:170:
+^Iuint32_t    read_lock_count;          $

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1328: FILE: include/linux/lockmeter.h:170:
+	uint32_t    read_lock_count;          

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's64' over 'int64_t'
#1329: FILE: include/linux/lockmeter.h:171:
+	int64_t     cum_hold_ticks;       /* sum of read lock hold times over */

ERROR:CODE_INDENT: code indent should use tabs where possible
#1330: FILE: include/linux/lockmeter.h:172:
+^I                                  /* all callers. ....................*/$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1331: FILE: include/linux/lockmeter.h:173:
+	uint32_t    write_index;          /* last write lock hash table index */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1332: FILE: include/linux/lockmeter.h:174:
+	uint32_t    busy_periods;         /* count of busy periods ended this */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1333: FILE: include/linux/lockmeter.h:175:
+	uint64_t    start_busy;           /* time this busy period started. ..*/

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1334: FILE: include/linux/lockmeter.h:176:
+	uint64_t    busy_ticks;           /* sum of busy periods this lock. ..*/

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1335: FILE: include/linux/lockmeter.h:177:
+	uint64_t    max_busy;             /* longest busy period for this lock*/

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1336: FILE: include/linux/lockmeter.h:178:
+	uint32_t    max_readers;          /* maximum number of readers ...... */

ERROR:CODE_INDENT: code indent should use tabs where possible
#1339: FILE: include/linux/lockmeter.h:181:
+^I                                  /* avoid having more than one rdr at*/$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1340: FILE: include/linux/lockmeter.h:182:
+^I                                  /* needed for user space testing... */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1341: FILE: include/linux/lockmeter.h:183:
+^I                                  /* not needed for kernel 'cause it  */$

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1345: FILE: include/linux/lockmeter.h:187:
+typedef lstat_read_lock_counts_t	lstat_read_lock_cpu_counts_t[LSTAT_MAX_READ_LOCK_INDEX];

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1355: FILE: include/linux/lockmeter.h:197:
+/* $

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1359: FILE: include/linux/lockmeter.h:201:
+#define LSTAT_HASH_TABLE_MASK		(LSTAT_HASH_TABLE_SIZE-1)
                              		                      ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#1361: FILE: include/linux/lockmeter.h:203:
+#define DIRHASH(ra)      ((unsigned long)(ra)>>2 & LSTAT_HASH_TABLE_MASK)
                                              ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1365: FILE: include/linux/lockmeter.h:207:
+ * store the index of the lock hash structure in unused bits in the lock  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1367: FILE: include/linux/lockmeter.h:209:
+ * any additional hash or lock stack lookup.  This works for spin_locks.  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1372: FILE: include/linux/lockmeter.h:214:
+ * For rw_locks, we store the index of a global reader stats structure in $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1373: FILE: include/linux/lockmeter.h:215:
+ * the lock and the writer index is stored in the latter structure.       $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1374: FILE: include/linux/lockmeter.h:216:
+ * For read mode locks we hash at the time of the lock to find an entry  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1381: FILE: include/linux/lockmeter.h:223:
+/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1385: FILE: include/linux/lockmeter.h:227:
+ * is incremented in _read_lock_ and vice versa.  So here is the    $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1386: FILE: include/linux/lockmeter.h:228:
+ * way we change the state of lstat_control.state:                  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1392: FILE: include/linux/lockmeter.h:234:
+ * (0)  Disable interrupts on this CPU                                          $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1393: FILE: include/linux/lockmeter.h:235:
+ * (1)  Seize the lstat_control.directory_lock                            $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1394: FILE: include/linux/lockmeter.h:236:
+ * (2)  Obtain the current value of lstat_control.next_free_read_lock_index   $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1396: FILE: include/linux/lockmeter.h:238:
+ * (4)  Release the lstat_control.directory_lock                          $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1397: FILE: include/linux/lockmeter.h:239:
+ * (5)  For each lock in the read lock list up to the saved value   $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1398: FILE: include/linux/lockmeter.h:240:
+ *      (well, -1) of the next_free_read_lock_index, do the following:        $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1401: FILE: include/linux/lockmeter.h:243:
+ *           has an index that matches this entry.  If not $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1405: FILE: include/linux/lockmeter.h:247:
+ *      (c)  Set a non-metered write lock on the lock          $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1407: FILE: include/linux/lockmeter.h:249:
+ *      (e)  Release the non-metered write lock.                    $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1410: FILE: include/linux/lockmeter.h:252:
+ * These rules ensure that a read lock will not have its statistics      $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1411: FILE: include/linux/lockmeter.h:253:
+ * partially updated even though the global lock recording state has    $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1417: FILE: include/linux/lockmeter.h:259:
+ * occur if the lock was read locked by the current CPU.  At the $

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1425: FILE: include/linux/lockmeter.h:267:
+typedef struct {

WARNING:LONG_LINE_COMMENT: line length of 107 exceeds 100 columns
#1427: FILE: include/linux/lockmeter.h:269:
+	spinlock_t		control_lock;		/* used to serialize turning statistics on/off   */

WARNING:LONG_LINE_COMMENT: line length of 107 exceeds 100 columns
#1428: FILE: include/linux/lockmeter.h:270:
+	spinlock_t		directory_lock;		/* for serialize adding entries to directory     */

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1429: FILE: include/linux/lockmeter.h:271:
+	volatile int	next_free_dir_index;/* next free entry in the directory */

ERROR:CODE_INDENT: code indent should use tabs where possible
#1431: FILE: include/linux/lockmeter.h:273:
+                /* the following fields represent data since     */$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1436: FILE: include/linux/lockmeter.h:278:
+	uint64_t    started_cycles64;       /* cycles when measurement last started          */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1437: FILE: include/linux/lockmeter.h:279:
+	uint64_t    ending_cycles64;        /* cycles when measurement last disabled         */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1438: FILE: include/linux/lockmeter.h:280:
+	uint64_t    enabled_cycles64;       /* total cycles with measurement enabled         */

ERROR:CODE_INDENT: code indent should use tabs where possible
#1440: FILE: include/linux/lockmeter.h:282:
+^I                                    /* i. e. number of times did lstat on;lstat off  */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1444: FILE: include/linux/lockmeter.h:286:
+^Iushort^I^I*hashtab;^I^I ^I    /* hash table for quick dir scans */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1446: FILE: include/linux/lockmeter.h:288:
+    int         next_free_read_lock_index;   /* next rwlock reader (global) stats block  */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1447: FILE: include/linux/lockmeter.h:289:
+    lstat_read_lock_cpu_counts_t *read_lock_counts[NR_CPUS]; /* per cpu read lock stats  */$

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1452: FILE: include/linux/lockmeter.h:294:
+typedef struct {

WARNING:LONG_LINE_COMMENT: line length of 104 exceeds 100 columns
#1458: FILE: include/linux/lockmeter.h:300:
+	TIME_T          started_time;		/* time in secs since 1969 when stats last turned on  */

WARNING:LONG_LINE_COMMENT: line length of 104 exceeds 100 columns
#1459: FILE: include/linux/lockmeter.h:301:
+	TIME_T		ending_time;		/* time in secs since 1969 when stats last turned off */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1460: FILE: include/linux/lockmeter.h:302:
+	uint32_t	cycleval;		/* cycles per second */

WARNING:LONG_LINE_COMMENT: line length of 103 exceeds 100 columns
#1465: FILE: include/linux/lockmeter.h:307:
+	int              next_free_read_lock_index; /* index of next (global) read lock stats struct */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1466: FILE: include/linux/lockmeter.h:308:
+	uint64_t         started_cycles64;	/* cycles when measurement last started        */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1467: FILE: include/linux/lockmeter.h:309:
+	uint64_t         ending_cycles64;	/* cycles when stats last turned off           */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1468: FILE: include/linux/lockmeter.h:310:
+	uint64_t         enabled_cycles64;	/* total cycles with measurement enabled       */

WARNING:LONG_LINE_COMMENT: line length of 103 exceeds 100 columns
#1471: FILE: include/linux/lockmeter.h:313:
+	int              dir_overflow;		/* number of times we wanted more space in directory */

WARNING:LONG_LINE_COMMENT: line length of 105 exceeds 100 columns
#1472: FILE: include/linux/lockmeter.h:314:
+	int              rwlock_overflow;	/* # of times we wanted more space in read_locks_count */

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1487: FILE: include/linux/spinlock.h:187:
+extern void _metered_spin_lock   (spinlock_t *lock);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1487: FILE: include/linux/spinlock.h:187:
+extern void _metered_spin_lock   (spinlock_t *lock);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1488: FILE: include/linux/spinlock.h:188:
+extern void _metered_spin_unlock (spinlock_t *lock);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1488: FILE: include/linux/spinlock.h:188:
+extern void _metered_spin_unlock (spinlock_t *lock);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1489: FILE: include/linux/spinlock.h:189:
+extern int  _metered_spin_trylock(spinlock_t *lock);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1490: FILE: include/linux/spinlock.h:190:
+extern void _metered_read_lock    (rwlock_t *lock);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1490: FILE: include/linux/spinlock.h:190:
+extern void _metered_read_lock    (rwlock_t *lock);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1491: FILE: include/linux/spinlock.h:191:
+extern void _metered_read_unlock  (rwlock_t *lock);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1491: FILE: include/linux/spinlock.h:191:
+extern void _metered_read_unlock  (rwlock_t *lock);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1492: FILE: include/linux/spinlock.h:192:
+extern void _metered_write_lock   (rwlock_t *lock);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1492: FILE: include/linux/spinlock.h:192:
+extern void _metered_write_lock   (rwlock_t *lock);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1493: FILE: include/linux/spinlock.h:193:
+extern void _metered_write_unlock (rwlock_t *lock);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1493: FILE: include/linux/spinlock.h:193:
+extern void _metered_write_unlock (rwlock_t *lock);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1494: FILE: include/linux/spinlock.h:194:
+extern int  _metered_write_trylock(rwlock_t *lock);

ERROR:SPACING: space required before the open parenthesis '('
#1567: FILE: include/linux/spinlock.h:407:
+} while(0)

ERROR:SPACING: space required after that ';' (ctx:VxV)
#1570: FILE: include/linux/spinlock.h:410:
+				1 : ({preempt_enable(); 0;});})
 				                         ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#1570: FILE: include/linux/spinlock.h:410:
+				1 : ({preempt_enable(); 0;});})
 				                            ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#1577: FILE: include/linux/spinlock.h:417:
+#define read_lock(lock)                ({preempt_disable(); _metered_read_lock(lock);})
                                                                                     ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#1578: FILE: include/linux/spinlock.h:418:
+#define read_unlock(lock)      ({_metered_read_unlock(lock); preempt_enable();})
                                                                              ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#1579: FILE: include/linux/spinlock.h:419:
+#define write_lock(lock)       ({preempt_disable(); _metered_write_lock(lock);})
                                                                              ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#1580: FILE: include/linux/spinlock.h:420:
+#define write_unlock(lock)     ({_metered_write_unlock(lock); preempt_enable();})
                                                                               ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#1581: FILE: include/linux/spinlock.h:421:
+#define write_trylock(lock)    ({preempt_disable();_metered_write_trylock(lock) ? \
                                                   ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#1582: FILE: include/linux/spinlock.h:422:
+				1 : ({preempt_enable(); 0;});})
 				                         ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#1582: FILE: include/linux/spinlock.h:422:
+				1 : ({preempt_enable(); 0;});})
 				                            ^

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1615: FILE: kernel/ksyms.c:621:
+EXPORT_SYMBOL(_metered_spin_trylock);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1616: FILE: kernel/ksyms.c:622:
+EXPORT_SYMBOL(_metered_read_lock);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1617: FILE: kernel/ksyms.c:623:
+EXPORT_SYMBOL(_metered_read_unlock);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1618: FILE: kernel/ksyms.c:624:
+EXPORT_SYMBOL(_metered_write_lock);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1619: FILE: kernel/ksyms.c:625:
+EXPORT_SYMBOL(_metered_write_unlock);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1629: FILE: kernel/lockmeter.c:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1634: FILE: kernel/lockmeter.c:6:
+ *  $

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#1656: FILE: kernel/lockmeter.c:28:
+#include <asm/uaccess.h>

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1673: FILE: kernel/lockmeter.c:45:
+#define bzero(loc,size)		memset(loc,0,size)
                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1673: FILE: kernel/lockmeter.c:45:
+#define bzero(loc,size)		memset(loc,0,size)
                        		          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1673: FILE: kernel/lockmeter.c:45:
+#define bzero(loc,size)		memset(loc,0,size)
                        		            ^

WARNING:LONG_LINE: line length of 143 exceeds 100 columns
#1681: FILE: kernel/lockmeter.c:53:
+static lstat_control_t	lstat_control __cacheline_aligned = {LSTAT_OFF, SPIN_LOCK_UNLOCKED, SPIN_LOCK_UNLOCKED, 19*0, NR_CPUS*0, 0, NR_CPUS*0};

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1681: FILE: kernel/lockmeter.c:53:
+static lstat_control_t	lstat_control __cacheline_aligned = {LSTAT_OFF, SPIN_LOCK_UNLOCKED, SPIN_LOCK_UNLOCKED, 19*0, NR_CPUS*0, 0, NR_CPUS*0};
                       	                                                                                          ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1681: FILE: kernel/lockmeter.c:53:
+static lstat_control_t	lstat_control __cacheline_aligned = {LSTAT_OFF, SPIN_LOCK_UNLOCKED, SPIN_LOCK_UNLOCKED, 19*0, NR_CPUS*0, 0, NR_CPUS*0};
                       	                                                                                                     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1681: FILE: kernel/lockmeter.c:53:
+static lstat_control_t	lstat_control __cacheline_aligned = {LSTAT_OFF, SPIN_LOCK_UNLOCKED, SPIN_LOCK_UNLOCKED, 19*0, NR_CPUS*0, 0, NR_CPUS*0};
                       	                                                                                                                   ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1681: FILE: kernel/lockmeter.c:53:
+static lstat_control_t	lstat_control __cacheline_aligned = {LSTAT_OFF, SPIN_LOCK_UNLOCKED, SPIN_LOCK_UNLOCKED, 19*0, NR_CPUS*0, 0, NR_CPUS*0};

WARNING:LONG_LINE: line length of 115 exceeds 100 columns
#1683: FILE: kernel/lockmeter.c:55:
+lstat_control_t	lstat_control = {LSTAT_OFF, SPIN_LOCK_UNLOCKED, SPIN_LOCK_UNLOCKED, 19*0, NR_CPUS*0, 0, NR_CPUS*0};

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1683: FILE: kernel/lockmeter.c:55:
+lstat_control_t	lstat_control = {LSTAT_OFF, SPIN_LOCK_UNLOCKED, SPIN_LOCK_UNLOCKED, 19*0, NR_CPUS*0, 0, NR_CPUS*0};
                	                                                                      ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1683: FILE: kernel/lockmeter.c:55:
+lstat_control_t	lstat_control = {LSTAT_OFF, SPIN_LOCK_UNLOCKED, SPIN_LOCK_UNLOCKED, 19*0, NR_CPUS*0, 0, NR_CPUS*0};
                	                                                                                 ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1683: FILE: kernel/lockmeter.c:55:
+lstat_control_t	lstat_control = {LSTAT_OFF, SPIN_LOCK_UNLOCKED, SPIN_LOCK_UNLOCKED, 19*0, NR_CPUS*0, 0, NR_CPUS*0};
                	                                                                                               ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1683: FILE: kernel/lockmeter.c:55:
+lstat_control_t	lstat_control = {LSTAT_OFF, SPIN_LOCK_UNLOCKED, SPIN_LOCK_UNLOCKED, 19*0, NR_CPUS*0, 0, NR_CPUS*0};

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1686: FILE: kernel/lockmeter.c:58:
+int smp_num_cpus=NR_CPUS;
                 ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1686: FILE: kernel/lockmeter.c:58:
+int smp_num_cpus=NR_CPUS;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1688: FILE: kernel/lockmeter.c:60:
+#undef BUG

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1689: FILE: kernel/lockmeter.c:61:
+#define BUG()

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1695: FILE: kernel/lockmeter.c:67:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1698: FILE: kernel/lockmeter.c:70:
+static ushort^I$

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1699: FILE: kernel/lockmeter.c:71:
+lstat_lookup(

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1710: FILE: kernel/lockmeter.c:82:
+		if (index == 0) {
+			return(lstat_make_dir_entry(lock_ptr, caller_ra));
+		}

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1711: FILE: kernel/lockmeter.c:83:
+			return(lstat_make_dir_entry(lock_ptr, caller_ra));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1716: FILE: kernel/lockmeter.c:88:
+^Iif (dirp[index].lock_ptr != NULL && $

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "dirp[index].lock_ptr"
#1716: FILE: kernel/lockmeter.c:88:
+	if (dirp[index].lock_ptr != NULL && 

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1717: FILE: kernel/lockmeter.c:89:
+	if (dirp[index].lock_ptr != NULL && 
+			dirp[index].lock_ptr != lock_ptr)  {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1724: FILE: kernel/lockmeter.c:96:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1729: FILE: kernel/lockmeter.c:101:
+static ushort^I$

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1730: FILE: kernel/lockmeter.c:102:
+lstat_make_dir_entry(

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1731: FILE: kernel/lockmeter.c:103:
+^Ivoid^I*lock_ptr, ^I^I^I$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1731: FILE: kernel/lockmeter.c:103:
+^Ivoid^I*lock_ptr, ^I^I^I$

WARNING:TRAILING_SEMICOLON: trailing semicolon indicates no statements, indent implies otherwise
#1739: FILE: kernel/lockmeter.c:111:
+	do { local_irq_save(flags);
+	     _raw_spin_lock(&lstat_control.directory_lock); } while(0);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:SPACING: space required before the open parenthesis '('
#1740: FILE: kernel/lockmeter.c:112:
+	     _raw_spin_lock(&lstat_control.directory_lock); } while(0);

ERROR:SPACING: space required before the open parenthesis '('
#1749: FILE: kernel/lockmeter.c:121:
+		if(lstat_control.next_free_dir_index < LSTAT_MAX_STAT_INDEX) {

WARNING:TRAILING_SEMICOLON: trailing semicolon indicates no statements, indent implies otherwise
#1760: FILE: kernel/lockmeter.c:132:
+	do { _raw_spin_unlock(&lstat_control.directory_lock);
+	     local_irq_restore(flags);} while(0);

ERROR:SPACING: space required after that ';' (ctx:VxV)
#1761: FILE: kernel/lockmeter.c:133:
+	     local_irq_restore(flags);} while(0);
 	                             ^

ERROR:SPACING: space required before the open parenthesis '('
#1761: FILE: kernel/lockmeter.c:133:
+	     local_irq_restore(flags);} while(0);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1762: FILE: kernel/lockmeter.c:134:
+	return(index);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1766: FILE: kernel/lockmeter.c:138:
+lstat_update (

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1766: FILE: kernel/lockmeter.c:138:
+lstat_update (

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#1776: FILE: kernel/lockmeter.c:148:
+	if (lstat_control.state == LSTAT_OFF) {
+	    return(0);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1776: FILE: kernel/lockmeter.c:148:
+	if (lstat_control.state == LSTAT_OFF) {
+	    return(0);
+	}

WARNING:TABSTOP: Statements should start on a tabstop
#1777: FILE: kernel/lockmeter.c:149:
+	    return(0);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1777: FILE: kernel/lockmeter.c:149:
+	    return(0);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1785: FILE: kernel/lockmeter.c:157:
+	return(index);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1789: FILE: kernel/lockmeter.c:161:
+lstat_update_time (

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1789: FILE: kernel/lockmeter.c:161:
+lstat_update_time (

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1790: FILE: kernel/lockmeter.c:162:
+^Ivoid ^I^I*lock_ptr,$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1800: FILE: kernel/lockmeter.c:172:
+	if (lstat_control.state == LSTAT_OFF) {
+		return(0);
+	}

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1801: FILE: kernel/lockmeter.c:173:
+		return(0);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#1808: FILE: kernel/lockmeter.c:180:
+	if ((*lstat_control.counts[cpu])[index].max_wait_ticks < ticks)
+	    (*lstat_control.counts[cpu])[index].max_wait_ticks = ticks;

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1813: FILE: kernel/lockmeter.c:185:
+	return(index);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#1818: FILE: kernel/lockmeter.c:190:
+	if (lstat_control.state == LSTAT_OFF) {
+	    _raw_spin_lock(lock_ptr);	/* do the real lock */

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1820: FILE: kernel/lockmeter.c:192:
+	    PUT_INDEX(lock_ptr,0);	/* clean index in case lockmetering  */
 	                      ^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#1822: FILE: kernel/lockmeter.c:194:
+	} else {
+	void *this_pc = LSTAT_RA(LSTAT_RA_SPIN);

WARNING:TABSTOP: Statements should start on a tabstop
#1826: FILE: kernel/lockmeter.c:198:
+	    if (_raw_spin_trylock(lock_ptr)) {

WARNING:TABSTOP: Statements should start on a tabstop
#1828: FILE: kernel/lockmeter.c:200:
+	    } else {

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1829: FILE: kernel/lockmeter.c:201:
+		uint32_t start_cycles = get_cycles();

WARNING:LINE_SPACING: Missing a blank line after declarations
#1830: FILE: kernel/lockmeter.c:202:
+		uint32_t start_cycles = get_cycles();
+		_raw_spin_lock(lock_ptr);		/* do the real lock */

WARNING:TABSTOP: Statements should start on a tabstop
#1833: FILE: kernel/lockmeter.c:205:
+	    }

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1835: FILE: kernel/lockmeter.c:207:
+	    PUT_INDEX(lock_ptr,index);
 	                      ^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#1841: FILE: kernel/lockmeter.c:213:
+	if (lstat_control.state == LSTAT_OFF) {
+	    return _raw_spin_trylock(lock_ptr);

WARNING:TABSTOP: Statements should start on a tabstop
#1842: FILE: kernel/lockmeter.c:214:
+	    return _raw_spin_trylock(lock_ptr);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#1843: FILE: kernel/lockmeter.c:215:
+	} else {
+	    int retval;

WARNING:TABSTOP: Statements should start on a tabstop
#1844: FILE: kernel/lockmeter.c:216:
+	    int retval;

WARNING:TABSTOP: Statements should start on a tabstop
#1845: FILE: kernel/lockmeter.c:217:
+	    void *this_pc = LSTAT_RA(LSTAT_RA_SPIN);

WARNING:TABSTOP: Statements should start on a tabstop
#1847: FILE: kernel/lockmeter.c:219:
+	    if ((retval = _raw_spin_trylock(lock_ptr))) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1847: FILE: kernel/lockmeter.c:219:
+	    if ((retval = _raw_spin_trylock(lock_ptr))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1850: FILE: kernel/lockmeter.c:222:
+		PUT_INDEX(lock_ptr,index);
 		                  ^

WARNING:TABSTOP: Statements should start on a tabstop
#1851: FILE: kernel/lockmeter.c:223:
+	    } else {

WARNING:TABSTOP: Statements should start on a tabstop
#1853: FILE: kernel/lockmeter.c:225:
+	    }

WARNING:TABSTOP: Statements should start on a tabstop
#1855: FILE: kernel/lockmeter.c:227:
+	    return retval;

ERROR:SPACING: spaces required around that '=' (ctx:VxO)
#1861: FILE: kernel/lockmeter.c:233:
+	int index=-1;
 	         ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#1861: FILE: kernel/lockmeter.c:233:
+	int index=-1;
 	          ^

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1871: FILE: kernel/lockmeter.c:243:
+			uint32_t hold_time;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1873: FILE: kernel/lockmeter.c:245:
+			int cpu = THIS_CPU_NUMBER;
+			hold_time = get_cycles() - (*lstat_control.counts[cpu])[index].acquire_time;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1881: FILE: kernel/lockmeter.c:253:
+	PUT_INDEX(lock_ptr,0);
 	                  ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1885: FILE: kernel/lockmeter.c:257:
+/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1887: FILE: kernel/lockmeter.c:259:
+ * in the rwlock at "lock_ptr". $

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1893: FILE: kernel/lockmeter.c:265:
+	int cpu=THIS_CPU_NUMBER;
 	       ^

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1898: FILE: kernel/lockmeter.c:270:
+		return(0);

WARNING:TRAILING_SEMICOLON: trailing semicolon indicates no statements, indent implies otherwise
#1901: FILE: kernel/lockmeter.c:273:
+	do { local_irq_save(flags);
+	     _raw_spin_lock(&lstat_control.directory_lock); } while(0);

ERROR:SPACING: space required before the open parenthesis '('
#1902: FILE: kernel/lockmeter.c:274:
+	     _raw_spin_lock(&lstat_control.directory_lock); } while(0);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1906: FILE: kernel/lockmeter.c:278:
+		index=0;
 		     ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1911: FILE: kernel/lockmeter.c:283:
+	if ((index=GET_RWINDEX(rwlock_ptr)) == 0) {
 	          ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1911: FILE: kernel/lockmeter.c:283:
+	if ((index=GET_RWINDEX(rwlock_ptr)) == 0) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1912: FILE: kernel/lockmeter.c:284:
+	if ((index=GET_RWINDEX(rwlock_ptr)) == 0) {
+

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1916: FILE: kernel/lockmeter.c:288:
+			index=0;
 			     ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1922: FILE: kernel/lockmeter.c:294:
+^I^Ifor(index=1;index<lstat_control.next_free_read_lock_index;index++) $

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1922: FILE: kernel/lockmeter.c:294:
+		for(index=1;index<lstat_control.next_free_read_lock_index;index++) 
 		         ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#1922: FILE: kernel/lockmeter.c:294:
+		for(index=1;index<lstat_control.next_free_read_lock_index;index++) 
 		           ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1922: FILE: kernel/lockmeter.c:294:
+		for(index=1;index<lstat_control.next_free_read_lock_index;index++) 
 		                 ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#1922: FILE: kernel/lockmeter.c:294:
+		for(index=1;index<lstat_control.next_free_read_lock_index;index++) 
 		                                                         ^

ERROR:SPACING: space required before the open parenthesis '('
#1922: FILE: kernel/lockmeter.c:294:
+		for(index=1;index<lstat_control.next_free_read_lock_index;index++) 

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 20)
#1927: FILE: kernel/lockmeter.c:299:
+		if (lstat_control.next_free_read_lock_index >= LSTAT_MAX_READ_LOCK_INDEX) {
+		    lstat_control.rwlock_overflow++;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1935: FILE: kernel/lockmeter.c:307:
+		for(cpu=0; cpu < smp_num_cpus; cpu++) {
 		       ^

ERROR:SPACING: space required before the open parenthesis '('
#1935: FILE: kernel/lockmeter.c:307:
+		for(cpu=0; cpu < smp_num_cpus; cpu++) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1935: FILE: kernel/lockmeter.c:307:
+		for(cpu=0; cpu < smp_num_cpus; cpu++) {
+			(*lstat_control.read_lock_counts[cpu])[index].lock_ptr = rwlock_ptr;
+		}

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1940: FILE: kernel/lockmeter.c:312:
+		PUT_RWINDEX(rwlock_ptr,index);
 		                      ^

WARNING:TRAILING_SEMICOLON: trailing semicolon indicates no statements, indent implies otherwise
#1944: FILE: kernel/lockmeter.c:316:
+	do { _raw_spin_unlock(&lstat_control.directory_lock);
+	     local_irq_restore(flags);} while(0);

ERROR:SPACING: space required after that ';' (ctx:VxV)
#1945: FILE: kernel/lockmeter.c:317:
+	     local_irq_restore(flags);} while(0);
 	                             ^

ERROR:SPACING: space required before the open parenthesis '('
#1945: FILE: kernel/lockmeter.c:317:
+	     local_irq_restore(flags);} while(0);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1947: FILE: kernel/lockmeter.c:319:
+	return(index);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1950: FILE: kernel/lockmeter.c:322:
+void $

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1954: FILE: kernel/lockmeter.c:326:
+	uint32_t start_cycles;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1959: FILE: kernel/lockmeter.c:331:
+	uint64_t cycles64;

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#1973: FILE: kernel/lockmeter.c:345:
+	if (index==0) {
 	         ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1973: FILE: kernel/lockmeter.c:345:
+	if (index==0) {
+		index = alloc_rwlock_struct(rwlock_ptr);
+	}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1984: FILE: kernel/lockmeter.c:356:
+^I^Iif (index>0) { $

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#1984: FILE: kernel/lockmeter.c:356:
+		if (index>0) { 
 		         ^

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#1986: FILE: kernel/lockmeter.c:358:
+			_raw_spin_lock((spinlock_t *)&(*lstat_control.read_lock_counts[cpu])[index].entry_lock);

ERROR:SPACING: space required before the open parenthesis '('
#1988: FILE: kernel/lockmeter.c:360:
+			do { local_irq_save(flags); } while(0);

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#1997: FILE: kernel/lockmeter.c:369:
+			if (readers_before==0) {
 			                  ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2001: FILE: kernel/lockmeter.c:373:
+			readers_after=RWLOCK_READERS(rwlock_ptr);
 			             ^

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#2002: FILE: kernel/lockmeter.c:374:
+			if (readers_after > (*lstat_control.read_lock_counts[cpu])[index].max_readers)

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#2003: FILE: kernel/lockmeter.c:375:
+				(*lstat_control.read_lock_counts[cpu])[index].max_readers = readers_after;

WARNING:LONG_LINE: line length of 113 exceeds 100 columns
#2005: FILE: kernel/lockmeter.c:377:
+			_raw_spin_unlock((spinlock_t*)&(*lstat_control.read_lock_counts[cpu])[index].entry_lock);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#2005: FILE: kernel/lockmeter.c:377:
+			_raw_spin_unlock((spinlock_t*)&(*lstat_control.read_lock_counts[cpu])[index].entry_lock);

ERROR:SPACING: space required after that ';' (ctx:VxV)
#2007: FILE: kernel/lockmeter.c:379:
+			do {local_irq_restore(flags);} while(0);
 			                            ^

ERROR:SPACING: space required before the open parenthesis '('
#2007: FILE: kernel/lockmeter.c:379:
+			do {local_irq_restore(flags);} while(0);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2011: FILE: kernel/lockmeter.c:383:
+^I    return;^I$

WARNING:TABSTOP: Statements should start on a tabstop
#2011: FILE: kernel/lockmeter.c:383:
+	    return;	

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#2024: FILE: kernel/lockmeter.c:396:
+	if (index>0) {
 	         ^

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#2026: FILE: kernel/lockmeter.c:398:
+		_raw_spin_lock((spinlock_t *)&(*lstat_control.read_lock_counts[cpu])[index].entry_lock);

ERROR:SPACING: space required before the open parenthesis '('
#2028: FILE: kernel/lockmeter.c:400:
+		do { local_irq_save(flags); } while(0);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2034: FILE: kernel/lockmeter.c:406:
+^I^Iif (readers_before==0) { $

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#2034: FILE: kernel/lockmeter.c:406:
+		if (readers_before==0) { 
 		                  ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2038: FILE: kernel/lockmeter.c:410:
+		readers_after=RWLOCK_READERS(rwlock_ptr);
 		             ^

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#2043: FILE: kernel/lockmeter.c:415:
+		_raw_spin_unlock((spinlock_t *)&(*lstat_control.read_lock_counts[cpu])[index].entry_lock);

ERROR:SPACING: space required after that ';' (ctx:VxV)
#2045: FILE: kernel/lockmeter.c:417:
+		do {local_irq_restore(flags);} while(0);
 		                            ^

ERROR:SPACING: space required before the open parenthesis '('
#2045: FILE: kernel/lockmeter.c:417:
+		do {local_irq_restore(flags);} while(0);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2050: FILE: kernel/lockmeter.c:422:
+void _metered_read_unlock(rwlock_t *rwlock_ptr) $

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#2055: FILE: kernel/lockmeter.c:427:
+	uint64_t busy_length;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#2056: FILE: kernel/lockmeter.c:428:
+	uint64_t cycles64;

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#2066: FILE: kernel/lockmeter.c:438:
+	if (index>0) {
 	         ^

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#2068: FILE: kernel/lockmeter.c:440:
+		_raw_spin_lock((spinlock_t *)&(*lstat_control.read_lock_counts[cpu])[index].entry_lock);

ERROR:SPACING: space required before the open parenthesis '('
#2071: FILE: kernel/lockmeter.c:443:
+		do { local_irq_save(flags); } while(0);

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#2081: FILE: kernel/lockmeter.c:453:
+			uint64_t last_start_busy = (*lstat_control.read_lock_counts[cpu1])[index].start_busy;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#2081: FILE: kernel/lockmeter.c:453:
+			uint64_t last_start_busy = (*lstat_control.read_lock_counts[cpu1])[index].start_busy;

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#2085: FILE: kernel/lockmeter.c:457:
+				(*lstat_control.read_lock_counts[cpu])[index].busy_ticks += busy_length;

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#2086: FILE: kernel/lockmeter.c:458:
+				if (busy_length > (*lstat_control.read_lock_counts[cpu])[index].max_busy)

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#2087: FILE: kernel/lockmeter.c:459:
+					(*lstat_control.read_lock_counts[cpu])[index].max_busy = busy_length;

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#2091: FILE: kernel/lockmeter.c:463:
+		_raw_spin_unlock((spinlock_t *)&(*lstat_control.read_lock_counts[cpu])[index].entry_lock);

ERROR:SPACING: space required after that ';' (ctx:VxV)
#2093: FILE: kernel/lockmeter.c:465:
+		do {local_irq_restore(flags);} while(0);
 		                            ^

ERROR:SPACING: space required before the open parenthesis '('
#2093: FILE: kernel/lockmeter.c:465:
+		do {local_irq_restore(flags);} while(0);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2103: FILE: kernel/lockmeter.c:475:
+	uint32_t start_cycles;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2105: FILE: kernel/lockmeter.c:477:
+	uint32_t spin_ticks = 0;    /* in anticipation of a potential wait */

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2123: FILE: kernel/lockmeter.c:495:
+	if (index == 0) {
+		index = alloc_rwlock_struct(rwlock_ptr);
+	} 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2125: FILE: kernel/lockmeter.c:497:
+^I} $

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#2127: FILE: kernel/lockmeter.c:499:
+	if (_raw_write_trylock(rwlock_ptr)) {
[...]
+	    write_index = lstat_update((void *)rwlock_ptr, this_pc, LSTAT_ACT_NO_WAIT);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2131: FILE: kernel/lockmeter.c:503:
+^I^Iif (index > 0) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2147: FILE: kernel/lockmeter.c:519:
+^Iif (index > 0)  $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2152: FILE: kernel/lockmeter.c:524:
+				write_index = lstat_update_time((void *)rwlock_ptr, this_pc,
+						  LSTAT_ACT_SPIN, spin_ticks);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2156: FILE: kernel/lockmeter.c:528:
+				write_index = lstat_update_time((void *)rwlock_ptr, this_pc,
+						  LSTAT_ACT_WW_SPIN, spin_ticks);

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#2157: FILE: kernel/lockmeter.c:529:
+				(*lstat_control.counts[cpu])[write_index].cum_wait_ww_ticks += spin_ticks;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2158: FILE: kernel/lockmeter.c:530:
+^I^I^I^Iif (spin_ticks > $

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#2159: FILE: kernel/lockmeter.c:531:
+					(*lstat_control.counts[cpu])[write_index].max_wait_ww_ticks) {

WARNING:LONG_LINE: line length of 113 exceeds 100 columns
#2160: FILE: kernel/lockmeter.c:532:
+					(*lstat_control.counts[cpu])[write_index].max_wait_ww_ticks = spin_ticks;

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#2168: FILE: kernel/lockmeter.c:540:
+
+}

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2176: FILE: kernel/lockmeter.c:548:
+	uint32_t hold_time;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2187: FILE: kernel/lockmeter.c:559:
+^Iif (index>0) { $

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#2187: FILE: kernel/lockmeter.c:559:
+	if (index>0) { 
 	         ^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#2203: FILE: kernel/lockmeter.c:575:
+	if ((retval = _raw_write_trylock(rwlock_ptr))) {
+	    lstat_update(rwlock_ptr, this_pc, LSTAT_ACT_NO_WAIT);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2203: FILE: kernel/lockmeter.c:575:
+	if ((retval = _raw_write_trylock(rwlock_ptr))) {

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#2203: FILE: kernel/lockmeter.c:575:
+	if ((retval = _raw_write_trylock(rwlock_ptr))) {
[...]
+	} else {
[...]

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#2205: FILE: kernel/lockmeter.c:577:
+	} else {
+	    lstat_update(rwlock_ptr, this_pc, LSTAT_ACT_REJECT);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2225: FILE: kernel/lockmeter.c:597:
+		BUG();

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2229: FILE: kernel/lockmeter.c:601:
+	for (cpu=0; cpu<NR_CPUS; cpu++) {
 	        ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#2229: FILE: kernel/lockmeter.c:601:
+	for (cpu=0; cpu<NR_CPUS; cpu++) {
 	               ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#2229: FILE: kernel/lockmeter.c:601:
+	for (cpu=0; cpu<NR_CPUS; cpu++) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2238: FILE: kernel/lockmeter.c:610:
+	int cpu,flags;
 	       ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2256: FILE: kernel/lockmeter.c:628:
+		bzero(lstat_control.hashtab, LSTAT_HASH_TABLE_SIZE*sizeof(short));
 		                                                  ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2257: FILE: kernel/lockmeter.c:629:
+		bzero(lstat_control.dir, LSTAT_MAX_STAT_INDEX*sizeof(lstat_directory_entry_t));
 		                                             ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#2259: FILE: kernel/lockmeter.c:631:
+		for (cpu = 0; cpu<smp_num_cpus; cpu++) {
 		                 ^

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#2261: FILE: kernel/lockmeter.c:633:
+			bzero(lstat_control.read_lock_counts[cpu], sizeof(lstat_read_lock_cpu_counts_t));

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#2283: FILE: kernel/lockmeter.c:655:
+	if (lstat_control.hashtab) {
+		kfree(lstat_control.hashtab);

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#2292: FILE: kernel/lockmeter.c:664:
+	for (cpu = 0; cpu<NR_CPUS; cpu++) {
 	                 ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#2292: FILE: kernel/lockmeter.c:664:
+	for (cpu = 0; cpu<NR_CPUS; cpu++) {

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#2298: FILE: kernel/lockmeter.c:670:
+		if (lstat_control.read_lock_counts[cpu]) {
+			kfree(lstat_control.read_lock_counts[cpu]);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2319: FILE: kernel/lockmeter.c:691:
+    $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2319: FILE: kernel/lockmeter.c:691:
+    $

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#2338: FILE: kernel/lockmeter.c:710:
+	req.next_free_read_lock_index= lstat_control.next_free_read_lock_index;
 	                             ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#2343: FILE: kernel/lockmeter.c:715:
+		if (req.intervals==0) {
 		                 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#2346: FILE: kernel/lockmeter.c:718:
+			req.enabled_cycles64= 0;
 			                    ^

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#2354: FILE: kernel/lockmeter.c:726:
+			return actual_ret_bcount;
+		} else {

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2366: FILE: kernel/lockmeter.c:738:
+		req.enabled_cycles64     = req.ending_cycles64-req.started_cycles64
 		                                              ^

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#2367: FILE: kernel/lockmeter.c:739:
+									+ lstat_control.enabled_cycles64;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#2371: FILE: kernel/lockmeter.c:743:
+	if ((actual_ret_bcount + next_ret_bcount) > max_len)
+	    return actual_ret_bcount;

WARNING:TABSTOP: Statements should start on a tabstop
#2372: FILE: kernel/lockmeter.c:744:
+	    return actual_ret_bcount;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#2377: FILE: kernel/lockmeter.c:749:
+	if (!lstat_control.counts[0])	/* not initialized? */
+	    return actual_ret_bcount;

WARNING:TABSTOP: Statements should start on a tabstop
#2378: FILE: kernel/lockmeter.c:750:
+	    return actual_ret_bcount;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#2381: FILE: kernel/lockmeter.c:753:
+	for (cpu = 0; cpu < smp_num_cpus; cpu++) {
+	    if ((actual_ret_bcount + next_ret_bcount) > max_len)

WARNING:TABSTOP: Statements should start on a tabstop
#2382: FILE: kernel/lockmeter.c:754:
+	    if ((actual_ret_bcount + next_ret_bcount) > max_len)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#2390: FILE: kernel/lockmeter.c:762:
+	if (  ((actual_ret_bcount + next_ret_bcount) > max_len)
[...]
+	    return actual_ret_bcount;	/* leave early */

ERROR:SPACING: space prohibited after that open parenthesis '('
#2390: FILE: kernel/lockmeter.c:762:
+	if (  ((actual_ret_bcount + next_ret_bcount) > max_len)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2391: FILE: kernel/lockmeter.c:763:
+	if (  ((actual_ret_bcount + next_ret_bcount) > max_len)
+	   || !lstat_control.dir )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2391: FILE: kernel/lockmeter.c:763:
+	   || !lstat_control.dir )

WARNING:TABSTOP: Statements should start on a tabstop
#2392: FILE: kernel/lockmeter.c:764:
+	    return actual_ret_bcount;	/* leave early */

WARNING:TYPO_SPELLING: 'intializes' may be misspelled - perhaps 'initializes'?
#2414: FILE: kernel/lockmeter.c:786:
+ *  LSTAT_ON: 1st call: allocates storage, intializes and turns on measurement
                                            ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#2442: FILE: kernel/lockmeter.c:814:
+	if (len <= 0)
+	    return -EINVAL;

WARNING:TABSTOP: Statements should start on a tabstop
#2443: FILE: kernel/lockmeter.c:815:
+	    return -EINVAL;

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#2449: FILE: kernel/lockmeter.c:821:
+	switch (put_char) {
+

WARNING:TABSTOP: Statements should start on a tabstop
#2451: FILE: kernel/lockmeter.c:823:
+	    if (lstat_control.state != LSTAT_OFF) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (12, 24)
#2451: FILE: kernel/lockmeter.c:823:
+	    if (lstat_control.state != LSTAT_OFF) {
[...]
+			do { local_irq_save(flags); } while(0);

WARNING:TYPO_SPELLING: 'inconsisent' may be misspelled - perhaps 'inconsistent'?
#2453: FILE: kernel/lockmeter.c:825:
+			 * To avoid seeing read lock hold times in an inconsisent state,
 			                                              ^^^^^^^^^^^

ERROR:SPACING: space required before the open parenthesis '('
#2456: FILE: kernel/lockmeter.c:828:
+			do { local_irq_save(flags); } while(0);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2466: FILE: kernel/lockmeter.c:838:
+			for(i=1;i<read_lock_blocks;i++) {
 			     ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#2466: FILE: kernel/lockmeter.c:838:
+			for(i=1;i<read_lock_blocks;i++) {
 			       ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#2466: FILE: kernel/lockmeter.c:838:
+			for(i=1;i<read_lock_blocks;i++) {
 			         ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#2466: FILE: kernel/lockmeter.c:838:
+			for(i=1;i<read_lock_blocks;i++) {
 			                          ^

ERROR:SPACING: space required before the open parenthesis '('
#2466: FILE: kernel/lockmeter.c:838:
+			for(i=1;i<read_lock_blocks;i++) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2478: FILE: kernel/lockmeter.c:850:
+						PUT_RWINDEX(lock_ptr,0);
 						                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2484: FILE: kernel/lockmeter.c:856:
+					PUT_RWINDEX(lock_ptr,0);
 					                    ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2486: FILE: kernel/lockmeter.c:858:
+^I^I^I^I} $

WARNING:TABSTOP: Statements should start on a tabstop
#2491: FILE: kernel/lockmeter.c:863:
+		    do {local_irq_restore(flags);} while(0);

ERROR:SPACING: space required after that ';' (ctx:VxV)
#2491: FILE: kernel/lockmeter.c:863:
+		    do {local_irq_restore(flags);} while(0);
 		                                ^

ERROR:SPACING: space required before the open parenthesis '('
#2491: FILE: kernel/lockmeter.c:863:
+		    do {local_irq_restore(flags);} while(0);

WARNING:TABSTOP: Statements should start on a tabstop
#2500: FILE: kernel/lockmeter.c:872:
+	    } else {

WARNING:TABSTOP: Statements should start on a tabstop
#2502: FILE: kernel/lockmeter.c:874:
+	    }

WARNING:TABSTOP: Statements should start on a tabstop
#2503: FILE: kernel/lockmeter.c:875:
+	    break;

WARNING:TABSTOP: Statements should start on a tabstop
#2506: FILE: kernel/lockmeter.c:878:
+	    if (lstat_control.state == LSTAT_OFF) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2508: FILE: kernel/lockmeter.c:880:
+		printk("put_lockmeter_info(cpu=%d): LSTAT_ON\n",THIS_CPU_NUMBER);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2508: FILE: kernel/lockmeter.c:880:
+		printk("put_lockmeter_info(cpu=%d): LSTAT_ON\n",THIS_CPU_NUMBER);
 		                                               ^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'put_lockmeter_info', this function's name, in a string
#2508: FILE: kernel/lockmeter.c:880:
+		printk("put_lockmeter_info(cpu=%d): LSTAT_ON\n",THIS_CPU_NUMBER);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2517: FILE: kernel/lockmeter.c:889:
+		printk(" dirsize:%d",dirsize);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2517: FILE: kernel/lockmeter.c:889:
+		printk(" dirsize:%d",dirsize);
 		                    ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2518: FILE: kernel/lockmeter.c:890:
+		printk(" hashsize:%d", hashsize);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2519: FILE: kernel/lockmeter.c:891:
+		printk(" countsize:%d", countsize);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2520: FILE: kernel/lockmeter.c:892:
+		printk(" read_lock_countsize:%d\n", read_lock_countsize);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#2526: FILE: kernel/lockmeter.c:898:
+		uint64_t cycles64;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2537: FILE: kernel/lockmeter.c:909:
+		printk("lockmeter: cycleFrequency:%d cycles:%d cycles64:%d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2538: FILE: kernel/lockmeter.c:910:
+		printk("lockmeter: cycleFrequency:%d cycles:%d cycles64:%d\n",
+			CPU_CYCLE_FREQUENCY, cycles, cycles64);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 20)
#2543: FILE: kernel/lockmeter.c:915:
+		if (!lstat_control.hashtab) {
[...]
+		    spin_lock_init(&lstat_control.directory_lock);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#2544: FILE: kernel/lockmeter.c:916:
+		if (!lstat_control.hashtab) {
+

WARNING:TABSTOP: Statements should start on a tabstop
#2550: FILE: kernel/lockmeter.c:922:
+		    if (!lstat_control.hashtab) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2553: FILE: kernel/lockmeter.c:925:
+			printk("!!error kmalloc of hashtab\n");

WARNING:TABSTOP: Statements should start on a tabstop
#2555: FILE: kernel/lockmeter.c:927:
+		    }

WARNING:TABSTOP: Statements should start on a tabstop
#2557: FILE: kernel/lockmeter.c:929:
+		    if (!lstat_control.dir) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2560: FILE: kernel/lockmeter.c:932:
+			printk("!!error kmalloc of dir\n");

WARNING:TABSTOP: Statements should start on a tabstop
#2562: FILE: kernel/lockmeter.c:934:
+		    }

WARNING:TABSTOP: Statements should start on a tabstop
#2564: FILE: kernel/lockmeter.c:936:
+		    for (cpu = 0; cpu<smp_num_cpus; cpu++) {

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#2564: FILE: kernel/lockmeter.c:936:
+		    for (cpu = 0; cpu<smp_num_cpus; cpu++) {
 		                     ^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 28)
#2566: FILE: kernel/lockmeter.c:938:
+			if (!lstat_control.counts[cpu]) {
+			    error = -ENOSPC;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2569: FILE: kernel/lockmeter.c:941:
+			    printk("!!error vmalloc of counts[%d]\n",cpu);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2569: FILE: kernel/lockmeter.c:941:
+			    printk("!!error vmalloc of counts[%d]\n",cpu);
 			                                            ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2572: FILE: kernel/lockmeter.c:944:
+^I^I^Ilstat_control.read_lock_counts[cpu] = $

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#2573: FILE: kernel/lockmeter.c:945:
+				(lstat_read_lock_cpu_counts_t *) kmalloc(read_lock_countsize, GFP_KERNEL);

CHECK:SPACING: No space is necessary after a cast
#2573: FILE: kernel/lockmeter.c:945:
+				(lstat_read_lock_cpu_counts_t *) kmalloc(read_lock_countsize, GFP_KERNEL);

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#2573: FILE: kernel/lockmeter.c:945:
+				(lstat_read_lock_cpu_counts_t *) kmalloc(read_lock_countsize, GFP_KERNEL);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 28)
#2574: FILE: kernel/lockmeter.c:946:
+			if (!lstat_control.read_lock_counts[cpu]) {
+			    error = -ENOSPC;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2577: FILE: kernel/lockmeter.c:949:
+			    printk("!!error kmalloc of read_lock_counts[%d]\n",cpu);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2577: FILE: kernel/lockmeter.c:949:
+			    printk("!!error kmalloc of read_lock_counts[%d]\n",cpu);
 			                                                      ^

WARNING:TABSTOP: Statements should start on a tabstop
#2580: FILE: kernel/lockmeter.c:952:
+		    }

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 20)
#2583: FILE: kernel/lockmeter.c:955:
+		if (error) {
[...]
+		    release_control_space();

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#2587: FILE: kernel/lockmeter.c:959:
+		} else {
+

WARNING:TABSTOP: Statements should start on a tabstop
#2604: FILE: kernel/lockmeter.c:976:
+	    } else {

WARNING:TABSTOP: Statements should start on a tabstop
#2606: FILE: kernel/lockmeter.c:978:
+	    }

WARNING:TABSTOP: Statements should start on a tabstop
#2607: FILE: kernel/lockmeter.c:979:
+	    break;

CHECK:BRACES: braces {} should be used on all arms of this statement
#2610: FILE: kernel/lockmeter.c:982:
+		if (lstat_control.state == LSTAT_OFF) {
[...]
+		else
[...]

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#2615: FILE: kernel/lockmeter.c:987:
+		}
+		else

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#2620: FILE: kernel/lockmeter.c:992:
+		if (lstat_control.state == LSTAT_OFF) {
[...]
+		else
[...]

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#2625: FILE: kernel/lockmeter.c:997:
+		}
+		else

ERROR:SPACING: space prohibited after that open parenthesis '('
#2634: FILE: kernel/lockmeter.c:1006:
+	return ( (error) ? error : len );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2634: FILE: kernel/lockmeter.c:1006:
+	return ( (error) ? error : len );

ERROR:FUNCTION_WITHOUT_ARGS: Bad function definition - void lockmeter_init() should probably be void lockmeter_init(void)
#2640: FILE: kernel/lockmeter.c:1012:
+void lockmeter_init() {

Function declarations without arguments like::

  int foo()

should be::

  int foo(void)

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#2640: FILE: kernel/lockmeter.c:1012:
+void lockmeter_init() {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required after that ',' (ctx:VxO)
#2643: FILE: kernel/lockmeter.c:1015:
+	printf("lstat_control is at %x size=%d\n",&lstat_control,sizeof(lstat_control));
 	                                         ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#2643: FILE: kernel/lockmeter.c:1015:
+	printf("lstat_control is at %x size=%d\n",&lstat_control,sizeof(lstat_control));
 	                                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2643: FILE: kernel/lockmeter.c:1015:
+	printf("lstat_control is at %x size=%d\n",&lstat_control,sizeof(lstat_control));
 	                                                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2644: FILE: kernel/lockmeter.c:1016:
+	printf("sizeof(spinlock_t)=%d\n",sizeof(spinlock_t));
 	                                ^

CHECK:SPACING: No space is necessary after a cast
#2656: FILE: kernel/lockmeter.c:1028:
+	lstat_control.hashtab = (ushort *) malloc(hashsize);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2659: FILE: kernel/lockmeter.c:1031:
+		printf("malloc failure for at line %d in lockmeter.c\n",__LINE__);
 		                                                       ^

CHECK:SPACING: No space is necessary after a cast
#2663: FILE: kernel/lockmeter.c:1035:
+	lstat_control.dir = (lstat_directory_entry_t *) malloc(dirsize);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2666: FILE: kernel/lockmeter.c:1038:
+		printf("malloc failure for at line %d in lockmeter.c\n",cpu,__LINE__);
 		                                                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2666: FILE: kernel/lockmeter.c:1038:
+		printf("malloc failure for at line %d in lockmeter.c\n",cpu,__LINE__);
 		                                                           ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#2670: FILE: kernel/lockmeter.c:1042:
+	for (cpu = 0; cpu<smp_num_cpus; cpu++) {
 	                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2671: FILE: kernel/lockmeter.c:1043:
+		int j,k;
 		     ^

CHECK:SPACING: No space is necessary after a cast
#2672: FILE: kernel/lockmeter.c:1044:
+		j = (int) (lstat_control.counts[cpu] = (lstat_cpu_counts_t *) malloc(countsize));

WARNING:LINE_SPACING: Missing a blank line after declarations
#2672: FILE: kernel/lockmeter.c:1044:
+		int j,k;
+		j = (int) (lstat_control.counts[cpu] = (lstat_cpu_counts_t *) malloc(countsize));

WARNING:LONG_LINE: line length of 127 exceeds 100 columns
#2673: FILE: kernel/lockmeter.c:1045:
+		k = (int) (lstat_control.read_lock_counts[cpu] = (lstat_read_lock_cpu_counts_t *) malloc(read_lock_countsize));

CHECK:SPACING: No space is necessary after a cast
#2673: FILE: kernel/lockmeter.c:1045:
+		k = (int) (lstat_control.read_lock_counts[cpu] = (lstat_read_lock_cpu_counts_t *) malloc(read_lock_countsize));

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2674: FILE: kernel/lockmeter.c:1046:
+		if( j*k == 0) {
 		     ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#2674: FILE: kernel/lockmeter.c:1046:
+		if( j*k == 0) {

ERROR:SPACING: space required before the open parenthesis '('
#2674: FILE: kernel/lockmeter.c:1046:
+		if( j*k == 0) {

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#2675: FILE: kernel/lockmeter.c:1047:
+			printf("malloc failure for cpu=%d at line %d in lockmeter.c\n",cpu,__LINE__);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2675: FILE: kernel/lockmeter.c:1047:
+			printf("malloc failure for cpu=%d at line %d in lockmeter.c\n",cpu,__LINE__);
 			                                                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2675: FILE: kernel/lockmeter.c:1047:
+			printf("malloc failure for cpu=%d at line %d in lockmeter.c\n",cpu,__LINE__);
 			                                                                  ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#2683: FILE: kernel/lockmeter.c:1055:
+	for (cpu = 0; cpu<smp_num_cpus; cpu++) {
 	                 ^

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#2688: FILE: kernel/lockmeter.c:1060:
+
+}

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2690: FILE: kernel/lockmeter.c:1062:
+asm(

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2703: FILE: kernel/lockmeter.c:1075:
+
+

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000387104.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 306 errors, 278 warnings, 129 checks, 2568 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000387104.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
