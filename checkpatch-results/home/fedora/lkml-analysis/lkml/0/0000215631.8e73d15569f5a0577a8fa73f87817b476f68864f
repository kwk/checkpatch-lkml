ERROR:BAD_SIGN_OFF: Unrecognized email address: 'Karim Yaghmour (karim@opersys.com)'
#30: 
Signed-off-by: Karim Yaghmour (karim@opersys.com)

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#37: FILE: fs/relayfs/relay_locking.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#84: FILE: fs/relayfs/relay_locking.c:48:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#86: FILE: fs/relayfs/relay_locking.c:50:
+	if((write_buf(rchan) + rchan->buf_size >= chan_buf_end) || resetting)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#106: FILE: fs/relayfs/relay_locking.c:70:
+	if (resetting) {
[...]
+	} else if (!rchan->half_switch)
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#116: FILE: fs/relayfs/relay_locking.c:80:
+^I$

WARNING:LONG_LINE: line length of 148 exceeds 100 columns
#118: FILE: fs/relayfs/relay_locking.c:82:
+		bytes_written = rchan->callbacks->buffer_start(rchan->id, cur_write_pos(rchan), rchan->buf_id, cur_time, cur_tsc, using_tsc(rchan));

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#166: FILE: fs/relayfs/relay_locking.c:130:
+		bytes_written = rchan->callbacks->buffer_start(

ERROR:TRAILING_WHITESPACE: trailing whitespace
#243: FILE: fs/relayfs/relay_locking.c:207:
+^I$

WARNING:LINE_SPACING: Missing a blank line after declarations
#259: FILE: fs/relayfs/relay_locking.c:223:
+			u32 cur_bufno = cur_idx / rchan->buf_size;
+			from = rchan->buf + cur_bufno * rchan->buf_size;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNNECESSARY_INT: Prefer 'unsigned long' over 'unsigned long int' as the int is unnecessary
#274: FILE: fs/relayfs/relay_locking.c:238:
+	unsigned long int flags;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#337: FILE: fs/relayfs/relay_locking.c:301:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#353: FILE: fs/relayfs/relay_locking.c:317:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#355: FILE: fs/relayfs/relay_locking.c:319:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#357: FILE: fs/relayfs/relay_locking.c:321:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#362: FILE: fs/relayfs/relay_locking.h:1:
+#ifndef _RELAY_LOCKING_H

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#399: FILE: fs/relayfs/relay_lockless.c:1:
+/*

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#420: FILE: fs/relayfs/relay_lockless.c:22:
+compare_and_store_volatile(volatile u32 *ptr,

WARNING:TYPO_SPELLING: 'substract' may be misspelled - perhaps 'subtract'?
#461: FILE: fs/relayfs/relay_lockless.c:63:
+ *	atomic_sub_volatile - atomically substract val from the value at ptr.
   	                                 ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#491: FILE: fs/relayfs/relay_lockless.c:93:
+^I$

WARNING:LINE_SPACING: Missing a blank line after declarations
#501: FILE: fs/relayfs/relay_lockless.c:103:
+		u32 mask = offset_mask(rchan);
+		if (bulk_delivery(rchan)) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#523: FILE: fs/relayfs/relay_lockless.c:125:
+
+

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#543: FILE: fs/relayfs/relay_lockless.c:145:
+	char* cur_write_pos;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#544: FILE: fs/relayfs/relay_lockless.c:146:
+	char* write_buf_end;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#547: FILE: fs/relayfs/relay_lockless.c:149:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#555: FILE: fs/relayfs/relay_lockless.c:157:
+^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#556: FILE: fs/relayfs/relay_lockless.c:158:
+        bufno = RELAY_BUFNO_GET(end_idx, offset_bits(rchan));$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#556: FILE: fs/relayfs/relay_lockless.c:158:
+        bufno = RELAY_BUFNO_GET(end_idx, offset_bits(rchan));$

ERROR:CODE_INDENT: code indent should use tabs where possible
#557: FILE: fs/relayfs/relay_lockless.c:159:
+        atomic_add_volatile(&fill_count(rchan, bufno), size_lost);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#557: FILE: fs/relayfs/relay_lockless.c:159:
+        atomic_add_volatile(&fill_count(rchan, bufno), size_lost);$

CHECK:BRACES: braces {} should be used on all arms of this statement
#558: FILE: fs/relayfs/relay_lockless.c:160:
+	if (resetting) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#564: FILE: fs/relayfs/relay_lockless.c:166:
+	} else

WARNING:UNNECESSARY_INT: Prefer 'unsigned long' over 'unsigned long int' as the int is unnecessary
#577: FILE: fs/relayfs/relay_lockless.c:179:
+	unsigned long int flags;

WARNING:UNNECESSARY_INT: Prefer 'unsigned long' over 'unsigned long int' as the int is unnecessary
#619: FILE: fs/relayfs/relay_lockless.c:221:
+	unsigned long int flags;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#626: FILE: fs/relayfs/relay_lockless.c:228:
+^I$

WARNING:LONG_LINE: line length of 128 exceeds 100 columns
#644: FILE: fs/relayfs/relay_lockless.c:246:
+		idx(rchan) = RELAY_BUF_OFFSET_CLEAR((old_idx & idx_mask), offset_mask(rchan)) + RELAY_BUF_SIZE(offset_bits) - 1;

WARNING:UNNECESSARY_INT: Prefer 'unsigned long' over 'unsigned long int' as the int is unnecessary
#676: FILE: fs/relayfs/relay_lockless.c:278:
+	unsigned long int flags;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#682: FILE: fs/relayfs/relay_lockless.c:284:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#707: FILE: fs/relayfs/relay_lockless.c:309:
+^I$

WARNING:UNNECESSARY_INT: Prefer 'unsigned long' over 'unsigned long int' as the int is unnecessary
#742: FILE: fs/relayfs/relay_lockless.c:344:
+	unsigned long int flags;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#762: FILE: fs/relayfs/relay_lockless.c:364:
+		rchan->initialized = initializing = 1;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'offset < slot_len'
#773: FILE: fs/relayfs/relay_lockless.c:375:
+		if ((offset < slot_len) && (offset > 0)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'offset > 0'
#773: FILE: fs/relayfs/relay_lockless.c:375:
+		if ((offset < slot_len) && (offset > 0)) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#773: FILE: fs/relayfs/relay_lockless.c:375:
+		if ((offset < slot_len) && (offset > 0)) {
[...]
+		} else if (offset < slot_len) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#781: FILE: fs/relayfs/relay_lockless.c:383:
+		} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#872: FILE: fs/relayfs/relay_lockless.c:474:
+lockless_get_offset(struct rchan *rchan,
+			u32 *max_offset)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#888: FILE: fs/relayfs/relay_lockless.c:490:
+^I$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#890: FILE: fs/relayfs/relay_lockless.c:492:
+	/* Start first buffer at 0 - (end_reserve + 1) so that it
+	   gets initialized via buffer_start callback as well. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#890: FILE: fs/relayfs/relay_lockless.c:492:
+	   gets initialized via buffer_start callback as well. */

CHECK:BRACES: braces {} should be used on all arms of this statement
#920: FILE: fs/relayfs/relay_lockless.c:522:
+	if (compare_and_store_volatile(&idx(rchan), old_idx, 0)) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#924: FILE: fs/relayfs/relay_lockless.c:526:
+	} else

CHECK:LINE_SPACING: Please don't use multiple blank lines
#928: FILE: fs/relayfs/relay_lockless.c:530:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#930: FILE: fs/relayfs/relay_lockless.c:532:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#932: FILE: fs/relayfs/relay_lockless.c:534:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#934: FILE: fs/relayfs/relay_lockless.c:536:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#936: FILE: fs/relayfs/relay_lockless.c:538:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#938: FILE: fs/relayfs/relay_lockless.c:540:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#943: FILE: fs/relayfs/relay_lockless.h:1:
+#ifndef _RELAY_LOCKLESS_H

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#951: FILE: fs/relayfs/relay_lockless.h:9:
+		 int * interrupting,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#952: FILE: fs/relayfs/relay_lockless.h:10:
+		 int * errcode);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#956: FILE: fs/relayfs/relay_lockless.h:14:
+		char * from,

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#980: FILE: fs/relayfs/resize.c:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1011: FILE: fs/relayfs/resize.c:32:
+^I$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!page_array"
#1016: FILE: fs/relayfs/resize.c:37:
+	if (page_array == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1045: FILE: fs/relayfs/resize.c:66:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1063: FILE: fs/relayfs/resize.c:84:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1137: FILE: fs/relayfs/resize.c:158:
+^I$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1140: FILE: fs/relayfs/resize.c:161:
+	if (rchan->resize_max && active_bufs == threshold) {
+		new_n_bufs = rchan->n_bufs * 2;
+	}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1169: FILE: fs/relayfs/resize.c:190:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1175: FILE: fs/relayfs/resize.c:196:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1196: FILE: fs/relayfs/resize.c:217:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1238: FILE: fs/relayfs/resize.c:259:
+
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1250: FILE: fs/relayfs/resize.c:271:
+	if (unlikely(rchan->expand_page_array))	BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1250: FILE: fs/relayfs/resize.c:271:
+	if (unlikely(rchan->expand_page_array))	BUG();

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1254: FILE: fs/relayfs/resize.c:275:
+	rchan->expand_page_array = alloc_page_array(new_pages_size,
+					    &rchan->expand_page_count, &err);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rchan->expand_page_array"
#1255: FILE: fs/relayfs/resize.c:276:
+	if (rchan->expand_page_array == NULL) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1259: FILE: fs/relayfs/resize.c:280:
+^I$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'f_pos <= rchan->resize_offset.le'
#1328: FILE: fs/relayfs/resize.c:349:
+	if ((f_pos >= rchan->resize_offset.ge - 1) &&
+	    (f_pos <= rchan->resize_offset.le)) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#1330: FILE: fs/relayfs/resize.c:351:
+		if (reader->vfs_reader) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1335: FILE: fs/relayfs/resize.c:356:
+		} else

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1354: FILE: fs/relayfs/resize.c:375:
+^I$

CHECK:BRACES: braces {} should be used on all arms of this statement
#1394: FILE: fs/relayfs/resize.c:415:
+	if (bufs_ready >= rchan->n_bufs) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1397: FILE: fs/relayfs/resize.c:418:
+	} else

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1411: FILE: fs/relayfs/resize.c:432:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1443: FILE: fs/relayfs/resize.c:464:
+^I$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1494: FILE: fs/relayfs/resize.c:515:
+		if (err) goto cleanup;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1497: FILE: fs/relayfs/resize.c:518:
+		BUG_ON(free_size <= 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1499: FILE: fs/relayfs/resize.c:520:
+		rchan->shrink_page_array = alloc_page_array(free_size,
+					    &rchan->shrink_page_count, &err);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rchan->shrink_page_array"
#1500: FILE: fs/relayfs/resize.c:521:
+		if (rchan->shrink_page_array == NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1509: FILE: fs/relayfs/resize.c:530:
+	rchan->resize_page_array = alloc_page_array(rchan->resize_alloc_size,
+					    &rchan->resize_page_count, &err);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rchan->resize_page_array"
#1510: FILE: fs/relayfs/resize.c:531:
+	if (rchan->resize_page_array == NULL)

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#1522: FILE: fs/relayfs/resize.c:543:
+	rchan->resize_buf = vmap(rchan->resize_page_array, rchan->resize_page_count, GFP_KERNEL, PAGE_KERNEL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rchan->resize_buf"
#1524: FILE: fs/relayfs/resize.c:545:
+	if (rchan->resize_buf == NULL)

WARNING:RETURN_VOID: void function return statements are not generally useful
#1537: FILE: fs/relayfs/resize.c:558:
+	return;
+}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1578: FILE: fs/relayfs/resize.c:599:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1581: FILE: fs/relayfs/resize.c:602:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1586: FILE: fs/relayfs/resize.c:607:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1605: FILE: fs/relayfs/resize.c:626:
+^I$

CHECK:BRACES: braces {} should be used on all arms of this statement
#1606: FILE: fs/relayfs/resize.c:627:
+	if (nbufs > rchan->n_bufs) {
[...]
+	} else if (nbufs < rchan->n_bufs) {
[...]
+	} else
[...]

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1628: FILE: fs/relayfs/resize.c:649:
+^I^I$

CHECK:BRACES: Unbalanced braces around else statement
#1634: FILE: fs/relayfs/resize.c:655:
+	} else

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1653: FILE: fs/relayfs/resize.c:674:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1656: FILE: fs/relayfs/resize.c:677:
+^I^I$

CHECK:BRACES: braces {} should be used on all arms of this statement
#1670: FILE: fs/relayfs/resize.c:691:
+	if (rchan->resizing) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1673: FILE: fs/relayfs/resize.c:694:
+	} else

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1684: FILE: fs/relayfs/resize.c:705:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1688: FILE: fs/relayfs/resize.c:709:
+^I$

CHECK:BRACES: braces {} should be used on all arms of this statement
#1689: FILE: fs/relayfs/resize.c:710:
+	if (async) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1692: FILE: fs/relayfs/resize.c:713:
+	} else

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1696: FILE: fs/relayfs/resize.c:717:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1721: FILE: fs/relayfs/resize.c:742:
+^I$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rchan"
#1725: FILE: fs/relayfs/resize.c:746:
+	if (rchan == NULL)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1729: FILE: fs/relayfs/resize.c:750:
+^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1800: FILE: fs/relayfs/resize.c:821:
+ ^I^I}$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1800: FILE: fs/relayfs/resize.c:821:
+ ^I^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1800: FILE: fs/relayfs/resize.c:821:
+ ^I^I}$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1897: FILE: fs/relayfs/resize.c:918:
+^I$

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*free_buf)...) over kmalloc(sizeof(struct free_rchan_buf)...)
#1913: FILE: fs/relayfs/resize.c:934:
+	free_buf = kmalloc(sizeof(struct free_rchan_buf), GFP_ATOMIC);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*free_buf)...) over kmalloc(sizeof(struct free_rchan_buf)...)
#1940: FILE: fs/relayfs/resize.c:961:
+	free_buf = kmalloc(sizeof(struct free_rchan_buf), GFP_ATOMIC);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*free_buf)...) over kmalloc(sizeof(struct free_rchan_buf)...)
#1973: FILE: fs/relayfs/resize.c:994:
+	free_buf = kmalloc(sizeof(struct free_rchan_buf), GFP_ATOMIC);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1982: FILE: fs/relayfs/resize.c:1003:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2014: FILE: fs/relayfs/resize.c:1035:
+^I$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rchan->resize_buf"
#2031: FILE: fs/relayfs/resize.c:1052:
+	if (rchan->resize_buf == NULL) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2048: FILE: fs/relayfs/resize.c:1069:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2068: FILE: fs/relayfs/resize.c:1089:
+^I$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rchan"
#2072: FILE: fs/relayfs/resize.c:1093:
+	if (rchan == NULL)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2076: FILE: fs/relayfs/resize.c:1097:
+^I$

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2082: FILE: fs/relayfs/resize.c:1103:
+EXPORT_SYMBOL(relay_realloc_buffer);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2083: FILE: fs/relayfs/resize.c:1104:
+EXPORT_SYMBOL(relay_replace_buffer);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2088: FILE: fs/relayfs/resize.h:1:
+#ifndef _RELAY_RESIZE_H

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2098: FILE: fs/relayfs/resize.h:11:
+#define FIX_SIZE(x) (((x) - 1) & PAGE_MASK) + PAGE_SIZE

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2104: FILE: fs/relayfs/resize.h:17:
+#define RESIZE_THRESHOLD	3 / 4

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#2110: FILE: fs/relayfs/resize.h:23:
+struct free_rchan_buf
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#2113: FILE: fs/relayfs/resize.h:26:
+	struct
+	{

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2117: FILE: fs/relayfs/resize.h:30:
+^I$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000215631.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 57 errors, 30 warnings, 48 checks, 2087 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000215631.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
