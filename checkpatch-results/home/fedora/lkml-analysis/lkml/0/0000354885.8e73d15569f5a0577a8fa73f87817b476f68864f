WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#28: 
This patch adds a flexible and efficient queue implementation. I used to end

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#52: FILE: include/linux/static_queue.h:1:
+/*****************************************************************************

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#68: FILE: include/linux/static_queue.h:17:
+ * along with Static Queue; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#69: FILE: include/linux/static_queue.h:18:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#83: FILE: include/linux/static_queue.h:32:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#87: FILE: include/linux/static_queue.h:36:
+
+

WARNING:NEW_TYPEDEFS: do not add new typedefs
#94: FILE: include/linux/static_queue.h:43:
+typedef struct static_queue {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#95: FILE: include/linux/static_queue.h:44:
+typedef struct static_queue {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#97: FILE: include/linux/static_queue.h:46:
+    unsigned int max_number_of_elements;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#100: FILE: include/linux/static_queue.h:49:
+    unsigned int element_size;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#101: FILE: include/linux/static_queue.h:50:
+    $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#101: FILE: include/linux/static_queue.h:50:
+    $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#103: FILE: include/linux/static_queue.h:52:
+    unsigned int head;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#104: FILE: include/linux/static_queue.h:53:
+    $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#104: FILE: include/linux/static_queue.h:53:
+    $

WARNING:TYPO_SPELLING: 'elemet' may be misspelled - perhaps 'element'?
#105: FILE: include/linux/static_queue.h:54:
+    /* The index where the next elemet inserted in the queue will
                                 ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#106: FILE: include/linux/static_queue.h:55:
+     * go. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#107: FILE: include/linux/static_queue.h:56:
+    unsigned int tail;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#108: FILE: include/linux/static_queue.h:57:
+    $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#108: FILE: include/linux/static_queue.h:57:
+    $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#112: FILE: include/linux/static_queue.h:61:
+     * can be big, so it would waste memory. */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#113: FILE: include/linux/static_queue.h:62:
+    int is_full;$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#117: FILE: include/linux/static_queue.h:66:
+     * array of the given element size. */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#118: FILE: include/linux/static_queue.h:67:
+    unsigned char* elements;$

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#118: FILE: include/linux/static_queue.h:67:
+    unsigned char* elements;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#119: FILE: include/linux/static_queue.h:68:
+    $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#119: FILE: include/linux/static_queue.h:68:
+    $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#122: FILE: include/linux/static_queue.h:71:
+
+

WARNING:LONG_LINE: line length of 115 exceeds 100 columns
#128: FILE: include/linux/static_queue.h:77:
+static_queue_t* static_queue_create(unsigned int element_size, unsigned int number_of_elements, int kmalloc_flags);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#128: FILE: include/linux/static_queue.h:77:
+static_queue_t* static_queue_create(unsigned int element_size, unsigned int number_of_elements, int kmalloc_flags);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#136: FILE: include/linux/static_queue.h:85:
+void static_queue_destroy(static_queue_t* q);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#145: FILE: include/linux/static_queue.h:94:
+int static_queue_push(static_queue_t* q, void* element);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#145: FILE: include/linux/static_queue.h:94:
+int static_queue_push(static_queue_t* q, void* element);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#157: FILE: include/linux/static_queue.h:106:
+int static_queue_pop(static_queue_t* q, void* element);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#157: FILE: include/linux/static_queue.h:106:
+int static_queue_pop(static_queue_t* q, void* element);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#165: FILE: include/linux/static_queue.h:114:
+void* static_queue_front(static_queue_t* q);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#165: FILE: include/linux/static_queue.h:114:
+void* static_queue_front(static_queue_t* q);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#173: FILE: include/linux/static_queue.h:122:
+void* static_queue_back(static_queue_t* q);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#173: FILE: include/linux/static_queue.h:122:
+void* static_queue_back(static_queue_t* q);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#178: FILE: include/linux/static_queue.h:127:
+int static_queue_empty(static_queue_t* q);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#183: FILE: include/linux/static_queue.h:132:
+int static_queue_full(static_queue_t* q);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#189: FILE: include/linux/static_queue.h:138:
+unsigned int static_queue_size(static_queue_t* q);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#191: FILE: include/linux/static_queue.h:140:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#194: FILE: include/linux/static_queue.h:143:
+
+

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#212: FILE: kernel/ksyms.c:541:
+EXPORT_SYMBOL(static_queue_destroy);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#213: FILE: kernel/ksyms.c:542:
+EXPORT_SYMBOL(static_queue_push);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#214: FILE: kernel/ksyms.c:543:
+EXPORT_SYMBOL(static_queue_pop);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#215: FILE: kernel/ksyms.c:544:
+EXPORT_SYMBOL(static_queue_front);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#216: FILE: kernel/ksyms.c:545:
+EXPORT_SYMBOL(static_queue_back);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#217: FILE: kernel/ksyms.c:546:
+EXPORT_SYMBOL(static_queue_empty);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#218: FILE: kernel/ksyms.c:547:
+EXPORT_SYMBOL(static_queue_full);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#219: FILE: kernel/ksyms.c:548:
+EXPORT_SYMBOL(static_queue_size);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#258: FILE: lib/static_queue.c:1:
+/*****************************************************************************

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#274: FILE: lib/static_queue.c:17:
+ * along with Static Queue; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#275: FILE: lib/static_queue.c:18:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#289: FILE: lib/static_queue.c:32:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#295: FILE: lib/static_queue.c:38:
+
+

WARNING:LONG_LINE: line length of 114 exceeds 100 columns
#298: FILE: lib/static_queue.c:41:
+static_queue_t* static_queue_create(unsigned int element_size, unsigned int number_of_elements, int kmalloc_flags)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#298: FILE: lib/static_queue.c:41:
+static_queue_t* static_queue_create(unsigned int element_size, unsigned int number_of_elements, int kmalloc_flags)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#300: FILE: lib/static_queue.c:43:
+    static_queue_t* q;$

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#300: FILE: lib/static_queue.c:43:
+    static_queue_t* q;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#301: FILE: lib/static_queue.c:44:
+    unsigned int total_memory_size;$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#303: FILE: lib/static_queue.c:46:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#305: FILE: lib/static_queue.c:48:
+     * allocation is needed. */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#306: FILE: lib/static_queue.c:49:
+    total_memory_size = sizeof(static_queue_t) + element_size * number_of_elements;$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#309: FILE: lib/static_queue.c:52:
+     * elements. */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#310: FILE: lib/static_queue.c:53:
+    q = kmalloc(total_memory_size, kmalloc_flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#311: FILE: lib/static_queue.c:54:
+    if (0 == q)$

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#311: FILE: lib/static_queue.c:54:
+    if (0 == q)

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

ERROR:CODE_INDENT: code indent should use tabs where possible
#312: FILE: lib/static_queue.c:55:
+        return (static_queue_t*) 0;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:SPACING: No space is necessary after a cast
#312: FILE: lib/static_queue.c:55:
+        return (static_queue_t*) 0;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#312: FILE: lib/static_queue.c:55:
+        return (static_queue_t*) 0;$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#312: FILE: lib/static_queue.c:55:
+        return (static_queue_t*) 0;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#313: FILE: lib/static_queue.c:56:
+    $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#313: FILE: lib/static_queue.c:56:
+    $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#315: FILE: lib/static_queue.c:58:
+    q->max_number_of_elements = number_of_elements;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#316: FILE: lib/static_queue.c:59:
+    q->element_size = element_size;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#317: FILE: lib/static_queue.c:60:
+    q->head = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#318: FILE: lib/static_queue.c:61:
+    q->tail = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#319: FILE: lib/static_queue.c:62:
+    q->is_full = 0;$

CHECK:SPACING: No space is necessary after a cast
#320: FILE: lib/static_queue.c:63:
+    q->elements = ((unsigned char*) q) + sizeof(static_queue_t);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#320: FILE: lib/static_queue.c:63:
+    q->elements = ((unsigned char*) q) + sizeof(static_queue_t);$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#320: FILE: lib/static_queue.c:63:
+    q->elements = ((unsigned char*) q) + sizeof(static_queue_t);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#322: FILE: lib/static_queue.c:65:
+    return q;$

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#326: FILE: lib/static_queue.c:69:
+void static_queue_destroy(static_queue_t* q)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#329: FILE: lib/static_queue.c:72:
+     * buffer so just freeing the handle will free all the memory. */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#330: FILE: lib/static_queue.c:73:
+    kfree(q);$

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#334: FILE: lib/static_queue.c:77:
+int static_queue_push(static_queue_t* q, void* element)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#334: FILE: lib/static_queue.c:77:
+int static_queue_push(static_queue_t* q, void* element)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#336: FILE: lib/static_queue.c:79:
+    unsigned char* storage;$

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#336: FILE: lib/static_queue.c:79:
+    unsigned char* storage;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#338: FILE: lib/static_queue.c:81:
+
+

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#340: FILE: lib/static_queue.c:83:
+    if (static_queue_full(q))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#341: FILE: lib/static_queue.c:84:
+        return -1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#341: FILE: lib/static_queue.c:84:
+        return -1;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#342: FILE: lib/static_queue.c:85:
+    $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#342: FILE: lib/static_queue.c:85:
+    $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#344: FILE: lib/static_queue.c:87:
+    storage = q->elements + q->tail * q->element_size;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#345: FILE: lib/static_queue.c:88:
+    $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#345: FILE: lib/static_queue.c:88:
+    $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#347: FILE: lib/static_queue.c:90:
+    memcpy(storage, element, q->element_size);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#348: FILE: lib/static_queue.c:91:
+    $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#348: FILE: lib/static_queue.c:91:
+    $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#350: FILE: lib/static_queue.c:93:
+    q->tail = (q->tail + 1) % q->max_number_of_elements;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#353: FILE: lib/static_queue.c:96:
+    if (q->head == q->tail)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#354: FILE: lib/static_queue.c:97:
+        q->is_full = 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#354: FILE: lib/static_queue.c:97:
+        q->is_full = 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#356: FILE: lib/static_queue.c:99:
+    return 0;$

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#360: FILE: lib/static_queue.c:103:
+int static_queue_pop(static_queue_t* q, void* element)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#360: FILE: lib/static_queue.c:103:
+int static_queue_pop(static_queue_t* q, void* element)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#362: FILE: lib/static_queue.c:105:
+    unsigned char* storage;$

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#362: FILE: lib/static_queue.c:105:
+    unsigned char* storage;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#364: FILE: lib/static_queue.c:107:
+
+

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#366: FILE: lib/static_queue.c:109:
+    if (static_queue_empty(q))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#367: FILE: lib/static_queue.c:110:
+        return -1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#367: FILE: lib/static_queue.c:110:
+        return -1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#370: FILE: lib/static_queue.c:113:
+    storage = q->elements + q->head * q->element_size;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#371: FILE: lib/static_queue.c:114:
+    $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#371: FILE: lib/static_queue.c:114:
+    $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#373: FILE: lib/static_queue.c:116:
+    memcpy(element, storage, q->element_size);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#376: FILE: lib/static_queue.c:119:
+    if (q->head == q->tail)$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#377: FILE: lib/static_queue.c:120:
+        q->is_full = 0;    $

ERROR:CODE_INDENT: code indent should use tabs where possible
#377: FILE: lib/static_queue.c:120:
+        q->is_full = 0;    $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#377: FILE: lib/static_queue.c:120:
+        q->is_full = 0;    $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#380: FILE: lib/static_queue.c:123:
+    q->head = (q->head + 1) % q->max_number_of_elements;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#382: FILE: lib/static_queue.c:125:
+    return 0;$

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#386: FILE: lib/static_queue.c:129:
+void* static_queue_front(static_queue_t* q)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#386: FILE: lib/static_queue.c:129:
+void* static_queue_front(static_queue_t* q)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#389: FILE: lib/static_queue.c:132:
+    if (static_queue_empty(q))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#390: FILE: lib/static_queue.c:133:
+        return (void*) 0;$

CHECK:SPACING: No space is necessary after a cast
#390: FILE: lib/static_queue.c:133:
+        return (void*) 0;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#390: FILE: lib/static_queue.c:133:
+        return (void*) 0;$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#390: FILE: lib/static_queue.c:133:
+        return (void*) 0;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#391: FILE: lib/static_queue.c:134:
+    $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#391: FILE: lib/static_queue.c:134:
+    $

CHECK:SPACING: No space is necessary after a cast
#392: FILE: lib/static_queue.c:135:
+    return (void*) (q->elements + q->head * q->element_size);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#392: FILE: lib/static_queue.c:135:
+    return (void*) (q->elements + q->head * q->element_size);$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#392: FILE: lib/static_queue.c:135:
+    return (void*) (q->elements + q->head * q->element_size);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#396: FILE: lib/static_queue.c:139:
+void* static_queue_back(static_queue_t* q)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#396: FILE: lib/static_queue.c:139:
+void* static_queue_back(static_queue_t* q)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#399: FILE: lib/static_queue.c:142:
+    if (static_queue_empty(q))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#400: FILE: lib/static_queue.c:143:
+        return (void*) 0;$

CHECK:SPACING: No space is necessary after a cast
#400: FILE: lib/static_queue.c:143:
+        return (void*) 0;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#400: FILE: lib/static_queue.c:143:
+        return (void*) 0;$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#400: FILE: lib/static_queue.c:143:
+        return (void*) 0;

CHECK:SPACING: No space is necessary after a cast
#402: FILE: lib/static_queue.c:145:
+    return (void*) (q->elements + q->tail - 1 * q->element_size);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#402: FILE: lib/static_queue.c:145:
+    return (void*) (q->elements + q->tail - 1 * q->element_size);$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#402: FILE: lib/static_queue.c:145:
+    return (void*) (q->elements + q->tail - 1 * q->element_size);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#406: FILE: lib/static_queue.c:149:
+int static_queue_empty(static_queue_t* q)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#408: FILE: lib/static_queue.c:151:
+    if (q->head == q->tail && !q->is_full)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#409: FILE: lib/static_queue.c:152:
+        return 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#409: FILE: lib/static_queue.c:152:
+        return 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#410: FILE: lib/static_queue.c:153:
+    else$

ERROR:CODE_INDENT: code indent should use tabs where possible
#411: FILE: lib/static_queue.c:154:
+        return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#411: FILE: lib/static_queue.c:154:
+        return 0;$

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#415: FILE: lib/static_queue.c:158:
+int static_queue_full(static_queue_t* q)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#417: FILE: lib/static_queue.c:160:
+    if (q->head == q->tail && q->is_full)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#418: FILE: lib/static_queue.c:161:
+        return 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#418: FILE: lib/static_queue.c:161:
+        return 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#419: FILE: lib/static_queue.c:162:
+    else$

ERROR:CODE_INDENT: code indent should use tabs where possible
#420: FILE: lib/static_queue.c:163:
+        return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#420: FILE: lib/static_queue.c:163:
+        return 0;$

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#424: FILE: lib/static_queue.c:167:
+unsigned int static_queue_size(static_queue_t* q)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#426: FILE: lib/static_queue.c:169:
+    if (q->tail > q->head)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#427: FILE: lib/static_queue.c:170:
+        return q->tail - q->head;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#427: FILE: lib/static_queue.c:170:
+        return q->tail - q->head;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#428: FILE: lib/static_queue.c:171:
+    else if (q->tail < q->head)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#429: FILE: lib/static_queue.c:172:
+        return q->tail + q->max_number_of_elements - q->head;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#429: FILE: lib/static_queue.c:172:
+        return q->tail + q->max_number_of_elements - q->head;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#430: FILE: lib/static_queue.c:173:
+    else$

ERROR:CODE_INDENT: code indent should use tabs where possible
#431: FILE: lib/static_queue.c:174:
+        return static_queue_full(q) ? q->max_number_of_elements : 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#431: FILE: lib/static_queue.c:174:
+        return static_queue_full(q) ? q->max_number_of_elements : 0;$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#434: FILE: lib/static_queue.c:177:
+
+

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000354885.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 65 errors, 90 warnings, 18 checks, 366 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000354885.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
