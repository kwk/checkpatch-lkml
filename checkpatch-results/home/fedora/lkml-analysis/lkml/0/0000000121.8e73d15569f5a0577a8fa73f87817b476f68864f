WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#31: 
My patch is based on my new idea to Linux swap subsystem, you can find more in

WARNING:TYPO_SPELLING: 'acessing' may be misspelled - perhaps 'accessing'?
#37: 
1) SwapDaemon can collect the statistic of process acessing pages and by it
                                                   ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BAD_SIGN_OFF: Do not use whitespace before Signed-off-by:
#56: 
       Signed-off-by: Yunfeng Zhang <zyf.zeroos@gmail.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:TYPO_SPELLING: 'acessing' may be misspelled - perhaps 'accessing'?
#95: FILE: Documentation/vm_pps.txt:33:
+1) SwapDaemon can collect the statistic of process acessing pages and by it
                                                    ^^^^^^^^

WARNING:TYPO_SPELLING: 'scaning' may be misspelled - perhaps 'scanning'?
#203: FILE: Documentation/vm_pps.txt:141:
+mm_struct instances, during the process of scaning and reclamation, it
                                            ^^^^^^^

ERROR:SPACING: space prohibited before that close parenthesis ')'
#388: FILE: include/asm-i386/pgtable-2level.h:57:
+	((((pte).pte_low >> 1) & 0xf ) + (((pte).pte_low >> 8) << 4 ))

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#399: FILE: include/asm-i386/pgtable-2level.h:64:
((offset) << 8) })

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#400: FILE: include/asm-i386/pgtable-2level.h:65:
+#define __swp_entry(type, offset)	((swp_entry_t) { ((type & 0xf) <<

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#416: FILE: include/asm-i386/pgtable.h:125:
+#define _PAGE_UNMAPPED	0x020	/* a special PTE type, hold its page reference
+								   even it's unmapped, see more from

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#417: FILE: include/asm-i386/pgtable.h:126:
+								   Documentation/vm_pps.txt. */

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#428: FILE: include/asm-i386/pgtable.h:234:
+static inline int pte_unmapped(pte_t pte)	{ return ((pte).pte_low &

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#430: FILE: include/asm-i386/pgtable.h:235:
+static inline int pte_swapped(pte_t pte)	{ return ((pte).pte_low &

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#432: FILE: include/asm-i386/pgtable.h:236:
+static inline int pte_file(pte_t pte)		{ return ((pte).pte_low &

WARNING:LONG_LINE_COMMENT: line length of 116 exceeds 100 columns
#449: FILE: include/linux/mm.h:172:
+									   see more from Documentation/vm_pps.txt */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#449: FILE: include/linux/mm.h:172:
+#define VM_PURE_PRIVATE	0x04000000	/* Is the vma is only belonging to a mm,
+									   see more from Documentation/vm_pps.txt */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#449: FILE: include/linux/mm.h:172:
+									   see more from Documentation/vm_pps.txt */

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#463: FILE: include/linux/mm.h:1176:
+};
+extern struct pps_info pps_info;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#467: FILE: include/linux/mm.h:1180:
+struct delay_tlb_task
+{

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#468: FILE: include/linux/mm.h:1181:
+	struct mm_struct* mm;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#470: FILE: include/linux/mm.h:1183:
+	struct vm_area_struct* vma[32];

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#474: FILE: include/linux/mm.h:1187:
+};
+extern struct delay_tlb_task delay_tlb_tasks[32];

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#479: FILE: include/linux/mm.h:1192:
+void timer_flush_tlb_tasks(void* data /* = NULL */);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#481: FILE: include/linux/mm.h:1194:
+void enter_pps(struct mm_struct* mm, struct vm_area_struct* vma);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#481: FILE: include/linux/mm.h:1194:
+void enter_pps(struct mm_struct* mm, struct vm_area_struct* vma);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#482: FILE: include/linux/mm.h:1195:
+void leave_pps(struct vm_area_struct* vma, int migrate_flag);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#497: FILE: include/linux/swapops.h:53:
+	BUG_ON(!pte_swapped(pte));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#506: FILE: include/linux/swapops.h:67:
+	BUG_ON(!pte_swapped(__swp_entry_to_pte(arch_entry)));

WARNING:LINE_SPACING: Missing a blank line after declarations
#594: FILE: mm/memory.c:706:
+			struct page *page;
+			page = pfn_to_page(pte_pfn(ptent));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#595: FILE: mm/memory.c:707:
+			BUG_ON(page == ZERO_PAGE(addr));

CHECK:BRACES: braces {} should be used on all arms of this statement
#635: FILE: mm/memory.c:1639:
+		if (!(vma->vm_flags & VM_PURE_PRIVATE))
[...]
+		else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#637: FILE: mm/memory.c:1641:
+		else {

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#653: FILE: mm/memory.c:2017:
+	struct page* page;

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#656: FILE: mm/memory.c:2020:
+	spinlock_t* ptl = pte_lockptr(vma->vm_mm, pmd);

CHECK:CAMELCASE: Avoid CamelCase: <swapType>
#657: FILE: mm/memory.c:2021:
+	int swapType = swp_type(entry);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <swapOffset>
#658: FILE: mm/memory.c:2022:
+	int swapOffset = swp_offset(entry);

CHECK:SPACING: No space is necessary after a cast
#674: FILE: mm/memory.c:2038:
+		if (next - (pte_t*) pmd >= PTRS_PER_PTE)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#674: FILE: mm/memory.c:2038:
+		if (next - (pte_t*) pmd >= PTRS_PER_PTE)

ERROR:CODE_INDENT: code indent should use tabs where possible
#677: FILE: mm/memory.c:2041:
+        if (!(!pte_present(*next) && pte_swapped(*next))) {$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#677: FILE: mm/memory.c:2041:
+        if (!(!pte_present(*next) && pte_swapped(*next))) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#677: FILE: mm/memory.c:2041:
+        if (!(!pte_present(*next) && pte_swapped(*next))) {
+			spin_unlock(ptl);

CHECK:SPACING: No space is necessary after a cast
#701: FILE: mm/memory.c:2065:
+		if (prev - (pte_t*) pmd < 0)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#701: FILE: mm/memory.c:2065:
+		if (prev - (pte_t*) pmd < 0)

ERROR:CODE_INDENT: code indent should use tabs where possible
#704: FILE: mm/memory.c:2068:
+        if (!(!pte_present(*prev) && pte_swapped(*prev))) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#704: FILE: mm/memory.c:2068:
+        if (!(!pte_present(*prev) && pte_swapped(*prev))) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#704: FILE: mm/memory.c:2068:
+        if (!(!pte_present(*prev) && pte_swapped(*prev))) {
+			spin_unlock(ptl);

CHECK:BRACES: braces {} should be used on all arms of this statement
#776: FILE: mm/memory.c:2230:
+		if (!(vma->vm_flags & VM_PURE_PRIVATE))
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#778: FILE: mm/memory.c:2232:
+		else {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#792: FILE: mm/memory.c:2524:
+			BUG_ON(!(vma->vm_flags & VM_PURE_PRIVATE));

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#795: FILE: mm/memory.c:2527:
+			struct page* page = pte_page(entry);

WARNING:LINE_SPACING: Missing a blank line after declarations
#797: FILE: mm/memory.c:2529:
+			pte_t temp_pte = mk_pte(page, vma->vm_page_prot);
+			pte = pte_offset_map_lock(mm, pmd, address, &ptl);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#815: FILE: mm/memory.c:2833:
+static void migrate_back_pte_range(struct mm_struct* mm, pmd_t *pmd, struct

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#816: FILE: mm/memory.c:2834:
+		vm_area_struct *vma, unsigned long addr, unsigned long end)
 		               ^

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#818: FILE: mm/memory.c:2836:
+	struct page* page;

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#821: FILE: mm/memory.c:2839:
+	spinlock_t* ptl;

CHECK:BRACES: braces {} should be used on all arms of this statement
#828: FILE: mm/memory.c:2846:
+		if (!pte_present(*pte) && pte_unmapped(*pte)) {
[...]
+		} else if (pte_present(*pte)) {
[...]
+		} else if (!pte_present(*pte) && pte_swapped(*pte))
[...]

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#833: FILE: mm/memory.c:2851:
+			BUG_ON(page == ZERO_PAGE(addr));

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#854: FILE: mm/memory.c:2872:
+static void migrate_back_pmd_range(struct mm_struct* mm, pud_t *pud, struct

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#855: FILE: mm/memory.c:2873:
+		vm_area_struct *vma, unsigned long addr, unsigned long end)
 		               ^

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#869: FILE: mm/memory.c:2887:
+static void migrate_back_pud_range(struct mm_struct* mm, pgd_t *pgd, struct

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#870: FILE: mm/memory.c:2888:
+		vm_area_struct *vma, unsigned long addr, unsigned long end)
 		               ^

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#886: FILE: mm/memory.c:2903:
+static void migrate_back_legacy_linux(struct mm_struct* mm, struct

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#889: FILE: mm/memory.c:2905:
+	pgd_t* pgd;

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#903: FILE: mm/memory.c:2919:
+void enter_pps(struct mm_struct* mm, struct vm_area_struct* vma)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#903: FILE: mm/memory.c:2919:
+void enter_pps(struct mm_struct* mm, struct vm_area_struct* vma)

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#905: FILE: mm/memory.c:2921:
+	int condition = VM_READ | VM_WRITE | VM_EXEC | \

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!vma->vm_file"
#910: FILE: mm/memory.c:2926:
+	if (!(vma->vm_flags & ~condition) && vma->vm_file == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#921: FILE: mm/memory.c:2937:
+void leave_pps(struct vm_area_struct* vma, int migrate_flag)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#923: FILE: mm/memory.c:2939:
+	struct mm_struct* mm = vma->vm_mm;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1014: FILE: mm/rmap.c:621:
+	BUG_ON(vma->vm_flags & VM_PURE_PRIVATE);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1023: FILE: mm/rmap.c:680:
+		BUG_ON(!pte_swapped(*pte));

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!vma"
#1036: FILE: mm/swap_state.c:357:
+			if (vma == NULL || !(vma->vm_flags & VM_PURE_PRIVATE))

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1049: FILE: mm/swapfile.c:508:
+static int pps_test_swap_type(struct mm_struct* mm, pmd_t* pmd, pte_t* pte, int

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1049: FILE: mm/swapfile.c:508:
+static int pps_test_swap_type(struct mm_struct* mm, pmd_t* pmd, pte_t* pte, int

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1049: FILE: mm/swapfile.c:508:
+static int pps_test_swap_type(struct mm_struct* mm, pmd_t* pmd, pte_t* pte, int

ERROR:POINTER_LOCATION: "foo** bar" should be "foo **bar"
#1050: FILE: mm/swapfile.c:509:
+		type, struct page** ret_page)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1052: FILE: mm/swapfile.c:511:
+	spinlock_t* ptl = pte_lockptr(mm, pmd);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1054: FILE: mm/swapfile.c:513:
+	struct page* page;

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1080: FILE: mm/swapfile.c:539:
+static int pps_swapoff_scan_ptes(struct mm_struct* mm, struct vm_area_struct*

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1081: FILE: mm/swapfile.c:540:
+		vma, pmd_t* pmd, unsigned long addr, unsigned long end, int type)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1084: FILE: mm/swapfile.c:543:
+	struct page* page;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!page"
#1089: FILE: mm/swapfile.c:548:
+			if (page == NULL) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1098: FILE: mm/swapfile.c:557:
+					BUG();

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1120: FILE: mm/swapfile.c:579:
+static int pps_swapoff_pmd_range(struct mm_struct* mm, struct vm_area_struct*

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1121: FILE: mm/swapfile.c:580:
+		vma, pud_t* pud, unsigned long addr, unsigned long end, int type)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1125: FILE: mm/swapfile.c:584:
+	pmd_t* pmd = pmd_offset(pud, addr);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1126: FILE: mm/swapfile.c:585:
+	pmd_t* pmd = pmd_offset(pud, addr);
+	do {

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1137: FILE: mm/swapfile.c:596:
+static int pps_swapoff_pud_range(struct mm_struct* mm, struct vm_area_struct*

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1138: FILE: mm/swapfile.c:597:
+		vma, pgd_t* pgd, unsigned long addr, unsigned long end, int type)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1142: FILE: mm/swapfile.c:601:
+	pud_t* pud = pud_offset(pgd, addr);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1143: FILE: mm/swapfile.c:602:
+	pud_t* pud = pud_offset(pgd, addr);
+	do {

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1154: FILE: mm/swapfile.c:613:
+static int pps_swapoff_pgd_range(struct mm_struct* mm, struct vm_area_struct*

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1161: FILE: mm/swapfile.c:620:
+	pgd_t* pgd = pgd_offset(mm, addr);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1162: FILE: mm/swapfile.c:621:
+	pgd_t* pgd = pgd_offset(mm, addr);
+	do {

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1175: FILE: mm/swapfile.c:634:
+	struct vm_area_struct* vma;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1180: FILE: mm/swapfile.c:639:
+	prev = mm = &init_mm;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "vma"
#1192: FILE: mm/swapfile.c:651:
+		for (vma = mm->mmap; vma != NULL; vma = vma->vm_next) {

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1275: FILE: mm/vmscan.c:1113:
+};
+// pps end.

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1279: FILE: mm/vmscan.c:1117:
+	pte_t* ptes[MAX_SERIES_LENGTH];

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1280: FILE: mm/vmscan.c:1118:
+	struct page* pages[MAX_SERIES_LENGTH];

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1285: FILE: mm/vmscan.c:1123:
+static int get_series_stage(pte_t* pte, int index)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1290: FILE: mm/vmscan.c:1128:
+		struct page* page = pfn_to_page(pte_pfn(series.orig_ptes[index]));

WARNING:LINE_SPACING: Missing a blank line after declarations
#1291: FILE: mm/vmscan.c:1129:
+		struct page* page = pfn_to_page(pte_pfn(series.orig_ptes[index]));
+		series.pages[index] = page;

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#1294: FILE: mm/vmscan.c:1132:
+		if (pte_young(series.orig_ptes[index])) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1296: FILE: mm/vmscan.c:1134:
+		} else

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1299: FILE: mm/vmscan.c:1137:
+		struct page* page = pfn_to_page(pte_pfn(series.orig_ptes[index]));

WARNING:LINE_SPACING: Missing a blank line after declarations
#1300: FILE: mm/vmscan.c:1138:
+		struct page* page = pfn_to_page(pte_pfn(series.orig_ptes[index]));
+		series.pages[index] = page;

CHECK:BRACES: braces {} should be used on all arms of this statement
#1301: FILE: mm/vmscan.c:1139:
+		if (!PageSwapCache(page))
[...]
+		else {
[...]

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#1303: FILE: mm/vmscan.c:1141:
+			return 3;
+		else {

CHECK:BRACES: Unbalanced braces around else statement
#1303: FILE: mm/vmscan.c:1141:
+		else {

CHECK:BRACES: Unbalanced braces around else statement
#1309: FILE: mm/vmscan.c:1147:
+	} else // pte_swapped -- SwappedPTE

ERROR:POINTER_LOCATION: "foo** bar" should be "foo **bar"
#1313: FILE: mm/vmscan.c:1151:
+static void find_series(pte_t** start, unsigned long* addr, unsigned long end)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1313: FILE: mm/vmscan.c:1151:
+static void find_series(pte_t** start, unsigned long* addr, unsigned long end)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1321: FILE: mm/vmscan.c:1158:
+	for (i = 1; i < MAX_SERIES_LENGTH && *addr < end; i++, (*start)++,
+		if (series_stage != get_series_stage(*start, i))

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1330: FILE: mm/vmscan.c:1167:
+void timer_flush_tlb_tasks(void* data)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "delay_tlb_tasks[i].mm"
#1337: FILE: mm/vmscan.c:1174:
+		if (delay_tlb_tasks[i].mm != NULL &&

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1338: FILE: mm/vmscan.c:1175:
+		if (delay_tlb_tasks[i].mm != NULL &&
+				cpu_isset(smp_processor_id(), delay_tlb_tasks[i].mm->cpu_vm_mask) &&

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#1354: FILE: mm/vmscan.c:1191:
+static struct delay_tlb_task* delay_task = NULL;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1354: FILE: mm/vmscan.c:1191:
+static struct delay_tlb_task* delay_task = NULL;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#1355: FILE: mm/vmscan.c:1192:
+static int vma_index = 0;

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1357: FILE: mm/vmscan.c:1194:
+static struct delay_tlb_task* search_free_tlb_tasks_slot(void)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1359: FILE: mm/vmscan.c:1196:
+	struct delay_tlb_task* ret = NULL;

CHECK:BRACES: braces {} should be used on all arms of this statement
#1363: FILE: mm/vmscan.c:1200:
+		if (delay_tlb_tasks[i].mm != NULL) {
[...]
+		} else
[...]

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "delay_tlb_tasks[i].mm"
#1363: FILE: mm/vmscan.c:1200:
+		if (delay_tlb_tasks[i].mm != NULL) {

CHECK:BRACES: Unbalanced braces around else statement
#1369: FILE: mm/vmscan.c:1206:
+		} else

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1379: FILE: mm/vmscan.c:1216:
+static void init_delay_task(struct mm_struct* mm)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1389: FILE: mm/vmscan.c:1226:
+static void start_tlb_tasks(struct mm_struct* mm)

CHECK:BRACES: braces {} should be used on all arms of this statement
#1395: FILE: mm/vmscan.c:1232:
+			if (cpus_empty(delay_tlb_tasks[i].cpu_mask)) {
[...]
+			} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1398: FILE: mm/vmscan.c:1235:
+			} else

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1406: FILE: mm/vmscan.c:1243:
+	BUG_ON(delay_task != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "delay_task"
#1406: FILE: mm/vmscan.c:1243:
+	BUG_ON(delay_task != NULL);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1421: FILE: mm/vmscan.c:1258:
+static void fill_in_tlb_tasks(struct vm_area_struct* vma, unsigned long addr,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1422: FILE: mm/vmscan.c:1259:
+static void fill_in_tlb_tasks(struct vm_area_struct* vma, unsigned long addr,
+		unsigned long end)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1424: FILE: mm/vmscan.c:1261:
+	struct mm_struct* mm;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1427: FILE: mm/vmscan.c:1264:
+	if (vma_index != 0 && delay_task->vma[vma_index - 1] == vma &&
+			delay_task->end[vma_index - 1] == addr) {

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1447: FILE: mm/vmscan.c:1284:
+static void shrink_pvma_scan_ptes(struct scan_control* sc, struct mm_struct*

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1448: FILE: mm/vmscan.c:1285:
+		mm, struct vm_area_struct* vma, pmd_t* pmd, unsigned long addr,

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1448: FILE: mm/vmscan.c:1285:
+		mm, struct vm_area_struct* vma, pmd_t* pmd, unsigned long addr,

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1452: FILE: mm/vmscan.c:1289:
+	spinlock_t* ptl = pte_lockptr(mm, pmd);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1453: FILE: mm/vmscan.c:1290:
+	pte_t* pte = pte_offset_map(pmd, addr);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1457: FILE: mm/vmscan.c:1294:
+	struct address_space* mapping = &swapper_space;

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#1465: FILE: mm/vmscan.c:1302:
+		switch (series.series_stage) {
+			case 1: // PTE -- untouched PTE.
[...]
+			case 2: // untouched PTE -- UnmappedPTE.
[...]
+			case 3: // Attach SwapPage to PrivatePage.
[...]
+			case 4: // SwapPage isn't consistent with PrivatePage.
[...]
+			case 5: // UnmappedPTE -- SwappedPTE, reclaim PrivatePage.
[...]
+			case 6:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1468: FILE: mm/vmscan.c:1305:
+					struct page* page = series.pages[i];

WARNING:LINE_SPACING: Missing a blank line after declarations
#1469: FILE: mm/vmscan.c:1306:
+					struct page* page = series.pages[i];
+					lock_page(page);

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#1471: FILE: mm/vmscan.c:1308:
+					if (unlikely(pte_same(*series.ptes[i], series.orig_ptes[i]))) {

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#1472: FILE: mm/vmscan.c:1309:
+						if (pte_dirty(*series.ptes[i]))

Indentation with 6 or more tabs usually indicate overly indented
code.

It is suggested to refactor excessive indentation of
if/else/for/do/while/switch statements.

See: https://lore.kernel.org/lkml/1328311239.21255.24.camel@joe2Laptop/

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#1475: FILE: mm/vmscan.c:1312:
+								pte_mkold(pte_mkclean(*series.ptes[i])));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1475: FILE: mm/vmscan.c:1312:
+						set_pte_at(mm, addr + i * PAGE_SIZE, series.ptes[i],
+								pte_mkold(pte_mkclean(*series.ptes[i])));

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#1480: FILE: mm/vmscan.c:1317:
+				fill_in_tlb_tasks(vma, addr, addr + (PAGE_SIZE * series.series_length));

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#1495: FILE: mm/vmscan.c:1332:
+					if (unlikely(pte_same(*series.ptes[i], series.orig_ptes[i]))) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1497: FILE: mm/vmscan.c:1334:
+						pte_t pte_unmapped = series.orig_ptes[i];
+						pte_unmapped.pte_low &= ~_PAGE_PRESENT;

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#1499: FILE: mm/vmscan.c:1336:
+						if (cmpxchg(&series.ptes[i]->pte_low,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1500: FILE: mm/vmscan.c:1337:
+						if (cmpxchg(&series.ptes[i]->pte_low,
+									series.orig_ptes[i].pte_low,

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#1522: FILE: mm/vmscan.c:1359:
+						if (!PageSwapCache(series.pages[i])) {

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#1523: FILE: mm/vmscan.c:1360:
+							if (!add_to_swap(series.pages[i], GFP_ATOMIC)) {

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#1523: FILE: mm/vmscan.c:1360:
+							if (!add_to_swap(series.pages[i], GFP_ATOMIC)) {

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1540: FILE: mm/vmscan.c:1377:
+						struct page* page = series.pages[i];

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#1543: FILE: mm/vmscan.c:1380:
+						if (!may_write_to_queue(mapping->backing_dev_info))

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#1546: FILE: mm/vmscan.c:1383:
+						if (!PageDirty(page) || PageWriteback(page)) {

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#1560: FILE: mm/vmscan.c:1397:
+						if (res < 0) {

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#1566: FILE: mm/vmscan.c:1403:
+						if (!PageWriteback(page))

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1575: FILE: mm/vmscan.c:1412:
+					struct page* page = series.pages[i];

WARNING:LINE_SPACING: Missing a blank line after declarations
#1576: FILE: mm/vmscan.c:1413:
+					struct page* page = series.pages[i];
+					if (!(page_to_nid(page) == sc->reclaim_node ||

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1577: FILE: mm/vmscan.c:1414:
+					if (!(page_to_nid(page) == sc->reclaim_node ||
+							sc->reclaim_node == -1))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1583: FILE: mm/vmscan.c:1420:
+					if (!pte_same(*series.ptes[i], series.orig_ptes[i]) ||
+							/* We're racing with get_user_pages. */

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#1584: FILE: mm/vmscan.c:1421:
+							PageSwapCache(page) ?  page_count(page) > 2 :

WARNING:LINE_SPACING: Missing a blank line after declarations
#1592: FILE: mm/vmscan.c:1429:
+					swp_entry_t entry = { .val = page_private(page) };
+					swap_duplicate(entry);

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#1594: FILE: mm/vmscan.c:1431:
+					set_pte_at(mm, addr + i * PAGE_SIZE, series.ptes[i], pte_swp);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1594: FILE: mm/vmscan.c:1431:
+					pte_t pte_swp = swp_entry_to_pte(entry);
+					set_pte_at(mm, addr + i * PAGE_SIZE, series.ptes[i], pte_swp);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1617: FILE: mm/vmscan.c:1454:
+static void shrink_pvma_pmd_range(struct scan_control* sc, struct mm_struct*

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1618: FILE: mm/vmscan.c:1455:
+		mm, struct vm_area_struct* vma, pud_t* pud, unsigned long addr,

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1618: FILE: mm/vmscan.c:1455:
+		mm, struct vm_area_struct* vma, pud_t* pud, unsigned long addr,

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1622: FILE: mm/vmscan.c:1459:
+	pmd_t* pmd = pmd_offset(pud, addr);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1623: FILE: mm/vmscan.c:1460:
+	pmd_t* pmd = pmd_offset(pud, addr);
+	do {

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1631: FILE: mm/vmscan.c:1468:
+static void shrink_pvma_pud_range(struct scan_control* sc, struct mm_struct*

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1632: FILE: mm/vmscan.c:1469:
+		mm, struct vm_area_struct* vma, pgd_t* pgd, unsigned long addr,

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1632: FILE: mm/vmscan.c:1469:
+		mm, struct vm_area_struct* vma, pgd_t* pgd, unsigned long addr,

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1636: FILE: mm/vmscan.c:1473:
+	pud_t* pud = pud_offset(pgd, addr);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1637: FILE: mm/vmscan.c:1474:
+	pud_t* pud = pud_offset(pgd, addr);
+	do {

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1645: FILE: mm/vmscan.c:1482:
+static void shrink_pvma_pgd_range(struct scan_control* sc, struct mm_struct*

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1646: FILE: mm/vmscan.c:1483:
+		mm, struct vm_area_struct* vma)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1651: FILE: mm/vmscan.c:1488:
+	pgd_t* pgd = pgd_offset(mm, addr);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1652: FILE: mm/vmscan.c:1489:
+	pgd_t* pgd = pgd_offset(mm, addr);
+	do {

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1660: FILE: mm/vmscan.c:1497:
+static void shrink_private_vma(struct scan_control* sc)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1662: FILE: mm/vmscan.c:1499:
+	struct vm_area_struct* vma;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1666: FILE: mm/vmscan.c:1503:
+	prev = mm = &init_mm;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "vma"
#1679: FILE: mm/vmscan.c:1516:
+			for (vma = mm->mmap; vma != NULL; vma = vma->vm_next) {

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1715: FILE: mm/vmscan.c:2164:
+static int kppsd(void* p)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1720: FILE: mm/vmscan.c:2169:
+	DEFINE_WAIT(wait);
+	tsk->flags |= PF_MEMALLOC | PF_SWAPWRITE;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1722: FILE: mm/vmscan.c:2171:
+	struct scan_control default_sc;
+	default_sc.gfp_mask = GFP_KERNEL;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000000121.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 90 errors, 58 warnings, 41 checks, 1569 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000000121.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
