WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#23: 
# This is a BitKeeper generated patch for the following project:

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#24: 
# Project Name: Linux kernel tree

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#25: 
# This patch format is intended for GNU patch command version 2.5 or higher.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#25: 
# This patch format is intended for GNU patch command version 2.5 or higher.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#26: 
# This patch includes the following deltas:

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#27: 
#	           ChangeSet	1.1059  -> 1.1060 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#28: 
#	 fs/jfs/jfs_logmgr.h	1.10    -> 1.11   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#29: 
#	 fs/jfs/jfs_logmgr.c	1.44    -> 1.45   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#30: 
#	 fs/jfs/jfs_umount.c	1.9     -> 1.10   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#31: 
#	 fs/jfs/jfs_txnmgr.c	1.38    -> 1.39   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#32: 
#

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#33: 
# The following is the BitKeeper ChangeSet Log

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#34: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#35: 
# 03/02/17	shaggy@shaggy.austin.ibm.com	1.1060

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#36: 
# JFS: Fix jfs_sync_fs

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#37: 
# 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#38: 
# jfs_sync_fs was implemented using the same code as the unmount code to flush

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#39: 
# the journal and wait for the journal to quiesce.  Since jfs_sync_fs may be

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#40: 
# called while the volume is under heavy use, we can end up waiting

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#41: 
# indefinately.  Code in jfs_flush_journal meant to detect a hang at unmount

WARNING:TYPO_SPELLING: 'indefinately' may be misspelled - perhaps 'indefinitely'?
#41: 
# indefinately.  Code in jfs_flush_journal meant to detect a hang at unmount
  ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#42: 
# time may be triggered in this case causing a trap.  This patch changes

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#43: 
# jfs_sync_fs to only wait until the most recent transaction has been

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#44: 
# committed to disk, rather than waiting until the commit queue is empty.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#45: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#46: 
#

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#48: 
--- a/fs/jfs/jfs_logmgr.c	Mon Feb 17 13:26:16 2003

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

CHECK:CAMELCASE: Avoid CamelCase: <tblkGC_READY>
#85: FILE: fs/jfs/jfs_logmgr.c:851:
+			if (tblk->flag & tblkGC_READY)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#107: FILE: fs/jfs/jfs_logmgr.c:1316:
+	log->cqueue.head = log->cqueue.tail = NULL;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:REPEATED_WORD: Possible repeated word: 'wait'
#118: FILE: fs/jfs/jfs_logmgr.c:1407:
+ *		wait == 0  flush until latest txn is committed, don't wait
+ *		wait == 1  flush until latest txn is committed, wait

WARNING:REPEATED_WORD: Possible repeated word: 'wait'
#119: FILE: fs/jfs/jfs_logmgr.c:1408:
+ *		wait == 1  flush until latest txn is committed, wait
+ *		wait > 1   flush until all txn's are complete, wait

CHECK:CAMELCASE: Avoid CamelCase: <logGC_PAGEOUT>
#167: FILE: fs/jfs/jfs_logmgr.c:1444:
+			if (!(log->cflag & logGC_PAGEOUT)) {

CHECK:CAMELCASE: Avoid CamelCase: <lmGCwrite>
#169: FILE: fs/jfs/jfs_logmgr.c:1446:
+				lmGCwrite(log, 0);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'wait > 1'
#173: FILE: fs/jfs/jfs_logmgr.c:1450:
+	if ((wait > 1) || test_bit(log_SYNCBARRIER, &log->flag)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:CAMELCASE: Avoid CamelCase: <tblkGC_COMMITTED>
#179: FILE: fs/jfs/jfs_logmgr.c:1456:
+	if (wait && target && !(target->flag & tblkGC_COMMITTED)) {

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000392660.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 28 warnings, 6 checks, 199 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000392660.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
