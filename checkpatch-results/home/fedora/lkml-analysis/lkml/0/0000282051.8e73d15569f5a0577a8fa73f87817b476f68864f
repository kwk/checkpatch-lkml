WARNING:TYPO_SPELLING: 'capabilites' may be misspelled - perhaps 'capabilities'?
#14: 
Subject: [PATCH] capabilites, take 2
                 ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IXGRP' are not preferred. Consider using octal permissions '0010'.
#104: FILE: fs/exec.c:896:
+		if ((mode & (S_ISGID | S_IXGRP)) == (S_ISGID | S_IXGRP)) {

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IXGRP' are not preferred. Consider using octal permissions '0010'.
#104: FILE: fs/exec.c:896:
+		if ((mode & (S_ISGID | S_IXGRP)) == (S_ISGID | S_IXGRP)) {

ERROR:SPACING: space required before the open parenthesis '('
#112: FILE: fs/exec.c:904:
+	if((bprm->secflags & BINPRM_SEC_SETUID) && bprm->e_uid == 0)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#134: FILE: security/commoncap.c:27:
+int newcaps = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

ERROR:NON_OCTAL_PERMISSIONS: Use 4 digit octal (0777) not decimal permissions
#136: FILE: security/commoncap.c:29:
+module_param(newcaps, int, 444);
Permission bits should use 4 digit octal permissions (like 0700 or 0444).
Avoid using any other base like decimal.

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#148: FILE: security/commoncap.c:46:
+	    !cap_issubset (child->cap_inheritable, current->cap_inheritable))

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#159: FILE: security/commoncap.c:90:
+	if (newcaps && !cap_issubset (*permitted, *inheritable)) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#159: FILE: security/commoncap.c:90:
+	if (newcaps && !cap_issubset (*permitted, *inheritable)) {
+		return -EPERM;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#170: FILE: security/commoncap.c:107:
+	if (newcaps) return 0;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#180: FILE: security/commoncap.c:135:
+static void cap_bprm_apply_creds_compat (struct linux_binprm *bprm, int unsafe)

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#185: FILE: security/commoncap.c:139:
+	static int fixed_init = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#242: FILE: security/commoncap.c:221:
+void cap_bprm_apply_creds (struct linux_binprm *bprm, int unsafe)

ERROR:SPACING: space required before the open parenthesis '('
#248: FILE: security/commoncap.c:227:
+	if(!newcaps) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#265: FILE: security/commoncap.c:244:
+	if ((bprm->secflags & (BINPRM_SEC_SETUID | BINPRM_SEC_SETGID)) &&
[...]
+			bprm->secflags |= BINPRM_SEC_NOELEVATE;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#270: FILE: security/commoncap.c:249:
+		is_setuid = is_setgid = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:SPACING: space required before the open parenthesis '('
#283: FILE: security/commoncap.c:262:
+	if(!cap_issubset(new_pP, current->cap_permitted))

ERROR:CODE_INDENT: code indent should use tabs where possible
#288: FILE: security/commoncap.c:267:
+^I        current->suid = current->euid = current->fsuid = bprm->e_uid;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#288: FILE: security/commoncap.c:267:
+	        current->suid = current->euid = current->fsuid = bprm->e_uid;

ERROR:CODE_INDENT: code indent should use tabs where possible
#292: FILE: security/commoncap.c:271:
+^I        current->sgid = current->egid = current->fsgid = bprm->e_gid;$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#292: FILE: security/commoncap.c:271:
+	        current->sgid = current->egid = current->fsgid = bprm->e_gid;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#338: FILE: security/commoncap.c:491:
+static int __init commoncap_init (void)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#341: FILE: security/commoncap.c:494:
+		printk(KERN_NOTICE "Experimental capability support is on\n");

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000282051.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 9 errors, 11 warnings, 3 checks, 307 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000282051.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
