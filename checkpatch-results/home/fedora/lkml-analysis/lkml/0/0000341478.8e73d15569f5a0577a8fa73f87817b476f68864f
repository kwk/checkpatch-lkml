WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#37: 
--------------------------------------------------------------------------------

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#41: 
--- a/fs/proc/base.c	Fri Aug 29 14:49:47 2003

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#56: FILE: fs/proc/base.c:86:
+  E(PROC_PID_CLASS,     "class",        S_IFREG|S_IRUGO),$

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#56: FILE: fs/proc/base.c:86:
+  E(PROC_PID_CLASS,     "class",        S_IFREG|S_IRUGO),
                                                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#56: FILE: fs/proc/base.c:86:
+  E(PROC_PID_CLASS,     "class",        S_IFREG|S_IRUGO),

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#57: FILE: fs/proc/base.c:87:
+  E(PROC_PID_INTERACTIVE,"interactive", S_IFREG|S_IRUGO),$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#57: FILE: fs/proc/base.c:87:
+  E(PROC_PID_INTERACTIVE,"interactive", S_IFREG|S_IRUGO),
                         ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#57: FILE: fs/proc/base.c:87:
+  E(PROC_PID_INTERACTIVE,"interactive", S_IFREG|S_IRUGO),
                                                ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#57: FILE: fs/proc/base.c:87:
+  E(PROC_PID_INTERACTIVE,"interactive", S_IFREG|S_IRUGO),

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#67: FILE: fs/proc/base.c:276:
+       return sprintf(buffer, "%d\n", task->classid);$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#70: FILE: fs/proc/base.c:279:
+extern int task_interactive(struct task_struct * p);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#74: FILE: fs/proc/base.c:283:
+       return sprintf(buffer, "%d\n", task_interactive(task));$

ERROR:CODE_INDENT: code indent should use tabs where possible
#86: FILE: fs/proc/base.c:1193:
+^I        case PROC_PID_CLASS:$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:CODE_INDENT: code indent should use tabs where possible
#90: FILE: fs/proc/base.c:1197:
+^I        case PROC_PID_INTERACTIVE:$

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#103: FILE: fs/proc/proc_misc.c:359:
+extern struct seq_operations classes_op;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#103: FILE: fs/proc/proc_misc.c:359:
+extern struct seq_operations classes_op;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#104: FILE: fs/proc/proc_misc.c:360:
+extern ssize_t classes_write(struct file *, const char *, size_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#104: FILE: fs/proc/proc_misc.c:360:
+extern ssize_t classes_write(struct file *, const char *, size_t,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#104: FILE: fs/proc/proc_misc.c:360:
+extern ssize_t classes_write(struct file *, const char *, size_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#104: FILE: fs/proc/proc_misc.c:360:
+extern ssize_t classes_write(struct file *, const char *, size_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'off_t *' should also have an identifier name
#104: FILE: fs/proc/proc_misc.c:360:
+extern ssize_t classes_write(struct file *, const char *, size_t,

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#105: FILE: fs/proc/proc_misc.c:360:
loff_t *);

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#106: FILE: fs/proc/proc_misc.c:361:
+extern ssize_t classes_write(struct file *, const char *, size_t,
+static int classes_open(struct inode *inode, struct file *file)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#110: FILE: fs/proc/proc_misc.c:365:
+}
+static struct file_operations proc_classes_operations = {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONST_STRUCT: struct file_operations should normally be const
#110: FILE: fs/proc/proc_misc.c:365:
+static struct file_operations proc_classes_operations = {

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#126: FILE: fs/proc/proc_misc.c:668:
+	create_seq_entry("classes", S_IWUSR|S_IRUGO,
 	                                   ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR|S_IRUGO' are not preferred. Consider using octal permissions '0644'.
#126: FILE: fs/proc/proc_misc.c:668:
+	create_seq_entry("classes", S_IWUSR|S_IRUGO,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#128: FILE: fs/proc/proc_misc.c:669:
+	create_seq_entry("classes", S_IWUSR|S_IRUGO,
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#129: FILE: fs/proc/proc_misc.c:670:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#138: FILE: include/linux/circularqueue.h:1:
+/* include/linux/circularqueue.h : cpu control for CKRM

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#138: FILE: include/linux/circularqueue.h:1:
+/* include/linux/circularqueue.h : cpu control for CKRM

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#142: FILE: include/linux/circularqueue.h:5:
+ * $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#146: FILE: include/linux/circularqueue.h:9:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#169: FILE: include/linux/circularqueue.h:32:
+^Iint pos; $

WARNING:NEW_TYPEDEFS: do not add new typedefs
#174: FILE: include/linux/circularqueue.h:37:
+typedef  struct cq_node_struct  cp_node_t;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#176: FILE: include/linux/circularqueue.h:39:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#181: FILE: include/linux/circularqueue.h:42:
+void adjust_cq_pos(struct circularqueue_struct *cq,cp_node_t * node,int

ERROR:SPACING: space required after that ',' (ctx:VxV)
#181: FILE: include/linux/circularqueue.h:42:
+void adjust_cq_pos(struct circularqueue_struct *cq,cp_node_t * node,int
                                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#181: FILE: include/linux/circularqueue.h:42:
+void adjust_cq_pos(struct circularqueue_struct *cq,cp_node_t * node,int
                                                                    ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#183: FILE: include/linux/circularqueue.h:43:
+cp_node_t * get_first_element(struct circularqueue_struct *cq);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#185: FILE: include/linux/circularqueue.h:45:
+struct circularqueue_struct * create_circular_queue(int size);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#186: FILE: include/linux/circularqueue.h:46:
+void get_next_element(struct circularqueue_struct *cq,int* last_pos,

ERROR:SPACING: space required after that ',' (ctx:VxV)
#186: FILE: include/linux/circularqueue.h:46:
+void get_next_element(struct circularqueue_struct *cq,int* last_pos,
                                                      ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#188: FILE: include/linux/circularqueue.h:47:
+void get_next_element(struct circularqueue_struct *cq,int* last_pos,
+#endif

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#193: FILE: include/linux/class.h:1:
+/* include/linux/class.h : cpu control for CKRM

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#193: FILE: include/linux/class.h:1:
+/* include/linux/class.h : cpu control for CKRM

ERROR:TRAILING_WHITESPACE: trailing whitespace
#197: FILE: include/linux/class.h:5:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#198: FILE: include/linux/class.h:6:
+ * Main functions, CKRM API functions and proc interface $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#202: FILE: include/linux/class.h:10:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#224: FILE: include/linux/class.h:31:
+#define CLASS_SAMPLE_RATE 2000 $

WARNING:NEW_TYPEDEFS: do not add new typedefs
#231: FILE: include/linux/class.h:38:
+typedef long long CVT_t;

ERROR:POINTER_LOCATION: "foo *  bar" should be "foo *bar"
#234: FILE: include/linux/class.h:41:
+inline CVT_t *get_class_CVT(struct local_class_queue *  class_queue);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#235: FILE: include/linux/class.h:42:
+inline cp_node_t * get_ecp_queue(struct local_class_queue * $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#235: FILE: include/linux/class.h:42:
+inline cp_node_t * get_ecp_queue(struct local_class_queue * 

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#237: FILE: include/linux/class.h:43:
+inline struct global_class_struct * get_class(int classid);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#238: FILE: include/linux/class.h:44:
+inline struct local_class_queue* get_local_class_queue(int classid, int

ERROR:POINTER_LOCATION: "foo *  bar" should be "foo *bar"
#240: FILE: include/linux/class.h:45:
+inline int get_class_running(struct local_class_queue *  class_queue);

ERROR:POINTER_LOCATION: "foo *  bar" should be "foo *bar"
#241: FILE: include/linux/class.h:46:
+inline int get_class_weight(struct local_class_queue *  class_queue);

ERROR:POINTER_LOCATION: "foo *  bar" should be "foo *bar"
#242: FILE: include/linux/class.h:47:
+inline int get_class_id(struct local_class_queue *  class_queue);

ERROR:POINTER_LOCATION: "foo *  bar" should be "foo *bar"
#243: FILE: include/linux/class.h:48:
+inline int get_class_priority(struct local_class_queue *  class_queue);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#247: FILE: include/linux/class.h:52:
+void enqueue_to_class(struct task_struct* p,int active);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#247: FILE: include/linux/class.h:52:
+void enqueue_to_class(struct task_struct* p,int active);
                                            ^

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#248: FILE: include/linux/class.h:53:
+void dequeue_from_class(struct task_struct* p);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#252: FILE: include/linux/class.h:57:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#253: FILE: include/linux/class.h:58:
+struct task_struct* get_first_job(struct local_class_queue * $

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#253: FILE: include/linux/class.h:58:
+struct task_struct* get_first_job(struct local_class_queue * 

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#255: FILE: include/linux/class.h:59:
+int is_task_active(struct task_struct* p);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#257: FILE: include/linux/class.h:61:
+void update_lCVT(struct task_struct * p, unsigned long dt);

CHECK:CAMELCASE: Avoid CamelCase: <update_lCVT>
#257: FILE: include/linux/class.h:61:
+void update_lCVT(struct task_struct * p, unsigned long dt);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#258: FILE: include/linux/class.h:62:
+inline void update_gCVT(struct local_class_queue* class_queue);

CHECK:CAMELCASE: Avoid CamelCase: <update_gCVT>
#258: FILE: include/linux/class.h:62:
+inline void update_gCVT(struct local_class_queue* class_queue);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#260: FILE: include/linux/class.h:64:
+void check_queue_switch(struct task_struct* p);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#262: FILE: include/linux/class.h:66:
+struct task_struct* find_mp_from_class(struct local_class_queue*

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#264: FILE: include/linux/class.h:67:
+			    struct runqueue* busiest_runqueue,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#267: FILE: include/linux/class.h:70:
+
+

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#269: FILE: include/linux/class.h:72:
+struct task_struct * balance_local_queue(

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#269: FILE: include/linux/class.h:72:
+struct task_struct * balance_local_queue(

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#270: FILE: include/linux/class.h:73:
+	 struct local_class_queue * busiest_queue,

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#271: FILE: include/linux/class.h:74:
+	 struct runqueue* busiest_runqueue,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#272: FILE: include/linux/class.h:75:
+	 struct local_class_queue * this_queue);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#274: FILE: include/linux/class.h:77:
+#define bonus(p) (p->static_prio - p->prio)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'p' may be better as '(p)' to avoid precedence issues
#274: FILE: include/linux/class.h:77:
+#define bonus(p) (p->static_prio - p->prio)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxW)
#275: FILE: include/linux/class.h:78:
+#define process_pressure(p) ( task_timeslice(p) * ( 5- bonus(p) ) )
                                                      ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#275: FILE: include/linux/class.h:78:
+#define process_pressure(p) ( task_timeslice(p) * ( 5- bonus(p) ) )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#275: FILE: include/linux/class.h:78:
+#define process_pressure(p) ( task_timeslice(p) * ( 5- bonus(p) ) )

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#275: FILE: include/linux/class.h:78:
+#define process_pressure(p) ( task_timeslice(p) * ( 5- bonus(p) ) )

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#276: FILE: include/linux/class.h:79:
+struct global_class_struct * __create_class(int class_id,char*

ERROR:SPACING: space required after that ',' (ctx:VxV)
#276: FILE: include/linux/class.h:79:
+struct global_class_struct * __create_class(int class_id,char*
                                                         ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#283: FILE: include/linux/class.h:85:
+/*
+  how many tick is one step?

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:INCLUDE_LINUX: Use #include <linux/bitops.h> instead of <asm/bitops.h>
#293: FILE: include/linux/class.h:95:
+#include <asm/bitops.h>

ERROR:SPACING: space required after that ',' (ctx:VxV)
#298: FILE: include/linux/class.h:100:
+#define ALLOC_MEM(name,type) name = (type *)
                       ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#298: FILE: include/linux/class.h:100:
+#define ALLOC_MEM(name,type) name = (type *)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#300: FILE: include/linux/class.h:101:
+#define ALLOC_MUL_MEM(name,type,num) name = (type *)
                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#300: FILE: include/linux/class.h:101:
+#define ALLOC_MUL_MEM(name,type,num) name = (type *)
                                ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#300: FILE: include/linux/class.h:101:
+#define ALLOC_MUL_MEM(name,type,num) name = (type *)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#302: FILE: include/linux/class.h:102:
+#define ALLOC_MEM_SIZE(name,size) name = alloc_bootmem(size)
                            ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#302: FILE: include/linux/class.h:102:
+#define ALLOC_MEM_SIZE(name,size) name = alloc_bootmem(size)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#303: FILE: include/linux/class.h:103:
+#define KERNEL_ALLOC_MEM(name,type) name = (type *)
                              ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#303: FILE: include/linux/class.h:103:
+#define KERNEL_ALLOC_MEM(name,type) name = (type *)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#306: FILE: include/linux/class.h:105:
+extern int task_interactive(struct task_struct * p);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#306: FILE: include/linux/class.h:105:
+extern int task_interactive(struct task_struct * p);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#327: FILE: include/linux/progress.h:1:
+/* include/linux/progress.h : cpu control for CKRM

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#327: FILE: include/linux/progress.h:1:
+/* include/linux/progress.h : cpu control for CKRM

ERROR:TRAILING_WHITESPACE: trailing whitespace
#331: FILE: include/linux/progress.h:5:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#335: FILE: include/linux/progress.h:9:
+ * $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#357: FILE: include/linux/progress.h:31:
+struct task_struct * get_CF_next(struct bpt_struct* bpt,struct

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#357: FILE: include/linux/progress.h:31:
+struct task_struct * get_CF_next(struct bpt_struct* bpt,struct

ERROR:SPACING: space required after that ',' (ctx:VxV)
#357: FILE: include/linux/progress.h:31:
+struct task_struct * get_CF_next(struct bpt_struct* bpt,struct
                                                        ^

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#359: FILE: include/linux/progress.h:32:
+void update_ecp_pos(struct local_class_queue* class_queue, struct

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#363: FILE: include/linux/progress.h:35:
+inline struct bpt_struct* get_bpt(int cpu_id);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#364: FILE: include/linux/progress.h:36:
+inline void remove_from_bpt(struct bpt_struct* bpt,struct

ERROR:SPACING: space required after that ',' (ctx:VxV)
#364: FILE: include/linux/progress.h:36:
+inline void remove_from_bpt(struct bpt_struct* bpt,struct
                                                   ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#366: FILE: include/linux/progress.h:37:
+struct task_struct * find_mp_from_bpt(struct bpt_struct* bpt,struct

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#366: FILE: include/linux/progress.h:37:
+struct task_struct * find_mp_from_bpt(struct bpt_struct* bpt,struct

ERROR:SPACING: space required after that ',' (ctx:VxV)
#366: FILE: include/linux/progress.h:37:
+struct task_struct * find_mp_from_bpt(struct bpt_struct* bpt,struct
                                                             ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#383: FILE: include/linux/sched.h:464:
+^Ivoid *ckrm_client_data;^I$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#395: FILE: include/linux/sched.h:874:
+int can_migrate_task(struct task_struct * p,struct runqueue *rq,int

ERROR:SPACING: space required after that ',' (ctx:VxV)
#395: FILE: include/linux/sched.h:874:
+int can_migrate_task(struct task_struct * p,struct runqueue *rq,int
                                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#395: FILE: include/linux/sched.h:874:
+int can_migrate_task(struct task_struct * p,struct runqueue *rq,int
                                                                ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#397: FILE: include/linux/sched.h:875:
+inline struct runqueue * get_cpu_rq(int cpu);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#405: FILE: include/linux/zhq_debug.h:1:
+#ifndef ZHQ_DEBUG_H

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#411: FILE: include/linux/zhq_debug.h:7:
+#define  assert(cond) {\
+  if (! cond) {\
+      panic("assertion failed at file: %s line: %d

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'cond' may be better as '(cond)' to avoid precedence issues
#411: FILE: include/linux/zhq_debug.h:7:
+#define  assert(cond) {\
+  if (! cond) {\
+      panic("assertion failed at file: %s line: %d

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#412: FILE: include/linux/zhq_debug.h:8:
+  if (! cond) {\$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#412: FILE: include/linux/zhq_debug.h:8:
+  if (! cond) {\
+      panic("assertion failed at file: %s line: %d

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#412: FILE: include/linux/zhq_debug.h:8:
+  if (! cond) {\
       ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#413: FILE: include/linux/zhq_debug.h:9:
+      panic("assertion failed at file: %s line: %d$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#415: FILE: include/linux/zhq_debug.h:10:
+  }\$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#418: FILE: include/linux/zhq_debug.h:13:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#423: FILE: include/linux/zhq_debug.h:18:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#426: FILE: include/linux/zhq_debug.h:21:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#449: FILE: kernel/circularqueue.c:1:
+/* kernel/circularqueue.c : cpu control for CKRM

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#449: FILE: kernel/circularqueue.c:1:
+/* kernel/circularqueue.c : cpu control for CKRM

ERROR:TRAILING_WHITESPACE: trailing whitespace
#453: FILE: kernel/circularqueue.c:5:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#457: FILE: kernel/circularqueue.c:9:
+ * $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#475: FILE: kernel/circularqueue.c:27:
+/*
+Description:

WARNING:TYPO_SPELLING: 'infinit' may be misspelled - perhaps 'infinite'?
#478: FILE: kernel/circularqueue.c:30:
+-- first think of a buffer with infinit length
                                 ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#499: FILE: kernel/circularqueue.c:49:
+	struct list_head* queues;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#501: FILE: kernel/circularqueue.c:51:
+	unsigned long * bitmap;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#506: FILE: kernel/circularqueue.c:56:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#507: FILE: kernel/circularqueue.c:57:
+^Iint nr_member;^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#510: FILE: kernel/circularqueue.c:60:
+
+

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#511: FILE: kernel/circularqueue.c:61:
+#define BITMAP_SIZE(size) (((size+8)/8+sizeof(long)-1)/sizeof(long))
                                  ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#511: FILE: kernel/circularqueue.c:61:
+#define BITMAP_SIZE(size) (((size+8)/8+sizeof(long)-1)/sizeof(long))
                                     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#511: FILE: kernel/circularqueue.c:61:
+#define BITMAP_SIZE(size) (((size+8)/8+sizeof(long)-1)/sizeof(long))
                                       ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#511: FILE: kernel/circularqueue.c:61:
+#define BITMAP_SIZE(size) (((size+8)/8+sizeof(long)-1)/sizeof(long))
                                                    ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#511: FILE: kernel/circularqueue.c:61:
+#define BITMAP_SIZE(size) (((size+8)/8+sizeof(long)-1)/sizeof(long))
                                                       ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'size' may be better as '(size)' to avoid precedence issues
#511: FILE: kernel/circularqueue.c:61:
+#define BITMAP_SIZE(size) (((size+8)/8+sizeof(long)-1)/sizeof(long))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#512: FILE: kernel/circularqueue.c:62:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#512: FILE: kernel/circularqueue.c:62:
+ $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#514: FILE: kernel/circularqueue.c:64:
+/*
+Description:

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#520: FILE: kernel/circularqueue.c:70:
+struct circularqueue_struct * create_circular_queue(int size) {

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#520: FILE: kernel/circularqueue.c:70:
+struct circularqueue_struct * create_circular_queue(int size) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#524: FILE: kernel/circularqueue.c:74:
+        ALLOC_MEM(cq,struct circularqueue_struct);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#524: FILE: kernel/circularqueue.c:74:
+        ALLOC_MEM(cq,struct circularqueue_struct);$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#524: FILE: kernel/circularqueue.c:74:
+        ALLOC_MEM(cq,struct circularqueue_struct);
                     ^

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#525: FILE: kernel/circularqueue.c:75:
+	if (! cq) {
 	    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#530: FILE: kernel/circularqueue.c:80:
+	ALLOC_MUL_MEM(cq->queues,struct list_head, size);
 	                        ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cq->queues"
#531: FILE: kernel/circularqueue.c:81:
+	if (cq->queues == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:TRAILING_WHITESPACE: trailing whitespace
#535: FILE: kernel/circularqueue.c:85:
+^I$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#536: FILE: kernel/circularqueue.c:86:
+	ALLOC_MEM_SIZE(cq->bitmap,BITMAP_SIZE(size));
 	                         ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cq->bitmap"
#537: FILE: kernel/circularqueue.c:87:
+	if (cq->bitmap == NULL) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#548: FILE: kernel/circularqueue.c:98:
+       $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#548: FILE: kernel/circularqueue.c:98:
+
+       

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#548: FILE: kernel/circularqueue.c:98:
+       $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#557: FILE: kernel/circularqueue.c:107:
+/*
+  return 1 if moved backward

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#559: FILE: kernel/circularqueue.c:109:
+static int check_move_backward(struct circularqueue_struct *cq) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#564: FILE: kernel/circularqueue.c:114:
+	if (list_empty(&cq->queues[end]) ) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#573: FILE: kernel/circularqueue.c:123:
+/*
+  if can move backward a valid pos is [min_pos-1,(min_pos + size -1]

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#576: FILE: kernel/circularqueue.c:126:
+static void validate_pos(struct circularqueue_struct *cq, int* min_pos,

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#576: FILE: kernel/circularqueue.c:126:
+static void validate_pos(struct circularqueue_struct *cq, int* min_pos,
int* pos) {
+	int max_pos;
+
+	if (! cq->nr_member)  return;
+
+	max_pos = *min_pos + cq->size - 1;
+
+	if (*pos > max_pos) *pos = max_pos; 
+	if (*pos < *min_pos) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#578: FILE: kernel/circularqueue.c:127:
+static void validate_pos(struct circularqueue_struct *cq, int* min_pos,
+	int max_pos;

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#580: FILE: kernel/circularqueue.c:129:
+	if (! cq->nr_member)  return;
 	    ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#580: FILE: kernel/circularqueue.c:129:
+	if (! cq->nr_member)  return;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#584: FILE: kernel/circularqueue.c:133:
+^Iif (*pos > max_pos) *pos = max_pos; $

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#584: FILE: kernel/circularqueue.c:133:
+	if (*pos > max_pos) *pos = max_pos; 

WARNING:BRACES: braces {} are not necessary for single statement blocks
#586: FILE: kernel/circularqueue.c:135:
+		if (check_move_backward(cq)) {
+			*min_pos = *min_pos - 1;
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#589: FILE: kernel/circularqueue.c:138:
+^I^I*pos = *min_pos; $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#593: FILE: kernel/circularqueue.c:142:
+static inline int get_absolute_pos(struct circularqueue_struct *cq,int*
                                                                   ^

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#598: FILE: kernel/circularqueue.c:146:
+	if (! cq->nr_member) return 0;
 	    ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#598: FILE: kernel/circularqueue.c:146:
+	if (! cq->nr_member) return 0;

ERROR:SPACING: space required after that ',' (ctx:VxO)
#602: FILE: kernel/circularqueue.c:150:
+	validate_pos(cq,&min_pos,pos);
 	               ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#602: FILE: kernel/circularqueue.c:150:
+	validate_pos(cq,&min_pos,pos);
 	                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#602: FILE: kernel/circularqueue.c:150:
+	validate_pos(cq,&min_pos,pos);
 	                        ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#609: FILE: kernel/circularqueue.c:157:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#611: FILE: kernel/circularqueue.c:159:
+/*
+Description:

ERROR:TRAILING_WHITESPACE: trailing whitespace
#618: FILE: kernel/circularqueue.c:166:
+  the absolute pos is relative to the $

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#623: FILE: kernel/circularqueue.c:171:
+static void addto_circular_queue(struct circularqueue_struct
*cq,cp_node_t* node,int pos) {
+	int real_pos = get_absolute_pos(cq,&pos);
+	
+	if (! cq->nr_member) {

ERROR:SPACING: space required after that ',' (ctx:VxO)
#625: FILE: kernel/circularqueue.c:172:
+	int real_pos = get_absolute_pos(cq,&pos);
 	                                  ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#625: FILE: kernel/circularqueue.c:172:
+	int real_pos = get_absolute_pos(cq,&pos);
 	                                   ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#626: FILE: kernel/circularqueue.c:173:
+^I$

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#627: FILE: kernel/circularqueue.c:174:
+	if (! cq->nr_member) {
 	    ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#627: FILE: kernel/circularqueue.c:174:
+	if (! cq->nr_member) {
+		cq->end = real_pos; //the first one
+	}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#630: FILE: kernel/circularqueue.c:177:
+^I$

ERROR:SPACING: space required after that ',' (ctx:VxO)
#632: FILE: kernel/circularqueue.c:179:
+	list_add(&(node->list),&cq->queues[real_pos]);
 	                      ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#632: FILE: kernel/circularqueue.c:179:
+	list_add(&(node->list),&cq->queues[real_pos]);
 	                       ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around node->list
#632: FILE: kernel/circularqueue.c:179:
+	list_add(&(node->list),&cq->queues[real_pos]);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:SPACING: space required after that ',' (ctx:VxV)
#634: FILE: kernel/circularqueue.c:181:
+	__set_bit(real_pos,cq->bitmap);
 	                  ^

ERROR:SPACING: space prohibited before that '++' (ctx:WxO)
#639: FILE: kernel/circularqueue.c:186:
+	cq->nr_member ++;
 	              ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#643: FILE: kernel/circularqueue.c:190:
+/*
+  if the current end is cleared, move to the next non-cleared end

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#645: FILE: kernel/circularqueue.c:192:
+static void check_update_end(struct circularqueue_struct *cq) {

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#646: FILE: kernel/circularqueue.c:193:
+	if (! cq->nr_member) {
 	    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#652: FILE: kernel/circularqueue.c:199:
+		cq->end = find_next_bit(cq->bitmap,cq->size,cq->end);
 		                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#652: FILE: kernel/circularqueue.c:199:
+		cq->end = find_next_bit(cq->bitmap,cq->size,cq->end);
 		                                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#654: FILE: kernel/circularqueue.c:201:
+			cq->end = find_first_bit(cq->bitmap,cq->size);
 			                                   ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#661: FILE: kernel/circularqueue.c:208:
+}
+/*

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#663: FILE: kernel/circularqueue.c:210:
+void removefrom_circular_queue(struct circularqueue_struct
*cq,cp_node_t* node) {		//delete from node
+	list_del(&(node->list));
+	cq->nr_member --;
+
+	//check clear the bitmap
+	if (list_empty(&cq->queues[node->real_pos])) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around node->list
#665: FILE: kernel/circularqueue.c:211:
+	list_del(&(node->list));

ERROR:SPACING: space prohibited before that '--' (ctx:WxO)
#666: FILE: kernel/circularqueue.c:212:
+	cq->nr_member --;
 	              ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#669: FILE: kernel/circularqueue.c:215:
+	if (list_empty(&cq->queues[node->real_pos])) {
+		__clear_bit(node->real_pos,cq->bitmap);
+	}

ERROR:SPACING: space required after that ',' (ctx:VxV)
#670: FILE: kernel/circularqueue.c:216:
+		__clear_bit(node->real_pos,cq->bitmap);
 		                          ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#676: FILE: kernel/circularqueue.c:222:
+//^Ireport_circular_queue(cq); $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#680: FILE: kernel/circularqueue.c:226:
+/*
+  always adjust the end

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#682: FILE: kernel/circularqueue.c:228:
+void adjust_cq_pos(struct circularqueue_struct *cq,cp_node_t * node,int

ERROR:SPACING: space required after that ',' (ctx:VxV)
#682: FILE: kernel/circularqueue.c:228:
+void adjust_cq_pos(struct circularqueue_struct *cq,cp_node_t * node,int
                                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#682: FILE: kernel/circularqueue.c:228:
+void adjust_cq_pos(struct circularqueue_struct *cq,cp_node_t * node,int
                                                                    ^

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#682: FILE: kernel/circularqueue.c:228:
+void adjust_cq_pos(struct circularqueue_struct *cq,cp_node_t * node,int
new_pos) {
+	int real_pos;
+
+	if (node->real_pos < 0) { //new node

ERROR:SPACING: space required after that ',' (ctx:VxV)
#687: FILE: kernel/circularqueue.c:232:
+		return addto_circular_queue(cq,node,new_pos);
 		                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#687: FILE: kernel/circularqueue.c:232:
+		return addto_circular_queue(cq,node,new_pos);
 		                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#690: FILE: kernel/circularqueue.c:235:
+	real_pos = get_absolute_pos(cq,&new_pos);
 	                              ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#690: FILE: kernel/circularqueue.c:235:
+	real_pos = get_absolute_pos(cq,&new_pos);
 	                               ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around node->list
#693: FILE: kernel/circularqueue.c:238:
+	list_del(&(node->list));

ERROR:SPACING: space required after that ',' (ctx:VxV)
#695: FILE: kernel/circularqueue.c:240:
+		__clear_bit(node->real_pos,cq->bitmap);
 		                          ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#697: FILE: kernel/circularqueue.c:242:
+^I^I$

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#698: FILE: kernel/circularqueue.c:243:
+		
+	}

WARNING:TYPO_SPELLING: 'positon' may be misspelled - perhaps 'position'?
#700: FILE: kernel/circularqueue.c:245:
+	//add to new positon
 	             ^^^^^^^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#701: FILE: kernel/circularqueue.c:246:
+	list_add_tail(&(node->list),&cq->queues[real_pos]);
 	                           ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#701: FILE: kernel/circularqueue.c:246:
+	list_add_tail(&(node->list),&cq->queues[real_pos]);
 	                            ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around node->list
#701: FILE: kernel/circularqueue.c:246:
+	list_add_tail(&(node->list),&cq->queues[real_pos]);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#702: FILE: kernel/circularqueue.c:247:
+	__set_bit(real_pos,cq->bitmap);
 	                  ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#706: FILE: kernel/circularqueue.c:251:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#706: FILE: kernel/circularqueue.c:251:
+
+	

ERROR:TRAILING_WHITESPACE: trailing whitespace
#707: FILE: kernel/circularqueue.c:252:
+^Icheck_update_end(cq);^I$

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#709: FILE: kernel/circularqueue.c:254:
+
+}

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#711: FILE: kernel/circularqueue.c:256:
+cp_node_t * get_first_element(struct circularqueue_struct *cq) {

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#711: FILE: kernel/circularqueue.c:256:
+cp_node_t * get_first_element(struct circularqueue_struct *cq) {

ERROR:POINTER_LOCATION: "foo *  bar" should be "foo *bar"
#712: FILE: kernel/circularqueue.c:257:
+	cp_node_t *  result = NULL;

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#714: FILE: kernel/circularqueue.c:259:
+	if (! list_empty(& cq->queues[cq->end])) {
 	    ^

ERROR:SPACING: space prohibited after that '&' (ctx:BxW)
#714: FILE: kernel/circularqueue.c:259:
+	if (! list_empty(& cq->queues[cq->end])) {
 	                 ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#715: FILE: kernel/circularqueue.c:260:
+^I^Iresult = list_entry(cq->queues[cq->end].next,cp_node_t,list);^I^I$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#715: FILE: kernel/circularqueue.c:260:
+		result = list_entry(cq->queues[cq->end].next,cp_node_t,list);		
 		                                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#715: FILE: kernel/circularqueue.c:260:
+		result = list_entry(cq->queues[cq->end].next,cp_node_t,list);		
 		                                                      ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#717: FILE: kernel/circularqueue.c:262:
+		if (cq->nr_member) {
+			assert(0);
+		}

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#725: FILE: kernel/circularqueue.c:270:
+/*
+  used for iterate

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#735: FILE: kernel/circularqueue.c:280:
+void get_next_element(struct circularqueue_struct *cq,int* last_pos,

ERROR:SPACING: space required after that ',' (ctx:VxV)
#735: FILE: kernel/circularqueue.c:280:
+void get_next_element(struct circularqueue_struct *cq,int* last_pos,
                                                      ^

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#735: FILE: kernel/circularqueue.c:280:
+void get_next_element(struct circularqueue_struct *cq,int* last_pos,
cp_node_t** last_node) {
+	int new_pos;
+	if (*last_pos < 0) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#737: FILE: kernel/circularqueue.c:281:
+void get_next_element(struct circularqueue_struct *cq,int* last_pos,
+	int new_pos;

WARNING:LINE_SPACING: Missing a blank line after declarations
#738: FILE: kernel/circularqueue.c:282:
+	int new_pos;
+	if (*last_pos < 0) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 0)
#742: FILE: kernel/circularqueue.c:286:
+		if (& (cq->queues[*last_pos]) == (*last_node)->list.next) { //end of
list?

ERROR:SPACING: space prohibited after that '&' (ctx:BxW)
#742: FILE: kernel/circularqueue.c:286:
+		if (& (cq->queues[*last_pos]) == (*last_node)->list.next) { //end of
 		    ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around cq->queues[*last_pos]
#742: FILE: kernel/circularqueue.c:286:
+		if (& (cq->queues[*last_pos]) == (*last_node)->list.next) { //end of

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cq->queues[*last_pos]'
#742: FILE: kernel/circularqueue.c:286:
+		if (& (cq->queues[*last_pos]) == (*last_node)->list.next) { //end of

ERROR:SPACING: space required after that ',' (ctx:VxV)
#745: FILE: kernel/circularqueue.c:288:
+			new_pos = find_next_bit(cq->bitmap,cq->size,*last_pos+1);
 			                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#745: FILE: kernel/circularqueue.c:288:
+			new_pos = find_next_bit(cq->bitmap,cq->size,*last_pos+1);
 			                                           ^

ERROR:SPACING: space required before that '*' (ctx:OxV)
#745: FILE: kernel/circularqueue.c:288:
+			new_pos = find_next_bit(cq->bitmap,cq->size,*last_pos+1);
 			                                            ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#745: FILE: kernel/circularqueue.c:288:
+			new_pos = find_next_bit(cq->bitmap,cq->size,*last_pos+1);
 			                                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#747: FILE: kernel/circularqueue.c:290:
+				new_pos = find_first_bit(cq->bitmap,cq->size);
 				                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#753: FILE: kernel/circularqueue.c:296:
+				*last_node = list_entry(cq->queues[*last_pos].next,cp_node_t,list);
 				                                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#753: FILE: kernel/circularqueue.c:296:
+				*last_node = list_entry(cq->queues[*last_pos].next,cp_node_t,list);
 				                                                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#757: FILE: kernel/circularqueue.c:299:
+			*last_node = list_entry((*last_node)->list.next,cp_node_t,list);
 			                                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#757: FILE: kernel/circularqueue.c:299:
+			*last_node = list_entry((*last_node)->list.next,cp_node_t,list);
 			                                                         ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#777: FILE: kernel/class.c:1:
+/* kernel/class.c : cpu control for CKRM

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#777: FILE: kernel/class.c:1:
+/* kernel/class.c : cpu control for CKRM

ERROR:TRAILING_WHITESPACE: trailing whitespace
#781: FILE: kernel/class.c:5:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#782: FILE: kernel/class.c:6:
+ * Main functions, CKRM API functions and proc interface $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#786: FILE: kernel/class.c:10:
+ * $

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#803: FILE: kernel/class.c:27:
+#include <asm/uaccess.h>

CHECK:LINE_SPACING: Please don't use multiple blank lines
#807: FILE: kernel/class.c:31:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#809: FILE: kernel/class.c:33:
+/*
+Description:

WARNING:TYPO_SPELLING: 'propotional' may be misspelled - perhaps 'proportional'?
#810: FILE: kernel/class.c:34:
+   This file holds the code class based propotional sharing
                                         ^^^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#811: FILE: kernel/class.c:35:
+Design:   $

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#819: FILE: kernel/class.c:43:
+#define BITMAP_SIZE ((((MAX_PRIO+1+7)/8)+sizeof(long)-1)/sizeof(long))
                                 ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#819: FILE: kernel/class.c:43:
+#define BITMAP_SIZE ((((MAX_PRIO+1+7)/8)+sizeof(long)-1)/sizeof(long))
                                   ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#819: FILE: kernel/class.c:43:
+#define BITMAP_SIZE ((((MAX_PRIO+1+7)/8)+sizeof(long)-1)/sizeof(long))
                                      ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#819: FILE: kernel/class.c:43:
+#define BITMAP_SIZE ((((MAX_PRIO+1+7)/8)+sizeof(long)-1)/sizeof(long))
                                         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#819: FILE: kernel/class.c:43:
+#define BITMAP_SIZE ((((MAX_PRIO+1+7)/8)+sizeof(long)-1)/sizeof(long))
                                                      ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#819: FILE: kernel/class.c:43:
+#define BITMAP_SIZE ((((MAX_PRIO+1+7)/8)+sizeof(long)-1)/sizeof(long))
                                                         ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#828: FILE: kernel/class.c:52:
+/*
+  per CPU class object

ERROR:TRAILING_WHITESPACE: trailing whitespace
#833: FILE: kernel/class.c:57:
+  -- expire $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#836: FILE: kernel/class.c:60:
+struct local_class_queue {^I$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#839: FILE: kernel/class.c:63:
+	/*
+	  set to 0 on init, become null or array switch

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#845: FILE: kernel/class.c:69:
+	/*
+	  which class this queue belonging to

ERROR:POINTER_LOCATION: "foo  * bar" should be "foo  *bar"
#848: FILE: kernel/class.c:72:
+	struct global_class_struct  * cl;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#849: FILE: kernel/class.c:73:
+	struct bpt_struct * bpt;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#853: FILE: kernel/class.c:77:
+	/*
+	  the highest priority of the processes in the active queue

ERROR:TRAILING_WHITESPACE: trailing whitespace
#860: FILE: kernel/class.c:84:
+^I  a snapshot of gCVT, update on every loadbalance $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#860: FILE: kernel/class.c:84:
+	/*
+	  a snapshot of gCVT, update on every loadbalance 

CHECK:CAMELCASE: Avoid CamelCase: <lCVT>
#862: FILE: kernel/class.c:86:
+	CVT_t lCVT;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#866: FILE: kernel/class.c:90:
+^I  initialized to be 0, $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#866: FILE: kernel/class.c:90:
+	/*
+	  initialized to be 0, 

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#871: FILE: kernel/class.c:95:
+	/*
+	  initialized to be 1

ERROR:TRAILING_WHITESPACE: trailing whitespace
#873: FILE: kernel/class.c:97:
+^I  ++ after each schedule add the ticks^I  $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#877: FILE: kernel/class.c:101:
+	/*
+	  the cpu usage of this local queue (use moving average)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#885: FILE: kernel/class.c:109:
+  $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#885: FILE: kernel/class.c:109:
+  $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#892: FILE: kernel/class.c:116:
+/*
+  manages the class status

ERROR:TRAILING_WHITESPACE: trailing whitespace
#895: FILE: kernel/class.c:118:
+  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#905: FILE: kernel/class.c:128:
+^I/* $

WARNING:TYPO_SPELLING: 'initialied' may be misspelled - perhaps 'initialized'?
#906: FILE: kernel/class.c:129:
+	   initialied to be the min CVT when added to progress_tracker
 	   ^^^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#906: FILE: kernel/class.c:129:
+	/* 
+	   initialied to be the min CVT when added to progress_tracker

CHECK:CAMELCASE: Avoid CamelCase: <gCVT>
#909: FILE: kernel/class.c:132:
+	CVT_t gCVT;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#910: FILE: kernel/class.c:133:
+        /* $

ERROR:CODE_INDENT: code indent should use tabs where possible
#910: FILE: kernel/class.c:133:
+        /* $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#911: FILE: kernel/class.c:134:
+        /* 
+	   protect the access to global CVT

ERROR:TRAILING_WHITESPACE: trailing whitespace
#918: FILE: kernel/class.c:140:
+^Istruct local_class_queue local_queues[NR_CPUS];^I$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#922: FILE: kernel/class.c:144:
+/*
+   add/remove class should be very infrequent

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#926: FILE: kernel/class.c:148:
+struct global_class_struct * system_classes[MAX_CLASS_NUM];

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#929: FILE: kernel/class.c:151:
+/*
+  manage the max_CVT

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#933: FILE: kernel/class.c:155:
+static CVT_t max_CVT = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#955: FILE: kernel/class.c:175:
+} $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#959: FILE: kernel/class.c:179:
+/*
+Description:

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#965: FILE: kernel/class.c:184:
+static void init_local_queue(struct local_class_queue * queue,struct

ERROR:SPACING: space required after that ',' (ctx:VxV)
#965: FILE: kernel/class.c:184:
+static void init_local_queue(struct local_class_queue * queue,struct
                                                              ^

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#965: FILE: kernel/class.c:184:
+static void init_local_queue(struct local_class_queue * queue,struct
global_class_struct * cl,int cpu_id) {
+	int j,k;      
+	prio_array_t *array; 	
+
+	queue->active = queue->arrays;
+	queue->expired = queue->arrays+1;
+
+	for (j = 0; j < 2; j++) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#967: FILE: kernel/class.c:185:
+^Iint j,k;      $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#967: FILE: kernel/class.c:185:
+	int j,k;      
 	     ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#968: FILE: kernel/class.c:186:
+^Iprio_array_t *array; ^I$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#968: FILE: kernel/class.c:186:
+^Iprio_array_t *array; ^I$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#971: FILE: kernel/class.c:189:
+	queue->expired = queue->arrays+1;
 	                              ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1000: FILE: kernel/class.c:218:
+/*
+Description:

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1012: FILE: kernel/class.c:230:
+struct global_class_struct * __create_class(int class_id,char*

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1012: FILE: kernel/class.c:230:
+struct global_class_struct * __create_class(int class_id,char*
                                                         ^

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#1012: FILE: kernel/class.c:230:
+struct global_class_struct * __create_class(int class_id,char*
classname,int weight,int init) {
+	struct global_class_struct * cl;
+	int i;
+
+	if (system_classes[class_id]) {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1014: FILE: kernel/class.c:231:
+	struct global_class_struct * cl;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1018: FILE: kernel/class.c:235:
+		debug_info1("class %d already exists\n",class_id);
 		                                       ^

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#1022: FILE: kernel/class.c:239:
+	if (init) {
[...]
+	} else {
[...]

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1023: FILE: kernel/class.c:240:
+		ALLOC_MEM(cl,struct global_class_struct);
 		            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1025: FILE: kernel/class.c:242:
+		KERNEL_ALLOC_MEM(cl,struct global_class_struct);
 		                   ^

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#1028: FILE: kernel/class.c:245:
+	if (! cl) {
 	    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1038: FILE: kernel/class.c:255:
+	strcpy(cl->name,classname);
 	               ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1042: FILE: kernel/class.c:259:
+	for (i=0; i< NR_CPUS; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxW)
#1042: FILE: kernel/class.c:259:
+	for (i=0; i< NR_CPUS; i++) {
 	           ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1042: FILE: kernel/class.c:259:
+	for (i=0; i< NR_CPUS; i++) {
+		init_local_queue(&(cl->local_queues[i]),cl,i);
+	}

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1042: FILE: kernel/class.c:259:
+	for (i=0; i< NR_CPUS; i++) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1043: FILE: kernel/class.c:260:
+		init_local_queue(&(cl->local_queues[i]),cl,i);
 		                                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1043: FILE: kernel/class.c:260:
+		init_local_queue(&(cl->local_queues[i]),cl,i);
 		                                          ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around cl->local_queues[i]
#1043: FILE: kernel/class.c:260:
+		init_local_queue(&(cl->local_queues[i]),cl,i);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1046: FILE: kernel/class.c:263:
+^Isystem_classes[class_id] = cl;^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1047: FILE: kernel/class.c:264:
+^I$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1051: FILE: kernel/class.c:268:
+inline struct global_class_struct * get_class(int class_id) {

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#1051: FILE: kernel/class.c:268:
+inline struct global_class_struct * get_class(int class_id) {

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#1055: FILE: kernel/class.c:272:
+inline void class_add_member(int class_id) {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1056: FILE: kernel/class.c:273:
+	struct global_class_struct * cl = get_class(class_id);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1057: FILE: kernel/class.c:274:
+	struct global_class_struct * cl = get_class(class_id);
+	atomic_inc(&cl->nr_member);

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#1060: FILE: kernel/class.c:277:
+inline void class_remove_member(int class_id) {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1061: FILE: kernel/class.c:278:
+	struct global_class_struct * cl = get_class(class_id);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1062: FILE: kernel/class.c:279:
+	struct global_class_struct * cl = get_class(class_id);
+	atomic_dec(&cl->nr_member);

ERROR:POINTER_LOCATION: "foo *  bar" should be "foo *bar"
#1067: FILE: kernel/class.c:284:
+static void sample_local_queue(struct local_class_queue *  class_queue)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1070: FILE: kernel/class.c:286:
+	int tick = class_queue->ticks;
+	if (tick > CLASS_SAMPLE_RATE) tick = CLASS_SAMPLE_RATE;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1070: FILE: kernel/class.c:286:
+	if (tick > CLASS_SAMPLE_RATE) tick = CLASS_SAMPLE_RATE;

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#1073: FILE: kernel/class.c:289:
+	if (! class_queue->cpu_usage) class_queue->cpu_usage = 1;
 	    ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1073: FILE: kernel/class.c:289:
+	if (! class_queue->cpu_usage) class_queue->cpu_usage = 1;

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#1077: FILE: kernel/class.c:293:
+void sample_classes(int cpu) {

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1081: FILE: kernel/class.c:297:
+	for (i=0; i< MAX_CLASS_NUM;i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxW)
#1081: FILE: kernel/class.c:297:
+	for (i=0; i< MAX_CLASS_NUM;i++) {
 	           ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#1081: FILE: kernel/class.c:297:
+	for (i=0; i< MAX_CLASS_NUM;i++) {
 	                          ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1082: FILE: kernel/class.c:298:
+^I^Icl = system_classes[i]; $

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1083: FILE: kernel/class.c:299:
+		if (cl != NULL) {
+			sample_local_queue(&(cl->local_queues[cpu]));
+		}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cl"
#1083: FILE: kernel/class.c:299:
+		if (cl != NULL) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around cl->local_queues[cpu]
#1084: FILE: kernel/class.c:300:
+			sample_local_queue(&(cl->local_queues[cpu]));

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1089: FILE: kernel/class.c:305:
+inline struct local_class_queue* get_local_class_queue(int classid, int

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1094: FILE: kernel/class.c:309:
+static inline struct local_class_queue* get_process_class_queue(struct

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1099: FILE: kernel/class.c:313:
+void update_lCVT(struct task_struct * p, unsigned long dt) {^I$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1099: FILE: kernel/class.c:313:
+void update_lCVT(struct task_struct * p, unsigned long dt) {	

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#1099: FILE: kernel/class.c:313:
+void update_lCVT(struct task_struct * p, unsigned long dt) {	

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1100: FILE: kernel/class.c:314:
+	struct local_class_queue* class_queue = get_process_class_queue(p);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1101: FILE: kernel/class.c:315:
+	struct global_class_struct * gc = class_queue->cl;

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1103: FILE: kernel/class.c:317:
+	long long cvt_inc = (dt << CVT_ACCURACY)/gc->weight;
 	                                        ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1110: FILE: kernel/class.c:324:
+	if (class_queue->nr_running) {
+		update_ecp_pos(class_queue,class_queue->bpt);	
+	}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1111: FILE: kernel/class.c:325:
+^I^Iupdate_ecp_pos(class_queue,class_queue->bpt);^I$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1111: FILE: kernel/class.c:325:
+		update_ecp_pos(class_queue,class_queue->bpt);	
 		                          ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1119: FILE: kernel/class.c:333:
+/*
+  called before its switch out

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1122: FILE: kernel/class.c:336:
+inline void update_gCVT(struct local_class_queue* class_queue) {^I$

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1122: FILE: kernel/class.c:336:
+inline void update_gCVT(struct local_class_queue* class_queue) {	

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#1122: FILE: kernel/class.c:336:
+inline void update_gCVT(struct local_class_queue* class_queue) {	

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1123: FILE: kernel/class.c:337:
+	struct global_class_struct * gc = class_queue->cl;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1124: FILE: kernel/class.c:338:
+	struct global_class_struct * gc = class_queue->cl;
+	spin_lock(&gc->cvt_lock);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1133: FILE: kernel/class.c:347:
+	if (class_queue->nr_running) {
+		update_ecp_pos(class_queue,class_queue->bpt);	
+	}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1134: FILE: kernel/class.c:348:
+^I^Iupdate_ecp_pos(class_queue,class_queue->bpt);^I$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1134: FILE: kernel/class.c:348:
+		update_ecp_pos(class_queue,class_queue->bpt);	
 		                          ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1137: FILE: kernel/class.c:351:
+
+

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1140: FILE: kernel/class.c:354:
+	if (gc->gCVT > max_CVT) {
+		max_CVT = gc->gCVT;
+	}

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1146: FILE: kernel/class.c:360:
+inline CVT_t* get_class_CVT(struct local_class_queue *  class_queue) {

ERROR:POINTER_LOCATION: "foo *  bar" should be "foo *bar"
#1146: FILE: kernel/class.c:360:
+inline CVT_t* get_class_CVT(struct local_class_queue *  class_queue) {

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#1146: FILE: kernel/class.c:360:
+inline CVT_t* get_class_CVT(struct local_class_queue *  class_queue) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around class_queue->lCVT
#1148: FILE: kernel/class.c:362:
+	return &(class_queue->lCVT);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around class_queue->cl->gCVT
#1150: FILE: kernel/class.c:364:
+	return &(class_queue->cl->gCVT);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1155: FILE: kernel/class.c:369:
+/*
+Description:

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1158: FILE: kernel/class.c:372:
+     $

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1160: FILE: kernel/class.c:374:
+static void set_top_priority(struct local_class_queue* class_queue, int

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#1160: FILE: kernel/class.c:374:
+static void set_top_priority(struct local_class_queue* class_queue, int
new_priority) {
+	class_queue->top_priority = new_priority;
+	update_ecp_pos(class_queue,class_queue->bpt);	
+}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1163: FILE: kernel/class.c:376:
+^Iupdate_ecp_pos(class_queue,class_queue->bpt);^I$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1163: FILE: kernel/class.c:376:
+	update_ecp_pos(class_queue,class_queue->bpt);	
 	                          ^

ERROR:POINTER_LOCATION: "foo *  bar" should be "foo *bar"
#1166: FILE: kernel/class.c:379:
+inline int get_class_priority(struct local_class_queue *  class_queue)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1172: FILE: kernel/class.c:384:
+/*
+  get the job with the highest priority

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1174: FILE: kernel/class.c:386:
+#define task_list_entry(list) list_entry(list,struct
                                              ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1176: FILE: kernel/class.c:387:
+struct task_struct* get_first_job(struct local_class_queue * $

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1176: FILE: kernel/class.c:387:
+struct task_struct* get_first_job(struct local_class_queue * 

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#1176: FILE: kernel/class.c:387:
+struct task_struct* get_first_job(struct local_class_queue * 
class_queue) {
+	prio_array_t *array = class_queue->active;
+	struct task_struct* p;
+	
+	if (! array->nr_active) return NULL;
+
+	/*
+	  top_priority should be valid here	  
+	 */
+	if (class_queue->top_priority >= MAX_PRIO) {

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1179: FILE: kernel/class.c:389:
+	struct task_struct* p;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1180: FILE: kernel/class.c:390:
+^I$

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#1181: FILE: kernel/class.c:391:
+	if (! array->nr_active) return NULL;
 	    ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1181: FILE: kernel/class.c:391:
+	if (! array->nr_active) return NULL;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1184: FILE: kernel/class.c:394:
+^I  top_priority should be valid here^I  $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1184: FILE: kernel/class.c:394:
+	/*
+	  top_priority should be valid here	  

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1187: FILE: kernel/class.c:397:
+		panic("magic=%x top_priority=%d active=%d nr_running=%d\n",(unsigned
 		                                                          ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1191: FILE: kernel/class.c:400:
+^Ip = task_list_entry(array->queue[class_queue->top_priority].next);^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1196: FILE: kernel/class.c:405:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1198: FILE: kernel/class.c:407:
+/*
+Design:

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1203: FILE: kernel/class.c:411:
+  $

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1205: FILE: kernel/class.c:413:
+static void check_classqueue_switch(struct local_class_queue* queue) {

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#1205: FILE: kernel/class.c:413:
+static void check_classqueue_switch(struct local_class_queue* queue) {

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#1206: FILE: kernel/class.c:414:
+	if (! queue->active->nr_active && queue->expired->nr_active) {
 	    ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1215: FILE: kernel/class.c:423:
+^I^I$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1220: FILE: kernel/class.c:428:
+		set_top_priority(queue,new_top);
 		                      ^

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#1224: FILE: kernel/class.c:432:
+void check_queue_switch(struct task_struct *p) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1230: FILE: kernel/class.c:438:
+/*
+  check gCVT is valid here

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1232: FILE: kernel/class.c:440:
+  $

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1235: FILE: kernel/class.c:443:
+static void init_cvt(struct local_class_queue* class_queue) {

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#1235: FILE: kernel/class.c:443:
+static void init_cvt(struct local_class_queue* class_queue) {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1236: FILE: kernel/class.c:444:
+	struct global_class_struct * gc = class_queue->cl;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1240: FILE: kernel/class.c:448:
+//^ICVT -= INTERACTIVE_ADVANCE/ queue->cl->weight;^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1244: FILE: kernel/class.c:451:
+^Ispin_lock(&gc->cvt_lock);^I$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1245: FILE: kernel/class.c:452:
+	if (gc->gCVT < CVT) {
+		gc->gCVT = CVT;
+	}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1249: FILE: kernel/class.c:456:
+^Ispin_unlock(&gc->cvt_lock);^I$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1251: FILE: kernel/class.c:458:
+}
+/*

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1252: FILE: kernel/class.c:459:
+/*
+Description:

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1257: FILE: kernel/class.c:464:
+  get the queue $

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1261: FILE: kernel/class.c:467:
+void enqueue_to_class(struct task_struct* p,int active) {

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#1261: FILE: kernel/class.c:467:
+void enqueue_to_class(struct task_struct* p,int active) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1261: FILE: kernel/class.c:467:
+void enqueue_to_class(struct task_struct* p,int active) {
                                            ^

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1262: FILE: kernel/class.c:468:
+	struct local_class_queue* queue = get_process_class_queue(p);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1264: FILE: kernel/class.c:470:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1267: FILE: kernel/class.c:473:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1268: FILE: kernel/class.c:474:
+^Iqueue->nr_running ++;^I$

ERROR:SPACING: space prohibited before that '++' (ctx:WxO)
#1268: FILE: kernel/class.c:474:
+	queue->nr_running ++;	
 	                  ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1270: FILE: kernel/class.c:476:
+^I^Iactive = 1; //always insert to active queue for the first job^I^I$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1275: FILE: kernel/class.c:481:
+		update_ecp_pos(queue,queue->bpt);
 		                    ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1277: FILE: kernel/class.c:483:
+		if (active && p->prio < queue->top_priority) {
+			set_top_priority(queue,p->prio);
+		}	

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1278: FILE: kernel/class.c:484:
+			set_top_priority(queue,p->prio);
 			                      ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1279: FILE: kernel/class.c:485:
+^I^I}^I$

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#1282: FILE: kernel/class.c:488:
+	if (active) {
[...]
+	} else {
[...]

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1283: FILE: kernel/class.c:489:
+		enqueue_task(p,queue->active);
 		              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1285: FILE: kernel/class.c:491:
+		enqueue_task(p,queue->expired);
 		              ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1292: FILE: kernel/class.c:498:
+/*
+  should switch between active and expired if no more process is active

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1294: FILE: kernel/class.c:500:
+void dequeue_from_class(struct task_struct* p) {

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#1294: FILE: kernel/class.c:500:
+void dequeue_from_class(struct task_struct* p) {

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1295: FILE: kernel/class.c:501:
+	struct local_class_queue* queue = get_process_class_queue(p);

ERROR:SPACING: space prohibited before that '--' (ctx:WxO)
#1302: FILE: kernel/class.c:508:
+	queue->nr_running --;
 	                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1303: FILE: kernel/class.c:509:
+	dequeue_task(p,p->array);
 	              ^

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#1305: FILE: kernel/class.c:511:
+	if (! queue->nr_running) { //last job deleted
 	    ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1306: FILE: kernel/class.c:512:
+^I^Iremove_from_bpt(queue->bpt,queue);^I       $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1306: FILE: kernel/class.c:512:
+		remove_from_bpt(queue->bpt,queue);	       
 		                          ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1311: FILE: kernel/class.c:516:
+			if (p->prio == queue->top_priority &&
+				new_top = find_next_bit(queue->active->bitmap, MAX_PRIO,p->prio);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1311: FILE: kernel/class.c:516:
+				new_top = find_next_bit(queue->active->bitmap, MAX_PRIO,p->prio);
 				                                                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1315: FILE: kernel/class.c:520:
+				set_top_priority(queue,new_top);
 				                      ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1316: FILE: kernel/class.c:521:
+^I^I^I}^I$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1326: FILE: kernel/class.c:531:
+/*
+  initialize the class structure

ERROR:FUNCTION_WITHOUT_ARGS: Bad function definition - void init_classes() should probably be void init_classes(void)
#1330: FILE: kernel/class.c:535:
+void init_classes() {

Function declarations without arguments like::

  int foo()

should be::

  int foo(void)

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#1330: FILE: kernel/class.c:535:
+void init_classes() {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1332: FILE: kernel/class.c:537:
+	int i;
+	for (i=0; i< MAX_CLASS_NUM;i++) system_classes[i] = NULL;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1332: FILE: kernel/class.c:537:
+	for (i=0; i< MAX_CLASS_NUM;i++) system_classes[i] = NULL;
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxW)
#1332: FILE: kernel/class.c:537:
+	for (i=0; i< MAX_CLASS_NUM;i++) system_classes[i] = NULL;
 	           ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#1332: FILE: kernel/class.c:537:
+	for (i=0; i< MAX_CLASS_NUM;i++) system_classes[i] = NULL;
 	                          ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1332: FILE: kernel/class.c:537:
+	for (i=0; i< MAX_CLASS_NUM;i++) system_classes[i] = NULL;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1337: FILE: kernel/class.c:542:
+	__create_class(0,"Default",100,1);
 	                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1337: FILE: kernel/class.c:542:
+	__create_class(0,"Default",100,1);
 	                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1337: FILE: kernel/class.c:542:
+	__create_class(0,"Default",100,1);
 	                              ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1340: FILE: kernel/class.c:545:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1343: FILE: kernel/class.c:548:
+/*
+Design:

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1346: FILE: kernel/class.c:551:
+  $

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1348: FILE: kernel/class.c:553:
+int is_task_active(struct task_struct* p) {

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#1348: FILE: kernel/class.c:553:
+int is_task_active(struct task_struct* p) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1349: FILE: kernel/class.c:554:
+^Istruct local_class_queue* queue = get_process_class_queue(p);^I$

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1349: FILE: kernel/class.c:554:
+	struct local_class_queue* queue = get_process_class_queue(p);	

WARNING:LINE_SPACING: Missing a blank line after declarations
#1350: FILE: kernel/class.c:555:
+	struct local_class_queue* queue = get_process_class_queue(p);	
+	return (p->array == queue->active);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1353: FILE: kernel/class.c:558:
+
+

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1364: FILE: kernel/class.c:569:
+#define STARVATION_LIMIT	(10*HZ)
                         	   ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'rq' - possible side-effects?
#1365: FILE: kernel/class.c:570:
+#define EXPIRED_STARVING(rq) \
+		(STARVATION_LIMIT && ((rq)->expired_timestamp && \
+		(jiffies - (rq)->expired_timestamp >= \
+			STARVATION_LIMIT * ((rq)->nr_running) + 1)))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1370: FILE: kernel/class.c:575:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1372: FILE: kernel/class.c:577:
+/*
+Description:

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#1378: FILE: kernel/class.c:583:
+int check_interactive_starving(struct task_struct *p) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1379: FILE: kernel/class.c:584:
+^Istruct local_class_queue* rq = get_process_class_queue(p);^I$

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1379: FILE: kernel/class.c:584:
+	struct local_class_queue* rq = get_process_class_queue(p);	

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1382: FILE: kernel/class.c:587:
+	if (!task_interactive(p) || EXPIRED_STARVING(rq)) {
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1386: FILE: kernel/class.c:591:
+^I^I$

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1387: FILE: kernel/class.c:592:
+		
+	}

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1392: FILE: kernel/class.c:597:
+/*
+Description:

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1397: FILE: kernel/class.c:602:
+task_t * find_mp_from_class(struct local_class_queue* busiest,^I $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1397: FILE: kernel/class.c:602:
+task_t * find_mp_from_class(struct local_class_queue* busiest,	 

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1397: FILE: kernel/class.c:602:
+task_t * find_mp_from_class(struct local_class_queue* busiest,	 

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#1397: FILE: kernel/class.c:602:
+task_t * find_mp_from_class(struct local_class_queue* busiest,	 
+			    struct runqueue* busiest_runqueue,
+			    int imbalance) 
+	{

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1398: FILE: kernel/class.c:603:
+			    struct runqueue* busiest_runqueue,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1399: FILE: kernel/class.c:604:
+^I^I^I    int imbalance) $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1402: FILE: kernel/class.c:607:
+	task_t * tmp = NULL;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1433: FILE: kernel/class.c:638:
+^I$

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#1434: FILE: kernel/class.c:639:
+	if (! can_migrate_task(tmp,busiest_runqueue,smp_processor_id()) ||
 	    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1434: FILE: kernel/class.c:639:
+	if (! can_migrate_task(tmp,busiest_runqueue,smp_processor_id()) ||
 	                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1434: FILE: kernel/class.c:639:
+	if (! can_migrate_task(tmp,busiest_runqueue,smp_processor_id()) ||
 	                                           ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1436: FILE: kernel/class.c:640:
+	if (! can_migrate_task(tmp,busiest_runqueue,smp_processor_id()) ||
+		if (curr != head)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1445: FILE: kernel/class.c:649:
+inline cp_node_t * get_ecp_queue(struct local_class_queue * $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1445: FILE: kernel/class.c:649:
+inline cp_node_t * get_ecp_queue(struct local_class_queue * 

ERROR:POINTER_LOCATION: "foo *  bar" should be "foo *bar"
#1450: FILE: kernel/class.c:653:
+inline int get_class_running(struct local_class_queue *  class_queue) {

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#1450: FILE: kernel/class.c:653:
+inline int get_class_running(struct local_class_queue *  class_queue) {

ERROR:POINTER_LOCATION: "foo *  bar" should be "foo *bar"
#1454: FILE: kernel/class.c:657:
+inline int get_class_weight(struct local_class_queue *  class_queue) {

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#1454: FILE: kernel/class.c:657:
+inline int get_class_weight(struct local_class_queue *  class_queue) {

ERROR:POINTER_LOCATION: "foo *  bar" should be "foo *bar"
#1458: FILE: kernel/class.c:661:
+inline int get_class_id(struct local_class_queue *  class_queue) {

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#1458: FILE: kernel/class.c:661:
+inline int get_class_id(struct local_class_queue *  class_queue) {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1462: FILE: kernel/class.c:665:
+inline int get_local_queue_pressure(struct local_class_queue * queue) {

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#1462: FILE: kernel/class.c:665:
+inline int get_local_queue_pressure(struct local_class_queue * queue) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1467: FILE: kernel/class.c:670:
+/*
+  optimized

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#1469: FILE: kernel/class.c:672:
+inline int get_queue_pressure_byid(int class_id, int cpu) {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1470: FILE: kernel/class.c:673:
+	struct local_class_queue * queue =

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1475: FILE: kernel/class.c:677:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1477: FILE: kernel/class.c:679:
+/*
+  check if the pressure is different enough

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1481: FILE: kernel/class.c:683:
+ struct task_struct * balance_local_queue($

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1481: FILE: kernel/class.c:683:
+ struct task_struct * balance_local_queue(

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1481: FILE: kernel/class.c:683:
+ struct task_struct * balance_local_queue(

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1482: FILE: kernel/class.c:684:
+	 struct local_class_queue * busiest_queue,

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1483: FILE: kernel/class.c:685:
+	 struct runqueue* busiest_runqueue,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1484: FILE: kernel/class.c:686:
+^I struct local_class_queue * this_queue) $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1484: FILE: kernel/class.c:686:
+	 struct local_class_queue * this_queue) 

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1486: FILE: kernel/class.c:688:
+{
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1487: FILE: kernel/class.c:689:
+	struct task_struct * result = NULL;

CHECK:SPACING: spaces preferred around that '/' (ctx:WxV)
#1491: FILE: kernel/class.c:693:
+	int ratio = CLASS_SAMPLE_RATE /busiest_queue->cpu_usage +
 	                              ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1494: FILE: kernel/class.c:695:
+	if (busiest_queue == this_queue) return NULL;

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1499: FILE: kernel/class.c:700:
+	imbalance = (max_pressure - this_pressure)/ratio;
 	                                          ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1506: FILE: kernel/class.c:706:
+^I$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1512: FILE: kernel/class.c:711:
+/*************************** code for proc file
+/*

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1513: FILE: kernel/class.c:712:
+/*
+  should I allow change the class of the current process?

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#1516: FILE: kernel/class.c:715:
+long set_class(int pid, int class_id) {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1517: FILE: kernel/class.c:716:
+	struct task_struct * p = NULL;

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#1519: FILE: kernel/class.c:718:
+	if (pid == 0) {
[...]
+	} else {
[...]

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#1525: FILE: kernel/class.c:724:
+	if (! p) {
 	    ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1525: FILE: kernel/class.c:724:
+	if (! p) {
+		return -1;
+	}

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#1529: FILE: kernel/class.c:728:
+	if (! system_classes[class_id]) {
 	    ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1529: FILE: kernel/class.c:728:
+	if (! system_classes[class_id]) {
+		return -2;
+	}

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1534: FILE: kernel/class.c:733:
+	/*
+	  well, the process will remain in the same cpu

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1543: FILE: kernel/class.c:742:
+^Istruct runqueue * rq =  task_rq_lock(p,&flags); $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1543: FILE: kernel/class.c:742:
+	struct runqueue * rq =  task_rq_lock(p,&flags); 

ERROR:SPACING: space required after that ',' (ctx:VxO)
#1543: FILE: kernel/class.c:742:
+	struct runqueue * rq =  task_rq_lock(p,&flags); 
 	                                      ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#1543: FILE: kernel/class.c:742:
+	struct runqueue * rq =  task_rq_lock(p,&flags); 
 	                                       ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1544: FILE: kernel/class.c:743:
+	struct runqueue * rq =  task_rq_lock(p,&flags); 
+	if (p->array) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1547: FILE: kernel/class.c:746:
+		enqueue_to_class(p,1);
 		                  ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#1551: FILE: kernel/class.c:750:
+	task_rq_unlock(rq,&flags);
 	                 ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#1551: FILE: kernel/class.c:750:
+	task_rq_unlock(rq,&flags);
 	                  ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1552: FILE: kernel/class.c:751:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1556: FILE: kernel/class.c:755:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1558: FILE: kernel/class.c:757:
+/*
+  return all the classes

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1560: FILE: kernel/class.c:759:
+int get_classes_list(char * buf) {

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#1560: FILE: kernel/class.c:759:
+int get_classes_list(char * buf) {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1563: FILE: kernel/class.c:762:
+	struct global_class_struct * cl;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1565: FILE: kernel/class.c:764:
+
+

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1569: FILE: kernel/class.c:768:
+			len += sprintf(buf+len, "%d %s\t%d %llu %d\n",
 			                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1570: FILE: kernel/class.c:769:
+				       cl->class_id,cl->name,cl->weight,
 				                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1570: FILE: kernel/class.c:769:
+				       cl->class_id,cl->name,cl->weight,
 				                            ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1571: FILE: kernel/class.c:770:
+^I^I^I^I       cl->gCVT,cl->local_queues[0].nr_running^I^I^I^I       $

WARNING:LONG_LINE: line length of 111 exceeds 100 columns
#1571: FILE: kernel/class.c:770:
+				       cl->gCVT,cl->local_queues[0].nr_running				       

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1571: FILE: kernel/class.c:770:
+				       cl->gCVT,cl->local_queues[0].nr_running				       
 				               ^

ERROR:SPACING: space prohibited before that '++' (ctx:WxO)
#1574: FILE: kernel/class.c:773:
+		class_id ++;
 		         ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1579: FILE: kernel/class.c:778:
+
+

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1591: FILE: kernel/class.c:789:
+		seq_puts(m, "#input format: \n");
 		                          ^

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1591: FILE: kernel/class.c:789:
+		seq_puts(m, "#input format: \n");

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1592: FILE: kernel/class.c:790:
+		seq_puts(m, "# (add class): 1 classid weight name\n");
 		                          ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1593: FILE: kernel/class.c:791:
+		seq_puts(m, "# (set class): 2 classid pid 0\n");
 		                          ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1602: FILE: kernel/class.c:800:
+{^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1611: FILE: kernel/class.c:809:
+
+

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#1615: FILE: kernel/class.c:813:
+			seq_printf(m, "%d %s\t%d %llu %d\n",
 			               ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#1615: FILE: kernel/class.c:813:
+			seq_printf(m, "%d %s\t%d %llu %d\n",
 			                  ^

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#1615: FILE: kernel/class.c:813:
+			seq_printf(m, "%d %s\t%d %llu %d\n",
 			                      ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#1615: FILE: kernel/class.c:813:
+			seq_printf(m, "%d %s\t%d %llu %d\n",
 			                         ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#1615: FILE: kernel/class.c:813:
+			seq_printf(m, "%d %s\t%d %llu %d\n",
 			                              ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1617: FILE: kernel/class.c:815:
+^I^I^I^I       cl->gCVT,cl->local_queues[0].nr_running^I^I^I^I       $

WARNING:LONG_LINE: line length of 111 exceeds 100 columns
#1617: FILE: kernel/class.c:815:
+				       cl->gCVT,cl->local_queues[0].nr_running				       

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1640: FILE: kernel/class.c:838:
+ * classes_write - update classes setting$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1641: FILE: kernel/class.c:839:
+ * @file: unused$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1642: FILE: kernel/class.c:840:
+ * @buffer: user buffer$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1643: FILE: kernel/class.c:841:
+ * @count: data len$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1644: FILE: kernel/class.c:842:
+ * @data: unused$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1645: FILE: kernel/class.c:843:
+ */$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1653: FILE: kernel/class.c:851:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1658: FILE: kernel/class.c:856:
+^Ikbuf[MAX_CLASSES_WRITE] = '\0'; $

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#1660: FILE: kernel/class.c:858:
+	if (sscanf(kbuf, "%d %d %d %s", &cmd, &classid, &weight, name) != 4)
 	                  ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#1660: FILE: kernel/class.c:858:
+	if (sscanf(kbuf, "%d %d %d %s", &cmd, &classid, &weight, name) != 4)
 	                     ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#1660: FILE: kernel/class.c:858:
+	if (sscanf(kbuf, "%d %d %d %s", &cmd, &classid, &weight, name) != 4)
 	                        ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#1660: FILE: kernel/class.c:858:
+	if (sscanf(kbuf, "%d %d %d %s", &cmd, &classid, &weight, name) != 4)
 	                           ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1666: FILE: kernel/class.c:864:
+^I} $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1675: FILE: kernel/class.c:873:
+
+

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1680: FILE: kernel/class.c:878:
+  return the first empty slot$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1681: FILE: kernel/class.c:879:
+  return -1 if not found$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1682: FILE: kernel/class.c:880:
+ */$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1694: FILE: kernel/class.c:892:
+^Ireturn class_id;^I$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1698: FILE: kernel/class.c:896:
+   create a default object$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1699: FILE: kernel/class.c:897:
+   status: test$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1700: FILE: kernel/class.c:898:
+ */$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1701: FILE: kernel/class.c:899:
+struct ckrm_cpu_class *ckrm_alloc_cpu_class(void *obj) {^I^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1703: FILE: kernel/class.c:901:
+        static int DEFAULT_CLASS_WEIGHT = 100;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1703: FILE: kernel/class.c:901:
+        static int DEFAULT_CLASS_WEIGHT = 100;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1706: FILE: kernel/class.c:904:
+^Ireturn __create_class(class_id,"ckrm_class",DEFAULT_CLASS_WEIGHT,0);^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1707: FILE: kernel/class.c:905:
+}^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1708: FILE: kernel/class.c:906:
+^I^I$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1710: FILE: kernel/class.c:908:
+  can't remove the default class$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1711: FILE: kernel/class.c:909:
+  can't remove the class if there still exist processes associated with$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1713: FILE: kernel/class.c:910:
+  $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1713: FILE: kernel/class.c:910:
+  $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1714: FILE: kernel/class.c:911:
+  if the class object is already stand alone, simply remove it$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1715: FILE: kernel/class.c:912:
+ */^I^I^I^I^I^I$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1715: FILE: kernel/class.c:912:
+ */^I^I^I^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1716: FILE: kernel/class.c:913:
+int ckrm_free_cpu_class(struct ckrm_cpu_class *cls) {^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1723: FILE: kernel/class.c:920:
+^Isystem_classes[cls->class_id] = NULL;^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1727: FILE: kernel/class.c:924:
+        return 0;^I^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1727: FILE: kernel/class.c:924:
+        return 0;^I^I$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1727: FILE: kernel/class.c:924:
+        return 0;^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1728: FILE: kernel/class.c:925:
+}^I^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1729: FILE: kernel/class.c:926:
+^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1731: FILE: kernel/class.c:928:
+   the system will adjust to the new share automatically  $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1731: FILE: kernel/class.c:928:
+   the system will adjust to the new share automatically  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1732: FILE: kernel/class.c:929:
+ */^I^I^I$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1732: FILE: kernel/class.c:929:
+ */^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1733: FILE: kernel/class.c:930:
+int ckrm_cpu_set_share(struct ckrm_cpu_class *cls, ulong share) {^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1734: FILE: kernel/class.c:931:
+^Icls->weight = share;^I^I^I^I^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1735: FILE: kernel/class.c:932:
+^Ireturn 0;^I^I^I^I^I^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1736: FILE: kernel/class.c:933:
+}^I^I^I^I^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1737: FILE: kernel/class.c:934:
+^I^I^I$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1739: FILE: kernel/class.c:936:
+  translate the gCVT to ticks$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1740: FILE: kernel/class.c:937:
+ */$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1741: FILE: kernel/class.c:938:
+ulong ckrm_cpu_get_usage(struct ckrm_cpu_class *cls) {^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1745: FILE: kernel/class.c:942:
+^Ireturn (ulong)ticks;^I^I^I^I^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1746: FILE: kernel/class.c:943:
+}^I^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1750: FILE: kernel/class.c:947:
+ */^I^I^I^I^I^I$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1750: FILE: kernel/class.c:947:
+ */^I^I^I^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1751: FILE: kernel/class.c:948:
+struct ckrm_cpu_class *ckrm_dflt_cpu_class(void *obj) {^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1753: FILE: kernel/class.c:950:
+}^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1754: FILE: kernel/class.c:951:
+^I^I^I^I^I^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1755: FILE: kernel/class.c:952:
+void ckrm_cpu_change_class(struct task_struct *tsk,^I^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1756: FILE: kernel/class.c:953:
+                               struct ckrm_cpu_class *cls) {^I^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1756: FILE: kernel/class.c:953:
+                               struct ckrm_cpu_class *cls) {^I^I$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1756: FILE: kernel/class.c:953:
+                               struct ckrm_cpu_class *cls) {^I^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1758: FILE: kernel/class.c:955:
+        tsk->cpu_class = cls;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1758: FILE: kernel/class.c:955:
+        tsk->cpu_class = cls;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1759: FILE: kernel/class.c:956:
+}^I^I^I^I^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1760: FILE: kernel/class.c:957:
+^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1761: FILE: kernel/class.c:958:
+EXPORT_SYMBOL(ckrm_alloc_cpu_class);^I^I^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1762: FILE: kernel/class.c:959:
+EXPORT_SYMBOL(ckrm_free_cpu_class);^I^I^I^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1763: FILE: kernel/class.c:960:
+EXPORT_SYMBOL(ckrm_cpu_set_share);^I^I^I^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1764: FILE: kernel/class.c:961:
+EXPORT_SYMBOL(ckrm_cpu_get_usage);^I^I^I^I^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1797: FILE: kernel/fork.c:44:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1815: FILE: kernel/progress.c:1:
+/* kernel/progress.c : cpu control for CKRM

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#1815: FILE: kernel/progress.c:1:
+/* kernel/progress.c : cpu control for CKRM

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1819: FILE: kernel/progress.c:5:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1823: FILE: kernel/progress.c:9:
+ * $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1842: FILE: kernel/progress.c:28:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1844: FILE: kernel/progress.c:30:
+/*
+Description:

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1845: FILE: kernel/progress.c:31:
+    biased progress tracker: $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1849: FILE: kernel/progress.c:34:
+    $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1851: FILE: kernel/progress.c:36:
+    $

WARNING:TYPO_SPELLING: 'positon' may be misspelled - perhaps 'position'?
#1852: FILE: kernel/progress.c:37:
+    all the class starts at the same positon
                                      ^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1856: FILE: kernel/progress.c:39:
+    $

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1862: FILE: kernel/progress.c:44:
+	struct circularqueue_struct* ecp_queue;

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1869: FILE: kernel/progress.c:51:
+inline struct bpt_struct* get_bpt(int cpu_id) {

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#1869: FILE: kernel/progress.c:51:
+inline struct bpt_struct* get_bpt(int cpu_id) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1874: FILE: kernel/progress.c:56:
+/*
+Design:

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1879: FILE: kernel/progress.c:61:
+struct task_struct * get_CF_next(struct bpt_struct* bpt,struct

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1879: FILE: kernel/progress.c:61:
+struct task_struct * get_CF_next(struct bpt_struct* bpt,struct

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1879: FILE: kernel/progress.c:61:
+struct task_struct * get_CF_next(struct bpt_struct* bpt,struct
                                                        ^

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#1879: FILE: kernel/progress.c:61:
+struct task_struct * get_CF_next(struct bpt_struct* bpt,struct
task_struct* prev) {
+	cp_node_t * node = get_first_element(bpt->ecp_queue);
+	struct local_class_queue * class_queue;
+	struct task_struct * p = NULL;
+
+	if (node) {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1881: FILE: kernel/progress.c:62:
+	cp_node_t * node = get_first_element(bpt->ecp_queue);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1882: FILE: kernel/progress.c:63:
+	struct local_class_queue * class_queue;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1883: FILE: kernel/progress.c:64:
+	struct task_struct * p = NULL;

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1890: FILE: kernel/progress.c:71:
+
+	}

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1895: FILE: kernel/progress.c:76:
+static inline int get_ECP(struct local_class_queue* class_queue, struct

ERROR:SPACING: space prohibited after that '*' (ctx:BxW)
#1897: FILE: kernel/progress.c:77:
+	int cp = (* get_class_CVT(class_queue)) >> CLASS_BONUS_RATE;
 	          ^

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1903: FILE: kernel/progress.c:82:
+void update_ecp_pos(struct local_class_queue* class_queue, struct

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#1903: FILE: kernel/progress.c:82:
+void update_ecp_pos(struct local_class_queue* class_queue, struct
bpt_struct* bpt) {	
+	int ecp;
+
+	if (! get_class_running(class_queue)) {

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#1907: FILE: kernel/progress.c:85:
+	if (! get_class_running(class_queue)) {
 	    ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1907: FILE: kernel/progress.c:85:
+	if (! get_class_running(class_queue)) {
+		assert(0);
+	}

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1910: FILE: kernel/progress.c:88:
+	ecp = get_ECP(class_queue,bpt);
 	                         ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1911: FILE: kernel/progress.c:89:
+^Iadjust_cq_pos(bpt->ecp_queue,get_ecp_queue(class_queue),ecp);^I$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1911: FILE: kernel/progress.c:89:
+	adjust_cq_pos(bpt->ecp_queue,get_ecp_queue(class_queue),ecp);	
 	                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1911: FILE: kernel/progress.c:89:
+	adjust_cq_pos(bpt->ecp_queue,get_ecp_queue(class_queue),ecp);	
 	                                                       ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1914: FILE: kernel/progress.c:92:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1916: FILE: kernel/progress.c:94:
+/*
+  remove a class_queue from bpt

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1918: FILE: kernel/progress.c:96:
+inline void remove_from_bpt(struct bpt_struct* bpt,struct

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1918: FILE: kernel/progress.c:96:
+inline void remove_from_bpt(struct bpt_struct* bpt,struct
                                                   ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1920: FILE: kernel/progress.c:97:
+^Iremovefrom_circular_queue(bpt->ecp_queue,get_ecp_queue(class_queue));^I$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1920: FILE: kernel/progress.c:97:
+	removefrom_circular_queue(bpt->ecp_queue,get_ecp_queue(class_queue));	
 	                                        ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1924: FILE: kernel/progress.c:101:
+/*
+  look over all the local classes in bpt queue

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1927: FILE: kernel/progress.c:104:
+  $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1929: FILE: kernel/progress.c:106:
+task_t * find_mp_from_bpt(struct bpt_struct* bpt,struct runqueue*

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1929: FILE: kernel/progress.c:106:
+task_t * find_mp_from_bpt(struct bpt_struct* bpt,struct runqueue*

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1929: FILE: kernel/progress.c:106:
+task_t * find_mp_from_bpt(struct bpt_struct* bpt,struct runqueue*
                                                 ^

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#1929: FILE: kernel/progress.c:106:
+task_t * find_mp_from_bpt(struct bpt_struct* bpt,struct runqueue*
busiest_runqueue,int imbalance) {
+	task_t* result = NULL;
+	int last_pos = -1;
+	cp_node_t * last_node;
+	struct local_class_queue * class_queue;
+
+	do {

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1931: FILE: kernel/progress.c:107:
+	task_t* result = NULL;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1933: FILE: kernel/progress.c:109:
+	cp_node_t * last_node;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1934: FILE: kernel/progress.c:110:
+	struct local_class_queue * class_queue;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1937: FILE: kernel/progress.c:113:
+^I^Iget_next_element(bpt->ecp_queue,&last_pos,&last_node);^I^I$

ERROR:SPACING: space required after that ',' (ctx:VxO)
#1937: FILE: kernel/progress.c:113:
+		get_next_element(bpt->ecp_queue,&last_pos,&last_node);		
 		                               ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#1937: FILE: kernel/progress.c:113:
+		get_next_element(bpt->ecp_queue,&last_pos,&last_node);		
 		                                ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#1937: FILE: kernel/progress.c:113:
+		get_next_element(bpt->ecp_queue,&last_pos,&last_node);		
 		                                         ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#1937: FILE: kernel/progress.c:113:
+		get_next_element(bpt->ecp_queue,&last_pos,&last_node);		
 		                                          ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1938: FILE: kernel/progress.c:114:
+^I^Iif (last_node) {^I^I$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1940: FILE: kernel/progress.c:116:
+			result = find_mp_from_class(class_queue,busiest_runqueue,imbalance);
 			                                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1940: FILE: kernel/progress.c:116:
+			result = find_mp_from_class(class_queue,busiest_runqueue,imbalance);
 			                                                        ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#1942: FILE: kernel/progress.c:118:
+	} while ( !result && (last_node != NULL) );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1942: FILE: kernel/progress.c:118:
+	} while ( !result && (last_node != NULL) );

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "last_node"
#1942: FILE: kernel/progress.c:118:
+	} while ( !result && (last_node != NULL) );

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1944: FILE: kernel/progress.c:120:
+	if (result) {
+		assert(task_cpu(result) == bpt->cpu);
+	}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1951: FILE: kernel/progress.c:127:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1953: FILE: kernel/progress.c:129:
+/*
+Design:

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1954: FILE: kernel/progress.c:130:
+  initialize the per cpu bpt $

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#1957: FILE: kernel/progress.c:133:
+void init_bpts(void) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1958: FILE: kernel/progress.c:134:
+^Iint i;^I$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1960: FILE: kernel/progress.c:136:
+	for (i=0; i < NR_CPUS; i++) {
 	      ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1960: FILE: kernel/progress.c:136:
+	for (i=0; i < NR_CPUS; i++) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1961: FILE: kernel/progress.c:137:
+^I^Ibpts[i].ecp_queue= create_circular_queue(BPT_QUEUE_SIZE); $

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#1961: FILE: kernel/progress.c:137:
+		bpts[i].ecp_queue= create_circular_queue(BPT_QUEUE_SIZE); 
 		                 ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1993: FILE: kernel/sched.c:144:
 
+

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2013: FILE: kernel/sched.c:160:
+	unsigned long nr_running, nr_switches,nr_uninterruptible;
 	                                     ^

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#2026: FILE: kernel/sched.c:172:
+	struct bpt_struct* bpt;

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#2082: FILE: kernel/sched.c:320:
 {
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2083: FILE: kernel/sched.c:321:
+^Ienqueue_to_class(p,1);^I^I$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2083: FILE: kernel/sched.c:321:
+	enqueue_to_class(p,1);		
 	                  ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2094: FILE: kernel/sched.c:374:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2095: FILE: kernel/sched.c:375:
+^Idequeue_from_class(p);^I^I$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2119: FILE: kernel/sched.c:954:
+static inline void pull_task(runqueue_t *src_rq,task_t *p, runqueue_t
                                                ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2128: FILE: kernel/sched.c:961:
+^I$

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#2152: FILE: kernel/sched.c:978:
+static void class_load_balance(runqueue_t *this_rq, int idle) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2153: FILE: kernel/sched.c:979:
+	int max_pressure,pressure;
 	                ^

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#2155: FILE: kernel/sched.c:981:
+	struct local_class_queue *busiest_queue= NULL,*this_queue=NULL;
 	                                       ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#2155: FILE: kernel/sched.c:981:
+	struct local_class_queue *busiest_queue= NULL,*this_queue=NULL;
 	                                             ^

ERROR:SPACING: space required before that '*' (ctx:OxV)
#2155: FILE: kernel/sched.c:981:
+	struct local_class_queue *busiest_queue= NULL,*this_queue=NULL;
 	                                              ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2155: FILE: kernel/sched.c:981:
+	struct local_class_queue *busiest_queue= NULL,*this_queue=NULL;
 	                                                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2156: FILE: kernel/sched.c:982:
+	int cpu,this_cpu = smp_processor_id(),busiest_cpu;
 	       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2156: FILE: kernel/sched.c:982:
+	int cpu,this_cpu = smp_processor_id(),busiest_cpu;
 	                                     ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2157: FILE: kernel/sched.c:983:
+	struct task_struct * tmp;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2162: FILE: kernel/sched.c:985:
+^I$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2169: FILE: kernel/sched.c:988:
+	for (class_id=0; class_id< MAX_CLASS_NUM;class_id++) {
 	             ^

ERROR:SPACING: spaces required around that '<' (ctx:VxW)
#2169: FILE: kernel/sched.c:988:
+	for (class_id=0; class_id< MAX_CLASS_NUM;class_id++) {
 	                         ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#2169: FILE: kernel/sched.c:988:
+	for (class_id=0; class_id< MAX_CLASS_NUM;class_id++) {
 	                                        ^

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#2170: FILE: kernel/sched.c:989:
+		if (! get_class(class_id)) continue;
 		    ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#2170: FILE: kernel/sched.c:989:
+		if (! get_class(class_id)) continue;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2198: FILE: kernel/sched.c:995:
+		/*
+		  check all local queues belonging to a certain class

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2199: FILE: kernel/sched.c:996:
+^I^I  get the busiest queue^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2200: FILE: kernel/sched.c:997:
+^I^I  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2206: FILE: kernel/sched.c:1003:
+^I^Ifor (cpu=0; cpu < NR_CPUS; cpu ++) {^I^I^I$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2206: FILE: kernel/sched.c:1003:
+		for (cpu=0; cpu < NR_CPUS; cpu ++) {			
 		        ^

ERROR:SPACING: space prohibited before that '++' (ctx:WxB)
#2206: FILE: kernel/sched.c:1003:
+		for (cpu=0; cpu < NR_CPUS; cpu ++) {			
 		                               ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#2206: FILE: kernel/sched.c:1003:
+		for (cpu=0; cpu < NR_CPUS; cpu ++) {			

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2207: FILE: kernel/sched.c:1004:
+			if (!cpu_online(cpu) )

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2210: FILE: kernel/sched.c:1007:
+			pressure = get_queue_pressure_byid(class_id,cpu);
 			                                           ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2224: FILE: kernel/sched.c:1015:
+^I^I^Ibusiest = cpu_rq(busiest_cpu);^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2225: FILE: kernel/sched.c:1016:
+^I^I^Ibusiest_queue = $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2226: FILE: kernel/sched.c:1017:
+				get_local_class_queue(class_id,busiest_cpu);
 				                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2227: FILE: kernel/sched.c:1018:
+			this_queue = get_local_class_queue(class_id,this_cpu);
 			                                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2230: FILE: kernel/sched.c:1021:
+			double_lock_balance(this_rq, busiest, this_cpu, idle,0);
 			                                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2233: FILE: kernel/sched.c:1024:
+				tmp =  balance_local_queue(busiest_queue,busiest,this_queue);
 				                                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2233: FILE: kernel/sched.c:1024:
+				tmp =  balance_local_queue(busiest_queue,busiest,this_queue);
 				                                                ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2234: FILE: kernel/sched.c:1025:
+^I^I^I^I$

ERROR:SPACING: space prohibited after that open parenthesis '('
#2235: FILE: kernel/sched.c:1026:
+				if ( tmp) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2235: FILE: kernel/sched.c:1026:
+				if ( tmp) {
+					pull_task(busiest, tmp, this_rq, this_cpu);
+				}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2247: FILE: kernel/sched.c:1032:
+^I^I^Ispin_unlock(&busiest->lock);^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2249: FILE: kernel/sched.c:1034:
+^I}^I$

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#2256: FILE: kernel/sched.c:1037:
+static void load_balance(runqueue_t *this_rq, int idle, unsigned long
cpumask) {
+	struct local_class_queue* class_queue;
+	int class_id;
+	int this_cpu = smp_processor_id();
 
+	//update gCVT on every load balance
+	for (class_id=0; class_id < MAX_CLASS_NUM; class_id++) {

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#2258: FILE: kernel/sched.c:1038:
+	struct local_class_queue* class_queue;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2264: FILE: kernel/sched.c:1043:
+	for (class_id=0; class_id < MAX_CLASS_NUM; class_id++) {
 	             ^

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#2265: FILE: kernel/sched.c:1044:
+		if (! get_class(class_id)) continue;
 		    ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#2265: FILE: kernel/sched.c:1044:
+		if (! get_class(class_id)) continue;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2279: FILE: kernel/sched.c:1046:
+		class_queue = get_local_class_queue(class_id,this_cpu);
 		                                            ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2287: FILE: kernel/sched.c:1050:
+
+

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2288: FILE: kernel/sched.c:1051:
+	class_load_balance(this_rq,idle);
 	                          ^

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#2320: FILE: kernel/sched.c:1185:
+	if (! is_task_active(p)) {
 	    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2331: FILE: kernel/sched.c:1212:
+			enqueue_to_class(p,1);
 			                  ^

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#2349: FILE: kernel/sched.c:1223:
+		if (check_interactive_starving(p)) {
[...]
+		} else {
[...]

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2350: FILE: kernel/sched.c:1224:
+^I^I^Ienqueue_to_class(p, 1);//treated as interactive task^I^I^I$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2386: FILE: kernel/sched.c:1297:
+	next = get_CF_next(rq->bpt,prev);
 	                          ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2387: FILE: kernel/sched.c:1298:
+^I$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2388: FILE: kernel/sched.c:1299:
+	if (!next) {
+		next = rq->idle;
 	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2400: FILE: kernel/sched.c:1308:
+	if (prev != rq->idle) {
+		update_lCVT(prev, jiffies - rq->switch_timestamp);
+	}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2405: FILE: kernel/sched.c:1313:
+
+

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2415: FILE: kernel/sched.c:1569:
+	if (array) {
+		dequeue_from_class(p);
+	}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2423: FILE: kernel/sched.c:1575:
+^Iif (array) { $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2443: FILE: kernel/sched.c:1976:
+		enqueue_to_class(current,0);
 		                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2448: FILE: kernel/sched.c:1979:
+		enqueue_to_class(current,1);
 		                        ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2493: FILE: kernel/sched.c:2502:
+^Irq->idle = current;^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2494: FILE: kernel/sched.c:2503:
+^Iset_task_cpu(current, smp_processor_id());       $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2504: FILE: kernel/sched.c:2576:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2505: FILE: kernel/sched.c:2577:
+struct task_struct * get_idle_task(int cpu) {

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#2505: FILE: kernel/sched.c:2577:
+struct task_struct * get_idle_task(int cpu) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#2506: FILE: kernel/sched.c:2578:
+        runqueue_t *idle_rq = cpu_rq(cpu);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2506: FILE: kernel/sched.c:2578:
+        runqueue_t *idle_rq = cpu_rq(cpu);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2508: FILE: kernel/sched.c:2580:
+        if (idle_rq) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2508: FILE: kernel/sched.c:2580:
+        if (idle_rq) {$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2508: FILE: kernel/sched.c:2580:
+        if (idle_rq) {
+                return idle_rq->idle;
+        }

ERROR:CODE_INDENT: code indent should use tabs where possible
#2509: FILE: kernel/sched.c:2581:
+                return idle_rq->idle;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2509: FILE: kernel/sched.c:2581:
+                return idle_rq->idle;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2510: FILE: kernel/sched.c:2582:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2510: FILE: kernel/sched.c:2582:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2511: FILE: kernel/sched.c:2583:
+        return NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2511: FILE: kernel/sched.c:2583:
+        return NULL;$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2514: FILE: kernel/sched.c:2586:
+int task_interactive(struct task_struct * p) {

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#2514: FILE: kernel/sched.c:2586:
+int task_interactive(struct task_struct * p) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2518: FILE: kernel/sched.c:2590:
+#define CAN_MIGRATE_TASK(p,rq,this_cpu)					\
                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2518: FILE: kernel/sched.c:2590:
+#define CAN_MIGRATE_TASK(p,rq,this_cpu)					\
                              ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#2518: FILE: kernel/sched.c:2590:
+#define CAN_MIGRATE_TASK(p,rq,this_cpu)					\
+	((jiffies - (p)->last_run > cache_decay_ticks) &&	\
+		!task_running(rq, p) &&					\
+			((p)->cpus_allowed & (1UL << (this_cpu))))

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2523: FILE: kernel/sched.c:2595:
+int can_migrate_task(struct task_struct * p,runqueue_t *rq,int

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2523: FILE: kernel/sched.c:2595:
+int can_migrate_task(struct task_struct * p,runqueue_t *rq,int
                                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2523: FILE: kernel/sched.c:2595:
+int can_migrate_task(struct task_struct * p,runqueue_t *rq,int
                                                           ^

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#2523: FILE: kernel/sched.c:2595:
+int can_migrate_task(struct task_struct * p,runqueue_t *rq,int
this_cpu) {
+	return CAN_MIGRATE_TASK(p,rq,this_cpu);
+}

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2525: FILE: kernel/sched.c:2596:
+	return CAN_MIGRATE_TASK(p,rq,this_cpu);
 	                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2525: FILE: kernel/sched.c:2596:
+	return CAN_MIGRATE_TASK(p,rq,this_cpu);
 	                            ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2528: FILE: kernel/sched.c:2599:
+inline struct runqueue * get_cpu_rq(int cpu) {

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#2528: FILE: kernel/sched.c:2599:
+inline struct runqueue * get_cpu_rq(int cpu) {

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000341478.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 537 errors, 167 warnings, 109 checks, 2393 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000341478.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
