WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#17: 
diff -u --new-file --recursive --exclude-from /usr/src/exclude linux-2.5.65/drivers/char/lp_old98.c linux-2.5.65-ac2/drivers/char/lp_old98.c

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#21: FILE: drivers/char/lp_old98.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#22: FILE: drivers/char/lp_old98.c:2:
+ *	linux/drivers/char/lp_old98.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#49: FILE: drivers/char/lp_old98.c:29:
+#include <asm/io.h>

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#50: FILE: drivers/char/lp_old98.c:30:
+#include <asm/uaccess.h>

CHECK:CAMELCASE: Avoid CamelCase: <LP_MASK_nBUSY>
#69: FILE: drivers/char/lp_old98.c:49:
+#define	LP_MASK_nBUSY	(1 << 2)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:BIT_MACRO: Prefer using the BIT macro
#69: FILE: drivers/char/lp_old98.c:49:
+#define	LP_MASK_nBUSY	(1 << 2)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:CAMELCASE: Avoid CamelCase: <LP_MASK_nSTROBE>
#70: FILE: drivers/char/lp_old98.c:50:
+#define	LP_MASK_nSTROBE	(1 << 7)

CHECK:BIT_MACRO: Prefer using the BIT macro
#70: FILE: drivers/char/lp_old98.c:50:
+#define	LP_MASK_nSTROBE	(1 << 7)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#80: FILE: drivers/char/lp_old98.c:60:
+#define	DC1	'\x11'

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#81: FILE: drivers/char/lp_old98.c:61:
+#define	DC3	'\x13'

CHECK:LINE_SPACING: Please don't use multiple blank lines
#94: FILE: drivers/char/lp_old98.c:74:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#102: FILE: drivers/char/lp_old98.c:82:
+static DECLARE_WAIT_QUEUE_HEAD (lp_old98_waitq);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#106: FILE: drivers/char/lp_old98.c:86:
+	if (inb(LP_PORT_STATUS) & LP_MASK_nBUSY)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#108: FILE: drivers/char/lp_old98.c:88:
+	else {

CHECK:SPACING: No space is necessary after a cast
#109: FILE: drivers/char/lp_old98.c:89:
+		struct timer_list *t = (struct timer_list *) data;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#152: FILE: drivers/char/lp_old98.c:132:
+		printk(KERN_DEBUG "lp_old98: success after %d counts.\n",

ERROR:TRAILING_WHITESPACE: trailing whitespace
#163: FILE: drivers/char/lp_old98.c:143:
+    $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#163: FILE: drivers/char/lp_old98.c:143:
+    $

ERROR:SPACING: space prohibited before that '++' (ctx:WxO)
#170: FILE: drivers/char/lp_old98.c:150:
+	lp.stats.chars ++;
 	               ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#181: FILE: drivers/char/lp_old98.c:161:
+static ssize_t lp_old98_write(struct file * file,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#182: FILE: drivers/char/lp_old98.c:162:
+			      const char * buf, size_t count,

WARNING:LINE_SPACING: Missing a blank line after declarations
#198: FILE: drivers/char/lp_old98.c:178:
+		unsigned long bytes_written = 0;
+		unsigned long copy_size

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#199: FILE: drivers/char/lp_old98.c:179:
+		unsigned long copy_size
+			= (count < LP_BUFFER_SIZE ? count : LP_BUFFER_SIZE);

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

CHECK:BRACES: braces {} should be used on all arms of this statement
#205: FILE: drivers/char/lp_old98.c:185:
+			if (lp_old98_char(lp.lp_buffer[bytes_written]))
[...]
+			else {
[...]

ERROR:SPACING: space prohibited before that '++' (ctx:WxO)
#206: FILE: drivers/char/lp_old98.c:186:
+				bytes_written ++;
 				              ^

CHECK:BRACES: Unbalanced braces around else statement
#207: FILE: drivers/char/lp_old98.c:187:
+			else {

ERROR:SPACING: space prohibited before that '++' (ctx:WxO)
#214: FILE: drivers/char/lp_old98.c:194:
+				lp.stats.sleeps ++;
 				                ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#217: FILE: drivers/char/lp_old98.c:197:
+				printk(KERN_DEBUG

WARNING:SPLIT_STRING: quoted string split across lines
#219: FILE: drivers/char/lp_old98.c:199:
+				       "lp_old98: sleeping at %d characters"
+				       " for %d jiffies\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#240: FILE: drivers/char/lp_old98.c:220:
+static int lp_old98_open(struct inode * inode, struct file * file)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#240: FILE: drivers/char/lp_old98.c:220:
+static int lp_old98_open(struct inode * inode, struct file * file)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#249: FILE: drivers/char/lp_old98.c:229:
+	if (dc1_check && (lp.flags & LP_ABORTOPEN)
+	    && !(file->f_flags & O_NONBLOCK)) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#287: FILE: drivers/char/lp_old98.c:267:
+	if ((lp.lp_buffer = kmalloc(LP_BUFFER_SIZE, GFP_KERNEL)) == NULL)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#299: FILE: drivers/char/lp_old98.c:279:
+static int lp_old98_release(struct inode * inode, struct file * file)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#299: FILE: drivers/char/lp_old98.c:279:
+static int lp_old98_release(struct inode * inode, struct file * file)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#314: FILE: drivers/char/lp_old98.c:294:
+	if ((data = inb(LP_PORT_EXTMODE)) != 0xFF && (data & 0x10)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#315: FILE: drivers/char/lp_old98.c:295:
+		printk(KERN_INFO

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#320: FILE: drivers/char/lp_old98.c:300:
+	if ((pc98_hw_flags & PC98_HW_H98)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#321: FILE: drivers/char/lp_old98.c:301:
+	if ((pc98_hw_flags & PC98_HW_H98)
+	    && ((data = inb(LP_PORT_H98MODE)) & 0x01)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#322: FILE: drivers/char/lp_old98.c:302:
+		printk(KERN_INFO

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#337: FILE: drivers/char/lp_old98.c:317:
+		lp.time = arg * HZ/100;
 		                  ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#387: FILE: drivers/char/lp_old98.c:367:
+^Icase LPSETIRQ: $

WARNING:CONST_STRUCT: struct file_operations should normally be const
#394: FILE: drivers/char/lp_old98.c:374:
+static struct file_operations lp_old98_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#415: FILE: drivers/char/lp_old98.c:395:
+static void lp_old98_console_write(struct console *console,
+				    const char *s, unsigned int count)

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#418: FILE: drivers/char/lp_old98.c:398:
+	static unsigned int timeout_run = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#484: FILE: drivers/char/lp_old98.c:464:
+	if (pc98_hw_flags & PC98_HW_H98)
+	    if (!request_region(LP_PORT_H98MODE, 1, "lp_old98")

WARNING:TABSTOP: Statements should start on a tabstop
#485: FILE: drivers/char/lp_old98.c:465:
+	    if (!request_region(LP_PORT_H98MODE, 1, "lp_old98")

CHECK:BRACES: braces {} should be used on all arms of this statement
#496: FILE: drivers/char/lp_old98.c:476:
+	if (!register_chrdev(LP_MAJOR, "lp", &lp_old98_fops)) {
[...]
+	} else
[...]

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#499: FILE: drivers/char/lp_old98.c:479:
+		printk(KERN_INFO "lp_old98: console ready\n");

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#507: FILE: drivers/char/lp_old98.c:487:
+		return 0;
+	} else

CHECK:BRACES: Unbalanced braces around else statement
#507: FILE: drivers/char/lp_old98.c:487:
+	} else

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#519: FILE: drivers/char/lp_old98.c:499:
+	if (pc98_hw_flags & PC98_HW_H98)
+	    release_region(LP_PORT_H98MODE, 1);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#524: FILE: drivers/char/lp_old98.c:504:
+	printk(KERN_ERR "lp_old98: %s\n", errmsg);

ERROR:CODE_INDENT: code indent should use tabs where possible
#548: FILE: drivers/char/lp_old98.c:528:
+        int ints[4];$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#548: FILE: drivers/char/lp_old98.c:528:
+        int ints[4];$

ERROR:CODE_INDENT: code indent should use tabs where possible
#550: FILE: drivers/char/lp_old98.c:530:
+        str = get_options(str, ARRAY_SIZE(ints), ints);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#550: FILE: drivers/char/lp_old98.c:530:
+        str = get_options(str, ARRAY_SIZE(ints), ints);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#551: FILE: drivers/char/lp_old98.c:531:
+        if (ints[0] > 0)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#551: FILE: drivers/char/lp_old98.c:531:
+        if (ints[0] > 0)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#553: FILE: drivers/char/lp_old98.c:533:
+        return 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#553: FILE: drivers/char/lp_old98.c:533:
+        return 1;$

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#555: FILE: drivers/char/lp_old98.c:535:
+__setup("lp_old98_dc1_check=", lp_old98_setup);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000383972.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 21 errors, 24 warnings, 18 checks, 551 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000383972.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
