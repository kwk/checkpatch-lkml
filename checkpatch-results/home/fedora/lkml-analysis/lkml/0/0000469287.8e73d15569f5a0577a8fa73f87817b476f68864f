WARNING:TYPO_SPELLING: 'Seperates' may be misspelled - perhaps 'Separates'?
#28: 
Seperates bfs_sb_info from struct super_block.
^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#66: FILE: fs/bfs/dir.c:81:
+	struct bfs_sb_info * info = BFS_SB(s);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#83: FILE: fs/bfs/dir.c:94:
+^Iset_bit(ino, info->si_imap);^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#129: FILE: fs/bfs/file.c:98:
+		info->si_lf_eblk = bi->i_eblock = phys;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#147: FILE: fs/bfs/file.c:120:
+	info->si_lf_eblk = bi->i_eblock = phys;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#181: FILE: fs/bfs/inode.c:140:
+	struct bfs_sb_info * info = BFS_SB(s);

WARNING:LINE_SPACING: Missing a blank line after declarations
#223: FILE: fs/bfs/inode.c:187:
+	struct bfs_sb_info *info = BFS_SB(s);
+	brelse(info->si_sbh);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#239: FILE: fs/bfs/inode.c:199:
+	buf->f_bfree = buf->f_bavail = info->si_freeb;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#259: FILE: fs/bfs/inode.c:275:
+	for (i=BFS_SB(s)->si_lasti; i>=0; i--) {
 	      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '>=' (ctx:VxV)
#259: FILE: fs/bfs/inode.c:275:
+	for (i=BFS_SB(s)->si_lasti; i>=0; i--) {
 	                             ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#268: FILE: fs/bfs/inode.c:282:
+	printk(KERN_ERR "BFS-fs: %s: lasti=%08lx <%s>\n", prefix, BFS_SB(s)->si_lasti, tmpbuf);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#276: FILE: fs/bfs/inode.c:293:
+	struct bfs_sb_info * info;

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*info)...) over kmalloc(sizeof(struct bfs_super_block)...)
#278: FILE: fs/bfs/inode.c:295:
+	info = kmalloc(sizeof(struct bfs_super_block), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

ERROR:TRAILING_WHITESPACE: trailing whitespace
#295: FILE: fs/bfs/inode.c:319:
+^Iinfo->si_lasti = (bfs_sb->s_start - BFS_BSIZE)/sizeof(struct bfs_inode) $

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#295: FILE: fs/bfs/inode.c:319:
+	info->si_lasti = (bfs_sb->s_start - BFS_BSIZE)/sizeof(struct bfs_inode) 
 	                                              ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#301: FILE: fs/bfs/inode.c:322:
+	imap_len = info->si_lasti/8 + 1;
 	                         ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#333: FILE: fs/bfs/inode.c:343:
+	info->si_blocks = (bfs_sb->s_end + 1)>>BFS_BSIZE_BITS; /* for statfs(2) */
 	                                     ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#334: FILE: fs/bfs/inode.c:344:
+	info->si_freeb = (bfs_sb->s_end + 1 - bfs_sb->s_start)>>BFS_BSIZE_BITS;
 	                                                      ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#339: FILE: fs/bfs/inode.c:349:
+	for (i=BFS_ROOT_INO; i<=info->si_lasti; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<=' (ctx:VxV)
#339: FILE: fs/bfs/inode.c:349:
+	for (i=BFS_ROOT_INO; i<=info->si_lasti; i++) {
 	                      ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000469287.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 9 errors, 3 warnings, 8 checks, 330 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000469287.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
