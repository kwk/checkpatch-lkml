WARNING:TYPO_SPELLING: 'chello' may be misspelled - perhaps 'cello'?
#30: 
From: Peter Zijlstra <a.p.zijlstra@chello.nl>
                                   ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'internels' may be misspelled - perhaps 'internals'?
#34: 
the policy internels anymore and exclusively deals with pageout.
           ^^^^^^^^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#74: FILE: include/linux/mm_page_replace.h:90:
+extern void page_replace_shrink(struct zone *, struct scan_control *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct zone *' should also have an identifier name
#74: FILE: include/linux/mm_page_replace.h:90:
+extern void page_replace_shrink(struct zone *, struct scan_control *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct scan_control *' should also have an identifier name
#74: FILE: include/linux/mm_page_replace.h:90:
+extern void page_replace_shrink(struct zone *, struct scan_control *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#94: FILE: include/linux/swap.h:175:
+extern int shrink_list(struct list_head *, struct scan_control *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct list_head *' should also have an identifier name
#94: FILE: include/linux/swap.h:175:
+extern int shrink_list(struct list_head *, struct scan_control *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct scan_control *' should also have an identifier name
#94: FILE: include/linux/swap.h:175:
+extern int shrink_list(struct list_head *, struct scan_control *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#95: FILE: include/linux/swap.h:176:
+extern int should_reclaim_mapped(struct zone *, struct scan_control *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct zone *' should also have an identifier name
#95: FILE: include/linux/swap.h:176:
+extern int should_reclaim_mapped(struct zone *, struct scan_control *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct scan_control *' should also have an identifier name
#95: FILE: include/linux/swap.h:176:
+extern int should_reclaim_mapped(struct zone *, struct scan_control *);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#109: FILE: mm/useonce.c:8:
+#include <linux/buffer_head.h>	/* for try_to_release_page(),
+					buffer_heads_over_limit */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#109: FILE: mm/useonce.c:8:
+					buffer_heads_over_limit */

CHECK:BRACES: braces {} should be used on all arms of this statement
#161: FILE: mm/useonce.c:206:
+		if (current_is_kswapd()) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#164: FILE: mm/useonce.c:209:
+		} else

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#175: FILE: mm/useonce.c:220:
+				BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:CODE_INDENT: code indent should use tabs where possible
#187: FILE: mm/useonce.c:232:
+  ^I}$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#187: FILE: mm/useonce.c:232:
+  ^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#187: FILE: mm/useonce.c:232:
+  ^I}$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#257: FILE: mm/useonce.c:302:
+			BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#259: FILE: mm/useonce.c:304:
+			BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#286: FILE: mm/useonce.c:331:
+			BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#287: FILE: mm/useonce.c:332:
+		BUG_ON(!PageActive(page));

WARNING:MINMAX: min() should probably be min_t(unsigned long, nr_active, sc->swap_cluster_max)
#338: FILE: mm/useonce.c:383:
+			sc->nr_to_scan = min(nr_active,
 					(unsigned long)sc->swap_cluster_max);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#339: FILE: mm/useonce.c:384:
+			sc->nr_to_scan = min(nr_active,
+					(unsigned long)sc->swap_cluster_max);

WARNING:MINMAX: min() should probably be min_t(unsigned long, nr_inactive, sc->swap_cluster_max)
#345: FILE: mm/useonce.c:390:
+			sc->nr_to_scan = min(nr_inactive,
 					(unsigned long)sc->swap_cluster_max);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#346: FILE: mm/useonce.c:391:
+			sc->nr_to_scan = min(nr_inactive,
+					(unsigned long)sc->swap_cluster_max);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000091664.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 19 warnings, 7 checks, 554 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000091664.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
