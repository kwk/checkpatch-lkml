WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#30: 
# This is a BitKeeper generated patch for the following project:

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#31: 
# Project Name: Linux kernel tree

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#32: 
# This patch format is intended for GNU patch command version 2.5 or higher.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#32: 
# This patch format is intended for GNU patch command version 2.5 or higher.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#33: 
# This patch includes the following deltas:

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#34: 
#	           ChangeSet	1.994   -> 1.995  

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#35: 
#	include/linux/sched.h	1.129   -> 1.130  

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#36: 
#	       kernel/fork.c	1.104   -> 1.105  

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#37: 
#	       kernel/user.c	1.6     -> 1.7    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#38: 
#	      kernel/sched.c	1.158   -> 1.159  

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#39: 
#

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#40: 
# The following is the BitKeeper ChangeSet Log

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#41: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#42: 
# 03/02/12	ed@oscar.et.ca	1.995

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#43: 
# governors for thread groups and users

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#44: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#45: 
#

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#47: 
--- a/include/linux/sched.h	Wed Feb 12 12:13:01 2003

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

ERROR:CODE_INDENT: code indent should use tabs where possible
#54: FILE: include/linux/sched.h:181:
+        atomic_t active;        /* number of tasks in run queues */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#54: FILE: include/linux/sched.h:181:
+        atomic_t active;        /* number of tasks in run queues */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#55: FILE: include/linux/sched.h:182:
+        atomic_t count;         /* number of refs */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#55: FILE: include/linux/sched.h:182:
+        atomic_t count;         /* number of refs */$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#73: FILE: include/linux/sched.h:331:
+	struct ptg_struct * ptgroup;		/* pseudo thread group for this task */

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxO)
#85: FILE: kernel/fork.c:77:
+	if (tsk->ptgroup && atomic_sub_and_test(1,&tsk->ptgroup->count)) {
 	                                         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before that '&' (ctx:OxV)
#85: FILE: kernel/fork.c:77:
+	if (tsk->ptgroup && atomic_sub_and_test(1,&tsk->ptgroup->count)) {
 	                                          ^

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#92: FILE: kernel/fork.c:83:
chedule_tunables-C4

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

ERROR:SPACING: space prohibited after that open parenthesis '('
#110: FILE: kernel/fork.c:729:
+	if ( ((clone_flags & CLONE_VM) && (clone_flags & CLONE_FILES)) ||

CHECK:BRACES: braces {} should be used on all arms of this statement
#110: FILE: kernel/fork.c:729:
+	if ( ((clone_flags & CLONE_VM) && (clone_flags & CLONE_FILES)) ||
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#111: FILE: kernel/fork.c:730:
+	if ( ((clone_flags & CLONE_VM) && (clone_flags & CLONE_FILES)) ||
+	     (clone_flags & CLONE_THREAD)) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#112: FILE: kernel/fork.c:731:
+		if (current->ptgroup)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#114: FILE: kernel/fork.c:733:
+		else {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*current->ptgroup)...) over kmalloc(sizeof(struct ptg_struct)...)
#115: FILE: kernel/fork.c:734:
+			current->ptgroup = kmalloc(sizeof(struct ptg_struct), GFP_ATOMIC);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

ERROR:SPACING: space required after that ',' (ctx:VxV)
#119: FILE: kernel/fork.c:738:
+			atomic_set(&current->ptgroup->count,2);
 			                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#120: FILE: kernel/fork.c:739:
+			atomic_set(&current->ptgroup->active,1);
 			                                    ^

CHECK:BRACES: Unbalanced braces around else statement
#126: FILE: kernel/fork.c:745:
+	} else

ERROR:TRAILING_WHITESPACE: trailing whitespace
#141: FILE: kernel/fork.c:893:
+^I * required if the process is a member of a thread group. $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#170: FILE: kernel/sched.c:132:
+	int govern = threads;
+	if (p->user->uid)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LONG_LINE_COMMENT: line length of 160 exceeds 100 columns
#177: FILE: kernel/sched.c:139:
+		printk(KERN_INFO "uid %d pid %d ptg %x gov %x threads %d lim %d slice %d\n",p->uid, p->pid, p->ptgroup, p->governor, threads/10, govern, slice);

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#177: FILE: kernel/sched.c:139:
+/*	if (jiffies > next) {
+		printk(KERN_INFO "uid %d pid %d ptg %x gov %x threads %d lim %d slice %d\n",p->uid, p->pid, p->ptgroup, p->governor, threads/10, govern, slice);

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#179: FILE: kernel/sched.c:141:
+	} */

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000393828.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 11 errors, 23 warnings, 6 checks, 209 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000393828.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
