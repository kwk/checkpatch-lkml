WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#51: 
   NTFS: 2.0.14 - Run list merging code cleanup, minor locking changes, typo fixes.

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#63: 
--- a/Documentation/filesystems/ntfs.txt	Thu Jul  4 11:35:24 2002

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:DEPRECATED_VARIABLE: Use of EXTRA_CFLAGS is deprecated, please use `ccflags-y instead.
#104: FILE: fs/ntfs/Makefile:8:
+EXTRA_CFLAGS = -DNTFS_VERSION=\"2.0.14\"

EXTRA_{A,C,CPP,LD}FLAGS are deprecated and should be replaced by the new
flags added via commit f77bf01425b1 ("kbuild: introduce ccflags-y,
asflags-y and ldflags-y").

The following conversion scheme maybe used::

  EXTRA_AFLAGS    ->  asflags-y
  EXTRA_CFLAGS    ->  ccflags-y
  EXTRA_CPPFLAGS  ->  cppflags-y
  EXTRA_LDFLAGS   ->  ldflags-y

See:

  1. https://lore.kernel.org/lkml/20070930191054.GA15876@uranus.ravnborg.org/
  2. https://lore.kernel.org/lkml/1313384834-24433-12-git-send-email-lacombar@gmail.com/
  3. https://www.kernel.org/doc/html/latest/kbuild/makefiles.html#compilation-flags

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#122: FILE: fs/ntfs/attrib.c:35:
+static inline void ntfs_rl_mm(run_list_element *base, int dst, int src,
+		int size)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dst != src'
#126: FILE: fs/ntfs/attrib.c:37:
+	if (likely((dst != src) && (size > 0)))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'size > 0'
#126: FILE: fs/ntfs/attrib.c:37:
+	if (likely((dst != src) && (size > 0)))

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#127: FILE: fs/ntfs/attrib.c:38:
+		memmove(base + dst, base + src, size * sizeof (*base));

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#139: FILE: fs/ntfs/attrib.c:48:
+static inline void ntfs_rl_mc(run_list_element *dstbase, int dst,
 		run_list_element *srcbase, int src, int size)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#178: FILE: fs/ntfs/attrib.c:75:
+static inline run_list_element *ntfs_rl_realloc(run_list_element *rl,
+		int old_size, int new_size)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rl"
#202: FILE: fs/ntfs/attrib.c:88:
+	if (likely(rl != NULL)) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#234: FILE: fs/ntfs/attrib.c:111:
+static inline BOOL ntfs_are_rl_mergeable(run_list_element *dst,
+		run_list_element *src)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#237: FILE: fs/ntfs/attrib.c:113:
+	BUG_ON(!dst || !src);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dst->lcn < 0'
#240: FILE: fs/ntfs/attrib.c:115:
+	if ((dst->lcn < 0) || (src->lcn < 0))     /* Are we merging holes? */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'src->lcn < 0'
#240: FILE: fs/ntfs/attrib.c:115:
+	if ((dst->lcn < 0) || (src->lcn < 0))     /* Are we merging holes? */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#336: FILE: fs/ntfs/attrib.c:190:
+static inline run_list_element *ntfs_rl_append(run_list_element *dst,
+		int dsize, run_list_element *src, int ssize, int loc)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#342: FILE: fs/ntfs/attrib.c:195:
+	BUG_ON(!dst || !src);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#434: FILE: fs/ntfs/attrib.c:254:
+static inline run_list_element *ntfs_rl_insert(run_list_element *dst,
+		int dsize, run_list_element *src, int ssize, int loc)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#443: FILE: fs/ntfs/attrib.c:261:
+	BUG_ON(!dst || !src);

CHECK:BRACES: braces {} should be used on all arms of this statement
#455: FILE: fs/ntfs/attrib.c:267:
+	if (loc == 0)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#457: FILE: fs/ntfs/attrib.c:269:
+	else {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#483: FILE: fs/ntfs/attrib.c:284:
+	 * one if there was a discontinuity, less one for a trailing hole. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:BRACES: braces {} should be used on all arms of this statement
#524: FILE: fs/ntfs/attrib.c:311:
+		if (hole)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#526: FILE: fs/ntfs/attrib.c:313:
+		else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#601: FILE: fs/ntfs/attrib.c:359:
+static inline run_list_element *ntfs_rl_replace(run_list_element *dst,
+		int dsize, run_list_element *src, int ssize, int loc)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#609: FILE: fs/ntfs/attrib.c:365:
+	BUG_ON(!dst || !src);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#629: FILE: fs/ntfs/attrib.c:373:
+	 * ends were merged. */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#702: FILE: fs/ntfs/attrib.c:424:
+static inline run_list_element *ntfs_rl_split(run_list_element *dst, int dsize,
+		run_list_element *src, int ssize, int loc)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#712: FILE: fs/ntfs/attrib.c:426:
+	BUG_ON(!dst || !src);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#735: FILE: fs/ntfs/attrib.c:442:
+	dst[loc].length         = dst[loc+1].vcn       - dst[loc].vcn;
 	                                 ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#736: FILE: fs/ntfs/attrib.c:443:
+	dst[loc+ssize+1].vcn    = dst[loc+ssize].vcn   + dst[loc+ssize].length;
 	       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#736: FILE: fs/ntfs/attrib.c:443:
+	dst[loc+ssize+1].vcn    = dst[loc+ssize].vcn   + dst[loc+ssize].length;
 	             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#736: FILE: fs/ntfs/attrib.c:443:
+	dst[loc+ssize+1].vcn    = dst[loc+ssize].vcn   + dst[loc+ssize].length;
 	                                 ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#736: FILE: fs/ntfs/attrib.c:443:
+	dst[loc+ssize+1].vcn    = dst[loc+ssize].vcn   + dst[loc+ssize].length;
 	                                                        ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#737: FILE: fs/ntfs/attrib.c:444:
+	dst[loc+ssize+1].length = dst[loc+ssize+2].vcn - dst[loc+ssize+1].vcn;
 	       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#737: FILE: fs/ntfs/attrib.c:444:
+	dst[loc+ssize+1].length = dst[loc+ssize+2].vcn - dst[loc+ssize+1].vcn;
 	             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#737: FILE: fs/ntfs/attrib.c:444:
+	dst[loc+ssize+1].length = dst[loc+ssize+2].vcn - dst[loc+ssize+1].vcn;
 	                                 ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#737: FILE: fs/ntfs/attrib.c:444:
+	dst[loc+ssize+1].length = dst[loc+ssize+2].vcn - dst[loc+ssize+1].vcn;
 	                                       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#737: FILE: fs/ntfs/attrib.c:444:
+	dst[loc+ssize+1].length = dst[loc+ssize+2].vcn - dst[loc+ssize+1].vcn;
 	                                                        ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#737: FILE: fs/ntfs/attrib.c:444:
+	dst[loc+ssize+1].length = dst[loc+ssize+2].vcn - dst[loc+ssize+1].vcn;
 	                                                              ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#801: FILE: fs/ntfs/attrib.c:484:
+run_list_element *ntfs_merge_run_lists(run_list_element *drl,
+		run_list_element *srl)

WARNING:LIKELY_MISUSE: nested (un)?likely() calls, IS_ERR already uses unlikely() internally
#831: FILE: fs/ntfs/attrib.c:505:
+	if (unlikely(IS_ERR(srl) || IS_ERR(drl)))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#877: FILE: fs/ntfs/attrib.c:535:
+	BUG_ON(!srl[si].length);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'drl[di].vcn == srl[si].vcn'
#899: FILE: fs/ntfs/attrib.c:552:
+	if ((drl[di].vcn == srl[si].vcn) && (drl[di].lcn >= 0) &&
+			(srl[si].lcn >= 0)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'drl[di].lcn >= 0'
#899: FILE: fs/ntfs/attrib.c:552:
+	if ((drl[di].vcn == srl[si].vcn) && (drl[di].lcn >= 0) &&
+			(srl[si].lcn >= 0)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'srl[si].lcn >= 0'
#899: FILE: fs/ntfs/attrib.c:552:
+	if ((drl[di].vcn == srl[si].vcn) && (drl[di].lcn >= 0) &&
+			(srl[si].lcn >= 0)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#900: FILE: fs/ntfs/attrib.c:553:
+	if ((drl[di].vcn == srl[si].vcn) && (drl[di].lcn >= 0) &&
+			(srl[si].lcn >= 0)) {

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#981: FILE: fs/ntfs/attrib.c:621:
+				ntfs_debug("Old marker = 0x%Lx, replacing with "

WARNING:SPLIT_STRING: quoted string split across lines
#982: FILE: fs/ntfs/attrib.c:622:
+				ntfs_debug("Old marker = 0x%Lx, replacing with "
+						"LCN_ENOENT.\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1001: FILE: fs/ntfs/attrib.c:641:
+					 * extra memory already! (AIA) */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1021: FILE: fs/ntfs/attrib.c:661:
+				 * memory already! (AIA) */

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1100: FILE: fs/ntfs/attrib.c:704:
+ * ^I-EIO^I- Corrupt run list.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1101: FILE: fs/ntfs/attrib.c:705:
+ * ^I-EINVAL^I- Invalid parameters were passed in.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1102: FILE: fs/ntfs/attrib.c:706:
+ * ^I-ERANGE^I- The two run lists overlap.$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1126: FILE: fs/ntfs/attrib.c:724:
+	u16 rlpos;		/* Current run list position in units of
+				   run_list_elements. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1126: FILE: fs/ntfs/attrib.c:724:
+				   run_list_elements. */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1153: FILE: fs/ntfs/attrib.c:766:
+^I^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#1222: FILE: fs/ntfs/attrib.c:885:
+			ntfs_debug("More extents to follow; deltaxcn = 0x%Lx, "

WARNING:SPLIT_STRING: quoted string split across lines
#1223: FILE: fs/ntfs/attrib.c:886:
+			ntfs_debug("More extents to follow; deltaxcn = 0x%Lx, "
+					"max_cluster = 0x%Lx",

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#1223: FILE: fs/ntfs/attrib.c:886:
+					"max_cluster = 0x%Lx",

WARNING:LIKELY_MISUSE: nested (un)?likely() calls, IS_ERR already uses unlikely() internally
#1261: FILE: fs/ntfs/attrib.c:915:
+	if (likely(!IS_ERR(old_rl)))

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000449279.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 2 errors, 25 warnings, 33 checks, 1264 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000449279.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
