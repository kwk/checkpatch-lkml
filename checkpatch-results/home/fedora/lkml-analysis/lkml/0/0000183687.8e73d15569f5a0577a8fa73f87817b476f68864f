WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#74: 
--- d68b09f31fa98801ead715e9281a2e4676b770a5/arch/i386/kernel/acpi/boot.c  (mode:100644)

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#435: FILE: arch/x86_64/kernel/time.c:324:
+	static unsigned long rtc_update = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#445: FILE: arch/x86_64/kernel/time.c:334:
+	if (ts.tv_sec > rtc_update &&
+		abs(ts.tv_nsec - 500000000) <= tick_nsec / 2) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#535: FILE: arch/x86_64/kernel/vsyscall.c:45:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#543: FILE: arch/x86_64/kernel/vsyscall.c:53:
+extern struct vsyscall_gtod_data_t vsyscall_gtod_data;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#546: FILE: arch/x86_64/kernel/vsyscall.c:56:
+extern seqlock_t vsyscall_gtod_lock;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#549: FILE: arch/x86_64/kernel/vsyscall.c:59:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#559: FILE: arch/x86_64/kernel/vsyscall.c:74:
+/* XXX - this is ugly. gettimeofday() has a label in it so we can't
+	call it twice.

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:LINE_SPACING: Missing a blank line after declarations
#567: FILE: arch/x86_64/kernel/vsyscall.c:79:
+	int ret;
+	asm volatile("syscall"

ERROR:SPACING: space required after that ',' (ctx:VxV)
#569: FILE: arch/x86_64/kernel/vsyscall.c:81:
+		: "0" (__NR_gettimeofday),"D" (tv),"S" (tz) : __syscall_clobber );
 		                         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#569: FILE: arch/x86_64/kernel/vsyscall.c:81:
+		: "0" (__NR_gettimeofday),"D" (tv),"S" (tz) : __syscall_clobber );
 		                                  ^

ERROR:SPACING: space prohibited before that close parenthesis ')'
#569: FILE: arch/x86_64/kernel/vsyscall.c:81:
+		: "0" (__NR_gettimeofday),"D" (tv),"S" (tz) : __syscall_clobber );

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#572: FILE: arch/x86_64/kernel/vsyscall.c:84:
+}
+static force_inline void do_vgettimeofday(struct timeval* tv)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#572: FILE: arch/x86_64/kernel/vsyscall.c:84:
+static force_inline void do_vgettimeofday(struct timeval* tv)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#617: FILE: arch/x86_64/kernel/vsyscall.c:109:
+		tv->tv_usec += (unsigned long) nsec_delta;

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#658: FILE: arch/x86_64/kernel/vsyscall.c:173:
+struct timesource_t* curr_timesource;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#661: FILE: arch/x86_64/kernel/vsyscall.c:176:
+void arch_update_vsyscall_gtod(nsec_t wall_time, cycle_t offset_base,
+				struct timesource_t* timesource, int ntp_adj)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#661: FILE: arch/x86_64/kernel/vsyscall.c:176:
+				struct timesource_t* timesource, int ntp_adj)

WARNING:REPEATED_WORD: Possible repeated word: 'hack'
#667: FILE: arch/x86_64/kernel/vsyscall.c:182:
+	/* XXX - hackitty hack hack. this is terrible! */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'timesource->type == TIMESOURCE_MMIO_32'
#669: FILE: arch/x86_64/kernel/vsyscall.c:184:
+		if ((timesource->type == TIMESOURCE_MMIO_32)
+				|| (timesource->type == TIMESOURCE_MMIO_64)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'timesource->type == TIMESOURCE_MMIO_64'
#669: FILE: arch/x86_64/kernel/vsyscall.c:184:
+		if ((timesource->type == TIMESOURCE_MMIO_32)
+				|| (timesource->type == TIMESOURCE_MMIO_64)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#670: FILE: arch/x86_64/kernel/vsyscall.c:185:
+		if ((timesource->type == TIMESOURCE_MMIO_32)
+				|| (timesource->type == TIMESOURCE_MMIO_64)) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#674: FILE: arch/x86_64/kernel/vsyscall.c:189:
+			pmd_t *pmd = pmd_offset(pud,vaddr);
 			                           ^

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#698: FILE: arch/x86_64/kernel/vsyscall.c:213:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#712: FILE: include/asm-generic/div64.h:59:
+#define div_long_long_rem(dividend,divisor,remainder) \
                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#712: FILE: include/asm-generic/div64.h:59:
+#define div_long_long_rem(dividend,divisor,remainder) \
                                           ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'remainder' may be better as '(remainder)' to avoid precedence issues
#712: FILE: include/asm-generic/div64.h:59:
+#define div_long_long_rem(dividend,divisor,remainder) \
+({							\
+	u64 result = dividend;				\
+	*remainder = do_div(result,divisor);		\
+	result;						\
+})

ERROR:SPACING: space required after that ',' (ctx:VxV)
#715: FILE: include/asm-generic/div64.h:62:
+	*remainder = do_div(result,divisor);		\
 	                          ^

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#749: FILE: include/asm-x86_64/vsyscall.h:25:
+#define __section_vsyscall_gtod_data __attribute__ ((unused, __section__ (".vsyscall_gtod_data"),aligned(16)))

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#749: FILE: include/asm-x86_64/vsyscall.h:25:
+#define __section_vsyscall_gtod_data __attribute__ ((unused, __section__ (".vsyscall_gtod_data"),aligned(16)))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#749: FILE: include/asm-x86_64/vsyscall.h:25:
+#define __section_vsyscall_gtod_data __attribute__ ((unused, __section__ (".vsyscall_gtod_data"),aligned(16)))
                                                                                                 ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#749: FILE: include/asm-x86_64/vsyscall.h:25:
+#define __section_vsyscall_gtod_data __attribute__ ((unused, __section__ (".vsyscall_gtod_data"),aligned(16)))

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".vsyscall_gtod_data") over __attribute__((__section__(".vsyscall_gtod_data")))
#749: FILE: include/asm-x86_64/vsyscall.h:25:
+#define __section_vsyscall_gtod_data __attribute__ ((unused, __section__ (".vsyscall_gtod_data"),aligned(16)))

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(16) over __attribute__((aligned(16)))
#749: FILE: include/asm-x86_64/vsyscall.h:25:
+#define __section_vsyscall_gtod_data __attribute__ ((unused, __section__ (".vsyscall_gtod_data"),aligned(16)))

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: __always_unused or __maybe_unused is preferred over __attribute__((__unused__))
#749: FILE: include/asm-x86_64/vsyscall.h:25:
+#define __section_vsyscall_gtod_data __attribute__ ((unused, __section__ (".vsyscall_gtod_data"),aligned(16)))

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#750: FILE: include/asm-x86_64/vsyscall.h:26:
+#define __section_vsyscall_gtod_lock __attribute__ ((unused, __section__ (".vsyscall_gtod_lock"),aligned(16)))

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#750: FILE: include/asm-x86_64/vsyscall.h:26:
+#define __section_vsyscall_gtod_lock __attribute__ ((unused, __section__ (".vsyscall_gtod_lock"),aligned(16)))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#750: FILE: include/asm-x86_64/vsyscall.h:26:
+#define __section_vsyscall_gtod_lock __attribute__ ((unused, __section__ (".vsyscall_gtod_lock"),aligned(16)))
                                                                                                 ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#750: FILE: include/asm-x86_64/vsyscall.h:26:
+#define __section_vsyscall_gtod_lock __attribute__ ((unused, __section__ (".vsyscall_gtod_lock"),aligned(16)))

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".vsyscall_gtod_lock") over __attribute__((__section__(".vsyscall_gtod_lock")))
#750: FILE: include/asm-x86_64/vsyscall.h:26:
+#define __section_vsyscall_gtod_lock __attribute__ ((unused, __section__ (".vsyscall_gtod_lock"),aligned(16)))

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(16) over __attribute__((aligned(16)))
#750: FILE: include/asm-x86_64/vsyscall.h:26:
+#define __section_vsyscall_gtod_lock __attribute__ ((unused, __section__ (".vsyscall_gtod_lock"),aligned(16)))

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: __always_unused or __maybe_unused is preferred over __attribute__((__unused__))
#750: FILE: include/asm-x86_64/vsyscall.h:26:
+#define __section_vsyscall_gtod_lock __attribute__ ((unused, __section__ (".vsyscall_gtod_lock"),aligned(16)))

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000183687.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 15 errors, 16 warnings, 11 checks, 626 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000183687.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
