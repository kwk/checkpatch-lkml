WARNING:LINE_SPACING: Missing a blank line after declarations
#204: FILE: include/linux/rmap.h:53:
+	struct anon_vma *anon_vma = vma->anon_vma;
+	if (anon_vma)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#211: FILE: include/linux/rmap.h:60:
+	struct anon_vma *anon_vma = vma->anon_vma;
+	if (anon_vma)

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vm_area_struct *' should also have an identifier name
#219: FILE: include/linux/rmap.h:68:
+int  anon_vma_prepare(struct vm_area_struct *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vm_area_struct *' should also have an identifier name
#220: FILE: include/linux/rmap.h:69:
+void __anon_vma_merge(struct vm_area_struct *, struct vm_area_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vm_area_struct *' should also have an identifier name
#220: FILE: include/linux/rmap.h:69:
+void __anon_vma_merge(struct vm_area_struct *, struct vm_area_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vm_area_struct *' should also have an identifier name
#221: FILE: include/linux/rmap.h:70:
+void anon_vma_unlink(struct vm_area_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vm_area_struct *' should also have an identifier name
#222: FILE: include/linux/rmap.h:71:
+void anon_vma_link(struct vm_area_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vm_area_struct *' should also have an identifier name
#223: FILE: include/linux/rmap.h:72:
+void __anon_vma_link(struct vm_area_struct *);

ERROR:CODE_INDENT: code indent should use tabs where possible
#478: FILE: mm/mmap.c:578:
+^I^I     ^Istruct anon_vma *anon_vma, struct file *file,$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#478: FILE: mm/mmap.c:578:
+^I^I     ^Istruct anon_vma *anon_vma, struct file *file,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#489: FILE: mm/mmap.c:605:
+			can_vma_merge_after(prev, vm_flags,
+						anon_vma, file, pgoff)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#498: FILE: mm/mmap.c:612:
+				can_vma_merge_before(next, vm_flags,
+					anon_vma, file, pgoff+pglen) &&

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#498: FILE: mm/mmap.c:612:
+					anon_vma, file, pgoff+pglen) &&
 					                     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#511: FILE: mm/mmap.c:630:
+			can_vma_merge_before(next, vm_flags,
+					anon_vma, file, pgoff+pglen)) {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#511: FILE: mm/mmap.c:630:
+					anon_vma, file, pgoff+pglen)) {
 					                     ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#532: FILE: mm/mmap.c:808:
+	    vma_merge(mm, prev, addr, addr + len, vm_flags,
+					NULL, NULL, pgoff, NULL))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#671: FILE: mm/mmap.c:1565:
+	if (vma_merge(mm, prev, addr, addr + len, flags,
+					NULL, NULL, pgoff, NULL))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#700: FILE: mm/mmap.c:1661:
+		BUG_ON(vma->anon_vma);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#721: FILE: mm/mmap.c:1693:
+	new_vma = vma_merge(mm, prev, addr, addr + len, vma->vm_flags,
+			vma->anon_vma, vma->vm_file, pgoff, vma_policy(vma));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#772: FILE: mm/rmap.c:53:
+		BUG_ON(mapcount > 100000);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#776: FILE: mm/rmap.c:57:
+	BUG_ON(!found);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#810: FILE: mm/rmap.c:91:
+		BUG_ON(!next->anon_vma);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#815: FILE: mm/rmap.c:96:
+		BUG_ON(vma->anon_vma != next->anon_vma);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#864: FILE: mm/rmap.c:145:
+	if ((flags & (SLAB_CTOR_VERIFY|SLAB_CTOR_CONSTRUCTOR)) ==
 	                              ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#876: FILE: mm/rmap.c:157:
+	anon_vma_cachep = kmem_cache_create("anon_vma",
+		sizeof(struct anon_vma), 0, SLAB_PANIC, anon_vma_ctor, NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#901: FILE: mm/rmap.c:180:
+		BUG_ON(!PageAnon(page));

CHECK:SPACING: No space is necessary after a cast
#954: FILE: mm/rmap.c:246:
+	struct anon_vma *anon_vma = (struct anon_vma *) page->mapping;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#960: FILE: mm/rmap.c:252:
+	BUG_ON(list_empty(&anon_vma->head));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1008: FILE: mm/rmap.c:354:
+	BUG_ON(!anon_vma);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1027: FILE: mm/rmap.c:373:
+		BUG_ON(PageAnon(page));

CHECK:SPACING: No space is necessary after a cast
#1033: FILE: mm/rmap.c:377:
+		page->mapping = (struct address_space *) anon_vma;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1036: FILE: mm/rmap.c:380:
+		BUG_ON(!PageAnon(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1037: FILE: mm/rmap.c:381:
+		BUG_ON(page->index != index);

CHECK:SPACING: No space is necessary after a cast
#1038: FILE: mm/rmap.c:382:
+		BUG_ON(page->mapping != (struct address_space *) anon_vma);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1038: FILE: mm/rmap.c:382:
+		BUG_ON(page->mapping != (struct address_space *) anon_vma);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1098: FILE: mm/rmap.c:543:
+static int try_to_unmap_cluster(unsigned long cursor,
 	unsigned int *mapcount, struct vm_area_struct *vma)

CHECK:SPACING: No space is necessary after a cast
#1109: FILE: mm/rmap.c:622:
+	struct anon_vma *anon_vma = (struct anon_vma *) page->mapping;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1114: FILE: mm/rmap.c:627:
+	BUG_ON(list_empty(&anon_vma->head));

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1154: FILE: mm/rmap.c:713:
+				ret = try_to_unmap_cluster(

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000281046.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 22 warnings, 16 checks, 1000 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000281046.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
