WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 23)
#76: FILE: arch/i386/kernel/i387.c:552:
+		if (tsk == current)
+		       unlazy_fpu(tsk);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#83: FILE: arch/i386/kernel/i387.c:559:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:RETURN_VOID: void function return statements are not generally useful
#89: FILE: arch/i386/kernel/i387.c:565:
+	return;
+}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#106: FILE: arch/i386/kernel/process.c:377:
+/* $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#112: FILE: arch/i386/kernel/process.c:383:
+^I$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#158: FILE: fs/binfmt_elf.c:1029:
+	memset(elf->e_ident+EI_PAD, 0, EI_NIDENT-EI_PAD);
 	                   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#158: FILE: fs/binfmt_elf.c:1029:
+	memset(elf->e_ident+EI_PAD, 0, EI_NIDENT-EI_PAD);
 	                                        ^

WARNING:RETURN_VOID: void function return statements are not generally useful
#174: FILE: fs/binfmt_elf.c:1045:
+	return;
+}

WARNING:RETURN_VOID: void function return statements are not generally useful
#187: FILE: fs/binfmt_elf.c:1058:
+	return;
+}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#189: FILE: fs/binfmt_elf.c:1060:
+static inline void fill_note(struct memelfnote *note, const char *name, int type, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#190: FILE: fs/binfmt_elf.c:1061:
+static inline void fill_note(struct memelfnote *note, const char *name, int type, 
+		unsigned int sz, void *data)

WARNING:RETURN_VOID: void function return statements are not generally useful
#197: FILE: fs/binfmt_elf.c:1068:
+	return;
+}

WARNING:TYPO_SPELLING: 'seperately' may be misspelled - perhaps 'separately'?
#201: FILE: fs/binfmt_elf.c:1072:
+ * which need to be filled up seperately.
                               ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#203: FILE: fs/binfmt_elf.c:1074:
+static inline void fill_prstatus(struct elf_prstatus *prstatus, struct task_struct *p, long signr) $

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#205: FILE: fs/binfmt_elf.c:1076:
+	prstatus->pr_info.si_signo = prstatus->pr_cursig = signr;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#221: FILE: fs/binfmt_elf.c:1092:
+^I$

WARNING:RETURN_VOID: void function return statements are not generally useful
#237: FILE: fs/binfmt_elf.c:1108:
+	return;
+}

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#241: FILE: fs/binfmt_elf.c:1112:
+struct elf_thread_status
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#257: FILE: fs/binfmt_elf.c:1128:
+static int elf_dump_thread_status(long signr, struct task_struct * p, struct list_head * thread_list)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#257: FILE: fs/binfmt_elf.c:1128:
+static int elf_dump_thread_status(long signr, struct task_struct * p, struct list_head * thread_list)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#257: FILE: fs/binfmt_elf.c:1128:
+static int elf_dump_thread_status(long signr, struct task_struct * p, struct list_head * thread_list)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#259: FILE: fs/binfmt_elf.c:1130:
+{
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#271: FILE: fs/binfmt_elf.c:1142:
+^Ielf_core_copy_task_regs(p, &t->prstatus.pr_reg);^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#272: FILE: fs/binfmt_elf.c:1143:
+^I$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around t->prstatus
#273: FILE: fs/binfmt_elf.c:1144:
+	fill_note(&t->notes[0], "CORE", NT_PRSTATUS, sizeof(t->prstatus), &(t->prstatus));

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#277: FILE: fs/binfmt_elf.c:1148:
+	if ((t->prstatus.pr_fpvalid = elf_core_copy_task_fpregs(p, &t->fpu))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around t->fpu
#278: FILE: fs/binfmt_elf.c:1149:
+		fill_note(&t->notes[1], "CORE", NT_PRFPREG, sizeof(t->fpu), &(t->fpu));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#289: FILE: fs/binfmt_elf.c:1160:
+#endif^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#309: FILE: fs/binfmt_elf.c:1187:
+ ^Istruct task_struct *g, *p;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#309: FILE: fs/binfmt_elf.c:1187:
+ ^Istruct task_struct *g, *p;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#309: FILE: fs/binfmt_elf.c:1187:
+ ^Istruct task_struct *g, *p;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#310: FILE: fs/binfmt_elf.c:1188:
+ ^ILIST_HEAD(thread_list);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#310: FILE: fs/binfmt_elf.c:1188:
+ ^ILIST_HEAD(thread_list);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#310: FILE: fs/binfmt_elf.c:1188:
+ ^ILIST_HEAD(thread_list);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#311: FILE: fs/binfmt_elf.c:1189:
+ ^Istruct list_head *t;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#311: FILE: fs/binfmt_elf.c:1189:
+ ^Istruct list_head *t;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#311: FILE: fs/binfmt_elf.c:1189:
+ ^Istruct list_head *t;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#317: FILE: fs/binfmt_elf.c:1195:
+^I$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#331: FILE: fs/binfmt_elf.c:1233:
+		do_each_thread(g,p)
 		                ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#334: FILE: fs/binfmt_elf.c:1236:
+				int sz = elf_dump_thread_status(signr, p, &thread_list);
+				if (!sz) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#334: FILE: fs/binfmt_elf.c:1236:
+				if (!sz) {
[...]
+				} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#337: FILE: fs/binfmt_elf.c:1239:
+				} else

ERROR:SPACING: space required after that ',' (ctx:VxV)
#340: FILE: fs/binfmt_elf.c:1242:
+		while_each_thread(g,p);
 		                   ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#343: FILE: fs/binfmt_elf.c:1245:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#347: FILE: fs/binfmt_elf.c:1249:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#349: FILE: fs/binfmt_elf.c:1251:
+  $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#349: FILE: fs/binfmt_elf.c:1251:
+  $

WARNING:TYPO_SPELLING: 'proceses' may be misspelled - perhaps 'processes'?
#350: FILE: fs/binfmt_elf.c:1252:
+	/* This because those proceses that could possibly 
 	                      ^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#350: FILE: fs/binfmt_elf.c:1252:
+^I/* This because those proceses that could possibly $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#358: FILE: fs/binfmt_elf.c:1260:
+^I * Although no locks ups have been induced, if one of the suspended threads was $

ERROR:CODE_INDENT: code indent should use tabs where possible
#363: FILE: fs/binfmt_elf.c:1265:
+  ^Isegs = current->mm->map_count;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#363: FILE: fs/binfmt_elf.c:1265:
+  ^Isegs = current->mm->map_count;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#363: FILE: fs/binfmt_elf.c:1265:
+  ^Isegs = current->mm->map_count;$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#389: FILE: fs/binfmt_elf.c:1272:
+	fill_elf_header(&elf, segs+1); /* including notes section*/
 	                          ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#454: FILE: fs/binfmt_elf.c:1293:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#456: FILE: fs/binfmt_elf.c:1295:
+  $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#456: FILE: fs/binfmt_elf.c:1295:
+  $

ERROR:CODE_INDENT: code indent should use tabs where possible
#457: FILE: fs/binfmt_elf.c:1296:
+  ^I/* Try to dump the FPU. */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#457: FILE: fs/binfmt_elf.c:1296:
+  ^I/* Try to dump the FPU. */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#457: FILE: fs/binfmt_elf.c:1296:
+  ^I/* Try to dump the FPU. */$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#458: FILE: fs/binfmt_elf.c:1297:
+	if ((prstatus.pr_fpvalid = elf_core_copy_task_fpregs(current, &fpu))) {

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#458: FILE: fs/binfmt_elf.c:1297:
+	if ((prstatus.pr_fpvalid = elf_core_copy_task_fpregs(current, &fpu))) {
[...]
+	} else {
[...]

ERROR:CODE_INDENT: code indent should use tabs where possible
#462: FILE: fs/binfmt_elf.c:1301:
+ ^I}$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#462: FILE: fs/binfmt_elf.c:1301:
+ ^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#462: FILE: fs/binfmt_elf.c:1301:
+ ^I}$

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#464: FILE: fs/binfmt_elf.c:1303:
+	if (elf_core_copy_task_xfpregs(current, &xfpu)) {
[...]
+	} else {
[...]

ERROR:SPACING: space prohibited before that '--' (ctx:WxO)
#470: FILE: fs/binfmt_elf.c:1309:
+	numnote --;
 	        ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#471: FILE: fs/binfmt_elf.c:1310:
+#endif^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#472: FILE: fs/binfmt_elf.c:1311:
+  $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#472: FILE: fs/binfmt_elf.c:1311:
+  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#480: FILE: fs/binfmt_elf.c:1319:
+^I^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#502: FILE: fs/binfmt_elf.c:1352:
+ ^I/* write out the notes section */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#502: FILE: fs/binfmt_elf.c:1352:
+ ^I/* write out the notes section */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#502: FILE: fs/binfmt_elf.c:1352:
+ ^I/* write out the notes section */$

WARNING:LINE_SPACING: Missing a blank line after declarations
#510: FILE: fs/binfmt_elf.c:1360:
+		struct elf_thread_status *tmp = list_entry(t, struct elf_thread_status, list);
+		for (i = 0; i < tmp->num_notes; i++)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#514: FILE: fs/binfmt_elf.c:1364:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#514: FILE: fs/binfmt_elf.c:1364:
+ $

ERROR:SPACING: space required before the open parenthesis '('
#528: FILE: fs/binfmt_elf.c:1412:
+	while(!list_empty(&thread_list)) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#530: FILE: fs/binfmt_elf.c:1414:
+		struct list_head *tmp = thread_list.next;
+		list_del(tmp);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#552: FILE: include/linux/elfcore.h:94:
+	BUG_ON(sizeof(*elfregs) != sizeof(*regs));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#557: FILE: include/linux/elfcore.h:99:
+static inline int elf_core_copy_task_regs(struct task_struct *t, elf_gregset_t* elfregs)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#560: FILE: include/linux/elfcore.h:102:
+^I$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#566: FILE: include/linux/elfcore.h:108:
+extern int dump_fpu (struct pt_regs *, elf_fpregset_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#566: FILE: include/linux/elfcore.h:108:
+extern int dump_fpu (struct pt_regs *, elf_fpregset_t *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#586: FILE: include/linux/elfcore.h:128:
+
+

WARNING:INCLUDE_LINUX: Use #include <linux/processor.h> instead of <asm/processor.h>
#614: FILE: include/asm-i386/elf.h:10:
+#include <asm/processor.h>

ERROR:SPACING: space required after that ',' (ctx:VxV)
#622: FILE: include/asm-i386/elf.h:63:
+#define savesegment(seg,value) \
                        ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#622: FILE: include/asm-i386/elf.h:63:
+#define savesegment(seg,value) \
+	asm volatile("movl %%" #seg ",%0":"=m" (*(int *)&(value)))

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#623: FILE: include/asm-i386/elf.h:64:
+	asm volatile("movl %%" #seg ",%0":"=m" (*(int *)&(value)))
 	                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#635: FILE: include/asm-i386/elf.h:79:
+	savesegment(fs,pr_reg[9]);			\
 	              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#636: FILE: include/asm-i386/elf.h:80:
+	savesegment(gs,pr_reg[10]);			\
 	              ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#645: FILE: include/asm-i386/elf.h:106:
+extern int dump_task_regs (struct task_struct *, elf_gregset_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#645: FILE: include/asm-i386/elf.h:106:
+extern int dump_task_regs (struct task_struct *, elf_gregset_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#645: FILE: include/asm-i386/elf.h:106:
+extern int dump_task_regs (struct task_struct *, elf_gregset_t *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'elf_gregset_t *' should also have an identifier name
#645: FILE: include/asm-i386/elf.h:106:
+extern int dump_task_regs (struct task_struct *, elf_gregset_t *);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#646: FILE: include/asm-i386/elf.h:107:
+extern int dump_task_fpu (struct task_struct *, elf_fpregset_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#646: FILE: include/asm-i386/elf.h:107:
+extern int dump_task_fpu (struct task_struct *, elf_fpregset_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#646: FILE: include/asm-i386/elf.h:107:
+extern int dump_task_fpu (struct task_struct *, elf_fpregset_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'elf_fpregset_t *' should also have an identifier name
#646: FILE: include/asm-i386/elf.h:107:
+extern int dump_task_fpu (struct task_struct *, elf_fpregset_t *);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#647: FILE: include/asm-i386/elf.h:108:
+extern int dump_task_extended_fpu (struct task_struct *, struct user_fxsr_struct *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#647: FILE: include/asm-i386/elf.h:108:
+extern int dump_task_extended_fpu (struct task_struct *, struct user_fxsr_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#647: FILE: include/asm-i386/elf.h:108:
+extern int dump_task_extended_fpu (struct task_struct *, struct user_fxsr_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct user_fxsr_struct *' should also have an identifier name
#647: FILE: include/asm-i386/elf.h:108:
+extern int dump_task_extended_fpu (struct task_struct *, struct user_fxsr_struct *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#654: FILE: include/asm-i386/elf.h:115:
+extern void dump_smp_unlazy_fpu(void);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000425567.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 42 errors, 44 warnings, 18 checks, 581 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000425567.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
