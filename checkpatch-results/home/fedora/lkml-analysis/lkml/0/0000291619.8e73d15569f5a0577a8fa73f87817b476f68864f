WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#45: 
################### EXAMPLE USAGE ######################

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#62: 
-rw-r--r--    1  3794944 Apr  1  2004 LinusAndThePenguins-Case_Sensitivity.mp3

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#96: 
###############################################################

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#99: 
#include <sys/prctl.h>

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#100: 
#include <unistd.h>

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#101: 
#include <stdio.h>

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#102: 
#include <stdlib.h>

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#104: 
#ifndef PR_SUBST_DESTROY

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#105: 
#define PR_GET_DRIVE 42     /* get the current drive */

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#106: 
#define PR_SET_DRIVE 69     /* set the current drive */

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#107: 
#define PR_SUBST_CREATE 666   /* associate a drive letter with something */

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#108: 
#define PR_SUBST_DESTROY 20040401   /* kill a drive letter */

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#109: 
#endif

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#192: FILE: fs/namespace.c:38:
+#if 0

WARNING:ARRAY_SIZE: Prefer ARRAY_SIZE(drive_array)
#195: FILE: fs/namespace.c:41:
+	int i == sizeof(drive_array)/sizeof(drive_array[0]);

The ARRAY_SIZE(foo) macro should be preferred over
sizeof(foo)/sizeof(foo[0]) for finding number of elements in an
array.

The macro is defined in include/linux/kernel.h::

  #define ARRAY_SIZE(x) (sizeof(x) / sizeof((x)[0]))

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#195: FILE: fs/namespace.c:41:
+	int i == sizeof(drive_array)/sizeof(drive_array[0]);
 	                            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#196: FILE: fs/namespace.c:42:
+	int i == sizeof(drive_array)/sizeof(drive_array[0]);
+	spin_lock(&drive_array_lock);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#212: FILE: fs/namespace.c:58:
+	int ret = -EINVAL;
+	if (drive=='C' || drive<'A' || drive>'z')

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#212: FILE: fs/namespace.c:58:
+	if (drive=='C' || drive<'A' || drive>'z')
 	         ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#212: FILE: fs/namespace.c:58:
+	if (drive=='C' || drive<'A' || drive>'z')
 	                       ^

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#212: FILE: fs/namespace.c:58:
+	if (drive=='C' || drive<'A' || drive>'z')
 	                                    ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#219: FILE: fs/namespace.c:65:
+	if (src || drive=='C') {
 	                ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#241: FILE: fs/namespace.c:87:
+		if (drive=='C') {
 		         ^

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#262: FILE: fs/namespace.c:108:
+
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#272: FILE: fs/namespace.c:118:
+	struct fs_struct *fs;
+	printk("sizeof(drive_array) is %u\n", (unsigned)sizeof(drive_array));

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#272: FILE: fs/namespace.c:118:
+	printk("sizeof(drive_array) is %u\n", (unsigned)sizeof(drive_array));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#272: FILE: fs/namespace.c:118:
+	printk("sizeof(drive_array) is %u\n", (unsigned)sizeof(drive_array));

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#273: FILE: fs/namespace.c:119:
+	printk("asked for drive '%c' 0x%02u %d\n", (char)drive, (unsigned)drive, drive);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#273: FILE: fs/namespace.c:119:
+	printk("asked for drive '%c' 0x%02u %d\n", (char)drive, (unsigned)drive, drive);

ERROR:PRINTF_0XDECIMAL: Prefixing 0x with decimal output is defective
#273: FILE: fs/namespace.c:119:
+	printk("asked for drive '%c' 0x%02u %d\n", (char)drive, (unsigned)drive, drive);

Prefixing 0x with decimal output is defective and should be corrected.

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#274: FILE: fs/namespace.c:120:
+	if (drive=='C' || drive<'A' || drive>'z')
 	         ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#274: FILE: fs/namespace.c:120:
+	if (drive=='C' || drive<'A' || drive>'z')
 	                       ^

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#274: FILE: fs/namespace.c:120:
+	if (drive=='C' || drive<'A' || drive>'z')
 	                                    ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#279: FILE: fs/namespace.c:125:
+	printk("fs is %u\n", (unsigned)fs);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#279: FILE: fs/namespace.c:125:
+	printk("fs is %u\n", (unsigned)fs);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#282: FILE: fs/namespace.c:128:
+	printk("debug 1\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#284: FILE: fs/namespace.c:130:
+	printk("debug 1\n");

WARNING:LINE_SPACING: Missing a blank line after declarations
#292: FILE: fs/namespace.c:138:
+	int ret = -EINVAL;
+	if (drive=='C' || drive<'A' || drive>'z')

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#292: FILE: fs/namespace.c:138:
+	if (drive=='C' || drive<'A' || drive>'z')
 	         ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#292: FILE: fs/namespace.c:138:
+	if (drive=='C' || drive<'A' || drive>'z')
 	                       ^

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#292: FILE: fs/namespace.c:138:
+	if (drive=='C' || drive<'A' || drive>'z')
 	                                    ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#341: FILE: include/linux/fs_struct.h:16:
+	struct dentry * c_root, * c_pwd, * c_altroot;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited after that '*' (ctx:WxW)
#341: FILE: include/linux/fs_struct.h:16:
+	struct dentry * c_root, * c_pwd, * c_altroot;
 	                        ^

ERROR:SPACING: space prohibited after that '*' (ctx:WxW)
#341: FILE: include/linux/fs_struct.h:16:
+	struct dentry * c_root, * c_pwd, * c_altroot;
 	                                 ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#342: FILE: include/linux/fs_struct.h:17:
+	struct vfsmount * c_rootmnt, * c_pwdmnt, * c_altrootmnt;

ERROR:SPACING: space prohibited after that '*' (ctx:WxW)
#342: FILE: include/linux/fs_struct.h:17:
+	struct vfsmount * c_rootmnt, * c_pwdmnt, * c_altrootmnt;
 	                             ^

ERROR:SPACING: space prohibited after that '*' (ctx:WxW)
#342: FILE: include/linux/fs_struct.h:17:
+	struct vfsmount * c_rootmnt, * c_pwdmnt, * c_altrootmnt;
 	                                         ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#353: FILE: include/linux/fs_struct.h:28:
+extern void shutdown_drive_array(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#354: FILE: include/linux/fs_struct.h:29:
+extern long set_current_drive(int drive);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#355: FILE: include/linux/fs_struct.h:30:
+extern long subst_drive_create(int drive);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#356: FILE: include/linux/fs_struct.h:31:
+extern long subst_drive_destroy(int drive);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000291619.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 18 errors, 27 warnings, 6 checks, 249 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000291619.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
