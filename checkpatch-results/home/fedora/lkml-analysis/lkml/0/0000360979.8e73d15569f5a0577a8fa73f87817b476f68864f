WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#79: 
diff -Nur --exclude=RCS --exclude=CVS --exclude=SCCS --exclude=BitKeeper --exclude=ChangeSet linux-2.5-import/arch/i386/Kconfig linux-2.5-ustate/arch/i386/Kconfig

ERROR:TRAILING_WHITESPACE: trailing whitespace
#206: FILE: arch/ia64/kernel/irq_ia64.c:141:
+^I^Ivector = ia64_get_ivr();^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#239: FILE: fs/proc/base.c:102:
+  E(PROC_PID_MSA,^I"msa",^I^IS_IFREG|S_IRUGO),$

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#239: FILE: fs/proc/base.c:102:
+  E(PROC_PID_MSA,	"msa",		S_IFREG|S_IRUGO),
                  	      		       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#239: FILE: fs/proc/base.c:102:
+  E(PROC_PID_MSA,	"msa",		S_IFREG|S_IRUGO),

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#253: FILE: fs/proc/base.c:302:
+static int proc_pid_msa(struct task_struct *task, char *buffer) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#256: FILE: fs/proc/base.c:305:
+  $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#256: FILE: fs/proc/base.c:305:
+  $

WARNING:STATIC_CONST_CHAR_ARRAY: char * array declaration might be better as static const
#257: FILE: fs/proc/base.c:306:
+	static char *statenames[] = {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#269: FILE: fs/proc/base.c:318:
+^Ireturn sprintf(buffer, $

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#270: FILE: fs/proc/base.c:319:
+		 "State:         %s\n"		\

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#316: FILE: include/asm-i386/msa.h:1:
+/************************************************************************

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#342: FILE: include/asm-i386/msa.h:27:
+#define MSA_NOW(now) do { now = monotonic_clock(); } while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#367: FILE: include/asm-ia64/msa.h:1:
+/************************************************************************

WARNING:INCLUDE_LINUX: Use #include <linux/processor.h> instead of <asm/processor.h>
#377: FILE: include/asm-ia64/msa.h:11:
+#include <asm/processor.h>

WARNING:INCLUDE_LINUX: Use #include <linux/smp.h> instead of <asm/smp.h>
#379: FILE: include/asm-ia64/msa.h:13:
+#include <asm/smp.h>

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#381: FILE: include/asm-ia64/msa.h:15:
+#define MSA_NOW(now)  do { now = (clk_t)get_cycles(); } while (0)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#383: FILE: include/asm-ia64/msa.h:17:
+#define MSA_TO_NSEC(clk) ((1000*clk) / cpu_data(smp_processor_id())->itc_freq)
                                ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'clk' may be better as '(clk)' to avoid precedence issues
#383: FILE: include/asm-ia64/msa.h:17:
+#define MSA_TO_NSEC(clk) ((1000*clk) / cpu_data(smp_processor_id())->itc_freq)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#404: FILE: include/linux/msa.h:1:
+/* $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#404: FILE: include/linux/msa.h:1:
+/* 

WARNING:TYPO_SPELLING: 'accouting' may be misspelled - perhaps 'accounting'?
#406: FILE: include/linux/msa.h:3:
+ * microstate accouting 
               ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#406: FILE: include/linux/msa.h:3:
+ * microstate accouting $

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#447: FILE: include/linux/msa.h:44:
+	unsigned flags;

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#456: FILE: include/linux/msa.h:53:
+#define QUEUE_FLIPPED (1<<0)
                         ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#456: FILE: include/linux/msa.h:53:
+#define QUEUE_FLIPPED (1<<0)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#460: FILE: include/linux/msa.h:57:
+ * The number of timers wanted is passed as argument, in case not all $

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#466: FILE: include/linux/msa.h:63:
+extern long sys_msa(int ntimers, int which, clk_t *timers);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#468: FILE: include/linux/msa.h:65:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#474: FILE: include/linux/msa.h:71:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#492: FILE: include/linux/msa.h:89:
+static inline void msa_next_state(struct task_struct *p, enum thread_state next_state) $

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#496: FILE: include/linux/msa.h:93:
+}
+static inline void msa_flip_expired(struct task_struct *prev) {

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#496: FILE: include/linux/msa.h:93:
+static inline void msa_flip_expired(struct task_struct *prev) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#506: FILE: include/linux/msa.h:103:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#507: FILE: include/linux/msa.h:104:
+static inline void msa_set_timer(struct task_struct *task, enum thread_state newstate) $

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#527: FILE: include/linux/msa.h:124:
+void msa_update_parent(struct task_struct *parent, struct task_struct *this){

ERROR:SPACING: space required before the open brace '{'
#527: FILE: include/linux/msa.h:124:
+void msa_update_parent(struct task_struct *parent, struct task_struct *this){

CHECK:LINE_SPACING: Please don't use multiple blank lines
#532: FILE: include/linux/msa.h:129:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#611: FILE: kernel/msa.c:1:
+/*

CHECK:LINE_SPACING: Please don't use multiple blank lines
#617: FILE: kernel/msa.c:7:
+
+

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#623: FILE: kernel/msa.c:13:
+#include <asm/uaccess.h>

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#665: FILE: kernel/msa.c:55:
+		msnext->timers[ONEXPIREDQUEUE] += queueflip_time[msnext->lastqueued] - msnext->last_change;

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:TRAILING_WHITESPACE: trailing whitespace
#671: FILE: kernel/msa.c:61:
+^I$

ERROR:SPACING: space required before the open parenthesis '('
#676: FILE: kernel/msa.c:66:
+	} else switch(prev->state) {

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#676: FILE: kernel/msa.c:66:
+	} else switch(prev->state) {

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#680: FILE: kernel/msa.c:70:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#697: FILE: kernel/msa.c:87:
+^Icase TASK_RUNNING:^I^I$

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#709: FILE: kernel/msa.c:99:
+	msnext->cur_state = interrupted ? INTERRUPTED: ONCPU_USER;
 	                                             ^

WARNING:SIZEOF_PARENTHESIS: sizeof *msp should be sizeof(*msp)
#720: FILE: kernel/msa.c:110:
+	memset(msp, 0, sizeof *msp);

CHECK:BRACES: braces {} should be used on all arms of this statement
#734: FILE: kernel/msa.c:124:
+	if (msp->cur_state == INTERRUPTED)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#736: FILE: kernel/msa.c:126:
+	else {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#765: FILE: kernel/msa.c:155:
+	for (s = 0; s < NR_MICRO_STATES; s++) {
+		*msp++ += *msc++ + *msgc++;
+	}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#770: FILE: kernel/msa.c:160:
+void msa_start_irq(int cpu, int irq) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#786: FILE: kernel/msa.c:176:
+void msa_continue_irq(int cpu, int oldirq, int newirq) $

WARNING:LINE_SPACING: Missing a blank line after declarations
#789: FILE: kernel/msa.c:179:
+	clk_t now;
+	MSA_NOW(now);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#796: FILE: kernel/msa.c:186:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#797: FILE: kernel/msa.c:187:
+void msa_finish_irq(int cpu, int irq) $

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#817: FILE: kernel/msa.c:207:
+
+}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#820: FILE: kernel/msa.c:210:
+clk_t msa_irq_time(int cpu, int irq) $

WARNING:LINE_SPACING: Missing a blank line after declarations
#823: FILE: kernel/msa.c:213:
+	clk_t x = MSA_TO_NSEC(msa_irq_times[cpu][irq]);
+	do_div(x, 1000);

WARNING:STORAGE_CLASS: storage class 'asmlinkage' should be located before type 'long'
#830: FILE: kernel/msa.c:220:
+long asmlinkage sys_msa(int ntimers, int which, clk_t __user *timers)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#847: FILE: kernel/msa.c:237:
+^I$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#849: FILE: kernel/msa.c:239:
+		BUG_ON(msp->cur_state != ONCPU_USER);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:TRAILING_WHITESPACE: trailing whitespace
#850: FILE: kernel/msa.c:240:
+^I$

WARNING:LINE_SPACING: Missing a blank line after declarations
#862: FILE: kernel/msa.c:252:
+		clk_t x = MSA_TO_NSEC(*tp++);
+		if (copy_to_user(timers++, &x, sizeof x))

WARNING:SIZEOF_PARENTHESIS: sizeof x should be sizeof(x)
#862: FILE: kernel/msa.c:252:
+		if (copy_to_user(timers++, &x, sizeof x))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#869: FILE: kernel/msa.c:259:
+long asmlinkage $

WARNING:STORAGE_CLASS: storage class 'asmlinkage' should be located before type 'long'
#869: FILE: kernel/msa.c:259:
+long asmlinkage 

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#872: FILE: kernel/msa.c:262:
+	return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000360979.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 25 errors, 28 warnings, 16 checks, 760 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000360979.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
