WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#36: 
# This is a BitKeeper generated patch for the following project:

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#37: 
# Project Name: Linux kernel tree

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#38: 
# This patch format is intended for GNU patch command version 2.5 or higher.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#38: 
# This patch format is intended for GNU patch command version 2.5 or higher.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#39: 
# This patch includes the following deltas:

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#40: 
#	           ChangeSet	1.1707  -> 1.1708 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#41: 
#	               (new)	        -> 1.1     include/linux/mask.h

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#42: 
#

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#43: 
# The following is the BitKeeper ChangeSet Log

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#44: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#45: 
# 04/03/28	pj@sgi.com	1.1708

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#46: 
# New mask ADT to be used as common basis for cpumask and nodemask types.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#47: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#48: 
#

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#53: FILE: include/linux/mask.h:1:
+#ifndef _ASM_GENERIC_MASK_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#57: FILE: include/linux/mask.h:5:
+ * include/linux/mask.h

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#231: FILE: include/linux/mask.h:179:
+ *   if necessary modify the common include/linux/mask.h

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'nbits' - possible side-effects?
#257: FILE: include/linux/mask.h:205:
+#define MASK_LAST_WORD(nbits)						\
+(									\
+	((nbits) % BITS_PER_LONG) ?					\
+		(1<<((nbits) % BITS_PER_LONG))-1 : ~0UL			\
+)				

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#260: FILE: include/linux/mask.h:208:
+		(1<<((nbits) % BITS_PER_LONG))-1 : ~0UL			\
 		  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#260: FILE: include/linux/mask.h:208:
+		(1<<((nbits) % BITS_PER_LONG))-1 : ~0UL			\
 		                              ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#261: FILE: include/linux/mask.h:209:
+)^I^I^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#269: FILE: include/linux/mask.h:217:
+#define mask_setall(mask, nbits) ^I^I^I^I^I\$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'mask' - possible side-effects?
#269: FILE: include/linux/mask.h:217:
+#define mask_setall(mask, nbits) 					\
+do {									\
+	size_t sz_all_but_last = sizeof(mask) - sizeof(unsigned long);	\
+	if (sz_all_but_last > 0)					\
+		memset((mask)._m, 0xff, sz_all_but_last);		\
+	(mask)._m[BITS_TO_LONGS(nbits)-1] = MASK_LAST_WORD(nbits);	\
+} while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'nbits' - possible side-effects?
#269: FILE: include/linux/mask.h:217:
+#define mask_setall(mask, nbits) 					\
+do {									\
+	size_t sz_all_but_last = sizeof(mask) - sizeof(unsigned long);	\
+	if (sz_all_but_last > 0)					\
+		memset((mask)._m, 0xff, sz_all_but_last);		\
+	(mask)._m[BITS_TO_LONGS(nbits)-1] = MASK_LAST_WORD(nbits);	\
+} while(0)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#274: FILE: include/linux/mask.h:222:
+	(mask)._m[BITS_TO_LONGS(nbits)-1] = MASK_LAST_WORD(nbits);	\
 	                              ^

ERROR:SPACING: space required before the open parenthesis '('
#275: FILE: include/linux/mask.h:223:
+} while(0)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#277: FILE: include/linux/mask.h:225:
+#define mask_clearall(mask)^I ^I^I^I^I^I\$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'mask' - possible side-effects?
#277: FILE: include/linux/mask.h:225:
+#define mask_clearall(mask)	 					\
+do {									\
+	if (sizeof(mask) == sizeof(unsigned long))			\
+	    (mask)._m[0] = 0UL;						\
+	else								\
+	    memset((mask)._m, 0, sizeof(mask));				\
+} while(0)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#279: FILE: include/linux/mask.h:227:
+	if (sizeof(mask) == sizeof(unsigned long))			\
+	    (mask)._m[0] = 0UL;						\

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#281: FILE: include/linux/mask.h:229:
+	else								\
+	    memset((mask)._m, 0, sizeof(mask));				\

ERROR:SPACING: space required before the open parenthesis '('
#283: FILE: include/linux/mask.h:231:
+} while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'dst' - possible side-effects?
#291: FILE: include/linux/mask.h:239:
+#define mask_and(dst, src1, src2)					\
+do {									\
+	if (sizeof(dst) == sizeof(unsigned long))			\
+		(dst)._m[0] = (src1)._m[0] & (src2)._m[0];		\
+	else								\
+		bitmap_and((dst)._m, (src1)._m, (src2)._m,		\
+						sizeof(dst) * 8);	\
+} while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'src1' - possible side-effects?
#291: FILE: include/linux/mask.h:239:
+#define mask_and(dst, src1, src2)					\
+do {									\
+	if (sizeof(dst) == sizeof(unsigned long))			\
+		(dst)._m[0] = (src1)._m[0] & (src2)._m[0];		\
+	else								\
+		bitmap_and((dst)._m, (src1)._m, (src2)._m,		\
+						sizeof(dst) * 8);	\
+} while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'src2' - possible side-effects?
#291: FILE: include/linux/mask.h:239:
+#define mask_and(dst, src1, src2)					\
+do {									\
+	if (sizeof(dst) == sizeof(unsigned long))			\
+		(dst)._m[0] = (src1)._m[0] & (src2)._m[0];		\
+	else								\
+		bitmap_and((dst)._m, (src1)._m, (src2)._m,		\
+						sizeof(dst) * 8);	\
+} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#298: FILE: include/linux/mask.h:246:
+} while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'dst' - possible side-effects?
#300: FILE: include/linux/mask.h:248:
+#define mask_or(dst, src1, src2)					\
+do {									\
+	if (sizeof(dst) == sizeof(unsigned long))			\
+		(dst)._m[0] = (src1)._m[0] | (src2)._m[0];		\
+	else								\
+		bitmap_or((dst)._m, (src1)._m, (src2)._m,		\
+						sizeof(dst) * 8);	\
+} while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'src1' - possible side-effects?
#300: FILE: include/linux/mask.h:248:
+#define mask_or(dst, src1, src2)					\
+do {									\
+	if (sizeof(dst) == sizeof(unsigned long))			\
+		(dst)._m[0] = (src1)._m[0] | (src2)._m[0];		\
+	else								\
+		bitmap_or((dst)._m, (src1)._m, (src2)._m,		\
+						sizeof(dst) * 8);	\
+} while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'src2' - possible side-effects?
#300: FILE: include/linux/mask.h:248:
+#define mask_or(dst, src1, src2)					\
+do {									\
+	if (sizeof(dst) == sizeof(unsigned long))			\
+		(dst)._m[0] = (src1)._m[0] | (src2)._m[0];		\
+	else								\
+		bitmap_or((dst)._m, (src1)._m, (src2)._m,		\
+						sizeof(dst) * 8);	\
+} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#307: FILE: include/linux/mask.h:255:
+} while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'dst' - possible side-effects?
#309: FILE: include/linux/mask.h:257:
+#define mask_xor(dst, src1, src2)					\
+do {									\
+	if (sizeof(dst) == sizeof(unsigned long))			\
+		(dst)._m[0] = (src1)._m[0] ^ (src2)._m[0];		\
+	else								\
+		bitmap_xor((dst)._m, (src1)._m, (src2)._m,		\
+						sizeof(dst) * 8);	\
+} while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'src1' - possible side-effects?
#309: FILE: include/linux/mask.h:257:
+#define mask_xor(dst, src1, src2)					\
+do {									\
+	if (sizeof(dst) == sizeof(unsigned long))			\
+		(dst)._m[0] = (src1)._m[0] ^ (src2)._m[0];		\
+	else								\
+		bitmap_xor((dst)._m, (src1)._m, (src2)._m,		\
+						sizeof(dst) * 8);	\
+} while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'src2' - possible side-effects?
#309: FILE: include/linux/mask.h:257:
+#define mask_xor(dst, src1, src2)					\
+do {									\
+	if (sizeof(dst) == sizeof(unsigned long))			\
+		(dst)._m[0] = (src1)._m[0] ^ (src2)._m[0];		\
+	else								\
+		bitmap_xor((dst)._m, (src1)._m, (src2)._m,		\
+						sizeof(dst) * 8);	\
+} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#316: FILE: include/linux/mask.h:264:
+} while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'dst' - possible side-effects?
#318: FILE: include/linux/mask.h:266:
+#define mask_andnot(dst, src1, src2)					\
+do {									\
+	if (sizeof(dst) == sizeof(unsigned long))			\
+		(dst)._m[0] = (src1)._m[0] & ~(src2)._m[0];		\
+	else								\
+		bitmap_andnot((dst)._m, (src1)._m, (src2)._m,		\
+						sizeof(dst) * 8);	\
+} while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'src1' - possible side-effects?
#318: FILE: include/linux/mask.h:266:
+#define mask_andnot(dst, src1, src2)					\
+do {									\
+	if (sizeof(dst) == sizeof(unsigned long))			\
+		(dst)._m[0] = (src1)._m[0] & ~(src2)._m[0];		\
+	else								\
+		bitmap_andnot((dst)._m, (src1)._m, (src2)._m,		\
+						sizeof(dst) * 8);	\
+} while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'src2' - possible side-effects?
#318: FILE: include/linux/mask.h:266:
+#define mask_andnot(dst, src1, src2)					\
+do {									\
+	if (sizeof(dst) == sizeof(unsigned long))			\
+		(dst)._m[0] = (src1)._m[0] & ~(src2)._m[0];		\
+	else								\
+		bitmap_andnot((dst)._m, (src1)._m, (src2)._m,		\
+						sizeof(dst) * 8);	\
+} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#325: FILE: include/linux/mask.h:273:
+} while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'mask1' - possible side-effects?
#330: FILE: include/linux/mask.h:278:
+#define mask_equal(mask1, mask2)					\
+({									\
+	int r;								\
+	if (sizeof(mask1) == sizeof(unsigned long))			\
+		r = ((mask1)._m[0] == (mask2)._m[0]);			\
+	else {								\
+		int nbits = sizeof(mask1) * 8;				\
+		r = bitmap_equal((mask1)._m, (mask2)._m, (nbits));	\
+	}								\
+	r;								\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'mask2' - possible side-effects?
#330: FILE: include/linux/mask.h:278:
+#define mask_equal(mask1, mask2)					\
+({									\
+	int r;								\
+	if (sizeof(mask1) == sizeof(unsigned long))			\
+		r = ((mask1)._m[0] == (mask2)._m[0]);			\
+	else {								\
+		int nbits = sizeof(mask1) * 8;				\
+		r = bitmap_equal((mask1)._m, (mask2)._m, (nbits));	\
+	}								\
+	r;								\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'mask1' - possible side-effects?
#342: FILE: include/linux/mask.h:290:
+#define mask_intersects(mask1, mask2)					\
+({									\
+	int r;								\
+	if (sizeof(mask1) == sizeof(unsigned long))			\
+		r = (((mask1)._m[0] & (mask2)._m[0]) != 0);		\
+	else {								\
+		int nbits = sizeof(mask1) * 8;				\
+		r = bitmap_intersects((mask1)._m, (mask2)._m, (nbits));	\
+	}								\
+	r;								\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'mask2' - possible side-effects?
#342: FILE: include/linux/mask.h:290:
+#define mask_intersects(mask1, mask2)					\
+({									\
+	int r;								\
+	if (sizeof(mask1) == sizeof(unsigned long))			\
+		r = (((mask1)._m[0] & (mask2)._m[0]) != 0);		\
+	else {								\
+		int nbits = sizeof(mask1) * 8;				\
+		r = bitmap_intersects((mask1)._m, (mask2)._m, (nbits));	\
+	}								\
+	r;								\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'mask1' - possible side-effects?
#354: FILE: include/linux/mask.h:302:
+#define mask_subset(mask1, mask2)					\
+({									\
+	int r;								\
+	if (sizeof(mask1) == sizeof(unsigned long))			\
+		r = (((mask1)._m[0] & ~(mask2)._m[0]) == 0);		\
+	else {								\
+		int nbits = sizeof(mask1) * 8;				\
+		r = bitmap_subset((mask1)._m, (mask2)._m, (nbits));	\
+	}								\
+	r;								\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'mask2' - possible side-effects?
#354: FILE: include/linux/mask.h:302:
+#define mask_subset(mask1, mask2)					\
+({									\
+	int r;								\
+	if (sizeof(mask1) == sizeof(unsigned long))			\
+		r = (((mask1)._m[0] & ~(mask2)._m[0]) == 0);		\
+	else {								\
+		int nbits = sizeof(mask1) * 8;				\
+		r = bitmap_subset((mask1)._m, (mask2)._m, (nbits));	\
+	}								\
+	r;								\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'mask' - possible side-effects?
#366: FILE: include/linux/mask.h:314:
+#define mask_empty(mask)						\
+({									\
+	int r;								\
+	if (sizeof(mask) == sizeof(unsigned long))			\
+		r = ((mask)._m[0] == 0UL);				\
+	else {								\
+		int nbits = sizeof(mask) * 8;				\
+		r = bitmap_empty((mask)._m, nbits);			\
+	}								\
+	r;								\
+})

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#394: FILE: include/linux/mask.h:342:
+	find_next_bit((mask)._m, (nbits), (bit)+1)
 	                                       ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'nbits' - possible side-effects?
#404: FILE: include/linux/mask.h:352:
+#define MASK_ALL(nbits)							\
+{{									\
+	[0 ... BITS_TO_LONGS(nbits)-1] = ~0UL,				\
+	[BITS_TO_LONGS(nbits)-1] = MASK_LAST_WORD(nbits)		\
+}}

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#406: FILE: include/linux/mask.h:354:
+	[0 ... BITS_TO_LONGS(nbits)-1] = ~0UL,				\
 	                           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#407: FILE: include/linux/mask.h:355:
+	[BITS_TO_LONGS(nbits)-1] = MASK_LAST_WORD(nbits)		\
 	                     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#412: FILE: include/linux/mask.h:360:
+	[0 ... BITS_TO_LONGS(nbits)-1] =  0UL				\
 	                           ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000292516.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 7 errors, 21 warnings, 31 checks, 372 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000292516.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
