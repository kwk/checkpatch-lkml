WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#50: FILE: include/asm-generic/bitops/atomic.h:1:
+#ifndef _ASM_GENERIC_BITOPS_ATOMIC_H_

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:INCLUDE_LINUX: Use #include <linux/cache.h> instead of <asm/cache.h>
#60: FILE: include/asm-generic/bitops/atomic.h:11:
+#include <asm/cache.h>		/* we use L1_CACHE_BYTES */

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#67: FILE: include/asm-generic/bitops/atomic.h:18:
+#  define ATOMIC_HASH(a) (&(__atomic_hash[ (((unsigned long) a)/L1_CACHE_BYTES) & (ATOMIC_HASH_SIZE-1) ]))

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: No space is necessary after a cast
#67: FILE: include/asm-generic/bitops/atomic.h:18:
+#  define ATOMIC_HASH(a) (&(__atomic_hash[ (((unsigned long) a)/L1_CACHE_BYTES) & (ATOMIC_HASH_SIZE-1) ]))

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#67: FILE: include/asm-generic/bitops/atomic.h:18:
+#  define ATOMIC_HASH(a) (&(__atomic_hash[ (((unsigned long) a)/L1_CACHE_BYTES) & (ATOMIC_HASH_SIZE-1) ]))
                                                                ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#67: FILE: include/asm-generic/bitops/atomic.h:18:
+#  define ATOMIC_HASH(a) (&(__atomic_hash[ (((unsigned long) a)/L1_CACHE_BYTES) & (ATOMIC_HASH_SIZE-1) ]))
                                                                                                    ^

ERROR:SPACING: space prohibited after that open square bracket '['
#67: FILE: include/asm-generic/bitops/atomic.h:18:
+#  define ATOMIC_HASH(a) (&(__atomic_hash[ (((unsigned long) a)/L1_CACHE_BYTES) & (ATOMIC_HASH_SIZE-1) ]))

ERROR:SPACING: space prohibited before that close square bracket ']'
#67: FILE: include/asm-generic/bitops/atomic.h:18:
+#  define ATOMIC_HASH(a) (&(__atomic_hash[ (((unsigned long) a)/L1_CACHE_BYTES) & (ATOMIC_HASH_SIZE-1) ]))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around __atomic_hash[ (((unsigned long) a)/L1_CACHE_BYTES) & (ATOMIC_HASH_SIZE-1) ]
#67: FILE: include/asm-generic/bitops/atomic.h:18:
+#  define ATOMIC_HASH(a) (&(__atomic_hash[ (((unsigned long) a)/L1_CACHE_BYTES) & (ATOMIC_HASH_SIZE-1) ]))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#72: FILE: include/asm-generic/bitops/atomic.h:23:
+ * this is the substitute */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:SPACING: space required after that ',' (ctx:VxV)
#73: FILE: include/asm-generic/bitops/atomic.h:24:
+#define _atomic_spin_lock_irqsave(l,f) do {	\
                                    ^

ERROR:SPACING: space required before the open parenthesis '('
#77: FILE: include/asm-generic/bitops/atomic.h:28:
+} while(0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#79: FILE: include/asm-generic/bitops/atomic.h:30:
+#define _atomic_spin_unlock_irqrestore(l,f) do {	\
                                         ^

ERROR:SPACING: space required before the open parenthesis '('
#83: FILE: include/asm-generic/bitops/atomic.h:34:
+} while(0)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#85: FILE: include/asm-generic/bitops/atomic.h:36:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#87: FILE: include/asm-generic/bitops/atomic.h:38:
+#  define _atomic_spin_lock_irqsave(l,f) do { local_irq_save(f); } while (0)
                                      ^

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#87: FILE: include/asm-generic/bitops/atomic.h:38:
+#  define _atomic_spin_lock_irqsave(l,f) do { local_irq_save(f); } while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

ERROR:SPACING: space required after that ',' (ctx:VxV)
#88: FILE: include/asm-generic/bitops/atomic.h:39:
+#  define _atomic_spin_unlock_irqrestore(l,f) do { local_irq_restore(f); } while (0)
                                           ^

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#88: FILE: include/asm-generic/bitops/atomic.h:39:
+#  define _atomic_spin_unlock_irqrestore(l,f) do { local_irq_restore(f); } while (0)

WARNING:TYPO_SPELLING: 'fucntion' may be misspelled - perhaps 'function'?
#94: FILE: include/asm-generic/bitops/atomic.h:45:
+ * *_bit fucntion is holding a spin lock.  If the NMI handler also wants
          ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'writting' may be misspelled - perhaps 'writing'?
#110: FILE: include/asm-generic/bitops/atomic.h:61:
+ * on non x86 architectures, so if you are writting portable code,
                                            ^^^^^^^^

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#116: FILE: include/asm-generic/bitops/atomic.h:67:
+static inline void set_bit(int nr, volatile unsigned long *addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#137: FILE: include/asm-generic/bitops/atomic.h:88:
+static inline void clear_bit(int nr, volatile unsigned long *addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#158: FILE: include/asm-generic/bitops/atomic.h:109:
+static inline void change_bit(int nr, volatile unsigned long *addr)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#174: FILE: include/asm-generic/bitops/atomic.h:125:
+ * This operation is atomic and cannot be reordered.  $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#178: FILE: include/asm-generic/bitops/atomic.h:129:
+static inline int test_and_set_bit(int nr, volatile unsigned long *addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#202: FILE: include/asm-generic/bitops/atomic.h:153:
+static inline int test_and_clear_bit(int nr, volatile unsigned long *addr)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#222: FILE: include/asm-generic/bitops/atomic.h:173:
+ * This operation is atomic and cannot be reordered.  $

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#225: FILE: include/asm-generic/bitops/atomic.h:176:
+static inline int test_and_change_bit(int nr, volatile unsigned long *addr)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000104678.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 10 errors, 14 warnings, 5 checks, 191 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000104678.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
