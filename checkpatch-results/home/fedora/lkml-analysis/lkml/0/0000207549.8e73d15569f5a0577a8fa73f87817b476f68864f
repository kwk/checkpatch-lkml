WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#56: 
Signed-Off-By: Alasdair G Kergon <agk@redhat.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#63: FILE: drivers/md/Kconfig:230:
+config DM_MULTIPATH
+	tristate "Multipath target (EXPERIMENTAL)"
+	depends on BLK_DEV_DM && EXPERIMENTAL
+	---help---
+	  Allow volume managers to support multipath hardware.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#92: FILE: drivers/md/dm-mpath.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#112: FILE: drivers/md/dm-mpath.c:21:
+#include <asm/atomic.h>

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#114: FILE: drivers/md/dm-mpath.c:23:
+#define MESG_STR(x) x, sizeof(x)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#121: FILE: drivers/md/dm-mpath.c:30:
+	unsigned fail_count;		/* Cumulative failure count */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#138: FILE: drivers/md/dm-mpath.c:47:
+	unsigned pg_num;		/* Reference number */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#139: FILE: drivers/md/dm-mpath.c:48:
+	unsigned bypassed;		/* Temporarily bypass this PG? */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#141: FILE: drivers/md/dm-mpath.c:50:
+	unsigned nr_pgpaths;		/* Number of paths in PG */

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#150: FILE: drivers/md/dm-mpath.c:59:
+	spinlock_t lock;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#152: FILE: drivers/md/dm-mpath.c:61:
+	unsigned nr_priority_groups;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#155: FILE: drivers/md/dm-mpath.c:64:
+	unsigned nr_valid_paths;	/* Total number of usable paths */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#159: FILE: drivers/md/dm-mpath.c:68:
+	unsigned repeat_count;		/* I/Os left before calling PS again */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#161: FILE: drivers/md/dm-mpath.c:70:
+	unsigned queue_io;		/* Must we queue all I/O? */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#162: FILE: drivers/md/dm-mpath.c:71:
+	unsigned queue_if_no_path;	/* Queue I/O if last path fails? */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#163: FILE: drivers/md/dm-mpath.c:72:
+	unsigned suspended;		/* Has dm core suspended our I/O? */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#167: FILE: drivers/md/dm-mpath.c:76:
+	unsigned queue_size;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#195: FILE: drivers/md/dm-mpath.c:104:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#198: FILE: drivers/md/dm-mpath.c:107:
+ *-----------------------------------------------*/

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#235: FILE: drivers/md/dm-mpath.c:144:
+	list_for_each_entry_safe (pgpath, tmp, pgpaths, list) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#283: FILE: drivers/md/dm-mpath.c:192:
+	list_for_each_entry_safe (pg, tmp, &m->priority_groups, list) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#292: FILE: drivers/md/dm-mpath.c:201:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#295: FILE: drivers/md/dm-mpath.c:204:
+ *-----------------------------------------------*/

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#322: FILE: drivers/md/dm-mpath.c:231:
+	unsigned bypassed = 1;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#345: FILE: drivers/md/dm-mpath.c:254:
+		list_for_each_entry (pg, &m->priority_groups, list) {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#359: FILE: drivers/md/dm-mpath.c:268:
+		  unsigned was_queued)

CHECK:BRACES: braces {} should be used on all arms of this statement
#377: FILE: drivers/md/dm-mpath.c:286:
+	if ((pgpath && m->queue_io) ||
[...]
+	} else if (!pgpath)
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#401: FILE: drivers/md/dm-mpath.c:310:
+static int queue_if_no_path(struct multipath *m, unsigned queue_if_no_path)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#418: FILE: drivers/md/dm-mpath.c:327:
+ *---------------------------------------------------------------*/

CHECK:SPACING: No space is necessary after a cast
#451: FILE: drivers/md/dm-mpath.c:360:
+	struct multipath *m = (struct multipath *) data;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#453: FILE: drivers/md/dm-mpath.c:362:
+	unsigned must_queue = 0;

CHECK:SPACING: No space is necessary after a cast
#479: FILE: drivers/md/dm-mpath.c:388:
+	struct multipath *m = (struct multipath *) data;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#487: FILE: drivers/md/dm-mpath.c:396:
+ * <#priority groups> $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#490: FILE: drivers/md/dm-mpath.c:399:
+ *      <#paths> <#per-path selector args> $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#492: FILE: drivers/md/dm-mpath.c:401:
+ *---------------------------------------------------------------*/

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#494: FILE: drivers/md/dm-mpath.c:403:
+	unsigned min;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#495: FILE: drivers/md/dm-mpath.c:404:
+	unsigned max;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#501: FILE: drivers/md/dm-mpath.c:410:
+static int read_param(struct param *param, char *str, unsigned *v, char **error)

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#504: FILE: drivers/md/dm-mpath.c:413:
+	    (sscanf(str, "%u", v) != 1) ||
+	    (*v < param->min) ||
+	    (*v > param->max)) {
+		*error = param->error;
+		return -EINVAL;
+	}

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#515: FILE: drivers/md/dm-mpath.c:424:
+	unsigned argc;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#533: FILE: drivers/md/dm-mpath.c:442:
+static void consume(struct arg_set *as, unsigned n)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#535: FILE: drivers/md/dm-mpath.c:444:
+	BUG_ON (as->argc < n);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#535: FILE: drivers/md/dm-mpath.c:444:
+	BUG_ON (as->argc < n);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#545: FILE: drivers/md/dm-mpath.c:454:
+	unsigned ps_argc;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#575: FILE: drivers/md/dm-mpath.c:484:
+static struct pgpath *parse_path(struct arg_set *as, struct path_selector *ps,
+			       struct dm_target *ti)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#620: FILE: drivers/md/dm-mpath.c:529:
+	unsigned i, nr_selector_args, nr_params;

WARNING:TYPO_SPELLING: 'aruments' may be misspelled - perhaps 'arguments'?
#625: FILE: drivers/md/dm-mpath.c:534:
+		ti->error = ESTR("not enough priority group aruments");
 		                                            ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#682: FILE: drivers/md/dm-mpath.c:591:
+	unsigned argc;

CHECK:BRACES: braces {} should be used on all arms of this statement
#695: FILE: drivers/md/dm-mpath.c:604:
+	if (!strnicmp(shift(as), MESG_STR("queue_if_no_path")))
[...]
+	else {
[...]

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#697: FILE: drivers/md/dm-mpath.c:606:
+		return queue_if_no_path(m, 1);
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#697: FILE: drivers/md/dm-mpath.c:606:
+	else {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#715: FILE: drivers/md/dm-mpath.c:624:
+	unsigned pg_count = 0;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#716: FILE: drivers/md/dm-mpath.c:625:
+	unsigned next_pg_num;

CHECK:SPACING: No space is necessary after a cast
#775: FILE: drivers/md/dm-mpath.c:684:
+	struct multipath *m = (struct multipath *) ti->private;

WARNING:LINE_SPACING: Missing a blank line after declarations
#776: FILE: drivers/md/dm-mpath.c:685:
+	struct multipath *m = (struct multipath *) ti->private;
+	free_multipath(m);

CHECK:SPACING: No space is necessary after a cast
#787: FILE: drivers/md/dm-mpath.c:696:
+	struct multipath *m = (struct multipath *) ti->private;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#917: FILE: drivers/md/dm-mpath.c:826:
+	unsigned pgnum;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pgnum > m->nr_priority_groups'
#920: FILE: drivers/md/dm-mpath.c:829:
+	if (!pgstr || (sscanf(pgstr, "%u", &pgnum) != 1) || !pgnum ||
+	    (pgnum > m->nr_priority_groups)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#920: FILE: drivers/md/dm-mpath.c:829:
+	if (!pgstr || (sscanf(pgstr, "%u", &pgnum) != 1) || !pgnum ||
+	    (pgnum > m->nr_priority_groups)) {
+		DMWARN("invalid PG number supplied to switch_pg_num");
+		return -EINVAL;
+	}

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'switch_pg_num', this function's name, in a string
#922: FILE: drivers/md/dm-mpath.c:831:
+		DMWARN("invalid PG number supplied to switch_pg_num");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#949: FILE: drivers/md/dm-mpath.c:858:
+	unsigned pgnum;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pgnum > m->nr_priority_groups'
#951: FILE: drivers/md/dm-mpath.c:860:
+	if (!pgstr || (sscanf(pgstr, "%u", &pgnum) != 1) || !pgnum ||
+	    (pgnum > m->nr_priority_groups)) {

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#951: FILE: drivers/md/dm-mpath.c:860:
+	if (!pgstr || (sscanf(pgstr, "%u", &pgnum) != 1) || !pgnum ||
+	    (pgnum > m->nr_priority_groups)) {
+		DMWARN("invalid PG number supplied to bypass_pg");
+		return -EINVAL;
+	}

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#972: FILE: drivers/md/dm-mpath.c:881:
+	unsigned err_flags = MP_FAIL_PATH;	/* Default behavior */

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#982: FILE: drivers/md/dm-mpath.c:891:
+			return -EIO;
+		} else {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#992: FILE: drivers/md/dm-mpath.c:901:
+^I$

WARNING:INDENTED_LABEL: labels should not be indented
#1000: FILE: drivers/md/dm-mpath.c:909:
+      requeue:

CHECK:SPACING: No space is necessary after a cast
#1017: FILE: drivers/md/dm-mpath.c:926:
+	struct multipath *m = (struct multipath *) ti->private;

CHECK:SPACING: No space is necessary after a cast
#1018: FILE: drivers/md/dm-mpath.c:927:
+	struct mpath_io *mpio = (struct mpath_io *) map_context->ptr;

CHECK:SPACING: No space is necessary after a cast
#1041: FILE: drivers/md/dm-mpath.c:950:
+	struct multipath *m = (struct multipath *) ti->private;

CHECK:SPACING: No space is necessary after a cast
#1053: FILE: drivers/md/dm-mpath.c:962:
+	struct multipath *m = (struct multipath *) ti->private;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1066: FILE: drivers/md/dm-mpath.c:975:
+ *             num_paths num_selector_args $

CHECK:SPACING: No space is necessary after a cast
#1080: FILE: drivers/md/dm-mpath.c:989:
+	struct multipath *m = (struct multipath *) ti->private;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1083: FILE: drivers/md/dm-mpath.c:992:
+	unsigned pg_num;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1100: FILE: drivers/md/dm-mpath.c:1009:
+^Ielse if (m->current_pg)^I$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#1102: FILE: drivers/md/dm-mpath.c:1011:
+	else
+			pg_num = 1;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1171: FILE: drivers/md/dm-mpath.c:1080:
+static int multipath_message(struct dm_target *ti, unsigned argc, char **argv)

CHECK:SPACING: No space is necessary after a cast
#1175: FILE: drivers/md/dm-mpath.c:1084:
+	struct multipath *m = (struct multipath *) ti->private;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1222: FILE: drivers/md/dm-mpath.c:1131:
+ *---------------------------------------------------------------*/

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1281: FILE: drivers/md/dm-mpath.h:1:
+/*

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1296: FILE: drivers/md/dm-mpath.h:16:
+	unsigned is_active;	/* Read-only */

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1305: FILE: drivers/md/dm-path-selector.c:1:
+/*

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1337: FILE: drivers/md/dm-path-selector.c:33:
+	list_for_each_entry (psi, &_path_selectors, list) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'psi->use == 0'
#1352: FILE: drivers/md/dm-path-selector.c:48:
+		if ((psi->use == 0) && !try_module_get(psi->pst.module))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1394: FILE: drivers/md/dm-path-selector.c:90:
+		BUG();

CHECK:BRACES: braces {} should be used on all arms of this statement
#1422: FILE: drivers/md/dm-path-selector.c:118:
+	if (__find_path_selector_type(pst->name)) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1425: FILE: drivers/md/dm-path-selector.c:121:
+	} else

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1459: FILE: drivers/md/dm-path-selector.c:155:
+EXPORT_SYMBOL(dm_register_path_selector);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1460: FILE: drivers/md/dm-path-selector.c:156:
+EXPORT_SYMBOL(dm_unregister_path_selector);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1464: FILE: drivers/md/dm-path-selector.h:1:
+/*

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1495: FILE: drivers/md/dm-path-selector.h:32:
+typedef int (*ps_ctr_fn) (struct path_selector *ps, unsigned argc, char **argv);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1510: FILE: drivers/md/dm-path-selector.h:47:
+ * calling the function again.  0 means don't call it again unless $

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#1514: FILE: drivers/md/dm-path-selector.h:51:
+					   unsigned *repeat_count);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000207549.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 7 errors, 64 warnings, 22 checks, 1494 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000207549.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
