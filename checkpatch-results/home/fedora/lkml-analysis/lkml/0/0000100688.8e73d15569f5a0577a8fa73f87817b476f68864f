WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#27: 
I've only committed minor changes to dynticks since the last public release.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#100: FILE: include/linux/timer.h:100:
+extern void conditional_run_local_timers(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#145: FILE: kernel/timer.c:499:
+	if ((hrtimer_next_jiffie(&hr_expires) == 0)
[...]
+			return hr_expires;

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#146: FILE: kernel/timer.c:500:
+	if ((hrtimer_next_jiffie(&hr_expires) == 0)
+		&& (time_before(hr_expires, jiffies + 2)))

WARNING:JIFFIES_COMPARISON: Comparing jiffies is almost always wrong; prefer time_after, time_before and friends
#174: FILE: kernel/timer.c:921:
+	if (base->timer_jiffies != jiffies)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#185: FILE: include/linux/dyntick.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#186: FILE: include/linux/dyntick.h:2:
+ * linux/include/linux/dyntick.h

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:BIT_MACRO: Prefer using the BIT macro
#203: FILE: include/linux/dyntick.h:19:
+#define dyntick_SKIPPING	(1 << 2)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#204: FILE: include/linux/dyntick.h:20:
+#define dyntick_ENABLED	(1 << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#205: FILE: include/linux/dyntick.h:21:
+#define dyntick_SUITABLE	(1 << 0)

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#211: FILE: include/linux/dyntick.h:27:
+	spinlock_t lock;

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#220: FILE: include/linux/dyntick.h:36:
+	void (*arch_reprogram)(unsigned long);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#222: FILE: include/linux/dyntick.h:38:
+	void (*arch_all_cpus_idle)(unsigned int);

WARNING:NEW_TYPEDEFS: do not add new typedefs
#230: FILE: include/linux/dyntick.h:46:
+typedef struct {

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#239: FILE: include/linux/dyntick.h:55:
+extern void dyntick_register(struct dyntick_timer *new_timer);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#244: FILE: include/linux/dyntick.h:60:
+extern int dyntick_enabled(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#245: FILE: include/linux/dyntick.h:61:
+extern int dyntick_skipping(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#246: FILE: include/linux/dyntick.h:62:
+extern int dyntick_allcpus_skipping(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#247: FILE: include/linux/dyntick.h:63:
+extern int dyntick_current_skip(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#248: FILE: include/linux/dyntick.h:64:
+extern unsigned long dyntick_next_tick(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#249: FILE: include/linux/dyntick.h:65:
+extern void timer_dyn_reprogram(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#250: FILE: include/linux/dyntick.h:66:
+extern void dyn_early_reprogram(unsigned int delta);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#251: FILE: include/linux/dyntick.h:67:
+extern void set_dyntick_limits(unsigned int max_skip, unsigned int min_skip);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#290: FILE: include/linux/dyntick.h:106:
+	if (dyntick->tick <= jiffies ||
[...]
+			dyntick->tick = __get_cpu_var(dyn_cpu).next_tick;

WARNING:JIFFIES_COMPARISON: Comparing jiffies is almost always wrong; prefer time_after, time_before and friends
#290: FILE: include/linux/dyntick.h:106:
+	if (dyntick->tick <= jiffies ||

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#291: FILE: include/linux/dyntick.h:107:
+	if (dyntick->tick <= jiffies ||
+		__get_cpu_var(dyn_cpu).next_tick < dyntick->tick)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#305: FILE: include/linux/dyntick.h:121:
+extern int account_timer(unsigned long function, unsigned long data);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#340: FILE: include/linux/dyntick.h:156:
+static inline void set_dyntick_limits(unsigned int max_skip,
+	unsigned int min_skip)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#360: FILE: kernel/dyntick.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#361: FILE: kernel/dyntick.c:2:
+ * linux/kernel/dyntick.c

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#397: FILE: kernel/dyntick.c:38:
+EXPORT_SYMBOL(dyntick_enabled);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#399: FILE: kernel/dyntick.c:40:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:JIFFIES_COMPARISON: Comparing jiffies is almost always wrong; prefer time_after, time_before and friends
#405: FILE: kernel/dyntick.c:46:
+	int ret = (get_cpu_var(dyn_cpu).next_tick > jiffies);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#411: FILE: kernel/dyntick.c:52:
+EXPORT_SYMBOL(dyntick_skipping);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#418: FILE: kernel/dyntick.c:59:
+EXPORT_SYMBOL(dyntick_allcpus_skipping);

WARNING:JIFFIES_COMPARISON: Comparing jiffies is almost always wrong; prefer time_after, time_before and friends
#427: FILE: kernel/dyntick.c:68:
+	if (get_cpu_var(dyn_cpu).next_tick > jiffies)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#433: FILE: kernel/dyntick.c:74:
+EXPORT_SYMBOL(dyntick_current_skip);

WARNING:JIFFIES_COMPARISON: Comparing jiffies is almost always wrong; prefer time_after, time_before and friends
#442: FILE: kernel/dyntick.c:83:
+	if (get_cpu_var(dyn_cpu).next_tick > jiffies)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#448: FILE: kernel/dyntick.c:89:
+EXPORT_SYMBOL(dyntick_next_tick);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#517: FILE: kernel/dyntick.c:158:
+	if (tick >= get_cpu_var(dyn_cpu).next_tick &&
[...]
+			goto put_out;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#518: FILE: kernel/dyntick.c:159:
+	if (tick >= get_cpu_var(dyn_cpu).next_tick &&
+		__get_cpu_var(dyn_cpu).next_tick > jiffies)

WARNING:JIFFIES_COMPARISON: Comparing jiffies is almost always wrong; prefer time_after, time_before and friends
#518: FILE: kernel/dyntick.c:159:
+		__get_cpu_var(dyn_cpu).next_tick > jiffies)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#530: FILE: kernel/dyntick.c:171:
+EXPORT_SYMBOL(dyn_early_reprogram);

WARNING:MISPLACED_INIT: __initdata should be placed after dyntick_autoenable
#554: FILE: kernel/dyntick.c:195:
+static int __initdata dyntick_autoenable = 1;

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#574: FILE: kernel/dyntick.c:215:
+__setup("dyntick=", dyntick_setup);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#582: FILE: kernel/dyntick.c:223:
+extern struct sys_device device_timer;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#590: FILE: kernel/dyntick.c:231:
+static ssize_t timer_set_dyntick(struct sys_device *dev, const char *buf,
+				  size_t count)

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#593: FILE: kernel/dyntick.c:234:
+	unsigned int enable = simple_strtoul(buf, NULL, 2);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#603: FILE: kernel/dyntick.c:244:
+			printk(KERN_INFO

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#604: FILE: kernel/dyntick.c:245:
+				"dyntick: Enabling dynamic tick timer \n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#612: FILE: kernel/dyntick.c:253:
+			printk(KERN_INFO

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#613: FILE: kernel/dyntick.c:254:
+				"dyntick: Disabling dynamic tick timer \n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dyntick"
#641: FILE: kernel/dyntick.c:282:
+	if (dyntick == NULL || dyntick->arch_init == NULL ||

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dyntick->arch_init"
#641: FILE: kernel/dyntick.c:282:
+	if (dyntick == NULL || dyntick->arch_init == NULL ||

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#643: FILE: kernel/dyntick.c:284:
+		printk(KERN_ERR "dyntick: No suitable timer found\n");

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#647: FILE: kernel/dyntick.c:288:
+	if ((ret = dyntick->arch_init())) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#648: FILE: kernel/dyntick.c:289:
+		printk(KERN_ERR "dyntick: Init failed\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#654: FILE: kernel/dyntick.c:295:
+		printk(KERN_INFO "dyntick: Enabling dynamic tick timer v%s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#655: FILE: kernel/dyntick.c:296:
+		printk(KERN_INFO "dyntick: Enabling dynamic tick timer v%s\n",
+			dyntick_VERSION);

CHECK:BRACES: Unbalanced braces around else statement
#656: FILE: kernel/dyntick.c:297:
+	} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#657: FILE: kernel/dyntick.c:298:
+		printk(KERN_INFO "dyntick: Dynamic tick timer v%s disabled\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#658: FILE: kernel/dyntick.c:299:
+		printk(KERN_INFO "dyntick: Dynamic tick timer v%s disabled\n",
+			dyntick_VERSION);

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#861: FILE: arch/i386/kernel/timers/timer_pm.c:32:
+#define PMTMR_TICKS_PER_JIFFY (PMTMR_EXPECTED_RATE / (CALIBRATE_LATCH/LATCH))
                                                                      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#869: FILE: arch/i386/kernel/timers/timer_pm.c:131:
+	printk("Using %u PM timer ticks per jiffy \n", PMTMR_TICKS_PER_JIFFY);

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#869: FILE: arch/i386/kernel/timers/timer_pm.c:131:
+	printk("Using %u PM timer ticks per jiffy \n", PMTMR_TICKS_PER_JIFFY);

CHECK:SPACING: No space is necessary after a cast
#938: FILE: arch/i386/kernel/timers/timer_pm.c:244:
+	return (unsigned long) cyc2us(delta + offset_delay);

WARNING:HOTPLUG_SECTION: Using __devinitdata is unnecessary
#960: FILE: arch/i386/kernel/timers/timer_tsc.c:36:
 int tsc_disable __devinitdata = 0;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1124: FILE: include/asm-i386/timer.h:42:
+extern void reprogram_pit_timer(unsigned long jiffies_to_skip);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1137: FILE: include/asm-i386/timer.h:77:
+extern void cpufreq_delayed_get(void);

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#1141: FILE: include/asm-i386/timer.h:81:
+	static int lost_count = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

CHECK:BRACES: braces {} should be used on all arms of this statement
#1143: FILE: include/asm-i386/timer.h:83:
+	if (lost >= 2) {
[...]
+	} else
[...]

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1144: FILE: include/asm-i386/timer.h:84:
+		jiffies_64 += lost-1;
 		                  ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1148: FILE: include/asm-i386/timer.h:88:
+			printk(KERN_WARNING "Losing too many ticks!\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1149: FILE: include/asm-i386/timer.h:89:
+			printk(KERN_WARNING "TSC cannot be used as a timesource.  \n");

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1149: FILE: include/asm-i386/timer.h:89:
+			printk(KERN_WARNING "TSC cannot be used as a timesource.  \n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1150: FILE: include/asm-i386/timer.h:90:
+			printk(KERN_WARNING "Possible reasons for this are:\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1151: FILE: include/asm-i386/timer.h:91:
+			printk(KERN_WARNING "  You're running with Speedstep,\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1152: FILE: include/asm-i386/timer.h:92:
+			printk(KERN_WARNING "  You don't have DMA enabled for your hard disk (see hdparm),\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1153: FILE: include/asm-i386/timer.h:93:
+			printk(KERN_WARNING "  Incorrect TSC synchronization on an SMP system (see dmesg).\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1154: FILE: include/asm-i386/timer.h:94:
+			printk(KERN_WARNING "Falling back to a sane timesource now.\n");

CHECK:BRACES: Unbalanced braces around else statement
#1161: FILE: include/asm-i386/timer.h:101:
+	} else

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1268: FILE: arch/i386/kernel/apic.c:974:
 static void __devinit setup_APIC_timer(unsigned int clocks)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1293: FILE: arch/i386/kernel/apic.c:1098:
+	set_dyntick_limits((0xFFFFFFFF / calibration_result) * APIC_DIVISOR,
+		2);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1303: FILE: arch/i386/kernel/apic.c:1169:
+void smp_local_timer_interrupt(struct pt_regs * regs)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1335: FILE: arch/i386/kernel/dyntick.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#1336: FILE: arch/i386/kernel/dyntick.c:2:
+ * linux/arch/i386/kernel/dyntick.c

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/io.h> instead of <asm/io.h>
#1360: FILE: arch/i386/kernel/dyntick.c:26:
+#include <asm/io.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#1449: FILE: arch/i386/kernel/dyntick.c:115:
+	switch (dyn_handler.skip_handler) {
+		case SKIP_APIC:
[...]
+		default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#1461: FILE: arch/i386/kernel/dyntick.c:127:
+	switch (dyn_handler.skip_handler) {
+		case SKIP_PIT:
[...]
+		case SKIP_APIC:
[...]
+		case SKIP_SMP_APIC:

ERROR:SPACING: spaces required around that '>' (ctx:VxW)
#1494: FILE: arch/i386/kernel/dyntick.c:160:
+	if (dyn_handler.skip_handler == SKIP_APIC && num_present_cpus()> 1)
 	                                                               ^

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#1497: FILE: arch/i386/kernel/dyntick.c:163:
+	switch (dyn_handler.skip_handler) {
+		case SKIP_PIT:
[...]
+		case SKIP_APIC:
[...]
+		case SKIP_SMP_APIC:

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1499: FILE: arch/i386/kernel/dyntick.c:165:
+			printk(KERN_INFO "dyntick: Using PIT "

WARNING:SPLIT_STRING: quoted string split across lines
#1500: FILE: arch/i386/kernel/dyntick.c:166:
+			printk(KERN_INFO "dyntick: Using PIT "
+				"reprogramming\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1505: FILE: arch/i386/kernel/dyntick.c:171:
+			printk(KERN_INFO "dyntick: Disabling APIC timer, "

WARNING:SPLIT_STRING: quoted string split across lines
#1506: FILE: arch/i386/kernel/dyntick.c:172:
+			printk(KERN_INFO "dyntick: Disabling APIC timer, "
+				"using PIT reprogramming\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1512: FILE: arch/i386/kernel/dyntick.c:178:
+			printk(KERN_INFO "dyntick: Using per cpu APIC "

WARNING:SPLIT_STRING: quoted string split across lines
#1513: FILE: arch/i386/kernel/dyntick.c:179:
+			printk(KERN_INFO "dyntick: Using per cpu APIC "
+				"reprogramming, skipping PIT when all cpus "

WARNING:SPLIT_STRING: quoted string split across lines
#1514: FILE: arch/i386/kernel/dyntick.c:180:
+				"reprogramming, skipping PIT when all cpus "
+				"idle\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1521: FILE: arch/i386/kernel/dyntick.c:187:
+	printk(KERN_INFO "dyntick: Maximum ticks to skip limited to %i\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1522: FILE: arch/i386/kernel/dyntick.c:188:
+	printk(KERN_INFO "dyntick: Maximum ticks to skip limited to %i\n",
+		dyntick->max_skip);

CHECK:BRACES: braces {} should be used on all arms of this statement
#1557: FILE: arch/i386/kernel/dyntick.c:223:
+	if (clear_nohz_cpu(cpu)) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1572: FILE: arch/i386/kernel/dyntick.c:238:
+	} else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1608: FILE: arch/i386/kernel/dyntick.c:274:
+		printk(KERN_INFO "dyntick: Found suitable timer: %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1609: FILE: arch/i386/kernel/dyntick.c:275:
+		printk(KERN_INFO "dyntick: Found suitable timer: %s\n",
+			cur_timer->name);

CHECK:BRACES: Unbalanced braces around else statement
#1610: FILE: arch/i386/kernel/dyntick.c:276:
+	} else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1611: FILE: arch/i386/kernel/dyntick.c:277:
+		printk(KERN_ERR "dyntick: Cannot use timer %s - pmtmr "

WARNING:SPLIT_STRING: quoted string split across lines
#1612: FILE: arch/i386/kernel/dyntick.c:278:
+		printk(KERN_ERR "dyntick: Cannot use timer %s - pmtmr "
+			"failed: ACPI disabled?\n", cur_timer->name);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1729: FILE: include/asm-i386/apic.h:124:
+extern void reprogram_apic_timer(unsigned long count);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1746: FILE: include/asm-i386/dyntick.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#1747: FILE: include/asm-i386/dyntick.h:2:
+ * linux/include/asm-i386/dyntick.h

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1766: FILE: include/asm-i386/dyntick.h:21:
+extern void idle_reprogram_timer(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1767: FILE: include/asm-i386/dyntick.h:22:
+extern void dyntick_interrupt(struct pt_regs *regs);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1768: FILE: include/asm-i386/dyntick.h:23:
+extern void __init setup_dyntick_use_apic(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1769: FILE: include/asm-i386/dyntick.h:24:
+extern void __init dyntick_time_init(struct timer_opts *cur_timer);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1770: FILE: include/asm-i386/dyntick.h:25:
+extern void set_irq_idle_timestamp(const unsigned long next);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1821: FILE: kernel/timer_top.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#1822: FILE: kernel/timer_top.c:2:
+ * kernel/timer_top.c

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1843: FILE: kernel/timer_top.c:23:
+
+

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#1850: FILE: kernel/timer_top.c:30:
+#include <asm/uaccess.h>

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1858: FILE: kernel/timer_top.c:38:
+^Ichar ^I^I^Icomm[TASK_COMM_LEN];$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1859: FILE: kernel/timer_top.c:39:
+^Istruct list_head ^Ilist;$

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#1863: FILE: kernel/timer_top.c:43:
+	spinlock_t		lock;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1895: FILE: kernel/timer_top.c:75:
+	struct task_struct * task_info;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 15)
#1905: FILE: kernel/timer_top.c:85:
+	if (data) {
+	       task_info = (struct task_struct *) data;

CHECK:SPACING: No space is necessary after a cast
#1906: FILE: kernel/timer_top.c:86:
+	       task_info = (struct task_struct *) data;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'task_info->pid > 0'
#1908: FILE: kernel/timer_top.c:88:
+		if ((task_info->pid > 0) && (task_info->pid < PID_MAX_LIMIT)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'task_info->pid < PID_MAX_LIMIT'
#1908: FILE: kernel/timer_top.c:88:
+		if ((task_info->pid > 0) && (task_info->pid < PID_MAX_LIMIT)) {

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1935: FILE: kernel/timer_top.c:115:
+EXPORT_SYMBOL(account_timer);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1966: FILE: kernel/timer_top.c:146:
+		seq_printf(m, "%x %lu %d %s\n", top->func_pointer,
+			top->counter, top->pid, top->comm);

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#1970: FILE: kernel/timer_top.c:150:
+		seq_printf(m, "Disabled\n");

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1980: FILE: kernel/timer_top.c:160:
+static struct file_operations proc_timertop_operations = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

ERROR:CODE_INDENT: code indent should use tabs where possible
#1991: FILE: kernel/timer_top.c:171:
+                                 unsigned long count, void *data)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1991: FILE: kernel/timer_top.c:171:
+static int proc_write_timer_input(struct file *file, const char *page,
+                                 unsigned long count, void *data)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1991: FILE: kernel/timer_top.c:171:
+                                 unsigned long count, void *data)$

CHECK:BRACES: braces {} should be used on all arms of this statement
#2009: FILE: kernel/timer_top.c:189:
+	if (!strncmp(input_data, "clear", 5))
[...]
+	else if (!strncmp(input_data, "start", 5))
[...]
+	else if (!strncmp(input_data, "stop", 4)) {
[...]

ERROR:CODE_INDENT: code indent should use tabs where possible
#2024: FILE: kernel/timer_top.c:204:
+                                int count, int *eof, void *data)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2024: FILE: kernel/timer_top.c:204:
+static int proc_read_timer_input(char *page, char **start, off_t off,
+                                int count, int *eof, void *data)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2024: FILE: kernel/timer_top.c:204:
+                                int count, int *eof, void *data)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2034: FILE: kernel/timer_top.c:214:
+	top_root.cache = kmem_cache_create("top_info",
+		sizeof(struct timer_top_info), 0, SLAB_PANIC, NULL, NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!top_info_file"
#2037: FILE: kernel/timer_top.c:217:
+	if (top_info_file == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!top_info_file_out"
#2041: FILE: kernel/timer_top.c:221:
+	if (top_info_file_out == NULL)

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#2088: FILE: drivers/input/serio/i8042.h:47:
+#define I8042_POLL_PERIOD	HZ/5
                          	  ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2088: FILE: drivers/input/serio/i8042.h:47:
+#define I8042_POLL_PERIOD	HZ/5

ERROR:CODE_INDENT: code indent should use tabs where possible
#2195: FILE: drivers/acpi/processor_idle.c:334:
+  ^I  ^I*  ^I- we're scheduled to sleep at least BM_JIFFIES now$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2195: FILE: drivers/acpi/processor_idle.c:334:
+  ^I  ^I*  ^I- we're scheduled to sleep at least BM_JIFFIES now$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2208: FILE: drivers/acpi/processor_idle.c:347:
+^I^I *   ^I- we can promote$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2212: FILE: drivers/acpi/processor_idle.c:351:
+ ^I^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2212: FILE: drivers/acpi/processor_idle.c:351:
+ ^I^I */$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pr->power.last_sleep > BM_JIFFIES'
#2213: FILE: drivers/acpi/processor_idle.c:352:
+		if (cx->promotion.state &&
+		    !(pr->power.bm_activity & 0x1) &&
+		    (pr->power.last_sleep > BM_JIFFIES) &&
+		    (dyntick_current_skip() >= BM_JIFFIES)) {

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2221: FILE: drivers/acpi/processor_idle.c:360:
+^I^I^I * ^I- we can promote$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'next_state->promotion.state'
#2227: FILE: drivers/acpi/processor_idle.c:366:
+			if ((next_state->promotion.state) &&
+			    (pr->power.last_sleep > 2 * BM_JIFFIES) &&
+			    (dyntick_current_skip() >= 2 * BM_JIFFIES))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pr->power.bm_check_timestamp == jiffies'
#2240: FILE: drivers/acpi/processor_idle.c:379:
+		if (cx->demotion.state &&
+		    (pr->power.bm_activity & 0x1) &&
+		    (pr->power.bm_check_timestamp == jiffies)) {

WARNING:JIFFIES_COMPARISON: Comparing jiffies is almost always wrong; prefer time_after, time_before and friends
#2242: FILE: drivers/acpi/processor_idle.c:381:
+		    (pr->power.bm_check_timestamp == jiffies)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cx->type != ACPI_STATE_C1'
#2257: FILE: drivers/acpi/processor_idle.c:488:
+	if ((cx->type != ACPI_STATE_C1) && (sleep_ticks > 0))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sleep_ticks > 0'
#2257: FILE: drivers/acpi/processor_idle.c:488:
+	if ((cx->type != ACPI_STATE_C1) && (sleep_ticks > 0))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2261: FILE: drivers/acpi/processor_idle.c:492:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2337: FILE: kernel/hrtimer.c:515:
+static inline struct hrtimer * hrtimer_get_next(struct hrtimer_base *bases)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cur"
#2352: FILE: kernel/hrtimer.c:530:
+		if (cur == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!timer"
#2355: FILE: kernel/hrtimer.c:533:
+		if (timer == NULL || cur->expires.tv64 < timer->expires.tv64)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2390: FILE: kernel/hrtimer.c:568:
+	struct hrtimer * timer;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!timer"
#2393: FILE: kernel/hrtimer.c:571:
+	if (timer == NULL)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2414: FILE: include/linux/hrtimer.h:118:
+extern int hrtimer_next_jiffie(unsigned long *next_jiffie);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000100688.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 15 errors, 77 warnings, 70 checks, 2112 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000100688.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
