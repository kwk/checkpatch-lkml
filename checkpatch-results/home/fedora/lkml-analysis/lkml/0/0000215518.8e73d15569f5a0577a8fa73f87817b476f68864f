CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#61: FILE: drivers/crypto/padlock-aes.c:375:
+		   uint8_t *iv, void *control_word, uint32_t count)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#71: FILE: drivers/crypto/padlock-aes.c:385:
+padlock_xcrypt_cbc(uint8_t *input, uint8_t *output, uint8_t *key,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#72: FILE: drivers/crypto/padlock-aes.c:386:
+		   uint8_t *iv, void *control_word, uint32_t count)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#82: FILE: drivers/crypto/padlock-aes.c:396:
+padlock_xcrypt_cfb(uint8_t *input, uint8_t *output, uint8_t *key,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#83: FILE: drivers/crypto/padlock-aes.c:397:
+		   uint8_t *iv, void *control_word, uint32_t count)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#93: FILE: drivers/crypto/padlock-aes.c:407:
+padlock_xcrypt_ofb(uint8_t *input, uint8_t *output, uint8_t *key,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#94: FILE: drivers/crypto/padlock-aes.c:408:
+		   uint8_t *iv, void *control_word, uint32_t count)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#106: FILE: drivers/crypto/padlock-aes.c:419:
+	    uint8_t *iv_arg, size_t nbytes, int encdec, int mode)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#125: FILE: drivers/crypto/padlock-aes.c:465:
+		uint8_t *in, *out, *iv;

ERROR:IN_ATOMIC: do not use in_atomic in drivers
#126: FILE: drivers/crypto/padlock-aes.c:466:
+		int gfp = in_atomic() ? GFP_ATOMIC : GFP_KERNEL;

in_atomic() is not for driver use so any such use is reported as an ERROR.
Also in_atomic() is often used to determine if sleeping is permitted,
but it is not reliable in this use model.  Therefore its use is
strongly discouraged.

However, in_atomic() is ok for core kernel use.

See: https://lore.kernel.org/lkml/20080320201723.b87b3732.akpm@linux-foundation.org/

CHECK:BRACES: braces {} should be used on all arms of this statement
#129: FILE: drivers/crypto/padlock-aes.c:469:
+		if (unlikely(((long)in_arg) & 0x0F)) {
[...]
+		else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#133: FILE: drivers/crypto/padlock-aes.c:473:
+		}
+		else

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#134: FILE: drivers/crypto/padlock-aes.c:474:
+			in = (uint8_t*)in_arg;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#136: FILE: drivers/crypto/padlock-aes.c:476:
+		if (unlikely(((long)out_arg) & 0x0F)) {
[...]
+		else
[...]

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#143: FILE: drivers/crypto/padlock-aes.c:483:
+		}
+		else

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#151: FILE: drivers/crypto/padlock-aes.c:491:
+		switch (mode) {
+			case CRYPTO_TFM_MODE_ECB:
[...]
+			case CRYPTO_TFM_MODE_CBC:
[...]
+			case CRYPTO_TFM_MODE_CFB:
[...]
+			case CRYPTO_TFM_MODE_OFB:
[...]
+			default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#155: FILE: drivers/crypto/padlock-aes.c:495:
+							nbytes/AES_BLOCK_SIZE);
 							      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#161: FILE: drivers/crypto/padlock-aes.c:501:
+							nbytes/AES_BLOCK_SIZE);
 							      ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#167: FILE: drivers/crypto/padlock-aes.c:507:
+							nbytes/AES_BLOCK_SIZE);
 							      ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#173: FILE: drivers/crypto/padlock-aes.c:513:
+							nbytes/AES_BLOCK_SIZE);
 							      ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#177: FILE: drivers/crypto/padlock-aes.c:517:
+				BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#189: FILE: drivers/crypto/padlock-aes.c:529:
+		if (index)
+			kfree(index);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#195: FILE: drivers/crypto/padlock-aes.c:535:
+		uint8_t *iv, size_t nbytes, int encdec, int inplace)

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#246: FILE: drivers/crypto/padlock-aes.c:597:
+static int disable_multiblock = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#263: FILE: drivers/crypto/padlock-aes.c:613:
+	printk(KERN_NOTICE PFX

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000215518.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 6 errors, 3 warnings, 16 checks, 215 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000215518.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
