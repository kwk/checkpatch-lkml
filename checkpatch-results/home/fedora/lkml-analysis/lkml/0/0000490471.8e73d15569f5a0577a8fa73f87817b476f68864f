WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#46: 
     register_dynamic_syscall("attrctl", DYNAMIC_SYSCALL_FUNC(sys_attrctl)),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#95: FILE: fs/proc/proc_misc.c:325:
+static int dynamic_syscalls_read_proc(char *page, char **start, off_t off,
+				 int count, int *eof, void *data)

WARNING:LINE_SPACING: Missing a blank line after declarations
#98: FILE: fs/proc/proc_misc.c:328:
+	int len = get_dynamic_syscalls_list(page);
+	return proc_calc_metrics(page, start, off, count, eof, len);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#116: FILE: include/asm-i386/dynamic_syscalls.h:1:
+#ifndef _ASM_DYNAMIC_SYSCALLS_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#127: FILE: include/asm-i386/dynamic_syscalls.h:12:
+#define DYNAMIC_SYSCALL_LAST		NR_syscalls-1
                             		           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#127: FILE: include/asm-i386/dynamic_syscalls.h:12:
+#define DYNAMIC_SYSCALL_LAST		NR_syscalls-1

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#134: FILE: include/asm-i386/dynamic_syscalls.h:19:
+#define DYNAMIC_SYSCALL_FUNCADDR(f)	(DYNAMIC_SYSCALL_T)(f)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#141: FILE: include/asm-ia64/dynamic_syscalls.h:1:
+#ifndef _ASM_DYNAMIC_SYSCALLS_H

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#151: FILE: include/asm-ia64/dynamic_syscalls.h:11:
+#define DYNAMIC_SYSCALL_FIRST		(1217-DYNAMIC_SYSCALL_OFFSET)
                              		     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#152: FILE: include/asm-ia64/dynamic_syscalls.h:12:
+#define DYNAMIC_SYSCALL_LAST		NR_syscalls-1
                             		           ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#152: FILE: include/asm-ia64/dynamic_syscalls.h:12:
+#define DYNAMIC_SYSCALL_LAST		NR_syscalls-1

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#166: FILE: include/asm-ia64/dynamic_syscalls.h:26:
+#define DYNAMIC_SYSCALL_FUNCADDR(f)	({DYNAMIC_SYSCALL_T *fp = (DYNAMIC_SYSCALL_T *)(f); fp[0];})
                                    	                    ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#166: FILE: include/asm-ia64/dynamic_syscalls.h:26:
+#define DYNAMIC_SYSCALL_FUNCADDR(f)	({DYNAMIC_SYSCALL_T *fp = (DYNAMIC_SYSCALL_T *)(f); fp[0];})
                                    	                                                         ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#173: FILE: include/linux/dynamic_syscalls.h:1:
+#ifndef _LINUX_DYNAMIC_SYSCALLS_H

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#176: FILE: include/linux/dynamic_syscalls.h:4:
+extern int get_syscalls_list(char *page);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#177: FILE: include/linux/dynamic_syscalls.h:5:
+extern int register_dynamic_syscall(const char *name, void (*func)(void));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#178: FILE: include/linux/dynamic_syscalls.h:6:
+extern int unregister_dynamic_syscall(const char *name);

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#180: FILE: include/linux/dynamic_syscalls.h:8:
+#define DYNAMIC_SYSCALL_FUNC(f) (void (*)(void))(&f)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'f' may be better as '(f)' to avoid precedence issues
#180: FILE: include/linux/dynamic_syscalls.h:8:
+#define DYNAMIC_SYSCALL_FUNC(f) (void (*)(void))(&f)

WARNING:LONG_LINE: line length of 116 exceeds 100 columns
#200: FILE: init/main.c:814:
+	printk("registered %d\n", register_dynamic_syscall("test", DYNAMIC_SYSCALL_FUNC(register_dynamic_syscall)));

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#200: FILE: init/main.c:814:
+	printk("registered %d\n", register_dynamic_syscall("test", DYNAMIC_SYSCALL_FUNC(register_dynamic_syscall)));

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#220: FILE: kernel/dynamic_syscalls.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#221: FILE: kernel/dynamic_syscalls.c:2:
+ *  kernel/dynamic_syscalls.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#249: FILE: kernel/dynamic_syscalls.c:30:
+static const char *dynamic_syscalls_name[DYNAMIC_SYSCALL_LAST-DYNAMIC_SYSCALL_FIRST+1];
                                                              ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#249: FILE: kernel/dynamic_syscalls.c:30:
+static const char *dynamic_syscalls_name[DYNAMIC_SYSCALL_LAST-DYNAMIC_SYSCALL_FIRST+1];
                                                                                    ^

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#250: FILE: kernel/dynamic_syscalls.c:31:
+extern DYNAMIC_SYSCALL_T sys_call_table[];

WARNING:LINE_SPACING: Missing a blank line after declarations
#263: FILE: kernel/dynamic_syscalls.c:44:
+	int i, len;
+	len = sprintf(page, "Dynamic syscall numbers:\n");

WARNING:ARRAY_SIZE: Prefer ARRAY_SIZE(dynamic_syscalls_name)
#265: FILE: kernel/dynamic_syscalls.c:46:
+	for (i = 0; i < sizeof(dynamic_syscalls_name)/sizeof(dynamic_syscalls_name[0]) ; i++) {

The ARRAY_SIZE(foo) macro should be preferred over
sizeof(foo)/sizeof(foo[0]) for finding number of elements in an
array.

The macro is defined in include/linux/kernel.h::

  #define ARRAY_SIZE(x) (sizeof(x) / sizeof((x)[0]))

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#265: FILE: kernel/dynamic_syscalls.c:46:
+	for (i = 0; i < sizeof(dynamic_syscalls_name)/sizeof(dynamic_syscalls_name[0]) ; i++) {
 	                                             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#267: FILE: kernel/dynamic_syscalls.c:48:
+			len += sprintf(page+len, "%3d %s 0x%lx\n",
 			                   ^

WARNING:LONG_LINE: line length of 124 exceeds 100 columns
#268: FILE: kernel/dynamic_syscalls.c:49:
+				i+DYNAMIC_SYSCALL_FIRST, dynamic_syscalls_name[i], sys_call_table[i+DYNAMIC_SYSCALL_FIRST]);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#268: FILE: kernel/dynamic_syscalls.c:49:
+				i+DYNAMIC_SYSCALL_FIRST, dynamic_syscalls_name[i], sys_call_table[i+DYNAMIC_SYSCALL_FIRST]);
 				 ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#268: FILE: kernel/dynamic_syscalls.c:49:
+				i+DYNAMIC_SYSCALL_FIRST, dynamic_syscalls_name[i], sys_call_table[i+DYNAMIC_SYSCALL_FIRST]);
 				                                                                   ^

WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#288: FILE: kernel/dynamic_syscalls.c:69:
+ * Returns: < 0, an error occured, the return value is the error number.
                           ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:LINE_SPACING: Missing a blank line after declarations
#295: FILE: kernel/dynamic_syscalls.c:76:
+	int i, ret = -EBUSY;
+	printk("register_dynamic_syscall %s %p\n", name, func);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#295: FILE: kernel/dynamic_syscalls.c:76:
+	printk("register_dynamic_syscall %s %p\n", name, func);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'register_dynamic_syscall', this function's name, in a string
#295: FILE: kernel/dynamic_syscalls.c:76:
+	printk("register_dynamic_syscall %s %p\n", name, func);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:ARRAY_SIZE: Prefer ARRAY_SIZE(dynamic_syscalls_name)
#297: FILE: kernel/dynamic_syscalls.c:78:
+	for (i = 0; i < sizeof(dynamic_syscalls_name)/sizeof(dynamic_syscalls_name[0]) ; i++) {

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#297: FILE: kernel/dynamic_syscalls.c:78:
+	for (i = 0; i < sizeof(dynamic_syscalls_name)/sizeof(dynamic_syscalls_name[0]) ; i++) {
 	                                             ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#298: FILE: kernel/dynamic_syscalls.c:79:
+		printk("i %d dynamic_syscalls_name[i] %p\n", i, dynamic_syscalls_name[i]);

WARNING:LONG_LINE: line length of 174 exceeds 100 columns
#299: FILE: kernel/dynamic_syscalls.c:80:
+		printk("i+DYNAMIC_SYSCALL_FIRST %d sys_call_table[i+DYNAMIC_SYSCALL_FIRST] %p\n", i+DYNAMIC_SYSCALL_FIRST, (void *)(sys_call_table[i+DYNAMIC_SYSCALL_FIRST]));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#299: FILE: kernel/dynamic_syscalls.c:80:
+		printk("i+DYNAMIC_SYSCALL_FIRST %d sys_call_table[i+DYNAMIC_SYSCALL_FIRST] %p\n", i+DYNAMIC_SYSCALL_FIRST, (void *)(sys_call_table[i+DYNAMIC_SYSCALL_FIRST]));

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#299: FILE: kernel/dynamic_syscalls.c:80:
+		printk("i+DYNAMIC_SYSCALL_FIRST %d sys_call_table[i+DYNAMIC_SYSCALL_FIRST] %p\n", i+DYNAMIC_SYSCALL_FIRST, (void *)(sys_call_table[i+DYNAMIC_SYSCALL_FIRST]));
 		                                                                                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#299: FILE: kernel/dynamic_syscalls.c:80:
+		printk("i+DYNAMIC_SYSCALL_FIRST %d sys_call_table[i+DYNAMIC_SYSCALL_FIRST] %p\n", i+DYNAMIC_SYSCALL_FIRST, (void *)(sys_call_table[i+DYNAMIC_SYSCALL_FIRST]));
 		                                                                                                                                    ^

WARNING:LONG_LINE: line length of 119 exceeds 100 columns
#300: FILE: kernel/dynamic_syscalls.c:81:
+		if (dynamic_syscalls_name[i] == NULL && sys_call_table[i+DYNAMIC_SYSCALL_FIRST] == sys_call_table[0]) {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#300: FILE: kernel/dynamic_syscalls.c:81:
+		if (dynamic_syscalls_name[i] == NULL && sys_call_table[i+DYNAMIC_SYSCALL_FIRST] == sys_call_table[0]) {
 		                                                        ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dynamic_syscalls_name[i]"
#300: FILE: kernel/dynamic_syscalls.c:81:
+		if (dynamic_syscalls_name[i] == NULL && sys_call_table[i+DYNAMIC_SYSCALL_FIRST] == sys_call_table[0]) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#301: FILE: kernel/dynamic_syscalls.c:82:
+			printk("found syscall %d\n", i+DYNAMIC_SYSCALL_FIRST);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#301: FILE: kernel/dynamic_syscalls.c:82:
+			printk("found syscall %d\n", i+DYNAMIC_SYSCALL_FIRST);
 			                              ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#303: FILE: kernel/dynamic_syscalls.c:84:
+			sys_call_table[i+DYNAMIC_SYSCALL_FIRST] = DYNAMIC_SYSCALL_FUNCADDR(func);
 			                ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#304: FILE: kernel/dynamic_syscalls.c:85:
+			printk("updated\n");

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#305: FILE: kernel/dynamic_syscalls.c:86:
+			ret = i+DYNAMIC_SYSCALL_FIRST+DYNAMIC_SYSCALL_OFFSET;
 			       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#305: FILE: kernel/dynamic_syscalls.c:86:
+			ret = i+DYNAMIC_SYSCALL_FIRST+DYNAMIC_SYSCALL_OFFSET;
 			                             ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#321: FILE: kernel/dynamic_syscalls.c:102:
+	int i, ret = -EINVAL;
+	write_lock(&dynamic_syscalls_lock);

WARNING:ARRAY_SIZE: Prefer ARRAY_SIZE(dynamic_syscalls_name)
#322: FILE: kernel/dynamic_syscalls.c:103:
+	for (i = 0; i < sizeof(dynamic_syscalls_name)/sizeof(dynamic_syscalls_name[0]) ; i++) {

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#322: FILE: kernel/dynamic_syscalls.c:103:
+	for (i = 0; i < sizeof(dynamic_syscalls_name)/sizeof(dynamic_syscalls_name[0]) ; i++) {
 	                                             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#325: FILE: kernel/dynamic_syscalls.c:106:
+			sys_call_table[i+DYNAMIC_SYSCALL_FIRST] = sys_call_table[0];
 			                ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000490471.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 5 errors, 26 warnings, 26 checks, 225 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000490471.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
