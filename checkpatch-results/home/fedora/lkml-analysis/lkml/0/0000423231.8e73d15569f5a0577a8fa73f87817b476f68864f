ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#26: 
--- a/MAINTAINERS	Tue Oct 15 18:24:34 2002

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:MAINTAINERS_STYLE: Misordered MAINTAINERS entry - list 'M:' before 'P:'
#34: FILE: MAINTAINERS:1001:
+P:	Joe Thornber
+M:	dm@uk.sistina.com

WARNING:MAINTAINERS_STYLE: Misordered MAINTAINERS entry - list 'S:' before 'W:'
#37: FILE: MAINTAINERS:1004:
+W:	http://www.sistina.com/lvm
+S:	Maintained

ERROR:TRAILING_WHITESPACE: trailing whitespace
#56: FILE: drivers/md/Config.help:133:
+  If you want to compile this as a module, say M here and read $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#93: FILE: drivers/md/dm-hash.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:LINE_SPACING: Please don't use multiple blank lines
#132: FILE: drivers/md/dm-hash.c:40:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#135: FILE: drivers/md/dm-hash.c:43:
+ *---------------------------------------------------------------*/

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:LINE_SPACING: Please don't use multiple blank lines
#178: FILE: drivers/md/dm-hash.c:86:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#181: FILE: drivers/md/dm-hash.c:89:
+ *---------------------------------------------------------------*/

CHECK:SPACING: No space is necessary after a cast
#196: FILE: drivers/md/dm-hash.c:104:
+		h = (h + (unsigned int) *str++) * HASH_MULT;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#201: FILE: drivers/md/dm-hash.c:109:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#204: FILE: drivers/md/dm-hash.c:112:
+ *---------------------------------------------------------------*/

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#211: FILE: drivers/md/dm-hash.c:119:
+	list_for_each (tmp, _dev_buckets + h) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#252: FILE: drivers/md/dm-hash.c:160:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#255: FILE: drivers/md/dm-hash.c:163:
+ *---------------------------------------------------------------*/

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#274: FILE: drivers/md/dm-hash.c:182:
+	list_for_each (tmp, buckets + h) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#325: FILE: drivers/md/dm-hash.c:233:
+ *---------------------------------------------------------------*/

WARNING:LINE_SPACING: Missing a blank line after declarations
#329: FILE: drivers/md/dm-hash.c:237:
+	struct hash_cell *hc = kmalloc(sizeof(*hc), GFP_KERNEL);
+	if (hc) {

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#348: FILE: drivers/md/dm-hash.c:256:
+	dev_cell = name_cell = uuid_cell = NULL;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#349: FILE: drivers/md/dm-hash.c:257:
+	if (!(dev_cell = alloc_cell(md)) ||

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:TYPO_SPELLING: 'neccessary' may be misspelled - perhaps 'necessary'?
#411: FILE: drivers/md/dm-hash.c:319:
+	 * This looks nasty, but is neccessary to avoid a
 	                            ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPLIT_STRING: quoted string split across lines
#439: FILE: drivers/md/dm-hash.c:347:
+			DMWARN("device doesn't appear to be in the uuid "
+			       "hash table.");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#498: FILE: drivers/md/dm-table.c:1:
+/*

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#534: FILE: drivers/md/dm-table.c:37:
+#define __HIGH(l, r) if (*(l) < (r)) *(l) = (r)

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'l' - possible side-effects?
#534: FILE: drivers/md/dm-table.c:37:
+#define __HIGH(l, r) if (*(l) < (r)) *(l) = (r)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'r' - possible side-effects?
#534: FILE: drivers/md/dm-table.c:37:
+#define __HIGH(l, r) if (*(l) < (r)) *(l) = (r)

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#535: FILE: drivers/md/dm-table.c:38:
+#define __LOW(l, r) if (*(l) < (r)) *(l) = (r)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'l' - possible side-effects?
#535: FILE: drivers/md/dm-table.c:38:
+#define __LOW(l, r) if (*(l) < (r)) *(l) = (r)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'r' - possible side-effects?
#535: FILE: drivers/md/dm-table.c:38:
+#define __LOW(l, r) if (*(l) < (r)) *(l) = (r)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#544: FILE: drivers/md/dm-table.c:47:
+   __LOW(&lhs->max_sectors, rhs->max_sectors);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#545: FILE: drivers/md/dm-table.c:48:
+   __LOW(&lhs->max_phys_segments, rhs->max_phys_segments);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#546: FILE: drivers/md/dm-table.c:49:
+   __LOW(&lhs->max_hw_segments, rhs->max_hw_segments);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#547: FILE: drivers/md/dm-table.c:50:
+   __HIGH(&lhs->hardsect_size, rhs->hardsect_size);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#548: FILE: drivers/md/dm-table.c:51:
+   __LOW(&lhs->max_segment_size, rhs->max_segment_size);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#549: FILE: drivers/md/dm-table.c:52:
+   __LOW(&lhs->seg_boundary_mask, rhs->seg_boundary_mask);$

CHECK:SPACING: No space is necessary after a cast
#562: FILE: drivers/md/dm-table.c:65:
+		return (sector_t) - 1;

ERROR:SPACING: space prohibited after that '-' (ctx:WxW)
#562: FILE: drivers/md/dm-table.c:65:
+		return (sector_t) - 1;
 		                  ^

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#599: FILE: drivers/md/dm-table.c:102:
+	n_highs = (sector_t *) vcalloc(sizeof(struct dm_target) +

CHECK:SPACING: No space is necessary after a cast
#605: FILE: drivers/md/dm-table.c:108:
+	n_targets = (struct dm_target *) (n_highs + num);

WARNING:LINE_SPACING: Missing a blank line after declarations
#651: FILE: drivers/md/dm-table.c:154:
+		struct dm_dev *dd = list_entry(tmp, struct dm_dev, list);
+		next = tmp->next;

WARNING:SPLIT_STRING: quoted string split across lines
#682: FILE: drivers/md/dm-table.c:185:
+		DMWARN("devices still present during destroy: "
+		       "dm_table_remove_device calls missing");

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#707: FILE: drivers/md/dm-table.c:210:
+	struct nameidata nd;
 	                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#710: FILE: drivers/md/dm-table.c:213:
+	if ((r = path_lookup(path, LOOKUP_FOLLOW, &nd)))
 	                                           ^^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#710: FILE: drivers/md/dm-table.c:213:
+	if ((r = path_lookup(path, LOOKUP_FOLLOW, &nd)))

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#713: FILE: drivers/md/dm-table.c:216:
+	inode = nd.dentry->d_inode;
 	        ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#727: FILE: drivers/md/dm-table.c:230:
+	path_release(&nd);
 	              ^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#740: FILE: drivers/md/dm-table.c:243:
+		struct dm_dev *dd = list_entry(tmp, struct dm_dev, list);
+		if (kdev_same(dd->dev, dev))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#757: FILE: drivers/md/dm-table.c:260:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#759: FILE: drivers/md/dm-table.c:262:
+	if (!(d->bdev = bdget(kdev_t_to_nr(d->dev))))

WARNING:LINE_SPACING: Missing a blank line after declarations
#795: FILE: drivers/md/dm-table.c:298:
+	sector_t dev_size;
+	dev_size = dd->bdev->bd_inode->i_size;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#836: FILE: drivers/md/dm-table.c:339:
+		BUG();

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#843: FILE: drivers/md/dm-table.c:346:
+		if ((r = lookup_device(path, &dev)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#857: FILE: drivers/md/dm-table.c:360:
+		if ((r = open_dev(dd))) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#883: FILE: drivers/md/dm-table.c:386:
+
+

WARNING:TYPO_SPELLING: 'neccessary' may be misspelled - perhaps 'necessary'?
#906: FILE: drivers/md/dm-table.c:409:
+ * Decrement a devices use count and remove it if neccessary.
                                                   ^^^^^^^^^^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#954: FILE: drivers/md/dm-table.c:457:
+	if ((r = check_space(t)))

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#962: FILE: drivers/md/dm-table.c:465:
+	 * the merge fn apply the target level restrictions. */

CHECK:SPACING: No space is necessary after a cast
#979: FILE: drivers/md/dm-table.c:482:
+	indexes = (sector_t *) vcalloc(total, (unsigned long) NODE_SIZE);

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#979: FILE: drivers/md/dm-table.c:482:
+	indexes = (sector_t *) vcalloc(total, (unsigned long) NODE_SIZE);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1019: FILE: drivers/md/dm-table.c:522:
+EXPORT_SYMBOL(dm_get_device);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1020: FILE: drivers/md/dm-table.c:523:
+EXPORT_SYMBOL(dm_put_device);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1021: FILE: drivers/md/dm-table.c:524:
+EXPORT_SYMBOL(dm_table_event);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1025: FILE: drivers/md/dm-target.c:1:
+/*

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1069: FILE: drivers/md/dm-target.c:45:
+		end = out = start;

WARNING:RETURN_VOID: void function return statements are not generally useful
#1145: FILE: drivers/md/dm-target.c:121:
+	return;
+}

CHECK:SPACING: No space is necessary after a cast
#1161: FILE: drivers/md/dm-target.c:137:
+	struct tt_internal *ti = (struct tt_internal *) t;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1168: FILE: drivers/md/dm-target.c:144:
+		BUG();

WARNING:RETURN_VOID: void function return statements are not generally useful
#1172: FILE: drivers/md/dm-target.c:148:
+	return;
+}

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1209: FILE: drivers/md/dm-target.c:185:
+	if (!(ti = __find_target_type(t->name))) {

WARNING:RETURN_VOID: void function return statements are not generally useful
#1239: FILE: drivers/md/dm-target.c:215:
+	return;
+}

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1265: FILE: drivers/md/dm-target.c:241:
+EXPORT_SYMBOL(dm_register_target);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1266: FILE: drivers/md/dm-target.c:242:
+EXPORT_SYMBOL(dm_unregister_target);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1270: FILE: drivers/md/dm.c:1:
+/*

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#1289: FILE: drivers/md/dm.c:20:
+static int major = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#1290: FILE: drivers/md/dm.c:21:
+static int _major = 0;

WARNING:SPACING: Unnecessary space before function pointer arguments
#1377: FILE: drivers/md/dm.c:108:
+	int (*init) (void);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1378: FILE: drivers/md/dm.c:109:
+	void (*exit) (void);

WARNING:INDENTED_LABEL: labels should not be indented
#1402: FILE: drivers/md/dm.c:133:
+      bad:

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1534: FILE: drivers/md/dm.c:265:
+ *---------------------------------------------------------------*/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1575: FILE: drivers/md/dm.c:306:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#1589: FILE: drivers/md/dm.c:320:
+		sector_t offset = sector - ti->begin;
+		boundary = dm_round_up(offset + 1, ti->split_io) - offset;

CHECK:SPACING: No space is necessary after a cast
#1600: FILE: drivers/md/dm.c:331:
+	struct dm_io *io = (struct dm_io *) clone->bi_private;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1607: FILE: drivers/md/dm.c:338:
+		BUG();

WARNING:LINE_SPACING: Missing a blank line after declarations
#1700: FILE: drivers/md/dm.c:431:
+			sector_t bv_len = bv->bv_len >> SECTOR_SHIFT;
+			if (bv_len <= len)

CHECK:BRACES: braces {} should be used on all arms of this statement
#1700: FILE: drivers/md/dm.c:431:
+			if (bv_len <= len)
[...]
+			else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#1703: FILE: drivers/md/dm.c:434:
+			else {

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1736: FILE: drivers/md/dm.c:467:
+}
+/*-----------------------------------------------------------------

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1738: FILE: drivers/md/dm.c:469:
+ *---------------------------------------------------------------*/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1740: FILE: drivers/md/dm.c:471:
+
+

CHECK:SPACING: No space is necessary after a cast
#1748: FILE: drivers/md/dm.c:479:
+	struct mapped_device *md = (struct mapped_device *) q->queuedata;

CHECK:BRACES: braces {} should be used on all arms of this statement
#1764: FILE: drivers/md/dm.c:495:
+		if (r < 0) {
[...]
+		} else if (r == 0)
[...]

WARNING:INDENTED_LABEL: labels should not be indented
#1870: FILE: drivers/md/dm.c:601:
+      bad:

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IWUSR | S_IRGRP' are not preferred. Consider using octal permissions '0640'.
#1892: FILE: drivers/md/dm.c:623:
+			   S_IFBLK | S_IRUSR | S_IWUSR | S_IRGRP,

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:LINE_SPACING: Missing a blank line after declarations
#1910: FILE: drivers/md/dm.c:641:
+	request_queue_t *q = &md->queue;
+	md->map = t;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1955: FILE: drivers/md/dm.c:686:
+		BUG();

WARNING:INDENTED_LABEL: labels should not be indented
#2018: FILE: drivers/md/dm.c:749:
+      bad:

WARNING:YIELD: Using yield() is generally wrong. See yield() kernel-doc (sched/core.c)
#2193: FILE: drivers/md/dm.c:924:
+		yield();

WARNING:CONST_STRUCT: struct block_device_operations should normally be const
#2223: FILE: drivers/md/dm.c:954:
+struct block_device_operations dm_blk_dops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2243: FILE: drivers/md/dm.h:1:
+/*

WARNING:CONST_STRUCT: struct block_device_operations should normally be const
#2372: FILE: drivers/md/dm.h:130:
+extern struct block_device_operations dm_blk_dops;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2395: FILE: drivers/md/dm.h:153:
+
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#2459: FILE: drivers/md/dm.h:217:
+#define DMWARN(f, x...) printk(KERN_WARNING DM_NAME ": " f "\n" , ## x)

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#2459: FILE: drivers/md/dm.h:217:
+#define DMWARN(f, x...) printk(KERN_WARNING DM_NAME ": " f "\n" , ## x)
                                                                 ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2460: FILE: drivers/md/dm.h:218:
+#define DMERR(f, x...) printk(KERN_ERR DM_NAME ": " f "\n" , ## x)

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#2460: FILE: drivers/md/dm.h:218:
+#define DMERR(f, x...) printk(KERN_ERR DM_NAME ": " f "\n" , ## x)
                                                            ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2461: FILE: drivers/md/dm.h:219:
+#define DMINFO(f, x...) printk(KERN_INFO DM_NAME ": " f "\n" , ## x)

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#2461: FILE: drivers/md/dm.h:219:
+#define DMINFO(f, x...) printk(KERN_INFO DM_NAME ": " f "\n" , ## x)
                                                              ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2479: FILE: drivers/md/dm.h:237:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#2494: FILE: drivers/md/dm.h:252:
+	char *r = kmalloc(strlen(str) + 1, GFP_KERNEL);
+	if (r)

WARNING:LINE_SPACING: Missing a blank line after declarations
#2505: FILE: drivers/md/dm.h:263:
+	unsigned long r = n % size;
+	return n + (r ? (size - r) : 0);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2528: FILE: include/linux/device-mapper.h:1:
+/*

WARNING:NEW_TYPEDEFS: do not add new typedefs
#2548: FILE: include/linux/device-mapper.h:21:
+typedef enum { STATUSTYPE_INFO, STATUSTYPE_TABLE } status_type_t;

WARNING:TYPO_SPELLING: 'automaticall' may be misspelled - perhaps 'automatically'?
#2616: FILE: include/linux/device-mapper.h:89:
+	 * These are automaticall filled in by
 	             ^^^^^^^^^^^^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000423231.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 17 errors, 70 warnings, 26 checks, 2577 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000423231.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
