WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#45: 
diff -urN linux-2.5.26-rmap/Documentation/sysctl/vm.txt linux/Documentation/sysctl/vm.txt

ERROR:TRAILING_WHITESPACE: trailing whitespace
#98: FILE: Documentation/vm/overcommit-accounting:34:
+guarantees and run close to the edge you MUST mmap your stack for the $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:REPEATED_WORD: Possible repeated word: 'really'
#100: FILE: Documentation/vm/overcommit-accounting:36:
+not matter much but its a corner case if you really really care

ERROR:TRAILING_WHITESPACE: trailing whitespace
#102: FILE: Documentation/vm/overcommit-accounting:38:
+In modes 2 and 3 the MAP_NORESERVE flag is ignored. $

CHECK:SPACING: No space is necessary after a cast
#153: FILE: fs/exec.c:318:
+	if (!vm_enough_memory((STACK_TOP - (PAGE_MASK & (unsigned long) bprm->p))>>PAGE_SHIFT)) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#153: FILE: fs/exec.c:318:
+	if (!vm_enough_memory((STACK_TOP - (PAGE_MASK & (unsigned long) bprm->p))>>PAGE_SHIFT)) {
 	                                                                         ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#226: FILE: include/linux/mm.h:431:
+extern int do_munmap(struct mm_struct *, unsigned long, size_t, int);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mm_struct *' should also have an identifier name
#226: FILE: include/linux/mm.h:431:
+extern int do_munmap(struct mm_struct *, unsigned long, size_t, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#226: FILE: include/linux/mm.h:431:
+extern int do_munmap(struct mm_struct *, unsigned long, size_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#226: FILE: include/linux/mm.h:431:
+extern int do_munmap(struct mm_struct *, unsigned long, size_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#226: FILE: include/linux/mm.h:431:
+extern int do_munmap(struct mm_struct *, unsigned long, size_t, int);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#260: FILE: include/linux/mm.h:475:
+extern int expand_stack(struct vm_area_struct * vma, unsigned long address);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#260: FILE: include/linux/mm.h:475:
+extern int expand_stack(struct vm_area_struct * vma, unsigned long address);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#271: FILE: include/linux/mman.h:9:
+extern int vm_enough_memory(long pages);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#272: FILE: include/linux/mman.h:10:
+extern void vm_unacct_memory(long pages);

WARNING:LINE_SPACING: Missing a blank line after declarations
#316: FILE: kernel/fork.c:219:
+			unsigned int len = (mpnt->vm_end - mpnt->vm_start) >> PAGE_SHIFT;
+			if (!vm_enough_memory(len))

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#344: FILE: mm/mmap.c:2:
+ * mm/mmap.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:CODE_INDENT: code indent should use tabs where possible
#402: FILE: mm/mmap.c:73:
+        /*$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LINE_SPACING: Missing a blank line after declarations
#454: FILE: mm/mmap.c:116:
+		struct sysinfo i;
+		si_meminfo(&i);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#458: FILE: mm/mmap.c:120:
+^I^Isi_meminfo(&i);^I$

WARNING:LINE_SPACING: Missing a blank line after declarations
#458: FILE: mm/mmap.c:120:
+		struct sysinfo i;
+		si_meminfo(&i);	

CHECK:BRACES: Unbalanced braces around else statement
#460: FILE: mm/mmap.c:122:
+	} else  /* sysctl_overcommit_memory == 4 */

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#472: FILE: mm/mmap.c:133:
+void inline vm_unacct_memory(long pages)

The inline keyword should sit between storage class and type.

For example, the following segment::

  inline static int example_function(void)
  {
          ...
  }

should be::

  static inline int example_function(void)
  {
          ...
  }

ERROR:TRAILING_WHITESPACE: trailing whitespace
#473: FILE: mm/mmap.c:134:
+{^I$

WARNING:LINE_SPACING: Missing a blank line after declarations
#480: FILE: mm/mmap.c:141:
+	int len = vma->vm_end - vma->vm_start;
+	if (vma->vm_flags & VM_ACCOUNT)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#490: FILE: mm/mmap.c:211:
+		if (!do_munmap(mm, newbrk, oldbrk-newbrk, 1))
 		                                 ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#511: FILE: mm/mmap.c:430:
+unsigned long do_mmap_pgoff(struct file * file, unsigned long addr,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#512: FILE: mm/mmap.c:431:
+unsigned long do_mmap_pgoff(struct file * file, unsigned long addr,
+			unsigned long len, unsigned long prot,

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'file == NULL'
#546: FILE: mm/mmap.c:541:
+	if ((((vm_flags & (VM_SHARED | VM_WRITE)) == VM_WRITE) ||
+			(file == NULL)) && !(flags & MAP_NORESERVE)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#547: FILE: mm/mmap.c:542:
+	if ((((vm_flags & (VM_SHARED | VM_WRITE)) == VM_WRITE) ||
+			(file == NULL)) && !(flags & MAP_NORESERVE)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!file"
#547: FILE: mm/mmap.c:542:
+			(file == NULL)) && !(flags & MAP_NORESERVE)) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#585: FILE: mm/mmap.c:760:
+int expand_stack(struct vm_area_struct * vma, unsigned long address)

ERROR:CODE_INDENT: code indent should use tabs where possible
#595: FILE: mm/mmap.c:770:
+ ^Ispin_lock(&vma->vm_mm->page_table_lock);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#595: FILE: mm/mmap.c:770:
+ ^Ispin_lock(&vma->vm_mm->page_table_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#595: FILE: mm/mmap.c:770:
+ ^Ispin_lock(&vma->vm_mm->page_table_lock);$

ERROR:SPACING: space required before the open parenthesis '('
#599: FILE: mm/mmap.c:774:
+	if(!vm_enough_memory(grow)) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#603: FILE: mm/mmap.c:778:
+^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#605: FILE: mm/mmap.c:780:
+	if (vma->vm_end - address > current->rlim[RLIMIT_STACK].rlim_cur ||
+			((vma->vm_mm->total_vm + grow) << PAGE_SHIFT) >

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#736: FILE: mm/mprotect.c:2:
+ *  mm/mprotect.c

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#843: FILE: mm/mremap.c:287:
+		do_munmap(current->mm, addr+new_len, old_len - new_len, 1);
 		                           ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#902: FILE: mm/shmem.c:40:
+#define BLOCKS_PER_PAGE  (PAGE_CACHE_SIZE/512)
                                          ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#905: FILE: mm/shmem.c:43:
+		(ENTRIES_PER_PAGE/2) * (ENTRIES_PER_PAGE+1))
 		                 ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#905: FILE: mm/shmem.c:43:
+		(ENTRIES_PER_PAGE/2) * (ENTRIES_PER_PAGE+1))
 		                                        ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#943: FILE: mm/shmem.c:366:
+static int shmem_setattr(struct dentry * dentry, struct iattr *attr)

ERROR:SPACING: space required before the open brace '{'
#949: FILE: mm/shmem.c:372:
+	if ((attr->ia_valid & ATTR_SIZE) && (attr->ia_size <= SHMEM_MAX_BYTES)){

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'attr->ia_size <= SHMEM_MAX_BYTES'
#949: FILE: mm/shmem.c:372:
+	if ((attr->ia_valid & ATTR_SIZE) && (attr->ia_size <= SHMEM_MAX_BYTES)){

ERROR:CODE_INDENT: code indent should use tabs where possible
#951: FILE: mm/shmem.c:374:
+^I ^I * Account swap file usage based on new file size,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#951: FILE: mm/shmem.c:374:
+^I ^I * Account swap file usage based on new file size,$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#952: FILE: mm/shmem.c:375:
+^I^I * but just let vmtruncate fail on out-of-range sizes.^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#953: FILE: mm/shmem.c:376:
+^I ^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#953: FILE: mm/shmem.c:376:
+^I ^I */$

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#954: FILE: mm/shmem.c:377:
+		long change = (attr->ia_size>>PAGE_SHIFT) - (inode->i_size >> PAGE_SHIFT);
 		                            ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#957: FILE: mm/shmem.c:380:
+		if (change > 0) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#960: FILE: mm/shmem.c:383:
+		} else

CHECK:LINE_SPACING: Please don't use multiple blank lines
#972: FILE: mm/shmem.c:395:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#979: FILE: mm/shmem.c:400:
+^Iif (inode->i_op->truncate == shmem_truncate) { $

ERROR:SPACING: space required before the open brace '{'
#1020: FILE: mm/shmem.c:893:
+		if (!vm_enough_memory(VM_ACCT(maxpos) - VM_ACCT(inode->i_size))){

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1053: FILE: mm/shmem.c:1535:
+	setattr:	shmem_setattr,
 	       ^

WARNING:INDENTED_LABEL: labels should not be indented
#1053: FILE: mm/shmem.c:1535:
+	setattr:	shmem_setattr,

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000446677.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 20 errors, 17 warnings, 22 checks, 955 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000446677.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
