WARNING:TYPO_SPELLING: 'familiy' may be misspelled - perhaps 'family'?
#36: 
Anyway please let me explain some bits: the end_request() function familiy
                                                                   ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'unneccessary' may be misspelled - perhaps 'unnecessary'?
#42: 
be more sane, which allowed to remove many unneccessary code duplication,
                                           ^^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'beeing' may be misspelled - perhaps 'being'?
#47: 
In a next step rather as much as possible should be moved from beeing 
                                                               ^^^^^^

WARNING:TYPO_SPELLING: 'elsewere' may be misspelled - perhaps 'elsewhere'?
#58: 
in SCSI and elsewere in the kernel... The overall perspecive is to make 
            ^^^^^^^^

WARNING:TYPO_SPELLING: 'easly' may be misspelled - perhaps 'easily'?
#67: 
The only blind fly is ide-tape... but the patch can be easly verifyed 
                                                       ^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#115: FILE: drivers/ide/ide-cd.c:543:
+static void cdrom_end_request(ide_drive_t *drive, int uptodate)
                                                       ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#124: FILE: drivers/ide/ide-cd.c:557:
+	ide_end_request(drive, uptodate);
 	                       ^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#281: FILE: drivers/ide/ide-cd.c:1279:
+			/* Comment this out, because this always happens
+			   right after a reset occurs, and it is annoying to

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#316: FILE: drivers/ide/ide-cd.c:1517:
+		cdrom_end_request(drive, uptodate);
 		                         ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#411: FILE: drivers/ide/ide-floppy.c:670:
+static int idefloppy_end_request(ide_drive_t *drive, int uptodate)
                                                          ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#429: FILE: drivers/ide/ide-floppy.c:691:
+		ide_end_request(drive, uptodate);
 		                       ^^^^^^^^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#484: FILE: drivers/ide/ide-floppy.c:840:
+	idefloppy_end_request(drive, floppy->pc->error ? 0:1);
 	                                                  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#549: FILE: drivers/ide/ide-probe.c:804:
+	minors = units * (1<<PARTN_BITS);
 	                   ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#551: FILE: drivers/ide/ide-probe.c:806:
+	gd = kmalloc (sizeof(struct gendisk), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*gd)...) over kmalloc(sizeof(struct gendisk)...)
#551: FILE: drivers/ide/ide-probe.c:806:
+	gd = kmalloc (sizeof(struct gendisk), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#558: FILE: drivers/ide/ide-probe.c:812:
+	gd->part = kmalloc (minors * sizeof(struct hd_struct), GFP_KERNEL);

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#558: FILE: drivers/ide/ide-probe.c:812:
+	gd->part = kmalloc (minors * sizeof(struct hd_struct), GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#563: FILE: drivers/ide/ide-probe.c:815:
+	blksize_size[hwif->major] = kmalloc (minors*sizeof(int), GFP_KERNEL);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#563: FILE: drivers/ide/ide-probe.c:815:
+	blksize_size[hwif->major] = kmalloc (minors*sizeof(int), GFP_KERNEL);
 	                                           ^

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#563: FILE: drivers/ide/ide-probe.c:815:
+	blksize_size[hwif->major] = kmalloc (minors*sizeof(int), GFP_KERNEL);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#580: FILE: drivers/ide/ide-probe.c:821:
+	for (i = 0; i < minors; ++i)
+	    blksize_size[hwif->major][i] = BLOCK_SIZE;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#628: FILE: drivers/ide/ide-proc.c:387:
+			out += sprintf(out, "%s\n",driver->name);
 			                          ^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 28)
#697: FILE: drivers/ide/ide-proc.c:580:
+			while (setting) {
+			    if (strcmp(setting->name, name) == 0)

WARNING:TABSTOP: Statements should start on a tabstop
#698: FILE: drivers/ide/ide-proc.c:581:
+			    if (strcmp(setting->name, name) == 0)

CHECK:SPACING: No space is necessary after a cast
#719: FILE: drivers/ide/ide-proc.c:608:
+		len = sprintf(page,"%llu\n", (unsigned long long) drive->driver->capacity(drive));

ERROR:SPACING: space required after that ',' (ctx:VxV)
#719: FILE: drivers/ide/ide-proc.c:608:
+		len = sprintf(page,"%llu\n", (unsigned long long) drive->driver->capacity(drive));
 		                  ^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#782: FILE: drivers/ide/ide-tape.c:1838:
+static int idetape_end_request(ide_drive_t *drive, int uptodate)
                                                        ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1018: FILE: drivers/ide/ide.c:375:
+int __ide_end_request(ide_drive_t *drive, int uptodate, int nr_secs)
                                               ^^^^^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "setting"
#1159: FILE: drivers/ide/ide.c:2594:
+	if (setting != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1175: FILE: drivers/ide/ide.c:3466:
+int ide_end_request(ide_drive_t *drive, int uptodate)
                                             ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1178: FILE: drivers/ide/ide.c:3468:
+	return __ide_end_request(drive, uptodate, 0);
 	                                ^^^^^^^^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#1230: FILE: drivers/ide/ide.c:3553:
+	if (driver->cleanup == NULL)
+	    driver->cleanup = default_cleanup;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!driver->cleanup"
#1230: FILE: drivers/ide/ide.c:3553:
+	if (driver->cleanup == NULL)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#1232: FILE: drivers/ide/ide.c:3555:
+	if (driver->standby == NULL)
+	    driver->standby = default_standby;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!driver->standby"
#1232: FILE: drivers/ide/ide.c:3555:
+	if (driver->standby == NULL)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#1234: FILE: drivers/ide/ide.c:3557:
+	if (driver->flushcache == NULL)
+	    driver->flushcache = default_flushcache;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!driver->flushcache"
#1234: FILE: drivers/ide/ide.c:3557:
+	if (driver->flushcache == NULL)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#1236: FILE: drivers/ide/ide.c:3559:
+	if (driver->do_request == NULL)
+	    driver->do_request = default_do_request;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!driver->do_request"
#1236: FILE: drivers/ide/ide.c:3559:
+	if (driver->do_request == NULL)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#1238: FILE: drivers/ide/ide.c:3561:
+	if (driver->end_request == NULL)
+	    driver->end_request = ide_end_request;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!driver->end_request"
#1238: FILE: drivers/ide/ide.c:3561:
+	if (driver->end_request == NULL)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#1240: FILE: drivers/ide/ide.c:3563:
+	if (driver->ioctl == NULL)
+	    driver->ioctl = default_ioctl;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!driver->ioctl"
#1240: FILE: drivers/ide/ide.c:3563:
+	if (driver->ioctl == NULL)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#1242: FILE: drivers/ide/ide.c:3565:
+	if (driver->open == NULL)
+	    driver->open = default_open;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!driver->open"
#1242: FILE: drivers/ide/ide.c:3565:
+	if (driver->open == NULL)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#1244: FILE: drivers/ide/ide.c:3567:
+	if (driver->release == NULL)
+	    driver->release = default_release;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!driver->release"
#1244: FILE: drivers/ide/ide.c:3567:
+	if (driver->release == NULL)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#1246: FILE: drivers/ide/ide.c:3569:
+	if (driver->media_change == NULL)
+	    driver->media_change = default_check_media_change;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!driver->media_change"
#1246: FILE: drivers/ide/ide.c:3569:
+	if (driver->media_change == NULL)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#1248: FILE: drivers/ide/ide.c:3571:
+	if (driver->pre_reset == NULL)
+	    driver->pre_reset = default_pre_reset;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!driver->pre_reset"
#1248: FILE: drivers/ide/ide.c:3571:
+	if (driver->pre_reset == NULL)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#1250: FILE: drivers/ide/ide.c:3573:
+	if (driver->capacity == NULL)
+	    driver->capacity = default_capacity;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!driver->capacity"
#1250: FILE: drivers/ide/ide.c:3573:
+	if (driver->capacity == NULL)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#1252: FILE: drivers/ide/ide.c:3575:
+	if (driver->special == NULL)
+	    driver->special = default_special;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!driver->special"
#1252: FILE: drivers/ide/ide.c:3575:
+	if (driver->special == NULL)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#1254: FILE: drivers/ide/ide.c:3577:
+	if (driver->driver_reinit == NULL)
+	    driver->driver_reinit = default_driver_reinit;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!driver->driver_reinit"
#1254: FILE: drivers/ide/ide.c:3577:
+	if (driver->driver_reinit == NULL)

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1327: FILE: drivers/scsi/ide-scsi.c:262:
+static int idescsi_end_request(ide_drive_t *drive, int uptodate)
                                                        ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1342: FILE: drivers/scsi/ide-scsi.c:273:
+		ide_end_request(drive, uptodate);
 		                       ^^^^^^^^

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ide_drive_t *' should also have an identifier name
#1460: FILE: include/linux/ide.h:715:
+	int (*cleanup)(ide_drive_t *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ide_drive_t *' should also have an identifier name
#1461: FILE: include/linux/ide.h:716:
+	int (*standby)(ide_drive_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ide_drive_t *' should also have an identifier name
#1462: FILE: include/linux/ide.h:717:
+	int (*flushcache)(ide_drive_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ide_drive_t *' should also have an identifier name
#1463: FILE: include/linux/ide.h:718:
+	ide_startstop_t	(*do_request)(ide_drive_t *, struct request *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct request *' should also have an identifier name
#1463: FILE: include/linux/ide.h:718:
+	ide_startstop_t	(*do_request)(ide_drive_t *, struct request *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#1463: FILE: include/linux/ide.h:718:
+	ide_startstop_t	(*do_request)(ide_drive_t *, struct request *, unsigned long);

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1464: FILE: include/linux/ide.h:719:
+	int (*end_request)(ide_drive_t *drive, int uptodate);
 	                                           ^^^^^^^^

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ide_drive_t *' should also have an identifier name
#1465: FILE: include/linux/ide.h:720:
+	int (*ioctl)(ide_drive_t *, struct inode *, struct file *, unsigned int, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#1465: FILE: include/linux/ide.h:720:
+	int (*ioctl)(ide_drive_t *, struct inode *, struct file *, unsigned int, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#1465: FILE: include/linux/ide.h:720:
+	int (*ioctl)(ide_drive_t *, struct inode *, struct file *, unsigned int, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#1465: FILE: include/linux/ide.h:720:
+	int (*ioctl)(ide_drive_t *, struct inode *, struct file *, unsigned int, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#1465: FILE: include/linux/ide.h:720:
+	int (*ioctl)(ide_drive_t *, struct inode *, struct file *, unsigned int, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#1466: FILE: include/linux/ide.h:721:
+	int (*open)(struct inode *, struct file *, ide_drive_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#1466: FILE: include/linux/ide.h:721:
+	int (*open)(struct inode *, struct file *, ide_drive_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ide_drive_t *' should also have an identifier name
#1466: FILE: include/linux/ide.h:721:
+	int (*open)(struct inode *, struct file *, ide_drive_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#1467: FILE: include/linux/ide.h:722:
+	void (*release)(struct inode *, struct file *, ide_drive_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#1467: FILE: include/linux/ide.h:722:
+	void (*release)(struct inode *, struct file *, ide_drive_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ide_drive_t *' should also have an identifier name
#1467: FILE: include/linux/ide.h:722:
+	void (*release)(struct inode *, struct file *, ide_drive_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ide_drive_t *' should also have an identifier name
#1468: FILE: include/linux/ide.h:723:
+	int (*media_change)(ide_drive_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ide_drive_t *' should also have an identifier name
#1469: FILE: include/linux/ide.h:724:
+	void (*revalidate)(ide_drive_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ide_drive_t *' should also have an identifier name
#1470: FILE: include/linux/ide.h:725:
+	void (*pre_reset)(ide_drive_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ide_drive_t *' should also have an identifier name
#1471: FILE: include/linux/ide.h:726:
+	unsigned long (*capacity)(ide_drive_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ide_drive_t *' should also have an identifier name
#1472: FILE: include/linux/ide.h:727:
+	ide_startstop_t	(*special)(ide_drive_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ide_drive_t *' should also have an identifier name
#1475: FILE: include/linux/ide.h:729:
+	int (*driver_reinit)(ide_drive_t *);

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1505: FILE: include/linux/ide.h:771:
+extern int __ide_end_request(ide_drive_t *drive, int uptodate, int nr_secs);
                                                      ^^^^^^^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1505: FILE: include/linux/ide.h:771:
+extern int __ide_end_request(ide_drive_t *drive, int uptodate, int nr_secs);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1506: FILE: include/linux/ide.h:772:
+extern int ide_end_request(ide_drive_t *drive, int uptodate);
                                                    ^^^^^^^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1506: FILE: include/linux/ide.h:772:
+extern int ide_end_request(ide_drive_t *drive, int uptodate);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1514: FILE: include/linux/ide.h:1128:
+extern int drive_is_ready(ide_drive_t *drive);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000476554.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 2 errors, 64 warnings, 22 checks, 1275 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000476554.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
