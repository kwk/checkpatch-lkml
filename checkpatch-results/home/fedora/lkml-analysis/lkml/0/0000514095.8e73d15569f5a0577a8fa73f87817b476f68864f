WARNING:TYPO_SPELLING: 'ot' may be misspelled - perhaps 'to'?
#35: 
  o and last but ot least cleans this area of code up.  a lot.
                 ^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#39: 
#include <linux/personality.h> may be missing, it's trivially fixable, though.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#39: 
#include <linux/personality.h> may be missing, it's trivially fixable, though.

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#120: FILE: include/linux/personality.h:1:
+#ifndef _LINUX_PERSONALITY_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#168: FILE: include/linux/personality.h:11:
+extern int		register_exec_domain(struct exec_domain *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct exec_domain *' should also have an identifier name
#168: FILE: include/linux/personality.h:11:
+extern int		register_exec_domain(struct exec_domain *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#169: FILE: include/linux/personality.h:12:
+extern int		unregister_exec_domain(struct exec_domain *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct exec_domain *' should also have an identifier name
#169: FILE: include/linux/personality.h:12:
+extern int		unregister_exec_domain(struct exec_domain *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#170: FILE: include/linux/personality.h:13:
+extern int		__set_personality(unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#170: FILE: include/linux/personality.h:13:
+extern int		__set_personality(unsigned long);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#172: FILE: include/linux/personality.h:15:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#182: FILE: include/linux/personality.h:25:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#225: FILE: include/linux/personality.h:68:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#228: FILE: include/linux/personality.h:71:
+ * $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'refernced' may be misspelled - perhaps 'referenced'?
#229: FILE: include/linux/personality.h:72:
+ * The first two members are refernced from assembly source
                              ^^^^^^^^^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'pers' may be better as '(pers)' to avoid precedence issues
#260: FILE: include/linux/personality.h:95:
+#define personality(pers)	(pers & PER_MASK)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pers' - possible side-effects?
#270: FILE: include/linux/personality.h:105:
+#define set_personality(pers) \
+	((current->personality == pers) ? 0 : __set_personality(pers))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'pers' may be better as '(pers)' to avoid precedence issues
#270: FILE: include/linux/personality.h:105:
+#define set_personality(pers) \
+	((current->personality == pers) ? 0 : __set_personality(pers))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ep' - possible side-effects?
#276: FILE: include/linux/personality.h:111:
+#define get_exec_domain(ep)				\
+do {							\
+	if (ep != NULL && ep->module != NULL)		\
+		__MOD_INC_USE_COUNT(ep->module);	\
+} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'ep' may be better as '(ep)' to avoid precedence issues
#276: FILE: include/linux/personality.h:111:
+#define get_exec_domain(ep)				\
+do {							\
+	if (ep != NULL && ep->module != NULL)		\
+		__MOD_INC_USE_COUNT(ep->module);	\
+} while (0)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ep"
#278: FILE: include/linux/personality.h:113:
+	if (ep != NULL && ep->module != NULL)		\

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ep->module"
#278: FILE: include/linux/personality.h:113:
+	if (ep != NULL && ep->module != NULL)		\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ep' - possible side-effects?
#295: FILE: include/linux/personality.h:120:
+#define put_exec_domain(ep)				\
+do {							\
+	if (ep != NULL && ep->module != NULL)		\
+		__MOD_DEC_USE_COUNT(ep->module);	\
 } while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'ep' may be better as '(ep)' to avoid precedence issues
#295: FILE: include/linux/personality.h:120:
+#define put_exec_domain(ep)				\
+do {							\
+	if (ep != NULL && ep->module != NULL)		\
+		__MOD_DEC_USE_COUNT(ep->module);	\
 } while (0)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ep"
#297: FILE: include/linux/personality.h:122:
+	if (ep != NULL && ep->module != NULL)		\

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ep->module"
#297: FILE: include/linux/personality.h:122:
+	if (ep != NULL && ep->module != NULL)		\

CHECK:LINE_SPACING: Please don't use multiple blank lines
#328: FILE: include/linux/sched.h:441:
 
+

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#345: FILE: include/linux/sysctl.h:64:
+	CTL_BUS=8,		/* Buses */
 	       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#346: FILE: include/linux/sysctl.h:65:
+	CTL_ABI=9		/* Binary emulation */
 	       ^

ERROR:OPEN_BRACE: open brace '{' following enum go on the same line
#356: FILE: include/linux/sysctl.h:612:
+enum
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#357: FILE: include/linux/sysctl.h:613:
+	ABI_DEFHANDLER_COFF=1,	/* default handler for coff binaries */
 	                   ^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#358: FILE: include/linux/sysctl.h:614:
+^IABI_DEFHANDLER_ELF=2, ^I/* default handler for ELF binaries */$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#358: FILE: include/linux/sysctl.h:614:
+	ABI_DEFHANDLER_ELF=2, 	/* default handler for ELF binaries */
 	                  ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#359: FILE: include/linux/sysctl.h:615:
+	ABI_DEFHANDLER_LCALL7=3,/* default handler for procs using lcall7 */
 	                     ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#360: FILE: include/linux/sysctl.h:616:
+	ABI_DEFHANDLER_LIBCSO=4,/* default handler for an libc.so ELF interp */
 	                     ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#361: FILE: include/linux/sysctl.h:617:
+	ABI_TRACE=5,		/* tracing flags */
 	         ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#362: FILE: include/linux/sysctl.h:618:
+	ABI_FAKE_UTSNAME=6,	/* fake target utsname information */
 	                ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#386: FILE: kernel/exec_domain.c:1:
+/*

CHECK:LINE_SPACING: Please don't use multiple blank lines
#413: FILE: kernel/exec_domain.c:26:
+
+

CHECK:ARCH_DEFINES: architecture specific defines should be avoided
#466: FILE: kernel/exec_domain.c:59:
+#ifdef __i386__

Architecture specific defines should be avoided wherever
possible.

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#490: FILE: kernel/exec_domain.c:79:
+	struct exec_domain *	ep;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#493: FILE: kernel/exec_domain.c:82:
+^I^I$

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#528: FILE: kernel/exec_domain.c:107:
+	return (ep);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ep"
#540: FILE: kernel/exec_domain.c:116:
+	if (ep == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ep->next"
#544: FILE: kernel/exec_domain.c:119:
+	if (ep->next != NULL)

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#567: FILE: kernel/exec_domain.c:134:
+	return (err);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ep"
#612: FILE: kernel/exec_domain.c:164:
+	if (ep == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!fsp"
#631: FILE: kernel/exec_domain.c:175:
+		if (fsp == NULL) {

WARNING:ONE_SEMICOLON: Statements terminations use 1 semicolon
#633: FILE: kernel/exec_domain.c:177:
+			return -ENOMEM;;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#672: FILE: kernel/exec_domain.c:200:
+	printk(KERN_DEBUG "[%s:%d]: set personality to %lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#673: FILE: kernel/exec_domain.c:201:
+	printk(KERN_DEBUG "[%s:%d]: set personality to %lx\n",
+			current->comm, current->pid, personality);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#697: FILE: kernel/exec_domain.c:217:
+	return (len);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#712: FILE: kernel/exec_domain.c:232:
+
+

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#713: FILE: kernel/exec_domain.c:233:
+EXPORT_SYMBOL(register_exec_domain);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#714: FILE: kernel/exec_domain.c:234:
+EXPORT_SYMBOL(unregister_exec_domain);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#715: FILE: kernel/exec_domain.c:235:
+EXPORT_SYMBOL(__set_personality);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#725: FILE: kernel/exec_domain.c:245:
+ * ^I^I^I^I--hch$

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#763: FILE: kernel/exec_domain.c:283:
+__initcall(abi_register_sysctl);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#765: FILE: kernel/exec_domain.c:285:
+
+

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#766: FILE: kernel/exec_domain.c:286:
+EXPORT_SYMBOL(abi_defhandler_coff);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#767: FILE: kernel/exec_domain.c:287:
+EXPORT_SYMBOL(abi_defhandler_elf);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#768: FILE: kernel/exec_domain.c:288:
+EXPORT_SYMBOL(abi_defhandler_lcall7);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#769: FILE: kernel/exec_domain.c:289:
+EXPORT_SYMBOL(abi_defhandler_libcso);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#770: FILE: kernel/exec_domain.c:290:
+EXPORT_SYMBOL(abi_traceflg);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#771: FILE: kernel/exec_domain.c:291:
+EXPORT_SYMBOL(abi_fake_utsname);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000514095.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 15 errors, 23 warnings, 27 checks, 703 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000514095.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
