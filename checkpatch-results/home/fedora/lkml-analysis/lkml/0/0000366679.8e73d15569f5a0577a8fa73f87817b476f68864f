WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#34: 
> Wouldn't it make sense to do the same thing to "WARN_ON()" then? It sounds 

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#73: FILE: include/asm-alpha/bug.h:12:
+#define BUG_ON(condition) do { if (unlikely((condition)!=0)) BUG(); } while(0)

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#73: FILE: include/asm-alpha/bug.h:12:
+#define BUG_ON(condition) do { if (unlikely((condition)!=0)) BUG(); } while(0)
                                                        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#73: FILE: include/asm-alpha/bug.h:12:
+#define BUG_ON(condition) do { if (unlikely((condition)!=0)) BUG(); } while(0)

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#78: FILE: include/asm-alpha/bug.h:17:
+	if (unlikely((condition)!=0)) { \
 	                        ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#79: FILE: include/asm-alpha/bug.h:18:
+		printk("Badness in %s at %s:%d\n", __FUNCTION__, __FILE__, __LINE__); \

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#79: FILE: include/asm-alpha/bug.h:18:
+		printk("Badness in %s at %s:%d\n", __FUNCTION__, __FILE__, __LINE__); \

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#92: FILE: include/asm-arm/bug.h:21:
+#define BUG_ON(condition) do { if (unlikely((condition)!=0)) BUG(); } while(0)

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#92: FILE: include/asm-arm/bug.h:21:
+#define BUG_ON(condition) do { if (unlikely((condition)!=0)) BUG(); } while(0)
                                                        ^

ERROR:SPACING: space required before the open parenthesis '('
#92: FILE: include/asm-arm/bug.h:21:
+#define BUG_ON(condition) do { if (unlikely((condition)!=0)) BUG(); } while(0)

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#95: FILE: include/asm-arm/bug.h:24:
+	if (unlikely((condition)!=0)) { \
 	                        ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#96: FILE: include/asm-arm/bug.h:25:
+		printk("Badness in %s at %s:%d\n", __FUNCTION__, __FILE__, __LINE__); \

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#96: FILE: include/asm-arm/bug.h:25:
+		printk("Badness in %s at %s:%d\n", __FUNCTION__, __FILE__, __LINE__); \

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#109: FILE: include/asm-cris/bug.h:12:
+#define BUG_ON(condition) do { if (unlikely((condition)!=0)) BUG(); } while(0)

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#109: FILE: include/asm-cris/bug.h:12:
+#define BUG_ON(condition) do { if (unlikely((condition)!=0)) BUG(); } while(0)
                                                        ^

ERROR:SPACING: space required before the open parenthesis '('
#109: FILE: include/asm-cris/bug.h:12:
+#define BUG_ON(condition) do { if (unlikely((condition)!=0)) BUG(); } while(0)

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#112: FILE: include/asm-cris/bug.h:15:
+	if (unlikely((condition)!=0)) { \
 	                        ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#113: FILE: include/asm-cris/bug.h:16:
+		printk("Badness in %s at %s:%d\n", __FUNCTION__, __FILE__, __LINE__); \

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#113: FILE: include/asm-cris/bug.h:16:
+		printk("Badness in %s at %s:%d\n", __FUNCTION__, __FILE__, __LINE__); \

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#126: FILE: include/asm-h8300/bug.h:12:
+#define BUG_ON(condition) do { if (unlikely((condition)!=0)) BUG(); } while(0)

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#126: FILE: include/asm-h8300/bug.h:12:
+#define BUG_ON(condition) do { if (unlikely((condition)!=0)) BUG(); } while(0)
                                                        ^

ERROR:SPACING: space required before the open parenthesis '('
#126: FILE: include/asm-h8300/bug.h:12:
+#define BUG_ON(condition) do { if (unlikely((condition)!=0)) BUG(); } while(0)

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#129: FILE: include/asm-h8300/bug.h:15:
+	if (unlikely((condition)!=0)) { \
 	                        ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#130: FILE: include/asm-h8300/bug.h:16:
+		printk("Badness in %s at %s:%d\n", __FUNCTION__, __FILE__, __LINE__); \

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#130: FILE: include/asm-h8300/bug.h:16:
+		printk("Badness in %s at %s:%d\n", __FUNCTION__, __FILE__, __LINE__); \

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#143: FILE: include/asm-i386/bug.h:22:
+#define BUG_ON(condition) do { if (unlikely((condition)!=0)) BUG(); } while(0)

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#143: FILE: include/asm-i386/bug.h:22:
+#define BUG_ON(condition) do { if (unlikely((condition)!=0)) BUG(); } while(0)
                                                        ^

ERROR:SPACING: space required before the open parenthesis '('
#143: FILE: include/asm-i386/bug.h:22:
+#define BUG_ON(condition) do { if (unlikely((condition)!=0)) BUG(); } while(0)

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#150: FILE: include/asm-i386/bug.h:29:
+	if (unlikely((condition)!=0)) { \
 	                        ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#151: FILE: include/asm-i386/bug.h:30:
+		printk("Badness in %s at %s:%d\n", __FUNCTION__, __FILE__, __LINE__); \

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#151: FILE: include/asm-i386/bug.h:30:
+		printk("Badness in %s at %s:%d\n", __FUNCTION__, __FILE__, __LINE__); \

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#165: FILE: include/asm-ia64/bug.h:11:
+#define BUG_ON(condition) do { if (unlikely((condition)!=0)) BUG(); } while(0)

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#165: FILE: include/asm-ia64/bug.h:11:
+#define BUG_ON(condition) do { if (unlikely((condition)!=0)) BUG(); } while(0)
                                                        ^

ERROR:SPACING: space required before the open parenthesis '('
#165: FILE: include/asm-ia64/bug.h:11:
+#define BUG_ON(condition) do { if (unlikely((condition)!=0)) BUG(); } while(0)

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#170: FILE: include/asm-ia64/bug.h:16:
+	if (unlikely((condition)!=0)) { \
 	                        ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#171: FILE: include/asm-ia64/bug.h:17:
+		printk("Badness in %s at %s:%d\n", __FUNCTION__, __FILE__, __LINE__); \

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#171: FILE: include/asm-ia64/bug.h:17:
+		printk("Badness in %s at %s:%d\n", __FUNCTION__, __FILE__, __LINE__); \

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#184: FILE: include/asm-m68k/bug.h:24:
+#define BUG_ON(condition) do { \

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#185: FILE: include/asm-m68k/bug.h:25:
+	if (unlikely((condition)!=0)) \
 	                        ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#186: FILE: include/asm-m68k/bug.h:26:
+		BUG(); \

ERROR:SPACING: space required before the open parenthesis '('
#187: FILE: include/asm-m68k/bug.h:27:
+} while(0)

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#194: FILE: include/asm-m68k/bug.h:34:
+	if (unlikely((condition)!=0)) { \
 	                        ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#195: FILE: include/asm-m68k/bug.h:35:
+		printk("Badness in %s at %s:%d\n", __FUNCTION__, __FILE__, __LINE__); \

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#195: FILE: include/asm-m68k/bug.h:35:
+		printk("Badness in %s at %s:%d\n", __FUNCTION__, __FILE__, __LINE__); \

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#208: FILE: include/asm-m68knommu/bug.h:8:
+#define BUG_ON(condition) do { \

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#209: FILE: include/asm-m68knommu/bug.h:9:
+	if (unlikely((condition)!=0)) \
 	                        ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#210: FILE: include/asm-m68knommu/bug.h:10:
+		BUG(); \

ERROR:SPACING: space required before the open parenthesis '('
#211: FILE: include/asm-m68knommu/bug.h:11:
+} while(0)

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#218: FILE: include/asm-m68knommu/bug.h:18:
+	if (unlikely((condition)!=0)) { \
 	                        ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#219: FILE: include/asm-m68knommu/bug.h:19:
+		printk("Badness in %s at %s:%d\n", __FUNCTION__, __FILE__, __LINE__); \

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#219: FILE: include/asm-m68knommu/bug.h:19:
+		printk("Badness in %s at %s:%d\n", __FUNCTION__, __FILE__, __LINE__); \

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#232: FILE: include/asm-mips/bug.h:6:
+#define BUG_ON(condition) do { if (unlikely((condition)!=0)) BUG(); } while(0)

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#232: FILE: include/asm-mips/bug.h:6:
+#define BUG_ON(condition) do { if (unlikely((condition)!=0)) BUG(); } while(0)
                                                        ^

ERROR:SPACING: space required before the open parenthesis '('
#232: FILE: include/asm-mips/bug.h:6:
+#define BUG_ON(condition) do { if (unlikely((condition)!=0)) BUG(); } while(0)

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#236: FILE: include/asm-mips/bug.h:10:
+	if (unlikely((condition)!=0)) { \
 	                        ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#237: FILE: include/asm-mips/bug.h:11:
+		printk("Badness in %s at %s:%d\n", __FUNCTION__, __FILE__, __LINE__); \

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#237: FILE: include/asm-mips/bug.h:11:
+		printk("Badness in %s at %s:%d\n", __FUNCTION__, __FILE__, __LINE__); \

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#250: FILE: include/asm-mips64/bug.h:5:
+#define BUG_ON(condition) do { if (unlikely((condition)!=0)) BUG(); } while(0)

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#250: FILE: include/asm-mips64/bug.h:5:
+#define BUG_ON(condition) do { if (unlikely((condition)!=0)) BUG(); } while(0)
                                                        ^

ERROR:SPACING: space required before the open parenthesis '('
#250: FILE: include/asm-mips64/bug.h:5:
+#define BUG_ON(condition) do { if (unlikely((condition)!=0)) BUG(); } while(0)

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#254: FILE: include/asm-mips64/bug.h:9:
+	if (unlikely((condition)!=0)) { \
 	                        ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#255: FILE: include/asm-mips64/bug.h:10:
+		printk("Badness in %s at %s:%d\n", __FUNCTION__, __FILE__, __LINE__); \

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#255: FILE: include/asm-mips64/bug.h:10:
+		printk("Badness in %s at %s:%d\n", __FUNCTION__, __FILE__, __LINE__); \

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#268: FILE: include/asm-parisc/bug.h:13:
+#define BUG_ON(condition) do { \

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#269: FILE: include/asm-parisc/bug.h:14:
+	if (unlikely((condition)!=0)) \
 	                        ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#270: FILE: include/asm-parisc/bug.h:15:
+		BUG(); \

ERROR:SPACING: space required before the open parenthesis '('
#271: FILE: include/asm-parisc/bug.h:16:
+} while(0)

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#278: FILE: include/asm-parisc/bug.h:23:
+	if (unlikely((condition)!=0)) { \
 	                        ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#279: FILE: include/asm-parisc/bug.h:24:
+		printk("Badness in %s at %s:%d\n", __FUNCTION__, __FILE__, __LINE__); \

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#279: FILE: include/asm-parisc/bug.h:24:
+		printk("Badness in %s at %s:%d\n", __FUNCTION__, __FILE__, __LINE__); \

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#308: FILE: include/asm-ppc/bug.h:17:
+#define BUG() do {							 \

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#308: FILE: include/asm-ppc/bug.h:17:
+#define BUG() do {							 \
+	__asm__ __volatile__(						 \
+		"1:	twi 31,0,0\n"					 \
+		".section __bug_table,\"a\"\n\t"			 \
+		"	.long 1b,%0,%1,%2\n"				 \
+		".previous"						 \
+		: : "i" (__LINE__), "i" (__FILE__), "i" (__FUNCTION__)); \
+} while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#314: FILE: include/asm-ppc/bug.h:23:
+		: : "i" (__LINE__), "i" (__FILE__), "i" (__FUNCTION__)); \

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#317: FILE: include/asm-ppc/bug.h:26:
+#define BUG_ON(x) do {						\

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#317: FILE: include/asm-ppc/bug.h:26:
+#define BUG_ON(x) do {						\
+	__asm__ __volatile__(					\
+		"1:	twnei %0,0\n"				\
+		".section __bug_table,\"a\"\n\t"		\
+		"	.long 1b,%1,%2,%3\n"			\
+		".previous"					\
+		: : "r" (x), "i" (__LINE__), "i" (__FILE__),	\
+		    "i" (__FUNCTION__));			\
 } while (0)

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#324: FILE: include/asm-ppc/bug.h:33:
+		    "i" (__FUNCTION__));			\

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#329: FILE: include/asm-ppc/bug.h:38:
+#define WARN_ON(x) do {						\
+	__asm__ __volatile__(					\
+		"1:	twnei %0,0\n"				\
+		".section __bug_table,\"a\"\n\t"		\
+		"	.long 1b,%1,%2,%3\n"			\
+		".previous"					\
+		: : "r" (x), "i" (__LINE__ + BUG_WARNING_TRAP),	\
+		    "i" (__FILE__), "i" (__FUNCTION__));	\
+} while (0)

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#336: FILE: include/asm-ppc/bug.h:45:
+		    "i" (__FILE__), "i" (__FUNCTION__));	\

WARNING:INCLUDE_LINUX: Use #include <linux/bug.h> instead of <asm/bug.h>
#348: FILE: include/asm-ppc/module.h:6:
+#include <asm/bug.h>

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#364: FILE: include/asm-ppc/module.h:33:
+extern struct bug_entry *module_find_bug(unsigned long bugaddr);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#376: FILE: include/asm-ppc64/bug.h:30:
+#define BUG_ON(condition) do { if (unlikely((condition)!=0)) BUG(); } while(0)

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#376: FILE: include/asm-ppc64/bug.h:30:
+#define BUG_ON(condition) do { if (unlikely((condition)!=0)) BUG(); } while(0)
                                                        ^

ERROR:SPACING: space required before the open parenthesis '('
#376: FILE: include/asm-ppc64/bug.h:30:
+#define BUG_ON(condition) do { if (unlikely((condition)!=0)) BUG(); } while(0)

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#381: FILE: include/asm-ppc64/bug.h:35:
+	if (unlikely((condition)!=0)) { \
 	                        ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#382: FILE: include/asm-ppc64/bug.h:36:
+		printk("Badness in %s at %s:%d\n", __FUNCTION__, __FILE__, __LINE__); \

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#382: FILE: include/asm-ppc64/bug.h:36:
+		printk("Badness in %s at %s:%d\n", __FUNCTION__, __FILE__, __LINE__); \

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#396: FILE: include/asm-s390/bug.h:9:
+#define BUG_ON(condition) do { \

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#397: FILE: include/asm-s390/bug.h:10:
+	if (unlikely((condition)!=0)) \
 	                        ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#398: FILE: include/asm-s390/bug.h:11:
+		BUG(); \

ERROR:SPACING: space required before the open parenthesis '('
#399: FILE: include/asm-s390/bug.h:12:
+} while(0)

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#406: FILE: include/asm-s390/bug.h:19:
+	if (unlikely((condition)!=0)) { \
 	                        ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#407: FILE: include/asm-s390/bug.h:20:
+		printk("Badness in %s at %s:%d\n", __FUNCTION__, __FILE__, __LINE__); \

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#407: FILE: include/asm-s390/bug.h:20:
+		printk("Badness in %s at %s:%d\n", __FUNCTION__, __FILE__, __LINE__); \

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#420: FILE: include/asm-sh/bug.h:12:
+#define BUG_ON(condition) do { \

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#421: FILE: include/asm-sh/bug.h:13:
+	if (unlikely((condition)!=0)) \
 	                        ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#422: FILE: include/asm-sh/bug.h:14:
+		BUG(); \

ERROR:SPACING: space required before the open parenthesis '('
#423: FILE: include/asm-sh/bug.h:15:
+} while(0)

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#430: FILE: include/asm-sh/bug.h:22:
+	if (unlikely((condition)!=0)) { \
 	                        ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#431: FILE: include/asm-sh/bug.h:23:
+		printk("Badness in %s at %s:%d\n", __FUNCTION__, __FILE__, __LINE__); \

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#431: FILE: include/asm-sh/bug.h:23:
+		printk("Badness in %s at %s:%d\n", __FUNCTION__, __FILE__, __LINE__); \

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#444: FILE: include/asm-sparc/bug.h:15:
+#define BUG_ON(condition) do { \

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#445: FILE: include/asm-sparc/bug.h:16:
+	if (unlikely((condition)!=0)) \
 	                        ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#446: FILE: include/asm-sparc/bug.h:17:
+		BUG(); \

ERROR:SPACING: space required before the open parenthesis '('
#447: FILE: include/asm-sparc/bug.h:18:
+} while(0)

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#454: FILE: include/asm-sparc/bug.h:25:
+	if (unlikely((condition)!=0)) { \
 	                        ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#455: FILE: include/asm-sparc/bug.h:26:
+		printk("Badness in %s at %s:%d\n", __FUNCTION__, __FILE__, __LINE__); \

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#455: FILE: include/asm-sparc/bug.h:26:
+		printk("Badness in %s at %s:%d\n", __FUNCTION__, __FILE__, __LINE__); \

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#468: FILE: include/asm-sparc64/bug.h:16:
+#define BUG_ON(condition) do { \

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#469: FILE: include/asm-sparc64/bug.h:17:
+	if (unlikely((condition)!=0)) \
 	                        ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#470: FILE: include/asm-sparc64/bug.h:18:
+		BUG(); \

ERROR:SPACING: space required before the open parenthesis '('
#471: FILE: include/asm-sparc64/bug.h:19:
+} while(0)

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#478: FILE: include/asm-sparc64/bug.h:26:
+	if (unlikely((condition)!=0)) { \
 	                        ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#479: FILE: include/asm-sparc64/bug.h:27:
+		printk("Badness in %s at %s:%d\n", __FUNCTION__, __FILE__, __LINE__); \

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#479: FILE: include/asm-sparc64/bug.h:27:
+		printk("Badness in %s at %s:%d\n", __FUNCTION__, __FILE__, __LINE__); \

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#492: FILE: include/asm-um/bug.h:10:
+#define BUG_ON(condition) do { \

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#493: FILE: include/asm-um/bug.h:11:
+	if (unlikely((condition)!=0)) \
 	                        ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#494: FILE: include/asm-um/bug.h:12:
+		BUG(); \

ERROR:SPACING: space required before the open parenthesis '('
#495: FILE: include/asm-um/bug.h:13:
+} while(0)

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#502: FILE: include/asm-um/bug.h:20:
+	if (unlikely((condition)!=0)) { \
 	                        ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#503: FILE: include/asm-um/bug.h:21:
+		printk("Badness in %s at %s:%d\n", __FUNCTION__, __FILE__, __LINE__); \

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#503: FILE: include/asm-um/bug.h:21:
+		printk("Badness in %s at %s:%d\n", __FUNCTION__, __FILE__, __LINE__); \

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#518: FILE: include/asm-v850/bug.h:21:
+#define BUG_ON(condition) do { if (unlikely((condition)!=0)) BUG(); } while(0)

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#518: FILE: include/asm-v850/bug.h:21:
+#define BUG_ON(condition) do { if (unlikely((condition)!=0)) BUG(); } while(0)
                                                        ^

ERROR:SPACING: space required before the open parenthesis '('
#518: FILE: include/asm-v850/bug.h:21:
+#define BUG_ON(condition) do { if (unlikely((condition)!=0)) BUG(); } while(0)

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#521: FILE: include/asm-v850/bug.h:24:
+	if (unlikely((condition)!=0)) { \
 	                        ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#522: FILE: include/asm-v850/bug.h:25:
+		printk("Badness in %s at %s:%d\n", __FUNCTION__, __FILE__, __LINE__); \

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#522: FILE: include/asm-v850/bug.h:25:
+		printk("Badness in %s at %s:%d\n", __FUNCTION__, __FILE__, __LINE__); \

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#535: FILE: include/asm-x86_64/bug.h:21:
+#define BUG_ON(condition) do { if (unlikely((condition)!=0)) BUG(); } while(0)

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#535: FILE: include/asm-x86_64/bug.h:21:
+#define BUG_ON(condition) do { if (unlikely((condition)!=0)) BUG(); } while(0)
                                                        ^

ERROR:SPACING: space required before the open parenthesis '('
#535: FILE: include/asm-x86_64/bug.h:21:
+#define BUG_ON(condition) do { if (unlikely((condition)!=0)) BUG(); } while(0)

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#540: FILE: include/asm-x86_64/bug.h:26:
+	if (unlikely((condition)!=0)) { \
 	                        ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#541: FILE: include/asm-x86_64/bug.h:27:
+		printk("Badness in %s at %s:%d\n", __FUNCTION__, __FILE__, __LINE__); \

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#541: FILE: include/asm-x86_64/bug.h:27:
+		printk("Badness in %s at %s:%d\n", __FUNCTION__, __FILE__, __LINE__); \

CHECK:CAMELCASE: Avoid CamelCase: <Elf_Ehdr>
#573: FILE: include/linux/moduleloader.h:48:
+unsigned int elf_find_sec(const Elf_Ehdr *hdr,

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Elf_Shdr>
#574: FILE: include/linux/moduleloader.h:49:
+			  const Elf_Shdr *sechdrs,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#603: FILE: kernel/module.c:1179:
+	modindex = elf_find_sec(hdr, sechdrs, secstrings,
 			    ".gnu.linkonce.this_module");

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#646: FILE: arch/ppc/kernel/module.c:16:
     Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

CHECK:SPACING: No space is necessary after a cast
#678: FILE: arch/ppc/kernel/module.c:285:
+	me->arch.bug_table = (void *) sechdrs[bugindex].sh_addr;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bug"
#753: FILE: arch/ppc/kernel/traps.c:335:
+	if (bug == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#757: FILE: arch/ppc/kernel/traps.c:339:
+		printk(KERN_ERR "Badness in %s at %s:%d\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#763: FILE: arch/ppc/kernel/traps.c:345:
+	printk(KERN_CRIT "kernel BUG in %s at %s:%d!\n",

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000366679.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 58 errors, 77 warnings, 6 checks, 612 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000366679.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
