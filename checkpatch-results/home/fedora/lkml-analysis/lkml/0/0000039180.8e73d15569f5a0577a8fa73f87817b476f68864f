WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#73: FILE: drivers/dma/Kconfig:25:
+config RAID5_DMA
+        tristate "MD raid5: block operations offload"
+	depends on INTEL_IOP_ADMA && MD_RAID456
+	default y
+	---help---
+	  This enables the use of DMA engines in the MD-RAID5 driver to
+	  offload stripe cache operations, freeing CPU cycles.
+	  say Y here
+
 comment "DMA Devices"
 

Kconfig symbols should have a help text which fully describes
it.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#95: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#100: FILE: drivers/dma/raid5-dma.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#115: FILE: drivers/dma/raid5-dma.c:16:
+ * this program; if not, write to the Free Software Foundation, Inc., 59$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#127: FILE: drivers/dma/raid5-dma.c:28:
+extern void release_stripe(struct stripe_head *sh);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#128: FILE: drivers/dma/raid5-dma.c:29:
+extern void __arch_raid5_dma_chan_request(struct dma_client *client);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#129: FILE: drivers/dma/raid5-dma.c:30:
+extern struct dma_chan *__arch_raid5_dma_next_channel(struct dma_client *client);

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#138: FILE: drivers/dma/raid5-dma.c:39:
+#define STRIPE_SECTORS		(STRIPE_SIZE>>9)
                       		            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LONG_LINE: line length of 123 exceeds 100 columns
#142: FILE: drivers/dma/raid5-dma.c:43:
+#define r5_next_bio(bio, sect) ( ( (bio)->bi_sector + ((bio)->bi_size>>9) < sect + STRIPE_SECTORS) ? (bio)->bi_next : NULL)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#142: FILE: drivers/dma/raid5-dma.c:43:
+#define r5_next_bio(bio, sect) ( ( (bio)->bi_sector + ((bio)->bi_size>>9) < sect + STRIPE_SECTORS) ? (bio)->bi_next : NULL)
                                                                      ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#142: FILE: drivers/dma/raid5-dma.c:43:
+#define r5_next_bio(bio, sect) ( ( (bio)->bi_sector + ((bio)->bi_size>>9) < sect + STRIPE_SECTORS) ? (bio)->bi_next : NULL)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'bio' - possible side-effects?
#142: FILE: drivers/dma/raid5-dma.c:43:
+#define r5_next_bio(bio, sect) ( ( (bio)->bi_sector + ((bio)->bi_size>>9) < sect + STRIPE_SECTORS) ? (bio)->bi_next : NULL)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'sect' may be better as '(sect)' to avoid precedence issues
#142: FILE: drivers/dma/raid5-dma.c:43:
+#define r5_next_bio(bio, sect) ( ( (bio)->bi_sector + ((bio)->bi_size>>9) < sect + STRIPE_SECTORS) ? (bio)->bi_next : NULL)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#146: FILE: drivers/dma/raid5-dma.c:47:
+#define PRINTK(x...) ((void)(DMA_RAID5_DEBUG && printk(x)))

WARNING:TYPO_SPELLING: 'bion' may be misspelled - perhaps 'bio'?
#149: FILE: drivers/dma/raid5-dma.c:50:
+ * Copy data between a page in the stripe cache, and one or more bion
                                                                  ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'bion' may be misspelled - perhaps 'bio'?
#151: FILE: drivers/dma/raid5-dma.c:52:
+ * several bion, each with several bio_vecs, which cover part of the page
            ^^^^

WARNING:TYPO_SPELLING: 'bion' may be misspelled - perhaps 'bio'?
#152: FILE: drivers/dma/raid5-dma.c:53:
+ * Multiple bion are linked together on bi_next.  There may be extras
             ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#156: FILE: drivers/dma/raid5-dma.c:57:
+static dma_cookie_t dma_raid_copy_data(int frombio, struct bio *bio,
+		     dma_addr_t dma, sector_t sector, struct dma_chan *chan,

WARNING:UNSPECIFIED_INT: Prefer 'signed int' to bare use of 'signed'
#166: FILE: drivers/dma/raid5-dma.c:67:
+		dma_offset = (signed)(bio->bi_sector - sector) * 512;

WARNING:UNSPECIFIED_INT: Prefer 'signed int' to bare use of 'signed'
#168: FILE: drivers/dma/raid5-dma.c:69:
+		dma_offset = (signed)(sector - bio->bi_sector) * -512;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#170: FILE: drivers/dma/raid5-dma.c:71:
+		int len = bio_iovec_idx(bio,i)->bv_len;
 		                           ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#182: FILE: drivers/dma/raid5-dma.c:83:
+		else clen = len;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#185: FILE: drivers/dma/raid5-dma.c:86:
+			b_offset += bio_iovec_idx(bio,i)->bv_offset;
 			                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#186: FILE: drivers/dma/raid5-dma.c:87:
+			bio_page = bio_iovec_idx(bio,i)->bv_page;
 			                            ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#190: FILE: drivers/dma/raid5-dma.c:91:
+					cookie = dma_async_memcpy_pg_to_dma(chan,
+								dma + dma_offset,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#202: FILE: drivers/dma/raid5-dma.c:103:
+					cookie = dma_async_memcpy_dma_to_pg(chan,
+								bio_page,

WARNING:TABSTOP: Statements should start on a tabstop
#222: FILE: drivers/dma/raid5-dma.c:123:
+			 do {					          \

ERROR:CODE_INDENT: code indent should use tabs where possible
#223: FILE: drivers/dma/raid5-dma.c:124:
+^I^I^I ^Icookie = dma_async_xor_dma_list_to_dma(   \$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#223: FILE: drivers/dma/raid5-dma.c:124:
+^I^I^I ^Icookie = dma_async_xor_dma_list_to_dma(   \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#224: FILE: drivers/dma/raid5-dma.c:125:
+^I^I^I ^I^Ish->ops.dma_chan,^I          \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#224: FILE: drivers/dma/raid5-dma.c:125:
+^I^I^I ^I^Ish->ops.dma_chan,^I          \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#225: FILE: drivers/dma/raid5-dma.c:126:
+^I^I^I ^I^Ixor_destination_addr,^I          \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#225: FILE: drivers/dma/raid5-dma.c:126:
+^I^I^I ^I^Ixor_destination_addr,^I          \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#226: FILE: drivers/dma/raid5-dma.c:127:
+^I^I^I ^I^Idma,^I^I^I          \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#226: FILE: drivers/dma/raid5-dma.c:127:
+^I^I^I ^I^Idma,^I^I^I          \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#227: FILE: drivers/dma/raid5-dma.c:128:
+^I^I^I ^I^Icount,^I^I^I          \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#227: FILE: drivers/dma/raid5-dma.c:128:
+^I^I^I ^I^Icount,^I^I^I          \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#228: FILE: drivers/dma/raid5-dma.c:129:
+^I^I^I ^I^ISTRIPE_SIZE);^I^I          \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#228: FILE: drivers/dma/raid5-dma.c:129:
+^I^I^I ^I^ISTRIPE_SIZE);^I^I          \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#229: FILE: drivers/dma/raid5-dma.c:130:
+^I^I^I ^Iif (cookie == -ENOMEM)^I^I          \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#229: FILE: drivers/dma/raid5-dma.c:130:
+^I^I^I ^Iif (cookie == -ENOMEM)^I^I          \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#230: FILE: drivers/dma/raid5-dma.c:131:
+^I^I^I ^I^Idma_sync_wait(sh->ops.dma_chan,^I  \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#230: FILE: drivers/dma/raid5-dma.c:131:
+^I^I^I ^I^Idma_sync_wait(sh->ops.dma_chan,^I  \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#231: FILE: drivers/dma/raid5-dma.c:132:
+^I^I^I ^I^I^Ish->ops.dma_cookie);      \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#231: FILE: drivers/dma/raid5-dma.c:132:
+^I^I^I ^I^I^Ish->ops.dma_cookie);      \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#232: FILE: drivers/dma/raid5-dma.c:133:
+^I^I^I ^Ielse^I^I^I^I          \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#232: FILE: drivers/dma/raid5-dma.c:133:
+^I^I^I ^Ielse^I^I^I^I          \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#233: FILE: drivers/dma/raid5-dma.c:134:
+^I^I^I ^I^IWARN_ON(cookie <= 0);^I          \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#233: FILE: drivers/dma/raid5-dma.c:134:
+^I^I^I ^I^IWARN_ON(cookie <= 0);^I          \$

WARNING:TABSTOP: Statements should start on a tabstop
#234: FILE: drivers/dma/raid5-dma.c:135:
+			 } while (cookie == -ENOMEM);		          \

ERROR:SPACING: space required before the open parenthesis '('
#238: FILE: drivers/dma/raid5-dma.c:139:
+			} while(0)

WARNING:TABSTOP: Statements should start on a tabstop
#242: FILE: drivers/dma/raid5-dma.c:143:
+		     } while (0)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#246: FILE: drivers/dma/raid5-dma.c:147:
+extern struct dma_chan *__arch_raid5_dma_check_channel(struct dma_chan *chan,
+						dma_cookie_t cookie,

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'bookmark' - possible side-effects?
#251: FILE: drivers/dma/raid5-dma.c:152:
+#define check_channel(cap, bookmark) do {			     \
+bookmark:							     \
+	next_chan = __arch_raid5_dma_check_channel(sh->ops.dma_chan, \
+						sh->ops.dma_cookie,  \
+						raid5_dma_client,    \
+						(cap));		     \
+	if (!next_chan) {					     \
+		BUG_ON(sh->ops.ops_bookmark);			     \
+		sh->ops.ops_bookmark = &&bookmark;		     \
+		goto raid5_dma_retry;				     \
+	} else {						     \
+		sh->ops.dma_chan = next_chan;			     \
+		sh->ops.dma_cookie = dma_async_get_last_cookie(	     \
+							next_chan);  \
+		sh->ops.ops_bookmark = NULL;			     \
+	}							     \
+} while (0)

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#251: FILE: drivers/dma/raid5-dma.c:152:
+#define check_channel(cap, bookmark) do {			     \
+bookmark:							     \
+	next_chan = __arch_raid5_dma_check_channel(sh->ops.dma_chan, \
+						sh->ops.dma_cookie,  \
+						raid5_dma_client,    \
+						(cap));		     \
+	if (!next_chan) {					     \
+		BUG_ON(sh->ops.ops_bookmark);			     \
+		sh->ops.ops_bookmark = &&bookmark;		     \
+		goto raid5_dma_retry;				     \
+	} else {						     \
+		sh->ops.dma_chan = next_chan;			     \
+		sh->ops.dma_cookie = dma_async_get_last_cookie(	     \
+							next_chan);  \
+		sh->ops.ops_bookmark = NULL;			     \
+	}							     \
+} while (0)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#258: FILE: drivers/dma/raid5-dma.c:159:
+		BUG_ON(sh->ops.ops_bookmark);			     \

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'bookmark' - possible side-effects?
#269: FILE: drivers/dma/raid5-dma.c:170:
+#define check_channel(cap, bookmark) do {			     \
+bookmark:							     \
+	next_chan = __arch_raid5_dma_check_channel(sh->ops.dma_chan, \
+						sh->ops.dma_cookie,  \
+						raid5_dma_client,    \
+						(cap));		     \
+	if (!next_chan) {					     \
+		dma_sync_wait(sh->ops.dma_chan, sh->ops.dma_cookie); \
+		goto bookmark;					     \
+	} else {						     \
+		sh->ops.dma_chan = next_chan;			     \
+		sh->ops.dma_cookie = dma_async_get_last_cookie(	     \
+							next_chan);  \
+	}							     \
+} while (0)

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#269: FILE: drivers/dma/raid5-dma.c:170:
+#define check_channel(cap, bookmark) do {			     \
+bookmark:							     \
+	next_chan = __arch_raid5_dma_check_channel(sh->ops.dma_chan, \
+						sh->ops.dma_cookie,  \
+						raid5_dma_client,    \
+						(cap));		     \
+	if (!next_chan) {					     \
+		dma_sync_wait(sh->ops.dma_chan, sh->ops.dma_cookie); \
+		goto bookmark;					     \
+	} else {						     \
+		sh->ops.dma_chan = next_chan;			     \
+		sh->ops.dma_cookie = dma_async_get_last_cookie(	     \
+							next_chan);  \
+	}							     \
+} while (0)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#311: FILE: drivers/dma/raid5-dma.c:212:
+	int overlap=0;
 	           ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#329: FILE: drivers/dma/raid5-dma.c:230:
+	ops_state_orig = ops_state = sh->ops.state;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#339: FILE: drivers/dma/raid5-dma.c:240:
+	if (test_bit(STRIPE_OP_BIOFILL, &state) &&
+		!test_bit(STRIPE_OP_BIOFILL_Dma, &ops_state)) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#341: FILE: drivers/dma/raid5-dma.c:242:
+		struct bio *return_bi;
+		PRINTK("%s: stripe %llu STRIPE_OP_BIOFILL op_state: %lx\n",

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#342: FILE: drivers/dma/raid5-dma.c:243:
+		PRINTK("%s: stripe %llu STRIPE_OP_BIOFILL op_state: %lx\n",
+			__FUNCTION__, (unsigned long long)sh->sector,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#342: FILE: drivers/dma/raid5-dma.c:243:
+			__FUNCTION__, (unsigned long long)sh->sector,

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#348: FILE: drivers/dma/raid5-dma.c:249:
+		for (i=disks ; i-- ;) {
 		      ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#350: FILE: drivers/dma/raid5-dma.c:251:
+			struct r5dev *dev = &sh->dev[i];
+			if (test_bit(R5_ReadReq, &dev->flags)) {

CHECK:CAMELCASE: Avoid CamelCase: <R5_ReadReq>
#350: FILE: drivers/dma/raid5-dma.c:251:
+			if (test_bit(R5_ReadReq, &dev->flags)) {

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:LINE_SPACING: Missing a blank line after declarations
#352: FILE: drivers/dma/raid5-dma.c:253:
+				struct bio *rbi, *rbi2;
+				spin_lock_irq(&conf->device_lock);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#359: FILE: drivers/dma/raid5-dma.c:260:
+					sh->ops.dma_cookie = dma_raid_copy_data(0,
+								rbi, dev->dma, dev->sector,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#379: FILE: drivers/dma/raid5-dma.c:280:
+	if (test_bit(STRIPE_OP_COMPUTE, &state) &&
+		!test_bit(STRIPE_OP_COMPUTE_Dma, &ops_state)) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#380: FILE: drivers/dma/raid5-dma.c:281:
+		!test_bit(STRIPE_OP_COMPUTE_Dma, &ops_state)) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#394: FILE: drivers/dma/raid5-dma.c:295:
+			for (i=disks ; i-- ; )
 			      ^

CHECK:CAMELCASE: Avoid CamelCase: <R5_ComputeReq>
#395: FILE: drivers/dma/raid5-dma.c:296:
+				if (test_bit(R5_ComputeReq, &sh->dev[i].flags)) {

WARNING:SPLIT_STRING: quoted string split across lines
#398: FILE: drivers/dma/raid5-dma.c:299:
+					PRINTK("%s: stripe %llu STRIPE_OP_COMPUTE "
+					       "op_state: %lx block: %d\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#399: FILE: drivers/dma/raid5-dma.c:300:
+						__FUNCTION__,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#405: FILE: drivers/dma/raid5-dma.c:306:
+			BUG_ON(dd_idx < 0);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#409: FILE: drivers/dma/raid5-dma.c:310:
+			for (i=disks ; i-- ; )
 			      ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#423: FILE: drivers/dma/raid5-dma.c:324:
+	if (test_bit(STRIPE_OP_RMW, &state) &&
+		!test_bit(STRIPE_OP_RMW_Dma, &ops_state)) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#424: FILE: drivers/dma/raid5-dma.c:325:
+		BUG_ON(test_bit(STRIPE_OP_RCW, &state));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#427: FILE: drivers/dma/raid5-dma.c:328:
+		PRINTK("%s: stripe %llu STRIPE_OP_RMW op_state: %lx\n",
+			__FUNCTION__, (unsigned long long)sh->sector,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#427: FILE: drivers/dma/raid5-dma.c:328:
+			__FUNCTION__, (unsigned long long)sh->sector,

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#438: FILE: drivers/dma/raid5-dma.c:339:
+			xor_destination_addr = dma[count++] = sh->dev[pd_idx].dma;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#440: FILE: drivers/dma/raid5-dma.c:341:
+			for (i=disks ; i-- ;) {
 			      ^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#444: FILE: drivers/dma/raid5-dma.c:345:
+				/* Only process blocks that are known to be uptodate */
 				                                            ^^^^^^^^

CHECK:CAMELCASE: Avoid CamelCase: <R5_RMWReq>
#445: FILE: drivers/dma/raid5-dma.c:346:
+				if (dev->towrite && test_bit(R5_RMWReq, &dev->flags)) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#451: FILE: drivers/dma/raid5-dma.c:352:
+					BUG_ON(dev->written);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#467: FILE: drivers/dma/raid5-dma.c:368:
+		if (test_and_clear_bit(STRIPE_OP_RMW_Drain, &ops_state)) {
+

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#470: FILE: drivers/dma/raid5-dma.c:371:
+			for (i=disks ; i-- ;) {
 			      ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#476: FILE: drivers/dma/raid5-dma.c:377:
+					sh->ops.dma_cookie = dma_raid_copy_data(1,
+							     wbi, dev->dma, dev->sector,

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#492: FILE: drivers/dma/raid5-dma.c:393:
+			xor_destination_addr = dma[count++] = sh->dev[pd_idx].dma;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#494: FILE: drivers/dma/raid5-dma.c:395:
+			for (i=disks ; i-- ;) {
 			      ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#496: FILE: drivers/dma/raid5-dma.c:397:
+				struct r5dev *dev = &sh->dev[i];
+				if (dev->written) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#509: FILE: drivers/dma/raid5-dma.c:410:
+	if (test_bit(STRIPE_OP_RCW, &state) &&
+		!test_bit(STRIPE_OP_RCW_Dma, &ops_state)) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#510: FILE: drivers/dma/raid5-dma.c:411:
+		BUG_ON(test_bit(STRIPE_OP_RMW, &state));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#513: FILE: drivers/dma/raid5-dma.c:414:
+		PRINTK("%s: stripe %llu STRIPE_OP_RCW op_state: %lx\n",
+			__FUNCTION__, (unsigned long long)sh->sector,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#513: FILE: drivers/dma/raid5-dma.c:414:
+			__FUNCTION__, (unsigned long long)sh->sector,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#516: FILE: drivers/dma/raid5-dma.c:417:
+
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#518: FILE: drivers/dma/raid5-dma.c:419:
+		if (test_and_clear_bit(STRIPE_OP_RCW_Drain, &ops_state)) {
+

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#521: FILE: drivers/dma/raid5-dma.c:422:
+			for (i=disks ; i-- ;) {
 			      ^

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#526: FILE: drivers/dma/raid5-dma.c:427:
+				if (i!=pd_idx && dev->towrite &&
 				     ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#527: FILE: drivers/dma/raid5-dma.c:428:
+				if (i!=pd_idx && dev->towrite &&
+					test_bit(R5_LOCKED, &dev->flags)) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#528: FILE: drivers/dma/raid5-dma.c:429:
+					test_bit(R5_LOCKED, &dev->flags)) {
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#532: FILE: drivers/dma/raid5-dma.c:433:
+					BUG_ON(dev->written);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#533: FILE: drivers/dma/raid5-dma.c:434:
+					wbi = dev->written = chosen;

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#538: FILE: drivers/dma/raid5-dma.c:439:
+					while (wbi && wbi->bi_sector < dev->sector + STRIPE_SECTORS) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#540: FILE: drivers/dma/raid5-dma.c:441:
+						sh->ops.dma_cookie = dma_raid_copy_data(1,
+								     wbi, dev->dma, dev->sector,

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#559: FILE: drivers/dma/raid5-dma.c:460:
+			for (i=disks; i--;)
 			      ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#572: FILE: drivers/dma/raid5-dma.c:473:
+	if (test_bit(STRIPE_OP_CHECK, &state) &&
+		!test_bit(STRIPE_OP_CHECK_Dma, &ops_state)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#574: FILE: drivers/dma/raid5-dma.c:475:
+		PRINTK("%s: stripe %llu STRIPE_OP_CHECK op_state: %lx\n",
+		__FUNCTION__, (unsigned long long)sh->sector,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#574: FILE: drivers/dma/raid5-dma.c:475:
+		__FUNCTION__, (unsigned long long)sh->sector,

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#578: FILE: drivers/dma/raid5-dma.c:479:
+		if (test_and_clear_bit(STRIPE_OP_CHECK_Gen, &ops_state)) {
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#582: FILE: drivers/dma/raid5-dma.c:483:
+^I^I^I^I/* we need to do a destructive xor $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#589: FILE: drivers/dma/raid5-dma.c:490:
+				xor_destination_addr = dma[count++] = sh->dev[pd_idx].dma;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#592: FILE: drivers/dma/raid5-dma.c:493:
+				for (i=disks; i--;)
 				      ^

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#594: FILE: drivers/dma/raid5-dma.c:495:
+						if (skip < 0) {

Indentation with 6 or more tabs usually indicate overly indented
code.

It is suggested to refactor excessive indentation of
if/else/for/do/while/switch statements.

See: https://lore.kernel.org/lkml/1328311239.21255.24.camel@joe2Laptop/

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#610: FILE: drivers/dma/raid5-dma.c:511:
+					cookie = dma_async_zero_sum_dma_list(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#618: FILE: drivers/dma/raid5-dma.c:519:
+						dma_sync_wait(sh->ops.dma_chan,
+						sh->ops.dma_cookie);

WARNING:LINE_SPACING: Missing a blank line after declarations
#625: FILE: drivers/dma/raid5-dma.c:526:
+				int count = 0;
+				for (i=disks; i--;)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#625: FILE: drivers/dma/raid5-dma.c:526:
+				for (i=disks; i--;)
 				      ^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#628: FILE: drivers/dma/raid5-dma.c:529:
+					cookie = dma_async_zero_sum_dma_list(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#636: FILE: drivers/dma/raid5-dma.c:537:
+						dma_sync_wait(sh->ops.dma_chan,
+						sh->ops.dma_cookie);

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#661: FILE: drivers/dma/raid5-dma.c:562:
+		for (i= disks; i-- ;) {
 		      ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#663: FILE: drivers/dma/raid5-dma.c:564:
+			struct r5dev *dev = &sh->dev[i];
+			if (test_and_clear_bit(R5_Overlap, &dev->flags))

CHECK:CAMELCASE: Avoid CamelCase: <R5_Overlap>
#663: FILE: drivers/dma/raid5-dma.c:564:
+			if (test_and_clear_bit(R5_Overlap, &dev->flags))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#668: FILE: drivers/dma/raid5-dma.c:569:
+	if (dma_async_operation_complete(sh->ops.dma_chan, sh->ops.dma_cookie,
+					NULL, NULL) == DMA_IN_PROGRESS)

CHECK:BRACES: Unbalanced braces around else statement
#670: FILE: drivers/dma/raid5-dma.c:571:
+	else { /* now that dma operations have quiesced update the stripe state */

WARNING:LINE_SPACING: Missing a blank line after declarations
#672: FILE: drivers/dma/raid5-dma.c:573:
+		int written, work;
+		written = 0;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#680: FILE: drivers/dma/raid5-dma.c:581:
+			for (i=disks ; i-- ;)
 			      ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#703: FILE: drivers/dma/raid5-dma.c:604:
+			for (i=disks ; i-- ;) {
 			      ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#705: FILE: drivers/dma/raid5-dma.c:606:
+				struct r5dev *dev = &sh->dev[i];
+				if (dev->written)

CHECK:BRACES: braces {} should be used on all arms of this statement
#709: FILE: drivers/dma/raid5-dma.c:610:
+			if (test_and_clear_bit(STRIPE_OP_CHECK_Verify,
[...]
+			} else
[...]

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#710: FILE: drivers/dma/raid5-dma.c:611:
+			if (test_and_clear_bit(STRIPE_OP_CHECK_Verify,
+				&sh->ops.state)) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#721: FILE: drivers/dma/raid5-dma.c:622:
+^I^I^I^I^I^Iset_bit(R5_UPTODATE, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#722: FILE: drivers/dma/raid5-dma.c:623:
+						set_bit(R5_UPTODATE, 
+						&sh->dev[sh->pd_idx].flags);

CHECK:BRACES: Unbalanced braces around else statement
#724: FILE: drivers/dma/raid5-dma.c:625:
+				} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#726: FILE: drivers/dma/raid5-dma.c:627:
+					clear_bit(STRIPE_OP_CHECK_IsZero,
+						&sh->ops.state);

CHECK:BRACES: Unbalanced braces around else statement
#730: FILE: drivers/dma/raid5-dma.c:631:
+			} else

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#731: FILE: drivers/dma/raid5-dma.c:632:
+				BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#735: FILE: drivers/dma/raid5-dma.c:636:
+		BUG_ON(sh->ops.pending < 0);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#742: FILE: drivers/dma/raid5-dma.c:643:
+			ops_state_orig = ops_state = sh->ops.state;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#754: FILE: drivers/dma/raid5-dma.c:655:
+	BUG_ON(sh->ops.pending == 0 && sh->ops.dma_chan);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#764: FILE: drivers/dma/raid5-dma.c:665:
+static void raid5_dma_event_callback(struct dma_client *client,
+			struct dma_chan *chan, enum dma_event event)

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#768: FILE: drivers/dma/raid5-dma.c:669:
+		PRINTK("%s: DMA_RESOURCE_SUSPEND\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#771: FILE: drivers/dma/raid5-dma.c:672:
+		PRINTK("%s: DMA_RESOURCE_RESUME\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#774: FILE: drivers/dma/raid5-dma.c:675:
+		PRINTK("%s: DMA_RESOURCE_ADDED\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#777: FILE: drivers/dma/raid5-dma.c:678:
+		PRINTK("%s: DMA_RESOURCE_REMOVED\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#780: FILE: drivers/dma/raid5-dma.c:681:
+		PRINTK("%s: unknown\n", __FUNCTION__);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#784: FILE: drivers/dma/raid5-dma.c:685:
+
+}

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#786: FILE: drivers/dma/raid5-dma.c:687:
+static int __init raid5_dma_init (void)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#788: FILE: drivers/dma/raid5-dma.c:689:
+	raid5_dma_client = dma_async_client_register(

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!raid5_dma_client"
#791: FILE: drivers/dma/raid5-dma.c:692:
+	if (raid5_dma_client == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#796: FILE: drivers/dma/raid5-dma.c:697:
+	printk("raid5-dma: driver initialized\n");

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#799: FILE: drivers/dma/raid5-dma.c:700:
+
+}

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#801: FILE: drivers/dma/raid5-dma.c:702:
+static void __init raid5_dma_exit (void)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#822: FILE: drivers/dma/raid5-dma.c:723:
+EXPORT_SYMBOL_GPL(raid5_dma_get_dma);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#838: FILE: drivers/md/Kconfig:186:
+config MD_RAID5_HW_OFFLOAD
+	depends on MD_RAID456 && RAID5_DMA
+	bool "Execute raid5 xor/copy operations with hardware engines"
+	default y
+	---help---
+	  On platforms with the requisite hardware capabilities MD
+	  can offload  RAID5 stripe cache operations (i.e. parity
+	  maintenance and bio buffer copies)
+
+	  If unsure say, Y.
+

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#878: FILE: drivers/md/raid5.c:151:
 }
+void release_stripe(struct stripe_head *sh)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#894: FILE: drivers/md/raid5.c:214:
+			dma_async_unmap_page(chan, sh->dev[i].dma,
+					PAGE_SIZE, DMA_FROM_DEVICE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#912: FILE: drivers/md/raid5.c:241:
+			sh->dev[i].dma = dma_async_map_page(chan,
+							sh->dev[i].page,

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#989: FILE: drivers/md/raid5.c:4240:
+EXPORT_SYMBOL(release_stripe);

WARNING:LONG_LINE_COMMENT: line length of 101 exceeds 100 columns
#1028: FILE: include/linux/raid/raid5.h:176:
+		u32 			dma_result;	/* storage for dma engine zero sum results */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1028: FILE: include/linux/raid/raid5.h:176:
+^I^Iu32 ^I^I^Idma_result;^I/* storage for dma engine zero sum results */$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000039180.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 35 errors, 68 warnings, 59 checks, 962 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000039180.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
