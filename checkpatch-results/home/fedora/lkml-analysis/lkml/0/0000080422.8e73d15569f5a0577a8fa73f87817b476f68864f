WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#42: 
suppressed the occurrences of kmalloc. The code compiles now without error messages.

WARNING:TYPO_SPELLING: 'supressed' may be misspelled - perhaps 'suppressed'?
#46: 
Occurrences to kmalloc supressed.
                       ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#67: FILE: fs/minix/bitmap.c:29:
+		for (j=0; j<bh->b_size; j++)
 		      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#67: FILE: fs/minix/bitmap.c:29:
+		for (j=0; j<bh->b_size; j++)
 		           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#75: FILE: fs/minix/bitmap.c:36:
+	i = ((numbits-(numblocks-1) * bh->b_size * 8) / 16) * 2;
 	             ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#75: FILE: fs/minix/bitmap.c:36:
+	i = ((numbits-(numblocks-1) * bh->b_size * 8) / 16) * 2;
 	                        ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#87: FILE: fs/minix/bitmap.c:54:
+	int k = 0;
+	if (sb->s_blocksize != 1024)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#104: FILE: fs/minix/bitmap.c:70:
+	char *offset;
+	offset = NULL;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#126: FILE: fs/minix/bitmap.c:89:
+		printk("free_block (%s:%lu): bit already cleared\n",

WARNING:LINE_SPACING: Missing a blank line after declarations
#139: FILE: fs/minix/bitmap.c:103:
+	char *offset;
+	offset = NULL;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#159: FILE: fs/minix/bitmap.c:113:
+			if ((j = minix_find_first_zero_bit(offset, 8192))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#164: FILE: fs/minix/bitmap.c:118:
+				j += k * 8192 + i * bits_per_zone + sbi->s_firstdatazone-1;
 				                                                        ^

ERROR:SPACING: spaces required around that '<' (ctx:WxV)
#165: FILE: fs/minix/bitmap.c:119:
+				if (j <sbi->s_firstdatazone || j >= sbi->s_nzones)
 				      ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#166: FILE: fs/minix/bitmap.c:120:
+^I ^I ^I^I^Igoto break_both;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#166: FILE: fs/minix/bitmap.c:120:
+^I ^I ^I^I^Igoto break_both;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#167: FILE: fs/minix/bitmap.c:121:
+ ^I^I^I^Ireturn j;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#167: FILE: fs/minix/bitmap.c:121:
+ ^I^I^I^Ireturn j;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#167: FILE: fs/minix/bitmap.c:121:
+ ^I^I^I^Ireturn j;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#168: FILE: fs/minix/bitmap.c:122:
+ ^I^I^I}$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#168: FILE: fs/minix/bitmap.c:122:
+ ^I^I^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#168: FILE: fs/minix/bitmap.c:122:
+ ^I^I^I}$

WARNING:LINE_SPACING: Missing a blank line after declarations
#235: FILE: fs/minix/bitmap.c:223:
+	char *offset;
+	offset = NULL;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#261: FILE: fs/minix/bitmap.c:245:
+		printk("minix_free_inode: bit %lu already cleared\n", bit);

WARNING:LINE_SPACING: Missing a blank line after declarations
#275: FILE: fs/minix/bitmap.c:263:
+	char *offset;
+	offset = NULL;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#288: FILE: fs/minix/bitmap.c:278:
+			if ((j = minix_find_first_zero_bit(offset, 8192))

WARNING:NEW_TYPEDEFS: do not add new typedefs
#328: FILE: fs/minix/dir.c:15:
+typedef struct minix3_dir_entry minix3_dirent;

ERROR:CODE_INDENT: code indent should use tabs where possible
#351: FILE: fs/minix/dir.c:120:
+^I ^I^I} else {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#351: FILE: fs/minix/dir.c:120:
+^I ^I^I} else {$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#359: FILE: fs/minix/dir.c:127:
+				unsigned l = strnlen(namx, sbi->s_namelen);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#365: FILE: fs/minix/dir.c:130:
+				over = filldir(dirent, namx, l,
+					(n << PAGE_CACHE_SHIFT) | offset,

CHECK:SPACING: No space is necessary after a cast
#387: FILE: fs/minix/dir.c:187:
+		de3 = (struct minix3_dir_entry *) kaddr;

ERROR:CODE_INDENT: code indent should use tabs where possible
#398: FILE: fs/minix/dir.c:196:
+ ^I^I^I} else {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#398: FILE: fs/minix/dir.c:196:
+ ^I^I^I} else {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#398: FILE: fs/minix/dir.c:196:
+ ^I^I^I} else {$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#436: FILE: fs/minix/dir.c:253:
+^I^I^I^Iinodx = de3->inode; ^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#436: FILE: fs/minix/dir.c:253:
+^I^I^I^Iinodx = de3->inode; ^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#437: FILE: fs/minix/dir.c:254:
+^I^I ^I} else {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#437: FILE: fs/minix/dir.c:254:
+^I^I ^I} else {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#438: FILE: fs/minix/dir.c:255:
+  ^I^I^I^Inamx = de->name;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#438: FILE: fs/minix/dir.c:255:
+  ^I^I^I^Inamx = de->name;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#438: FILE: fs/minix/dir.c:255:
+  ^I^I^I^Inamx = de->name;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#446: FILE: fs/minix/dir.c:262:
+^I^I ^I^Ielse$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#446: FILE: fs/minix/dir.c:262:
+^I^I ^I^Ielse$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#469: FILE: fs/minix/dir.c:287:
+	memcpy (namx, name, namelen);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#471: FILE: fs/minix/dir.c:289:
+		memset (namx + namelen, 0, sbi->s_dirsize - namelen - 4);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#474: FILE: fs/minix/dir.c:292:
+		memset (namx + namelen, 0, sbi->s_dirsize - namelen - 2);

CHECK:BRACES: braces {} should be used on all arms of this statement
#555: FILE: fs/minix/dir.c:413:
+				if (!namx[1]) {
[...]
-				} else if (de->name[1] != '.')
[...]
 					goto not_empty;
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space prohibited after that open parenthesis '('
#623: FILE: fs/minix/inode.c:209:
+	} else if ( *(__u16 *)(bh->b_data + 24) == MINIX3_SUPER_MAGIC) {

CHECK:SPACING: No space is necessary after a cast
#624: FILE: fs/minix/inode.c:210:
+		m3s = (struct minix3_super_block *) bh->b_data;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#639: FILE: fs/minix/inode.c:225:
+^I} else $

CHECK:BRACES: Unbalanced braces around else statement
#639: FILE: fs/minix/inode.c:225:
+	} else 

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#659: FILE: fs/minix/inode.c:306:
+		printk("VFS: Can't find a Minix filesystem V1 | V2 | V3 on device "

WARNING:SPLIT_STRING: quoted string split across lines
#660: FILE: fs/minix/inode.c:307:
+		printk("VFS: Can't find a Minix filesystem V1 | V2 | V3 on device "
+		       "%s.\n", s->s_id);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#750: FILE: fs/minix/itree_common.c:26:
+	return (block_t *)((char*)bh->b_data + bh->b_size);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#786: FILE: fs/minix/itree_common.c:306:
+	iblock = (inode->i_size + sb->s_blocksize -1) >> (10+k);
 	                                          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#786: FILE: fs/minix/itree_common.c:306:
+	iblock = (inode->i_size + sb->s_blocksize -1) >> (10+k);
 	                                                    ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#795: FILE: fs/minix/itree_common.c:351:
+static inline unsigned nblocks(loff_t size, struct dentry *dentry)

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#808: FILE: fs/minix/itree_common.c:361:
+		blocks += sb->s_blocksize/sizeof(block_t) - 1;
 		                         ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#809: FILE: fs/minix/itree_common.c:362:
+		blocks /= sb->s_blocksize/sizeof(block_t);
 		                         ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#827: FILE: fs/minix/itree_v1.c:58:
+unsigned V1_minix_blocks(loff_t size, struct dentry *dentry)

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#844: FILE: fs/minix/itree_v2.c:30:
+	} else if (block >= (minix_sb(inode->i_sb)->s_max_size/sb->s_blocksize)) {
 	                                                      ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#854: FILE: fs/minix/itree_v2.c:54:
+int V2_minix_get_block(struct inode *inode, long block,
 			struct buffer_head *bh_result, int create)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#866: FILE: fs/minix/itree_v2.c:64:
+unsigned V2_minix_blocks(loff_t size, struct dentry *dentry)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#893: FILE: fs/minix/minix.h:53:
+extern int minix_new_block(struct inode *inode);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#894: FILE: fs/minix/minix.h:54:
+extern void minix_free_block(struct inode *inode, unsigned long block);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#909: FILE: fs/minix/minix.h:65:
+extern unsigned V1_minix_blocks(loff_t, struct dentry *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#909: FILE: fs/minix/minix.h:65:
+extern unsigned V1_minix_blocks(loff_t, struct dentry *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t' should also have an identifier name
#909: FILE: fs/minix/minix.h:65:
+extern unsigned V1_minix_blocks(loff_t, struct dentry *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#909: FILE: fs/minix/minix.h:65:
+extern unsigned V1_minix_blocks(loff_t, struct dentry *);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#910: FILE: fs/minix/minix.h:66:
+extern unsigned V2_minix_blocks(loff_t, struct dentry *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#910: FILE: fs/minix/minix.h:66:
+extern unsigned V2_minix_blocks(loff_t, struct dentry *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t' should also have an identifier name
#910: FILE: fs/minix/minix.h:66:
+extern unsigned V2_minix_blocks(loff_t, struct dentry *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#910: FILE: fs/minix/minix.h:66:
+extern unsigned V2_minix_blocks(loff_t, struct dentry *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#913: FILE: fs/minix/minix.h:68:
+extern struct minix_dir_entry *minix_find_entry(struct dentry *, struct page **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#913: FILE: fs/minix/minix.h:68:
+extern struct minix_dir_entry *minix_find_entry(struct dentry *, struct page **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page **' should also have an identifier name
#913: FILE: fs/minix/minix.h:68:
+extern struct minix_dir_entry *minix_find_entry(struct dentry *, struct page **);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#923: FILE: fs/minix/minix.h:77:
+extern int minix3_block_size_shift(struct super_block *sb);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#934: FILE: include/linux/minix_fs.h:26:
+#define MINIX3_SUPER_MAGIC^I0x4d5a^I^I/* minix V3 fs */ $

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000080422.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 18 errors, 40 warnings, 20 checks, 843 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000080422.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
