WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#30: 
diff -Nur --exclude-from=/home/marcelo/exclude linux.orig/mm/memory.c linux/mm/memory.c

WARNING:BRACES: braces {} are not necessary for single statement blocks
#48: FILE: mm/memory.c:984:
+	if (!p->swap_map || !p->swap_map[SWP_OFFSET(entry)]) {
+		return 1;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#55: FILE: mm/memory.c:991:
+{ $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#56: FILE: mm/memory.c:992:
+        if (type >= nr_swapfiles) {$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#56: FILE: mm/memory.c:992:
+        if (type >= nr_swapfiles) {$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#57: FILE: mm/memory.c:993:
+^I^Iprintk("%s: Trying to free nonexistent swap-page\n", $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#57: FILE: mm/memory.c:993:
+		printk("%s: Trying to free nonexistent swap-page\n", 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#58: FILE: mm/memory.c:994:
+		printk("%s: Trying to free nonexistent swap-page\n", 
+			__FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#58: FILE: mm/memory.c:994:
+			__FUNCTION__);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#70: FILE: mm/memory.c:1002:
+ * Swap readaround code. We search for virtually contiguous pages starting from $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#73: FILE: mm/memory.c:1005:
+ * The virtually contiguous pages which are physically contiguous on the swap $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#76: FILE: mm/memory.c:1008:
+ * The search is done in both directions (first backwards and then afterwards) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#77: FILE: mm/memory.c:1009:
+ * with a maximum of (1 << page_cluster) cluster size. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#79: FILE: mm/memory.c:1011:
+ * We may encounter pte's which are already present, which means we dont $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#82: FILE: mm/memory.c:1014:
+ * such a "broken" cluster. The workaround here is to only allow 4 holes $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#83: FILE: mm/memory.c:1015:
+ * (two for each direction). The right thing here is to autotune (?) or $

CHECK:BIT_MACRO: Prefer using the BIT macro
#88: FILE: mm/memory.c:1019:
+#define SWAP_READ_CLUSTER (1 << page_cluster)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#89: FILE: mm/memory.c:1020:
+#define MAX_HOLES^I 2 $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#90: FILE: mm/memory.c:1021:
+void swapin_readahead(swp_entry_t entry, pte_t *page_table, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#91: FILE: mm/memory.c:1022:
+void swapin_readahead(swp_entry_t entry, pte_t *page_table, 
+			struct vm_area_struct *vma, unsigned long address)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#100: FILE: mm/memory.c:1029:
+	swp_entry_t pte_entry, swp_entry, entries[SWAP_READ_CLUSTER*2];
 	                                                           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#121: FILE: mm/memory.c:1039:
+	page_offset = offset = SWP_OFFSET(entry);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#122: FILE: mm/memory.c:1040:
+^I$

ERROR:SPACING: space required before the open parenthesis '('
#129: FILE: mm/memory.c:1047:
+	if(swap_device_sanity(type, p)) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#134: FILE: mm/memory.c:1052:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#147: FILE: mm/memory.c:1065:
+^I^I * of the cluster, stop searching. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#150: FILE: mm/memory.c:1068:
+^I^I^Iif(++holes > MAX_HOLES) $

ERROR:SPACING: space required before the open parenthesis '('
#150: FILE: mm/memory.c:1068:
+			if(++holes > MAX_HOLES) 

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#152: FILE: mm/memory.c:1070:
+			else continue;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#161: FILE: mm/memory.c:1079:
+^I^Iif(swap_entry_check(pte_entry, p)) $

ERROR:SPACING: space required before the open parenthesis '('
#161: FILE: mm/memory.c:1079:
+		if(swap_entry_check(pte_entry, p)) 

ERROR:SPACING: space required before the open parenthesis '('
#163: FILE: mm/memory.c:1081:
+		if(swap_entry_check(swp_entry, p))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#166: FILE: mm/memory.c:1084:
+^I^I/* If the pte is different from the pte on the swap, $

ERROR:SPACING: space required before the open parenthesis '('
#169: FILE: mm/memory.c:1087:
+		if(pte_entry.val != swp_entry.val)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#171: FILE: mm/memory.c:1089:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#180: FILE: mm/memory.c:1098:
+^I/* Point the pte we use in the loop to the "non conditional" $

ERROR:SPACING: space required before the open parenthesis '('
#188: FILE: mm/memory.c:1106:
+	if(first == SWAP_READ_CLUSTER)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#200: FILE: mm/memory.c:1118:
+^I^I^Iif(++holes > MAX_HOLES) $

ERROR:SPACING: space required before the open parenthesis '('
#200: FILE: mm/memory.c:1118:
+			if(++holes > MAX_HOLES) 

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#202: FILE: mm/memory.c:1120:
+			else continue;

ERROR:CODE_INDENT: code indent should use tabs where possible
#207: FILE: mm/memory.c:1123:
+                /* Don't read-ahead past the end of the swap area. */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#208: FILE: mm/memory.c:1124:
+                if (offset >= p->max)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#208: FILE: mm/memory.c:1124:
+                if (offset >= p->max)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#209: FILE: mm/memory.c:1125:
+                        break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#209: FILE: mm/memory.c:1125:
+                        break;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#215: FILE: mm/memory.c:1131:
+^I^Iif(swap_entry_check(pte_entry, p)) $

ERROR:SPACING: space required before the open parenthesis '('
#215: FILE: mm/memory.c:1131:
+		if(swap_entry_check(pte_entry, p)) 

ERROR:SPACING: space required before the open parenthesis '('
#217: FILE: mm/memory.c:1133:
+		if(swap_entry_check(swp_entry, p))

ERROR:SPACING: space required before the open parenthesis '('
#220: FILE: mm/memory.c:1136:
+		if(pte_entry.val != swp_entry.val)

ERROR:CODE_INDENT: code indent should use tabs where possible
#225: FILE: mm/memory.c:1141:
+^I       ^Icurr++;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#225: FILE: mm/memory.c:1141:
+^I       ^Icurr++;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#238: FILE: mm/memory.c:1154:
+^I^I/* We do not write the "main" page of the cluster here because $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#239: FILE: mm/memory.c:1155:
+^I^I * this is done by our callers. We hope the elevator does its $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#242: FILE: mm/memory.c:1158:
+^I^Iif(pos == SWAP_READ_CLUSTER) $

ERROR:SPACING: space required before the open parenthesis '('
#242: FILE: mm/memory.c:1158:
+		if(pos == SWAP_READ_CLUSTER) 

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#321: FILE: include/linux/mm.h:413:
+extern void swapin_readahead(swp_entry_t, pte_t *, struct vm_area_struct *,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'swp_entry_t' should also have an identifier name
#321: FILE: include/linux/mm.h:413:
+extern void swapin_readahead(swp_entry_t, pte_t *, struct vm_area_struct *,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'pte_t *' should also have an identifier name
#321: FILE: include/linux/mm.h:413:
+extern void swapin_readahead(swp_entry_t, pte_t *, struct vm_area_struct *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vm_area_struct *' should also have an identifier name
#321: FILE: include/linux/mm.h:413:
+extern void swapin_readahead(swp_entry_t, pte_t *, struct vm_area_struct *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#322: FILE: include/linux/mm.h:414:
+extern void swapin_readahead(swp_entry_t, pte_t *, struct vm_area_struct *,
+			unsigned long address);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000558293.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 42 errors, 11 warnings, 7 checks, 262 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000558293.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
