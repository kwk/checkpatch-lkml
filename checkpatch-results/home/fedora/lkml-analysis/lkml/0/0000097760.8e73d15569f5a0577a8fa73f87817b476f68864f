WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#31: 
The attached patch extends the get_sb() filesystem operation to take an extra

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#101: 
Signed-Off-By: David Howells <dhowells@redhat.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#142: FILE: fs/libfs.c:198:
+int get_sb_pseudo(struct file_system_type *fs_type, char *name,
+	struct super_operations *ops, unsigned long magic,

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#186: FILE: fs/namespace.c:96:
+EXPORT_SYMBOL(simple_set_mnt);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#210: FILE: fs/super.c:680:
+int get_sb_bdev(struct file_system_type *fs_type,
 	int flags, const char *dev_name, void *data,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#282: FILE: fs/super.c:754:
+int get_sb_nodev(struct file_system_type *fs_type,
 	int flags, void *data,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#315: FILE: fs/super.c:784:
+int get_sb_single(struct file_system_type *fs_type,
 	int flags, void *data,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#384: FILE: fs/super.c:840:
+	BUG_ON(!mnt->mnt_sb);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#385: FILE: fs/super.c:841:
+	BUG_ON(!mnt->mnt_sb->s_root);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#386: FILE: fs/super.c:842:
+	BUG_ON(!mnt->mnt_root);

ERROR:CODE_INDENT: code indent should use tabs where possible
#388: FILE: fs/super.c:844:
+ ^Ierror = security_sb_kern_mount(mnt->mnt_sb, secdata);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#388: FILE: fs/super.c:844:
+ ^Ierror = security_sb_kern_mount(mnt->mnt_sb, secdata);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#388: FILE: fs/super.c:844:
+ ^Ierror = security_sb_kern_mount(mnt->mnt_sb, secdata);$

WARNING:SPACING: Unnecessary space before function pointer arguments
#430: FILE: include/linux/fs.h:1239:
+	int (*get_sb) (struct file_system_type *, int,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file_system_type *' should also have an identifier name
#430: FILE: include/linux/fs.h:1239:
+	int (*get_sb) (struct file_system_type *, int,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#430: FILE: include/linux/fs.h:1239:
+	int (*get_sb) (struct file_system_type *, int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#430: FILE: include/linux/fs.h:1239:
+	int (*get_sb) (struct file_system_type *, int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#430: FILE: include/linux/fs.h:1239:
+	int (*get_sb) (struct file_system_type *, int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfsmount *' should also have an identifier name
#430: FILE: include/linux/fs.h:1239:
+	int (*get_sb) (struct file_system_type *, int,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#439: FILE: include/linux/fs.h:1247:
+extern int get_sb_bdev(struct file_system_type *fs_type,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#440: FILE: include/linux/fs.h:1248:
+extern int get_sb_bdev(struct file_system_type *fs_type,
 	int flags, const char *dev_name, void *data,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#445: FILE: include/linux/fs.h:1251:
+extern int get_sb_single(struct file_system_type *fs_type,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#446: FILE: include/linux/fs.h:1252:
+extern int get_sb_single(struct file_system_type *fs_type,
 	int flags, void *data,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#451: FILE: include/linux/fs.h:1255:
+extern int get_sb_nodev(struct file_system_type *fs_type,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#452: FILE: include/linux/fs.h:1256:
+extern int get_sb_nodev(struct file_system_type *fs_type,
 	int flags, void *data,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#465: FILE: include/linux/fs.h:1269:
+extern int get_sb_pseudo(struct file_system_type *, char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file_system_type *' should also have an identifier name
#465: FILE: include/linux/fs.h:1269:
+extern int get_sb_pseudo(struct file_system_type *, char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#465: FILE: include/linux/fs.h:1269:
+extern int get_sb_pseudo(struct file_system_type *, char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#465: FILE: include/linux/fs.h:1269:
+extern int get_sb_pseudo(struct file_system_type *, char *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#466: FILE: include/linux/fs.h:1270:
+extern int get_sb_pseudo(struct file_system_type *, char *,
+	struct super_operations *ops, unsigned long,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#468: FILE: include/linux/fs.h:1272:
+extern int simple_set_mnt(struct vfsmount *mnt, struct super_block *sb);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000097760.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 17 warnings, 13 checks, 324 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000097760.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
