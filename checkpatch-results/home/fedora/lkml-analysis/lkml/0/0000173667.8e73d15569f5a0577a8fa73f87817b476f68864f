WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#27: 
we finally decided to rework the SPI core and now it its ready for your comments.. 

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#68: FILE: drivers/spi/helpers.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:NEW_TYPEDEFS: do not add new typedefs
#86: FILE: drivers/spi/helpers.c:19:
+typedef struct {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#87: FILE: drivers/spi/helpers.c:20:
+	int (*callback) (struct device * dev, void *data);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: Unnecessary space before function pointer arguments
#87: FILE: drivers/spi/helpers.c:20:
+	int (*callback) (struct device * dev, void *data);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#94: FILE: drivers/spi/helpers.c:27:
+	_find_t *local_data = (_find_t *) data;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#96: FILE: drivers/spi/helpers.c:29:
+^Ireturn (device->driver != local_data->drv) ? 0 : $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#97: FILE: drivers/spi/helpers.c:30:
+^I        (*local_data->callback) (device, local_data->data);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#100: FILE: drivers/spi/helpers.c:33:
+int driver_for_each_dev(struct device_driver *drv, void *data,
+			int (*callback) (struct device * dev, void *data))
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#101: FILE: drivers/spi/helpers.c:34:
+			int (*callback) (struct device * dev, void *data))

WARNING:SPACING: Unnecessary space before function pointer arguments
#101: FILE: drivers/spi/helpers.c:34:
+			int (*callback) (struct device * dev, void *data))

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#111: FILE: drivers/spi/helpers.c:44:
+EXPORT_SYMBOL(driver_for_each_dev);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#122: FILE: drivers/spi/Kconfig:6:
+config SPI
+	tristate "SPI support"
+        default false
+	help
+	  Say Y if you need to enable SPI support on your kernel
+

Kconfig symbols should have a help text which fully describes
it.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#129: FILE: drivers/spi/Kconfig:13:
+^Ibool "SPI debug output" $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#130: FILE: drivers/spi/Kconfig:14:
+^Idepends on SPI $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#131: FILE: drivers/spi/Kconfig:15:
+^Idefault false $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#132: FILE: drivers/spi/Kconfig:16:
+^Ihelp $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#135: FILE: drivers/spi/Kconfig:19:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#142: FILE: drivers/spi/Kconfig:26:
+^I  programs use the SPI bus. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#143: FILE: drivers/spi/Kconfig:27:
+^I  This support is also available as a module.  If so, the module $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#165: FILE: drivers/spi/spi-core.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#166: FILE: drivers/spi/spi-core.c:2:
+ *  linux/drivers/spi/spi-core.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#205: FILE: drivers/spi/spi-core.c:41:
+		printk(KERN_ERR

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#207: FILE: drivers/spi/spi-core.c:43:
+		       __FUNCTION__);

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#211: FILE: drivers/spi/spi-core.c:47:
+	if (NULL == spidev->name) {

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#212: FILE: drivers/spi/spi-core.c:48:
+		printk("%s: device has no name, so it cannot be attached\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#213: FILE: drivers/spi/spi-core.c:49:
+		       __FUNCTION__);

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#218: FILE: drivers/spi/spi-core.c:54:
+	if (NULL == spidrv->supported_ids) {

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#221: FILE: drivers/spi/spi-core.c:57:
+		     __FUNCTION__);

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#231: FILE: drivers/spi/spi-core.c:67:
+		if (0 == strncmp(*id, SPI_ID_ANY, strlen(SPI_ID_ANY))) {

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#238: FILE: drivers/spi/spi-core.c:74:
+		if (0 == strcmp(*id, spidev->name)) {

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#247: FILE: drivers/spi/spi-core.c:83:
+	pr_debug("%s: no match\n ", __FUNCTION__);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#249: FILE: drivers/spi/spi-core.c:85:
+spi_match_done:^I$

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#306: FILE: drivers/spi/spi-core.c:142:
+	int ret = -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

WARNING:BRACES: braces {} are not necessary for single statement blocks
#310: FILE: drivers/spi/spi-core.c:146:
+		if (adap->select) {
+			adap->select(adap, 1);
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BRACES: braces {} are not necessary for single statement blocks
#314: FILE: drivers/spi/spi-core.c:150:
+		if (adap->select) {
+			adap->select(adap, 0);
+		}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#375: FILE: drivers/spi/spi-core.c:211:
+ * Bus declaration, init/exit functions $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#388: FILE: drivers/spi/spi-core.c:224:
+	printk("SPI bus driver loaded.\n");

ERROR:SPACING: space prohibited after that open parenthesis '('
#401: FILE: drivers/spi/spi-core.c:237:
+MODULE_LICENSE( "GPL" );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#401: FILE: drivers/spi/spi-core.c:237:
+MODULE_LICENSE( "GPL" );

ERROR:SPACING: space prohibited after that open parenthesis '('
#402: FILE: drivers/spi/spi-core.c:238:
+MODULE_AUTHOR( "dmitry pervushin <dpervushin@ru.mvista.com>" );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#402: FILE: drivers/spi/spi-core.c:238:
+MODULE_AUTHOR( "dmitry pervushin <dpervushin@ru.mvista.com>" );

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#404: FILE: drivers/spi/spi-core.c:240:
+EXPORT_SYMBOL_GPL(spi_add_adapter);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#405: FILE: drivers/spi/spi-core.c:241:
+EXPORT_SYMBOL_GPL(spi_del_adapter);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#406: FILE: drivers/spi/spi-core.c:242:
+EXPORT_SYMBOL_GPL(spi_transfer);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#407: FILE: drivers/spi/spi-core.c:243:
+EXPORT_SYMBOL_GPL(spi_write);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#408: FILE: drivers/spi/spi-core.c:244:
+EXPORT_SYMBOL_GPL(spi_read);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#413: FILE: drivers/spi/spi-dev.c:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#414: FILE: drivers/spi/spi-dev.c:2:
+    spi-dev.c - spi-bus driver, char device interface  $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#414: FILE: drivers/spi/spi-dev.c:2:
+/*
+    spi-dev.c - spi-bus driver, char device interface  

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#431: FILE: drivers/spi/spi-dev.c:19:
+    along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#432: FILE: drivers/spi/spi-dev.c:20:
+    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#438: FILE: drivers/spi/spi-dev.c:26:
+/* Note that this is a complete rewrite of Simon Vogl's i2c-dev module.
+   But I have used so much of his original code and ideas that it seems

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#439: FILE: drivers/spi/spi-dev.c:27:
+   only fair to recognize him as co-author -- Frodo */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#441: FILE: drivers/spi/spi-dev.c:29:
+/* The devfs code is contributed by Philipp Matthias Hahn $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#442: FILE: drivers/spi/spi-dev.c:30:
+/* The devfs code is contributed by Philipp Matthias Hahn 
+   <pmhahn@titan.lahn.de> */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#442: FILE: drivers/spi/spi-dev.c:30:
+   <pmhahn@titan.lahn.de> */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#444: FILE: drivers/spi/spi-dev.c:32:
+/* Modifications to allow work with current spi-core by $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#445: FILE: drivers/spi/spi-dev.c:33:
+/* Modifications to allow work with current spi-core by 
+   Andrey Ivolgin <aivolgin@ru.mvista.com>, Sep 2004

ERROR:TRAILING_WHITESPACE: trailing whitespace
#449: FILE: drivers/spi/spi-dev.c:37:
+   by Vitaly Wool <vwool@ru.mvista.com> (C) 2004 MontaVista Software, Inc. $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#449: FILE: drivers/spi/spi-dev.c:37:
+/* devfs code corrected to support automatic device addition/deletion
+   by Vitaly Wool <vwool@ru.mvista.com> (C) 2004 MontaVista Software, Inc. 

WARNING:CVS_KEYWORD: CVS style keyword markers, these will _not_ be updated
#452: FILE: drivers/spi/spi-dev.c:40:
+/* $Id: cee_lsp-philips-melody.patch,v 1.1.4.8 2005/02/25 10:20:15 wool Exp $ */

Since linux moved to git, the CVS markers are no longer used.
So, CVS style keywords ($Id$, $Revision$, $Log$) should not be
added.

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#471: FILE: drivers/spi/spi-dev.c:59:
+#include <asm/uaccess.h>

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#481: FILE: drivers/spi/spi-dev.c:69:
+			   loff_t * offset);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#483: FILE: drivers/spi/spi-dev.c:71:
+			    loff_t * offset);

WARNING:CONST_STRUCT: struct file_operations should normally be const
#496: FILE: drivers/spi/spi-dev.c:84:
+static struct file_operations spidev_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#506: FILE: drivers/spi/spi-dev.c:94:
+    SPI_ID_ANY $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#506: FILE: drivers/spi/spi-dev.c:94:
+    SPI_ID_ANY $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#507: FILE: drivers/spi/spi-dev.c:95:
+SPI_IDS_TABLE_END $

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#526: FILE: drivers/spi/spi-dev.c:114:
+	if (NULL == dev) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#527: FILE: drivers/spi/spi-dev.c:115:
+		printk(KERN_ERR "%s: probing the NULL device!\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#527: FILE: drivers/spi/spi-dev.c:115:
+		printk(KERN_ERR "%s: probing the NULL device!\n", __FUNCTION__);

CHECK:SPACING: No space is necessary after a cast
#532: FILE: drivers/spi/spi-dev.c:120:
+	drvdata = (spidev_driver_data_t *) kmalloc(sizeof(spidev_driver_data_t),

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#532: FILE: drivers/spi/spi-dev.c:120:
+	drvdata = (spidev_driver_data_t *) kmalloc(sizeof(spidev_driver_data_t),

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#534: FILE: drivers/spi/spi-dev.c:122:
+	if (NULL == drvdata) {

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#535: FILE: drivers/spi/spi-dev.c:123:
+	if (NULL == drvdata) {
+		pr_debug("%s: allocating drvdata failed\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#535: FILE: drivers/spi/spi-dev.c:123:
+		pr_debug("%s: allocating drvdata failed\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#542: FILE: drivers/spi/spi-dev.c:130:
+		 __FUNCTION__, dev, drvdata->minor);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IWUSR' are not preferred. Consider using octal permissions '0600'.
#546: FILE: drivers/spi/spi-dev.c:134:
+		      S_IFCHR | S_IRUSR | S_IWUSR, "spi/%d", drvdata->minor);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#548: FILE: drivers/spi/spi-dev.c:136:
+	pr_debug("%s: Registered as minor %d\n", __FUNCTION__, drvdata->minor);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#549: FILE: drivers/spi/spi-dev.c:137:
+probe_out:^I$

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#558: FILE: drivers/spi/spi-dev.c:146:
+	if (NULL == dev) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#558: FILE: drivers/spi/spi-dev.c:146:
+	if (NULL == dev) {
+		printk(KERN_ERR "%s: removing the NULL device\n", __FUNCTION__);
+	}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#559: FILE: drivers/spi/spi-dev.c:147:
+		printk(KERN_ERR "%s: removing the NULL device\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#559: FILE: drivers/spi/spi-dev.c:147:
+		printk(KERN_ERR "%s: removing the NULL device\n", __FUNCTION__);

CHECK:SPACING: No space is necessary after a cast
#562: FILE: drivers/spi/spi-dev.c:150:
+	drvdata = (spidev_driver_data_t *) dev_get_drvdata(dev);

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#563: FILE: drivers/spi/spi-dev.c:151:
+	if (NULL == drvdata) {

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#564: FILE: drivers/spi/spi-dev.c:152:
+		pr_debug("%s: oops, drvdata is NULL !\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#572: FILE: drivers/spi/spi-dev.c:160:
+	pr_debug("%s: device removed\n", __FUNCTION__);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#573: FILE: drivers/spi/spi-dev.c:161:
+remove_out:^I$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#578: FILE: drivers/spi/spi-dev.c:166:
+			   loff_t * offset)

WARNING:SPACING: Unnecessary space before function pointer arguments
#586: FILE: drivers/spi/spi-dev.c:174:
+	unsigned long (*cpy_to_user) (void *to_user, const void *from,

WARNING:SPACING: Unnecessary space before function pointer arguments
#588: FILE: drivers/spi/spi-dev.c:176:
+	void *(*alloc) (size_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#588: FILE: drivers/spi/spi-dev.c:176:
+	void *(*alloc) (size_t, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#588: FILE: drivers/spi/spi-dev.c:176:
+	void *(*alloc) (size_t, int);

WARNING:SPACING: Unnecessary space before function pointer arguments
#589: FILE: drivers/spi/spi-dev.c:177:
+	void (*free) (const void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const void *' should also have an identifier name
#589: FILE: drivers/spi/spi-dev.c:177:
+	void (*free) (const void *);

WARNING:LINE_SPACING: Missing a blank line after declarations
#590: FILE: drivers/spi/spi-dev.c:178:
+	void (*free) (const void *);
+	if (count > SPI_TRANSFER_MAX)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tmp"
#599: FILE: drivers/spi/spi-dev.c:187:
+	if (tmp == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:TRAILING_WHITESPACE: trailing whitespace
#610: FILE: drivers/spi/spi-dev.c:198:
+read_out:^I$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#615: FILE: drivers/spi/spi-dev.c:203:
+			    loff_t * offset)

WARNING:SPACING: Unnecessary space before function pointer arguments
#623: FILE: drivers/spi/spi-dev.c:211:
+	unsigned long (*cpy_from_user) (void *to, const void *from_user,

WARNING:SPACING: Unnecessary space before function pointer arguments
#625: FILE: drivers/spi/spi-dev.c:213:
+	void *(*alloc) (size_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#625: FILE: drivers/spi/spi-dev.c:213:
+	void *(*alloc) (size_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#625: FILE: drivers/spi/spi-dev.c:213:
+	void *(*alloc) (size_t, int);

WARNING:SPACING: Unnecessary space before function pointer arguments
#626: FILE: drivers/spi/spi-dev.c:214:
+	void (*free) (const void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const void *' should also have an identifier name
#626: FILE: drivers/spi/spi-dev.c:214:
+	void (*free) (const void *);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tmp"
#638: FILE: drivers/spi/spi-dev.c:226:
+	if (tmp == NULL) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#650: FILE: drivers/spi/spi-dev.c:238:
+write_out_2:^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#652: FILE: drivers/spi/spi-dev.c:240:
+write_out_1:^I$

WARNING:NEW_TYPEDEFS: do not add new typedefs
#656: FILE: drivers/spi/spi-dev.c:244:
+typedef struct {

CHECK:SPACING: No space is necessary after a cast
#663: FILE: drivers/spi/spi-dev.c:251:
+	spidev_openclose_t *o = (spidev_openclose_t *) context;

CHECK:SPACING: No space is necessary after a cast
#668: FILE: drivers/spi/spi-dev.c:256:
+	drvdata = (spidev_driver_data_t *) dev_get_drvdata(dev);

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#669: FILE: drivers/spi/spi-dev.c:257:
+	if (NULL == drvdata) {

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#670: FILE: drivers/spi/spi-dev.c:258:
+		pr_debug("%s: oops, drvdata is NULL !\n", __FUNCTION__);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#692: FILE: drivers/spi/spi-dev.c:280:
+	if (status == 0) {
+		status = -ENODEV;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#702: FILE: drivers/spi/spi-dev.c:290:
+	if (adapter) {
+		put_device(&adapter->dev);
+	}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#714: FILE: drivers/spi/spi-dev.c:302:
+	printk(KERN_INFO "spi /dev entries driver\n");

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#716: FILE: drivers/spi/spi-dev.c:304:
+	if (0 != (res = register_chrdev(SPI_MAJOR, "spi", &spidev_fops))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#716: FILE: drivers/spi/spi-dev.c:304:
+	if (0 != (res = register_chrdev(SPI_MAJOR, "spi", &spidev_fops))) {
+		goto out;
+	}

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#720: FILE: drivers/spi/spi-dev.c:308:
+	if (0 != (res = spi_add_driver(&spidev_driver))) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#720: FILE: drivers/spi/spi-dev.c:308:
+	if (0 != (res = spi_add_driver(&spidev_driver))) {
+		goto out_unreg;
+	}

WARNING:INDENTED_LABEL: labels should not be indented
#728: FILE: drivers/spi/spi-dev.c:316:
+      out_unreg:

WARNING:INDENTED_LABEL: labels should not be indented
#730: FILE: drivers/spi/spi-dev.c:318:
+      out:

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#731: FILE: drivers/spi/spi-dev.c:319:
+	printk(KERN_ERR "%s: Driver initialization failed\n", __FILE__);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#754: FILE: drivers/spi/spi.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#755: FILE: drivers/spi/spi.h:2:
+ *  linux/drivers/spi/spi.h

ERROR:SPACING: space prohibited after that open parenthesis '('
#769: FILE: drivers/spi/spi.h:16:
+#define SPI_DRV( n ) container_of( n, struct spi_driver, driver )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#769: FILE: drivers/spi/spi.h:16:
+#define SPI_DRV( n ) container_of( n, struct spi_driver, driver )

ERROR:SPACING: space prohibited after that open parenthesis '('
#770: FILE: drivers/spi/spi.h:17:
+#define SPI_ADAP( n ) container_of( n, struct spi_adapter, dev )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#770: FILE: drivers/spi/spi.h:17:
+#define SPI_ADAP( n ) container_of( n, struct spi_adapter, dev )

WARNING:NEW_TYPEDEFS: do not add new typedefs
#772: FILE: drivers/spi/spi.h:19:
+typedef struct {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#781: FILE: drivers/spi/spi.h:28:
+			int (*callback) (struct device * dev, void *data));

WARNING:SPACING: Unnecessary space before function pointer arguments
#781: FILE: drivers/spi/spi.h:28:
+			int (*callback) (struct device * dev, void *data));

ERROR:SPACING: space prohibited after that open parenthesis '('
#785: FILE: drivers/spi/spi.h:32:
+#define ENTER() pr_debug( "%s: ENTERed\n", __FUNCTION__ )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#785: FILE: drivers/spi/spi.h:32:
+#define ENTER() pr_debug( "%s: ENTERed\n", __FUNCTION__ )

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#785: FILE: drivers/spi/spi.h:32:
+#define ENTER() pr_debug( "%s: ENTERed\n", __FUNCTION__ )

ERROR:SPACING: space prohibited after that open parenthesis '('
#786: FILE: drivers/spi/spi.h:33:
+#define LEAVE() pr_debug( "%s: LEFT OUT\n", __FUNCTION__ )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#786: FILE: drivers/spi/spi.h:33:
+#define LEAVE() pr_debug( "%s: LEFT OUT\n", __FUNCTION__ )

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#786: FILE: drivers/spi/spi.h:33:
+#define LEAVE() pr_debug( "%s: LEFT OUT\n", __FUNCTION__ )

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#793: FILE: include/linux/spi/spi.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#794: FILE: include/linux/spi/spi.h:2:
+ *  linux/include/linux/spi/spi.h

WARNING:TYPO_SPELLING: 'begining' may be misspelled - perhaps 'beginning'?
#816: FILE: include/linux/spi/spi.h:24:
+#define SPI_M_CS	0x08	/**< CS active level at begining of frame ( default low ) */
                 	    	                        ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#826: FILE: include/linux/spi/spi.h:34:
+
+

WARNING:SPACING: Unnecessary space before function pointer arguments
#838: FILE: include/linux/spi/spi.h:46:
+	int (*open) (struct spi_driver *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct spi_driver *' should also have an identifier name
#838: FILE: include/linux/spi/spi.h:46:
+	int (*open) (struct spi_driver *);

WARNING:SPACING: Unnecessary space before function pointer arguments
#839: FILE: include/linux/spi/spi.h:47:
+	int (*command) (struct spi_driver *, int cmd, void *arg);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct spi_driver *' should also have an identifier name
#839: FILE: include/linux/spi/spi.h:47:
+	int (*command) (struct spi_driver *, int cmd, void *arg);

WARNING:SPACING: Unnecessary space before function pointer arguments
#840: FILE: include/linux/spi/spi.h:48:
+	void (*close) (struct spi_driver *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct spi_driver *' should also have an identifier name
#840: FILE: include/linux/spi/spi.h:48:
+	void (*close) (struct spi_driver *);

WARNING:NEW_TYPEDEFS: do not add new typedefs
#843: FILE: include/linux/spi/spi.h:51:
+typedef char *spi_ids_t[];

ERROR:SPACING: space prohibited before that ',' (ctx:WxV)
#846: FILE: include/linux/spi/spi.h:54:
+#define SPI_IDS_TABLE_END ,NULL };
                           ^

ERROR:SPACING: space required after that ',' (ctx:WxV)
#846: FILE: include/linux/spi/spi.h:54:
+#define SPI_IDS_TABLE_END ,NULL };
                           ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#846: FILE: include/linux/spi/spi.h:54:
+#define SPI_IDS_TABLE_END ,NULL };

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#846: FILE: include/linux/spi/spi.h:54:
+#define SPI_IDS_TABLE_END ,NULL };

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#847: FILE: include/linux/spi/spi.h:55:
+#define SPI_IDS &spi_devices_supported

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#859: FILE: include/linux/spi/spi.h:67:
+#define SELECT   ^I0x01$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#860: FILE: include/linux/spi/spi.h:68:
+#define UNSELECT ^I0x02$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#861: FILE: include/linux/spi/spi.h:69:
+#define BEFORE_READ ^I0x03$

WARNING:SPACING: Unnecessary space before function pointer arguments
#871: FILE: include/linux/spi/spi.h:79:
+	int (*xfer) (struct spi_adapter *, struct spi_msg msgs[], int num);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct spi_adapter *' should also have an identifier name
#871: FILE: include/linux/spi/spi.h:79:
+	int (*xfer) (struct spi_adapter *, struct spi_msg msgs[], int num);

WARNING:SPACING: Unnecessary space before function pointer arguments
#872: FILE: include/linux/spi/spi.h:80:
+	int (*chip_cs) (int, void *context);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#872: FILE: include/linux/spi/spi.h:80:
+	int (*chip_cs) (int, void *context);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#900: FILE: include/linux/spi/spi.h:108:
+	void (*select) (struct spi_adapter * this, int onoff);

WARNING:SPACING: Unnecessary space before function pointer arguments
#900: FILE: include/linux/spi/spi.h:108:
+	void (*select) (struct spi_adapter * this, int onoff);

WARNING:SPACING: Unnecessary space before function pointer arguments
#903: FILE: include/linux/spi/spi.h:111:
+	void *(*alloc) (size_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#903: FILE: include/linux/spi/spi.h:111:
+	void *(*alloc) (size_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#903: FILE: include/linux/spi/spi.h:111:
+	void *(*alloc) (size_t, int);

WARNING:SPACING: Unnecessary space before function pointer arguments
#904: FILE: include/linux/spi/spi.h:112:
+	void (*free) (const void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const void *' should also have an identifier name
#904: FILE: include/linux/spi/spi.h:112:
+	void (*free) (const void *);

WARNING:SPACING: Unnecessary space before function pointer arguments
#910: FILE: include/linux/spi/spi.h:118:
+	unsigned long (*copy_from_user) (void *to, const void *from_user,

WARNING:SPACING: Unnecessary space before function pointer arguments
#912: FILE: include/linux/spi/spi.h:120:
+	unsigned long (*copy_to_user) (void *to_user, const void *from,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#918: FILE: include/linux/spi/spi.h:126:
+extern int spi_add_adapter(struct spi_adapter *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct spi_adapter *' should also have an identifier name
#918: FILE: include/linux/spi/spi.h:126:
+extern int spi_add_adapter(struct spi_adapter *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#919: FILE: include/linux/spi/spi.h:127:
+extern void spi_del_adapter(struct spi_adapter *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct spi_adapter *' should also have an identifier name
#919: FILE: include/linux/spi/spi.h:127:
+extern void spi_del_adapter(struct spi_adapter *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#921: FILE: include/linux/spi/spi.h:129:
+extern int spi_transfer(struct spi_adapter *, struct spi_msg msgs[], int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct spi_adapter *' should also have an identifier name
#921: FILE: include/linux/spi/spi.h:129:
+extern int spi_transfer(struct spi_adapter *, struct spi_msg msgs[], int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#921: FILE: include/linux/spi/spi.h:129:
+extern int spi_transfer(struct spi_adapter *, struct spi_msg msgs[], int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#922: FILE: include/linux/spi/spi.h:130:
+extern int spi_write(struct spi_adapter *, int, const char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct spi_adapter *' should also have an identifier name
#922: FILE: include/linux/spi/spi.h:130:
+extern int spi_write(struct spi_adapter *, int, const char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#922: FILE: include/linux/spi/spi.h:130:
+extern int spi_write(struct spi_adapter *, int, const char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#922: FILE: include/linux/spi/spi.h:130:
+extern int spi_write(struct spi_adapter *, int, const char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#922: FILE: include/linux/spi/spi.h:130:
+extern int spi_write(struct spi_adapter *, int, const char *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#923: FILE: include/linux/spi/spi.h:131:
+extern int spi_read(struct spi_adapter *, int, char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct spi_adapter *' should also have an identifier name
#923: FILE: include/linux/spi/spi.h:131:
+extern int spi_read(struct spi_adapter *, int, char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#923: FILE: include/linux/spi/spi.h:131:
+extern int spi_read(struct spi_adapter *, int, char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#923: FILE: include/linux/spi/spi.h:131:
+extern int spi_read(struct spi_adapter *, int, char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#923: FILE: include/linux/spi/spi.h:131:
+extern int spi_read(struct spi_adapter *, int, char *, int);

WARNING:NEW_TYPEDEFS: do not add new typedefs
#935: FILE: include/linux/spi/spi.h:143:
+typedef struct {

CHECK:SPACING: No space is necessary after a cast
#944: FILE: include/linux/spi/spi.h:152:
+	dd = (spidev_driver_data_t *) dev_get_drvdata(&dev->dev);

CHECK:SPACING: No space is necessary after a cast
#952: FILE: include/linux/spi/spi.h:160:
+	dd = (spidev_driver_data_t *) dev_get_drvdata(&dev->dev);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#953: FILE: include/linux/spi/spi.h:161:
+	if (dd) {
+		dd->private_data = data;
+	}

WARNING:LINE_SPACING: Missing a blank line after declarations
#993: FILE: include/linux/spi/spi.h:201:
+	struct spi_ops *ops = clnt->ops;
+	if (ops && ops->close)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000173667.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 51 errors, 128 warnings, 15 checks, 918 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000173667.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
