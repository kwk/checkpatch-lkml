WARNING:LEADING_SPACE: please, no spaces at the start of a line
#47: FILE: security/slim/slm_main.c:1566:
+     struct slm_tsec_data *parent_tsec = parent_tsk->security;$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (5, 11)
#54: FILE: security/slim/slm_main.c:1591:
      } else {
+           if (!parent_tsec) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#55: FILE: security/slim/slm_main.c:1592:
+           if (!parent_tsec) {$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#55: FILE: security/slim/slm_main.c:1592:
+           if (!parent_tsec) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (11, 17)
#55: FILE: security/slim/slm_main.c:1592:
+           if (!parent_tsec) {
+                 dprintk(SLM_SECRECY,

ERROR:CODE_INDENT: code indent should use tabs where possible
#56: FILE: security/slim/slm_main.c:1593:
+                 dprintk(SLM_SECRECY,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#56: FILE: security/slim/slm_main.c:1593:
+                 dprintk(SLM_SECRECY,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#57: FILE: security/slim/slm_main.c:1594:
+                       "%s: pid %d(%s %d-%s) %s "$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#57: FILE: security/slim/slm_main.c:1594:
+                 dprintk(SLM_SECRECY,
+                       "%s: pid %d(%s %d-%s) %s "

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#57: FILE: security/slim/slm_main.c:1594:
+                       "%s: pid %d(%s %d-%s) %s "$

ERROR:CODE_INDENT: code indent should use tabs where possible
#58: FILE: security/slim/slm_main.c:1595:
+                       " executing, promoting secrecy to sac=%d-%s\n",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#58: FILE: security/slim/slm_main.c:1595:
+                       " executing, promoting secrecy to sac=%d-%s\n",$

WARNING:SPLIT_STRING: quoted string split across lines
#58: FILE: security/slim/slm_main.c:1595:
+                       "%s: pid %d(%s %d-%s) %s "
+                       " executing, promoting secrecy to sac=%d-%s\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:CODE_INDENT: code indent should use tabs where possible
#59: FILE: security/slim/slm_main.c:1596:
+                       __FUNCTION__, current->pid,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#59: FILE: security/slim/slm_main.c:1596:
+                       __FUNCTION__, current->pid,$

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#59: FILE: security/slim/slm_main.c:1596:
+                       __FUNCTION__, current->pid,

ERROR:CODE_INDENT: code indent should use tabs where possible
#60: FILE: security/slim/slm_main.c:1597:
+                       current->comm, cur_tsec->sac_rx,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#60: FILE: security/slim/slm_main.c:1597:
+                       current->comm, cur_tsec->sac_rx,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#61: FILE: security/slim/slm_main.c:1598:
+                       (cur_tsec->sac_w != cur_tsec->sac_rx)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#61: FILE: security/slim/slm_main.c:1598:
+                       (cur_tsec->sac_w != cur_tsec->sac_rx)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#62: FILE: security/slim/slm_main.c:1599:
+                       ? "GUARD" : slm_sac_str[cur_tsec->$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#62: FILE: security/slim/slm_main.c:1599:
+                       ? "GUARD" : slm_sac_str[cur_tsec->$

ERROR:CODE_INDENT: code indent should use tabs where possible
#63: FILE: security/slim/slm_main.c:1600:
+                                         sac_rx],$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#63: FILE: security/slim/slm_main.c:1600:
+                                         sac_rx],$

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'cur_tsec->sac_rx'
#63: FILE: security/slim/slm_main.c:1600:
+                       ? "GUARD" : slm_sac_str[cur_tsec->
+                                         sac_rx],

A single dereferencing identifier spanned on multiple lines like::

  struct_identifier->member[index].
  member = <foo>;

is generally hard to follow. It can easily lead to typos and so makes
the code vulnerable to bugs.

If fixing the multiple line dereferencing leads to an 80 column
violation, then either rewrite the code in a more simple way or if the
starting part of the dereferencing identifier is the same and used at
multiple places then store it in a temporary variable, and use that
temporary variable only at all the places. For example, if there are
two dereferencing identifiers::

  member1->member2->member3.foo1;
  member1->member2->member3.foo2;

then store the member1->member2->member3 part in a temporary variable.
It not only helps to avoid the 80 column violation but also reduces
the program size by removing the unnecessary dereferences.

But if none of the above methods work then ignore the 80 column
violation because it is much easier to read a dereferencing identifier
on a single line.

ERROR:CODE_INDENT: code indent should use tabs where possible
#64: FILE: security/slim/slm_main.c:1601:
+                       bprm->filename, level->sac_level,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#64: FILE: security/slim/slm_main.c:1601:
+                       bprm->filename, level->sac_level,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#65: FILE: security/slim/slm_main.c:1602:
+                       slm_sac_str[level->sac_level]);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#65: FILE: security/slim/slm_main.c:1602:
+                       slm_sac_str[level->sac_level]);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#66: FILE: security/slim/slm_main.c:1603:
+           } else$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#66: FILE: security/slim/slm_main.c:1603:
+           } else$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (11, 17)
#66: FILE: security/slim/slm_main.c:1603:
+           } else
+                 dprintk(SLM_SECRECY,

CHECK:BRACES: Unbalanced braces around else statement
#66: FILE: security/slim/slm_main.c:1603:
+           } else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#67: FILE: security/slim/slm_main.c:1604:
+                 dprintk(SLM_SECRECY,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#67: FILE: security/slim/slm_main.c:1604:
+                 dprintk(SLM_SECRECY,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#68: FILE: security/slim/slm_main.c:1605:
+                       "%s: ppid %d(%s %d-%s) pid %d(%s %d-%s) %s"$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#68: FILE: security/slim/slm_main.c:1605:
+                 dprintk(SLM_SECRECY,
+                       "%s: ppid %d(%s %d-%s) pid %d(%s %d-%s) %s"

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#68: FILE: security/slim/slm_main.c:1605:
+                       "%s: ppid %d(%s %d-%s) pid %d(%s %d-%s) %s"$

ERROR:CODE_INDENT: code indent should use tabs where possible
#69: FILE: security/slim/slm_main.c:1606:
+                       "executing, promoting secrecy to sac=%d-%s\n",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#69: FILE: security/slim/slm_main.c:1606:
+                       "executing, promoting secrecy to sac=%d-%s\n",$

WARNING:SPLIT_STRING: quoted string split across lines
#69: FILE: security/slim/slm_main.c:1606:
+                       "%s: ppid %d(%s %d-%s) pid %d(%s %d-%s) %s"
+                       "executing, promoting secrecy to sac=%d-%s\n",

WARNING:MISSING_SPACE: break quoted strings at a space character
#69: FILE: security/slim/slm_main.c:1606:
+                       "%s: ppid %d(%s %d-%s) pid %d(%s %d-%s) %s"
+                       "executing, promoting secrecy to sac=%d-%s\n",

ERROR:CODE_INDENT: code indent should use tabs where possible
#70: FILE: security/slim/slm_main.c:1607:
+                       __FUNCTION__, parent_tsk->pid,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#70: FILE: security/slim/slm_main.c:1607:
+                       __FUNCTION__, parent_tsk->pid,$

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#70: FILE: security/slim/slm_main.c:1607:
+                       __FUNCTION__, parent_tsk->pid,

ERROR:CODE_INDENT: code indent should use tabs where possible
#71: FILE: security/slim/slm_main.c:1608:
+                       parent_tsk->comm,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#71: FILE: security/slim/slm_main.c:1608:
+                       parent_tsk->comm,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#72: FILE: security/slim/slm_main.c:1609:
+                       parent_tsec->sac_rx,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#72: FILE: security/slim/slm_main.c:1609:
+                       parent_tsec->sac_rx,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#73: FILE: security/slim/slm_main.c:1610:
+                       (parent_tsec->sac_w != parent_tsec->sac_rx)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#73: FILE: security/slim/slm_main.c:1610:
+                       (parent_tsec->sac_w != parent_tsec->sac_rx)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#74: FILE: security/slim/slm_main.c:1611:
+                       ? "GUARD" :$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#74: FILE: security/slim/slm_main.c:1611:
+                       ? "GUARD" :$

ERROR:CODE_INDENT: code indent should use tabs where possible
#75: FILE: security/slim/slm_main.c:1612:
+                       slm_sac_str[parent_tsec->sac_rx],$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#75: FILE: security/slim/slm_main.c:1612:
+                       slm_sac_str[parent_tsec->sac_rx],$

ERROR:CODE_INDENT: code indent should use tabs where possible
#76: FILE: security/slim/slm_main.c:1613:
+                       current->pid, current->comm,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#76: FILE: security/slim/slm_main.c:1613:
+                       current->pid, current->comm,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#77: FILE: security/slim/slm_main.c:1614:
+                       cur_tsec->sac_rx,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#77: FILE: security/slim/slm_main.c:1614:
+                       cur_tsec->sac_rx,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#78: FILE: security/slim/slm_main.c:1615:
+                       (cur_tsec->sac_w != cur_tsec->sac_rx)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#78: FILE: security/slim/slm_main.c:1615:
+                       (cur_tsec->sac_w != cur_tsec->sac_rx)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#79: FILE: security/slim/slm_main.c:1616:
+                       ? "GUARD" : slm_sac_str[cur_tsec->$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#79: FILE: security/slim/slm_main.c:1616:
+                       ? "GUARD" : slm_sac_str[cur_tsec->$

ERROR:CODE_INDENT: code indent should use tabs where possible
#80: FILE: security/slim/slm_main.c:1617:
+                                         sac_rx],$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#80: FILE: security/slim/slm_main.c:1617:
+                                         sac_rx],$

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'cur_tsec->sac_rx'
#80: FILE: security/slim/slm_main.c:1617:
+                       ? "GUARD" : slm_sac_str[cur_tsec->
+                                         sac_rx],

ERROR:CODE_INDENT: code indent should use tabs where possible
#81: FILE: security/slim/slm_main.c:1618:
+                       bprm->filename, level->sac_level,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#81: FILE: security/slim/slm_main.c:1618:
+                       bprm->filename, level->sac_level,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#82: FILE: security/slim/slm_main.c:1619:
+                       slm_sac_str[level->sac_level]);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#82: FILE: security/slim/slm_main.c:1619:
+                       slm_sac_str[level->sac_level]);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#96: FILE: security/slim/slim.h:104:
+extern __init int slm_init_debugfs(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#97: FILE: security/slim/slim.h:105:
+extern __exit void slm_cleanup_debugfs(void);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#101: FILE: security/slim/slim.h:109:
+     SLM_BASE = 1,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#102: FILE: security/slim/slim.h:110:
+     SLM_INTEGRITY = 2,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#103: FILE: security/slim/slim.h:111:
+     SLM_SECRECY = 4,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#104: FILE: security/slim/slim.h:112:
+     SLM_VERBOSE = 8,$

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#108: FILE: security/slim/slim.h:116:
+#define dprintk(level, format, a...) \
+     if (slm_debug & level) \
+           printk(KERN_INFO format, ##a)

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'level' may be better as '(level)' to avoid precedence issues
#108: FILE: security/slim/slim.h:116:
+#define dprintk(level, format, a...) \
+     if (slm_debug & level) \
+           printk(KERN_INFO format, ##a)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#109: FILE: security/slim/slim.h:117:
+     if (slm_debug & level) \$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (5, 11)
#109: FILE: security/slim/slim.h:117:
+     if (slm_debug & level) \
+           printk(KERN_INFO format, ##a)

ERROR:CODE_INDENT: code indent should use tabs where possible
#110: FILE: security/slim/slim.h:118:
+           printk(KERN_INFO format, ##a)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#110: FILE: security/slim/slim.h:118:
+           printk(KERN_INFO format, ##a)$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#110: FILE: security/slim/slim.h:118:
+           printk(KERN_INFO format, ##a)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#120: FILE: security/slim/slm_secfs.c:23:
+    *slim_verbose;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#130: FILE: security/slim/slm_secfs.c:49:
+     if (inode->u.generic_ip)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (5, 11)
#130: FILE: security/slim/slm_secfs.c:49:
+     if (inode->u.generic_ip)
+           file->private_data = inode->u.generic_ip;

ERROR:CODE_INDENT: code indent should use tabs where possible
#131: FILE: security/slim/slm_secfs.c:50:
+           file->private_data = inode->u.generic_ip;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#131: FILE: security/slim/slm_secfs.c:50:
+           file->private_data = inode->u.generic_ip;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#132: FILE: security/slim/slm_secfs.c:51:
+     return 0;$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#135: FILE: security/slim/slm_secfs.c:54:
+static ssize_t slm_read_debug(struct file *file, char __user * buf,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#136: FILE: security/slim/slm_secfs.c:55:
+                       size_t buflen, loff_t * ppos)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#136: FILE: security/slim/slm_secfs.c:55:
+static ssize_t slm_read_debug(struct file *file, char __user * buf,
+                       size_t buflen, loff_t * ppos)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#136: FILE: security/slim/slm_secfs.c:55:
+                       size_t buflen, loff_t * ppos)$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#136: FILE: security/slim/slm_secfs.c:55:
+                       size_t buflen, loff_t * ppos)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#138: FILE: security/slim/slm_secfs.c:57:
+     ssize_t len = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#139: FILE: security/slim/slm_secfs.c:58:
+     enum slm_debug_level type = (enum slm_debug_level)file->private_data;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#140: FILE: security/slim/slm_secfs.c:59:
+     char *page = (char *)__get_free_page(GFP_KERNEL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#142: FILE: security/slim/slm_secfs.c:61:
+     if (!page)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (5, 11)
#142: FILE: security/slim/slm_secfs.c:61:
+     if (!page)
+           return -ENOMEM;

ERROR:CODE_INDENT: code indent should use tabs where possible
#143: FILE: security/slim/slm_secfs.c:62:
+           return -ENOMEM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#143: FILE: security/slim/slm_secfs.c:62:
+           return -ENOMEM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#145: FILE: security/slim/slm_secfs.c:64:
+     switch(type) {$

ERROR:SPACING: space required before the open parenthesis '('
#145: FILE: security/slim/slm_secfs.c:64:
+     switch(type) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#146: FILE: security/slim/slm_secfs.c:65:
+     case SLM_INTEGRITY:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#147: FILE: security/slim/slm_secfs.c:66:
+           len = sprintf(page, "slm_debug: integrity %s\n",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#147: FILE: security/slim/slm_secfs.c:66:
+           len = sprintf(page, "slm_debug: integrity %s\n",$

ERROR:CODE_INDENT: code indent should use tabs where possible
#148: FILE: security/slim/slm_secfs.c:67:
+                       ((slm_debug & SLM_INTEGRITY) == SLM_INTEGRITY)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#148: FILE: security/slim/slm_secfs.c:67:
+           len = sprintf(page, "slm_debug: integrity %s\n",
+                       ((slm_debug & SLM_INTEGRITY) == SLM_INTEGRITY)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#148: FILE: security/slim/slm_secfs.c:67:
+                       ((slm_debug & SLM_INTEGRITY) == SLM_INTEGRITY)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#149: FILE: security/slim/slm_secfs.c:68:
+                       ? "ON" : "OFF");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#149: FILE: security/slim/slm_secfs.c:68:
+                       ? "ON" : "OFF");$

ERROR:CODE_INDENT: code indent should use tabs where possible
#150: FILE: security/slim/slm_secfs.c:69:
+           break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#150: FILE: security/slim/slm_secfs.c:69:
+           break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#151: FILE: security/slim/slm_secfs.c:70:
+     case SLM_SECRECY:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#152: FILE: security/slim/slm_secfs.c:71:
+           len = sprintf(page, "slm_debug: secrecy %s\n",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#152: FILE: security/slim/slm_secfs.c:71:
+           len = sprintf(page, "slm_debug: secrecy %s\n",$

ERROR:CODE_INDENT: code indent should use tabs where possible
#153: FILE: security/slim/slm_secfs.c:72:
+                       ((slm_debug & SLM_SECRECY) == SLM_SECRECY)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#153: FILE: security/slim/slm_secfs.c:72:
+           len = sprintf(page, "slm_debug: secrecy %s\n",
+                       ((slm_debug & SLM_SECRECY) == SLM_SECRECY)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#153: FILE: security/slim/slm_secfs.c:72:
+                       ((slm_debug & SLM_SECRECY) == SLM_SECRECY)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#154: FILE: security/slim/slm_secfs.c:73:
+                       ? "ON" : "OFF");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#154: FILE: security/slim/slm_secfs.c:73:
+                       ? "ON" : "OFF");$

ERROR:CODE_INDENT: code indent should use tabs where possible
#155: FILE: security/slim/slm_secfs.c:74:
+           break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#155: FILE: security/slim/slm_secfs.c:74:
+           break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#156: FILE: security/slim/slm_secfs.c:75:
+     case SLM_VERBOSE:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#157: FILE: security/slim/slm_secfs.c:76:
+           len = sprintf(page, "evm_debug: verbose %s\n",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#157: FILE: security/slim/slm_secfs.c:76:
+           len = sprintf(page, "evm_debug: verbose %s\n",$

ERROR:CODE_INDENT: code indent should use tabs where possible
#158: FILE: security/slim/slm_secfs.c:77:
+                       ((slm_debug & SLM_VERBOSE) == SLM_VERBOSE)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#158: FILE: security/slim/slm_secfs.c:77:
+           len = sprintf(page, "evm_debug: verbose %s\n",
+                       ((slm_debug & SLM_VERBOSE) == SLM_VERBOSE)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#158: FILE: security/slim/slm_secfs.c:77:
+                       ((slm_debug & SLM_VERBOSE) == SLM_VERBOSE)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#159: FILE: security/slim/slm_secfs.c:78:
+                       ? "ON" : "OFF");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#159: FILE: security/slim/slm_secfs.c:78:
+                       ? "ON" : "OFF");$

ERROR:CODE_INDENT: code indent should use tabs where possible
#160: FILE: security/slim/slm_secfs.c:79:
+           break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#160: FILE: security/slim/slm_secfs.c:79:
+           break;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#162: FILE: security/slim/slm_secfs.c:81:
+           break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#162: FILE: security/slim/slm_secfs.c:81:
+           break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#163: FILE: security/slim/slm_secfs.c:82:
+     }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#164: FILE: security/slim/slm_secfs.c:83:
+     len = simple_read_from_buffer(buf, buflen, ppos, page, len);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#165: FILE: security/slim/slm_secfs.c:84:
+     free_page((unsigned long)page);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#166: FILE: security/slim/slm_secfs.c:85:
+     return len;$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#169: FILE: security/slim/slm_secfs.c:88:
+static ssize_t slm_write_debug(struct file *file, const char __user * buf,

ERROR:CODE_INDENT: code indent should use tabs where possible
#170: FILE: security/slim/slm_secfs.c:89:
+                        size_t buflen, loff_t * ppos)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#170: FILE: security/slim/slm_secfs.c:89:
+static ssize_t slm_write_debug(struct file *file, const char __user * buf,
+                        size_t buflen, loff_t * ppos)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#170: FILE: security/slim/slm_secfs.c:89:
+                        size_t buflen, loff_t * ppos)$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#170: FILE: security/slim/slm_secfs.c:89:
+                        size_t buflen, loff_t * ppos)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#172: FILE: security/slim/slm_secfs.c:91:
+     char flag;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#173: FILE: security/slim/slm_secfs.c:92:
+     enum slm_debug_level type = (enum slm_debug_level)file->private_data;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#175: FILE: security/slim/slm_secfs.c:94:
+     if (copy_from_user(&flag, buf, 1))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (5, 11)
#175: FILE: security/slim/slm_secfs.c:94:
+     if (copy_from_user(&flag, buf, 1))
+           return -EFAULT;

ERROR:CODE_INDENT: code indent should use tabs where possible
#176: FILE: security/slim/slm_secfs.c:95:
+           return -EFAULT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#176: FILE: security/slim/slm_secfs.c:95:
+           return -EFAULT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#178: FILE: security/slim/slm_secfs.c:97:
+     switch(type) {$

ERROR:SPACING: space required before the open parenthesis '('
#178: FILE: security/slim/slm_secfs.c:97:
+     switch(type) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#179: FILE: security/slim/slm_secfs.c:98:
+     case SLM_INTEGRITY:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#180: FILE: security/slim/slm_secfs.c:99:
+           slm_debug = (flag == '0') ? slm_debug & ~SLM_INTEGRITY :$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#180: FILE: security/slim/slm_secfs.c:99:
+           slm_debug = (flag == '0') ? slm_debug & ~SLM_INTEGRITY :$

ERROR:CODE_INDENT: code indent should use tabs where possible
#181: FILE: security/slim/slm_secfs.c:100:
+               slm_debug | SLM_INTEGRITY;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#181: FILE: security/slim/slm_secfs.c:100:
+               slm_debug | SLM_INTEGRITY;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#182: FILE: security/slim/slm_secfs.c:101:
+           break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#182: FILE: security/slim/slm_secfs.c:101:
+           break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#183: FILE: security/slim/slm_secfs.c:102:
+     case SLM_SECRECY:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#184: FILE: security/slim/slm_secfs.c:103:
+           slm_debug = (flag == '0') ? slm_debug & ~SLM_SECRECY :$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#184: FILE: security/slim/slm_secfs.c:103:
+           slm_debug = (flag == '0') ? slm_debug & ~SLM_SECRECY :$

ERROR:CODE_INDENT: code indent should use tabs where possible
#185: FILE: security/slim/slm_secfs.c:104:
+               slm_debug | SLM_SECRECY;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#185: FILE: security/slim/slm_secfs.c:104:
+               slm_debug | SLM_SECRECY;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#186: FILE: security/slim/slm_secfs.c:105:
+           break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#186: FILE: security/slim/slm_secfs.c:105:
+           break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#187: FILE: security/slim/slm_secfs.c:106:
+     case SLM_VERBOSE:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#188: FILE: security/slim/slm_secfs.c:107:
+           slm_debug = (flag == '0') ? slm_debug & ~SLM_VERBOSE :$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#188: FILE: security/slim/slm_secfs.c:107:
+           slm_debug = (flag == '0') ? slm_debug & ~SLM_VERBOSE :$

ERROR:CODE_INDENT: code indent should use tabs where possible
#189: FILE: security/slim/slm_secfs.c:108:
+               slm_debug | SLM_VERBOSE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#189: FILE: security/slim/slm_secfs.c:108:
+               slm_debug | SLM_VERBOSE;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#190: FILE: security/slim/slm_secfs.c:109:
+           break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#190: FILE: security/slim/slm_secfs.c:109:
+           break;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#192: FILE: security/slim/slm_secfs.c:111:
+           break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#192: FILE: security/slim/slm_secfs.c:111:
+           break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#193: FILE: security/slim/slm_secfs.c:112:
+     }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#194: FILE: security/slim/slm_secfs.c:113:
+     return buflen;$

WARNING:CONST_STRUCT: struct file_operations should normally be const
#201: FILE: security/slim/slm_secfs.c:120:
+static struct file_operations slm_debug_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#202: FILE: security/slim/slm_secfs.c:121:
+     .read = slm_read_debug,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#203: FILE: security/slim/slm_secfs.c:122:
+     .write = slm_write_debug,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#204: FILE: security/slim/slm_secfs.c:123:
+     .open = slm_open_debug,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#216: FILE: security/slim/slm_secfs.c:142:
+     slim_debug_dir = debugfs_create_dir("slim", NULL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#217: FILE: security/slim/slm_secfs.c:143:
+     if (!slim_debug_dir || IS_ERR(slim_debug_dir))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (5, 11)
#217: FILE: security/slim/slm_secfs.c:143:
+     if (!slim_debug_dir || IS_ERR(slim_debug_dir))
+           return -EFAULT;

ERROR:CODE_INDENT: code indent should use tabs where possible
#218: FILE: security/slim/slm_secfs.c:144:
+           return -EFAULT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#218: FILE: security/slim/slm_secfs.c:144:
+           return -EFAULT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#220: FILE: security/slim/slm_secfs.c:146:
+     slim_integrity = debugfs_create_file("integrity", S_IRUSR | S_IRGRP,$

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IRGRP' are not preferred. Consider using octal permissions '0440'.
#220: FILE: security/slim/slm_secfs.c:146:
+     slim_integrity = debugfs_create_file("integrity", S_IRUSR | S_IRGRP,

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

ERROR:CODE_INDENT: code indent should use tabs where possible
#221: FILE: security/slim/slm_secfs.c:147:
+                                  slim_debug_dir, (void *)SLM_INTEGRITY,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#221: FILE: security/slim/slm_secfs.c:147:
+     slim_integrity = debugfs_create_file("integrity", S_IRUSR | S_IRGRP,
+                                  slim_debug_dir, (void *)SLM_INTEGRITY,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#221: FILE: security/slim/slm_secfs.c:147:
+                                  slim_debug_dir, (void *)SLM_INTEGRITY,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#222: FILE: security/slim/slm_secfs.c:148:
+                                  &slm_debug_ops);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#222: FILE: security/slim/slm_secfs.c:148:
+                                  &slm_debug_ops);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#223: FILE: security/slim/slm_secfs.c:149:
+     if (!slim_integrity || IS_ERR(slim_integrity))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (5, 11)
#223: FILE: security/slim/slm_secfs.c:149:
+     if (!slim_integrity || IS_ERR(slim_integrity))
+           goto out_del_debugdir;

ERROR:CODE_INDENT: code indent should use tabs where possible
#224: FILE: security/slim/slm_secfs.c:150:
+           goto out_del_debugdir;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#224: FILE: security/slim/slm_secfs.c:150:
+           goto out_del_debugdir;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#225: FILE: security/slim/slm_secfs.c:151:
+     slim_secrecy = debugfs_create_file("secrecy", S_IRUSR | S_IRGRP,$

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IRGRP' are not preferred. Consider using octal permissions '0440'.
#225: FILE: security/slim/slm_secfs.c:151:
+     slim_secrecy = debugfs_create_file("secrecy", S_IRUSR | S_IRGRP,

ERROR:CODE_INDENT: code indent should use tabs where possible
#226: FILE: security/slim/slm_secfs.c:152:
+                                slim_debug_dir, (void *)SLM_SECRECY,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#226: FILE: security/slim/slm_secfs.c:152:
+     slim_secrecy = debugfs_create_file("secrecy", S_IRUSR | S_IRGRP,
+                                slim_debug_dir, (void *)SLM_SECRECY,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#226: FILE: security/slim/slm_secfs.c:152:
+                                slim_debug_dir, (void *)SLM_SECRECY,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#227: FILE: security/slim/slm_secfs.c:153:
+                                &slm_debug_ops);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#227: FILE: security/slim/slm_secfs.c:153:
+                                &slm_debug_ops);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#228: FILE: security/slim/slm_secfs.c:154:
+     if (!slim_secrecy || IS_ERR(slim_secrecy))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (5, 11)
#228: FILE: security/slim/slm_secfs.c:154:
+     if (!slim_secrecy || IS_ERR(slim_secrecy))
+           goto out_del_integrity;

ERROR:CODE_INDENT: code indent should use tabs where possible
#229: FILE: security/slim/slm_secfs.c:155:
+           goto out_del_integrity;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#229: FILE: security/slim/slm_secfs.c:155:
+           goto out_del_integrity;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#230: FILE: security/slim/slm_secfs.c:156:
+     slim_verbose = debugfs_create_file("verbose", S_IRUSR | S_IRGRP,$

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IRGRP' are not preferred. Consider using octal permissions '0440'.
#230: FILE: security/slim/slm_secfs.c:156:
+     slim_verbose = debugfs_create_file("verbose", S_IRUSR | S_IRGRP,

ERROR:CODE_INDENT: code indent should use tabs where possible
#231: FILE: security/slim/slm_secfs.c:157:
+                                slim_debug_dir, (void *)SLM_VERBOSE,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#231: FILE: security/slim/slm_secfs.c:157:
+     slim_verbose = debugfs_create_file("verbose", S_IRUSR | S_IRGRP,
+                                slim_debug_dir, (void *)SLM_VERBOSE,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#231: FILE: security/slim/slm_secfs.c:157:
+                                slim_debug_dir, (void *)SLM_VERBOSE,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#232: FILE: security/slim/slm_secfs.c:158:
+                                &slm_debug_ops);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#232: FILE: security/slim/slm_secfs.c:158:
+                                &slm_debug_ops);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#233: FILE: security/slim/slm_secfs.c:159:
+     if (!slim_verbose || IS_ERR(slim_verbose))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (5, 11)
#233: FILE: security/slim/slm_secfs.c:159:
+     if (!slim_verbose || IS_ERR(slim_verbose))
+           goto out_del_secrecy;

ERROR:CODE_INDENT: code indent should use tabs where possible
#234: FILE: security/slim/slm_secfs.c:160:
+           goto out_del_secrecy;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#234: FILE: security/slim/slm_secfs.c:160:
+           goto out_del_secrecy;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#235: FILE: security/slim/slm_secfs.c:161:
+     return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#238: FILE: security/slim/slm_secfs.c:164:
+     debugfs_remove(slim_secrecy);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#240: FILE: security/slim/slm_secfs.c:166:
+     debugfs_remove(slim_integrity);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#242: FILE: security/slim/slm_secfs.c:168:
+     debugfs_remove(slim_debug_dir);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#243: FILE: security/slim/slm_secfs.c:169:
+     return -EFAULT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#254: FILE: security/slim/slm_secfs.c:180:
+     debugfs_remove(slim_verbose);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#255: FILE: security/slim/slm_secfs.c:181:
+     debugfs_remove(slim_secrecy);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#256: FILE: security/slim/slm_secfs.c:182:
+     debugfs_remove(slim_integrity);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#257: FILE: security/slim/slm_secfs.c:183:
+     debugfs_remove(slim_debug_dir);$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000055083.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 74 errors, 140 warnings, 14 checks, 202 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000055083.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
