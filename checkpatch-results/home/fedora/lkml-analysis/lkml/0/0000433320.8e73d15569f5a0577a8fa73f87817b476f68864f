ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#53: FILE: kernel/sched.c:101:
=20

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#69: FILE: kernel/sched.c:114:
+	 (MAX_PRIO-1-(p)->static_prio)/(MAX_USER_PRIO - 1)))
 	          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#69: FILE: kernel/sched.c:114:
+	 (MAX_PRIO-1-(p)->static_prio)/(MAX_USER_PRIO - 1)))
 	            ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#69: FILE: kernel/sched.c:114:
+	 (MAX_PRIO-1-(p)->static_prio)/(MAX_USER_PRIO - 1)))
 	                              ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#108: FILE: kernel/sched.c:553:
 }
+/*

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#118: FILE: kernel/sched.c:561:
+	if (rq1 =3D=3D rq2)
 	        ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#118: FILE: kernel/sched.c:561:
+	if (rq1 =3D=3D rq2)
 	           ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#118: FILE: kernel/sched.c:561:
+	if (rq1 =3D=3D rq2)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#118: FILE: kernel/sched.c:561:
+	if (rq1 =3D=3D rq2)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#120: FILE: kernel/sched.c:563:
+	else {

ERROR:SPACING: spaces required around that '!=' (ctx:WxV)
#140: FILE: kernel/sched.c:583:
+	if (rq1 !=3D rq2)
 	        ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#150: FILE: kernel/sched.c:849:
+			p->time_slice =3D task_timeslice(p);
 			              ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#159: FILE: kernel/sched.c:872:
+		p->time_slice =3D task_timeslice(p);
 		              ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#168: FILE: kernel/sched.c:1084:
+#define SLEEP_ON_HEAD					\
 	spin_lock_irqsave(&q->lock,flags);		\
 	__add_wait_queue(q, &wait);			\
 	spin_unlock(&q->lock);

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#168: FILE: kernel/sched.c:1084:
+#define SLEEP_ON_HEAD					\
 	spin_lock_irqsave(&q->lock,flags);		\
 	__add_wait_queue(q, &wait);			\
 	spin_unlock(&q->lock);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#181: FILE: kernel/sched.c:1245:
+	return cpu_curr(cpu) =3D=3D cpu_rq(cpu)->idle;
 	                     ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#181: FILE: kernel/sched.c:1245:
+	return cpu_curr(cpu) =3D=3D cpu_rq(cpu)->idle;
 	                        ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000433320.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 10 errors, 1 warnings, 6 checks, 178 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000433320.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
