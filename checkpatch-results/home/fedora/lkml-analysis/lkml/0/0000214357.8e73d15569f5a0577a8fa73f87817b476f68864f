WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#60: FILE: arch/ppc/syslib/ppc_sys.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#61: FILE: arch/ppc/syslib/ppc_sys.c:2:
+ * arch/ppc/syslib/ppc_sys.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#77: FILE: arch/ppc/syslib/ppc_sys.c:18:
+int (*ppc_sys_device_fixup) (struct platform_device * pdev);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: Unnecessary space before function pointer arguments
#77: FILE: arch/ppc/syslib/ppc_sys.c:18:
+int (*ppc_sys_device_fixup) (struct platform_device * pdev);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#84: FILE: arch/ppc/syslib/ppc_sys.c:25:
+	unsigned int i = 0;
+	while (1) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:RETURN_VOID: void function return statements are not generally useful
#93: FILE: arch/ppc/syslib/ppc_sys.c:34:
+	return;
+}

WARNING:RETURN_VOID: void function return statements are not generally useful
#99: FILE: arch/ppc/syslib/ppc_sys.c:40:
+	return;
+}

WARNING:LINE_SPACING: Missing a blank line after declarations
#106: FILE: arch/ppc/syslib/ppc_sys.c:47:
+	int i;
+	for (i = 0; i < pdev->num_resources; i++) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#108: FILE: arch/ppc/syslib/ppc_sys.c:49:
+		struct resource *r = &pdev->resource[i];
+		if ((r->flags & IORESOURCE_MEM) == IORESOURCE_MEM) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cur_ppc_sys_spec"
#128: FILE: arch/ppc/syslib/ppc_sys.c:69:
+		if (cur_ppc_sys_spec == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#140: FILE: arch/ppc/syslib/ppc_sys.c:81:
+	BUG_ON(cur_ppc_sys_spec == NULL);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cur_ppc_sys_spec"
#140: FILE: arch/ppc/syslib/ppc_sys.c:81:
+	BUG_ON(cur_ppc_sys_spec == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ppc_sys_device_fixup"
#145: FILE: arch/ppc/syslib/ppc_sys.c:86:
+			if (ppc_sys_device_fixup != NULL)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '&ppc_sys_platform_devices[dev_id]'
#148: FILE: arch/ppc/syslib/ppc_sys.c:89:
+			if (platform_device_register
+			    (&ppc_sys_platform_devices[dev_id])) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#151: FILE: arch/ppc/syslib/ppc_sys.c:92:
+				printk(KERN_ERR

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#167: FILE: include/asm-ppc/ppc_sys.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#168: FILE: include/asm-ppc/ppc_sys.h:2:
+ * include/asm-ppc/ppc_sys.h

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#198: FILE: include/asm-ppc/ppc_sys.h:32:
+	 * PVR, SVR, IMMR, * etc. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#199: FILE: include/asm-ppc/ppc_sys.h:33:
+^Iu32 ^I^I^Imask;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#200: FILE: include/asm-ppc/ppc_sys.h:34:
+^Iu32 ^I^I^Ivalue;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#201: FILE: include/asm-ppc/ppc_sys.h:35:
+^Iu32 ^I^I^Inum_devices;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#202: FILE: include/asm-ppc/ppc_sys.h:36:
+^Ichar ^I^I^I*ppc_sys_name;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#203: FILE: include/asm-ppc/ppc_sys.h:37:
+^Ienum ppc_sys_devices ^I*device_list;$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#211: FILE: include/asm-ppc/ppc_sys.h:45:
+extern void identify_ppc_sys_by_id(u32 id) __init;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#212: FILE: include/asm-ppc/ppc_sys.h:46:
+extern void identify_ppc_sys_by_name(char *name) __init;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#218: FILE: include/asm-ppc/ppc_sys.h:52:
+extern int (*ppc_sys_device_fixup) (struct platform_device * pdev);

WARNING:SPACING: Unnecessary space before function pointer arguments
#218: FILE: include/asm-ppc/ppc_sys.h:52:
+extern int (*ppc_sys_device_fixup) (struct platform_device * pdev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#221: FILE: include/asm-ppc/ppc_sys.h:55:
+extern void ppc_sys_fixup_mem_resource(struct platform_device *pdev,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#225: FILE: include/asm-ppc/ppc_sys.h:59:
+extern void *ppc_sys_get_pdata(enum ppc_sys_devices dev) __init;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#228: FILE: include/asm-ppc/ppc_sys.h:62:
+extern void ppc_sys_device_remove(enum ppc_sys_devices dev);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#236: FILE: include/linux/fsl_devices.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#237: FILE: include/linux/fsl_devices.h:2:
+ * include/linux/fsl_devices.h

CHECK:CAMELCASE: Avoid CamelCase: <interruptPHY>
#290: FILE: include/linux/fsl_devices.h:55:
+	u32 interruptPHY;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000214357.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 2 errors, 21 warnings, 10 checks, 255 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000214357.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
