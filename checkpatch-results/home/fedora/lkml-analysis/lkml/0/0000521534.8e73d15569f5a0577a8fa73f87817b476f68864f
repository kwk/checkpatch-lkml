WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#83: 
==============================================================================

ERROR:TRAILING_WHITESPACE: trailing whitespace
#203: FILE: arch/i386/kernel/entry.S:378:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#235: FILE: arch/i386/kernel/entry.S:410:
+^I$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#278: FILE: arch/i386/kernel/i386-stub.c:1:
+/****************************************************************************

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#279: FILE: arch/i386/kernel/i386-stub.c:2:
+/****************************************************************************
+

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:TYPO_SPELLING: 'possibily' may be misspelled - perhaps 'possibly'?
#316: FILE: arch/i386/kernel/i386-stub.c:39:
+ *  under test should boot the same version of the kernel (possibily
                                                            ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:CAMELCASE: Avoid CamelCase: <putDebugChar>
#438: FILE: arch/i386/kernel/i386-stub.c:161:
+extern void putDebugChar(char);	/* write a single character      */

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <getDebugChar>
#439: FILE: arch/i386/kernel/i386-stub.c:162:
+extern char getDebugChar(void);	/* read and return a single char */

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#439: FILE: arch/i386/kernel/i386-stub.c:162:
+extern char getDebugChar(void);	/* read and return a single char */

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#440: FILE: arch/i386/kernel/i386-stub.c:163:
+extern void kgdb_interruptible(int); /* true if recv data triggers breakpt */

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#440: FILE: arch/i386/kernel/i386-stub.c:163:
+extern void kgdb_interruptible(int); /* true if recv data triggers breakpt */

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#447: FILE: arch/i386/kernel/i386-stub.c:170:
+char kgdb_initialized = 0;	/* TRUE = we've been initialized */

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#448: FILE: arch/i386/kernel/i386-stub.c:171:
+int kgdb_active = 0;		/* TRUE = we're in the exception handler */

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#449: FILE: arch/i386/kernel/i386-stub.c:172:
+int kgdb_stepping = 0;		/* TRUE = we're single-stepping the kernel*/

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#451: FILE: arch/i386/kernel/i386-stub.c:174:
+static const char hexchars[]="0123456789abcdef";
                             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#473: FILE: arch/i386/kernel/i386-stub.c:196:
+  if ((ch >= 'a') && (ch <= 'f')) return (ch-'a'+10);$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#473: FILE: arch/i386/kernel/i386-stub.c:196:
+  if ((ch >= 'a') && (ch <= 'f')) return (ch-'a'+10);
                                             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#473: FILE: arch/i386/kernel/i386-stub.c:196:
+  if ((ch >= 'a') && (ch <= 'f')) return (ch-'a'+10);
                                                 ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#473: FILE: arch/i386/kernel/i386-stub.c:196:
+  if ((ch >= 'a') && (ch <= 'f')) return (ch-'a'+10);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#474: FILE: arch/i386/kernel/i386-stub.c:197:
+  if ((ch >= '0') && (ch <= '9')) return (ch-'0');$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#474: FILE: arch/i386/kernel/i386-stub.c:197:
+  if ((ch >= '0') && (ch <= '9')) return (ch-'0');
                                             ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#474: FILE: arch/i386/kernel/i386-stub.c:197:
+  if ((ch >= '0') && (ch <= '9')) return (ch-'0');

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#475: FILE: arch/i386/kernel/i386-stub.c:198:
+  if ((ch >= 'A') && (ch <= 'F')) return (ch-'A'+10);$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#475: FILE: arch/i386/kernel/i386-stub.c:198:
+  if ((ch >= 'A') && (ch <= 'F')) return (ch-'A'+10);
                                             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#475: FILE: arch/i386/kernel/i386-stub.c:198:
+  if ((ch >= 'A') && (ch <= 'F')) return (ch-'A'+10);
                                                 ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#475: FILE: arch/i386/kernel/i386-stub.c:198:
+  if ((ch >= 'A') && (ch <= 'F')) return (ch-'A'+10);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#476: FILE: arch/i386/kernel/i386-stub.c:199:
+  return (-1);$

CHECK:CAMELCASE: Avoid CamelCase: <remcomInBuffer>
#479: FILE: arch/i386/kernel/i386-stub.c:202:
+static char remcomInBuffer[BUFMAX];

CHECK:CAMELCASE: Avoid CamelCase: <remcomOutBuffer>
#480: FILE: arch/i386/kernel/i386-stub.c:203:
+static char remcomOutBuffer[BUFMAX];

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#485: FILE: arch/i386/kernel/i386-stub.c:208:
+getpacket (void)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#487: FILE: arch/i386/kernel/i386-stub.c:210:
+  unsigned char *buffer = &remcomInBuffer[0];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#488: FILE: arch/i386/kernel/i386-stub.c:211:
+  unsigned char checksum;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#489: FILE: arch/i386/kernel/i386-stub.c:212:
+  unsigned char xmitcsum;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#490: FILE: arch/i386/kernel/i386-stub.c:213:
+  int count;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#491: FILE: arch/i386/kernel/i386-stub.c:214:
+  char ch;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#493: FILE: arch/i386/kernel/i386-stub.c:216:
+  while (1)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#493: FILE: arch/i386/kernel/i386-stub.c:216:
+  while (1)
+    {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#493: FILE: arch/i386/kernel/i386-stub.c:216:
+  while (1)
[...]
+      /* wait around for the start character, ignore all other characters */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#494: FILE: arch/i386/kernel/i386-stub.c:217:
+    {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#496: FILE: arch/i386/kernel/i386-stub.c:219:
+      while ((ch = getDebugChar ()) != '$')$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#496: FILE: arch/i386/kernel/i386-stub.c:219:
+      while ((ch = getDebugChar ()) != '$')

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#500: FILE: arch/i386/kernel/i386-stub.c:223:
+      checksum = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#501: FILE: arch/i386/kernel/i386-stub.c:224:
+      xmitcsum = -1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#502: FILE: arch/i386/kernel/i386-stub.c:225:
+      count = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#505: FILE: arch/i386/kernel/i386-stub.c:228:
+      while (count < BUFMAX)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#505: FILE: arch/i386/kernel/i386-stub.c:228:
+      while (count < BUFMAX)
+	{

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (6, 10)
#505: FILE: arch/i386/kernel/i386-stub.c:228:
+      while (count < BUFMAX)
+	{

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#507: FILE: arch/i386/kernel/i386-stub.c:230:
+	  ch = getDebugChar ();

ERROR:CODE_INDENT: code indent should use tabs where possible
#508: FILE: arch/i386/kernel/i386-stub.c:231:
+          if (ch == '$')$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#508: FILE: arch/i386/kernel/i386-stub.c:231:
+          if (ch == '$')$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 12)
#508: FILE: arch/i386/kernel/i386-stub.c:231:
+          if (ch == '$')
+	    goto retry;

WARNING:TABSTOP: Statements should start on a tabstop
#509: FILE: arch/i386/kernel/i386-stub.c:232:
+	    goto retry;

WARNING:TABSTOP: Statements should start on a tabstop
#510: FILE: arch/i386/kernel/i386-stub.c:233:
+	  if (ch == '#')

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 12)
#510: FILE: arch/i386/kernel/i386-stub.c:233:
+	  if (ch == '#')
+	    break;

WARNING:TABSTOP: Statements should start on a tabstop
#511: FILE: arch/i386/kernel/i386-stub.c:234:
+	    break;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#516: FILE: arch/i386/kernel/i386-stub.c:239:
+      buffer[count] = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#518: FILE: arch/i386/kernel/i386-stub.c:241:
+      if (ch == '#')$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#518: FILE: arch/i386/kernel/i386-stub.c:241:
+      if (ch == '#')
+	{

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (6, 10)
#518: FILE: arch/i386/kernel/i386-stub.c:241:
+      if (ch == '#')
+	{

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#520: FILE: arch/i386/kernel/i386-stub.c:243:
+	  ch = getDebugChar ();

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#521: FILE: arch/i386/kernel/i386-stub.c:244:
+	  xmitcsum = hex (ch) << 4;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#522: FILE: arch/i386/kernel/i386-stub.c:245:
+	  ch = getDebugChar ();

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#523: FILE: arch/i386/kernel/i386-stub.c:246:
+	  xmitcsum += hex (ch);

WARNING:TABSTOP: Statements should start on a tabstop
#525: FILE: arch/i386/kernel/i386-stub.c:248:
+	  if (checksum != xmitcsum)

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#525: FILE: arch/i386/kernel/i386-stub.c:248:
+	  if (checksum != xmitcsum)
+	    {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 14)
#525: FILE: arch/i386/kernel/i386-stub.c:248:
+	  if (checksum != xmitcsum)
+	    {

WARNING:TABSTOP: Statements should start on a tabstop
#526: FILE: arch/i386/kernel/i386-stub.c:249:
+	    {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#527: FILE: arch/i386/kernel/i386-stub.c:250:
+	      putDebugChar ('-');	/* failed checksum */

WARNING:TABSTOP: Statements should start on a tabstop
#528: FILE: arch/i386/kernel/i386-stub.c:251:
+	    }

WARNING:TABSTOP: Statements should start on a tabstop
#529: FILE: arch/i386/kernel/i386-stub.c:252:
+	  else

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#529: FILE: arch/i386/kernel/i386-stub.c:252:
+	  else
+	    {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 14)
#529: FILE: arch/i386/kernel/i386-stub.c:252:
+	  else
+	    {

WARNING:TABSTOP: Statements should start on a tabstop
#530: FILE: arch/i386/kernel/i386-stub.c:253:
+	    {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#531: FILE: arch/i386/kernel/i386-stub.c:254:
+	      putDebugChar ('+');	/* successful transfer */

WARNING:TABSTOP: Statements should start on a tabstop
#534: FILE: arch/i386/kernel/i386-stub.c:257:
+	      if (buffer[2] == ':')

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#534: FILE: arch/i386/kernel/i386-stub.c:257:
+	      if (buffer[2] == ':')
+		{

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (14, 18)
#534: FILE: arch/i386/kernel/i386-stub.c:257:
+	      if (buffer[2] == ':')
+		{

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#536: FILE: arch/i386/kernel/i386-stub.c:259:
+		  putDebugChar (buffer[0]);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#537: FILE: arch/i386/kernel/i386-stub.c:260:
+		  putDebugChar (buffer[1]);

WARNING:TABSTOP: Statements should start on a tabstop
#539: FILE: arch/i386/kernel/i386-stub.c:262:
+		  return &buffer[3];

WARNING:TABSTOP: Statements should start on a tabstop
#542: FILE: arch/i386/kernel/i386-stub.c:265:
+	      return &buffer[0];

WARNING:TABSTOP: Statements should start on a tabstop
#543: FILE: arch/i386/kernel/i386-stub.c:266:
+	    }

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#545: FILE: arch/i386/kernel/i386-stub.c:268:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#552: FILE: arch/i386/kernel/i386-stub.c:275:
+  unsigned char checksum;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#553: FILE: arch/i386/kernel/i386-stub.c:276:
+  int  count;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#554: FILE: arch/i386/kernel/i386-stub.c:277:
+  char ch;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#557: FILE: arch/i386/kernel/i386-stub.c:280:
+  do {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 2)
#557: FILE: arch/i386/kernel/i386-stub.c:280:
+  do {
+  putDebugChar('$');

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#558: FILE: arch/i386/kernel/i386-stub.c:281:
+  putDebugChar('$');$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#559: FILE: arch/i386/kernel/i386-stub.c:282:
+  checksum = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#560: FILE: arch/i386/kernel/i386-stub.c:283:
+  count    = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#562: FILE: arch/i386/kernel/i386-stub.c:285:
+  while ((ch=buffer[count])) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#562: FILE: arch/i386/kernel/i386-stub.c:285:
+  while ((ch=buffer[count])) {
+    putDebugChar(ch);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#562: FILE: arch/i386/kernel/i386-stub.c:285:
+  while ((ch=buffer[count])) {
             ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#563: FILE: arch/i386/kernel/i386-stub.c:286:
+    putDebugChar(ch);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#564: FILE: arch/i386/kernel/i386-stub.c:287:
+    checksum += ch;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#565: FILE: arch/i386/kernel/i386-stub.c:288:
+    count += 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#566: FILE: arch/i386/kernel/i386-stub.c:289:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#568: FILE: arch/i386/kernel/i386-stub.c:291:
+  putDebugChar('#');$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#569: FILE: arch/i386/kernel/i386-stub.c:292:
+  putDebugChar(hexchars[checksum >> 4]);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#570: FILE: arch/i386/kernel/i386-stub.c:293:
+  putDebugChar(hexchars[checksum % 16]);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#572: FILE: arch/i386/kernel/i386-stub.c:295:
+  } while (getDebugChar() != '+');$

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#574: FILE: arch/i386/kernel/i386-stub.c:297:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#594: FILE: arch/i386/kernel/i386-stub.c:317:
+static volatile int mem_err = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#594: FILE: arch/i386/kernel/i386-stub.c:317:
+static volatile int mem_err = 0;

ERROR:CODE_INDENT: code indent should use tabs where possible
#601: FILE: arch/i386/kernel/i386-stub.c:324:
+                : "=a" (val) : "r" (addr));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#601: FILE: arch/i386/kernel/i386-stub.c:324:
+                : "=a" (val) : "r" (addr));$

ERROR:CODE_INDENT: code indent should use tabs where possible
#609: FILE: arch/i386/kernel/i386-stub.c:332:
+                : : "a" (val), "r" (addr));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#609: FILE: arch/i386/kernel/i386-stub.c:332:
+                : : "a" (val), "r" (addr));$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#624: FILE: arch/i386/kernel/i386-stub.c:347:
+/* If MAY_FAULT is non-zero, then we should set mem_err in response to
+   a fault; if zero treat a fault like any other fault in the stub.  */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#624: FILE: arch/i386/kernel/i386-stub.c:347:
+   a fault; if zero treat a fault like any other fault in the stub.  */

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#625: FILE: arch/i386/kernel/i386-stub.c:348:
+char* mem2hex(char *mem, char *buf, int count, int may_fault)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#627: FILE: arch/i386/kernel/i386-stub.c:350:
+      int i;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#628: FILE: arch/i386/kernel/i386-stub.c:351:
+      unsigned char ch;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#630: FILE: arch/i386/kernel/i386-stub.c:353:
+      for (i=0;i<count;i++) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (6, 10)
#630: FILE: arch/i386/kernel/i386-stub.c:353:
+      for (i=0;i<count;i++) {
+          ch = get_char (mem++);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#630: FILE: arch/i386/kernel/i386-stub.c:353:
+      for (i=0;i<count;i++) {
             ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#630: FILE: arch/i386/kernel/i386-stub.c:353:
+      for (i=0;i<count;i++) {
               ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#630: FILE: arch/i386/kernel/i386-stub.c:353:
+      for (i=0;i<count;i++) {
                 ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#630: FILE: arch/i386/kernel/i386-stub.c:353:
+      for (i=0;i<count;i++) {
                       ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#631: FILE: arch/i386/kernel/i386-stub.c:354:
+          ch = get_char (mem++);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#631: FILE: arch/i386/kernel/i386-stub.c:354:
+          ch = get_char (mem++);$

WARNING:TABSTOP: Statements should start on a tabstop
#632: FILE: arch/i386/kernel/i386-stub.c:355:
+	  if (may_fault && mem_err)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 12)
#632: FILE: arch/i386/kernel/i386-stub.c:355:
+	  if (may_fault && mem_err)
+	    return (buf);

WARNING:TABSTOP: Statements should start on a tabstop
#633: FILE: arch/i386/kernel/i386-stub.c:356:
+	    return (buf);

ERROR:CODE_INDENT: code indent should use tabs where possible
#634: FILE: arch/i386/kernel/i386-stub.c:357:
+          *buf++ = hexchars[ch >> 4];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#634: FILE: arch/i386/kernel/i386-stub.c:357:
+          *buf++ = hexchars[ch >> 4];$

ERROR:CODE_INDENT: code indent should use tabs where possible
#635: FILE: arch/i386/kernel/i386-stub.c:358:
+          *buf++ = hexchars[ch % 16];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#635: FILE: arch/i386/kernel/i386-stub.c:358:
+          *buf++ = hexchars[ch % 16];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#636: FILE: arch/i386/kernel/i386-stub.c:359:
+      }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#637: FILE: arch/i386/kernel/i386-stub.c:360:
+      *buf = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#638: FILE: arch/i386/kernel/i386-stub.c:361:
+      return(buf);$

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#638: FILE: arch/i386/kernel/i386-stub.c:361:
+      return(buf);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#643: FILE: arch/i386/kernel/i386-stub.c:366:
+char* hex2mem(char *buf, char *mem, int count, int may_fault)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#645: FILE: arch/i386/kernel/i386-stub.c:368:
+      int i;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#646: FILE: arch/i386/kernel/i386-stub.c:369:
+      unsigned char ch;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#648: FILE: arch/i386/kernel/i386-stub.c:371:
+      for (i=0;i<count;i++) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (6, 10)
#648: FILE: arch/i386/kernel/i386-stub.c:371:
+      for (i=0;i<count;i++) {
+          ch = hex(*buf++) << 4;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#648: FILE: arch/i386/kernel/i386-stub.c:371:
+      for (i=0;i<count;i++) {
             ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#648: FILE: arch/i386/kernel/i386-stub.c:371:
+      for (i=0;i<count;i++) {
               ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#648: FILE: arch/i386/kernel/i386-stub.c:371:
+      for (i=0;i<count;i++) {
                 ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#648: FILE: arch/i386/kernel/i386-stub.c:371:
+      for (i=0;i<count;i++) {
                       ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#649: FILE: arch/i386/kernel/i386-stub.c:372:
+          ch = hex(*buf++) << 4;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#649: FILE: arch/i386/kernel/i386-stub.c:372:
+          ch = hex(*buf++) << 4;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#650: FILE: arch/i386/kernel/i386-stub.c:373:
+          ch = ch + hex(*buf++);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#650: FILE: arch/i386/kernel/i386-stub.c:373:
+          ch = ch + hex(*buf++);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#651: FILE: arch/i386/kernel/i386-stub.c:374:
+          set_char (mem++, ch);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#651: FILE: arch/i386/kernel/i386-stub.c:374:
+          set_char (mem++, ch);$

WARNING:TABSTOP: Statements should start on a tabstop
#652: FILE: arch/i386/kernel/i386-stub.c:375:
+	  if (may_fault && mem_err)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 12)
#652: FILE: arch/i386/kernel/i386-stub.c:375:
+	  if (may_fault && mem_err)
+	    return (mem);

WARNING:TABSTOP: Statements should start on a tabstop
#653: FILE: arch/i386/kernel/i386-stub.c:376:
+	    return (mem);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#654: FILE: arch/i386/kernel/i386-stub.c:377:
+      }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#655: FILE: arch/i386/kernel/i386-stub.c:378:
+      return(mem);$

CHECK:CAMELCASE: Avoid CamelCase: <hexToInt>
#662: FILE: arch/i386/kernel/i386-stub.c:385:
+int hexToInt(char **ptr, int *intValue)

CHECK:CAMELCASE: Avoid CamelCase: <intValue>
#662: FILE: arch/i386/kernel/i386-stub.c:385:
+int hexToInt(char **ptr, int *intValue)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#664: FILE: arch/i386/kernel/i386-stub.c:387:
+    int numChars = 0;$

CHECK:CAMELCASE: Avoid CamelCase: <numChars>
#664: FILE: arch/i386/kernel/i386-stub.c:387:
+    int numChars = 0;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#665: FILE: arch/i386/kernel/i386-stub.c:388:
+    int hexValue;$

CHECK:CAMELCASE: Avoid CamelCase: <hexValue>
#665: FILE: arch/i386/kernel/i386-stub.c:388:
+    int hexValue;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#667: FILE: arch/i386/kernel/i386-stub.c:390:
+    *intValue = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#669: FILE: arch/i386/kernel/i386-stub.c:392:
+    while (**ptr)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#669: FILE: arch/i386/kernel/i386-stub.c:392:
+    while (**ptr)
+    {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#670: FILE: arch/i386/kernel/i386-stub.c:393:
+    {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#671: FILE: arch/i386/kernel/i386-stub.c:394:
+        hexValue = hex(**ptr);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#671: FILE: arch/i386/kernel/i386-stub.c:394:
+        hexValue = hex(**ptr);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#672: FILE: arch/i386/kernel/i386-stub.c:395:
+        if (hexValue >=0)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#672: FILE: arch/i386/kernel/i386-stub.c:395:
+        if (hexValue >=0)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#672: FILE: arch/i386/kernel/i386-stub.c:395:
+        if (hexValue >=0)
+        {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#672: FILE: arch/i386/kernel/i386-stub.c:395:
+        if (hexValue >=0)
+        {

ERROR:SPACING: spaces required around that '>=' (ctx:WxV)
#672: FILE: arch/i386/kernel/i386-stub.c:395:
+        if (hexValue >=0)
                      ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#673: FILE: arch/i386/kernel/i386-stub.c:396:
+        {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#673: FILE: arch/i386/kernel/i386-stub.c:396:
+        {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#674: FILE: arch/i386/kernel/i386-stub.c:397:
+            *intValue = (*intValue <<4) | hexValue;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#674: FILE: arch/i386/kernel/i386-stub.c:397:
+            *intValue = (*intValue <<4) | hexValue;$

CHECK:SPACING: spaces preferred around that '<<' (ctx:WxV)
#674: FILE: arch/i386/kernel/i386-stub.c:397:
+            *intValue = (*intValue <<4) | hexValue;
                                    ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#675: FILE: arch/i386/kernel/i386-stub.c:398:
+            numChars ++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#675: FILE: arch/i386/kernel/i386-stub.c:398:
+            numChars ++;$

ERROR:SPACING: space prohibited before that '++' (ctx:WxO)
#675: FILE: arch/i386/kernel/i386-stub.c:398:
+            numChars ++;
                      ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#676: FILE: arch/i386/kernel/i386-stub.c:399:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#676: FILE: arch/i386/kernel/i386-stub.c:399:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#677: FILE: arch/i386/kernel/i386-stub.c:400:
+        else$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#677: FILE: arch/i386/kernel/i386-stub.c:400:
+        else$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#677: FILE: arch/i386/kernel/i386-stub.c:400:
+        else
+            break;

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#677: FILE: arch/i386/kernel/i386-stub.c:400:
+        }
+        else

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#678: FILE: arch/i386/kernel/i386-stub.c:401:
+            break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#678: FILE: arch/i386/kernel/i386-stub.c:401:
+            break;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#680: FILE: arch/i386/kernel/i386-stub.c:403:
+        (*ptr)++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#680: FILE: arch/i386/kernel/i386-stub.c:403:
+        (*ptr)++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#681: FILE: arch/i386/kernel/i386-stub.c:404:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#683: FILE: arch/i386/kernel/i386-stub.c:406:
+    return (numChars);$

WARNING:TYPO_SPELLING: 'procesing' may be misspelled - perhaps 'processing'?
#687: FILE: arch/i386/kernel/i386-stub.c:410:
+ * This function does all command procesing for interfacing to gdb.
                                   ^^^^^^^^^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#692: FILE: arch/i386/kernel/i386-stub.c:415:
+  int    addr, length;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#693: FILE: arch/i386/kernel/i386-stub.c:416:
+  char * ptr;$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#693: FILE: arch/i386/kernel/i386-stub.c:416:
+  char * ptr;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#694: FILE: arch/i386/kernel/i386-stub.c:417:
+  int    newPC;$

CHECK:CAMELCASE: Avoid CamelCase: <newPC>
#694: FILE: arch/i386/kernel/i386-stub.c:417:
+  int    newPC;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#696: FILE: arch/i386/kernel/i386-stub.c:419:
+  if (kgdb_active) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 10)
#696: FILE: arch/i386/kernel/i386-stub.c:419:
+  if (kgdb_active) {
+	  printk("interrupt while in kgdb, returning\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#697: FILE: arch/i386/kernel/i386-stub.c:420:
+	  printk("interrupt while in kgdb, returning\n");

WARNING:TABSTOP: Statements should start on a tabstop
#698: FILE: arch/i386/kernel/i386-stub.c:421:
+	  return;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#699: FILE: arch/i386/kernel/i386-stub.c:422:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#700: FILE: arch/i386/kernel/i386-stub.c:423:
+  kgdb_active = 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#702: FILE: arch/i386/kernel/i386-stub.c:425:
+  kgdb_interruptible(0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#703: FILE: arch/i386/kernel/i386-stub.c:426:
+  set_intr_gate(14,&debugger_fault);$

ERROR:SPACING: space required after that ',' (ctx:VxO)
#703: FILE: arch/i386/kernel/i386-stub.c:426:
+  set_intr_gate(14,&debugger_fault);
                   ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#703: FILE: arch/i386/kernel/i386-stub.c:426:
+  set_intr_gate(14,&debugger_fault);
                    ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#706: FILE: arch/i386/kernel/i386-stub.c:429:
+  registers[GDB_EAX] = regs->eax;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#707: FILE: arch/i386/kernel/i386-stub.c:430:
+  registers[GDB_EBX] = regs->ebx;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#708: FILE: arch/i386/kernel/i386-stub.c:431:
+  registers[GDB_ECX] = regs->ecx;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#709: FILE: arch/i386/kernel/i386-stub.c:432:
+  registers[GDB_EDX] = regs->edx;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#710: FILE: arch/i386/kernel/i386-stub.c:433:
+  registers[GDB_EBP] = regs->ebp;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#711: FILE: arch/i386/kernel/i386-stub.c:434:
+  registers[GDB_ESI] = regs->esi;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#712: FILE: arch/i386/kernel/i386-stub.c:435:
+  registers[GDB_EDI] = regs->edi;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#713: FILE: arch/i386/kernel/i386-stub.c:436:
+  registers[GDB_PC]  = regs->eip;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#714: FILE: arch/i386/kernel/i386-stub.c:437:
+  registers[GDB_PS]  = regs->eflags;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#715: FILE: arch/i386/kernel/i386-stub.c:438:
+  registers[GDB_CS]  = regs->xcs;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#716: FILE: arch/i386/kernel/i386-stub.c:439:
+  registers[GDB_DS]  = regs->xds;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#717: FILE: arch/i386/kernel/i386-stub.c:440:
+  registers[GDB_ES]  = regs->xes;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#720: FILE: arch/i386/kernel/i386-stub.c:443:
+  registers[GDB_FS]  = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#721: FILE: arch/i386/kernel/i386-stub.c:444:
+  registers[GDB_GS]  = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#732: FILE: arch/i386/kernel/i386-stub.c:455:
+  registers[GDB_ESP] = (int)regs + sizeof(struct pt_regs) - 8;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#733: FILE: arch/i386/kernel/i386-stub.c:456:
+  registers[GDB_SS]  = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#736: FILE: arch/i386/kernel/i386-stub.c:459:
+  remcomOutBuffer[0] = 'S';$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#737: FILE: arch/i386/kernel/i386-stub.c:460:
+  remcomOutBuffer[1] =  hexchars[sigval >> 4];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#738: FILE: arch/i386/kernel/i386-stub.c:461:
+  remcomOutBuffer[2] =  hexchars[sigval % 16];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#739: FILE: arch/i386/kernel/i386-stub.c:462:
+  remcomOutBuffer[3] = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#741: FILE: arch/i386/kernel/i386-stub.c:464:
+  putpacket(remcomOutBuffer);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#743: FILE: arch/i386/kernel/i386-stub.c:466:
+  kgdb_stepping = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#745: FILE: arch/i386/kernel/i386-stub.c:468:
+  while (1==1) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#745: FILE: arch/i386/kernel/i386-stub.c:468:
+  while (1==1) {
+    remcomOutBuffer[0] = 0;

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#745: FILE: arch/i386/kernel/i386-stub.c:468:
+  while (1==1) {
           ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#746: FILE: arch/i386/kernel/i386-stub.c:469:
+    remcomOutBuffer[0] = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#747: FILE: arch/i386/kernel/i386-stub.c:470:
+    ptr = getpacket();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#749: FILE: arch/i386/kernel/i386-stub.c:472:
+    switch (*ptr++) {$

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#749: FILE: arch/i386/kernel/i386-stub.c:472:
+    switch (*ptr++) {
+      case '?' :   remcomOutBuffer[0] = 'S';
[...]
+      case 'd' : /* toggle debug flag */
[...]
+      case 'g' : /* return the value of the CPU registers */
[...]
+      case 'G' : /* set the value of the CPU registers - return OK */
[...]
+      case 'P' : /* set the value of a single CPU register - return OK */
[...]
+      case 'm' :
[...]
+      case 'M' :
[...]
+     case 's' :
[...]
+     case 'c' :
[...]
+      case 'k' :

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#750: FILE: arch/i386/kernel/i386-stub.c:473:
+      case '?' :   remcomOutBuffer[0] = 'S';$

ERROR:SPACING: space prohibited before that ':' (ctx:WxW)
#750: FILE: arch/i386/kernel/i386-stub.c:473:
+      case '?' :   remcomOutBuffer[0] = 'S';
                ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#750: FILE: arch/i386/kernel/i386-stub.c:473:
+      case '?' :   remcomOutBuffer[0] = 'S';

ERROR:CODE_INDENT: code indent should use tabs where possible
#751: FILE: arch/i386/kernel/i386-stub.c:474:
+                   remcomOutBuffer[1] =  hexchars[sigval >> 4];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#751: FILE: arch/i386/kernel/i386-stub.c:474:
+                   remcomOutBuffer[1] =  hexchars[sigval >> 4];$

ERROR:CODE_INDENT: code indent should use tabs where possible
#752: FILE: arch/i386/kernel/i386-stub.c:475:
+                   remcomOutBuffer[2] =  hexchars[sigval % 16];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#752: FILE: arch/i386/kernel/i386-stub.c:475:
+                   remcomOutBuffer[2] =  hexchars[sigval % 16];$

ERROR:CODE_INDENT: code indent should use tabs where possible
#753: FILE: arch/i386/kernel/i386-stub.c:476:
+                   remcomOutBuffer[3] = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#753: FILE: arch/i386/kernel/i386-stub.c:476:
+                   remcomOutBuffer[3] = 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#754: FILE: arch/i386/kernel/i386-stub.c:477:
+                 break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#754: FILE: arch/i386/kernel/i386-stub.c:477:
+                 break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#755: FILE: arch/i386/kernel/i386-stub.c:478:
+      case 'd' : /* toggle debug flag */$

ERROR:SPACING: space prohibited before that ':' (ctx:WxW)
#755: FILE: arch/i386/kernel/i386-stub.c:478:
+      case 'd' : /* toggle debug flag */
                ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#756: FILE: arch/i386/kernel/i386-stub.c:479:
+                 break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#756: FILE: arch/i386/kernel/i386-stub.c:479:
+                 break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#757: FILE: arch/i386/kernel/i386-stub.c:480:
+      case 'g' : /* return the value of the CPU registers */$

ERROR:SPACING: space prohibited before that ':' (ctx:WxW)
#757: FILE: arch/i386/kernel/i386-stub.c:480:
+      case 'g' : /* return the value of the CPU registers */
                ^

CHECK:SPACING: No space is necessary after a cast
#758: FILE: arch/i386/kernel/i386-stub.c:481:
+	      mem2hex((char*) registers, remcomOutBuffer, NUMREGBYTES, 0);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#758: FILE: arch/i386/kernel/i386-stub.c:481:
+	      mem2hex((char*) registers, remcomOutBuffer, NUMREGBYTES, 0);

WARNING:TABSTOP: Statements should start on a tabstop
#759: FILE: arch/i386/kernel/i386-stub.c:482:
+	      break;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#760: FILE: arch/i386/kernel/i386-stub.c:483:
+      case 'G' : /* set the value of the CPU registers - return OK */$

ERROR:SPACING: space prohibited before that ':' (ctx:WxW)
#760: FILE: arch/i386/kernel/i386-stub.c:483:
+      case 'G' : /* set the value of the CPU registers - return OK */
                ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#761: FILE: arch/i386/kernel/i386-stub.c:484:
+                hex2mem(ptr, (char*) registers, NUMREGBYTES, 0);$

CHECK:SPACING: No space is necessary after a cast
#761: FILE: arch/i386/kernel/i386-stub.c:484:
+                hex2mem(ptr, (char*) registers, NUMREGBYTES, 0);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#761: FILE: arch/i386/kernel/i386-stub.c:484:
+                hex2mem(ptr, (char*) registers, NUMREGBYTES, 0);$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#761: FILE: arch/i386/kernel/i386-stub.c:484:
+                hex2mem(ptr, (char*) registers, NUMREGBYTES, 0);

ERROR:CODE_INDENT: code indent should use tabs where possible
#762: FILE: arch/i386/kernel/i386-stub.c:485:
+                strcpy(remcomOutBuffer,"OK");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#762: FILE: arch/i386/kernel/i386-stub.c:485:
+                strcpy(remcomOutBuffer,"OK");$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#762: FILE: arch/i386/kernel/i386-stub.c:485:
+                strcpy(remcomOutBuffer,"OK");
                                       ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#763: FILE: arch/i386/kernel/i386-stub.c:486:
+                break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#763: FILE: arch/i386/kernel/i386-stub.c:486:
+                break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#764: FILE: arch/i386/kernel/i386-stub.c:487:
+      case 'P' : /* set the value of a single CPU register - return OK */$

ERROR:SPACING: space prohibited before that ':' (ctx:WxW)
#764: FILE: arch/i386/kernel/i386-stub.c:487:
+      case 'P' : /* set the value of a single CPU register - return OK */
                ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#765: FILE: arch/i386/kernel/i386-stub.c:488:
+                {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#765: FILE: arch/i386/kernel/i386-stub.c:488:
+                {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#766: FILE: arch/i386/kernel/i386-stub.c:489:
+                  int regno;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#766: FILE: arch/i386/kernel/i386-stub.c:489:
+                  int regno;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#768: FILE: arch/i386/kernel/i386-stub.c:491:
+                  if (hexToInt (&ptr, &regno) && *ptr++ == '=') $

ERROR:CODE_INDENT: code indent should use tabs where possible
#768: FILE: arch/i386/kernel/i386-stub.c:491:
+                  if (hexToInt (&ptr, &regno) && *ptr++ == '=') $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#768: FILE: arch/i386/kernel/i386-stub.c:491:
+                  if (hexToInt (&ptr, &regno) && *ptr++ == '=') $

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (18, 18)
#768: FILE: arch/i386/kernel/i386-stub.c:491:
+                  if (hexToInt (&ptr, &regno) && *ptr++ == '=') 
+                  if (regno >= 0 && regno < NUMREGS)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#768: FILE: arch/i386/kernel/i386-stub.c:491:
+                  if (hexToInt (&ptr, &regno) && *ptr++ == '=') 

ERROR:CODE_INDENT: code indent should use tabs where possible
#769: FILE: arch/i386/kernel/i386-stub.c:492:
+                  if (regno >= 0 && regno < NUMREGS)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#769: FILE: arch/i386/kernel/i386-stub.c:492:
+                  if (regno >= 0 && regno < NUMREGS)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#769: FILE: arch/i386/kernel/i386-stub.c:492:
+                  if (regno >= 0 && regno < NUMREGS)
+                    {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (18, 22)
#769: FILE: arch/i386/kernel/i386-stub.c:492:
+                  if (regno >= 0 && regno < NUMREGS)
+                    {

ERROR:CODE_INDENT: code indent should use tabs where possible
#770: FILE: arch/i386/kernel/i386-stub.c:493:
+                    {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#770: FILE: arch/i386/kernel/i386-stub.c:493:
+                    {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#771: FILE: arch/i386/kernel/i386-stub.c:494:
+                      hex2mem (ptr, (char *)&registers[regno], 4, 0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#771: FILE: arch/i386/kernel/i386-stub.c:494:
+                      hex2mem (ptr, (char *)&registers[regno], 4, 0);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#771: FILE: arch/i386/kernel/i386-stub.c:494:
+                      hex2mem (ptr, (char *)&registers[regno], 4, 0);

ERROR:CODE_INDENT: code indent should use tabs where possible
#772: FILE: arch/i386/kernel/i386-stub.c:495:
+                      strcpy(remcomOutBuffer,"OK");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#772: FILE: arch/i386/kernel/i386-stub.c:495:
+                      strcpy(remcomOutBuffer,"OK");$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#772: FILE: arch/i386/kernel/i386-stub.c:495:
+                      strcpy(remcomOutBuffer,"OK");
                                             ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#773: FILE: arch/i386/kernel/i386-stub.c:496:
+                      break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#773: FILE: arch/i386/kernel/i386-stub.c:496:
+                      break;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#774: FILE: arch/i386/kernel/i386-stub.c:497:
+                    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#774: FILE: arch/i386/kernel/i386-stub.c:497:
+                    }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#776: FILE: arch/i386/kernel/i386-stub.c:499:
+                  strcpy (remcomOutBuffer, "E01");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#776: FILE: arch/i386/kernel/i386-stub.c:499:
+                  strcpy (remcomOutBuffer, "E01");$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#776: FILE: arch/i386/kernel/i386-stub.c:499:
+                  strcpy (remcomOutBuffer, "E01");

ERROR:CODE_INDENT: code indent should use tabs where possible
#777: FILE: arch/i386/kernel/i386-stub.c:500:
+                  break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#777: FILE: arch/i386/kernel/i386-stub.c:500:
+                  break;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#778: FILE: arch/i386/kernel/i386-stub.c:501:
+                }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#778: FILE: arch/i386/kernel/i386-stub.c:501:
+                }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#781: FILE: arch/i386/kernel/i386-stub.c:504:
+      case 'm' :$

ERROR:SPACING: space prohibited before that ':' (ctx:WxE)
#781: FILE: arch/i386/kernel/i386-stub.c:504:
+      case 'm' :
                ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#783: FILE: arch/i386/kernel/i386-stub.c:506:
+                    if (hexToInt(&ptr,&addr))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#783: FILE: arch/i386/kernel/i386-stub.c:506:
+                    if (hexToInt(&ptr,&addr))$

ERROR:SPACING: space required after that ',' (ctx:VxO)
#783: FILE: arch/i386/kernel/i386-stub.c:506:
+                    if (hexToInt(&ptr,&addr))
                                      ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#783: FILE: arch/i386/kernel/i386-stub.c:506:
+                    if (hexToInt(&ptr,&addr))
                                       ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#784: FILE: arch/i386/kernel/i386-stub.c:507:
+                        if (*(ptr++) == ',')$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#784: FILE: arch/i386/kernel/i386-stub.c:507:
+                        if (*(ptr++) == ',')$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 28)
#784: FILE: arch/i386/kernel/i386-stub.c:507:
+                        if (*(ptr++) == ',')
+                            if (hexToInt(&ptr,&length))

ERROR:CODE_INDENT: code indent should use tabs where possible
#785: FILE: arch/i386/kernel/i386-stub.c:508:
+                            if (hexToInt(&ptr,&length))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#785: FILE: arch/i386/kernel/i386-stub.c:508:
+                            if (hexToInt(&ptr,&length))$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#785: FILE: arch/i386/kernel/i386-stub.c:508:
+                            if (hexToInt(&ptr,&length))
+                            {

ERROR:SPACING: space required after that ',' (ctx:VxO)
#785: FILE: arch/i386/kernel/i386-stub.c:508:
+                            if (hexToInt(&ptr,&length))
                                              ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#785: FILE: arch/i386/kernel/i386-stub.c:508:
+                            if (hexToInt(&ptr,&length))
                                               ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#786: FILE: arch/i386/kernel/i386-stub.c:509:
+                            {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#786: FILE: arch/i386/kernel/i386-stub.c:509:
+                            {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#787: FILE: arch/i386/kernel/i386-stub.c:510:
+                                ptr = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#787: FILE: arch/i386/kernel/i386-stub.c:510:
+                                ptr = 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#789: FILE: arch/i386/kernel/i386-stub.c:512:
+                                mem2hex((char*) addr, remcomOutBuffer, length, 1);$

CHECK:SPACING: No space is necessary after a cast
#789: FILE: arch/i386/kernel/i386-stub.c:512:
+                                mem2hex((char*) addr, remcomOutBuffer, length, 1);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#789: FILE: arch/i386/kernel/i386-stub.c:512:
+                                mem2hex((char*) addr, remcomOutBuffer, length, 1);$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#789: FILE: arch/i386/kernel/i386-stub.c:512:
+                                mem2hex((char*) addr, remcomOutBuffer, length, 1);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (32, 36)
#790: FILE: arch/i386/kernel/i386-stub.c:513:
+				if (mem_err) {
+				    strcpy (remcomOutBuffer, "E03");

WARNING:BRACES: braces {} are not necessary for single statement blocks
#790: FILE: arch/i386/kernel/i386-stub.c:513:
+				if (mem_err) {
+				    strcpy (remcomOutBuffer, "E03");
+				}

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#791: FILE: arch/i386/kernel/i386-stub.c:514:
+				    strcpy (remcomOutBuffer, "E03");

ERROR:CODE_INDENT: code indent should use tabs where possible
#793: FILE: arch/i386/kernel/i386-stub.c:516:
+                            }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#793: FILE: arch/i386/kernel/i386-stub.c:516:
+                            }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#795: FILE: arch/i386/kernel/i386-stub.c:518:
+                    if (ptr)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#795: FILE: arch/i386/kernel/i386-stub.c:518:
+                    if (ptr)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#795: FILE: arch/i386/kernel/i386-stub.c:518:
+                    if (ptr)
+                    {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (20, 22)
#795: FILE: arch/i386/kernel/i386-stub.c:518:
+                    if (ptr)
+                    {

ERROR:CODE_INDENT: code indent should use tabs where possible
#796: FILE: arch/i386/kernel/i386-stub.c:519:
+                    {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#796: FILE: arch/i386/kernel/i386-stub.c:519:
+                    {$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#797: FILE: arch/i386/kernel/i386-stub.c:520:
+		      strcpy(remcomOutBuffer,"E01");
 		                            ^

WARNING:TABSTOP: Statements should start on a tabstop
#798: FILE: arch/i386/kernel/i386-stub.c:521:
+		    }

ERROR:CODE_INDENT: code indent should use tabs where possible
#799: FILE: arch/i386/kernel/i386-stub.c:522:
+^I          break;$

WARNING:TABSTOP: Statements should start on a tabstop
#799: FILE: arch/i386/kernel/i386-stub.c:522:
+	          break;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#802: FILE: arch/i386/kernel/i386-stub.c:525:
+      case 'M' :$

ERROR:SPACING: space prohibited before that ':' (ctx:WxE)
#802: FILE: arch/i386/kernel/i386-stub.c:525:
+      case 'M' :
                ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#804: FILE: arch/i386/kernel/i386-stub.c:527:
+                    if (hexToInt(&ptr,&addr))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#804: FILE: arch/i386/kernel/i386-stub.c:527:
+                    if (hexToInt(&ptr,&addr))$

ERROR:SPACING: space required after that ',' (ctx:VxO)
#804: FILE: arch/i386/kernel/i386-stub.c:527:
+                    if (hexToInt(&ptr,&addr))
                                      ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#804: FILE: arch/i386/kernel/i386-stub.c:527:
+                    if (hexToInt(&ptr,&addr))
                                       ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#805: FILE: arch/i386/kernel/i386-stub.c:528:
+                        if (*(ptr++) == ',')$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#805: FILE: arch/i386/kernel/i386-stub.c:528:
+                        if (*(ptr++) == ',')$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 28)
#805: FILE: arch/i386/kernel/i386-stub.c:528:
+                        if (*(ptr++) == ',')
+                            if (hexToInt(&ptr,&length))

ERROR:CODE_INDENT: code indent should use tabs where possible
#806: FILE: arch/i386/kernel/i386-stub.c:529:
+                            if (hexToInt(&ptr,&length))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#806: FILE: arch/i386/kernel/i386-stub.c:529:
+                            if (hexToInt(&ptr,&length))$

ERROR:SPACING: space required after that ',' (ctx:VxO)
#806: FILE: arch/i386/kernel/i386-stub.c:529:
+                            if (hexToInt(&ptr,&length))
                                              ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#806: FILE: arch/i386/kernel/i386-stub.c:529:
+                            if (hexToInt(&ptr,&length))
                                               ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#807: FILE: arch/i386/kernel/i386-stub.c:530:
+                                if (*(ptr++) == ':')$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#807: FILE: arch/i386/kernel/i386-stub.c:530:
+                                if (*(ptr++) == ':')$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#807: FILE: arch/i386/kernel/i386-stub.c:530:
+                                if (*(ptr++) == ':')
+                                {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (32, 36)
#807: FILE: arch/i386/kernel/i386-stub.c:530:
+                                if (*(ptr++) == ':')
+                                {

ERROR:CODE_INDENT: code indent should use tabs where possible
#808: FILE: arch/i386/kernel/i386-stub.c:531:
+                                {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#808: FILE: arch/i386/kernel/i386-stub.c:531:
+                                {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#810: FILE: arch/i386/kernel/i386-stub.c:533:
+                                    hex2mem(ptr, (char*) addr, length, 1);$

CHECK:SPACING: No space is necessary after a cast
#810: FILE: arch/i386/kernel/i386-stub.c:533:
+                                    hex2mem(ptr, (char*) addr, length, 1);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#810: FILE: arch/i386/kernel/i386-stub.c:533:
+                                    hex2mem(ptr, (char*) addr, length, 1);$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#810: FILE: arch/i386/kernel/i386-stub.c:533:
+                                    hex2mem(ptr, (char*) addr, length, 1);

WARNING:TABSTOP: Statements should start on a tabstop
#812: FILE: arch/i386/kernel/i386-stub.c:535:
+				    if (mem_err) {

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#812: FILE: arch/i386/kernel/i386-stub.c:535:
+				    if (mem_err) {
[...]
+				    } else {
[...]

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#813: FILE: arch/i386/kernel/i386-stub.c:536:
+					strcpy (remcomOutBuffer, "E03");

WARNING:TABSTOP: Statements should start on a tabstop
#814: FILE: arch/i386/kernel/i386-stub.c:537:
+				    } else {

ERROR:CODE_INDENT: code indent should use tabs where possible
#815: FILE: arch/i386/kernel/i386-stub.c:538:
+^I^I^I^I        strcpy(remcomOutBuffer,"OK");$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#815: FILE: arch/i386/kernel/i386-stub.c:538:
+				        strcpy(remcomOutBuffer,"OK");
 				                              ^

WARNING:TABSTOP: Statements should start on a tabstop
#816: FILE: arch/i386/kernel/i386-stub.c:539:
+				    }

ERROR:CODE_INDENT: code indent should use tabs where possible
#818: FILE: arch/i386/kernel/i386-stub.c:541:
+                                    ptr = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#818: FILE: arch/i386/kernel/i386-stub.c:541:
+                                    ptr = 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#819: FILE: arch/i386/kernel/i386-stub.c:542:
+                                }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#819: FILE: arch/i386/kernel/i386-stub.c:542:
+                                }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#820: FILE: arch/i386/kernel/i386-stub.c:543:
+                    if (ptr)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#820: FILE: arch/i386/kernel/i386-stub.c:543:
+                    if (ptr)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#820: FILE: arch/i386/kernel/i386-stub.c:543:
+                    if (ptr)
+                    {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (20, 22)
#820: FILE: arch/i386/kernel/i386-stub.c:543:
+                    if (ptr)
+                    {

ERROR:CODE_INDENT: code indent should use tabs where possible
#821: FILE: arch/i386/kernel/i386-stub.c:544:
+                    {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#821: FILE: arch/i386/kernel/i386-stub.c:544:
+                    {$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#822: FILE: arch/i386/kernel/i386-stub.c:545:
+		      strcpy(remcomOutBuffer,"E02");
 		                            ^

WARNING:TABSTOP: Statements should start on a tabstop
#823: FILE: arch/i386/kernel/i386-stub.c:546:
+		    }

ERROR:CODE_INDENT: code indent should use tabs where possible
#824: FILE: arch/i386/kernel/i386-stub.c:547:
+                break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#824: FILE: arch/i386/kernel/i386-stub.c:547:
+                break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#828: FILE: arch/i386/kernel/i386-stub.c:551:
+     case 's' :$

ERROR:SPACING: space prohibited before that ':' (ctx:WxE)
#828: FILE: arch/i386/kernel/i386-stub.c:551:
+     case 's' :
               ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#830: FILE: arch/i386/kernel/i386-stub.c:553:
+     case 'c' :$

ERROR:SPACING: space prohibited before that ':' (ctx:WxE)
#830: FILE: arch/i386/kernel/i386-stub.c:553:
+     case 'c' :
               ^

WARNING:TYPO_SPELLING: 'parm' may be misspelled - perhaps 'param'?
#831: FILE: arch/i386/kernel/i386-stub.c:554:
+          /* try to read optional parameter, pc unchanged if no parm */
                                                                 ^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#831: FILE: arch/i386/kernel/i386-stub.c:554:
+          /* try to read optional parameter, pc unchanged if no parm */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#832: FILE: arch/i386/kernel/i386-stub.c:555:
+         if (hexToInt(&ptr,&addr))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#832: FILE: arch/i386/kernel/i386-stub.c:555:
+         if (hexToInt(&ptr,&addr))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (9, 13)
#832: FILE: arch/i386/kernel/i386-stub.c:555:
+         if (hexToInt(&ptr,&addr))
+             registers[ GDB_PC ] = addr;

ERROR:SPACING: space required after that ',' (ctx:VxO)
#832: FILE: arch/i386/kernel/i386-stub.c:555:
+         if (hexToInt(&ptr,&addr))
                           ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#832: FILE: arch/i386/kernel/i386-stub.c:555:
+         if (hexToInt(&ptr,&addr))
                            ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#833: FILE: arch/i386/kernel/i386-stub.c:556:
+             registers[ GDB_PC ] = addr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#833: FILE: arch/i386/kernel/i386-stub.c:556:
+             registers[ GDB_PC ] = addr;$

ERROR:SPACING: space prohibited after that open square bracket '['
#833: FILE: arch/i386/kernel/i386-stub.c:556:
+             registers[ GDB_PC ] = addr;

ERROR:SPACING: space prohibited before that close square bracket ']'
#833: FILE: arch/i386/kernel/i386-stub.c:556:
+             registers[ GDB_PC ] = addr;

ERROR:CODE_INDENT: code indent should use tabs where possible
#835: FILE: arch/i386/kernel/i386-stub.c:558:
+          newPC = registers[ GDB_PC];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#835: FILE: arch/i386/kernel/i386-stub.c:558:
+          newPC = registers[ GDB_PC];$

ERROR:SPACING: space prohibited after that open square bracket '['
#835: FILE: arch/i386/kernel/i386-stub.c:558:
+          newPC = registers[ GDB_PC];

ERROR:CODE_INDENT: code indent should use tabs where possible
#837: FILE: arch/i386/kernel/i386-stub.c:560:
+          /* clear the trace bit */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#838: FILE: arch/i386/kernel/i386-stub.c:561:
+          registers[ GDB_PS ] &= 0xfffffeff;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#838: FILE: arch/i386/kernel/i386-stub.c:561:
+          registers[ GDB_PS ] &= 0xfffffeff;$

ERROR:SPACING: space prohibited after that open square bracket '['
#838: FILE: arch/i386/kernel/i386-stub.c:561:
+          registers[ GDB_PS ] &= 0xfffffeff;

ERROR:SPACING: space prohibited before that close square bracket ']'
#838: FILE: arch/i386/kernel/i386-stub.c:561:
+          registers[ GDB_PS ] &= 0xfffffeff;

ERROR:CODE_INDENT: code indent should use tabs where possible
#840: FILE: arch/i386/kernel/i386-stub.c:563:
+          /* set the trace bit if we're stepping */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#841: FILE: arch/i386/kernel/i386-stub.c:564:
+          if (kgdb_stepping) registers[ GDB_PS ] |= 0x100;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#841: FILE: arch/i386/kernel/i386-stub.c:564:
+          if (kgdb_stepping) registers[ GDB_PS ] |= 0x100;$

ERROR:SPACING: space prohibited after that open square bracket '['
#841: FILE: arch/i386/kernel/i386-stub.c:564:
+          if (kgdb_stepping) registers[ GDB_PS ] |= 0x100;

ERROR:SPACING: space prohibited before that close square bracket ']'
#841: FILE: arch/i386/kernel/i386-stub.c:564:
+          if (kgdb_stepping) registers[ GDB_PS ] |= 0x100;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#841: FILE: arch/i386/kernel/i386-stub.c:564:
+          if (kgdb_stepping) registers[ GDB_PS ] |= 0x100;

ERROR:SPACING: space required after that ',' (ctx:VxO)
#861: FILE: arch/i386/kernel/i386-stub.c:584:
+	  set_intr_gate(14,&page_fault);
 	                  ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#861: FILE: arch/i386/kernel/i386-stub.c:584:
+	  set_intr_gate(14,&page_fault);
 	                   ^

WARNING:TABSTOP: Statements should start on a tabstop
#866: FILE: arch/i386/kernel/i386-stub.c:589:
+	  return;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#869: FILE: arch/i386/kernel/i386-stub.c:592:
+      case 'k' :$

ERROR:SPACING: space prohibited before that ':' (ctx:WxE)
#869: FILE: arch/i386/kernel/i386-stub.c:592:
+      case 'k' :
                ^

WARNING:TABSTOP: Statements should start on a tabstop
#873: FILE: arch/i386/kernel/i386-stub.c:596:
+	      break;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#875: FILE: arch/i386/kernel/i386-stub.c:598:
+      } /* switch */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#878: FILE: arch/i386/kernel/i386-stub.c:601:
+    putpacket(remcomOutBuffer);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#879: FILE: arch/i386/kernel/i386-stub.c:602:
+    }$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#883: FILE: arch/i386/kernel/i386-stub.c:606:
+/* this function is used to set up exception handlers for tracing and
+   breakpoints */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#883: FILE: arch/i386/kernel/i386-stub.c:606:
+   breakpoints */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#886: FILE: arch/i386/kernel/i386-stub.c:609:
+  kgdb_initialized = 1;$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#890: FILE: arch/i386/kernel/i386-stub.c:613:
+/* This function will generate a breakpoint exception.  It is used at the
+   beginning of a program to sync up with a debugger and can be used

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#892: FILE: arch/i386/kernel/i386-stub.c:615:
+   the debugger. */

WARNING:BRACES: braces {} are not necessary for single statement blocks
#896: FILE: arch/i386/kernel/i386-stub.c:619:
+	if (kgdb_initialized) {
+		asm("   int $3");
+	}

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#910: FILE: arch/i386/kernel/setup.c:110:
+extern void set_debug_traps(void);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 13)
#922: FILE: arch/i386/kernel/setup.c:1027:
+	if (strstr(*cmdline_p, "kgdb") && (serial_kgdb_hook(0) == 0)) {
[...]
+	     set_debug_traps();

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#923: FILE: arch/i386/kernel/setup.c:1028:
+	if (strstr(*cmdline_p, "kgdb") && (serial_kgdb_hook(0) == 0)) {
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#931: FILE: arch/i386/kernel/setup.c:1036:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#931: FILE: arch/i386/kernel/setup.c:1036:
+        }$

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#946: FILE: arch/i386/kernel/traps.c:92:
+extern int kgdb_active;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#947: FILE: arch/i386/kernel/traps.c:93:
+extern int kgdb_stepping;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#949: FILE: arch/i386/kernel/traps.c:95:
+extern void handle_exception(int sigval, struct pt_regs *regs);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#950: FILE: arch/i386/kernel/traps.c:96:
+extern void breakpoint(void);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#984: FILE: arch/i386/kernel/traps.c:462:
+	if (kgdb_active) return;

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#1008: FILE: arch/i386/kernel/traps.c:574:
+			return;
+		} else {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1052: FILE: arch/i386/kernel/traps.c:901:
+	_set_gate(idt_table+n,14,3,addr);
 	                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1052: FILE: arch/i386/kernel/traps.c:901:
+	_set_gate(idt_table+n,14,3,addr);
 	                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1052: FILE: arch/i386/kernel/traps.c:901:
+	_set_gate(idt_table+n,14,3,addr);
 	                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1052: FILE: arch/i386/kernel/traps.c:901:
+	_set_gate(idt_table+n,14,3,addr);
 	                          ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#1074: FILE: arch/i386/kernel/traps.c:1048:
+	set_intr_gate(1,&debug);
 	               ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#1074: FILE: arch/i386/kernel/traps.c:1048:
+	set_intr_gate(1,&debug);
 	                ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#1077: FILE: arch/i386/kernel/traps.c:1050:
+	set_system_intr_gate(3,&int3);	/* int3-5 can be called from all */
 	                      ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#1077: FILE: arch/i386/kernel/traps.c:1050:
+	set_system_intr_gate(3,&int3);	/* int3-5 can be called from all */
 	                       ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1091: FILE: arch/i386/kernel/traps.c:1092:
+	if (kgdb_initialized) breakpoint();

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'line < 0'
#1157: FILE: drivers/char/serial.c:3149:
+	if ((line < 0) || (line >= NR_PORTS) || (line == kgdb_index)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'line >= NR_PORTS'
#1157: FILE: drivers/char/serial.c:3149:
+	if ((line < 0) || (line >= NR_PORTS) || (line == kgdb_index)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'line == kgdb_index'
#1157: FILE: drivers/char/serial.c:3149:
+	if ((line < 0) || (line >= NR_PORTS) || (line == kgdb_index)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'state->type == PORT_UNKNOWN'
#1179: FILE: drivers/char/serial.c:5329:
+		if ((state->type == PORT_UNKNOWN) || (i == kgdb_index))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'i == kgdb_index'
#1179: FILE: drivers/char/serial.c:5329:
+		if ((state->type == PORT_UNKNOWN) || (i == kgdb_index))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1203: FILE: drivers/char/serial.c:5617:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#1247: FILE: drivers/char/serial.c:5880:
+static int kgdb_interrupts_active = 0;

ERROR:CODE_INDENT: code indent should use tabs where possible
#1262: FILE: drivers/char/serial.c:5895:
+        struct serial_state *state;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1262: FILE: drivers/char/serial.c:5895:
+        struct serial_state *state;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1263: FILE: drivers/char/serial.c:5896:
+        unsigned cval;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1263: FILE: drivers/char/serial.c:5896:
+        unsigned cval;$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1263: FILE: drivers/char/serial.c:5896:
+        unsigned cval;

ERROR:CODE_INDENT: code indent should use tabs where possible
#1264: FILE: drivers/char/serial.c:5897:
+        int     baud = 9600;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1264: FILE: drivers/char/serial.c:5897:
+        int     baud = 9600;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1265: FILE: drivers/char/serial.c:5898:
+        int     bits = 8;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1265: FILE: drivers/char/serial.c:5898:
+        int     bits = 8;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1266: FILE: drivers/char/serial.c:5899:
+        int     parity = 'n';$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1266: FILE: drivers/char/serial.c:5899:
+        int     parity = 'n';$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1267: FILE: drivers/char/serial.c:5900:
+        int     cflag = CREAD | HUPCL | CLOCAL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1267: FILE: drivers/char/serial.c:5900:
+        int     cflag = CREAD | HUPCL | CLOCAL;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1268: FILE: drivers/char/serial.c:5901:
+        int     quot = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1268: FILE: drivers/char/serial.c:5901:
+        int     quot = 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1270: FILE: drivers/char/serial.c:5903:
+        kgdb_index = index;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1270: FILE: drivers/char/serial.c:5903:
+        kgdb_index = index;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1272: FILE: drivers/char/serial.c:5905:
+        /*$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1273: FILE: drivers/char/serial.c:5906:
+         *      Now construct a cflag setting.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1274: FILE: drivers/char/serial.c:5907:
+         */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1275: FILE: drivers/char/serial.c:5908:
+        switch(baud) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1275: FILE: drivers/char/serial.c:5908:
+        switch(baud) {$

ERROR:SPACING: space required before the open parenthesis '('
#1275: FILE: drivers/char/serial.c:5908:
+        switch(baud) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#1301: FILE: drivers/char/serial.c:5934:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1301: FILE: drivers/char/serial.c:5934:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1302: FILE: drivers/char/serial.c:5935:
+        switch(bits) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1302: FILE: drivers/char/serial.c:5935:
+        switch(bits) {$

ERROR:SPACING: space required before the open parenthesis '('
#1302: FILE: drivers/char/serial.c:5935:
+        switch(bits) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#1310: FILE: drivers/char/serial.c:5943:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1310: FILE: drivers/char/serial.c:5943:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1311: FILE: drivers/char/serial.c:5944:
+        switch(parity) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1311: FILE: drivers/char/serial.c:5944:
+        switch(parity) {$

ERROR:SPACING: space required before the open parenthesis '('
#1311: FILE: drivers/char/serial.c:5944:
+        switch(parity) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#1318: FILE: drivers/char/serial.c:5951:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1318: FILE: drivers/char/serial.c:5951:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1320: FILE: drivers/char/serial.c:5953:
+        /*$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1321: FILE: drivers/char/serial.c:5954:
+         *      Divisor, bytesize and parity$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1322: FILE: drivers/char/serial.c:5955:
+         */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1323: FILE: drivers/char/serial.c:5956:
+        state = rs_table + index;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1323: FILE: drivers/char/serial.c:5956:
+        state = rs_table + index;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1335: FILE: drivers/char/serial.c:5968:
+        quot = state->baud_base / baud;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1335: FILE: drivers/char/serial.c:5968:
+        quot = state->baud_base / baud;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1336: FILE: drivers/char/serial.c:5969:
+        cval = cflag & (CSIZE | CSTOPB);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1336: FILE: drivers/char/serial.c:5969:
+        cval = cflag & (CSIZE | CSTOPB);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1338: FILE: drivers/char/serial.c:5971:
+        cval >>= 8;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1338: FILE: drivers/char/serial.c:5971:
+        cval >>= 8;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1340: FILE: drivers/char/serial.c:5973:
+        cval >>= 4;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1340: FILE: drivers/char/serial.c:5973:
+        cval >>= 4;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1342: FILE: drivers/char/serial.c:5975:
+        if (cflag & PARENB)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1342: FILE: drivers/char/serial.c:5975:
+        if (cflag & PARENB)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1343: FILE: drivers/char/serial.c:5976:
+                cval |= UART_LCR_PARITY;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1343: FILE: drivers/char/serial.c:5976:
+                cval |= UART_LCR_PARITY;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1344: FILE: drivers/char/serial.c:5977:
+        if (!(cflag & PARODD))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1344: FILE: drivers/char/serial.c:5977:
+        if (!(cflag & PARODD))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1345: FILE: drivers/char/serial.c:5978:
+                cval |= UART_LCR_EPAR;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1345: FILE: drivers/char/serial.c:5978:
+                cval |= UART_LCR_EPAR;$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1347: FILE: drivers/char/serial.c:5980:
+
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#1348: FILE: drivers/char/serial.c:5981:
+        /*$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1349: FILE: drivers/char/serial.c:5982:
+         *      Set DTR and RTS high along with OUT1 and OUT2 (to$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1350: FILE: drivers/char/serial.c:5983:
+         *      enable interrupts) and set speed.$

WARNING:LONG_LINE_COMMENT: line length of 102 exceeds 100 columns
#1357: FILE: drivers/char/serial.c:5990:
+	/* serial_out(info, UART_MCR, UART_MCR_DTR | UART_MCR_RTS | UART_MCR_OUT1 | UART_MCR_OUT2); */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:CODE_INDENT: code indent should use tabs where possible
#1360: FILE: drivers/char/serial.c:5993:
+        /*$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1361: FILE: drivers/char/serial.c:5994:
+         *      If we read 0xff from the LSR, there is no UART here.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1362: FILE: drivers/char/serial.c:5995:
+         */$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1363: FILE: drivers/char/serial.c:5996:
+	if (serial_in(info, UART_LSR) == 0xff) {
+                return -1;
+        }

ERROR:CODE_INDENT: code indent should use tabs where possible
#1364: FILE: drivers/char/serial.c:5997:
+                return -1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1364: FILE: drivers/char/serial.c:5997:
+                return -1;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1365: FILE: drivers/char/serial.c:5998:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1365: FILE: drivers/char/serial.c:5998:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1366: FILE: drivers/char/serial.c:5999:
+        return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1366: FILE: drivers/char/serial.c:5999:
+        return 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1371: FILE: drivers/char/serial.c:6004:
+        /* This routine gets called from rs_init(), and sets up the$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1379: FILE: drivers/char/serial.c:6012:
+        /* Allocate the IRQ (we don't share it) and IO ports */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1381: FILE: drivers/char/serial.c:6014:
+        if (request_irq(async_kgdb.state->irq, rs_interrupt_kgdb, 0,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1381: FILE: drivers/char/serial.c:6014:
+        if (request_irq(async_kgdb.state->irq, rs_interrupt_kgdb, 0,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1382: FILE: drivers/char/serial.c:6015:
+                        "serial(kgdb)", NULL)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1382: FILE: drivers/char/serial.c:6015:
+                        "serial(kgdb)", NULL)) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1383: FILE: drivers/char/serial.c:6016:
+                printk("Can't get KGDB IRQ - no asynchronous debugging\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1383: FILE: drivers/char/serial.c:6016:
+                printk("Can't get KGDB IRQ - no asynchronous debugging\n");$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1383: FILE: drivers/char/serial.c:6016:
+                printk("Can't get KGDB IRQ - no asynchronous debugging\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#1384: FILE: drivers/char/serial.c:6017:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1384: FILE: drivers/char/serial.c:6017:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1393: FILE: drivers/char/serial.c:6026:
+        request_region(async_kgdb.port, 8, "serial(kgdb)");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1393: FILE: drivers/char/serial.c:6026:
+        request_region(async_kgdb.port, 8, "serial(kgdb)");$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1398: FILE: drivers/char/serial.c:6031:
+        wait_for_xmitr(&async_kgdb);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1398: FILE: drivers/char/serial.c:6031:
+        wait_for_xmitr(&async_kgdb);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1400: FILE: drivers/char/serial.c:6033:
+        wait_for_xmitr(&async_kgdb);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1400: FILE: drivers/char/serial.c:6033:
+        wait_for_xmitr(&async_kgdb);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1405: FILE: drivers/char/serial.c:6038:
+        int lsr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1405: FILE: drivers/char/serial.c:6038:
+        int lsr;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1407: FILE: drivers/char/serial.c:6040:
+        do {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1407: FILE: drivers/char/serial.c:6040:
+        do {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1408: FILE: drivers/char/serial.c:6041:
+                lsr = serial_in(&async_kgdb, UART_LSR);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1408: FILE: drivers/char/serial.c:6041:
+                lsr = serial_in(&async_kgdb, UART_LSR);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1409: FILE: drivers/char/serial.c:6042:
+        } while (!(lsr & UART_LSR_DR));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1409: FILE: drivers/char/serial.c:6042:
+        } while (!(lsr & UART_LSR_DR));$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1411: FILE: drivers/char/serial.c:6044:
+        return serial_in(&async_kgdb, UART_RX);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1411: FILE: drivers/char/serial.c:6044:
+        return serial_in(&async_kgdb, UART_RX);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1416: FILE: drivers/char/serial.c:6049:
+        if (i && kgdb_interrupts_active) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1416: FILE: drivers/char/serial.c:6049:
+        if (i && kgdb_interrupts_active) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1417: FILE: drivers/char/serial.c:6050:
+                /* KGDB interruptible - enable UART recv data interrupt */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1418: FILE: drivers/char/serial.c:6051:
+                serial_out(&async_kgdb, UART_IER, UART_IER_RDI);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1418: FILE: drivers/char/serial.c:6051:
+                serial_out(&async_kgdb, UART_IER, UART_IER_RDI);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1419: FILE: drivers/char/serial.c:6052:
+        } else {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1419: FILE: drivers/char/serial.c:6052:
+        } else {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1420: FILE: drivers/char/serial.c:6053:
+                /* KGDB not interruptible - disable UART interrupts */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1421: FILE: drivers/char/serial.c:6054:
+                serial_out(&async_kgdb, UART_IER, 0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1421: FILE: drivers/char/serial.c:6054:
+                serial_out(&async_kgdb, UART_IER, 0);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1422: FILE: drivers/char/serial.c:6055:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1422: FILE: drivers/char/serial.c:6055:
+        }$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000521534.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 225 errors, 308 warnings, 29 checks, 1279 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000521534.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
