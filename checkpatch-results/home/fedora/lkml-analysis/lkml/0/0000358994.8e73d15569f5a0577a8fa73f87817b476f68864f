WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#32: 
> ftp://ftp.kernel.org/pub/linux/kernel/people/akpm/patches/2.5/2.5.73/2.5.73-mm2/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#109: FILE: arch/i386/mm/fault.c:274:
+	printk(KERN_ALERT "%%cr3 = 0x%lx\n", page);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#111: FILE: arch/i386/mm/fault.c:276:
+	page &= ~(PTRS_PER_PGD*sizeof(pgd_t) - 1);
 	                      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#112: FILE: arch/i386/mm/fault.c:277:
+	printk(KERN_ALERT "*pdpte = 0x%Lx\n",

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#112: FILE: arch/i386/mm/fault.c:277:
+	printk(KERN_ALERT "*pdpte = 0x%Lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#113: FILE: arch/i386/mm/fault.c:278:
+	printk(KERN_ALERT "*pdpte = 0x%Lx\n",
+			pgd_val(((pgd_t *)__va(page))[address >> PGDIR_SHIFT]));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#215: FILE: arch/i386/mm/init.c:62:
+^Iif (pmd_table != pmd_offset_kernel(pgd, 0)) $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#291: FILE: arch/i386/mm/pageattr.c:26:
+^Ipmd = pmd_offset_kernel(pgd, address); ^I       $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#291: FILE: arch/i386/mm/pageattr.c:26:
+^Ipmd = pmd_offset_kernel(pgd, address); ^I       $

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#351: FILE: arch/i386/mm/pgtable.c:202:
+#define	GFP_PMD		(__GFP_REPEAT|__GFP_HIGHMEM|GFP_KERNEL)
        	       		             ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#351: FILE: arch/i386/mm/pgtable.c:202:
+#define	GFP_PMD		(__GFP_REPEAT|__GFP_HIGHMEM|GFP_KERNEL)
        	       		                           ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#353: FILE: arch/i386/mm/pgtable.c:204:
+#define GFP_PMD		(__GFP_REPEAT|GFP_KERNEL)
                		             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#519: FILE: include/asm-h8300/pgtable.h:18:
+#define pmd_offset_kernel(a,b)		pmd_offset(a,b)
                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#519: FILE: include/asm-h8300/pgtable.h:18:
+#define pmd_offset_kernel(a,b)		pmd_offset(a,b)
                               		            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#520: FILE: include/asm-h8300/pgtable.h:19:
+#define pmd_offset_map(a,b)		pmd_offset(a,b)
                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#520: FILE: include/asm-h8300/pgtable.h:19:
+#define pmd_offset_map(a,b)		pmd_offset(a,b)
                            		            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#521: FILE: include/asm-h8300/pgtable.h:20:
+#define pmd_offset_map_nested(a,b)	pmd_offset(a,b)
                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#521: FILE: include/asm-h8300/pgtable.h:20:
+#define pmd_offset_map_nested(a,b)	pmd_offset(a,b)
                                   	            ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#562: FILE: include/asm-i386/pgalloc.h:49:
+#define pmd_alloc_one_kernel(mm, addr)	({ BUG(); ((pmd_t *)2); })

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#626: FILE: include/asm-i386/pgtable-3level.h:91:
+#define pmd_unmap(pmd)				__pmd_unmap(pmd, KM_PMD0);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#627: FILE: include/asm-i386/pgtable-3level.h:92:
+#define pmd_unmap_nested(pmd)			__pmd_unmap(pmd, KM_PMD1);

CHECK:SPACING: No space is necessary after a cast
#737: FILE: include/asm-parisc/pgtable.h:245:
+#define __pgd_page(pgd) ((unsigned long) __va(pgd_val(pgd) & PAGE_MASK))

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#747: FILE: include/asm-parisc/pgtable.h:343:
+((pmd_t *)__pgd_page(*(dir)) + (((address)>>PMD_SHIFT) & (PTRS_PER_PMD-1)))
                                           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#747: FILE: include/asm-parisc/pgtable.h:343:
+((pmd_t *)__pgd_page(*(dir)) + (((address)>>PMD_SHIFT) & (PTRS_PER_PMD-1)))
                                                                       ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#783: FILE: include/asm-ppc64/pgtable.h:193:
+#define __pgd_page(pgd)^I^I(__bpn_to_ba(pgd_val(pgd))) $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#793: FILE: include/asm-ppc64/pgtable.h:207:
+  ((pmd_t *)__pgd_page(*(dir)) + (((addr) >> PMD_SHIFT) & (PTRS_PER_PMD - 1)))$

CHECK:SPACING: No space is necessary after a cast
#883: FILE: include/asm-sparc64/pgtable.h:231:
+#define __pgd_page(pgd)			((unsigned long) __va((pgd_val(pgd)<<11UL)))

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#883: FILE: include/asm-sparc64/pgtable.h:231:
+#define __pgd_page(pgd)			((unsigned long) __va((pgd_val(pgd)<<11UL)))
                        			                                   ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'address' may be better as '(address)' to avoid precedence issues
#893: FILE: include/asm-sparc64/pgtable.h:274:
+#define pmd_offset(dir, address)	((pmd_t *)__pgd_page(*(dir)) + \
 					((address >> PMD_SHIFT) & (REAL_PTRS_PER_PMD-1)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pgd' - possible side-effects?
#971: FILE: include/linux/mm.h:492:
+#define pmd_alloc_map(mm, pgd, addr)				\
+	(pgd_none(*(pgd))? __pmd_alloc(mm,pgd,addr): pmd_offset_map(pgd,addr))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'addr' - possible side-effects?
#971: FILE: include/linux/mm.h:492:
+#define pmd_alloc_map(mm, pgd, addr)				\
+	(pgd_none(*(pgd))? __pmd_alloc(mm,pgd,addr): pmd_offset_map(pgd,addr))

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#972: FILE: include/linux/mm.h:493:
+	(pgd_none(*(pgd))? __pmd_alloc(mm,pgd,addr): pmd_offset_map(pgd,addr))
 	                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#972: FILE: include/linux/mm.h:493:
+	(pgd_none(*(pgd))? __pmd_alloc(mm,pgd,addr): pmd_offset_map(pgd,addr))
 	                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#972: FILE: include/linux/mm.h:493:
+	(pgd_none(*(pgd))? __pmd_alloc(mm,pgd,addr): pmd_offset_map(pgd,addr))
 	                                     ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#972: FILE: include/linux/mm.h:493:
+	(pgd_none(*(pgd))? __pmd_alloc(mm,pgd,addr): pmd_offset_map(pgd,addr))
 	                                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#972: FILE: include/linux/mm.h:493:
+	(pgd_none(*(pgd))? __pmd_alloc(mm,pgd,addr): pmd_offset_map(pgd,addr))
 	                                                               ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pgd' - possible side-effects?
#974: FILE: include/linux/mm.h:495:
+#define pmd_alloc_kernel(mm, pgd, addr)				\
+	(pgd_none(*(pgd))? __pmd_alloc_kernel(mm,pgd,addr): pmd_offset_kernel(pgd,addr))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'addr' - possible side-effects?
#974: FILE: include/linux/mm.h:495:
+#define pmd_alloc_kernel(mm, pgd, addr)				\
+	(pgd_none(*(pgd))? __pmd_alloc_kernel(mm,pgd,addr): pmd_offset_kernel(pgd,addr))

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#975: FILE: include/linux/mm.h:496:
+	(pgd_none(*(pgd))? __pmd_alloc_kernel(mm,pgd,addr): pmd_offset_kernel(pgd,addr))
 	                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#975: FILE: include/linux/mm.h:496:
+	(pgd_none(*(pgd))? __pmd_alloc_kernel(mm,pgd,addr): pmd_offset_kernel(pgd,addr))
 	                                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#975: FILE: include/linux/mm.h:496:
+	(pgd_none(*(pgd))? __pmd_alloc_kernel(mm,pgd,addr): pmd_offset_kernel(pgd,addr))
 	                                            ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#975: FILE: include/linux/mm.h:496:
+	(pgd_none(*(pgd))? __pmd_alloc_kernel(mm,pgd,addr): pmd_offset_kernel(pgd,addr))
 	                                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#975: FILE: include/linux/mm.h:496:
+	(pgd_none(*(pgd))? __pmd_alloc_kernel(mm,pgd,addr): pmd_offset_kernel(pgd,addr))
 	                                                                         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1149: FILE: mm/memory.c:402:
+		pmd_unmap_nested(src_pmd-1);
 		                        ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1150: FILE: mm/memory.c:403:
+		pmd_unmap(dst_pmd-1);
 		                 ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1191: FILE: mm/memory.c:680:
+		struct page *page = follow_huge_pmd(mm, address, pmd, write);
+		pmd_unmap(pmd);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1232: FILE: mm/memory.c:855:
+static inline int zeromap_pmd_range(struct mm_struct *mm, pmd_t **pmd,
+			unsigned long address, unsigned long size, pgprot_t prot)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1276: FILE: mm/memory.c:933:
+static inline int remap_pmd_range(struct mm_struct *mm, pmd_t **pmd,
+				unsigned long address, unsigned long size,

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000358994.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 19 errors, 10 warnings, 19 checks, 1392 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000358994.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
