WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#54: 
--- ./include/linux/seq_file.h~seqsingle	2002-08-02 17:39:45.000000000 -0700

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct seq_file *' should also have an identifier name
#76: FILE: include/linux/seq_file.h:63:
+int seq_path(struct seq_file *, struct vfsmount *, struct dentry *, char *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfsmount *' should also have an identifier name
#76: FILE: include/linux/seq_file.h:63:
+int seq_path(struct seq_file *, struct vfsmount *, struct dentry *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#76: FILE: include/linux/seq_file.h:63:
+int seq_path(struct seq_file *, struct vfsmount *, struct dentry *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#76: FILE: include/linux/seq_file.h:63:
+int seq_path(struct seq_file *, struct vfsmount *, struct dentry *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#78: FILE: include/linux/seq_file.h:65:
+int single_open(struct file *, int (*)(struct seq_file *, void *), void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#78: FILE: include/linux/seq_file.h:65:
+int single_open(struct file *, int (*)(struct seq_file *, void *), void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#79: FILE: include/linux/seq_file.h:66:
+int single_release(struct inode *, struct file *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#79: FILE: include/linux/seq_file.h:66:
+int single_release(struct inode *, struct file *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#80: FILE: include/linux/seq_file.h:67:
+int seq_release_private(struct inode *, struct file *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#80: FILE: include/linux/seq_file.h:67:
+int seq_release_private(struct inode *, struct file *);

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#127: FILE: fs/seq_file.c:301:
+int seq_path(struct seq_file *m,
+		struct vfsmount *mnt, struct dentry *dentry,

WARNING:LINE_SPACING: Missing a blank line after declarations
#133: FILE: fs/seq_file.c:307:
+		char *p = d_path(dentry, mnt, s, m->size - m->count);
+		if (!IS_ERR(p)) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#136: FILE: fs/seq_file.c:310:
+				char c = *p++;
+				if (!c) {

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#144: FILE: fs/seq_file.c:318:
+					break;
+				} else {

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#174: FILE: fs/seq_file.c:348:
+	struct seq_operations *op = kmalloc(sizeof(*op), GFP_KERNEL);

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#193: FILE: fs/seq_file.c:367:
+	struct seq_operations *op = ((struct seq_file *)file->private_data)->op;

WARNING:LINE_SPACING: Missing a blank line after declarations
#195: FILE: fs/seq_file.c:369:
+	int res = seq_release(inode, file);
+	kfree(op);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000342699.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 0 errors, 19 warnings, 1 checks, 142 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000342699.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
