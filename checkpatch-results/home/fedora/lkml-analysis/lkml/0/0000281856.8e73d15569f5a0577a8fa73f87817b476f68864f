WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#27: 
Thanks!  Another cleanup which I missed last time as well as renaming uchar_t

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#72: 
--- a/Documentation/filesystems/ntfs.txt	Fri May 14 16:03:21 2004

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:DEPRECATED_VARIABLE: Use of EXTRA_CFLAGS is deprecated, please use `ccflags-y instead.
#149: FILE: fs/ntfs/Makefile:8:
+EXTRA_CFLAGS = -DNTFS_VERSION=\"2.1.11\"

EXTRA_{A,C,CPP,LD}FLAGS are deprecated and should be replaced by the new
flags added via commit f77bf01425b1 ("kbuild: introduce ccflags-y,
asflags-y and ldflags-y").

The following conversion scheme maybe used::

  EXTRA_AFLAGS    ->  asflags-y
  EXTRA_CFLAGS    ->  ccflags-y
  EXTRA_CPPFLAGS  ->  cppflags-y
  EXTRA_LDFLAGS   ->  ldflags-y

See:

  1. https://lore.kernel.org/lkml/20070930191054.GA15876@uranus.ravnborg.org/
  2. https://lore.kernel.org/lkml/1313384834-24433-12-git-send-email-lacombar@gmail.com/
  3. https://www.kernel.org/doc/html/latest/kbuild/makefiles.html#compilation-flags

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#189: FILE: fs/ntfs/attrib.c:269:
+	 *	   extend to match the discontinuity. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#198: FILE: fs/ntfs/attrib.c:447:
+	dst[loc].length		= dst[loc+1].vcn       - dst[loc].vcn;
 	               		         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#266: FILE: fs/ntfs/attrib.c:1100:
+BOOL find_attr(const ATTR_TYPES type, const ntfschar *name, const u32 name_len,
 		const IGNORE_CASE_BOOL ic, const u8 *val, const u32 val_len,

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#281: FILE: fs/ntfs/attrib.c:1148:
+			    (ntfschar*)((u8*)a + le16_to_cpu(a->name_offset)),

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#281: FILE: fs/ntfs/attrib.c:1148:
+			    (ntfschar*)((u8*)a + le16_to_cpu(a->name_offset)),

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#288: FILE: fs/ntfs/attrib.c:1153:
+					(ntfschar*)((u8*)a +

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#288: FILE: fs/ntfs/attrib.c:1153:
+					(ntfschar*)((u8*)a +

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#300: FILE: fs/ntfs/attrib.c:1167:
+					(ntfschar*)((u8*)a +

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#300: FILE: fs/ntfs/attrib.c:1167:
+					(ntfschar*)((u8*)a +

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#310: FILE: fs/ntfs/attrib.c:1358:
+static BOOL find_external_attr(const ATTR_TYPES type, const ntfschar *name,
 		const u32 name_len, const IGNORE_CASE_BOOL ic,

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#327: FILE: fs/ntfs/attrib.c:1420:
+		al_name = (ntfschar*)((u8*)al_entry + al_entry->name_offset);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#327: FILE: fs/ntfs/attrib.c:1420:
+		al_name = (ntfschar*)((u8*)al_entry + al_entry->name_offset);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#342: FILE: fs/ntfs/attrib.c:1469:
+				ntfs_are_names_equal((ntfschar*)((u8*)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#342: FILE: fs/ntfs/attrib.c:1469:
+				ntfs_are_names_equal((ntfschar*)((u8*)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#351: FILE: fs/ntfs/attrib.c:1542:
+			if (!ntfs_are_names_equal((ntfschar*)((u8*)a +

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#351: FILE: fs/ntfs/attrib.c:1542:
+			if (!ntfs_are_names_equal((ntfschar*)((u8*)a +

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#363: FILE: fs/ntfs/attrib.c:1627:
+BOOL lookup_attr(const ATTR_TYPES type, const ntfschar *name,
+		const u32 name_len, const IGNORE_CASE_BOOL ic,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#377: FILE: fs/ntfs/attrib.h:82:
+extern BOOL find_attr(const ATTR_TYPES type, const ntfschar *name,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#378: FILE: fs/ntfs/attrib.h:83:
+extern BOOL find_attr(const ATTR_TYPES type, const ntfschar *name,
 		const u32 name_len, const IGNORE_CASE_BOOL ic, const u8 *val,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#385: FILE: fs/ntfs/attrib.h:87:
+BOOL lookup_attr(const ATTR_TYPES type, const ntfschar *name,
+		const u32 name_len, const IGNORE_CASE_BOOL ic,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#409: FILE: fs/ntfs/dir.c:68:
+MFT_REF ntfs_lookup_inode_by_name(ntfs_inode *dir_ni, const ntfschar *uname,
 		const int uname_len, ntfs_name **res)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#417: FILE: fs/ntfs/dir.c:138:
+				(ntfschar*)&ie->key.file_name.file_name,

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#426: FILE: fs/ntfs/dir.c:189:
+				(ntfschar*)&ie->key.file_name.file_name,

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#453: FILE: fs/ntfs/dir.c:230:
+				(ntfschar*)&ie->key.file_name.file_name,

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#462: FILE: fs/ntfs/dir.c:249:
+				(ntfschar*)&ie->key.file_name.file_name,

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#471: FILE: fs/ntfs/dir.c:398:
+				(ntfschar*)&ie->key.file_name.file_name,

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#480: FILE: fs/ntfs/dir.c:448:
+				(ntfschar*)&ie->key.file_name.file_name,

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#507: FILE: fs/ntfs/dir.c:490:
+				(ntfschar*)&ie->key.file_name.file_name,

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#516: FILE: fs/ntfs/dir.c:509:
+				(ntfschar*)&ie->key.file_name.file_name,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#526: FILE: fs/ntfs/dir.c:611:
+u64 ntfs_lookup_inode_by_name(ntfs_inode *dir_ni, const ntfschar *uname,
 		const int uname_len)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#534: FILE: fs/ntfs/dir.c:692:
+				(ntfschar*)&ie->key.file_name.file_name,

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#543: FILE: fs/ntfs/dir.c:706:
+				(ntfschar*)&ie->key.file_name.file_name,

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#552: FILE: fs/ntfs/dir.c:725:
+				(ntfschar*)&ie->key.file_name.file_name,

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#561: FILE: fs/ntfs/dir.c:878:
+				(ntfschar*)&ie->key.file_name.file_name,

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#570: FILE: fs/ntfs/dir.c:891:
+				(ntfschar*)&ie->key.file_name.file_name,

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#579: FILE: fs/ntfs/dir.c:910:
+				(ntfschar*)&ie->key.file_name.file_name,

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#588: FILE: fs/ntfs/dir.c:1030:
+	name_len = ntfs_ucstonls(vol, (ntfschar*)&ie->key.file_name.file_name,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#589: FILE: fs/ntfs/dir.c:1031:
+	name_len = ntfs_ucstonls(vol, (ntfschar*)&ie->key.file_name.file_name,
 			ie->key.file_name.file_name_length, &name,

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#631: FILE: fs/ntfs/inode.c:125:
+		ni->name = (ntfschar*)kmalloc(i + sizeof(ntfschar), GFP_ATOMIC);

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#631: FILE: fs/ntfs/inode.c:125:
+		ni->name = (ntfschar*)kmalloc(i + sizeof(ntfschar), GFP_ATOMIC);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#766: FILE: fs/ntfs/namei.c:180:
+				(ntfschar*)&name->name, name->len,

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#783: FILE: fs/ntfs/namei.c:231:
+				(ntfschar*)&fn->file_name, fn->file_name_length,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#796: FILE: fs/ntfs/ntfs.h:177:
+extern BOOL ntfs_are_names_equal(const ntfschar *s1, size_t s1_len,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#797: FILE: fs/ntfs/ntfs.h:178:
+extern BOOL ntfs_are_names_equal(const ntfschar *s1, size_t s1_len,
+		const ntfschar *s2, size_t s2_len,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#803: FILE: fs/ntfs/ntfs.h:181:
+extern int ntfs_collate_names(const ntfschar *name1, const u32 name1_len,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#804: FILE: fs/ntfs/ntfs.h:182:
+extern int ntfs_collate_names(const ntfschar *name1, const u32 name1_len,
+		const ntfschar *name2, const u32 name2_len,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#813: FILE: fs/ntfs/ntfs.h:185:
+extern int ntfs_ucsncmp(const ntfschar *s1, const ntfschar *s2, size_t n);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#814: FILE: fs/ntfs/ntfs.h:186:
+extern int ntfs_ucsncasecmp(const ntfschar *s1, const ntfschar *s2, size_t n,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#815: FILE: fs/ntfs/ntfs.h:187:
+extern int ntfs_ucsncasecmp(const ntfschar *s1, const ntfschar *s2, size_t n,
+		const ntfschar *upcase, const u32 upcase_size);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#816: FILE: fs/ntfs/ntfs.h:188:
+extern void ntfs_upcase_name(ntfschar *name, u32 name_len,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#817: FILE: fs/ntfs/ntfs.h:189:
+extern void ntfs_upcase_name(ntfschar *name, u32 name_len,
+		const ntfschar *upcase, const u32 upcase_len);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#830: FILE: fs/ntfs/ntfs.h:198:
+extern int ntfs_ucstonls(const ntfs_volume *vol, const ntfschar *ins,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#831: FILE: fs/ntfs/ntfs.h:199:
+extern int ntfs_ucstonls(const ntfs_volume *vol, const ntfschar *ins,
 		const int ins_len, unsigned char **outs, int outs_len);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#835: FILE: fs/ntfs/ntfs.h:202:
+extern ntfschar *generate_default_upcase(void);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#851: FILE: fs/ntfs/super.c:950:
+	if (!ino->i_size || ino->i_size & (sizeof(ntfschar) - 1) ||
+			ino->i_size > 64ULL * 1024 * sizeof(ntfschar))

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#854: FILE: fs/ntfs/super.c:952:
+	vol->upcase = (ntfschar*)ntfs_malloc_nofs(ino->i_size);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#872: FILE: fs/ntfs/super.c:2062:
+			(NTFS_MAX_NAME_LEN+1) * sizeof(ntfschar), 0,
 			                  ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#899: FILE: fs/ntfs/unistr.c:65:
+BOOL ntfs_are_names_equal(const ntfschar *s1, size_t s1_len,
+		const ntfschar *s2, size_t s2_len, const IGNORE_CASE_BOOL ic,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#911: FILE: fs/ntfs/unistr.c:94:
+int ntfs_collate_names(const ntfschar *name1, const u32 name1_len,
+		const ntfschar *name2, const u32 name2_len,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#941: FILE: fs/ntfs/unistr.c:182:
+int ntfs_ucsncasecmp(const ntfschar *s1, const ntfschar *s2, size_t n,
+		const ntfschar *upcase, const u32 upcase_size)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#954: FILE: fs/ntfs/unistr.c:203:
+void ntfs_upcase_name(ntfschar *name, u32 name_len, const ntfschar *upcase,
 		const u32 upcase_len)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#970: FILE: fs/ntfs/unistr.c:216:
+	ntfs_upcase_name((ntfschar*)&file_name_attr->file_name,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#971: FILE: fs/ntfs/unistr.c:217:
+	ntfs_upcase_name((ntfschar*)&file_name_attr->file_name,
 			file_name_attr->file_name_length, upcase, upcase_len);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#981: FILE: fs/ntfs/unistr.c:225:
+	return ntfs_collate_names((ntfschar*)&file_name_attr1->file_name,

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#984: FILE: fs/ntfs/unistr.c:227:
+			(ntfschar*)&file_name_attr2->file_name,

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1004: FILE: fs/ntfs/unistr.c:265:
+		ucs = (ntfschar*)kmem_cache_alloc(ntfs_name_cache, SLAB_NOFS);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1014: FILE: fs/ntfs/unistr.c:322:
+int ntfs_ucstonls(const ntfs_volume *vol, const ntfschar *ins,
 		const int ins_len, unsigned char **outs, int outs_len)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000281856.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 36 errors, 4 warnings, 30 checks, 848 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000281856.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
