WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#38: 
diff -urN v2.5.22/include/linux/wait.h wq-func-v2.5.22-c.diff/include/linux/wait.h

WARNING:NEW_TYPEDEFS: do not add new typedefs
#45: FILE: include/linux/wait.h:22:
+typedef struct __wait_queue wait_queue_t;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#46: FILE: include/linux/wait.h:23:
+typedef int (*wait_queue_func_t)(wait_queue_t *wait, unsigned mode, int sync);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#47: FILE: include/linux/wait.h:24:
+extern int default_wake_function(wait_queue_t *wait, unsigned mode, int sync);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#47: FILE: include/linux/wait.h:24:
+extern int default_wake_function(wait_queue_t *wait, unsigned mode, int sync);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#64: FILE: include/linux/wait.h:47:
+	func:		default_wake_function,				\
 	    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:INDENTED_LABEL: labels should not be indented
#64: FILE: include/linux/wait.h:47:
+	func:		default_wake_function,				\

WARNING:INDENTED_LABEL: labels should not be indented
#72: FILE: include/linux/wait.h:54:
+	lock:		SPIN_LOCK_UNLOCKED,				\

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#84: FILE: include/linux/wait.h:74:
+static inline void init_waitqueue_func_entry(wait_queue_t *q,
+					wait_queue_func_t func)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'q' - possible side-effects?
#96: FILE: include/linux/wait.h:106:
+#define add_wait_queue_cond(q, wait, cond) \
+	({							\
+		unsigned long flags;				\
+		int _raced = 0;					\
+		spin_lock_irqsave(&(q)->lock, flags);	\
+		(wait)->flags = 0;				\
+		__add_wait_queue((q), (wait));			\
+		rmb();						\
+		if (!(cond)) {					\
+			_raced = 1;				\
+			__remove_wait_queue((q), (wait));	\
+		}						\
+		spin_lock_irqrestore(&(q)->lock, flags);	\
+		_raced;						\
+	})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'wait' - possible side-effects?
#96: FILE: include/linux/wait.h:106:
+#define add_wait_queue_cond(q, wait, cond) \
+	({							\
+		unsigned long flags;				\
+		int _raced = 0;					\
+		spin_lock_irqsave(&(q)->lock, flags);	\
+		(wait)->flags = 0;				\
+		__add_wait_queue((q), (wait));			\
+		rmb();						\
+		if (!(cond)) {					\
+			_raced = 1;				\
+			__remove_wait_queue((q), (wait));	\
+		}						\
+		spin_lock_irqrestore(&(q)->lock, flags);	\
+		_raced;						\
+	})

WARNING:MEMORY_BARRIER: memory barrier without comment
#103: FILE: include/linux/wait.h:113:
+		rmb();						\

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#122: FILE: kernel/sched.c:908:
+int default_wake_function(wait_queue_t *curr, unsigned mode, int sync)

WARNING:LINE_SPACING: Missing a blank line after declarations
#125: FILE: kernel/sched.c:911:
+	task_t *p = curr->task;
+	return ((p->state & mode) && try_to_wake_up(p, sync));

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#144: FILE: kernel/sched.c:929:
+		unsigned flags;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000454769.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 10 warnings, 4 checks, 109 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000454769.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
