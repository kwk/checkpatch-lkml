ERROR:GLOBAL_INITIALISERS: do not initialise globals to NULL
#62: FILE: arch/um/kernel/irq.c:82:
+struct irq_fd *active_fds = NULL;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#65: FILE: arch/um/kernel/irq.c:85:
+extern void free_irqs(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:SPACING: space required before the open parenthesis '('
#72: FILE: arch/um/kernel/irq.c:92:
+	if(smp_sigio_handler()) return;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#72: FILE: arch/um/kernel/irq.c:92:
+	if(smp_sigio_handler()) return;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:SPACING: space required before the open brace '{'
#73: FILE: arch/um/kernel/irq.c:93:
+	while(1){

ERROR:SPACING: space required before the open parenthesis '('
#73: FILE: arch/um/kernel/irq.c:93:
+	while(1){

ERROR:SPACING: space required before the open parenthesis '('
#76: FILE: arch/um/kernel/irq.c:96:
+			if(n == -EINTR) continue;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#76: FILE: arch/um/kernel/irq.c:96:
+			if(n == -EINTR) continue;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#77: FILE: arch/um/kernel/irq.c:97:
+			else break;

ERROR:SPACING: space required before the open brace '{'
#80: FILE: arch/um/kernel/irq.c:100:
+		for(irq_fd = active_fds; irq_fd != NULL; irq_fd = irq_fd->next){

ERROR:SPACING: space required before the open parenthesis '('
#80: FILE: arch/um/kernel/irq.c:100:
+		for(irq_fd = active_fds; irq_fd != NULL; irq_fd = irq_fd->next){

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "irq_fd"
#80: FILE: arch/um/kernel/irq.c:100:
+		for(irq_fd = active_fds; irq_fd != NULL; irq_fd = irq_fd->next){

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:SPACING: space required before the open brace '{'
#81: FILE: arch/um/kernel/irq.c:101:
+			if(irq_fd->current_events != 0){

ERROR:SPACING: space required before the open parenthesis '('
#81: FILE: arch/um/kernel/irq.c:101:
+			if(irq_fd->current_events != 0){

ERROR:SPACING: space required before the open brace '{'
#93: FILE: arch/um/kernel/irq.c:113:
+	if(os_isatty(fd)){

ERROR:SPACING: space required before the open parenthesis '('
#93: FILE: arch/um/kernel/irq.c:113:
+	if(os_isatty(fd)){

ERROR:SPACING: space required before the open brace '{'
#94: FILE: arch/um/kernel/irq.c:114:
+		if((type == IRQ_WRITE) && !pty_output_sigio){

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'type == IRQ_WRITE'
#94: FILE: arch/um/kernel/irq.c:114:
+		if((type == IRQ_WRITE) && !pty_output_sigio){

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:SPACING: space required before the open parenthesis '('
#94: FILE: arch/um/kernel/irq.c:114:
+		if((type == IRQ_WRITE) && !pty_output_sigio){

ERROR:SPACING: space required before the open brace '{'
#98: FILE: arch/um/kernel/irq.c:118:
+		else if((type == IRQ_READ) && !pty_close_sigio){

ERROR:SPACING: space required before the open parenthesis '('
#98: FILE: arch/um/kernel/irq.c:118:
+		else if((type == IRQ_READ) && !pty_close_sigio){

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#98: FILE: arch/um/kernel/irq.c:118:
+		}
+		else if((type == IRQ_READ) && !pty_close_sigio){

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#105: FILE: arch/um/kernel/irq.c:125:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#115: FILE: arch/um/kernel/irq.c:135:
+	if(err < 0)

ERROR:SPACING: space required before the open parenthesis '('
#120: FILE: arch/um/kernel/irq.c:140:
+	if(new_fd == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!new_fd"
#120: FILE: arch/um/kernel/irq.c:140:
+	if(new_fd == NULL)

ERROR:SPACING: space required before the open parenthesis '('
#123: FILE: arch/um/kernel/irq.c:143:
+	if(type == IRQ_READ) events = UM_POLLIN | UM_POLLPRI;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#123: FILE: arch/um/kernel/irq.c:143:
+	if(type == IRQ_READ) events = UM_POLLIN | UM_POLLPRI;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#124: FILE: arch/um/kernel/irq.c:144:
+	else events = UM_POLLOUT;

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#125: FILE: arch/um/kernel/irq.c:145:
+^I*new_fd = ((struct irq_fd) { .next  ^I^I= NULL,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#126: FILE: arch/um/kernel/irq.c:146:
+^I^I^I^I     .id ^I^I= dev_id,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#127: FILE: arch/um/kernel/irq.c:147:
+^I^I^I^I     .fd ^I^I= fd,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#128: FILE: arch/um/kernel/irq.c:148:
+^I^I^I^I     .type ^I^I= type,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#129: FILE: arch/um/kernel/irq.c:149:
+^I^I^I^I     .irq ^I^I= irq,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#130: FILE: arch/um/kernel/irq.c:150:
+^I^I^I^I     .pid  ^I^I= pid,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#131: FILE: arch/um/kernel/irq.c:151:
+^I^I^I^I     .events ^I^I= events,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#132: FILE: arch/um/kernel/irq.c:152:
+^I^I^I^I     .current_events ^I= 0 } );$

ERROR:SPACING: space prohibited before that close parenthesis ')'
#132: FILE: arch/um/kernel/irq.c:152:
+				     .current_events 	= 0 } );

ERROR:SPACING: space required before the open brace '{'
#148: FILE: arch/um/kernel/irq.c:168:
+	for(irq_fd = active_fds; irq_fd != NULL; irq_fd = irq_fd->next){

ERROR:SPACING: space required before the open parenthesis '('
#148: FILE: arch/um/kernel/irq.c:168:
+	for(irq_fd = active_fds; irq_fd != NULL; irq_fd = irq_fd->next){

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "irq_fd"
#148: FILE: arch/um/kernel/irq.c:168:
+	for(irq_fd = active_fds; irq_fd != NULL; irq_fd = irq_fd->next){

ERROR:SPACING: space required before the open brace '{'
#149: FILE: arch/um/kernel/irq.c:169:
+		if((irq_fd->fd == fd) && (irq_fd->type == type)){

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'irq_fd->fd == fd'
#149: FILE: arch/um/kernel/irq.c:169:
+		if((irq_fd->fd == fd) && (irq_fd->type == type)){

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'irq_fd->type == type'
#149: FILE: arch/um/kernel/irq.c:169:
+		if((irq_fd->fd == fd) && (irq_fd->type == type)){

ERROR:SPACING: space required before the open parenthesis '('
#149: FILE: arch/um/kernel/irq.c:169:
+		if((irq_fd->fd == fd) && (irq_fd->type == type)){

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#150: FILE: arch/um/kernel/irq.c:170:
+			printk("Registering fd %d twice\n", fd);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#151: FILE: arch/um/kernel/irq.c:171:
+			printk("Irqs : %d, %d\n", irq_fd->irq, irq);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#152: FILE: arch/um/kernel/irq.c:172:
+			printk("Ids : 0x%p, 0x%p\n", irq_fd->id, dev_id);

ERROR:SPACING: space required before the open parenthesis '('
#158: FILE: arch/um/kernel/irq.c:178:
+	if(type == IRQ_WRITE)

ERROR:SPACING: space required before the open brace '{'
#164: FILE: arch/um/kernel/irq.c:184:
+	while(1){

ERROR:SPACING: space required before the open parenthesis '('
#164: FILE: arch/um/kernel/irq.c:184:
+	while(1){

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "tmp_pfd"
#181: FILE: arch/um/kernel/irq.c:201:
+		if (tmp_pfd != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tmp_pfd"
#187: FILE: arch/um/kernel/irq.c:207:
+		if (tmp_pfd == NULL)

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#204: FILE: arch/um/kernel/irq.c:224:
+	return(0);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

CHECK:SPACING: No space is necessary after a cast
#245: FILE: arch/um/kernel/irq.c:265:
+	return(irq->fd == *((int *) fd));

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#259: FILE: arch/um/kernel/irq.c:279:
+	for(irq=active_fds; irq != NULL; irq = irq->next){
 	       ^

ERROR:SPACING: space required before the open brace '{'
#259: FILE: arch/um/kernel/irq.c:279:
+	for(irq=active_fds; irq != NULL; irq = irq->next){

ERROR:SPACING: space required before the open parenthesis '('
#259: FILE: arch/um/kernel/irq.c:279:
+	for(irq=active_fds; irq != NULL; irq = irq->next){

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "irq"
#259: FILE: arch/um/kernel/irq.c:279:
+	for(irq=active_fds; irq != NULL; irq = irq->next){

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'irq->fd == fd'
#260: FILE: arch/um/kernel/irq.c:280:
+		if((irq->fd == fd) && (irq->irq == irqnum)) break;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'irq->irq == irqnum'
#260: FILE: arch/um/kernel/irq.c:280:
+		if((irq->fd == fd) && (irq->irq == irqnum)) break;

ERROR:SPACING: space required before the open parenthesis '('
#260: FILE: arch/um/kernel/irq.c:280:
+		if((irq->fd == fd) && (irq->irq == irqnum)) break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#260: FILE: arch/um/kernel/irq.c:280:
+		if((irq->fd == fd) && (irq->irq == irqnum)) break;

ERROR:SPACING: space required before the open brace '{'
#263: FILE: arch/um/kernel/irq.c:283:
+	if(irq == NULL){

ERROR:SPACING: space required before the open parenthesis '('
#263: FILE: arch/um/kernel/irq.c:283:
+	if(irq == NULL){

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!irq"
#263: FILE: arch/um/kernel/irq.c:283:
+	if(irq == NULL){

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#264: FILE: arch/um/kernel/irq.c:284:
+		printk("find_irq_by_fd doesn't have descriptor %d\n", fd);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'find_irq_by_fd', this function's name, in a string
#264: FILE: arch/um/kernel/irq.c:284:
+		printk("find_irq_by_fd doesn't have descriptor %d\n", fd);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:SPACING: space required before the open brace '{'
#268: FILE: arch/um/kernel/irq.c:288:
+	if((fdi != -1) && (fdi != fd)){

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'fdi != fd'
#268: FILE: arch/um/kernel/irq.c:288:
+	if((fdi != -1) && (fdi != fd)){

ERROR:SPACING: space required before the open parenthesis '('
#268: FILE: arch/um/kernel/irq.c:288:
+	if((fdi != -1) && (fdi != fd)){

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#269: FILE: arch/um/kernel/irq.c:289:
+		printk("find_irq_by_fd - mismatch between active_fds and "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'find_irq_by_fd', this function's name, in a string
#269: FILE: arch/um/kernel/irq.c:289:
+		printk("find_irq_by_fd - mismatch between active_fds and "

WARNING:SPLIT_STRING: quoted string split across lines
#270: FILE: arch/um/kernel/irq.c:290:
+		printk("find_irq_by_fd - mismatch between active_fds and "
+		       "pollfds, fd %d vs %d, need %d\n", irq->fd,

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:SPACING: space required before the open brace '{'
#288: FILE: arch/um/kernel/irq.c:308:
+	if(irq == NULL){

ERROR:SPACING: space required before the open parenthesis '('
#288: FILE: arch/um/kernel/irq.c:308:
+	if(irq == NULL){

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!irq"
#288: FILE: arch/um/kernel/irq.c:308:
+	if(irq == NULL){

ERROR:SPACING: space required before the open parenthesis '('
#309: FILE: arch/um/kernel/irq.c:329:
+	if(irq == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!irq"
#309: FILE: arch/um/kernel/irq.c:329:
+	if(irq == NULL)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#321: FILE: arch/um/kernel/irq.c:341:
+	for(irq=active_fds;irq != NULL;irq = irq->next){
 	       ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#321: FILE: arch/um/kernel/irq.c:341:
+	for(irq=active_fds;irq != NULL;irq = irq->next){
 	                  ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#321: FILE: arch/um/kernel/irq.c:341:
+	for(irq=active_fds;irq != NULL;irq = irq->next){
 	                              ^

ERROR:SPACING: space required before the open brace '{'
#321: FILE: arch/um/kernel/irq.c:341:
+	for(irq=active_fds;irq != NULL;irq = irq->next){

ERROR:SPACING: space required before the open parenthesis '('
#321: FILE: arch/um/kernel/irq.c:341:
+	for(irq=active_fds;irq != NULL;irq = irq->next){

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "irq"
#321: FILE: arch/um/kernel/irq.c:341:
+	for(irq=active_fds;irq != NULL;irq = irq->next){

ERROR:SPACING: space required before the open parenthesis '('
#323: FILE: arch/um/kernel/irq.c:343:
+		if(err)

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#329: FILE: arch/um/kernel/irq.c:349:
+	return(0);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#339: FILE: arch/um/kernel/irq.c:359:
+	for(irq=active_fds;irq != NULL;irq = irq->next){
 	       ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#339: FILE: arch/um/kernel/irq.c:359:
+	for(irq=active_fds;irq != NULL;irq = irq->next){
 	                  ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#339: FILE: arch/um/kernel/irq.c:359:
+	for(irq=active_fds;irq != NULL;irq = irq->next){
 	                              ^

ERROR:SPACING: space required before the open brace '{'
#339: FILE: arch/um/kernel/irq.c:359:
+	for(irq=active_fds;irq != NULL;irq = irq->next){

ERROR:SPACING: space required before the open parenthesis '('
#339: FILE: arch/um/kernel/irq.c:359:
+	for(irq=active_fds;irq != NULL;irq = irq->next){

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "irq"
#339: FILE: arch/um/kernel/irq.c:359:
+	for(irq=active_fds;irq != NULL;irq = irq->next){

ERROR:SPACING: space required before the open brace '{'
#341: FILE: arch/um/kernel/irq.c:361:
+		if(err < 0){

ERROR:SPACING: space required before the open parenthesis '('
#341: FILE: arch/um/kernel/irq.c:361:
+		if(err < 0){

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#345: FILE: arch/um/kernel/irq.c:365:
+			printk("Failed to forward %d to pid %d, err = %d\n",

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000090846.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 59 errors, 18 warnings, 19 checks, 314 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000090846.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
