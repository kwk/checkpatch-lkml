ERROR:TRAILING_WHITESPACE: trailing whitespace
#272: FILE: Documentation/RCU/proc.txt:178:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#314: FILE: fs/proc/proc_misc.c:571:
+	int len;
+	extern int rcu_read_proc_data(char *page);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#314: FILE: fs/proc/proc_misc.c:571:
+	extern int rcu_read_proc_data(char *page);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:LINE_SPACING: Missing a blank line after declarations
#324: FILE: fs/proc/proc_misc.c:581:
+	int len;
+	extern int rcu_read_proc_gp_data(char *page);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#324: FILE: fs/proc/proc_misc.c:581:
+	extern int rcu_read_proc_gp_data(char *page);

WARNING:LINE_SPACING: Missing a blank line after declarations
#334: FILE: fs/proc/proc_misc.c:591:
+	int len;
+	extern int rcu_read_proc_ptrs_data(char *page);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#334: FILE: fs/proc/proc_misc.c:591:
+	extern int rcu_read_proc_ptrs_data(char *page);

WARNING:LINE_SPACING: Missing a blank line after declarations
#344: FILE: fs/proc/proc_misc.c:601:
+	int len;
+	extern int rcu_read_proc_ctrs_data(char *page);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#344: FILE: fs/proc/proc_misc.c:601:
+	extern int rcu_read_proc_ctrs_data(char *page);

ERROR:CODE_INDENT: code indent should use tabs where possible
#353: FILE: fs/proc/proc_misc.c:610:
+^I^I^I         int count, int *eof, void *data)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#353: FILE: fs/proc/proc_misc.c:610:
+int rcu_read_proc_torture_writer(char *page, char **start, off_t off,
+			         int count, int *eof, void *data)

WARNING:LINE_SPACING: Missing a blank line after declarations
#356: FILE: fs/proc/proc_misc.c:613:
+	int len;
+	extern int rcu_read_proc_torture_writer_data(char *page);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#356: FILE: fs/proc/proc_misc.c:613:
+	extern int rcu_read_proc_torture_writer_data(char *page);

ERROR:CODE_INDENT: code indent should use tabs where possible
#363: FILE: fs/proc/proc_misc.c:620:
+^I^I^I         int count, int *eof, void *data)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#363: FILE: fs/proc/proc_misc.c:620:
+int rcu_read_proc_torture_reader(char *page, char **start, off_t off,
+			         int count, int *eof, void *data)

WARNING:LINE_SPACING: Missing a blank line after declarations
#366: FILE: fs/proc/proc_misc.c:623:
+	int len;
+	extern int rcu_read_proc_torture_reader_data(char *page);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#366: FILE: fs/proc/proc_misc.c:623:
+	extern int rcu_read_proc_torture_reader_data(char *page);

ERROR:CODE_INDENT: code indent should use tabs where possible
#373: FILE: fs/proc/proc_misc.c:630:
+^I^I^I        int count, int *eof, void *data)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#373: FILE: fs/proc/proc_misc.c:630:
+int rcu_read_proc_torture_stats(char *page, char **start, off_t off,
+			        int count, int *eof, void *data)

WARNING:LINE_SPACING: Missing a blank line after declarations
#376: FILE: fs/proc/proc_misc.c:633:
+	int len;
+	extern int rcu_read_proc_torture_stats_data(char *page);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#376: FILE: fs/proc/proc_misc.c:633:
+	extern int rcu_read_proc_torture_stats_data(char *page);

WARNING:DEPRECATED_API: Deprecated use of 'call_rcu_bh', prefer 'call_rcu' instead
#434: FILE: include/linux/rcupdate.h:200:
+#define call_rcu_bh(head, rcu) call_rcu(head, rcu)

Usage of a deprecated RCU API is detected.  It is recommended to replace
old flavourful RCU APIs by their new vanilla-RCU counterparts.

The full list of available RCU APIs can be viewed from the kernel docs.

See: https://www.kernel.org/doc/html/latest/RCU/whatisRCU.html#full-list-of-rcu-apis

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#436: FILE: include/linux/rcupdate.h:202:
+extern void rcu_read_lock(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#437: FILE: include/linux/rcupdate.h:203:
+extern void rcu_read_unlock(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#438: FILE: include/linux/rcupdate.h:204:
+extern int rcu_pending(int cpu);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#474: FILE: include/linux/rcupdate.h:296:
+extern void synchronize_sched(void);

WARNING:DEPRECATED_API: Deprecated use of 'synchronize_sched', prefer 'synchronize_rcu' instead
#474: FILE: include/linux/rcupdate.h:296:
+extern void synchronize_sched(void);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#555: FILE: kernel/rcupdate.c:30:
+ * ^I^IDocumentation/RCU/ *.txt$

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#636: FILE: kernel/rcupdate.c:489:
+EXPORT_SYMBOL(call_rcu);  /* WARNING: GPL-only in April 2006. */

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#637: FILE: kernel/rcupdate.c:490:
+EXPORT_SYMBOL(call_rcu_bh);  /* WARNING: GPL-only in April 2006. */

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#639: FILE: kernel/rcupdate.c:492:
+EXPORT_SYMBOL(synchronize_kernel);  /* WARNING: GPL-only in April 2006. */

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#678: FILE: kernel/rcupdate.c:531:
+};
+struct rcu_ctrlblk {

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#682: FILE: kernel/rcupdate.c:535:
 };
+static struct rcu_data rcu_data;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#687: FILE: kernel/rcupdate.c:540:
+};
+static DEFINE_PER_CPU(atomic_t [2], rcu_flipctr) =

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#688: FILE: kernel/rcupdate.c:541:
+static DEFINE_PER_CPU(atomic_t [2], rcu_flipctr) =
+	{ ATOMIC_INIT(0), ATOMIC_INIT(0) };

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#703: FILE: kernel/rcupdate.c:551:
+	if (current->rcu_read_lock_nesting++ == 0) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#716: FILE: kernel/rcupdate.c:564:
+		if (unlikely(flipctr != (rcu_ctrlblk.completed & 0x1))) {
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#755: FILE: kernel/rcupdate.c:595:
+	if (--current->rcu_read_lock_nesting == 0) {
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "current->rcu_flipctr2"
#766: FILE: kernel/rcupdate.c:606:
+		if (unlikely(current->rcu_flipctr2 != NULL)) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#777: FILE: kernel/rcupdate.c:617:
+{
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rcu_data.waitlist"
#779: FILE: kernel/rcupdate.c:619:
+		if (rcu_data.waitlist != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rcu_data.nextlist"
#788: FILE: kernel/rcupdate.c:628:
+		if (rcu_data.nextlist != NULL) {

WARNING:MEMORY_BARRIER: memory barrier without comment
#873: FILE: kernel/rcupdate.c:704:
+	smp_mb();

WARNING:BRACES: braces {} are not necessary for single statement blocks
#889: FILE: kernel/rcupdate.c:720:
+		if (rcu_ctrlblk.completed == rcu_data.completed) {
+			return;
+		}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rcu_data.donelist"
#898: FILE: kernel/rcupdate.c:729:
+	if (rcu_data.donelist == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!list"
#914: FILE: kernel/rcupdate.c:745:
+	if (list == NULL) {

WARNING:DEPRECATED_API: Deprecated use of 'synchronize_sched', prefer 'synchronize_rcu' instead
#961: FILE: kernel/rcupdate.c:792:
+synchronize_sched(void)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#966: FILE: kernel/rcupdate.c:797:
+	if (sched_getaffinity(0, &oldmask) < 0) {
+		oldmask = cpu_possible_map;
+	}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rcu_data.donelist"
#979: FILE: kernel/rcupdate.c:810:
+	return (rcu_data.donelist != NULL ||

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rcu_data.waitlist"
#980: FILE: kernel/rcupdate.c:811:
+		rcu_data.waitlist != NULL ||

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rcu_data.nextlist"
#981: FILE: kernel/rcupdate.c:812:
+		rcu_data.nextlist != NULL);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#991: FILE: kernel/rcupdate.c:822:
+/*&&&&*/printk("WARNING: experimental RCU implementation.\n");

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1073: FILE: kernel/rcupdate.c:904:
+	return (cnt);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1078: FILE: kernel/rcupdate.c:909:
+EXPORT_SYMBOL(call_rcu); /* WARNING: GPL-only in April 2006. */

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1082: FILE: kernel/rcupdate.c:912:
+EXPORT_SYMBOL(rcu_read_lock);  /* WARNING: GPL-only in April 2006. */

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1083: FILE: kernel/rcupdate.c:913:
+EXPORT_SYMBOL(rcu_read_unlock);  /* WARNING: GPL-only in April 2006. */

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1084: FILE: kernel/rcupdate.c:914:
+EXPORT_SYMBOL(synchronize_kernel);  /* WARNING: Removal in April 2006. */

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#1099: FILE: kernel/rcupdate.c:929:
+static struct rcu_torture *rcu_torture_current = NULL;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#1100: FILE: kernel/rcupdate.c:930:
+static long rcu_torture_current_version = 0;

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1104: FILE: kernel/rcupdate.c:934:
+static DEFINE_PER_CPU(long [RCU_TORTURE_PIPE_LEN + 1], rcu_torture_count) =
+	{ 0 };

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1106: FILE: kernel/rcupdate.c:936:
+static DEFINE_PER_CPU(long [RCU_TORTURE_PIPE_LEN + 1], rcu_torture_batch) =
+	{ 0 };

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1108: FILE: kernel/rcupdate.c:938:
+static atomic_t rcu_torture_wcount[RCU_TORTURE_PIPE_LEN + 1] =
+	{ ATOMIC_INIT(0) };

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1129: FILE: kernel/rcupdate.c:959:
+		return (NULL);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1135: FILE: kernel/rcupdate.c:965:
+	return (container_of(p, struct rcu_torture, rtort_free));

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1157: FILE: kernel/rcupdate.c:987:
+	if (i > RCU_TORTURE_PIPE_LEN) {
+		i = RCU_TORTURE_PIPE_LEN;
+	}

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#1161: FILE: kernel/rcupdate.c:991:
+	if (++rp->rtort_pipe_count >= RCU_TORTURE_PIPE_LEN) {
[...]
+	} else {
[...]

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1194: FILE: kernel/rcupdate.c:1024:
+	return (swahw32(rrsp->rrs_state));

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1228: FILE: kernel/rcupdate.c:1058:
+		if (rcu_ctrlblk.completed == oldbatch) {
+			continue;
+		}

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1231: FILE: kernel/rcupdate.c:1061:
+		if ((rp = rcu_torture_alloc()) == NULL) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1231: FILE: kernel/rcupdate.c:1061:
+		if ((rp = rcu_torture_alloc()) == NULL) {
+			continue;
+		}

WARNING:MEMORY_BARRIER: memory barrier without comment
#1238: FILE: kernel/rcupdate.c:1068:
+		smp_wmb();

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "old_rp"
#1239: FILE: kernel/rcupdate.c:1069:
+		if (old_rp != NULL) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1241: FILE: kernel/rcupdate.c:1071:
+			if (i > RCU_TORTURE_PIPE_LEN) {
+				i = RCU_TORTURE_PIPE_LEN;
+			}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!p"
#1277: FILE: kernel/rcupdate.c:1107:
+		if (p == NULL) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1322: FILE: kernel/rcupdate.c:1152:
+		if (pipesummary[i] != 0) {
+			break;
+		}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1334: FILE: kernel/rcupdate.c:1164:
+	if (i > 1) {
+		cnt += sprintf(&page[cnt], "!!! ");
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1338: FILE: kernel/rcupdate.c:1168:
+	for (i = 0; i < RCU_TORTURE_PIPE_LEN + 1; i++) {
+		cnt += sprintf(&page[cnt], " %ld", pipesummary[i]);
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1342: FILE: kernel/rcupdate.c:1172:
+	for (i = 0; i < RCU_TORTURE_PIPE_LEN; i++) {
+		cnt += sprintf(&page[cnt], " %ld", batchsummary[i]);
+	}

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1351: FILE: kernel/rcupdate.c:1181:
+	return (cnt);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1353: FILE: kernel/rcupdate.c:1183:
+
+}

WARNING:ARRAY_SIZE: Prefer ARRAY_SIZE(rcu_tortures)
#1360: FILE: kernel/rcupdate.c:1190:
+	for (i = 0; i < sizeof(rcu_tortures) / sizeof(rcu_tortures[0]); i++) {

The ARRAY_SIZE(foo) macro should be preferred over
sizeof(foo)/sizeof(foo[0]) for finding number of elements in an
array.

The macro is defined in include/linux/kernel.h::

  #define ARRAY_SIZE(x) (sizeof(x) / sizeof((x)[0]))

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000161566.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 16 errors, 40 warnings, 25 checks, 1245 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000161566.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
