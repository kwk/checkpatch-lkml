WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#33: 
    the sysfs file being removed in sysfs_remove_dir(). There os less chance

WARNING:TYPO_SPELLING: 'vaild' may be misspelled - perhaps 'valid'?
#35: 
    s_dentry field to check if the file dentry is vaild instead of doing a 
                                                  ^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'accomodate' may be misspelled - perhaps 'accommodate'?
#45: 
 o Code changes to accomodate latest sysfs changes like in sysfs_rename_dir,
                   ^^^^^^^^^^

WARNING:TYPO_SPELLING: 'direcotry' may be misspelled - perhaps 'directory'?
#83: 
  filed of dentry corresponding to the kobject's direcotry. 
                                                 ^^^^^^^^^

WARNING:TYPO_SPELLING: 'successfull' may be misspelled - perhaps 'successful'?
#88: 
  field. As after instantiating we can get a successfull lookup for the dentry
                                             ^^^^^^^^^^^

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#110: FILE: fs/sysfs/dir.c:15:
+struct inode_operations sysfs_dir_inode_operations = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct file_operations should normally be const
#114: FILE: fs/sysfs/dir.c:19:
+struct file_operations sysfs_dir_operations = {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#122: FILE: fs/sysfs/dir.c:27:
+static void sysfs_d_iput(struct dentry * dentry, struct inode * inode) $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#122: FILE: fs/sysfs/dir.c:27:
+static void sysfs_d_iput(struct dentry * dentry, struct inode * inode) 

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#122: FILE: fs/sysfs/dir.c:27:
+static void sysfs_d_iput(struct dentry * dentry, struct inode * inode) 

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#124: FILE: fs/sysfs/dir.c:29:
+	struct sysfs_dirent * sd = dentry->d_fsdata;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#127: FILE: fs/sysfs/dir.c:32:
+		BUG_ON(sd->s_dentry != dentry);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#131: FILE: fs/sysfs/dir.c:36:
+	iput(inode);
 	^^^^

WARNING:CONST_STRUCT: struct dentry_operations should normally be const
#134: FILE: fs/sysfs/dir.c:39:
+static struct dentry_operations sysfs_dentry_ops = {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#138: FILE: fs/sysfs/dir.c:43:
+const unsigned char * sysfs_get_name(struct sysfs_dirent *sd)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#140: FILE: fs/sysfs/dir.c:45:
+	struct attribute * attr;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#141: FILE: fs/sysfs/dir.c:46:
+	struct bin_attribute * bin_attr;

ERROR:POINTER_LOCATION: "foo  * bar" should be "foo  *bar"
#142: FILE: fs/sysfs/dir.c:47:
+	struct sysfs_symlink  * sl;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#145: FILE: fs/sysfs/dir.c:50:
+		BUG();

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#147: FILE: fs/sysfs/dir.c:52:
+	switch (sd->s_type) {
+		case SYSFS_KOBJECT:
+		case SYSFS_KOBJ_ATTR_GROUP:
[...]
+		case SYSFS_KOBJ_ATTR:
[...]
+		case SYSFS_KOBJ_BIN_ATTR:
[...]
+		case SYSFS_KOBJ_LINK:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#168: FILE: fs/sysfs/dir.c:73:
+static int init_file(struct inode * inode)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#187: FILE: fs/sysfs/dir.c:90:
+/* attaches attribute's sysfs_dirent to the dentry corresponding to the $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#190: FILE: fs/sysfs/dir.c:93:
+static int sysfs_attach_attr(struct sysfs_dirent * sd, struct dentry * dentry)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#190: FILE: fs/sysfs/dir.c:93:
+static int sysfs_attach_attr(struct sysfs_dirent * sd, struct dentry * dentry)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#192: FILE: fs/sysfs/dir.c:95:
+	struct attribute * attr = NULL;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#193: FILE: fs/sysfs/dir.c:96:
+	struct bin_attribute * bin_attr = NULL;

ERROR:CODE_INDENT: code indent should use tabs where possible
#194: FILE: fs/sysfs/dir.c:97:
+        int (* init) (struct inode *) = NULL;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#194: FILE: fs/sysfs/dir.c:97:
+        int (* init) (struct inode *) = NULL;$

WARNING:SPACING: Unnecessary space before function pointer name
#194: FILE: fs/sysfs/dir.c:97:
+        int (* init) (struct inode *) = NULL;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: Unnecessary space before function pointer arguments
#194: FILE: fs/sysfs/dir.c:97:
+        int (* init) (struct inode *) = NULL;

ERROR:SPACING: space prohibited after that '*' (ctx:BxW)
#194: FILE: fs/sysfs/dir.c:97:
+        int (* init) (struct inode *) = NULL;
              ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#197: FILE: fs/sysfs/dir.c:100:
+        if (sd->s_type & SYSFS_KOBJ_BIN_ATTR) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#197: FILE: fs/sysfs/dir.c:100:
+        if (sd->s_type & SYSFS_KOBJ_BIN_ATTR) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#198: FILE: fs/sysfs/dir.c:101:
+                bin_attr = sd->s_element;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#198: FILE: fs/sysfs/dir.c:101:
+                bin_attr = sd->s_element;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#199: FILE: fs/sysfs/dir.c:102:
+                attr = &bin_attr->attr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#199: FILE: fs/sysfs/dir.c:102:
+                attr = &bin_attr->attr;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#200: FILE: fs/sysfs/dir.c:103:
+        } else {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#200: FILE: fs/sysfs/dir.c:103:
+        } else {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#201: FILE: fs/sysfs/dir.c:104:
+                attr = sd->s_element;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#201: FILE: fs/sysfs/dir.c:104:
+                attr = sd->s_element;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#202: FILE: fs/sysfs/dir.c:105:
+                init = init_file;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#202: FILE: fs/sysfs/dir.c:105:
+                init = init_file;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#203: FILE: fs/sysfs/dir.c:106:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#203: FILE: fs/sysfs/dir.c:106:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#209: FILE: fs/sysfs/dir.c:112:
+        if (bin_attr) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#209: FILE: fs/sysfs/dir.c:112:
+        if (bin_attr) {$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#221: FILE: fs/sysfs/dir.c:124:
+static int sysfs_attach_link(struct sysfs_dirent * sd, struct dentry * dentry)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#221: FILE: fs/sysfs/dir.c:124:
+static int sysfs_attach_link(struct sysfs_dirent * sd, struct dentry * dentry)

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#225: FILE: fs/sysfs/dir.c:128:
+	err = sysfs_create(dentry, S_IFLNK|S_IRWXUGO, init_symlink);
 	                                  ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXUGO' are not preferred. Consider using octal permissions '0777'.
#225: FILE: fs/sysfs/dir.c:128:
+	err = sysfs_create(dentry, S_IFLNK|S_IRWXUGO, init_symlink);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#235: FILE: fs/sysfs/dir.c:138:
+struct dentry * sysfs_lookup(struct inode *dir, struct dentry *dentry, $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#235: FILE: fs/sysfs/dir.c:138:
+struct dentry * sysfs_lookup(struct inode *dir, struct dentry *dentry, 

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#236: FILE: fs/sysfs/dir.c:139:
+				struct nameidata *nd)
 				                  ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#236: FILE: fs/sysfs/dir.c:139:
+struct dentry * sysfs_lookup(struct inode *dir, struct dentry *dentry, 
+				struct nameidata *nd)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#238: FILE: fs/sysfs/dir.c:141:
+	struct sysfs_dirent * parent_sd = dentry->d_parent->d_fsdata;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#239: FILE: fs/sysfs/dir.c:142:
+	struct sysfs_dirent * sd;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#244: FILE: fs/sysfs/dir.c:147:
+			const unsigned char * name = sysfs_get_name(sd);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#249: FILE: fs/sysfs/dir.c:152:
+^I^I^Iif (sd->s_type & SYSFS_KOBJ_LINK) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#259: FILE: fs/sysfs/dir.c:162:
+  $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#259: FILE: fs/sysfs/dir.c:162:
+  $

CHECK:SPACING: spaces preferred around that '|' (ctx:VxW)
#264: FILE: fs/sysfs/dir.c:167:
+	umode_t mode = S_IFDIR| S_IRWXU | S_IRUGO | S_IXUGO;
 	                      ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXU | S_IRUGO | S_IXUGO' are not preferred. Consider using octal permissions '0755'.
#264: FILE: fs/sysfs/dir.c:167:
+	umode_t mode = S_IFDIR| S_IRWXU | S_IRUGO | S_IXUGO;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#276: FILE: fs/sysfs/dir.c:174:
+			struct sysfs_dirent * sd, * parent_sd;

ERROR:SPACING: space prohibited after that '*' (ctx:WxW)
#276: FILE: fs/sysfs/dir.c:174:
+			struct sysfs_dirent * sd, * parent_sd;
 			                          ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#277: FILE: fs/sysfs/dir.c:175:
+			struct sysfs_dirent * sd, * parent_sd;
+			parent_sd = p->d_fsdata;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#278: FILE: fs/sysfs/dir.c:176:
+^I^I^Isd = sysfs_new_dirent(parent_sd, k, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#279: FILE: fs/sysfs/dir.c:177:
+^I^I^I^I^I^I(parent_sd->s_element == k) ? $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#279: FILE: fs/sysfs/dir.c:177:
+			sd = sysfs_new_dirent(parent_sd, k, 
+						(parent_sd->s_element == k) ? 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#280: FILE: fs/sysfs/dir.c:178:
+^I^I^I^I^I^ISYSFS_KOBJ_ATTR_GROUP : $

CHECK:BRACES: braces {} should be used on all arms of this statement
#282: FILE: fs/sysfs/dir.c:180:
+			if (sd) {
[...]
+			} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#290: FILE: fs/sysfs/dir.c:188:
+			} else

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#311: FILE: fs/sysfs/dir.c:234:
+	struct sysfs_dirent * sd;

ERROR:CODE_INDENT: code indent should use tabs where possible
#316: FILE: fs/sysfs/dir.c:239:
+ ^Ilist_del_init(&sd->s_sibling);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#316: FILE: fs/sysfs/dir.c:239:
+ ^Ilist_del_init(&sd->s_sibling);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#316: FILE: fs/sysfs/dir.c:239:
+ ^Ilist_del_init(&sd->s_sibling);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#317: FILE: fs/sysfs/dir.c:240:
+ ^Isysfs_put(d->d_fsdata);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#317: FILE: fs/sysfs/dir.c:240:
+ ^Isysfs_put(d->d_fsdata);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#317: FILE: fs/sysfs/dir.c:240:
+ ^Isysfs_put(d->d_fsdata);$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#334: FILE: fs/sysfs/dir.c:268:
+	struct sysfs_dirent * parent_sd = dentry->d_fsdata;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#335: FILE: fs/sysfs/dir.c:269:
+	struct sysfs_dirent * sd, * tmp;

ERROR:SPACING: space prohibited after that '*' (ctx:WxW)
#335: FILE: fs/sysfs/dir.c:269:
+	struct sysfs_dirent * sd, * tmp;
 	                          ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#381: FILE: fs/sysfs/dir.c:283:
+  ^I}$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#381: FILE: fs/sysfs/dir.c:283:
+  ^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#381: FILE: fs/sysfs/dir.c:283:
+  ^I}$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#403: FILE: fs/sysfs/dir.c:328:
+	struct dentry * dentry = file->f_dentry;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#404: FILE: fs/sysfs/dir.c:329:
+	struct sysfs_dirent * parent_sd = dentry->d_fsdata;

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#412: FILE: fs/sysfs/dir.c:337:
+
+}

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#416: FILE: fs/sysfs/dir.c:341:
+	struct dentry * dentry = file->f_dentry;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#417: FILE: fs/sysfs/dir.c:342:
+	struct sysfs_dirent * cursor = file->private_data;

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#433: FILE: fs/sysfs/dir.c:358:
+int sysfs_readdir(struct file * filp, void * dirent, filldir_t filldir)
                                 ^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#433: FILE: fs/sysfs/dir.c:358:
+int sysfs_readdir(struct file * filp, void * dirent, filldir_t filldir)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#433: FILE: fs/sysfs/dir.c:358:
+int sysfs_readdir(struct file * filp, void * dirent, filldir_t filldir)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#436: FILE: fs/sysfs/dir.c:361:
+	struct sysfs_dirent * parent_sd = dentry->d_fsdata;

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#442: FILE: fs/sysfs/dir.c:367:
+	switch (i) {
+		case 0:
[...]
+		case 1:
[...]
+		default:

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#449: FILE: fs/sysfs/dir.c:374:
+			/* fallthrough */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#456: FILE: fs/sysfs/dir.c:381:
+			/* fallthrough */

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#462: FILE: fs/sysfs/dir.c:387:
+			for (p=q->next; p!= &parent_sd->s_children; p=p->next) {
 			      ^

ERROR:SPACING: spaces required around that '!=' (ctx:VxW)
#462: FILE: fs/sysfs/dir.c:387:
+			for (p=q->next; p!= &parent_sd->s_children; p=p->next) {
 			                 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#462: FILE: fs/sysfs/dir.c:387:
+			for (p=q->next; p!= &parent_sd->s_children; p=p->next) {
 			                                             ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#464: FILE: fs/sysfs/dir.c:389:
+				const char * name;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#467: FILE: fs/sysfs/dir.c:392:
+^I^I^I^Inext = list_entry(p, struct sysfs_dirent, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#468: FILE: fs/sysfs/dir.c:393:
+				next = list_entry(p, struct sysfs_dirent, 
+						   s_sibling);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#480: FILE: fs/sysfs/dir.c:405:
+				if (filldir(dirent, name, len, filp->f_pos, ino,
+						 dt_type(next)) < 0)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#492: FILE: fs/sysfs/dir.c:417:
+loff_t sysfs_dir_lseek(struct file * file, loff_t offset, int origin)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#494: FILE: fs/sysfs/dir.c:419:
+	struct dentry * dentry = file->f_dentry;

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#497: FILE: fs/sysfs/dir.c:422:
+	switch (origin) {
+		case 1:
[...]
+		case 0:
[...]
+		default:

ERROR:TRAILING_WHITESPACE: trailing whitespace
#519: FILE: fs/sysfs/dir.c:444:
+^I^I^I^Inext = list_entry(p, struct sysfs_dirent, $

WARNING:LINE_SPACING: Missing a blank line after declarations
#519: FILE: fs/sysfs/dir.c:444:
+				struct sysfs_dirent *next;
+				next = list_entry(p, struct sysfs_dirent, 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#520: FILE: fs/sysfs/dir.c:445:
+				next = list_entry(p, struct sysfs_dirent, 
+						   s_sibling);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000281328.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 63 errors, 37 warnings, 10 checks, 422 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000281328.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
