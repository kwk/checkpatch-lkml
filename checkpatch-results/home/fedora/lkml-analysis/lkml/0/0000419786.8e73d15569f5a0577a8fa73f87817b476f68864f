WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'kernel' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#143: FILE: linux/printk.h:1:
+#ifndef _LINUX_PRINTK_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:IF_1: Consider removing the #if 1 and its #endif
#175: FILE: linux/printk.h:33:
+#if 1

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#208: FILE: linux/printk.h:66:
+#define printk(a, arg...) ({ \

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'a' may be better as '(a)' to avoid precedence issues
#208: FILE: linux/printk.h:66:
+#define printk(a, arg...) ({ \
+	{ \
+		int ret;\
+		if(TAG_PRINTK_LVL >= UNTAG_PRINTK_LVL) \
+			switch(UNTAG_PRINTK_LVL) { \
+			default: \
+				ret = _printk(0+ a, ##arg); \
+			} \
+		ret; \
+	} \
+}) 

ERROR:SPACING: space required before the open parenthesis '('
#211: FILE: linux/printk.h:69:
+		if(TAG_PRINTK_LVL >= UNTAG_PRINTK_LVL) \

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#212: FILE: linux/printk.h:70:
+			switch(UNTAG_PRINTK_LVL) { \

CHECK:SPACING: spaces preferred around that '+' (ctx:VxW)
#214: FILE: linux/printk.h:72:
+				ret = _printk(0+ a, ##arg); \
 				               ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#218: FILE: linux/printk.h:76:
+}) $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#220: FILE: linux/printk.h:78:
+#define KERN_EMERG __broken_printk_call); \
+			case UNTAG_PRINTK_LVL: \
+			ret = 0; \
+			} \
+		if(TAG_PRINTK_LVL >= KERN_EMERG_LVL) { \
+			ret = _printk(KERN_EMERG_STR

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

ERROR:SPACING: space required before the open parenthesis '('
#224: FILE: linux/printk.h:82:
+		if(TAG_PRINTK_LVL >= KERN_EMERG_LVL) { \

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#227: FILE: linux/printk.h:85:
+#define KERN_ALERT __broken_printk_call); \
+			case UNTAG_PRINTK_LVL: \
+			ret = 0; \
+			} \
+		if(TAG_PRINTK_LVL >= KERN_ALERT_LVL) { \
+			_printk(KERN_ALERT_STR

ERROR:SPACING: space required before the open parenthesis '('
#231: FILE: linux/printk.h:89:
+		if(TAG_PRINTK_LVL >= KERN_ALERT_LVL) { \

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#234: FILE: linux/printk.h:92:
+#define KERN_CRIT __broken_printk_call); \
+			case UNTAG_PRINTK_LVL: \
+			ret = 0; \
+			} \
+		if(TAG_PRINTK_LVL >= KERN_CRIT_LVL) { \
+			_printk(KERN_CRIT_STR

ERROR:SPACING: space required before the open parenthesis '('
#238: FILE: linux/printk.h:96:
+		if(TAG_PRINTK_LVL >= KERN_CRIT_LVL) { \

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#241: FILE: linux/printk.h:99:
+#define KERN_ERR __broken_printk_call); \
+			case UNTAG_PRINTK_LVL: \
+			ret = 0; \
+			} \
+		if(TAG_PRINTK_LVL >= KERN_ERR_LVL) { \
+			_printk(KERN_ERR_STR

ERROR:SPACING: space required before the open parenthesis '('
#245: FILE: linux/printk.h:103:
+		if(TAG_PRINTK_LVL >= KERN_ERR_LVL) { \

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#248: FILE: linux/printk.h:106:
+#define KERN_WARNING __broken_printk_call); \
+			case UNTAG_PRINTK_LVL: \
+			ret = 0; \
+			} \
+		if(TAG_PRINTK_LVL >= KERN_WARNING_LVL) { \
+			_printk(KERN_WARNING_STR

ERROR:SPACING: space required before the open parenthesis '('
#252: FILE: linux/printk.h:110:
+		if(TAG_PRINTK_LVL >= KERN_WARNING_LVL) { \

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#255: FILE: linux/printk.h:113:
+#define KERN_NOTICE __broken_printk_call); \
+			case UNTAG_PRINTK_LVL: \
+			ret = 0; \
+			} \
+		if(TAG_PRINTK_LVL >= KERN_NOTICE_LVL) { \
+			_printk(KERN_NOTICE_STR

ERROR:SPACING: space required before the open parenthesis '('
#259: FILE: linux/printk.h:117:
+		if(TAG_PRINTK_LVL >= KERN_NOTICE_LVL) { \

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#262: FILE: linux/printk.h:120:
+#define KERN_INFO __broken_printk_call); \
+			case UNTAG_PRINTK_LVL: \
+			ret = 0; \
+			} \
+		if(TAG_PRINTK_LVL >= KERN_INFO_LVL) { \
+			_printk(KERN_INFO_STR

ERROR:SPACING: space required before the open parenthesis '('
#266: FILE: linux/printk.h:124:
+		if(TAG_PRINTK_LVL >= KERN_INFO_LVL) { \

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#269: FILE: linux/printk.h:127:
+#define KERN_DEBUG __broken_printk_call); \
+			case UNTAG_PRINTK_LVL: \
+			ret = 0; \
+			} \
+		if(TAG_PRINTK_LVL >= KERN_DEBUG_LVL) { \
+			_printk(KERN_DEBUG_STR

ERROR:SPACING: space required before the open parenthesis '('
#273: FILE: linux/printk.h:131:
+		if(TAG_PRINTK_LVL >= KERN_DEBUG_LVL) { \

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#276: FILE: linux/printk.h:134:
+#define printk(a, arg...) _printk(a, ##arg)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#281: FILE: linux/printk.h:139:
+#define^IKERN_WARNING ^IKERN_WARNING_STR$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#287: FILE: linux/printk.h:145:
+asmlinkage int _printk(const char * fmt, ...)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(1, 2) over __attribute__((format(printf, 1, 2)))
#288: FILE: linux/printk.h:146:
+	__attribute__ ((format (printf, 1, 2)));

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000419786.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 20 errors, 9 warnings, 2 checks, 205 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000419786.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
