WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#48: FILE: fs/fuse/dev.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#49: FILE: fs/fuse/dev.c:2:
+/*
+    FUSE: Filesystem in Userspace

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:LINE_SPACING: Missing a blank line after declarations
#69: FILE: fs/fuse/dev.c:22:
+	struct fuse_conn *fc;
+	spin_lock(&fuse_lock);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#80: FILE: fs/fuse/dev.c:33:
+	struct fuse_req *req = kmem_cache_alloc(fuse_req_cachep, SLAB_KERNEL);
+	if (req) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#112: FILE: fs/fuse/dev.c:65:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#124: FILE: fs/fuse/dev.c:77:
+	BUG_ON(list_empty(&fc->unused_list));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:BRACES: braces {} should be used on all arms of this statement
#151: FILE: fs/fuse/dev.c:104:
+	if (!req->preallocated)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#153: FILE: fs/fuse/dev.c:106:
+	else {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#171: FILE: fs/fuse/dev.c:124:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#175: FILE: fs/fuse/dev.c:128:
+^I^Ireq->in.h.unique = get_unique(fc);^I^I$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#221: FILE: fs/fuse/dev.c:174:
+		printk("fuse_dev_read: buffer too small\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#224: FILE: fs/fuse/dev.c:177:
+^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#240: FILE: fs/fuse/dev.c:193:
+^I^I$

WARNING:LINE_SPACING: Missing a blank line after declarations
#247: FILE: fs/fuse/dev.c:200:
+		struct fuse_in_arg *arg = &in->args[i];
+		err = copy_in_one(arg->value, arg->size, &buf, &nbytes);

CHECK:BRACES: braces {} should be used on all arms of this statement
#269: FILE: fs/fuse/dev.c:222:
+	if (!fc->sb)
[...]
+	else if (!list_empty(&fc->pending)) {
[...]

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!req"
#278: FILE: fs/fuse/dev.c:231:
+	if (req == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:BRACES: braces {} should be used on all arms of this statement
#284: FILE: fs/fuse/dev.c:237:
+		if (ret < 0) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#287: FILE: fs/fuse/dev.c:240:
+		} else

WARNING:LINE_SPACING: Missing a blank line after declarations
#308: FILE: fs/fuse/dev.c:261:
+		struct fuse_req *tmp;
+		tmp = list_entry(entry, struct fuse_req, list);

WARNING:LINE_SPACING: Missing a blank line after declarations
#323: FILE: fs/fuse/dev.c:276:
+	size_t dstlen = arg->size;
+	if (*srclenp < dstlen) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#325: FILE: fs/fuse/dev.c:278:
+			printk("fuse_dev_write: write is short\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#350: FILE: fs/fuse/dev.c:303:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#355: FILE: fs/fuse/dev.c:308:
+^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#360: FILE: fs/fuse/dev.c:313:
+^I^I^I$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#368: FILE: fs/fuse/dev.c:321:
+		printk("fuse_dev_write: write is long\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#379: FILE: fs/fuse/dev.c:332:
+		printk("fuse_dev_write: write is short\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#382: FILE: fs/fuse/dev.c:335:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#396: FILE: fs/fuse/dev.c:349:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#407: FILE: fs/fuse/dev.c:360:
+^I}     $

ERROR:CODE_INDENT: code indent should use tabs where possible
#409: FILE: fs/fuse/dev.c:362:
+        if (oh.error <= -1000 || oh.error > 0) {$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#409: FILE: fs/fuse/dev.c:362:
+        if (oh.error <= -1000 || oh.error > 0) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#410: FILE: fs/fuse/dev.c:363:
+                printk("fuse_dev_write: bad error value\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#410: FILE: fs/fuse/dev.c:363:
+                printk("fuse_dev_write: bad error value\n");$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#410: FILE: fs/fuse/dev.c:363:
+                printk("fuse_dev_write: bad error value\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'fuse_dev_write', this function's name, in a string
#410: FILE: fs/fuse/dev.c:363:
+                printk("fuse_dev_write: bad error value\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:CODE_INDENT: code indent should use tabs where possible
#411: FILE: fs/fuse/dev.c:364:
+                return -EINVAL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#411: FILE: fs/fuse/dev.c:364:
+                return -EINVAL;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#412: FILE: fs/fuse/dev.c:365:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#412: FILE: fs/fuse/dev.c:365:
+        }$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "req"
#416: FILE: fs/fuse/dev.c:369:
+	if (req != NULL)

WARNING:INDENTED_LABEL: labels should not be indented
#433: FILE: fs/fuse/dev.c:386:
+  out:

ERROR:CODE_INDENT: code indent should use tabs where possible
#452: FILE: fs/fuse/dev.c:405:
+                mask |= POLLIN | POLLRDNORM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#452: FILE: fs/fuse/dev.c:405:
+                mask |= POLLIN | POLLRDNORM;$

WARNING:LINE_SPACING: Missing a blank line after declarations
#462: FILE: fs/fuse/dev.c:415:
+		struct fuse_req *req;
+		req = list_entry(head->next, struct fuse_req, list);

WARNING:CONST_STRUCT: struct file_operations should normally be const
#494: FILE: fs/fuse/dev.c:447:
+struct file_operations fuse_dev_operations = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#511: FILE: fs/fuse/dev.c:464:
+}
+static struct subsys_attribute fuse_attr_version = __ATTR_RO(version);

WARNING:LINE_SPACING: Missing a blank line after declarations
#522: FILE: fs/fuse/dev.c:475:
+	int err;
+	err = fs_subsys_register(&fuse_subsys);

WARNING:LINE_SPACING: Missing a blank line after declarations
#542: FILE: fs/fuse/dev.c:495:
+	int err = fuse_sysfs_init();
+	if (err)

WARNING:LINE_SPACING: Missing a blank line after declarations
#562: FILE: fs/fuse/dev.c:515:
+	int err;
+	err = fuse_device_init();

ERROR:TRAILING_WHITESPACE: trailing whitespace
#572: FILE: fs/fuse/dev.c:525:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#574: FILE: fs/fuse/dev.c:527:
+^I$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#589: FILE: fs/fuse/dir.c:1:
+/*

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#590: FILE: fs/fuse/dir.c:2:
+/*
+    FUSE: Filesystem in Userspace

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#602: FILE: fs/fuse/dir.c:14:
+static struct inode_operations fuse_dir_inode_operations;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#606: FILE: fs/fuse/dir.c:18:
+	if (S_ISREG(inode->i_mode) && i_size_read(inode) != attr->size) {
+		invalidate_inode_pages(inode->i_mapping);
+	}

CHECK:SPACING: No space is necessary after a cast
#636: FILE: fs/fuse/dir.c:48:
+	unsigned long nodeid = *(unsigned long *) _nodeidp;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#638: FILE: fs/fuse/dir.c:50:
+	struct fuse_inode *fi = INO_FI(inode);
+	if (fi->nodeid == nodeid)

CHECK:SPACING: No space is necessary after a cast
#646: FILE: fs/fuse/dir.c:58:
+	unsigned long nodeid = *(unsigned long *) _nodeidp;

WARNING:LINE_SPACING: Missing a blank line after declarations
#648: FILE: fs/fuse/dir.c:60:
+	struct fuse_inode *fi = INO_FI(inode);
+	fi->nodeid = nodeid;

CHECK:BRACES: braces {} should be used on all arms of this statement
#661: FILE: fs/fuse/dir.c:73:
+	if ((inode->i_state & I_NEW)) {
[...]
+	} else if (inode->i_generation != generation)
[...]

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#666: FILE: fs/fuse/dir.c:78:
+		printk("fuse_iget: bad generation for node %lu\n", nodeid);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'fuse_iget', this function's name, in a string
#666: FILE: fs/fuse/dir.c:78:
+		printk("fuse_iget: bad generation for node %lu\n", nodeid);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#674: FILE: fs/fuse/dir.c:86:
+^I^I^I    struct inode *dir, struct dentry *entry, $

WARNING:LINE_SPACING: Missing a blank line after declarations
#678: FILE: fs/fuse/dir.c:90:
+	struct fuse_inode *fi = INO_FI(dir);
+	req->in.h.opcode = FUSE_LOOKUP;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#697: FILE: fs/fuse/dir.c:109:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#725: FILE: fs/fuse/dir.c:137:
+^I} $

WARNING:LINE_SPACING: Missing a blank line after declarations
#732: FILE: fs/fuse/dir.c:144:
+		struct fuse_inode *fi = INO_FI(inode);
+		entry->d_time =	time_to_jiffies(outarg.entry_valid,

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#743: FILE: fs/fuse/dir.c:155:
+				   struct nameidata *nd)
 				                     ^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#743: FILE: fs/fuse/dir.c:155:
+static struct dentry *fuse_lookup(struct inode *dir, struct dentry *entry,
+				   struct nameidata *nd)

WARNING:LINE_SPACING: Missing a blank line after declarations
#747: FILE: fs/fuse/dir.c:159:
+	int err = fuse_lookup_iget(dir, entry, &inode);
+	if (err)

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#752: FILE: fs/fuse/dir.c:164:
+static struct inode_operations fuse_dir_inode_operations = {

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#758: FILE: fs/fuse/fuse_i.h:1:
+/*

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#759: FILE: fs/fuse/fuse_i.h:2:
+/*
+    FUSE: Filesystem in Userspace

CHECK:LINE_SPACING: Please don't use multiple blank lines
#766: FILE: fs/fuse/fuse_i.h:9:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#855: FILE: fs/fuse/fuse_i.h:98:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#876: FILE: fs/fuse/fuse_i.h:119:
+^I$

CHECK:SPACING: No space is necessary after a cast
#883: FILE: fs/fuse/fuse_i.h:126:
+#define INO_FI(i) ((struct fuse_inode *) (((struct inode *)(i))+1))

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#883: FILE: fs/fuse/fuse_i.h:126:
+#define INO_FI(i) ((struct fuse_inode *) (((struct inode *)(i))+1))
                                                                ^

WARNING:CONST_STRUCT: struct file_operations should normally be const
#886: FILE: fs/fuse/fuse_i.h:129:
+extern struct file_operations fuse_dev_operations;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#892: FILE: fs/fuse/fuse_i.h:135:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#931: FILE: fs/fuse/fuse_i.h:174:
+ * Initialize the fuse filesystem $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#940: FILE: fs/fuse/fuse_i.h:183:
+/** $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#977: FILE: fs/fuse/inode.c:1:
+/*

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#978: FILE: fs/fuse/inode.c:2:
+/*
+    FUSE: Filesystem in Userspace

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1015: FILE: fs/fuse/inode.c:39:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#1029: FILE: fs/fuse/inode.c:53:
+	struct fuse_inode *fi = INO_FI(inode);
+	if (fi->forget_req)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1043: FILE: fs/fuse/inode.c:67:
+	struct fuse_forget_in *inarg = &req->misc.forget_in;
+	inarg->version = version;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1055: FILE: fs/fuse/inode.c:79:
+^I$

WARNING:LINE_SPACING: Missing a blank line after declarations
#1058: FILE: fs/fuse/inode.c:82:
+		struct fuse_inode *fi = INO_FI(inode);
+		fuse_send_forget(fc, fi->forget_req, fi->nodeid, inode->i_version);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1081: FILE: fs/fuse/inode.c:105:
+^IOPT_ERR $

WARNING:LINE_SPACING: Missing a blank line after declarations
#1094: FILE: fs/fuse/inode.c:118:
+	char *p;
+	memset(d, 0, sizeof(struct fuse_mount_data));

WARNING:LINE_SPACING: Missing a blank line after declarations
#1101: FILE: fs/fuse/inode.c:125:
+		substring_t args[MAX_OPT_ARGS];
+		if (!*p)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1103: FILE: fs/fuse/inode.c:127:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1117: FILE: fs/fuse/inode.c:141:
+^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1123: FILE: fs/fuse/inode.c:147:
+^I^I^I$

WARNING:LINE_SPACING: Missing a blank line after declarations
#1146: FILE: fs/fuse/inode.c:170:
+		struct fuse_req *req;
+		req = list_entry(fc->unused_list.next, struct fuse_req, list);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "fc"
#1165: FILE: fs/fuse/inode.c:189:
+	if (fc != NULL) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1167: FILE: fs/fuse/inode.c:191:
+		int i;
+		memset(fc, 0, sizeof(*fc));

WARNING:LINE_SPACING: Missing a blank line after declarations
#1178: FILE: fs/fuse/inode.c:202:
+			struct fuse_req *req = fuse_request_alloc();
+			if (!req) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1195: FILE: fs/fuse/inode.c:219:
+		printk("FUSE: bad communication file descriptor\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!fc"
#1199: FILE: fs/fuse/inode.c:223:
+	if (fc == NULL) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1200: FILE: fs/fuse/inode.c:224:
+		printk("FUSE: failed to allocate connection data\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1205: FILE: fs/fuse/inode.c:229:
+		printk("fuse_read_super: connection already mounted\n");

WARNING:LINE_SPACING: Missing a blank line after declarations
#1220: FILE: fs/fuse/inode.c:244:
+	struct fuse_attr attr;
+	memset(&attr, 0, sizeof(attr));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1237: FILE: fs/fuse/inode.c:261:
+{^I$

CHECK:SPACING: No space is necessary after a cast
#1243: FILE: fs/fuse/inode.c:267:
+	if (!parse_fuse_opt((char *) data, &d))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!fc"
#1258: FILE: fs/fuse/inode.c:282:
+	if (fc == NULL)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1262: FILE: fs/fuse/inode.c:286:
+^I$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!root"
#1266: FILE: fs/fuse/inode.c:290:
+	if (root == NULL) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1267: FILE: fs/fuse/inode.c:291:
+		printk("fuse_read_super: failed to get root inode\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'fuse_read_super', this function's name, in a string
#1267: FILE: fs/fuse/inode.c:291:
+		printk("fuse_read_super: failed to get root inode\n");

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1273: FILE: fs/fuse/inode.c:297:
+		iput(root);
 		^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1302: FILE: fs/fuse/inode.c:326:
+static void fuse_inode_init_once(void * foo, kmem_cache_t * cachep,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1302: FILE: fs/fuse/inode.c:326:
+static void fuse_inode_init_once(void * foo, kmem_cache_t * cachep,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1305: FILE: fs/fuse/inode.c:329:
+	struct inode * inode = foo;

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1307: FILE: fs/fuse/inode.c:331:
+	if ((flags & (SLAB_CTOR_VERIFY|SLAB_CTOR_CONSTRUCTOR)) ==
 	                              ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#1317: FILE: fs/fuse/inode.c:341:
+	if (err)
[...]
+	else {
[...]

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1318: FILE: fs/fuse/inode.c:342:
+		printk("fuse: failed to register filesystem\n");

CHECK:BRACES: Unbalanced braces around else statement
#1319: FILE: fs/fuse/inode.c:343:
+	else {

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#1321: FILE: fs/fuse/inode.c:345:
+						      sizeof(struct inode) + sizeof(struct fuse_inode) ,

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#1321: FILE: fs/fuse/inode.c:345:
+						      sizeof(struct inode) + sizeof(struct fuse_inode) ,
 						                                                       ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1341: FILE: fs/fuse/util.c:1:
+/*

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1342: FILE: fs/fuse/util.c:2:
+/*
+    FUSE: Filesystem in Userspace

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#1358: FILE: fs/fuse/util.c:18:
+spinlock_t fuse_lock;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1364: FILE: fs/fuse/util.c:24:
+	printk("fuse init (API version %i.%i)\n",

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1371: FILE: fs/fuse/util.c:31:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1375: FILE: fs/fuse/util.c:35:
+^I$

WARNING:INDENTED_LABEL: labels should not be indented
#1378: FILE: fs/fuse/util.c:38:
+  err_fs_cleanup:

WARNING:INDENTED_LABEL: labels should not be indented
#1380: FILE: fs/fuse/util.c:40:
+  err:

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1386: FILE: fs/fuse/util.c:46:
+	printk(KERN_DEBUG "fuse exit\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1387: FILE: fs/fuse/util.c:47:
+^I$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1407: FILE: include/linux/fuse.h:1:
+/*

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1408: FILE: include/linux/fuse.h:2:
+/*
+    FUSE: Filesystem in Userspace

ERROR:CODE_INDENT: code indent should use tabs where possible
#1485: FILE: include/linux/fuse.h:79:
+                                      be unique for the fs's lifetime */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1485: FILE: include/linux/fuse.h:79:
+	unsigned long generation;  /* Inode generation: nodeid:gen must
+                                      be unique for the fs's lifetime */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1485: FILE: include/linux/fuse.h:79:
+                                      be unique for the fs's lifetime */

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000229132.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 41 errors, 70 warnings, 25 checks, 1444 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000229132.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
