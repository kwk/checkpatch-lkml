WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#32: 
> > > But as the next guy up in the tree, you do get to say what you'll take

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#50: 
@@ -27,6 +27,9 @@

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#163: FILE: include/asm-i386/mtrr.h:110:
+extern int *mtrr_suspend(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#164: FILE: include/asm-i386/mtrr.h:111:
+extern void mtrr_resume(int *ptr);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#179: FILE: kernel/module.c:1877:
+       static char modlist[MODLIST_SIZE];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#180: FILE: kernel/module.c:1878:
+       struct module *mod;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#181: FILE: kernel/module.c:1879:
+       int pos = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#183: FILE: kernel/module.c:1881:
+       list_for_each_entry(mod, &modules, list)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#183: FILE: kernel/module.c:1881:
+       list_for_each_entry(mod, &modules, list)
+               if (mod->name)

ERROR:CODE_INDENT: code indent should use tabs where possible
#184: FILE: kernel/module.c:1882:
+               if (mod->name)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#184: FILE: kernel/module.c:1882:
+               if (mod->name)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#184: FILE: kernel/module.c:1882:
+               if (mod->name)
+                       pos += snprintf(modlist+pos,

ERROR:CODE_INDENT: code indent should use tabs where possible
#185: FILE: kernel/module.c:1883:
+                       pos += snprintf(modlist+pos,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#185: FILE: kernel/module.c:1883:
+                       pos += snprintf(modlist+pos,$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#185: FILE: kernel/module.c:1883:
+                       pos += snprintf(modlist+pos,
                                               ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#186: FILE: kernel/module.c:1883:
MODLIST_SIZE-pos-1,

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

ERROR:CODE_INDENT: code indent should use tabs where possible
#187: FILE: kernel/module.c:1884:
+                                       "%s ", mod->name);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#187: FILE: kernel/module.c:1884:
+                                       "%s ", mod->name);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#188: FILE: kernel/module.c:1885:
+       printk("%s\n",modlist);$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#188: FILE: kernel/module.c:1885:
+       printk("%s\n",modlist);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#188: FILE: kernel/module.c:1885:
+       printk("%s\n",modlist);
                     ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#191: FILE: kernel/module.c:1888:
+int print_module_list_to_buffer(char * buffer, int size)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#193: FILE: kernel/module.c:1890:
+       struct module *mod;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#194: FILE: kernel/module.c:1891:
+       int pos = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#196: FILE: kernel/module.c:1893:
+       list_for_each_entry(mod, &modules, list)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#196: FILE: kernel/module.c:1893:
+       list_for_each_entry(mod, &modules, list)
+               if (mod->name)

ERROR:CODE_INDENT: code indent should use tabs where possible
#197: FILE: kernel/module.c:1894:
+               if (mod->name)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#197: FILE: kernel/module.c:1894:
+               if (mod->name)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#197: FILE: kernel/module.c:1894:
+               if (mod->name)
+                       pos += snprintf(buffer+pos, size-pos-1,

ERROR:CODE_INDENT: code indent should use tabs where possible
#198: FILE: kernel/module.c:1895:
+                       pos += snprintf(buffer+pos, size-pos-1,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#198: FILE: kernel/module.c:1895:
+                       pos += snprintf(buffer+pos, size-pos-1,$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#198: FILE: kernel/module.c:1895:
+                       pos += snprintf(buffer+pos, size-pos-1,
                                              ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#198: FILE: kernel/module.c:1895:
+                       pos += snprintf(buffer+pos, size-pos-1,
                                                        ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#198: FILE: kernel/module.c:1895:
+                       pos += snprintf(buffer+pos, size-pos-1,
                                                            ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#199: FILE: kernel/module.c:1896:
+                                       "%s ", mod->name);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#199: FILE: kernel/module.c:1896:
+                                       "%s ", mod->name);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#200: FILE: kernel/module.c:1897:
+       return pos;$

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#207: FILE: kernel/module.c:1902:
+#if 0

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000294278.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 10 errors, 22 warnings, 6 checks, 73 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000294278.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
