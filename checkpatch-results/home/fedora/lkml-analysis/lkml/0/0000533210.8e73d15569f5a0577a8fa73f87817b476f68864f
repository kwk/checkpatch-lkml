WARNING:PATCH_PREFIX: patch prefix 'drivers' exists, appears to be a -p0 patch

WARNING:LINE_SPACING: Missing a blank line after declarations
#103: FILE: sound/esssolo1.c:944:
+		struct pci_driver *drvr;
+		drvr = pci_dev_driver (pci_dev);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#103: FILE: sound/esssolo1.c:944:
+		drvr = pci_dev_driver (pci_dev);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#106: FILE: sound/esssolo1.c:947:
+		s = (struct solo1_state*)pci_get_drvdata(pci_dev);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#136: FILE: sound/esssolo1.c:1626:
+		s = (struct solo1_state*)pci_get_drvdata(pci_dev);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#166: FILE: sound/esssolo1.c:1916:
+		s = (struct solo1_state*)pci_get_drvdata(pci_dev);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#196: FILE: sound/esssolo1.c:2141:
+		s = (struct solo1_state*)pci_get_drvdata(pci_dev);

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#219: FILE: sound/esssolo1.c:2283:
+static void
+solo1_suspend(struct pci_dev *pci_dev) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#221: FILE: sound/esssolo1.c:2285:
+	struct solo1_state *s = (struct solo1_state*)pci_get_drvdata(pci_dev);

WARNING:LINE_SPACING: Missing a blank line after declarations
#222: FILE: sound/esssolo1.c:2286:
+	struct solo1_state *s = (struct solo1_state*)pci_get_drvdata(pci_dev);
+	if (!s)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#224: FILE: sound/esssolo1.c:2288:
+	outb(0, s->iobase+6);
 	                 ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#226: FILE: sound/esssolo1.c:2290:
+^Ioutb(0, s->ddmabase+0xd); $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#226: FILE: sound/esssolo1.c:2290:
+	outb(0, s->ddmabase+0xd); 
 	                   ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#228: FILE: sound/esssolo1.c:2292:
+^Ioutb(3, s->sbbase+6); $

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#228: FILE: sound/esssolo1.c:2292:
+	outb(3, s->sbbase+6); 
 	                 ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#230: FILE: sound/esssolo1.c:2294:
+^Ipci_write_config_word(s->dev, 0x60, 0); $

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#245: FILE: sound/esssolo1.c:2297:
+static void
+solo1_resume(struct pci_dev *pci_dev) {

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#247: FILE: sound/esssolo1.c:2299:
+	struct solo1_state *s = (struct solo1_state*)pci_get_drvdata(pci_dev);

WARNING:LINE_SPACING: Missing a blank line after declarations
#248: FILE: sound/esssolo1.c:2300:
+	struct solo1_state *s = (struct solo1_state*)pci_get_drvdata(pci_dev);
+	if (!s)

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#253: FILE: sound/esssolo1.c:2305:
 static int __devinit solo1_probe(struct pci_dev *pcidev, const struct pci_device_id *pciid)

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#287: FILE: sound/esssolo1.c:2472:
+	remove: solo1_remove,
 	      ^

WARNING:INDENTED_LABEL: labels should not be indented
#287: FILE: sound/esssolo1.c:2472:
+	remove: solo1_remove,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#288: FILE: sound/esssolo1.c:2473:
+	suspend: solo1_suspend,
 	       ^

WARNING:INDENTED_LABEL: labels should not be indented
#288: FILE: sound/esssolo1.c:2473:
+	suspend: solo1_suspend,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#289: FILE: sound/esssolo1.c:2474:
+	resume: solo1_resume
 	      ^

WARNING:INDENTED_LABEL: labels should not be indented
#289: FILE: sound/esssolo1.c:2474:
+	resume: solo1_resume

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#298: FILE: sound/esssolo1.c:2482:
+	printk(KERN_INFO "solo1: version v0.19 time " __TIME__ " " __DATE__ "\n");

ERROR:DATE_TIME: Use of the '__TIME__' macro makes the build non-deterministic
#298: FILE: sound/esssolo1.c:2482:
+	printk(KERN_INFO "solo1: version v0.19 time " __TIME__ " " __DATE__ "\n");

It is generally desirable that building the same source code with
the same set of tools is reproducible, i.e. the output is always
exactly the same.

The kernel does *not* use the ``__DATE__`` and ``__TIME__`` macros,
and enables warnings if they are used as they can lead to
non-deterministic builds.

See: https://www.kernel.org/doc/html/latest/kbuild/reproducible-builds.html#timestamps

ERROR:DATE_TIME: Use of the '__DATE__' macro makes the build non-deterministic
#298: FILE: sound/esssolo1.c:2482:
+	printk(KERN_INFO "solo1: version v0.19 time " __TIME__ " " __DATE__ "\n");

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000533210.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 16 errors, 10 warnings, 3 checks, 255 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000533210.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
