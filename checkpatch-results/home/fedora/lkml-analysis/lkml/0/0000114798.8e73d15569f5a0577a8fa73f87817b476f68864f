CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#45: FILE: include/net/compat.h:26:
+extern int compat_sock_get_timestamp(struct sock *, struct timeval

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sock *' should also have an identifier name
#45: FILE: include/net/compat.h:26:
+extern int compat_sock_get_timestamp(struct sock *, struct timeval

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#46: FILE: include/net/compat.h:26:
__user *);

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#64: FILE: net/compat.c:509:
+	struct compat_timeval __user *ctv
+		= (struct compat_timeval __user*) userstamp;

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

CHECK:SPACING: No space is necessary after a cast
#64: FILE: net/compat.c:509:
+		= (struct compat_timeval __user*) userstamp;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#64: FILE: net/compat.c:509:
+		= (struct compat_timeval __user*) userstamp;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#66: FILE: net/compat.c:511:
+	int err = -ENOENT;
+	if(!sock_flag(sk, SOCK_TIMESTAMP))

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#66: FILE: net/compat.c:511:
+	if(!sock_flag(sk, SOCK_TIMESTAMP))

ERROR:SPACING: space required before the open parenthesis '('
#68: FILE: net/compat.c:513:
+	if(sk->sk_stamp.tv_sec == -1)

ERROR:SPACING: space required before the open parenthesis '('
#70: FILE: net/compat.c:515:
+	if(sk->sk_stamp.tv_sec == 0)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 32)
#72: FILE: net/compat.c:517:
+	if (put_user(sk->sk_stamp.tv_sec, &ctv->tv_sec) |
[...]
+				err = -EFAULT;

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#86: FILE: net/compat.c:623:
+EXPORT_SYMBOL(compat_sock_get_timestamp);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000114798.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 5 errors, 4 warnings, 3 checks, 38 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000114798.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
