ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#52: FILE: drivers/media/dvb/bt8xx/dst.c:18:
 ^IFoundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#91: FILE: drivers/media/dvb/bt8xx/dst.c:50:
+#define dprintk(x, y, z, format, arg...) do {						\
+	if (z) {									\
+		if	((x > DST_ERROR) && (x > y))					\
+			printk(KERN_ERR "%s: " format "\n", __FUNCTION__ , ##arg);	\
+		else if	((x > DST_NOTICE) && (x > y))					\
+			printk(KERN_NOTICE "%s: " format "\n", __FUNCTION__, ##arg);	\
+		else if ((x > DST_INFO) && (x > y))					\
+			printk(KERN_INFO "%s: " format "\n", __FUNCTION__, ##arg);	\
+		else if ((x > DST_DEBUG) && (x > y))					\
+			printk(KERN_DEBUG "%s: " format "\n", __FUNCTION__, ##arg);	\
+	} else {									\
+		if (x > y)								\
+			printk(format, ##arg);						\
+	}										\
+} while(0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#91: FILE: drivers/media/dvb/bt8xx/dst.c:50:
+#define dprintk(x, y, z, format, arg...) do {						\
+	if (z) {									\
+		if	((x > DST_ERROR) && (x > y))					\
+			printk(KERN_ERR "%s: " format "\n", __FUNCTION__ , ##arg);	\
+		else if	((x > DST_NOTICE) && (x > y))					\
+			printk(KERN_NOTICE "%s: " format "\n", __FUNCTION__, ##arg);	\
+		else if ((x > DST_INFO) && (x > y))					\
+			printk(KERN_INFO "%s: " format "\n", __FUNCTION__, ##arg);	\
+		else if ((x > DST_DEBUG) && (x > y))					\
+			printk(KERN_DEBUG "%s: " format "\n", __FUNCTION__, ##arg);	\
+	} else {									\
+		if (x > y)								\
+			printk(format, ##arg);						\
+	}										\
+} while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'y' - possible side-effects?
#91: FILE: drivers/media/dvb/bt8xx/dst.c:50:
+#define dprintk(x, y, z, format, arg...) do {						\
+	if (z) {									\
+		if	((x > DST_ERROR) && (x > y))					\
+			printk(KERN_ERR "%s: " format "\n", __FUNCTION__ , ##arg);	\
+		else if	((x > DST_NOTICE) && (x > y))					\
+			printk(KERN_NOTICE "%s: " format "\n", __FUNCTION__, ##arg);	\
+		else if ((x > DST_INFO) && (x > y))					\
+			printk(KERN_INFO "%s: " format "\n", __FUNCTION__, ##arg);	\
+		else if ((x > DST_DEBUG) && (x > y))					\
+			printk(KERN_DEBUG "%s: " format "\n", __FUNCTION__, ##arg);	\
+	} else {									\
+		if (x > y)								\
+			printk(format, ##arg);						\
+	}										\
+} while(0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'y' may be better as '(y)' to avoid precedence issues
#91: FILE: drivers/media/dvb/bt8xx/dst.c:50:
+#define dprintk(x, y, z, format, arg...) do {						\
+	if (z) {									\
+		if	((x > DST_ERROR) && (x > y))					\
+			printk(KERN_ERR "%s: " format "\n", __FUNCTION__ , ##arg);	\
+		else if	((x > DST_NOTICE) && (x > y))					\
+			printk(KERN_NOTICE "%s: " format "\n", __FUNCTION__, ##arg);	\
+		else if ((x > DST_INFO) && (x > y))					\
+			printk(KERN_INFO "%s: " format "\n", __FUNCTION__, ##arg);	\
+		else if ((x > DST_DEBUG) && (x > y))					\
+			printk(KERN_DEBUG "%s: " format "\n", __FUNCTION__, ##arg);	\
+	} else {									\
+		if (x > y)								\
+			printk(format, ##arg);						\
+	}										\
+} while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'format' - possible side-effects?
#91: FILE: drivers/media/dvb/bt8xx/dst.c:50:
+#define dprintk(x, y, z, format, arg...) do {						\
+	if (z) {									\
+		if	((x > DST_ERROR) && (x > y))					\
+			printk(KERN_ERR "%s: " format "\n", __FUNCTION__ , ##arg);	\
+		else if	((x > DST_NOTICE) && (x > y))					\
+			printk(KERN_NOTICE "%s: " format "\n", __FUNCTION__, ##arg);	\
+		else if ((x > DST_INFO) && (x > y))					\
+			printk(KERN_INFO "%s: " format "\n", __FUNCTION__, ##arg);	\
+		else if ((x > DST_DEBUG) && (x > y))					\
+			printk(KERN_DEBUG "%s: " format "\n", __FUNCTION__, ##arg);	\
+	} else {									\
+		if (x > y)								\
+			printk(format, ##arg);						\
+	}										\
+} while(0)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'x > DST_ERROR'
#93: FILE: drivers/media/dvb/bt8xx/dst.c:52:
+		if	((x > DST_ERROR) && (x > y))					\

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'x > y'
#93: FILE: drivers/media/dvb/bt8xx/dst.c:52:
+		if	((x > DST_ERROR) && (x > y))					\

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#94: FILE: drivers/media/dvb/bt8xx/dst.c:53:
+			printk(KERN_ERR "%s: " format "\n", __FUNCTION__ , ##arg);	\

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#94: FILE: drivers/media/dvb/bt8xx/dst.c:53:
+			printk(KERN_ERR "%s: " format "\n", __FUNCTION__ , ##arg);	\
 			                                                 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#94: FILE: drivers/media/dvb/bt8xx/dst.c:53:
+			printk(KERN_ERR "%s: " format "\n", __FUNCTION__ , ##arg);	\

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#96: FILE: drivers/media/dvb/bt8xx/dst.c:55:
+			printk(KERN_NOTICE "%s: " format "\n", __FUNCTION__, ##arg);	\

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#96: FILE: drivers/media/dvb/bt8xx/dst.c:55:
+			printk(KERN_NOTICE "%s: " format "\n", __FUNCTION__, ##arg);	\

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#98: FILE: drivers/media/dvb/bt8xx/dst.c:57:
+			printk(KERN_INFO "%s: " format "\n", __FUNCTION__, ##arg);	\

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#98: FILE: drivers/media/dvb/bt8xx/dst.c:57:
+			printk(KERN_INFO "%s: " format "\n", __FUNCTION__, ##arg);	\

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#100: FILE: drivers/media/dvb/bt8xx/dst.c:59:
+			printk(KERN_DEBUG "%s: " format "\n", __FUNCTION__, ##arg);	\

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#100: FILE: drivers/media/dvb/bt8xx/dst.c:59:
+			printk(KERN_DEBUG "%s: " format "\n", __FUNCTION__, ##arg);	\

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#103: FILE: drivers/media/dvb/bt8xx/dst.c:62:
+			printk(format, ##arg);						\

ERROR:SPACING: space required before the open parenthesis '('
#105: FILE: drivers/media/dvb/bt8xx/dst.c:64:
+} while(0)

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#132: FILE: drivers/media/dvb/bt8xx/dst.c:84:
+	dprintk(verbose, DST_INFO, 1, "mask=[%04x], enbb=[%04x], outhigh=[%04x]", mask, enbb, outhigh);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE: line length of 124 exceeds 100 columns
#135: FILE: drivers/media/dvb/bt8xx/dst.c:86:
+		dprintk(verbose, DST_INFO, 1, "dst_gpio_enb error (err == %i, mask == %02x, enb == %02x)", err, mask, enbb);

WARNING:LONG_LINE: line length of 132 exceeds 100 columns
#151: FILE: drivers/media/dvb/bt8xx/dst.c:98:
+		dprintk(verbose, DST_INFO, 1, "dst_gpio_outb error (err == %i, enbb == %02x, outhigh == %02x)", err, enbb, outhigh);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'dst_gpio_outb', this function's name, in a string
#151: FILE: drivers/media/dvb/bt8xx/dst.c:98:
+		dprintk(verbose, DST_INFO, 1, "dst_gpio_outb error (err == %i, enbb == %02x, outhigh == %02x)", err, enbb, outhigh);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'dst_gpio_inb', this function's name, in a string
#169: FILE: drivers/media/dvb/bt8xx/dst.c:113:
+		dprintk(verbose, DST_ERROR, 1, "dst_gpio_inb error (err == %i)\n", err);

WARNING:LONG_LINE: line length of 134 exceeds 100 columns
#340: FILE: drivers/media/dvb/bt8xx/dst.c:266:
+			dprintk(verbose, DST_INFO, 1, "_write_dst error (err == %i, len == 0x%02x, b0 == 0x%02x)", err, len, data[0]);

WARNING:LONG_LINE: line length of 131 exceeds 100 columns
#376: FILE: drivers/media/dvb/bt8xx/dst.c:297:
+			dprintk(verbose, DST_INFO, 1, "read_dst error (err == %i, len == 0x%02x, b0 == 0x%02x)", err, len, ret[0]);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'read_dst', this function's name, in a string
#376: FILE: drivers/media/dvb/bt8xx/dst.c:297:
+			dprintk(verbose, DST_INFO, 1, "read_dst error (err == %i, len == 0x%02x, b0 == 0x%02x)", err, len, ret[0]);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#423: FILE: drivers/media/dvb/bt8xx/dst.c:322:
+	case SEC_VOLTAGE_13:	/*	Vertical	*/

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#427: FILE: drivers/media/dvb/bt8xx/dst.c:326:
+	case SEC_VOLTAGE_18:	/*	Horizontal	*/

CHECK:BRACES: braces {} should be used on all arms of this statement
#516: FILE: drivers/media/dvb/bt8xx/dst.c:380:
+		if (state->dst_hw_cap & DST_TYPE_HAS_CA)
[...]
+		else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#518: FILE: drivers/media/dvb/bt8xx/dst.c:382:
+		else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#524: FILE: drivers/media/dvb/bt8xx/dst.c:388:
+		if (state->dst_hw_cap & DST_TYPE_HAS_CA)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#526: FILE: drivers/media/dvb/bt8xx/dst.c:390:
+		else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#532: FILE: drivers/media/dvb/bt8xx/dst.c:396:
+		if (state->dst_hw_cap & DST_TYPE_HAS_CA)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#534: FILE: drivers/media/dvb/bt8xx/dst.c:398:
+		else {

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#560: FILE: drivers/media/dvb/bt8xx/dst.c:414:
+	case INVERSION_OFF:	/*	Inversion = Normal	*/

WARNING:LONG_LINE: line length of 121 exceeds 100 columns
#778: FILE: drivers/media/dvb/bt8xx/dst.c:782:
+		dprintk(verbose, DST_ERROR, 1, "Unable to recognize %s or %s", &state->rxbuffer[0], &state->rxbuffer[1]);

WARNING:LONG_LINE_STRING: line length of 103 exceeds 100 columns
#779: FILE: drivers/media/dvb/bt8xx/dst.c:783:
+		dprintk(verbose, DST_ERROR, 1, "please email linux-dvb@linuxtv.org with this type in");

A string starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:TYPO_SPELLING: 'Tring' may be misspelled - perhaps 'Trying'?
#827: FILE: drivers/media/dvb/bt8xx/dst.c:831:
+		dprintk(verbose, DST_INFO, 1, "Tring to recover.. ");
 		                               ^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 20)
#1124: FILE: drivers/media/dvb/bt8xx/dst.c:1088:
+		if (state->type_flags & DST_TYPE_HAS_OBS_REGS)
+		    state->tx_tuna[2] = 0x00;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 20)
#1126: FILE: drivers/media/dvb/bt8xx/dst.c:1090:
+		else
+		    state->tx_tuna[2] = 0xff;

WARNING:LONG_LINE: line length of 138 exceeds 100 columns
#1207: FILE: drivers/media/dvb/bt8xx/dst.c:1145:
+		memcpy(state->tx_tuna, ((state->type_flags & DST_TYPE_HAS_NEWTUNE) ? sat_tuna_188 : sat_tuna_204), sizeof (sat_tuna_204));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1207: FILE: drivers/media/dvb/bt8xx/dst.c:1145:
+		memcpy(state->tx_tuna, ((state->type_flags & DST_TYPE_HAS_NEWTUNE) ? sat_tuna_188 : sat_tuna_204), sizeof (sat_tuna_204));

WARNING:LONG_LINE: line length of 138 exceeds 100 columns
#1209: FILE: drivers/media/dvb/bt8xx/dst.c:1147:
+		memcpy(state->tx_tuna, ((state->type_flags & DST_TYPE_HAS_NEWTUNE) ? ter_tuna_188 : ter_tuna_204), sizeof (ter_tuna_204));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1209: FILE: drivers/media/dvb/bt8xx/dst.c:1147:
+		memcpy(state->tx_tuna, ((state->type_flags & DST_TYPE_HAS_NEWTUNE) ? ter_tuna_188 : ter_tuna_204), sizeof (ter_tuna_204));

WARNING:LONG_LINE: line length of 138 exceeds 100 columns
#1211: FILE: drivers/media/dvb/bt8xx/dst.c:1149:
+		memcpy(state->tx_tuna, ((state->type_flags & DST_TYPE_HAS_NEWTUNE) ? cab_tuna_188 : cab_tuna_204), sizeof (cab_tuna_204));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1211: FILE: drivers/media/dvb/bt8xx/dst.c:1149:
+		memcpy(state->tx_tuna, ((state->type_flags & DST_TYPE_HAS_NEWTUNE) ? cab_tuna_188 : cab_tuna_204), sizeof (cab_tuna_204));

WARNING:LONG_LINE_STRING: line length of 118 exceeds 100 columns
#1347: FILE: drivers/media/dvb/bt8xx/dst.c:1267:
+		dprintk(verbose, DST_ERROR, 1, "unknown DST type. please report to the LinuxTV.org DVB mailinglist.");

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1403: FILE: drivers/media/dvb/bt8xx/dst_ca.c:18:
 ^IFoundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#1425: FILE: drivers/media/dvb/bt8xx/dst_ca.c:36:
+#define dprintk(x, y, z, format, arg...) do {						\
+	if (z) {									\
+		if	((x > DST_CA_ERROR) && (x > y))					\
+			printk(KERN_ERR "%s: " format "\n", __FUNCTION__ , ##arg);	\
+		else if	((x > DST_CA_NOTICE) && (x > y))				\
+			printk(KERN_NOTICE "%s: " format "\n", __FUNCTION__, ##arg);	\
+		else if ((x > DST_CA_INFO) && (x > y))					\
+			printk(KERN_INFO "%s: " format "\n", __FUNCTION__, ##arg);	\
+		else if ((x > DST_CA_DEBUG) && (x > y))					\
+			printk(KERN_DEBUG "%s: " format "\n", __FUNCTION__, ##arg);	\
+	} else {									\
+		if (x > y)								\
+			printk(format, ##arg);						\
+	}										\
+} while(0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#1425: FILE: drivers/media/dvb/bt8xx/dst_ca.c:36:
+#define dprintk(x, y, z, format, arg...) do {						\
+	if (z) {									\
+		if	((x > DST_CA_ERROR) && (x > y))					\
+			printk(KERN_ERR "%s: " format "\n", __FUNCTION__ , ##arg);	\
+		else if	((x > DST_CA_NOTICE) && (x > y))				\
+			printk(KERN_NOTICE "%s: " format "\n", __FUNCTION__, ##arg);	\
+		else if ((x > DST_CA_INFO) && (x > y))					\
+			printk(KERN_INFO "%s: " format "\n", __FUNCTION__, ##arg);	\
+		else if ((x > DST_CA_DEBUG) && (x > y))					\
+			printk(KERN_DEBUG "%s: " format "\n", __FUNCTION__, ##arg);	\
+	} else {									\
+		if (x > y)								\
+			printk(format, ##arg);						\
+	}										\
+} while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'y' - possible side-effects?
#1425: FILE: drivers/media/dvb/bt8xx/dst_ca.c:36:
+#define dprintk(x, y, z, format, arg...) do {						\
+	if (z) {									\
+		if	((x > DST_CA_ERROR) && (x > y))					\
+			printk(KERN_ERR "%s: " format "\n", __FUNCTION__ , ##arg);	\
+		else if	((x > DST_CA_NOTICE) && (x > y))				\
+			printk(KERN_NOTICE "%s: " format "\n", __FUNCTION__, ##arg);	\
+		else if ((x > DST_CA_INFO) && (x > y))					\
+			printk(KERN_INFO "%s: " format "\n", __FUNCTION__, ##arg);	\
+		else if ((x > DST_CA_DEBUG) && (x > y))					\
+			printk(KERN_DEBUG "%s: " format "\n", __FUNCTION__, ##arg);	\
+	} else {									\
+		if (x > y)								\
+			printk(format, ##arg);						\
+	}										\
+} while(0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'y' may be better as '(y)' to avoid precedence issues
#1425: FILE: drivers/media/dvb/bt8xx/dst_ca.c:36:
+#define dprintk(x, y, z, format, arg...) do {						\
+	if (z) {									\
+		if	((x > DST_CA_ERROR) && (x > y))					\
+			printk(KERN_ERR "%s: " format "\n", __FUNCTION__ , ##arg);	\
+		else if	((x > DST_CA_NOTICE) && (x > y))				\
+			printk(KERN_NOTICE "%s: " format "\n", __FUNCTION__, ##arg);	\
+		else if ((x > DST_CA_INFO) && (x > y))					\
+			printk(KERN_INFO "%s: " format "\n", __FUNCTION__, ##arg);	\
+		else if ((x > DST_CA_DEBUG) && (x > y))					\
+			printk(KERN_DEBUG "%s: " format "\n", __FUNCTION__, ##arg);	\
+	} else {									\
+		if (x > y)								\
+			printk(format, ##arg);						\
+	}										\
+} while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'format' - possible side-effects?
#1425: FILE: drivers/media/dvb/bt8xx/dst_ca.c:36:
+#define dprintk(x, y, z, format, arg...) do {						\
+	if (z) {									\
+		if	((x > DST_CA_ERROR) && (x > y))					\
+			printk(KERN_ERR "%s: " format "\n", __FUNCTION__ , ##arg);	\
+		else if	((x > DST_CA_NOTICE) && (x > y))				\
+			printk(KERN_NOTICE "%s: " format "\n", __FUNCTION__, ##arg);	\
+		else if ((x > DST_CA_INFO) && (x > y))					\
+			printk(KERN_INFO "%s: " format "\n", __FUNCTION__, ##arg);	\
+		else if ((x > DST_CA_DEBUG) && (x > y))					\
+			printk(KERN_DEBUG "%s: " format "\n", __FUNCTION__, ##arg);	\
+	} else {									\
+		if (x > y)								\
+			printk(format, ##arg);						\
+	}										\
+} while(0)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'x > DST_CA_ERROR'
#1427: FILE: drivers/media/dvb/bt8xx/dst_ca.c:38:
+		if	((x > DST_CA_ERROR) && (x > y))					\

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'x > y'
#1427: FILE: drivers/media/dvb/bt8xx/dst_ca.c:38:
+		if	((x > DST_CA_ERROR) && (x > y))					\

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1428: FILE: drivers/media/dvb/bt8xx/dst_ca.c:39:
+			printk(KERN_ERR "%s: " format "\n", __FUNCTION__ , ##arg);	\

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#1428: FILE: drivers/media/dvb/bt8xx/dst_ca.c:39:
+			printk(KERN_ERR "%s: " format "\n", __FUNCTION__ , ##arg);	\
 			                                                 ^

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1428: FILE: drivers/media/dvb/bt8xx/dst_ca.c:39:
+			printk(KERN_ERR "%s: " format "\n", __FUNCTION__ , ##arg);	\

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#1430: FILE: drivers/media/dvb/bt8xx/dst_ca.c:41:
+			printk(KERN_NOTICE "%s: " format "\n", __FUNCTION__, ##arg);	\

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1430: FILE: drivers/media/dvb/bt8xx/dst_ca.c:41:
+			printk(KERN_NOTICE "%s: " format "\n", __FUNCTION__, ##arg);	\

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1432: FILE: drivers/media/dvb/bt8xx/dst_ca.c:43:
+			printk(KERN_INFO "%s: " format "\n", __FUNCTION__, ##arg);	\

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1432: FILE: drivers/media/dvb/bt8xx/dst_ca.c:43:
+			printk(KERN_INFO "%s: " format "\n", __FUNCTION__, ##arg);	\

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1434: FILE: drivers/media/dvb/bt8xx/dst_ca.c:45:
+			printk(KERN_DEBUG "%s: " format "\n", __FUNCTION__, ##arg);	\

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1434: FILE: drivers/media/dvb/bt8xx/dst_ca.c:45:
+			printk(KERN_DEBUG "%s: " format "\n", __FUNCTION__, ##arg);	\

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1437: FILE: drivers/media/dvb/bt8xx/dst_ca.c:48:
+			printk(format, ##arg);						\

ERROR:SPACING: space required before the open parenthesis '('
#1439: FILE: drivers/media/dvb/bt8xx/dst_ca.c:50:
+} while(0)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1441: FILE: drivers/media/dvb/bt8xx/dst_ca.c:52:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LONG_LINE_STRING: line length of 121 exceeds 100 columns
#1462: FILE: drivers/media/dvb/bt8xx/dst_ca.c:76:
+	dprintk(verbose, DST_CA_DEBUG, 1, " ========================= Checksum calculation ===========================");

WARNING:LONG_LINE_STRING: line length of 121 exceeds 100 columns
#1487: FILE: drivers/media/dvb/bt8xx/dst_ca.c:89:
+	dprintk(verbose, DST_CA_DEBUG, 1, " ==========================================================================");

WARNING:LONG_LINE_STRING: line length of 144 exceeds 100 columns
#1555: FILE: drivers/media/dvb/bt8xx/dst_ca.c:160:
+	dprintk(verbose, DST_CA_INFO, 1, " ================================ CI Module Application Info ======================================");

WARNING:LONG_LINE_STRING: line length of 136 exceeds 100 columns
#1556: FILE: drivers/media/dvb/bt8xx/dst_ca.c:161:
+	dprintk(verbose, DST_CA_INFO, 1, " Application Type=[%d], Application Vendor=[%d], Vendor Code=[%d]\n%s: Application info=[%s]",

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#1558: FILE: drivers/media/dvb/bt8xx/dst_ca.c:163:
+		(state->messages[10] << 8) | state->messages[11], __FUNCTION__, (char *)(&state->messages[12]));

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1558: FILE: drivers/media/dvb/bt8xx/dst_ca.c:163:
+		(state->messages[10] << 8) | state->messages[11], __FUNCTION__, (char *)(&state->messages[12]));

WARNING:LONG_LINE_STRING: line length of 144 exceeds 100 columns
#1559: FILE: drivers/media/dvb/bt8xx/dst_ca.c:164:
+	dprintk(verbose, DST_CA_INFO, 1, " ==================================================================================================");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1597: FILE: drivers/media/dvb/bt8xx/dst_ca.c:195:
+	if (copy_to_user((struct ca_caps *)arg, p_ca_caps, sizeof (struct ca_caps)))

CHECK:BRACES: Unbalanced braces around else statement
#1642: FILE: drivers/media/dvb/bt8xx/dst_ca.c:238:
+	} else

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1647: FILE: drivers/media/dvb/bt8xx/dst_ca.c:241:
+	if (copy_to_user((struct ca_slot_info *)arg, p_ca_slot_info, sizeof (struct ca_slot_info)))

WARNING:LONG_LINE: line length of 148 exceeds 100 columns
#1661: FILE: drivers/media/dvb/bt8xx/dst_ca.c:257:
+		dprintk(verbose, DST_CA_NOTICE, 1, " Message = [%02x %02x %02x]", p_ca_message->msg[0], p_ca_message->msg[1], p_ca_message->msg[2]);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1679: FILE: drivers/media/dvb/bt8xx/dst_ca.c:269:
+			if (copy_to_user((void *)arg, p_ca_message, sizeof (struct ca_msg)) )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1679: FILE: drivers/media/dvb/bt8xx/dst_ca.c:269:
+			if (copy_to_user((void *)arg, p_ca_message, sizeof (struct ca_msg)) )

WARNING:LONG_LINE_STRING: line length of 103 exceeds 100 columns
#1689: FILE: drivers/media/dvb/bt8xx/dst_ca.c:285:
+			dprintk(verbose, DST_CA_ERROR, 1, " Message too long ! *** Bailing Out *** !");

WARNING:TYPO_SPELLING: 'succes' may be misspelled - perhaps 'success'?
#1709: FILE: drivers/media/dvb/bt8xx/dst_ca.c:313:
+	dprintk(verbose, DST_CA_NOTICE, 1, " DST-CI Command succes.");
 	                                                    ^^^^^^

WARNING:LONG_LINE_COMMENT: line length of 118 exceeds 100 columns
#1851: FILE: drivers/media/dvb/bt8xx/dst_ca.c:434:
+			if ((ca_set_pmt(state, p_ca_message, hw_buffer, 0, 0)) < 0) {	// code simplification started

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE_STRING: line length of 102 exceeds 100 columns
#1871: FILE: drivers/media/dvb/bt8xx/dst_ca.c:453:
+				dprintk(verbose, DST_CA_ERROR, 1, " -->CA_APP_INFO_ENQUIRY Failed !");

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000154495.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 10 errors, 53 warnings, 22 checks, 2023 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000154495.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
