WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#40: 
changes in 2.5.12 and Paul Menage added one fix. The following patch includes 

WARNING:TYPO_SPELLING: 'availabe' may be misspelled - perhaps 'available'?
#50: 
The patch is also availabe on SourceForge here:
                  ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:SPACING: space required after that ',' (ctx:VxV)
#70: FILE: fs/dcache.c:708:
+	dentry = __d_lookup(parent,name);
 	                          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#77: FILE: fs/dcache.c:715:
+struct dentry * __d_lookup(struct dentry * parent, struct qstr * name)  $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#77: FILE: fs/dcache.c:715:
+struct dentry * __d_lookup(struct dentry * parent, struct qstr * name)  

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#77: FILE: fs/dcache.c:715:
+struct dentry * __d_lookup(struct dentry * parent, struct qstr * name)  

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#77: FILE: fs/dcache.c:715:
+struct dentry * __d_lookup(struct dentry * parent, struct qstr * name)  

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#79: FILE: fs/dcache.c:717:
+{
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#112: FILE: fs/intermezzo/journal.c:620:
+        error = path_lookup(path, LOOKUP_PARENT, nd);
                                                  ^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#112: FILE: fs/intermezzo/journal.c:620:
+        error = path_lookup(path, LOOKUP_PARENT, nd);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#112: FILE: fs/intermezzo/journal.c:620:
+        error = path_lookup(path, LOOKUP_PARENT, nd);$

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#125: FILE: fs/intermezzo/presto.c:56:
+        err = path_lookup(name, flags, nd);
                                        ^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#125: FILE: fs/intermezzo/presto.c:56:
+        err = path_lookup(name, flags, nd);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#125: FILE: fs/intermezzo/presto.c:56:
+        err = path_lookup(name, flags, nd);$

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#138: FILE: fs/intermezzo/vfs.c:705:
+        error = path_lookup(pathname,  LOOKUP_PARENT, &nd);
                                                        ^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#138: FILE: fs/intermezzo/vfs.c:705:
+        error = path_lookup(pathname,  LOOKUP_PARENT, &nd);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#138: FILE: fs/intermezzo/vfs.c:705:
+        error = path_lookup(pathname,  LOOKUP_PARENT, &nd);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#148: FILE: fs/intermezzo/vfs.c:857:
+                error = path_lookup(from, LOOKUP_POSITIVE, &old_nd);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#148: FILE: fs/intermezzo/vfs.c:857:
+                error = path_lookup(from, LOOKUP_POSITIVE, &old_nd);$

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#153: FILE: fs/intermezzo/vfs.c:860:
+                error = path_lookup(to, LOOKUP_PARENT, &nd);
                                                         ^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#153: FILE: fs/intermezzo/vfs.c:860:
+                error = path_lookup(to, LOOKUP_PARENT, &nd);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#153: FILE: fs/intermezzo/vfs.c:860:
+                error = path_lookup(to, LOOKUP_PARENT, &nd);$

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#163: FILE: fs/intermezzo/vfs.c:1062:
+        error = path_lookup(name, LOOKUP_PARENT, &nd);
                                                   ^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#163: FILE: fs/intermezzo/vfs.c:1062:
+        error = path_lookup(name, LOOKUP_PARENT, &nd);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#163: FILE: fs/intermezzo/vfs.c:1062:
+        error = path_lookup(name, LOOKUP_PARENT, &nd);$

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#173: FILE: fs/intermezzo/vfs.c:1222:
+        error = path_lookup(to, LOOKUP_PARENT, &nd);
                                                 ^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#173: FILE: fs/intermezzo/vfs.c:1222:
+        error = path_lookup(to, LOOKUP_PARENT, &nd);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#173: FILE: fs/intermezzo/vfs.c:1222:
+        error = path_lookup(to, LOOKUP_PARENT, &nd);$

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#183: FILE: fs/intermezzo/vfs.c:1379:
+        error = path_lookup(pathname, LOOKUP_PARENT, &nd);
                                                       ^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#183: FILE: fs/intermezzo/vfs.c:1379:
+        error = path_lookup(pathname, LOOKUP_PARENT, &nd);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#183: FILE: fs/intermezzo/vfs.c:1379:
+        error = path_lookup(pathname, LOOKUP_PARENT, &nd);$

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#193: FILE: fs/intermezzo/vfs.c:1524:
+        error = path_lookup(name, LOOKUP_PARENT, &nd);
                                                   ^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#193: FILE: fs/intermezzo/vfs.c:1524:
+        error = path_lookup(name, LOOKUP_PARENT, &nd);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#193: FILE: fs/intermezzo/vfs.c:1524:
+        error = path_lookup(name, LOOKUP_PARENT, &nd);$

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#203: FILE: fs/intermezzo/vfs.c:1689:
+        error = path_lookup(tmp, LOOKUP_PARENT, &nd);
                                                  ^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#203: FILE: fs/intermezzo/vfs.c:1689:
+        error = path_lookup(tmp, LOOKUP_PARENT, &nd);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#203: FILE: fs/intermezzo/vfs.c:1689:
+        error = path_lookup(tmp, LOOKUP_PARENT, &nd);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#214: FILE: fs/intermezzo/vfs.c:1968:
+        error = path_lookup(oldname, LOOKUP_PARENT, &oldnd);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#214: FILE: fs/intermezzo/vfs.c:1968:
+        error = path_lookup(oldname, LOOKUP_PARENT, &oldnd);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#220: FILE: fs/intermezzo/vfs.c:1972:
+        error = path_lookup(newname, LOOKUP_PARENT, &newnd);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#220: FILE: fs/intermezzo/vfs.c:1972:
+        error = path_lookup(newname, LOOKUP_PARENT, &newnd);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#232: FILE: fs/namei.c:266:
+^I$

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#241: FILE: fs/namei.c:277:
+static inline void unlock_nd(struct nameidata *nd)
                                                ^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#245: FILE: fs/namei.c:281:
+	struct dentry *dentry = nd->old_dentry;
+	mntget(nd->mnt);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#254: FILE: fs/namei.c:290:
+static inline void lock_nd(struct nameidata *nd)
                                              ^^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IXUGO' are not preferred. Consider using octal permissions '0111'.
#286: FILE: fs/namei.c:322:
+	if ((inode->i_mode & S_IXUGO) && capable(CAP_DAC_OVERRIDE))

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#289: FILE: fs/namei.c:325:
+	if (S_ISDIR(inode->i_mode) && capable(CAP_DAC_READ_SEARCH))
+	return 0;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#316: FILE: fs/namei.c:423:
+	mountpoint=dget((*mnt)->mnt_mountpoint);
 	          ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#332: FILE: fs/namei.c:435:
+	int res = 0;
+	while (d_mountpoint(*dentry)) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#334: FILE: fs/namei.c:437:
+		struct vfsmount *mounted = lookup_mnt(*mnt, *dentry);
+		if (!mounted)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#376: FILE: fs/namei.c:480:
+		parent=(*mnt)->mnt_parent;
 		      ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#387: FILE: fs/namei.c:483:
+		*dentry=(*mnt)->mnt_mountpoint;
 		       ^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#405: FILE: fs/namei.c:499:
+static int do_lookup(struct nameidata *nd, struct qstr *name,
                                        ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#422: FILE: fs/namei.c:516:
+	unlock_nd(nd);
 	          ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#434: FILE: fs/namei.c:528:
+	lock_nd(nd);
 	        ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#440: FILE: fs/namei.c:534:
+	unlock_nd(nd);
 	          ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#450: FILE: fs/namei.c:544:
+	lock_nd(nd);
 	        ^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#465: FILE: fs/namei.c:562:
+^I$

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#482: FILE: fs/namei.c:580:
+			unlock_nd(nd);
 			          ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#484: FILE: fs/namei.c:582:
+			lock_nd(nd);
 			        ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#509: FILE: fs/namei.c:633:
+		err = do_lookup(nd, &this, &next, &pinned, LOOKUP_CONTINUE);
 		                ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#533: FILE: fs/namei.c:650:
+			unlock_nd(nd);
 			          ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#534: FILE: fs/namei.c:651:
+			err = do_follow_link(next.dentry, nd);
 			                                  ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#539: FILE: fs/namei.c:656:
+			lock_nd(nd);
 			        ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#581: FILE: fs/namei.c:696:
+		err = do_lookup(nd, &this, &next, &pinned, 0);
 		                ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#592: FILE: fs/namei.c:705:
+			unlock_nd(nd);
 			          ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#593: FILE: fs/namei.c:706:
+			err = do_follow_link(next.dentry, nd);
 			                                  ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#599: FILE: fs/namei.c:712:
+			lock_nd(nd);
 			        ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#642: FILE: fs/namei.c:736:
+		unlock_nd(nd);
 		          ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#650: FILE: fs/namei.c:741:
+	unlock_nd(nd);
 	          ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#661: FILE: fs/namei.c:752:
+	lock_nd(nd);
 	        ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#681: FILE: fs/namei.c:838:
+int path_lookup(const char *name, unsigned int flags, struct nameidata *nd)
                                                                         ^^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#692: FILE: fs/namei.c:842:
+	if (*name=='/') {
 	         ^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#698: FILE: fs/namei.c:848:
+			if (__emul_lookup_dentry(name,nd))
 			                              ^^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#698: FILE: fs/namei.c:848:
+			if (__emul_lookup_dentry(name,nd))
 			                             ^

ERROR:SPACING: space required before the open brace '{'
#707: FILE: fs/namei.c:857:
+	else{

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#707: FILE: fs/namei.c:857:
+	}
+	else{

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#707: FILE: fs/namei.c:857:
+	else{

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#715: FILE: fs/namei.c:865:
+	return link_path_walk(name, nd);
 	                            ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#723: FILE: fs/namei.c:2070:
+	lock_nd(nd);
 	        ^^

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#734: FILE: fs/namespace.c:26:
+int __init init_rootfs(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#747: FILE: fs/nfsd/export.c:217:
+	err = path_lookup(nxp->ex_path, LOOKUP_POSITIVE, &nd);
 	                                                  ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#757: FILE: fs/nfsd/export.c:413:
+		if (path_lookup(path, LOOKUP_POSITIVE, &nd))  {
 		                                        ^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#768: FILE: include/linux/dcache.h:222:
+extern struct dentry * __d_lookup(struct dentry *, struct qstr *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#768: FILE: include/linux/dcache.h:222:
+extern struct dentry * __d_lookup(struct dentry *, struct qstr *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#768: FILE: include/linux/dcache.h:222:
+extern struct dentry * __d_lookup(struct dentry *, struct qstr *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct qstr *' should also have an identifier name
#768: FILE: include/linux/dcache.h:222:
+extern struct dentry * __d_lookup(struct dentry *, struct qstr *);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#860: FILE: net/unix/af_unix.c:593:
+^I^Ierr = path_lookup(sunname->sun_path, $

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#861: FILE: net/unix/af_unix.c:594:
+			      LOOKUP_POSITIVE|LOOKUP_FOLLOW, &nd);
 			                                      ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#861: FILE: net/unix/af_unix.c:594:
+		err = path_lookup(sunname->sun_path, 
+			      LOOKUP_POSITIVE|LOOKUP_FOLLOW, &nd);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#861: FILE: net/unix/af_unix.c:594:
+			      LOOKUP_POSITIVE|LOOKUP_FOLLOW, &nd);
 			                     ^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#871: FILE: net/unix/af_unix.c:687:
+		err = path_lookup(sunaddr->sun_path, LOOKUP_PARENT, &nd);
 		                                                     ^^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000363528.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 28 errors, 59 warnings, 5 checks, 740 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000363528.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
