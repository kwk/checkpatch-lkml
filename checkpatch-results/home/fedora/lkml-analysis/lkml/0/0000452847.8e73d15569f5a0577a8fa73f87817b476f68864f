WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#90: 
ftp://ftp.kernel.org/pub/linux/kernel/people/wli/vm/lazy_buddy/lazy_buddy-2.5.19-3

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#104: FILE: fs/proc/proc_misc.c:134:
+	extern unsigned long nr_deferred_pages(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:SPACING: space prohibited after that open parenthesis '('
#132: FILE: fs/proc/proc_misc.c:187:
+static int fragmentation_read_proc(	char *page,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#133: FILE: fs/proc/proc_misc.c:188:
+static int fragmentation_read_proc(	char *page,
+					char **start,

WARNING:LINE_SPACING: Missing a blank line after declarations
#293: FILE: mm/page_alloc.c:64:
+	unsigned long page_mapnr = (unsigned long)(page - mem_map);
+	if (page_mapnr >= zone->zone_start_mapnr + zone->size)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#426: FILE: mm/page_alloc.c:156:
+	BUG_ON(page_idx & ~mask);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#440: FILE: mm/page_alloc.c:164:
+		BUG_ON(area >= zone->free_area + MAX_ORDER);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#454: FILE: mm/page_alloc.c:178:
+		BUG_ON(BAD_RANGE(zone, buddy1));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#455: FILE: mm/page_alloc.c:179:
+		BUG_ON(BAD_RANGE(zone, buddy2));

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#569: FILE: mm/page_alloc.c:292:
+	switch (area->active - area->locally_free) {
+		case 0:
[...]
+		case 1:
[...]
+		default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#579: FILE: mm/page_alloc.c:302:
+			 * Fall through and also free the page we were

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#637: FILE: mm/page_alloc.c:349:
+	BUG_ON(page->mapping);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#639: FILE: mm/page_alloc.c:351:
+	BUG_ON(PagePrivate(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#640: FILE: mm/page_alloc.c:352:
+	BUG_ON(PageLocked(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#641: FILE: mm/page_alloc.c:353:
+	BUG_ON(PageLRU(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#642: FILE: mm/page_alloc.c:354:
+	BUG_ON(PageActive(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#643: FILE: mm/page_alloc.c:355:
+	BUG_ON(PageWriteback(page));

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#654: FILE: mm/page_alloc.c:365:
+	if (current->flags & PF_FREE_PAGES
+		&& !current->nr_local_pages

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#655: FILE: mm/page_alloc.c:366:
+		&& !current->nr_local_pages
+		&& !in_interrupt()) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#656: FILE: mm/page_alloc.c:367:
+		&& !in_interrupt()) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#672: FILE: mm/page_alloc.c:383:
+static inline struct page *expand(zone_t *zone, struct page *page,
 	 unsigned long index, int low, int high, free_area_t * area)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#679: FILE: mm/page_alloc.c:388:
+		BUG_ON(BAD_RANGE(zone, page));

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#686: FILE: mm/page_alloc.c:393:
+		__change_bit(index >> (1+high), area->map);
 		                        ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#692: FILE: mm/page_alloc.c:397:
+	BUG_ON(BAD_RANGE(zone, page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#753: FILE: mm/page_alloc.c:423:
+		BUG_ON(BAD_RANGE(zone, page));

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#756: FILE: mm/page_alloc.c:426:
+		if (curr_order != MAX_ORDER-1)
 		                           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#757: FILE: mm/page_alloc.c:427:
+			__change_bit(index >> (1+curr_order), area->map);
 			                        ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#762: FILE: mm/page_alloc.c:432:
+		BUG_ON(BAD_RANGE(zone, page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#763: FILE: mm/page_alloc.c:433:
+		BUG_ON(PageLRU(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#764: FILE: mm/page_alloc.c:434:
+		BUG_ON(PageActive(page));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#765: FILE: mm/page_alloc.c:435:
+^I^Ireturn page;^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited after that open parenthesis '('
#855: FILE: mm/page_alloc.c:508:
+		len += sprintf(	buf + len,

ERROR:SPACING: space prohibited after that open parenthesis '('
#861: FILE: mm/page_alloc.c:514:
+			len += sprintf( buf + len,

ERROR:SPACING: space prohibited after that open parenthesis '('
#867: FILE: mm/page_alloc.c:520:
+			len += sprintf( buf + len,

ERROR:SPACING: space prohibited after that open parenthesis '('
#873: FILE: mm/page_alloc.c:526:
+			len += sprintf( buf + len,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#895: FILE: mm/page_alloc.c:550:
+	struct page * tmp;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#902: FILE: mm/page_alloc.c:555:
+	BUG_ON(in_interrupt());

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#980: FILE: mm/page_alloc.c:586:
+		BUG_ON(PagePrivate(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#981: FILE: mm/page_alloc.c:587:
+		BUG_ON(PageLocked(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#982: FILE: mm/page_alloc.c:588:
+		BUG_ON(PageLRU(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#983: FILE: mm/page_alloc.c:589:
+		BUG_ON(PageActive(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#984: FILE: mm/page_alloc.c:590:
+		BUG_ON(PageDirty(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#985: FILE: mm/page_alloc.c:591:
+		BUG_ON(PageWriteback(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#986: FILE: mm/page_alloc.c:592:
+		BUG_ON(page->mapping);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1001: FILE: mm/page_alloc.c:605:
+		BUG_ON(!nr_pages);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1004: FILE: mm/page_alloc.c:608:
+	BUG_ON(nr_pages);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1138: FILE: mm/page_alloc.c:1094:
+	BUG_ON(zone_start_paddr & ~PAGE_MASK);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000452847.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 8 errors, 31 warnings, 8 checks, 1034 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000452847.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
