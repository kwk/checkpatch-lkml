WARNING:INDENTED_LABEL: labels should not be indented
#108: FILE: fs/autofs4/root.c:30:
+	open:		dcache_dir_open,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#109: FILE: fs/autofs4/root.c:31:
+	release:	dcache_dir_close,
 	       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:INDENTED_LABEL: labels should not be indented
#109: FILE: fs/autofs4/root.c:31:
+	release:	dcache_dir_close,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#110: FILE: fs/autofs4/root.c:32:
+	llseek:		dcache_dir_lseek,
 	      ^

WARNING:INDENTED_LABEL: labels should not be indented
#110: FILE: fs/autofs4/root.c:32:
+	llseek:		dcache_dir_lseek,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#113: FILE: fs/autofs4/root.c:35:
+	fsync:		dcache_dir_fsync,
 	     ^

WARNING:INDENTED_LABEL: labels should not be indented
#113: FILE: fs/autofs4/root.c:35:
+	fsync:		dcache_dir_fsync,

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#212: FILE: fs/readdir.c:38:
+	static struct qstr cursor_name = {len:1, name:"."};
 	                                             ^

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#228: FILE: fs/readdir.c:54:
+	switch (origin) {
+		case 1:
[...]
+		case 0:
[...]
+		default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LINE_SPACING: Missing a blank line after declarations
#249: FILE: fs/readdir.c:75:
+				struct dentry *next;
+				next = list_entry(p, struct dentry, d_child);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#263: FILE: fs/readdir.c:89:
+int dcache_dir_fsync(struct file * file, struct dentry *dentry, int datasync)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#283: FILE: fs/readdir.c:108:
 	switch (i) {
[...]
+		default:

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#338: FILE: fs/readdir.c:131:
+			for (p=q->next; p != &dentry->d_subdirs; p=p->next) {
 			      ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#338: FILE: fs/readdir.c:131:
+			for (p=q->next; p != &dentry->d_subdirs; p=p->next) {
 			                                          ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#340: FILE: fs/readdir.c:133:
+				struct dentry *next;
+				next = list_entry(p, struct dentry, d_child);

WARNING:LONG_LINE: line length of 140 exceeds 100 columns
#346: FILE: fs/readdir.c:138:
+				if (filldir(dirent, next->d_name.name, next->d_name.len, filp->f_pos, next->d_inode->i_ino, DT_UNKNOWN) < 0)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:CONST_STRUCT: struct file_operations should normally be const
#361: FILE: fs/readdir.c:152:
+struct file_operations dcache_dir_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:INDENTED_LABEL: labels should not be indented
#362: FILE: fs/readdir.c:153:
+	open:		dcache_dir_open,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#363: FILE: fs/readdir.c:154:
+	release:	dcache_dir_close,
 	       ^

WARNING:INDENTED_LABEL: labels should not be indented
#363: FILE: fs/readdir.c:154:
+	release:	dcache_dir_close,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#364: FILE: fs/readdir.c:155:
+	llseek:		dcache_dir_lseek,
 	      ^

WARNING:INDENTED_LABEL: labels should not be indented
#364: FILE: fs/readdir.c:155:
+	llseek:		dcache_dir_lseek,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#365: FILE: fs/readdir.c:156:
+	read:		generic_read_dir,
 	    ^

WARNING:INDENTED_LABEL: labels should not be indented
#365: FILE: fs/readdir.c:156:
+	read:		generic_read_dir,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#366: FILE: fs/readdir.c:157:
+	readdir:	dcache_readdir,
 	       ^

WARNING:INDENTED_LABEL: labels should not be indented
#366: FILE: fs/readdir.c:157:
+	readdir:	dcache_readdir,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#367: FILE: fs/readdir.c:158:
+	fsync:		dcache_dir_fsync,
 	     ^

WARNING:INDENTED_LABEL: labels should not be indented
#367: FILE: fs/readdir.c:158:
+	fsync:		dcache_dir_fsync,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#379: FILE: include/linux/fs.h:1395:
+extern int dcache_dir_open(struct inode *, struct file *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#379: FILE: include/linux/fs.h:1395:
+extern int dcache_dir_open(struct inode *, struct file *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#379: FILE: include/linux/fs.h:1395:
+extern int dcache_dir_open(struct inode *, struct file *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#380: FILE: include/linux/fs.h:1396:
+extern int dcache_dir_close(struct inode *, struct file *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#380: FILE: include/linux/fs.h:1396:
+extern int dcache_dir_close(struct inode *, struct file *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#380: FILE: include/linux/fs.h:1396:
+extern int dcache_dir_close(struct inode *, struct file *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#381: FILE: include/linux/fs.h:1397:
+extern loff_t dcache_dir_lseek(struct file *, loff_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#381: FILE: include/linux/fs.h:1397:
+extern loff_t dcache_dir_lseek(struct file *, loff_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t' should also have an identifier name
#381: FILE: include/linux/fs.h:1397:
+extern loff_t dcache_dir_lseek(struct file *, loff_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#381: FILE: include/linux/fs.h:1397:
+extern loff_t dcache_dir_lseek(struct file *, loff_t, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#382: FILE: include/linux/fs.h:1398:
+extern int dcache_dir_fsync(struct file *, struct dentry *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#382: FILE: include/linux/fs.h:1398:
+extern int dcache_dir_fsync(struct file *, struct dentry *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#382: FILE: include/linux/fs.h:1398:
+extern int dcache_dir_fsync(struct file *, struct dentry *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#382: FILE: include/linux/fs.h:1398:
+extern int dcache_dir_fsync(struct file *, struct dentry *, int);

WARNING:CONST_STRUCT: struct file_operations should normally be const
#384: FILE: include/linux/fs.h:1400:
+extern struct file_operations dcache_dir_ops;

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#396: FILE: kernel/ksyms.c:270:
+EXPORT_SYMBOL(dcache_dir_close);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#397: FILE: kernel/ksyms.c:271:
+EXPORT_SYMBOL(dcache_dir_lseek);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#398: FILE: kernel/ksyms.c:272:
+EXPORT_SYMBOL(dcache_dir_fsync);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000502433.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 13 errors, 28 warnings, 5 checks, 340 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000502433.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
