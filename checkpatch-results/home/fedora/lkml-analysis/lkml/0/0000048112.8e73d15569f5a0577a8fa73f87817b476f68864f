WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#40: 
AVL tree [1], but since I found a way to use some "unused" fields in struct page,

WARNING:TYPO_SPELLING: 'upto' may be misspelled - perhaps 'up to'?
#54: 
When user requests some memory regiosn, it's size is rounded upto
                                                             ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'exept' may be misspelled - perhaps 'except'?
#83: 
All above lists and arrays are not accessed by different CPUs, exept
                                                               ^^^^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#156: FILE: include/linux/skbuff.h:330:
+extern void *avl_alloc(unsigned int size, gfp_t gfp_mask);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#157: FILE: include/linux/skbuff.h:331:
+extern void avl_free(void *ptr, unsigned int size);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#158: FILE: include/linux/skbuff.h:332:
+extern int avl_init(void);

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#177: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#191: FILE: net/core/alloc/avl.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#192: FILE: net/core/alloc/avl.c:2:
+ * ^Iavl.c$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#193: FILE: net/core/alloc/avl.c:3:
+ * $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#196: FILE: net/core/alloc/avl.c:6:
+ * $

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#208: FILE: net/core/alloc/avl.c:18:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#209: FILE: net/core/alloc/avl.c:19:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#225: FILE: net/core/alloc/avl.c:35:
+#define AVL_CONTAINER_ARRAY_SIZE	(AVL_MAX_SIZE/AVL_MIN_SIZE)
                                 	             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#226: FILE: net/core/alloc/avl.c:36:
+#define AVL_NODES_ON_PAGE		(PAGE_SIZE/sizeof(struct avl_node))
                          		          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#227: FILE: net/core/alloc/avl.c:37:
+#define AVL_NODE_PAGES			((AVL_NODE_NUM+AVL_NODES_ON_PAGE-1)/AVL_NODES_ON_PAGE)
                       			              ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#227: FILE: net/core/alloc/avl.c:37:
+#define AVL_NODE_PAGES			((AVL_NODE_NUM+AVL_NODES_ON_PAGE-1)/AVL_NODES_ON_PAGE)
                       			                                ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#227: FILE: net/core/alloc/avl.c:37:
+#define AVL_NODE_PAGES			((AVL_NODE_NUM+AVL_NODES_ON_PAGE-1)/AVL_NODES_ON_PAGE)
                       			                                   ^

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#230: FILE: net/core/alloc/avl.c:40:
+struct avl_free_list
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#249: FILE: net/core/alloc/avl.c:59:
+^I$

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#250: FILE: net/core/alloc/avl.c:60:
+	idx = id/AVL_NODES_ON_PAGE;
 	        ^

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#251: FILE: net/core/alloc/avl.c:61:
+	off = id%AVL_NODES_ON_PAGE;
 	        ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around avl_node_array[cpu][idx][off]
#253: FILE: net/core/alloc/avl.c:63:
+	return &(avl_node_array[cpu][idx][off]);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#266: FILE: net/core/alloc/avl.c:76:
+	int nr_pages = 1<<order, i;
 	                ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#268: FILE: net/core/alloc/avl.c:78:
+^I$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#269: FILE: net/core/alloc/avl.c:79:
+	for (i=0; i<nr_pages; ++i) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#269: FILE: net/core/alloc/avl.c:79:
+	for (i=0; i<nr_pages; ++i) {
 	           ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#285: FILE: net/core/alloc/avl.c:95:
+	int nr_pages = 1<<order, i;
 	                ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#287: FILE: net/core/alloc/avl.c:97:
+^I^I^I$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#288: FILE: net/core/alloc/avl.c:98:
+	for (i=0; i<nr_pages; ++i) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#288: FILE: net/core/alloc/avl.c:98:
+	for (i=0; i<nr_pages; ++i) {
 	           ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#335: FILE: net/core/alloc/avl.c:145:
+^I$

CHECK:BRACES: braces {} should be used on all arms of this statement
#358: FILE: net/core/alloc/avl.c:168:
+	if (!right)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#360: FILE: net/core/alloc/avl.c:170:
+	else {

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#381: FILE: net/core/alloc/avl.c:191:
+	node->balance = parent->balance = AVL_BALANCED;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#400: FILE: net/core/alloc/avl.c:210:
+static void avl_calc_balance_insert(struct avl_node *a, struct avl_node *b, struct avl_node *x, int cpu)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#415: FILE: net/core/alloc/avl.c:225:
+				switch (x->balance) {
+					case AVL_LEFT:
[...]
+					case AVL_RIGHT:
[...]
+					case AVL_BALANCED:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#425: FILE: net/core/alloc/avl.c:235:
+						a->balance = b->balance = AVL_BALANCED;

ERROR:SPACING: space required before the open brace '{'
#430: FILE: net/core/alloc/avl.c:240:
+		} else if (a->balance == AVL_RIGHT){

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#435: FILE: net/core/alloc/avl.c:245:
+				switch (x->balance) {
+					case AVL_LEFT:
[...]
+					case AVL_RIGHT:
[...]
+					case AVL_BALANCED:

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#445: FILE: net/core/alloc/avl.c:255:
+						a->balance = b->balance = AVL_BALANCED;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#478: FILE: net/core/alloc/avl.c:288:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#499: FILE: net/core/alloc/avl.c:309:
+static struct avl_node *avl_try_insert(struct avl_node *r, struct avl_node *root, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#500: FILE: net/core/alloc/avl.c:310:
+static struct avl_node *avl_try_insert(struct avl_node *r, struct avl_node *root, 
+		struct avl_node *node, enum avl_balance type, int cpu)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#550: FILE: net/core/alloc/avl.c:360:
+	r = s = root;

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#572: FILE: net/core/alloc/avl.c:382:
+		idx = avl_node_id[cpu]/AVL_NODES_ON_PAGE;
 		                      ^

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#573: FILE: net/core/alloc/avl.c:383:
+		off = avl_node_id[cpu]%AVL_NODES_ON_PAGE;
 		                      ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#574: FILE: net/core/alloc/avl.c:384:
+^I^Iprintk("%s: value: %lx, id: %u, max: %lu, cpu: %d, idx: %u, off: %u, on_page: %lu, node: %zu, pages: %lu.\n", $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#574: FILE: net/core/alloc/avl.c:384:
+		printk("%s: value: %lx, id: %u, max: %lu, cpu: %d, idx: %u, off: %u, on_page: %lu, node: %zu, pages: %lu.\n", 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#575: FILE: net/core/alloc/avl.c:385:
+^I^I^I^I__func__, value, avl_node_id[cpu], AVL_NODE_NUM, cpu, idx, off, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#575: FILE: net/core/alloc/avl.c:385:
+		printk("%s: value: %lx, id: %u, max: %lu, cpu: %d, idx: %u, off: %u, on_page: %lu, node: %zu, pages: %lu.\n", 
+				__func__, value, avl_node_id[cpu], AVL_NODE_NUM, cpu, idx, off, 

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#578: FILE: net/core/alloc/avl.c:388:
+	BUG_ON(!node);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#582: FILE: net/core/alloc/avl.c:392:
+	node->left = node->right = node->parent = AVL_NODE_EMPTY;

WARNING:LINE_SPACING: Missing a blank line after declarations
#625: FILE: net/core/alloc/avl.c:435:
+	struct avl_node *node = avl_get_node_ptr((unsigned long)ptr);
+	return node->value;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#630: FILE: net/core/alloc/avl.c:440:
+	return ((value_t)ptr - avl_ptr_to_value(ptr))/AVL_MIN_SIZE;
 	                                             ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#639: FILE: net/core/alloc/avl.c:449:
+	idx = pos/BITS_PER_LONG;
 	         ^

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#640: FILE: net/core/alloc/avl.c:450:
+	pos = pos%BITS_PER_LONG;
 	         ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#643: FILE: net/core/alloc/avl.c:453:
+		m = (~0UL>>pos)<<pos;
 		         ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#643: FILE: net/core/alloc/avl.c:453:
+		m = (~0UL>>pos)<<pos;
 		               ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#664: FILE: net/core/alloc/avl.c:474:
+unsigned int avl_count_set_up(unsigned long *mask, unsigned int mask_num, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#665: FILE: net/core/alloc/avl.c:475:
+unsigned int avl_count_set_up(unsigned long *mask, unsigned int mask_num, 
+		unsigned int pos)

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#670: FILE: net/core/alloc/avl.c:480:
+	idx = pos/BITS_PER_LONG;
 	         ^

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#671: FILE: net/core/alloc/avl.c:481:
+	pos = pos%BITS_PER_LONG;
 	         ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#677: FILE: net/core/alloc/avl.c:487:
+			m = (~0UL<<(BITS_PER_LONG-pos))>>(BITS_PER_LONG-pos);
 			         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#677: FILE: net/core/alloc/avl.c:487:
+			m = (~0UL<<(BITS_PER_LONG-pos))>>(BITS_PER_LONG-pos);
 			                         ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#677: FILE: net/core/alloc/avl.c:487:
+			m = (~0UL<<(BITS_PER_LONG-pos))>>(BITS_PER_LONG-pos);
 			                               ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#677: FILE: net/core/alloc/avl.c:487:
+			m = (~0UL<<(BITS_PER_LONG-pos))>>(BITS_PER_LONG-pos);
 			                                               ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#698: FILE: net/core/alloc/avl.c:508:
+static void avl_fill_bits(struct avl_node *node, unsigned long *mask, unsigned int mask_size, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#699: FILE: net/core/alloc/avl.c:509:
+static void avl_fill_bits(struct avl_node *node, unsigned long *mask, unsigned int mask_size, 
+		unsigned int pos, unsigned int num, unsigned int bit)

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#703: FILE: net/core/alloc/avl.c:513:
+	idx = pos/BITS_PER_LONG;
 	         ^

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#704: FILE: net/core/alloc/avl.c:514:
+	start = pos%BITS_PER_LONG;
 	           ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#707: FILE: net/core/alloc/avl.c:517:
+		unsigned long m = ((~0UL)>>start)<<start;
 		                         ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#707: FILE: net/core/alloc/avl.c:517:
+		unsigned long m = ((~0UL)>>start)<<start;
 		                                 ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#710: FILE: net/core/alloc/avl.c:520:
+			unsigned long upper_bits = BITS_PER_LONG - (start+num);
 			                                                 ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#712: FILE: net/core/alloc/avl.c:522:
+			m = (m<<upper_bits)>>upper_bits;
 			      ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#712: FILE: net/core/alloc/avl.c:522:
+			m = (m<<upper_bits)>>upper_bits;
 			                   ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#720: FILE: net/core/alloc/avl.c:530:
+		if (start + num <= BITS_PER_LONG)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#722: FILE: net/core/alloc/avl.c:532:
+		else {

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#738: FILE: net/core/alloc/avl.c:548:
+	unsigned int num = AVL_ALIGN(size)/AVL_MIN_SIZE;
 	                                  ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#740: FILE: net/core/alloc/avl.c:550:
+	BUG_ON(cpos < num - 1);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#744: FILE: net/core/alloc/avl.c:554:
+	if (cpos != num-1) {
 	               ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#746: FILE: net/core/alloc/avl.c:556:
+		void *ptr = c->ptr + size;
+		c = ptr;

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#758: FILE: net/core/alloc/avl.c:568:
+	unsigned int pos = AVL_ALIGN(size)/AVL_MIN_SIZE-1;
 	                                  ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#758: FILE: net/core/alloc/avl.c:568:
+	unsigned int pos = AVL_ALIGN(size)/AVL_MIN_SIZE-1;
 	                                               ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#791: FILE: net/core/alloc/avl.c:601:
+	for (i=size/AVL_MIN_SIZE-1; i<AVL_CONTAINER_ARRAY_SIZE; ++i) {
 	      ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#791: FILE: net/core/alloc/avl.c:601:
+	for (i=size/AVL_MIN_SIZE-1; i<AVL_CONTAINER_ARRAY_SIZE; ++i) {
 	           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#791: FILE: net/core/alloc/avl.c:601:
+	for (i=size/AVL_MIN_SIZE-1; i<AVL_CONTAINER_ARRAY_SIZE; ++i) {
 	                        ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#791: FILE: net/core/alloc/avl.c:601:
+	for (i=size/AVL_MIN_SIZE-1; i<AVL_CONTAINER_ARRAY_SIZE; ++i) {
 	                             ^

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#805: FILE: net/core/alloc/avl.c:615:
+		printk("%s: Failed to allocate %u bytes with %02x mode.\n", __func__, size, gfp_mask);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#805: FILE: net/core/alloc/avl.c:615:
+		printk("%s: Failed to allocate %u bytes with %02x mode.\n", __func__, size, gfp_mask);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#815: FILE: net/core/alloc/avl.c:625:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#822: FILE: net/core/alloc/avl.c:632:
+static void avl_combine(struct avl_node *node, void *lp, unsigned int lbits, void *rp, unsigned int rbits, $

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#822: FILE: net/core/alloc/avl.c:632:
+static void avl_combine(struct avl_node *node, void *lp, unsigned int lbits, void *rp, unsigned int rbits, 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#823: FILE: net/core/alloc/avl.c:633:
+static void avl_combine(struct avl_node *node, void *lp, unsigned int lbits, void *rp, unsigned int rbits, 
+		void *cur_ptr, unsigned int cur_bits, gfp_t gfp_mask, int cpu)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#829: FILE: net/core/alloc/avl.c:639:
+	lc = rc = c = NULL;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#835: FILE: net/core/alloc/avl.c:645:
+^I$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#837: FILE: net/core/alloc/avl.c:647:
+		rc = avl_search_container(rp, rbits-1, cpu);
 		                                   ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#839: FILE: net/core/alloc/avl.c:649:
+^I^I^Iprintk(KERN_ERR "%p.%p: Failed to find a container for right pointer %p, rbits: %u.\n", $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#839: FILE: net/core/alloc/avl.c:649:
+			printk(KERN_ERR "%p.%p: Failed to find a container for right pointer %p, rbits: %u.\n", 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#840: FILE: net/core/alloc/avl.c:650:
+			printk(KERN_ERR "%p.%p: Failed to find a container for right pointer %p, rbits: %u.\n", 
+					node, cur_ptr, rp, rbits);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#841: FILE: net/core/alloc/avl.c:651:
+			BUG();

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#850: FILE: net/core/alloc/avl.c:660:
+		lc = avl_search_container(lp, lbits-1, cpu);
 		                                   ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#852: FILE: net/core/alloc/avl.c:662:
+^I^I^Iprintk(KERN_ERR "%p.%p: Failed to find a container for left pointer %p, lbits: %u.\n", $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#852: FILE: net/core/alloc/avl.c:662:
+			printk(KERN_ERR "%p.%p: Failed to find a container for left pointer %p, lbits: %u.\n", 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#853: FILE: net/core/alloc/avl.c:663:
+			printk(KERN_ERR "%p.%p: Failed to find a container for left pointer %p, lbits: %u.\n", 
+					node, cur_ptr, lp, lbits);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#854: FILE: net/core/alloc/avl.c:664:
+			BUG();

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#865: FILE: net/core/alloc/avl.c:675:
+		if (avl_container_add(cur_ptr, cur_bits*AVL_MIN_SIZE, gfp_mask, cpu))
 		                                       ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#875: FILE: net/core/alloc/avl.c:685:
+	unsigned int pos, idx, sbits = AVL_ALIGN(size)/AVL_MIN_SIZE;
 	                                              ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#898: FILE: net/core/alloc/avl.c:708:
+	idx = pos/BITS_PER_LONG;
 	         ^

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#900: FILE: net/core/alloc/avl.c:710:
+	p = node->mask[idx] >> (pos%BITS_PER_LONG);
 	                           ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#901: FILE: net/core/alloc/avl.c:711:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#903: FILE: net/core/alloc/avl.c:713:
+^I^Iprintk(KERN_ERR "%p.%p: Broken pointer: value: %lx, pos: %u, idx: %u, mask: %lx, p: %lx.\n", $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#903: FILE: net/core/alloc/avl.c:713:
+		printk(KERN_ERR "%p.%p: Broken pointer: value: %lx, pos: %u, idx: %u, mask: %lx, p: %lx.\n", 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#904: FILE: net/core/alloc/avl.c:714:
+		printk(KERN_ERR "%p.%p: Broken pointer: value: %lx, pos: %u, idx: %u, mask: %lx, p: %lx.\n", 
+				node, ptr, val, pos, idx, node->mask[idx], p);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#905: FILE: net/core/alloc/avl.c:715:
+		BUG();

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#910: FILE: net/core/alloc/avl.c:720:
+	lp = rp = NULL;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#911: FILE: net/core/alloc/avl.c:721:
+	rbits = lbits = 0;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#913: FILE: net/core/alloc/avl.c:723:
+	idx = (pos+sbits)/BITS_PER_LONG;
 	          ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#913: FILE: net/core/alloc/avl.c:723:
+	idx = (pos+sbits)/BITS_PER_LONG;
 	                 ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#914: FILE: net/core/alloc/avl.c:724:
+	p = (pos+sbits)%BITS_PER_LONG;
 	        ^

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#914: FILE: net/core/alloc/avl.c:724:
+	p = (pos+sbits)%BITS_PER_LONG;
 	               ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#917: FILE: net/core/alloc/avl.c:727:
+		lbits = avl_count_set_up(node->mask, ARRAY_SIZE(node->mask), pos+sbits);
 		                                                                ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#918: FILE: net/core/alloc/avl.c:728:
+		if (lbits) {
+			lp = (void *)(val + (pos + sbits)*AVL_MIN_SIZE);
+		}

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#919: FILE: net/core/alloc/avl.c:729:
+			lp = (void *)(val + (pos + sbits)*AVL_MIN_SIZE);
 			                                 ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#924: FILE: net/core/alloc/avl.c:734:
+		idx = (pos-1)/BITS_PER_LONG;
 		          ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#924: FILE: net/core/alloc/avl.c:734:
+		idx = (pos-1)/BITS_PER_LONG;
 		             ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#925: FILE: net/core/alloc/avl.c:735:
+		p = (pos-1)%BITS_PER_LONG;
 		        ^

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#925: FILE: net/core/alloc/avl.c:735:
+		p = (pos-1)%BITS_PER_LONG;
 		           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#927: FILE: net/core/alloc/avl.c:737:
+			rbits = avl_count_set_down(node->mask, pos-1);
 			                                          ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#928: FILE: net/core/alloc/avl.c:738:
+			if (rbits) {
+				rp = (void *)(val + (pos-rbits)*AVL_MIN_SIZE);
+			}

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#929: FILE: net/core/alloc/avl.c:739:
+				rp = (void *)(val + (pos-rbits)*AVL_MIN_SIZE);
 				                        ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#929: FILE: net/core/alloc/avl.c:739:
+				rp = (void *)(val + (pos-rbits)*AVL_MIN_SIZE);
 				                               ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#945: FILE: net/core/alloc/avl.c:755:
+^I$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#962: FILE: net/core/alloc/avl.c:772:
+	for (i=0; i<AVL_NODE_NUM; ++i) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#962: FILE: net/core/alloc/avl.c:772:
+	for (i=0; i<AVL_NODE_NUM; ++i) {
 	           ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#964: FILE: net/core/alloc/avl.c:774:
+		struct avl_node *node = avl_get_node(i, cpu);
+		if (node->value)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#968: FILE: net/core/alloc/avl.c:778:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#970: FILE: net/core/alloc/avl.c:780:
+^I$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#971: FILE: net/core/alloc/avl.c:781:
+	for (i=0; i<AVL_NODE_PAGES; ++i)
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#971: FILE: net/core/alloc/avl.c:781:
+	for (i=0; i<AVL_NODE_PAGES; ++i)
 	           ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#980: FILE: net/core/alloc/avl.c:790:
+^I$

WARNING:ALLOC_WITH_MULTIPLY: Prefer kcalloc over kzalloc with multiply
#983: FILE: net/core/alloc/avl.c:793:
+	avl_node_array[cpu] = kzalloc(AVL_NODE_PAGES * sizeof(void *), GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#986: FILE: net/core/alloc/avl.c:796:
+^I$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#987: FILE: net/core/alloc/avl.c:797:
+	for (i=0; i<AVL_NODE_PAGES; ++i) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#987: FILE: net/core/alloc/avl.c:797:
+	for (i=0; i<AVL_NODE_PAGES; ++i) {
 	           ^

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#993: FILE: net/core/alloc/avl.c:803:
+	avl_container_array[cpu] = kzalloc(sizeof(struct list_head) * AVL_CONTAINER_ARRAY_SIZE, GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*avl_container_array[cpu])...) over kzalloc(sizeof(struct list_head)...)
#993: FILE: net/core/alloc/avl.c:803:
+	avl_container_array[cpu] = kzalloc(sizeof(struct list_head) * AVL_CONTAINER_ARRAY_SIZE, GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#997: FILE: net/core/alloc/avl.c:807:
+	for (i=0; i<AVL_CONTAINER_ARRAY_SIZE; ++i)
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#997: FILE: net/core/alloc/avl.c:807:
+	for (i=0; i<AVL_CONTAINER_ARRAY_SIZE; ++i)
 	           ^

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#1001: FILE: net/core/alloc/avl.c:811:
+	/*
+	 * NTA steals pages and never return them back to the system.

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1012: FILE: net/core/alloc/avl.c:822:
+	err = avl_container_add((void *)ptr, PAGE_SIZE*(1<<AVL_ORDER), GFP_KERNEL, cpu);
 	                                              ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1012: FILE: net/core/alloc/avl.c:822:
+	err = avl_container_add((void *)ptr, PAGE_SIZE*(1<<AVL_ORDER), GFP_KERNEL, cpu);
 	                                                 ^

WARNING:LONG_LINE: line length of 117 exceeds 100 columns
#1014: FILE: net/core/alloc/avl.c:824:
+		printk(KERN_ERR "Failed to add new container: ptr: %lx, size: %lu, err: %d.\n", ptr, PAGE_SIZE, err);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1014: FILE: net/core/alloc/avl.c:824:
+		printk(KERN_ERR "Failed to add new container: ptr: %lx, size: %lu, err: %d.\n", ptr, PAGE_SIZE, err);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1018: FILE: net/core/alloc/avl.c:828:
+	for (i=0; i<AVL_NODE_NUM-2; ++i) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1018: FILE: net/core/alloc/avl.c:828:
+	for (i=0; i<AVL_NODE_NUM-2; ++i) {
 	           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1018: FILE: net/core/alloc/avl.c:828:
+	for (i=0; i<AVL_NODE_NUM-2; ++i) {
 	                        ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1021: FILE: net/core/alloc/avl.c:831:
+			printk(KERN_ERR "Failed to allocate %d'th page.\n", i);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1026: FILE: net/core/alloc/avl.c:836:
+		err = avl_container_add((void *)ptr, PAGE_SIZE*(1<<AVL_ORDER), GFP_KERNEL, cpu);
 		                                              ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1026: FILE: net/core/alloc/avl.c:836:
+		err = avl_container_add((void *)ptr, PAGE_SIZE*(1<<AVL_ORDER), GFP_KERNEL, cpu);
 		                                                 ^

WARNING:LONG_LINE: line length of 125 exceeds 100 columns
#1028: FILE: net/core/alloc/avl.c:838:
+			printk(KERN_ERR "Failed to add new container: ptr: %lx, size: %lu, err: %d.\n", ptr, PAGE_SIZE, err);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1028: FILE: net/core/alloc/avl.c:838:
+			printk(KERN_ERR "Failed to add new container: ptr: %lx, size: %lu, err: %d.\n", ptr, PAGE_SIZE, err);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1036: FILE: net/core/alloc/avl.c:846:
+	for (i=0; i<AVL_NODE_NUM - 1; ++i) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1036: FILE: net/core/alloc/avl.c:846:
+	for (i=0; i<AVL_NODE_NUM - 1; ++i) {
 	           ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1038: FILE: net/core/alloc/avl.c:848:
+		struct avl_node *node = avl_get_node(i, cpu);
+		if (node->value)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1042: FILE: net/core/alloc/avl.c:852:
+^I$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1046: FILE: net/core/alloc/avl.c:856:
+	for (i=0; i<AVL_NODE_PAGES; ++i)
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1046: FILE: net/core/alloc/avl.c:856:
+	for (i=0; i<AVL_NODE_PAGES; ++i)
 	           ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1048: FILE: net/core/alloc/avl.c:858:
+^I^I$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1064: FILE: net/core/alloc/avl.c:874:
+	printk(KERN_INFO "Network tree allocator has been initialized.\n");

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1079: FILE: net/core/alloc/avl.h:1:
+/*

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1080: FILE: net/core/alloc/avl.h:2:
+ * ^Iavl.h$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1081: FILE: net/core/alloc/avl.h:3:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1084: FILE: net/core/alloc/avl.h:6:
+ * $

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1096: FILE: net/core/alloc/avl.h:18:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1097: FILE: net/core/alloc/avl.h:19:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1110: FILE: net/core/alloc/avl.h:32:
+#define ulog(f, a...) printk(f, ##a)

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#1116: FILE: net/core/alloc/avl.h:38:
+/*
+ * Network tree allocator variables.

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1119: FILE: net/core/alloc/avl.h:41:
+typedef unsigned long value_t;

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1123: FILE: net/core/alloc/avl.h:45:
+#define AVL_ALIGN(x) ^I^IALIGN(x, AVL_ALIGN_SIZE)$

WARNING:LONG_LINE_COMMENT: line length of 106 exceeds 100 columns
#1126: FILE: net/core/alloc/avl.h:48:
+#define AVL_BITS		10	/* Must cover maximum number of pages used for allocation pools */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1127: FILE: net/core/alloc/avl.h:49:
+#define AVL_NODE_EMPTY		((1UL<<AVL_BITS) - 1)
                       		     ^

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#1140: FILE: net/core/alloc/avl.h:62:
+struct avl_node
+{

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#1142: FILE: net/core/alloc/avl.h:64:
+				right:AVL_BITS,
 				     ^

WARNING:INDENTED_LABEL: labels should not be indented
#1142: FILE: net/core/alloc/avl.h:64:
+				right:AVL_BITS,

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#1143: FILE: net/core/alloc/avl.h:65:
+				parent:AVL_BITS,
 				      ^

WARNING:INDENTED_LABEL: labels should not be indented
#1143: FILE: net/core/alloc/avl.h:65:
+				parent:AVL_BITS,

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#1144: FILE: net/core/alloc/avl.h:66:
+				id:AVL_BITS,
 				  ^

WARNING:INDENTED_LABEL: labels should not be indented
#1144: FILE: net/core/alloc/avl.h:66:
+				id:AVL_BITS,

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#1147: FILE: net/core/alloc/avl.h:69:
+				res:(64-4*AVL_BITS)-3;
 				   ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1147: FILE: net/core/alloc/avl.h:69:
+				res:(64-4*AVL_BITS)-3;
 				       ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1147: FILE: net/core/alloc/avl.h:69:
+				res:(64-4*AVL_BITS)-3;
 				         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1147: FILE: net/core/alloc/avl.h:69:
+				res:(64-4*AVL_BITS)-3;
 				                   ^

WARNING:INDENTED_LABEL: labels should not be indented
#1147: FILE: net/core/alloc/avl.h:69:
+				res:(64-4*AVL_BITS)-3;

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1149: FILE: net/core/alloc/avl.h:71:
+	DECLARE_BITMAP(mask, (1<<AVL_ORDER)*PAGE_SIZE/AVL_MIN_SIZE);
 	                       ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1149: FILE: net/core/alloc/avl.h:71:
+	DECLARE_BITMAP(mask, (1<<AVL_ORDER)*PAGE_SIZE/AVL_MIN_SIZE);
 	                                   ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1149: FILE: net/core/alloc/avl.h:71:
+	DECLARE_BITMAP(mask, (1<<AVL_ORDER)*PAGE_SIZE/AVL_MIN_SIZE);
 	                                             ^

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#1153: FILE: net/core/alloc/avl.h:75:
+struct avl_container
+{

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct avl_container *' should also have an identifier name
#1159: FILE: net/core/alloc/avl.h:81:
+void avl_container_free(struct avl_container *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1180: FILE: net/core/skbuff.c:179:
+^I$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000048112.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 59 errors, 46 warnings, 95 checks, 1065 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000048112.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
