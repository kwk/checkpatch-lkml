WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#58: FILE: drivers/infiniband/core/agent.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:CVS_KEYWORD: CVS style keyword markers, these will _not_ be updated
#93: FILE: drivers/infiniband/core/agent.c:36:
+ * $Id$

Since linux moved to git, the CVS markers are no longer used.
So, CVS style keywords ($Id$, $Revision$, $Log$) should not be
added.

WARNING:INCLUDE_LINUX: Use #include <linux/bug.h> instead of <asm/bug.h>
#98: FILE: drivers/infiniband/core/agent.c:41:
+#include <asm/bug.h>

CHECK:LINE_SPACING: Please don't use multiple blank lines
#106: FILE: drivers/infiniband/core/agent.c:49:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#107: FILE: drivers/infiniband/core/agent.c:50:
+spinlock_t ib_agent_port_list_lock;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#110: FILE: drivers/infiniband/core/agent.c:53:
+extern kmem_cache_t *ib_mad_cache;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#112: FILE: drivers/infiniband/core/agent.c:55:
+
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#122: FILE: drivers/infiniband/core/agent.c:65:
+	BUG_ON(!(!!device ^ !!mad_agent));  /* Exactly one MUST be (!NULL) */

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'entry->dr_smp_agent == mad_agent'
#132: FILE: drivers/infiniband/core/agent.c:75:
+			if ((entry->dr_smp_agent == mad_agent) ||
+			    (entry->lr_smp_agent == mad_agent) ||
+			    (entry->perf_mgmt_agent == mad_agent))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'entry->lr_smp_agent == mad_agent'
#132: FILE: drivers/infiniband/core/agent.c:75:
+			if ((entry->dr_smp_agent == mad_agent) ||
+			    (entry->lr_smp_agent == mad_agent) ||
+			    (entry->perf_mgmt_agent == mad_agent))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'entry->perf_mgmt_agent == mad_agent'
#132: FILE: drivers/infiniband/core/agent.c:75:
+			if ((entry->dr_smp_agent == mad_agent) ||
+			    (entry->lr_smp_agent == mad_agent) ||
+			    (entry->perf_mgmt_agent == mad_agent))

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#165: FILE: drivers/infiniband/core/agent.c:108:
+		printk(KERN_DEBUG SPFX "smi_check_local_dr_smp %s port %d "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'smi_check_local_dr_smp', this function's name, in a string
#165: FILE: drivers/infiniband/core/agent.c:108:
+		printk(KERN_DEBUG SPFX "smi_check_local_dr_smp %s port %d "

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:SPLIT_STRING: quoted string split across lines
#166: FILE: drivers/infiniband/core/agent.c:109:
+		printk(KERN_DEBUG SPFX "smi_check_local_dr_smp %s port %d "
+		       "not open\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#221: FILE: drivers/infiniband/core/agent.c:164:
+			ah_attr.grh.flow_label = be32_to_cpup(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#223: FILE: drivers/infiniband/core/agent.c:166:
+			ah_attr.grh.traffic_class = (be32_to_cpup(

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#233: FILE: drivers/infiniband/core/agent.c:176:
+		printk(KERN_ERR SPFX "No memory for address handle\n");

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#242: FILE: drivers/infiniband/core/agent.c:185:
+^I} else { ^I/* for SMPs */$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#283: FILE: drivers/infiniband/core/agent.c:226:
+		printk(KERN_DEBUG SPFX "agent_send %s port %d not open\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'agent_send', this function's name, in a string
#283: FILE: drivers/infiniband/core/agent.c:226:
+		printk(KERN_DEBUG SPFX "agent_send %s port %d not open\n",

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#289: FILE: drivers/infiniband/core/agent.c:232:
+	switch (mad->mad.mad.mad_hdr.mgmt_class) {
+		case IB_MGMT_CLASS_SUBN_DIRECTED_ROUTE:
[...]
+		case IB_MGMT_CLASS_SUBN_LID_ROUTED:
[...]
+		case IB_MGMT_CLASS_PERF_MGMT:
[...]
+		default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#316: FILE: drivers/infiniband/core/agent.c:259:
+		printk(KERN_ERR SPFX "agent_send_handler: no matching MAD "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'agent_send_handler', this function's name, in a string
#316: FILE: drivers/infiniband/core/agent.c:259:
+		printk(KERN_ERR SPFX "agent_send_handler: no matching MAD "

WARNING:SPLIT_STRING: quoted string split across lines
#317: FILE: drivers/infiniband/core/agent.c:260:
+		printk(KERN_ERR SPFX "agent_send_handler: no matching MAD "
+		       "agent %p\n", mad_agent);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#350: FILE: drivers/infiniband/core/agent.c:293:
+		printk(KERN_DEBUG SPFX "%s port %d already open\n",

WARNING:SIZEOF_PARENTHESIS: sizeof *port_priv should be sizeof(*port_priv)
#356: FILE: drivers/infiniband/core/agent.c:299:
+	port_priv = kmalloc(sizeof *port_priv, GFP_KERNEL);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#358: FILE: drivers/infiniband/core/agent.c:301:
+		printk(KERN_ERR SPFX "No memory for ib_agent_port_private\n");

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#358: FILE: drivers/infiniband/core/agent.c:301:
+	if (!port_priv) {
+		printk(KERN_ERR SPFX "No memory for ib_agent_port_private\n");

WARNING:SIZEOF_PARENTHESIS: sizeof *port_priv should be sizeof(*port_priv)
#363: FILE: drivers/infiniband/core/agent.c:306:
+	memset(port_priv, 0, sizeof *port_priv);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#410: FILE: drivers/infiniband/core/agent.c:353:
+		printk(KERN_ERR SPFX "Couldn't get DMA MR\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!port_priv"
#440: FILE: drivers/infiniband/core/agent.c:383:
+	if (port_priv == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#442: FILE: drivers/infiniband/core/agent.c:385:
+		printk(KERN_ERR SPFX "Port %d not found\n", port_num);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#460: FILE: drivers/infiniband/core/mad.c:1:
+/*

WARNING:CVS_KEYWORD: CVS style keyword markers, these will _not_ be updated
#491: FILE: drivers/infiniband/core/mad.c:32:
+ * $Id$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#503: FILE: drivers/infiniband/core/mad.c:44:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#509: FILE: drivers/infiniband/core/mad.c:50:
+
+

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#512: FILE: drivers/infiniband/core/mad.c:53:
+static u32 ib_mad_client_id = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#517: FILE: drivers/infiniband/core/mad.c:58:
+
+

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#578: FILE: drivers/infiniband/core/mad.c:119:
+	switch (qp_type)
+	{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'mgmt_class < IB_MGMT_CLASS_VENDOR_RANGE2_START'
#596: FILE: drivers/infiniband/core/mad.c:137:
+	if ((mgmt_class < IB_MGMT_CLASS_VENDOR_RANGE2_START) ||
+	    (mgmt_class > IB_MGMT_CLASS_VENDOR_RANGE2_END))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'mgmt_class > IB_MGMT_CLASS_VENDOR_RANGE2_END'
#596: FILE: drivers/infiniband/core/mad.c:137:
+	if ((mgmt_class < IB_MGMT_CLASS_VENDOR_RANGE2_START) ||
+	    (mgmt_class > IB_MGMT_CLASS_VENDOR_RANGE2_END))

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#609: FILE: drivers/infiniband/core/mad.c:150:
+static int is_vendor_method_in_use(

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#622: FILE: drivers/infiniband/core/mad.c:163:
+					return 1;
+				else

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'mad_reg_req->mgmt_class !=
 					IB_MGMT_CLASS_SUBN_LID_ROUTED'
#692: FILE: drivers/infiniband/core/mad.c:233:
+			if ((mad_reg_req->mgmt_class !=
+					IB_MGMT_CLASS_SUBN_LID_ROUTED) &&
+			    (mad_reg_req->mgmt_class !=
+					IB_MGMT_CLASS_SUBN_DIRECTED_ROUTE))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'mad_reg_req->mgmt_class !=
 					IB_MGMT_CLASS_SUBN_DIRECTED_ROUTE'
#692: FILE: drivers/infiniband/core/mad.c:233:
+			if ((mad_reg_req->mgmt_class !=
+					IB_MGMT_CLASS_SUBN_LID_ROUTED) &&
+			    (mad_reg_req->mgmt_class !=
+					IB_MGMT_CLASS_SUBN_DIRECTED_ROUTE))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'mad_reg_req->mgmt_class ==
 					IB_MGMT_CLASS_SUBN_LID_ROUTED'
#698: FILE: drivers/infiniband/core/mad.c:239:
+			if ((mad_reg_req->mgmt_class ==
+					IB_MGMT_CLASS_SUBN_LID_ROUTED) ||
+			    (mad_reg_req->mgmt_class ==
+					IB_MGMT_CLASS_SUBN_DIRECTED_ROUTE))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'mad_reg_req->mgmt_class ==
 					IB_MGMT_CLASS_SUBN_DIRECTED_ROUTE'
#698: FILE: drivers/infiniband/core/mad.c:239:
+			if ((mad_reg_req->mgmt_class ==
+					IB_MGMT_CLASS_SUBN_LID_ROUTED) ||
+			    (mad_reg_req->mgmt_class ==
+					IB_MGMT_CLASS_SUBN_DIRECTED_ROUTE))

WARNING:SIZEOF_PARENTHESIS: sizeof *mad_agent_priv should be sizeof(*mad_agent_priv)
#718: FILE: drivers/infiniband/core/mad.c:259:
+	mad_agent_priv = kmalloc(sizeof *mad_agent_priv, GFP_KERNEL);

WARNING:SIZEOF_PARENTHESIS: sizeof *reg_req should be sizeof(*reg_req)
#725: FILE: drivers/infiniband/core/mad.c:266:
+		reg_req = kmalloc(sizeof *reg_req, GFP_KERNEL);

WARNING:SIZEOF_PARENTHESIS: sizeof *reg_req should be sizeof(*reg_req)
#731: FILE: drivers/infiniband/core/mad.c:272:
+		memcpy(reg_req, mad_reg_req, sizeof *reg_req);

WARNING:SIZEOF_PARENTHESIS: sizeof *mad_agent_priv should be sizeof(*mad_agent_priv)
#735: FILE: drivers/infiniband/core/mad.c:276:
+	memset(mad_agent_priv, 0, sizeof *mad_agent_priv);

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'mad_reg_req->mgmt_class_version'
#757: FILE: drivers/infiniband/core/mad.c:298:
+			class = port_priv->version[mad_reg_req->
+						   mgmt_class_version].class;

A single dereferencing identifier spanned on multiple lines like::

  struct_identifier->member[index].
  member = <foo>;

is generally hard to follow. It can easily lead to typos and so makes
the code vulnerable to bugs.

If fixing the multiple line dereferencing leads to an 80 column
violation, then either rewrite the code in a more simple way or if the
starting part of the dereferencing identifier is the same and used at
multiple places then store it in a temporary variable, and use that
temporary variable only at all the places. For example, if there are
two dereferencing identifiers::

  member1->member2->member3.foo1;
  member1->member2->member3.foo2;

then store the member1->member2->member3 part in a temporary variable.
It not only helps to avoid the 80 column violation but also reduces
the program size by removing the unnecessary dereferences.

But if none of the above methods work then ignore the 80 column
violation because it is much easier to read a dereferencing identifier
on a single line.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#762: FILE: drivers/infiniband/core/mad.c:303:
+					if (method_in_use(&method,
+							   mad_reg_req))

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'mad_reg_req->mgmt_class_version'
#771: FILE: drivers/infiniband/core/mad.c:312:
+			vendor = port_priv->version[mad_reg_req->
+						    mgmt_class_version].vendor;

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#776: FILE: drivers/infiniband/core/mad.c:317:
+					if (is_vendor_method_in_use(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#800: FILE: drivers/infiniband/core/mad.c:341:
+	INIT_WORK(&mad_agent_priv->local_work, local_completions,
+		   mad_agent_priv);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#820: FILE: drivers/infiniband/core/mad.c:361:
+		(/*IB_MAD_SNOOP_POSTED_SENDS |
+		 IB_MAD_SNOOP_RMPP_SENDS |*/

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#820: FILE: drivers/infiniband/core/mad.c:361:
+		 IB_MAD_SNOOP_RMPP_SENDS |*/

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#822: FILE: drivers/infiniband/core/mad.c:363:
+		 IB_MAD_SNOOP_SEND_COMPLETIONS /*|
+		 IB_MAD_SNOOP_RMPP_SEND_COMPLETIONS*/));

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#829: FILE: drivers/infiniband/core/mad.c:370:
+		(IB_MAD_SNOOP_RECVS /*|
+		 IB_MAD_SNOOP_RMPP_RECVS*/));

WARNING:SIZEOF_PARENTHESIS: sizeof mad_snoop_priv should be sizeof(mad_snoop_priv)
#847: FILE: drivers/infiniband/core/mad.c:388:
+		new_snoop_table = kmalloc(sizeof mad_snoop_priv *

WARNING:SIZEOF_PARENTHESIS: sizeof mad_snoop_priv should be sizeof(mad_snoop_priv)
#856: FILE: drivers/infiniband/core/mad.c:397:
+			       sizeof mad_snoop_priv *

WARNING:SIZEOF_PARENTHESIS: sizeof *mad_snoop_priv should be sizeof(*mad_snoop_priv)
#900: FILE: drivers/infiniband/core/mad.c:441:
+	mad_snoop_priv = kmalloc(sizeof *mad_snoop_priv, GFP_KERNEL);

WARNING:SIZEOF_PARENTHESIS: sizeof *mad_snoop_priv should be sizeof(*mad_snoop_priv)
#907: FILE: drivers/infiniband/core/mad.c:448:
+	memset(mad_snoop_priv, 0, sizeof *mad_snoop_priv);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#917: FILE: drivers/infiniband/core/mad.c:458:
+	mad_snoop_priv->snoop_index = register_snoop_agent(

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#964: FILE: drivers/infiniband/core/mad.c:505:
+	if (mad_agent_priv->reg_req)
+		kfree(mad_agent_priv->reg_req);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1015: FILE: drivers/infiniband/core/mad.c:556:
+	BUG_ON(!mad_list->mad_queue);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1094: FILE: drivers/infiniband/core/mad.c:635:
+		printk(KERN_ERR PFX "Invalid directed route\n");

ERROR:IN_ATOMIC: do not use in_atomic in drivers
#1102: FILE: drivers/infiniband/core/mad.c:643:
+	if (in_atomic() || irqs_disabled())

in_atomic() is not for driver use so any such use is reported as an ERROR.
Also in_atomic() is often used to determine if sleeping is permitted,
but it is not reliable in this use model.  Therefore its use is
strongly discouraged.

However, in_atomic() is ok for core kernel use.

See: https://lore.kernel.org/lkml/20080320201723.b87b3732.akpm@linux-foundation.org/

WARNING:SIZEOF_PARENTHESIS: sizeof *local should be sizeof(*local)
#1106: FILE: drivers/infiniband/core/mad.c:647:
+	local = kmalloc(sizeof *local, alloc_flags);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1109: FILE: drivers/infiniband/core/mad.c:650:
+		printk(KERN_ERR PFX "No memory for ib_mad_local_private\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1116: FILE: drivers/infiniband/core/mad.c:657:
+		printk(KERN_ERR PFX "No memory for local response MAD\n");

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1123: FILE: drivers/infiniband/core/mad.c:664:
+	switch (ret)
+	{

WARNING:SIZEOF_PARENTHESIS: sizeof *send_wr->sg_list should be sizeof(*send_wr->sg_list)
#1154: FILE: drivers/infiniband/core/mad.c:695:
+	       sizeof *send_wr->sg_list * send_wr->num_sge);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1165: FILE: drivers/infiniband/core/mad.c:706:
+	queue_work(mad_agent_priv->qp_info->port_priv->wq,
+		  &mad_agent_priv->local_work);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1193: FILE: drivers/infiniband/core/mad.c:734:
+			printk(KERN_ERR PFX "ib_post_send failed: %d\n", ret);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1245: FILE: drivers/infiniband/core/mad.c:786:
+			printk(KERN_ERR PFX "MAD header must be supplied "

WARNING:SPLIT_STRING: quoted string split across lines
#1246: FILE: drivers/infiniband/core/mad.c:787:
+			printk(KERN_ERR PFX "MAD header must be supplied "
+			       "in WR %p\n", send_wr);

WARNING:SIZEOF_PARENTHESIS: sizeof *mad_send_wr should be sizeof(*mad_send_wr)
#1267: FILE: drivers/infiniband/core/mad.c:808:
+		mad_send_wr = kmalloc(sizeof *mad_send_wr,

ERROR:IN_ATOMIC: do not use in_atomic in drivers
#1268: FILE: drivers/infiniband/core/mad.c:809:
+				      (in_atomic() || irqs_disabled()) ?

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1271: FILE: drivers/infiniband/core/mad.c:812:
+			printk(KERN_ERR PFX "No memory for "

WARNING:SPLIT_STRING: quoted string split across lines
#1272: FILE: drivers/infiniband/core/mad.c:813:
+			printk(KERN_ERR PFX "No memory for "
+			       "ib_mad_send_wr_private\n");

WARNING:SIZEOF_PARENTHESIS: sizeof *send_wr->sg_list should be sizeof(*send_wr->sg_list)
#1280: FILE: drivers/infiniband/core/mad.c:821:
+		       sizeof *send_wr->sg_list * send_wr->num_sge);

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'send_wr->wr.ud.timeout_ms'
#1286: FILE: drivers/infiniband/core/mad.c:827:
+		mad_send_wr->timeout = msecs_to_jiffies(send_wr->wr.
+							ud.timeout_ms);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1357: FILE: drivers/infiniband/core/mad.c:898:
+	printk(KERN_ERR PFX "ib_coalesce_recv_mad() not implemented yet\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ib_coalesce_recv_mad', this function's name, in a string
#1357: FILE: drivers/infiniband/core/mad.c:898:
+	printk(KERN_ERR PFX "ib_coalesce_recv_mad() not implemented yet\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1374: FILE: drivers/infiniband/core/mad.c:915:
+	printk(KERN_ERR PFX "ib_process_mad_wc() not implemented yet\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ib_process_mad_wc', this function's name, in a string
#1374: FILE: drivers/infiniband/core/mad.c:915:
+	printk(KERN_ERR PFX "ib_process_mad_wc() not implemented yet\n");

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1387: FILE: drivers/infiniband/core/mad.c:928:
+			       1+i)) {
 			        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1389: FILE: drivers/infiniband/core/mad.c:930:
+			printk(KERN_ERR PFX "Method %d already in use\n", i);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1401: FILE: drivers/infiniband/core/mad.c:942:
+		printk(KERN_ERR PFX "No memory for "

WARNING:SPLIT_STRING: quoted string split across lines
#1402: FILE: drivers/infiniband/core/mad.c:943:
+		printk(KERN_ERR PFX "No memory for "
+		       "ib_mad_mgmt_method_table\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#1453: FILE: drivers/infiniband/core/mad.c:994:
+                /* Is there matching OUI for this vendor class ? */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:CODE_INDENT: code indent should use tabs where possible
#1454: FILE: drivers/infiniband/core/mad.c:995:
+                if (!memcmp(vendor_class->oui[i], oui, 3))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1454: FILE: drivers/infiniband/core/mad.c:995:
+                if (!memcmp(vendor_class->oui[i], oui, 3))$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1478: FILE: drivers/infiniband/core/mad.c:1019:
+		if (method->agent[i] == agent) {
+			method->agent[i] = NULL;
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1499: FILE: drivers/infiniband/core/mad.c:1040:
+			printk(KERN_ERR PFX "No memory for "

WARNING:SPLIT_STRING: quoted string split across lines
#1500: FILE: drivers/infiniband/core/mad.c:1041:
+			printk(KERN_ERR PFX "No memory for "
+			       "ib_mad_mgmt_class_table\n");

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1508: FILE: drivers/infiniband/core/mad.c:1049:
+		if ((ret = allocate_method_table(method)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1514: FILE: drivers/infiniband/core/mad.c:1055:
+			if ((ret = allocate_method_table(method)))

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1528: FILE: drivers/infiniband/core/mad.c:1069:
+			       1+i)) {
 			        ^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '['
#1565: FILE: drivers/infiniband/core/mad.c:1106:
+	vendor_table = &port_priv->version[

WARNING:SIZEOF_PARENTHESIS: sizeof *vendor should be sizeof(*vendor)
#1569: FILE: drivers/infiniband/core/mad.c:1110:
+		vendor = kmalloc(sizeof *vendor, GFP_ATOMIC);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1571: FILE: drivers/infiniband/core/mad.c:1112:
+			printk(KERN_ERR PFX "No memory for "

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#1571: FILE: drivers/infiniband/core/mad.c:1112:
+		if (!vendor) {
+			printk(KERN_ERR PFX "No memory for "

WARNING:SPLIT_STRING: quoted string split across lines
#1572: FILE: drivers/infiniband/core/mad.c:1113:
+			printk(KERN_ERR PFX "No memory for "
+			       "ib_mad_mgmt_vendor_class_table\n");

WARNING:SIZEOF_PARENTHESIS: sizeof *vendor_class should be sizeof(*vendor_class)
#1581: FILE: drivers/infiniband/core/mad.c:1122:
+		vendor_class = kmalloc(sizeof *vendor_class, GFP_ATOMIC);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1583: FILE: drivers/infiniband/core/mad.c:1124:
+			printk(KERN_ERR PFX "No memory for "

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#1583: FILE: drivers/infiniband/core/mad.c:1124:
+		if (!vendor_class) {
+			printk(KERN_ERR PFX "No memory for "

WARNING:SPLIT_STRING: quoted string split across lines
#1584: FILE: drivers/infiniband/core/mad.c:1125:
+			printk(KERN_ERR PFX "No memory for "
+			       "ib_mad_mgmt_vendor_class\n");

CHECK:OPEN_ENDED_LINE: Lines should not end with a '['
#1594: FILE: drivers/infiniband/core/mad.c:1135:
+			method = &(*vendor_table)->vendor_class[

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1596: FILE: drivers/infiniband/core/mad.c:1137:
+			BUG_ON(!*method);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '['
#1602: FILE: drivers/infiniband/core/mad.c:1143:
+		if (!is_vendor_oui((*vendor_table)->vendor_class[

CHECK:OPEN_ENDED_LINE: Lines should not end with a '['
#1604: FILE: drivers/infiniband/core/mad.c:1145:
+			method = &(*vendor_table)->vendor_class[

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1606: FILE: drivers/infiniband/core/mad.c:1147:
+			BUG_ON(*method);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1608: FILE: drivers/infiniband/core/mad.c:1149:
+			if ((ret = allocate_method_table(method)))

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1615: FILE: drivers/infiniband/core/mad.c:1156:
+	printk(KERN_ERR PFX "All OUI slots in use\n");

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1628: FILE: drivers/infiniband/core/mad.c:1169:
+			       1+i)) {
 			        ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1671: FILE: drivers/infiniband/core/mad.c:1212:
+	if (!agent_priv->reg_req) {
+		goto out;
+	}

CHECK:OPEN_ENDED_LINE: Lines should not end with a '['
#1676: FILE: drivers/infiniband/core/mad.c:1217:
+	class = port_priv->version[

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 25)
#1687: FILE: drivers/infiniband/core/mad.c:1228:
+		if (!check_method_table(method)) {
[...]
+			 kfree(method);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '['
#1695: FILE: drivers/infiniband/core/mad.c:1236:
+				port_priv->version[

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'agent_priv->reg_req->mgmt_class_version'
#1697: FILE: drivers/infiniband/core/mad.c:1238:
+					agent_priv->reg_req->
+					mgmt_class_version].class = NULL;

CHECK:OPEN_ENDED_LINE: Lines should not end with a '['
#1703: FILE: drivers/infiniband/core/mad.c:1244:
+	vendor = port_priv->version[

CHECK:OPEN_ENDED_LINE: Lines should not end with a '['
#1735: FILE: drivers/infiniband/core/mad.c:1276:
+						port_priv->version[

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'agent_priv->reg_req->mgmt_class_version'
#1737: FILE: drivers/infiniband/core/mad.c:1278:
+							agent_priv->reg_req->
+							mgmt_class_version].

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1759: FILE: drivers/infiniband/core/mad.c:1300:
+	if (mad->mad_hdr.mgmt_class == IB_MGMT_CLASS_CM) {
+		return 0;
+	}

CHECK:OPEN_ENDED_LINE: Lines should not end with a '['
#1815: FILE: drivers/infiniband/core/mad.c:1356:
+			class = port_priv->version[

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1819: FILE: drivers/infiniband/core/mad.c:1360:
+			method = class->method_table[convert_mgmt_class(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '['
#1825: FILE: drivers/infiniband/core/mad.c:1366:
+			vendor = port_priv->version[

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1829: FILE: drivers/infiniband/core/mad.c:1370:
+			vendor_class = vendor->vendor_class[vendor_class_index(

CHECK:BRACES: braces {} should be used on all arms of this statement
#1847: FILE: drivers/infiniband/core/mad.c:1388:
+		if (mad_agent->agent.recv_handler)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1849: FILE: drivers/infiniband/core/mad.c:1390:
+		else {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#1850: FILE: drivers/infiniband/core/mad.c:1391:
+			printk(KERN_NOTICE PFX "No receive handler for client "

WARNING:SPLIT_STRING: quoted string split across lines
#1851: FILE: drivers/infiniband/core/mad.c:1392:
+			printk(KERN_NOTICE PFX "No receive handler for client "
+			       "%p on port %d\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1868: FILE: drivers/infiniband/core/mad.c:1409:
+		printk(KERN_ERR PFX "MAD received with unsupported base "

WARNING:SPLIT_STRING: quoted string split across lines
#1869: FILE: drivers/infiniband/core/mad.c:1410:
+		printk(KERN_ERR PFX "MAD received with unsupported base "
+		       "version %d\n", mad->mad_hdr.base_version);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'mad->mad_hdr.mgmt_class == IB_MGMT_CLASS_SUBN_LID_ROUTED'
#1874: FILE: drivers/infiniband/core/mad.c:1415:
+	if ((mad->mad_hdr.mgmt_class == IB_MGMT_CLASS_SUBN_LID_ROUTED) ||
+	    (mad->mad_hdr.mgmt_class == IB_MGMT_CLASS_SUBN_DIRECTED_ROUTE)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'mad->mad_hdr.mgmt_class == IB_MGMT_CLASS_SUBN_DIRECTED_ROUTE'
#1874: FILE: drivers/infiniband/core/mad.c:1415:
+	if ((mad->mad_hdr.mgmt_class == IB_MGMT_CLASS_SUBN_LID_ROUTED) ||
+	    (mad->mad_hdr.mgmt_class == IB_MGMT_CLASS_SUBN_DIRECTED_ROUTE)) {

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1961: FILE: drivers/infiniband/core/mad.c:1502:
+		mad_agent_priv->agent.recv_handler(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1971: FILE: drivers/infiniband/core/mad.c:1512:
+		mad_agent_priv->agent.recv_handler(

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1991: FILE: drivers/infiniband/core/mad.c:1532:
+		printk(KERN_ERR PFX "ib_mad_recv_done_handler no memory "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ib_mad_recv_done_handler', this function's name, in a string
#1991: FILE: drivers/infiniband/core/mad.c:1532:
+		printk(KERN_ERR PFX "ib_mad_recv_done_handler no memory "

WARNING:SPLIT_STRING: quoted string split across lines
#1992: FILE: drivers/infiniband/core/mad.c:1533:
+		printk(KERN_ERR PFX "ib_mad_recv_done_handler no memory "
+		       "for response buffer\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2045: FILE: drivers/infiniband/core/mad.c:1586:
+			printk(KERN_ERR PFX "No memory for response MAD\n");

CHECK:BRACES: braces {} should be used on all arms of this statement
#2086: FILE: drivers/infiniband/core/mad.c:1627:
+	if (response) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2090: FILE: drivers/infiniband/core/mad.c:1631:
+	} else

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'mad_agent_priv->qp_info->port_priv->wq'
#2114: FILE: drivers/infiniband/core/mad.c:1655:
+			queue_delayed_work(mad_agent_priv->qp_info->
+					   port_priv->wq,

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2121: FILE: drivers/infiniband/core/mad.c:1662:
+			      struct ib_mad_send_wr_private *mad_send_wr )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2183: FILE: drivers/infiniband/core/mad.c:1724:
+	if (mad_send_wr->status != IB_WC_SUCCESS )

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2222: FILE: drivers/infiniband/core/mad.c:1763:
+		queued_send_wr = container_of(mad_list,
+					struct ib_mad_send_wr_private,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2239: FILE: drivers/infiniband/core/mad.c:1780:
+		ret = ib_post_send(qp_info->qp, &queued_send_wr->send_wr,
+				&bad_send_wr);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2241: FILE: drivers/infiniband/core/mad.c:1782:
+			printk(KERN_ERR PFX "ib_post_send failed: %d\n", ret);

CHECK:BRACES: braces {} should be used on all arms of this statement
#2290: FILE: drivers/infiniband/core/mad.c:1831:
+		if (mad_send_wr->retry) {
[...]
+		} else
[...]

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2296: FILE: drivers/infiniband/core/mad.c:1837:
+			ret = ib_post_send(qp_info->qp, &mad_send_wr->send_wr,
+					&bad_send_wr);

CHECK:BRACES: Unbalanced braces around else statement
#2299: FILE: drivers/infiniband/core/mad.c:1840:
+		} else

WARNING:SIZEOF_PARENTHESIS: sizeof *attr should be sizeof(*attr)
#2305: FILE: drivers/infiniband/core/mad.c:1846:
+		attr = kmalloc(sizeof *attr, GFP_KERNEL);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2313: FILE: drivers/infiniband/core/mad.c:1854:
+				printk(KERN_ERR PFX "mad_error_handler - "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'mad_error_handler', this function's name, in a string
#2313: FILE: drivers/infiniband/core/mad.c:1854:
+				printk(KERN_ERR PFX "mad_error_handler - "

WARNING:SPLIT_STRING: quoted string split across lines
#2314: FILE: drivers/infiniband/core/mad.c:1855:
+				printk(KERN_ERR PFX "mad_error_handler - "
+				       "ib_modify_qp to RTS : %d\n", ret);

CHECK:BRACES: braces {} should be used on all arms of this statement
#2334: FILE: drivers/infiniband/core/mad.c:1875:
+		if (wc.status == IB_WC_SUCCESS) {
[...]
+		} else
[...]

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2343: FILE: drivers/infiniband/core/mad.c:1884:
+				BUG_ON(1);

CHECK:BRACES: Unbalanced braces around else statement
#2346: FILE: drivers/infiniband/core/mad.c:1887:
+		} else

ERROR:CODE_INDENT: code indent should use tabs where possible
#2364: FILE: drivers/infiniband/core/mad.c:1905:
+ ^I^I^Imad_send_wr->status = IB_WC_WR_FLUSH_ERR;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2364: FILE: drivers/infiniband/core/mad.c:1905:
+ ^I^I^Imad_send_wr->status = IB_WC_WR_FLUSH_ERR;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2364: FILE: drivers/infiniband/core/mad.c:1905:
+ ^I^I^Imad_send_wr->status = IB_WC_WR_FLUSH_ERR;$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2410: FILE: drivers/infiniband/core/mad.c:1951:
+void ib_cancel_mad(struct ib_mad_agent *mad_agent,
+		  u64 wr_id)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2495: FILE: drivers/infiniband/core/mad.c:2036:
+				snoop_recv(mad_agent_priv->qp_info,
+					  &local->mad_priv->header.recv_wc,

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2497: FILE: drivers/infiniband/core/mad.c:2038:
+			mad_agent_priv->agent.recv_handler(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2508: FILE: drivers/infiniband/core/mad.c:2049:
+			snoop_send(mad_agent_priv->qp_info, &local->send_wr,
+				  &mad_send_wc,

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'mad_agent_priv->qp_info->port_priv->wq'
#2544: FILE: drivers/infiniband/core/mad.c:2085:
+			queue_delayed_work(mad_agent_priv->qp_info->
+					   port_priv->wq,

WARNING:SIZEOF_PARENTHESIS: sizeof *mad_priv should be sizeof(*mad_priv)
#2584: FILE: drivers/infiniband/core/mad.c:2125:
+	sg_list.length = sizeof *mad_priv - sizeof mad_priv->header;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2601: FILE: drivers/infiniband/core/mad.c:2142:
+				printk(KERN_ERR PFX "No memory for receive buffer\n");

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'qp_info->port_priv->device->dma_device'
#2607: FILE: drivers/infiniband/core/mad.c:2148:
+		sg_list.addr = dma_map_single(qp_info->port_priv->
+						device->dma_device,

WARNING:SIZEOF_PARENTHESIS: sizeof *mad_priv should be sizeof(*mad_priv)
#2609: FILE: drivers/infiniband/core/mad.c:2150:
+					sizeof *mad_priv -

WARNING:SIZEOF_PARENTHESIS: sizeof mad_priv->header should be sizeof(mad_priv->header)
#2610: FILE: drivers/infiniband/core/mad.c:2151:
+						sizeof mad_priv->header,

WARNING:SIZEOF_PARENTHESIS: sizeof *mad_priv should be sizeof(*mad_priv)
#2630: FILE: drivers/infiniband/core/mad.c:2171:
+					 sizeof *mad_priv -

WARNING:SIZEOF_PARENTHESIS: sizeof mad_priv->header should be sizeof(mad_priv->header)
#2631: FILE: drivers/infiniband/core/mad.c:2172:
+					   sizeof mad_priv->header,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2634: FILE: drivers/infiniband/core/mad.c:2175:
+			printk(KERN_ERR PFX "ib_post_recv failed: %d\n", ret);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#2652: FILE: drivers/infiniband/core/mad.c:2193:
+	while (!list_empty(&qp_info->recv_queue.list)) {
+

WARNING:SIZEOF_PARENTHESIS: sizeof *attr should be sizeof(*attr)
#2685: FILE: drivers/infiniband/core/mad.c:2226:
+	attr = kmalloc(sizeof *attr, GFP_KERNEL);

ERROR:CODE_INDENT: code indent should use tabs where possible
#2686: FILE: drivers/infiniband/core/mad.c:2227:
+ ^Iif (!attr) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2686: FILE: drivers/infiniband/core/mad.c:2227:
+ ^Iif (!attr) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2686: FILE: drivers/infiniband/core/mad.c:2227:
+ ^Iif (!attr) {$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2687: FILE: drivers/infiniband/core/mad.c:2228:
+		printk(KERN_ERR PFX "Couldn't kmalloc ib_qp_attr\n");

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#2687: FILE: drivers/infiniband/core/mad.c:2228:
+ 	if (!attr) {
+		printk(KERN_ERR PFX "Couldn't kmalloc ib_qp_attr\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2703: FILE: drivers/infiniband/core/mad.c:2244:
+			printk(KERN_ERR PFX "Couldn't change QP%d state to "

WARNING:SPLIT_STRING: quoted string split across lines
#2704: FILE: drivers/infiniband/core/mad.c:2245:
+			printk(KERN_ERR PFX "Couldn't change QP%d state to "
+			       "INIT: %d\n", i, ret);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2711: FILE: drivers/infiniband/core/mad.c:2252:
+			printk(KERN_ERR PFX "Couldn't change QP%d state to "

WARNING:SPLIT_STRING: quoted string split across lines
#2712: FILE: drivers/infiniband/core/mad.c:2253:
+			printk(KERN_ERR PFX "Couldn't change QP%d state to "
+			       "RTR: %d\n", i, ret);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2720: FILE: drivers/infiniband/core/mad.c:2261:
+			printk(KERN_ERR PFX "Couldn't change QP%d state to "

WARNING:SPLIT_STRING: quoted string split across lines
#2721: FILE: drivers/infiniband/core/mad.c:2262:
+			printk(KERN_ERR PFX "Couldn't change QP%d state to "
+			       "RTS: %d\n", i, ret);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2728: FILE: drivers/infiniband/core/mad.c:2269:
+		printk(KERN_ERR PFX "Failed to request completion "

WARNING:SPLIT_STRING: quoted string split across lines
#2729: FILE: drivers/infiniband/core/mad.c:2270:
+		printk(KERN_ERR PFX "Failed to request completion "
+		       "notification: %d\n", ret);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2736: FILE: drivers/infiniband/core/mad.c:2277:
+			printk(KERN_ERR PFX "Couldn't post receive WRs\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2750: FILE: drivers/infiniband/core/mad.c:2291:
+	printk(KERN_ERR PFX "Fatal error (%d) on MAD QP (%d)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2751: FILE: drivers/infiniband/core/mad.c:2292:
+	printk(KERN_ERR PFX "Fatal error (%d) on MAD QP (%d)\n",
+		event->event, qp_info->qp->qp_num);

WARNING:SIZEOF_PARENTHESIS: sizeof qp_init_attr should be sizeof(qp_init_attr)
#2782: FILE: drivers/infiniband/core/mad.c:2323:
+	memset(&qp_init_attr, 0, sizeof qp_init_attr);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2797: FILE: drivers/infiniband/core/mad.c:2338:
+		printk(KERN_ERR PFX "Couldn't create ib_mad QP%d\n",

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#2815: FILE: drivers/infiniband/core/mad.c:2356:
+	if (qp_info->snoop_table)
+		kfree(qp_info->snoop_table);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#2833: FILE: drivers/infiniband/core/mad.c:2374:
+		printk(KERN_DEBUG PFX "%s port %d already open\n",

WARNING:SIZEOF_PARENTHESIS: sizeof *port_priv should be sizeof(*port_priv)
#2839: FILE: drivers/infiniband/core/mad.c:2380:
+	port_priv = kmalloc(sizeof *port_priv, GFP_KERNEL);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2841: FILE: drivers/infiniband/core/mad.c:2382:
+		printk(KERN_ERR PFX "No memory for ib_mad_port_private\n");

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#2841: FILE: drivers/infiniband/core/mad.c:2382:
+	if (!port_priv) {
+		printk(KERN_ERR PFX "No memory for ib_mad_port_private\n");

WARNING:SIZEOF_PARENTHESIS: sizeof *port_priv should be sizeof(*port_priv)
#2844: FILE: drivers/infiniband/core/mad.c:2385:
+	memset(port_priv, 0, sizeof *port_priv);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2858: FILE: drivers/infiniband/core/mad.c:2399:
+		printk(KERN_ERR PFX "Couldn't create ib_mad CQ\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2865: FILE: drivers/infiniband/core/mad.c:2406:
+		printk(KERN_ERR PFX "Couldn't create ib_mad PD\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2872: FILE: drivers/infiniband/core/mad.c:2413:
+		printk(KERN_ERR PFX "Couldn't get ib_mad DMA MR\n");

WARNING:SIZEOF_PARENTHESIS: sizeof name should be sizeof(name)
#2884: FILE: drivers/infiniband/core/mad.c:2425:
+	snprintf(name, sizeof name, "ib_mad%d", port_num);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2894: FILE: drivers/infiniband/core/mad.c:2435:
+		printk(KERN_ERR PFX "Couldn't start port\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!port_priv"
#2935: FILE: drivers/infiniband/core/mad.c:2476:
+	if (port_priv == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2937: FILE: drivers/infiniband/core/mad.c:2478:
+		printk(KERN_ERR PFX "Port %d not found\n", port_num);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2974: FILE: drivers/infiniband/core/mad.c:2515:
+			printk(KERN_ERR PFX "Couldn't open %s port %d\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2980: FILE: drivers/infiniband/core/mad.c:2521:
+			printk(KERN_ERR PFX "Couldn't open %s port %d "

WARNING:SPLIT_STRING: quoted string split across lines
#2981: FILE: drivers/infiniband/core/mad.c:2522:
+			printk(KERN_ERR PFX "Couldn't open %s port %d "
+			       "for agents\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2994: FILE: drivers/infiniband/core/mad.c:2535:
+			printk(KERN_ERR PFX "Couldn't close %s port %d "

WARNING:SPLIT_STRING: quoted string split across lines
#2995: FILE: drivers/infiniband/core/mad.c:2536:
+			printk(KERN_ERR PFX "Couldn't close %s port %d "
+			       "for agents\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3000: FILE: drivers/infiniband/core/mad.c:2541:
+			printk(KERN_ERR PFX "Couldn't close %s port %d\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3024: FILE: drivers/infiniband/core/mad.c:2565:
+			printk(KERN_ERR PFX "Couldn't close %s port %d "

WARNING:SPLIT_STRING: quoted string split across lines
#3025: FILE: drivers/infiniband/core/mad.c:2566:
+			printk(KERN_ERR PFX "Couldn't close %s port %d "
+			       "for agents\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3032: FILE: drivers/infiniband/core/mad.c:2573:
+			printk(KERN_ERR PFX "Couldn't close %s port %d\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3060: FILE: drivers/infiniband/core/mad.c:2601:
+		printk(KERN_ERR PFX "Couldn't create ib_mad cache\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3068: FILE: drivers/infiniband/core/mad.c:2609:
+		printk(KERN_ERR PFX "Couldn't register ib_mad client\n");

WARNING:BRACES: braces {} are not necessary for single statement blocks
#3085: FILE: drivers/infiniband/core/mad.c:2626:
+	if (kmem_cache_destroy(ib_mad_cache)) {
+		printk(KERN_DEBUG PFX "Failed to destroy ib_mad cache\n");
+	}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#3086: FILE: drivers/infiniband/core/mad.c:2627:
+		printk(KERN_DEBUG PFX "Failed to destroy ib_mad cache\n");

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000221948.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 15 errors, 149 warnings, 61 checks, 3040 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000221948.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
