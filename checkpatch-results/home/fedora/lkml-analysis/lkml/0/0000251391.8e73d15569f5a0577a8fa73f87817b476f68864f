CHECK:LINE_SPACING: Please don't use multiple blank lines
#121: FILE: kernel/spinlock.c:36:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#136: FILE: kernel/spinlock.c:49:
+		if (preempt_count() > 1)
[...]
+		else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#138: FILE: kernel/spinlock.c:51:
+		else {

WARNING:USE_LOCKDEP: Where possible, use lockdep_assert_held instead of assertions based on spin_is_locked
#141: FILE: kernel/spinlock.c:54:
+				while (spin_is_locked(lock))

lockdep_assert_held() annotations should be preferred over
assertions based on spin_is_locked()

See: https://www.kernel.org/doc/html/latest/locking/lockdep-design.html#annotations

CHECK:BRACES: braces {} should be used on all arms of this statement
#157: FILE: kernel/spinlock.c:67:
+		if (preempt_count() > 1)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#159: FILE: kernel/spinlock.c:69:
+		else {

WARNING:USE_LOCKDEP: Where possible, use lockdep_assert_held instead of assertions based on spin_is_locked
#163: FILE: kernel/spinlock.c:73:
+				while (spin_is_locked(lock))

CHECK:BRACES: braces {} should be used on all arms of this statement
#182: FILE: kernel/spinlock.c:89:
+		if (preempt_count() > 1)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#184: FILE: kernel/spinlock.c:91:
+		else {

WARNING:USE_LOCKDEP: Where possible, use lockdep_assert_held instead of assertions based on spin_is_locked
#188: FILE: kernel/spinlock.c:95:
+				while (spin_is_locked(lock))

CHECK:BRACES: braces {} should be used on all arms of this statement
#203: FILE: kernel/spinlock.c:110:
+		if (preempt_count() > 1)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#205: FILE: kernel/spinlock.c:112:
+		else {

WARNING:USE_LOCKDEP: Where possible, use lockdep_assert_held instead of assertions based on spin_is_locked
#209: FILE: kernel/spinlock.c:116:
+				while (spin_is_locked(lock))

CHECK:BRACES: braces {} should be used on all arms of this statement
#223: FILE: kernel/spinlock.c:129:
+		if (preempt_count() > 1)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#225: FILE: kernel/spinlock.c:131:
+		else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#246: FILE: kernel/spinlock.c:147:
+		if (preempt_count() > 1)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#248: FILE: kernel/spinlock.c:149:
+		else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#272: FILE: kernel/spinlock.c:169:
+		if (preempt_count() > 1)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#274: FILE: kernel/spinlock.c:171:
+		else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#297: FILE: kernel/spinlock.c:190:
+		if (preempt_count() > 1)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#299: FILE: kernel/spinlock.c:192:
+		else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#323: FILE: kernel/spinlock.c:216:
+		if (preempt_count() > 1)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#325: FILE: kernel/spinlock.c:218:
+		else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#345: FILE: kernel/spinlock.c:234:
+		if (preempt_count() > 1)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#347: FILE: kernel/spinlock.c:236:
+		else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#370: FILE: kernel/spinlock.c:256:
+		if (preempt_count() > 1)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#372: FILE: kernel/spinlock.c:258:
+		else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#395: FILE: kernel/spinlock.c:277:
+		if (preempt_count() > 1)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#397: FILE: kernel/spinlock.c:279:
+		else {

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#547: FILE: kernel/spinlock.c:415:
+EXPORT_SYMBOL(_write_lock);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#548: FILE: kernel/spinlock.c:416:
+EXPORT_SYMBOL(_read_lock);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#549: FILE: kernel/spinlock.c:417:
+EXPORT_SYMBOL(_spin_lock_irq);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#550: FILE: kernel/spinlock.c:418:
+EXPORT_SYMBOL(_spin_lock_irqsave);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#551: FILE: kernel/spinlock.c:419:
+EXPORT_SYMBOL(_spin_lock_bh);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#552: FILE: kernel/spinlock.c:420:
+EXPORT_SYMBOL(_read_lock_irq);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#553: FILE: kernel/spinlock.c:421:
+EXPORT_SYMBOL(_read_lock_irqsave);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#554: FILE: kernel/spinlock.c:422:
+EXPORT_SYMBOL(_read_lock_bh);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#555: FILE: kernel/spinlock.c:423:
+EXPORT_SYMBOL(_write_lock_irq);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#556: FILE: kernel/spinlock.c:424:
+EXPORT_SYMBOL(_write_lock_irqsave);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000251391.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 0 errors, 14 warnings, 25 checks, 465 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000251391.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
