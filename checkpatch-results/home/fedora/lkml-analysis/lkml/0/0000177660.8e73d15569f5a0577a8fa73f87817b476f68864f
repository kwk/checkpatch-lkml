WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#65: 
diff -Nurp -X linux-RT/Documentation/dontdiff linux-RT/arch/x86_64/kernel/apic.c linux-RT.mich/arch/x86_64/kernel/apic.c

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#201: FILE: arch/x86_64/kernel/process.c:167:
+		BUG_ON(raw_irqs_disabled());

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:TRAILING_WHITESPACE: trailing whitespace
#274: FILE: arch/x86_64/kernel/smp.c:364:
+^Iraw_local_irq_enable(); $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LONG_LINE: line length of 174 exceeds 100 columns
#334: FILE: include/asm-x86_64/system.h:312:
+#define __raw_local_save_flags(x)	do { warn_if_not_ulong(x); __asm__ __volatile__("# save_flags \n\t pushfq ; popq %q0":"=g" (x): /* no input */ :"memory"); } while (0)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#334: FILE: include/asm-x86_64/system.h:312:
+#define __raw_local_save_flags(x)	do { warn_if_not_ulong(x); __asm__ __volatile__("# save_flags \n\t pushfq ; popq %q0":"=g" (x): /* no input */ :"memory"); } while (0)
                                  	                                                                                     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#334: FILE: include/asm-x86_64/system.h:312:
+#define __raw_local_save_flags(x)	do { warn_if_not_ulong(x); __asm__ __volatile__("# save_flags \n\t pushfq ; popq %q0":"=g" (x): /* no input */ :"memory"); } while (0)
                                  	                                                                                              ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#334: FILE: include/asm-x86_64/system.h:312:
+#define __raw_local_save_flags(x)	do { warn_if_not_ulong(x); __asm__ __volatile__("# save_flags \n\t pushfq ; popq %q0":"=g" (x): /* no input */ :"memory"); } while (0)
                                  	                                                                                                               ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#334: FILE: include/asm-x86_64/system.h:312:
+#define __raw_local_save_flags(x)	do { warn_if_not_ulong(x); __asm__ __volatile__("# save_flags \n\t pushfq ; popq %q0":"=g" (x): /* no input */ :"memory"); } while (0)

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#334: FILE: include/asm-x86_64/system.h:312:
+#define __raw_local_save_flags(x)	do { warn_if_not_ulong(x); __asm__ __volatile__("# save_flags \n\t pushfq ; popq %q0":"=g" (x): /* no input */ :"memory"); } while (0)

WARNING:LONG_LINE: line length of 142 exceeds 100 columns
#335: FILE: include/asm-x86_64/system.h:313:
+#define __raw_local_irq_restore(x) 	__asm__ __volatile__("# restore_flags \n\t pushq %0 ; popfq": /* no output */ :"g" (x):"memory", "cc")

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#335: FILE: include/asm-x86_64/system.h:313:
+#define __raw_local_irq_restore(x) ^I__asm__ __volatile__("# restore_flags \n\t pushq %0 ; popfq": /* no output */ :"g" (x):"memory", "cc")$

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#335: FILE: include/asm-x86_64/system.h:313:
+#define __raw_local_irq_restore(x) 	__asm__ __volatile__("# restore_flags \n\t pushq %0 ; popfq": /* no output */ :"g" (x):"memory", "cc")
                                    	                                                            ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#335: FILE: include/asm-x86_64/system.h:313:
+#define __raw_local_irq_restore(x) 	__asm__ __volatile__("# restore_flags \n\t pushq %0 ; popfq": /* no output */ :"g" (x):"memory", "cc")
                                    	                                                                              ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#335: FILE: include/asm-x86_64/system.h:313:
+#define __raw_local_irq_restore(x) 	__asm__ __volatile__("# restore_flags \n\t pushq %0 ; popfq": /* no output */ :"g" (x):"memory", "cc")
                                    	                                                                                      ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#335: FILE: include/asm-x86_64/system.h:313:
+#define __raw_local_irq_restore(x) 	__asm__ __volatile__("# restore_flags \n\t pushq %0 ; popfq": /* no output */ :"g" (x):"memory", "cc")

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#335: FILE: include/asm-x86_64/system.h:313:
+#define __raw_local_irq_restore(x) 	__asm__ __volatile__("# restore_flags \n\t pushq %0 ; popfq": /* no output */ :"g" (x):"memory", "cc")

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#336: FILE: include/asm-x86_64/system.h:314:
+#define __raw_local_irq_disable() ^I__asm__ __volatile__("cli": : :"memory")$

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#336: FILE: include/asm-x86_64/system.h:314:
+#define __raw_local_irq_disable() 	__asm__ __volatile__("cli": : :"memory")
                                   	                          ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#336: FILE: include/asm-x86_64/system.h:314:
+#define __raw_local_irq_disable() 	__asm__ __volatile__("cli": : :"memory")
                                   	                              ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#336: FILE: include/asm-x86_64/system.h:314:
+#define __raw_local_irq_disable() 	__asm__ __volatile__("cli": : :"memory")

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#337: FILE: include/asm-x86_64/system.h:315:
+#define __raw_local_irq_enable()	__asm__ __volatile__("sti": : :"memory")
                                 	                          ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#337: FILE: include/asm-x86_64/system.h:315:
+#define __raw_local_irq_enable()	__asm__ __volatile__("sti": : :"memory")
                                 	                              ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#337: FILE: include/asm-x86_64/system.h:315:
+#define __raw_local_irq_enable()	__asm__ __volatile__("sti": : :"memory")

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#340: FILE: include/asm-x86_64/system.h:317:
+#define __raw_safe_halt()		__asm__ __volatile__("sti; hlt": : :"memory")
                          		                               ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#340: FILE: include/asm-x86_64/system.h:317:
+#define __raw_safe_halt()		__asm__ __volatile__("sti; hlt": : :"memory")
                          		                                   ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#340: FILE: include/asm-x86_64/system.h:317:
+#define __raw_safe_halt()		__asm__ __volatile__("sti; hlt": : :"memory")

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'flags' may be better as '(flags)' to avoid precedence issues
#345: FILE: include/asm-x86_64/system.h:319:
+#define __raw_irqs_disabled_flags(flags)	\
+({						\
+	!(flags & (1<<9));			\
 })

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#347: FILE: include/asm-x86_64/system.h:321:
+	!(flags & (1<<9));			\
 	            ^

WARNING:LONG_LINE: line length of 183 exceeds 100 columns
#364: FILE: include/asm-x86_64/system.h:332:
+#define __raw_local_irq_save(x) 	do { warn_if_not_ulong(x); __asm__ __volatile__("# local_irq_save \n\t pushfq ; popq %0 ; cli":"=g" (x): /* no input */ :"memory"); } while (0)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#364: FILE: include/asm-x86_64/system.h:332:
+#define __raw_local_irq_save(x) ^Ido { warn_if_not_ulong(x); __asm__ __volatile__("# local_irq_save \n\t pushfq ; popq %0 ; cli":"=g" (x): /* no input */ :"memory"); } while (0)$

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#364: FILE: include/asm-x86_64/system.h:332:
+#define __raw_local_irq_save(x) 	do { warn_if_not_ulong(x); __asm__ __volatile__("# local_irq_save \n\t pushfq ; popq %0 ; cli":"=g" (x): /* no input */ :"memory"); } while (0)
                                 	                                                                                              ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#364: FILE: include/asm-x86_64/system.h:332:
+#define __raw_local_irq_save(x) 	do { warn_if_not_ulong(x); __asm__ __volatile__("# local_irq_save \n\t pushfq ; popq %0 ; cli":"=g" (x): /* no input */ :"memory"); } while (0)
                                 	                                                                                                       ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#364: FILE: include/asm-x86_64/system.h:332:
+#define __raw_local_irq_save(x) 	do { warn_if_not_ulong(x); __asm__ __volatile__("# local_irq_save \n\t pushfq ; popq %0 ; cli":"=g" (x): /* no input */ :"memory"); } while (0)
                                 	                                                                                                                        ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#364: FILE: include/asm-x86_64/system.h:332:
+#define __raw_local_irq_save(x) 	do { warn_if_not_ulong(x); __asm__ __volatile__("# local_irq_save \n\t pushfq ; popq %0 ; cli":"=g" (x): /* no input */ :"memory"); } while (0)

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#364: FILE: include/asm-x86_64/system.h:332:
+#define __raw_local_irq_save(x) 	do { warn_if_not_ulong(x); __asm__ __volatile__("# local_irq_save \n\t pushfq ; popq %0 ; cli":"=g" (x): /* no input */ :"memory"); } while (0)

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#368: FILE: include/asm-x86_64/system.h:336:
+#define safe_halt()	do { local_irq_enable(); __asm__ __volatile__("hlt": : :"memory"); } while (0)

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#368: FILE: include/asm-x86_64/system.h:336:
+#define safe_halt()	do { local_irq_enable(); __asm__ __volatile__("hlt": : :"memory"); } while (0)
                    	                                                   ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#368: FILE: include/asm-x86_64/system.h:336:
+#define safe_halt()	do { local_irq_enable(); __asm__ __volatile__("hlt": : :"memory"); } while (0)
                    	                                                       ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000177660.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 19 errors, 12 warnings, 7 checks, 257 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000177660.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
