WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#78: FILE: net/irda/irlmp.c:1311:
+	 * that we have looped around... - Jean II */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#80: FILE: net/irda/irlmp.c:1313:
+	IRDA_DEBUG(4, __FUNCTION__ "() : %d lsaps to scan\n", lsap_todo);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#85: FILE: net/irda/irlmp.c:1318:
+	 * so we will go through this loop only once. - Jean II */

ERROR:SPACING: space required before the open parenthesis '('
#86: FILE: net/irda/irlmp.c:1319:
+	while((lsap_todo--) &&

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#90: FILE: net/irda/irlmp.c:1323:
+		if(next != NULL) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#90: FILE: net/irda/irlmp.c:1323:
+		if(next != NULL) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "next"
#90: FILE: net/irda/irlmp.c:1323:
+		if(next != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#93: FILE: net/irda/irlmp.c:1326:
+			 * so we always avoid this loop. - Jean II */

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#94: FILE: net/irda/irlmp.c:1327:
+			IRDA_DEBUG(4, __FUNCTION__ "() : searching my LSAP\n");

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#97: FILE: net/irda/irlmp.c:1330:
+			 * might have gone away... - Jean II */

CHECK:SPACING: No space is necessary after a cast
#98: FILE: net/irda/irlmp.c:1331:
+			curr = (struct lsap_cb *) hashbin_get_first(self->lsaps);

ERROR:SPACING: space prohibited before that close parenthesis ')'
#99: FILE: net/irda/irlmp.c:1332:
+			while((curr != NULL ) && (curr != next))

ERROR:SPACING: space required before the open parenthesis '('
#99: FILE: net/irda/irlmp.c:1332:
+			while((curr != NULL ) && (curr != next))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "curr"
#99: FILE: net/irda/irlmp.c:1332:
+			while((curr != NULL ) && (curr != next))

CHECK:SPACING: No space is necessary after a cast
#100: FILE: net/irda/irlmp.c:1333:
+				curr = (struct lsap_cb *) hashbin_get_next(self->lsaps);

CHECK:BRACES: Unbalanced braces around else statement
#101: FILE: net/irda/irlmp.c:1334:
+		} else

ERROR:SPACING: space required before the open parenthesis '('
#105: FILE: net/irda/irlmp.c:1338:
+		if(curr == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!curr"
#105: FILE: net/irda/irlmp.c:1338:
+		if(curr == NULL)

CHECK:SPACING: No space is necessary after a cast
#106: FILE: net/irda/irlmp.c:1339:
+			curr = (struct lsap_cb *) hashbin_get_first(self->lsaps);

ERROR:SPACING: space required before the open parenthesis '('
#108: FILE: net/irda/irlmp.c:1341:
+		if(curr == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!curr"
#108: FILE: net/irda/irlmp.c:1341:
+		if(curr == NULL)

CHECK:SPACING: No space is necessary after a cast
#112: FILE: net/irda/irlmp.c:1345:
+		self->flow_next = (struct lsap_cb *) hashbin_get_next(self->lsaps);

WARNING:LONG_LINE: line length of 201 exceeds 100 columns
#113: FILE: net/irda/irlmp.c:1346:
+		IRDA_DEBUG(4, __FUNCTION__ "() : curr is %p, next was %p and is now %p, still %d to go - queue len = %d\n", curr, next, self->flow_next, lsap_todo, IRLAP_GET_TX_QUEUE_LEN(self->irlap));

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#113: FILE: net/irda/irlmp.c:1346:
+		IRDA_DEBUG(4, __FUNCTION__ "() : curr is %p, next was %p and is now %p, still %d to go - queue len = %d\n", curr, next, self->flow_next, lsap_todo, IRLAP_GET_TX_QUEUE_LEN(self->irlap));

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "curr->notify.flow_indication"
#116: FILE: net/irda/irlmp.c:1349:
+		if (curr->notify.flow_indication != NULL)

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#120: FILE: net/irda/irlmp.c:1353:
+			IRDA_DEBUG(1, __FUNCTION__ "(), no handler\n");

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000459715.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 6 errors, 9 warnings, 11 checks, 72 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000459715.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
