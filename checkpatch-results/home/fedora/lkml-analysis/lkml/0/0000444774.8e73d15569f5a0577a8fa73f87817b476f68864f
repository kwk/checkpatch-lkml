WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#67: 
diff -urP -I \$Id:.*Exp \$ -X /usr/src/patch.exclude linux-2.5.27-ingo-H6-org/arch/i386/config.in linux/arch/i386/config.in

WARNING:LONG_LINE: line length of 113 exceeds 100 columns
#86: FILE: include/asm-i386/system.h:315:
+#define _local_irq_restore(x) 	__asm__ __volatile__("pushl %0 ; popfl": /* no output */ :"g" (x):"memory", "cc")

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#86: FILE: include/asm-i386/system.h:315:
+#define _local_irq_restore(x) ^I__asm__ __volatile__("pushl %0 ; popfl": /* no output */ :"g" (x):"memory", "cc")$

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#86: FILE: include/asm-i386/system.h:315:
+#define _local_irq_restore(x) 	__asm__ __volatile__("pushl %0 ; popfl": /* no output */ :"g" (x):"memory", "cc")
                               	                                       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#86: FILE: include/asm-i386/system.h:315:
+#define _local_irq_restore(x) 	__asm__ __volatile__("pushl %0 ; popfl": /* no output */ :"g" (x):"memory", "cc")
                               	                                                         ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#86: FILE: include/asm-i386/system.h:315:
+#define _local_irq_restore(x) 	__asm__ __volatile__("pushl %0 ; popfl": /* no output */ :"g" (x):"memory", "cc")
                               	                                                                 ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#86: FILE: include/asm-i386/system.h:315:
+#define _local_irq_restore(x) 	__asm__ __volatile__("pushl %0 ; popfl": /* no output */ :"g" (x):"memory", "cc")

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#89: FILE: include/asm-i386/system.h:317:
+#define _local_irq_enable()	__asm__ __volatile__("sti": : :"memory")
                            	                          ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#89: FILE: include/asm-i386/system.h:317:
+#define _local_irq_enable()	__asm__ __volatile__("sti": : :"memory")
                            	                              ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#89: FILE: include/asm-i386/system.h:317:
+#define _local_irq_enable()	__asm__ __volatile__("sti": : :"memory")

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#91: FILE: include/asm-i386/system.h:319:
+#define test_preempt() if (unlikely(! current_thread_info()->preempt_count)){ \
                                     ^

ERROR:SPACING: space required before the open brace '{'
#91: FILE: include/asm-i386/system.h:319:
+#define test_preempt() if (unlikely(! current_thread_info()->preempt_count)){ \

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#91: FILE: include/asm-i386/system.h:319:
+#define test_preempt() if (unlikely(! current_thread_info()->preempt_count)){ \
+		printk("bad: irq_restore() with preemption_enabled!\n");\
+		show_stack(NULL); } 

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#92: FILE: include/asm-i386/system.h:320:
+		printk("bad: irq_restore() with preemption_enabled!\n");\

ERROR:TRAILING_WHITESPACE: trailing whitespace
#93: FILE: include/asm-i386/system.h:321:
+^I^Ishow_stack(NULL); } $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#98: FILE: include/asm-i386/system.h:326:
+                do { _local_irq_enable(); test_preempt(); } while(0)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#98: FILE: include/asm-i386/system.h:326:
+                do { _local_irq_enable(); test_preempt(); } while(0)$

ERROR:SPACING: space required before the open parenthesis '('
#98: FILE: include/asm-i386/system.h:326:
+                do { _local_irq_enable(); test_preempt(); } while(0)

ERROR:CODE_INDENT: code indent should use tabs where possible
#100: FILE: include/asm-i386/system.h:328:
+                do { _local_irq_restore(x); test_preempt(); } while(0)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#100: FILE: include/asm-i386/system.h:328:
+                do { _local_irq_restore(x); test_preempt(); } while(0)$

ERROR:SPACING: space required before the open parenthesis '('
#100: FILE: include/asm-i386/system.h:328:
+                do { _local_irq_restore(x); test_preempt(); } while(0)

ERROR:CODE_INDENT: code indent should use tabs where possible
#102: FILE: include/asm-i386/system.h:330:
+                do { _local_irq_enable(); preempt_check_resched() ; } while(0)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#102: FILE: include/asm-i386/system.h:330:
+                do { _local_irq_enable(); preempt_check_resched() ; } while(0)$

ERROR:SPACING: space required before the open parenthesis '('
#102: FILE: include/asm-i386/system.h:330:
+                do { _local_irq_enable(); preempt_check_resched() ; } while(0)

ERROR:CODE_INDENT: code indent should use tabs where possible
#104: FILE: include/asm-i386/system.h:332:
+                do { _local_irq_restore(x);  preempt_check_resched(); } while(0)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#104: FILE: include/asm-i386/system.h:332:
+                do { _local_irq_restore(x);  preempt_check_resched(); } while(0)$

ERROR:SPACING: space required before the open parenthesis '('
#104: FILE: include/asm-i386/system.h:332:
+                do { _local_irq_restore(x);  preempt_check_resched(); } while(0)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#106: FILE: include/asm-i386/system.h:334:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LONG_LINE: line length of 123 exceeds 100 columns
#118: FILE: include/linux/spinlock.h:29:
+#define spin_unlock_irqrestore(lock, flags)	do { _raw_spin_unlock(lock);  local_irq_restore_preempt(flags); } while (0)

WARNING:LONG_LINE: line length of 123 exceeds 100 columns
#121: FILE: include/linux/spinlock.h:31:
+#define spin_unlock_irq(lock)			do { _raw_spin_unlock(lock);  local_irq_enable_preempt();       } while (0)

WARNING:LONG_LINE: line length of 123 exceeds 100 columns
#126: FILE: include/linux/spinlock.h:34:
+#define read_unlock_irqrestore(lock, flags)	do { _raw_read_unlock(lock);  local_irq_restore_preempt(flags); } while (0)

WARNING:LONG_LINE: line length of 117 exceeds 100 columns
#127: FILE: include/linux/spinlock.h:35:
+#define read_unlock_irq(lock)			do { _raw_read_unlock(lock);  local_irq_enable_preempt(); } while (0)

WARNING:LONG_LINE: line length of 123 exceeds 100 columns
#132: FILE: include/linux/spinlock.h:38:
+#define write_unlock_irqrestore(lock, flags)	do { _raw_write_unlock(lock); local_irq_restore_preempt(flags); } while (0)

WARNING:LONG_LINE: line length of 123 exceeds 100 columns
#133: FILE: include/linux/spinlock.h:39:
+#define write_unlock_irq(lock)			do { _raw_write_unlock(lock); local_irq_enable_preempt();       } while (0)

ERROR:CODE_INDENT: code indent should use tabs where possible
#149: FILE: kernel/fork.c:757:
+        local_irq_restore_preempt(flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#149: FILE: kernel/fork.c:757:
+        local_irq_restore_preempt(flags);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#160: FILE: kernel/sched.c:910:
+                return;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#160: FILE: kernel/sched.c:910:
+                return;$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000444774.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 20 errors, 16 warnings, 2 checks, 87 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000444774.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
