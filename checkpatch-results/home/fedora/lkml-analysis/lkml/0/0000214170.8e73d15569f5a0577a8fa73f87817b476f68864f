WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#55: 
This patch contains the code that enables us to access the previous kernel's

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#101: FILE: drivers/char/mem.c:239:
+static ssize_t read_oldmem(struct file * file, char * buf,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#101: FILE: drivers/char/mem.c:239:
+static ssize_t read_oldmem(struct file * file, char * buf,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#102: FILE: drivers/char/mem.c:240:
+static ssize_t read_oldmem(struct file * file, char * buf,
+				size_t count, loff_t *ppos)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#105: FILE: drivers/char/mem.c:243:
+	unsigned backup_start, backup_end, relocate_start;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#106: FILE: drivers/char/mem.c:244:
+	size_t read=0, csize;
 	           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#112: FILE: drivers/char/mem.c:250:
+	while(count) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pfn >= backup_start'
#118: FILE: drivers/char/mem.c:256:
+		if ((pfn >= backup_start) && (pfn < backup_end)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pfn < backup_end'
#118: FILE: drivers/char/mem.c:256:
+		if ((pfn >= backup_start) && (pfn < backup_end)) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#118: FILE: drivers/char/mem.c:256:
+		if ((pfn >= backup_start) && (pfn < backup_end)) {
[...]
+		} else if (pfn < (CRASH_RELOCATE_SIZE / PAGE_SIZE))
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:CONST_STRUCT: struct file_operations should normally be const
#165: FILE: drivers/char/mem.c:641:
+static struct file_operations oldmem_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

ERROR:SPACING: space required after that ',' (ctx:VxV)
#191: FILE: drivers/char/mem.c:736:
+	{12,"oldmem",    S_IRUSR | S_IWUSR | S_IRGRP, &oldmem_fops},
 	   ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IWUSR | S_IRGRP' are not preferred. Consider using octal permissions '0640'.
#191: FILE: drivers/char/mem.c:736:
+	{12,"oldmem",    S_IRUSR | S_IWUSR | S_IRGRP, &oldmem_fops},

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000214170.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 5 errors, 4 warnings, 4 checks, 117 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000214170.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
